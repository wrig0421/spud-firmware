
spudglo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  0800b754  0800b754  0001b754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9a4  0800b9a4  00020168  2**0
                  CONTENTS
  4 .ARM          00000008  0800b9a4  0800b9a4  0001b9a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b9ac  0800b9ac  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9ac  0800b9ac  0001b9ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b9b0  0800b9b0  0001b9b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  0800b9b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d78  20000168  0800bb1c  00020168  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002ee0  0800bb1c  00022ee0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025340  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000537d  00000000  00000000  000454d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fb8  00000000  00000000  0004a858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e30  00000000  00000000  0004c810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002989e  00000000  00000000  0004e640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002816f  00000000  00000000  00077ede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8d06  00000000  00000000  000a004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00198d53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f64  00000000  00000000  00198da4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  001a1d08  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  001a1d2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000168 	.word	0x20000168
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b73c 	.word	0x0800b73c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000016c 	.word	0x2000016c
 80001cc:	0800b73c 	.word	0x0800b73c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ac0:	f000 b974 	b.w	8000dac <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	468e      	mov	lr, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d14d      	bne.n	8000b86 <__udivmoddi4+0xaa>
 8000aea:	428a      	cmp	r2, r1
 8000aec:	4694      	mov	ip, r2
 8000aee:	d969      	bls.n	8000bc4 <__udivmoddi4+0xe8>
 8000af0:	fab2 f282 	clz	r2, r2
 8000af4:	b152      	cbz	r2, 8000b0c <__udivmoddi4+0x30>
 8000af6:	fa01 f302 	lsl.w	r3, r1, r2
 8000afa:	f1c2 0120 	rsb	r1, r2, #32
 8000afe:	fa20 f101 	lsr.w	r1, r0, r1
 8000b02:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b06:	ea41 0e03 	orr.w	lr, r1, r3
 8000b0a:	4094      	lsls	r4, r2
 8000b0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b10:	0c21      	lsrs	r1, r4, #16
 8000b12:	fbbe f6f8 	udiv	r6, lr, r8
 8000b16:	fa1f f78c 	uxth.w	r7, ip
 8000b1a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b1e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b22:	fb06 f107 	mul.w	r1, r6, r7
 8000b26:	4299      	cmp	r1, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x64>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b32:	f080 811f 	bcs.w	8000d74 <__udivmoddi4+0x298>
 8000b36:	4299      	cmp	r1, r3
 8000b38:	f240 811c 	bls.w	8000d74 <__udivmoddi4+0x298>
 8000b3c:	3e02      	subs	r6, #2
 8000b3e:	4463      	add	r3, ip
 8000b40:	1a5b      	subs	r3, r3, r1
 8000b42:	b2a4      	uxth	r4, r4
 8000b44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b48:	fb08 3310 	mls	r3, r8, r0, r3
 8000b4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b50:	fb00 f707 	mul.w	r7, r0, r7
 8000b54:	42a7      	cmp	r7, r4
 8000b56:	d90a      	bls.n	8000b6e <__udivmoddi4+0x92>
 8000b58:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b60:	f080 810a 	bcs.w	8000d78 <__udivmoddi4+0x29c>
 8000b64:	42a7      	cmp	r7, r4
 8000b66:	f240 8107 	bls.w	8000d78 <__udivmoddi4+0x29c>
 8000b6a:	4464      	add	r4, ip
 8000b6c:	3802      	subs	r0, #2
 8000b6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b72:	1be4      	subs	r4, r4, r7
 8000b74:	2600      	movs	r6, #0
 8000b76:	b11d      	cbz	r5, 8000b80 <__udivmoddi4+0xa4>
 8000b78:	40d4      	lsrs	r4, r2
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b80:	4631      	mov	r1, r6
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d909      	bls.n	8000b9e <__udivmoddi4+0xc2>
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	f000 80ef 	beq.w	8000d6e <__udivmoddi4+0x292>
 8000b90:	2600      	movs	r6, #0
 8000b92:	e9c5 0100 	strd	r0, r1, [r5]
 8000b96:	4630      	mov	r0, r6
 8000b98:	4631      	mov	r1, r6
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	fab3 f683 	clz	r6, r3
 8000ba2:	2e00      	cmp	r6, #0
 8000ba4:	d14a      	bne.n	8000c3c <__udivmoddi4+0x160>
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d302      	bcc.n	8000bb0 <__udivmoddi4+0xd4>
 8000baa:	4282      	cmp	r2, r0
 8000bac:	f200 80f9 	bhi.w	8000da2 <__udivmoddi4+0x2c6>
 8000bb0:	1a84      	subs	r4, r0, r2
 8000bb2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	469e      	mov	lr, r3
 8000bba:	2d00      	cmp	r5, #0
 8000bbc:	d0e0      	beq.n	8000b80 <__udivmoddi4+0xa4>
 8000bbe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bc2:	e7dd      	b.n	8000b80 <__udivmoddi4+0xa4>
 8000bc4:	b902      	cbnz	r2, 8000bc8 <__udivmoddi4+0xec>
 8000bc6:	deff      	udf	#255	; 0xff
 8000bc8:	fab2 f282 	clz	r2, r2
 8000bcc:	2a00      	cmp	r2, #0
 8000bce:	f040 8092 	bne.w	8000cf6 <__udivmoddi4+0x21a>
 8000bd2:	eba1 010c 	sub.w	r1, r1, ip
 8000bd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bda:	fa1f fe8c 	uxth.w	lr, ip
 8000bde:	2601      	movs	r6, #1
 8000be0:	0c20      	lsrs	r0, r4, #16
 8000be2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000be6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bee:	fb0e f003 	mul.w	r0, lr, r3
 8000bf2:	4288      	cmp	r0, r1
 8000bf4:	d908      	bls.n	8000c08 <__udivmoddi4+0x12c>
 8000bf6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bfa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x12a>
 8000c00:	4288      	cmp	r0, r1
 8000c02:	f200 80cb 	bhi.w	8000d9c <__udivmoddi4+0x2c0>
 8000c06:	4643      	mov	r3, r8
 8000c08:	1a09      	subs	r1, r1, r0
 8000c0a:	b2a4      	uxth	r4, r4
 8000c0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c10:	fb07 1110 	mls	r1, r7, r0, r1
 8000c14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c18:	fb0e fe00 	mul.w	lr, lr, r0
 8000c1c:	45a6      	cmp	lr, r4
 8000c1e:	d908      	bls.n	8000c32 <__udivmoddi4+0x156>
 8000c20:	eb1c 0404 	adds.w	r4, ip, r4
 8000c24:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c28:	d202      	bcs.n	8000c30 <__udivmoddi4+0x154>
 8000c2a:	45a6      	cmp	lr, r4
 8000c2c:	f200 80bb 	bhi.w	8000da6 <__udivmoddi4+0x2ca>
 8000c30:	4608      	mov	r0, r1
 8000c32:	eba4 040e 	sub.w	r4, r4, lr
 8000c36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c3a:	e79c      	b.n	8000b76 <__udivmoddi4+0x9a>
 8000c3c:	f1c6 0720 	rsb	r7, r6, #32
 8000c40:	40b3      	lsls	r3, r6
 8000c42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c52:	431c      	orrs	r4, r3
 8000c54:	40f9      	lsrs	r1, r7
 8000c56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c62:	0c20      	lsrs	r0, r4, #16
 8000c64:	fa1f fe8c 	uxth.w	lr, ip
 8000c68:	fb09 1118 	mls	r1, r9, r8, r1
 8000c6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c70:	fb08 f00e 	mul.w	r0, r8, lr
 8000c74:	4288      	cmp	r0, r1
 8000c76:	fa02 f206 	lsl.w	r2, r2, r6
 8000c7a:	d90b      	bls.n	8000c94 <__udivmoddi4+0x1b8>
 8000c7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c80:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c84:	f080 8088 	bcs.w	8000d98 <__udivmoddi4+0x2bc>
 8000c88:	4288      	cmp	r0, r1
 8000c8a:	f240 8085 	bls.w	8000d98 <__udivmoddi4+0x2bc>
 8000c8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c92:	4461      	add	r1, ip
 8000c94:	1a09      	subs	r1, r1, r0
 8000c96:	b2a4      	uxth	r4, r4
 8000c98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000ca0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ca4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ca8:	458e      	cmp	lr, r1
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x1e2>
 8000cac:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000cb4:	d26c      	bcs.n	8000d90 <__udivmoddi4+0x2b4>
 8000cb6:	458e      	cmp	lr, r1
 8000cb8:	d96a      	bls.n	8000d90 <__udivmoddi4+0x2b4>
 8000cba:	3802      	subs	r0, #2
 8000cbc:	4461      	add	r1, ip
 8000cbe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cc2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cc6:	eba1 010e 	sub.w	r1, r1, lr
 8000cca:	42a1      	cmp	r1, r4
 8000ccc:	46c8      	mov	r8, r9
 8000cce:	46a6      	mov	lr, r4
 8000cd0:	d356      	bcc.n	8000d80 <__udivmoddi4+0x2a4>
 8000cd2:	d053      	beq.n	8000d7c <__udivmoddi4+0x2a0>
 8000cd4:	b15d      	cbz	r5, 8000cee <__udivmoddi4+0x212>
 8000cd6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cda:	eb61 010e 	sbc.w	r1, r1, lr
 8000cde:	fa01 f707 	lsl.w	r7, r1, r7
 8000ce2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ce6:	40f1      	lsrs	r1, r6
 8000ce8:	431f      	orrs	r7, r3
 8000cea:	e9c5 7100 	strd	r7, r1, [r5]
 8000cee:	2600      	movs	r6, #0
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	f1c2 0320 	rsb	r3, r2, #32
 8000cfa:	40d8      	lsrs	r0, r3
 8000cfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d00:	fa21 f303 	lsr.w	r3, r1, r3
 8000d04:	4091      	lsls	r1, r2
 8000d06:	4301      	orrs	r1, r0
 8000d08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0c:	fa1f fe8c 	uxth.w	lr, ip
 8000d10:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d14:	fb07 3610 	mls	r6, r7, r0, r3
 8000d18:	0c0b      	lsrs	r3, r1, #16
 8000d1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d1e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d22:	429e      	cmp	r6, r3
 8000d24:	fa04 f402 	lsl.w	r4, r4, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x260>
 8000d2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d32:	d22f      	bcs.n	8000d94 <__udivmoddi4+0x2b8>
 8000d34:	429e      	cmp	r6, r3
 8000d36:	d92d      	bls.n	8000d94 <__udivmoddi4+0x2b8>
 8000d38:	3802      	subs	r0, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1b9b      	subs	r3, r3, r6
 8000d3e:	b289      	uxth	r1, r1
 8000d40:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d44:	fb07 3316 	mls	r3, r7, r6, r3
 8000d48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d4c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d50:	428b      	cmp	r3, r1
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x28a>
 8000d54:	eb1c 0101 	adds.w	r1, ip, r1
 8000d58:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d5c:	d216      	bcs.n	8000d8c <__udivmoddi4+0x2b0>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d914      	bls.n	8000d8c <__udivmoddi4+0x2b0>
 8000d62:	3e02      	subs	r6, #2
 8000d64:	4461      	add	r1, ip
 8000d66:	1ac9      	subs	r1, r1, r3
 8000d68:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d6c:	e738      	b.n	8000be0 <__udivmoddi4+0x104>
 8000d6e:	462e      	mov	r6, r5
 8000d70:	4628      	mov	r0, r5
 8000d72:	e705      	b.n	8000b80 <__udivmoddi4+0xa4>
 8000d74:	4606      	mov	r6, r0
 8000d76:	e6e3      	b.n	8000b40 <__udivmoddi4+0x64>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	e6f8      	b.n	8000b6e <__udivmoddi4+0x92>
 8000d7c:	454b      	cmp	r3, r9
 8000d7e:	d2a9      	bcs.n	8000cd4 <__udivmoddi4+0x1f8>
 8000d80:	ebb9 0802 	subs.w	r8, r9, r2
 8000d84:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d88:	3801      	subs	r0, #1
 8000d8a:	e7a3      	b.n	8000cd4 <__udivmoddi4+0x1f8>
 8000d8c:	4646      	mov	r6, r8
 8000d8e:	e7ea      	b.n	8000d66 <__udivmoddi4+0x28a>
 8000d90:	4620      	mov	r0, r4
 8000d92:	e794      	b.n	8000cbe <__udivmoddi4+0x1e2>
 8000d94:	4640      	mov	r0, r8
 8000d96:	e7d1      	b.n	8000d3c <__udivmoddi4+0x260>
 8000d98:	46d0      	mov	r8, sl
 8000d9a:	e77b      	b.n	8000c94 <__udivmoddi4+0x1b8>
 8000d9c:	3b02      	subs	r3, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	e732      	b.n	8000c08 <__udivmoddi4+0x12c>
 8000da2:	4630      	mov	r0, r6
 8000da4:	e709      	b.n	8000bba <__udivmoddi4+0xde>
 8000da6:	4464      	add	r4, ip
 8000da8:	3802      	subs	r0, #2
 8000daa:	e742      	b.n	8000c32 <__udivmoddi4+0x156>

08000dac <__aeabi_idiv0>:
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop

08000db0 <current_monitor_ratio>:
float g_max_current_ratio = 1.0f;
p_current_t gp_current_monitor_strip[NUM_STRIPS];


float current_monitor_ratio(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
    return g_max_current_ratio;
 8000db4:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <current_monitor_ratio+0x18>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	ee07 3a90 	vmov	s15, r3
}
 8000dbc:	eeb0 0a67 	vmov.f32	s0, s15
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	20000000 	.word	0x20000000

08000dcc <current_monitor_init>:


void current_monitor_init(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
    while ((g_max_current_ratio * ((float)CURRENT_MONITOR_MAX_CURRENT_PER_LED_MA / 1000) * NUM_LEDS) > (float)CURRENT_MONITOR_MAX_CURRENT_DRAW_A)
 8000dd0:	e009      	b.n	8000de6 <current_monitor_init+0x1a>
    {
        g_max_current_ratio -= 0.05f;
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <current_monitor_init+0x5c>)
 8000dd4:	edd3 7a00 	vldr	s15, [r3]
 8000dd8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000e2c <current_monitor_init+0x60>
 8000ddc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000de0:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <current_monitor_init+0x5c>)
 8000de2:	edc3 7a00 	vstr	s15, [r3]
    while ((g_max_current_ratio * ((float)CURRENT_MONITOR_MAX_CURRENT_PER_LED_MA / 1000) * NUM_LEDS) > (float)CURRENT_MONITOR_MAX_CURRENT_DRAW_A)
 8000de6:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <current_monitor_init+0x5c>)
 8000de8:	edd3 7a00 	vldr	s15, [r3]
 8000dec:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000e30 <current_monitor_init+0x64>
 8000df0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000df4:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 8000df8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dfc:	eeb2 7a03 	vmov.f32	s14, #35	; 0x41180000  9.5
 8000e00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e08:	dce3      	bgt.n	8000dd2 <current_monitor_init+0x6>
    }
    if (g_max_current_ratio <= 0) while(1); // broken..
 8000e0a:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <current_monitor_init+0x5c>)
 8000e0c:	edd3 7a00 	vldr	s15, [r3]
 8000e10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e18:	d900      	bls.n	8000e1c <current_monitor_init+0x50>
    //g_max_current_ratio = 1.0f;
}
 8000e1a:	e000      	b.n	8000e1e <current_monitor_init+0x52>
    if (g_max_current_ratio <= 0) while(1); // broken..
 8000e1c:	e7fe      	b.n	8000e1c <current_monitor_init+0x50>
}
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	3d4ccccd 	.word	0x3d4ccccd
 8000e30:	3d23d70a 	.word	0x3d23d70a

08000e34 <animate_led_show_strip>:
 * @brief   Write data stored in `gp_ws28128b_strip` array to the strip
 * @param   strip_mask - the strip to write to
 * @return  void
 */
void animate_led_show_strip(const strip_mask_t strip_mask)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	80fb      	strh	r3, [r7, #6]
    if (strip_mask & STRIP_BIT_1)
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <animate_led_show_strip+0x18>
    {
        ws2812b_show_strip_one();
 8000e48:	f001 f8ba 	bl	8001fc0 <ws2812b_show_strip_one>
    {
        // STRIP_BIT_3
        ws2812b_show_strip_three();
    }
#endif
}
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <animate_led_set_pixel>:


void animate_led_set_pixel(const strip_mask_t mask, const uint16_t pixel, const uint8_t red, const uint8_t green,
                           const uint8_t blue)
{
 8000e54:	b590      	push	{r4, r7, lr}
 8000e56:	b087      	sub	sp, #28
 8000e58:	af02      	add	r7, sp, #8
 8000e5a:	4604      	mov	r4, r0
 8000e5c:	4608      	mov	r0, r1
 8000e5e:	4611      	mov	r1, r2
 8000e60:	461a      	mov	r2, r3
 8000e62:	4623      	mov	r3, r4
 8000e64:	80fb      	strh	r3, [r7, #6]
 8000e66:	4603      	mov	r3, r0
 8000e68:	80bb      	strh	r3, [r7, #4]
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	70fb      	strb	r3, [r7, #3]
 8000e6e:	4613      	mov	r3, r2
 8000e70:	70bb      	strb	r3, [r7, #2]
    if (STRIP_BIT_ALL_SET == mask)
 8000e72:	88fb      	ldrh	r3, [r7, #6]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d11c      	bne.n	8000eb2 <animate_led_set_pixel+0x5e>
    {
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000e78:	2301      	movs	r3, #1
 8000e7a:	73fb      	strb	r3, [r7, #15]
 8000e7c:	e015      	b.n	8000eaa <animate_led_set_pixel+0x56>
        {
            //offset = animate_led_get_strip_offset(strip_bit);
            if (ws2812_pixel_is_in_strip_range(strip_bit, pixel)) ws2812b_set_led(strip_bit, pixel, red, green, blue);
 8000e7e:	88ba      	ldrh	r2, [r7, #4]
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
 8000e82:	4611      	mov	r1, r2
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 fefb 	bl	8001c80 <ws2812_pixel_is_in_strip_range>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d009      	beq.n	8000ea4 <animate_led_set_pixel+0x50>
 8000e90:	78bc      	ldrb	r4, [r7, #2]
 8000e92:	78fa      	ldrb	r2, [r7, #3]
 8000e94:	88b9      	ldrh	r1, [r7, #4]
 8000e96:	7bf8      	ldrb	r0, [r7, #15]
 8000e98:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	4623      	mov	r3, r4
 8000ea0:	f000 ff08 	bl	8001cb4 <ws2812b_set_led>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	73fb      	strb	r3, [r7, #15]
 8000eaa:	7bfb      	ldrb	r3, [r7, #15]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d9e6      	bls.n	8000e7e <animate_led_set_pixel+0x2a>
                if (ws2812_pixel_is_in_strip_range(strip_bit, pixel)) ws2812b_set_led(strip_bit, pixel, red, green, blue);
            }
        }
    }
    //animate_led_show_strip(mask);
}
 8000eb0:	e020      	b.n	8000ef4 <animate_led_set_pixel+0xa0>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	73bb      	strb	r3, [r7, #14]
 8000eb6:	e01a      	b.n	8000eee <animate_led_set_pixel+0x9a>
            if (mask & strip_bit)
 8000eb8:	88fa      	ldrh	r2, [r7, #6]
 8000eba:	7bbb      	ldrb	r3, [r7, #14]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d012      	beq.n	8000ee8 <animate_led_set_pixel+0x94>
                if (ws2812_pixel_is_in_strip_range(strip_bit, pixel)) ws2812b_set_led(strip_bit, pixel, red, green, blue);
 8000ec2:	88ba      	ldrh	r2, [r7, #4]
 8000ec4:	7bbb      	ldrb	r3, [r7, #14]
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f000 fed9 	bl	8001c80 <ws2812_pixel_is_in_strip_range>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d009      	beq.n	8000ee8 <animate_led_set_pixel+0x94>
 8000ed4:	78bc      	ldrb	r4, [r7, #2]
 8000ed6:	78fa      	ldrb	r2, [r7, #3]
 8000ed8:	88b9      	ldrh	r1, [r7, #4]
 8000eda:	7bb8      	ldrb	r0, [r7, #14]
 8000edc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	4623      	mov	r3, r4
 8000ee4:	f000 fee6 	bl	8001cb4 <ws2812b_set_led>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000ee8:	7bbb      	ldrb	r3, [r7, #14]
 8000eea:	3301      	adds	r3, #1
 8000eec:	73bb      	strb	r3, [r7, #14]
 8000eee:	7bbb      	ldrb	r3, [r7, #14]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d9e1      	bls.n	8000eb8 <animate_led_set_pixel+0x64>
}
 8000ef4:	bf00      	nop
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd90      	pop	{r4, r7, pc}

08000efc <animate_led_set_all_pixels>:


void animate_led_set_all_pixels(const strip_mask_t mask, const uint8_t red, const uint8_t green, const uint8_t blue)
{
 8000efc:	b590      	push	{r4, r7, lr}
 8000efe:	b089      	sub	sp, #36	; 0x24
 8000f00:	af02      	add	r7, sp, #8
 8000f02:	4604      	mov	r4, r0
 8000f04:	4608      	mov	r0, r1
 8000f06:	4611      	mov	r1, r2
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4623      	mov	r3, r4
 8000f0c:	80fb      	strh	r3, [r7, #6]
 8000f0e:	4603      	mov	r3, r0
 8000f10:	717b      	strb	r3, [r7, #5]
 8000f12:	460b      	mov	r3, r1
 8000f14:	713b      	strb	r3, [r7, #4]
 8000f16:	4613      	mov	r3, r2
 8000f18:	70fb      	strb	r3, [r7, #3]
    uint16_t strip_size = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	81fb      	strh	r3, [r7, #14]
    if (mask == g_all_strip_mask)
 8000f1e:	4b2b      	ldr	r3, [pc, #172]	; (8000fcc <animate_led_set_all_pixels+0xd0>)
 8000f20:	881b      	ldrh	r3, [r3, #0]
 8000f22:	88fa      	ldrh	r2, [r7, #6]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d122      	bne.n	8000f6e <animate_led_set_all_pixels+0x72>
    {
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000f28:	2301      	movs	r3, #1
 8000f2a:	75fb      	strb	r3, [r7, #23]
 8000f2c:	e01b      	b.n	8000f66 <animate_led_set_all_pixels+0x6a>
        {
            strip_size = ws2812_get_strip_size(strip_bit);
 8000f2e:	7dfb      	ldrb	r3, [r7, #23]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f000 fe41 	bl	8001bb8 <ws2812_get_strip_size>
 8000f36:	4603      	mov	r3, r0
 8000f38:	81fb      	strh	r3, [r7, #14]
            //offset = animate_led_get_strip_offset(strip_bit);
            for (uint16_t iii = 0; iii < strip_size; iii++) ws2812b_set_led(strip_bit, iii, red, green, blue);
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	82bb      	strh	r3, [r7, #20]
 8000f3e:	e00b      	b.n	8000f58 <animate_led_set_all_pixels+0x5c>
 8000f40:	793c      	ldrb	r4, [r7, #4]
 8000f42:	797a      	ldrb	r2, [r7, #5]
 8000f44:	8ab9      	ldrh	r1, [r7, #20]
 8000f46:	7df8      	ldrb	r0, [r7, #23]
 8000f48:	78fb      	ldrb	r3, [r7, #3]
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	4623      	mov	r3, r4
 8000f4e:	f000 feb1 	bl	8001cb4 <ws2812b_set_led>
 8000f52:	8abb      	ldrh	r3, [r7, #20]
 8000f54:	3301      	adds	r3, #1
 8000f56:	82bb      	strh	r3, [r7, #20]
 8000f58:	8aba      	ldrh	r2, [r7, #20]
 8000f5a:	89fb      	ldrh	r3, [r7, #14]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d3ef      	bcc.n	8000f40 <animate_led_set_all_pixels+0x44>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000f60:	7dfb      	ldrb	r3, [r7, #23]
 8000f62:	3301      	adds	r3, #1
 8000f64:	75fb      	strb	r3, [r7, #23]
 8000f66:	7dfb      	ldrb	r3, [r7, #23]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d9e0      	bls.n	8000f2e <animate_led_set_all_pixels+0x32>
 8000f6c:	e026      	b.n	8000fbc <animate_led_set_all_pixels+0xc0>
        }
    }
    else
    {
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000f6e:	2301      	movs	r3, #1
 8000f70:	74fb      	strb	r3, [r7, #19]
 8000f72:	e020      	b.n	8000fb6 <animate_led_set_all_pixels+0xba>
        {
            if (mask & strip_bit)
 8000f74:	88fa      	ldrh	r2, [r7, #6]
 8000f76:	7cfb      	ldrb	r3, [r7, #19]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d018      	beq.n	8000fb0 <animate_led_set_all_pixels+0xb4>
            {
                strip_size = ws2812_get_strip_size(strip_bit);
 8000f7e:	7cfb      	ldrb	r3, [r7, #19]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f000 fe19 	bl	8001bb8 <ws2812_get_strip_size>
 8000f86:	4603      	mov	r3, r0
 8000f88:	81fb      	strh	r3, [r7, #14]
                for (uint16_t yyy = 0; yyy < strip_size; yyy++) ws2812b_set_led(strip_bit, yyy, red, green, blue);
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	823b      	strh	r3, [r7, #16]
 8000f8e:	e00b      	b.n	8000fa8 <animate_led_set_all_pixels+0xac>
 8000f90:	793c      	ldrb	r4, [r7, #4]
 8000f92:	797a      	ldrb	r2, [r7, #5]
 8000f94:	8a39      	ldrh	r1, [r7, #16]
 8000f96:	7cf8      	ldrb	r0, [r7, #19]
 8000f98:	78fb      	ldrb	r3, [r7, #3]
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	4623      	mov	r3, r4
 8000f9e:	f000 fe89 	bl	8001cb4 <ws2812b_set_led>
 8000fa2:	8a3b      	ldrh	r3, [r7, #16]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	823b      	strh	r3, [r7, #16]
 8000fa8:	8a3a      	ldrh	r2, [r7, #16]
 8000faa:	89fb      	ldrh	r3, [r7, #14]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d3ef      	bcc.n	8000f90 <animate_led_set_all_pixels+0x94>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000fb0:	7cfb      	ldrb	r3, [r7, #19]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	74fb      	strb	r3, [r7, #19]
 8000fb6:	7cfb      	ldrb	r3, [r7, #19]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d9db      	bls.n	8000f74 <animate_led_set_all_pixels+0x78>
            }
        }
    }
    animate_led_show_strip(mask);
 8000fbc:	88fb      	ldrh	r3, [r7, #6]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff ff38 	bl	8000e34 <animate_led_show_strip>
}
 8000fc4:	bf00      	nop
 8000fc6:	371c      	adds	r7, #28
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd90      	pop	{r4, r7, pc}
 8000fcc:	20000232 	.word	0x20000232

08000fd0 <animate_led_solid_custom_color>:
	}
}


void animate_led_solid_custom_color(const strip_mask_t mask_solid, const color_hex_code_e color_solid)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	6039      	str	r1, [r7, #0]
 8000fda:	80fb      	strh	r3, [r7, #6]
    uint8_t color_solid_rgb[sizeof(ws2812b_led_t)] = {0};
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <animate_led_solid_custom_color+0x40>)
 8000fde:	881b      	ldrh	r3, [r3, #0]
 8000fe0:	81bb      	strh	r3, [r7, #12]
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	73bb      	strb	r3, [r7, #14]
    color_led_hex_to_rgb(color_solid, color_solid_rgb);
 8000fe6:	f107 030c 	add.w	r3, r7, #12
 8000fea:	4619      	mov	r1, r3
 8000fec:	6838      	ldr	r0, [r7, #0]
 8000fee:	f000 fd5d 	bl	8001aac <color_led_hex_to_rgb>
    animate_led_set_all_pixels(mask_solid, color_solid_rgb[offsetof(ws2812b_led_t, red)],
 8000ff2:	7b39      	ldrb	r1, [r7, #12]
 8000ff4:	7b7a      	ldrb	r2, [r7, #13]
 8000ff6:	7bbb      	ldrb	r3, [r7, #14]
 8000ff8:	88f8      	ldrh	r0, [r7, #6]
 8000ffa:	f7ff ff7f 	bl	8000efc <animate_led_set_all_pixels>
                               color_solid_rgb[offsetof(ws2812b_led_t, green)],
                               color_solid_rgb[offsetof(ws2812b_led_t, blue)]);
    animate_led_show_strip(mask_solid);
 8000ffe:	88fb      	ldrh	r3, [r7, #6]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff17 	bl	8000e34 <animate_led_show_strip>
}
 8001006:	bf00      	nop
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	0800b754 	.word	0x0800b754

08001014 <animate_led_turn_all_pixels_off>:
 * @param   void
 * @return  void
 * @note    This function will set `gp_ws28128b_strip` array and write it to the strip(s).
 */
void animate_led_turn_all_pixels_off(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
	animate_led_set_all_pixels((strip_mask_t)STRIP_BIT_ALL_SET, 0, 0, 0);
 8001018:	2300      	movs	r3, #0
 800101a:	2200      	movs	r2, #0
 800101c:	2100      	movs	r1, #0
 800101e:	2001      	movs	r0, #1
 8001020:	f7ff ff6c 	bl	8000efc <animate_led_set_all_pixels>
}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}

08001028 <animate_led_only_spell_word>:
}


void animate_led_only_spell_word(const strip_mask_t mask_spell, const color_hex_code_e color_spell,
                                 const uint16_t time_ms)
{
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	ed2d 8b02 	vpush	{d8}
 800102e:	b089      	sub	sp, #36	; 0x24
 8001030:	af02      	add	r7, sp, #8
 8001032:	4603      	mov	r3, r0
 8001034:	6039      	str	r1, [r7, #0]
 8001036:	80fb      	strh	r3, [r7, #6]
 8001038:	4613      	mov	r3, r2
 800103a:	80bb      	strh	r3, [r7, #4]
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_spell);
 800103c:	88fb      	ldrh	r3, [r7, #6]
 800103e:	4618      	mov	r0, r3
 8001040:	f000 fdfc 	bl	8001c3c <ws2812_led_get_max_strip_size>
 8001044:	4603      	mov	r3, r0
 8001046:	827b      	strh	r3, [r7, #18]
    uint8_t color_spell_rgb[sizeof(ws2812b_led_t)] = {0};
 8001048:	4b26      	ldr	r3, [pc, #152]	; (80010e4 <animate_led_only_spell_word+0xbc>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	81bb      	strh	r3, [r7, #12]
 800104e:	2300      	movs	r3, #0
 8001050:	73bb      	strb	r3, [r7, #14]
    color_led_hex_to_rgb(color_spell, color_spell_rgb);
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	4619      	mov	r1, r3
 8001058:	6838      	ldr	r0, [r7, #0]
 800105a:	f000 fd27 	bl	8001aac <color_led_hex_to_rgb>
	for (int i = 0; i < strip_size; i++)
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	e034      	b.n	80010ce <animate_led_only_spell_word+0xa6>
	{
        if (task_button_press_interrupt_occurred())
 8001064:	f000 ffe4 	bl	8002030 <task_button_press_interrupt_occurred>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d00d      	beq.n	800108a <animate_led_only_spell_word+0x62>
        {
            if (task_button_press_check_interrupts(&color_spell_rgb[offsetof(ws2812b_led_t, red)], &color_spell_rgb[offsetof(ws2812b_led_t, green)], &color_spell_rgb[offsetof(ws2812b_led_t, blue)]))
 800106e:	f107 030c 	add.w	r3, r7, #12
 8001072:	1c9a      	adds	r2, r3, #2
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	1c59      	adds	r1, r3, #1
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	4618      	mov	r0, r3
 8001080:	f000 fffc 	bl	800207c <task_button_press_check_interrupts>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d126      	bne.n	80010d8 <animate_led_only_spell_word+0xb0>
            {
                return;
            }
        }
        animate_led_set_pixel(mask_spell, i,
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	b299      	uxth	r1, r3
 800108e:	7b3a      	ldrb	r2, [r7, #12]
 8001090:	7b7c      	ldrb	r4, [r7, #13]
 8001092:	7bbb      	ldrb	r3, [r7, #14]
 8001094:	88f8      	ldrh	r0, [r7, #6]
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	4623      	mov	r3, r4
 800109a:	f7ff fedb 	bl	8000e54 <animate_led_set_pixel>
                              color_spell_rgb[offsetof(ws2812b_led_t, red)],
                              color_spell_rgb[offsetof(ws2812b_led_t, green)],
                              color_spell_rgb[offsetof(ws2812b_led_t, blue)]);
        animate_led_show_strip(mask_spell);
 800109e:	88fb      	ldrh	r3, [r7, #6]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fec7 	bl	8000e34 <animate_led_show_strip>
 		task_led_ctrl_delay(time_ms / task_led_ctrl_speed());
 80010a6:	88bb      	ldrh	r3, [r7, #4]
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80010b0:	f001 f9d6 	bl	8002460 <task_led_ctrl_speed>
 80010b4:	eeb0 7a40 	vmov.f32	s14, s0
 80010b8:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80010bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010c0:	ee17 0a90 	vmov	r0, s15
 80010c4:	f001 f8fc 	bl	80022c0 <task_led_ctrl_delay>
	for (int i = 0; i < strip_size; i++)
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	3301      	adds	r3, #1
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	8a7b      	ldrh	r3, [r7, #18]
 80010d0:	697a      	ldr	r2, [r7, #20]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	dbc6      	blt.n	8001064 <animate_led_only_spell_word+0x3c>
 80010d6:	e000      	b.n	80010da <animate_led_only_spell_word+0xb2>
                return;
 80010d8:	bf00      	nop
	}
}
 80010da:	371c      	adds	r7, #28
 80010dc:	46bd      	mov	sp, r7
 80010de:	ecbd 8b02 	vpop	{d8}
 80010e2:	bd90      	pop	{r4, r7, pc}
 80010e4:	0800b754 	.word	0x0800b754

080010e8 <animate_led_fade_in_fade_out>:
    }
}


void animate_led_fade_in_fade_out(const strip_mask_t mask_fade, const color_hex_code_e color_fade)
{
 80010e8:	b5b0      	push	{r4, r5, r7, lr}
 80010ea:	b08a      	sub	sp, #40	; 0x28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	81fb      	strh	r3, [r7, #14]
    float r, g, b;
    uint8_t color_fade_rgb[sizeof(ws2812b_led_t)] = {0};
 80010f4:	4b9b      	ldr	r3, [pc, #620]	; (8001364 <animate_led_fade_in_fade_out+0x27c>)
 80010f6:	881b      	ldrh	r3, [r3, #0]
 80010f8:	823b      	strh	r3, [r7, #16]
 80010fa:	2300      	movs	r3, #0
 80010fc:	74bb      	strb	r3, [r7, #18]
    color_led_hex_to_rgb(color_fade, color_fade_rgb);
 80010fe:	f107 0310 	add.w	r3, r7, #16
 8001102:	4619      	mov	r1, r3
 8001104:	68b8      	ldr	r0, [r7, #8]
 8001106:	f000 fcd1 	bl	8001aac <color_led_hex_to_rgb>
    for (int iii = 0; iii < 256; iii++)
 800110a:	2300      	movs	r3, #0
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
 800110e:	e08b      	b.n	8001228 <animate_led_fade_in_fade_out+0x140>
    {
        if (task_button_press_interrupt_occurred())
 8001110:	f000 ff8e 	bl	8002030 <task_button_press_interrupt_occurred>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d00e      	beq.n	8001138 <animate_led_fade_in_fade_out+0x50>
        {
            if (task_button_press_check_interrupts(&color_fade_rgb[offsetof(ws2812b_led_t, red)], &color_fade_rgb[offsetof(ws2812b_led_t, green)], &color_fade_rgb[offsetof(ws2812b_led_t, blue)]))
 800111a:	f107 0310 	add.w	r3, r7, #16
 800111e:	1c9a      	adds	r2, r3, #2
 8001120:	f107 0310 	add.w	r3, r7, #16
 8001124:	1c59      	adds	r1, r3, #1
 8001126:	f107 0310 	add.w	r3, r7, #16
 800112a:	4618      	mov	r0, r3
 800112c:	f000 ffa6 	bl	800207c <task_button_press_check_interrupts>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	f040 810f 	bne.w	8001356 <animate_led_fade_in_fade_out+0x26e>
            {
                return;
            }
        }
        r = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, red)];
 8001138:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800113a:	f7ff f9eb 	bl	8000514 <__aeabi_i2d>
 800113e:	f04f 0200 	mov.w	r2, #0
 8001142:	4b89      	ldr	r3, [pc, #548]	; (8001368 <animate_led_fade_in_fade_out+0x280>)
 8001144:	f7ff fb7a 	bl	800083c <__aeabi_ddiv>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	4614      	mov	r4, r2
 800114e:	461d      	mov	r5, r3
 8001150:	7c3b      	ldrb	r3, [r7, #16]
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff f9de 	bl	8000514 <__aeabi_i2d>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4620      	mov	r0, r4
 800115e:	4629      	mov	r1, r5
 8001160:	f7ff fa42 	bl	80005e8 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4610      	mov	r0, r2
 800116a:	4619      	mov	r1, r3
 800116c:	f7ff fc4e 	bl	8000a0c <__aeabi_d2f>
 8001170:	4603      	mov	r3, r0
 8001172:	61fb      	str	r3, [r7, #28]
        g = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, green)];
 8001174:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001176:	f7ff f9cd 	bl	8000514 <__aeabi_i2d>
 800117a:	f04f 0200 	mov.w	r2, #0
 800117e:	4b7a      	ldr	r3, [pc, #488]	; (8001368 <animate_led_fade_in_fade_out+0x280>)
 8001180:	f7ff fb5c 	bl	800083c <__aeabi_ddiv>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4614      	mov	r4, r2
 800118a:	461d      	mov	r5, r3
 800118c:	7c7b      	ldrb	r3, [r7, #17]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff f9c0 	bl	8000514 <__aeabi_i2d>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	4620      	mov	r0, r4
 800119a:	4629      	mov	r1, r5
 800119c:	f7ff fa24 	bl	80005e8 <__aeabi_dmul>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	4610      	mov	r0, r2
 80011a6:	4619      	mov	r1, r3
 80011a8:	f7ff fc30 	bl	8000a0c <__aeabi_d2f>
 80011ac:	4603      	mov	r3, r0
 80011ae:	61bb      	str	r3, [r7, #24]
        b = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, blue)];
 80011b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011b2:	f7ff f9af 	bl	8000514 <__aeabi_i2d>
 80011b6:	f04f 0200 	mov.w	r2, #0
 80011ba:	4b6b      	ldr	r3, [pc, #428]	; (8001368 <animate_led_fade_in_fade_out+0x280>)
 80011bc:	f7ff fb3e 	bl	800083c <__aeabi_ddiv>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4614      	mov	r4, r2
 80011c6:	461d      	mov	r5, r3
 80011c8:	7cbb      	ldrb	r3, [r7, #18]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff f9a2 	bl	8000514 <__aeabi_i2d>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4620      	mov	r0, r4
 80011d6:	4629      	mov	r1, r5
 80011d8:	f7ff fa06 	bl	80005e8 <__aeabi_dmul>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4610      	mov	r0, r2
 80011e2:	4619      	mov	r1, r3
 80011e4:	f7ff fc12 	bl	8000a0c <__aeabi_d2f>
 80011e8:	4603      	mov	r3, r0
 80011ea:	617b      	str	r3, [r7, #20]
        animate_led_set_all_pixels(mask_fade, r, g, b);
 80011ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80011f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011f4:	edc7 7a01 	vstr	s15, [r7, #4]
 80011f8:	793b      	ldrb	r3, [r7, #4]
 80011fa:	b2d9      	uxtb	r1, r3
 80011fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001200:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001204:	edc7 7a01 	vstr	s15, [r7, #4]
 8001208:	793b      	ldrb	r3, [r7, #4]
 800120a:	b2da      	uxtb	r2, r3
 800120c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001210:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001214:	edc7 7a01 	vstr	s15, [r7, #4]
 8001218:	793b      	ldrb	r3, [r7, #4]
 800121a:	b2db      	uxtb	r3, r3
 800121c:	89f8      	ldrh	r0, [r7, #14]
 800121e:	f7ff fe6d 	bl	8000efc <animate_led_set_all_pixels>
    for (int iii = 0; iii < 256; iii++)
 8001222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001224:	3301      	adds	r3, #1
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
 8001228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122a:	2bff      	cmp	r3, #255	; 0xff
 800122c:	f77f af70 	ble.w	8001110 <animate_led_fade_in_fade_out+0x28>
    }
    for (int iii = 255; iii >= 0; iii = iii-2)
 8001230:	23ff      	movs	r3, #255	; 0xff
 8001232:	623b      	str	r3, [r7, #32]
 8001234:	e08a      	b.n	800134c <animate_led_fade_in_fade_out+0x264>
    {
        if (task_button_press_interrupt_occurred())
 8001236:	f000 fefb 	bl	8002030 <task_button_press_interrupt_occurred>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d00d      	beq.n	800125c <animate_led_fade_in_fade_out+0x174>
        {
            if (task_button_press_check_interrupts(&color_fade_rgb[offsetof(ws2812b_led_t, red)], &color_fade_rgb[offsetof(ws2812b_led_t, green)], &color_fade_rgb[offsetof(ws2812b_led_t, blue)]))
 8001240:	f107 0310 	add.w	r3, r7, #16
 8001244:	1c9a      	adds	r2, r3, #2
 8001246:	f107 0310 	add.w	r3, r7, #16
 800124a:	1c59      	adds	r1, r3, #1
 800124c:	f107 0310 	add.w	r3, r7, #16
 8001250:	4618      	mov	r0, r3
 8001252:	f000 ff13 	bl	800207c <task_button_press_check_interrupts>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d17e      	bne.n	800135a <animate_led_fade_in_fade_out+0x272>
            {
                return;
            }
        }
        r = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, red)];
 800125c:	6a38      	ldr	r0, [r7, #32]
 800125e:	f7ff f959 	bl	8000514 <__aeabi_i2d>
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	4b40      	ldr	r3, [pc, #256]	; (8001368 <animate_led_fade_in_fade_out+0x280>)
 8001268:	f7ff fae8 	bl	800083c <__aeabi_ddiv>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4614      	mov	r4, r2
 8001272:	461d      	mov	r5, r3
 8001274:	7c3b      	ldrb	r3, [r7, #16]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff f94c 	bl	8000514 <__aeabi_i2d>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4620      	mov	r0, r4
 8001282:	4629      	mov	r1, r5
 8001284:	f7ff f9b0 	bl	80005e8 <__aeabi_dmul>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	4610      	mov	r0, r2
 800128e:	4619      	mov	r1, r3
 8001290:	f7ff fbbc 	bl	8000a0c <__aeabi_d2f>
 8001294:	4603      	mov	r3, r0
 8001296:	61fb      	str	r3, [r7, #28]
        g = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, green)];
 8001298:	6a38      	ldr	r0, [r7, #32]
 800129a:	f7ff f93b 	bl	8000514 <__aeabi_i2d>
 800129e:	f04f 0200 	mov.w	r2, #0
 80012a2:	4b31      	ldr	r3, [pc, #196]	; (8001368 <animate_led_fade_in_fade_out+0x280>)
 80012a4:	f7ff faca 	bl	800083c <__aeabi_ddiv>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4614      	mov	r4, r2
 80012ae:	461d      	mov	r5, r3
 80012b0:	7c7b      	ldrb	r3, [r7, #17]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff f92e 	bl	8000514 <__aeabi_i2d>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4620      	mov	r0, r4
 80012be:	4629      	mov	r1, r5
 80012c0:	f7ff f992 	bl	80005e8 <__aeabi_dmul>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	f7ff fb9e 	bl	8000a0c <__aeabi_d2f>
 80012d0:	4603      	mov	r3, r0
 80012d2:	61bb      	str	r3, [r7, #24]
        b = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, blue)];
 80012d4:	6a38      	ldr	r0, [r7, #32]
 80012d6:	f7ff f91d 	bl	8000514 <__aeabi_i2d>
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	4b22      	ldr	r3, [pc, #136]	; (8001368 <animate_led_fade_in_fade_out+0x280>)
 80012e0:	f7ff faac 	bl	800083c <__aeabi_ddiv>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4614      	mov	r4, r2
 80012ea:	461d      	mov	r5, r3
 80012ec:	7cbb      	ldrb	r3, [r7, #18]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff f910 	bl	8000514 <__aeabi_i2d>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4620      	mov	r0, r4
 80012fa:	4629      	mov	r1, r5
 80012fc:	f7ff f974 	bl	80005e8 <__aeabi_dmul>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4610      	mov	r0, r2
 8001306:	4619      	mov	r1, r3
 8001308:	f7ff fb80 	bl	8000a0c <__aeabi_d2f>
 800130c:	4603      	mov	r3, r0
 800130e:	617b      	str	r3, [r7, #20]
        animate_led_set_all_pixels(mask_fade, r, g, b);
 8001310:	edd7 7a07 	vldr	s15, [r7, #28]
 8001314:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001318:	edc7 7a01 	vstr	s15, [r7, #4]
 800131c:	793b      	ldrb	r3, [r7, #4]
 800131e:	b2d9      	uxtb	r1, r3
 8001320:	edd7 7a06 	vldr	s15, [r7, #24]
 8001324:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001328:	edc7 7a01 	vstr	s15, [r7, #4]
 800132c:	793b      	ldrb	r3, [r7, #4]
 800132e:	b2da      	uxtb	r2, r3
 8001330:	edd7 7a05 	vldr	s15, [r7, #20]
 8001334:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001338:	edc7 7a01 	vstr	s15, [r7, #4]
 800133c:	793b      	ldrb	r3, [r7, #4]
 800133e:	b2db      	uxtb	r3, r3
 8001340:	89f8      	ldrh	r0, [r7, #14]
 8001342:	f7ff fddb 	bl	8000efc <animate_led_set_all_pixels>
    for (int iii = 255; iii >= 0; iii = iii-2)
 8001346:	6a3b      	ldr	r3, [r7, #32]
 8001348:	3b02      	subs	r3, #2
 800134a:	623b      	str	r3, [r7, #32]
 800134c:	6a3b      	ldr	r3, [r7, #32]
 800134e:	2b00      	cmp	r3, #0
 8001350:	f6bf af71 	bge.w	8001236 <animate_led_fade_in_fade_out+0x14e>
 8001354:	e002      	b.n	800135c <animate_led_fade_in_fade_out+0x274>
                return;
 8001356:	bf00      	nop
 8001358:	e000      	b.n	800135c <animate_led_fade_in_fade_out+0x274>
                return;
 800135a:	bf00      	nop
    }
}
 800135c:	3728      	adds	r7, #40	; 0x28
 800135e:	46bd      	mov	sp, r7
 8001360:	bdb0      	pop	{r4, r5, r7, pc}
 8001362:	bf00      	nop
 8001364:	0800b754 	.word	0x0800b754
 8001368:	40700000 	.word	0x40700000

0800136c <animate_led_twinkle>:
}


void animate_led_twinkle(const strip_mask_t twinkle_mask, const color_hex_code_e color_twinkle, const uint16_t count,
                         const uint16_t speed_delay, const bool only_one)
{
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	ed2d 8b02 	vpush	{d8}
 8001372:	b08b      	sub	sp, #44	; 0x2c
 8001374:	af02      	add	r7, sp, #8
 8001376:	60b9      	str	r1, [r7, #8]
 8001378:	4611      	mov	r1, r2
 800137a:	461a      	mov	r2, r3
 800137c:	4603      	mov	r3, r0
 800137e:	81fb      	strh	r3, [r7, #14]
 8001380:	460b      	mov	r3, r1
 8001382:	81bb      	strh	r3, [r7, #12]
 8001384:	4613      	mov	r3, r2
 8001386:	80fb      	strh	r3, [r7, #6]
	uint16_t strip_size = ws2812_led_get_max_strip_size(twinkle_mask);
 8001388:	89fb      	ldrh	r3, [r7, #14]
 800138a:	4618      	mov	r0, r3
 800138c:	f000 fc56 	bl	8001c3c <ws2812_led_get_max_strip_size>
 8001390:	4603      	mov	r3, r0
 8001392:	837b      	strh	r3, [r7, #26]
    uint8_t color_twinkle_rgb[sizeof(ws2812b_led_t)] = {0};
 8001394:	4b2e      	ldr	r3, [pc, #184]	; (8001450 <animate_led_twinkle+0xe4>)
 8001396:	881b      	ldrh	r3, [r3, #0]
 8001398:	82bb      	strh	r3, [r7, #20]
 800139a:	2300      	movs	r3, #0
 800139c:	75bb      	strb	r3, [r7, #22]
    color_led_hex_to_rgb(color_twinkle, color_twinkle_rgb);
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	4619      	mov	r1, r3
 80013a4:	68b8      	ldr	r0, [r7, #8]
 80013a6:	f000 fb81 	bl	8001aac <color_led_hex_to_rgb>
    for (int iii = 0; iii < count; iii++)
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
 80013ae:	e043      	b.n	8001438 <animate_led_twinkle+0xcc>
    {
        if (task_button_press_interrupt_occurred())
 80013b0:	f000 fe3e 	bl	8002030 <task_button_press_interrupt_occurred>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d00d      	beq.n	80013d6 <animate_led_twinkle+0x6a>
        {
            if (task_button_press_check_interrupts(&color_twinkle_rgb[offsetof(ws2812b_led_t, red)], &color_twinkle_rgb[offsetof(ws2812b_led_t, green)], &color_twinkle_rgb[offsetof(ws2812b_led_t, blue)]))
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	1c9a      	adds	r2, r3, #2
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	1c59      	adds	r1, r3, #1
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 fe56 	bl	800207c <task_button_press_check_interrupts>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d135      	bne.n	8001442 <animate_led_twinkle+0xd6>
            {
                return;
            }
        }
        animate_led_set_pixel(twinkle_mask, random_num(0, strip_size),
 80013d6:	8b7b      	ldrh	r3, [r7, #26]
 80013d8:	4619      	mov	r1, r3
 80013da:	2000      	movs	r0, #0
 80013dc:	f009 f892 	bl	800a504 <random_num>
 80013e0:	4603      	mov	r3, r0
 80013e2:	b299      	uxth	r1, r3
 80013e4:	7d3a      	ldrb	r2, [r7, #20]
 80013e6:	7d7c      	ldrb	r4, [r7, #21]
 80013e8:	7dbb      	ldrb	r3, [r7, #22]
 80013ea:	89f8      	ldrh	r0, [r7, #14]
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	4623      	mov	r3, r4
 80013f0:	f7ff fd30 	bl	8000e54 <animate_led_set_pixel>
                              (color_twinkle_rgb[offsetof(ws2812b_led_t, red)]),
                              (color_twinkle_rgb[offsetof(ws2812b_led_t, green)]),
                              (color_twinkle_rgb[offsetof(ws2812b_led_t, blue)]));
        animate_led_show_strip(twinkle_mask);
 80013f4:	89fb      	ldrh	r3, [r7, #14]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fd1c 	bl	8000e34 <animate_led_show_strip>
        task_led_ctrl_delay(speed_delay / task_led_ctrl_speed());
 80013fc:	88fb      	ldrh	r3, [r7, #6]
 80013fe:	ee07 3a90 	vmov	s15, r3
 8001402:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001406:	f001 f82b 	bl	8002460 <task_led_ctrl_speed>
 800140a:	eeb0 7a40 	vmov.f32	s14, s0
 800140e:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001412:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001416:	ee17 0a90 	vmov	r0, s15
 800141a:	f000 ff51 	bl	80022c0 <task_led_ctrl_delay>
        if (only_one) animate_led_set_all_pixels(twinkle_mask, 0, 0, 0);
 800141e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001422:	2b00      	cmp	r3, #0
 8001424:	d005      	beq.n	8001432 <animate_led_twinkle+0xc6>
 8001426:	89f8      	ldrh	r0, [r7, #14]
 8001428:	2300      	movs	r3, #0
 800142a:	2200      	movs	r2, #0
 800142c:	2100      	movs	r1, #0
 800142e:	f7ff fd65 	bl	8000efc <animate_led_set_all_pixels>
    for (int iii = 0; iii < count; iii++)
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3301      	adds	r3, #1
 8001436:	61fb      	str	r3, [r7, #28]
 8001438:	89bb      	ldrh	r3, [r7, #12]
 800143a:	69fa      	ldr	r2, [r7, #28]
 800143c:	429a      	cmp	r2, r3
 800143e:	dbb7      	blt.n	80013b0 <animate_led_twinkle+0x44>
 8001440:	e000      	b.n	8001444 <animate_led_twinkle+0xd8>
                return;
 8001442:	bf00      	nop
    }

    //task_led_ctrl_delay(speed_delay / task_led_ctrl_speed());
}
 8001444:	3724      	adds	r7, #36	; 0x24
 8001446:	46bd      	mov	sp, r7
 8001448:	ecbd 8b02 	vpop	{d8}
 800144c:	bd90      	pop	{r4, r7, pc}
 800144e:	bf00      	nop
 8001450:	0800b754 	.word	0x0800b754

08001454 <animate_led_sparkle_only_random_color>:
}


void animate_led_sparkle_only_random_color(const strip_mask_t mask_sparkle_random, const bool fill,
                                           const uint16_t speed_delay)
{
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	ed2d 8b02 	vpush	{d8}
 800145a:	b08b      	sub	sp, #44	; 0x2c
 800145c:	af02      	add	r7, sp, #8
 800145e:	4603      	mov	r3, r0
 8001460:	80fb      	strh	r3, [r7, #6]
 8001462:	460b      	mov	r3, r1
 8001464:	717b      	strb	r3, [r7, #5]
 8001466:	4613      	mov	r3, r2
 8001468:	807b      	strh	r3, [r7, #2]
	float percent_to_fill = 0.7;
 800146a:	4b42      	ldr	r3, [pc, #264]	; (8001574 <animate_led_sparkle_only_random_color+0x120>)
 800146c:	61bb      	str	r3, [r7, #24]
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_sparkle_random);
 800146e:	88fb      	ldrh	r3, [r7, #6]
 8001470:	4618      	mov	r0, r3
 8001472:	f000 fbe3 	bl	8001c3c <ws2812_led_get_max_strip_size>
 8001476:	4603      	mov	r3, r0
 8001478:	82fb      	strh	r3, [r7, #22]
	uint16_t num_active_leds = ws2812_get_num_active_animation_leds(mask_sparkle_random);
 800147a:	88fb      	ldrh	r3, [r7, #6]
 800147c:	4618      	mov	r0, r3
 800147e:	f000 fbbd 	bl	8001bfc <ws2812_get_num_active_animation_leds>
 8001482:	4603      	mov	r3, r0
 8001484:	82bb      	strh	r3, [r7, #20]
    uint8_t dummy_red, dummy_green, dummy_blue; // not used but not worth creating a unique function IMO
	for (uint16_t iii = 0; iii < (percent_to_fill * (float)num_active_leds); iii++)
 8001486:	2300      	movs	r3, #0
 8001488:	83fb      	strh	r3, [r7, #30]
 800148a:	e059      	b.n	8001540 <animate_led_sparkle_only_random_color+0xec>
	{
	    if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 800148c:	f000 fdd0 	bl	8002030 <task_button_press_interrupt_occurred>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d00b      	beq.n	80014ae <animate_led_sparkle_only_random_color+0x5a>
 8001496:	f107 020d 	add.w	r2, r7, #13
 800149a:	f107 010e 	add.w	r1, r7, #14
 800149e:	f107 030f 	add.w	r3, r7, #15
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 fdea 	bl	800207c <task_button_press_check_interrupts>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d15c      	bne.n	8001568 <animate_led_sparkle_only_random_color+0x114>
		int pix = random_num(0, strip_size);
 80014ae:	8afb      	ldrh	r3, [r7, #22]
 80014b0:	4619      	mov	r1, r3
 80014b2:	2000      	movs	r0, #0
 80014b4:	f009 f826 	bl	800a504 <random_num>
 80014b8:	4603      	mov	r3, r0
 80014ba:	613b      	str	r3, [r7, #16]
		animate_led_set_pixel(mask_sparkle_random, pix, random_num(0, 255), random_num(0, 255), random_num(0, 255));
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	b29c      	uxth	r4, r3
 80014c0:	21ff      	movs	r1, #255	; 0xff
 80014c2:	2000      	movs	r0, #0
 80014c4:	f009 f81e 	bl	800a504 <random_num>
 80014c8:	4603      	mov	r3, r0
 80014ca:	b2dd      	uxtb	r5, r3
 80014cc:	21ff      	movs	r1, #255	; 0xff
 80014ce:	2000      	movs	r0, #0
 80014d0:	f009 f818 	bl	800a504 <random_num>
 80014d4:	4603      	mov	r3, r0
 80014d6:	b2de      	uxtb	r6, r3
 80014d8:	21ff      	movs	r1, #255	; 0xff
 80014da:	2000      	movs	r0, #0
 80014dc:	f009 f812 	bl	800a504 <random_num>
 80014e0:	4603      	mov	r3, r0
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	88f8      	ldrh	r0, [r7, #6]
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	4633      	mov	r3, r6
 80014ea:	462a      	mov	r2, r5
 80014ec:	4621      	mov	r1, r4
 80014ee:	f7ff fcb1 	bl	8000e54 <animate_led_set_pixel>
		animate_led_show_strip(mask_sparkle_random);
 80014f2:	88fb      	ldrh	r3, [r7, #6]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff fc9d 	bl	8000e34 <animate_led_show_strip>
        task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 80014fa:	887b      	ldrh	r3, [r7, #2]
 80014fc:	ee07 3a90 	vmov	s15, r3
 8001500:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001504:	f000 ffac 	bl	8002460 <task_led_ctrl_speed>
 8001508:	eeb0 7a40 	vmov.f32	s14, s0
 800150c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001510:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001514:	ee17 0a90 	vmov	r0, s15
 8001518:	f000 fed2 	bl	80022c0 <task_led_ctrl_delay>
		if (!fill) animate_led_set_pixel(mask_sparkle_random, pix, 0, 0, 0);
 800151c:	797b      	ldrb	r3, [r7, #5]
 800151e:	f083 0301 	eor.w	r3, r3, #1
 8001522:	b2db      	uxtb	r3, r3
 8001524:	2b00      	cmp	r3, #0
 8001526:	d008      	beq.n	800153a <animate_led_sparkle_only_random_color+0xe6>
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	b299      	uxth	r1, r3
 800152c:	88f8      	ldrh	r0, [r7, #6]
 800152e:	2300      	movs	r3, #0
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	2300      	movs	r3, #0
 8001534:	2200      	movs	r2, #0
 8001536:	f7ff fc8d 	bl	8000e54 <animate_led_set_pixel>
	for (uint16_t iii = 0; iii < (percent_to_fill * (float)num_active_leds); iii++)
 800153a:	8bfb      	ldrh	r3, [r7, #30]
 800153c:	3301      	adds	r3, #1
 800153e:	83fb      	strh	r3, [r7, #30]
 8001540:	8bfb      	ldrh	r3, [r7, #30]
 8001542:	ee07 3a90 	vmov	s15, r3
 8001546:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800154a:	8abb      	ldrh	r3, [r7, #20]
 800154c:	ee07 3a90 	vmov	s15, r3
 8001550:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001554:	edd7 7a06 	vldr	s15, [r7, #24]
 8001558:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800155c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001564:	d492      	bmi.n	800148c <animate_led_sparkle_only_random_color+0x38>
 8001566:	e000      	b.n	800156a <animate_led_sparkle_only_random_color+0x116>
	    if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001568:	bf00      	nop
	}
}
 800156a:	3724      	adds	r7, #36	; 0x24
 800156c:	46bd      	mov	sp, r7
 800156e:	ecbd 8b02 	vpop	{d8}
 8001572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001574:	3f333333 	.word	0x3f333333

08001578 <animate_led_rainbow_cycle>:
    }
}


void animate_led_rainbow_cycle(const strip_mask_t mask_rainbow_cycle, const uint16_t speed_delay)
{
 8001578:	b590      	push	{r4, r7, lr}
 800157a:	ed2d 8b02 	vpush	{d8}
 800157e:	b089      	sub	sp, #36	; 0x24
 8001580:	af02      	add	r7, sp, #8
 8001582:	4603      	mov	r3, r0
 8001584:	460a      	mov	r2, r1
 8001586:	80fb      	strh	r3, [r7, #6]
 8001588:	4613      	mov	r3, r2
 800158a:	80bb      	strh	r3, [r7, #4]
	uint8_t dummy_red, dummy_green, dummy_blue;
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_rainbow_cycle);
 800158c:	88fb      	ldrh	r3, [r7, #6]
 800158e:	4618      	mov	r0, r3
 8001590:	f000 fb54 	bl	8001c3c <ws2812_led_get_max_strip_size>
 8001594:	4603      	mov	r3, r0
 8001596:	827b      	strh	r3, [r7, #18]
    uint8_t *c;
    uint16_t iii, jjj;
    for (jjj = 0; jjj < 256 * 5; jjj++)
 8001598:	2300      	movs	r3, #0
 800159a:	82bb      	strh	r3, [r7, #20]
 800159c:	e06c      	b.n	8001678 <animate_led_rainbow_cycle+0x100>
    {
        if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 800159e:	f000 fd47 	bl	8002030 <task_button_press_interrupt_occurred>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d00b      	beq.n	80015c0 <animate_led_rainbow_cycle+0x48>
 80015a8:	f107 0209 	add.w	r2, r7, #9
 80015ac:	f107 010a 	add.w	r1, r7, #10
 80015b0:	f107 030b 	add.w	r3, r7, #11
 80015b4:	4618      	mov	r0, r3
 80015b6:	f000 fd61 	bl	800207c <task_button_press_check_interrupts>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d160      	bne.n	8001682 <animate_led_rainbow_cycle+0x10a>
        for (iii = 0; iii < strip_size; iii++)
 80015c0:	2300      	movs	r3, #0
 80015c2:	82fb      	strh	r3, [r7, #22]
 80015c4:	e02f      	b.n	8001626 <animate_led_rainbow_cycle+0xae>
        {
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80015c6:	f000 fd33 	bl	8002030 <task_button_press_interrupt_occurred>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d00b      	beq.n	80015e8 <animate_led_rainbow_cycle+0x70>
 80015d0:	f107 0209 	add.w	r2, r7, #9
 80015d4:	f107 010a 	add.w	r1, r7, #10
 80015d8:	f107 030b 	add.w	r3, r7, #11
 80015dc:	4618      	mov	r0, r3
 80015de:	f000 fd4d 	bl	800207c <task_button_press_check_interrupts>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d14e      	bne.n	8001686 <animate_led_rainbow_cycle+0x10e>
            c = animate_led_wheel(((iii * 256 / strip_size) + jjj) & 255);
 80015e8:	8afb      	ldrh	r3, [r7, #22]
 80015ea:	021a      	lsls	r2, r3, #8
 80015ec:	8a7b      	ldrh	r3, [r7, #18]
 80015ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	8abb      	ldrh	r3, [r7, #20]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	4413      	add	r3, r2
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	4618      	mov	r0, r3
 80015fe:	f000 f849 	bl	8001694 <animate_led_wheel>
 8001602:	60f8      	str	r0, [r7, #12]
            animate_led_set_pixel(mask_rainbow_cycle, iii, *c, *(c + 1), *(c + 2));
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	781a      	ldrb	r2, [r3, #0]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	3301      	adds	r3, #1
 800160c:	781c      	ldrb	r4, [r3, #0]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	3302      	adds	r3, #2
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	8af9      	ldrh	r1, [r7, #22]
 8001616:	88f8      	ldrh	r0, [r7, #6]
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	4623      	mov	r3, r4
 800161c:	f7ff fc1a 	bl	8000e54 <animate_led_set_pixel>
        for (iii = 0; iii < strip_size; iii++)
 8001620:	8afb      	ldrh	r3, [r7, #22]
 8001622:	3301      	adds	r3, #1
 8001624:	82fb      	strh	r3, [r7, #22]
 8001626:	8afa      	ldrh	r2, [r7, #22]
 8001628:	8a7b      	ldrh	r3, [r7, #18]
 800162a:	429a      	cmp	r2, r3
 800162c:	d3cb      	bcc.n	80015c6 <animate_led_rainbow_cycle+0x4e>
        }
        animate_led_show_strip(mask_rainbow_cycle);
 800162e:	88fb      	ldrh	r3, [r7, #6]
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fbff 	bl	8000e34 <animate_led_show_strip>
        if (LED_SPEED_10X == task_led_ctrl_speed()) task_led_ctrl_delay(0);
 8001636:	f000 ff13 	bl	8002460 <task_led_ctrl_speed>
 800163a:	eef0 7a40 	vmov.f32	s15, s0
 800163e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001646:	d103      	bne.n	8001650 <animate_led_rainbow_cycle+0xd8>
 8001648:	2000      	movs	r0, #0
 800164a:	f000 fe39 	bl	80022c0 <task_led_ctrl_delay>
 800164e:	e010      	b.n	8001672 <animate_led_rainbow_cycle+0xfa>
        else task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 8001650:	88bb      	ldrh	r3, [r7, #4]
 8001652:	ee07 3a90 	vmov	s15, r3
 8001656:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800165a:	f000 ff01 	bl	8002460 <task_led_ctrl_speed>
 800165e:	eeb0 7a40 	vmov.f32	s14, s0
 8001662:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001666:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800166a:	ee17 0a90 	vmov	r0, s15
 800166e:	f000 fe27 	bl	80022c0 <task_led_ctrl_delay>
    for (jjj = 0; jjj < 256 * 5; jjj++)
 8001672:	8abb      	ldrh	r3, [r7, #20]
 8001674:	3301      	adds	r3, #1
 8001676:	82bb      	strh	r3, [r7, #20]
 8001678:	8abb      	ldrh	r3, [r7, #20]
 800167a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800167e:	d38e      	bcc.n	800159e <animate_led_rainbow_cycle+0x26>
 8001680:	e002      	b.n	8001688 <animate_led_rainbow_cycle+0x110>
        if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001682:	bf00      	nop
 8001684:	e000      	b.n	8001688 <animate_led_rainbow_cycle+0x110>
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001686:	bf00      	nop
    }
}
 8001688:	371c      	adds	r7, #28
 800168a:	46bd      	mov	sp, r7
 800168c:	ecbd 8b02 	vpop	{d8}
 8001690:	bd90      	pop	{r4, r7, pc}
	...

08001694 <animate_led_wheel>:


uint8_t* animate_led_wheel(uint8_t wheel_pos)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
    static uint8_t c[3];
    if (wheel_pos < 85)
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	2b54      	cmp	r3, #84	; 0x54
 80016a2:	d813      	bhi.n	80016cc <animate_led_wheel+0x38>
    {
        c[0] = wheel_pos * 3;
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	461a      	mov	r2, r3
 80016a8:	0052      	lsls	r2, r2, #1
 80016aa:	4413      	add	r3, r2
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	4b23      	ldr	r3, [pc, #140]	; (800173c <animate_led_wheel+0xa8>)
 80016b0:	701a      	strb	r2, [r3, #0]
        c[1] = 255 - wheel_pos * 3; 
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	461a      	mov	r2, r3
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	3b01      	subs	r3, #1
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	4b1e      	ldr	r3, [pc, #120]	; (800173c <animate_led_wheel+0xa8>)
 80016c2:	705a      	strb	r2, [r3, #1]
        c[2] = 0;
 80016c4:	4b1d      	ldr	r3, [pc, #116]	; (800173c <animate_led_wheel+0xa8>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	709a      	strb	r2, [r3, #2]
 80016ca:	e02f      	b.n	800172c <animate_led_wheel+0x98>
    }
    else if(wheel_pos < 170)
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	2ba9      	cmp	r3, #169	; 0xa9
 80016d0:	d816      	bhi.n	8001700 <animate_led_wheel+0x6c>
    {
        wheel_pos -= 85;
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	3b55      	subs	r3, #85	; 0x55
 80016d6:	71fb      	strb	r3, [r7, #7]
        c[0] = 255 - wheel_pos * 3;
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	461a      	mov	r2, r3
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	3b01      	subs	r3, #1
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <animate_led_wheel+0xa8>)
 80016e8:	701a      	strb	r2, [r3, #0]
        c[1] = 0;
 80016ea:	4b14      	ldr	r3, [pc, #80]	; (800173c <animate_led_wheel+0xa8>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	705a      	strb	r2, [r3, #1]
        c[2] = wheel_pos * 3;
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	461a      	mov	r2, r3
 80016f4:	0052      	lsls	r2, r2, #1
 80016f6:	4413      	add	r3, r2
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	4b10      	ldr	r3, [pc, #64]	; (800173c <animate_led_wheel+0xa8>)
 80016fc:	709a      	strb	r2, [r3, #2]
 80016fe:	e015      	b.n	800172c <animate_led_wheel+0x98>
    }
    else
    {
        wheel_pos -= 170;
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	3356      	adds	r3, #86	; 0x56
 8001704:	71fb      	strb	r3, [r7, #7]
        c[0] = 0;
 8001706:	4b0d      	ldr	r3, [pc, #52]	; (800173c <animate_led_wheel+0xa8>)
 8001708:	2200      	movs	r2, #0
 800170a:	701a      	strb	r2, [r3, #0]
        c[1] = wheel_pos * 3; 
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	461a      	mov	r2, r3
 8001710:	0052      	lsls	r2, r2, #1
 8001712:	4413      	add	r3, r2
 8001714:	b2da      	uxtb	r2, r3
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <animate_led_wheel+0xa8>)
 8001718:	705a      	strb	r2, [r3, #1]
        c[2] = 255 - wheel_pos * 3;
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	461a      	mov	r2, r3
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	b2db      	uxtb	r3, r3
 8001724:	3b01      	subs	r3, #1
 8001726:	b2da      	uxtb	r2, r3
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <animate_led_wheel+0xa8>)
 800172a:	709a      	strb	r2, [r3, #2]
    }
    return c;
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <animate_led_wheel+0xa8>)
}
 800172e:	4618      	mov	r0, r3
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	20000184 	.word	0x20000184

08001740 <animate_led_theater_chase>:
}


void animate_led_theater_chase(const strip_mask_t mask_theater_chase, const color_hex_code_e color_theater_chase,
                               const uint16_t speed_delay)
{
 8001740:	b590      	push	{r4, r7, lr}
 8001742:	ed2d 8b02 	vpush	{d8}
 8001746:	b08b      	sub	sp, #44	; 0x2c
 8001748:	af02      	add	r7, sp, #8
 800174a:	4603      	mov	r3, r0
 800174c:	6039      	str	r1, [r7, #0]
 800174e:	80fb      	strh	r3, [r7, #6]
 8001750:	4613      	mov	r3, r2
 8001752:	80bb      	strh	r3, [r7, #4]
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_theater_chase);
 8001754:	88fb      	ldrh	r3, [r7, #6]
 8001756:	4618      	mov	r0, r3
 8001758:	f000 fa70 	bl	8001c3c <ws2812_led_get_max_strip_size>
 800175c:	4603      	mov	r3, r0
 800175e:	81fb      	strh	r3, [r7, #14]
    uint8_t color_theater_chase_rgb[sizeof(ws2812b_led_t)] = {0};
 8001760:	4b47      	ldr	r3, [pc, #284]	; (8001880 <animate_led_theater_chase+0x140>)
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	813b      	strh	r3, [r7, #8]
 8001766:	2300      	movs	r3, #0
 8001768:	72bb      	strb	r3, [r7, #10]
    color_led_hex_to_rgb(color_theater_chase, color_theater_chase_rgb);
 800176a:	f107 0308 	add.w	r3, r7, #8
 800176e:	4619      	mov	r1, r3
 8001770:	6838      	ldr	r0, [r7, #0]
 8001772:	f000 f99b 	bl	8001aac <color_led_hex_to_rgb>
    for (int jjj = 0; jjj < 10; jjj++)
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
 800177a:	e075      	b.n	8001868 <animate_led_theater_chase+0x128>
    {
        for (int qqq = 0; qqq < 3; qqq++)
 800177c:	2300      	movs	r3, #0
 800177e:	61bb      	str	r3, [r7, #24]
 8001780:	e06c      	b.n	800185c <animate_led_theater_chase+0x11c>
        {
            if (task_button_press_interrupt_occurred())
 8001782:	f000 fc55 	bl	8002030 <task_button_press_interrupt_occurred>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d00d      	beq.n	80017a8 <animate_led_theater_chase+0x68>
            {
                if (task_button_press_check_interrupts(&color_theater_chase_rgb[offsetof(ws2812b_led_t, red)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, green)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]))
 800178c:	f107 0308 	add.w	r3, r7, #8
 8001790:	1c9a      	adds	r2, r3, #2
 8001792:	f107 0308 	add.w	r3, r7, #8
 8001796:	1c59      	adds	r1, r3, #1
 8001798:	f107 0308 	add.w	r3, r7, #8
 800179c:	4618      	mov	r0, r3
 800179e:	f000 fc6d 	bl	800207c <task_button_press_check_interrupts>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d163      	bne.n	8001870 <animate_led_theater_chase+0x130>
                {
                    return;
                }
            }
            for (int iii = 0; iii < strip_size; iii += 3)
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	e010      	b.n	80017d0 <animate_led_theater_chase+0x90>
            {
                animate_led_set_pixel(mask_theater_chase, iii + qqq,
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	4413      	add	r3, r2
 80017b8:	b299      	uxth	r1, r3
 80017ba:	7a3a      	ldrb	r2, [r7, #8]
 80017bc:	7a7c      	ldrb	r4, [r7, #9]
 80017be:	7abb      	ldrb	r3, [r7, #10]
 80017c0:	88f8      	ldrh	r0, [r7, #6]
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	4623      	mov	r3, r4
 80017c6:	f7ff fb45 	bl	8000e54 <animate_led_set_pixel>
            for (int iii = 0; iii < strip_size; iii += 3)
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	3303      	adds	r3, #3
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	89fb      	ldrh	r3, [r7, #14]
 80017d2:	697a      	ldr	r2, [r7, #20]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	dbea      	blt.n	80017ae <animate_led_theater_chase+0x6e>
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, red)]),
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, green)]),
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]));
            }
            animate_led_show_strip(mask_theater_chase);
 80017d8:	88fb      	ldrh	r3, [r7, #6]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fb2a 	bl	8000e34 <animate_led_show_strip>
            if (task_button_press_interrupt_occurred())
 80017e0:	f000 fc26 	bl	8002030 <task_button_press_interrupt_occurred>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d00d      	beq.n	8001806 <animate_led_theater_chase+0xc6>
            {
                if (task_button_press_check_interrupts(&color_theater_chase_rgb[offsetof(ws2812b_led_t, red)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, green)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]))
 80017ea:	f107 0308 	add.w	r3, r7, #8
 80017ee:	1c9a      	adds	r2, r3, #2
 80017f0:	f107 0308 	add.w	r3, r7, #8
 80017f4:	1c59      	adds	r1, r3, #1
 80017f6:	f107 0308 	add.w	r3, r7, #8
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 fc3e 	bl	800207c <task_button_press_check_interrupts>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d136      	bne.n	8001874 <animate_led_theater_chase+0x134>
                {
                    return;
                }
            }
            task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 8001806:	88bb      	ldrh	r3, [r7, #4]
 8001808:	ee07 3a90 	vmov	s15, r3
 800180c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001810:	f000 fe26 	bl	8002460 <task_led_ctrl_speed>
 8001814:	eeb0 7a40 	vmov.f32	s14, s0
 8001818:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800181c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001820:	ee17 0a90 	vmov	r0, s15
 8001824:	f000 fd4c 	bl	80022c0 <task_led_ctrl_delay>
            for (int iii = 0; iii < strip_size; iii += 3) animate_led_set_pixel(mask_theater_chase, iii + qqq, 0, 0, 0); // turn every third pixel off
 8001828:	2300      	movs	r3, #0
 800182a:	613b      	str	r3, [r7, #16]
 800182c:	e00f      	b.n	800184e <animate_led_theater_chase+0x10e>
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	b29a      	uxth	r2, r3
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	b29b      	uxth	r3, r3
 8001836:	4413      	add	r3, r2
 8001838:	b299      	uxth	r1, r3
 800183a:	88f8      	ldrh	r0, [r7, #6]
 800183c:	2300      	movs	r3, #0
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	2300      	movs	r3, #0
 8001842:	2200      	movs	r2, #0
 8001844:	f7ff fb06 	bl	8000e54 <animate_led_set_pixel>
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	3303      	adds	r3, #3
 800184c:	613b      	str	r3, [r7, #16]
 800184e:	89fb      	ldrh	r3, [r7, #14]
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	429a      	cmp	r2, r3
 8001854:	dbeb      	blt.n	800182e <animate_led_theater_chase+0xee>
        for (int qqq = 0; qqq < 3; qqq++)
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	3301      	adds	r3, #1
 800185a:	61bb      	str	r3, [r7, #24]
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	2b02      	cmp	r3, #2
 8001860:	dd8f      	ble.n	8001782 <animate_led_theater_chase+0x42>
    for (int jjj = 0; jjj < 10; jjj++)
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3301      	adds	r3, #1
 8001866:	61fb      	str	r3, [r7, #28]
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	2b09      	cmp	r3, #9
 800186c:	dd86      	ble.n	800177c <animate_led_theater_chase+0x3c>
 800186e:	e002      	b.n	8001876 <animate_led_theater_chase+0x136>
                    return;
 8001870:	bf00      	nop
 8001872:	e000      	b.n	8001876 <animate_led_theater_chase+0x136>
                    return;
 8001874:	bf00      	nop
        }
    }
}
 8001876:	3724      	adds	r7, #36	; 0x24
 8001878:	46bd      	mov	sp, r7
 800187a:	ecbd 8b02 	vpop	{d8}
 800187e:	bd90      	pop	{r4, r7, pc}
 8001880:	0800b754 	.word	0x0800b754

08001884 <animate_led_theater_chase_rainbow>:


void animate_led_theater_chase_rainbow(const strip_mask_t mask_theater_chase, const uint16_t speed_delay)
{
 8001884:	b590      	push	{r4, r7, lr}
 8001886:	ed2d 8b02 	vpush	{d8}
 800188a:	b08d      	sub	sp, #52	; 0x34
 800188c:	af02      	add	r7, sp, #8
 800188e:	4603      	mov	r3, r0
 8001890:	460a      	mov	r2, r1
 8001892:	80fb      	strh	r3, [r7, #6]
 8001894:	4613      	mov	r3, r2
 8001896:	80bb      	strh	r3, [r7, #4]
	uint8_t dummy_red, dummy_green, dummy_blue;
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_theater_chase);
 8001898:	88fb      	ldrh	r3, [r7, #6]
 800189a:	4618      	mov	r0, r3
 800189c:	f000 f9ce 	bl	8001c3c <ws2812_led_get_max_strip_size>
 80018a0:	4603      	mov	r3, r0
 80018a2:	82fb      	strh	r3, [r7, #22]
    uint8_t *c;
    for (int jjj = 0; jjj < 256; jjj++) // cycel all 256 colors in the animate_led_wheel
 80018a4:	2300      	movs	r3, #0
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
 80018a8:	e08a      	b.n	80019c0 <animate_led_theater_chase_rainbow+0x13c>
    {
        for (int qqq = 0; qqq < 3; qqq++)
 80018aa:	2300      	movs	r3, #0
 80018ac:	623b      	str	r3, [r7, #32]
 80018ae:	e080      	b.n	80019b2 <animate_led_theater_chase_rainbow+0x12e>
        {
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80018b0:	f000 fbbe 	bl	8002030 <task_button_press_interrupt_occurred>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00b      	beq.n	80018d2 <animate_led_theater_chase_rainbow+0x4e>
 80018ba:	f107 020d 	add.w	r2, r7, #13
 80018be:	f107 010e 	add.w	r1, r7, #14
 80018c2:	f107 030f 	add.w	r3, r7, #15
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 fbd8 	bl	800207c <task_button_press_check_interrupts>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d17b      	bne.n	80019ca <animate_led_theater_chase_rainbow+0x146>
            for (int iii = 0; iii < strip_size; iii += 3)
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
 80018d6:	e039      	b.n	800194c <animate_led_theater_chase_rainbow+0xc8>
            {
                if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80018d8:	f000 fbaa 	bl	8002030 <task_button_press_interrupt_occurred>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d00b      	beq.n	80018fa <animate_led_theater_chase_rainbow+0x76>
 80018e2:	f107 020d 	add.w	r2, r7, #13
 80018e6:	f107 010e 	add.w	r1, r7, #14
 80018ea:	f107 030f 	add.w	r3, r7, #15
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 fbc4 	bl	800207c <task_button_press_check_interrupts>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d169      	bne.n	80019ce <animate_led_theater_chase_rainbow+0x14a>
                c = animate_led_wheel((iii + jjj) % 255);
 80018fa:	69fa      	ldr	r2, [r7, #28]
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fe:	441a      	add	r2, r3
 8001900:	4b36      	ldr	r3, [pc, #216]	; (80019dc <animate_led_theater_chase_rainbow+0x158>)
 8001902:	fb83 1302 	smull	r1, r3, r3, r2
 8001906:	4413      	add	r3, r2
 8001908:	11d9      	asrs	r1, r3, #7
 800190a:	17d3      	asrs	r3, r2, #31
 800190c:	1ac9      	subs	r1, r1, r3
 800190e:	460b      	mov	r3, r1
 8001910:	021b      	lsls	r3, r3, #8
 8001912:	1a5b      	subs	r3, r3, r1
 8001914:	1ad1      	subs	r1, r2, r3
 8001916:	b2cb      	uxtb	r3, r1
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff febb 	bl	8001694 <animate_led_wheel>
 800191e:	6138      	str	r0, [r7, #16]
                animate_led_set_pixel(mask_theater_chase, iii + qqq, *c, *(c + 1), *(c + 2)); // turn every third pixel on
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	b29a      	uxth	r2, r3
 8001924:	6a3b      	ldr	r3, [r7, #32]
 8001926:	b29b      	uxth	r3, r3
 8001928:	4413      	add	r3, r2
 800192a:	b299      	uxth	r1, r3
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	781a      	ldrb	r2, [r3, #0]
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	3301      	adds	r3, #1
 8001934:	781c      	ldrb	r4, [r3, #0]
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	3302      	adds	r3, #2
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	88f8      	ldrh	r0, [r7, #6]
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	4623      	mov	r3, r4
 8001942:	f7ff fa87 	bl	8000e54 <animate_led_set_pixel>
            for (int iii = 0; iii < strip_size; iii += 3)
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	3303      	adds	r3, #3
 800194a:	61fb      	str	r3, [r7, #28]
 800194c:	8afb      	ldrh	r3, [r7, #22]
 800194e:	69fa      	ldr	r2, [r7, #28]
 8001950:	429a      	cmp	r2, r3
 8001952:	dbc1      	blt.n	80018d8 <animate_led_theater_chase_rainbow+0x54>
            }
            animate_led_show_strip(mask_theater_chase);
 8001954:	88fb      	ldrh	r3, [r7, #6]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff fa6c 	bl	8000e34 <animate_led_show_strip>
            task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 800195c:	88bb      	ldrh	r3, [r7, #4]
 800195e:	ee07 3a90 	vmov	s15, r3
 8001962:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001966:	f000 fd7b 	bl	8002460 <task_led_ctrl_speed>
 800196a:	eeb0 7a40 	vmov.f32	s14, s0
 800196e:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001972:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001976:	ee17 0a90 	vmov	r0, s15
 800197a:	f000 fca1 	bl	80022c0 <task_led_ctrl_delay>
            for (int iii = 0; iii < strip_size; iii += 3) animate_led_set_pixel(mask_theater_chase, iii + qqq, 0, 0, 0); // turn every third pixel off
 800197e:	2300      	movs	r3, #0
 8001980:	61bb      	str	r3, [r7, #24]
 8001982:	e00f      	b.n	80019a4 <animate_led_theater_chase_rainbow+0x120>
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	b29a      	uxth	r2, r3
 8001988:	6a3b      	ldr	r3, [r7, #32]
 800198a:	b29b      	uxth	r3, r3
 800198c:	4413      	add	r3, r2
 800198e:	b299      	uxth	r1, r3
 8001990:	88f8      	ldrh	r0, [r7, #6]
 8001992:	2300      	movs	r3, #0
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	2300      	movs	r3, #0
 8001998:	2200      	movs	r2, #0
 800199a:	f7ff fa5b 	bl	8000e54 <animate_led_set_pixel>
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	3303      	adds	r3, #3
 80019a2:	61bb      	str	r3, [r7, #24]
 80019a4:	8afb      	ldrh	r3, [r7, #22]
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	dbeb      	blt.n	8001984 <animate_led_theater_chase_rainbow+0x100>
        for (int qqq = 0; qqq < 3; qqq++)
 80019ac:	6a3b      	ldr	r3, [r7, #32]
 80019ae:	3301      	adds	r3, #1
 80019b0:	623b      	str	r3, [r7, #32]
 80019b2:	6a3b      	ldr	r3, [r7, #32]
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	f77f af7b 	ble.w	80018b0 <animate_led_theater_chase_rainbow+0x2c>
    for (int jjj = 0; jjj < 256; jjj++) // cycel all 256 colors in the animate_led_wheel
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	3301      	adds	r3, #1
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	2bff      	cmp	r3, #255	; 0xff
 80019c4:	f77f af71 	ble.w	80018aa <animate_led_theater_chase_rainbow+0x26>
 80019c8:	e002      	b.n	80019d0 <animate_led_theater_chase_rainbow+0x14c>
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80019ca:	bf00      	nop
 80019cc:	e000      	b.n	80019d0 <animate_led_theater_chase_rainbow+0x14c>
                if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80019ce:	bf00      	nop
        }
    }
}
 80019d0:	372c      	adds	r7, #44	; 0x2c
 80019d2:	46bd      	mov	sp, r7
 80019d4:	ecbd 8b02 	vpop	{d8}
 80019d8:	bd90      	pop	{r4, r7, pc}
 80019da:	bf00      	nop
 80019dc:	80808081 	.word	0x80808081

080019e0 <color_led_init>:

color_hex_code_e g_color_hex_codes[NUM_COLORS];


void color_led_init(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
    // initialize color arrays
    g_color_hex_codes[COLORS_RED] = COLOR_HEX_RED;
 80019e4:	4b26      	ldr	r3, [pc, #152]	; (8001a80 <color_led_init+0xa0>)
 80019e6:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 80019ea:	601a      	str	r2, [r3, #0]
    g_color_hex_codes[COLORS_LIME] = COLOR_HEX_LIME;
 80019ec:	4b24      	ldr	r3, [pc, #144]	; (8001a80 <color_led_init+0xa0>)
 80019ee:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 80019f2:	605a      	str	r2, [r3, #4]
    g_color_hex_codes[COLORS_BLUE] = COLOR_HEX_BLUE;
 80019f4:	4b22      	ldr	r3, [pc, #136]	; (8001a80 <color_led_init+0xa0>)
 80019f6:	22ff      	movs	r2, #255	; 0xff
 80019f8:	609a      	str	r2, [r3, #8]
    g_color_hex_codes[COLORS_YELLOW] = COLOR_HEX_YELLOW;
 80019fa:	4b21      	ldr	r3, [pc, #132]	; (8001a80 <color_led_init+0xa0>)
 80019fc:	4a21      	ldr	r2, [pc, #132]	; (8001a84 <color_led_init+0xa4>)
 80019fe:	60da      	str	r2, [r3, #12]
    g_color_hex_codes[COLORS_CYAN] = COLOR_HEX_CYAN;
 8001a00:	4b1f      	ldr	r3, [pc, #124]	; (8001a80 <color_led_init+0xa0>)
 8001a02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a06:	611a      	str	r2, [r3, #16]
    g_color_hex_codes[COLORS_MAGENTA] = COLOR_HEX_MAGENTA;
 8001a08:	4b1d      	ldr	r3, [pc, #116]	; (8001a80 <color_led_init+0xa0>)
 8001a0a:	f04f 12ff 	mov.w	r2, #16711935	; 0xff00ff
 8001a0e:	615a      	str	r2, [r3, #20]
    g_color_hex_codes[COLORS_GREEN] = COLOR_HEX_GREEN;
 8001a10:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <color_led_init+0xa0>)
 8001a12:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a16:	619a      	str	r2, [r3, #24]
    g_color_hex_codes[COLORS_PURPLE] = COLOR_HEX_PURPLE;
 8001a18:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <color_led_init+0xa0>)
 8001a1a:	f04f 1280 	mov.w	r2, #8388736	; 0x800080
 8001a1e:	61da      	str	r2, [r3, #28]
    g_color_hex_codes[COLORS_TEAL] = COLOR_HEX_TEAL;
 8001a20:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <color_led_init+0xa0>)
 8001a22:	f248 0280 	movw	r2, #32896	; 0x8080
 8001a26:	621a      	str	r2, [r3, #32]
    g_color_hex_codes[COLORS_NAVY] = COLOR_HEX_NAVY;
 8001a28:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <color_led_init+0xa0>)
 8001a2a:	2280      	movs	r2, #128	; 0x80
 8001a2c:	625a      	str	r2, [r3, #36]	; 0x24
    g_color_hex_codes[COLORS_ORANGE_RED] = COLOR_HEX_ORANGE_RED;
 8001a2e:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <color_led_init+0xa0>)
 8001a30:	4a15      	ldr	r2, [pc, #84]	; (8001a88 <color_led_init+0xa8>)
 8001a32:	629a      	str	r2, [r3, #40]	; 0x28
    g_color_hex_codes[COLORS_ORANGE] = COLOR_HEX_ORANGE;
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <color_led_init+0xa0>)
 8001a36:	4a15      	ldr	r2, [pc, #84]	; (8001a8c <color_led_init+0xac>)
 8001a38:	62da      	str	r2, [r3, #44]	; 0x2c
    g_color_hex_codes[COLORS_KHAKI] = COLOR_HEX_KHAKI;
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <color_led_init+0xa0>)
 8001a3c:	4a14      	ldr	r2, [pc, #80]	; (8001a90 <color_led_init+0xb0>)
 8001a3e:	631a      	str	r2, [r3, #48]	; 0x30
    g_color_hex_codes[COLORS_LAWN_GREEN] = COLOR_HEX_LAWN_GREEN;
 8001a40:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <color_led_init+0xa0>)
 8001a42:	4a14      	ldr	r2, [pc, #80]	; (8001a94 <color_led_init+0xb4>)
 8001a44:	635a      	str	r2, [r3, #52]	; 0x34
    g_color_hex_codes[COLORS_SPRING_GREEN] = COLOR_HEX_SPRING_GREEN;
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <color_led_init+0xa0>)
 8001a48:	f64f 727f 	movw	r2, #65407	; 0xff7f
 8001a4c:	639a      	str	r2, [r3, #56]	; 0x38
    g_color_hex_codes[COLORS_MIDNIGHT_BLUE] = COLOR_HEX_MIDNIGHT_BLUE;
 8001a4e:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <color_led_init+0xa0>)
 8001a50:	4a11      	ldr	r2, [pc, #68]	; (8001a98 <color_led_init+0xb8>)
 8001a52:	63da      	str	r2, [r3, #60]	; 0x3c
    g_color_hex_codes[COLORS_BLUE_VIOLET] = COLOR_HEX_BLUE_VIOLET;
 8001a54:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <color_led_init+0xa0>)
 8001a56:	4a11      	ldr	r2, [pc, #68]	; (8001a9c <color_led_init+0xbc>)
 8001a58:	641a      	str	r2, [r3, #64]	; 0x40
    g_color_hex_codes[COLORS_DARK_MAGENTA] = COLOR_HEX_DARK_MAGENTA;
 8001a5a:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <color_led_init+0xa0>)
 8001a5c:	f04f 128b 	mov.w	r2, #9109643	; 0x8b008b
 8001a60:	645a      	str	r2, [r3, #68]	; 0x44
    g_color_hex_codes[COLORS_HOT_PINK] = COLOR_HEX_HOT_PINK;
 8001a62:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <color_led_init+0xa0>)
 8001a64:	4a0e      	ldr	r2, [pc, #56]	; (8001aa0 <color_led_init+0xc0>)
 8001a66:	649a      	str	r2, [r3, #72]	; 0x48
    g_color_hex_codes[COLORS_MINT] = COLOR_HEX_MINT;
 8001a68:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <color_led_init+0xa0>)
 8001a6a:	4a0e      	ldr	r2, [pc, #56]	; (8001aa4 <color_led_init+0xc4>)
 8001a6c:	64da      	str	r2, [r3, #76]	; 0x4c
    //g_color_hex_codes[COLORS_GRAY] = COLOR_HEX_GRAY;
    g_color_hex_codes[COLORS_BROWN] = COLOR_HEX_BROWN;
 8001a6e:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <color_led_init+0xa0>)
 8001a70:	4a0d      	ldr	r2, [pc, #52]	; (8001aa8 <color_led_init+0xc8>)
 8001a72:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	20000188 	.word	0x20000188
 8001a84:	00ffff00 	.word	0x00ffff00
 8001a88:	00ff4500 	.word	0x00ff4500
 8001a8c:	00ffa500 	.word	0x00ffa500
 8001a90:	00f0e68c 	.word	0x00f0e68c
 8001a94:	007cfc00 	.word	0x007cfc00
 8001a98:	00191970 	.word	0x00191970
 8001a9c:	008a2be2 	.word	0x008a2be2
 8001aa0:	00ff69b4 	.word	0x00ff69b4
 8001aa4:	004ebd88 	.word	0x004ebd88
 8001aa8:	00a52a2a 	.word	0x00a52a2a

08001aac <color_led_hex_to_rgb>:


void color_led_hex_to_rgb(const color_hex_code_e color, uint8_t *color_array)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
//    color_array[offsetof(ws2812b_led_t, red)] = ((color & 0xFF0000) >> 16);
//    color_array[offsetof(ws2812b_led_t, green)] = ((color & 0xFF0000) >> 8);
//    color_array[offsetof(ws2812b_led_t, blue)] = ((color & 0xFF0000) >> 0);

    color_array[offsetof(ws2812b_led_t, red)] = ((color & 0xFF0000) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, red))));
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	0c1b      	lsrs	r3, r3, #16
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	701a      	strb	r2, [r3, #0]
    color_array[offsetof(ws2812b_led_t, green)] = ((color & 0x00FF00) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, green))));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	0a1a      	lsrs	r2, r3, #8
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	701a      	strb	r2, [r3, #0]
    color_array[offsetof(ws2812b_led_t, blue)] = ((color & 0x0000FF) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, blue))));
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	3302      	adds	r3, #2
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	701a      	strb	r2, [r3, #0]
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
	...

08001ae4 <reset_ws2812b>:

extern volatile int datasentflag;

uint16_t pwm_reset[50] = {0};
void reset_ws2812b(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
    //xSemaphoreTake(g_dma_transfer_semaphore, portMAX_DELAY);
    //xTaskNotify(g_dma_transfer_handle, 0, eSetValueWithOverwrite);

    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_1, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 8001ae8:	2364      	movs	r3, #100	; 0x64
 8001aea:	4a09      	ldr	r2, [pc, #36]	; (8001b10 <reset_ws2812b+0x2c>)
 8001aec:	2100      	movs	r1, #0
 8001aee:	4809      	ldr	r0, [pc, #36]	; (8001b14 <reset_ws2812b+0x30>)
 8001af0:	f005 fe22 	bl	8007738 <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_2, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 8001af4:	2364      	movs	r3, #100	; 0x64
 8001af6:	4a06      	ldr	r2, [pc, #24]	; (8001b10 <reset_ws2812b+0x2c>)
 8001af8:	2104      	movs	r1, #4
 8001afa:	4806      	ldr	r0, [pc, #24]	; (8001b14 <reset_ws2812b+0x30>)
 8001afc:	f005 fe1c 	bl	8007738 <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_3, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 8001b00:	2364      	movs	r3, #100	; 0x64
 8001b02:	4a03      	ldr	r2, [pc, #12]	; (8001b10 <reset_ws2812b+0x2c>)
 8001b04:	2108      	movs	r1, #8
 8001b06:	4803      	ldr	r0, [pc, #12]	; (8001b14 <reset_ws2812b+0x30>)
 8001b08:	f005 fe16 	bl	8007738 <HAL_TIM_PWM_Start_DMA>
//    HAL_TIM_PWM_Start_DMA(&g_tim15_handle, TIM_CHANNEL_1, (uint32_t *)pwm_reset, sizeof(pwm_reset)));
//    HAL_TIM_PWM_Start_DMA(&g_tim16_handle, TIM_CHANNEL_1, (uint32_t *)pwm_reset, sizeof(pwm_reset)));
}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	20000240 	.word	0x20000240
 8001b14:	20001e14 	.word	0x20001e14

08001b18 <ws2812_convert_strip_num_to_strip_bit>:

static strip_bit_e ws2812_convert_strip_num_to_strip_bit(const strip_num_e strip_num)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
	return (strip_bit_e)(strip_num + 1);
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	3301      	adds	r3, #1
 8001b26:	b2db      	uxtb	r3, r3
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <ws2812_convert_strip_bit_to_strip_num>:


static strip_num_e ws2812_convert_strip_bit_to_strip_num(const strip_bit_e strip_bit)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	71fb      	strb	r3, [r7, #7]
	return (strip_num_e)(strip_bit - 1);
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	3b01      	subs	r3, #1
 8001b42:	b2db      	uxtb	r3, r3
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <ws2812_get_pwm_strip_offset>:


uint16_t ws2812_get_pwm_strip_offset(const strip_bit_e strip_bit)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	71fb      	strb	r3, [r7, #7]
    uint16_t offset = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	81fb      	strh	r3, [r7, #14]
    uint8_t strip_num = 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	737b      	strb	r3, [r7, #13]
    switch (strip_bit)
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d104      	bne.n	8001b72 <ws2812_get_pwm_strip_offset+0x22>
    {
#if defined(STRIP_1_LENGTH)
        case STRIP_BIT_1:
            offset = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	81fb      	strh	r3, [r7, #14]
            strip_num = 1;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	737b      	strb	r3, [r7, #13]
        break;
 8001b70:	e000      	b.n	8001b74 <ws2812_get_pwm_strip_offset+0x24>
        case STRIP_BIT_5:
            offset = STRIP_1_LENGTH + STRIP_2_LENGTH + STRIP_3_LENGTH + STRIP_4_LENGTH;
        break;
#endif
        default:
        break;
 8001b72:	bf00      	nop
    }
    return ((offset * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + (strip_num * WS2812B_RESET_TIME_CYCLES));
 8001b74:	89fa      	ldrh	r2, [r7, #14]
 8001b76:	4613      	mov	r3, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	4413      	add	r3, r2
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	ee07 3a90 	vmov	s15, r3
 8001b82:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b86:	7b7b      	ldrb	r3, [r7, #13]
 8001b88:	ee07 3a90 	vmov	s15, r3
 8001b8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b90:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001bb4 <ws2812_get_pwm_strip_offset+0x64>
 8001b94:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001b98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ba0:	ee17 3a90 	vmov	r3, s15
 8001ba4:	b29b      	uxth	r3, r3
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3714      	adds	r7, #20
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	453b8000 	.word	0x453b8000

08001bb8 <ws2812_get_strip_size>:


uint16_t ws2812_get_strip_size(const strip_bit_e strip_bit)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	71fb      	strb	r3, [r7, #7]
	uint16_t strip_size = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_ALL_SET == strip_bit) strip_size = g_max_strip_length;
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d103      	bne.n	8001bd4 <ws2812_get_strip_size+0x1c>
 8001bcc:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <ws2812_get_strip_size+0x3c>)
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	81fb      	strh	r3, [r7, #14]
 8001bd2:	e009      	b.n	8001be8 <ws2812_get_strip_size+0x30>
	else strip_size = strip_length[ws2812_convert_strip_num_to_strip_bit(strip_bit)];
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff ff9e 	bl	8001b18 <ws2812_convert_strip_num_to_strip_bit>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	461a      	mov	r2, r3
 8001be0:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <ws2812_get_strip_size+0x40>)
 8001be2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001be6:	81fb      	strh	r3, [r7, #14]
	return strip_size;
 8001be8:	89fb      	ldrh	r3, [r7, #14]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000234 	.word	0x20000234
 8001bf8:	20000004 	.word	0x20000004

08001bfc <ws2812_get_num_active_animation_leds>:
	return STRIP_BIT_NO_MORE_SET;  // if this is returned
}


uint16_t ws2812_get_num_active_animation_leds(const strip_mask_t strip_mask)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	80fb      	strh	r3, [r7, #6]
	uint16_t strip_size = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_ALL_SET == strip_mask) strip_size = g_num_leds;
 8001c0a:	88fb      	ldrh	r3, [r7, #6]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d103      	bne.n	8001c18 <ws2812_get_num_active_animation_leds+0x1c>
 8001c10:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <ws2812_get_num_active_animation_leds+0x3c>)
 8001c12:	881b      	ldrh	r3, [r3, #0]
 8001c14:	81fb      	strh	r3, [r7, #14]
 8001c16:	e008      	b.n	8001c2a <ws2812_get_num_active_animation_leds+0x2e>
	else
	{
#if defined(STRIP_1_LENGTH)
		if (STRIP_BIT_1 & strip_mask) strip_size += STRIP_1_LENGTH;
 8001c18:	88fb      	ldrh	r3, [r7, #6]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d002      	beq.n	8001c2a <ws2812_get_num_active_animation_leds+0x2e>
 8001c24:	89fb      	ldrh	r3, [r7, #14]
 8001c26:	331c      	adds	r3, #28
 8001c28:	81fb      	strh	r3, [r7, #14]
#endif
#if defined(STRIP_9_LENGTH)
		if (STRIP_BIT_9 & strip_mask) strip_size += STRIP_9_LENGTH;
#endif
	}
	return strip_size;
 8001c2a:	89fb      	ldrh	r3, [r7, #14]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	20000230 	.word	0x20000230

08001c3c <ws2812_led_get_max_strip_size>:


uint16_t ws2812_led_get_max_strip_size(const strip_mask_t strip_mask)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	80fb      	strh	r3, [r7, #6]
	uint16_t strip_size = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_ALL_SET == strip_mask) strip_size = g_max_strip_length;
 8001c4a:	88fb      	ldrh	r3, [r7, #6]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d103      	bne.n	8001c58 <ws2812_led_get_max_strip_size+0x1c>
 8001c50:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <ws2812_led_get_max_strip_size+0x40>)
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	81fb      	strh	r3, [r7, #14]
 8001c56:	e00a      	b.n	8001c6e <ws2812_led_get_max_strip_size+0x32>
	else
	{
#if defined(STRIP_1_LENGTH)
		if ((STRIP_BIT_1 & strip_mask) && (strip_size < STRIP_1_LENGTH)) strip_size = STRIP_1_LENGTH;
 8001c58:	88fb      	ldrh	r3, [r7, #6]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d004      	beq.n	8001c6e <ws2812_led_get_max_strip_size+0x32>
 8001c64:	89fb      	ldrh	r3, [r7, #14]
 8001c66:	2b1b      	cmp	r3, #27
 8001c68:	d801      	bhi.n	8001c6e <ws2812_led_get_max_strip_size+0x32>
 8001c6a:	231c      	movs	r3, #28
 8001c6c:	81fb      	strh	r3, [r7, #14]
#endif
#if defined(STRIP_9_LENGTH)
		if ((STRIP_BIT_9 & strip_mask) && (strip_size < STRIP_9_LENGTH)) strip_size = STRIP_9_LENGTH;
#endif
	}
	return strip_size;
 8001c6e:	89fb      	ldrh	r3, [r7, #14]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	20000234 	.word	0x20000234

08001c80 <ws2812_pixel_is_in_strip_range>:


bool ws2812_pixel_is_in_strip_range(const strip_bit_e strip_bit, const uint16_t pixel)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	460a      	mov	r2, r1
 8001c8a:	71fb      	strb	r3, [r7, #7]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	80bb      	strh	r3, [r7, #4]
	bool return_val = false;
 8001c90:	2300      	movs	r3, #0
 8001c92:	73fb      	strb	r3, [r7, #15]
#if defined(STRIP_1_LENGTH)
	if ((STRIP_BIT_1 == strip_bit) && (pixel < STRIP_1_LENGTH)) return_val = true;
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d104      	bne.n	8001ca4 <ws2812_pixel_is_in_strip_range+0x24>
 8001c9a:	88bb      	ldrh	r3, [r7, #4]
 8001c9c:	2b1b      	cmp	r3, #27
 8001c9e:	d801      	bhi.n	8001ca4 <ws2812_pixel_is_in_strip_range+0x24>
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	73fb      	strb	r3, [r7, #15]
	else if ((STRIP_BIT_8 == strip_bit) && (pixel < STRIP_8_LENGTH)) return_val = true;
#endif
#if defined(STRIP_9_LENGTH)
	else if ((STRIP_BIT_9 == strip_bit) && (pixel < STRIP_9_LENGTH)) return_val = true;
#endif
	return return_val;
 8001ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
	...

08001cb4 <ws2812b_set_led>:


void ws2812b_set_led(const strip_bit_e strip_bit, const uint16_t led_num, const color_t red, const color_t green,
                     const color_t blue)
{
 8001cb4:	b590      	push	{r4, r7, lr}
 8001cb6:	b087      	sub	sp, #28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4604      	mov	r4, r0
 8001cbc:	4608      	mov	r0, r1
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4623      	mov	r3, r4
 8001cc4:	73fb      	strb	r3, [r7, #15]
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	81bb      	strh	r3, [r7, #12]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	73bb      	strb	r3, [r7, #14]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	72fb      	strb	r3, [r7, #11]
	strip_num_e strip_num = ws2812_convert_strip_bit_to_strip_num(strip_bit);
 8001cd2:	7bfb      	ldrb	r3, [r7, #15]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ff2d 	bl	8001b34 <ws2812_convert_strip_bit_to_strip_num>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	75fb      	strb	r3, [r7, #23]
    (gp_ws28128b_strip[strip_num] + led_num)->red = red * g_max_current_ratio;
 8001cde:	7bbb      	ldrb	r3, [r7, #14]
 8001ce0:	ee07 3a90 	vmov	s15, r3
 8001ce4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ce8:	4b26      	ldr	r3, [pc, #152]	; (8001d84 <ws2812b_set_led+0xd0>)
 8001cea:	edd3 7a00 	vldr	s15, [r3]
 8001cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf2:	7dfb      	ldrb	r3, [r7, #23]
 8001cf4:	4a24      	ldr	r2, [pc, #144]	; (8001d88 <ws2812b_set_led+0xd4>)
 8001cf6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001cfa:	89ba      	ldrh	r2, [r7, #12]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4413      	add	r3, r2
 8001d02:	440b      	add	r3, r1
 8001d04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d08:	edc7 7a01 	vstr	s15, [r7, #4]
 8001d0c:	793a      	ldrb	r2, [r7, #4]
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	701a      	strb	r2, [r3, #0]
    (gp_ws28128b_strip[strip_num] + led_num)->green = green * g_max_current_ratio;
 8001d12:	7afb      	ldrb	r3, [r7, #11]
 8001d14:	ee07 3a90 	vmov	s15, r3
 8001d18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d1c:	4b19      	ldr	r3, [pc, #100]	; (8001d84 <ws2812b_set_led+0xd0>)
 8001d1e:	edd3 7a00 	vldr	s15, [r3]
 8001d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d26:	7dfb      	ldrb	r3, [r7, #23]
 8001d28:	4a17      	ldr	r2, [pc, #92]	; (8001d88 <ws2812b_set_led+0xd4>)
 8001d2a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001d2e:	89ba      	ldrh	r2, [r7, #12]
 8001d30:	4613      	mov	r3, r2
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	4413      	add	r3, r2
 8001d36:	440b      	add	r3, r1
 8001d38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d3c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001d40:	793a      	ldrb	r2, [r7, #4]
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	705a      	strb	r2, [r3, #1]
    (gp_ws28128b_strip[strip_num] + led_num)->blue = blue * g_max_current_ratio;
 8001d46:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001d4a:	ee07 3a90 	vmov	s15, r3
 8001d4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d52:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <ws2812b_set_led+0xd0>)
 8001d54:	edd3 7a00 	vldr	s15, [r3]
 8001d58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d5c:	7dfb      	ldrb	r3, [r7, #23]
 8001d5e:	4a0a      	ldr	r2, [pc, #40]	; (8001d88 <ws2812b_set_led+0xd4>)
 8001d60:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001d64:	89ba      	ldrh	r2, [r7, #12]
 8001d66:	4613      	mov	r3, r2
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	4413      	add	r3, r2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d72:	edc7 7a01 	vstr	s15, [r7, #4]
 8001d76:	793a      	ldrb	r2, [r7, #4]
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	709a      	strb	r2, [r3, #2]
}
 8001d7c:	bf00      	nop
 8001d7e:	371c      	adds	r7, #28
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd90      	pop	{r4, r7, pc}
 8001d84:	20000000 	.word	0x20000000
 8001d88:	2000023c 	.word	0x2000023c

08001d8c <ws2812b_fill_pwm_buffer_strip_one>:



#if defined(STRIP_1_LENGTH)
void ws2812b_fill_pwm_buffer_strip_one(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
    uint32_t color = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
    uint32_t strip_size = STRIP_1_LENGTH;
 8001d96:	231c      	movs	r3, #28
 8001d98:	60bb      	str	r3, [r7, #8]
    uint32_t strip_pwm_offset = ws2812_get_pwm_strip_offset(STRIP_BIT_1);
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	f7ff fed8 	bl	8001b50 <ws2812_get_pwm_strip_offset>
 8001da0:	4603      	mov	r3, r0
 8001da2:	607b      	str	r3, [r7, #4]
    while (!gb_dma_cmplt_strip_2)
 8001da4:	e002      	b.n	8001dac <ws2812b_fill_pwm_buffer_strip_one+0x20>
    {
        osDelay(1);
 8001da6:	2001      	movs	r0, #1
 8001da8:	f000 fcae 	bl	8002708 <osDelay>
    while (!gb_dma_cmplt_strip_2)
 8001dac:	4b44      	ldr	r3, [pc, #272]	; (8001ec0 <ws2812b_fill_pwm_buffer_strip_one+0x134>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	f083 0301 	eor.w	r3, r3, #1
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f5      	bne.n	8001da6 <ws2812b_fill_pwm_buffer_strip_one+0x1a>
    }
    for (uint16_t iii = 0; iii < strip_size; iii++)
 8001dba:	2300      	movs	r3, #0
 8001dbc:	82fb      	strh	r3, [r7, #22]
 8001dbe:	e046      	b.n	8001e4e <ws2812b_fill_pwm_buffer_strip_one+0xc2>
    {
        color = (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->green) << 16) | \
 8001dc0:	4b40      	ldr	r3, [pc, #256]	; (8001ec4 <ws2812b_fill_pwm_buffer_strip_one+0x138>)
 8001dc2:	6819      	ldr	r1, [r3, #0]
 8001dc4:	8afa      	ldrh	r2, [r7, #22]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	4413      	add	r3, r2
 8001dcc:	440b      	add	r3, r1
 8001dce:	785b      	ldrb	r3, [r3, #1]
 8001dd0:	0419      	lsls	r1, r3, #16
                                (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->red) << 8) | \
 8001dd2:	4b3c      	ldr	r3, [pc, #240]	; (8001ec4 <ws2812b_fill_pwm_buffer_strip_one+0x138>)
 8001dd4:	6818      	ldr	r0, [r3, #0]
 8001dd6:	8afa      	ldrh	r2, [r7, #22]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	4413      	add	r3, r2
 8001dde:	4403      	add	r3, r0
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	021b      	lsls	r3, r3, #8
        color = (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->green) << 16) | \
 8001de4:	4319      	orrs	r1, r3
                                (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->blue));
 8001de6:	4b37      	ldr	r3, [pc, #220]	; (8001ec4 <ws2812b_fill_pwm_buffer_strip_one+0x138>)
 8001de8:	6818      	ldr	r0, [r3, #0]
 8001dea:	8afa      	ldrh	r2, [r7, #22]
 8001dec:	4613      	mov	r3, r2
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	4413      	add	r3, r2
 8001df2:	4403      	add	r3, r0
 8001df4:	789b      	ldrb	r3, [r3, #2]
                                (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->red) << 8) | \
 8001df6:	430b      	orrs	r3, r1
        color = (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->green) << 16) | \
 8001df8:	60fb      	str	r3, [r7, #12]
        for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	757b      	strb	r3, [r7, #21]
 8001dfe:	e020      	b.n	8001e42 <ws2812b_fill_pwm_buffer_strip_one+0xb6>
        {
            gp_pwm_data_fill[strip_pwm_offset + (iii * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + yyy] = (color & (1 << (23 - yyy))) ? (uint16_t)(WS2812B_BIT_SET_CYCLES + 1) : (uint16_t)WS2812B_BIT_RESET_CYCLES;
 8001e00:	7d7b      	ldrb	r3, [r7, #21]
 8001e02:	f1c3 0317 	rsb	r3, r3, #23
 8001e06:	2201      	movs	r2, #1
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	4013      	ands	r3, r2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <ws2812b_fill_pwm_buffer_strip_one+0x8e>
 8001e16:	2028      	movs	r0, #40	; 0x28
 8001e18:	e000      	b.n	8001e1c <ws2812b_fill_pwm_buffer_strip_one+0x90>
 8001e1a:	2014      	movs	r0, #20
 8001e1c:	4b2a      	ldr	r3, [pc, #168]	; (8001ec8 <ws2812b_fill_pwm_buffer_strip_one+0x13c>)
 8001e1e:	6819      	ldr	r1, [r3, #0]
 8001e20:	8afa      	ldrh	r2, [r7, #22]
 8001e22:	4613      	mov	r3, r2
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	4413      	add	r3, r2
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	441a      	add	r2, r3
 8001e30:	7d7b      	ldrb	r3, [r7, #21]
 8001e32:	4413      	add	r3, r2
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	440b      	add	r3, r1
 8001e38:	4602      	mov	r2, r0
 8001e3a:	801a      	strh	r2, [r3, #0]
        for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 8001e3c:	7d7b      	ldrb	r3, [r7, #21]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	757b      	strb	r3, [r7, #21]
 8001e42:	7d7b      	ldrb	r3, [r7, #21]
 8001e44:	2b17      	cmp	r3, #23
 8001e46:	d9db      	bls.n	8001e00 <ws2812b_fill_pwm_buffer_strip_one+0x74>
    for (uint16_t iii = 0; iii < strip_size; iii++)
 8001e48:	8afb      	ldrh	r3, [r7, #22]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	82fb      	strh	r3, [r7, #22]
 8001e4e:	8afb      	ldrh	r3, [r7, #22]
 8001e50:	68ba      	ldr	r2, [r7, #8]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d8b4      	bhi.n	8001dc0 <ws2812b_fill_pwm_buffer_strip_one+0x34>
        }
    }
    for (uint16_t iii = 0; iii < WS2812B_RESET_TIME_CYCLES; iii++)
 8001e56:	2300      	movs	r3, #0
 8001e58:	827b      	strh	r3, [r7, #18]
 8001e5a:	e012      	b.n	8001e82 <ws2812b_fill_pwm_buffer_strip_one+0xf6>
    {
        gp_pwm_data_fill[(strip_pwm_offset + (strip_size * BITS_PER_BYTE * sizeof(ws2812b_led_t))) + iii] = 0;
 8001e5c:	4b1a      	ldr	r3, [pc, #104]	; (8001ec8 <ws2812b_fill_pwm_buffer_strip_one+0x13c>)
 8001e5e:	6819      	ldr	r1, [r3, #0]
 8001e60:	68ba      	ldr	r2, [r7, #8]
 8001e62:	4613      	mov	r3, r2
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	4413      	add	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	441a      	add	r2, r3
 8001e70:	8a7b      	ldrh	r3, [r7, #18]
 8001e72:	4413      	add	r3, r2
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	440b      	add	r3, r1
 8001e78:	2200      	movs	r2, #0
 8001e7a:	801a      	strh	r2, [r3, #0]
    for (uint16_t iii = 0; iii < WS2812B_RESET_TIME_CYCLES; iii++)
 8001e7c:	8a7b      	ldrh	r3, [r7, #18]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	827b      	strh	r3, [r7, #18]
 8001e82:	8a7b      	ldrh	r3, [r7, #18]
 8001e84:	ee07 3a90 	vmov	s15, r3
 8001e88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e8c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001ecc <ws2812b_fill_pwm_buffer_strip_one+0x140>
 8001e90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e98:	d4e0      	bmi.n	8001e5c <ws2812b_fill_pwm_buffer_strip_one+0xd0>
    }
    gb_dma_cmplt_strip_1 = false;
 8001e9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ed0 <ws2812b_fill_pwm_buffer_strip_one+0x144>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_1, (uint32_t *)(gp_pwm_data_fill + strip_pwm_offset), (STRIP_1_LENGTH * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + WS2812B_RESET_TIME_CYCLES);
 8001ea0:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <ws2812b_fill_pwm_buffer_strip_one+0x13c>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	441a      	add	r2, r3
 8001eaa:	f640 6358 	movw	r3, #3672	; 0xe58
 8001eae:	2100      	movs	r1, #0
 8001eb0:	4808      	ldr	r0, [pc, #32]	; (8001ed4 <ws2812b_fill_pwm_buffer_strip_one+0x148>)
 8001eb2:	f005 fc41 	bl	8007738 <HAL_TIM_PWM_Start_DMA>
}
 8001eb6:	bf00      	nop
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	200000fd 	.word	0x200000fd
 8001ec4:	2000023c 	.word	0x2000023c
 8001ec8:	20000238 	.word	0x20000238
 8001ecc:	453b8000 	.word	0x453b8000
 8001ed0:	200000fc 	.word	0x200000fc
 8001ed4:	20001e14 	.word	0x20001e14

08001ed8 <ws2812b_init>:


uint32_t g_size = 0;

void ws2812b_init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0

#if defined(STRIP_1_LENGTH)
	gp_ws28128b_strip[STRIP_NUM_1] = g_strip_1;
 8001ede:	4b30      	ldr	r3, [pc, #192]	; (8001fa0 <ws2812b_init+0xc8>)
 8001ee0:	4a30      	ldr	r2, [pc, #192]	; (8001fa4 <ws2812b_init+0xcc>)
 8001ee2:	601a      	str	r2, [r3, #0]
#endif
#if defined(STRIP_4_LENGTH)
	gp_ws28128b_strip[STRIP_NUM_4] = g_strip_4;
#endif

	uint8_t num_strips = NUM_STRIPS;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	70fb      	strb	r3, [r7, #3]
	for (int iii = 0; iii < NUM_STRIPS; iii++) g_all_strip_mask |= 1 << iii;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	607b      	str	r3, [r7, #4]
 8001eec:	e00f      	b.n	8001f0e <ws2812b_init+0x36>
 8001eee:	2201      	movs	r2, #1
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	b21a      	sxth	r2, r3
 8001ef8:	4b2b      	ldr	r3, [pc, #172]	; (8001fa8 <ws2812b_init+0xd0>)
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	b21b      	sxth	r3, r3
 8001efe:	4313      	orrs	r3, r2
 8001f00:	b21b      	sxth	r3, r3
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	4b28      	ldr	r3, [pc, #160]	; (8001fa8 <ws2812b_init+0xd0>)
 8001f06:	801a      	strh	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	607b      	str	r3, [r7, #4]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	ddec      	ble.n	8001eee <ws2812b_init+0x16>
	switch (num_strips)
 8001f14:	78fb      	ldrb	r3, [r7, #3]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d10d      	bne.n	8001f36 <ws2812b_init+0x5e>
		case 2:
			g_num_leds += STRIP_2_LENGTH;
			if (STRIP_2_LENGTH > g_max_strip_length) g_max_strip_length = STRIP_2_LENGTH;
#endif
		case 1:
			g_num_leds += STRIP_1_LENGTH;
 8001f1a:	4b24      	ldr	r3, [pc, #144]	; (8001fac <ws2812b_init+0xd4>)
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	331c      	adds	r3, #28
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	4b22      	ldr	r3, [pc, #136]	; (8001fac <ws2812b_init+0xd4>)
 8001f24:	801a      	strh	r2, [r3, #0]
			if (STRIP_1_LENGTH > g_max_strip_length) g_max_strip_length = STRIP_1_LENGTH;
 8001f26:	4b22      	ldr	r3, [pc, #136]	; (8001fb0 <ws2812b_init+0xd8>)
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	2b1b      	cmp	r3, #27
 8001f2c:	d802      	bhi.n	8001f34 <ws2812b_init+0x5c>
 8001f2e:	4b20      	ldr	r3, [pc, #128]	; (8001fb0 <ws2812b_init+0xd8>)
 8001f30:	221c      	movs	r2, #28
 8001f32:	801a      	strh	r2, [r3, #0]
		break;
 8001f34:	bf00      	nop
	}
    gp_pwm_data_fill = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
 8001f36:	4b1d      	ldr	r3, [pc, #116]	; (8001fac <ws2812b_init+0xd4>)
 8001f38:	881b      	ldrh	r3, [r3, #0]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	4413      	add	r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	ee07 3a90 	vmov	s15, r3
 8001f48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f4c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001fb4 <ws2812b_init+0xdc>
 8001f50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f58:	ee17 0a90 	vmov	r0, s15
 8001f5c:	f008 fb3e 	bl	800a5dc <malloc>
 8001f60:	4603      	mov	r3, r0
 8001f62:	461a      	mov	r2, r3
 8001f64:	4b14      	ldr	r3, [pc, #80]	; (8001fb8 <ws2812b_init+0xe0>)
 8001f66:	601a      	str	r2, [r3, #0]
    //gp_pwm_data_ping = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
    //gp_pwm_data_pong = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
    g_size = (sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES);
 8001f68:	4b10      	ldr	r3, [pc, #64]	; (8001fac <ws2812b_init+0xd4>)
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4613      	mov	r3, r2
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	4413      	add	r3, r2
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	ee07 3a90 	vmov	s15, r3
 8001f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f7e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001fb4 <ws2812b_init+0xdc>
 8001f82:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f8a:	ee17 2a90 	vmov	r2, s15
 8001f8e:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <ws2812b_init+0xe4>)
 8001f90:	601a      	str	r2, [r3, #0]
    //gp_pwm_data_fill = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_max_strip_length) + WS2812B_RESET_TIME_CYCLES);
	current_monitor_init();
 8001f92:	f7fe ff1b 	bl	8000dcc <current_monitor_init>
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	2000023c 	.word	0x2000023c
 8001fa4:	200001dc 	.word	0x200001dc
 8001fa8:	20000232 	.word	0x20000232
 8001fac:	20000230 	.word	0x20000230
 8001fb0:	20000234 	.word	0x20000234
 8001fb4:	453b8000 	.word	0x453b8000
 8001fb8:	20000238 	.word	0x20000238
 8001fbc:	200002a4 	.word	0x200002a4

08001fc0 <ws2812b_show_strip_one>:


void ws2812b_show_strip_one(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
    ws2812b_fill_pwm_buffer_strip_one();
 8001fc4:	f7ff fee2 	bl	8001d8c <ws2812b_fill_pwm_buffer_strip_one>
}
 8001fc8:	bf00      	nop
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <semaphore_create>:
SemaphoreHandle_t g_dma_fill_semaphore;
StaticSemaphore_t g_dma_fill_semaphore_buffer;


void semaphore_create(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af02      	add	r7, sp, #8
    g_dma_transfer_semaphore = xSemaphoreCreateBinaryStatic(&g_dma_transfer_semaphore_buffer);
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	4b12      	ldr	r3, [pc, #72]	; (8002020 <semaphore_create+0x54>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2100      	movs	r1, #0
 8001fdc:	2001      	movs	r0, #1
 8001fde:	f000 fcff 	bl	80029e0 <xQueueGenericCreateStatic>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	4a0f      	ldr	r2, [pc, #60]	; (8002024 <semaphore_create+0x58>)
 8001fe6:	6013      	str	r3, [r2, #0]
    g_dma_fill_semaphore = xSemaphoreCreateBinaryStatic(&g_dma_fill_semaphore_buffer);
 8001fe8:	2303      	movs	r3, #3
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <semaphore_create+0x5c>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	2001      	movs	r0, #1
 8001ff4:	f000 fcf4 	bl	80029e0 <xQueueGenericCreateStatic>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	4a0c      	ldr	r2, [pc, #48]	; (800202c <semaphore_create+0x60>)
 8001ffc:	6013      	str	r3, [r2, #0]
    xSemaphoreGive(g_dma_transfer_semaphore);
 8001ffe:	4b09      	ldr	r3, [pc, #36]	; (8002024 <semaphore_create+0x58>)
 8002000:	6818      	ldr	r0, [r3, #0]
 8002002:	2300      	movs	r3, #0
 8002004:	2200      	movs	r2, #0
 8002006:	2100      	movs	r1, #0
 8002008:	f000 fd86 	bl	8002b18 <xQueueGenericSend>
    xSemaphoreGive(g_dma_fill_semaphore);
 800200c:	4b07      	ldr	r3, [pc, #28]	; (800202c <semaphore_create+0x60>)
 800200e:	6818      	ldr	r0, [r3, #0]
 8002010:	2300      	movs	r3, #0
 8002012:	2200      	movs	r2, #0
 8002014:	2100      	movs	r1, #0
 8002016:	f000 fd7f 	bl	8002b18 <xQueueGenericSend>
}
 800201a:	bf00      	nop
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	200002ac 	.word	0x200002ac
 8002024:	200002a8 	.word	0x200002a8
 8002028:	20000300 	.word	0x20000300
 800202c:	200002fc 	.word	0x200002fc

08002030 <task_button_press_interrupt_occurred>:
bool        g_animate_led_pause_flag = false;
bool        g_animate_led_interrupt = false;
bool        g_interrupt_flag[NUM_ISR] = {false};

bool task_button_press_interrupt_occurred(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
    return g_animate_led_interrupt;
 8002034:	4b03      	ldr	r3, [pc, #12]	; (8002044 <task_button_press_interrupt_occurred+0x14>)
 8002036:	781b      	ldrb	r3, [r3, #0]
}
 8002038:	4618      	mov	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	20000372 	.word	0x20000372

08002048 <task_button_press_ctrl_interrupt_flag>:
    g_interrupt_flag[src] = true;
}


bool task_button_press_ctrl_interrupt_flag(const isr_e src)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	71fb      	strb	r3, [r7, #7]
    bool return_val = g_interrupt_flag[src];
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	4a08      	ldr	r2, [pc, #32]	; (8002078 <task_button_press_ctrl_interrupt_flag+0x30>)
 8002056:	5cd3      	ldrb	r3, [r2, r3]
 8002058:	73fb      	strb	r3, [r7, #15]
    if (return_val) g_interrupt_flag[src] = false; // auto clear
 800205a:	7bfb      	ldrb	r3, [r7, #15]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <task_button_press_ctrl_interrupt_flag+0x20>
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	4a05      	ldr	r2, [pc, #20]	; (8002078 <task_button_press_ctrl_interrupt_flag+0x30>)
 8002064:	2100      	movs	r1, #0
 8002066:	54d1      	strb	r1, [r2, r3]
    return return_val;
 8002068:	7bfb      	ldrb	r3, [r7, #15]
}
 800206a:	4618      	mov	r0, r3
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	20000374 	.word	0x20000374

0800207c <task_button_press_check_interrupts>:


bool task_button_press_check_interrupts(uint8_t *red, uint8_t *green, uint8_t *blue)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
    bool return_val = false;
 8002088:	2300      	movs	r3, #0
 800208a:	75fb      	strb	r3, [r7, #23]
    if (task_button_press_ctrl_interrupt_flag(ISR_STATE))
 800208c:	2001      	movs	r0, #1
 800208e:	f7ff ffdb 	bl	8002048 <task_button_press_ctrl_interrupt_flag>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d008      	beq.n	80020aa <task_button_press_check_interrupts+0x2e>
    {
        task_button_press_interrupt_flag_clear();
 8002098:	f000 f83a 	bl	8002110 <task_button_press_interrupt_flag_clear>
        return_val = true;
 800209c:	2301      	movs	r3, #1
 800209e:	75fb      	strb	r3, [r7, #23]
        animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLACK);
 80020a0:	2100      	movs	r1, #0
 80020a2:	2001      	movs	r0, #1
 80020a4:	f7fe ff94 	bl	8000fd0 <animate_led_solid_custom_color>
 80020a8:	e02a      	b.n	8002100 <task_button_press_check_interrupts+0x84>
    }
    else if (task_button_press_ctrl_interrupt_flag(ISR_PAUSE))
 80020aa:	2003      	movs	r0, #3
 80020ac:	f7ff ffcc 	bl	8002048 <task_button_press_ctrl_interrupt_flag>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00a      	beq.n	80020cc <task_button_press_check_interrupts+0x50>
    {
        task_button_press_interrupt_flag_clear();
 80020b6:	f000 f82b 	bl	8002110 <task_button_press_interrupt_flag_clear>
        while (g_animate_led_pause_flag)
 80020ba:	e002      	b.n	80020c2 <task_button_press_check_interrupts+0x46>
        {
            osDelay(10);
 80020bc:	200a      	movs	r0, #10
 80020be:	f000 fb23 	bl	8002708 <osDelay>
        while (g_animate_led_pause_flag)
 80020c2:	4b12      	ldr	r3, [pc, #72]	; (800210c <task_button_press_check_interrupts+0x90>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1f8      	bne.n	80020bc <task_button_press_check_interrupts+0x40>
 80020ca:	e019      	b.n	8002100 <task_button_press_check_interrupts+0x84>
        }
    }
    else if (task_button_press_ctrl_interrupt_flag(ISR_COLOR))
 80020cc:	2002      	movs	r0, #2
 80020ce:	f7ff ffbb 	bl	8002048 <task_button_press_ctrl_interrupt_flag>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d013      	beq.n	8002100 <task_button_press_check_interrupts+0x84>
    {
        task_button_press_interrupt_flag_clear();
 80020d8:	f000 f81a 	bl	8002110 <task_button_press_interrupt_flag_clear>
        // interrupt modifies the current color... apply it to the animation!
        *red = task_led_ctrl_color_red_hex();
 80020dc:	f000 f924 	bl	8002328 <task_led_ctrl_color_red_hex>
 80020e0:	4603      	mov	r3, r0
 80020e2:	461a      	mov	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	701a      	strb	r2, [r3, #0]
        *green = task_led_ctrl_color_green_hex();
 80020e8:	f000 f946 	bl	8002378 <task_led_ctrl_color_green_hex>
 80020ec:	4603      	mov	r3, r0
 80020ee:	461a      	mov	r2, r3
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	701a      	strb	r2, [r3, #0]
        *blue = task_led_ctrl_color_blue_hex();
 80020f4:	f000 f968 	bl	80023c8 <task_led_ctrl_color_blue_hex>
 80020f8:	4603      	mov	r3, r0
 80020fa:	461a      	mov	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	701a      	strb	r2, [r3, #0]
    }
    return return_val;
 8002100:	7dfb      	ldrb	r3, [r7, #23]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000371 	.word	0x20000371

08002110 <task_button_press_interrupt_flag_clear>:


void task_button_press_interrupt_flag_clear(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
    g_animate_led_interrupt = false;
 8002114:	4b03      	ldr	r3, [pc, #12]	; (8002124 <task_button_press_interrupt_flag_clear+0x14>)
 8002116:	2200      	movs	r2, #0
 8002118:	701a      	strb	r2, [r3, #0]
}
 800211a:	bf00      	nop
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	20000372 	.word	0x20000372

08002128 <task_led_ctrl_adjust_parameters>:
extern bool             task_button_press_major_change;


static void task_led_ctrl_adjust_parameters(const task_led_ctrl_loop_iterations_e max_iterations,
                                            const task_led_ctrl_delay_ms_e animation_delay_ms)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	460a      	mov	r2, r1
 8002132:	71fb      	strb	r3, [r7, #7]
 8002134:	4613      	mov	r3, r2
 8002136:	80bb      	strh	r3, [r7, #4]
    g_animation_iterations++;
 8002138:	4b18      	ldr	r3, [pc, #96]	; (800219c <task_led_ctrl_adjust_parameters+0x74>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	3301      	adds	r3, #1
 800213e:	b2da      	uxtb	r2, r3
 8002140:	4b16      	ldr	r3, [pc, #88]	; (800219c <task_led_ctrl_adjust_parameters+0x74>)
 8002142:	701a      	strb	r2, [r3, #0]
    if (MASTER_LED_STATE_DEMO == g_master_led_state)
 8002144:	4b16      	ldr	r3, [pc, #88]	; (80021a0 <task_led_ctrl_adjust_parameters+0x78>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d11b      	bne.n	8002184 <task_led_ctrl_adjust_parameters+0x5c>
    {
        if (TASK_LED_CTRL_DELAY_MS_0 != animation_delay_ms) task_led_ctrl_delay(animation_delay_ms);
 800214c:	88bb      	ldrh	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <task_led_ctrl_adjust_parameters+0x32>
 8002152:	88bb      	ldrh	r3, [r7, #4]
 8002154:	4618      	mov	r0, r3
 8002156:	f000 f8b3 	bl	80022c0 <task_led_ctrl_delay>
        if (max_iterations == g_animation_iterations)
 800215a:	4b10      	ldr	r3, [pc, #64]	; (800219c <task_led_ctrl_adjust_parameters+0x74>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	79fa      	ldrb	r2, [r7, #7]
 8002160:	429a      	cmp	r2, r3
 8002162:	d10f      	bne.n	8002184 <task_led_ctrl_adjust_parameters+0x5c>
        {
            g_led_state = (led_state_e) (g_led_state + 1);
 8002164:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <task_led_ctrl_adjust_parameters+0x7c>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	3301      	adds	r3, #1
 800216a:	b2da      	uxtb	r2, r3
 800216c:	4b0d      	ldr	r3, [pc, #52]	; (80021a4 <task_led_ctrl_adjust_parameters+0x7c>)
 800216e:	701a      	strb	r2, [r3, #0]
            if (NUM_LED_STATES == g_led_state) g_led_state = LED_STATE_FIRST;
 8002170:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <task_led_ctrl_adjust_parameters+0x7c>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b08      	cmp	r3, #8
 8002176:	d102      	bne.n	800217e <task_led_ctrl_adjust_parameters+0x56>
 8002178:	4b0a      	ldr	r3, [pc, #40]	; (80021a4 <task_led_ctrl_adjust_parameters+0x7c>)
 800217a:	2200      	movs	r2, #0
 800217c:	701a      	strb	r2, [r3, #0]
            g_animation_iterations = 0;
 800217e:	4b07      	ldr	r3, [pc, #28]	; (800219c <task_led_ctrl_adjust_parameters+0x74>)
 8002180:	2200      	movs	r2, #0
 8002182:	701a      	strb	r2, [r3, #0]
        }
    }
    if (MASTER_COLOR_STATE_DEMO == task_led_ctrl_color_state()) task_led_ctrl_color_random();
 8002184:	f000 f8b2 	bl	80022ec <task_led_ctrl_color_state>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <task_led_ctrl_adjust_parameters+0x6a>
 800218e:	f000 f941 	bl	8002414 <task_led_ctrl_color_random>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	2000037b 	.word	0x2000037b
 80021a0:	20000378 	.word	0x20000378
 80021a4:	20000379 	.word	0x20000379

080021a8 <task_led_ctrl_strip_one>:
}



void task_led_ctrl_strip_one(void *argument)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af02      	add	r7, sp, #8
 80021ae:	6078      	str	r0, [r7, #4]
    osDelay(10);
 80021b0:	200a      	movs	r0, #10
 80021b2:	f000 faa9 	bl	8002708 <osDelay>

    while(task_button_press_major_change)
 80021b6:	e002      	b.n	80021be <task_led_ctrl_strip_one+0x16>
    {
        osDelay(10);
 80021b8:	200a      	movs	r0, #10
 80021ba:	f000 faa5 	bl	8002708 <osDelay>
    while(task_button_press_major_change)
 80021be:	4b3e      	ldr	r3, [pc, #248]	; (80022b8 <task_led_ctrl_strip_one+0x110>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f8      	bne.n	80021b8 <task_led_ctrl_strip_one+0x10>
    }
    while (1)
    {
        switch(g_led_state)
 80021c6:	4b3d      	ldr	r3, [pc, #244]	; (80022bc <task_led_ctrl_strip_one+0x114>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b07      	cmp	r3, #7
 80021cc:	d871      	bhi.n	80022b2 <task_led_ctrl_strip_one+0x10a>
 80021ce:	a201      	add	r2, pc, #4	; (adr r2, 80021d4 <task_led_ctrl_strip_one+0x2c>)
 80021d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d4:	08002299 	.word	0x08002299
 80021d8:	080021f5 	.word	0x080021f5
 80021dc:	0800220d 	.word	0x0800220d
 80021e0:	08002221 	.word	0x08002221
 80021e4:	08002233 	.word	0x08002233
 80021e8:	0800224d 	.word	0x0800224d
 80021ec:	0800225f 	.word	0x0800225f
 80021f0:	08002277 	.word	0x08002277
                else task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_5000);
            break;
    #endif
    #if defined(ENABLE_LED_STATE_SPARKLE_NO_FILL)
            case LED_STATE_SPARKLE_NO_FILL:
                animate_led_turn_all_pixels_off();
 80021f4:	f7fe ff0e 	bl	8001014 <animate_led_turn_all_pixels_off>
                animate_led_sparkle_only_random_color(STRIP_BIT_1, false, 100);//random(0, 50));
 80021f8:	2264      	movs	r2, #100	; 0x64
 80021fa:	2100      	movs	r1, #0
 80021fc:	2001      	movs	r0, #1
 80021fe:	f7ff f929 	bl	8001454 <animate_led_sparkle_only_random_color>
                task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_0);
 8002202:	2100      	movs	r1, #0
 8002204:	2005      	movs	r0, #5
 8002206:	f7ff ff8f 	bl	8002128 <task_led_ctrl_adjust_parameters>
            break;
 800220a:	e053      	b.n	80022b4 <task_led_ctrl_strip_one+0x10c>
    #endif
    #if defined(ENABLE_LED_STATE_SPARKLE_FILL)
            case LED_STATE_SPARKLE_FILL:
                animate_led_sparkle_only_random_color(STRIP_BIT_1, true, 100);
 800220c:	2264      	movs	r2, #100	; 0x64
 800220e:	2101      	movs	r1, #1
 8002210:	2001      	movs	r0, #1
 8002212:	f7ff f91f 	bl	8001454 <animate_led_sparkle_only_random_color>
                task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 8002216:	2100      	movs	r1, #0
 8002218:	200a      	movs	r0, #10
 800221a:	f7ff ff85 	bl	8002128 <task_led_ctrl_adjust_parameters>
            break;
 800221e:	e049      	b.n	80022b4 <task_led_ctrl_strip_one+0x10c>
    #endif
    #if defined(ENABLE_LED_STATE_RAINBOW_CYCLE)
            case LED_STATE_RAINBOW_CYCLE:
                animate_led_rainbow_cycle(STRIP_BIT_1, 10);
 8002220:	210a      	movs	r1, #10
 8002222:	2001      	movs	r0, #1
 8002224:	f7ff f9a8 	bl	8001578 <animate_led_rainbow_cycle>
                task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_0);
 8002228:	2100      	movs	r1, #0
 800222a:	2005      	movs	r0, #5
 800222c:	f7ff ff7c 	bl	8002128 <task_led_ctrl_adjust_parameters>
            break;
 8002230:	e040      	b.n	80022b4 <task_led_ctrl_strip_one+0x10c>
    #endif
    #if defined(ENABLE_LED_STATE_THEATER_CHASE)
            case LED_STATE_THEATER_CHASE:
                animate_led_theater_chase(STRIP_BIT_1, task_led_ctrl_color_hex(), 20);
 8002232:	f000 f867 	bl	8002304 <task_led_ctrl_color_hex>
 8002236:	4603      	mov	r3, r0
 8002238:	2214      	movs	r2, #20
 800223a:	4619      	mov	r1, r3
 800223c:	2001      	movs	r0, #1
 800223e:	f7ff fa7f 	bl	8001740 <animate_led_theater_chase>
                task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 8002242:	2100      	movs	r1, #0
 8002244:	200a      	movs	r0, #10
 8002246:	f7ff ff6f 	bl	8002128 <task_led_ctrl_adjust_parameters>
            break;
 800224a:	e033      	b.n	80022b4 <task_led_ctrl_strip_one+0x10c>
    #endif
    #if defined(ENABLE_LED_STATE_THEATER_CHASE_RAINBOW)
            case LED_STATE_THEATER_CHASE_RAINBOW:
                animate_led_theater_chase_rainbow(STRIP_BIT_1, 20);
 800224c:	2114      	movs	r1, #20
 800224e:	2001      	movs	r0, #1
 8002250:	f7ff fb18 	bl	8001884 <animate_led_theater_chase_rainbow>
                task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_2, TASK_LED_CTRL_DELAY_MS_0);
 8002254:	2100      	movs	r1, #0
 8002256:	2002      	movs	r0, #2
 8002258:	f7ff ff66 	bl	8002128 <task_led_ctrl_adjust_parameters>
            break;
 800225c:	e02a      	b.n	80022b4 <task_led_ctrl_strip_one+0x10c>
    #endif
    #if defined(ENABLE_LED_STATE_FADE_IN_AND_OUT)
            case LED_STATE_FADE_IN_AND_OUT:
                animate_led_fade_in_fade_out((uint16_t)STRIP_BIT_1, task_led_ctrl_color_hex());
 800225e:	f000 f851 	bl	8002304 <task_led_ctrl_color_hex>
 8002262:	4603      	mov	r3, r0
 8002264:	4619      	mov	r1, r3
 8002266:	2001      	movs	r0, #1
 8002268:	f7fe ff3e 	bl	80010e8 <animate_led_fade_in_fade_out>
                task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 800226c:	2100      	movs	r1, #0
 800226e:	200a      	movs	r0, #10
 8002270:	f7ff ff5a 	bl	8002128 <task_led_ctrl_adjust_parameters>
            break;
 8002274:	e01e      	b.n	80022b4 <task_led_ctrl_strip_one+0x10c>
    #endif
    #if defined(ENABLE_LED_STATE_TWINKLE)
            case LED_STATE_TWINKLE:
                animate_led_turn_all_pixels_off();
 8002276:	f7fe fecd 	bl	8001014 <animate_led_turn_all_pixels_off>
                animate_led_twinkle(STRIP_BIT_1, task_led_ctrl_color_hex(), (uint32_t)((float)NUM_LEDS * (float)0.9), 20, false);
 800227a:	f000 f843 	bl	8002304 <task_led_ctrl_color_hex>
 800227e:	4601      	mov	r1, r0
 8002280:	2300      	movs	r3, #0
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	2314      	movs	r3, #20
 8002286:	2219      	movs	r2, #25
 8002288:	2001      	movs	r0, #1
 800228a:	f7ff f86f 	bl	800136c <animate_led_twinkle>
                task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_0);
 800228e:	2100      	movs	r1, #0
 8002290:	2005      	movs	r0, #5
 8002292:	f7ff ff49 	bl	8002128 <task_led_ctrl_adjust_parameters>
            break;
 8002296:	e00d      	b.n	80022b4 <task_led_ctrl_strip_one+0x10c>
    #endif
    #if defined(ENABLE_LED_STATE_SPELL)
            case LED_STATE_SPELL:
                animate_led_only_spell_word(STRIP_BIT_1, task_led_ctrl_color_hex(), 20);
 8002298:	f000 f834 	bl	8002304 <task_led_ctrl_color_hex>
 800229c:	4603      	mov	r3, r0
 800229e:	2214      	movs	r2, #20
 80022a0:	4619      	mov	r1, r3
 80022a2:	2001      	movs	r0, #1
 80022a4:	f7fe fec0 	bl	8001028 <animate_led_only_spell_word>
                task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 80022a8:	2100      	movs	r1, #0
 80022aa:	200a      	movs	r0, #10
 80022ac:	f7ff ff3c 	bl	8002128 <task_led_ctrl_adjust_parameters>
            break;
 80022b0:	e000      	b.n	80022b4 <task_led_ctrl_strip_one+0x10c>
    #endif
            default:
            break;
 80022b2:	bf00      	nop
        switch(g_led_state)
 80022b4:	e787      	b.n	80021c6 <task_led_ctrl_strip_one+0x1e>
 80022b6:	bf00      	nop
 80022b8:	20000370 	.word	0x20000370
 80022bc:	20000379 	.word	0x20000379

080022c0 <task_led_ctrl_delay>:
    }
}


void task_led_ctrl_delay(const uint32_t time_ms)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
    uint32_t ms_count = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]
    while (ms_count++ < time_ms)
 80022cc:	e002      	b.n	80022d4 <task_led_ctrl_delay+0x14>
    {
        osDelay(portTICK_PERIOD_MS);
 80022ce:	2001      	movs	r0, #1
 80022d0:	f000 fa1a 	bl	8002708 <osDelay>
    while (ms_count++ < time_ms)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	1c5a      	adds	r2, r3, #1
 80022d8:	60fa      	str	r2, [r7, #12]
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d8f6      	bhi.n	80022ce <task_led_ctrl_delay+0xe>
    }
}
 80022e0:	bf00      	nop
 80022e2:	bf00      	nop
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <task_led_ctrl_color_state>:
    flip_or_flop ^= 1;
}


master_color_state_e task_led_ctrl_color_state(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
    return g_master_color_state;
 80022f0:	4b03      	ldr	r3, [pc, #12]	; (8002300 <task_led_ctrl_color_state+0x14>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	2000037a 	.word	0x2000037a

08002304 <task_led_ctrl_color_hex>:
    return g_led_color;
}


color_hex_code_e task_led_ctrl_color_hex(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
    return g_color_hex_codes[g_led_color];
 8002308:	4b05      	ldr	r3, [pc, #20]	; (8002320 <task_led_ctrl_color_hex+0x1c>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	461a      	mov	r2, r3
 800230e:	4b05      	ldr	r3, [pc, #20]	; (8002324 <task_led_ctrl_color_hex+0x20>)
 8002310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8002314:	4618      	mov	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	20000007 	.word	0x20000007
 8002324:	20000188 	.word	0x20000188

08002328 <task_led_ctrl_color_red_hex>:


uint8_t task_led_ctrl_color_red_hex(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	ed2d 8b02 	vpush	{d8}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
    return (((g_color_hex_codes[g_led_color] & 0xFF0000) >> 16) / current_monitor_ratio());
 8002332:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <task_led_ctrl_color_red_hex+0x48>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	461a      	mov	r2, r3
 8002338:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <task_led_ctrl_color_red_hex+0x4c>)
 800233a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800233e:	0c1b      	lsrs	r3, r3, #16
 8002340:	b2db      	uxtb	r3, r3
 8002342:	ee07 3a90 	vmov	s15, r3
 8002346:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800234a:	f7fe fd31 	bl	8000db0 <current_monitor_ratio>
 800234e:	eeb0 7a40 	vmov.f32	s14, s0
 8002352:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8002356:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800235a:	edc7 7a01 	vstr	s15, [r7, #4]
 800235e:	793b      	ldrb	r3, [r7, #4]
 8002360:	b2db      	uxtb	r3, r3
}
 8002362:	4618      	mov	r0, r3
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	ecbd 8b02 	vpop	{d8}
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20000007 	.word	0x20000007
 8002374:	20000188 	.word	0x20000188

08002378 <task_led_ctrl_color_green_hex>:


uint8_t task_led_ctrl_color_green_hex(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	ed2d 8b02 	vpush	{d8}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
    return (((g_color_hex_codes[g_led_color] & 0x00FF00) >> 8) / current_monitor_ratio());
 8002382:	4b0f      	ldr	r3, [pc, #60]	; (80023c0 <task_led_ctrl_color_green_hex+0x48>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	461a      	mov	r2, r3
 8002388:	4b0e      	ldr	r3, [pc, #56]	; (80023c4 <task_led_ctrl_color_green_hex+0x4c>)
 800238a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800238e:	0a1b      	lsrs	r3, r3, #8
 8002390:	b2db      	uxtb	r3, r3
 8002392:	ee07 3a90 	vmov	s15, r3
 8002396:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800239a:	f7fe fd09 	bl	8000db0 <current_monitor_ratio>
 800239e:	eeb0 7a40 	vmov.f32	s14, s0
 80023a2:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80023a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023aa:	edc7 7a01 	vstr	s15, [r7, #4]
 80023ae:	793b      	ldrb	r3, [r7, #4]
 80023b0:	b2db      	uxtb	r3, r3
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	ecbd 8b02 	vpop	{d8}
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000007 	.word	0x20000007
 80023c4:	20000188 	.word	0x20000188

080023c8 <task_led_ctrl_color_blue_hex>:


uint8_t task_led_ctrl_color_blue_hex(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	ed2d 8b02 	vpush	{d8}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
    return ((g_color_hex_codes[g_led_color] & 0x0000FF) / current_monitor_ratio());
 80023d2:	4b0e      	ldr	r3, [pc, #56]	; (800240c <task_led_ctrl_color_blue_hex+0x44>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	461a      	mov	r2, r3
 80023d8:	4b0d      	ldr	r3, [pc, #52]	; (8002410 <task_led_ctrl_color_blue_hex+0x48>)
 80023da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	ee07 3a90 	vmov	s15, r3
 80023e4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80023e8:	f7fe fce2 	bl	8000db0 <current_monitor_ratio>
 80023ec:	eeb0 7a40 	vmov.f32	s14, s0
 80023f0:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80023f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023f8:	edc7 7a01 	vstr	s15, [r7, #4]
 80023fc:	793b      	ldrb	r3, [r7, #4]
 80023fe:	b2db      	uxtb	r3, r3
}
 8002400:	4618      	mov	r0, r3
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	ecbd 8b02 	vpop	{d8}
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20000007 	.word	0x20000007
 8002410:	20000188 	.word	0x20000188

08002414 <task_led_ctrl_color_random>:
    return g_color_hex_codes[color];
}


void task_led_ctrl_color_random(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
    all_colors_e color = (all_colors_e)(random_num(0, NUM_COLORS));
 800241a:	2115      	movs	r1, #21
 800241c:	2000      	movs	r0, #0
 800241e:	f008 f871 	bl	800a504 <random_num>
 8002422:	4603      	mov	r3, r0
 8002424:	71fb      	strb	r3, [r7, #7]
    if (g_led_color == color)
 8002426:	4b0d      	ldr	r3, [pc, #52]	; (800245c <task_led_ctrl_color_random+0x48>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	79fa      	ldrb	r2, [r7, #7]
 800242c:	429a      	cmp	r2, r3
 800242e:	d10e      	bne.n	800244e <task_led_ctrl_color_random+0x3a>
    {
        if ((COLORS_LAST) == color) g_led_color = (all_colors_e)(color - 1);
 8002430:	79fb      	ldrb	r3, [r7, #7]
 8002432:	2b14      	cmp	r3, #20
 8002434:	d105      	bne.n	8002442 <task_led_ctrl_color_random+0x2e>
 8002436:	79fb      	ldrb	r3, [r7, #7]
 8002438:	3b01      	subs	r3, #1
 800243a:	b2da      	uxtb	r2, r3
 800243c:	4b07      	ldr	r3, [pc, #28]	; (800245c <task_led_ctrl_color_random+0x48>)
 800243e:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        g_led_color = color;
    }
}
 8002440:	e008      	b.n	8002454 <task_led_ctrl_color_random+0x40>
        else g_led_color = (all_colors_e)(color + 1);
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	3301      	adds	r3, #1
 8002446:	b2da      	uxtb	r2, r3
 8002448:	4b04      	ldr	r3, [pc, #16]	; (800245c <task_led_ctrl_color_random+0x48>)
 800244a:	701a      	strb	r2, [r3, #0]
}
 800244c:	e002      	b.n	8002454 <task_led_ctrl_color_random+0x40>
        g_led_color = color;
 800244e:	4a03      	ldr	r2, [pc, #12]	; (800245c <task_led_ctrl_color_random+0x48>)
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	7013      	strb	r3, [r2, #0]
}
 8002454:	bf00      	nop
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	20000007 	.word	0x20000007

08002460 <task_led_ctrl_speed>:
    g_led_state = LED_STATE_FIRST;
}


float task_led_ctrl_speed(void)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
    float speed_factor = 0.0;
 8002466:	f04f 0300 	mov.w	r3, #0
 800246a:	607b      	str	r3, [r7, #4]
    switch(g_led_speed)
 800246c:	4b14      	ldr	r3, [pc, #80]	; (80024c0 <task_led_ctrl_speed+0x60>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b03      	cmp	r3, #3
 8002472:	d81a      	bhi.n	80024aa <task_led_ctrl_speed+0x4a>
 8002474:	a201      	add	r2, pc, #4	; (adr r2, 800247c <task_led_ctrl_speed+0x1c>)
 8002476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800247a:	bf00      	nop
 800247c:	0800248d 	.word	0x0800248d
 8002480:	08002493 	.word	0x08002493
 8002484:	0800249b 	.word	0x0800249b
 8002488:	080024a3 	.word	0x080024a3
    {
        case LED_SPEED_10X:
            speed_factor = 10;
 800248c:	4b0d      	ldr	r3, [pc, #52]	; (80024c4 <task_led_ctrl_speed+0x64>)
 800248e:	607b      	str	r3, [r7, #4]
        break;
 8002490:	e00c      	b.n	80024ac <task_led_ctrl_speed+0x4c>
//        break;
//        case LED_SPEED_2X:
//            speed_factor = 2;
//        break;
        case LED_SPEED_1X:
            speed_factor = 1;
 8002492:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002496:	607b      	str	r3, [r7, #4]
        break;
 8002498:	e008      	b.n	80024ac <task_led_ctrl_speed+0x4c>
        case LED_SPEED_0P5X:
            speed_factor = 0.5;
 800249a:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800249e:	607b      	str	r3, [r7, #4]
        break;
 80024a0:	e004      	b.n	80024ac <task_led_ctrl_speed+0x4c>
        case LED_SPEED_0P25X:
            speed_factor = 0.25;
 80024a2:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 80024a6:	607b      	str	r3, [r7, #4]
        break;
 80024a8:	e000      	b.n	80024ac <task_led_ctrl_speed+0x4c>
        default:
        break;
 80024aa:	bf00      	nop
        case LED_SPEED_0P1X:
            speed_factor = 0.1;
        break;
        */
    }
    return speed_factor;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	ee07 3a90 	vmov	s15, r3
}
 80024b2:	eeb0 0a67 	vmov.f32	s0, s15
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	20000006 	.word	0x20000006
 80024c4:	41200000 	.word	0x41200000

080024c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	6039      	str	r1, [r7, #0]
 80024d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	db0a      	blt.n	80024f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	490c      	ldr	r1, [pc, #48]	; (8002514 <__NVIC_SetPriority+0x4c>)
 80024e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e6:	0112      	lsls	r2, r2, #4
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	440b      	add	r3, r1
 80024ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024f0:	e00a      	b.n	8002508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	4908      	ldr	r1, [pc, #32]	; (8002518 <__NVIC_SetPriority+0x50>)
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	3b04      	subs	r3, #4
 8002500:	0112      	lsls	r2, r2, #4
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	440b      	add	r3, r1
 8002506:	761a      	strb	r2, [r3, #24]
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	e000e100 	.word	0xe000e100
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002520:	4b05      	ldr	r3, [pc, #20]	; (8002538 <SysTick_Handler+0x1c>)
 8002522:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002524:	f001 fd10 	bl	8003f48 <xTaskGetSchedulerState>
 8002528:	4603      	mov	r3, r0
 800252a:	2b01      	cmp	r3, #1
 800252c:	d001      	beq.n	8002532 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800252e:	f002 fbd3 	bl	8004cd8 <xPortSysTickHandler>
  }
}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	e000e010 	.word	0xe000e010

0800253c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002540:	2100      	movs	r1, #0
 8002542:	f06f 0004 	mvn.w	r0, #4
 8002546:	f7ff ffbf 	bl	80024c8 <__NVIC_SetPriority>
#endif
}
 800254a:	bf00      	nop
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002556:	f3ef 8305 	mrs	r3, IPSR
 800255a:	603b      	str	r3, [r7, #0]
  return(result);
 800255c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002562:	f06f 0305 	mvn.w	r3, #5
 8002566:	607b      	str	r3, [r7, #4]
 8002568:	e00c      	b.n	8002584 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800256a:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <osKernelInitialize+0x44>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d105      	bne.n	800257e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002572:	4b08      	ldr	r3, [pc, #32]	; (8002594 <osKernelInitialize+0x44>)
 8002574:	2201      	movs	r2, #1
 8002576:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002578:	2300      	movs	r3, #0
 800257a:	607b      	str	r3, [r7, #4]
 800257c:	e002      	b.n	8002584 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800257e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002582:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002584:	687b      	ldr	r3, [r7, #4]
}
 8002586:	4618      	mov	r0, r3
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	2000037c 	.word	0x2000037c

08002598 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800259e:	f3ef 8305 	mrs	r3, IPSR
 80025a2:	603b      	str	r3, [r7, #0]
  return(result);
 80025a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80025aa:	f06f 0305 	mvn.w	r3, #5
 80025ae:	607b      	str	r3, [r7, #4]
 80025b0:	e010      	b.n	80025d4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80025b2:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <osKernelStart+0x48>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d109      	bne.n	80025ce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80025ba:	f7ff ffbf 	bl	800253c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80025be:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <osKernelStart+0x48>)
 80025c0:	2202      	movs	r2, #2
 80025c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80025c4:	f001 f866 	bl	8003694 <vTaskStartScheduler>
      stat = osOK;
 80025c8:	2300      	movs	r3, #0
 80025ca:	607b      	str	r3, [r7, #4]
 80025cc:	e002      	b.n	80025d4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80025ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80025d4:	687b      	ldr	r3, [r7, #4]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	2000037c 	.word	0x2000037c

080025e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08e      	sub	sp, #56	; 0x38
 80025e8:	af04      	add	r7, sp, #16
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025f4:	f3ef 8305 	mrs	r3, IPSR
 80025f8:	617b      	str	r3, [r7, #20]
  return(result);
 80025fa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d17e      	bne.n	80026fe <osThreadNew+0x11a>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d07b      	beq.n	80026fe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002606:	2380      	movs	r3, #128	; 0x80
 8002608:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800260a:	2318      	movs	r3, #24
 800260c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800260e:	2300      	movs	r3, #0
 8002610:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002616:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d045      	beq.n	80026aa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d002      	beq.n	800262c <osThreadNew+0x48>
        name = attr->name;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d002      	beq.n	800263a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d008      	beq.n	8002652 <osThreadNew+0x6e>
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	2b38      	cmp	r3, #56	; 0x38
 8002644:	d805      	bhi.n	8002652 <osThreadNew+0x6e>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <osThreadNew+0x72>
        return (NULL);
 8002652:	2300      	movs	r3, #0
 8002654:	e054      	b.n	8002700 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	089b      	lsrs	r3, r3, #2
 8002664:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00e      	beq.n	800268c <osThreadNew+0xa8>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	2b5b      	cmp	r3, #91	; 0x5b
 8002674:	d90a      	bls.n	800268c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800267a:	2b00      	cmp	r3, #0
 800267c:	d006      	beq.n	800268c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <osThreadNew+0xa8>
        mem = 1;
 8002686:	2301      	movs	r3, #1
 8002688:	61bb      	str	r3, [r7, #24]
 800268a:	e010      	b.n	80026ae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10c      	bne.n	80026ae <osThreadNew+0xca>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d108      	bne.n	80026ae <osThreadNew+0xca>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d104      	bne.n	80026ae <osThreadNew+0xca>
          mem = 0;
 80026a4:	2300      	movs	r3, #0
 80026a6:	61bb      	str	r3, [r7, #24]
 80026a8:	e001      	b.n	80026ae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d110      	bne.n	80026d6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80026bc:	9202      	str	r2, [sp, #8]
 80026be:	9301      	str	r3, [sp, #4]
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	6a3a      	ldr	r2, [r7, #32]
 80026c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 fe0c 	bl	80032e8 <xTaskCreateStatic>
 80026d0:	4603      	mov	r3, r0
 80026d2:	613b      	str	r3, [r7, #16]
 80026d4:	e013      	b.n	80026fe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d110      	bne.n	80026fe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	b29a      	uxth	r2, r3
 80026e0:	f107 0310 	add.w	r3, r7, #16
 80026e4:	9301      	str	r3, [sp, #4]
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f000 fe57 	bl	80033a2 <xTaskCreate>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d001      	beq.n	80026fe <osThreadNew+0x11a>
            hTask = NULL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80026fe:	693b      	ldr	r3, [r7, #16]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3728      	adds	r7, #40	; 0x28
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002710:	f3ef 8305 	mrs	r3, IPSR
 8002714:	60bb      	str	r3, [r7, #8]
  return(result);
 8002716:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <osDelay+0x1c>
    stat = osErrorISR;
 800271c:	f06f 0305 	mvn.w	r3, #5
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	e007      	b.n	8002734 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002724:	2300      	movs	r3, #0
 8002726:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d002      	beq.n	8002734 <osDelay+0x2c>
      vTaskDelay(ticks);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 ff7c 	bl	800362c <vTaskDelay>
    }
  }

  return (stat);
 8002734:	68fb      	ldr	r3, [r7, #12]
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
	...

08002740 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4a07      	ldr	r2, [pc, #28]	; (800276c <vApplicationGetIdleTaskMemory+0x2c>)
 8002750:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	4a06      	ldr	r2, [pc, #24]	; (8002770 <vApplicationGetIdleTaskMemory+0x30>)
 8002756:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2280      	movs	r2, #128	; 0x80
 800275c:	601a      	str	r2, [r3, #0]
}
 800275e:	bf00      	nop
 8002760:	3714      	adds	r7, #20
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	20000380 	.word	0x20000380
 8002770:	200003dc 	.word	0x200003dc

08002774 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4a07      	ldr	r2, [pc, #28]	; (80027a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8002784:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	4a06      	ldr	r2, [pc, #24]	; (80027a4 <vApplicationGetTimerTaskMemory+0x30>)
 800278a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002792:	601a      	str	r2, [r3, #0]
}
 8002794:	bf00      	nop
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	200005dc 	.word	0x200005dc
 80027a4:	20000638 	.word	0x20000638

080027a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f103 0208 	add.w	r2, r3, #8
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f103 0208 	add.w	r2, r3, #8
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f103 0208 	add.w	r2, r3, #8
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002802:	b480      	push	{r7}
 8002804:	b085      	sub	sp, #20
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
 800280a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	1c5a      	adds	r2, r3, #1
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	601a      	str	r2, [r3, #0]
}
 800283e:	bf00      	nop
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800284a:	b480      	push	{r7}
 800284c:	b085      	sub	sp, #20
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
 8002852:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002860:	d103      	bne.n	800286a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	e00c      	b.n	8002884 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	3308      	adds	r3, #8
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	e002      	b.n	8002878 <vListInsert+0x2e>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68ba      	ldr	r2, [r7, #8]
 8002880:	429a      	cmp	r2, r3
 8002882:	d2f6      	bcs.n	8002872 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	1c5a      	adds	r2, r3, #1
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	601a      	str	r2, [r3, #0]
}
 80028b0:	bf00      	nop
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6892      	ldr	r2, [r2, #8]
 80028d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6852      	ldr	r2, [r2, #4]
 80028dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d103      	bne.n	80028f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	1e5a      	subs	r2, r3, #1
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3714      	adds	r7, #20
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10a      	bne.n	800293a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002928:	f383 8811 	msr	BASEPRI, r3
 800292c:	f3bf 8f6f 	isb	sy
 8002930:	f3bf 8f4f 	dsb	sy
 8002934:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002936:	bf00      	nop
 8002938:	e7fe      	b.n	8002938 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800293a:	f002 f93b 	bl	8004bb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002946:	68f9      	ldr	r1, [r7, #12]
 8002948:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800294a:	fb01 f303 	mul.w	r3, r1, r3
 800294e:	441a      	add	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296a:	3b01      	subs	r3, #1
 800296c:	68f9      	ldr	r1, [r7, #12]
 800296e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002970:	fb01 f303 	mul.w	r3, r1, r3
 8002974:	441a      	add	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	22ff      	movs	r2, #255	; 0xff
 800297e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	22ff      	movs	r2, #255	; 0xff
 8002986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d114      	bne.n	80029ba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d01a      	beq.n	80029ce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	3310      	adds	r3, #16
 800299c:	4618      	mov	r0, r3
 800299e:	f001 f915 	bl	8003bcc <xTaskRemoveFromEventList>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d012      	beq.n	80029ce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80029a8:	4b0c      	ldr	r3, [pc, #48]	; (80029dc <xQueueGenericReset+0xcc>)
 80029aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	f3bf 8f4f 	dsb	sy
 80029b4:	f3bf 8f6f 	isb	sy
 80029b8:	e009      	b.n	80029ce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	3310      	adds	r3, #16
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff fef2 	bl	80027a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	3324      	adds	r3, #36	; 0x24
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff feed 	bl	80027a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80029ce:	f002 f921 	bl	8004c14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80029d2:	2301      	movs	r3, #1
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	e000ed04 	.word	0xe000ed04

080029e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08e      	sub	sp, #56	; 0x38
 80029e4:	af02      	add	r7, sp, #8
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
 80029ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10a      	bne.n	8002a0a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80029f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f8:	f383 8811 	msr	BASEPRI, r3
 80029fc:	f3bf 8f6f 	isb	sy
 8002a00:	f3bf 8f4f 	dsb	sy
 8002a04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a06:	bf00      	nop
 8002a08:	e7fe      	b.n	8002a08 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10a      	bne.n	8002a26 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a14:	f383 8811 	msr	BASEPRI, r3
 8002a18:	f3bf 8f6f 	isb	sy
 8002a1c:	f3bf 8f4f 	dsb	sy
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a22:	bf00      	nop
 8002a24:	e7fe      	b.n	8002a24 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d002      	beq.n	8002a32 <xQueueGenericCreateStatic+0x52>
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <xQueueGenericCreateStatic+0x56>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <xQueueGenericCreateStatic+0x58>
 8002a36:	2300      	movs	r3, #0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10a      	bne.n	8002a52 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a40:	f383 8811 	msr	BASEPRI, r3
 8002a44:	f3bf 8f6f 	isb	sy
 8002a48:	f3bf 8f4f 	dsb	sy
 8002a4c:	623b      	str	r3, [r7, #32]
}
 8002a4e:	bf00      	nop
 8002a50:	e7fe      	b.n	8002a50 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d102      	bne.n	8002a5e <xQueueGenericCreateStatic+0x7e>
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <xQueueGenericCreateStatic+0x82>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <xQueueGenericCreateStatic+0x84>
 8002a62:	2300      	movs	r3, #0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10a      	bne.n	8002a7e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a6c:	f383 8811 	msr	BASEPRI, r3
 8002a70:	f3bf 8f6f 	isb	sy
 8002a74:	f3bf 8f4f 	dsb	sy
 8002a78:	61fb      	str	r3, [r7, #28]
}
 8002a7a:	bf00      	nop
 8002a7c:	e7fe      	b.n	8002a7c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002a7e:	2350      	movs	r3, #80	; 0x50
 8002a80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	2b50      	cmp	r3, #80	; 0x50
 8002a86:	d00a      	beq.n	8002a9e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a8c:	f383 8811 	msr	BASEPRI, r3
 8002a90:	f3bf 8f6f 	isb	sy
 8002a94:	f3bf 8f4f 	dsb	sy
 8002a98:	61bb      	str	r3, [r7, #24]
}
 8002a9a:	bf00      	nop
 8002a9c:	e7fe      	b.n	8002a9c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002a9e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00d      	beq.n	8002ac6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ab2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	4613      	mov	r3, r2
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	68b9      	ldr	r1, [r7, #8]
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 f805 	bl	8002ad0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3730      	adds	r7, #48	; 0x30
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
 8002adc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d103      	bne.n	8002aec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	e002      	b.n	8002af2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002afe:	2101      	movs	r1, #1
 8002b00:	69b8      	ldr	r0, [r7, #24]
 8002b02:	f7ff ff05 	bl	8002910 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	78fa      	ldrb	r2, [r7, #3]
 8002b0a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002b0e:	bf00      	nop
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b08e      	sub	sp, #56	; 0x38
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
 8002b24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002b26:	2300      	movs	r3, #0
 8002b28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10a      	bne.n	8002b4a <xQueueGenericSend+0x32>
	__asm volatile
 8002b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b38:	f383 8811 	msr	BASEPRI, r3
 8002b3c:	f3bf 8f6f 	isb	sy
 8002b40:	f3bf 8f4f 	dsb	sy
 8002b44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b46:	bf00      	nop
 8002b48:	e7fe      	b.n	8002b48 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d103      	bne.n	8002b58 <xQueueGenericSend+0x40>
 8002b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <xQueueGenericSend+0x44>
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e000      	b.n	8002b5e <xQueueGenericSend+0x46>
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10a      	bne.n	8002b78 <xQueueGenericSend+0x60>
	__asm volatile
 8002b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b66:	f383 8811 	msr	BASEPRI, r3
 8002b6a:	f3bf 8f6f 	isb	sy
 8002b6e:	f3bf 8f4f 	dsb	sy
 8002b72:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b74:	bf00      	nop
 8002b76:	e7fe      	b.n	8002b76 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d103      	bne.n	8002b86 <xQueueGenericSend+0x6e>
 8002b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d101      	bne.n	8002b8a <xQueueGenericSend+0x72>
 8002b86:	2301      	movs	r3, #1
 8002b88:	e000      	b.n	8002b8c <xQueueGenericSend+0x74>
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d10a      	bne.n	8002ba6 <xQueueGenericSend+0x8e>
	__asm volatile
 8002b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b94:	f383 8811 	msr	BASEPRI, r3
 8002b98:	f3bf 8f6f 	isb	sy
 8002b9c:	f3bf 8f4f 	dsb	sy
 8002ba0:	623b      	str	r3, [r7, #32]
}
 8002ba2:	bf00      	nop
 8002ba4:	e7fe      	b.n	8002ba4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ba6:	f001 f9cf 	bl	8003f48 <xTaskGetSchedulerState>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d102      	bne.n	8002bb6 <xQueueGenericSend+0x9e>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <xQueueGenericSend+0xa2>
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e000      	b.n	8002bbc <xQueueGenericSend+0xa4>
 8002bba:	2300      	movs	r3, #0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10a      	bne.n	8002bd6 <xQueueGenericSend+0xbe>
	__asm volatile
 8002bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc4:	f383 8811 	msr	BASEPRI, r3
 8002bc8:	f3bf 8f6f 	isb	sy
 8002bcc:	f3bf 8f4f 	dsb	sy
 8002bd0:	61fb      	str	r3, [r7, #28]
}
 8002bd2:	bf00      	nop
 8002bd4:	e7fe      	b.n	8002bd4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002bd6:	f001 ffed 	bl	8004bb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d302      	bcc.n	8002bec <xQueueGenericSend+0xd4>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d129      	bne.n	8002c40 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	68b9      	ldr	r1, [r7, #8]
 8002bf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bf2:	f000 fa0b 	bl	800300c <prvCopyDataToQueue>
 8002bf6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d010      	beq.n	8002c22 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c02:	3324      	adds	r3, #36	; 0x24
 8002c04:	4618      	mov	r0, r3
 8002c06:	f000 ffe1 	bl	8003bcc <xTaskRemoveFromEventList>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d013      	beq.n	8002c38 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002c10:	4b3f      	ldr	r3, [pc, #252]	; (8002d10 <xQueueGenericSend+0x1f8>)
 8002c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	f3bf 8f4f 	dsb	sy
 8002c1c:	f3bf 8f6f 	isb	sy
 8002c20:	e00a      	b.n	8002c38 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d007      	beq.n	8002c38 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002c28:	4b39      	ldr	r3, [pc, #228]	; (8002d10 <xQueueGenericSend+0x1f8>)
 8002c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	f3bf 8f4f 	dsb	sy
 8002c34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002c38:	f001 ffec 	bl	8004c14 <vPortExitCritical>
				return pdPASS;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e063      	b.n	8002d08 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d103      	bne.n	8002c4e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c46:	f001 ffe5 	bl	8004c14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	e05c      	b.n	8002d08 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d106      	bne.n	8002c62 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c54:	f107 0314 	add.w	r3, r7, #20
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f001 f81b 	bl	8003c94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c62:	f001 ffd7 	bl	8004c14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c66:	f000 fd7b 	bl	8003760 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c6a:	f001 ffa3 	bl	8004bb4 <vPortEnterCritical>
 8002c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c74:	b25b      	sxtb	r3, r3
 8002c76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c7a:	d103      	bne.n	8002c84 <xQueueGenericSend+0x16c>
 8002c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c8a:	b25b      	sxtb	r3, r3
 8002c8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c90:	d103      	bne.n	8002c9a <xQueueGenericSend+0x182>
 8002c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c9a:	f001 ffbb 	bl	8004c14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c9e:	1d3a      	adds	r2, r7, #4
 8002ca0:	f107 0314 	add.w	r3, r7, #20
 8002ca4:	4611      	mov	r1, r2
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f001 f80a 	bl	8003cc0 <xTaskCheckForTimeOut>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d124      	bne.n	8002cfc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002cb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cb4:	f000 faa2 	bl	80031fc <prvIsQueueFull>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d018      	beq.n	8002cf0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc0:	3310      	adds	r3, #16
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 ff30 	bl	8003b2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ccc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cce:	f000 fa2d 	bl	800312c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002cd2:	f000 fd53 	bl	800377c <xTaskResumeAll>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f47f af7c 	bne.w	8002bd6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002cde:	4b0c      	ldr	r3, [pc, #48]	; (8002d10 <xQueueGenericSend+0x1f8>)
 8002ce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	f3bf 8f4f 	dsb	sy
 8002cea:	f3bf 8f6f 	isb	sy
 8002cee:	e772      	b.n	8002bd6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002cf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cf2:	f000 fa1b 	bl	800312c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002cf6:	f000 fd41 	bl	800377c <xTaskResumeAll>
 8002cfa:	e76c      	b.n	8002bd6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002cfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cfe:	f000 fa15 	bl	800312c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d02:	f000 fd3b 	bl	800377c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002d06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3738      	adds	r7, #56	; 0x38
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	e000ed04 	.word	0xe000ed04

08002d14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b090      	sub	sp, #64	; 0x40
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
 8002d20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10a      	bne.n	8002d42 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d30:	f383 8811 	msr	BASEPRI, r3
 8002d34:	f3bf 8f6f 	isb	sy
 8002d38:	f3bf 8f4f 	dsb	sy
 8002d3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d3e:	bf00      	nop
 8002d40:	e7fe      	b.n	8002d40 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d103      	bne.n	8002d50 <xQueueGenericSendFromISR+0x3c>
 8002d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <xQueueGenericSendFromISR+0x40>
 8002d50:	2301      	movs	r3, #1
 8002d52:	e000      	b.n	8002d56 <xQueueGenericSendFromISR+0x42>
 8002d54:	2300      	movs	r3, #0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10a      	bne.n	8002d70 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5e:	f383 8811 	msr	BASEPRI, r3
 8002d62:	f3bf 8f6f 	isb	sy
 8002d66:	f3bf 8f4f 	dsb	sy
 8002d6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d6c:	bf00      	nop
 8002d6e:	e7fe      	b.n	8002d6e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d103      	bne.n	8002d7e <xQueueGenericSendFromISR+0x6a>
 8002d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d101      	bne.n	8002d82 <xQueueGenericSendFromISR+0x6e>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <xQueueGenericSendFromISR+0x70>
 8002d82:	2300      	movs	r3, #0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10a      	bne.n	8002d9e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8c:	f383 8811 	msr	BASEPRI, r3
 8002d90:	f3bf 8f6f 	isb	sy
 8002d94:	f3bf 8f4f 	dsb	sy
 8002d98:	623b      	str	r3, [r7, #32]
}
 8002d9a:	bf00      	nop
 8002d9c:	e7fe      	b.n	8002d9c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d9e:	f001 ffeb 	bl	8004d78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002da2:	f3ef 8211 	mrs	r2, BASEPRI
 8002da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002daa:	f383 8811 	msr	BASEPRI, r3
 8002dae:	f3bf 8f6f 	isb	sy
 8002db2:	f3bf 8f4f 	dsb	sy
 8002db6:	61fa      	str	r2, [r7, #28]
 8002db8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002dba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002dbc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d302      	bcc.n	8002dd0 <xQueueGenericSendFromISR+0xbc>
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d12f      	bne.n	8002e30 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dde:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	68b9      	ldr	r1, [r7, #8]
 8002de4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002de6:	f000 f911 	bl	800300c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002dea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002dee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002df2:	d112      	bne.n	8002e1a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d016      	beq.n	8002e2a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfe:	3324      	adds	r3, #36	; 0x24
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 fee3 	bl	8003bcc <xTaskRemoveFromEventList>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00e      	beq.n	8002e2a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00b      	beq.n	8002e2a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	e007      	b.n	8002e2a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002e1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002e1e:	3301      	adds	r3, #1
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	b25a      	sxtb	r2, r3
 8002e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002e2e:	e001      	b.n	8002e34 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e36:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002e3e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3740      	adds	r7, #64	; 0x40
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
	...

08002e4c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b08c      	sub	sp, #48	; 0x30
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10a      	bne.n	8002e7c <xQueueReceive+0x30>
	__asm volatile
 8002e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e6a:	f383 8811 	msr	BASEPRI, r3
 8002e6e:	f3bf 8f6f 	isb	sy
 8002e72:	f3bf 8f4f 	dsb	sy
 8002e76:	623b      	str	r3, [r7, #32]
}
 8002e78:	bf00      	nop
 8002e7a:	e7fe      	b.n	8002e7a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d103      	bne.n	8002e8a <xQueueReceive+0x3e>
 8002e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <xQueueReceive+0x42>
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <xQueueReceive+0x44>
 8002e8e:	2300      	movs	r3, #0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10a      	bne.n	8002eaa <xQueueReceive+0x5e>
	__asm volatile
 8002e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e98:	f383 8811 	msr	BASEPRI, r3
 8002e9c:	f3bf 8f6f 	isb	sy
 8002ea0:	f3bf 8f4f 	dsb	sy
 8002ea4:	61fb      	str	r3, [r7, #28]
}
 8002ea6:	bf00      	nop
 8002ea8:	e7fe      	b.n	8002ea8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002eaa:	f001 f84d 	bl	8003f48 <xTaskGetSchedulerState>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d102      	bne.n	8002eba <xQueueReceive+0x6e>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <xQueueReceive+0x72>
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e000      	b.n	8002ec0 <xQueueReceive+0x74>
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10a      	bne.n	8002eda <xQueueReceive+0x8e>
	__asm volatile
 8002ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec8:	f383 8811 	msr	BASEPRI, r3
 8002ecc:	f3bf 8f6f 	isb	sy
 8002ed0:	f3bf 8f4f 	dsb	sy
 8002ed4:	61bb      	str	r3, [r7, #24]
}
 8002ed6:	bf00      	nop
 8002ed8:	e7fe      	b.n	8002ed8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002eda:	f001 fe6b 	bl	8004bb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d01f      	beq.n	8002f2a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002eea:	68b9      	ldr	r1, [r7, #8]
 8002eec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eee:	f000 f8f7 	bl	80030e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	1e5a      	subs	r2, r3, #1
 8002ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00f      	beq.n	8002f22 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f04:	3310      	adds	r3, #16
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 fe60 	bl	8003bcc <xTaskRemoveFromEventList>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d007      	beq.n	8002f22 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002f12:	4b3d      	ldr	r3, [pc, #244]	; (8003008 <xQueueReceive+0x1bc>)
 8002f14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	f3bf 8f4f 	dsb	sy
 8002f1e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002f22:	f001 fe77 	bl	8004c14 <vPortExitCritical>
				return pdPASS;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e069      	b.n	8002ffe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d103      	bne.n	8002f38 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f30:	f001 fe70 	bl	8004c14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002f34:	2300      	movs	r3, #0
 8002f36:	e062      	b.n	8002ffe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d106      	bne.n	8002f4c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f3e:	f107 0310 	add.w	r3, r7, #16
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 fea6 	bl	8003c94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f4c:	f001 fe62 	bl	8004c14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f50:	f000 fc06 	bl	8003760 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f54:	f001 fe2e 	bl	8004bb4 <vPortEnterCritical>
 8002f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f5e:	b25b      	sxtb	r3, r3
 8002f60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f64:	d103      	bne.n	8002f6e <xQueueReceive+0x122>
 8002f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f74:	b25b      	sxtb	r3, r3
 8002f76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f7a:	d103      	bne.n	8002f84 <xQueueReceive+0x138>
 8002f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f84:	f001 fe46 	bl	8004c14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f88:	1d3a      	adds	r2, r7, #4
 8002f8a:	f107 0310 	add.w	r3, r7, #16
 8002f8e:	4611      	mov	r1, r2
 8002f90:	4618      	mov	r0, r3
 8002f92:	f000 fe95 	bl	8003cc0 <xTaskCheckForTimeOut>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d123      	bne.n	8002fe4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f9e:	f000 f917 	bl	80031d0 <prvIsQueueEmpty>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d017      	beq.n	8002fd8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002faa:	3324      	adds	r3, #36	; 0x24
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	4611      	mov	r1, r2
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 fdbb 	bl	8003b2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002fb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fb8:	f000 f8b8 	bl	800312c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002fbc:	f000 fbde 	bl	800377c <xTaskResumeAll>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d189      	bne.n	8002eda <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002fc6:	4b10      	ldr	r3, [pc, #64]	; (8003008 <xQueueReceive+0x1bc>)
 8002fc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	f3bf 8f4f 	dsb	sy
 8002fd2:	f3bf 8f6f 	isb	sy
 8002fd6:	e780      	b.n	8002eda <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002fd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fda:	f000 f8a7 	bl	800312c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fde:	f000 fbcd 	bl	800377c <xTaskResumeAll>
 8002fe2:	e77a      	b.n	8002eda <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002fe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fe6:	f000 f8a1 	bl	800312c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fea:	f000 fbc7 	bl	800377c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ff0:	f000 f8ee 	bl	80031d0 <prvIsQueueEmpty>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f43f af6f 	beq.w	8002eda <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002ffc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3730      	adds	r7, #48	; 0x30
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	e000ed04 	.word	0xe000ed04

0800300c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003018:	2300      	movs	r3, #0
 800301a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003020:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	2b00      	cmp	r3, #0
 8003028:	d10d      	bne.n	8003046 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d14d      	bne.n	80030ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	4618      	mov	r0, r3
 8003038:	f000 ffa4 	bl	8003f84 <xTaskPriorityDisinherit>
 800303c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	609a      	str	r2, [r3, #8]
 8003044:	e043      	b.n	80030ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d119      	bne.n	8003080 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6858      	ldr	r0, [r3, #4]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	461a      	mov	r2, r3
 8003056:	68b9      	ldr	r1, [r7, #8]
 8003058:	f007 fac8 	bl	800a5ec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	441a      	add	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	429a      	cmp	r2, r3
 8003074:	d32b      	bcc.n	80030ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	605a      	str	r2, [r3, #4]
 800307e:	e026      	b.n	80030ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	68d8      	ldr	r0, [r3, #12]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003088:	461a      	mov	r2, r3
 800308a:	68b9      	ldr	r1, [r7, #8]
 800308c:	f007 faae 	bl	800a5ec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	68da      	ldr	r2, [r3, #12]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003098:	425b      	negs	r3, r3
 800309a:	441a      	add	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d207      	bcs.n	80030bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b4:	425b      	negs	r3, r3
 80030b6:	441a      	add	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d105      	bne.n	80030ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d002      	beq.n	80030ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	3b01      	subs	r3, #1
 80030cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1c5a      	adds	r2, r3, #1
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80030d6:	697b      	ldr	r3, [r7, #20]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d018      	beq.n	8003124 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68da      	ldr	r2, [r3, #12]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	441a      	add	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68da      	ldr	r2, [r3, #12]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	429a      	cmp	r2, r3
 800310a:	d303      	bcc.n	8003114 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68d9      	ldr	r1, [r3, #12]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311c:	461a      	mov	r2, r3
 800311e:	6838      	ldr	r0, [r7, #0]
 8003120:	f007 fa64 	bl	800a5ec <memcpy>
	}
}
 8003124:	bf00      	nop
 8003126:	3708      	adds	r7, #8
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003134:	f001 fd3e 	bl	8004bb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800313e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003140:	e011      	b.n	8003166 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003146:	2b00      	cmp	r3, #0
 8003148:	d012      	beq.n	8003170 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	3324      	adds	r3, #36	; 0x24
 800314e:	4618      	mov	r0, r3
 8003150:	f000 fd3c 	bl	8003bcc <xTaskRemoveFromEventList>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800315a:	f000 fe13 	bl	8003d84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800315e:	7bfb      	ldrb	r3, [r7, #15]
 8003160:	3b01      	subs	r3, #1
 8003162:	b2db      	uxtb	r3, r3
 8003164:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800316a:	2b00      	cmp	r3, #0
 800316c:	dce9      	bgt.n	8003142 <prvUnlockQueue+0x16>
 800316e:	e000      	b.n	8003172 <prvUnlockQueue+0x46>
					break;
 8003170:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	22ff      	movs	r2, #255	; 0xff
 8003176:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800317a:	f001 fd4b 	bl	8004c14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800317e:	f001 fd19 	bl	8004bb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003188:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800318a:	e011      	b.n	80031b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d012      	beq.n	80031ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3310      	adds	r3, #16
 8003198:	4618      	mov	r0, r3
 800319a:	f000 fd17 	bl	8003bcc <xTaskRemoveFromEventList>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80031a4:	f000 fdee 	bl	8003d84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80031a8:	7bbb      	ldrb	r3, [r7, #14]
 80031aa:	3b01      	subs	r3, #1
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80031b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	dce9      	bgt.n	800318c <prvUnlockQueue+0x60>
 80031b8:	e000      	b.n	80031bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80031ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	22ff      	movs	r2, #255	; 0xff
 80031c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80031c4:	f001 fd26 	bl	8004c14 <vPortExitCritical>
}
 80031c8:	bf00      	nop
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80031d8:	f001 fcec 	bl	8004bb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d102      	bne.n	80031ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80031e4:	2301      	movs	r3, #1
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	e001      	b.n	80031ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80031ea:	2300      	movs	r3, #0
 80031ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80031ee:	f001 fd11 	bl	8004c14 <vPortExitCritical>

	return xReturn;
 80031f2:	68fb      	ldr	r3, [r7, #12]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003204:	f001 fcd6 	bl	8004bb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003210:	429a      	cmp	r2, r3
 8003212:	d102      	bne.n	800321a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003214:	2301      	movs	r3, #1
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	e001      	b.n	800321e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800321a:	2300      	movs	r3, #0
 800321c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800321e:	f001 fcf9 	bl	8004c14 <vPortExitCritical>

	return xReturn;
 8003222:	68fb      	ldr	r3, [r7, #12]
}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003236:	2300      	movs	r3, #0
 8003238:	60fb      	str	r3, [r7, #12]
 800323a:	e014      	b.n	8003266 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800323c:	4a0f      	ldr	r2, [pc, #60]	; (800327c <vQueueAddToRegistry+0x50>)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d10b      	bne.n	8003260 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003248:	490c      	ldr	r1, [pc, #48]	; (800327c <vQueueAddToRegistry+0x50>)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003252:	4a0a      	ldr	r2, [pc, #40]	; (800327c <vQueueAddToRegistry+0x50>)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	4413      	add	r3, r2
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800325e:	e006      	b.n	800326e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	3301      	adds	r3, #1
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2b07      	cmp	r3, #7
 800326a:	d9e7      	bls.n	800323c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800326c:	bf00      	nop
 800326e:	bf00      	nop
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	20000a38 	.word	0x20000a38

08003280 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003290:	f001 fc90 	bl	8004bb4 <vPortEnterCritical>
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800329a:	b25b      	sxtb	r3, r3
 800329c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032a0:	d103      	bne.n	80032aa <vQueueWaitForMessageRestricted+0x2a>
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032b0:	b25b      	sxtb	r3, r3
 80032b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032b6:	d103      	bne.n	80032c0 <vQueueWaitForMessageRestricted+0x40>
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032c0:	f001 fca8 	bl	8004c14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d106      	bne.n	80032da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	3324      	adds	r3, #36	; 0x24
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	68b9      	ldr	r1, [r7, #8]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f000 fc4d 	bl	8003b74 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80032da:	6978      	ldr	r0, [r7, #20]
 80032dc:	f7ff ff26 	bl	800312c <prvUnlockQueue>
	}
 80032e0:	bf00      	nop
 80032e2:	3718      	adds	r7, #24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b08e      	sub	sp, #56	; 0x38
 80032ec:	af04      	add	r7, sp, #16
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
 80032f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80032f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10a      	bne.n	8003312 <xTaskCreateStatic+0x2a>
	__asm volatile
 80032fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003300:	f383 8811 	msr	BASEPRI, r3
 8003304:	f3bf 8f6f 	isb	sy
 8003308:	f3bf 8f4f 	dsb	sy
 800330c:	623b      	str	r3, [r7, #32]
}
 800330e:	bf00      	nop
 8003310:	e7fe      	b.n	8003310 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10a      	bne.n	800332e <xTaskCreateStatic+0x46>
	__asm volatile
 8003318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800331c:	f383 8811 	msr	BASEPRI, r3
 8003320:	f3bf 8f6f 	isb	sy
 8003324:	f3bf 8f4f 	dsb	sy
 8003328:	61fb      	str	r3, [r7, #28]
}
 800332a:	bf00      	nop
 800332c:	e7fe      	b.n	800332c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800332e:	235c      	movs	r3, #92	; 0x5c
 8003330:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	2b5c      	cmp	r3, #92	; 0x5c
 8003336:	d00a      	beq.n	800334e <xTaskCreateStatic+0x66>
	__asm volatile
 8003338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333c:	f383 8811 	msr	BASEPRI, r3
 8003340:	f3bf 8f6f 	isb	sy
 8003344:	f3bf 8f4f 	dsb	sy
 8003348:	61bb      	str	r3, [r7, #24]
}
 800334a:	bf00      	nop
 800334c:	e7fe      	b.n	800334c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800334e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003352:	2b00      	cmp	r3, #0
 8003354:	d01e      	beq.n	8003394 <xTaskCreateStatic+0xac>
 8003356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003358:	2b00      	cmp	r3, #0
 800335a:	d01b      	beq.n	8003394 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800335c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800335e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003364:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	2202      	movs	r2, #2
 800336a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800336e:	2300      	movs	r3, #0
 8003370:	9303      	str	r3, [sp, #12]
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	9302      	str	r3, [sp, #8]
 8003376:	f107 0314 	add.w	r3, r7, #20
 800337a:	9301      	str	r3, [sp, #4]
 800337c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	68b9      	ldr	r1, [r7, #8]
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 f850 	bl	800342c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800338c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800338e:	f000 f8dd 	bl	800354c <prvAddNewTaskToReadyList>
 8003392:	e001      	b.n	8003398 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003394:	2300      	movs	r3, #0
 8003396:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003398:	697b      	ldr	r3, [r7, #20]
	}
 800339a:	4618      	mov	r0, r3
 800339c:	3728      	adds	r7, #40	; 0x28
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b08c      	sub	sp, #48	; 0x30
 80033a6:	af04      	add	r7, sp, #16
 80033a8:	60f8      	str	r0, [r7, #12]
 80033aa:	60b9      	str	r1, [r7, #8]
 80033ac:	603b      	str	r3, [r7, #0]
 80033ae:	4613      	mov	r3, r2
 80033b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80033b2:	88fb      	ldrh	r3, [r7, #6]
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4618      	mov	r0, r3
 80033b8:	f001 fd1e 	bl	8004df8 <pvPortMalloc>
 80033bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00e      	beq.n	80033e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80033c4:	205c      	movs	r0, #92	; 0x5c
 80033c6:	f001 fd17 	bl	8004df8 <pvPortMalloc>
 80033ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	631a      	str	r2, [r3, #48]	; 0x30
 80033d8:	e005      	b.n	80033e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80033da:	6978      	ldr	r0, [r7, #20]
 80033dc:	f001 fdd8 	bl	8004f90 <vPortFree>
 80033e0:	e001      	b.n	80033e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80033e2:	2300      	movs	r3, #0
 80033e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d017      	beq.n	800341c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80033f4:	88fa      	ldrh	r2, [r7, #6]
 80033f6:	2300      	movs	r3, #0
 80033f8:	9303      	str	r3, [sp, #12]
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	9302      	str	r3, [sp, #8]
 80033fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003400:	9301      	str	r3, [sp, #4]
 8003402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003404:	9300      	str	r3, [sp, #0]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	68b9      	ldr	r1, [r7, #8]
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f000 f80e 	bl	800342c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003410:	69f8      	ldr	r0, [r7, #28]
 8003412:	f000 f89b 	bl	800354c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003416:	2301      	movs	r3, #1
 8003418:	61bb      	str	r3, [r7, #24]
 800341a:	e002      	b.n	8003422 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800341c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003420:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003422:	69bb      	ldr	r3, [r7, #24]
	}
 8003424:	4618      	mov	r0, r3
 8003426:	3720      	adds	r7, #32
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b088      	sub	sp, #32
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
 8003438:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800343a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	461a      	mov	r2, r3
 8003444:	21a5      	movs	r1, #165	; 0xa5
 8003446:	f007 f8df 	bl	800a608 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800344a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003454:	3b01      	subs	r3, #1
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	f023 0307 	bic.w	r3, r3, #7
 8003462:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	f003 0307 	and.w	r3, r3, #7
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00a      	beq.n	8003484 <prvInitialiseNewTask+0x58>
	__asm volatile
 800346e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003472:	f383 8811 	msr	BASEPRI, r3
 8003476:	f3bf 8f6f 	isb	sy
 800347a:	f3bf 8f4f 	dsb	sy
 800347e:	617b      	str	r3, [r7, #20]
}
 8003480:	bf00      	nop
 8003482:	e7fe      	b.n	8003482 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d01f      	beq.n	80034ca <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800348a:	2300      	movs	r3, #0
 800348c:	61fb      	str	r3, [r7, #28]
 800348e:	e012      	b.n	80034b6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003490:	68ba      	ldr	r2, [r7, #8]
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	4413      	add	r3, r2
 8003496:	7819      	ldrb	r1, [r3, #0]
 8003498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	4413      	add	r3, r2
 800349e:	3334      	adds	r3, #52	; 0x34
 80034a0:	460a      	mov	r2, r1
 80034a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	4413      	add	r3, r2
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d006      	beq.n	80034be <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	3301      	adds	r3, #1
 80034b4:	61fb      	str	r3, [r7, #28]
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	2b0f      	cmp	r3, #15
 80034ba:	d9e9      	bls.n	8003490 <prvInitialiseNewTask+0x64>
 80034bc:	e000      	b.n	80034c0 <prvInitialiseNewTask+0x94>
			{
				break;
 80034be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80034c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034c8:	e003      	b.n	80034d2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80034ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80034d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d4:	2b37      	cmp	r3, #55	; 0x37
 80034d6:	d901      	bls.n	80034dc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80034d8:	2337      	movs	r3, #55	; 0x37
 80034da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80034dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80034e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034e6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80034e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ea:	2200      	movs	r2, #0
 80034ec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80034ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f0:	3304      	adds	r3, #4
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7ff f978 	bl	80027e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80034f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fa:	3318      	adds	r3, #24
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff f973 	bl	80027e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003506:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800350e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003510:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003516:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351a:	2200      	movs	r2, #0
 800351c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800351e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	68f9      	ldr	r1, [r7, #12]
 800352a:	69b8      	ldr	r0, [r7, #24]
 800352c:	f001 fa16 	bl	800495c <pxPortInitialiseStack>
 8003530:	4602      	mov	r2, r0
 8003532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003534:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003538:	2b00      	cmp	r3, #0
 800353a:	d002      	beq.n	8003542 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800353c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800353e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003540:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003542:	bf00      	nop
 8003544:	3720      	adds	r7, #32
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
	...

0800354c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003554:	f001 fb2e 	bl	8004bb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003558:	4b2d      	ldr	r3, [pc, #180]	; (8003610 <prvAddNewTaskToReadyList+0xc4>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	3301      	adds	r3, #1
 800355e:	4a2c      	ldr	r2, [pc, #176]	; (8003610 <prvAddNewTaskToReadyList+0xc4>)
 8003560:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003562:	4b2c      	ldr	r3, [pc, #176]	; (8003614 <prvAddNewTaskToReadyList+0xc8>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d109      	bne.n	800357e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800356a:	4a2a      	ldr	r2, [pc, #168]	; (8003614 <prvAddNewTaskToReadyList+0xc8>)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003570:	4b27      	ldr	r3, [pc, #156]	; (8003610 <prvAddNewTaskToReadyList+0xc4>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d110      	bne.n	800359a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003578:	f000 fc28 	bl	8003dcc <prvInitialiseTaskLists>
 800357c:	e00d      	b.n	800359a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800357e:	4b26      	ldr	r3, [pc, #152]	; (8003618 <prvAddNewTaskToReadyList+0xcc>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d109      	bne.n	800359a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003586:	4b23      	ldr	r3, [pc, #140]	; (8003614 <prvAddNewTaskToReadyList+0xc8>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003590:	429a      	cmp	r2, r3
 8003592:	d802      	bhi.n	800359a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003594:	4a1f      	ldr	r2, [pc, #124]	; (8003614 <prvAddNewTaskToReadyList+0xc8>)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800359a:	4b20      	ldr	r3, [pc, #128]	; (800361c <prvAddNewTaskToReadyList+0xd0>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	3301      	adds	r3, #1
 80035a0:	4a1e      	ldr	r2, [pc, #120]	; (800361c <prvAddNewTaskToReadyList+0xd0>)
 80035a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80035a4:	4b1d      	ldr	r3, [pc, #116]	; (800361c <prvAddNewTaskToReadyList+0xd0>)
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b0:	4b1b      	ldr	r3, [pc, #108]	; (8003620 <prvAddNewTaskToReadyList+0xd4>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d903      	bls.n	80035c0 <prvAddNewTaskToReadyList+0x74>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035bc:	4a18      	ldr	r2, [pc, #96]	; (8003620 <prvAddNewTaskToReadyList+0xd4>)
 80035be:	6013      	str	r3, [r2, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c4:	4613      	mov	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4a15      	ldr	r2, [pc, #84]	; (8003624 <prvAddNewTaskToReadyList+0xd8>)
 80035ce:	441a      	add	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3304      	adds	r3, #4
 80035d4:	4619      	mov	r1, r3
 80035d6:	4610      	mov	r0, r2
 80035d8:	f7ff f913 	bl	8002802 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80035dc:	f001 fb1a 	bl	8004c14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80035e0:	4b0d      	ldr	r3, [pc, #52]	; (8003618 <prvAddNewTaskToReadyList+0xcc>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00e      	beq.n	8003606 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80035e8:	4b0a      	ldr	r3, [pc, #40]	; (8003614 <prvAddNewTaskToReadyList+0xc8>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d207      	bcs.n	8003606 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80035f6:	4b0c      	ldr	r3, [pc, #48]	; (8003628 <prvAddNewTaskToReadyList+0xdc>)
 80035f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	f3bf 8f4f 	dsb	sy
 8003602:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003606:	bf00      	nop
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	20000f4c 	.word	0x20000f4c
 8003614:	20000a78 	.word	0x20000a78
 8003618:	20000f58 	.word	0x20000f58
 800361c:	20000f68 	.word	0x20000f68
 8003620:	20000f54 	.word	0x20000f54
 8003624:	20000a7c 	.word	0x20000a7c
 8003628:	e000ed04 	.word	0xe000ed04

0800362c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003634:	2300      	movs	r3, #0
 8003636:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d017      	beq.n	800366e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800363e:	4b13      	ldr	r3, [pc, #76]	; (800368c <vTaskDelay+0x60>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00a      	beq.n	800365c <vTaskDelay+0x30>
	__asm volatile
 8003646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364a:	f383 8811 	msr	BASEPRI, r3
 800364e:	f3bf 8f6f 	isb	sy
 8003652:	f3bf 8f4f 	dsb	sy
 8003656:	60bb      	str	r3, [r7, #8]
}
 8003658:	bf00      	nop
 800365a:	e7fe      	b.n	800365a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800365c:	f000 f880 	bl	8003760 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003660:	2100      	movs	r1, #0
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 fdd8 	bl	8004218 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003668:	f000 f888 	bl	800377c <xTaskResumeAll>
 800366c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d107      	bne.n	8003684 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003674:	4b06      	ldr	r3, [pc, #24]	; (8003690 <vTaskDelay+0x64>)
 8003676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	f3bf 8f4f 	dsb	sy
 8003680:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003684:	bf00      	nop
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	20000f74 	.word	0x20000f74
 8003690:	e000ed04 	.word	0xe000ed04

08003694 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b08a      	sub	sp, #40	; 0x28
 8003698:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800369a:	2300      	movs	r3, #0
 800369c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800369e:	2300      	movs	r3, #0
 80036a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80036a2:	463a      	mov	r2, r7
 80036a4:	1d39      	adds	r1, r7, #4
 80036a6:	f107 0308 	add.w	r3, r7, #8
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7ff f848 	bl	8002740 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80036b0:	6839      	ldr	r1, [r7, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	9202      	str	r2, [sp, #8]
 80036b8:	9301      	str	r3, [sp, #4]
 80036ba:	2300      	movs	r3, #0
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	2300      	movs	r3, #0
 80036c0:	460a      	mov	r2, r1
 80036c2:	4921      	ldr	r1, [pc, #132]	; (8003748 <vTaskStartScheduler+0xb4>)
 80036c4:	4821      	ldr	r0, [pc, #132]	; (800374c <vTaskStartScheduler+0xb8>)
 80036c6:	f7ff fe0f 	bl	80032e8 <xTaskCreateStatic>
 80036ca:	4603      	mov	r3, r0
 80036cc:	4a20      	ldr	r2, [pc, #128]	; (8003750 <vTaskStartScheduler+0xbc>)
 80036ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80036d0:	4b1f      	ldr	r3, [pc, #124]	; (8003750 <vTaskStartScheduler+0xbc>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d002      	beq.n	80036de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80036d8:	2301      	movs	r3, #1
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	e001      	b.n	80036e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80036de:	2300      	movs	r3, #0
 80036e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d102      	bne.n	80036ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80036e8:	f000 fdea 	bl	80042c0 <xTimerCreateTimerTask>
 80036ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d116      	bne.n	8003722 <vTaskStartScheduler+0x8e>
	__asm volatile
 80036f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f8:	f383 8811 	msr	BASEPRI, r3
 80036fc:	f3bf 8f6f 	isb	sy
 8003700:	f3bf 8f4f 	dsb	sy
 8003704:	613b      	str	r3, [r7, #16]
}
 8003706:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003708:	4b12      	ldr	r3, [pc, #72]	; (8003754 <vTaskStartScheduler+0xc0>)
 800370a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800370e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003710:	4b11      	ldr	r3, [pc, #68]	; (8003758 <vTaskStartScheduler+0xc4>)
 8003712:	2201      	movs	r2, #1
 8003714:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003716:	4b11      	ldr	r3, [pc, #68]	; (800375c <vTaskStartScheduler+0xc8>)
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800371c:	f001 f9a8 	bl	8004a70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003720:	e00e      	b.n	8003740 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003728:	d10a      	bne.n	8003740 <vTaskStartScheduler+0xac>
	__asm volatile
 800372a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372e:	f383 8811 	msr	BASEPRI, r3
 8003732:	f3bf 8f6f 	isb	sy
 8003736:	f3bf 8f4f 	dsb	sy
 800373a:	60fb      	str	r3, [r7, #12]
}
 800373c:	bf00      	nop
 800373e:	e7fe      	b.n	800373e <vTaskStartScheduler+0xaa>
}
 8003740:	bf00      	nop
 8003742:	3718      	adds	r7, #24
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	0800b758 	.word	0x0800b758
 800374c:	08003d9d 	.word	0x08003d9d
 8003750:	20000f70 	.word	0x20000f70
 8003754:	20000f6c 	.word	0x20000f6c
 8003758:	20000f58 	.word	0x20000f58
 800375c:	20000f50 	.word	0x20000f50

08003760 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003764:	4b04      	ldr	r3, [pc, #16]	; (8003778 <vTaskSuspendAll+0x18>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	3301      	adds	r3, #1
 800376a:	4a03      	ldr	r2, [pc, #12]	; (8003778 <vTaskSuspendAll+0x18>)
 800376c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800376e:	bf00      	nop
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	20000f74 	.word	0x20000f74

0800377c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003782:	2300      	movs	r3, #0
 8003784:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003786:	2300      	movs	r3, #0
 8003788:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800378a:	4b42      	ldr	r3, [pc, #264]	; (8003894 <xTaskResumeAll+0x118>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10a      	bne.n	80037a8 <xTaskResumeAll+0x2c>
	__asm volatile
 8003792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003796:	f383 8811 	msr	BASEPRI, r3
 800379a:	f3bf 8f6f 	isb	sy
 800379e:	f3bf 8f4f 	dsb	sy
 80037a2:	603b      	str	r3, [r7, #0]
}
 80037a4:	bf00      	nop
 80037a6:	e7fe      	b.n	80037a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80037a8:	f001 fa04 	bl	8004bb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80037ac:	4b39      	ldr	r3, [pc, #228]	; (8003894 <xTaskResumeAll+0x118>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	3b01      	subs	r3, #1
 80037b2:	4a38      	ldr	r2, [pc, #224]	; (8003894 <xTaskResumeAll+0x118>)
 80037b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037b6:	4b37      	ldr	r3, [pc, #220]	; (8003894 <xTaskResumeAll+0x118>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d162      	bne.n	8003884 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80037be:	4b36      	ldr	r3, [pc, #216]	; (8003898 <xTaskResumeAll+0x11c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d05e      	beq.n	8003884 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037c6:	e02f      	b.n	8003828 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037c8:	4b34      	ldr	r3, [pc, #208]	; (800389c <xTaskResumeAll+0x120>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	3318      	adds	r3, #24
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff f871 	bl	80028bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	3304      	adds	r3, #4
 80037de:	4618      	mov	r0, r3
 80037e0:	f7ff f86c 	bl	80028bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e8:	4b2d      	ldr	r3, [pc, #180]	; (80038a0 <xTaskResumeAll+0x124>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d903      	bls.n	80037f8 <xTaskResumeAll+0x7c>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f4:	4a2a      	ldr	r2, [pc, #168]	; (80038a0 <xTaskResumeAll+0x124>)
 80037f6:	6013      	str	r3, [r2, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037fc:	4613      	mov	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4413      	add	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4a27      	ldr	r2, [pc, #156]	; (80038a4 <xTaskResumeAll+0x128>)
 8003806:	441a      	add	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	3304      	adds	r3, #4
 800380c:	4619      	mov	r1, r3
 800380e:	4610      	mov	r0, r2
 8003810:	f7fe fff7 	bl	8002802 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003818:	4b23      	ldr	r3, [pc, #140]	; (80038a8 <xTaskResumeAll+0x12c>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381e:	429a      	cmp	r2, r3
 8003820:	d302      	bcc.n	8003828 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003822:	4b22      	ldr	r3, [pc, #136]	; (80038ac <xTaskResumeAll+0x130>)
 8003824:	2201      	movs	r2, #1
 8003826:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003828:	4b1c      	ldr	r3, [pc, #112]	; (800389c <xTaskResumeAll+0x120>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1cb      	bne.n	80037c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003836:	f000 fb67 	bl	8003f08 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800383a:	4b1d      	ldr	r3, [pc, #116]	; (80038b0 <xTaskResumeAll+0x134>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d010      	beq.n	8003868 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003846:	f000 f859 	bl	80038fc <xTaskIncrementTick>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d002      	beq.n	8003856 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003850:	4b16      	ldr	r3, [pc, #88]	; (80038ac <xTaskResumeAll+0x130>)
 8003852:	2201      	movs	r2, #1
 8003854:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	3b01      	subs	r3, #1
 800385a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1f1      	bne.n	8003846 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003862:	4b13      	ldr	r3, [pc, #76]	; (80038b0 <xTaskResumeAll+0x134>)
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003868:	4b10      	ldr	r3, [pc, #64]	; (80038ac <xTaskResumeAll+0x130>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d009      	beq.n	8003884 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003870:	2301      	movs	r3, #1
 8003872:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003874:	4b0f      	ldr	r3, [pc, #60]	; (80038b4 <xTaskResumeAll+0x138>)
 8003876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	f3bf 8f4f 	dsb	sy
 8003880:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003884:	f001 f9c6 	bl	8004c14 <vPortExitCritical>

	return xAlreadyYielded;
 8003888:	68bb      	ldr	r3, [r7, #8]
}
 800388a:	4618      	mov	r0, r3
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	20000f74 	.word	0x20000f74
 8003898:	20000f4c 	.word	0x20000f4c
 800389c:	20000f0c 	.word	0x20000f0c
 80038a0:	20000f54 	.word	0x20000f54
 80038a4:	20000a7c 	.word	0x20000a7c
 80038a8:	20000a78 	.word	0x20000a78
 80038ac:	20000f60 	.word	0x20000f60
 80038b0:	20000f5c 	.word	0x20000f5c
 80038b4:	e000ed04 	.word	0xe000ed04

080038b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80038be:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <xTaskGetTickCount+0x1c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80038c4:	687b      	ldr	r3, [r7, #4]
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	20000f50 	.word	0x20000f50

080038d8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80038de:	f001 fa4b 	bl	8004d78 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80038e2:	2300      	movs	r3, #0
 80038e4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80038e6:	4b04      	ldr	r3, [pc, #16]	; (80038f8 <xTaskGetTickCountFromISR+0x20>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80038ec:	683b      	ldr	r3, [r7, #0]
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20000f50 	.word	0x20000f50

080038fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003902:	2300      	movs	r3, #0
 8003904:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003906:	4b4f      	ldr	r3, [pc, #316]	; (8003a44 <xTaskIncrementTick+0x148>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	f040 808f 	bne.w	8003a2e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003910:	4b4d      	ldr	r3, [pc, #308]	; (8003a48 <xTaskIncrementTick+0x14c>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	3301      	adds	r3, #1
 8003916:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003918:	4a4b      	ldr	r2, [pc, #300]	; (8003a48 <xTaskIncrementTick+0x14c>)
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d120      	bne.n	8003966 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003924:	4b49      	ldr	r3, [pc, #292]	; (8003a4c <xTaskIncrementTick+0x150>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00a      	beq.n	8003944 <xTaskIncrementTick+0x48>
	__asm volatile
 800392e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003932:	f383 8811 	msr	BASEPRI, r3
 8003936:	f3bf 8f6f 	isb	sy
 800393a:	f3bf 8f4f 	dsb	sy
 800393e:	603b      	str	r3, [r7, #0]
}
 8003940:	bf00      	nop
 8003942:	e7fe      	b.n	8003942 <xTaskIncrementTick+0x46>
 8003944:	4b41      	ldr	r3, [pc, #260]	; (8003a4c <xTaskIncrementTick+0x150>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	4b41      	ldr	r3, [pc, #260]	; (8003a50 <xTaskIncrementTick+0x154>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a3f      	ldr	r2, [pc, #252]	; (8003a4c <xTaskIncrementTick+0x150>)
 8003950:	6013      	str	r3, [r2, #0]
 8003952:	4a3f      	ldr	r2, [pc, #252]	; (8003a50 <xTaskIncrementTick+0x154>)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6013      	str	r3, [r2, #0]
 8003958:	4b3e      	ldr	r3, [pc, #248]	; (8003a54 <xTaskIncrementTick+0x158>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	3301      	adds	r3, #1
 800395e:	4a3d      	ldr	r2, [pc, #244]	; (8003a54 <xTaskIncrementTick+0x158>)
 8003960:	6013      	str	r3, [r2, #0]
 8003962:	f000 fad1 	bl	8003f08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003966:	4b3c      	ldr	r3, [pc, #240]	; (8003a58 <xTaskIncrementTick+0x15c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	429a      	cmp	r2, r3
 800396e:	d349      	bcc.n	8003a04 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003970:	4b36      	ldr	r3, [pc, #216]	; (8003a4c <xTaskIncrementTick+0x150>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d104      	bne.n	8003984 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800397a:	4b37      	ldr	r3, [pc, #220]	; (8003a58 <xTaskIncrementTick+0x15c>)
 800397c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003980:	601a      	str	r2, [r3, #0]
					break;
 8003982:	e03f      	b.n	8003a04 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003984:	4b31      	ldr	r3, [pc, #196]	; (8003a4c <xTaskIncrementTick+0x150>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	429a      	cmp	r2, r3
 800399a:	d203      	bcs.n	80039a4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800399c:	4a2e      	ldr	r2, [pc, #184]	; (8003a58 <xTaskIncrementTick+0x15c>)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80039a2:	e02f      	b.n	8003a04 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	3304      	adds	r3, #4
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7fe ff87 	bl	80028bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d004      	beq.n	80039c0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	3318      	adds	r3, #24
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fe ff7e 	bl	80028bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c4:	4b25      	ldr	r3, [pc, #148]	; (8003a5c <xTaskIncrementTick+0x160>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d903      	bls.n	80039d4 <xTaskIncrementTick+0xd8>
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d0:	4a22      	ldr	r2, [pc, #136]	; (8003a5c <xTaskIncrementTick+0x160>)
 80039d2:	6013      	str	r3, [r2, #0]
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d8:	4613      	mov	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	4a1f      	ldr	r2, [pc, #124]	; (8003a60 <xTaskIncrementTick+0x164>)
 80039e2:	441a      	add	r2, r3
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	3304      	adds	r3, #4
 80039e8:	4619      	mov	r1, r3
 80039ea:	4610      	mov	r0, r2
 80039ec:	f7fe ff09 	bl	8002802 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f4:	4b1b      	ldr	r3, [pc, #108]	; (8003a64 <xTaskIncrementTick+0x168>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d3b8      	bcc.n	8003970 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80039fe:	2301      	movs	r3, #1
 8003a00:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a02:	e7b5      	b.n	8003970 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003a04:	4b17      	ldr	r3, [pc, #92]	; (8003a64 <xTaskIncrementTick+0x168>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a0a:	4915      	ldr	r1, [pc, #84]	; (8003a60 <xTaskIncrementTick+0x164>)
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d901      	bls.n	8003a20 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003a20:	4b11      	ldr	r3, [pc, #68]	; (8003a68 <xTaskIncrementTick+0x16c>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d007      	beq.n	8003a38 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	617b      	str	r3, [r7, #20]
 8003a2c:	e004      	b.n	8003a38 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003a2e:	4b0f      	ldr	r3, [pc, #60]	; (8003a6c <xTaskIncrementTick+0x170>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	3301      	adds	r3, #1
 8003a34:	4a0d      	ldr	r2, [pc, #52]	; (8003a6c <xTaskIncrementTick+0x170>)
 8003a36:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003a38:	697b      	ldr	r3, [r7, #20]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	20000f74 	.word	0x20000f74
 8003a48:	20000f50 	.word	0x20000f50
 8003a4c:	20000f04 	.word	0x20000f04
 8003a50:	20000f08 	.word	0x20000f08
 8003a54:	20000f64 	.word	0x20000f64
 8003a58:	20000f6c 	.word	0x20000f6c
 8003a5c:	20000f54 	.word	0x20000f54
 8003a60:	20000a7c 	.word	0x20000a7c
 8003a64:	20000a78 	.word	0x20000a78
 8003a68:	20000f60 	.word	0x20000f60
 8003a6c:	20000f5c 	.word	0x20000f5c

08003a70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a76:	4b28      	ldr	r3, [pc, #160]	; (8003b18 <vTaskSwitchContext+0xa8>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003a7e:	4b27      	ldr	r3, [pc, #156]	; (8003b1c <vTaskSwitchContext+0xac>)
 8003a80:	2201      	movs	r2, #1
 8003a82:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003a84:	e041      	b.n	8003b0a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003a86:	4b25      	ldr	r3, [pc, #148]	; (8003b1c <vTaskSwitchContext+0xac>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a8c:	4b24      	ldr	r3, [pc, #144]	; (8003b20 <vTaskSwitchContext+0xb0>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	e010      	b.n	8003ab6 <vTaskSwitchContext+0x46>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10a      	bne.n	8003ab0 <vTaskSwitchContext+0x40>
	__asm volatile
 8003a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9e:	f383 8811 	msr	BASEPRI, r3
 8003aa2:	f3bf 8f6f 	isb	sy
 8003aa6:	f3bf 8f4f 	dsb	sy
 8003aaa:	607b      	str	r3, [r7, #4]
}
 8003aac:	bf00      	nop
 8003aae:	e7fe      	b.n	8003aae <vTaskSwitchContext+0x3e>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	60fb      	str	r3, [r7, #12]
 8003ab6:	491b      	ldr	r1, [pc, #108]	; (8003b24 <vTaskSwitchContext+0xb4>)
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	4613      	mov	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4413      	add	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	440b      	add	r3, r1
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0e4      	beq.n	8003a94 <vTaskSwitchContext+0x24>
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	4613      	mov	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4a13      	ldr	r2, [pc, #76]	; (8003b24 <vTaskSwitchContext+0xb4>)
 8003ad6:	4413      	add	r3, r2
 8003ad8:	60bb      	str	r3, [r7, #8]
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	605a      	str	r2, [r3, #4]
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	3308      	adds	r3, #8
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d104      	bne.n	8003afa <vTaskSwitchContext+0x8a>
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	605a      	str	r2, [r3, #4]
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	4a09      	ldr	r2, [pc, #36]	; (8003b28 <vTaskSwitchContext+0xb8>)
 8003b02:	6013      	str	r3, [r2, #0]
 8003b04:	4a06      	ldr	r2, [pc, #24]	; (8003b20 <vTaskSwitchContext+0xb0>)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6013      	str	r3, [r2, #0]
}
 8003b0a:	bf00      	nop
 8003b0c:	3714      	adds	r7, #20
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	20000f74 	.word	0x20000f74
 8003b1c:	20000f60 	.word	0x20000f60
 8003b20:	20000f54 	.word	0x20000f54
 8003b24:	20000a7c 	.word	0x20000a7c
 8003b28:	20000a78 	.word	0x20000a78

08003b2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10a      	bne.n	8003b52 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b40:	f383 8811 	msr	BASEPRI, r3
 8003b44:	f3bf 8f6f 	isb	sy
 8003b48:	f3bf 8f4f 	dsb	sy
 8003b4c:	60fb      	str	r3, [r7, #12]
}
 8003b4e:	bf00      	nop
 8003b50:	e7fe      	b.n	8003b50 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b52:	4b07      	ldr	r3, [pc, #28]	; (8003b70 <vTaskPlaceOnEventList+0x44>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	3318      	adds	r3, #24
 8003b58:	4619      	mov	r1, r3
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7fe fe75 	bl	800284a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b60:	2101      	movs	r1, #1
 8003b62:	6838      	ldr	r0, [r7, #0]
 8003b64:	f000 fb58 	bl	8004218 <prvAddCurrentTaskToDelayedList>
}
 8003b68:	bf00      	nop
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	20000a78 	.word	0x20000a78

08003b74 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10a      	bne.n	8003b9c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b8a:	f383 8811 	msr	BASEPRI, r3
 8003b8e:	f3bf 8f6f 	isb	sy
 8003b92:	f3bf 8f4f 	dsb	sy
 8003b96:	617b      	str	r3, [r7, #20]
}
 8003b98:	bf00      	nop
 8003b9a:	e7fe      	b.n	8003b9a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b9c:	4b0a      	ldr	r3, [pc, #40]	; (8003bc8 <vTaskPlaceOnEventListRestricted+0x54>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	3318      	adds	r3, #24
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f7fe fe2c 	bl	8002802 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d002      	beq.n	8003bb6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003bb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bb4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	68b8      	ldr	r0, [r7, #8]
 8003bba:	f000 fb2d 	bl	8004218 <prvAddCurrentTaskToDelayedList>
	}
 8003bbe:	bf00      	nop
 8003bc0:	3718      	adds	r7, #24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	20000a78 	.word	0x20000a78

08003bcc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10a      	bne.n	8003bf8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be6:	f383 8811 	msr	BASEPRI, r3
 8003bea:	f3bf 8f6f 	isb	sy
 8003bee:	f3bf 8f4f 	dsb	sy
 8003bf2:	60fb      	str	r3, [r7, #12]
}
 8003bf4:	bf00      	nop
 8003bf6:	e7fe      	b.n	8003bf6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	3318      	adds	r3, #24
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7fe fe5d 	bl	80028bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c02:	4b1e      	ldr	r3, [pc, #120]	; (8003c7c <xTaskRemoveFromEventList+0xb0>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d11d      	bne.n	8003c46 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fe fe54 	bl	80028bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c18:	4b19      	ldr	r3, [pc, #100]	; (8003c80 <xTaskRemoveFromEventList+0xb4>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d903      	bls.n	8003c28 <xTaskRemoveFromEventList+0x5c>
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	4a16      	ldr	r2, [pc, #88]	; (8003c80 <xTaskRemoveFromEventList+0xb4>)
 8003c26:	6013      	str	r3, [r2, #0]
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4413      	add	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4a13      	ldr	r2, [pc, #76]	; (8003c84 <xTaskRemoveFromEventList+0xb8>)
 8003c36:	441a      	add	r2, r3
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	3304      	adds	r3, #4
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4610      	mov	r0, r2
 8003c40:	f7fe fddf 	bl	8002802 <vListInsertEnd>
 8003c44:	e005      	b.n	8003c52 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	3318      	adds	r3, #24
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	480e      	ldr	r0, [pc, #56]	; (8003c88 <xTaskRemoveFromEventList+0xbc>)
 8003c4e:	f7fe fdd8 	bl	8002802 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c56:	4b0d      	ldr	r3, [pc, #52]	; (8003c8c <xTaskRemoveFromEventList+0xc0>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d905      	bls.n	8003c6c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003c60:	2301      	movs	r3, #1
 8003c62:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003c64:	4b0a      	ldr	r3, [pc, #40]	; (8003c90 <xTaskRemoveFromEventList+0xc4>)
 8003c66:	2201      	movs	r2, #1
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	e001      	b.n	8003c70 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003c70:	697b      	ldr	r3, [r7, #20]
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3718      	adds	r7, #24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	20000f74 	.word	0x20000f74
 8003c80:	20000f54 	.word	0x20000f54
 8003c84:	20000a7c 	.word	0x20000a7c
 8003c88:	20000f0c 	.word	0x20000f0c
 8003c8c:	20000a78 	.word	0x20000a78
 8003c90:	20000f60 	.word	0x20000f60

08003c94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003c9c:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <vTaskInternalSetTimeOutState+0x24>)
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003ca4:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <vTaskInternalSetTimeOutState+0x28>)
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	605a      	str	r2, [r3, #4]
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr
 8003cb8:	20000f64 	.word	0x20000f64
 8003cbc:	20000f50 	.word	0x20000f50

08003cc0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b088      	sub	sp, #32
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10a      	bne.n	8003ce6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd4:	f383 8811 	msr	BASEPRI, r3
 8003cd8:	f3bf 8f6f 	isb	sy
 8003cdc:	f3bf 8f4f 	dsb	sy
 8003ce0:	613b      	str	r3, [r7, #16]
}
 8003ce2:	bf00      	nop
 8003ce4:	e7fe      	b.n	8003ce4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10a      	bne.n	8003d02 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf0:	f383 8811 	msr	BASEPRI, r3
 8003cf4:	f3bf 8f6f 	isb	sy
 8003cf8:	f3bf 8f4f 	dsb	sy
 8003cfc:	60fb      	str	r3, [r7, #12]
}
 8003cfe:	bf00      	nop
 8003d00:	e7fe      	b.n	8003d00 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003d02:	f000 ff57 	bl	8004bb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003d06:	4b1d      	ldr	r3, [pc, #116]	; (8003d7c <xTaskCheckForTimeOut+0xbc>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d1e:	d102      	bne.n	8003d26 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003d20:	2300      	movs	r3, #0
 8003d22:	61fb      	str	r3, [r7, #28]
 8003d24:	e023      	b.n	8003d6e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	4b15      	ldr	r3, [pc, #84]	; (8003d80 <xTaskCheckForTimeOut+0xc0>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d007      	beq.n	8003d42 <xTaskCheckForTimeOut+0x82>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d302      	bcc.n	8003d42 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	61fb      	str	r3, [r7, #28]
 8003d40:	e015      	b.n	8003d6e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d20b      	bcs.n	8003d64 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	1ad2      	subs	r2, r2, r3
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f7ff ff9b 	bl	8003c94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	61fb      	str	r3, [r7, #28]
 8003d62:	e004      	b.n	8003d6e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	2200      	movs	r2, #0
 8003d68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003d6e:	f000 ff51 	bl	8004c14 <vPortExitCritical>

	return xReturn;
 8003d72:	69fb      	ldr	r3, [r7, #28]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3720      	adds	r7, #32
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	20000f50 	.word	0x20000f50
 8003d80:	20000f64 	.word	0x20000f64

08003d84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003d88:	4b03      	ldr	r3, [pc, #12]	; (8003d98 <vTaskMissedYield+0x14>)
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	601a      	str	r2, [r3, #0]
}
 8003d8e:	bf00      	nop
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	20000f60 	.word	0x20000f60

08003d9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003da4:	f000 f852 	bl	8003e4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003da8:	4b06      	ldr	r3, [pc, #24]	; (8003dc4 <prvIdleTask+0x28>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d9f9      	bls.n	8003da4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003db0:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <prvIdleTask+0x2c>)
 8003db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	f3bf 8f4f 	dsb	sy
 8003dbc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003dc0:	e7f0      	b.n	8003da4 <prvIdleTask+0x8>
 8003dc2:	bf00      	nop
 8003dc4:	20000a7c 	.word	0x20000a7c
 8003dc8:	e000ed04 	.word	0xe000ed04

08003dcc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	607b      	str	r3, [r7, #4]
 8003dd6:	e00c      	b.n	8003df2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	4413      	add	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	4a12      	ldr	r2, [pc, #72]	; (8003e2c <prvInitialiseTaskLists+0x60>)
 8003de4:	4413      	add	r3, r2
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7fe fcde 	bl	80027a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	3301      	adds	r3, #1
 8003df0:	607b      	str	r3, [r7, #4]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2b37      	cmp	r3, #55	; 0x37
 8003df6:	d9ef      	bls.n	8003dd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003df8:	480d      	ldr	r0, [pc, #52]	; (8003e30 <prvInitialiseTaskLists+0x64>)
 8003dfa:	f7fe fcd5 	bl	80027a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003dfe:	480d      	ldr	r0, [pc, #52]	; (8003e34 <prvInitialiseTaskLists+0x68>)
 8003e00:	f7fe fcd2 	bl	80027a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003e04:	480c      	ldr	r0, [pc, #48]	; (8003e38 <prvInitialiseTaskLists+0x6c>)
 8003e06:	f7fe fccf 	bl	80027a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003e0a:	480c      	ldr	r0, [pc, #48]	; (8003e3c <prvInitialiseTaskLists+0x70>)
 8003e0c:	f7fe fccc 	bl	80027a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003e10:	480b      	ldr	r0, [pc, #44]	; (8003e40 <prvInitialiseTaskLists+0x74>)
 8003e12:	f7fe fcc9 	bl	80027a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003e16:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <prvInitialiseTaskLists+0x78>)
 8003e18:	4a05      	ldr	r2, [pc, #20]	; (8003e30 <prvInitialiseTaskLists+0x64>)
 8003e1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003e1c:	4b0a      	ldr	r3, [pc, #40]	; (8003e48 <prvInitialiseTaskLists+0x7c>)
 8003e1e:	4a05      	ldr	r2, [pc, #20]	; (8003e34 <prvInitialiseTaskLists+0x68>)
 8003e20:	601a      	str	r2, [r3, #0]
}
 8003e22:	bf00      	nop
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	20000a7c 	.word	0x20000a7c
 8003e30:	20000edc 	.word	0x20000edc
 8003e34:	20000ef0 	.word	0x20000ef0
 8003e38:	20000f0c 	.word	0x20000f0c
 8003e3c:	20000f20 	.word	0x20000f20
 8003e40:	20000f38 	.word	0x20000f38
 8003e44:	20000f04 	.word	0x20000f04
 8003e48:	20000f08 	.word	0x20000f08

08003e4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e52:	e019      	b.n	8003e88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003e54:	f000 feae 	bl	8004bb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e58:	4b10      	ldr	r3, [pc, #64]	; (8003e9c <prvCheckTasksWaitingTermination+0x50>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	3304      	adds	r3, #4
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fe fd29 	bl	80028bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003e6a:	4b0d      	ldr	r3, [pc, #52]	; (8003ea0 <prvCheckTasksWaitingTermination+0x54>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	4a0b      	ldr	r2, [pc, #44]	; (8003ea0 <prvCheckTasksWaitingTermination+0x54>)
 8003e72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003e74:	4b0b      	ldr	r3, [pc, #44]	; (8003ea4 <prvCheckTasksWaitingTermination+0x58>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	4a0a      	ldr	r2, [pc, #40]	; (8003ea4 <prvCheckTasksWaitingTermination+0x58>)
 8003e7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003e7e:	f000 fec9 	bl	8004c14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f810 	bl	8003ea8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e88:	4b06      	ldr	r3, [pc, #24]	; (8003ea4 <prvCheckTasksWaitingTermination+0x58>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1e1      	bne.n	8003e54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003e90:	bf00      	nop
 8003e92:	bf00      	nop
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	20000f20 	.word	0x20000f20
 8003ea0:	20000f4c 	.word	0x20000f4c
 8003ea4:	20000f34 	.word	0x20000f34

08003ea8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d108      	bne.n	8003ecc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f001 f866 	bl	8004f90 <vPortFree>
				vPortFree( pxTCB );
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f001 f863 	bl	8004f90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003eca:	e018      	b.n	8003efe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d103      	bne.n	8003ede <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f001 f85a 	bl	8004f90 <vPortFree>
	}
 8003edc:	e00f      	b.n	8003efe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d00a      	beq.n	8003efe <prvDeleteTCB+0x56>
	__asm volatile
 8003ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eec:	f383 8811 	msr	BASEPRI, r3
 8003ef0:	f3bf 8f6f 	isb	sy
 8003ef4:	f3bf 8f4f 	dsb	sy
 8003ef8:	60fb      	str	r3, [r7, #12]
}
 8003efa:	bf00      	nop
 8003efc:	e7fe      	b.n	8003efc <prvDeleteTCB+0x54>
	}
 8003efe:	bf00      	nop
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
	...

08003f08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f0e:	4b0c      	ldr	r3, [pc, #48]	; (8003f40 <prvResetNextTaskUnblockTime+0x38>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d104      	bne.n	8003f22 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003f18:	4b0a      	ldr	r3, [pc, #40]	; (8003f44 <prvResetNextTaskUnblockTime+0x3c>)
 8003f1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f1e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003f20:	e008      	b.n	8003f34 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f22:	4b07      	ldr	r3, [pc, #28]	; (8003f40 <prvResetNextTaskUnblockTime+0x38>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	4a04      	ldr	r2, [pc, #16]	; (8003f44 <prvResetNextTaskUnblockTime+0x3c>)
 8003f32:	6013      	str	r3, [r2, #0]
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr
 8003f40:	20000f04 	.word	0x20000f04
 8003f44:	20000f6c 	.word	0x20000f6c

08003f48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003f4e:	4b0b      	ldr	r3, [pc, #44]	; (8003f7c <xTaskGetSchedulerState+0x34>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d102      	bne.n	8003f5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003f56:	2301      	movs	r3, #1
 8003f58:	607b      	str	r3, [r7, #4]
 8003f5a:	e008      	b.n	8003f6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f5c:	4b08      	ldr	r3, [pc, #32]	; (8003f80 <xTaskGetSchedulerState+0x38>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d102      	bne.n	8003f6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003f64:	2302      	movs	r3, #2
 8003f66:	607b      	str	r3, [r7, #4]
 8003f68:	e001      	b.n	8003f6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003f6e:	687b      	ldr	r3, [r7, #4]
	}
 8003f70:	4618      	mov	r0, r3
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	20000f58 	.word	0x20000f58
 8003f80:	20000f74 	.word	0x20000f74

08003f84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003f90:	2300      	movs	r3, #0
 8003f92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d056      	beq.n	8004048 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003f9a:	4b2e      	ldr	r3, [pc, #184]	; (8004054 <xTaskPriorityDisinherit+0xd0>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d00a      	beq.n	8003fba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa8:	f383 8811 	msr	BASEPRI, r3
 8003fac:	f3bf 8f6f 	isb	sy
 8003fb0:	f3bf 8f4f 	dsb	sy
 8003fb4:	60fb      	str	r3, [r7, #12]
}
 8003fb6:	bf00      	nop
 8003fb8:	e7fe      	b.n	8003fb8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10a      	bne.n	8003fd8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc6:	f383 8811 	msr	BASEPRI, r3
 8003fca:	f3bf 8f6f 	isb	sy
 8003fce:	f3bf 8f4f 	dsb	sy
 8003fd2:	60bb      	str	r3, [r7, #8]
}
 8003fd4:	bf00      	nop
 8003fd6:	e7fe      	b.n	8003fd6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fdc:	1e5a      	subs	r2, r3, #1
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d02c      	beq.n	8004048 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d128      	bne.n	8004048 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7fe fc5e 	bl	80028bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004018:	4b0f      	ldr	r3, [pc, #60]	; (8004058 <xTaskPriorityDisinherit+0xd4>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	429a      	cmp	r2, r3
 800401e:	d903      	bls.n	8004028 <xTaskPriorityDisinherit+0xa4>
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004024:	4a0c      	ldr	r2, [pc, #48]	; (8004058 <xTaskPriorityDisinherit+0xd4>)
 8004026:	6013      	str	r3, [r2, #0]
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800402c:	4613      	mov	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4413      	add	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4a09      	ldr	r2, [pc, #36]	; (800405c <xTaskPriorityDisinherit+0xd8>)
 8004036:	441a      	add	r2, r3
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	3304      	adds	r3, #4
 800403c:	4619      	mov	r1, r3
 800403e:	4610      	mov	r0, r2
 8004040:	f7fe fbdf 	bl	8002802 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004044:	2301      	movs	r3, #1
 8004046:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004048:	697b      	ldr	r3, [r7, #20]
	}
 800404a:	4618      	mov	r0, r3
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	20000a78 	.word	0x20000a78
 8004058:	20000f54 	.word	0x20000f54
 800405c:	20000a7c 	.word	0x20000a7c

08004060 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004060:	b580      	push	{r7, lr}
 8004062:	b08e      	sub	sp, #56	; 0x38
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	603b      	str	r3, [r7, #0]
 800406c:	4613      	mov	r3, r2
 800406e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8004070:	2301      	movs	r3, #1
 8004072:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10a      	bne.n	8004090 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800407a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407e:	f383 8811 	msr	BASEPRI, r3
 8004082:	f3bf 8f6f 	isb	sy
 8004086:	f3bf 8f4f 	dsb	sy
 800408a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800408c:	bf00      	nop
 800408e:	e7fe      	b.n	800408e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004090:	f000 fe72 	bl	8004d78 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8004098:	f3ef 8211 	mrs	r2, BASEPRI
 800409c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a0:	f383 8811 	msr	BASEPRI, r3
 80040a4:	f3bf 8f6f 	isb	sy
 80040a8:	f3bf 8f4f 	dsb	sy
 80040ac:	623a      	str	r2, [r7, #32]
 80040ae:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80040b0:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80040b2:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80040ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80040c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80040c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80040cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ce:	2202      	movs	r2, #2
 80040d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 80040d4:	79fb      	ldrb	r3, [r7, #7]
 80040d6:	2b04      	cmp	r3, #4
 80040d8:	d828      	bhi.n	800412c <xTaskGenericNotifyFromISR+0xcc>
 80040da:	a201      	add	r2, pc, #4	; (adr r2, 80040e0 <xTaskGenericNotifyFromISR+0x80>)
 80040dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e0:	0800414d 	.word	0x0800414d
 80040e4:	080040f5 	.word	0x080040f5
 80040e8:	08004103 	.word	0x08004103
 80040ec:	0800410f 	.word	0x0800410f
 80040f0:	08004117 	.word	0x08004117
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80040f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	431a      	orrs	r2, r3
 80040fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fe:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8004100:	e027      	b.n	8004152 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8004102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004106:	1c5a      	adds	r2, r3, #1
 8004108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800410c:	e021      	b.n	8004152 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800410e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8004114:	e01d      	b.n	8004152 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004116:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800411a:	2b02      	cmp	r3, #2
 800411c:	d003      	beq.n	8004126 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800411e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8004124:	e015      	b.n	8004152 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8004126:	2300      	movs	r3, #0
 8004128:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800412a:	e012      	b.n	8004152 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800412c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004130:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004134:	d00c      	beq.n	8004150 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8004136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413a:	f383 8811 	msr	BASEPRI, r3
 800413e:	f3bf 8f6f 	isb	sy
 8004142:	f3bf 8f4f 	dsb	sy
 8004146:	61bb      	str	r3, [r7, #24]
}
 8004148:	bf00      	nop
 800414a:	e7fe      	b.n	800414a <xTaskGenericNotifyFromISR+0xea>
					break;
 800414c:	bf00      	nop
 800414e:	e000      	b.n	8004152 <xTaskGenericNotifyFromISR+0xf2>
					break;
 8004150:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004152:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004156:	2b01      	cmp	r3, #1
 8004158:	d146      	bne.n	80041e8 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800415a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800415c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8004162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004166:	f383 8811 	msr	BASEPRI, r3
 800416a:	f3bf 8f6f 	isb	sy
 800416e:	f3bf 8f4f 	dsb	sy
 8004172:	617b      	str	r3, [r7, #20]
}
 8004174:	bf00      	nop
 8004176:	e7fe      	b.n	8004176 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004178:	4b21      	ldr	r3, [pc, #132]	; (8004200 <xTaskGenericNotifyFromISR+0x1a0>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d11d      	bne.n	80041bc <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004182:	3304      	adds	r3, #4
 8004184:	4618      	mov	r0, r3
 8004186:	f7fe fb99 	bl	80028bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800418a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800418e:	4b1d      	ldr	r3, [pc, #116]	; (8004204 <xTaskGenericNotifyFromISR+0x1a4>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	429a      	cmp	r2, r3
 8004194:	d903      	bls.n	800419e <xTaskGenericNotifyFromISR+0x13e>
 8004196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419a:	4a1a      	ldr	r2, [pc, #104]	; (8004204 <xTaskGenericNotifyFromISR+0x1a4>)
 800419c:	6013      	str	r3, [r2, #0]
 800419e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a2:	4613      	mov	r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4413      	add	r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	4a17      	ldr	r2, [pc, #92]	; (8004208 <xTaskGenericNotifyFromISR+0x1a8>)
 80041ac:	441a      	add	r2, r3
 80041ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b0:	3304      	adds	r3, #4
 80041b2:	4619      	mov	r1, r3
 80041b4:	4610      	mov	r0, r2
 80041b6:	f7fe fb24 	bl	8002802 <vListInsertEnd>
 80041ba:	e005      	b.n	80041c8 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80041bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041be:	3318      	adds	r3, #24
 80041c0:	4619      	mov	r1, r3
 80041c2:	4812      	ldr	r0, [pc, #72]	; (800420c <xTaskGenericNotifyFromISR+0x1ac>)
 80041c4:	f7fe fb1d 	bl	8002802 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80041c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041cc:	4b10      	ldr	r3, [pc, #64]	; (8004210 <xTaskGenericNotifyFromISR+0x1b0>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d908      	bls.n	80041e8 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80041d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d002      	beq.n	80041e2 <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80041dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041de:	2201      	movs	r2, #1
 80041e0:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80041e2:	4b0c      	ldr	r3, [pc, #48]	; (8004214 <xTaskGenericNotifyFromISR+0x1b4>)
 80041e4:	2201      	movs	r2, #1
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ea:	613b      	str	r3, [r7, #16]
	__asm volatile
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f383 8811 	msr	BASEPRI, r3
}
 80041f2:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80041f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3738      	adds	r7, #56	; 0x38
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	20000f74 	.word	0x20000f74
 8004204:	20000f54 	.word	0x20000f54
 8004208:	20000a7c 	.word	0x20000a7c
 800420c:	20000f0c 	.word	0x20000f0c
 8004210:	20000a78 	.word	0x20000a78
 8004214:	20000f60 	.word	0x20000f60

08004218 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004222:	4b21      	ldr	r3, [pc, #132]	; (80042a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004228:	4b20      	ldr	r3, [pc, #128]	; (80042ac <prvAddCurrentTaskToDelayedList+0x94>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	3304      	adds	r3, #4
 800422e:	4618      	mov	r0, r3
 8004230:	f7fe fb44 	bl	80028bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800423a:	d10a      	bne.n	8004252 <prvAddCurrentTaskToDelayedList+0x3a>
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d007      	beq.n	8004252 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004242:	4b1a      	ldr	r3, [pc, #104]	; (80042ac <prvAddCurrentTaskToDelayedList+0x94>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	3304      	adds	r3, #4
 8004248:	4619      	mov	r1, r3
 800424a:	4819      	ldr	r0, [pc, #100]	; (80042b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800424c:	f7fe fad9 	bl	8002802 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004250:	e026      	b.n	80042a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4413      	add	r3, r2
 8004258:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800425a:	4b14      	ldr	r3, [pc, #80]	; (80042ac <prvAddCurrentTaskToDelayedList+0x94>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	429a      	cmp	r2, r3
 8004268:	d209      	bcs.n	800427e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800426a:	4b12      	ldr	r3, [pc, #72]	; (80042b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	4b0f      	ldr	r3, [pc, #60]	; (80042ac <prvAddCurrentTaskToDelayedList+0x94>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	3304      	adds	r3, #4
 8004274:	4619      	mov	r1, r3
 8004276:	4610      	mov	r0, r2
 8004278:	f7fe fae7 	bl	800284a <vListInsert>
}
 800427c:	e010      	b.n	80042a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800427e:	4b0e      	ldr	r3, [pc, #56]	; (80042b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	4b0a      	ldr	r3, [pc, #40]	; (80042ac <prvAddCurrentTaskToDelayedList+0x94>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	3304      	adds	r3, #4
 8004288:	4619      	mov	r1, r3
 800428a:	4610      	mov	r0, r2
 800428c:	f7fe fadd 	bl	800284a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004290:	4b0a      	ldr	r3, [pc, #40]	; (80042bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	429a      	cmp	r2, r3
 8004298:	d202      	bcs.n	80042a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800429a:	4a08      	ldr	r2, [pc, #32]	; (80042bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	6013      	str	r3, [r2, #0]
}
 80042a0:	bf00      	nop
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	20000f50 	.word	0x20000f50
 80042ac:	20000a78 	.word	0x20000a78
 80042b0:	20000f38 	.word	0x20000f38
 80042b4:	20000f08 	.word	0x20000f08
 80042b8:	20000f04 	.word	0x20000f04
 80042bc:	20000f6c 	.word	0x20000f6c

080042c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b08a      	sub	sp, #40	; 0x28
 80042c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80042c6:	2300      	movs	r3, #0
 80042c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80042ca:	f000 fb07 	bl	80048dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80042ce:	4b1c      	ldr	r3, [pc, #112]	; (8004340 <xTimerCreateTimerTask+0x80>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d021      	beq.n	800431a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80042d6:	2300      	movs	r3, #0
 80042d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80042da:	2300      	movs	r3, #0
 80042dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80042de:	1d3a      	adds	r2, r7, #4
 80042e0:	f107 0108 	add.w	r1, r7, #8
 80042e4:	f107 030c 	add.w	r3, r7, #12
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7fe fa43 	bl	8002774 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80042ee:	6879      	ldr	r1, [r7, #4]
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	9202      	str	r2, [sp, #8]
 80042f6:	9301      	str	r3, [sp, #4]
 80042f8:	2302      	movs	r3, #2
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	2300      	movs	r3, #0
 80042fe:	460a      	mov	r2, r1
 8004300:	4910      	ldr	r1, [pc, #64]	; (8004344 <xTimerCreateTimerTask+0x84>)
 8004302:	4811      	ldr	r0, [pc, #68]	; (8004348 <xTimerCreateTimerTask+0x88>)
 8004304:	f7fe fff0 	bl	80032e8 <xTaskCreateStatic>
 8004308:	4603      	mov	r3, r0
 800430a:	4a10      	ldr	r2, [pc, #64]	; (800434c <xTimerCreateTimerTask+0x8c>)
 800430c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800430e:	4b0f      	ldr	r3, [pc, #60]	; (800434c <xTimerCreateTimerTask+0x8c>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004316:	2301      	movs	r3, #1
 8004318:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10a      	bne.n	8004336 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004324:	f383 8811 	msr	BASEPRI, r3
 8004328:	f3bf 8f6f 	isb	sy
 800432c:	f3bf 8f4f 	dsb	sy
 8004330:	613b      	str	r3, [r7, #16]
}
 8004332:	bf00      	nop
 8004334:	e7fe      	b.n	8004334 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004336:	697b      	ldr	r3, [r7, #20]
}
 8004338:	4618      	mov	r0, r3
 800433a:	3718      	adds	r7, #24
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	20000fa8 	.word	0x20000fa8
 8004344:	0800b760 	.word	0x0800b760
 8004348:	08004485 	.word	0x08004485
 800434c:	20000fac 	.word	0x20000fac

08004350 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b08a      	sub	sp, #40	; 0x28
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
 800435c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800435e:	2300      	movs	r3, #0
 8004360:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10a      	bne.n	800437e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436c:	f383 8811 	msr	BASEPRI, r3
 8004370:	f3bf 8f6f 	isb	sy
 8004374:	f3bf 8f4f 	dsb	sy
 8004378:	623b      	str	r3, [r7, #32]
}
 800437a:	bf00      	nop
 800437c:	e7fe      	b.n	800437c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800437e:	4b1a      	ldr	r3, [pc, #104]	; (80043e8 <xTimerGenericCommand+0x98>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d02a      	beq.n	80043dc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	2b05      	cmp	r3, #5
 8004396:	dc18      	bgt.n	80043ca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004398:	f7ff fdd6 	bl	8003f48 <xTaskGetSchedulerState>
 800439c:	4603      	mov	r3, r0
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d109      	bne.n	80043b6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80043a2:	4b11      	ldr	r3, [pc, #68]	; (80043e8 <xTimerGenericCommand+0x98>)
 80043a4:	6818      	ldr	r0, [r3, #0]
 80043a6:	f107 0110 	add.w	r1, r7, #16
 80043aa:	2300      	movs	r3, #0
 80043ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043ae:	f7fe fbb3 	bl	8002b18 <xQueueGenericSend>
 80043b2:	6278      	str	r0, [r7, #36]	; 0x24
 80043b4:	e012      	b.n	80043dc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80043b6:	4b0c      	ldr	r3, [pc, #48]	; (80043e8 <xTimerGenericCommand+0x98>)
 80043b8:	6818      	ldr	r0, [r3, #0]
 80043ba:	f107 0110 	add.w	r1, r7, #16
 80043be:	2300      	movs	r3, #0
 80043c0:	2200      	movs	r2, #0
 80043c2:	f7fe fba9 	bl	8002b18 <xQueueGenericSend>
 80043c6:	6278      	str	r0, [r7, #36]	; 0x24
 80043c8:	e008      	b.n	80043dc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80043ca:	4b07      	ldr	r3, [pc, #28]	; (80043e8 <xTimerGenericCommand+0x98>)
 80043cc:	6818      	ldr	r0, [r3, #0]
 80043ce:	f107 0110 	add.w	r1, r7, #16
 80043d2:	2300      	movs	r3, #0
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	f7fe fc9d 	bl	8002d14 <xQueueGenericSendFromISR>
 80043da:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80043dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3728      	adds	r7, #40	; 0x28
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	20000fa8 	.word	0x20000fa8

080043ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b088      	sub	sp, #32
 80043f0:	af02      	add	r7, sp, #8
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043f6:	4b22      	ldr	r3, [pc, #136]	; (8004480 <prvProcessExpiredTimer+0x94>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	3304      	adds	r3, #4
 8004404:	4618      	mov	r0, r3
 8004406:	f7fe fa59 	bl	80028bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004410:	f003 0304 	and.w	r3, r3, #4
 8004414:	2b00      	cmp	r3, #0
 8004416:	d022      	beq.n	800445e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	699a      	ldr	r2, [r3, #24]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	18d1      	adds	r1, r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	683a      	ldr	r2, [r7, #0]
 8004424:	6978      	ldr	r0, [r7, #20]
 8004426:	f000 f8d1 	bl	80045cc <prvInsertTimerInActiveList>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d01f      	beq.n	8004470 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004430:	2300      	movs	r3, #0
 8004432:	9300      	str	r3, [sp, #0]
 8004434:	2300      	movs	r3, #0
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	2100      	movs	r1, #0
 800443a:	6978      	ldr	r0, [r7, #20]
 800443c:	f7ff ff88 	bl	8004350 <xTimerGenericCommand>
 8004440:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d113      	bne.n	8004470 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444c:	f383 8811 	msr	BASEPRI, r3
 8004450:	f3bf 8f6f 	isb	sy
 8004454:	f3bf 8f4f 	dsb	sy
 8004458:	60fb      	str	r3, [r7, #12]
}
 800445a:	bf00      	nop
 800445c:	e7fe      	b.n	800445c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004464:	f023 0301 	bic.w	r3, r3, #1
 8004468:	b2da      	uxtb	r2, r3
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	6978      	ldr	r0, [r7, #20]
 8004476:	4798      	blx	r3
}
 8004478:	bf00      	nop
 800447a:	3718      	adds	r7, #24
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	20000fa0 	.word	0x20000fa0

08004484 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800448c:	f107 0308 	add.w	r3, r7, #8
 8004490:	4618      	mov	r0, r3
 8004492:	f000 f857 	bl	8004544 <prvGetNextExpireTime>
 8004496:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	4619      	mov	r1, r3
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f000 f803 	bl	80044a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80044a2:	f000 f8d5 	bl	8004650 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80044a6:	e7f1      	b.n	800448c <prvTimerTask+0x8>

080044a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80044b2:	f7ff f955 	bl	8003760 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80044b6:	f107 0308 	add.w	r3, r7, #8
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 f866 	bl	800458c <prvSampleTimeNow>
 80044c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d130      	bne.n	800452a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10a      	bne.n	80044e4 <prvProcessTimerOrBlockTask+0x3c>
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d806      	bhi.n	80044e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80044d6:	f7ff f951 	bl	800377c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80044da:	68f9      	ldr	r1, [r7, #12]
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f7ff ff85 	bl	80043ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80044e2:	e024      	b.n	800452e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d008      	beq.n	80044fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80044ea:	4b13      	ldr	r3, [pc, #76]	; (8004538 <prvProcessTimerOrBlockTask+0x90>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d101      	bne.n	80044f8 <prvProcessTimerOrBlockTask+0x50>
 80044f4:	2301      	movs	r3, #1
 80044f6:	e000      	b.n	80044fa <prvProcessTimerOrBlockTask+0x52>
 80044f8:	2300      	movs	r3, #0
 80044fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80044fc:	4b0f      	ldr	r3, [pc, #60]	; (800453c <prvProcessTimerOrBlockTask+0x94>)
 80044fe:	6818      	ldr	r0, [r3, #0]
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	4619      	mov	r1, r3
 800450a:	f7fe feb9 	bl	8003280 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800450e:	f7ff f935 	bl	800377c <xTaskResumeAll>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10a      	bne.n	800452e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004518:	4b09      	ldr	r3, [pc, #36]	; (8004540 <prvProcessTimerOrBlockTask+0x98>)
 800451a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800451e:	601a      	str	r2, [r3, #0]
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	f3bf 8f6f 	isb	sy
}
 8004528:	e001      	b.n	800452e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800452a:	f7ff f927 	bl	800377c <xTaskResumeAll>
}
 800452e:	bf00      	nop
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	20000fa4 	.word	0x20000fa4
 800453c:	20000fa8 	.word	0x20000fa8
 8004540:	e000ed04 	.word	0xe000ed04

08004544 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800454c:	4b0e      	ldr	r3, [pc, #56]	; (8004588 <prvGetNextExpireTime+0x44>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <prvGetNextExpireTime+0x16>
 8004556:	2201      	movs	r2, #1
 8004558:	e000      	b.n	800455c <prvGetNextExpireTime+0x18>
 800455a:	2200      	movs	r2, #0
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d105      	bne.n	8004574 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004568:	4b07      	ldr	r3, [pc, #28]	; (8004588 <prvGetNextExpireTime+0x44>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	60fb      	str	r3, [r7, #12]
 8004572:	e001      	b.n	8004578 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004574:	2300      	movs	r3, #0
 8004576:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004578:	68fb      	ldr	r3, [r7, #12]
}
 800457a:	4618      	mov	r0, r3
 800457c:	3714      	adds	r7, #20
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	20000fa0 	.word	0x20000fa0

0800458c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004594:	f7ff f990 	bl	80038b8 <xTaskGetTickCount>
 8004598:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800459a:	4b0b      	ldr	r3, [pc, #44]	; (80045c8 <prvSampleTimeNow+0x3c>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d205      	bcs.n	80045b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80045a4:	f000 f936 	bl	8004814 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	601a      	str	r2, [r3, #0]
 80045ae:	e002      	b.n	80045b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80045b6:	4a04      	ldr	r2, [pc, #16]	; (80045c8 <prvSampleTimeNow+0x3c>)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80045bc:	68fb      	ldr	r3, [r7, #12]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	20000fb0 	.word	0x20000fb0

080045cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
 80045d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80045da:	2300      	movs	r3, #0
 80045dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d812      	bhi.n	8004618 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	1ad2      	subs	r2, r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d302      	bcc.n	8004606 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004600:	2301      	movs	r3, #1
 8004602:	617b      	str	r3, [r7, #20]
 8004604:	e01b      	b.n	800463e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004606:	4b10      	ldr	r3, [pc, #64]	; (8004648 <prvInsertTimerInActiveList+0x7c>)
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	3304      	adds	r3, #4
 800460e:	4619      	mov	r1, r3
 8004610:	4610      	mov	r0, r2
 8004612:	f7fe f91a 	bl	800284a <vListInsert>
 8004616:	e012      	b.n	800463e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	429a      	cmp	r2, r3
 800461e:	d206      	bcs.n	800462e <prvInsertTimerInActiveList+0x62>
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	429a      	cmp	r2, r3
 8004626:	d302      	bcc.n	800462e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004628:	2301      	movs	r3, #1
 800462a:	617b      	str	r3, [r7, #20]
 800462c:	e007      	b.n	800463e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800462e:	4b07      	ldr	r3, [pc, #28]	; (800464c <prvInsertTimerInActiveList+0x80>)
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	3304      	adds	r3, #4
 8004636:	4619      	mov	r1, r3
 8004638:	4610      	mov	r0, r2
 800463a:	f7fe f906 	bl	800284a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800463e:	697b      	ldr	r3, [r7, #20]
}
 8004640:	4618      	mov	r0, r3
 8004642:	3718      	adds	r7, #24
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	20000fa4 	.word	0x20000fa4
 800464c:	20000fa0 	.word	0x20000fa0

08004650 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b08e      	sub	sp, #56	; 0x38
 8004654:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004656:	e0ca      	b.n	80047ee <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	da18      	bge.n	8004690 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800465e:	1d3b      	adds	r3, r7, #4
 8004660:	3304      	adds	r3, #4
 8004662:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10a      	bne.n	8004680 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800466a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466e:	f383 8811 	msr	BASEPRI, r3
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	61fb      	str	r3, [r7, #28]
}
 800467c:	bf00      	nop
 800467e:	e7fe      	b.n	800467e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004686:	6850      	ldr	r0, [r2, #4]
 8004688:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800468a:	6892      	ldr	r2, [r2, #8]
 800468c:	4611      	mov	r1, r2
 800468e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	f2c0 80aa 	blt.w	80047ec <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800469c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d004      	beq.n	80046ae <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a6:	3304      	adds	r3, #4
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7fe f907 	bl	80028bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80046ae:	463b      	mov	r3, r7
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7ff ff6b 	bl	800458c <prvSampleTimeNow>
 80046b6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b09      	cmp	r3, #9
 80046bc:	f200 8097 	bhi.w	80047ee <prvProcessReceivedCommands+0x19e>
 80046c0:	a201      	add	r2, pc, #4	; (adr r2, 80046c8 <prvProcessReceivedCommands+0x78>)
 80046c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c6:	bf00      	nop
 80046c8:	080046f1 	.word	0x080046f1
 80046cc:	080046f1 	.word	0x080046f1
 80046d0:	080046f1 	.word	0x080046f1
 80046d4:	08004765 	.word	0x08004765
 80046d8:	08004779 	.word	0x08004779
 80046dc:	080047c3 	.word	0x080047c3
 80046e0:	080046f1 	.word	0x080046f1
 80046e4:	080046f1 	.word	0x080046f1
 80046e8:	08004765 	.word	0x08004765
 80046ec:	08004779 	.word	0x08004779
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80046f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046f6:	f043 0301 	orr.w	r3, r3, #1
 80046fa:	b2da      	uxtb	r2, r3
 80046fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	18d1      	adds	r1, r2, r3
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800470e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004710:	f7ff ff5c 	bl	80045cc <prvInsertTimerInActiveList>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d069      	beq.n	80047ee <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800471a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004720:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004724:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	2b00      	cmp	r3, #0
 800472e:	d05e      	beq.n	80047ee <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	441a      	add	r2, r3
 8004738:	2300      	movs	r3, #0
 800473a:	9300      	str	r3, [sp, #0]
 800473c:	2300      	movs	r3, #0
 800473e:	2100      	movs	r1, #0
 8004740:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004742:	f7ff fe05 	bl	8004350 <xTimerGenericCommand>
 8004746:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004748:	6a3b      	ldr	r3, [r7, #32]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d14f      	bne.n	80047ee <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800474e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004752:	f383 8811 	msr	BASEPRI, r3
 8004756:	f3bf 8f6f 	isb	sy
 800475a:	f3bf 8f4f 	dsb	sy
 800475e:	61bb      	str	r3, [r7, #24]
}
 8004760:	bf00      	nop
 8004762:	e7fe      	b.n	8004762 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004766:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800476a:	f023 0301 	bic.w	r3, r3, #1
 800476e:	b2da      	uxtb	r2, r3
 8004770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004772:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004776:	e03a      	b.n	80047ee <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800477e:	f043 0301 	orr.w	r3, r3, #1
 8004782:	b2da      	uxtb	r2, r3
 8004784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004786:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10a      	bne.n	80047ae <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479c:	f383 8811 	msr	BASEPRI, r3
 80047a0:	f3bf 8f6f 	isb	sy
 80047a4:	f3bf 8f4f 	dsb	sy
 80047a8:	617b      	str	r3, [r7, #20]
}
 80047aa:	bf00      	nop
 80047ac:	e7fe      	b.n	80047ac <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80047ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b0:	699a      	ldr	r2, [r3, #24]
 80047b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b4:	18d1      	adds	r1, r2, r3
 80047b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047bc:	f7ff ff06 	bl	80045cc <prvInsertTimerInActiveList>
					break;
 80047c0:	e015      	b.n	80047ee <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80047c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d103      	bne.n	80047d8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80047d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047d2:	f000 fbdd 	bl	8004f90 <vPortFree>
 80047d6:	e00a      	b.n	80047ee <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047de:	f023 0301 	bic.w	r3, r3, #1
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80047ea:	e000      	b.n	80047ee <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80047ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80047ee:	4b08      	ldr	r3, [pc, #32]	; (8004810 <prvProcessReceivedCommands+0x1c0>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	1d39      	adds	r1, r7, #4
 80047f4:	2200      	movs	r2, #0
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fe fb28 	bl	8002e4c <xQueueReceive>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f47f af2a 	bne.w	8004658 <prvProcessReceivedCommands+0x8>
	}
}
 8004804:	bf00      	nop
 8004806:	bf00      	nop
 8004808:	3730      	adds	r7, #48	; 0x30
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	20000fa8 	.word	0x20000fa8

08004814 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b088      	sub	sp, #32
 8004818:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800481a:	e048      	b.n	80048ae <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800481c:	4b2d      	ldr	r3, [pc, #180]	; (80048d4 <prvSwitchTimerLists+0xc0>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004826:	4b2b      	ldr	r3, [pc, #172]	; (80048d4 <prvSwitchTimerLists+0xc0>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	3304      	adds	r3, #4
 8004834:	4618      	mov	r0, r3
 8004836:	f7fe f841 	bl	80028bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004848:	f003 0304 	and.w	r3, r3, #4
 800484c:	2b00      	cmp	r3, #0
 800484e:	d02e      	beq.n	80048ae <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	4413      	add	r3, r2
 8004858:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	429a      	cmp	r2, r3
 8004860:	d90e      	bls.n	8004880 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800486e:	4b19      	ldr	r3, [pc, #100]	; (80048d4 <prvSwitchTimerLists+0xc0>)
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	3304      	adds	r3, #4
 8004876:	4619      	mov	r1, r3
 8004878:	4610      	mov	r0, r2
 800487a:	f7fd ffe6 	bl	800284a <vListInsert>
 800487e:	e016      	b.n	80048ae <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004880:	2300      	movs	r3, #0
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	2300      	movs	r3, #0
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	2100      	movs	r1, #0
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f7ff fd60 	bl	8004350 <xTimerGenericCommand>
 8004890:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10a      	bne.n	80048ae <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489c:	f383 8811 	msr	BASEPRI, r3
 80048a0:	f3bf 8f6f 	isb	sy
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	603b      	str	r3, [r7, #0]
}
 80048aa:	bf00      	nop
 80048ac:	e7fe      	b.n	80048ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80048ae:	4b09      	ldr	r3, [pc, #36]	; (80048d4 <prvSwitchTimerLists+0xc0>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1b1      	bne.n	800481c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80048b8:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <prvSwitchTimerLists+0xc0>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80048be:	4b06      	ldr	r3, [pc, #24]	; (80048d8 <prvSwitchTimerLists+0xc4>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a04      	ldr	r2, [pc, #16]	; (80048d4 <prvSwitchTimerLists+0xc0>)
 80048c4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80048c6:	4a04      	ldr	r2, [pc, #16]	; (80048d8 <prvSwitchTimerLists+0xc4>)
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	6013      	str	r3, [r2, #0]
}
 80048cc:	bf00      	nop
 80048ce:	3718      	adds	r7, #24
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	20000fa0 	.word	0x20000fa0
 80048d8:	20000fa4 	.word	0x20000fa4

080048dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80048e2:	f000 f967 	bl	8004bb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80048e6:	4b15      	ldr	r3, [pc, #84]	; (800493c <prvCheckForValidListAndQueue+0x60>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d120      	bne.n	8004930 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80048ee:	4814      	ldr	r0, [pc, #80]	; (8004940 <prvCheckForValidListAndQueue+0x64>)
 80048f0:	f7fd ff5a 	bl	80027a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80048f4:	4813      	ldr	r0, [pc, #76]	; (8004944 <prvCheckForValidListAndQueue+0x68>)
 80048f6:	f7fd ff57 	bl	80027a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80048fa:	4b13      	ldr	r3, [pc, #76]	; (8004948 <prvCheckForValidListAndQueue+0x6c>)
 80048fc:	4a10      	ldr	r2, [pc, #64]	; (8004940 <prvCheckForValidListAndQueue+0x64>)
 80048fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004900:	4b12      	ldr	r3, [pc, #72]	; (800494c <prvCheckForValidListAndQueue+0x70>)
 8004902:	4a10      	ldr	r2, [pc, #64]	; (8004944 <prvCheckForValidListAndQueue+0x68>)
 8004904:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004906:	2300      	movs	r3, #0
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	4b11      	ldr	r3, [pc, #68]	; (8004950 <prvCheckForValidListAndQueue+0x74>)
 800490c:	4a11      	ldr	r2, [pc, #68]	; (8004954 <prvCheckForValidListAndQueue+0x78>)
 800490e:	2110      	movs	r1, #16
 8004910:	200a      	movs	r0, #10
 8004912:	f7fe f865 	bl	80029e0 <xQueueGenericCreateStatic>
 8004916:	4603      	mov	r3, r0
 8004918:	4a08      	ldr	r2, [pc, #32]	; (800493c <prvCheckForValidListAndQueue+0x60>)
 800491a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800491c:	4b07      	ldr	r3, [pc, #28]	; (800493c <prvCheckForValidListAndQueue+0x60>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d005      	beq.n	8004930 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004924:	4b05      	ldr	r3, [pc, #20]	; (800493c <prvCheckForValidListAndQueue+0x60>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	490b      	ldr	r1, [pc, #44]	; (8004958 <prvCheckForValidListAndQueue+0x7c>)
 800492a:	4618      	mov	r0, r3
 800492c:	f7fe fc7e 	bl	800322c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004930:	f000 f970 	bl	8004c14 <vPortExitCritical>
}
 8004934:	bf00      	nop
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	20000fa8 	.word	0x20000fa8
 8004940:	20000f78 	.word	0x20000f78
 8004944:	20000f8c 	.word	0x20000f8c
 8004948:	20000fa0 	.word	0x20000fa0
 800494c:	20000fa4 	.word	0x20000fa4
 8004950:	20001054 	.word	0x20001054
 8004954:	20000fb4 	.word	0x20000fb4
 8004958:	0800b768 	.word	0x0800b768

0800495c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	3b04      	subs	r3, #4
 800496c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004974:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	3b04      	subs	r3, #4
 800497a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	f023 0201 	bic.w	r2, r3, #1
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	3b04      	subs	r3, #4
 800498a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800498c:	4a0c      	ldr	r2, [pc, #48]	; (80049c0 <pxPortInitialiseStack+0x64>)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	3b14      	subs	r3, #20
 8004996:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	3b04      	subs	r3, #4
 80049a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f06f 0202 	mvn.w	r2, #2
 80049aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	3b20      	subs	r3, #32
 80049b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80049b2:	68fb      	ldr	r3, [r7, #12]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3714      	adds	r7, #20
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr
 80049c0:	080049c5 	.word	0x080049c5

080049c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80049ca:	2300      	movs	r3, #0
 80049cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80049ce:	4b12      	ldr	r3, [pc, #72]	; (8004a18 <prvTaskExitError+0x54>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049d6:	d00a      	beq.n	80049ee <prvTaskExitError+0x2a>
	__asm volatile
 80049d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049dc:	f383 8811 	msr	BASEPRI, r3
 80049e0:	f3bf 8f6f 	isb	sy
 80049e4:	f3bf 8f4f 	dsb	sy
 80049e8:	60fb      	str	r3, [r7, #12]
}
 80049ea:	bf00      	nop
 80049ec:	e7fe      	b.n	80049ec <prvTaskExitError+0x28>
	__asm volatile
 80049ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f2:	f383 8811 	msr	BASEPRI, r3
 80049f6:	f3bf 8f6f 	isb	sy
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	60bb      	str	r3, [r7, #8]
}
 8004a00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a02:	bf00      	nop
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d0fc      	beq.n	8004a04 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004a0a:	bf00      	nop
 8004a0c:	bf00      	nop
 8004a0e:	3714      	adds	r7, #20
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr
 8004a18:	20000008 	.word	0x20000008
 8004a1c:	00000000 	.word	0x00000000

08004a20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a20:	4b07      	ldr	r3, [pc, #28]	; (8004a40 <pxCurrentTCBConst2>)
 8004a22:	6819      	ldr	r1, [r3, #0]
 8004a24:	6808      	ldr	r0, [r1, #0]
 8004a26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a2a:	f380 8809 	msr	PSP, r0
 8004a2e:	f3bf 8f6f 	isb	sy
 8004a32:	f04f 0000 	mov.w	r0, #0
 8004a36:	f380 8811 	msr	BASEPRI, r0
 8004a3a:	4770      	bx	lr
 8004a3c:	f3af 8000 	nop.w

08004a40 <pxCurrentTCBConst2>:
 8004a40:	20000a78 	.word	0x20000a78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004a44:	bf00      	nop
 8004a46:	bf00      	nop

08004a48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004a48:	4808      	ldr	r0, [pc, #32]	; (8004a6c <prvPortStartFirstTask+0x24>)
 8004a4a:	6800      	ldr	r0, [r0, #0]
 8004a4c:	6800      	ldr	r0, [r0, #0]
 8004a4e:	f380 8808 	msr	MSP, r0
 8004a52:	f04f 0000 	mov.w	r0, #0
 8004a56:	f380 8814 	msr	CONTROL, r0
 8004a5a:	b662      	cpsie	i
 8004a5c:	b661      	cpsie	f
 8004a5e:	f3bf 8f4f 	dsb	sy
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	df00      	svc	0
 8004a68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004a6a:	bf00      	nop
 8004a6c:	e000ed08 	.word	0xe000ed08

08004a70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004a76:	4b46      	ldr	r3, [pc, #280]	; (8004b90 <xPortStartScheduler+0x120>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a46      	ldr	r2, [pc, #280]	; (8004b94 <xPortStartScheduler+0x124>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d10a      	bne.n	8004a96 <xPortStartScheduler+0x26>
	__asm volatile
 8004a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a84:	f383 8811 	msr	BASEPRI, r3
 8004a88:	f3bf 8f6f 	isb	sy
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	613b      	str	r3, [r7, #16]
}
 8004a92:	bf00      	nop
 8004a94:	e7fe      	b.n	8004a94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004a96:	4b3e      	ldr	r3, [pc, #248]	; (8004b90 <xPortStartScheduler+0x120>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a3f      	ldr	r2, [pc, #252]	; (8004b98 <xPortStartScheduler+0x128>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d10a      	bne.n	8004ab6 <xPortStartScheduler+0x46>
	__asm volatile
 8004aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa4:	f383 8811 	msr	BASEPRI, r3
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	60fb      	str	r3, [r7, #12]
}
 8004ab2:	bf00      	nop
 8004ab4:	e7fe      	b.n	8004ab4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004ab6:	4b39      	ldr	r3, [pc, #228]	; (8004b9c <xPortStartScheduler+0x12c>)
 8004ab8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	22ff      	movs	r2, #255	; 0xff
 8004ac6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ad0:	78fb      	ldrb	r3, [r7, #3]
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ad8:	b2da      	uxtb	r2, r3
 8004ada:	4b31      	ldr	r3, [pc, #196]	; (8004ba0 <xPortStartScheduler+0x130>)
 8004adc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ade:	4b31      	ldr	r3, [pc, #196]	; (8004ba4 <xPortStartScheduler+0x134>)
 8004ae0:	2207      	movs	r2, #7
 8004ae2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ae4:	e009      	b.n	8004afa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004ae6:	4b2f      	ldr	r3, [pc, #188]	; (8004ba4 <xPortStartScheduler+0x134>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	3b01      	subs	r3, #1
 8004aec:	4a2d      	ldr	r2, [pc, #180]	; (8004ba4 <xPortStartScheduler+0x134>)
 8004aee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004af0:	78fb      	ldrb	r3, [r7, #3]
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004afa:	78fb      	ldrb	r3, [r7, #3]
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b02:	2b80      	cmp	r3, #128	; 0x80
 8004b04:	d0ef      	beq.n	8004ae6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b06:	4b27      	ldr	r3, [pc, #156]	; (8004ba4 <xPortStartScheduler+0x134>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f1c3 0307 	rsb	r3, r3, #7
 8004b0e:	2b04      	cmp	r3, #4
 8004b10:	d00a      	beq.n	8004b28 <xPortStartScheduler+0xb8>
	__asm volatile
 8004b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b16:	f383 8811 	msr	BASEPRI, r3
 8004b1a:	f3bf 8f6f 	isb	sy
 8004b1e:	f3bf 8f4f 	dsb	sy
 8004b22:	60bb      	str	r3, [r7, #8]
}
 8004b24:	bf00      	nop
 8004b26:	e7fe      	b.n	8004b26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b28:	4b1e      	ldr	r3, [pc, #120]	; (8004ba4 <xPortStartScheduler+0x134>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	021b      	lsls	r3, r3, #8
 8004b2e:	4a1d      	ldr	r2, [pc, #116]	; (8004ba4 <xPortStartScheduler+0x134>)
 8004b30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b32:	4b1c      	ldr	r3, [pc, #112]	; (8004ba4 <xPortStartScheduler+0x134>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b3a:	4a1a      	ldr	r2, [pc, #104]	; (8004ba4 <xPortStartScheduler+0x134>)
 8004b3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	b2da      	uxtb	r2, r3
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004b46:	4b18      	ldr	r3, [pc, #96]	; (8004ba8 <xPortStartScheduler+0x138>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a17      	ldr	r2, [pc, #92]	; (8004ba8 <xPortStartScheduler+0x138>)
 8004b4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004b52:	4b15      	ldr	r3, [pc, #84]	; (8004ba8 <xPortStartScheduler+0x138>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a14      	ldr	r2, [pc, #80]	; (8004ba8 <xPortStartScheduler+0x138>)
 8004b58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004b5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004b5e:	f000 f8dd 	bl	8004d1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004b62:	4b12      	ldr	r3, [pc, #72]	; (8004bac <xPortStartScheduler+0x13c>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004b68:	f000 f8fc 	bl	8004d64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004b6c:	4b10      	ldr	r3, [pc, #64]	; (8004bb0 <xPortStartScheduler+0x140>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a0f      	ldr	r2, [pc, #60]	; (8004bb0 <xPortStartScheduler+0x140>)
 8004b72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004b76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004b78:	f7ff ff66 	bl	8004a48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004b7c:	f7fe ff78 	bl	8003a70 <vTaskSwitchContext>
	prvTaskExitError();
 8004b80:	f7ff ff20 	bl	80049c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3718      	adds	r7, #24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	e000ed00 	.word	0xe000ed00
 8004b94:	410fc271 	.word	0x410fc271
 8004b98:	410fc270 	.word	0x410fc270
 8004b9c:	e000e400 	.word	0xe000e400
 8004ba0:	200010a4 	.word	0x200010a4
 8004ba4:	200010a8 	.word	0x200010a8
 8004ba8:	e000ed20 	.word	0xe000ed20
 8004bac:	20000008 	.word	0x20000008
 8004bb0:	e000ef34 	.word	0xe000ef34

08004bb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
	__asm volatile
 8004bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bbe:	f383 8811 	msr	BASEPRI, r3
 8004bc2:	f3bf 8f6f 	isb	sy
 8004bc6:	f3bf 8f4f 	dsb	sy
 8004bca:	607b      	str	r3, [r7, #4]
}
 8004bcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004bce:	4b0f      	ldr	r3, [pc, #60]	; (8004c0c <vPortEnterCritical+0x58>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	4a0d      	ldr	r2, [pc, #52]	; (8004c0c <vPortEnterCritical+0x58>)
 8004bd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004bd8:	4b0c      	ldr	r3, [pc, #48]	; (8004c0c <vPortEnterCritical+0x58>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d10f      	bne.n	8004c00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004be0:	4b0b      	ldr	r3, [pc, #44]	; (8004c10 <vPortEnterCritical+0x5c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00a      	beq.n	8004c00 <vPortEnterCritical+0x4c>
	__asm volatile
 8004bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bee:	f383 8811 	msr	BASEPRI, r3
 8004bf2:	f3bf 8f6f 	isb	sy
 8004bf6:	f3bf 8f4f 	dsb	sy
 8004bfa:	603b      	str	r3, [r7, #0]
}
 8004bfc:	bf00      	nop
 8004bfe:	e7fe      	b.n	8004bfe <vPortEnterCritical+0x4a>
	}
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr
 8004c0c:	20000008 	.word	0x20000008
 8004c10:	e000ed04 	.word	0xe000ed04

08004c14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004c1a:	4b12      	ldr	r3, [pc, #72]	; (8004c64 <vPortExitCritical+0x50>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10a      	bne.n	8004c38 <vPortExitCritical+0x24>
	__asm volatile
 8004c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c26:	f383 8811 	msr	BASEPRI, r3
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	607b      	str	r3, [r7, #4]
}
 8004c34:	bf00      	nop
 8004c36:	e7fe      	b.n	8004c36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004c38:	4b0a      	ldr	r3, [pc, #40]	; (8004c64 <vPortExitCritical+0x50>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	4a09      	ldr	r2, [pc, #36]	; (8004c64 <vPortExitCritical+0x50>)
 8004c40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004c42:	4b08      	ldr	r3, [pc, #32]	; (8004c64 <vPortExitCritical+0x50>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d105      	bne.n	8004c56 <vPortExitCritical+0x42>
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	f383 8811 	msr	BASEPRI, r3
}
 8004c54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004c56:	bf00      	nop
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	20000008 	.word	0x20000008
	...

08004c70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004c70:	f3ef 8009 	mrs	r0, PSP
 8004c74:	f3bf 8f6f 	isb	sy
 8004c78:	4b15      	ldr	r3, [pc, #84]	; (8004cd0 <pxCurrentTCBConst>)
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	f01e 0f10 	tst.w	lr, #16
 8004c80:	bf08      	it	eq
 8004c82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004c86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c8a:	6010      	str	r0, [r2, #0]
 8004c8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004c90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004c94:	f380 8811 	msr	BASEPRI, r0
 8004c98:	f3bf 8f4f 	dsb	sy
 8004c9c:	f3bf 8f6f 	isb	sy
 8004ca0:	f7fe fee6 	bl	8003a70 <vTaskSwitchContext>
 8004ca4:	f04f 0000 	mov.w	r0, #0
 8004ca8:	f380 8811 	msr	BASEPRI, r0
 8004cac:	bc09      	pop	{r0, r3}
 8004cae:	6819      	ldr	r1, [r3, #0]
 8004cb0:	6808      	ldr	r0, [r1, #0]
 8004cb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cb6:	f01e 0f10 	tst.w	lr, #16
 8004cba:	bf08      	it	eq
 8004cbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004cc0:	f380 8809 	msr	PSP, r0
 8004cc4:	f3bf 8f6f 	isb	sy
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	f3af 8000 	nop.w

08004cd0 <pxCurrentTCBConst>:
 8004cd0:	20000a78 	.word	0x20000a78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004cd4:	bf00      	nop
 8004cd6:	bf00      	nop

08004cd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
	__asm volatile
 8004cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce2:	f383 8811 	msr	BASEPRI, r3
 8004ce6:	f3bf 8f6f 	isb	sy
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	607b      	str	r3, [r7, #4]
}
 8004cf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004cf2:	f7fe fe03 	bl	80038fc <xTaskIncrementTick>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004cfc:	4b06      	ldr	r3, [pc, #24]	; (8004d18 <xPortSysTickHandler+0x40>)
 8004cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d02:	601a      	str	r2, [r3, #0]
 8004d04:	2300      	movs	r3, #0
 8004d06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	f383 8811 	msr	BASEPRI, r3
}
 8004d0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004d10:	bf00      	nop
 8004d12:	3708      	adds	r7, #8
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	e000ed04 	.word	0xe000ed04

08004d1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d20:	4b0b      	ldr	r3, [pc, #44]	; (8004d50 <vPortSetupTimerInterrupt+0x34>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d26:	4b0b      	ldr	r3, [pc, #44]	; (8004d54 <vPortSetupTimerInterrupt+0x38>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d2c:	4b0a      	ldr	r3, [pc, #40]	; (8004d58 <vPortSetupTimerInterrupt+0x3c>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a0a      	ldr	r2, [pc, #40]	; (8004d5c <vPortSetupTimerInterrupt+0x40>)
 8004d32:	fba2 2303 	umull	r2, r3, r2, r3
 8004d36:	099b      	lsrs	r3, r3, #6
 8004d38:	4a09      	ldr	r2, [pc, #36]	; (8004d60 <vPortSetupTimerInterrupt+0x44>)
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d3e:	4b04      	ldr	r3, [pc, #16]	; (8004d50 <vPortSetupTimerInterrupt+0x34>)
 8004d40:	2207      	movs	r2, #7
 8004d42:	601a      	str	r2, [r3, #0]
}
 8004d44:	bf00      	nop
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	e000e010 	.word	0xe000e010
 8004d54:	e000e018 	.word	0xe000e018
 8004d58:	20000100 	.word	0x20000100
 8004d5c:	10624dd3 	.word	0x10624dd3
 8004d60:	e000e014 	.word	0xe000e014

08004d64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004d64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004d74 <vPortEnableVFP+0x10>
 8004d68:	6801      	ldr	r1, [r0, #0]
 8004d6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004d6e:	6001      	str	r1, [r0, #0]
 8004d70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004d72:	bf00      	nop
 8004d74:	e000ed88 	.word	0xe000ed88

08004d78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004d7e:	f3ef 8305 	mrs	r3, IPSR
 8004d82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2b0f      	cmp	r3, #15
 8004d88:	d914      	bls.n	8004db4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004d8a:	4a17      	ldr	r2, [pc, #92]	; (8004de8 <vPortValidateInterruptPriority+0x70>)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	4413      	add	r3, r2
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004d94:	4b15      	ldr	r3, [pc, #84]	; (8004dec <vPortValidateInterruptPriority+0x74>)
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	7afa      	ldrb	r2, [r7, #11]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d20a      	bcs.n	8004db4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da2:	f383 8811 	msr	BASEPRI, r3
 8004da6:	f3bf 8f6f 	isb	sy
 8004daa:	f3bf 8f4f 	dsb	sy
 8004dae:	607b      	str	r3, [r7, #4]
}
 8004db0:	bf00      	nop
 8004db2:	e7fe      	b.n	8004db2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004db4:	4b0e      	ldr	r3, [pc, #56]	; (8004df0 <vPortValidateInterruptPriority+0x78>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004dbc:	4b0d      	ldr	r3, [pc, #52]	; (8004df4 <vPortValidateInterruptPriority+0x7c>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d90a      	bls.n	8004dda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc8:	f383 8811 	msr	BASEPRI, r3
 8004dcc:	f3bf 8f6f 	isb	sy
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	603b      	str	r3, [r7, #0]
}
 8004dd6:	bf00      	nop
 8004dd8:	e7fe      	b.n	8004dd8 <vPortValidateInterruptPriority+0x60>
	}
 8004dda:	bf00      	nop
 8004ddc:	3714      	adds	r7, #20
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	e000e3f0 	.word	0xe000e3f0
 8004dec:	200010a4 	.word	0x200010a4
 8004df0:	e000ed0c 	.word	0xe000ed0c
 8004df4:	200010a8 	.word	0x200010a8

08004df8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b08a      	sub	sp, #40	; 0x28
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004e00:	2300      	movs	r3, #0
 8004e02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004e04:	f7fe fcac 	bl	8003760 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004e08:	4b5b      	ldr	r3, [pc, #364]	; (8004f78 <pvPortMalloc+0x180>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004e10:	f000 f920 	bl	8005054 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004e14:	4b59      	ldr	r3, [pc, #356]	; (8004f7c <pvPortMalloc+0x184>)
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f040 8093 	bne.w	8004f48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d01d      	beq.n	8004e64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004e28:	2208      	movs	r2, #8
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f003 0307 	and.w	r3, r3, #7
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d014      	beq.n	8004e64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f023 0307 	bic.w	r3, r3, #7
 8004e40:	3308      	adds	r3, #8
 8004e42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f003 0307 	and.w	r3, r3, #7
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00a      	beq.n	8004e64 <pvPortMalloc+0x6c>
	__asm volatile
 8004e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e52:	f383 8811 	msr	BASEPRI, r3
 8004e56:	f3bf 8f6f 	isb	sy
 8004e5a:	f3bf 8f4f 	dsb	sy
 8004e5e:	617b      	str	r3, [r7, #20]
}
 8004e60:	bf00      	nop
 8004e62:	e7fe      	b.n	8004e62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d06e      	beq.n	8004f48 <pvPortMalloc+0x150>
 8004e6a:	4b45      	ldr	r3, [pc, #276]	; (8004f80 <pvPortMalloc+0x188>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d869      	bhi.n	8004f48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004e74:	4b43      	ldr	r3, [pc, #268]	; (8004f84 <pvPortMalloc+0x18c>)
 8004e76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004e78:	4b42      	ldr	r3, [pc, #264]	; (8004f84 <pvPortMalloc+0x18c>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e7e:	e004      	b.n	8004e8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d903      	bls.n	8004e9c <pvPortMalloc+0xa4>
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1f1      	bne.n	8004e80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004e9c:	4b36      	ldr	r3, [pc, #216]	; (8004f78 <pvPortMalloc+0x180>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d050      	beq.n	8004f48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ea6:	6a3b      	ldr	r3, [r7, #32]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2208      	movs	r2, #8
 8004eac:	4413      	add	r3, r2
 8004eae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	6a3b      	ldr	r3, [r7, #32]
 8004eb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	1ad2      	subs	r2, r2, r3
 8004ec0:	2308      	movs	r3, #8
 8004ec2:	005b      	lsls	r3, r3, #1
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d91f      	bls.n	8004f08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4413      	add	r3, r2
 8004ece:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	f003 0307 	and.w	r3, r3, #7
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00a      	beq.n	8004ef0 <pvPortMalloc+0xf8>
	__asm volatile
 8004eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ede:	f383 8811 	msr	BASEPRI, r3
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	613b      	str	r3, [r7, #16]
}
 8004eec:	bf00      	nop
 8004eee:	e7fe      	b.n	8004eee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef2:	685a      	ldr	r2, [r3, #4]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	1ad2      	subs	r2, r2, r3
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f02:	69b8      	ldr	r0, [r7, #24]
 8004f04:	f000 f908 	bl	8005118 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f08:	4b1d      	ldr	r3, [pc, #116]	; (8004f80 <pvPortMalloc+0x188>)
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	4a1b      	ldr	r2, [pc, #108]	; (8004f80 <pvPortMalloc+0x188>)
 8004f14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f16:	4b1a      	ldr	r3, [pc, #104]	; (8004f80 <pvPortMalloc+0x188>)
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	4b1b      	ldr	r3, [pc, #108]	; (8004f88 <pvPortMalloc+0x190>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d203      	bcs.n	8004f2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f22:	4b17      	ldr	r3, [pc, #92]	; (8004f80 <pvPortMalloc+0x188>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a18      	ldr	r2, [pc, #96]	; (8004f88 <pvPortMalloc+0x190>)
 8004f28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	685a      	ldr	r2, [r3, #4]
 8004f2e:	4b13      	ldr	r3, [pc, #76]	; (8004f7c <pvPortMalloc+0x184>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	431a      	orrs	r2, r3
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004f3e:	4b13      	ldr	r3, [pc, #76]	; (8004f8c <pvPortMalloc+0x194>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	3301      	adds	r3, #1
 8004f44:	4a11      	ldr	r2, [pc, #68]	; (8004f8c <pvPortMalloc+0x194>)
 8004f46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004f48:	f7fe fc18 	bl	800377c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	f003 0307 	and.w	r3, r3, #7
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00a      	beq.n	8004f6c <pvPortMalloc+0x174>
	__asm volatile
 8004f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5a:	f383 8811 	msr	BASEPRI, r3
 8004f5e:	f3bf 8f6f 	isb	sy
 8004f62:	f3bf 8f4f 	dsb	sy
 8004f66:	60fb      	str	r3, [r7, #12]
}
 8004f68:	bf00      	nop
 8004f6a:	e7fe      	b.n	8004f6a <pvPortMalloc+0x172>
	return pvReturn;
 8004f6c:	69fb      	ldr	r3, [r7, #28]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3728      	adds	r7, #40	; 0x28
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	20001c6c 	.word	0x20001c6c
 8004f7c:	20001c80 	.word	0x20001c80
 8004f80:	20001c70 	.word	0x20001c70
 8004f84:	20001c64 	.word	0x20001c64
 8004f88:	20001c74 	.word	0x20001c74
 8004f8c:	20001c78 	.word	0x20001c78

08004f90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d04d      	beq.n	800503e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004fa2:	2308      	movs	r3, #8
 8004fa4:	425b      	negs	r3, r3
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	4413      	add	r3, r2
 8004faa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	4b24      	ldr	r3, [pc, #144]	; (8005048 <vPortFree+0xb8>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4013      	ands	r3, r2
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10a      	bne.n	8004fd4 <vPortFree+0x44>
	__asm volatile
 8004fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc2:	f383 8811 	msr	BASEPRI, r3
 8004fc6:	f3bf 8f6f 	isb	sy
 8004fca:	f3bf 8f4f 	dsb	sy
 8004fce:	60fb      	str	r3, [r7, #12]
}
 8004fd0:	bf00      	nop
 8004fd2:	e7fe      	b.n	8004fd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00a      	beq.n	8004ff2 <vPortFree+0x62>
	__asm volatile
 8004fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe0:	f383 8811 	msr	BASEPRI, r3
 8004fe4:	f3bf 8f6f 	isb	sy
 8004fe8:	f3bf 8f4f 	dsb	sy
 8004fec:	60bb      	str	r3, [r7, #8]
}
 8004fee:	bf00      	nop
 8004ff0:	e7fe      	b.n	8004ff0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	4b14      	ldr	r3, [pc, #80]	; (8005048 <vPortFree+0xb8>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d01e      	beq.n	800503e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d11a      	bne.n	800503e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	4b0e      	ldr	r3, [pc, #56]	; (8005048 <vPortFree+0xb8>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	43db      	mvns	r3, r3
 8005012:	401a      	ands	r2, r3
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005018:	f7fe fba2 	bl	8003760 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	685a      	ldr	r2, [r3, #4]
 8005020:	4b0a      	ldr	r3, [pc, #40]	; (800504c <vPortFree+0xbc>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4413      	add	r3, r2
 8005026:	4a09      	ldr	r2, [pc, #36]	; (800504c <vPortFree+0xbc>)
 8005028:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800502a:	6938      	ldr	r0, [r7, #16]
 800502c:	f000 f874 	bl	8005118 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005030:	4b07      	ldr	r3, [pc, #28]	; (8005050 <vPortFree+0xc0>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	3301      	adds	r3, #1
 8005036:	4a06      	ldr	r2, [pc, #24]	; (8005050 <vPortFree+0xc0>)
 8005038:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800503a:	f7fe fb9f 	bl	800377c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800503e:	bf00      	nop
 8005040:	3718      	adds	r7, #24
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	20001c80 	.word	0x20001c80
 800504c:	20001c70 	.word	0x20001c70
 8005050:	20001c7c 	.word	0x20001c7c

08005054 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800505a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800505e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005060:	4b27      	ldr	r3, [pc, #156]	; (8005100 <prvHeapInit+0xac>)
 8005062:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f003 0307 	and.w	r3, r3, #7
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00c      	beq.n	8005088 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	3307      	adds	r3, #7
 8005072:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f023 0307 	bic.w	r3, r3, #7
 800507a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	4a1f      	ldr	r2, [pc, #124]	; (8005100 <prvHeapInit+0xac>)
 8005084:	4413      	add	r3, r2
 8005086:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800508c:	4a1d      	ldr	r2, [pc, #116]	; (8005104 <prvHeapInit+0xb0>)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005092:	4b1c      	ldr	r3, [pc, #112]	; (8005104 <prvHeapInit+0xb0>)
 8005094:	2200      	movs	r2, #0
 8005096:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68ba      	ldr	r2, [r7, #8]
 800509c:	4413      	add	r3, r2
 800509e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80050a0:	2208      	movs	r2, #8
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	1a9b      	subs	r3, r3, r2
 80050a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f023 0307 	bic.w	r3, r3, #7
 80050ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4a15      	ldr	r2, [pc, #84]	; (8005108 <prvHeapInit+0xb4>)
 80050b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80050b6:	4b14      	ldr	r3, [pc, #80]	; (8005108 <prvHeapInit+0xb4>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2200      	movs	r2, #0
 80050bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80050be:	4b12      	ldr	r3, [pc, #72]	; (8005108 <prvHeapInit+0xb4>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2200      	movs	r2, #0
 80050c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	1ad2      	subs	r2, r2, r3
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80050d4:	4b0c      	ldr	r3, [pc, #48]	; (8005108 <prvHeapInit+0xb4>)
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	4a0a      	ldr	r2, [pc, #40]	; (800510c <prvHeapInit+0xb8>)
 80050e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	4a09      	ldr	r2, [pc, #36]	; (8005110 <prvHeapInit+0xbc>)
 80050ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80050ec:	4b09      	ldr	r3, [pc, #36]	; (8005114 <prvHeapInit+0xc0>)
 80050ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80050f2:	601a      	str	r2, [r3, #0]
}
 80050f4:	bf00      	nop
 80050f6:	3714      	adds	r7, #20
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr
 8005100:	200010ac 	.word	0x200010ac
 8005104:	20001c64 	.word	0x20001c64
 8005108:	20001c6c 	.word	0x20001c6c
 800510c:	20001c74 	.word	0x20001c74
 8005110:	20001c70 	.word	0x20001c70
 8005114:	20001c80 	.word	0x20001c80

08005118 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005120:	4b28      	ldr	r3, [pc, #160]	; (80051c4 <prvInsertBlockIntoFreeList+0xac>)
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	e002      	b.n	800512c <prvInsertBlockIntoFreeList+0x14>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	60fb      	str	r3, [r7, #12]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	429a      	cmp	r2, r3
 8005134:	d8f7      	bhi.n	8005126 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	4413      	add	r3, r2
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	429a      	cmp	r2, r3
 8005146:	d108      	bne.n	800515a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	441a      	add	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	68ba      	ldr	r2, [r7, #8]
 8005164:	441a      	add	r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	429a      	cmp	r2, r3
 800516c:	d118      	bne.n	80051a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	4b15      	ldr	r3, [pc, #84]	; (80051c8 <prvInsertBlockIntoFreeList+0xb0>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	429a      	cmp	r2, r3
 8005178:	d00d      	beq.n	8005196 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685a      	ldr	r2, [r3, #4]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	441a      	add	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	601a      	str	r2, [r3, #0]
 8005194:	e008      	b.n	80051a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005196:	4b0c      	ldr	r3, [pc, #48]	; (80051c8 <prvInsertBlockIntoFreeList+0xb0>)
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	601a      	str	r2, [r3, #0]
 800519e:	e003      	b.n	80051a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d002      	beq.n	80051b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051b6:	bf00      	nop
 80051b8:	3714      	adds	r7, #20
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	20001c64 	.word	0x20001c64
 80051c8:	20001c6c 	.word	0x20001c6c

080051cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80051d2:	2300      	movs	r3, #0
 80051d4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set In terrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80051d6:	2003      	movs	r0, #3
 80051d8:	f000 f994 	bl	8005504 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80051dc:	2000      	movs	r0, #0
 80051de:	f000 f80d 	bl	80051fc <HAL_InitTick>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d002      	beq.n	80051ee <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	71fb      	strb	r3, [r7, #7]
 80051ec:	e001      	b.n	80051f2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80051ee:	f004 fd29 	bl	8009c44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80051f2:	79fb      	ldrb	r3, [r7, #7]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3708      	adds	r7, #8
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005204:	2300      	movs	r3, #0
 8005206:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005208:	4b17      	ldr	r3, [pc, #92]	; (8005268 <HAL_InitTick+0x6c>)
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d023      	beq.n	8005258 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005210:	4b16      	ldr	r3, [pc, #88]	; (800526c <HAL_InitTick+0x70>)
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	4b14      	ldr	r3, [pc, #80]	; (8005268 <HAL_InitTick+0x6c>)
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	4619      	mov	r1, r3
 800521a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800521e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005222:	fbb2 f3f3 	udiv	r3, r2, r3
 8005226:	4618      	mov	r0, r3
 8005228:	f000 f9af 	bl	800558a <HAL_SYSTICK_Config>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10f      	bne.n	8005252 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b0f      	cmp	r3, #15
 8005236:	d809      	bhi.n	800524c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005238:	2200      	movs	r2, #0
 800523a:	6879      	ldr	r1, [r7, #4]
 800523c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005240:	f000 f96b 	bl	800551a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005244:	4a0a      	ldr	r2, [pc, #40]	; (8005270 <HAL_InitTick+0x74>)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6013      	str	r3, [r2, #0]
 800524a:	e007      	b.n	800525c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	73fb      	strb	r3, [r7, #15]
 8005250:	e004      	b.n	800525c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	73fb      	strb	r3, [r7, #15]
 8005256:	e001      	b.n	800525c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800525c:	7bfb      	ldrb	r3, [r7, #15]
}
 800525e:	4618      	mov	r0, r3
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	20000010 	.word	0x20000010
 800526c:	20000100 	.word	0x20000100
 8005270:	2000000c 	.word	0x2000000c

08005274 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005274:	b480      	push	{r7}
 8005276:	af00      	add	r7, sp, #0
    //return xTaskGetTickCount();
    return uwTick;
 8005278:	4b03      	ldr	r3, [pc, #12]	; (8005288 <HAL_GetTick+0x14>)
 800527a:	681b      	ldr	r3, [r3, #0]
}
 800527c:	4618      	mov	r0, r3
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	20001c84 	.word	0x20001c84

0800528c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005294:	f7ff ffee 	bl	8005274 <HAL_GetTick>
 8005298:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052a4:	d005      	beq.n	80052b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80052a6:	4b0a      	ldr	r3, [pc, #40]	; (80052d0 <HAL_Delay+0x44>)
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	461a      	mov	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4413      	add	r3, r2
 80052b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80052b2:	bf00      	nop
 80052b4:	f7ff ffde 	bl	8005274 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d8f7      	bhi.n	80052b4 <HAL_Delay+0x28>
  {
  }
}
 80052c4:	bf00      	nop
 80052c6:	bf00      	nop
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	20000010 	.word	0x20000010

080052d4 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80052d4:	b480      	push	{r7}
 80052d6:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 80052d8:	4b03      	ldr	r3, [pc, #12]	; (80052e8 <HAL_GetUIDw0+0x14>)
 80052da:	681b      	ldr	r3, [r3, #0]
}
 80052dc:	4618      	mov	r0, r3
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	1fff7590 	.word	0x1fff7590

080052ec <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80052ec:	b480      	push	{r7}
 80052ee:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80052f0:	4b03      	ldr	r3, [pc, #12]	; (8005300 <HAL_GetUIDw1+0x14>)
 80052f2:	681b      	ldr	r3, [r3, #0]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	1fff7594 	.word	0x1fff7594

08005304 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8005304:	b480      	push	{r7}
 8005306:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8005308:	4b03      	ldr	r3, [pc, #12]	; (8005318 <HAL_GetUIDw2+0x14>)
 800530a:	681b      	ldr	r3, [r3, #0]
}
 800530c:	4618      	mov	r0, r3
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	1fff7598 	.word	0x1fff7598

0800531c <__NVIC_SetPriorityGrouping>:
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f003 0307 	and.w	r3, r3, #7
 800532a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800532c:	4b0c      	ldr	r3, [pc, #48]	; (8005360 <__NVIC_SetPriorityGrouping+0x44>)
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005338:	4013      	ands	r3, r2
 800533a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005344:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800534c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800534e:	4a04      	ldr	r2, [pc, #16]	; (8005360 <__NVIC_SetPriorityGrouping+0x44>)
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	60d3      	str	r3, [r2, #12]
}
 8005354:	bf00      	nop
 8005356:	3714      	adds	r7, #20
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	e000ed00 	.word	0xe000ed00

08005364 <__NVIC_GetPriorityGrouping>:
{
 8005364:	b480      	push	{r7}
 8005366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005368:	4b04      	ldr	r3, [pc, #16]	; (800537c <__NVIC_GetPriorityGrouping+0x18>)
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	0a1b      	lsrs	r3, r3, #8
 800536e:	f003 0307 	and.w	r3, r3, #7
}
 8005372:	4618      	mov	r0, r3
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr
 800537c:	e000ed00 	.word	0xe000ed00

08005380 <__NVIC_EnableIRQ>:
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	4603      	mov	r3, r0
 8005388:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800538a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800538e:	2b00      	cmp	r3, #0
 8005390:	db0b      	blt.n	80053aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005392:	79fb      	ldrb	r3, [r7, #7]
 8005394:	f003 021f 	and.w	r2, r3, #31
 8005398:	4907      	ldr	r1, [pc, #28]	; (80053b8 <__NVIC_EnableIRQ+0x38>)
 800539a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800539e:	095b      	lsrs	r3, r3, #5
 80053a0:	2001      	movs	r0, #1
 80053a2:	fa00 f202 	lsl.w	r2, r0, r2
 80053a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80053aa:	bf00      	nop
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	e000e100 	.word	0xe000e100

080053bc <__NVIC_DisableIRQ>:
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	4603      	mov	r3, r0
 80053c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	db12      	blt.n	80053f4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053ce:	79fb      	ldrb	r3, [r7, #7]
 80053d0:	f003 021f 	and.w	r2, r3, #31
 80053d4:	490a      	ldr	r1, [pc, #40]	; (8005400 <__NVIC_DisableIRQ+0x44>)
 80053d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053da:	095b      	lsrs	r3, r3, #5
 80053dc:	2001      	movs	r0, #1
 80053de:	fa00 f202 	lsl.w	r2, r0, r2
 80053e2:	3320      	adds	r3, #32
 80053e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80053e8:	f3bf 8f4f 	dsb	sy
}
 80053ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80053ee:	f3bf 8f6f 	isb	sy
}
 80053f2:	bf00      	nop
}
 80053f4:	bf00      	nop
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr
 8005400:	e000e100 	.word	0xe000e100

08005404 <__NVIC_SetPriority>:
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	4603      	mov	r3, r0
 800540c:	6039      	str	r1, [r7, #0]
 800540e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005414:	2b00      	cmp	r3, #0
 8005416:	db0a      	blt.n	800542e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	b2da      	uxtb	r2, r3
 800541c:	490c      	ldr	r1, [pc, #48]	; (8005450 <__NVIC_SetPriority+0x4c>)
 800541e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005422:	0112      	lsls	r2, r2, #4
 8005424:	b2d2      	uxtb	r2, r2
 8005426:	440b      	add	r3, r1
 8005428:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800542c:	e00a      	b.n	8005444 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	b2da      	uxtb	r2, r3
 8005432:	4908      	ldr	r1, [pc, #32]	; (8005454 <__NVIC_SetPriority+0x50>)
 8005434:	79fb      	ldrb	r3, [r7, #7]
 8005436:	f003 030f 	and.w	r3, r3, #15
 800543a:	3b04      	subs	r3, #4
 800543c:	0112      	lsls	r2, r2, #4
 800543e:	b2d2      	uxtb	r2, r2
 8005440:	440b      	add	r3, r1
 8005442:	761a      	strb	r2, [r3, #24]
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	e000e100 	.word	0xe000e100
 8005454:	e000ed00 	.word	0xe000ed00

08005458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005458:	b480      	push	{r7}
 800545a:	b089      	sub	sp, #36	; 0x24
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f003 0307 	and.w	r3, r3, #7
 800546a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	f1c3 0307 	rsb	r3, r3, #7
 8005472:	2b04      	cmp	r3, #4
 8005474:	bf28      	it	cs
 8005476:	2304      	movcs	r3, #4
 8005478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	3304      	adds	r3, #4
 800547e:	2b06      	cmp	r3, #6
 8005480:	d902      	bls.n	8005488 <NVIC_EncodePriority+0x30>
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	3b03      	subs	r3, #3
 8005486:	e000      	b.n	800548a <NVIC_EncodePriority+0x32>
 8005488:	2300      	movs	r3, #0
 800548a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800548c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	fa02 f303 	lsl.w	r3, r2, r3
 8005496:	43da      	mvns	r2, r3
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	401a      	ands	r2, r3
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	fa01 f303 	lsl.w	r3, r1, r3
 80054aa:	43d9      	mvns	r1, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054b0:	4313      	orrs	r3, r2
         );
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3724      	adds	r7, #36	; 0x24
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
	...

080054c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	3b01      	subs	r3, #1
 80054cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054d0:	d301      	bcc.n	80054d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80054d2:	2301      	movs	r3, #1
 80054d4:	e00f      	b.n	80054f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054d6:	4a0a      	ldr	r2, [pc, #40]	; (8005500 <SysTick_Config+0x40>)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	3b01      	subs	r3, #1
 80054dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80054de:	210f      	movs	r1, #15
 80054e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054e4:	f7ff ff8e 	bl	8005404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80054e8:	4b05      	ldr	r3, [pc, #20]	; (8005500 <SysTick_Config+0x40>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80054ee:	4b04      	ldr	r3, [pc, #16]	; (8005500 <SysTick_Config+0x40>)
 80054f0:	2207      	movs	r2, #7
 80054f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3708      	adds	r7, #8
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	e000e010 	.word	0xe000e010

08005504 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f7ff ff05 	bl	800531c <__NVIC_SetPriorityGrouping>
}
 8005512:	bf00      	nop
 8005514:	3708      	adds	r7, #8
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800551a:	b580      	push	{r7, lr}
 800551c:	b086      	sub	sp, #24
 800551e:	af00      	add	r7, sp, #0
 8005520:	4603      	mov	r3, r0
 8005522:	60b9      	str	r1, [r7, #8]
 8005524:	607a      	str	r2, [r7, #4]
 8005526:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005528:	2300      	movs	r3, #0
 800552a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800552c:	f7ff ff1a 	bl	8005364 <__NVIC_GetPriorityGrouping>
 8005530:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	68b9      	ldr	r1, [r7, #8]
 8005536:	6978      	ldr	r0, [r7, #20]
 8005538:	f7ff ff8e 	bl	8005458 <NVIC_EncodePriority>
 800553c:	4602      	mov	r2, r0
 800553e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005542:	4611      	mov	r1, r2
 8005544:	4618      	mov	r0, r3
 8005546:	f7ff ff5d 	bl	8005404 <__NVIC_SetPriority>
}
 800554a:	bf00      	nop
 800554c:	3718      	adds	r7, #24
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b082      	sub	sp, #8
 8005556:	af00      	add	r7, sp, #0
 8005558:	4603      	mov	r3, r0
 800555a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800555c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005560:	4618      	mov	r0, r3
 8005562:	f7ff ff0d 	bl	8005380 <__NVIC_EnableIRQ>
}
 8005566:	bf00      	nop
 8005568:	3708      	adds	r7, #8
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800556e:	b580      	push	{r7, lr}
 8005570:	b082      	sub	sp, #8
 8005572:	af00      	add	r7, sp, #0
 8005574:	4603      	mov	r3, r0
 8005576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800557c:	4618      	mov	r0, r3
 800557e:	f7ff ff1d 	bl	80053bc <__NVIC_DisableIRQ>
}
 8005582:	bf00      	nop
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b082      	sub	sp, #8
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f7ff ff94 	bl	80054c0 <SysTick_Config>
 8005598:	4603      	mov	r3, r0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
	...

080055a4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d101      	bne.n	80055b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e098      	b.n	80056e8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	461a      	mov	r2, r3
 80055bc:	4b4d      	ldr	r3, [pc, #308]	; (80056f4 <HAL_DMA_Init+0x150>)
 80055be:	429a      	cmp	r2, r3
 80055c0:	d80f      	bhi.n	80055e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	461a      	mov	r2, r3
 80055c8:	4b4b      	ldr	r3, [pc, #300]	; (80056f8 <HAL_DMA_Init+0x154>)
 80055ca:	4413      	add	r3, r2
 80055cc:	4a4b      	ldr	r2, [pc, #300]	; (80056fc <HAL_DMA_Init+0x158>)
 80055ce:	fba2 2303 	umull	r2, r3, r2, r3
 80055d2:	091b      	lsrs	r3, r3, #4
 80055d4:	009a      	lsls	r2, r3, #2
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a48      	ldr	r2, [pc, #288]	; (8005700 <HAL_DMA_Init+0x15c>)
 80055de:	641a      	str	r2, [r3, #64]	; 0x40
 80055e0:	e00e      	b.n	8005600 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	461a      	mov	r2, r3
 80055e8:	4b46      	ldr	r3, [pc, #280]	; (8005704 <HAL_DMA_Init+0x160>)
 80055ea:	4413      	add	r3, r2
 80055ec:	4a43      	ldr	r2, [pc, #268]	; (80056fc <HAL_DMA_Init+0x158>)
 80055ee:	fba2 2303 	umull	r2, r3, r2, r3
 80055f2:	091b      	lsrs	r3, r3, #4
 80055f4:	009a      	lsls	r2, r3, #2
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a42      	ldr	r2, [pc, #264]	; (8005708 <HAL_DMA_Init+0x164>)
 80055fe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2202      	movs	r2, #2
 8005604:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800561a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005624:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005630:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800563c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	4313      	orrs	r3, r2
 8005648:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800565a:	d039      	beq.n	80056d0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005660:	4a27      	ldr	r2, [pc, #156]	; (8005700 <HAL_DMA_Init+0x15c>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d11a      	bne.n	800569c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005666:	4b29      	ldr	r3, [pc, #164]	; (800570c <HAL_DMA_Init+0x168>)
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800566e:	f003 031c 	and.w	r3, r3, #28
 8005672:	210f      	movs	r1, #15
 8005674:	fa01 f303 	lsl.w	r3, r1, r3
 8005678:	43db      	mvns	r3, r3
 800567a:	4924      	ldr	r1, [pc, #144]	; (800570c <HAL_DMA_Init+0x168>)
 800567c:	4013      	ands	r3, r2
 800567e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005680:	4b22      	ldr	r3, [pc, #136]	; (800570c <HAL_DMA_Init+0x168>)
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6859      	ldr	r1, [r3, #4]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800568c:	f003 031c 	and.w	r3, r3, #28
 8005690:	fa01 f303 	lsl.w	r3, r1, r3
 8005694:	491d      	ldr	r1, [pc, #116]	; (800570c <HAL_DMA_Init+0x168>)
 8005696:	4313      	orrs	r3, r2
 8005698:	600b      	str	r3, [r1, #0]
 800569a:	e019      	b.n	80056d0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800569c:	4b1c      	ldr	r3, [pc, #112]	; (8005710 <HAL_DMA_Init+0x16c>)
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056a4:	f003 031c 	and.w	r3, r3, #28
 80056a8:	210f      	movs	r1, #15
 80056aa:	fa01 f303 	lsl.w	r3, r1, r3
 80056ae:	43db      	mvns	r3, r3
 80056b0:	4917      	ldr	r1, [pc, #92]	; (8005710 <HAL_DMA_Init+0x16c>)
 80056b2:	4013      	ands	r3, r2
 80056b4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80056b6:	4b16      	ldr	r3, [pc, #88]	; (8005710 <HAL_DMA_Init+0x16c>)
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6859      	ldr	r1, [r3, #4]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c2:	f003 031c 	and.w	r3, r3, #28
 80056c6:	fa01 f303 	lsl.w	r3, r1, r3
 80056ca:	4911      	ldr	r1, [pc, #68]	; (8005710 <HAL_DMA_Init+0x16c>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr
 80056f4:	40020407 	.word	0x40020407
 80056f8:	bffdfff8 	.word	0xbffdfff8
 80056fc:	cccccccd 	.word	0xcccccccd
 8005700:	40020000 	.word	0x40020000
 8005704:	bffdfbf8 	.word	0xbffdfbf8
 8005708:	40020400 	.word	0x40020400
 800570c:	400200a8 	.word	0x400200a8
 8005710:	400204a8 	.word	0x400204a8

08005714 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
 8005720:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005722:	2300      	movs	r3, #0
 8005724:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800572c:	2b01      	cmp	r3, #1
 800572e:	d101      	bne.n	8005734 <HAL_DMA_Start_IT+0x20>
 8005730:	2302      	movs	r3, #2
 8005732:	e04b      	b.n	80057cc <HAL_DMA_Start_IT+0xb8>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b01      	cmp	r3, #1
 8005746:	d13a      	bne.n	80057be <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2202      	movs	r2, #2
 800574c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f022 0201 	bic.w	r2, r2, #1
 8005764:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	68b9      	ldr	r1, [r7, #8]
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f000 f969 	bl	8005a44 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005776:	2b00      	cmp	r3, #0
 8005778:	d008      	beq.n	800578c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f042 020e 	orr.w	r2, r2, #14
 8005788:	601a      	str	r2, [r3, #0]
 800578a:	e00f      	b.n	80057ac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f022 0204 	bic.w	r2, r2, #4
 800579a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f042 020a 	orr.w	r2, r2, #10
 80057aa:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f042 0201 	orr.w	r2, r2, #1
 80057ba:	601a      	str	r2, [r3, #0]
 80057bc:	e005      	b.n	80057ca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80057c6:	2302      	movs	r3, #2
 80057c8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80057ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3718      	adds	r7, #24
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057dc:	2300      	movs	r3, #0
 80057de:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d005      	beq.n	80057f8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2204      	movs	r2, #4
 80057f0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	73fb      	strb	r3, [r7, #15]
 80057f6:	e029      	b.n	800584c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 020e 	bic.w	r2, r2, #14
 8005806:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f022 0201 	bic.w	r2, r2, #1
 8005816:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800581c:	f003 021c 	and.w	r2, r3, #28
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005824:	2101      	movs	r1, #1
 8005826:	fa01 f202 	lsl.w	r2, r1, r2
 800582a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005840:	2b00      	cmp	r3, #0
 8005842:	d003      	beq.n	800584c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	4798      	blx	r3
    }
  }
  return status;
 800584c:	7bfb      	ldrb	r3, [r7, #15]
}
 800584e:	4618      	mov	r0, r3
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b084      	sub	sp, #16
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005872:	f003 031c 	and.w	r3, r3, #28
 8005876:	2204      	movs	r2, #4
 8005878:	409a      	lsls	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	4013      	ands	r3, r2
 800587e:	2b00      	cmp	r3, #0
 8005880:	d026      	beq.n	80058d0 <HAL_DMA_IRQHandler+0x7a>
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	f003 0304 	and.w	r3, r3, #4
 8005888:	2b00      	cmp	r3, #0
 800588a:	d021      	beq.n	80058d0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0320 	and.w	r3, r3, #32
 8005896:	2b00      	cmp	r3, #0
 8005898:	d107      	bne.n	80058aa <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f022 0204 	bic.w	r2, r2, #4
 80058a8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ae:	f003 021c 	and.w	r2, r3, #28
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b6:	2104      	movs	r1, #4
 80058b8:	fa01 f202 	lsl.w	r2, r1, r2
 80058bc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d071      	beq.n	80059aa <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80058ce:	e06c      	b.n	80059aa <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d4:	f003 031c 	and.w	r3, r3, #28
 80058d8:	2202      	movs	r2, #2
 80058da:	409a      	lsls	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	4013      	ands	r3, r2
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d02e      	beq.n	8005942 <HAL_DMA_IRQHandler+0xec>
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	f003 0302 	and.w	r3, r3, #2
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d029      	beq.n	8005942 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0320 	and.w	r3, r3, #32
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10b      	bne.n	8005914 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f022 020a 	bic.w	r2, r2, #10
 800590a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005918:	f003 021c 	and.w	r2, r3, #28
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005920:	2102      	movs	r1, #2
 8005922:	fa01 f202 	lsl.w	r2, r1, r2
 8005926:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005934:	2b00      	cmp	r3, #0
 8005936:	d038      	beq.n	80059aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005940:	e033      	b.n	80059aa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005946:	f003 031c 	and.w	r3, r3, #28
 800594a:	2208      	movs	r2, #8
 800594c:	409a      	lsls	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	4013      	ands	r3, r2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d02a      	beq.n	80059ac <HAL_DMA_IRQHandler+0x156>
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	f003 0308 	and.w	r3, r3, #8
 800595c:	2b00      	cmp	r3, #0
 800595e:	d025      	beq.n	80059ac <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f022 020e 	bic.w	r2, r2, #14
 800596e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005974:	f003 021c 	and.w	r2, r3, #28
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597c:	2101      	movs	r1, #1
 800597e:	fa01 f202 	lsl.w	r2, r1, r2
 8005982:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d004      	beq.n	80059ac <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80059aa:	bf00      	nop
 80059ac:	bf00      	nop
}
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 80059b4:	b480      	push	{r7}
 80059b6:	b087      	sub	sp, #28
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	460b      	mov	r3, r1
 80059be:	607a      	str	r2, [r7, #4]
 80059c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80059c2:	2300      	movs	r3, #0
 80059c4:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d101      	bne.n	80059d4 <HAL_DMA_RegisterCallback+0x20>
 80059d0:	2302      	movs	r3, #2
 80059d2:	e031      	b.n	8005a38 <HAL_DMA_RegisterCallback+0x84>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d120      	bne.n	8005a2a <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 80059e8:	7afb      	ldrb	r3, [r7, #11]
 80059ea:	2b03      	cmp	r3, #3
 80059ec:	d81a      	bhi.n	8005a24 <HAL_DMA_RegisterCallback+0x70>
 80059ee:	a201      	add	r2, pc, #4	; (adr r2, 80059f4 <HAL_DMA_RegisterCallback+0x40>)
 80059f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f4:	08005a05 	.word	0x08005a05
 80059f8:	08005a0d 	.word	0x08005a0d
 80059fc:	08005a15 	.word	0x08005a15
 8005a00:	08005a1d 	.word	0x08005a1d
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = pCallback;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	62da      	str	r2, [r3, #44]	; 0x2c
           break;
 8005a0a:	e010      	b.n	8005a2e <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = pCallback;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	631a      	str	r2, [r3, #48]	; 0x30
           break;
 8005a12:	e00c      	b.n	8005a2e <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = pCallback;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	635a      	str	r2, [r3, #52]	; 0x34
           break;
 8005a1a:	e008      	b.n	8005a2e <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = pCallback;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 8005a22:	e004      	b.n	8005a2e <HAL_DMA_RegisterCallback+0x7a>

     default:
           status = HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	75fb      	strb	r3, [r7, #23]
           break;
 8005a28:	e001      	b.n	8005a2e <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8005a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	371c      	adds	r7, #28
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
 8005a50:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a56:	f003 021c 	and.w	r2, r3, #28
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5e:	2101      	movs	r1, #1
 8005a60:	fa01 f202 	lsl.w	r2, r1, r2
 8005a64:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	683a      	ldr	r2, [r7, #0]
 8005a6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	2b10      	cmp	r3, #16
 8005a74:	d108      	bne.n	8005a88 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005a86:	e007      	b.n	8005a98 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	60da      	str	r2, [r3, #12]
}
 8005a98:	bf00      	nop
 8005a9a:	3714      	adds	r7, #20
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b087      	sub	sp, #28
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ab2:	e154      	b.n	8005d5e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	2101      	movs	r1, #1
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f000 8146 	beq.w	8005d58 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	f003 0303 	and.w	r3, r3, #3
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d005      	beq.n	8005ae4 <HAL_GPIO_Init+0x40>
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f003 0303 	and.w	r3, r3, #3
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d130      	bne.n	8005b46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	005b      	lsls	r3, r3, #1
 8005aee:	2203      	movs	r2, #3
 8005af0:	fa02 f303 	lsl.w	r3, r2, r3
 8005af4:	43db      	mvns	r3, r3
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	4013      	ands	r3, r2
 8005afa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	68da      	ldr	r2, [r3, #12]
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	005b      	lsls	r3, r3, #1
 8005b04:	fa02 f303 	lsl.w	r3, r2, r3
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b22:	43db      	mvns	r3, r3
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	4013      	ands	r3, r2
 8005b28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	091b      	lsrs	r3, r3, #4
 8005b30:	f003 0201 	and.w	r2, r3, #1
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f003 0303 	and.w	r3, r3, #3
 8005b4e:	2b03      	cmp	r3, #3
 8005b50:	d017      	beq.n	8005b82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	005b      	lsls	r3, r3, #1
 8005b5c:	2203      	movs	r2, #3
 8005b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b62:	43db      	mvns	r3, r3
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	4013      	ands	r3, r2
 8005b68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	689a      	ldr	r2, [r3, #8]
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	005b      	lsls	r3, r3, #1
 8005b72:	fa02 f303 	lsl.w	r3, r2, r3
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f003 0303 	and.w	r3, r3, #3
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d123      	bne.n	8005bd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	08da      	lsrs	r2, r3, #3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	3208      	adds	r2, #8
 8005b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	f003 0307 	and.w	r3, r3, #7
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	220f      	movs	r2, #15
 8005ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8005baa:	43db      	mvns	r3, r3
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	4013      	ands	r3, r2
 8005bb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	691a      	ldr	r2, [r3, #16]
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	f003 0307 	and.w	r3, r3, #7
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	08da      	lsrs	r2, r3, #3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	3208      	adds	r2, #8
 8005bd0:	6939      	ldr	r1, [r7, #16]
 8005bd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	005b      	lsls	r3, r3, #1
 8005be0:	2203      	movs	r2, #3
 8005be2:	fa02 f303 	lsl.w	r3, r2, r3
 8005be6:	43db      	mvns	r3, r3
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	4013      	ands	r3, r2
 8005bec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f003 0203 	and.w	r2, r3, #3
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	005b      	lsls	r3, r3, #1
 8005bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f000 80a0 	beq.w	8005d58 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c18:	4b58      	ldr	r3, [pc, #352]	; (8005d7c <HAL_GPIO_Init+0x2d8>)
 8005c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c1c:	4a57      	ldr	r2, [pc, #348]	; (8005d7c <HAL_GPIO_Init+0x2d8>)
 8005c1e:	f043 0301 	orr.w	r3, r3, #1
 8005c22:	6613      	str	r3, [r2, #96]	; 0x60
 8005c24:	4b55      	ldr	r3, [pc, #340]	; (8005d7c <HAL_GPIO_Init+0x2d8>)
 8005c26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c28:	f003 0301 	and.w	r3, r3, #1
 8005c2c:	60bb      	str	r3, [r7, #8]
 8005c2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005c30:	4a53      	ldr	r2, [pc, #332]	; (8005d80 <HAL_GPIO_Init+0x2dc>)
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	089b      	lsrs	r3, r3, #2
 8005c36:	3302      	adds	r3, #2
 8005c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f003 0303 	and.w	r3, r3, #3
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	220f      	movs	r2, #15
 8005c48:	fa02 f303 	lsl.w	r3, r2, r3
 8005c4c:	43db      	mvns	r3, r3
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	4013      	ands	r3, r2
 8005c52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005c5a:	d019      	beq.n	8005c90 <HAL_GPIO_Init+0x1ec>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a49      	ldr	r2, [pc, #292]	; (8005d84 <HAL_GPIO_Init+0x2e0>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d013      	beq.n	8005c8c <HAL_GPIO_Init+0x1e8>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a48      	ldr	r2, [pc, #288]	; (8005d88 <HAL_GPIO_Init+0x2e4>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d00d      	beq.n	8005c88 <HAL_GPIO_Init+0x1e4>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a47      	ldr	r2, [pc, #284]	; (8005d8c <HAL_GPIO_Init+0x2e8>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d007      	beq.n	8005c84 <HAL_GPIO_Init+0x1e0>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a46      	ldr	r2, [pc, #280]	; (8005d90 <HAL_GPIO_Init+0x2ec>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d101      	bne.n	8005c80 <HAL_GPIO_Init+0x1dc>
 8005c7c:	2304      	movs	r3, #4
 8005c7e:	e008      	b.n	8005c92 <HAL_GPIO_Init+0x1ee>
 8005c80:	2307      	movs	r3, #7
 8005c82:	e006      	b.n	8005c92 <HAL_GPIO_Init+0x1ee>
 8005c84:	2303      	movs	r3, #3
 8005c86:	e004      	b.n	8005c92 <HAL_GPIO_Init+0x1ee>
 8005c88:	2302      	movs	r3, #2
 8005c8a:	e002      	b.n	8005c92 <HAL_GPIO_Init+0x1ee>
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e000      	b.n	8005c92 <HAL_GPIO_Init+0x1ee>
 8005c90:	2300      	movs	r3, #0
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	f002 0203 	and.w	r2, r2, #3
 8005c98:	0092      	lsls	r2, r2, #2
 8005c9a:	4093      	lsls	r3, r2
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005ca2:	4937      	ldr	r1, [pc, #220]	; (8005d80 <HAL_GPIO_Init+0x2dc>)
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	089b      	lsrs	r3, r3, #2
 8005ca8:	3302      	adds	r3, #2
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005cb0:	4b38      	ldr	r3, [pc, #224]	; (8005d94 <HAL_GPIO_Init+0x2f0>)
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	43db      	mvns	r3, r3
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d003      	beq.n	8005cd4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005cd4:	4a2f      	ldr	r2, [pc, #188]	; (8005d94 <HAL_GPIO_Init+0x2f0>)
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005cda:	4b2e      	ldr	r3, [pc, #184]	; (8005d94 <HAL_GPIO_Init+0x2f0>)
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	43db      	mvns	r3, r3
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d003      	beq.n	8005cfe <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005cfe:	4a25      	ldr	r2, [pc, #148]	; (8005d94 <HAL_GPIO_Init+0x2f0>)
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005d04:	4b23      	ldr	r3, [pc, #140]	; (8005d94 <HAL_GPIO_Init+0x2f0>)
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	43db      	mvns	r3, r3
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	4013      	ands	r3, r2
 8005d12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d003      	beq.n	8005d28 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005d28:	4a1a      	ldr	r2, [pc, #104]	; (8005d94 <HAL_GPIO_Init+0x2f0>)
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005d2e:	4b19      	ldr	r3, [pc, #100]	; (8005d94 <HAL_GPIO_Init+0x2f0>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	43db      	mvns	r3, r3
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d003      	beq.n	8005d52 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005d52:	4a10      	ldr	r2, [pc, #64]	; (8005d94 <HAL_GPIO_Init+0x2f0>)
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	fa22 f303 	lsr.w	r3, r2, r3
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f47f aea3 	bne.w	8005ab4 <HAL_GPIO_Init+0x10>
  }
}
 8005d6e:	bf00      	nop
 8005d70:	bf00      	nop
 8005d72:	371c      	adds	r7, #28
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr
 8005d7c:	40021000 	.word	0x40021000
 8005d80:	40010000 	.word	0x40010000
 8005d84:	48000400 	.word	0x48000400
 8005d88:	48000800 	.word	0x48000800
 8005d8c:	48000c00 	.word	0x48000c00
 8005d90:	48001000 	.word	0x48001000
 8005d94:	40010400 	.word	0x40010400

08005d98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	460b      	mov	r3, r1
 8005da2:	807b      	strh	r3, [r7, #2]
 8005da4:	4613      	mov	r3, r2
 8005da6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005da8:	787b      	ldrb	r3, [r7, #1]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d003      	beq.n	8005db6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005dae:	887a      	ldrh	r2, [r7, #2]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005db4:	e002      	b.n	8005dbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005db6:	887a      	ldrh	r2, [r7, #2]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	4603      	mov	r3, r0
 8005dd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005dd2:	4b08      	ldr	r3, [pc, #32]	; (8005df4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005dd4:	695a      	ldr	r2, [r3, #20]
 8005dd6:	88fb      	ldrh	r3, [r7, #6]
 8005dd8:	4013      	ands	r3, r2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d006      	beq.n	8005dec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005dde:	4a05      	ldr	r2, [pc, #20]	; (8005df4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005de0:	88fb      	ldrh	r3, [r7, #6]
 8005de2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005de4:	88fb      	ldrh	r3, [r7, #6]
 8005de6:	4618      	mov	r0, r3
 8005de8:	f000 f806 	bl	8005df8 <HAL_GPIO_EXTI_Callback>
  }
}
 8005dec:	bf00      	nop
 8005dee:	3708      	adds	r7, #8
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	40010400 	.word	0x40010400

08005df8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	4603      	mov	r3, r0
 8005e00:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005e02:	bf00      	nop
 8005e04:	370c      	adds	r7, #12
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
	...

08005e10 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005e10:	b480      	push	{r7}
 8005e12:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e14:	4b05      	ldr	r3, [pc, #20]	; (8005e2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a04      	ldr	r2, [pc, #16]	; (8005e2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e1e:	6013      	str	r3, [r2, #0]
}
 8005e20:	bf00      	nop
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	40007000 	.word	0x40007000

08005e30 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8005e38:	4b2b      	ldr	r3, [pc, #172]	; (8005ee8 <HAL_PWR_ConfigPVD+0xb8>)
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f023 020e 	bic.w	r2, r3, #14
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4928      	ldr	r1, [pc, #160]	; (8005ee8 <HAL_PWR_ConfigPVD+0xb8>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8005e4a:	4b28      	ldr	r3, [pc, #160]	; (8005eec <HAL_PWR_ConfigPVD+0xbc>)
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	4a27      	ldr	r2, [pc, #156]	; (8005eec <HAL_PWR_ConfigPVD+0xbc>)
 8005e50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e54:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8005e56:	4b25      	ldr	r3, [pc, #148]	; (8005eec <HAL_PWR_ConfigPVD+0xbc>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a24      	ldr	r2, [pc, #144]	; (8005eec <HAL_PWR_ConfigPVD+0xbc>)
 8005e5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e60:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8005e62:	4b22      	ldr	r3, [pc, #136]	; (8005eec <HAL_PWR_ConfigPVD+0xbc>)
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	4a21      	ldr	r2, [pc, #132]	; (8005eec <HAL_PWR_ConfigPVD+0xbc>)
 8005e68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e6c:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8005e6e:	4b1f      	ldr	r3, [pc, #124]	; (8005eec <HAL_PWR_ConfigPVD+0xbc>)
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	4a1e      	ldr	r2, [pc, #120]	; (8005eec <HAL_PWR_ConfigPVD+0xbc>)
 8005e74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e78:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d005      	beq.n	8005e92 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8005e86:	4b19      	ldr	r3, [pc, #100]	; (8005eec <HAL_PWR_ConfigPVD+0xbc>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a18      	ldr	r2, [pc, #96]	; (8005eec <HAL_PWR_ConfigPVD+0xbc>)
 8005e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e90:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d005      	beq.n	8005eaa <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8005e9e:	4b13      	ldr	r3, [pc, #76]	; (8005eec <HAL_PWR_ConfigPVD+0xbc>)
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	4a12      	ldr	r2, [pc, #72]	; (8005eec <HAL_PWR_ConfigPVD+0xbc>)
 8005ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ea8:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f003 0301 	and.w	r3, r3, #1
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d005      	beq.n	8005ec2 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8005eb6:	4b0d      	ldr	r3, [pc, #52]	; (8005eec <HAL_PWR_ConfigPVD+0xbc>)
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	4a0c      	ldr	r2, [pc, #48]	; (8005eec <HAL_PWR_ConfigPVD+0xbc>)
 8005ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ec0:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d005      	beq.n	8005eda <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8005ece:	4b07      	ldr	r3, [pc, #28]	; (8005eec <HAL_PWR_ConfigPVD+0xbc>)
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	4a06      	ldr	r2, [pc, #24]	; (8005eec <HAL_PWR_ConfigPVD+0xbc>)
 8005ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ed8:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr
 8005ee8:	40007000 	.word	0x40007000
 8005eec:	40010400 	.word	0x40010400

08005ef0 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8005ef4:	4b05      	ldr	r3, [pc, #20]	; (8005f0c <HAL_PWR_EnablePVD+0x1c>)
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	4a04      	ldr	r2, [pc, #16]	; (8005f0c <HAL_PWR_EnablePVD+0x1c>)
 8005efa:	f043 0301 	orr.w	r3, r3, #1
 8005efe:	6053      	str	r3, [r2, #4]
}
 8005f00:	bf00      	nop
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	40007000 	.word	0x40007000

08005f10 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005f10:	b480      	push	{r7}
 8005f12:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005f14:	4b04      	ldr	r3, [pc, #16]	; (8005f28 <HAL_PWREx_GetVoltageRange+0x18>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	40007000 	.word	0x40007000

08005f2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f3a:	d130      	bne.n	8005f9e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f3c:	4b23      	ldr	r3, [pc, #140]	; (8005fcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005f44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f48:	d038      	beq.n	8005fbc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f4a:	4b20      	ldr	r3, [pc, #128]	; (8005fcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005f52:	4a1e      	ldr	r2, [pc, #120]	; (8005fcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f58:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005f5a:	4b1d      	ldr	r3, [pc, #116]	; (8005fd0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2232      	movs	r2, #50	; 0x32
 8005f60:	fb02 f303 	mul.w	r3, r2, r3
 8005f64:	4a1b      	ldr	r2, [pc, #108]	; (8005fd4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005f66:	fba2 2303 	umull	r2, r3, r2, r3
 8005f6a:	0c9b      	lsrs	r3, r3, #18
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f70:	e002      	b.n	8005f78 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	3b01      	subs	r3, #1
 8005f76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f78:	4b14      	ldr	r3, [pc, #80]	; (8005fcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f7a:	695b      	ldr	r3, [r3, #20]
 8005f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f84:	d102      	bne.n	8005f8c <HAL_PWREx_ControlVoltageScaling+0x60>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1f2      	bne.n	8005f72 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005f8c:	4b0f      	ldr	r3, [pc, #60]	; (8005fcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f8e:	695b      	ldr	r3, [r3, #20]
 8005f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f98:	d110      	bne.n	8005fbc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e00f      	b.n	8005fbe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005f9e:	4b0b      	ldr	r3, [pc, #44]	; (8005fcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005faa:	d007      	beq.n	8005fbc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005fac:	4b07      	ldr	r3, [pc, #28]	; (8005fcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005fb4:	4a05      	ldr	r2, [pc, #20]	; (8005fcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005fb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005fba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3714      	adds	r7, #20
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	40007000 	.word	0x40007000
 8005fd0:	20000100 	.word	0x20000100
 8005fd4:	431bde83 	.word	0x431bde83

08005fd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b088      	sub	sp, #32
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d102      	bne.n	8005fec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	f000 bc02 	b.w	80067f0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fec:	4b96      	ldr	r3, [pc, #600]	; (8006248 <HAL_RCC_OscConfig+0x270>)
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f003 030c 	and.w	r3, r3, #12
 8005ff4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ff6:	4b94      	ldr	r3, [pc, #592]	; (8006248 <HAL_RCC_OscConfig+0x270>)
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	f003 0303 	and.w	r3, r3, #3
 8005ffe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0310 	and.w	r3, r3, #16
 8006008:	2b00      	cmp	r3, #0
 800600a:	f000 80e4 	beq.w	80061d6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d007      	beq.n	8006024 <HAL_RCC_OscConfig+0x4c>
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	2b0c      	cmp	r3, #12
 8006018:	f040 808b 	bne.w	8006132 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	2b01      	cmp	r3, #1
 8006020:	f040 8087 	bne.w	8006132 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006024:	4b88      	ldr	r3, [pc, #544]	; (8006248 <HAL_RCC_OscConfig+0x270>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0302 	and.w	r3, r3, #2
 800602c:	2b00      	cmp	r3, #0
 800602e:	d005      	beq.n	800603c <HAL_RCC_OscConfig+0x64>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d101      	bne.n	800603c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e3d9      	b.n	80067f0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a1a      	ldr	r2, [r3, #32]
 8006040:	4b81      	ldr	r3, [pc, #516]	; (8006248 <HAL_RCC_OscConfig+0x270>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0308 	and.w	r3, r3, #8
 8006048:	2b00      	cmp	r3, #0
 800604a:	d004      	beq.n	8006056 <HAL_RCC_OscConfig+0x7e>
 800604c:	4b7e      	ldr	r3, [pc, #504]	; (8006248 <HAL_RCC_OscConfig+0x270>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006054:	e005      	b.n	8006062 <HAL_RCC_OscConfig+0x8a>
 8006056:	4b7c      	ldr	r3, [pc, #496]	; (8006248 <HAL_RCC_OscConfig+0x270>)
 8006058:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800605c:	091b      	lsrs	r3, r3, #4
 800605e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006062:	4293      	cmp	r3, r2
 8006064:	d223      	bcs.n	80060ae <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	4618      	mov	r0, r3
 800606c:	f000 fd8c 	bl	8006b88 <RCC_SetFlashLatencyFromMSIRange>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d001      	beq.n	800607a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e3ba      	b.n	80067f0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800607a:	4b73      	ldr	r3, [pc, #460]	; (8006248 <HAL_RCC_OscConfig+0x270>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a72      	ldr	r2, [pc, #456]	; (8006248 <HAL_RCC_OscConfig+0x270>)
 8006080:	f043 0308 	orr.w	r3, r3, #8
 8006084:	6013      	str	r3, [r2, #0]
 8006086:	4b70      	ldr	r3, [pc, #448]	; (8006248 <HAL_RCC_OscConfig+0x270>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	496d      	ldr	r1, [pc, #436]	; (8006248 <HAL_RCC_OscConfig+0x270>)
 8006094:	4313      	orrs	r3, r2
 8006096:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006098:	4b6b      	ldr	r3, [pc, #428]	; (8006248 <HAL_RCC_OscConfig+0x270>)
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	69db      	ldr	r3, [r3, #28]
 80060a4:	021b      	lsls	r3, r3, #8
 80060a6:	4968      	ldr	r1, [pc, #416]	; (8006248 <HAL_RCC_OscConfig+0x270>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	604b      	str	r3, [r1, #4]
 80060ac:	e025      	b.n	80060fa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80060ae:	4b66      	ldr	r3, [pc, #408]	; (8006248 <HAL_RCC_OscConfig+0x270>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a65      	ldr	r2, [pc, #404]	; (8006248 <HAL_RCC_OscConfig+0x270>)
 80060b4:	f043 0308 	orr.w	r3, r3, #8
 80060b8:	6013      	str	r3, [r2, #0]
 80060ba:	4b63      	ldr	r3, [pc, #396]	; (8006248 <HAL_RCC_OscConfig+0x270>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	4960      	ldr	r1, [pc, #384]	; (8006248 <HAL_RCC_OscConfig+0x270>)
 80060c8:	4313      	orrs	r3, r2
 80060ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80060cc:	4b5e      	ldr	r3, [pc, #376]	; (8006248 <HAL_RCC_OscConfig+0x270>)
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	69db      	ldr	r3, [r3, #28]
 80060d8:	021b      	lsls	r3, r3, #8
 80060da:	495b      	ldr	r1, [pc, #364]	; (8006248 <HAL_RCC_OscConfig+0x270>)
 80060dc:	4313      	orrs	r3, r2
 80060de:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d109      	bne.n	80060fa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f000 fd4c 	bl	8006b88 <RCC_SetFlashLatencyFromMSIRange>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e37a      	b.n	80067f0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80060fa:	f000 fc81 	bl	8006a00 <HAL_RCC_GetSysClockFreq>
 80060fe:	4602      	mov	r2, r0
 8006100:	4b51      	ldr	r3, [pc, #324]	; (8006248 <HAL_RCC_OscConfig+0x270>)
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	091b      	lsrs	r3, r3, #4
 8006106:	f003 030f 	and.w	r3, r3, #15
 800610a:	4950      	ldr	r1, [pc, #320]	; (800624c <HAL_RCC_OscConfig+0x274>)
 800610c:	5ccb      	ldrb	r3, [r1, r3]
 800610e:	f003 031f 	and.w	r3, r3, #31
 8006112:	fa22 f303 	lsr.w	r3, r2, r3
 8006116:	4a4e      	ldr	r2, [pc, #312]	; (8006250 <HAL_RCC_OscConfig+0x278>)
 8006118:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800611a:	4b4e      	ldr	r3, [pc, #312]	; (8006254 <HAL_RCC_OscConfig+0x27c>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4618      	mov	r0, r3
 8006120:	f7ff f86c 	bl	80051fc <HAL_InitTick>
 8006124:	4603      	mov	r3, r0
 8006126:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006128:	7bfb      	ldrb	r3, [r7, #15]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d052      	beq.n	80061d4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800612e:	7bfb      	ldrb	r3, [r7, #15]
 8006130:	e35e      	b.n	80067f0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d032      	beq.n	80061a0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800613a:	4b43      	ldr	r3, [pc, #268]	; (8006248 <HAL_RCC_OscConfig+0x270>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a42      	ldr	r2, [pc, #264]	; (8006248 <HAL_RCC_OscConfig+0x270>)
 8006140:	f043 0301 	orr.w	r3, r3, #1
 8006144:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006146:	f7ff f895 	bl	8005274 <HAL_GetTick>
 800614a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800614c:	e008      	b.n	8006160 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800614e:	f7ff f891 	bl	8005274 <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	2b02      	cmp	r3, #2
 800615a:	d901      	bls.n	8006160 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e347      	b.n	80067f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006160:	4b39      	ldr	r3, [pc, #228]	; (8006248 <HAL_RCC_OscConfig+0x270>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 0302 	and.w	r3, r3, #2
 8006168:	2b00      	cmp	r3, #0
 800616a:	d0f0      	beq.n	800614e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800616c:	4b36      	ldr	r3, [pc, #216]	; (8006248 <HAL_RCC_OscConfig+0x270>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a35      	ldr	r2, [pc, #212]	; (8006248 <HAL_RCC_OscConfig+0x270>)
 8006172:	f043 0308 	orr.w	r3, r3, #8
 8006176:	6013      	str	r3, [r2, #0]
 8006178:	4b33      	ldr	r3, [pc, #204]	; (8006248 <HAL_RCC_OscConfig+0x270>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a1b      	ldr	r3, [r3, #32]
 8006184:	4930      	ldr	r1, [pc, #192]	; (8006248 <HAL_RCC_OscConfig+0x270>)
 8006186:	4313      	orrs	r3, r2
 8006188:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800618a:	4b2f      	ldr	r3, [pc, #188]	; (8006248 <HAL_RCC_OscConfig+0x270>)
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	69db      	ldr	r3, [r3, #28]
 8006196:	021b      	lsls	r3, r3, #8
 8006198:	492b      	ldr	r1, [pc, #172]	; (8006248 <HAL_RCC_OscConfig+0x270>)
 800619a:	4313      	orrs	r3, r2
 800619c:	604b      	str	r3, [r1, #4]
 800619e:	e01a      	b.n	80061d6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80061a0:	4b29      	ldr	r3, [pc, #164]	; (8006248 <HAL_RCC_OscConfig+0x270>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a28      	ldr	r2, [pc, #160]	; (8006248 <HAL_RCC_OscConfig+0x270>)
 80061a6:	f023 0301 	bic.w	r3, r3, #1
 80061aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80061ac:	f7ff f862 	bl	8005274 <HAL_GetTick>
 80061b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80061b2:	e008      	b.n	80061c6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80061b4:	f7ff f85e 	bl	8005274 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d901      	bls.n	80061c6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e314      	b.n	80067f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80061c6:	4b20      	ldr	r3, [pc, #128]	; (8006248 <HAL_RCC_OscConfig+0x270>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0302 	and.w	r3, r3, #2
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1f0      	bne.n	80061b4 <HAL_RCC_OscConfig+0x1dc>
 80061d2:	e000      	b.n	80061d6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80061d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d073      	beq.n	80062ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	2b08      	cmp	r3, #8
 80061e6:	d005      	beq.n	80061f4 <HAL_RCC_OscConfig+0x21c>
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	2b0c      	cmp	r3, #12
 80061ec:	d10e      	bne.n	800620c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	2b03      	cmp	r3, #3
 80061f2:	d10b      	bne.n	800620c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061f4:	4b14      	ldr	r3, [pc, #80]	; (8006248 <HAL_RCC_OscConfig+0x270>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d063      	beq.n	80062c8 <HAL_RCC_OscConfig+0x2f0>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d15f      	bne.n	80062c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e2f1      	b.n	80067f0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006214:	d106      	bne.n	8006224 <HAL_RCC_OscConfig+0x24c>
 8006216:	4b0c      	ldr	r3, [pc, #48]	; (8006248 <HAL_RCC_OscConfig+0x270>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a0b      	ldr	r2, [pc, #44]	; (8006248 <HAL_RCC_OscConfig+0x270>)
 800621c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006220:	6013      	str	r3, [r2, #0]
 8006222:	e025      	b.n	8006270 <HAL_RCC_OscConfig+0x298>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800622c:	d114      	bne.n	8006258 <HAL_RCC_OscConfig+0x280>
 800622e:	4b06      	ldr	r3, [pc, #24]	; (8006248 <HAL_RCC_OscConfig+0x270>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a05      	ldr	r2, [pc, #20]	; (8006248 <HAL_RCC_OscConfig+0x270>)
 8006234:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006238:	6013      	str	r3, [r2, #0]
 800623a:	4b03      	ldr	r3, [pc, #12]	; (8006248 <HAL_RCC_OscConfig+0x270>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a02      	ldr	r2, [pc, #8]	; (8006248 <HAL_RCC_OscConfig+0x270>)
 8006240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006244:	6013      	str	r3, [r2, #0]
 8006246:	e013      	b.n	8006270 <HAL_RCC_OscConfig+0x298>
 8006248:	40021000 	.word	0x40021000
 800624c:	0800b7f0 	.word	0x0800b7f0
 8006250:	20000100 	.word	0x20000100
 8006254:	2000000c 	.word	0x2000000c
 8006258:	4ba0      	ldr	r3, [pc, #640]	; (80064dc <HAL_RCC_OscConfig+0x504>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a9f      	ldr	r2, [pc, #636]	; (80064dc <HAL_RCC_OscConfig+0x504>)
 800625e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006262:	6013      	str	r3, [r2, #0]
 8006264:	4b9d      	ldr	r3, [pc, #628]	; (80064dc <HAL_RCC_OscConfig+0x504>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a9c      	ldr	r2, [pc, #624]	; (80064dc <HAL_RCC_OscConfig+0x504>)
 800626a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800626e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d013      	beq.n	80062a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006278:	f7fe fffc 	bl	8005274 <HAL_GetTick>
 800627c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800627e:	e008      	b.n	8006292 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006280:	f7fe fff8 	bl	8005274 <HAL_GetTick>
 8006284:	4602      	mov	r2, r0
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	2b64      	cmp	r3, #100	; 0x64
 800628c:	d901      	bls.n	8006292 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e2ae      	b.n	80067f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006292:	4b92      	ldr	r3, [pc, #584]	; (80064dc <HAL_RCC_OscConfig+0x504>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d0f0      	beq.n	8006280 <HAL_RCC_OscConfig+0x2a8>
 800629e:	e014      	b.n	80062ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a0:	f7fe ffe8 	bl	8005274 <HAL_GetTick>
 80062a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80062a6:	e008      	b.n	80062ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062a8:	f7fe ffe4 	bl	8005274 <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	2b64      	cmp	r3, #100	; 0x64
 80062b4:	d901      	bls.n	80062ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e29a      	b.n	80067f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80062ba:	4b88      	ldr	r3, [pc, #544]	; (80064dc <HAL_RCC_OscConfig+0x504>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1f0      	bne.n	80062a8 <HAL_RCC_OscConfig+0x2d0>
 80062c6:	e000      	b.n	80062ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d060      	beq.n	8006398 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	2b04      	cmp	r3, #4
 80062da:	d005      	beq.n	80062e8 <HAL_RCC_OscConfig+0x310>
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	2b0c      	cmp	r3, #12
 80062e0:	d119      	bne.n	8006316 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d116      	bne.n	8006316 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062e8:	4b7c      	ldr	r3, [pc, #496]	; (80064dc <HAL_RCC_OscConfig+0x504>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d005      	beq.n	8006300 <HAL_RCC_OscConfig+0x328>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d101      	bne.n	8006300 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e277      	b.n	80067f0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006300:	4b76      	ldr	r3, [pc, #472]	; (80064dc <HAL_RCC_OscConfig+0x504>)
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	061b      	lsls	r3, r3, #24
 800630e:	4973      	ldr	r1, [pc, #460]	; (80064dc <HAL_RCC_OscConfig+0x504>)
 8006310:	4313      	orrs	r3, r2
 8006312:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006314:	e040      	b.n	8006398 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d023      	beq.n	8006366 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800631e:	4b6f      	ldr	r3, [pc, #444]	; (80064dc <HAL_RCC_OscConfig+0x504>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a6e      	ldr	r2, [pc, #440]	; (80064dc <HAL_RCC_OscConfig+0x504>)
 8006324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006328:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800632a:	f7fe ffa3 	bl	8005274 <HAL_GetTick>
 800632e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006330:	e008      	b.n	8006344 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006332:	f7fe ff9f 	bl	8005274 <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	2b02      	cmp	r3, #2
 800633e:	d901      	bls.n	8006344 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	e255      	b.n	80067f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006344:	4b65      	ldr	r3, [pc, #404]	; (80064dc <HAL_RCC_OscConfig+0x504>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800634c:	2b00      	cmp	r3, #0
 800634e:	d0f0      	beq.n	8006332 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006350:	4b62      	ldr	r3, [pc, #392]	; (80064dc <HAL_RCC_OscConfig+0x504>)
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	061b      	lsls	r3, r3, #24
 800635e:	495f      	ldr	r1, [pc, #380]	; (80064dc <HAL_RCC_OscConfig+0x504>)
 8006360:	4313      	orrs	r3, r2
 8006362:	604b      	str	r3, [r1, #4]
 8006364:	e018      	b.n	8006398 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006366:	4b5d      	ldr	r3, [pc, #372]	; (80064dc <HAL_RCC_OscConfig+0x504>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a5c      	ldr	r2, [pc, #368]	; (80064dc <HAL_RCC_OscConfig+0x504>)
 800636c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006370:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006372:	f7fe ff7f 	bl	8005274 <HAL_GetTick>
 8006376:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006378:	e008      	b.n	800638c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800637a:	f7fe ff7b 	bl	8005274 <HAL_GetTick>
 800637e:	4602      	mov	r2, r0
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	2b02      	cmp	r3, #2
 8006386:	d901      	bls.n	800638c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	e231      	b.n	80067f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800638c:	4b53      	ldr	r3, [pc, #332]	; (80064dc <HAL_RCC_OscConfig+0x504>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006394:	2b00      	cmp	r3, #0
 8006396:	d1f0      	bne.n	800637a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0308 	and.w	r3, r3, #8
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d03c      	beq.n	800641e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d01c      	beq.n	80063e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063ac:	4b4b      	ldr	r3, [pc, #300]	; (80064dc <HAL_RCC_OscConfig+0x504>)
 80063ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063b2:	4a4a      	ldr	r2, [pc, #296]	; (80064dc <HAL_RCC_OscConfig+0x504>)
 80063b4:	f043 0301 	orr.w	r3, r3, #1
 80063b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063bc:	f7fe ff5a 	bl	8005274 <HAL_GetTick>
 80063c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80063c2:	e008      	b.n	80063d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063c4:	f7fe ff56 	bl	8005274 <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d901      	bls.n	80063d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e20c      	b.n	80067f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80063d6:	4b41      	ldr	r3, [pc, #260]	; (80064dc <HAL_RCC_OscConfig+0x504>)
 80063d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063dc:	f003 0302 	and.w	r3, r3, #2
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d0ef      	beq.n	80063c4 <HAL_RCC_OscConfig+0x3ec>
 80063e4:	e01b      	b.n	800641e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063e6:	4b3d      	ldr	r3, [pc, #244]	; (80064dc <HAL_RCC_OscConfig+0x504>)
 80063e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063ec:	4a3b      	ldr	r2, [pc, #236]	; (80064dc <HAL_RCC_OscConfig+0x504>)
 80063ee:	f023 0301 	bic.w	r3, r3, #1
 80063f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063f6:	f7fe ff3d 	bl	8005274 <HAL_GetTick>
 80063fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80063fc:	e008      	b.n	8006410 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063fe:	f7fe ff39 	bl	8005274 <HAL_GetTick>
 8006402:	4602      	mov	r2, r0
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	2b02      	cmp	r3, #2
 800640a:	d901      	bls.n	8006410 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800640c:	2303      	movs	r3, #3
 800640e:	e1ef      	b.n	80067f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006410:	4b32      	ldr	r3, [pc, #200]	; (80064dc <HAL_RCC_OscConfig+0x504>)
 8006412:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006416:	f003 0302 	and.w	r3, r3, #2
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1ef      	bne.n	80063fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0304 	and.w	r3, r3, #4
 8006426:	2b00      	cmp	r3, #0
 8006428:	f000 80a6 	beq.w	8006578 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800642c:	2300      	movs	r3, #0
 800642e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006430:	4b2a      	ldr	r3, [pc, #168]	; (80064dc <HAL_RCC_OscConfig+0x504>)
 8006432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006438:	2b00      	cmp	r3, #0
 800643a:	d10d      	bne.n	8006458 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800643c:	4b27      	ldr	r3, [pc, #156]	; (80064dc <HAL_RCC_OscConfig+0x504>)
 800643e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006440:	4a26      	ldr	r2, [pc, #152]	; (80064dc <HAL_RCC_OscConfig+0x504>)
 8006442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006446:	6593      	str	r3, [r2, #88]	; 0x58
 8006448:	4b24      	ldr	r3, [pc, #144]	; (80064dc <HAL_RCC_OscConfig+0x504>)
 800644a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800644c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006450:	60bb      	str	r3, [r7, #8]
 8006452:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006454:	2301      	movs	r3, #1
 8006456:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006458:	4b21      	ldr	r3, [pc, #132]	; (80064e0 <HAL_RCC_OscConfig+0x508>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006460:	2b00      	cmp	r3, #0
 8006462:	d118      	bne.n	8006496 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006464:	4b1e      	ldr	r3, [pc, #120]	; (80064e0 <HAL_RCC_OscConfig+0x508>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a1d      	ldr	r2, [pc, #116]	; (80064e0 <HAL_RCC_OscConfig+0x508>)
 800646a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800646e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006470:	f7fe ff00 	bl	8005274 <HAL_GetTick>
 8006474:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006476:	e008      	b.n	800648a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006478:	f7fe fefc 	bl	8005274 <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	2b02      	cmp	r3, #2
 8006484:	d901      	bls.n	800648a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e1b2      	b.n	80067f0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800648a:	4b15      	ldr	r3, [pc, #84]	; (80064e0 <HAL_RCC_OscConfig+0x508>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006492:	2b00      	cmp	r3, #0
 8006494:	d0f0      	beq.n	8006478 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	2b01      	cmp	r3, #1
 800649c:	d108      	bne.n	80064b0 <HAL_RCC_OscConfig+0x4d8>
 800649e:	4b0f      	ldr	r3, [pc, #60]	; (80064dc <HAL_RCC_OscConfig+0x504>)
 80064a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a4:	4a0d      	ldr	r2, [pc, #52]	; (80064dc <HAL_RCC_OscConfig+0x504>)
 80064a6:	f043 0301 	orr.w	r3, r3, #1
 80064aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80064ae:	e029      	b.n	8006504 <HAL_RCC_OscConfig+0x52c>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	2b05      	cmp	r3, #5
 80064b6:	d115      	bne.n	80064e4 <HAL_RCC_OscConfig+0x50c>
 80064b8:	4b08      	ldr	r3, [pc, #32]	; (80064dc <HAL_RCC_OscConfig+0x504>)
 80064ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064be:	4a07      	ldr	r2, [pc, #28]	; (80064dc <HAL_RCC_OscConfig+0x504>)
 80064c0:	f043 0304 	orr.w	r3, r3, #4
 80064c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80064c8:	4b04      	ldr	r3, [pc, #16]	; (80064dc <HAL_RCC_OscConfig+0x504>)
 80064ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ce:	4a03      	ldr	r2, [pc, #12]	; (80064dc <HAL_RCC_OscConfig+0x504>)
 80064d0:	f043 0301 	orr.w	r3, r3, #1
 80064d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80064d8:	e014      	b.n	8006504 <HAL_RCC_OscConfig+0x52c>
 80064da:	bf00      	nop
 80064dc:	40021000 	.word	0x40021000
 80064e0:	40007000 	.word	0x40007000
 80064e4:	4b9a      	ldr	r3, [pc, #616]	; (8006750 <HAL_RCC_OscConfig+0x778>)
 80064e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ea:	4a99      	ldr	r2, [pc, #612]	; (8006750 <HAL_RCC_OscConfig+0x778>)
 80064ec:	f023 0301 	bic.w	r3, r3, #1
 80064f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80064f4:	4b96      	ldr	r3, [pc, #600]	; (8006750 <HAL_RCC_OscConfig+0x778>)
 80064f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064fa:	4a95      	ldr	r2, [pc, #596]	; (8006750 <HAL_RCC_OscConfig+0x778>)
 80064fc:	f023 0304 	bic.w	r3, r3, #4
 8006500:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d016      	beq.n	800653a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800650c:	f7fe feb2 	bl	8005274 <HAL_GetTick>
 8006510:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006512:	e00a      	b.n	800652a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006514:	f7fe feae 	bl	8005274 <HAL_GetTick>
 8006518:	4602      	mov	r2, r0
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006522:	4293      	cmp	r3, r2
 8006524:	d901      	bls.n	800652a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	e162      	b.n	80067f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800652a:	4b89      	ldr	r3, [pc, #548]	; (8006750 <HAL_RCC_OscConfig+0x778>)
 800652c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006530:	f003 0302 	and.w	r3, r3, #2
 8006534:	2b00      	cmp	r3, #0
 8006536:	d0ed      	beq.n	8006514 <HAL_RCC_OscConfig+0x53c>
 8006538:	e015      	b.n	8006566 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800653a:	f7fe fe9b 	bl	8005274 <HAL_GetTick>
 800653e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006540:	e00a      	b.n	8006558 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006542:	f7fe fe97 	bl	8005274 <HAL_GetTick>
 8006546:	4602      	mov	r2, r0
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006550:	4293      	cmp	r3, r2
 8006552:	d901      	bls.n	8006558 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006554:	2303      	movs	r3, #3
 8006556:	e14b      	b.n	80067f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006558:	4b7d      	ldr	r3, [pc, #500]	; (8006750 <HAL_RCC_OscConfig+0x778>)
 800655a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800655e:	f003 0302 	and.w	r3, r3, #2
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1ed      	bne.n	8006542 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006566:	7ffb      	ldrb	r3, [r7, #31]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d105      	bne.n	8006578 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800656c:	4b78      	ldr	r3, [pc, #480]	; (8006750 <HAL_RCC_OscConfig+0x778>)
 800656e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006570:	4a77      	ldr	r2, [pc, #476]	; (8006750 <HAL_RCC_OscConfig+0x778>)
 8006572:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006576:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0320 	and.w	r3, r3, #32
 8006580:	2b00      	cmp	r3, #0
 8006582:	d03c      	beq.n	80065fe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006588:	2b00      	cmp	r3, #0
 800658a:	d01c      	beq.n	80065c6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800658c:	4b70      	ldr	r3, [pc, #448]	; (8006750 <HAL_RCC_OscConfig+0x778>)
 800658e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006592:	4a6f      	ldr	r2, [pc, #444]	; (8006750 <HAL_RCC_OscConfig+0x778>)
 8006594:	f043 0301 	orr.w	r3, r3, #1
 8006598:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800659c:	f7fe fe6a 	bl	8005274 <HAL_GetTick>
 80065a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80065a2:	e008      	b.n	80065b6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80065a4:	f7fe fe66 	bl	8005274 <HAL_GetTick>
 80065a8:	4602      	mov	r2, r0
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d901      	bls.n	80065b6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e11c      	b.n	80067f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80065b6:	4b66      	ldr	r3, [pc, #408]	; (8006750 <HAL_RCC_OscConfig+0x778>)
 80065b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065bc:	f003 0302 	and.w	r3, r3, #2
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d0ef      	beq.n	80065a4 <HAL_RCC_OscConfig+0x5cc>
 80065c4:	e01b      	b.n	80065fe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80065c6:	4b62      	ldr	r3, [pc, #392]	; (8006750 <HAL_RCC_OscConfig+0x778>)
 80065c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065cc:	4a60      	ldr	r2, [pc, #384]	; (8006750 <HAL_RCC_OscConfig+0x778>)
 80065ce:	f023 0301 	bic.w	r3, r3, #1
 80065d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065d6:	f7fe fe4d 	bl	8005274 <HAL_GetTick>
 80065da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80065dc:	e008      	b.n	80065f0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80065de:	f7fe fe49 	bl	8005274 <HAL_GetTick>
 80065e2:	4602      	mov	r2, r0
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	1ad3      	subs	r3, r2, r3
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d901      	bls.n	80065f0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e0ff      	b.n	80067f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80065f0:	4b57      	ldr	r3, [pc, #348]	; (8006750 <HAL_RCC_OscConfig+0x778>)
 80065f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065f6:	f003 0302 	and.w	r3, r3, #2
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1ef      	bne.n	80065de <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006602:	2b00      	cmp	r3, #0
 8006604:	f000 80f3 	beq.w	80067ee <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800660c:	2b02      	cmp	r3, #2
 800660e:	f040 80c9 	bne.w	80067a4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006612:	4b4f      	ldr	r3, [pc, #316]	; (8006750 <HAL_RCC_OscConfig+0x778>)
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	f003 0203 	and.w	r2, r3, #3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006622:	429a      	cmp	r2, r3
 8006624:	d12c      	bne.n	8006680 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006630:	3b01      	subs	r3, #1
 8006632:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006634:	429a      	cmp	r2, r3
 8006636:	d123      	bne.n	8006680 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006642:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006644:	429a      	cmp	r2, r3
 8006646:	d11b      	bne.n	8006680 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006652:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006654:	429a      	cmp	r2, r3
 8006656:	d113      	bne.n	8006680 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006662:	085b      	lsrs	r3, r3, #1
 8006664:	3b01      	subs	r3, #1
 8006666:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006668:	429a      	cmp	r2, r3
 800666a:	d109      	bne.n	8006680 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006676:	085b      	lsrs	r3, r3, #1
 8006678:	3b01      	subs	r3, #1
 800667a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800667c:	429a      	cmp	r2, r3
 800667e:	d06b      	beq.n	8006758 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	2b0c      	cmp	r3, #12
 8006684:	d062      	beq.n	800674c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006686:	4b32      	ldr	r3, [pc, #200]	; (8006750 <HAL_RCC_OscConfig+0x778>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d001      	beq.n	8006696 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e0ac      	b.n	80067f0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006696:	4b2e      	ldr	r3, [pc, #184]	; (8006750 <HAL_RCC_OscConfig+0x778>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a2d      	ldr	r2, [pc, #180]	; (8006750 <HAL_RCC_OscConfig+0x778>)
 800669c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066a0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80066a2:	f7fe fde7 	bl	8005274 <HAL_GetTick>
 80066a6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066a8:	e008      	b.n	80066bc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066aa:	f7fe fde3 	bl	8005274 <HAL_GetTick>
 80066ae:	4602      	mov	r2, r0
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	d901      	bls.n	80066bc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e099      	b.n	80067f0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066bc:	4b24      	ldr	r3, [pc, #144]	; (8006750 <HAL_RCC_OscConfig+0x778>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1f0      	bne.n	80066aa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066c8:	4b21      	ldr	r3, [pc, #132]	; (8006750 <HAL_RCC_OscConfig+0x778>)
 80066ca:	68da      	ldr	r2, [r3, #12]
 80066cc:	4b21      	ldr	r3, [pc, #132]	; (8006754 <HAL_RCC_OscConfig+0x77c>)
 80066ce:	4013      	ands	r3, r2
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80066d8:	3a01      	subs	r2, #1
 80066da:	0112      	lsls	r2, r2, #4
 80066dc:	4311      	orrs	r1, r2
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80066e2:	0212      	lsls	r2, r2, #8
 80066e4:	4311      	orrs	r1, r2
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80066ea:	0852      	lsrs	r2, r2, #1
 80066ec:	3a01      	subs	r2, #1
 80066ee:	0552      	lsls	r2, r2, #21
 80066f0:	4311      	orrs	r1, r2
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80066f6:	0852      	lsrs	r2, r2, #1
 80066f8:	3a01      	subs	r2, #1
 80066fa:	0652      	lsls	r2, r2, #25
 80066fc:	4311      	orrs	r1, r2
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006702:	06d2      	lsls	r2, r2, #27
 8006704:	430a      	orrs	r2, r1
 8006706:	4912      	ldr	r1, [pc, #72]	; (8006750 <HAL_RCC_OscConfig+0x778>)
 8006708:	4313      	orrs	r3, r2
 800670a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800670c:	4b10      	ldr	r3, [pc, #64]	; (8006750 <HAL_RCC_OscConfig+0x778>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a0f      	ldr	r2, [pc, #60]	; (8006750 <HAL_RCC_OscConfig+0x778>)
 8006712:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006716:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006718:	4b0d      	ldr	r3, [pc, #52]	; (8006750 <HAL_RCC_OscConfig+0x778>)
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	4a0c      	ldr	r2, [pc, #48]	; (8006750 <HAL_RCC_OscConfig+0x778>)
 800671e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006722:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006724:	f7fe fda6 	bl	8005274 <HAL_GetTick>
 8006728:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800672a:	e008      	b.n	800673e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800672c:	f7fe fda2 	bl	8005274 <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	2b02      	cmp	r3, #2
 8006738:	d901      	bls.n	800673e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e058      	b.n	80067f0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800673e:	4b04      	ldr	r3, [pc, #16]	; (8006750 <HAL_RCC_OscConfig+0x778>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d0f0      	beq.n	800672c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800674a:	e050      	b.n	80067ee <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	e04f      	b.n	80067f0 <HAL_RCC_OscConfig+0x818>
 8006750:	40021000 	.word	0x40021000
 8006754:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006758:	4b27      	ldr	r3, [pc, #156]	; (80067f8 <HAL_RCC_OscConfig+0x820>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006760:	2b00      	cmp	r3, #0
 8006762:	d144      	bne.n	80067ee <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006764:	4b24      	ldr	r3, [pc, #144]	; (80067f8 <HAL_RCC_OscConfig+0x820>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a23      	ldr	r2, [pc, #140]	; (80067f8 <HAL_RCC_OscConfig+0x820>)
 800676a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800676e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006770:	4b21      	ldr	r3, [pc, #132]	; (80067f8 <HAL_RCC_OscConfig+0x820>)
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	4a20      	ldr	r2, [pc, #128]	; (80067f8 <HAL_RCC_OscConfig+0x820>)
 8006776:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800677a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800677c:	f7fe fd7a 	bl	8005274 <HAL_GetTick>
 8006780:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006782:	e008      	b.n	8006796 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006784:	f7fe fd76 	bl	8005274 <HAL_GetTick>
 8006788:	4602      	mov	r2, r0
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	2b02      	cmp	r3, #2
 8006790:	d901      	bls.n	8006796 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e02c      	b.n	80067f0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006796:	4b18      	ldr	r3, [pc, #96]	; (80067f8 <HAL_RCC_OscConfig+0x820>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d0f0      	beq.n	8006784 <HAL_RCC_OscConfig+0x7ac>
 80067a2:	e024      	b.n	80067ee <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	2b0c      	cmp	r3, #12
 80067a8:	d01f      	beq.n	80067ea <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067aa:	4b13      	ldr	r3, [pc, #76]	; (80067f8 <HAL_RCC_OscConfig+0x820>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a12      	ldr	r2, [pc, #72]	; (80067f8 <HAL_RCC_OscConfig+0x820>)
 80067b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067b6:	f7fe fd5d 	bl	8005274 <HAL_GetTick>
 80067ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067bc:	e008      	b.n	80067d0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067be:	f7fe fd59 	bl	8005274 <HAL_GetTick>
 80067c2:	4602      	mov	r2, r0
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d901      	bls.n	80067d0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e00f      	b.n	80067f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067d0:	4b09      	ldr	r3, [pc, #36]	; (80067f8 <HAL_RCC_OscConfig+0x820>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1f0      	bne.n	80067be <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80067dc:	4b06      	ldr	r3, [pc, #24]	; (80067f8 <HAL_RCC_OscConfig+0x820>)
 80067de:	68da      	ldr	r2, [r3, #12]
 80067e0:	4905      	ldr	r1, [pc, #20]	; (80067f8 <HAL_RCC_OscConfig+0x820>)
 80067e2:	4b06      	ldr	r3, [pc, #24]	; (80067fc <HAL_RCC_OscConfig+0x824>)
 80067e4:	4013      	ands	r3, r2
 80067e6:	60cb      	str	r3, [r1, #12]
 80067e8:	e001      	b.n	80067ee <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e000      	b.n	80067f0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3720      	adds	r7, #32
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	40021000 	.word	0x40021000
 80067fc:	feeefffc 	.word	0xfeeefffc

08006800 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d101      	bne.n	8006814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e0e7      	b.n	80069e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006814:	4b75      	ldr	r3, [pc, #468]	; (80069ec <HAL_RCC_ClockConfig+0x1ec>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0307 	and.w	r3, r3, #7
 800681c:	683a      	ldr	r2, [r7, #0]
 800681e:	429a      	cmp	r2, r3
 8006820:	d910      	bls.n	8006844 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006822:	4b72      	ldr	r3, [pc, #456]	; (80069ec <HAL_RCC_ClockConfig+0x1ec>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f023 0207 	bic.w	r2, r3, #7
 800682a:	4970      	ldr	r1, [pc, #448]	; (80069ec <HAL_RCC_ClockConfig+0x1ec>)
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	4313      	orrs	r3, r2
 8006830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006832:	4b6e      	ldr	r3, [pc, #440]	; (80069ec <HAL_RCC_ClockConfig+0x1ec>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0307 	and.w	r3, r3, #7
 800683a:	683a      	ldr	r2, [r7, #0]
 800683c:	429a      	cmp	r2, r3
 800683e:	d001      	beq.n	8006844 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	e0cf      	b.n	80069e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0302 	and.w	r3, r3, #2
 800684c:	2b00      	cmp	r3, #0
 800684e:	d010      	beq.n	8006872 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	689a      	ldr	r2, [r3, #8]
 8006854:	4b66      	ldr	r3, [pc, #408]	; (80069f0 <HAL_RCC_ClockConfig+0x1f0>)
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800685c:	429a      	cmp	r2, r3
 800685e:	d908      	bls.n	8006872 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006860:	4b63      	ldr	r3, [pc, #396]	; (80069f0 <HAL_RCC_ClockConfig+0x1f0>)
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	4960      	ldr	r1, [pc, #384]	; (80069f0 <HAL_RCC_ClockConfig+0x1f0>)
 800686e:	4313      	orrs	r3, r2
 8006870:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	2b00      	cmp	r3, #0
 800687c:	d04c      	beq.n	8006918 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	2b03      	cmp	r3, #3
 8006884:	d107      	bne.n	8006896 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006886:	4b5a      	ldr	r3, [pc, #360]	; (80069f0 <HAL_RCC_ClockConfig+0x1f0>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800688e:	2b00      	cmp	r3, #0
 8006890:	d121      	bne.n	80068d6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e0a6      	b.n	80069e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	2b02      	cmp	r3, #2
 800689c:	d107      	bne.n	80068ae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800689e:	4b54      	ldr	r3, [pc, #336]	; (80069f0 <HAL_RCC_ClockConfig+0x1f0>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d115      	bne.n	80068d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e09a      	b.n	80069e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d107      	bne.n	80068c6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80068b6:	4b4e      	ldr	r3, [pc, #312]	; (80069f0 <HAL_RCC_ClockConfig+0x1f0>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 0302 	and.w	r3, r3, #2
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d109      	bne.n	80068d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e08e      	b.n	80069e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068c6:	4b4a      	ldr	r3, [pc, #296]	; (80069f0 <HAL_RCC_ClockConfig+0x1f0>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d101      	bne.n	80068d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e086      	b.n	80069e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80068d6:	4b46      	ldr	r3, [pc, #280]	; (80069f0 <HAL_RCC_ClockConfig+0x1f0>)
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	f023 0203 	bic.w	r2, r3, #3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	4943      	ldr	r1, [pc, #268]	; (80069f0 <HAL_RCC_ClockConfig+0x1f0>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068e8:	f7fe fcc4 	bl	8005274 <HAL_GetTick>
 80068ec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068ee:	e00a      	b.n	8006906 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068f0:	f7fe fcc0 	bl	8005274 <HAL_GetTick>
 80068f4:	4602      	mov	r2, r0
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80068fe:	4293      	cmp	r3, r2
 8006900:	d901      	bls.n	8006906 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006902:	2303      	movs	r3, #3
 8006904:	e06e      	b.n	80069e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006906:	4b3a      	ldr	r3, [pc, #232]	; (80069f0 <HAL_RCC_ClockConfig+0x1f0>)
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f003 020c 	and.w	r2, r3, #12
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	429a      	cmp	r2, r3
 8006916:	d1eb      	bne.n	80068f0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0302 	and.w	r3, r3, #2
 8006920:	2b00      	cmp	r3, #0
 8006922:	d010      	beq.n	8006946 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	689a      	ldr	r2, [r3, #8]
 8006928:	4b31      	ldr	r3, [pc, #196]	; (80069f0 <HAL_RCC_ClockConfig+0x1f0>)
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006930:	429a      	cmp	r2, r3
 8006932:	d208      	bcs.n	8006946 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006934:	4b2e      	ldr	r3, [pc, #184]	; (80069f0 <HAL_RCC_ClockConfig+0x1f0>)
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	492b      	ldr	r1, [pc, #172]	; (80069f0 <HAL_RCC_ClockConfig+0x1f0>)
 8006942:	4313      	orrs	r3, r2
 8006944:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006946:	4b29      	ldr	r3, [pc, #164]	; (80069ec <HAL_RCC_ClockConfig+0x1ec>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0307 	and.w	r3, r3, #7
 800694e:	683a      	ldr	r2, [r7, #0]
 8006950:	429a      	cmp	r2, r3
 8006952:	d210      	bcs.n	8006976 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006954:	4b25      	ldr	r3, [pc, #148]	; (80069ec <HAL_RCC_ClockConfig+0x1ec>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f023 0207 	bic.w	r2, r3, #7
 800695c:	4923      	ldr	r1, [pc, #140]	; (80069ec <HAL_RCC_ClockConfig+0x1ec>)
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	4313      	orrs	r3, r2
 8006962:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006964:	4b21      	ldr	r3, [pc, #132]	; (80069ec <HAL_RCC_ClockConfig+0x1ec>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 0307 	and.w	r3, r3, #7
 800696c:	683a      	ldr	r2, [r7, #0]
 800696e:	429a      	cmp	r2, r3
 8006970:	d001      	beq.n	8006976 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e036      	b.n	80069e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 0304 	and.w	r3, r3, #4
 800697e:	2b00      	cmp	r3, #0
 8006980:	d008      	beq.n	8006994 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006982:	4b1b      	ldr	r3, [pc, #108]	; (80069f0 <HAL_RCC_ClockConfig+0x1f0>)
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	4918      	ldr	r1, [pc, #96]	; (80069f0 <HAL_RCC_ClockConfig+0x1f0>)
 8006990:	4313      	orrs	r3, r2
 8006992:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0308 	and.w	r3, r3, #8
 800699c:	2b00      	cmp	r3, #0
 800699e:	d009      	beq.n	80069b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80069a0:	4b13      	ldr	r3, [pc, #76]	; (80069f0 <HAL_RCC_ClockConfig+0x1f0>)
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	00db      	lsls	r3, r3, #3
 80069ae:	4910      	ldr	r1, [pc, #64]	; (80069f0 <HAL_RCC_ClockConfig+0x1f0>)
 80069b0:	4313      	orrs	r3, r2
 80069b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80069b4:	f000 f824 	bl	8006a00 <HAL_RCC_GetSysClockFreq>
 80069b8:	4602      	mov	r2, r0
 80069ba:	4b0d      	ldr	r3, [pc, #52]	; (80069f0 <HAL_RCC_ClockConfig+0x1f0>)
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	091b      	lsrs	r3, r3, #4
 80069c0:	f003 030f 	and.w	r3, r3, #15
 80069c4:	490b      	ldr	r1, [pc, #44]	; (80069f4 <HAL_RCC_ClockConfig+0x1f4>)
 80069c6:	5ccb      	ldrb	r3, [r1, r3]
 80069c8:	f003 031f 	and.w	r3, r3, #31
 80069cc:	fa22 f303 	lsr.w	r3, r2, r3
 80069d0:	4a09      	ldr	r2, [pc, #36]	; (80069f8 <HAL_RCC_ClockConfig+0x1f8>)
 80069d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80069d4:	4b09      	ldr	r3, [pc, #36]	; (80069fc <HAL_RCC_ClockConfig+0x1fc>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4618      	mov	r0, r3
 80069da:	f7fe fc0f 	bl	80051fc <HAL_InitTick>
 80069de:	4603      	mov	r3, r0
 80069e0:	72fb      	strb	r3, [r7, #11]

  return status;
 80069e2:	7afb      	ldrb	r3, [r7, #11]
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	40022000 	.word	0x40022000
 80069f0:	40021000 	.word	0x40021000
 80069f4:	0800b7f0 	.word	0x0800b7f0
 80069f8:	20000100 	.word	0x20000100
 80069fc:	2000000c 	.word	0x2000000c

08006a00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b089      	sub	sp, #36	; 0x24
 8006a04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006a06:	2300      	movs	r3, #0
 8006a08:	61fb      	str	r3, [r7, #28]
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a0e:	4b3e      	ldr	r3, [pc, #248]	; (8006b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	f003 030c 	and.w	r3, r3, #12
 8006a16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a18:	4b3b      	ldr	r3, [pc, #236]	; (8006b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	f003 0303 	and.w	r3, r3, #3
 8006a20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d005      	beq.n	8006a34 <HAL_RCC_GetSysClockFreq+0x34>
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	2b0c      	cmp	r3, #12
 8006a2c:	d121      	bne.n	8006a72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d11e      	bne.n	8006a72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006a34:	4b34      	ldr	r3, [pc, #208]	; (8006b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 0308 	and.w	r3, r3, #8
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d107      	bne.n	8006a50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006a40:	4b31      	ldr	r3, [pc, #196]	; (8006b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a46:	0a1b      	lsrs	r3, r3, #8
 8006a48:	f003 030f 	and.w	r3, r3, #15
 8006a4c:	61fb      	str	r3, [r7, #28]
 8006a4e:	e005      	b.n	8006a5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006a50:	4b2d      	ldr	r3, [pc, #180]	; (8006b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	091b      	lsrs	r3, r3, #4
 8006a56:	f003 030f 	and.w	r3, r3, #15
 8006a5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006a5c:	4a2b      	ldr	r2, [pc, #172]	; (8006b0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d10d      	bne.n	8006a88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006a70:	e00a      	b.n	8006a88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	2b04      	cmp	r3, #4
 8006a76:	d102      	bne.n	8006a7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006a78:	4b25      	ldr	r3, [pc, #148]	; (8006b10 <HAL_RCC_GetSysClockFreq+0x110>)
 8006a7a:	61bb      	str	r3, [r7, #24]
 8006a7c:	e004      	b.n	8006a88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	2b08      	cmp	r3, #8
 8006a82:	d101      	bne.n	8006a88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006a84:	4b23      	ldr	r3, [pc, #140]	; (8006b14 <HAL_RCC_GetSysClockFreq+0x114>)
 8006a86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	2b0c      	cmp	r3, #12
 8006a8c:	d134      	bne.n	8006af8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006a8e:	4b1e      	ldr	r3, [pc, #120]	; (8006b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	f003 0303 	and.w	r3, r3, #3
 8006a96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d003      	beq.n	8006aa6 <HAL_RCC_GetSysClockFreq+0xa6>
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	2b03      	cmp	r3, #3
 8006aa2:	d003      	beq.n	8006aac <HAL_RCC_GetSysClockFreq+0xac>
 8006aa4:	e005      	b.n	8006ab2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006aa6:	4b1a      	ldr	r3, [pc, #104]	; (8006b10 <HAL_RCC_GetSysClockFreq+0x110>)
 8006aa8:	617b      	str	r3, [r7, #20]
      break;
 8006aaa:	e005      	b.n	8006ab8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006aac:	4b19      	ldr	r3, [pc, #100]	; (8006b14 <HAL_RCC_GetSysClockFreq+0x114>)
 8006aae:	617b      	str	r3, [r7, #20]
      break;
 8006ab0:	e002      	b.n	8006ab8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	617b      	str	r3, [r7, #20]
      break;
 8006ab6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006ab8:	4b13      	ldr	r3, [pc, #76]	; (8006b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	091b      	lsrs	r3, r3, #4
 8006abe:	f003 0307 	and.w	r3, r3, #7
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006ac6:	4b10      	ldr	r3, [pc, #64]	; (8006b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	0a1b      	lsrs	r3, r3, #8
 8006acc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ad0:	697a      	ldr	r2, [r7, #20]
 8006ad2:	fb03 f202 	mul.w	r2, r3, r2
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006adc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006ade:	4b0a      	ldr	r3, [pc, #40]	; (8006b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	0e5b      	lsrs	r3, r3, #25
 8006ae4:	f003 0303 	and.w	r3, r3, #3
 8006ae8:	3301      	adds	r3, #1
 8006aea:	005b      	lsls	r3, r3, #1
 8006aec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006af6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006af8:	69bb      	ldr	r3, [r7, #24]
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3724      	adds	r7, #36	; 0x24
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	40021000 	.word	0x40021000
 8006b0c:	0800b808 	.word	0x0800b808
 8006b10:	00f42400 	.word	0x00f42400
 8006b14:	02dc6c00 	.word	0x02dc6c00

08006b18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b1c:	4b03      	ldr	r3, [pc, #12]	; (8006b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	20000100 	.word	0x20000100

08006b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006b34:	f7ff fff0 	bl	8006b18 <HAL_RCC_GetHCLKFreq>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	4b06      	ldr	r3, [pc, #24]	; (8006b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	0a1b      	lsrs	r3, r3, #8
 8006b40:	f003 0307 	and.w	r3, r3, #7
 8006b44:	4904      	ldr	r1, [pc, #16]	; (8006b58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006b46:	5ccb      	ldrb	r3, [r1, r3]
 8006b48:	f003 031f 	and.w	r3, r3, #31
 8006b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	40021000 	.word	0x40021000
 8006b58:	0800b800 	.word	0x0800b800

08006b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006b60:	f7ff ffda 	bl	8006b18 <HAL_RCC_GetHCLKFreq>
 8006b64:	4602      	mov	r2, r0
 8006b66:	4b06      	ldr	r3, [pc, #24]	; (8006b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	0adb      	lsrs	r3, r3, #11
 8006b6c:	f003 0307 	and.w	r3, r3, #7
 8006b70:	4904      	ldr	r1, [pc, #16]	; (8006b84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006b72:	5ccb      	ldrb	r3, [r1, r3]
 8006b74:	f003 031f 	and.w	r3, r3, #31
 8006b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	40021000 	.word	0x40021000
 8006b84:	0800b800 	.word	0x0800b800

08006b88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b086      	sub	sp, #24
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006b90:	2300      	movs	r3, #0
 8006b92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006b94:	4b2a      	ldr	r3, [pc, #168]	; (8006c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d003      	beq.n	8006ba8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006ba0:	f7ff f9b6 	bl	8005f10 <HAL_PWREx_GetVoltageRange>
 8006ba4:	6178      	str	r0, [r7, #20]
 8006ba6:	e014      	b.n	8006bd2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ba8:	4b25      	ldr	r3, [pc, #148]	; (8006c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bac:	4a24      	ldr	r2, [pc, #144]	; (8006c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bb2:	6593      	str	r3, [r2, #88]	; 0x58
 8006bb4:	4b22      	ldr	r3, [pc, #136]	; (8006c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bbc:	60fb      	str	r3, [r7, #12]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006bc0:	f7ff f9a6 	bl	8005f10 <HAL_PWREx_GetVoltageRange>
 8006bc4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006bc6:	4b1e      	ldr	r3, [pc, #120]	; (8006c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bca:	4a1d      	ldr	r2, [pc, #116]	; (8006c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bd0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bd8:	d10b      	bne.n	8006bf2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2b80      	cmp	r3, #128	; 0x80
 8006bde:	d919      	bls.n	8006c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2ba0      	cmp	r3, #160	; 0xa0
 8006be4:	d902      	bls.n	8006bec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006be6:	2302      	movs	r3, #2
 8006be8:	613b      	str	r3, [r7, #16]
 8006bea:	e013      	b.n	8006c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006bec:	2301      	movs	r3, #1
 8006bee:	613b      	str	r3, [r7, #16]
 8006bf0:	e010      	b.n	8006c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2b80      	cmp	r3, #128	; 0x80
 8006bf6:	d902      	bls.n	8006bfe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	613b      	str	r3, [r7, #16]
 8006bfc:	e00a      	b.n	8006c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2b80      	cmp	r3, #128	; 0x80
 8006c02:	d102      	bne.n	8006c0a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006c04:	2302      	movs	r3, #2
 8006c06:	613b      	str	r3, [r7, #16]
 8006c08:	e004      	b.n	8006c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2b70      	cmp	r3, #112	; 0x70
 8006c0e:	d101      	bne.n	8006c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006c10:	2301      	movs	r3, #1
 8006c12:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006c14:	4b0b      	ldr	r3, [pc, #44]	; (8006c44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f023 0207 	bic.w	r2, r3, #7
 8006c1c:	4909      	ldr	r1, [pc, #36]	; (8006c44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006c24:	4b07      	ldr	r3, [pc, #28]	; (8006c44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0307 	and.w	r3, r3, #7
 8006c2c:	693a      	ldr	r2, [r7, #16]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d001      	beq.n	8006c36 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e000      	b.n	8006c38 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3718      	adds	r7, #24
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	40021000 	.word	0x40021000
 8006c44:	40022000 	.word	0x40022000

08006c48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b086      	sub	sp, #24
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006c50:	2300      	movs	r3, #0
 8006c52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c54:	2300      	movs	r3, #0
 8006c56:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d031      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c68:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006c6c:	d01a      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006c6e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006c72:	d814      	bhi.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d009      	beq.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006c78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c7c:	d10f      	bne.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006c7e:	4b5d      	ldr	r3, [pc, #372]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	4a5c      	ldr	r2, [pc, #368]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c88:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006c8a:	e00c      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	3304      	adds	r3, #4
 8006c90:	2100      	movs	r1, #0
 8006c92:	4618      	mov	r0, r3
 8006c94:	f000 f9f0 	bl	8007078 <RCCEx_PLLSAI1_Config>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006c9c:	e003      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	74fb      	strb	r3, [r7, #19]
      break;
 8006ca2:	e000      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006ca4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ca6:	7cfb      	ldrb	r3, [r7, #19]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10b      	bne.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006cac:	4b51      	ldr	r3, [pc, #324]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cb2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cba:	494e      	ldr	r1, [pc, #312]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006cc2:	e001      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc4:	7cfb      	ldrb	r3, [r7, #19]
 8006cc6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f000 809e 	beq.w	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006cda:	4b46      	ldr	r3, [pc, #280]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d101      	bne.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e000      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006cea:	2300      	movs	r3, #0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d00d      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cf0:	4b40      	ldr	r3, [pc, #256]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cf4:	4a3f      	ldr	r2, [pc, #252]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cfa:	6593      	str	r3, [r2, #88]	; 0x58
 8006cfc:	4b3d      	ldr	r3, [pc, #244]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d04:	60bb      	str	r3, [r7, #8]
 8006d06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d0c:	4b3a      	ldr	r3, [pc, #232]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a39      	ldr	r2, [pc, #228]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d18:	f7fe faac 	bl	8005274 <HAL_GetTick>
 8006d1c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006d1e:	e009      	b.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d20:	f7fe faa8 	bl	8005274 <HAL_GetTick>
 8006d24:	4602      	mov	r2, r0
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d902      	bls.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	74fb      	strb	r3, [r7, #19]
        break;
 8006d32:	e005      	b.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006d34:	4b30      	ldr	r3, [pc, #192]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d0ef      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006d40:	7cfb      	ldrb	r3, [r7, #19]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d15a      	bne.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006d46:	4b2b      	ldr	r3, [pc, #172]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d50:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d01e      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d5c:	697a      	ldr	r2, [r7, #20]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d019      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006d62:	4b24      	ldr	r3, [pc, #144]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d6c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d6e:	4b21      	ldr	r3, [pc, #132]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d74:	4a1f      	ldr	r2, [pc, #124]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d7e:	4b1d      	ldr	r3, [pc, #116]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d84:	4a1b      	ldr	r2, [pc, #108]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006d8e:	4a19      	ldr	r2, [pc, #100]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	f003 0301 	and.w	r3, r3, #1
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d016      	beq.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006da0:	f7fe fa68 	bl	8005274 <HAL_GetTick>
 8006da4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006da6:	e00b      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006da8:	f7fe fa64 	bl	8005274 <HAL_GetTick>
 8006dac:	4602      	mov	r2, r0
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d902      	bls.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	74fb      	strb	r3, [r7, #19]
            break;
 8006dbe:	e006      	b.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006dc0:	4b0c      	ldr	r3, [pc, #48]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dc6:	f003 0302 	and.w	r3, r3, #2
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d0ec      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006dce:	7cfb      	ldrb	r3, [r7, #19]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d10b      	bne.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006dd4:	4b07      	ldr	r3, [pc, #28]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006de2:	4904      	ldr	r1, [pc, #16]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006de4:	4313      	orrs	r3, r2
 8006de6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006dea:	e009      	b.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006dec:	7cfb      	ldrb	r3, [r7, #19]
 8006dee:	74bb      	strb	r3, [r7, #18]
 8006df0:	e006      	b.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006df2:	bf00      	nop
 8006df4:	40021000 	.word	0x40021000
 8006df8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dfc:	7cfb      	ldrb	r3, [r7, #19]
 8006dfe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e00:	7c7b      	ldrb	r3, [r7, #17]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d105      	bne.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e06:	4b9b      	ldr	r3, [pc, #620]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e0a:	4a9a      	ldr	r2, [pc, #616]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006e0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e10:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f003 0301 	and.w	r3, r3, #1
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00a      	beq.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006e1e:	4b95      	ldr	r3, [pc, #596]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e24:	f023 0203 	bic.w	r2, r3, #3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6a1b      	ldr	r3, [r3, #32]
 8006e2c:	4991      	ldr	r1, [pc, #580]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 0302 	and.w	r3, r3, #2
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00a      	beq.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e40:	4b8c      	ldr	r3, [pc, #560]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e46:	f023 020c 	bic.w	r2, r3, #12
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4e:	4989      	ldr	r1, [pc, #548]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006e50:	4313      	orrs	r3, r2
 8006e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 0304 	and.w	r3, r3, #4
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00a      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006e62:	4b84      	ldr	r3, [pc, #528]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e68:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e70:	4980      	ldr	r1, [pc, #512]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006e72:	4313      	orrs	r3, r2
 8006e74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 0320 	and.w	r3, r3, #32
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00a      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e84:	4b7b      	ldr	r3, [pc, #492]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e8a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e92:	4978      	ldr	r1, [pc, #480]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006e94:	4313      	orrs	r3, r2
 8006e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00a      	beq.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006ea6:	4b73      	ldr	r3, [pc, #460]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eb4:	496f      	ldr	r1, [pc, #444]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00a      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006ec8:	4b6a      	ldr	r3, [pc, #424]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ece:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed6:	4967      	ldr	r1, [pc, #412]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00a      	beq.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006eea:	4b62      	ldr	r3, [pc, #392]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ef0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef8:	495e      	ldr	r1, [pc, #376]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006efa:	4313      	orrs	r3, r2
 8006efc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d00a      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006f0c:	4b59      	ldr	r3, [pc, #356]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f12:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f1a:	4956      	ldr	r1, [pc, #344]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d00a      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006f2e:	4b51      	ldr	r3, [pc, #324]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f3c:	494d      	ldr	r1, [pc, #308]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d028      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006f50:	4b48      	ldr	r3, [pc, #288]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f5e:	4945      	ldr	r1, [pc, #276]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006f60:	4313      	orrs	r3, r2
 8006f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f6e:	d106      	bne.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f70:	4b40      	ldr	r3, [pc, #256]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	4a3f      	ldr	r2, [pc, #252]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006f76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f7a:	60d3      	str	r3, [r2, #12]
 8006f7c:	e011      	b.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f86:	d10c      	bne.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	3304      	adds	r3, #4
 8006f8c:	2101      	movs	r1, #1
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f000 f872 	bl	8007078 <RCCEx_PLLSAI1_Config>
 8006f94:	4603      	mov	r3, r0
 8006f96:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006f98:	7cfb      	ldrb	r3, [r7, #19]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d001      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8006f9e:	7cfb      	ldrb	r3, [r7, #19]
 8006fa0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d028      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006fae:	4b31      	ldr	r3, [pc, #196]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fb4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fbc:	492d      	ldr	r1, [pc, #180]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fcc:	d106      	bne.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fce:	4b29      	ldr	r3, [pc, #164]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	4a28      	ldr	r2, [pc, #160]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006fd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fd8:	60d3      	str	r3, [r2, #12]
 8006fda:	e011      	b.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fe0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006fe4:	d10c      	bne.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	3304      	adds	r3, #4
 8006fea:	2101      	movs	r1, #1
 8006fec:	4618      	mov	r0, r3
 8006fee:	f000 f843 	bl	8007078 <RCCEx_PLLSAI1_Config>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006ff6:	7cfb      	ldrb	r3, [r7, #19]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d001      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8006ffc:	7cfb      	ldrb	r3, [r7, #19]
 8006ffe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d01c      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800700c:	4b19      	ldr	r3, [pc, #100]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800700e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007012:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800701a:	4916      	ldr	r1, [pc, #88]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800701c:	4313      	orrs	r3, r2
 800701e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007026:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800702a:	d10c      	bne.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	3304      	adds	r3, #4
 8007030:	2102      	movs	r1, #2
 8007032:	4618      	mov	r0, r3
 8007034:	f000 f820 	bl	8007078 <RCCEx_PLLSAI1_Config>
 8007038:	4603      	mov	r3, r0
 800703a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800703c:	7cfb      	ldrb	r3, [r7, #19]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d001      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8007042:	7cfb      	ldrb	r3, [r7, #19]
 8007044:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00a      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007052:	4b08      	ldr	r3, [pc, #32]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007058:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007060:	4904      	ldr	r1, [pc, #16]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007062:	4313      	orrs	r3, r2
 8007064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007068:	7cbb      	ldrb	r3, [r7, #18]
}
 800706a:	4618      	mov	r0, r3
 800706c:	3718      	adds	r7, #24
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	40021000 	.word	0x40021000

08007078 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007082:	2300      	movs	r3, #0
 8007084:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007086:	4b74      	ldr	r3, [pc, #464]	; (8007258 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	f003 0303 	and.w	r3, r3, #3
 800708e:	2b00      	cmp	r3, #0
 8007090:	d018      	beq.n	80070c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007092:	4b71      	ldr	r3, [pc, #452]	; (8007258 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	f003 0203 	and.w	r2, r3, #3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d10d      	bne.n	80070be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
       ||
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d009      	beq.n	80070be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80070aa:	4b6b      	ldr	r3, [pc, #428]	; (8007258 <RCCEx_PLLSAI1_Config+0x1e0>)
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	091b      	lsrs	r3, r3, #4
 80070b0:	f003 0307 	and.w	r3, r3, #7
 80070b4:	1c5a      	adds	r2, r3, #1
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	685b      	ldr	r3, [r3, #4]
       ||
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d047      	beq.n	800714e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	73fb      	strb	r3, [r7, #15]
 80070c2:	e044      	b.n	800714e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2b03      	cmp	r3, #3
 80070ca:	d018      	beq.n	80070fe <RCCEx_PLLSAI1_Config+0x86>
 80070cc:	2b03      	cmp	r3, #3
 80070ce:	d825      	bhi.n	800711c <RCCEx_PLLSAI1_Config+0xa4>
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d002      	beq.n	80070da <RCCEx_PLLSAI1_Config+0x62>
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d009      	beq.n	80070ec <RCCEx_PLLSAI1_Config+0x74>
 80070d8:	e020      	b.n	800711c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80070da:	4b5f      	ldr	r3, [pc, #380]	; (8007258 <RCCEx_PLLSAI1_Config+0x1e0>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 0302 	and.w	r3, r3, #2
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d11d      	bne.n	8007122 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80070ea:	e01a      	b.n	8007122 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80070ec:	4b5a      	ldr	r3, [pc, #360]	; (8007258 <RCCEx_PLLSAI1_Config+0x1e0>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d116      	bne.n	8007126 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80070fc:	e013      	b.n	8007126 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80070fe:	4b56      	ldr	r3, [pc, #344]	; (8007258 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007106:	2b00      	cmp	r3, #0
 8007108:	d10f      	bne.n	800712a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800710a:	4b53      	ldr	r3, [pc, #332]	; (8007258 <RCCEx_PLLSAI1_Config+0x1e0>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007112:	2b00      	cmp	r3, #0
 8007114:	d109      	bne.n	800712a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800711a:	e006      	b.n	800712a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	73fb      	strb	r3, [r7, #15]
      break;
 8007120:	e004      	b.n	800712c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007122:	bf00      	nop
 8007124:	e002      	b.n	800712c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007126:	bf00      	nop
 8007128:	e000      	b.n	800712c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800712a:	bf00      	nop
    }

    if(status == HAL_OK)
 800712c:	7bfb      	ldrb	r3, [r7, #15]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d10d      	bne.n	800714e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007132:	4b49      	ldr	r3, [pc, #292]	; (8007258 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6819      	ldr	r1, [r3, #0]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	3b01      	subs	r3, #1
 8007144:	011b      	lsls	r3, r3, #4
 8007146:	430b      	orrs	r3, r1
 8007148:	4943      	ldr	r1, [pc, #268]	; (8007258 <RCCEx_PLLSAI1_Config+0x1e0>)
 800714a:	4313      	orrs	r3, r2
 800714c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800714e:	7bfb      	ldrb	r3, [r7, #15]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d17c      	bne.n	800724e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007154:	4b40      	ldr	r3, [pc, #256]	; (8007258 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a3f      	ldr	r2, [pc, #252]	; (8007258 <RCCEx_PLLSAI1_Config+0x1e0>)
 800715a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800715e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007160:	f7fe f888 	bl	8005274 <HAL_GetTick>
 8007164:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007166:	e009      	b.n	800717c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007168:	f7fe f884 	bl	8005274 <HAL_GetTick>
 800716c:	4602      	mov	r2, r0
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	2b02      	cmp	r3, #2
 8007174:	d902      	bls.n	800717c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	73fb      	strb	r3, [r7, #15]
        break;
 800717a:	e005      	b.n	8007188 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800717c:	4b36      	ldr	r3, [pc, #216]	; (8007258 <RCCEx_PLLSAI1_Config+0x1e0>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007184:	2b00      	cmp	r3, #0
 8007186:	d1ef      	bne.n	8007168 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007188:	7bfb      	ldrb	r3, [r7, #15]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d15f      	bne.n	800724e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d110      	bne.n	80071b6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007194:	4b30      	ldr	r3, [pc, #192]	; (8007258 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800719c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	6892      	ldr	r2, [r2, #8]
 80071a4:	0211      	lsls	r1, r2, #8
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	68d2      	ldr	r2, [r2, #12]
 80071aa:	06d2      	lsls	r2, r2, #27
 80071ac:	430a      	orrs	r2, r1
 80071ae:	492a      	ldr	r1, [pc, #168]	; (8007258 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071b0:	4313      	orrs	r3, r2
 80071b2:	610b      	str	r3, [r1, #16]
 80071b4:	e027      	b.n	8007206 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d112      	bne.n	80071e2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80071bc:	4b26      	ldr	r3, [pc, #152]	; (8007258 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071be:	691b      	ldr	r3, [r3, #16]
 80071c0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80071c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	6892      	ldr	r2, [r2, #8]
 80071cc:	0211      	lsls	r1, r2, #8
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	6912      	ldr	r2, [r2, #16]
 80071d2:	0852      	lsrs	r2, r2, #1
 80071d4:	3a01      	subs	r2, #1
 80071d6:	0552      	lsls	r2, r2, #21
 80071d8:	430a      	orrs	r2, r1
 80071da:	491f      	ldr	r1, [pc, #124]	; (8007258 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071dc:	4313      	orrs	r3, r2
 80071de:	610b      	str	r3, [r1, #16]
 80071e0:	e011      	b.n	8007206 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80071e2:	4b1d      	ldr	r3, [pc, #116]	; (8007258 <RCCEx_PLLSAI1_Config+0x1e0>)
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80071ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	6892      	ldr	r2, [r2, #8]
 80071f2:	0211      	lsls	r1, r2, #8
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	6952      	ldr	r2, [r2, #20]
 80071f8:	0852      	lsrs	r2, r2, #1
 80071fa:	3a01      	subs	r2, #1
 80071fc:	0652      	lsls	r2, r2, #25
 80071fe:	430a      	orrs	r2, r1
 8007200:	4915      	ldr	r1, [pc, #84]	; (8007258 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007202:	4313      	orrs	r3, r2
 8007204:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007206:	4b14      	ldr	r3, [pc, #80]	; (8007258 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a13      	ldr	r2, [pc, #76]	; (8007258 <RCCEx_PLLSAI1_Config+0x1e0>)
 800720c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007210:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007212:	f7fe f82f 	bl	8005274 <HAL_GetTick>
 8007216:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007218:	e009      	b.n	800722e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800721a:	f7fe f82b 	bl	8005274 <HAL_GetTick>
 800721e:	4602      	mov	r2, r0
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	1ad3      	subs	r3, r2, r3
 8007224:	2b02      	cmp	r3, #2
 8007226:	d902      	bls.n	800722e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007228:	2303      	movs	r3, #3
 800722a:	73fb      	strb	r3, [r7, #15]
          break;
 800722c:	e005      	b.n	800723a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800722e:	4b0a      	ldr	r3, [pc, #40]	; (8007258 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007236:	2b00      	cmp	r3, #0
 8007238:	d0ef      	beq.n	800721a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800723a:	7bfb      	ldrb	r3, [r7, #15]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d106      	bne.n	800724e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007240:	4b05      	ldr	r3, [pc, #20]	; (8007258 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007242:	691a      	ldr	r2, [r3, #16]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	699b      	ldr	r3, [r3, #24]
 8007248:	4903      	ldr	r1, [pc, #12]	; (8007258 <RCCEx_PLLSAI1_Config+0x1e0>)
 800724a:	4313      	orrs	r3, r2
 800724c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800724e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007250:	4618      	mov	r0, r3
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}
 8007258:	40021000 	.word	0x40021000

0800725c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d06c      	beq.n	8007348 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007274:	b2db      	uxtb	r3, r3
 8007276:	2b00      	cmp	r3, #0
 8007278:	d106      	bne.n	8007288 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f002 fd10 	bl	8009ca8 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2202      	movs	r2, #2
 800728c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	22ca      	movs	r2, #202	; 0xca
 8007296:	625a      	str	r2, [r3, #36]	; 0x24
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2253      	movs	r2, #83	; 0x53
 800729e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 f87c 	bl	800739e <RTC_EnterInitMode>
 80072a6:	4603      	mov	r3, r0
 80072a8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80072aa:	7bfb      	ldrb	r3, [r7, #15]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d14b      	bne.n	8007348 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	6812      	ldr	r2, [r2, #0]
 80072ba:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80072be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072c2:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	6899      	ldr	r1, [r3, #8]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	685a      	ldr	r2, [r3, #4]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	431a      	orrs	r2, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	431a      	orrs	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	430a      	orrs	r2, r1
 80072e0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	68d2      	ldr	r2, [r2, #12]
 80072ea:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6919      	ldr	r1, [r3, #16]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	041a      	lsls	r2, r3, #16
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	430a      	orrs	r2, r1
 80072fe:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 f87f 	bl	8007404 <RTC_ExitInitMode>
 8007306:	4603      	mov	r3, r0
 8007308:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800730a:	7bfb      	ldrb	r3, [r7, #15]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d11b      	bne.n	8007348 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f022 0203 	bic.w	r2, r2, #3
 800731e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	69da      	ldr	r2, [r3, #28]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	695b      	ldr	r3, [r3, #20]
 800732e:	431a      	orrs	r2, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	430a      	orrs	r2, r1
 8007336:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	22ff      	movs	r2, #255	; 0xff
 800733e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8007348:	7bfb      	ldrb	r3, [r7, #15]
}
 800734a:	4618      	mov	r0, r3
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b084      	sub	sp, #16
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68da      	ldr	r2, [r3, #12]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007368:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800736a:	f7fd ff83 	bl	8005274 <HAL_GetTick>
 800736e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007370:	e009      	b.n	8007386 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007372:	f7fd ff7f 	bl	8005274 <HAL_GetTick>
 8007376:	4602      	mov	r2, r0
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007380:	d901      	bls.n	8007386 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007382:	2303      	movs	r3, #3
 8007384:	e007      	b.n	8007396 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	f003 0320 	and.w	r3, r3, #32
 8007390:	2b00      	cmp	r3, #0
 8007392:	d0ee      	beq.n	8007372 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b084      	sub	sp, #16
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80073a6:	2300      	movs	r3, #0
 80073a8:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d120      	bne.n	80073fa <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073c0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80073c2:	f7fd ff57 	bl	8005274 <HAL_GetTick>
 80073c6:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80073c8:	e00d      	b.n	80073e6 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80073ca:	f7fd ff53 	bl	8005274 <HAL_GetTick>
 80073ce:	4602      	mov	r2, r0
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073d8:	d905      	bls.n	80073e6 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80073da:	2303      	movs	r3, #3
 80073dc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2203      	movs	r2, #3
 80073e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d102      	bne.n	80073fa <RTC_EnterInitMode+0x5c>
 80073f4:	7bfb      	ldrb	r3, [r7, #15]
 80073f6:	2b03      	cmp	r3, #3
 80073f8:	d1e7      	bne.n	80073ca <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80073fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3710      	adds	r7, #16
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800740c:	2300      	movs	r3, #0
 800740e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007410:	4b1a      	ldr	r3, [pc, #104]	; (800747c <RTC_ExitInitMode+0x78>)
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	4a19      	ldr	r2, [pc, #100]	; (800747c <RTC_ExitInitMode+0x78>)
 8007416:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800741a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800741c:	4b17      	ldr	r3, [pc, #92]	; (800747c <RTC_ExitInitMode+0x78>)
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	f003 0320 	and.w	r3, r3, #32
 8007424:	2b00      	cmp	r3, #0
 8007426:	d10c      	bne.n	8007442 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f7ff ff92 	bl	8007352 <HAL_RTC_WaitForSynchro>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d01e      	beq.n	8007472 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2203      	movs	r2, #3
 8007438:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800743c:	2303      	movs	r3, #3
 800743e:	73fb      	strb	r3, [r7, #15]
 8007440:	e017      	b.n	8007472 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007442:	4b0e      	ldr	r3, [pc, #56]	; (800747c <RTC_ExitInitMode+0x78>)
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	4a0d      	ldr	r2, [pc, #52]	; (800747c <RTC_ExitInitMode+0x78>)
 8007448:	f023 0320 	bic.w	r3, r3, #32
 800744c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f7ff ff7f 	bl	8007352 <HAL_RTC_WaitForSynchro>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d005      	beq.n	8007466 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2203      	movs	r2, #3
 800745e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007462:	2303      	movs	r3, #3
 8007464:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007466:	4b05      	ldr	r3, [pc, #20]	; (800747c <RTC_ExitInitMode+0x78>)
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	4a04      	ldr	r2, [pc, #16]	; (800747c <RTC_ExitInitMode+0x78>)
 800746c:	f043 0320 	orr.w	r3, r3, #32
 8007470:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007472:	7bfb      	ldrb	r3, [r7, #15]
}
 8007474:	4618      	mov	r0, r3
 8007476:	3710      	adds	r7, #16
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}
 800747c:	40002800 	.word	0x40002800

08007480 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d101      	bne.n	8007492 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e095      	b.n	80075be <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007496:	2b00      	cmp	r3, #0
 8007498:	d108      	bne.n	80074ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074a2:	d009      	beq.n	80074b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	61da      	str	r2, [r3, #28]
 80074aa:	e005      	b.n	80074b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d106      	bne.n	80074d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f877 	bl	80075c6 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2202      	movs	r2, #2
 80074dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80074f8:	d902      	bls.n	8007500 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80074fa:	2300      	movs	r3, #0
 80074fc:	60fb      	str	r3, [r7, #12]
 80074fe:	e002      	b.n	8007506 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007500:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007504:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800750e:	d007      	beq.n	8007520 <HAL_SPI_Init+0xa0>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007518:	d002      	beq.n	8007520 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007530:	431a      	orrs	r2, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	f003 0302 	and.w	r3, r3, #2
 800753a:	431a      	orrs	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	695b      	ldr	r3, [r3, #20]
 8007540:	f003 0301 	and.w	r3, r3, #1
 8007544:	431a      	orrs	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	699b      	ldr	r3, [r3, #24]
 800754a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800754e:	431a      	orrs	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	69db      	ldr	r3, [r3, #28]
 8007554:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007558:	431a      	orrs	r2, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6a1b      	ldr	r3, [r3, #32]
 800755e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007562:	ea42 0103 	orr.w	r1, r2, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800756a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	430a      	orrs	r2, r1
 8007574:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	699b      	ldr	r3, [r3, #24]
 800757a:	0c1b      	lsrs	r3, r3, #16
 800757c:	f003 0204 	and.w	r2, r3, #4
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007584:	f003 0310 	and.w	r3, r3, #16
 8007588:	431a      	orrs	r2, r3
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800758e:	f003 0308 	and.w	r3, r3, #8
 8007592:	431a      	orrs	r2, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800759c:	ea42 0103 	orr.w	r1, r2, r3
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	430a      	orrs	r2, r1
 80075ac:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80075c6:	b480      	push	{r7}
 80075c8:	b083      	sub	sp, #12
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80075ce:	bf00      	nop
 80075d0:	370c      	adds	r7, #12
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr

080075da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b082      	sub	sp, #8
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d101      	bne.n	80075ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	e049      	b.n	8007680 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d106      	bne.n	8007606 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f002 fb6d 	bl	8009ce0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2202      	movs	r2, #2
 800760a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	3304      	adds	r3, #4
 8007616:	4619      	mov	r1, r3
 8007618:	4610      	mov	r0, r2
 800761a:	f000 fe2f 	bl	800827c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2201      	movs	r2, #1
 8007622:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2201      	movs	r2, #1
 800762a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2201      	movs	r2, #1
 8007632:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2201      	movs	r2, #1
 800763a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2201      	movs	r2, #1
 8007642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2201      	movs	r2, #1
 800764a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2201      	movs	r2, #1
 8007652:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2201      	movs	r2, #1
 800765a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2201      	movs	r2, #1
 8007662:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2201      	movs	r2, #1
 8007672:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2201      	movs	r2, #1
 800767a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800767e:	2300      	movs	r3, #0
}
 8007680:	4618      	mov	r0, r3
 8007682:	3708      	adds	r7, #8
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d101      	bne.n	800769a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	e049      	b.n	800772e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d106      	bne.n	80076b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f002 fc10 	bl	8009ed4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2202      	movs	r2, #2
 80076b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	3304      	adds	r3, #4
 80076c4:	4619      	mov	r1, r3
 80076c6:	4610      	mov	r0, r2
 80076c8:	f000 fdd8 	bl	800827c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3708      	adds	r7, #8
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
	...

08007738 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b086      	sub	sp, #24
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
 8007744:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007746:	2300      	movs	r3, #0
 8007748:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d109      	bne.n	8007764 <HAL_TIM_PWM_Start_DMA+0x2c>
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007756:	b2db      	uxtb	r3, r3
 8007758:	2b02      	cmp	r3, #2
 800775a:	bf0c      	ite	eq
 800775c:	2301      	moveq	r3, #1
 800775e:	2300      	movne	r3, #0
 8007760:	b2db      	uxtb	r3, r3
 8007762:	e03c      	b.n	80077de <HAL_TIM_PWM_Start_DMA+0xa6>
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	2b04      	cmp	r3, #4
 8007768:	d109      	bne.n	800777e <HAL_TIM_PWM_Start_DMA+0x46>
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007770:	b2db      	uxtb	r3, r3
 8007772:	2b02      	cmp	r3, #2
 8007774:	bf0c      	ite	eq
 8007776:	2301      	moveq	r3, #1
 8007778:	2300      	movne	r3, #0
 800777a:	b2db      	uxtb	r3, r3
 800777c:	e02f      	b.n	80077de <HAL_TIM_PWM_Start_DMA+0xa6>
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	2b08      	cmp	r3, #8
 8007782:	d109      	bne.n	8007798 <HAL_TIM_PWM_Start_DMA+0x60>
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800778a:	b2db      	uxtb	r3, r3
 800778c:	2b02      	cmp	r3, #2
 800778e:	bf0c      	ite	eq
 8007790:	2301      	moveq	r3, #1
 8007792:	2300      	movne	r3, #0
 8007794:	b2db      	uxtb	r3, r3
 8007796:	e022      	b.n	80077de <HAL_TIM_PWM_Start_DMA+0xa6>
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	2b0c      	cmp	r3, #12
 800779c:	d109      	bne.n	80077b2 <HAL_TIM_PWM_Start_DMA+0x7a>
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	bf0c      	ite	eq
 80077aa:	2301      	moveq	r3, #1
 80077ac:	2300      	movne	r3, #0
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	e015      	b.n	80077de <HAL_TIM_PWM_Start_DMA+0xa6>
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	2b10      	cmp	r3, #16
 80077b6:	d109      	bne.n	80077cc <HAL_TIM_PWM_Start_DMA+0x94>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	bf0c      	ite	eq
 80077c4:	2301      	moveq	r3, #1
 80077c6:	2300      	movne	r3, #0
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	e008      	b.n	80077de <HAL_TIM_PWM_Start_DMA+0xa6>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	bf0c      	ite	eq
 80077d8:	2301      	moveq	r3, #1
 80077da:	2300      	movne	r3, #0
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d001      	beq.n	80077e6 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 80077e2:	2302      	movs	r3, #2
 80077e4:	e18d      	b.n	8007b02 <HAL_TIM_PWM_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d109      	bne.n	8007800 <HAL_TIM_PWM_Start_DMA+0xc8>
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	bf0c      	ite	eq
 80077f8:	2301      	moveq	r3, #1
 80077fa:	2300      	movne	r3, #0
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	e03c      	b.n	800787a <HAL_TIM_PWM_Start_DMA+0x142>
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	2b04      	cmp	r3, #4
 8007804:	d109      	bne.n	800781a <HAL_TIM_PWM_Start_DMA+0xe2>
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800780c:	b2db      	uxtb	r3, r3
 800780e:	2b01      	cmp	r3, #1
 8007810:	bf0c      	ite	eq
 8007812:	2301      	moveq	r3, #1
 8007814:	2300      	movne	r3, #0
 8007816:	b2db      	uxtb	r3, r3
 8007818:	e02f      	b.n	800787a <HAL_TIM_PWM_Start_DMA+0x142>
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	2b08      	cmp	r3, #8
 800781e:	d109      	bne.n	8007834 <HAL_TIM_PWM_Start_DMA+0xfc>
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007826:	b2db      	uxtb	r3, r3
 8007828:	2b01      	cmp	r3, #1
 800782a:	bf0c      	ite	eq
 800782c:	2301      	moveq	r3, #1
 800782e:	2300      	movne	r3, #0
 8007830:	b2db      	uxtb	r3, r3
 8007832:	e022      	b.n	800787a <HAL_TIM_PWM_Start_DMA+0x142>
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	2b0c      	cmp	r3, #12
 8007838:	d109      	bne.n	800784e <HAL_TIM_PWM_Start_DMA+0x116>
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007840:	b2db      	uxtb	r3, r3
 8007842:	2b01      	cmp	r3, #1
 8007844:	bf0c      	ite	eq
 8007846:	2301      	moveq	r3, #1
 8007848:	2300      	movne	r3, #0
 800784a:	b2db      	uxtb	r3, r3
 800784c:	e015      	b.n	800787a <HAL_TIM_PWM_Start_DMA+0x142>
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	2b10      	cmp	r3, #16
 8007852:	d109      	bne.n	8007868 <HAL_TIM_PWM_Start_DMA+0x130>
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800785a:	b2db      	uxtb	r3, r3
 800785c:	2b01      	cmp	r3, #1
 800785e:	bf0c      	ite	eq
 8007860:	2301      	moveq	r3, #1
 8007862:	2300      	movne	r3, #0
 8007864:	b2db      	uxtb	r3, r3
 8007866:	e008      	b.n	800787a <HAL_TIM_PWM_Start_DMA+0x142>
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800786e:	b2db      	uxtb	r3, r3
 8007870:	2b01      	cmp	r3, #1
 8007872:	bf0c      	ite	eq
 8007874:	2301      	moveq	r3, #1
 8007876:	2300      	movne	r3, #0
 8007878:	b2db      	uxtb	r3, r3
 800787a:	2b00      	cmp	r3, #0
 800787c:	d034      	beq.n	80078e8 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d002      	beq.n	800788a <HAL_TIM_PWM_Start_DMA+0x152>
 8007884:	887b      	ldrh	r3, [r7, #2]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d101      	bne.n	800788e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	e139      	b.n	8007b02 <HAL_TIM_PWM_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d104      	bne.n	800789e <HAL_TIM_PWM_Start_DMA+0x166>
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2202      	movs	r2, #2
 8007898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800789c:	e026      	b.n	80078ec <HAL_TIM_PWM_Start_DMA+0x1b4>
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	2b04      	cmp	r3, #4
 80078a2:	d104      	bne.n	80078ae <HAL_TIM_PWM_Start_DMA+0x176>
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2202      	movs	r2, #2
 80078a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078ac:	e01e      	b.n	80078ec <HAL_TIM_PWM_Start_DMA+0x1b4>
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	2b08      	cmp	r3, #8
 80078b2:	d104      	bne.n	80078be <HAL_TIM_PWM_Start_DMA+0x186>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2202      	movs	r2, #2
 80078b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078bc:	e016      	b.n	80078ec <HAL_TIM_PWM_Start_DMA+0x1b4>
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	2b0c      	cmp	r3, #12
 80078c2:	d104      	bne.n	80078ce <HAL_TIM_PWM_Start_DMA+0x196>
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2202      	movs	r2, #2
 80078c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80078cc:	e00e      	b.n	80078ec <HAL_TIM_PWM_Start_DMA+0x1b4>
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	2b10      	cmp	r3, #16
 80078d2:	d104      	bne.n	80078de <HAL_TIM_PWM_Start_DMA+0x1a6>
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2202      	movs	r2, #2
 80078d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078dc:	e006      	b.n	80078ec <HAL_TIM_PWM_Start_DMA+0x1b4>
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2202      	movs	r2, #2
 80078e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078e6:	e001      	b.n	80078ec <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	e10a      	b.n	8007b02 <HAL_TIM_PWM_Start_DMA+0x3ca>
  }

  switch (Channel)
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	2b0c      	cmp	r3, #12
 80078f0:	f200 80ae 	bhi.w	8007a50 <HAL_TIM_PWM_Start_DMA+0x318>
 80078f4:	a201      	add	r2, pc, #4	; (adr r2, 80078fc <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80078f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078fa:	bf00      	nop
 80078fc:	08007931 	.word	0x08007931
 8007900:	08007a51 	.word	0x08007a51
 8007904:	08007a51 	.word	0x08007a51
 8007908:	08007a51 	.word	0x08007a51
 800790c:	08007979 	.word	0x08007979
 8007910:	08007a51 	.word	0x08007a51
 8007914:	08007a51 	.word	0x08007a51
 8007918:	08007a51 	.word	0x08007a51
 800791c:	080079c1 	.word	0x080079c1
 8007920:	08007a51 	.word	0x08007a51
 8007924:	08007a51 	.word	0x08007a51
 8007928:	08007a51 	.word	0x08007a51
 800792c:	08007a09 	.word	0x08007a09
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007934:	4a75      	ldr	r2, [pc, #468]	; (8007b0c <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8007936:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793c:	4a74      	ldr	r2, [pc, #464]	; (8007b10 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 800793e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007944:	4a73      	ldr	r2, [pc, #460]	; (8007b14 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8007946:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800794c:	6879      	ldr	r1, [r7, #4]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	3334      	adds	r3, #52	; 0x34
 8007954:	461a      	mov	r2, r3
 8007956:	887b      	ldrh	r3, [r7, #2]
 8007958:	f7fd fedc 	bl	8005714 <HAL_DMA_Start_IT>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d001      	beq.n	8007966 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	e0cd      	b.n	8007b02 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	68da      	ldr	r2, [r3, #12]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007974:	60da      	str	r2, [r3, #12]
      break;
 8007976:	e06e      	b.n	8007a56 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800797c:	4a63      	ldr	r2, [pc, #396]	; (8007b0c <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800797e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007984:	4a62      	ldr	r2, [pc, #392]	; (8007b10 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8007986:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800798c:	4a61      	ldr	r2, [pc, #388]	; (8007b14 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800798e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007994:	6879      	ldr	r1, [r7, #4]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	3338      	adds	r3, #56	; 0x38
 800799c:	461a      	mov	r2, r3
 800799e:	887b      	ldrh	r3, [r7, #2]
 80079a0:	f7fd feb8 	bl	8005714 <HAL_DMA_Start_IT>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d001      	beq.n	80079ae <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	e0a9      	b.n	8007b02 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68da      	ldr	r2, [r3, #12]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80079bc:	60da      	str	r2, [r3, #12]
      break;
 80079be:	e04a      	b.n	8007a56 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c4:	4a51      	ldr	r2, [pc, #324]	; (8007b0c <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80079c6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079cc:	4a50      	ldr	r2, [pc, #320]	; (8007b10 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80079ce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d4:	4a4f      	ldr	r2, [pc, #316]	; (8007b14 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80079d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80079dc:	6879      	ldr	r1, [r7, #4]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	333c      	adds	r3, #60	; 0x3c
 80079e4:	461a      	mov	r2, r3
 80079e6:	887b      	ldrh	r3, [r7, #2]
 80079e8:	f7fd fe94 	bl	8005714 <HAL_DMA_Start_IT>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d001      	beq.n	80079f6 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	e085      	b.n	8007b02 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68da      	ldr	r2, [r3, #12]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a04:	60da      	str	r2, [r3, #12]
      break;
 8007a06:	e026      	b.n	8007a56 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a0c:	4a3f      	ldr	r2, [pc, #252]	; (8007b0c <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8007a0e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a14:	4a3e      	ldr	r2, [pc, #248]	; (8007b10 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8007a16:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a1c:	4a3d      	ldr	r2, [pc, #244]	; (8007b14 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8007a1e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007a24:	6879      	ldr	r1, [r7, #4]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	3340      	adds	r3, #64	; 0x40
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	887b      	ldrh	r3, [r7, #2]
 8007a30:	f7fd fe70 	bl	8005714 <HAL_DMA_Start_IT>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d001      	beq.n	8007a3e <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e061      	b.n	8007b02 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68da      	ldr	r2, [r3, #12]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a4c:	60da      	str	r2, [r3, #12]
      break;
 8007a4e:	e002      	b.n	8007a56 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	75fb      	strb	r3, [r7, #23]
      break;
 8007a54:	bf00      	nop
  }

  if (status == HAL_OK)
 8007a56:	7dfb      	ldrb	r3, [r7, #23]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d151      	bne.n	8007b00 <HAL_TIM_PWM_Start_DMA+0x3c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2201      	movs	r2, #1
 8007a62:	68b9      	ldr	r1, [r7, #8]
 8007a64:	4618      	mov	r0, r3
 8007a66:	f000 ff85 	bl	8008974 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a2a      	ldr	r2, [pc, #168]	; (8007b18 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d009      	beq.n	8007a88 <HAL_TIM_PWM_Start_DMA+0x350>
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a28      	ldr	r2, [pc, #160]	; (8007b1c <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d004      	beq.n	8007a88 <HAL_TIM_PWM_Start_DMA+0x350>
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a27      	ldr	r2, [pc, #156]	; (8007b20 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d101      	bne.n	8007a8c <HAL_TIM_PWM_Start_DMA+0x354>
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e000      	b.n	8007a8e <HAL_TIM_PWM_Start_DMA+0x356>
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d007      	beq.n	8007aa2 <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007aa0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a1c      	ldr	r2, [pc, #112]	; (8007b18 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d009      	beq.n	8007ac0 <HAL_TIM_PWM_Start_DMA+0x388>
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ab4:	d004      	beq.n	8007ac0 <HAL_TIM_PWM_Start_DMA+0x388>
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a18      	ldr	r2, [pc, #96]	; (8007b1c <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d115      	bne.n	8007aec <HAL_TIM_PWM_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	689a      	ldr	r2, [r3, #8]
 8007ac6:	4b17      	ldr	r3, [pc, #92]	; (8007b24 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8007ac8:	4013      	ands	r3, r2
 8007aca:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	2b06      	cmp	r3, #6
 8007ad0:	d015      	beq.n	8007afe <HAL_TIM_PWM_Start_DMA+0x3c6>
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ad8:	d011      	beq.n	8007afe <HAL_TIM_PWM_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f042 0201 	orr.w	r2, r2, #1
 8007ae8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007aea:	e008      	b.n	8007afe <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f042 0201 	orr.w	r2, r2, #1
 8007afa:	601a      	str	r2, [r3, #0]
 8007afc:	e000      	b.n	8007b00 <HAL_TIM_PWM_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007afe:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007b00:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3718      	adds	r7, #24
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	0800816d 	.word	0x0800816d
 8007b10:	08008215 	.word	0x08008215
 8007b14:	080080db 	.word	0x080080db
 8007b18:	40012c00 	.word	0x40012c00
 8007b1c:	40014000 	.word	0x40014000
 8007b20:	40014400 	.word	0x40014400
 8007b24:	00010007 	.word	0x00010007

08007b28 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b32:	2300      	movs	r3, #0
 8007b34:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	2b0c      	cmp	r3, #12
 8007b3a:	d855      	bhi.n	8007be8 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8007b3c:	a201      	add	r2, pc, #4	; (adr r2, 8007b44 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8007b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b42:	bf00      	nop
 8007b44:	08007b79 	.word	0x08007b79
 8007b48:	08007be9 	.word	0x08007be9
 8007b4c:	08007be9 	.word	0x08007be9
 8007b50:	08007be9 	.word	0x08007be9
 8007b54:	08007b95 	.word	0x08007b95
 8007b58:	08007be9 	.word	0x08007be9
 8007b5c:	08007be9 	.word	0x08007be9
 8007b60:	08007be9 	.word	0x08007be9
 8007b64:	08007bb1 	.word	0x08007bb1
 8007b68:	08007be9 	.word	0x08007be9
 8007b6c:	08007be9 	.word	0x08007be9
 8007b70:	08007be9 	.word	0x08007be9
 8007b74:	08007bcd 	.word	0x08007bcd
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	68da      	ldr	r2, [r3, #12]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007b86:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7fd fe21 	bl	80057d4 <HAL_DMA_Abort_IT>
      break;
 8007b92:	e02c      	b.n	8007bee <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	68da      	ldr	r2, [r3, #12]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ba2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7fd fe13 	bl	80057d4 <HAL_DMA_Abort_IT>
      break;
 8007bae:	e01e      	b.n	8007bee <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68da      	ldr	r2, [r3, #12]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007bbe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f7fd fe05 	bl	80057d4 <HAL_DMA_Abort_IT>
      break;
 8007bca:	e010      	b.n	8007bee <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	68da      	ldr	r2, [r3, #12]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007bda:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be0:	4618      	mov	r0, r3
 8007be2:	f7fd fdf7 	bl	80057d4 <HAL_DMA_Abort_IT>
      break;
 8007be6:	e002      	b.n	8007bee <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	73fb      	strb	r3, [r7, #15]
      break;
 8007bec:	bf00      	nop
  }

  if (status == HAL_OK)
 8007bee:	7bfb      	ldrb	r3, [r7, #15]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d176      	bne.n	8007ce2 <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	6839      	ldr	r1, [r7, #0]
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f000 feb9 	bl	8008974 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a39      	ldr	r2, [pc, #228]	; (8007cec <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d009      	beq.n	8007c20 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a37      	ldr	r2, [pc, #220]	; (8007cf0 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d004      	beq.n	8007c20 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a36      	ldr	r2, [pc, #216]	; (8007cf4 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d101      	bne.n	8007c24 <HAL_TIM_PWM_Stop_DMA+0xfc>
 8007c20:	2301      	movs	r3, #1
 8007c22:	e000      	b.n	8007c26 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8007c24:	2300      	movs	r3, #0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d017      	beq.n	8007c5a <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	6a1a      	ldr	r2, [r3, #32]
 8007c30:	f241 1311 	movw	r3, #4369	; 0x1111
 8007c34:	4013      	ands	r3, r2
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d10f      	bne.n	8007c5a <HAL_TIM_PWM_Stop_DMA+0x132>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	6a1a      	ldr	r2, [r3, #32]
 8007c40:	f240 4344 	movw	r3, #1092	; 0x444
 8007c44:	4013      	ands	r3, r2
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d107      	bne.n	8007c5a <HAL_TIM_PWM_Stop_DMA+0x132>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007c58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	6a1a      	ldr	r2, [r3, #32]
 8007c60:	f241 1311 	movw	r3, #4369	; 0x1111
 8007c64:	4013      	ands	r3, r2
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d10f      	bne.n	8007c8a <HAL_TIM_PWM_Stop_DMA+0x162>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	6a1a      	ldr	r2, [r3, #32]
 8007c70:	f240 4344 	movw	r3, #1092	; 0x444
 8007c74:	4013      	ands	r3, r2
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d107      	bne.n	8007c8a <HAL_TIM_PWM_Stop_DMA+0x162>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f022 0201 	bic.w	r2, r2, #1
 8007c88:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d104      	bne.n	8007c9a <HAL_TIM_PWM_Stop_DMA+0x172>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c98:	e023      	b.n	8007ce2 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	2b04      	cmp	r3, #4
 8007c9e:	d104      	bne.n	8007caa <HAL_TIM_PWM_Stop_DMA+0x182>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ca8:	e01b      	b.n	8007ce2 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	2b08      	cmp	r3, #8
 8007cae:	d104      	bne.n	8007cba <HAL_TIM_PWM_Stop_DMA+0x192>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007cb8:	e013      	b.n	8007ce2 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	2b0c      	cmp	r3, #12
 8007cbe:	d104      	bne.n	8007cca <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007cc8:	e00b      	b.n	8007ce2 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	2b10      	cmp	r3, #16
 8007cce:	d104      	bne.n	8007cda <HAL_TIM_PWM_Stop_DMA+0x1b2>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007cd8:	e003      	b.n	8007ce2 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8007ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3710      	adds	r7, #16
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	40012c00 	.word	0x40012c00
 8007cf0:	40014000 	.word	0x40014000
 8007cf4:	40014400 	.word	0x40014400

08007cf8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b086      	sub	sp, #24
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d04:	2300      	movs	r3, #0
 8007d06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d101      	bne.n	8007d16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007d12:	2302      	movs	r3, #2
 8007d14:	e0ff      	b.n	8007f16 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2b14      	cmp	r3, #20
 8007d22:	f200 80f0 	bhi.w	8007f06 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007d26:	a201      	add	r2, pc, #4	; (adr r2, 8007d2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d2c:	08007d81 	.word	0x08007d81
 8007d30:	08007f07 	.word	0x08007f07
 8007d34:	08007f07 	.word	0x08007f07
 8007d38:	08007f07 	.word	0x08007f07
 8007d3c:	08007dc1 	.word	0x08007dc1
 8007d40:	08007f07 	.word	0x08007f07
 8007d44:	08007f07 	.word	0x08007f07
 8007d48:	08007f07 	.word	0x08007f07
 8007d4c:	08007e03 	.word	0x08007e03
 8007d50:	08007f07 	.word	0x08007f07
 8007d54:	08007f07 	.word	0x08007f07
 8007d58:	08007f07 	.word	0x08007f07
 8007d5c:	08007e43 	.word	0x08007e43
 8007d60:	08007f07 	.word	0x08007f07
 8007d64:	08007f07 	.word	0x08007f07
 8007d68:	08007f07 	.word	0x08007f07
 8007d6c:	08007e85 	.word	0x08007e85
 8007d70:	08007f07 	.word	0x08007f07
 8007d74:	08007f07 	.word	0x08007f07
 8007d78:	08007f07 	.word	0x08007f07
 8007d7c:	08007ec5 	.word	0x08007ec5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68b9      	ldr	r1, [r7, #8]
 8007d86:	4618      	mov	r0, r3
 8007d88:	f000 fadc 	bl	8008344 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	699a      	ldr	r2, [r3, #24]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f042 0208 	orr.w	r2, r2, #8
 8007d9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	699a      	ldr	r2, [r3, #24]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f022 0204 	bic.w	r2, r2, #4
 8007daa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	6999      	ldr	r1, [r3, #24]
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	691a      	ldr	r2, [r3, #16]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	430a      	orrs	r2, r1
 8007dbc:	619a      	str	r2, [r3, #24]
      break;
 8007dbe:	e0a5      	b.n	8007f0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68b9      	ldr	r1, [r7, #8]
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f000 fb38 	bl	800843c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	699a      	ldr	r2, [r3, #24]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007dda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	699a      	ldr	r2, [r3, #24]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	6999      	ldr	r1, [r3, #24]
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	021a      	lsls	r2, r3, #8
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	430a      	orrs	r2, r1
 8007dfe:	619a      	str	r2, [r3, #24]
      break;
 8007e00:	e084      	b.n	8007f0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68b9      	ldr	r1, [r7, #8]
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f000 fb91 	bl	8008530 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	69da      	ldr	r2, [r3, #28]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f042 0208 	orr.w	r2, r2, #8
 8007e1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	69da      	ldr	r2, [r3, #28]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f022 0204 	bic.w	r2, r2, #4
 8007e2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	69d9      	ldr	r1, [r3, #28]
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	691a      	ldr	r2, [r3, #16]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	430a      	orrs	r2, r1
 8007e3e:	61da      	str	r2, [r3, #28]
      break;
 8007e40:	e064      	b.n	8007f0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	68b9      	ldr	r1, [r7, #8]
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f000 fbe9 	bl	8008620 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	69da      	ldr	r2, [r3, #28]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	69da      	ldr	r2, [r3, #28]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	69d9      	ldr	r1, [r3, #28]
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	021a      	lsls	r2, r3, #8
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	430a      	orrs	r2, r1
 8007e80:	61da      	str	r2, [r3, #28]
      break;
 8007e82:	e043      	b.n	8007f0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	68b9      	ldr	r1, [r7, #8]
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f000 fc26 	bl	80086dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f042 0208 	orr.w	r2, r2, #8
 8007e9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f022 0204 	bic.w	r2, r2, #4
 8007eae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	691a      	ldr	r2, [r3, #16]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	430a      	orrs	r2, r1
 8007ec0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007ec2:	e023      	b.n	8007f0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68b9      	ldr	r1, [r7, #8]
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f000 fc5e 	bl	800878c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ede:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007eee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	021a      	lsls	r2, r3, #8
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	430a      	orrs	r2, r1
 8007f02:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007f04:	e002      	b.n	8007f0c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
 8007f08:	75fb      	strb	r3, [r7, #23]
      break;
 8007f0a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3718      	adds	r7, #24
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop

08007f20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d101      	bne.n	8007f3c <HAL_TIM_ConfigClockSource+0x1c>
 8007f38:	2302      	movs	r3, #2
 8007f3a:	e0b6      	b.n	80080aa <HAL_TIM_ConfigClockSource+0x18a>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2202      	movs	r2, #2
 8007f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007f5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	68ba      	ldr	r2, [r7, #8]
 8007f6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f78:	d03e      	beq.n	8007ff8 <HAL_TIM_ConfigClockSource+0xd8>
 8007f7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f7e:	f200 8087 	bhi.w	8008090 <HAL_TIM_ConfigClockSource+0x170>
 8007f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f86:	f000 8086 	beq.w	8008096 <HAL_TIM_ConfigClockSource+0x176>
 8007f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f8e:	d87f      	bhi.n	8008090 <HAL_TIM_ConfigClockSource+0x170>
 8007f90:	2b70      	cmp	r3, #112	; 0x70
 8007f92:	d01a      	beq.n	8007fca <HAL_TIM_ConfigClockSource+0xaa>
 8007f94:	2b70      	cmp	r3, #112	; 0x70
 8007f96:	d87b      	bhi.n	8008090 <HAL_TIM_ConfigClockSource+0x170>
 8007f98:	2b60      	cmp	r3, #96	; 0x60
 8007f9a:	d050      	beq.n	800803e <HAL_TIM_ConfigClockSource+0x11e>
 8007f9c:	2b60      	cmp	r3, #96	; 0x60
 8007f9e:	d877      	bhi.n	8008090 <HAL_TIM_ConfigClockSource+0x170>
 8007fa0:	2b50      	cmp	r3, #80	; 0x50
 8007fa2:	d03c      	beq.n	800801e <HAL_TIM_ConfigClockSource+0xfe>
 8007fa4:	2b50      	cmp	r3, #80	; 0x50
 8007fa6:	d873      	bhi.n	8008090 <HAL_TIM_ConfigClockSource+0x170>
 8007fa8:	2b40      	cmp	r3, #64	; 0x40
 8007faa:	d058      	beq.n	800805e <HAL_TIM_ConfigClockSource+0x13e>
 8007fac:	2b40      	cmp	r3, #64	; 0x40
 8007fae:	d86f      	bhi.n	8008090 <HAL_TIM_ConfigClockSource+0x170>
 8007fb0:	2b30      	cmp	r3, #48	; 0x30
 8007fb2:	d064      	beq.n	800807e <HAL_TIM_ConfigClockSource+0x15e>
 8007fb4:	2b30      	cmp	r3, #48	; 0x30
 8007fb6:	d86b      	bhi.n	8008090 <HAL_TIM_ConfigClockSource+0x170>
 8007fb8:	2b20      	cmp	r3, #32
 8007fba:	d060      	beq.n	800807e <HAL_TIM_ConfigClockSource+0x15e>
 8007fbc:	2b20      	cmp	r3, #32
 8007fbe:	d867      	bhi.n	8008090 <HAL_TIM_ConfigClockSource+0x170>
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d05c      	beq.n	800807e <HAL_TIM_ConfigClockSource+0x15e>
 8007fc4:	2b10      	cmp	r3, #16
 8007fc6:	d05a      	beq.n	800807e <HAL_TIM_ConfigClockSource+0x15e>
 8007fc8:	e062      	b.n	8008090 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6818      	ldr	r0, [r3, #0]
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	6899      	ldr	r1, [r3, #8]
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	685a      	ldr	r2, [r3, #4]
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	f000 fcab 	bl	8008934 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007fec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	68ba      	ldr	r2, [r7, #8]
 8007ff4:	609a      	str	r2, [r3, #8]
      break;
 8007ff6:	e04f      	b.n	8008098 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6818      	ldr	r0, [r3, #0]
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	6899      	ldr	r1, [r3, #8]
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	685a      	ldr	r2, [r3, #4]
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	f000 fc94 	bl	8008934 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	689a      	ldr	r2, [r3, #8]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800801a:	609a      	str	r2, [r3, #8]
      break;
 800801c:	e03c      	b.n	8008098 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6818      	ldr	r0, [r3, #0]
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	6859      	ldr	r1, [r3, #4]
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	461a      	mov	r2, r3
 800802c:	f000 fc08 	bl	8008840 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2150      	movs	r1, #80	; 0x50
 8008036:	4618      	mov	r0, r3
 8008038:	f000 fc61 	bl	80088fe <TIM_ITRx_SetConfig>
      break;
 800803c:	e02c      	b.n	8008098 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6818      	ldr	r0, [r3, #0]
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	6859      	ldr	r1, [r3, #4]
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	461a      	mov	r2, r3
 800804c:	f000 fc27 	bl	800889e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2160      	movs	r1, #96	; 0x60
 8008056:	4618      	mov	r0, r3
 8008058:	f000 fc51 	bl	80088fe <TIM_ITRx_SetConfig>
      break;
 800805c:	e01c      	b.n	8008098 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6818      	ldr	r0, [r3, #0]
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	6859      	ldr	r1, [r3, #4]
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	68db      	ldr	r3, [r3, #12]
 800806a:	461a      	mov	r2, r3
 800806c:	f000 fbe8 	bl	8008840 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2140      	movs	r1, #64	; 0x40
 8008076:	4618      	mov	r0, r3
 8008078:	f000 fc41 	bl	80088fe <TIM_ITRx_SetConfig>
      break;
 800807c:	e00c      	b.n	8008098 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4619      	mov	r1, r3
 8008088:	4610      	mov	r0, r2
 800808a:	f000 fc38 	bl	80088fe <TIM_ITRx_SetConfig>
      break;
 800808e:	e003      	b.n	8008098 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	73fb      	strb	r3, [r7, #15]
      break;
 8008094:	e000      	b.n	8008098 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008096:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80080a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3710      	adds	r7, #16
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80080b2:	b480      	push	{r7}
 80080b4:	b083      	sub	sp, #12
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80080ba:	bf00      	nop
 80080bc:	370c      	adds	r7, #12
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr

080080c6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80080c6:	b480      	push	{r7}
 80080c8:	b083      	sub	sp, #12
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80080ce:	bf00      	nop
 80080d0:	370c      	adds	r7, #12
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr

080080da <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b084      	sub	sp, #16
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d107      	bne.n	8008102 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2201      	movs	r2, #1
 80080f6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2201      	movs	r2, #1
 80080fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008100:	e02a      	b.n	8008158 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	429a      	cmp	r2, r3
 800810a:	d107      	bne.n	800811c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2202      	movs	r2, #2
 8008110:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2201      	movs	r2, #1
 8008116:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800811a:	e01d      	b.n	8008158 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	429a      	cmp	r2, r3
 8008124:	d107      	bne.n	8008136 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2204      	movs	r2, #4
 800812a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008134:	e010      	b.n	8008158 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	429a      	cmp	r2, r3
 800813e:	d107      	bne.n	8008150 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2208      	movs	r2, #8
 8008144:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2201      	movs	r2, #1
 800814a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800814e:	e003      	b.n	8008158 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2201      	movs	r2, #1
 8008154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008158:	68f8      	ldr	r0, [r7, #12]
 800815a:	f7ff ffb4 	bl	80080c6 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2200      	movs	r2, #0
 8008162:	771a      	strb	r2, [r3, #28]
}
 8008164:	bf00      	nop
 8008166:	3710      	adds	r7, #16
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008178:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	429a      	cmp	r2, r3
 8008182:	d10b      	bne.n	800819c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2201      	movs	r2, #1
 8008188:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	69db      	ldr	r3, [r3, #28]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d136      	bne.n	8008200 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2201      	movs	r2, #1
 8008196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800819a:	e031      	b.n	8008200 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d10b      	bne.n	80081be <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2202      	movs	r2, #2
 80081aa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	69db      	ldr	r3, [r3, #28]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d125      	bne.n	8008200 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081bc:	e020      	b.n	8008200 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d10b      	bne.n	80081e0 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2204      	movs	r2, #4
 80081cc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	69db      	ldr	r3, [r3, #28]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d114      	bne.n	8008200 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2201      	movs	r2, #1
 80081da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081de:	e00f      	b.n	8008200 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d10a      	bne.n	8008200 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2208      	movs	r2, #8
 80081ee:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	69db      	ldr	r3, [r3, #28]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d103      	bne.n	8008200 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f001 ffc9 	bl	800a198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2200      	movs	r2, #0
 800820a:	771a      	strb	r2, [r3, #28]
  //g_tim_pwm_transfer_cmplt = true;

}
 800820c:	bf00      	nop
 800820e:	3710      	adds	r7, #16
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008220:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	429a      	cmp	r2, r3
 800822a:	d103      	bne.n	8008234 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2201      	movs	r2, #1
 8008230:	771a      	strb	r2, [r3, #28]
 8008232:	e019      	b.n	8008268 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	429a      	cmp	r2, r3
 800823c:	d103      	bne.n	8008246 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2202      	movs	r2, #2
 8008242:	771a      	strb	r2, [r3, #28]
 8008244:	e010      	b.n	8008268 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	429a      	cmp	r2, r3
 800824e:	d103      	bne.n	8008258 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2204      	movs	r2, #4
 8008254:	771a      	strb	r2, [r3, #28]
 8008256:	e007      	b.n	8008268 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	429a      	cmp	r2, r3
 8008260:	d102      	bne.n	8008268 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2208      	movs	r2, #8
 8008266:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8008268:	68f8      	ldr	r0, [r7, #12]
 800826a:	f7ff ff22 	bl	80080b2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2200      	movs	r2, #0
 8008272:	771a      	strb	r2, [r3, #28]
}
 8008274:	bf00      	nop
 8008276:	3710      	adds	r7, #16
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800827c:	b480      	push	{r7}
 800827e:	b085      	sub	sp, #20
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	4a2a      	ldr	r2, [pc, #168]	; (8008338 <TIM_Base_SetConfig+0xbc>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d003      	beq.n	800829c <TIM_Base_SetConfig+0x20>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800829a:	d108      	bne.n	80082ae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4a21      	ldr	r2, [pc, #132]	; (8008338 <TIM_Base_SetConfig+0xbc>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d00b      	beq.n	80082ce <TIM_Base_SetConfig+0x52>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082bc:	d007      	beq.n	80082ce <TIM_Base_SetConfig+0x52>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4a1e      	ldr	r2, [pc, #120]	; (800833c <TIM_Base_SetConfig+0xc0>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d003      	beq.n	80082ce <TIM_Base_SetConfig+0x52>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	4a1d      	ldr	r2, [pc, #116]	; (8008340 <TIM_Base_SetConfig+0xc4>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d108      	bne.n	80082e0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	68fa      	ldr	r2, [r7, #12]
 80082dc:	4313      	orrs	r3, r2
 80082de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	695b      	ldr	r3, [r3, #20]
 80082ea:	4313      	orrs	r3, r2
 80082ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	689a      	ldr	r2, [r3, #8]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a0c      	ldr	r2, [pc, #48]	; (8008338 <TIM_Base_SetConfig+0xbc>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d007      	beq.n	800831c <TIM_Base_SetConfig+0xa0>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4a0b      	ldr	r2, [pc, #44]	; (800833c <TIM_Base_SetConfig+0xc0>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d003      	beq.n	800831c <TIM_Base_SetConfig+0xa0>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4a0a      	ldr	r2, [pc, #40]	; (8008340 <TIM_Base_SetConfig+0xc4>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d103      	bne.n	8008324 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	691a      	ldr	r2, [r3, #16]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	615a      	str	r2, [r3, #20]
}
 800832a:	bf00      	nop
 800832c:	3714      	adds	r7, #20
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr
 8008336:	bf00      	nop
 8008338:	40012c00 	.word	0x40012c00
 800833c:	40014000 	.word	0x40014000
 8008340:	40014400 	.word	0x40014400

08008344 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008344:	b480      	push	{r7}
 8008346:	b087      	sub	sp, #28
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a1b      	ldr	r3, [r3, #32]
 8008352:	f023 0201 	bic.w	r2, r3, #1
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a1b      	ldr	r3, [r3, #32]
 800835e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	699b      	ldr	r3, [r3, #24]
 800836a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f023 0303 	bic.w	r3, r3, #3
 800837e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	68fa      	ldr	r2, [r7, #12]
 8008386:	4313      	orrs	r3, r2
 8008388:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	f023 0302 	bic.w	r3, r3, #2
 8008390:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	697a      	ldr	r2, [r7, #20]
 8008398:	4313      	orrs	r3, r2
 800839a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	4a24      	ldr	r2, [pc, #144]	; (8008430 <TIM_OC1_SetConfig+0xec>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d007      	beq.n	80083b4 <TIM_OC1_SetConfig+0x70>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	4a23      	ldr	r2, [pc, #140]	; (8008434 <TIM_OC1_SetConfig+0xf0>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d003      	beq.n	80083b4 <TIM_OC1_SetConfig+0x70>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	4a22      	ldr	r2, [pc, #136]	; (8008438 <TIM_OC1_SetConfig+0xf4>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d10c      	bne.n	80083ce <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	f023 0308 	bic.w	r3, r3, #8
 80083ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	697a      	ldr	r2, [r7, #20]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	f023 0304 	bic.w	r3, r3, #4
 80083cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4a17      	ldr	r2, [pc, #92]	; (8008430 <TIM_OC1_SetConfig+0xec>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d007      	beq.n	80083e6 <TIM_OC1_SetConfig+0xa2>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	4a16      	ldr	r2, [pc, #88]	; (8008434 <TIM_OC1_SetConfig+0xf0>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d003      	beq.n	80083e6 <TIM_OC1_SetConfig+0xa2>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4a15      	ldr	r2, [pc, #84]	; (8008438 <TIM_OC1_SetConfig+0xf4>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d111      	bne.n	800840a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80083f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	695b      	ldr	r3, [r3, #20]
 80083fa:	693a      	ldr	r2, [r7, #16]
 80083fc:	4313      	orrs	r3, r2
 80083fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	699b      	ldr	r3, [r3, #24]
 8008404:	693a      	ldr	r2, [r7, #16]
 8008406:	4313      	orrs	r3, r2
 8008408:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	693a      	ldr	r2, [r7, #16]
 800840e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	68fa      	ldr	r2, [r7, #12]
 8008414:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	685a      	ldr	r2, [r3, #4]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	697a      	ldr	r2, [r7, #20]
 8008422:	621a      	str	r2, [r3, #32]
}
 8008424:	bf00      	nop
 8008426:	371c      	adds	r7, #28
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr
 8008430:	40012c00 	.word	0x40012c00
 8008434:	40014000 	.word	0x40014000
 8008438:	40014400 	.word	0x40014400

0800843c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800843c:	b480      	push	{r7}
 800843e:	b087      	sub	sp, #28
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a1b      	ldr	r3, [r3, #32]
 800844a:	f023 0210 	bic.w	r2, r3, #16
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6a1b      	ldr	r3, [r3, #32]
 8008456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	699b      	ldr	r3, [r3, #24]
 8008462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800846a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800846e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008476:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	021b      	lsls	r3, r3, #8
 800847e:	68fa      	ldr	r2, [r7, #12]
 8008480:	4313      	orrs	r3, r2
 8008482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	f023 0320 	bic.w	r3, r3, #32
 800848a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	011b      	lsls	r3, r3, #4
 8008492:	697a      	ldr	r2, [r7, #20]
 8008494:	4313      	orrs	r3, r2
 8008496:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4a22      	ldr	r2, [pc, #136]	; (8008524 <TIM_OC2_SetConfig+0xe8>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d10d      	bne.n	80084bc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	011b      	lsls	r3, r3, #4
 80084ae:	697a      	ldr	r2, [r7, #20]
 80084b0:	4313      	orrs	r3, r2
 80084b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	4a19      	ldr	r2, [pc, #100]	; (8008524 <TIM_OC2_SetConfig+0xe8>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d007      	beq.n	80084d4 <TIM_OC2_SetConfig+0x98>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	4a18      	ldr	r2, [pc, #96]	; (8008528 <TIM_OC2_SetConfig+0xec>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d003      	beq.n	80084d4 <TIM_OC2_SetConfig+0x98>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	4a17      	ldr	r2, [pc, #92]	; (800852c <TIM_OC2_SetConfig+0xf0>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d113      	bne.n	80084fc <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80084da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80084e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	695b      	ldr	r3, [r3, #20]
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	693a      	ldr	r2, [r7, #16]
 80084ec:	4313      	orrs	r3, r2
 80084ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	699b      	ldr	r3, [r3, #24]
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	693a      	ldr	r2, [r7, #16]
 80084f8:	4313      	orrs	r3, r2
 80084fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	693a      	ldr	r2, [r7, #16]
 8008500:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	68fa      	ldr	r2, [r7, #12]
 8008506:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	685a      	ldr	r2, [r3, #4]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	697a      	ldr	r2, [r7, #20]
 8008514:	621a      	str	r2, [r3, #32]
}
 8008516:	bf00      	nop
 8008518:	371c      	adds	r7, #28
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr
 8008522:	bf00      	nop
 8008524:	40012c00 	.word	0x40012c00
 8008528:	40014000 	.word	0x40014000
 800852c:	40014400 	.word	0x40014400

08008530 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008530:	b480      	push	{r7}
 8008532:	b087      	sub	sp, #28
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6a1b      	ldr	r3, [r3, #32]
 800853e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6a1b      	ldr	r3, [r3, #32]
 800854a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	69db      	ldr	r3, [r3, #28]
 8008556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800855e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f023 0303 	bic.w	r3, r3, #3
 800856a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	68fa      	ldr	r2, [r7, #12]
 8008572:	4313      	orrs	r3, r2
 8008574:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800857c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	021b      	lsls	r3, r3, #8
 8008584:	697a      	ldr	r2, [r7, #20]
 8008586:	4313      	orrs	r3, r2
 8008588:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4a21      	ldr	r2, [pc, #132]	; (8008614 <TIM_OC3_SetConfig+0xe4>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d10d      	bne.n	80085ae <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008598:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	021b      	lsls	r3, r3, #8
 80085a0:	697a      	ldr	r2, [r7, #20]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80085ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4a18      	ldr	r2, [pc, #96]	; (8008614 <TIM_OC3_SetConfig+0xe4>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d007      	beq.n	80085c6 <TIM_OC3_SetConfig+0x96>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4a17      	ldr	r2, [pc, #92]	; (8008618 <TIM_OC3_SetConfig+0xe8>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d003      	beq.n	80085c6 <TIM_OC3_SetConfig+0x96>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	4a16      	ldr	r2, [pc, #88]	; (800861c <TIM_OC3_SetConfig+0xec>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d113      	bne.n	80085ee <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80085d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	695b      	ldr	r3, [r3, #20]
 80085da:	011b      	lsls	r3, r3, #4
 80085dc:	693a      	ldr	r2, [r7, #16]
 80085de:	4313      	orrs	r3, r2
 80085e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	699b      	ldr	r3, [r3, #24]
 80085e6:	011b      	lsls	r3, r3, #4
 80085e8:	693a      	ldr	r2, [r7, #16]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	693a      	ldr	r2, [r7, #16]
 80085f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	685a      	ldr	r2, [r3, #4]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	697a      	ldr	r2, [r7, #20]
 8008606:	621a      	str	r2, [r3, #32]
}
 8008608:	bf00      	nop
 800860a:	371c      	adds	r7, #28
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr
 8008614:	40012c00 	.word	0x40012c00
 8008618:	40014000 	.word	0x40014000
 800861c:	40014400 	.word	0x40014400

08008620 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008620:	b480      	push	{r7}
 8008622:	b087      	sub	sp, #28
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6a1b      	ldr	r3, [r3, #32]
 800862e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6a1b      	ldr	r3, [r3, #32]
 800863a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	69db      	ldr	r3, [r3, #28]
 8008646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800864e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800865a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	021b      	lsls	r3, r3, #8
 8008662:	68fa      	ldr	r2, [r7, #12]
 8008664:	4313      	orrs	r3, r2
 8008666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800866e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	031b      	lsls	r3, r3, #12
 8008676:	693a      	ldr	r2, [r7, #16]
 8008678:	4313      	orrs	r3, r2
 800867a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	4a14      	ldr	r2, [pc, #80]	; (80086d0 <TIM_OC4_SetConfig+0xb0>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d007      	beq.n	8008694 <TIM_OC4_SetConfig+0x74>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	4a13      	ldr	r2, [pc, #76]	; (80086d4 <TIM_OC4_SetConfig+0xb4>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d003      	beq.n	8008694 <TIM_OC4_SetConfig+0x74>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4a12      	ldr	r2, [pc, #72]	; (80086d8 <TIM_OC4_SetConfig+0xb8>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d109      	bne.n	80086a8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800869a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	695b      	ldr	r3, [r3, #20]
 80086a0:	019b      	lsls	r3, r3, #6
 80086a2:	697a      	ldr	r2, [r7, #20]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	697a      	ldr	r2, [r7, #20]
 80086ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	68fa      	ldr	r2, [r7, #12]
 80086b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	685a      	ldr	r2, [r3, #4]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	693a      	ldr	r2, [r7, #16]
 80086c0:	621a      	str	r2, [r3, #32]
}
 80086c2:	bf00      	nop
 80086c4:	371c      	adds	r7, #28
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr
 80086ce:	bf00      	nop
 80086d0:	40012c00 	.word	0x40012c00
 80086d4:	40014000 	.word	0x40014000
 80086d8:	40014400 	.word	0x40014400

080086dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80086dc:	b480      	push	{r7}
 80086de:	b087      	sub	sp, #28
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a1b      	ldr	r3, [r3, #32]
 80086ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6a1b      	ldr	r3, [r3, #32]
 80086f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800870a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800870e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	68fa      	ldr	r2, [r7, #12]
 8008716:	4313      	orrs	r3, r2
 8008718:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008720:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	689b      	ldr	r3, [r3, #8]
 8008726:	041b      	lsls	r3, r3, #16
 8008728:	693a      	ldr	r2, [r7, #16]
 800872a:	4313      	orrs	r3, r2
 800872c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4a13      	ldr	r2, [pc, #76]	; (8008780 <TIM_OC5_SetConfig+0xa4>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d007      	beq.n	8008746 <TIM_OC5_SetConfig+0x6a>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4a12      	ldr	r2, [pc, #72]	; (8008784 <TIM_OC5_SetConfig+0xa8>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d003      	beq.n	8008746 <TIM_OC5_SetConfig+0x6a>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a11      	ldr	r2, [pc, #68]	; (8008788 <TIM_OC5_SetConfig+0xac>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d109      	bne.n	800875a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800874c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	695b      	ldr	r3, [r3, #20]
 8008752:	021b      	lsls	r3, r3, #8
 8008754:	697a      	ldr	r2, [r7, #20]
 8008756:	4313      	orrs	r3, r2
 8008758:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	697a      	ldr	r2, [r7, #20]
 800875e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	68fa      	ldr	r2, [r7, #12]
 8008764:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	685a      	ldr	r2, [r3, #4]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	693a      	ldr	r2, [r7, #16]
 8008772:	621a      	str	r2, [r3, #32]
}
 8008774:	bf00      	nop
 8008776:	371c      	adds	r7, #28
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr
 8008780:	40012c00 	.word	0x40012c00
 8008784:	40014000 	.word	0x40014000
 8008788:	40014400 	.word	0x40014400

0800878c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800878c:	b480      	push	{r7}
 800878e:	b087      	sub	sp, #28
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6a1b      	ldr	r3, [r3, #32]
 800879a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6a1b      	ldr	r3, [r3, #32]
 80087a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80087ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	021b      	lsls	r3, r3, #8
 80087c6:	68fa      	ldr	r2, [r7, #12]
 80087c8:	4313      	orrs	r3, r2
 80087ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80087d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	051b      	lsls	r3, r3, #20
 80087da:	693a      	ldr	r2, [r7, #16]
 80087dc:	4313      	orrs	r3, r2
 80087de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	4a14      	ldr	r2, [pc, #80]	; (8008834 <TIM_OC6_SetConfig+0xa8>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d007      	beq.n	80087f8 <TIM_OC6_SetConfig+0x6c>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a13      	ldr	r2, [pc, #76]	; (8008838 <TIM_OC6_SetConfig+0xac>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d003      	beq.n	80087f8 <TIM_OC6_SetConfig+0x6c>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4a12      	ldr	r2, [pc, #72]	; (800883c <TIM_OC6_SetConfig+0xb0>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d109      	bne.n	800880c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	695b      	ldr	r3, [r3, #20]
 8008804:	029b      	lsls	r3, r3, #10
 8008806:	697a      	ldr	r2, [r7, #20]
 8008808:	4313      	orrs	r3, r2
 800880a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	697a      	ldr	r2, [r7, #20]
 8008810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	68fa      	ldr	r2, [r7, #12]
 8008816:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	685a      	ldr	r2, [r3, #4]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	693a      	ldr	r2, [r7, #16]
 8008824:	621a      	str	r2, [r3, #32]
}
 8008826:	bf00      	nop
 8008828:	371c      	adds	r7, #28
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr
 8008832:	bf00      	nop
 8008834:	40012c00 	.word	0x40012c00
 8008838:	40014000 	.word	0x40014000
 800883c:	40014400 	.word	0x40014400

08008840 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008840:	b480      	push	{r7}
 8008842:	b087      	sub	sp, #28
 8008844:	af00      	add	r7, sp, #0
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	6a1b      	ldr	r3, [r3, #32]
 8008850:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6a1b      	ldr	r3, [r3, #32]
 8008856:	f023 0201 	bic.w	r2, r3, #1
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	699b      	ldr	r3, [r3, #24]
 8008862:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800886a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	011b      	lsls	r3, r3, #4
 8008870:	693a      	ldr	r2, [r7, #16]
 8008872:	4313      	orrs	r3, r2
 8008874:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	f023 030a 	bic.w	r3, r3, #10
 800887c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800887e:	697a      	ldr	r2, [r7, #20]
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	4313      	orrs	r3, r2
 8008884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	693a      	ldr	r2, [r7, #16]
 800888a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	697a      	ldr	r2, [r7, #20]
 8008890:	621a      	str	r2, [r3, #32]
}
 8008892:	bf00      	nop
 8008894:	371c      	adds	r7, #28
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr

0800889e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800889e:	b480      	push	{r7}
 80088a0:	b087      	sub	sp, #28
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	60f8      	str	r0, [r7, #12]
 80088a6:	60b9      	str	r1, [r7, #8]
 80088a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	6a1b      	ldr	r3, [r3, #32]
 80088ae:	f023 0210 	bic.w	r2, r3, #16
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	699b      	ldr	r3, [r3, #24]
 80088ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6a1b      	ldr	r3, [r3, #32]
 80088c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80088c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	031b      	lsls	r3, r3, #12
 80088ce:	697a      	ldr	r2, [r7, #20]
 80088d0:	4313      	orrs	r3, r2
 80088d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80088da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	011b      	lsls	r3, r3, #4
 80088e0:	693a      	ldr	r2, [r7, #16]
 80088e2:	4313      	orrs	r3, r2
 80088e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	697a      	ldr	r2, [r7, #20]
 80088ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	693a      	ldr	r2, [r7, #16]
 80088f0:	621a      	str	r2, [r3, #32]
}
 80088f2:	bf00      	nop
 80088f4:	371c      	adds	r7, #28
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr

080088fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80088fe:	b480      	push	{r7}
 8008900:	b085      	sub	sp, #20
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
 8008906:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008914:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008916:	683a      	ldr	r2, [r7, #0]
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	4313      	orrs	r3, r2
 800891c:	f043 0307 	orr.w	r3, r3, #7
 8008920:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	68fa      	ldr	r2, [r7, #12]
 8008926:	609a      	str	r2, [r3, #8]
}
 8008928:	bf00      	nop
 800892a:	3714      	adds	r7, #20
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr

08008934 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008934:	b480      	push	{r7}
 8008936:	b087      	sub	sp, #28
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	607a      	str	r2, [r7, #4]
 8008940:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800894e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	021a      	lsls	r2, r3, #8
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	431a      	orrs	r2, r3
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	4313      	orrs	r3, r2
 800895c:	697a      	ldr	r2, [r7, #20]
 800895e:	4313      	orrs	r3, r2
 8008960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	697a      	ldr	r2, [r7, #20]
 8008966:	609a      	str	r2, [r3, #8]
}
 8008968:	bf00      	nop
 800896a:	371c      	adds	r7, #28
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr

08008974 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008974:	b480      	push	{r7}
 8008976:	b087      	sub	sp, #28
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	f003 031f 	and.w	r3, r3, #31
 8008986:	2201      	movs	r2, #1
 8008988:	fa02 f303 	lsl.w	r3, r2, r3
 800898c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	6a1a      	ldr	r2, [r3, #32]
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	43db      	mvns	r3, r3
 8008996:	401a      	ands	r2, r3
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	6a1a      	ldr	r2, [r3, #32]
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	f003 031f 	and.w	r3, r3, #31
 80089a6:	6879      	ldr	r1, [r7, #4]
 80089a8:	fa01 f303 	lsl.w	r3, r1, r3
 80089ac:	431a      	orrs	r2, r3
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	621a      	str	r2, [r3, #32]
}
 80089b2:	bf00      	nop
 80089b4:	371c      	adds	r7, #28
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr
	...

080089c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b085      	sub	sp, #20
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d101      	bne.n	80089d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80089d4:	2302      	movs	r3, #2
 80089d6:	e04f      	b.n	8008a78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2201      	movs	r2, #1
 80089dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2202      	movs	r2, #2
 80089e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a21      	ldr	r2, [pc, #132]	; (8008a84 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d108      	bne.n	8008a14 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008a08:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	68fa      	ldr	r2, [r7, #12]
 8008a10:	4313      	orrs	r3, r2
 8008a12:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	68fa      	ldr	r2, [r7, #12]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a14      	ldr	r2, [pc, #80]	; (8008a84 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d009      	beq.n	8008a4c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a40:	d004      	beq.n	8008a4c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a10      	ldr	r2, [pc, #64]	; (8008a88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d10c      	bne.n	8008a66 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	68ba      	ldr	r2, [r7, #8]
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	68ba      	ldr	r2, [r7, #8]
 8008a64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2201      	movs	r2, #1
 8008a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a76:	2300      	movs	r3, #0
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3714      	adds	r7, #20
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr
 8008a84:	40012c00 	.word	0x40012c00
 8008a88:	40014000 	.word	0x40014000

08008a8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b085      	sub	sp, #20
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008a96:	2300      	movs	r3, #0
 8008a98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d101      	bne.n	8008aa8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008aa4:	2302      	movs	r3, #2
 8008aa6:	e060      	b.n	8008b6a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	4313      	orrs	r3, r2
 8008abc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	691b      	ldr	r3, [r3, #16]
 8008af2:	4313      	orrs	r3, r2
 8008af4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	695b      	ldr	r3, [r3, #20]
 8008b00:	4313      	orrs	r3, r2
 8008b02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	699b      	ldr	r3, [r3, #24]
 8008b1c:	041b      	lsls	r3, r3, #16
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a14      	ldr	r2, [pc, #80]	; (8008b78 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d115      	bne.n	8008b58 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b36:	051b      	lsls	r3, r3, #20
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	69db      	ldr	r3, [r3, #28]
 8008b46:	4313      	orrs	r3, r2
 8008b48:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	6a1b      	ldr	r3, [r3, #32]
 8008b54:	4313      	orrs	r3, r2
 8008b56:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b68:	2300      	movs	r3, #0
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3714      	adds	r7, #20
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr
 8008b76:	bf00      	nop
 8008b78:	40012c00 	.word	0x40012c00

08008b7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d101      	bne.n	8008b8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	e040      	b.n	8008c10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d106      	bne.n	8008ba4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 f873 	bl	8008c8a <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2224      	movs	r2, #36	; 0x24
 8008ba8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f022 0201 	bic.w	r2, r2, #1
 8008bb8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 f87a 	bl	8008cb4 <UART_SetConfig>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d101      	bne.n	8008bca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e022      	b.n	8008c10 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d002      	beq.n	8008bd8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 fac8 	bl	8009168 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	685a      	ldr	r2, [r3, #4]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008be6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	689a      	ldr	r2, [r3, #8]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008bf6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f042 0201 	orr.w	r2, r2, #1
 8008c06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 fb4f 	bl	80092ac <UART_CheckIdleState>
 8008c0e:	4603      	mov	r3, r0
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3708      	adds	r7, #8
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d101      	bne.n	8008c2a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	e02b      	b.n	8008c82 <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2224      	movs	r2, #36	; 0x24
 8008c2e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f022 0201 	bic.w	r2, r2, #1
 8008c3e:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	2200      	movs	r2, #0
 8008c46:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2200      	movs	r2, #0
 8008c56:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 f820 	bl	8008c9e <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2200      	movs	r2, #0
 8008c76:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008c80:	2300      	movs	r3, #0
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3708      	adds	r7, #8
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8008c8a:	b480      	push	{r7}
 8008c8c:	b083      	sub	sp, #12
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8008c92:	bf00      	nop
 8008c94:	370c      	adds	r7, #12
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr

08008c9e <HAL_UART_MspDeInit>:
  * @brief DeInitialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8008c9e:	b480      	push	{r7}
 8008ca0:	b083      	sub	sp, #12
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8008ca6:	bf00      	nop
 8008ca8:	370c      	adds	r7, #12
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr
	...

08008cb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008cb8:	b08a      	sub	sp, #40	; 0x28
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	689a      	ldr	r2, [r3, #8]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	691b      	ldr	r3, [r3, #16]
 8008ccc:	431a      	orrs	r2, r3
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	695b      	ldr	r3, [r3, #20]
 8008cd2:	431a      	orrs	r2, r3
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	69db      	ldr	r3, [r3, #28]
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	4b9e      	ldr	r3, [pc, #632]	; (8008f5c <UART_SetConfig+0x2a8>)
 8008ce4:	4013      	ands	r3, r2
 8008ce6:	68fa      	ldr	r2, [r7, #12]
 8008ce8:	6812      	ldr	r2, [r2, #0]
 8008cea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008cec:	430b      	orrs	r3, r1
 8008cee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	68da      	ldr	r2, [r3, #12]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	430a      	orrs	r2, r1
 8008d04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	699b      	ldr	r3, [r3, #24]
 8008d0a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a93      	ldr	r2, [pc, #588]	; (8008f60 <UART_SetConfig+0x2ac>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d004      	beq.n	8008d20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	6a1b      	ldr	r3, [r3, #32]
 8008d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d30:	430a      	orrs	r2, r1
 8008d32:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a8a      	ldr	r2, [pc, #552]	; (8008f64 <UART_SetConfig+0x2b0>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d126      	bne.n	8008d8c <UART_SetConfig+0xd8>
 8008d3e:	4b8a      	ldr	r3, [pc, #552]	; (8008f68 <UART_SetConfig+0x2b4>)
 8008d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d44:	f003 0303 	and.w	r3, r3, #3
 8008d48:	2b03      	cmp	r3, #3
 8008d4a:	d81b      	bhi.n	8008d84 <UART_SetConfig+0xd0>
 8008d4c:	a201      	add	r2, pc, #4	; (adr r2, 8008d54 <UART_SetConfig+0xa0>)
 8008d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d52:	bf00      	nop
 8008d54:	08008d65 	.word	0x08008d65
 8008d58:	08008d75 	.word	0x08008d75
 8008d5c:	08008d6d 	.word	0x08008d6d
 8008d60:	08008d7d 	.word	0x08008d7d
 8008d64:	2301      	movs	r3, #1
 8008d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d6a:	e0ab      	b.n	8008ec4 <UART_SetConfig+0x210>
 8008d6c:	2302      	movs	r3, #2
 8008d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d72:	e0a7      	b.n	8008ec4 <UART_SetConfig+0x210>
 8008d74:	2304      	movs	r3, #4
 8008d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d7a:	e0a3      	b.n	8008ec4 <UART_SetConfig+0x210>
 8008d7c:	2308      	movs	r3, #8
 8008d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d82:	e09f      	b.n	8008ec4 <UART_SetConfig+0x210>
 8008d84:	2310      	movs	r3, #16
 8008d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d8a:	e09b      	b.n	8008ec4 <UART_SetConfig+0x210>
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a76      	ldr	r2, [pc, #472]	; (8008f6c <UART_SetConfig+0x2b8>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d138      	bne.n	8008e08 <UART_SetConfig+0x154>
 8008d96:	4b74      	ldr	r3, [pc, #464]	; (8008f68 <UART_SetConfig+0x2b4>)
 8008d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d9c:	f003 030c 	and.w	r3, r3, #12
 8008da0:	2b0c      	cmp	r3, #12
 8008da2:	d82d      	bhi.n	8008e00 <UART_SetConfig+0x14c>
 8008da4:	a201      	add	r2, pc, #4	; (adr r2, 8008dac <UART_SetConfig+0xf8>)
 8008da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008daa:	bf00      	nop
 8008dac:	08008de1 	.word	0x08008de1
 8008db0:	08008e01 	.word	0x08008e01
 8008db4:	08008e01 	.word	0x08008e01
 8008db8:	08008e01 	.word	0x08008e01
 8008dbc:	08008df1 	.word	0x08008df1
 8008dc0:	08008e01 	.word	0x08008e01
 8008dc4:	08008e01 	.word	0x08008e01
 8008dc8:	08008e01 	.word	0x08008e01
 8008dcc:	08008de9 	.word	0x08008de9
 8008dd0:	08008e01 	.word	0x08008e01
 8008dd4:	08008e01 	.word	0x08008e01
 8008dd8:	08008e01 	.word	0x08008e01
 8008ddc:	08008df9 	.word	0x08008df9
 8008de0:	2300      	movs	r3, #0
 8008de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008de6:	e06d      	b.n	8008ec4 <UART_SetConfig+0x210>
 8008de8:	2302      	movs	r3, #2
 8008dea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008dee:	e069      	b.n	8008ec4 <UART_SetConfig+0x210>
 8008df0:	2304      	movs	r3, #4
 8008df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008df6:	e065      	b.n	8008ec4 <UART_SetConfig+0x210>
 8008df8:	2308      	movs	r3, #8
 8008dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008dfe:	e061      	b.n	8008ec4 <UART_SetConfig+0x210>
 8008e00:	2310      	movs	r3, #16
 8008e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e06:	e05d      	b.n	8008ec4 <UART_SetConfig+0x210>
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a58      	ldr	r2, [pc, #352]	; (8008f70 <UART_SetConfig+0x2bc>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d125      	bne.n	8008e5e <UART_SetConfig+0x1aa>
 8008e12:	4b55      	ldr	r3, [pc, #340]	; (8008f68 <UART_SetConfig+0x2b4>)
 8008e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e18:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008e1c:	2b30      	cmp	r3, #48	; 0x30
 8008e1e:	d016      	beq.n	8008e4e <UART_SetConfig+0x19a>
 8008e20:	2b30      	cmp	r3, #48	; 0x30
 8008e22:	d818      	bhi.n	8008e56 <UART_SetConfig+0x1a2>
 8008e24:	2b20      	cmp	r3, #32
 8008e26:	d00a      	beq.n	8008e3e <UART_SetConfig+0x18a>
 8008e28:	2b20      	cmp	r3, #32
 8008e2a:	d814      	bhi.n	8008e56 <UART_SetConfig+0x1a2>
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d002      	beq.n	8008e36 <UART_SetConfig+0x182>
 8008e30:	2b10      	cmp	r3, #16
 8008e32:	d008      	beq.n	8008e46 <UART_SetConfig+0x192>
 8008e34:	e00f      	b.n	8008e56 <UART_SetConfig+0x1a2>
 8008e36:	2300      	movs	r3, #0
 8008e38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e3c:	e042      	b.n	8008ec4 <UART_SetConfig+0x210>
 8008e3e:	2302      	movs	r3, #2
 8008e40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e44:	e03e      	b.n	8008ec4 <UART_SetConfig+0x210>
 8008e46:	2304      	movs	r3, #4
 8008e48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e4c:	e03a      	b.n	8008ec4 <UART_SetConfig+0x210>
 8008e4e:	2308      	movs	r3, #8
 8008e50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e54:	e036      	b.n	8008ec4 <UART_SetConfig+0x210>
 8008e56:	2310      	movs	r3, #16
 8008e58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e5c:	e032      	b.n	8008ec4 <UART_SetConfig+0x210>
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a3f      	ldr	r2, [pc, #252]	; (8008f60 <UART_SetConfig+0x2ac>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d12a      	bne.n	8008ebe <UART_SetConfig+0x20a>
 8008e68:	4b3f      	ldr	r3, [pc, #252]	; (8008f68 <UART_SetConfig+0x2b4>)
 8008e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e6e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008e72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e76:	d01a      	beq.n	8008eae <UART_SetConfig+0x1fa>
 8008e78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e7c:	d81b      	bhi.n	8008eb6 <UART_SetConfig+0x202>
 8008e7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e82:	d00c      	beq.n	8008e9e <UART_SetConfig+0x1ea>
 8008e84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e88:	d815      	bhi.n	8008eb6 <UART_SetConfig+0x202>
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d003      	beq.n	8008e96 <UART_SetConfig+0x1e2>
 8008e8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e92:	d008      	beq.n	8008ea6 <UART_SetConfig+0x1f2>
 8008e94:	e00f      	b.n	8008eb6 <UART_SetConfig+0x202>
 8008e96:	2300      	movs	r3, #0
 8008e98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e9c:	e012      	b.n	8008ec4 <UART_SetConfig+0x210>
 8008e9e:	2302      	movs	r3, #2
 8008ea0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008ea4:	e00e      	b.n	8008ec4 <UART_SetConfig+0x210>
 8008ea6:	2304      	movs	r3, #4
 8008ea8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008eac:	e00a      	b.n	8008ec4 <UART_SetConfig+0x210>
 8008eae:	2308      	movs	r3, #8
 8008eb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008eb4:	e006      	b.n	8008ec4 <UART_SetConfig+0x210>
 8008eb6:	2310      	movs	r3, #16
 8008eb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008ebc:	e002      	b.n	8008ec4 <UART_SetConfig+0x210>
 8008ebe:	2310      	movs	r3, #16
 8008ec0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a25      	ldr	r2, [pc, #148]	; (8008f60 <UART_SetConfig+0x2ac>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	f040 808a 	bne.w	8008fe4 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008ed0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ed4:	2b08      	cmp	r3, #8
 8008ed6:	d824      	bhi.n	8008f22 <UART_SetConfig+0x26e>
 8008ed8:	a201      	add	r2, pc, #4	; (adr r2, 8008ee0 <UART_SetConfig+0x22c>)
 8008eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ede:	bf00      	nop
 8008ee0:	08008f05 	.word	0x08008f05
 8008ee4:	08008f23 	.word	0x08008f23
 8008ee8:	08008f0d 	.word	0x08008f0d
 8008eec:	08008f23 	.word	0x08008f23
 8008ef0:	08008f13 	.word	0x08008f13
 8008ef4:	08008f23 	.word	0x08008f23
 8008ef8:	08008f23 	.word	0x08008f23
 8008efc:	08008f23 	.word	0x08008f23
 8008f00:	08008f1b 	.word	0x08008f1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f04:	f7fd fe14 	bl	8006b30 <HAL_RCC_GetPCLK1Freq>
 8008f08:	61f8      	str	r0, [r7, #28]
        break;
 8008f0a:	e010      	b.n	8008f2e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f0c:	4b19      	ldr	r3, [pc, #100]	; (8008f74 <UART_SetConfig+0x2c0>)
 8008f0e:	61fb      	str	r3, [r7, #28]
        break;
 8008f10:	e00d      	b.n	8008f2e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f12:	f7fd fd75 	bl	8006a00 <HAL_RCC_GetSysClockFreq>
 8008f16:	61f8      	str	r0, [r7, #28]
        break;
 8008f18:	e009      	b.n	8008f2e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f1e:	61fb      	str	r3, [r7, #28]
        break;
 8008f20:	e005      	b.n	8008f2e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8008f22:	2300      	movs	r3, #0
 8008f24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008f2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008f2e:	69fb      	ldr	r3, [r7, #28]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	f000 8109 	beq.w	8009148 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	685a      	ldr	r2, [r3, #4]
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	005b      	lsls	r3, r3, #1
 8008f3e:	4413      	add	r3, r2
 8008f40:	69fa      	ldr	r2, [r7, #28]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d305      	bcc.n	8008f52 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008f4c:	69fa      	ldr	r2, [r7, #28]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d912      	bls.n	8008f78 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8008f52:	2301      	movs	r3, #1
 8008f54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008f58:	e0f6      	b.n	8009148 <UART_SetConfig+0x494>
 8008f5a:	bf00      	nop
 8008f5c:	efff69f3 	.word	0xefff69f3
 8008f60:	40008000 	.word	0x40008000
 8008f64:	40013800 	.word	0x40013800
 8008f68:	40021000 	.word	0x40021000
 8008f6c:	40004400 	.word	0x40004400
 8008f70:	40004800 	.word	0x40004800
 8008f74:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008f78:	69fb      	ldr	r3, [r7, #28]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	461c      	mov	r4, r3
 8008f7e:	4615      	mov	r5, r2
 8008f80:	f04f 0200 	mov.w	r2, #0
 8008f84:	f04f 0300 	mov.w	r3, #0
 8008f88:	022b      	lsls	r3, r5, #8
 8008f8a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008f8e:	0222      	lsls	r2, r4, #8
 8008f90:	68f9      	ldr	r1, [r7, #12]
 8008f92:	6849      	ldr	r1, [r1, #4]
 8008f94:	0849      	lsrs	r1, r1, #1
 8008f96:	2000      	movs	r0, #0
 8008f98:	4688      	mov	r8, r1
 8008f9a:	4681      	mov	r9, r0
 8008f9c:	eb12 0a08 	adds.w	sl, r2, r8
 8008fa0:	eb43 0b09 	adc.w	fp, r3, r9
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	603b      	str	r3, [r7, #0]
 8008fac:	607a      	str	r2, [r7, #4]
 8008fae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fb2:	4650      	mov	r0, sl
 8008fb4:	4659      	mov	r1, fp
 8008fb6:	f7f7 fd79 	bl	8000aac <__aeabi_uldivmod>
 8008fba:	4602      	mov	r2, r0
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	4613      	mov	r3, r2
 8008fc0:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008fc2:	69bb      	ldr	r3, [r7, #24]
 8008fc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008fc8:	d308      	bcc.n	8008fdc <UART_SetConfig+0x328>
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fd0:	d204      	bcs.n	8008fdc <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	69ba      	ldr	r2, [r7, #24]
 8008fd8:	60da      	str	r2, [r3, #12]
 8008fda:	e0b5      	b.n	8009148 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008fe2:	e0b1      	b.n	8009148 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	69db      	ldr	r3, [r3, #28]
 8008fe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fec:	d15d      	bne.n	80090aa <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8008fee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ff2:	2b08      	cmp	r3, #8
 8008ff4:	d827      	bhi.n	8009046 <UART_SetConfig+0x392>
 8008ff6:	a201      	add	r2, pc, #4	; (adr r2, 8008ffc <UART_SetConfig+0x348>)
 8008ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ffc:	08009021 	.word	0x08009021
 8009000:	08009029 	.word	0x08009029
 8009004:	08009031 	.word	0x08009031
 8009008:	08009047 	.word	0x08009047
 800900c:	08009037 	.word	0x08009037
 8009010:	08009047 	.word	0x08009047
 8009014:	08009047 	.word	0x08009047
 8009018:	08009047 	.word	0x08009047
 800901c:	0800903f 	.word	0x0800903f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009020:	f7fd fd86 	bl	8006b30 <HAL_RCC_GetPCLK1Freq>
 8009024:	61f8      	str	r0, [r7, #28]
        break;
 8009026:	e014      	b.n	8009052 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009028:	f7fd fd98 	bl	8006b5c <HAL_RCC_GetPCLK2Freq>
 800902c:	61f8      	str	r0, [r7, #28]
        break;
 800902e:	e010      	b.n	8009052 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009030:	4b4c      	ldr	r3, [pc, #304]	; (8009164 <UART_SetConfig+0x4b0>)
 8009032:	61fb      	str	r3, [r7, #28]
        break;
 8009034:	e00d      	b.n	8009052 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009036:	f7fd fce3 	bl	8006a00 <HAL_RCC_GetSysClockFreq>
 800903a:	61f8      	str	r0, [r7, #28]
        break;
 800903c:	e009      	b.n	8009052 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800903e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009042:	61fb      	str	r3, [r7, #28]
        break;
 8009044:	e005      	b.n	8009052 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8009046:	2300      	movs	r3, #0
 8009048:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800904a:	2301      	movs	r3, #1
 800904c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009050:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d077      	beq.n	8009148 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009058:	69fb      	ldr	r3, [r7, #28]
 800905a:	005a      	lsls	r2, r3, #1
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	085b      	lsrs	r3, r3, #1
 8009062:	441a      	add	r2, r3
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	fbb2 f3f3 	udiv	r3, r2, r3
 800906c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	2b0f      	cmp	r3, #15
 8009072:	d916      	bls.n	80090a2 <UART_SetConfig+0x3ee>
 8009074:	69bb      	ldr	r3, [r7, #24]
 8009076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800907a:	d212      	bcs.n	80090a2 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	b29b      	uxth	r3, r3
 8009080:	f023 030f 	bic.w	r3, r3, #15
 8009084:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	085b      	lsrs	r3, r3, #1
 800908a:	b29b      	uxth	r3, r3
 800908c:	f003 0307 	and.w	r3, r3, #7
 8009090:	b29a      	uxth	r2, r3
 8009092:	8afb      	ldrh	r3, [r7, #22]
 8009094:	4313      	orrs	r3, r2
 8009096:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	8afa      	ldrh	r2, [r7, #22]
 800909e:	60da      	str	r2, [r3, #12]
 80090a0:	e052      	b.n	8009148 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
 80090a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80090a8:	e04e      	b.n	8009148 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80090aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80090ae:	2b08      	cmp	r3, #8
 80090b0:	d827      	bhi.n	8009102 <UART_SetConfig+0x44e>
 80090b2:	a201      	add	r2, pc, #4	; (adr r2, 80090b8 <UART_SetConfig+0x404>)
 80090b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b8:	080090dd 	.word	0x080090dd
 80090bc:	080090e5 	.word	0x080090e5
 80090c0:	080090ed 	.word	0x080090ed
 80090c4:	08009103 	.word	0x08009103
 80090c8:	080090f3 	.word	0x080090f3
 80090cc:	08009103 	.word	0x08009103
 80090d0:	08009103 	.word	0x08009103
 80090d4:	08009103 	.word	0x08009103
 80090d8:	080090fb 	.word	0x080090fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090dc:	f7fd fd28 	bl	8006b30 <HAL_RCC_GetPCLK1Freq>
 80090e0:	61f8      	str	r0, [r7, #28]
        break;
 80090e2:	e014      	b.n	800910e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80090e4:	f7fd fd3a 	bl	8006b5c <HAL_RCC_GetPCLK2Freq>
 80090e8:	61f8      	str	r0, [r7, #28]
        break;
 80090ea:	e010      	b.n	800910e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80090ec:	4b1d      	ldr	r3, [pc, #116]	; (8009164 <UART_SetConfig+0x4b0>)
 80090ee:	61fb      	str	r3, [r7, #28]
        break;
 80090f0:	e00d      	b.n	800910e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80090f2:	f7fd fc85 	bl	8006a00 <HAL_RCC_GetSysClockFreq>
 80090f6:	61f8      	str	r0, [r7, #28]
        break;
 80090f8:	e009      	b.n	800910e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090fe:	61fb      	str	r3, [r7, #28]
        break;
 8009100:	e005      	b.n	800910e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8009102:	2300      	movs	r3, #0
 8009104:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009106:	2301      	movs	r3, #1
 8009108:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800910c:	bf00      	nop
    }

    if (pclk != 0U)
 800910e:	69fb      	ldr	r3, [r7, #28]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d019      	beq.n	8009148 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	085a      	lsrs	r2, r3, #1
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	441a      	add	r2, r3
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	fbb2 f3f3 	udiv	r3, r2, r3
 8009126:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009128:	69bb      	ldr	r3, [r7, #24]
 800912a:	2b0f      	cmp	r3, #15
 800912c:	d909      	bls.n	8009142 <UART_SetConfig+0x48e>
 800912e:	69bb      	ldr	r3, [r7, #24]
 8009130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009134:	d205      	bcs.n	8009142 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	b29a      	uxth	r2, r3
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	60da      	str	r2, [r3, #12]
 8009140:	e002      	b.n	8009148 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8009142:	2301      	movs	r3, #1
 8009144:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2200      	movs	r2, #0
 800914c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2200      	movs	r2, #0
 8009152:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009154:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8009158:	4618      	mov	r0, r3
 800915a:	3728      	adds	r7, #40	; 0x28
 800915c:	46bd      	mov	sp, r7
 800915e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009162:	bf00      	nop
 8009164:	00f42400 	.word	0x00f42400

08009168 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009174:	f003 0301 	and.w	r3, r3, #1
 8009178:	2b00      	cmp	r3, #0
 800917a:	d00a      	beq.n	8009192 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	430a      	orrs	r2, r1
 8009190:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009196:	f003 0302 	and.w	r3, r3, #2
 800919a:	2b00      	cmp	r3, #0
 800919c:	d00a      	beq.n	80091b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	430a      	orrs	r2, r1
 80091b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b8:	f003 0304 	and.w	r3, r3, #4
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d00a      	beq.n	80091d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	430a      	orrs	r2, r1
 80091d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091da:	f003 0308 	and.w	r3, r3, #8
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d00a      	beq.n	80091f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	430a      	orrs	r2, r1
 80091f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fc:	f003 0310 	and.w	r3, r3, #16
 8009200:	2b00      	cmp	r3, #0
 8009202:	d00a      	beq.n	800921a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	430a      	orrs	r2, r1
 8009218:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800921e:	f003 0320 	and.w	r3, r3, #32
 8009222:	2b00      	cmp	r3, #0
 8009224:	d00a      	beq.n	800923c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	689b      	ldr	r3, [r3, #8]
 800922c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	430a      	orrs	r2, r1
 800923a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009244:	2b00      	cmp	r3, #0
 8009246:	d01a      	beq.n	800927e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	430a      	orrs	r2, r1
 800925c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009262:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009266:	d10a      	bne.n	800927e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	430a      	orrs	r2, r1
 800927c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009286:	2b00      	cmp	r3, #0
 8009288:	d00a      	beq.n	80092a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	430a      	orrs	r2, r1
 800929e:	605a      	str	r2, [r3, #4]
  }
}
 80092a0:	bf00      	nop
 80092a2:	370c      	adds	r7, #12
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b086      	sub	sp, #24
 80092b0:	af02      	add	r7, sp, #8
 80092b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2200      	movs	r2, #0
 80092b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80092bc:	f7fb ffda 	bl	8005274 <HAL_GetTick>
 80092c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f003 0308 	and.w	r3, r3, #8
 80092cc:	2b08      	cmp	r3, #8
 80092ce:	d10e      	bne.n	80092ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80092d4:	9300      	str	r3, [sp, #0]
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2200      	movs	r2, #0
 80092da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 f82d 	bl	800933e <UART_WaitOnFlagUntilTimeout>
 80092e4:	4603      	mov	r3, r0
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d001      	beq.n	80092ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80092ea:	2303      	movs	r3, #3
 80092ec:	e023      	b.n	8009336 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f003 0304 	and.w	r3, r3, #4
 80092f8:	2b04      	cmp	r3, #4
 80092fa:	d10e      	bne.n	800931a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009300:	9300      	str	r3, [sp, #0]
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2200      	movs	r2, #0
 8009306:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 f817 	bl	800933e <UART_WaitOnFlagUntilTimeout>
 8009310:	4603      	mov	r3, r0
 8009312:	2b00      	cmp	r3, #0
 8009314:	d001      	beq.n	800931a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009316:	2303      	movs	r3, #3
 8009318:	e00d      	b.n	8009336 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2220      	movs	r2, #32
 800931e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2220      	movs	r2, #32
 8009324:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2200      	movs	r2, #0
 800932a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	3710      	adds	r7, #16
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}

0800933e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800933e:	b580      	push	{r7, lr}
 8009340:	b09c      	sub	sp, #112	; 0x70
 8009342:	af00      	add	r7, sp, #0
 8009344:	60f8      	str	r0, [r7, #12]
 8009346:	60b9      	str	r1, [r7, #8]
 8009348:	603b      	str	r3, [r7, #0]
 800934a:	4613      	mov	r3, r2
 800934c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800934e:	e0a5      	b.n	800949c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009350:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009352:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009356:	f000 80a1 	beq.w	800949c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800935a:	f7fb ff8b 	bl	8005274 <HAL_GetTick>
 800935e:	4602      	mov	r2, r0
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	1ad3      	subs	r3, r2, r3
 8009364:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009366:	429a      	cmp	r2, r3
 8009368:	d302      	bcc.n	8009370 <UART_WaitOnFlagUntilTimeout+0x32>
 800936a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800936c:	2b00      	cmp	r3, #0
 800936e:	d13e      	bne.n	80093ee <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009378:	e853 3f00 	ldrex	r3, [r3]
 800937c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800937e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009380:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009384:	667b      	str	r3, [r7, #100]	; 0x64
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	461a      	mov	r2, r3
 800938c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800938e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009390:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009392:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009394:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009396:	e841 2300 	strex	r3, r2, [r1]
 800939a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800939c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d1e6      	bne.n	8009370 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	3308      	adds	r3, #8
 80093a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093ac:	e853 3f00 	ldrex	r3, [r3]
 80093b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80093b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b4:	f023 0301 	bic.w	r3, r3, #1
 80093b8:	663b      	str	r3, [r7, #96]	; 0x60
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	3308      	adds	r3, #8
 80093c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80093c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80093c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80093c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093ca:	e841 2300 	strex	r3, r2, [r1]
 80093ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80093d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d1e5      	bne.n	80093a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2220      	movs	r2, #32
 80093da:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2220      	movs	r2, #32
 80093e0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2200      	movs	r2, #0
 80093e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80093ea:	2303      	movs	r3, #3
 80093ec:	e067      	b.n	80094be <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f003 0304 	and.w	r3, r3, #4
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d04f      	beq.n	800949c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	69db      	ldr	r3, [r3, #28]
 8009402:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009406:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800940a:	d147      	bne.n	800949c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009414:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800941c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800941e:	e853 3f00 	ldrex	r3, [r3]
 8009422:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009426:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800942a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	461a      	mov	r2, r3
 8009432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009434:	637b      	str	r3, [r7, #52]	; 0x34
 8009436:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009438:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800943a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800943c:	e841 2300 	strex	r3, r2, [r1]
 8009440:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009444:	2b00      	cmp	r3, #0
 8009446:	d1e6      	bne.n	8009416 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	3308      	adds	r3, #8
 800944e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	e853 3f00 	ldrex	r3, [r3]
 8009456:	613b      	str	r3, [r7, #16]
   return(result);
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	f023 0301 	bic.w	r3, r3, #1
 800945e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	3308      	adds	r3, #8
 8009466:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009468:	623a      	str	r2, [r7, #32]
 800946a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800946c:	69f9      	ldr	r1, [r7, #28]
 800946e:	6a3a      	ldr	r2, [r7, #32]
 8009470:	e841 2300 	strex	r3, r2, [r1]
 8009474:	61bb      	str	r3, [r7, #24]
   return(result);
 8009476:	69bb      	ldr	r3, [r7, #24]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d1e5      	bne.n	8009448 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2220      	movs	r2, #32
 8009480:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2220      	movs	r2, #32
 8009486:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2220      	movs	r2, #32
 800948c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2200      	movs	r2, #0
 8009494:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009498:	2303      	movs	r3, #3
 800949a:	e010      	b.n	80094be <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	69da      	ldr	r2, [r3, #28]
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	4013      	ands	r3, r2
 80094a6:	68ba      	ldr	r2, [r7, #8]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	bf0c      	ite	eq
 80094ac:	2301      	moveq	r3, #1
 80094ae:	2300      	movne	r3, #0
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	461a      	mov	r2, r3
 80094b4:	79fb      	ldrb	r3, [r7, #7]
 80094b6:	429a      	cmp	r2, r3
 80094b8:	f43f af4a 	beq.w	8009350 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80094bc:	2300      	movs	r3, #0
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3770      	adds	r7, #112	; 0x70
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
	...

080094c8 <board_init_common_rtc_init>:
uint32_t g_button_on_count[NUM_PUSH_BUTTONS] = {0};
bool button_press_state[NUM_PUSH_BUTTONS] = {false};
extern UART_HandleTypeDef      gh_host_usart;

static void board_init_common_rtc_init(void)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	af00      	add	r7, sp, #0
    g_rtc_handle.Instance = RTC;
 80094cc:	4b10      	ldr	r3, [pc, #64]	; (8009510 <board_init_common_rtc_init+0x48>)
 80094ce:	4a11      	ldr	r2, [pc, #68]	; (8009514 <board_init_common_rtc_init+0x4c>)
 80094d0:	601a      	str	r2, [r3, #0]
    g_rtc_handle.Init.HourFormat = RTC_HOURFORMAT_24;
 80094d2:	4b0f      	ldr	r3, [pc, #60]	; (8009510 <board_init_common_rtc_init+0x48>)
 80094d4:	2200      	movs	r2, #0
 80094d6:	605a      	str	r2, [r3, #4]
    g_rtc_handle.Init.AsynchPrediv = 127;
 80094d8:	4b0d      	ldr	r3, [pc, #52]	; (8009510 <board_init_common_rtc_init+0x48>)
 80094da:	227f      	movs	r2, #127	; 0x7f
 80094dc:	609a      	str	r2, [r3, #8]
    g_rtc_handle.Init.SynchPrediv = 255;
 80094de:	4b0c      	ldr	r3, [pc, #48]	; (8009510 <board_init_common_rtc_init+0x48>)
 80094e0:	22ff      	movs	r2, #255	; 0xff
 80094e2:	60da      	str	r2, [r3, #12]
    g_rtc_handle.Init.OutPut = RTC_OUTPUT_DISABLE;
 80094e4:	4b0a      	ldr	r3, [pc, #40]	; (8009510 <board_init_common_rtc_init+0x48>)
 80094e6:	2200      	movs	r2, #0
 80094e8:	611a      	str	r2, [r3, #16]
    g_rtc_handle.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80094ea:	4b09      	ldr	r3, [pc, #36]	; (8009510 <board_init_common_rtc_init+0x48>)
 80094ec:	2200      	movs	r2, #0
 80094ee:	615a      	str	r2, [r3, #20]
    g_rtc_handle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80094f0:	4b07      	ldr	r3, [pc, #28]	; (8009510 <board_init_common_rtc_init+0x48>)
 80094f2:	2200      	movs	r2, #0
 80094f4:	619a      	str	r2, [r3, #24]
    g_rtc_handle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80094f6:	4b06      	ldr	r3, [pc, #24]	; (8009510 <board_init_common_rtc_init+0x48>)
 80094f8:	2200      	movs	r2, #0
 80094fa:	61da      	str	r2, [r3, #28]
    if (HAL_RTC_Init(&g_rtc_handle) != HAL_OK) Error_Handler();
 80094fc:	4804      	ldr	r0, [pc, #16]	; (8009510 <board_init_common_rtc_init+0x48>)
 80094fe:	f7fd fead 	bl	800725c <HAL_RTC_Init>
 8009502:	4603      	mov	r3, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	d001      	beq.n	800950c <board_init_common_rtc_init+0x44>
 8009508:	f000 fa41 	bl	800998e <Error_Handler>
}
 800950c:	bf00      	nop
 800950e:	bd80      	pop	{r7, pc}
 8009510:	20001df0 	.word	0x20001df0
 8009514:	40002800 	.word	0x40002800

08009518 <SystemClock_Config>:

static void SystemClock_Config(void)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b0ae      	sub	sp, #184	; 0xb8
 800951c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800951e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009522:	2244      	movs	r2, #68	; 0x44
 8009524:	2100      	movs	r1, #0
 8009526:	4618      	mov	r0, r3
 8009528:	f001 f86e 	bl	800a608 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800952c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009530:	2200      	movs	r2, #0
 8009532:	601a      	str	r2, [r3, #0]
 8009534:	605a      	str	r2, [r3, #4]
 8009536:	609a      	str	r2, [r3, #8]
 8009538:	60da      	str	r2, [r3, #12]
 800953a:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800953c:	1d3b      	adds	r3, r7, #4
 800953e:	225c      	movs	r2, #92	; 0x5c
 8009540:	2100      	movs	r1, #0
 8009542:	4618      	mov	r0, r3
 8009544:	f001 f860 	bl	800a608 <memset>

    HAL_PWR_EnableBkUpAccess();
 8009548:	f7fc fc62 	bl	8005e10 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800954c:	4b25      	ldr	r3, [pc, #148]	; (80095e4 <SystemClock_Config+0xcc>)
 800954e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009552:	4a24      	ldr	r2, [pc, #144]	; (80095e4 <SystemClock_Config+0xcc>)
 8009554:	f023 0318 	bic.w	r3, r3, #24
 8009558:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800955c:	2305      	movs	r3, #5
 800955e:	677b      	str	r3, [r7, #116]	; 0x74
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009560:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009564:	67bb      	str	r3, [r7, #120]	; 0x78
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8009566:	2301      	movs	r3, #1
 8009568:	67fb      	str	r3, [r7, #124]	; 0x7c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800956a:	2300      	movs	r3, #0
 800956c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) while(1);
 8009570:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009574:	4618      	mov	r0, r3
 8009576:	f7fc fd2f 	bl	8005fd8 <HAL_RCC_OscConfig>
 800957a:	4603      	mov	r3, r0
 800957c:	2b00      	cmp	r3, #0
 800957e:	d000      	beq.n	8009582 <SystemClock_Config+0x6a>
 8009580:	e7fe      	b.n	8009580 <SystemClock_Config+0x68>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009582:	230f      	movs	r3, #15
 8009584:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8009586:	2302      	movs	r3, #2
 8009588:	667b      	str	r3, [r7, #100]	; 0x64
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800958a:	2300      	movs	r3, #0
 800958c:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800958e:	2300      	movs	r3, #0
 8009590:	66fb      	str	r3, [r7, #108]	; 0x6c
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009592:	2300      	movs	r3, #0
 8009594:	673b      	str	r3, [r7, #112]	; 0x70

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) while(1);
 8009596:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800959a:	2102      	movs	r1, #2
 800959c:	4618      	mov	r0, r3
 800959e:	f7fd f92f 	bl	8006800 <HAL_RCC_ClockConfig>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d000      	beq.n	80095aa <SystemClock_Config+0x92>
 80095a8:	e7fe      	b.n	80095a8 <SystemClock_Config+0x90>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80095aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80095ae:	607b      	str	r3, [r7, #4]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80095b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095b4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) Error_Handler();
 80095b6:	1d3b      	adds	r3, r7, #4
 80095b8:	4618      	mov	r0, r3
 80095ba:	f7fd fb45 	bl	8006c48 <HAL_RCCEx_PeriphCLKConfig>
 80095be:	4603      	mov	r3, r0
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d001      	beq.n	80095c8 <SystemClock_Config+0xb0>
 80095c4:	f000 f9e3 	bl	800998e <Error_Handler>
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) Error_Handler();
 80095c8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80095cc:	f7fc fcae 	bl	8005f2c <HAL_PWREx_ControlVoltageScaling>
 80095d0:	4603      	mov	r3, r0
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d001      	beq.n	80095da <SystemClock_Config+0xc2>
 80095d6:	f000 f9da 	bl	800998e <Error_Handler>
}
 80095da:	bf00      	nop
 80095dc:	37b8      	adds	r7, #184	; 0xb8
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	40021000 	.word	0x40021000

080095e8 <board_init_common_timer_init>:


static void board_init_common_timer_init(void)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b09e      	sub	sp, #120	; 0x78
 80095ec:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095ee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80095f2:	2200      	movs	r2, #0
 80095f4:	601a      	str	r2, [r3, #0]
 80095f6:	605a      	str	r2, [r3, #4]
 80095f8:	609a      	str	r2, [r3, #8]
 80095fa:	60da      	str	r2, [r3, #12]
 80095fc:	611a      	str	r2, [r3, #16]
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80095fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009602:	2200      	movs	r2, #0
 8009604:	601a      	str	r2, [r3, #0]
 8009606:	605a      	str	r2, [r3, #4]
 8009608:	609a      	str	r2, [r3, #8]
 800960a:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800960c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009610:	2200      	movs	r2, #0
 8009612:	601a      	str	r2, [r3, #0]
 8009614:	605a      	str	r2, [r3, #4]
 8009616:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8009618:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800961c:	2200      	movs	r2, #0
 800961e:	601a      	str	r2, [r3, #0]
 8009620:	605a      	str	r2, [r3, #4]
 8009622:	609a      	str	r2, [r3, #8]
 8009624:	60da      	str	r2, [r3, #12]
 8009626:	611a      	str	r2, [r3, #16]
 8009628:	615a      	str	r2, [r3, #20]
 800962a:	619a      	str	r2, [r3, #24]
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800962c:	463b      	mov	r3, r7
 800962e:	222c      	movs	r2, #44	; 0x2c
 8009630:	2100      	movs	r1, #0
 8009632:	4618      	mov	r0, r3
 8009634:	f000 ffe8 	bl	800a608 <memset>
    g_tim1_handle.Instance = TIM1;
 8009638:	4b5c      	ldr	r3, [pc, #368]	; (80097ac <board_init_common_timer_init+0x1c4>)
 800963a:	4a5d      	ldr	r2, [pc, #372]	; (80097b0 <board_init_common_timer_init+0x1c8>)
 800963c:	601a      	str	r2, [r3, #0]
    g_tim1_handle.Init.Prescaler = 0;
 800963e:	4b5b      	ldr	r3, [pc, #364]	; (80097ac <board_init_common_timer_init+0x1c4>)
 8009640:	2200      	movs	r2, #0
 8009642:	605a      	str	r2, [r3, #4]
    g_tim1_handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009644:	4b59      	ldr	r3, [pc, #356]	; (80097ac <board_init_common_timer_init+0x1c4>)
 8009646:	2200      	movs	r2, #0
 8009648:	609a      	str	r2, [r3, #8]
    g_tim1_handle.Init.Period = 60-1;
 800964a:	4b58      	ldr	r3, [pc, #352]	; (80097ac <board_init_common_timer_init+0x1c4>)
 800964c:	223b      	movs	r2, #59	; 0x3b
 800964e:	60da      	str	r2, [r3, #12]
    g_tim1_handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009650:	4b56      	ldr	r3, [pc, #344]	; (80097ac <board_init_common_timer_init+0x1c4>)
 8009652:	2200      	movs	r2, #0
 8009654:	611a      	str	r2, [r3, #16]
    g_tim1_handle.Init.RepetitionCounter = 0;
 8009656:	4b55      	ldr	r3, [pc, #340]	; (80097ac <board_init_common_timer_init+0x1c4>)
 8009658:	2200      	movs	r2, #0
 800965a:	615a      	str	r2, [r3, #20]
    g_tim1_handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800965c:	4b53      	ldr	r3, [pc, #332]	; (80097ac <board_init_common_timer_init+0x1c4>)
 800965e:	2200      	movs	r2, #0
 8009660:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&g_tim1_handle) != HAL_OK) Error_Handler();
 8009662:	4852      	ldr	r0, [pc, #328]	; (80097ac <board_init_common_timer_init+0x1c4>)
 8009664:	f7fd ffb9 	bl	80075da <HAL_TIM_Base_Init>
 8009668:	4603      	mov	r3, r0
 800966a:	2b00      	cmp	r3, #0
 800966c:	d001      	beq.n	8009672 <board_init_common_timer_init+0x8a>
 800966e:	f000 f98e 	bl	800998e <Error_Handler>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009672:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009676:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_TIM_ConfigClockSource(&g_tim1_handle, &sClockSourceConfig) != HAL_OK) Error_Handler();
 8009678:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800967c:	4619      	mov	r1, r3
 800967e:	484b      	ldr	r0, [pc, #300]	; (80097ac <board_init_common_timer_init+0x1c4>)
 8009680:	f7fe fc4e 	bl	8007f20 <HAL_TIM_ConfigClockSource>
 8009684:	4603      	mov	r3, r0
 8009686:	2b00      	cmp	r3, #0
 8009688:	d001      	beq.n	800968e <board_init_common_timer_init+0xa6>
 800968a:	f000 f980 	bl	800998e <Error_Handler>
    if (HAL_TIM_PWM_Init(&g_tim1_handle) != HAL_OK) Error_Handler();
 800968e:	4847      	ldr	r0, [pc, #284]	; (80097ac <board_init_common_timer_init+0x1c4>)
 8009690:	f7fd fffa 	bl	8007688 <HAL_TIM_PWM_Init>
 8009694:	4603      	mov	r3, r0
 8009696:	2b00      	cmp	r3, #0
 8009698:	d001      	beq.n	800969e <board_init_common_timer_init+0xb6>
 800969a:	f000 f978 	bl	800998e <Error_Handler>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800969e:	2300      	movs	r3, #0
 80096a0:	64bb      	str	r3, [r7, #72]	; 0x48
    sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80096a2:	2300      	movs	r3, #0
 80096a4:	64fb      	str	r3, [r7, #76]	; 0x4c
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80096a6:	2300      	movs	r3, #0
 80096a8:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_TIMEx_MasterConfigSynchronization(&g_tim1_handle, &sMasterConfig) != HAL_OK) Error_Handler();
 80096aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80096ae:	4619      	mov	r1, r3
 80096b0:	483e      	ldr	r0, [pc, #248]	; (80097ac <board_init_common_timer_init+0x1c4>)
 80096b2:	f7ff f985 	bl	80089c0 <HAL_TIMEx_MasterConfigSynchronization>
 80096b6:	4603      	mov	r3, r0
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d001      	beq.n	80096c0 <board_init_common_timer_init+0xd8>
 80096bc:	f000 f967 	bl	800998e <Error_Handler>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80096c0:	2360      	movs	r3, #96	; 0x60
 80096c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    sConfigOC.Pulse = 0;
 80096c4:	2300      	movs	r3, #0
 80096c6:	633b      	str	r3, [r7, #48]	; 0x30
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80096c8:	2300      	movs	r3, #0
 80096ca:	637b      	str	r3, [r7, #52]	; 0x34
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80096cc:	2300      	movs	r3, #0
 80096ce:	63bb      	str	r3, [r7, #56]	; 0x38
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80096d0:	2300      	movs	r3, #0
 80096d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80096d4:	2300      	movs	r3, #0
 80096d6:	643b      	str	r3, [r7, #64]	; 0x40
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80096d8:	2300      	movs	r3, #0
 80096da:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 80096dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80096e0:	2200      	movs	r2, #0
 80096e2:	4619      	mov	r1, r3
 80096e4:	4831      	ldr	r0, [pc, #196]	; (80097ac <board_init_common_timer_init+0x1c4>)
 80096e6:	f7fe fb07 	bl	8007cf8 <HAL_TIM_PWM_ConfigChannel>
 80096ea:	4603      	mov	r3, r0
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d001      	beq.n	80096f4 <board_init_common_timer_init+0x10c>
 80096f0:	f000 f94d 	bl	800998e <Error_Handler>
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) Error_Handler();
 80096f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80096f8:	2204      	movs	r2, #4
 80096fa:	4619      	mov	r1, r3
 80096fc:	482b      	ldr	r0, [pc, #172]	; (80097ac <board_init_common_timer_init+0x1c4>)
 80096fe:	f7fe fafb 	bl	8007cf8 <HAL_TIM_PWM_ConfigChannel>
 8009702:	4603      	mov	r3, r0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d001      	beq.n	800970c <board_init_common_timer_init+0x124>
 8009708:	f000 f941 	bl	800998e <Error_Handler>
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) Error_Handler();
 800970c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009710:	2208      	movs	r2, #8
 8009712:	4619      	mov	r1, r3
 8009714:	4825      	ldr	r0, [pc, #148]	; (80097ac <board_init_common_timer_init+0x1c4>)
 8009716:	f7fe faef 	bl	8007cf8 <HAL_TIM_PWM_ConfigChannel>
 800971a:	4603      	mov	r3, r0
 800971c:	2b00      	cmp	r3, #0
 800971e:	d001      	beq.n	8009724 <board_init_common_timer_init+0x13c>
 8009720:	f000 f935 	bl	800998e <Error_Handler>
    sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009724:	2300      	movs	r3, #0
 8009726:	603b      	str	r3, [r7, #0]
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009728:	2300      	movs	r3, #0
 800972a:	607b      	str	r3, [r7, #4]
    sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800972c:	2300      	movs	r3, #0
 800972e:	60bb      	str	r3, [r7, #8]
    sBreakDeadTimeConfig.DeadTime = 0;
 8009730:	2300      	movs	r3, #0
 8009732:	60fb      	str	r3, [r7, #12]
    sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009734:	2300      	movs	r3, #0
 8009736:	613b      	str	r3, [r7, #16]
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009738:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800973c:	617b      	str	r3, [r7, #20]
    sBreakDeadTimeConfig.BreakFilter = 0;
 800973e:	2300      	movs	r3, #0
 8009740:	61bb      	str	r3, [r7, #24]
    sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8009742:	2300      	movs	r3, #0
 8009744:	61fb      	str	r3, [r7, #28]
    sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8009746:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800974a:	623b      	str	r3, [r7, #32]
    sBreakDeadTimeConfig.Break2Filter = 0;
 800974c:	2300      	movs	r3, #0
 800974e:	627b      	str	r3, [r7, #36]	; 0x24
    sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009750:	2300      	movs	r3, #0
 8009752:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIMEx_ConfigBreakDeadTime(&g_tim1_handle, &sBreakDeadTimeConfig) != HAL_OK) Error_Handler();
 8009754:	463b      	mov	r3, r7
 8009756:	4619      	mov	r1, r3
 8009758:	4814      	ldr	r0, [pc, #80]	; (80097ac <board_init_common_timer_init+0x1c4>)
 800975a:	f7ff f997 	bl	8008a8c <HAL_TIMEx_ConfigBreakDeadTime>
 800975e:	4603      	mov	r3, r0
 8009760:	2b00      	cmp	r3, #0
 8009762:	d001      	beq.n	8009768 <board_init_common_timer_init+0x180>
 8009764:	f000 f913 	bl	800998e <Error_Handler>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_1);
 8009768:	2100      	movs	r1, #0
 800976a:	4810      	ldr	r0, [pc, #64]	; (80097ac <board_init_common_timer_init+0x1c4>)
 800976c:	f7fe f9dc 	bl	8007b28 <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_2);
 8009770:	2104      	movs	r1, #4
 8009772:	480e      	ldr	r0, [pc, #56]	; (80097ac <board_init_common_timer_init+0x1c4>)
 8009774:	f7fe f9d8 	bl	8007b28 <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_3);
 8009778:	2108      	movs	r1, #8
 800977a:	480c      	ldr	r0, [pc, #48]	; (80097ac <board_init_common_timer_init+0x1c4>)
 800977c:	f7fe f9d4 	bl	8007b28 <HAL_TIM_PWM_Stop_DMA>
    GPIO_InitStruct.Pin = PIN_TIM1_CH1|PIN_TIM1_CH2|PIN_TIM1_CH3;
 8009780:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8009784:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009786:	2302      	movs	r3, #2
 8009788:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800978a:	2300      	movs	r3, #0
 800978c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800978e:	2300      	movs	r3, #0
 8009790:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8009792:	2301      	movs	r3, #1
 8009794:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009796:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800979a:	4619      	mov	r1, r3
 800979c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80097a0:	f7fc f980 	bl	8005aa4 <HAL_GPIO_Init>
}
 80097a4:	bf00      	nop
 80097a6:	3778      	adds	r7, #120	; 0x78
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	20001e14 	.word	0x20001e14
 80097b0:	40012c00 	.word	0x40012c00

080097b4 <board_init_common_nvic_setup_interrupts>:


static void board_init_common_nvic_setup_interrupts(void)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	af00      	add	r7, sp, #0
    HAL_NVIC_SetPriority(EXTI0_IRQn, 24, 0);
 80097b8:	2200      	movs	r2, #0
 80097ba:	2118      	movs	r1, #24
 80097bc:	2006      	movs	r0, #6
 80097be:	f7fb feac 	bl	800551a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80097c2:	2006      	movs	r0, #6
 80097c4:	f7fb fec5 	bl	8005552 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI2_IRQn, 24, 0);
 80097c8:	2200      	movs	r2, #0
 80097ca:	2118      	movs	r1, #24
 80097cc:	2008      	movs	r0, #8
 80097ce:	f7fb fea4 	bl	800551a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80097d2:	2008      	movs	r0, #8
 80097d4:	f7fb febd 	bl	8005552 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI9_5_IRQn , 24, 0);
 80097d8:	2200      	movs	r2, #0
 80097da:	2118      	movs	r1, #24
 80097dc:	2017      	movs	r0, #23
 80097de:	f7fb fe9c 	bl	800551a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80097e2:	2017      	movs	r0, #23
 80097e4:	f7fb feb5 	bl	8005552 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 24, 0);
 80097e8:	2200      	movs	r2, #0
 80097ea:	2118      	movs	r1, #24
 80097ec:	2028      	movs	r0, #40	; 0x28
 80097ee:	f7fb fe94 	bl	800551a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80097f2:	2028      	movs	r0, #40	; 0x28
 80097f4:	f7fb fead 	bl	8005552 <HAL_NVIC_EnableIRQ>

    __HAL_GPIO_EXTI_CLEAR_IT(EXTI0_IRQn);
 80097f8:	4b1a      	ldr	r3, [pc, #104]	; (8009864 <board_init_common_nvic_setup_interrupts+0xb0>)
 80097fa:	2206      	movs	r2, #6
 80097fc:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI9_5_IRQn);
 80097fe:	4b19      	ldr	r3, [pc, #100]	; (8009864 <board_init_common_nvic_setup_interrupts+0xb0>)
 8009800:	2217      	movs	r2, #23
 8009802:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI15_10_IRQn);
 8009804:	4b17      	ldr	r3, [pc, #92]	; (8009864 <board_init_common_nvic_setup_interrupts+0xb0>)
 8009806:	2228      	movs	r2, #40	; 0x28
 8009808:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI2_IRQn);
 800980a:	4b16      	ldr	r3, [pc, #88]	; (8009864 <board_init_common_nvic_setup_interrupts+0xb0>)
 800980c:	2208      	movs	r2, #8
 800980e:	615a      	str	r2, [r3, #20]

    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8009810:	2200      	movs	r2, #0
 8009812:	2100      	movs	r1, #0
 8009814:	200c      	movs	r0, #12
 8009816:	f7fb fe80 	bl	800551a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800981a:	200c      	movs	r0, #12
 800981c:	f7fb fe99 	bl	8005552 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8009820:	2200      	movs	r2, #0
 8009822:	2100      	movs	r1, #0
 8009824:	200d      	movs	r0, #13
 8009826:	f7fb fe78 	bl	800551a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800982a:	200d      	movs	r0, #13
 800982c:	f7fb fe91 	bl	8005552 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8009830:	2200      	movs	r2, #0
 8009832:	2100      	movs	r1, #0
 8009834:	200f      	movs	r0, #15
 8009836:	f7fb fe70 	bl	800551a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800983a:	200f      	movs	r0, #15
 800983c:	f7fb fe89 	bl	8005552 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8009840:	2200      	movs	r2, #0
 8009842:	2100      	movs	r1, #0
 8009844:	2010      	movs	r0, #16
 8009846:	f7fb fe68 	bl	800551a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800984a:	2010      	movs	r0, #16
 800984c:	f7fb fe81 	bl	8005552 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8009850:	2200      	movs	r2, #0
 8009852:	2100      	movs	r1, #0
 8009854:	2011      	movs	r0, #17
 8009856:	f7fb fe60 	bl	800551a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800985a:	2011      	movs	r0, #17
 800985c:	f7fb fe79 	bl	8005552 <HAL_NVIC_EnableIRQ>
}
 8009860:	bf00      	nop
 8009862:	bd80      	pop	{r7, pc}
 8009864:	40010400 	.word	0x40010400

08009868 <board_init_common_setup_wakeups>:


static void board_init_common_setup_wakeups(void)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b086      	sub	sp, #24
 800986c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800986e:	1d3b      	adds	r3, r7, #4
 8009870:	2200      	movs	r2, #0
 8009872:	601a      	str	r2, [r3, #0]
 8009874:	605a      	str	r2, [r3, #4]
 8009876:	609a      	str	r2, [r3, #8]
 8009878:	60da      	str	r2, [r3, #12]
 800987a:	611a      	str	r2, [r3, #16]

    // setup the wakeups as only interrupts without the WKUP enabled yet... TODO
    GPIO_InitStruct.Pin = PIN_WKUP_1|PIN_WKUP_4;
 800987c:	2305      	movs	r3, #5
 800987e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8009880:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8009884:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009886:	2300      	movs	r3, #0
 8009888:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 800988a:	1d3b      	adds	r3, r7, #4
 800988c:	4619      	mov	r1, r3
 800988e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009892:	f7fc f907 	bl	8005aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_WKUP_2|PIN_WKUP_3;
 8009896:	f242 0320 	movw	r3, #8224	; 0x2020
 800989a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800989c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80098a0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098a2:	2300      	movs	r3, #0
 80098a4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 80098a6:	1d3b      	adds	r3, r7, #4
 80098a8:	4619      	mov	r1, r3
 80098aa:	4804      	ldr	r0, [pc, #16]	; (80098bc <board_init_common_setup_wakeups+0x54>)
 80098ac:	f7fc f8fa 	bl	8005aa4 <HAL_GPIO_Init>
    board_init_common_nvic_setup_interrupts();
 80098b0:	f7ff ff80 	bl	80097b4 <board_init_common_nvic_setup_interrupts>
}
 80098b4:	bf00      	nop
 80098b6:	3718      	adds	r7, #24
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}
 80098bc:	48000800 	.word	0x48000800

080098c0 <board_init_port_wakeup>:

static void board_init_port_wakeup(void)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b087      	sub	sp, #28
 80098c4:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80098c6:	4b21      	ldr	r3, [pc, #132]	; (800994c <board_init_port_wakeup+0x8c>)
 80098c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098ca:	4a20      	ldr	r2, [pc, #128]	; (800994c <board_init_port_wakeup+0x8c>)
 80098cc:	f043 0301 	orr.w	r3, r3, #1
 80098d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80098d2:	4b1e      	ldr	r3, [pc, #120]	; (800994c <board_init_port_wakeup+0x8c>)
 80098d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098d6:	f003 0301 	and.w	r3, r3, #1
 80098da:	617b      	str	r3, [r7, #20]
 80098dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80098de:	4b1b      	ldr	r3, [pc, #108]	; (800994c <board_init_port_wakeup+0x8c>)
 80098e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098e2:	4a1a      	ldr	r2, [pc, #104]	; (800994c <board_init_port_wakeup+0x8c>)
 80098e4:	f043 0302 	orr.w	r3, r3, #2
 80098e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80098ea:	4b18      	ldr	r3, [pc, #96]	; (800994c <board_init_port_wakeup+0x8c>)
 80098ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098ee:	f003 0302 	and.w	r3, r3, #2
 80098f2:	613b      	str	r3, [r7, #16]
 80098f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80098f6:	4b15      	ldr	r3, [pc, #84]	; (800994c <board_init_port_wakeup+0x8c>)
 80098f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098fa:	4a14      	ldr	r2, [pc, #80]	; (800994c <board_init_port_wakeup+0x8c>)
 80098fc:	f043 0304 	orr.w	r3, r3, #4
 8009900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009902:	4b12      	ldr	r3, [pc, #72]	; (800994c <board_init_port_wakeup+0x8c>)
 8009904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009906:	f003 0304 	and.w	r3, r3, #4
 800990a:	60fb      	str	r3, [r7, #12]
 800990c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800990e:	4b0f      	ldr	r3, [pc, #60]	; (800994c <board_init_port_wakeup+0x8c>)
 8009910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009912:	4a0e      	ldr	r2, [pc, #56]	; (800994c <board_init_port_wakeup+0x8c>)
 8009914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800991a:	4b0c      	ldr	r3, [pc, #48]	; (800994c <board_init_port_wakeup+0x8c>)
 800991c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800991e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009922:	60bb      	str	r3, [r7, #8]
 8009924:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_DMA1_CLK_ENABLE();
 8009926:	4b09      	ldr	r3, [pc, #36]	; (800994c <board_init_port_wakeup+0x8c>)
 8009928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800992a:	4a08      	ldr	r2, [pc, #32]	; (800994c <board_init_port_wakeup+0x8c>)
 800992c:	f043 0301 	orr.w	r3, r3, #1
 8009930:	6493      	str	r3, [r2, #72]	; 0x48
 8009932:	4b06      	ldr	r3, [pc, #24]	; (800994c <board_init_port_wakeup+0x8c>)
 8009934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009936:	f003 0301 	and.w	r3, r3, #1
 800993a:	607b      	str	r3, [r7, #4]
 800993c:	687b      	ldr	r3, [r7, #4]

}
 800993e:	bf00      	nop
 8009940:	371c      	adds	r7, #28
 8009942:	46bd      	mov	sp, r7
 8009944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009948:	4770      	bx	lr
 800994a:	bf00      	nop
 800994c:	40021000 	.word	0x40021000

08009950 <board_init_common_board_init>:

uint8_t new_buf[10] = {32,33,34,35};
void board_init_common_board_init(void)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	af00      	add	r7, sp, #0
    srand(time(0));
 8009954:	2000      	movs	r0, #0
 8009956:	f000 ffbb 	bl	800a8d0 <time>
 800995a:	4602      	mov	r2, r0
 800995c:	460b      	mov	r3, r1
 800995e:	4613      	mov	r3, r2
 8009960:	4618      	mov	r0, r3
 8009962:	f000 ff39 	bl	800a7d8 <srand>
    HAL_Init();
 8009966:	f7fb fc31 	bl	80051cc <HAL_Init>
    SystemClock_Config();
 800996a:	f7ff fdd5 	bl	8009518 <SystemClock_Config>

    board_init_port_wakeup();
 800996e:	f7ff ffa7 	bl	80098c0 <board_init_port_wakeup>

    board_init_common_setup_wakeups();
 8009972:	f7ff ff79 	bl	8009868 <board_init_common_setup_wakeups>
    board_init_specific();
 8009976:	f000 f8b5 	bl	8009ae4 <board_init_specific>

    board_init_common_timer_init();
 800997a:	f7ff fe35 	bl	80095e8 <board_init_common_timer_init>

    ws2812b_init();
 800997e:	f7f8 faab 	bl	8001ed8 <ws2812b_init>
    color_led_init();
 8009982:	f7f8 f82d 	bl	80019e0 <color_led_init>

    //animate_led_init(); // not yet defined..

    board_init_common_rtc_init();
 8009986:	f7ff fd9f 	bl	80094c8 <board_init_common_rtc_init>
}
 800998a:	bf00      	nop
 800998c:	bd80      	pop	{r7, pc}

0800998e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800998e:	b480      	push	{r7}
 8009990:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8009992:	b672      	cpsid	i
}
 8009994:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009996:	e7fe      	b.n	8009996 <Error_Handler+0x8>

08009998 <serial_com_init_spi>:
};



void serial_com_init_spi(void)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b082      	sub	sp, #8
 800999c:	af00      	add	r7, sp, #0
    __HAL_RCC_SPI1_CLK_ENABLE();
 800999e:	4b09      	ldr	r3, [pc, #36]	; (80099c4 <serial_com_init_spi+0x2c>)
 80099a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099a2:	4a08      	ldr	r2, [pc, #32]	; (80099c4 <serial_com_init_spi+0x2c>)
 80099a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80099a8:	6613      	str	r3, [r2, #96]	; 0x60
 80099aa:	4b06      	ldr	r3, [pc, #24]	; (80099c4 <serial_com_init_spi+0x2c>)
 80099ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80099b2:	607b      	str	r3, [r7, #4]
 80099b4:	687b      	ldr	r3, [r7, #4]
    if(HAL_SPI_Init(&gh_disp_spi) != HAL_OK)
 80099b6:	4804      	ldr	r0, [pc, #16]	; (80099c8 <serial_com_init_spi+0x30>)
 80099b8:	f7fd fd62 	bl	8007480 <HAL_SPI_Init>
    {
        /* Initialization Error */
        //Error_Handler();
    }
}
 80099bc:	bf00      	nop
 80099be:	3708      	adds	r7, #8
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	40021000 	.word	0x40021000
 80099c8:	20000098 	.word	0x20000098

080099cc <serial_com_init_usart>:


void serial_com_init_usart(void)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	af00      	add	r7, sp, #0
    if(HAL_UART_DeInit(&gh_host_usart) != HAL_OK)
 80099d0:	4805      	ldr	r0, [pc, #20]	; (80099e8 <serial_com_init_usart+0x1c>)
 80099d2:	f7ff f921 	bl	8008c18 <HAL_UART_DeInit>
    {
        //Error_Handler();
    }
    if(HAL_UART_Init(&gh_host_usart) != HAL_OK)
 80099d6:	4804      	ldr	r0, [pc, #16]	; (80099e8 <serial_com_init_usart+0x1c>)
 80099d8:	f7ff f8d0 	bl	8008b7c <HAL_UART_Init>
 80099dc:	4603      	mov	r3, r0
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d000      	beq.n	80099e4 <serial_com_init_usart+0x18>
    {
        while(1);
 80099e2:	e7fe      	b.n	80099e2 <serial_com_init_usart+0x16>
        //Error_Handler();
    }
}
 80099e4:	bf00      	nop
 80099e6:	bd80      	pop	{r7, pc}
 80099e8:	20000014 	.word	0x20000014

080099ec <board_init_usart_setup>:
#if defined(BOARD_SPUD_GLO_V4)


#if defined(BOARD_SPUD_GLO_V4P2)
static void board_init_usart_setup(void)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b09e      	sub	sp, #120	; 0x78
 80099f0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStruct;

    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80099f2:	f107 0308 	add.w	r3, r7, #8
 80099f6:	225c      	movs	r2, #92	; 0x5c
 80099f8:	2100      	movs	r1, #0
 80099fa:	4618      	mov	r0, r3
 80099fc:	f000 fe04 	bl	800a608 <memset>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8009a00:	2320      	movs	r3, #32
 8009a02:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_LSE;
 8009a04:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009a08:	637b      	str	r3, [r7, #52]	; 0x34

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009a0a:	f107 0308 	add.w	r3, r7, #8
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f7fd f91a 	bl	8006c48 <HAL_RCCEx_PeriphCLKConfig>
 8009a14:	4603      	mov	r3, r0
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d000      	beq.n	8009a1c <board_init_usart_setup+0x30>
    {
        while(1);
 8009a1a:	e7fe      	b.n	8009a1a <board_init_usart_setup+0x2e>
      //Error_Handler();
    }
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8009a1c:	4b1a      	ldr	r3, [pc, #104]	; (8009a88 <board_init_usart_setup+0x9c>)
 8009a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a20:	4a19      	ldr	r2, [pc, #100]	; (8009a88 <board_init_usart_setup+0x9c>)
 8009a22:	f043 0301 	orr.w	r3, r3, #1
 8009a26:	65d3      	str	r3, [r2, #92]	; 0x5c
 8009a28:	4b17      	ldr	r3, [pc, #92]	; (8009a88 <board_init_usart_setup+0x9c>)
 8009a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a2c:	f003 0301 	and.w	r3, r3, #1
 8009a30:	607b      	str	r3, [r7, #4]
 8009a32:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009a34:	4b14      	ldr	r3, [pc, #80]	; (8009a88 <board_init_usart_setup+0x9c>)
 8009a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a38:	4a13      	ldr	r2, [pc, #76]	; (8009a88 <board_init_usart_setup+0x9c>)
 8009a3a:	f043 0304 	orr.w	r3, r3, #4
 8009a3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a40:	4b11      	ldr	r3, [pc, #68]	; (8009a88 <board_init_usart_setup+0x9c>)
 8009a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a44:	f003 0304 	and.w	r3, r3, #4
 8009a48:	603b      	str	r3, [r7, #0]
 8009a4a:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Pin       = PIN_XR_RX | PIN_XR_TX; //
 8009a4c:	2303      	movs	r3, #3
 8009a4e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8009a50:	2302      	movs	r3, #2
 8009a52:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8009a54:	2300      	movs	r3, #0
 8009a56:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8009a5c:	2308      	movs	r3, #8
 8009a5e:	677b      	str	r3, [r7, #116]	; 0x74

    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 8009a60:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009a64:	4619      	mov	r1, r3
 8009a66:	4809      	ldr	r0, [pc, #36]	; (8009a8c <board_init_usart_setup+0xa0>)
 8009a68:	f7fc f81c 	bl	8005aa4 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 1);
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	2100      	movs	r1, #0
 8009a70:	2046      	movs	r0, #70	; 0x46
 8009a72:	f7fb fd52 	bl	800551a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8009a76:	2046      	movs	r0, #70	; 0x46
 8009a78:	f7fb fd6b 	bl	8005552 <HAL_NVIC_EnableIRQ>
    serial_com_init_usart();
 8009a7c:	f7ff ffa6 	bl	80099cc <serial_com_init_usart>
}
 8009a80:	bf00      	nop
 8009a82:	3778      	adds	r7, #120	; 0x78
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}
 8009a88:	40021000 	.word	0x40021000
 8009a8c:	48000800 	.word	0x48000800

08009a90 <board_init_spi_setup>:


static void board_init_spi_setup(void)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b09c      	sub	sp, #112	; 0x70
 8009a94:	af00      	add	r7, sp, #0
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009a96:	f107 0314 	add.w	r3, r7, #20
 8009a9a:	225c      	movs	r2, #92	; 0x5c
 8009a9c:	2100      	movs	r1, #0
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f000 fdb2 	bl	800a608 <memset>
//      //Error_Handler();
//    }
    //__HAL_RCC_LPUART1_CLK_ENABLE();
    GPIO_InitTypeDef  GPIO_InitStruct;

    GPIO_InitStruct.Pin         = PIN_SPI1_SCK | PIN_SPI1_CIPO | PIN_SPI1_COPI;
 8009aa4:	f641 0302 	movw	r3, #6146	; 0x1802
 8009aa8:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 8009aaa:	2302      	movs	r3, #2
 8009aac:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull        = GPIO_PULLDOWN;
 8009aae:	2302      	movs	r3, #2
 8009ab0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed       = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ab2:	2303      	movs	r3, #3
 8009ab4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Alternate   = GPIO_AF5_SPI1;
 8009ab6:	2305      	movs	r3, #5
 8009ab8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 8009aba:	463b      	mov	r3, r7
 8009abc:	4619      	mov	r1, r3
 8009abe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009ac2:	f7fb ffef 	bl	8005aa4 <HAL_GPIO_Init>

    serial_com_init_spi();
 8009ac6:	f7ff ff67 	bl	8009998 <serial_com_init_spi>
}
 8009aca:	bf00      	nop
 8009acc:	3770      	adds	r7, #112	; 0x70
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}

08009ad2 <board_init_peripheral_setup>:


static void board_init_peripheral_setup(void)
{
 8009ad2:	b580      	push	{r7, lr}
 8009ad4:	af00      	add	r7, sp, #0
    board_init_usart_setup();
 8009ad6:	f7ff ff89 	bl	80099ec <board_init_usart_setup>
    board_init_spi_setup();
 8009ada:	f7ff ffd9 	bl	8009a90 <board_init_spi_setup>
}
 8009ade:	bf00      	nop
 8009ae0:	bd80      	pop	{r7, pc}
	...

08009ae4 <board_init_specific>:
#endif


void board_init_specific(void)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b086      	sub	sp, #24
 8009ae8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009aea:	1d3b      	adds	r3, r7, #4
 8009aec:	2200      	movs	r2, #0
 8009aee:	601a      	str	r2, [r3, #0]
 8009af0:	605a      	str	r2, [r3, #4]
 8009af2:	609a      	str	r2, [r3, #8]
 8009af4:	60da      	str	r2, [r3, #12]
 8009af6:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = PIN_INT_LVL_EN;
 8009af8:	2301      	movs	r3, #1
 8009afa:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009afc:	2301      	movs	r3, #1
 8009afe:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b00:	2300      	movs	r3, #0
 8009b02:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);
 8009b04:	1d3b      	adds	r3, r7, #4
 8009b06:	4619      	mov	r1, r3
 8009b08:	4837      	ldr	r0, [pc, #220]	; (8009be8 <board_init_specific+0x104>)
 8009b0a:	f7fb ffcb 	bl	8005aa4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_B, PIN_INT_LVL_EN, GPIO_PIN_SET);
 8009b0e:	2201      	movs	r2, #1
 8009b10:	2101      	movs	r1, #1
 8009b12:	4835      	ldr	r0, [pc, #212]	; (8009be8 <board_init_specific+0x104>)
 8009b14:	f7fc f940 	bl	8005d98 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_LVL_EN;
 8009b18:	2380      	movs	r3, #128	; 0x80
 8009b1a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b20:	2300      	movs	r3, #0
 8009b22:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 8009b24:	1d3b      	adds	r3, r7, #4
 8009b26:	4619      	mov	r1, r3
 8009b28:	4830      	ldr	r0, [pc, #192]	; (8009bec <board_init_specific+0x108>)
 8009b2a:	f7fb ffbb 	bl	8005aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_LVL_DIR;
 8009b2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b32:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009b34:	2301      	movs	r3, #1
 8009b36:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 8009b3c:	1d3b      	adds	r3, r7, #4
 8009b3e:	4619      	mov	r1, r3
 8009b40:	482a      	ldr	r0, [pc, #168]	; (8009bec <board_init_specific+0x108>)
 8009b42:	f7fb ffaf 	bl	8005aa4 <HAL_GPIO_Init>

#if defined(BOARD_SPUD_GLO_V4P2)

    GPIO_InitStruct.Pin = PIN_DISP_RST | PIN_DISP_DC |PIN_DISP_BACKLIGHT;
 8009b46:	23e0      	movs	r3, #224	; 0xe0
 8009b48:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 8009b52:	1d3b      	adds	r3, r7, #4
 8009b54:	4619      	mov	r1, r3
 8009b56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009b5a:	f7fb ffa3 	bl	8005aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_INT_LVL_EN;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009b62:	2301      	movs	r3, #1
 8009b64:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b66:	2300      	movs	r3, #0
 8009b68:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);
 8009b6a:	1d3b      	adds	r3, r7, #4
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	481e      	ldr	r0, [pc, #120]	; (8009be8 <board_init_specific+0x104>)
 8009b70:	f7fb ff98 	bl	8005aa4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_B, PIN_INT_LVL_EN, GPIO_PIN_SET);
 8009b74:	2201      	movs	r2, #1
 8009b76:	2101      	movs	r1, #1
 8009b78:	481b      	ldr	r0, [pc, #108]	; (8009be8 <board_init_specific+0x104>)
 8009b7a:	f7fc f90d 	bl	8005d98 <HAL_GPIO_WritePin>
    // setup XR_RX and XR_TX

    GPIO_InitStruct.Pin = PIN_XR_GPIO | PIN_VBUS_PRESENT;
 8009b7e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009b82:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009b84:	2300      	movs	r3, #0
 8009b86:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);
 8009b8c:	1d3b      	adds	r3, r7, #4
 8009b8e:	4619      	mov	r1, r3
 8009b90:	4815      	ldr	r0, [pc, #84]	; (8009be8 <board_init_specific+0x104>)
 8009b92:	f7fb ff87 	bl	8005aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_LVL_EN;
 8009b96:	2380      	movs	r3, #128	; 0x80
 8009b98:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 8009ba2:	1d3b      	adds	r3, r7, #4
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	4811      	ldr	r0, [pc, #68]	; (8009bec <board_init_specific+0x108>)
 8009ba8:	f7fb ff7c 	bl	8005aa4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_LVL_EN, GPIO_PIN_RESET);
 8009bac:	2200      	movs	r2, #0
 8009bae:	2180      	movs	r1, #128	; 0x80
 8009bb0:	480e      	ldr	r0, [pc, #56]	; (8009bec <board_init_specific+0x108>)
 8009bb2:	f7fc f8f1 	bl	8005d98 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_LVL_DIR;
 8009bb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bba:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 8009bc4:	1d3b      	adds	r3, r7, #4
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	4808      	ldr	r0, [pc, #32]	; (8009bec <board_init_specific+0x108>)
 8009bca:	f7fb ff6b 	bl	8005aa4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_LVL_DIR, GPIO_PIN_SET);
 8009bce:	2201      	movs	r2, #1
 8009bd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009bd4:	4805      	ldr	r0, [pc, #20]	; (8009bec <board_init_specific+0x108>)
 8009bd6:	f7fc f8df 	bl	8005d98 <HAL_GPIO_WritePin>

    board_init_peripheral_setup();
 8009bda:	f7ff ff7a 	bl	8009ad2 <board_init_peripheral_setup>
#else

#endif
}
 8009bde:	bf00      	nop
 8009be0:	3718      	adds	r7, #24
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
 8009be6:	bf00      	nop
 8009be8:	48000400 	.word	0x48000400
 8009bec:	48000800 	.word	0x48000800

08009bf0 <HAL_Set_DMA_Callbacks>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);


// Function below added by SRW
static void HAL_Set_DMA_Callbacks(void)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	af00      	add	r7, sp, #0
    HAL_DMA_RegisterCallback(&hdma_tim1_ch1, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8009bf4:	4a0d      	ldr	r2, [pc, #52]	; (8009c2c <HAL_Set_DMA_Callbacks+0x3c>)
 8009bf6:	2100      	movs	r1, #0
 8009bf8:	480d      	ldr	r0, [pc, #52]	; (8009c30 <HAL_Set_DMA_Callbacks+0x40>)
 8009bfa:	f7fb fedb 	bl	80059b4 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim1_ch2, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8009bfe:	4a0b      	ldr	r2, [pc, #44]	; (8009c2c <HAL_Set_DMA_Callbacks+0x3c>)
 8009c00:	2100      	movs	r1, #0
 8009c02:	480c      	ldr	r0, [pc, #48]	; (8009c34 <HAL_Set_DMA_Callbacks+0x44>)
 8009c04:	f7fb fed6 	bl	80059b4 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim1_ch3, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8009c08:	4a08      	ldr	r2, [pc, #32]	; (8009c2c <HAL_Set_DMA_Callbacks+0x3c>)
 8009c0a:	2100      	movs	r1, #0
 8009c0c:	480a      	ldr	r0, [pc, #40]	; (8009c38 <HAL_Set_DMA_Callbacks+0x48>)
 8009c0e:	f7fb fed1 	bl	80059b4 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim15_ch1_up_trig_com, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8009c12:	4a06      	ldr	r2, [pc, #24]	; (8009c2c <HAL_Set_DMA_Callbacks+0x3c>)
 8009c14:	2100      	movs	r1, #0
 8009c16:	4809      	ldr	r0, [pc, #36]	; (8009c3c <HAL_Set_DMA_Callbacks+0x4c>)
 8009c18:	f7fb fecc 	bl	80059b4 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim16_ch1_up, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8009c1c:	4a03      	ldr	r2, [pc, #12]	; (8009c2c <HAL_Set_DMA_Callbacks+0x3c>)
 8009c1e:	2100      	movs	r1, #0
 8009c20:	4807      	ldr	r0, [pc, #28]	; (8009c40 <HAL_Set_DMA_Callbacks+0x50>)
 8009c22:	f7fb fec7 	bl	80059b4 <HAL_DMA_RegisterCallback>
}
 8009c26:	bf00      	nop
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	bf00      	nop
 8009c2c:	0800a18d 	.word	0x0800a18d
 8009c30:	20001c88 	.word	0x20001c88
 8009c34:	20001cd0 	.word	0x20001cd0
 8009c38:	20001d18 	.word	0x20001d18
 8009c3c:	20001d60 	.word	0x20001d60
 8009c40:	20001da8 	.word	0x20001da8

08009c44 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
  PWR_PVDTypeDef sConfigPVD = {0};
 8009c4a:	f107 0308 	add.w	r3, r7, #8
 8009c4e:	2200      	movs	r2, #0
 8009c50:	601a      	str	r2, [r3, #0]
 8009c52:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009c54:	4b13      	ldr	r3, [pc, #76]	; (8009ca4 <HAL_MspInit+0x60>)
 8009c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c58:	4a12      	ldr	r2, [pc, #72]	; (8009ca4 <HAL_MspInit+0x60>)
 8009c5a:	f043 0301 	orr.w	r3, r3, #1
 8009c5e:	6613      	str	r3, [r2, #96]	; 0x60
 8009c60:	4b10      	ldr	r3, [pc, #64]	; (8009ca4 <HAL_MspInit+0x60>)
 8009c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c64:	f003 0301 	and.w	r3, r3, #1
 8009c68:	607b      	str	r3, [r7, #4]
 8009c6a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009c6c:	4b0d      	ldr	r3, [pc, #52]	; (8009ca4 <HAL_MspInit+0x60>)
 8009c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c70:	4a0c      	ldr	r2, [pc, #48]	; (8009ca4 <HAL_MspInit+0x60>)
 8009c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c76:	6593      	str	r3, [r2, #88]	; 0x58
 8009c78:	4b0a      	ldr	r3, [pc, #40]	; (8009ca4 <HAL_MspInit+0x60>)
 8009c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c80:	603b      	str	r3, [r7, #0]
 8009c82:	683b      	ldr	r3, [r7, #0]

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8009c84:	2300      	movs	r3, #0
 8009c86:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8009c8c:	f107 0308 	add.w	r3, r7, #8
 8009c90:	4618      	mov	r0, r3
 8009c92:	f7fc f8cd 	bl	8005e30 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8009c96:	f7fc f92b 	bl	8005ef0 <HAL_PWR_EnablePVD>
}
 8009c9a:	bf00      	nop
 8009c9c:	3710      	adds	r7, #16
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	bf00      	nop
 8009ca4:	40021000 	.word	0x40021000

08009ca8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b083      	sub	sp, #12
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a08      	ldr	r2, [pc, #32]	; (8009cd8 <HAL_RTC_MspInit+0x30>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d107      	bne.n	8009cca <HAL_RTC_MspInit+0x22>
  {
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8009cba:	4b08      	ldr	r3, [pc, #32]	; (8009cdc <HAL_RTC_MspInit+0x34>)
 8009cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cc0:	4a06      	ldr	r2, [pc, #24]	; (8009cdc <HAL_RTC_MspInit+0x34>)
 8009cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

}
 8009cca:	bf00      	nop
 8009ccc:	370c      	adds	r7, #12
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr
 8009cd6:	bf00      	nop
 8009cd8:	40002800 	.word	0x40002800
 8009cdc:	40021000 	.word	0x40021000

08009ce0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b084      	sub	sp, #16
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a6e      	ldr	r2, [pc, #440]	; (8009ea8 <HAL_TIM_Base_MspInit+0x1c8>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	f040 8091 	bne.w	8009e16 <HAL_TIM_Base_MspInit+0x136>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009cf4:	4b6d      	ldr	r3, [pc, #436]	; (8009eac <HAL_TIM_Base_MspInit+0x1cc>)
 8009cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cf8:	4a6c      	ldr	r2, [pc, #432]	; (8009eac <HAL_TIM_Base_MspInit+0x1cc>)
 8009cfa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009cfe:	6613      	str	r3, [r2, #96]	; 0x60
 8009d00:	4b6a      	ldr	r3, [pc, #424]	; (8009eac <HAL_TIM_Base_MspInit+0x1cc>)
 8009d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d08:	60fb      	str	r3, [r7, #12]
 8009d0a:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8009d0c:	4b68      	ldr	r3, [pc, #416]	; (8009eb0 <HAL_TIM_Base_MspInit+0x1d0>)
 8009d0e:	4a69      	ldr	r2, [pc, #420]	; (8009eb4 <HAL_TIM_Base_MspInit+0x1d4>)
 8009d10:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 8009d12:	4b67      	ldr	r3, [pc, #412]	; (8009eb0 <HAL_TIM_Base_MspInit+0x1d0>)
 8009d14:	2207      	movs	r2, #7
 8009d16:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009d18:	4b65      	ldr	r3, [pc, #404]	; (8009eb0 <HAL_TIM_Base_MspInit+0x1d0>)
 8009d1a:	2210      	movs	r2, #16
 8009d1c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8009d1e:	4b64      	ldr	r3, [pc, #400]	; (8009eb0 <HAL_TIM_Base_MspInit+0x1d0>)
 8009d20:	2200      	movs	r2, #0
 8009d22:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8009d24:	4b62      	ldr	r3, [pc, #392]	; (8009eb0 <HAL_TIM_Base_MspInit+0x1d0>)
 8009d26:	2280      	movs	r2, #128	; 0x80
 8009d28:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009d2a:	4b61      	ldr	r3, [pc, #388]	; (8009eb0 <HAL_TIM_Base_MspInit+0x1d0>)
 8009d2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d30:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009d32:	4b5f      	ldr	r3, [pc, #380]	; (8009eb0 <HAL_TIM_Base_MspInit+0x1d0>)
 8009d34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009d38:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8009d3a:	4b5d      	ldr	r3, [pc, #372]	; (8009eb0 <HAL_TIM_Base_MspInit+0x1d0>)
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8009d40:	4b5b      	ldr	r3, [pc, #364]	; (8009eb0 <HAL_TIM_Base_MspInit+0x1d0>)
 8009d42:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009d46:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8009d48:	4859      	ldr	r0, [pc, #356]	; (8009eb0 <HAL_TIM_Base_MspInit+0x1d0>)
 8009d4a:	f7fb fc2b 	bl	80055a4 <HAL_DMA_Init>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d001      	beq.n	8009d58 <HAL_TIM_Base_MspInit+0x78>
    {
      Error_Handler();
 8009d54:	f7ff fe1b 	bl	800998e <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	4a55      	ldr	r2, [pc, #340]	; (8009eb0 <HAL_TIM_Base_MspInit+0x1d0>)
 8009d5c:	625a      	str	r2, [r3, #36]	; 0x24
 8009d5e:	4a54      	ldr	r2, [pc, #336]	; (8009eb0 <HAL_TIM_Base_MspInit+0x1d0>)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel3;
 8009d64:	4b54      	ldr	r3, [pc, #336]	; (8009eb8 <HAL_TIM_Base_MspInit+0x1d8>)
 8009d66:	4a55      	ldr	r2, [pc, #340]	; (8009ebc <HAL_TIM_Base_MspInit+0x1dc>)
 8009d68:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_7;
 8009d6a:	4b53      	ldr	r3, [pc, #332]	; (8009eb8 <HAL_TIM_Base_MspInit+0x1d8>)
 8009d6c:	2207      	movs	r2, #7
 8009d6e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009d70:	4b51      	ldr	r3, [pc, #324]	; (8009eb8 <HAL_TIM_Base_MspInit+0x1d8>)
 8009d72:	2210      	movs	r2, #16
 8009d74:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8009d76:	4b50      	ldr	r3, [pc, #320]	; (8009eb8 <HAL_TIM_Base_MspInit+0x1d8>)
 8009d78:	2200      	movs	r2, #0
 8009d7a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8009d7c:	4b4e      	ldr	r3, [pc, #312]	; (8009eb8 <HAL_TIM_Base_MspInit+0x1d8>)
 8009d7e:	2280      	movs	r2, #128	; 0x80
 8009d80:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009d82:	4b4d      	ldr	r3, [pc, #308]	; (8009eb8 <HAL_TIM_Base_MspInit+0x1d8>)
 8009d84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d88:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009d8a:	4b4b      	ldr	r3, [pc, #300]	; (8009eb8 <HAL_TIM_Base_MspInit+0x1d8>)
 8009d8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009d90:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 8009d92:	4b49      	ldr	r3, [pc, #292]	; (8009eb8 <HAL_TIM_Base_MspInit+0x1d8>)
 8009d94:	2200      	movs	r2, #0
 8009d96:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8009d98:	4b47      	ldr	r3, [pc, #284]	; (8009eb8 <HAL_TIM_Base_MspInit+0x1d8>)
 8009d9a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009d9e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8009da0:	4845      	ldr	r0, [pc, #276]	; (8009eb8 <HAL_TIM_Base_MspInit+0x1d8>)
 8009da2:	f7fb fbff 	bl	80055a4 <HAL_DMA_Init>
 8009da6:	4603      	mov	r3, r0
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d001      	beq.n	8009db0 <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 8009dac:	f7ff fdef 	bl	800998e <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	4a41      	ldr	r2, [pc, #260]	; (8009eb8 <HAL_TIM_Base_MspInit+0x1d8>)
 8009db4:	629a      	str	r2, [r3, #40]	; 0x28
 8009db6:	4a40      	ldr	r2, [pc, #256]	; (8009eb8 <HAL_TIM_Base_MspInit+0x1d8>)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel7;
 8009dbc:	4b40      	ldr	r3, [pc, #256]	; (8009ec0 <HAL_TIM_Base_MspInit+0x1e0>)
 8009dbe:	4a41      	ldr	r2, [pc, #260]	; (8009ec4 <HAL_TIM_Base_MspInit+0x1e4>)
 8009dc0:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Request = DMA_REQUEST_7;
 8009dc2:	4b3f      	ldr	r3, [pc, #252]	; (8009ec0 <HAL_TIM_Base_MspInit+0x1e0>)
 8009dc4:	2207      	movs	r2, #7
 8009dc6:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009dc8:	4b3d      	ldr	r3, [pc, #244]	; (8009ec0 <HAL_TIM_Base_MspInit+0x1e0>)
 8009dca:	2210      	movs	r2, #16
 8009dcc:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8009dce:	4b3c      	ldr	r3, [pc, #240]	; (8009ec0 <HAL_TIM_Base_MspInit+0x1e0>)
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8009dd4:	4b3a      	ldr	r3, [pc, #232]	; (8009ec0 <HAL_TIM_Base_MspInit+0x1e0>)
 8009dd6:	2280      	movs	r2, #128	; 0x80
 8009dd8:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009dda:	4b39      	ldr	r3, [pc, #228]	; (8009ec0 <HAL_TIM_Base_MspInit+0x1e0>)
 8009ddc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009de0:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009de2:	4b37      	ldr	r3, [pc, #220]	; (8009ec0 <HAL_TIM_Base_MspInit+0x1e0>)
 8009de4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009de8:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 8009dea:	4b35      	ldr	r3, [pc, #212]	; (8009ec0 <HAL_TIM_Base_MspInit+0x1e0>)
 8009dec:	2200      	movs	r2, #0
 8009dee:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8009df0:	4b33      	ldr	r3, [pc, #204]	; (8009ec0 <HAL_TIM_Base_MspInit+0x1e0>)
 8009df2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009df6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8009df8:	4831      	ldr	r0, [pc, #196]	; (8009ec0 <HAL_TIM_Base_MspInit+0x1e0>)
 8009dfa:	f7fb fbd3 	bl	80055a4 <HAL_DMA_Init>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d001      	beq.n	8009e08 <HAL_TIM_Base_MspInit+0x128>
    {
      Error_Handler();
 8009e04:	f7ff fdc3 	bl	800998e <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	4a2d      	ldr	r2, [pc, #180]	; (8009ec0 <HAL_TIM_Base_MspInit+0x1e0>)
 8009e0c:	62da      	str	r2, [r3, #44]	; 0x2c
 8009e0e:	4a2c      	ldr	r2, [pc, #176]	; (8009ec0 <HAL_TIM_Base_MspInit+0x1e0>)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6293      	str	r3, [r2, #40]	; 0x28
 8009e14:	e041      	b.n	8009e9a <HAL_TIM_Base_MspInit+0x1ba>
  }
  else if(htim_base->Instance==TIM16)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a2b      	ldr	r2, [pc, #172]	; (8009ec8 <HAL_TIM_Base_MspInit+0x1e8>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d13c      	bne.n	8009e9a <HAL_TIM_Base_MspInit+0x1ba>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8009e20:	4b22      	ldr	r3, [pc, #136]	; (8009eac <HAL_TIM_Base_MspInit+0x1cc>)
 8009e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e24:	4a21      	ldr	r2, [pc, #132]	; (8009eac <HAL_TIM_Base_MspInit+0x1cc>)
 8009e26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e2a:	6613      	str	r3, [r2, #96]	; 0x60
 8009e2c:	4b1f      	ldr	r3, [pc, #124]	; (8009eac <HAL_TIM_Base_MspInit+0x1cc>)
 8009e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e34:	60bb      	str	r3, [r7, #8]
 8009e36:	68bb      	ldr	r3, [r7, #8]

    /* TIM16 DMA Init */
    /* TIM16_CH1_UP Init */
    hdma_tim16_ch1_up.Instance = DMA1_Channel6;
 8009e38:	4b24      	ldr	r3, [pc, #144]	; (8009ecc <HAL_TIM_Base_MspInit+0x1ec>)
 8009e3a:	4a25      	ldr	r2, [pc, #148]	; (8009ed0 <HAL_TIM_Base_MspInit+0x1f0>)
 8009e3c:	601a      	str	r2, [r3, #0]
    hdma_tim16_ch1_up.Init.Request = DMA_REQUEST_4;
 8009e3e:	4b23      	ldr	r3, [pc, #140]	; (8009ecc <HAL_TIM_Base_MspInit+0x1ec>)
 8009e40:	2204      	movs	r2, #4
 8009e42:	605a      	str	r2, [r3, #4]
    hdma_tim16_ch1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009e44:	4b21      	ldr	r3, [pc, #132]	; (8009ecc <HAL_TIM_Base_MspInit+0x1ec>)
 8009e46:	2210      	movs	r2, #16
 8009e48:	609a      	str	r2, [r3, #8]
    hdma_tim16_ch1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8009e4a:	4b20      	ldr	r3, [pc, #128]	; (8009ecc <HAL_TIM_Base_MspInit+0x1ec>)
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	60da      	str	r2, [r3, #12]
    hdma_tim16_ch1_up.Init.MemInc = DMA_MINC_ENABLE;
 8009e50:	4b1e      	ldr	r3, [pc, #120]	; (8009ecc <HAL_TIM_Base_MspInit+0x1ec>)
 8009e52:	2280      	movs	r2, #128	; 0x80
 8009e54:	611a      	str	r2, [r3, #16]
    hdma_tim16_ch1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009e56:	4b1d      	ldr	r3, [pc, #116]	; (8009ecc <HAL_TIM_Base_MspInit+0x1ec>)
 8009e58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e5c:	615a      	str	r2, [r3, #20]
    hdma_tim16_ch1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009e5e:	4b1b      	ldr	r3, [pc, #108]	; (8009ecc <HAL_TIM_Base_MspInit+0x1ec>)
 8009e60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009e64:	619a      	str	r2, [r3, #24]
    hdma_tim16_ch1_up.Init.Mode = DMA_NORMAL;
 8009e66:	4b19      	ldr	r3, [pc, #100]	; (8009ecc <HAL_TIM_Base_MspInit+0x1ec>)
 8009e68:	2200      	movs	r2, #0
 8009e6a:	61da      	str	r2, [r3, #28]
    hdma_tim16_ch1_up.Init.Priority = DMA_PRIORITY_LOW;
 8009e6c:	4b17      	ldr	r3, [pc, #92]	; (8009ecc <HAL_TIM_Base_MspInit+0x1ec>)
 8009e6e:	2200      	movs	r2, #0
 8009e70:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim16_ch1_up) != HAL_OK)
 8009e72:	4816      	ldr	r0, [pc, #88]	; (8009ecc <HAL_TIM_Base_MspInit+0x1ec>)
 8009e74:	f7fb fb96 	bl	80055a4 <HAL_DMA_Init>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d001      	beq.n	8009e82 <HAL_TIM_Base_MspInit+0x1a2>
    {
      Error_Handler();
 8009e7e:	f7ff fd86 	bl	800998e <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim16_ch1_up);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	4a11      	ldr	r2, [pc, #68]	; (8009ecc <HAL_TIM_Base_MspInit+0x1ec>)
 8009e86:	625a      	str	r2, [r3, #36]	; 0x24
 8009e88:	4a10      	ldr	r2, [pc, #64]	; (8009ecc <HAL_TIM_Base_MspInit+0x1ec>)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim16_ch1_up);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	4a0e      	ldr	r2, [pc, #56]	; (8009ecc <HAL_TIM_Base_MspInit+0x1ec>)
 8009e92:	621a      	str	r2, [r3, #32]
 8009e94:	4a0d      	ldr	r2, [pc, #52]	; (8009ecc <HAL_TIM_Base_MspInit+0x1ec>)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6293      	str	r3, [r2, #40]	; 0x28
  }
  HAL_Set_DMA_Callbacks();
 8009e9a:	f7ff fea9 	bl	8009bf0 <HAL_Set_DMA_Callbacks>
}
 8009e9e:	bf00      	nop
 8009ea0:	3710      	adds	r7, #16
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	40012c00 	.word	0x40012c00
 8009eac:	40021000 	.word	0x40021000
 8009eb0:	20001c88 	.word	0x20001c88
 8009eb4:	4002001c 	.word	0x4002001c
 8009eb8:	20001cd0 	.word	0x20001cd0
 8009ebc:	40020030 	.word	0x40020030
 8009ec0:	20001d18 	.word	0x20001d18
 8009ec4:	40020080 	.word	0x40020080
 8009ec8:	40014400 	.word	0x40014400
 8009ecc:	20001da8 	.word	0x20001da8
 8009ed0:	4002006c 	.word	0x4002006c

08009ed4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b084      	sub	sp, #16
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a28      	ldr	r2, [pc, #160]	; (8009f84 <HAL_TIM_PWM_MspInit+0xb0>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d149      	bne.n	8009f7a <HAL_TIM_PWM_MspInit+0xa6>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8009ee6:	4b28      	ldr	r3, [pc, #160]	; (8009f88 <HAL_TIM_PWM_MspInit+0xb4>)
 8009ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009eea:	4a27      	ldr	r2, [pc, #156]	; (8009f88 <HAL_TIM_PWM_MspInit+0xb4>)
 8009eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ef0:	6613      	str	r3, [r2, #96]	; 0x60
 8009ef2:	4b25      	ldr	r3, [pc, #148]	; (8009f88 <HAL_TIM_PWM_MspInit+0xb4>)
 8009ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009efa:	60fb      	str	r3, [r7, #12]
 8009efc:	68fb      	ldr	r3, [r7, #12]

    /* TIM15 DMA Init */
    /* TIM15_CH1_UP_TRIG_COM Init */
    hdma_tim15_ch1_up_trig_com.Instance = DMA1_Channel5;
 8009efe:	4b23      	ldr	r3, [pc, #140]	; (8009f8c <HAL_TIM_PWM_MspInit+0xb8>)
 8009f00:	4a23      	ldr	r2, [pc, #140]	; (8009f90 <HAL_TIM_PWM_MspInit+0xbc>)
 8009f02:	601a      	str	r2, [r3, #0]
    hdma_tim15_ch1_up_trig_com.Init.Request = DMA_REQUEST_7;
 8009f04:	4b21      	ldr	r3, [pc, #132]	; (8009f8c <HAL_TIM_PWM_MspInit+0xb8>)
 8009f06:	2207      	movs	r2, #7
 8009f08:	605a      	str	r2, [r3, #4]
    hdma_tim15_ch1_up_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009f0a:	4b20      	ldr	r3, [pc, #128]	; (8009f8c <HAL_TIM_PWM_MspInit+0xb8>)
 8009f0c:	2210      	movs	r2, #16
 8009f0e:	609a      	str	r2, [r3, #8]
    hdma_tim15_ch1_up_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8009f10:	4b1e      	ldr	r3, [pc, #120]	; (8009f8c <HAL_TIM_PWM_MspInit+0xb8>)
 8009f12:	2200      	movs	r2, #0
 8009f14:	60da      	str	r2, [r3, #12]
    hdma_tim15_ch1_up_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8009f16:	4b1d      	ldr	r3, [pc, #116]	; (8009f8c <HAL_TIM_PWM_MspInit+0xb8>)
 8009f18:	2280      	movs	r2, #128	; 0x80
 8009f1a:	611a      	str	r2, [r3, #16]
    hdma_tim15_ch1_up_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009f1c:	4b1b      	ldr	r3, [pc, #108]	; (8009f8c <HAL_TIM_PWM_MspInit+0xb8>)
 8009f1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f22:	615a      	str	r2, [r3, #20]
    hdma_tim15_ch1_up_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009f24:	4b19      	ldr	r3, [pc, #100]	; (8009f8c <HAL_TIM_PWM_MspInit+0xb8>)
 8009f26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009f2a:	619a      	str	r2, [r3, #24]
    hdma_tim15_ch1_up_trig_com.Init.Mode = DMA_NORMAL;
 8009f2c:	4b17      	ldr	r3, [pc, #92]	; (8009f8c <HAL_TIM_PWM_MspInit+0xb8>)
 8009f2e:	2200      	movs	r2, #0
 8009f30:	61da      	str	r2, [r3, #28]
    hdma_tim15_ch1_up_trig_com.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8009f32:	4b16      	ldr	r3, [pc, #88]	; (8009f8c <HAL_TIM_PWM_MspInit+0xb8>)
 8009f34:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009f38:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim15_ch1_up_trig_com) != HAL_OK)
 8009f3a:	4814      	ldr	r0, [pc, #80]	; (8009f8c <HAL_TIM_PWM_MspInit+0xb8>)
 8009f3c:	f7fb fb32 	bl	80055a4 <HAL_DMA_Init>
 8009f40:	4603      	mov	r3, r0
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d001      	beq.n	8009f4a <HAL_TIM_PWM_MspInit+0x76>
    {
      Error_Handler();
 8009f46:	f7ff fd22 	bl	800998e <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim15_ch1_up_trig_com);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	4a0f      	ldr	r2, [pc, #60]	; (8009f8c <HAL_TIM_PWM_MspInit+0xb8>)
 8009f4e:	625a      	str	r2, [r3, #36]	; 0x24
 8009f50:	4a0e      	ldr	r2, [pc, #56]	; (8009f8c <HAL_TIM_PWM_MspInit+0xb8>)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim15_ch1_up_trig_com);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	4a0c      	ldr	r2, [pc, #48]	; (8009f8c <HAL_TIM_PWM_MspInit+0xb8>)
 8009f5a:	621a      	str	r2, [r3, #32]
 8009f5c:	4a0b      	ldr	r2, [pc, #44]	; (8009f8c <HAL_TIM_PWM_MspInit+0xb8>)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim15_ch1_up_trig_com);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	4a09      	ldr	r2, [pc, #36]	; (8009f8c <HAL_TIM_PWM_MspInit+0xb8>)
 8009f66:	639a      	str	r2, [r3, #56]	; 0x38
 8009f68:	4a08      	ldr	r2, [pc, #32]	; (8009f8c <HAL_TIM_PWM_MspInit+0xb8>)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim15_ch1_up_trig_com);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	4a06      	ldr	r2, [pc, #24]	; (8009f8c <HAL_TIM_PWM_MspInit+0xb8>)
 8009f72:	635a      	str	r2, [r3, #52]	; 0x34
 8009f74:	4a05      	ldr	r2, [pc, #20]	; (8009f8c <HAL_TIM_PWM_MspInit+0xb8>)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8009f7a:	bf00      	nop
 8009f7c:	3710      	adds	r7, #16
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	40014000 	.word	0x40014000
 8009f88:	40021000 	.word	0x40021000
 8009f8c:	20001d60 	.word	0x20001d60
 8009f90:	40020058 	.word	0x40020058

08009f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 1; iii++)
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	71fb      	strb	r3, [r7, #7]
 8009f9e:	e005      	b.n	8009fac <NMI_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 8009fa0:	2064      	movs	r0, #100	; 0x64
 8009fa2:	f7fb f973 	bl	800528c <HAL_Delay>
        for (uint8_t iii = 0; iii < 1; iii++)
 8009fa6:	79fb      	ldrb	r3, [r7, #7]
 8009fa8:	3301      	adds	r3, #1
 8009faa:	71fb      	strb	r3, [r7, #7]
 8009fac:	79fb      	ldrb	r3, [r7, #7]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d0f6      	beq.n	8009fa0 <NMI_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 8009fb2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8009fb6:	f7fb f969 	bl	800528c <HAL_Delay>
        for (uint8_t iii = 0; iii < 1; iii++)
 8009fba:	e7ee      	b.n	8009f9a <NMI_Handler+0x6>

08009fbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 2; iii++)
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	71fb      	strb	r3, [r7, #7]
 8009fc6:	e005      	b.n	8009fd4 <HardFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 8009fc8:	2064      	movs	r0, #100	; 0x64
 8009fca:	f7fb f95f 	bl	800528c <HAL_Delay>
        for (uint8_t iii = 0; iii < 2; iii++)
 8009fce:	79fb      	ldrb	r3, [r7, #7]
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	71fb      	strb	r3, [r7, #7]
 8009fd4:	79fb      	ldrb	r3, [r7, #7]
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d9f6      	bls.n	8009fc8 <HardFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 8009fda:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8009fde:	f7fb f955 	bl	800528c <HAL_Delay>
        for (uint8_t iii = 0; iii < 2; iii++)
 8009fe2:	e7ee      	b.n	8009fc2 <HardFault_Handler+0x6>

08009fe4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b082      	sub	sp, #8
 8009fe8:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 3; iii++)
 8009fea:	2300      	movs	r3, #0
 8009fec:	71fb      	strb	r3, [r7, #7]
 8009fee:	e005      	b.n	8009ffc <MemManage_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 8009ff0:	2064      	movs	r0, #100	; 0x64
 8009ff2:	f7fb f94b 	bl	800528c <HAL_Delay>
        for (uint8_t iii = 0; iii < 3; iii++)
 8009ff6:	79fb      	ldrb	r3, [r7, #7]
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	71fb      	strb	r3, [r7, #7]
 8009ffc:	79fb      	ldrb	r3, [r7, #7]
 8009ffe:	2b02      	cmp	r3, #2
 800a000:	d9f6      	bls.n	8009ff0 <MemManage_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800a002:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a006:	f7fb f941 	bl	800528c <HAL_Delay>
        for (uint8_t iii = 0; iii < 3; iii++)
 800a00a:	e7ee      	b.n	8009fea <MemManage_Handler+0x6>

0800a00c <BusFault_Handler>:
}
/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b082      	sub	sp, #8
 800a010:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 4; iii++)
 800a012:	2300      	movs	r3, #0
 800a014:	71fb      	strb	r3, [r7, #7]
 800a016:	e005      	b.n	800a024 <BusFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800a018:	2064      	movs	r0, #100	; 0x64
 800a01a:	f7fb f937 	bl	800528c <HAL_Delay>
        for (uint8_t iii = 0; iii < 4; iii++)
 800a01e:	79fb      	ldrb	r3, [r7, #7]
 800a020:	3301      	adds	r3, #1
 800a022:	71fb      	strb	r3, [r7, #7]
 800a024:	79fb      	ldrb	r3, [r7, #7]
 800a026:	2b03      	cmp	r3, #3
 800a028:	d9f6      	bls.n	800a018 <BusFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800a02a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a02e:	f7fb f92d 	bl	800528c <HAL_Delay>
        for (uint8_t iii = 0; iii < 4; iii++)
 800a032:	e7ee      	b.n	800a012 <BusFault_Handler+0x6>

0800a034 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 5; iii++)
 800a03a:	2300      	movs	r3, #0
 800a03c:	71fb      	strb	r3, [r7, #7]
 800a03e:	e005      	b.n	800a04c <UsageFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800a040:	2064      	movs	r0, #100	; 0x64
 800a042:	f7fb f923 	bl	800528c <HAL_Delay>
        for (uint8_t iii = 0; iii < 5; iii++)
 800a046:	79fb      	ldrb	r3, [r7, #7]
 800a048:	3301      	adds	r3, #1
 800a04a:	71fb      	strb	r3, [r7, #7]
 800a04c:	79fb      	ldrb	r3, [r7, #7]
 800a04e:	2b04      	cmp	r3, #4
 800a050:	d9f6      	bls.n	800a040 <UsageFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800a052:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a056:	f7fb f919 	bl	800528c <HAL_Delay>
        for (uint8_t iii = 0; iii < 5; iii++)
 800a05a:	e7ee      	b.n	800a03a <UsageFault_Handler+0x6>

0800a05c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a05c:	b480      	push	{r7}
 800a05e:	af00      	add	r7, sp, #0
}
 800a060:	bf00      	nop
 800a062:	46bd      	mov	sp, r7
 800a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a068:	4770      	bx	lr
	...

0800a06c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b084      	sub	sp, #16
 800a070:	af02      	add	r7, sp, #8
    BaseType_t xHigherPriorityTaskWoken;

    // A button is speed
    HAL_GPIO_EXTI_IRQHandler(PIN_WKUP_1);
 800a072:	2001      	movs	r0, #1
 800a074:	f7fb fea8 	bl	8005dc8 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[PUSH_BUTTON_A][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[PUSH_BUTTON_A][TIMESTAMP_CURRENT];
 800a078:	4b0c      	ldr	r3, [pc, #48]	; (800a0ac <EXTI0_IRQHandler+0x40>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4a0b      	ldr	r2, [pc, #44]	; (800a0ac <EXTI0_IRQHandler+0x40>)
 800a07e:	6053      	str	r3, [r2, #4]
    g_button_press_timestamp[PUSH_BUTTON_A][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800a080:	f7f9 fc2a 	bl	80038d8 <xTaskGetTickCountFromISR>
 800a084:	4603      	mov	r3, r0
 800a086:	4a09      	ldr	r2, [pc, #36]	; (800a0ac <EXTI0_IRQHandler+0x40>)
 800a088:	6013      	str	r3, [r2, #0]
    HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 800a08a:	2006      	movs	r0, #6
 800a08c:	f7fb fa6f 	bl	800556e <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, PUSH_BUTTON_A, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800a090:	4b07      	ldr	r3, [pc, #28]	; (800a0b0 <EXTI0_IRQHandler+0x44>)
 800a092:	6818      	ldr	r0, [r3, #0]
 800a094:	1d3b      	adds	r3, r7, #4
 800a096:	9300      	str	r3, [sp, #0]
 800a098:	2300      	movs	r3, #0
 800a09a:	2203      	movs	r2, #3
 800a09c:	2100      	movs	r1, #0
 800a09e:	f7f9 ffdf 	bl	8004060 <xTaskGenericNotifyFromISR>
}
 800a0a2:	bf00      	nop
 800a0a4:	3708      	adds	r7, #8
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}
 800a0aa:	bf00      	nop
 800a0ac:	20000350 	.word	0x20000350
 800a0b0:	2000266c 	.word	0x2000266c

0800a0b4 <EXTI2_IRQHandler>:
uint32_t g_dbg_b_interrupt_count = 0;
/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af02      	add	r7, sp, #8
    BaseType_t xHigherPriorityTaskWoken;
    // B button is state
    HAL_GPIO_EXTI_IRQHandler(PIN_WKUP_4);
 800a0ba:	2004      	movs	r0, #4
 800a0bc:	f7fb fe84 	bl	8005dc8 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[PUSH_BUTTON_D][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[PUSH_BUTTON_B][TIMESTAMP_CURRENT];
 800a0c0:	4b0c      	ldr	r3, [pc, #48]	; (800a0f4 <EXTI2_IRQHandler+0x40>)
 800a0c2:	689b      	ldr	r3, [r3, #8]
 800a0c4:	4a0b      	ldr	r2, [pc, #44]	; (800a0f4 <EXTI2_IRQHandler+0x40>)
 800a0c6:	61d3      	str	r3, [r2, #28]
    g_button_press_timestamp[PUSH_BUTTON_D][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800a0c8:	f7f9 fc06 	bl	80038d8 <xTaskGetTickCountFromISR>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	4a09      	ldr	r2, [pc, #36]	; (800a0f4 <EXTI2_IRQHandler+0x40>)
 800a0d0:	6193      	str	r3, [r2, #24]
    HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 800a0d2:	2008      	movs	r0, #8
 800a0d4:	f7fb fa4b 	bl	800556e <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, PUSH_BUTTON_D, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800a0d8:	4b07      	ldr	r3, [pc, #28]	; (800a0f8 <EXTI2_IRQHandler+0x44>)
 800a0da:	6818      	ldr	r0, [r3, #0]
 800a0dc:	1d3b      	adds	r3, r7, #4
 800a0de:	9300      	str	r3, [sp, #0]
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	2203      	movs	r2, #3
 800a0e4:	2103      	movs	r1, #3
 800a0e6:	f7f9 ffbb 	bl	8004060 <xTaskGenericNotifyFromISR>
}
 800a0ea:	bf00      	nop
 800a0ec:	3708      	adds	r7, #8
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	bf00      	nop
 800a0f4:	20000350 	.word	0x20000350
 800a0f8:	2000266c 	.word	0x2000266c

0800a0fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b084      	sub	sp, #16
 800a100:	af02      	add	r7, sp, #8
    BaseType_t xHigherPriorityTaskWoken;
    // C button is color
    HAL_GPIO_EXTI_IRQHandler(PIN_WKUP_2);
 800a102:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800a106:	f7fb fe5f 	bl	8005dc8 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[PUSH_BUTTON_C][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[PUSH_BUTTON_C][TIMESTAMP_CURRENT];
 800a10a:	4b0c      	ldr	r3, [pc, #48]	; (800a13c <EXTI15_10_IRQHandler+0x40>)
 800a10c:	691b      	ldr	r3, [r3, #16]
 800a10e:	4a0b      	ldr	r2, [pc, #44]	; (800a13c <EXTI15_10_IRQHandler+0x40>)
 800a110:	6153      	str	r3, [r2, #20]
    g_button_press_timestamp[PUSH_BUTTON_C][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800a112:	f7f9 fbe1 	bl	80038d8 <xTaskGetTickCountFromISR>
 800a116:	4603      	mov	r3, r0
 800a118:	4a08      	ldr	r2, [pc, #32]	; (800a13c <EXTI15_10_IRQHandler+0x40>)
 800a11a:	6113      	str	r3, [r2, #16]
    HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800a11c:	2017      	movs	r0, #23
 800a11e:	f7fb fa26 	bl	800556e <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, PUSH_BUTTON_C, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800a122:	4b07      	ldr	r3, [pc, #28]	; (800a140 <EXTI15_10_IRQHandler+0x44>)
 800a124:	6818      	ldr	r0, [r3, #0]
 800a126:	1d3b      	adds	r3, r7, #4
 800a128:	9300      	str	r3, [sp, #0]
 800a12a:	2300      	movs	r3, #0
 800a12c:	2203      	movs	r2, #3
 800a12e:	2102      	movs	r1, #2
 800a130:	f7f9 ff96 	bl	8004060 <xTaskGenericNotifyFromISR>
}
 800a134:	bf00      	nop
 800a136:	3708      	adds	r7, #8
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}
 800a13c:	20000350 	.word	0x20000350
 800a140:	2000266c 	.word	0x2000266c

0800a144 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b084      	sub	sp, #16
 800a148:	af02      	add	r7, sp, #8
    BaseType_t xHigherPriorityTaskWoken;
    // D button is pause
    HAL_GPIO_EXTI_IRQHandler(PIN_WKUP_3);
 800a14a:	2020      	movs	r0, #32
 800a14c:	f7fb fe3c 	bl	8005dc8 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[PUSH_BUTTON_B][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[PUSH_BUTTON_D][TIMESTAMP_CURRENT];
 800a150:	4b0c      	ldr	r3, [pc, #48]	; (800a184 <EXTI9_5_IRQHandler+0x40>)
 800a152:	699b      	ldr	r3, [r3, #24]
 800a154:	4a0b      	ldr	r2, [pc, #44]	; (800a184 <EXTI9_5_IRQHandler+0x40>)
 800a156:	60d3      	str	r3, [r2, #12]
    g_button_press_timestamp[PUSH_BUTTON_B][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800a158:	f7f9 fbbe 	bl	80038d8 <xTaskGetTickCountFromISR>
 800a15c:	4603      	mov	r3, r0
 800a15e:	4a09      	ldr	r2, [pc, #36]	; (800a184 <EXTI9_5_IRQHandler+0x40>)
 800a160:	6093      	str	r3, [r2, #8]
    HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800a162:	2028      	movs	r0, #40	; 0x28
 800a164:	f7fb fa03 	bl	800556e <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, PUSH_BUTTON_B, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800a168:	4b07      	ldr	r3, [pc, #28]	; (800a188 <EXTI9_5_IRQHandler+0x44>)
 800a16a:	6818      	ldr	r0, [r3, #0]
 800a16c:	1d3b      	adds	r3, r7, #4
 800a16e:	9300      	str	r3, [sp, #0]
 800a170:	2300      	movs	r3, #0
 800a172:	2203      	movs	r2, #3
 800a174:	2101      	movs	r1, #1
 800a176:	f7f9 ff73 	bl	8004060 <xTaskGenericNotifyFromISR>
}
 800a17a:	bf00      	nop
 800a17c:	3708      	adds	r7, #8
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop
 800a184:	20000350 	.word	0x20000350
 800a188:	2000266c 	.word	0x2000266c

0800a18c <HAL_DMA_CMPLT_CALLBACK>:


void HAL_DMA_CMPLT_CALLBACK(DMA_HandleTypeDef *hdma)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b083      	sub	sp, #12
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
    while(1);
 800a194:	e7fe      	b.n	800a194 <HAL_DMA_CMPLT_CALLBACK+0x8>
	...

0800a198 <HAL_TIM_PWM_PulseFinishedCallback>:
bool gb_dma_cmplt_strip_1 = true;
bool gb_dma_cmplt_strip_2 = true;
bool gb_dma_cmplt_strip_3 = true;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b082      	sub	sp, #8
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
    switch (htim->Channel)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	7f1b      	ldrb	r3, [r3, #28]
 800a1a4:	2b04      	cmp	r3, #4
 800a1a6:	d016      	beq.n	800a1d6 <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
 800a1a8:	2b04      	cmp	r3, #4
 800a1aa:	dc1c      	bgt.n	800a1e6 <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d002      	beq.n	800a1b6 <HAL_TIM_PWM_PulseFinishedCallback+0x1e>
 800a1b0:	2b02      	cmp	r3, #2
 800a1b2:	d008      	beq.n	800a1c6 <HAL_TIM_PWM_PulseFinishedCallback+0x2e>
        case HAL_TIM_ACTIVE_CHANNEL_3:
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
            gb_dma_cmplt_strip_3 = true;
        break;
        default:
        break;
 800a1b4:	e017      	b.n	800a1e6 <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 800a1b6:	2100      	movs	r1, #0
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f7fd fcb5 	bl	8007b28 <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_1 = true;
 800a1be:	4b0c      	ldr	r3, [pc, #48]	; (800a1f0 <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 800a1c0:	2201      	movs	r2, #1
 800a1c2:	701a      	strb	r2, [r3, #0]
        break;
 800a1c4:	e010      	b.n	800a1e8 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_2);
 800a1c6:	2104      	movs	r1, #4
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f7fd fcad 	bl	8007b28 <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_2 = true;
 800a1ce:	4b09      	ldr	r3, [pc, #36]	; (800a1f4 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	701a      	strb	r2, [r3, #0]
        break;
 800a1d4:	e008      	b.n	800a1e8 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
 800a1d6:	2108      	movs	r1, #8
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f7fd fca5 	bl	8007b28 <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_3 = true;
 800a1de:	4b06      	ldr	r3, [pc, #24]	; (800a1f8 <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	701a      	strb	r2, [r3, #0]
        break;
 800a1e4:	e000      	b.n	800a1e8 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
        break;
 800a1e6:	bf00      	nop
    }
}
 800a1e8:	bf00      	nop
 800a1ea:	3708      	adds	r7, #8
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}
 800a1f0:	200000fc 	.word	0x200000fc
 800a1f4:	200000fd 	.word	0x200000fd
 800a1f8:	200000fe 	.word	0x200000fe

0800a1fc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800a200:	4802      	ldr	r0, [pc, #8]	; (800a20c <DMA1_Channel2_IRQHandler+0x10>)
 800a202:	f7fb fb28 	bl	8005856 <HAL_DMA_IRQHandler>
}
 800a206:	bf00      	nop
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	bf00      	nop
 800a20c:	20001c88 	.word	0x20001c88

0800a210 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 800a214:	4802      	ldr	r0, [pc, #8]	; (800a220 <DMA1_Channel3_IRQHandler+0x10>)
 800a216:	f7fb fb1e 	bl	8005856 <HAL_DMA_IRQHandler>
}
 800a21a:	bf00      	nop
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	20001cd0 	.word	0x20001cd0

0800a224 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim15_ch1_up_trig_com);
 800a228:	4802      	ldr	r0, [pc, #8]	; (800a234 <DMA1_Channel5_IRQHandler+0x10>)
 800a22a:	f7fb fb14 	bl	8005856 <HAL_DMA_IRQHandler>
}
 800a22e:	bf00      	nop
 800a230:	bd80      	pop	{r7, pc}
 800a232:	bf00      	nop
 800a234:	20001d60 	.word	0x20001d60

0800a238 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim16_ch1_up);
 800a23c:	4802      	ldr	r0, [pc, #8]	; (800a248 <DMA1_Channel6_IRQHandler+0x10>)
 800a23e:	f7fb fb0a 	bl	8005856 <HAL_DMA_IRQHandler>
}
 800a242:	bf00      	nop
 800a244:	bd80      	pop	{r7, pc}
 800a246:	bf00      	nop
 800a248:	20001da8 	.word	0x20001da8

0800a24c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 800a250:	4802      	ldr	r0, [pc, #8]	; (800a25c <DMA1_Channel7_IRQHandler+0x10>)
 800a252:	f7fb fb00 	bl	8005856 <HAL_DMA_IRQHandler>
}
 800a256:	bf00      	nop
 800a258:	bd80      	pop	{r7, pc}
 800a25a:	bf00      	nop
 800a25c:	20001d18 	.word	0x20001d18

0800a260 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a260:	b480      	push	{r7}
 800a262:	af00      	add	r7, sp, #0
	return 1;
 800a264:	2301      	movs	r3, #1
}
 800a266:	4618      	mov	r0, r3
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <_kill>:

int _kill(int pid, int sig)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b082      	sub	sp, #8
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800a27a:	f000 f985 	bl	800a588 <__errno>
 800a27e:	4603      	mov	r3, r0
 800a280:	2216      	movs	r2, #22
 800a282:	601a      	str	r2, [r3, #0]
	return -1;
 800a284:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3708      	adds	r7, #8
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <_exit>:

void _exit (int status)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b082      	sub	sp, #8
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800a298:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f7ff ffe7 	bl	800a270 <_kill>
	while (1) {}		/* Make sure we hang here */
 800a2a2:	e7fe      	b.n	800a2a2 <_exit+0x12>

0800a2a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b086      	sub	sp, #24
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	60f8      	str	r0, [r7, #12]
 800a2ac:	60b9      	str	r1, [r7, #8]
 800a2ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	617b      	str	r3, [r7, #20]
 800a2b4:	e00a      	b.n	800a2cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800a2b6:	f3af 8000 	nop.w
 800a2ba:	4601      	mov	r1, r0
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	1c5a      	adds	r2, r3, #1
 800a2c0:	60ba      	str	r2, [r7, #8]
 800a2c2:	b2ca      	uxtb	r2, r1
 800a2c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	617b      	str	r3, [r7, #20]
 800a2cc:	697a      	ldr	r2, [r7, #20]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	dbf0      	blt.n	800a2b6 <_read+0x12>
	}

return len;
 800a2d4:	687b      	ldr	r3, [r7, #4]
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3718      	adds	r7, #24
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}

0800a2de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a2de:	b580      	push	{r7, lr}
 800a2e0:	b086      	sub	sp, #24
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	60f8      	str	r0, [r7, #12]
 800a2e6:	60b9      	str	r1, [r7, #8]
 800a2e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	617b      	str	r3, [r7, #20]
 800a2ee:	e009      	b.n	800a304 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	1c5a      	adds	r2, r3, #1
 800a2f4:	60ba      	str	r2, [r7, #8]
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	3301      	adds	r3, #1
 800a302:	617b      	str	r3, [r7, #20]
 800a304:	697a      	ldr	r2, [r7, #20]
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	429a      	cmp	r2, r3
 800a30a:	dbf1      	blt.n	800a2f0 <_write+0x12>
	}
	return len;
 800a30c:	687b      	ldr	r3, [r7, #4]
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3718      	adds	r7, #24
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}

0800a316 <_close>:

int _close(int file)
{
 800a316:	b480      	push	{r7}
 800a318:	b083      	sub	sp, #12
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	6078      	str	r0, [r7, #4]
	return -1;
 800a31e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800a322:	4618      	mov	r0, r3
 800a324:	370c      	adds	r7, #12
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr

0800a32e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a32e:	b480      	push	{r7}
 800a330:	b083      	sub	sp, #12
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
 800a336:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a33e:	605a      	str	r2, [r3, #4]
	return 0;
 800a340:	2300      	movs	r3, #0
}
 800a342:	4618      	mov	r0, r3
 800a344:	370c      	adds	r7, #12
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr

0800a34e <_isatty>:

int _isatty(int file)
{
 800a34e:	b480      	push	{r7}
 800a350:	b083      	sub	sp, #12
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
	return 1;
 800a356:	2301      	movs	r3, #1
}
 800a358:	4618      	mov	r0, r3
 800a35a:	370c      	adds	r7, #12
 800a35c:	46bd      	mov	sp, r7
 800a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a362:	4770      	bx	lr

0800a364 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800a364:	b480      	push	{r7}
 800a366:	b085      	sub	sp, #20
 800a368:	af00      	add	r7, sp, #0
 800a36a:	60f8      	str	r0, [r7, #12]
 800a36c:	60b9      	str	r1, [r7, #8]
 800a36e:	607a      	str	r2, [r7, #4]
	return 0;
 800a370:	2300      	movs	r3, #0
}
 800a372:	4618      	mov	r0, r3
 800a374:	3714      	adds	r7, #20
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr
	...

0800a380 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b086      	sub	sp, #24
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a388:	4a14      	ldr	r2, [pc, #80]	; (800a3dc <_sbrk+0x5c>)
 800a38a:	4b15      	ldr	r3, [pc, #84]	; (800a3e0 <_sbrk+0x60>)
 800a38c:	1ad3      	subs	r3, r2, r3
 800a38e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a394:	4b13      	ldr	r3, [pc, #76]	; (800a3e4 <_sbrk+0x64>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d102      	bne.n	800a3a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a39c:	4b11      	ldr	r3, [pc, #68]	; (800a3e4 <_sbrk+0x64>)
 800a39e:	4a12      	ldr	r2, [pc, #72]	; (800a3e8 <_sbrk+0x68>)
 800a3a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a3a2:	4b10      	ldr	r3, [pc, #64]	; (800a3e4 <_sbrk+0x64>)
 800a3a4:	681a      	ldr	r2, [r3, #0]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	4413      	add	r3, r2
 800a3aa:	693a      	ldr	r2, [r7, #16]
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d207      	bcs.n	800a3c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a3b0:	f000 f8ea 	bl	800a588 <__errno>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	220c      	movs	r2, #12
 800a3b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a3ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a3be:	e009      	b.n	800a3d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a3c0:	4b08      	ldr	r3, [pc, #32]	; (800a3e4 <_sbrk+0x64>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a3c6:	4b07      	ldr	r3, [pc, #28]	; (800a3e4 <_sbrk+0x64>)
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	4413      	add	r3, r2
 800a3ce:	4a05      	ldr	r2, [pc, #20]	; (800a3e4 <_sbrk+0x64>)
 800a3d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3718      	adds	r7, #24
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}
 800a3dc:	20010000 	.word	0x20010000
 800a3e0:	00000400 	.word	0x00000400
 800a3e4:	20001e60 	.word	0x20001e60
 800a3e8:	20002ee0 	.word	0x20002ee0

0800a3ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800a3f0:	4b06      	ldr	r3, [pc, #24]	; (800a40c <SystemInit+0x20>)
 800a3f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3f6:	4a05      	ldr	r2, [pc, #20]	; (800a40c <SystemInit+0x20>)
 800a3f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a3fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800a400:	bf00      	nop
 800a402:	46bd      	mov	sp, r7
 800a404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a408:	4770      	bx	lr
 800a40a:	bf00      	nop
 800a40c:	e000ed00 	.word	0xe000ed00

0800a410 <flash_info_block_init>:
#pragma pack(0)

flash_info_block_t  g_flash_info_block;

void flash_info_block_init(void)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	af00      	add	r7, sp, #0
    g_flash_info_block.flash_info_data.uuid.data[0] = HAL_GetUIDw0();
 800a414:	f7fa ff5e 	bl	80052d4 <HAL_GetUIDw0>
 800a418:	4603      	mov	r3, r0
 800a41a:	4a12      	ldr	r2, [pc, #72]	; (800a464 <flash_info_block_init+0x54>)
 800a41c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    g_flash_info_block.flash_info_data.uuid.data[1] = HAL_GetUIDw1();
 800a420:	f7fa ff64 	bl	80052ec <HAL_GetUIDw1>
 800a424:	4603      	mov	r3, r0
 800a426:	4a0f      	ldr	r2, [pc, #60]	; (800a464 <flash_info_block_init+0x54>)
 800a428:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    g_flash_info_block.flash_info_data.uuid.data[2] = HAL_GetUIDw2();
 800a42c:	f7fa ff6a 	bl	8005304 <HAL_GetUIDw2>
 800a430:	4603      	mov	r3, r0
 800a432:	4a0c      	ldr	r2, [pc, #48]	; (800a464 <flash_info_block_init+0x54>)
 800a434:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    g_flash_info_block.flash_info_data.strip_info.num_strips = 1;
 800a438:	4b0a      	ldr	r3, [pc, #40]	; (800a464 <flash_info_block_init+0x54>)
 800a43a:	2201      	movs	r2, #1
 800a43c:	701a      	strb	r2, [r3, #0]

    g_flash_info_block.flash_info_data.image_info.active_image = FLASH_INFO_IMAGE_SLOT_1;
 800a43e:	4b09      	ldr	r3, [pc, #36]	; (800a464 <flash_info_block_init+0x54>)
 800a440:	2201      	movs	r2, #1
 800a442:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    //g_flash_info_block.image_data.active_image_fw_version = ;
    g_flash_info_block.flash_info_data.image_info.mini_main_image = FLASH_INFO_MINI_MAIN_SLOT;
 800a446:	4b07      	ldr	r3, [pc, #28]	; (800a464 <flash_info_block_init+0x54>)
 800a448:	2200      	movs	r2, #0
 800a44a:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
//    g_flash_info_block.image_data.mini_main_image_fw_version = ;
    g_flash_info_block.flash_info_data.image_info.select_image = FLASH_INFO_IMAGE_SLOT_1;
 800a44e:	4b05      	ldr	r3, [pc, #20]	; (800a464 <flash_info_block_init+0x54>)
 800a450:	2201      	movs	r2, #1
 800a452:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
    g_flash_info_block.flash_info_data.image_info.valid_image = UINT8_MAX;
 800a456:	4b03      	ldr	r3, [pc, #12]	; (800a464 <flash_info_block_init+0x54>)
 800a458:	22ff      	movs	r2, #255	; 0xff
 800a45a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
    // need to write to flash!
}
 800a45e:	bf00      	nop
 800a460:	bd80      	pop	{r7, pc}
 800a462:	bf00      	nop
 800a464:	20001e64 	.word	0x20001e64

0800a468 <flash_info_init>:
}


uint32_t temp = 0;
void flash_info_init(void)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	af00      	add	r7, sp, #0
    temp = sizeof(flash_info_data_t);
 800a46c:	4b0d      	ldr	r3, [pc, #52]	; (800a4a4 <flash_info_init+0x3c>)
 800a46e:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800a472:	601a      	str	r2, [r3, #0]
    flash_info_block_init();
 800a474:	f7ff ffcc 	bl	800a410 <flash_info_block_init>
    //flash_access_read_flash_info_sector(g_flash_info_block.flat_data_uint32);
    if ((UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[0]) &&
 800a478:	4b0b      	ldr	r3, [pc, #44]	; (800a4a8 <flash_info_init+0x40>)
 800a47a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a47e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a482:	d10d      	bne.n	800a4a0 <flash_info_init+0x38>
                    (UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[1]) &&
 800a484:	4b08      	ldr	r3, [pc, #32]	; (800a4a8 <flash_info_init+0x40>)
 800a486:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    if ((UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[0]) &&
 800a48a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a48e:	d107      	bne.n	800a4a0 <flash_info_init+0x38>
                    (UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[2]))
 800a490:	4b05      	ldr	r3, [pc, #20]	; (800a4a8 <flash_info_init+0x40>)
 800a492:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
                    (UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[1]) &&
 800a496:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a49a:	d101      	bne.n	800a4a0 <flash_info_init+0x38>
    {
        flash_info_block_init();
 800a49c:	f7ff ffb8 	bl	800a410 <flash_info_block_init>
    }
}
 800a4a0:	bf00      	nop
 800a4a2:	bd80      	pop	{r7, pc}
 800a4a4:	20002664 	.word	0x20002664
 800a4a8:	20001e64 	.word	0x20001e64

0800a4ac <main>:
#include "task_create.h"
#include "flash_info.h"
#include "serial_com.h"

int main(void)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	af00      	add	r7, sp, #0
    board_init_common_board_init();
 800a4b0:	f7ff fa4e 	bl	8009950 <board_init_common_board_init>
    flash_info_init();
 800a4b4:	f7ff ffd8 	bl	800a468 <flash_info_init>
    //serial_com_init_usart();

    task_create();
 800a4b8:	f000 f80a 	bl	800a4d0 <task_create>
	semaphore_create();
 800a4bc:	f7f7 fd86 	bl	8001fcc <semaphore_create>
    reset_ws2812b();
 800a4c0:	f7f7 fb10 	bl	8001ae4 <reset_ws2812b>
	osKernelStart();
 800a4c4:	f7f8 f868 	bl	8002598 <osKernelStart>
 800a4c8:	2300      	movs	r3, #0
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	bd80      	pop	{r7, pc}
	...

0800a4d0 <task_create>:
	.priority = (osPriority_t) osPriorityNormal,
};


void task_create(void)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	af00      	add	r7, sp, #0
    osKernelInitialize();
 800a4d4:	f7f8 f83c 	bl	8002550 <osKernelInitialize>
    //g_led_ctrl_handle = osThreadNew(task_led_ctrl_strip_one, NULL, &g_task_led_ctrl_attributes);
	//g_button_press_handle = osThreadNew(task_button_press, NULL, &g_task_button_press_attributes);
    //g_dma_transfer_handle = osThreadNew(task_dma_transfer, NULL, &g_task_dma_transfer_attributes);
    g_led_strip_1_ctrl_handle = osThreadNew(task_led_ctrl_strip_one, NULL, &g_task_strip_1_led_ctrl_attributes);
 800a4d8:	4a06      	ldr	r2, [pc, #24]	; (800a4f4 <task_create+0x24>)
 800a4da:	2100      	movs	r1, #0
 800a4dc:	4806      	ldr	r0, [pc, #24]	; (800a4f8 <task_create+0x28>)
 800a4de:	f7f8 f881 	bl	80025e4 <osThreadNew>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	4a05      	ldr	r2, [pc, #20]	; (800a4fc <task_create+0x2c>)
 800a4e6:	6013      	str	r3, [r2, #0]
    //g_led_strip_2_ctrl_handle = osThreadNew(task_led_ctrl_strip_two, NULL, &g_task_strip_2_led_ctrl_attributes);
#if defined(ENABLE_STRIP_3)
    g_led_strip_3_ctrl_handle = osThreadNew(task_led_ctrl_strip_three, NULL, &g_task_strip_3_led_ctrl_attributes);
#endif
    g_tasks_running = true; // technically will be running after task scheduler started
 800a4e8:	4b05      	ldr	r3, [pc, #20]	; (800a500 <task_create+0x30>)
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	701a      	strb	r2, [r3, #0]
}
 800a4ee:	bf00      	nop
 800a4f0:	bd80      	pop	{r7, pc}
 800a4f2:	bf00      	nop
 800a4f4:	0800b838 	.word	0x0800b838
 800a4f8:	080021a9 	.word	0x080021a9
 800a4fc:	20002668 	.word	0x20002668
 800a500:	20002ecc 	.word	0x20002ecc

0800a504 <random_num>:
#include <stdint.h>
#include <stdlib.h>
#include "numbers.h"

uint32_t random_num(uint32_t min, uint32_t max)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b082      	sub	sp, #8
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	6039      	str	r1, [r7, #0]
   return min + rand() % (max - min);
 800a50e:	f000 f991 	bl	800a834 <rand>
 800a512:	4603      	mov	r3, r0
 800a514:	461a      	mov	r2, r3
 800a516:	6839      	ldr	r1, [r7, #0]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	1acb      	subs	r3, r1, r3
 800a51c:	fbb2 f1f3 	udiv	r1, r2, r3
 800a520:	fb01 f303 	mul.w	r3, r1, r3
 800a524:	1ad2      	subs	r2, r2, r3
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	4413      	add	r3, r2
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3708      	adds	r7, #8
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}
	...

0800a534 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800a534:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a56c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800a538:	f7ff ff58 	bl	800a3ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a53c:	480c      	ldr	r0, [pc, #48]	; (800a570 <LoopForever+0x6>)
  ldr r1, =_edata
 800a53e:	490d      	ldr	r1, [pc, #52]	; (800a574 <LoopForever+0xa>)
  ldr r2, =_sidata
 800a540:	4a0d      	ldr	r2, [pc, #52]	; (800a578 <LoopForever+0xe>)
  movs r3, #0
 800a542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a544:	e002      	b.n	800a54c <LoopCopyDataInit>

0800a546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a54a:	3304      	adds	r3, #4

0800a54c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a54c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a54e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a550:	d3f9      	bcc.n	800a546 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a552:	4a0a      	ldr	r2, [pc, #40]	; (800a57c <LoopForever+0x12>)
  ldr r4, =_ebss
 800a554:	4c0a      	ldr	r4, [pc, #40]	; (800a580 <LoopForever+0x16>)
  movs r3, #0
 800a556:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a558:	e001      	b.n	800a55e <LoopFillZerobss>

0800a55a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a55a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a55c:	3204      	adds	r2, #4

0800a55e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a55e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a560:	d3fb      	bcc.n	800a55a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800a562:	f000 f817 	bl	800a594 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800a566:	f7ff ffa1 	bl	800a4ac <main>

0800a56a <LoopForever>:

LoopForever:
    b LoopForever
 800a56a:	e7fe      	b.n	800a56a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800a56c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800a570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a574:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 800a578:	0800b9b4 	.word	0x0800b9b4
  ldr r2, =_sbss
 800a57c:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 800a580:	20002ee0 	.word	0x20002ee0

0800a584 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800a584:	e7fe      	b.n	800a584 <ADC1_IRQHandler>
	...

0800a588 <__errno>:
 800a588:	4b01      	ldr	r3, [pc, #4]	; (800a590 <__errno+0x8>)
 800a58a:	6818      	ldr	r0, [r3, #0]
 800a58c:	4770      	bx	lr
 800a58e:	bf00      	nop
 800a590:	20000104 	.word	0x20000104

0800a594 <__libc_init_array>:
 800a594:	b570      	push	{r4, r5, r6, lr}
 800a596:	4d0d      	ldr	r5, [pc, #52]	; (800a5cc <__libc_init_array+0x38>)
 800a598:	4c0d      	ldr	r4, [pc, #52]	; (800a5d0 <__libc_init_array+0x3c>)
 800a59a:	1b64      	subs	r4, r4, r5
 800a59c:	10a4      	asrs	r4, r4, #2
 800a59e:	2600      	movs	r6, #0
 800a5a0:	42a6      	cmp	r6, r4
 800a5a2:	d109      	bne.n	800a5b8 <__libc_init_array+0x24>
 800a5a4:	4d0b      	ldr	r5, [pc, #44]	; (800a5d4 <__libc_init_array+0x40>)
 800a5a6:	4c0c      	ldr	r4, [pc, #48]	; (800a5d8 <__libc_init_array+0x44>)
 800a5a8:	f001 f8c8 	bl	800b73c <_init>
 800a5ac:	1b64      	subs	r4, r4, r5
 800a5ae:	10a4      	asrs	r4, r4, #2
 800a5b0:	2600      	movs	r6, #0
 800a5b2:	42a6      	cmp	r6, r4
 800a5b4:	d105      	bne.n	800a5c2 <__libc_init_array+0x2e>
 800a5b6:	bd70      	pop	{r4, r5, r6, pc}
 800a5b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5bc:	4798      	blx	r3
 800a5be:	3601      	adds	r6, #1
 800a5c0:	e7ee      	b.n	800a5a0 <__libc_init_array+0xc>
 800a5c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5c6:	4798      	blx	r3
 800a5c8:	3601      	adds	r6, #1
 800a5ca:	e7f2      	b.n	800a5b2 <__libc_init_array+0x1e>
 800a5cc:	0800b9ac 	.word	0x0800b9ac
 800a5d0:	0800b9ac 	.word	0x0800b9ac
 800a5d4:	0800b9ac 	.word	0x0800b9ac
 800a5d8:	0800b9b0 	.word	0x0800b9b0

0800a5dc <malloc>:
 800a5dc:	4b02      	ldr	r3, [pc, #8]	; (800a5e8 <malloc+0xc>)
 800a5de:	4601      	mov	r1, r0
 800a5e0:	6818      	ldr	r0, [r3, #0]
 800a5e2:	f000 b885 	b.w	800a6f0 <_malloc_r>
 800a5e6:	bf00      	nop
 800a5e8:	20000104 	.word	0x20000104

0800a5ec <memcpy>:
 800a5ec:	440a      	add	r2, r1
 800a5ee:	4291      	cmp	r1, r2
 800a5f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a5f4:	d100      	bne.n	800a5f8 <memcpy+0xc>
 800a5f6:	4770      	bx	lr
 800a5f8:	b510      	push	{r4, lr}
 800a5fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a602:	4291      	cmp	r1, r2
 800a604:	d1f9      	bne.n	800a5fa <memcpy+0xe>
 800a606:	bd10      	pop	{r4, pc}

0800a608 <memset>:
 800a608:	4402      	add	r2, r0
 800a60a:	4603      	mov	r3, r0
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d100      	bne.n	800a612 <memset+0xa>
 800a610:	4770      	bx	lr
 800a612:	f803 1b01 	strb.w	r1, [r3], #1
 800a616:	e7f9      	b.n	800a60c <memset+0x4>

0800a618 <_free_r>:
 800a618:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a61a:	2900      	cmp	r1, #0
 800a61c:	d044      	beq.n	800a6a8 <_free_r+0x90>
 800a61e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a622:	9001      	str	r0, [sp, #4]
 800a624:	2b00      	cmp	r3, #0
 800a626:	f1a1 0404 	sub.w	r4, r1, #4
 800a62a:	bfb8      	it	lt
 800a62c:	18e4      	addlt	r4, r4, r3
 800a62e:	f000 f9ab 	bl	800a988 <__malloc_lock>
 800a632:	4a1e      	ldr	r2, [pc, #120]	; (800a6ac <_free_r+0x94>)
 800a634:	9801      	ldr	r0, [sp, #4]
 800a636:	6813      	ldr	r3, [r2, #0]
 800a638:	b933      	cbnz	r3, 800a648 <_free_r+0x30>
 800a63a:	6063      	str	r3, [r4, #4]
 800a63c:	6014      	str	r4, [r2, #0]
 800a63e:	b003      	add	sp, #12
 800a640:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a644:	f000 b9a6 	b.w	800a994 <__malloc_unlock>
 800a648:	42a3      	cmp	r3, r4
 800a64a:	d908      	bls.n	800a65e <_free_r+0x46>
 800a64c:	6825      	ldr	r5, [r4, #0]
 800a64e:	1961      	adds	r1, r4, r5
 800a650:	428b      	cmp	r3, r1
 800a652:	bf01      	itttt	eq
 800a654:	6819      	ldreq	r1, [r3, #0]
 800a656:	685b      	ldreq	r3, [r3, #4]
 800a658:	1949      	addeq	r1, r1, r5
 800a65a:	6021      	streq	r1, [r4, #0]
 800a65c:	e7ed      	b.n	800a63a <_free_r+0x22>
 800a65e:	461a      	mov	r2, r3
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	b10b      	cbz	r3, 800a668 <_free_r+0x50>
 800a664:	42a3      	cmp	r3, r4
 800a666:	d9fa      	bls.n	800a65e <_free_r+0x46>
 800a668:	6811      	ldr	r1, [r2, #0]
 800a66a:	1855      	adds	r5, r2, r1
 800a66c:	42a5      	cmp	r5, r4
 800a66e:	d10b      	bne.n	800a688 <_free_r+0x70>
 800a670:	6824      	ldr	r4, [r4, #0]
 800a672:	4421      	add	r1, r4
 800a674:	1854      	adds	r4, r2, r1
 800a676:	42a3      	cmp	r3, r4
 800a678:	6011      	str	r1, [r2, #0]
 800a67a:	d1e0      	bne.n	800a63e <_free_r+0x26>
 800a67c:	681c      	ldr	r4, [r3, #0]
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	6053      	str	r3, [r2, #4]
 800a682:	4421      	add	r1, r4
 800a684:	6011      	str	r1, [r2, #0]
 800a686:	e7da      	b.n	800a63e <_free_r+0x26>
 800a688:	d902      	bls.n	800a690 <_free_r+0x78>
 800a68a:	230c      	movs	r3, #12
 800a68c:	6003      	str	r3, [r0, #0]
 800a68e:	e7d6      	b.n	800a63e <_free_r+0x26>
 800a690:	6825      	ldr	r5, [r4, #0]
 800a692:	1961      	adds	r1, r4, r5
 800a694:	428b      	cmp	r3, r1
 800a696:	bf04      	itt	eq
 800a698:	6819      	ldreq	r1, [r3, #0]
 800a69a:	685b      	ldreq	r3, [r3, #4]
 800a69c:	6063      	str	r3, [r4, #4]
 800a69e:	bf04      	itt	eq
 800a6a0:	1949      	addeq	r1, r1, r5
 800a6a2:	6021      	streq	r1, [r4, #0]
 800a6a4:	6054      	str	r4, [r2, #4]
 800a6a6:	e7ca      	b.n	800a63e <_free_r+0x26>
 800a6a8:	b003      	add	sp, #12
 800a6aa:	bd30      	pop	{r4, r5, pc}
 800a6ac:	20002ed0 	.word	0x20002ed0

0800a6b0 <sbrk_aligned>:
 800a6b0:	b570      	push	{r4, r5, r6, lr}
 800a6b2:	4e0e      	ldr	r6, [pc, #56]	; (800a6ec <sbrk_aligned+0x3c>)
 800a6b4:	460c      	mov	r4, r1
 800a6b6:	6831      	ldr	r1, [r6, #0]
 800a6b8:	4605      	mov	r5, r0
 800a6ba:	b911      	cbnz	r1, 800a6c2 <sbrk_aligned+0x12>
 800a6bc:	f000 f8f8 	bl	800a8b0 <_sbrk_r>
 800a6c0:	6030      	str	r0, [r6, #0]
 800a6c2:	4621      	mov	r1, r4
 800a6c4:	4628      	mov	r0, r5
 800a6c6:	f000 f8f3 	bl	800a8b0 <_sbrk_r>
 800a6ca:	1c43      	adds	r3, r0, #1
 800a6cc:	d00a      	beq.n	800a6e4 <sbrk_aligned+0x34>
 800a6ce:	1cc4      	adds	r4, r0, #3
 800a6d0:	f024 0403 	bic.w	r4, r4, #3
 800a6d4:	42a0      	cmp	r0, r4
 800a6d6:	d007      	beq.n	800a6e8 <sbrk_aligned+0x38>
 800a6d8:	1a21      	subs	r1, r4, r0
 800a6da:	4628      	mov	r0, r5
 800a6dc:	f000 f8e8 	bl	800a8b0 <_sbrk_r>
 800a6e0:	3001      	adds	r0, #1
 800a6e2:	d101      	bne.n	800a6e8 <sbrk_aligned+0x38>
 800a6e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a6e8:	4620      	mov	r0, r4
 800a6ea:	bd70      	pop	{r4, r5, r6, pc}
 800a6ec:	20002ed4 	.word	0x20002ed4

0800a6f0 <_malloc_r>:
 800a6f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6f4:	1ccd      	adds	r5, r1, #3
 800a6f6:	f025 0503 	bic.w	r5, r5, #3
 800a6fa:	3508      	adds	r5, #8
 800a6fc:	2d0c      	cmp	r5, #12
 800a6fe:	bf38      	it	cc
 800a700:	250c      	movcc	r5, #12
 800a702:	2d00      	cmp	r5, #0
 800a704:	4607      	mov	r7, r0
 800a706:	db01      	blt.n	800a70c <_malloc_r+0x1c>
 800a708:	42a9      	cmp	r1, r5
 800a70a:	d905      	bls.n	800a718 <_malloc_r+0x28>
 800a70c:	230c      	movs	r3, #12
 800a70e:	603b      	str	r3, [r7, #0]
 800a710:	2600      	movs	r6, #0
 800a712:	4630      	mov	r0, r6
 800a714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a718:	4e2e      	ldr	r6, [pc, #184]	; (800a7d4 <_malloc_r+0xe4>)
 800a71a:	f000 f935 	bl	800a988 <__malloc_lock>
 800a71e:	6833      	ldr	r3, [r6, #0]
 800a720:	461c      	mov	r4, r3
 800a722:	bb34      	cbnz	r4, 800a772 <_malloc_r+0x82>
 800a724:	4629      	mov	r1, r5
 800a726:	4638      	mov	r0, r7
 800a728:	f7ff ffc2 	bl	800a6b0 <sbrk_aligned>
 800a72c:	1c43      	adds	r3, r0, #1
 800a72e:	4604      	mov	r4, r0
 800a730:	d14d      	bne.n	800a7ce <_malloc_r+0xde>
 800a732:	6834      	ldr	r4, [r6, #0]
 800a734:	4626      	mov	r6, r4
 800a736:	2e00      	cmp	r6, #0
 800a738:	d140      	bne.n	800a7bc <_malloc_r+0xcc>
 800a73a:	6823      	ldr	r3, [r4, #0]
 800a73c:	4631      	mov	r1, r6
 800a73e:	4638      	mov	r0, r7
 800a740:	eb04 0803 	add.w	r8, r4, r3
 800a744:	f000 f8b4 	bl	800a8b0 <_sbrk_r>
 800a748:	4580      	cmp	r8, r0
 800a74a:	d13a      	bne.n	800a7c2 <_malloc_r+0xd2>
 800a74c:	6821      	ldr	r1, [r4, #0]
 800a74e:	3503      	adds	r5, #3
 800a750:	1a6d      	subs	r5, r5, r1
 800a752:	f025 0503 	bic.w	r5, r5, #3
 800a756:	3508      	adds	r5, #8
 800a758:	2d0c      	cmp	r5, #12
 800a75a:	bf38      	it	cc
 800a75c:	250c      	movcc	r5, #12
 800a75e:	4629      	mov	r1, r5
 800a760:	4638      	mov	r0, r7
 800a762:	f7ff ffa5 	bl	800a6b0 <sbrk_aligned>
 800a766:	3001      	adds	r0, #1
 800a768:	d02b      	beq.n	800a7c2 <_malloc_r+0xd2>
 800a76a:	6823      	ldr	r3, [r4, #0]
 800a76c:	442b      	add	r3, r5
 800a76e:	6023      	str	r3, [r4, #0]
 800a770:	e00e      	b.n	800a790 <_malloc_r+0xa0>
 800a772:	6822      	ldr	r2, [r4, #0]
 800a774:	1b52      	subs	r2, r2, r5
 800a776:	d41e      	bmi.n	800a7b6 <_malloc_r+0xc6>
 800a778:	2a0b      	cmp	r2, #11
 800a77a:	d916      	bls.n	800a7aa <_malloc_r+0xba>
 800a77c:	1961      	adds	r1, r4, r5
 800a77e:	42a3      	cmp	r3, r4
 800a780:	6025      	str	r5, [r4, #0]
 800a782:	bf18      	it	ne
 800a784:	6059      	strne	r1, [r3, #4]
 800a786:	6863      	ldr	r3, [r4, #4]
 800a788:	bf08      	it	eq
 800a78a:	6031      	streq	r1, [r6, #0]
 800a78c:	5162      	str	r2, [r4, r5]
 800a78e:	604b      	str	r3, [r1, #4]
 800a790:	4638      	mov	r0, r7
 800a792:	f104 060b 	add.w	r6, r4, #11
 800a796:	f000 f8fd 	bl	800a994 <__malloc_unlock>
 800a79a:	f026 0607 	bic.w	r6, r6, #7
 800a79e:	1d23      	adds	r3, r4, #4
 800a7a0:	1af2      	subs	r2, r6, r3
 800a7a2:	d0b6      	beq.n	800a712 <_malloc_r+0x22>
 800a7a4:	1b9b      	subs	r3, r3, r6
 800a7a6:	50a3      	str	r3, [r4, r2]
 800a7a8:	e7b3      	b.n	800a712 <_malloc_r+0x22>
 800a7aa:	6862      	ldr	r2, [r4, #4]
 800a7ac:	42a3      	cmp	r3, r4
 800a7ae:	bf0c      	ite	eq
 800a7b0:	6032      	streq	r2, [r6, #0]
 800a7b2:	605a      	strne	r2, [r3, #4]
 800a7b4:	e7ec      	b.n	800a790 <_malloc_r+0xa0>
 800a7b6:	4623      	mov	r3, r4
 800a7b8:	6864      	ldr	r4, [r4, #4]
 800a7ba:	e7b2      	b.n	800a722 <_malloc_r+0x32>
 800a7bc:	4634      	mov	r4, r6
 800a7be:	6876      	ldr	r6, [r6, #4]
 800a7c0:	e7b9      	b.n	800a736 <_malloc_r+0x46>
 800a7c2:	230c      	movs	r3, #12
 800a7c4:	603b      	str	r3, [r7, #0]
 800a7c6:	4638      	mov	r0, r7
 800a7c8:	f000 f8e4 	bl	800a994 <__malloc_unlock>
 800a7cc:	e7a1      	b.n	800a712 <_malloc_r+0x22>
 800a7ce:	6025      	str	r5, [r4, #0]
 800a7d0:	e7de      	b.n	800a790 <_malloc_r+0xa0>
 800a7d2:	bf00      	nop
 800a7d4:	20002ed0 	.word	0x20002ed0

0800a7d8 <srand>:
 800a7d8:	b538      	push	{r3, r4, r5, lr}
 800a7da:	4b10      	ldr	r3, [pc, #64]	; (800a81c <srand+0x44>)
 800a7dc:	681d      	ldr	r5, [r3, #0]
 800a7de:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800a7e0:	4604      	mov	r4, r0
 800a7e2:	b9b3      	cbnz	r3, 800a812 <srand+0x3a>
 800a7e4:	2018      	movs	r0, #24
 800a7e6:	f7ff fef9 	bl	800a5dc <malloc>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	63a8      	str	r0, [r5, #56]	; 0x38
 800a7ee:	b920      	cbnz	r0, 800a7fa <srand+0x22>
 800a7f0:	4b0b      	ldr	r3, [pc, #44]	; (800a820 <srand+0x48>)
 800a7f2:	480c      	ldr	r0, [pc, #48]	; (800a824 <srand+0x4c>)
 800a7f4:	2142      	movs	r1, #66	; 0x42
 800a7f6:	f000 f885 	bl	800a904 <__assert_func>
 800a7fa:	490b      	ldr	r1, [pc, #44]	; (800a828 <srand+0x50>)
 800a7fc:	4b0b      	ldr	r3, [pc, #44]	; (800a82c <srand+0x54>)
 800a7fe:	e9c0 1300 	strd	r1, r3, [r0]
 800a802:	4b0b      	ldr	r3, [pc, #44]	; (800a830 <srand+0x58>)
 800a804:	6083      	str	r3, [r0, #8]
 800a806:	230b      	movs	r3, #11
 800a808:	8183      	strh	r3, [r0, #12]
 800a80a:	2100      	movs	r1, #0
 800a80c:	2001      	movs	r0, #1
 800a80e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800a812:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800a814:	2200      	movs	r2, #0
 800a816:	611c      	str	r4, [r3, #16]
 800a818:	615a      	str	r2, [r3, #20]
 800a81a:	bd38      	pop	{r3, r4, r5, pc}
 800a81c:	20000104 	.word	0x20000104
 800a820:	0800b860 	.word	0x0800b860
 800a824:	0800b877 	.word	0x0800b877
 800a828:	abcd330e 	.word	0xabcd330e
 800a82c:	e66d1234 	.word	0xe66d1234
 800a830:	0005deec 	.word	0x0005deec

0800a834 <rand>:
 800a834:	4b16      	ldr	r3, [pc, #88]	; (800a890 <rand+0x5c>)
 800a836:	b510      	push	{r4, lr}
 800a838:	681c      	ldr	r4, [r3, #0]
 800a83a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a83c:	b9b3      	cbnz	r3, 800a86c <rand+0x38>
 800a83e:	2018      	movs	r0, #24
 800a840:	f7ff fecc 	bl	800a5dc <malloc>
 800a844:	63a0      	str	r0, [r4, #56]	; 0x38
 800a846:	b928      	cbnz	r0, 800a854 <rand+0x20>
 800a848:	4602      	mov	r2, r0
 800a84a:	4b12      	ldr	r3, [pc, #72]	; (800a894 <rand+0x60>)
 800a84c:	4812      	ldr	r0, [pc, #72]	; (800a898 <rand+0x64>)
 800a84e:	214e      	movs	r1, #78	; 0x4e
 800a850:	f000 f858 	bl	800a904 <__assert_func>
 800a854:	4a11      	ldr	r2, [pc, #68]	; (800a89c <rand+0x68>)
 800a856:	4b12      	ldr	r3, [pc, #72]	; (800a8a0 <rand+0x6c>)
 800a858:	e9c0 2300 	strd	r2, r3, [r0]
 800a85c:	4b11      	ldr	r3, [pc, #68]	; (800a8a4 <rand+0x70>)
 800a85e:	6083      	str	r3, [r0, #8]
 800a860:	230b      	movs	r3, #11
 800a862:	8183      	strh	r3, [r0, #12]
 800a864:	2201      	movs	r2, #1
 800a866:	2300      	movs	r3, #0
 800a868:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800a86c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800a86e:	4a0e      	ldr	r2, [pc, #56]	; (800a8a8 <rand+0x74>)
 800a870:	6920      	ldr	r0, [r4, #16]
 800a872:	6963      	ldr	r3, [r4, #20]
 800a874:	490d      	ldr	r1, [pc, #52]	; (800a8ac <rand+0x78>)
 800a876:	4342      	muls	r2, r0
 800a878:	fb01 2203 	mla	r2, r1, r3, r2
 800a87c:	fba0 0101 	umull	r0, r1, r0, r1
 800a880:	1c43      	adds	r3, r0, #1
 800a882:	eb42 0001 	adc.w	r0, r2, r1
 800a886:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800a88a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a88e:	bd10      	pop	{r4, pc}
 800a890:	20000104 	.word	0x20000104
 800a894:	0800b860 	.word	0x0800b860
 800a898:	0800b877 	.word	0x0800b877
 800a89c:	abcd330e 	.word	0xabcd330e
 800a8a0:	e66d1234 	.word	0xe66d1234
 800a8a4:	0005deec 	.word	0x0005deec
 800a8a8:	5851f42d 	.word	0x5851f42d
 800a8ac:	4c957f2d 	.word	0x4c957f2d

0800a8b0 <_sbrk_r>:
 800a8b0:	b538      	push	{r3, r4, r5, lr}
 800a8b2:	4d06      	ldr	r5, [pc, #24]	; (800a8cc <_sbrk_r+0x1c>)
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	4604      	mov	r4, r0
 800a8b8:	4608      	mov	r0, r1
 800a8ba:	602b      	str	r3, [r5, #0]
 800a8bc:	f7ff fd60 	bl	800a380 <_sbrk>
 800a8c0:	1c43      	adds	r3, r0, #1
 800a8c2:	d102      	bne.n	800a8ca <_sbrk_r+0x1a>
 800a8c4:	682b      	ldr	r3, [r5, #0]
 800a8c6:	b103      	cbz	r3, 800a8ca <_sbrk_r+0x1a>
 800a8c8:	6023      	str	r3, [r4, #0]
 800a8ca:	bd38      	pop	{r3, r4, r5, pc}
 800a8cc:	20002ed8 	.word	0x20002ed8

0800a8d0 <time>:
 800a8d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a8d2:	4b0b      	ldr	r3, [pc, #44]	; (800a900 <time+0x30>)
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	4669      	mov	r1, sp
 800a8d8:	4604      	mov	r4, r0
 800a8da:	6818      	ldr	r0, [r3, #0]
 800a8dc:	f000 f842 	bl	800a964 <_gettimeofday_r>
 800a8e0:	2800      	cmp	r0, #0
 800a8e2:	bfbe      	ittt	lt
 800a8e4:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 800a8e8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a8ec:	e9cd 2300 	strdlt	r2, r3, [sp]
 800a8f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8f4:	b10c      	cbz	r4, 800a8fa <time+0x2a>
 800a8f6:	e9c4 0100 	strd	r0, r1, [r4]
 800a8fa:	b004      	add	sp, #16
 800a8fc:	bd10      	pop	{r4, pc}
 800a8fe:	bf00      	nop
 800a900:	20000104 	.word	0x20000104

0800a904 <__assert_func>:
 800a904:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a906:	4614      	mov	r4, r2
 800a908:	461a      	mov	r2, r3
 800a90a:	4b09      	ldr	r3, [pc, #36]	; (800a930 <__assert_func+0x2c>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	4605      	mov	r5, r0
 800a910:	68d8      	ldr	r0, [r3, #12]
 800a912:	b14c      	cbz	r4, 800a928 <__assert_func+0x24>
 800a914:	4b07      	ldr	r3, [pc, #28]	; (800a934 <__assert_func+0x30>)
 800a916:	9100      	str	r1, [sp, #0]
 800a918:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a91c:	4906      	ldr	r1, [pc, #24]	; (800a938 <__assert_func+0x34>)
 800a91e:	462b      	mov	r3, r5
 800a920:	f000 f80e 	bl	800a940 <fiprintf>
 800a924:	f000 fbea 	bl	800b0fc <abort>
 800a928:	4b04      	ldr	r3, [pc, #16]	; (800a93c <__assert_func+0x38>)
 800a92a:	461c      	mov	r4, r3
 800a92c:	e7f3      	b.n	800a916 <__assert_func+0x12>
 800a92e:	bf00      	nop
 800a930:	20000104 	.word	0x20000104
 800a934:	0800b8d2 	.word	0x0800b8d2
 800a938:	0800b8df 	.word	0x0800b8df
 800a93c:	0800b90d 	.word	0x0800b90d

0800a940 <fiprintf>:
 800a940:	b40e      	push	{r1, r2, r3}
 800a942:	b503      	push	{r0, r1, lr}
 800a944:	4601      	mov	r1, r0
 800a946:	ab03      	add	r3, sp, #12
 800a948:	4805      	ldr	r0, [pc, #20]	; (800a960 <fiprintf+0x20>)
 800a94a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a94e:	6800      	ldr	r0, [r0, #0]
 800a950:	9301      	str	r3, [sp, #4]
 800a952:	f000 f84f 	bl	800a9f4 <_vfiprintf_r>
 800a956:	b002      	add	sp, #8
 800a958:	f85d eb04 	ldr.w	lr, [sp], #4
 800a95c:	b003      	add	sp, #12
 800a95e:	4770      	bx	lr
 800a960:	20000104 	.word	0x20000104

0800a964 <_gettimeofday_r>:
 800a964:	b538      	push	{r3, r4, r5, lr}
 800a966:	4d07      	ldr	r5, [pc, #28]	; (800a984 <_gettimeofday_r+0x20>)
 800a968:	2300      	movs	r3, #0
 800a96a:	4604      	mov	r4, r0
 800a96c:	4608      	mov	r0, r1
 800a96e:	4611      	mov	r1, r2
 800a970:	602b      	str	r3, [r5, #0]
 800a972:	f000 fedb 	bl	800b72c <_gettimeofday>
 800a976:	1c43      	adds	r3, r0, #1
 800a978:	d102      	bne.n	800a980 <_gettimeofday_r+0x1c>
 800a97a:	682b      	ldr	r3, [r5, #0]
 800a97c:	b103      	cbz	r3, 800a980 <_gettimeofday_r+0x1c>
 800a97e:	6023      	str	r3, [r4, #0]
 800a980:	bd38      	pop	{r3, r4, r5, pc}
 800a982:	bf00      	nop
 800a984:	20002ed8 	.word	0x20002ed8

0800a988 <__malloc_lock>:
 800a988:	4801      	ldr	r0, [pc, #4]	; (800a990 <__malloc_lock+0x8>)
 800a98a:	f000 bd77 	b.w	800b47c <__retarget_lock_acquire_recursive>
 800a98e:	bf00      	nop
 800a990:	20002edc 	.word	0x20002edc

0800a994 <__malloc_unlock>:
 800a994:	4801      	ldr	r0, [pc, #4]	; (800a99c <__malloc_unlock+0x8>)
 800a996:	f000 bd72 	b.w	800b47e <__retarget_lock_release_recursive>
 800a99a:	bf00      	nop
 800a99c:	20002edc 	.word	0x20002edc

0800a9a0 <__sfputc_r>:
 800a9a0:	6893      	ldr	r3, [r2, #8]
 800a9a2:	3b01      	subs	r3, #1
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	b410      	push	{r4}
 800a9a8:	6093      	str	r3, [r2, #8]
 800a9aa:	da08      	bge.n	800a9be <__sfputc_r+0x1e>
 800a9ac:	6994      	ldr	r4, [r2, #24]
 800a9ae:	42a3      	cmp	r3, r4
 800a9b0:	db01      	blt.n	800a9b6 <__sfputc_r+0x16>
 800a9b2:	290a      	cmp	r1, #10
 800a9b4:	d103      	bne.n	800a9be <__sfputc_r+0x1e>
 800a9b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9ba:	f000 badf 	b.w	800af7c <__swbuf_r>
 800a9be:	6813      	ldr	r3, [r2, #0]
 800a9c0:	1c58      	adds	r0, r3, #1
 800a9c2:	6010      	str	r0, [r2, #0]
 800a9c4:	7019      	strb	r1, [r3, #0]
 800a9c6:	4608      	mov	r0, r1
 800a9c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9cc:	4770      	bx	lr

0800a9ce <__sfputs_r>:
 800a9ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9d0:	4606      	mov	r6, r0
 800a9d2:	460f      	mov	r7, r1
 800a9d4:	4614      	mov	r4, r2
 800a9d6:	18d5      	adds	r5, r2, r3
 800a9d8:	42ac      	cmp	r4, r5
 800a9da:	d101      	bne.n	800a9e0 <__sfputs_r+0x12>
 800a9dc:	2000      	movs	r0, #0
 800a9de:	e007      	b.n	800a9f0 <__sfputs_r+0x22>
 800a9e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9e4:	463a      	mov	r2, r7
 800a9e6:	4630      	mov	r0, r6
 800a9e8:	f7ff ffda 	bl	800a9a0 <__sfputc_r>
 800a9ec:	1c43      	adds	r3, r0, #1
 800a9ee:	d1f3      	bne.n	800a9d8 <__sfputs_r+0xa>
 800a9f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a9f4 <_vfiprintf_r>:
 800a9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9f8:	460d      	mov	r5, r1
 800a9fa:	b09d      	sub	sp, #116	; 0x74
 800a9fc:	4614      	mov	r4, r2
 800a9fe:	4698      	mov	r8, r3
 800aa00:	4606      	mov	r6, r0
 800aa02:	b118      	cbz	r0, 800aa0c <_vfiprintf_r+0x18>
 800aa04:	6983      	ldr	r3, [r0, #24]
 800aa06:	b90b      	cbnz	r3, 800aa0c <_vfiprintf_r+0x18>
 800aa08:	f000 fc9a 	bl	800b340 <__sinit>
 800aa0c:	4b89      	ldr	r3, [pc, #548]	; (800ac34 <_vfiprintf_r+0x240>)
 800aa0e:	429d      	cmp	r5, r3
 800aa10:	d11b      	bne.n	800aa4a <_vfiprintf_r+0x56>
 800aa12:	6875      	ldr	r5, [r6, #4]
 800aa14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa16:	07d9      	lsls	r1, r3, #31
 800aa18:	d405      	bmi.n	800aa26 <_vfiprintf_r+0x32>
 800aa1a:	89ab      	ldrh	r3, [r5, #12]
 800aa1c:	059a      	lsls	r2, r3, #22
 800aa1e:	d402      	bmi.n	800aa26 <_vfiprintf_r+0x32>
 800aa20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa22:	f000 fd2b 	bl	800b47c <__retarget_lock_acquire_recursive>
 800aa26:	89ab      	ldrh	r3, [r5, #12]
 800aa28:	071b      	lsls	r3, r3, #28
 800aa2a:	d501      	bpl.n	800aa30 <_vfiprintf_r+0x3c>
 800aa2c:	692b      	ldr	r3, [r5, #16]
 800aa2e:	b9eb      	cbnz	r3, 800aa6c <_vfiprintf_r+0x78>
 800aa30:	4629      	mov	r1, r5
 800aa32:	4630      	mov	r0, r6
 800aa34:	f000 faf4 	bl	800b020 <__swsetup_r>
 800aa38:	b1c0      	cbz	r0, 800aa6c <_vfiprintf_r+0x78>
 800aa3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa3c:	07dc      	lsls	r4, r3, #31
 800aa3e:	d50e      	bpl.n	800aa5e <_vfiprintf_r+0x6a>
 800aa40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa44:	b01d      	add	sp, #116	; 0x74
 800aa46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa4a:	4b7b      	ldr	r3, [pc, #492]	; (800ac38 <_vfiprintf_r+0x244>)
 800aa4c:	429d      	cmp	r5, r3
 800aa4e:	d101      	bne.n	800aa54 <_vfiprintf_r+0x60>
 800aa50:	68b5      	ldr	r5, [r6, #8]
 800aa52:	e7df      	b.n	800aa14 <_vfiprintf_r+0x20>
 800aa54:	4b79      	ldr	r3, [pc, #484]	; (800ac3c <_vfiprintf_r+0x248>)
 800aa56:	429d      	cmp	r5, r3
 800aa58:	bf08      	it	eq
 800aa5a:	68f5      	ldreq	r5, [r6, #12]
 800aa5c:	e7da      	b.n	800aa14 <_vfiprintf_r+0x20>
 800aa5e:	89ab      	ldrh	r3, [r5, #12]
 800aa60:	0598      	lsls	r0, r3, #22
 800aa62:	d4ed      	bmi.n	800aa40 <_vfiprintf_r+0x4c>
 800aa64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa66:	f000 fd0a 	bl	800b47e <__retarget_lock_release_recursive>
 800aa6a:	e7e9      	b.n	800aa40 <_vfiprintf_r+0x4c>
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	9309      	str	r3, [sp, #36]	; 0x24
 800aa70:	2320      	movs	r3, #32
 800aa72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa76:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa7a:	2330      	movs	r3, #48	; 0x30
 800aa7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ac40 <_vfiprintf_r+0x24c>
 800aa80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa84:	f04f 0901 	mov.w	r9, #1
 800aa88:	4623      	mov	r3, r4
 800aa8a:	469a      	mov	sl, r3
 800aa8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa90:	b10a      	cbz	r2, 800aa96 <_vfiprintf_r+0xa2>
 800aa92:	2a25      	cmp	r2, #37	; 0x25
 800aa94:	d1f9      	bne.n	800aa8a <_vfiprintf_r+0x96>
 800aa96:	ebba 0b04 	subs.w	fp, sl, r4
 800aa9a:	d00b      	beq.n	800aab4 <_vfiprintf_r+0xc0>
 800aa9c:	465b      	mov	r3, fp
 800aa9e:	4622      	mov	r2, r4
 800aaa0:	4629      	mov	r1, r5
 800aaa2:	4630      	mov	r0, r6
 800aaa4:	f7ff ff93 	bl	800a9ce <__sfputs_r>
 800aaa8:	3001      	adds	r0, #1
 800aaaa:	f000 80aa 	beq.w	800ac02 <_vfiprintf_r+0x20e>
 800aaae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aab0:	445a      	add	r2, fp
 800aab2:	9209      	str	r2, [sp, #36]	; 0x24
 800aab4:	f89a 3000 	ldrb.w	r3, [sl]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	f000 80a2 	beq.w	800ac02 <_vfiprintf_r+0x20e>
 800aabe:	2300      	movs	r3, #0
 800aac0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aac4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aac8:	f10a 0a01 	add.w	sl, sl, #1
 800aacc:	9304      	str	r3, [sp, #16]
 800aace:	9307      	str	r3, [sp, #28]
 800aad0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aad4:	931a      	str	r3, [sp, #104]	; 0x68
 800aad6:	4654      	mov	r4, sl
 800aad8:	2205      	movs	r2, #5
 800aada:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aade:	4858      	ldr	r0, [pc, #352]	; (800ac40 <_vfiprintf_r+0x24c>)
 800aae0:	f7f5 fb76 	bl	80001d0 <memchr>
 800aae4:	9a04      	ldr	r2, [sp, #16]
 800aae6:	b9d8      	cbnz	r0, 800ab20 <_vfiprintf_r+0x12c>
 800aae8:	06d1      	lsls	r1, r2, #27
 800aaea:	bf44      	itt	mi
 800aaec:	2320      	movmi	r3, #32
 800aaee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aaf2:	0713      	lsls	r3, r2, #28
 800aaf4:	bf44      	itt	mi
 800aaf6:	232b      	movmi	r3, #43	; 0x2b
 800aaf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aafc:	f89a 3000 	ldrb.w	r3, [sl]
 800ab00:	2b2a      	cmp	r3, #42	; 0x2a
 800ab02:	d015      	beq.n	800ab30 <_vfiprintf_r+0x13c>
 800ab04:	9a07      	ldr	r2, [sp, #28]
 800ab06:	4654      	mov	r4, sl
 800ab08:	2000      	movs	r0, #0
 800ab0a:	f04f 0c0a 	mov.w	ip, #10
 800ab0e:	4621      	mov	r1, r4
 800ab10:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab14:	3b30      	subs	r3, #48	; 0x30
 800ab16:	2b09      	cmp	r3, #9
 800ab18:	d94e      	bls.n	800abb8 <_vfiprintf_r+0x1c4>
 800ab1a:	b1b0      	cbz	r0, 800ab4a <_vfiprintf_r+0x156>
 800ab1c:	9207      	str	r2, [sp, #28]
 800ab1e:	e014      	b.n	800ab4a <_vfiprintf_r+0x156>
 800ab20:	eba0 0308 	sub.w	r3, r0, r8
 800ab24:	fa09 f303 	lsl.w	r3, r9, r3
 800ab28:	4313      	orrs	r3, r2
 800ab2a:	9304      	str	r3, [sp, #16]
 800ab2c:	46a2      	mov	sl, r4
 800ab2e:	e7d2      	b.n	800aad6 <_vfiprintf_r+0xe2>
 800ab30:	9b03      	ldr	r3, [sp, #12]
 800ab32:	1d19      	adds	r1, r3, #4
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	9103      	str	r1, [sp, #12]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	bfbb      	ittet	lt
 800ab3c:	425b      	neglt	r3, r3
 800ab3e:	f042 0202 	orrlt.w	r2, r2, #2
 800ab42:	9307      	strge	r3, [sp, #28]
 800ab44:	9307      	strlt	r3, [sp, #28]
 800ab46:	bfb8      	it	lt
 800ab48:	9204      	strlt	r2, [sp, #16]
 800ab4a:	7823      	ldrb	r3, [r4, #0]
 800ab4c:	2b2e      	cmp	r3, #46	; 0x2e
 800ab4e:	d10c      	bne.n	800ab6a <_vfiprintf_r+0x176>
 800ab50:	7863      	ldrb	r3, [r4, #1]
 800ab52:	2b2a      	cmp	r3, #42	; 0x2a
 800ab54:	d135      	bne.n	800abc2 <_vfiprintf_r+0x1ce>
 800ab56:	9b03      	ldr	r3, [sp, #12]
 800ab58:	1d1a      	adds	r2, r3, #4
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	9203      	str	r2, [sp, #12]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	bfb8      	it	lt
 800ab62:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ab66:	3402      	adds	r4, #2
 800ab68:	9305      	str	r3, [sp, #20]
 800ab6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ac50 <_vfiprintf_r+0x25c>
 800ab6e:	7821      	ldrb	r1, [r4, #0]
 800ab70:	2203      	movs	r2, #3
 800ab72:	4650      	mov	r0, sl
 800ab74:	f7f5 fb2c 	bl	80001d0 <memchr>
 800ab78:	b140      	cbz	r0, 800ab8c <_vfiprintf_r+0x198>
 800ab7a:	2340      	movs	r3, #64	; 0x40
 800ab7c:	eba0 000a 	sub.w	r0, r0, sl
 800ab80:	fa03 f000 	lsl.w	r0, r3, r0
 800ab84:	9b04      	ldr	r3, [sp, #16]
 800ab86:	4303      	orrs	r3, r0
 800ab88:	3401      	adds	r4, #1
 800ab8a:	9304      	str	r3, [sp, #16]
 800ab8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab90:	482c      	ldr	r0, [pc, #176]	; (800ac44 <_vfiprintf_r+0x250>)
 800ab92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab96:	2206      	movs	r2, #6
 800ab98:	f7f5 fb1a 	bl	80001d0 <memchr>
 800ab9c:	2800      	cmp	r0, #0
 800ab9e:	d03f      	beq.n	800ac20 <_vfiprintf_r+0x22c>
 800aba0:	4b29      	ldr	r3, [pc, #164]	; (800ac48 <_vfiprintf_r+0x254>)
 800aba2:	bb1b      	cbnz	r3, 800abec <_vfiprintf_r+0x1f8>
 800aba4:	9b03      	ldr	r3, [sp, #12]
 800aba6:	3307      	adds	r3, #7
 800aba8:	f023 0307 	bic.w	r3, r3, #7
 800abac:	3308      	adds	r3, #8
 800abae:	9303      	str	r3, [sp, #12]
 800abb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abb2:	443b      	add	r3, r7
 800abb4:	9309      	str	r3, [sp, #36]	; 0x24
 800abb6:	e767      	b.n	800aa88 <_vfiprintf_r+0x94>
 800abb8:	fb0c 3202 	mla	r2, ip, r2, r3
 800abbc:	460c      	mov	r4, r1
 800abbe:	2001      	movs	r0, #1
 800abc0:	e7a5      	b.n	800ab0e <_vfiprintf_r+0x11a>
 800abc2:	2300      	movs	r3, #0
 800abc4:	3401      	adds	r4, #1
 800abc6:	9305      	str	r3, [sp, #20]
 800abc8:	4619      	mov	r1, r3
 800abca:	f04f 0c0a 	mov.w	ip, #10
 800abce:	4620      	mov	r0, r4
 800abd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abd4:	3a30      	subs	r2, #48	; 0x30
 800abd6:	2a09      	cmp	r2, #9
 800abd8:	d903      	bls.n	800abe2 <_vfiprintf_r+0x1ee>
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d0c5      	beq.n	800ab6a <_vfiprintf_r+0x176>
 800abde:	9105      	str	r1, [sp, #20]
 800abe0:	e7c3      	b.n	800ab6a <_vfiprintf_r+0x176>
 800abe2:	fb0c 2101 	mla	r1, ip, r1, r2
 800abe6:	4604      	mov	r4, r0
 800abe8:	2301      	movs	r3, #1
 800abea:	e7f0      	b.n	800abce <_vfiprintf_r+0x1da>
 800abec:	ab03      	add	r3, sp, #12
 800abee:	9300      	str	r3, [sp, #0]
 800abf0:	462a      	mov	r2, r5
 800abf2:	4b16      	ldr	r3, [pc, #88]	; (800ac4c <_vfiprintf_r+0x258>)
 800abf4:	a904      	add	r1, sp, #16
 800abf6:	4630      	mov	r0, r6
 800abf8:	f3af 8000 	nop.w
 800abfc:	4607      	mov	r7, r0
 800abfe:	1c78      	adds	r0, r7, #1
 800ac00:	d1d6      	bne.n	800abb0 <_vfiprintf_r+0x1bc>
 800ac02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac04:	07d9      	lsls	r1, r3, #31
 800ac06:	d405      	bmi.n	800ac14 <_vfiprintf_r+0x220>
 800ac08:	89ab      	ldrh	r3, [r5, #12]
 800ac0a:	059a      	lsls	r2, r3, #22
 800ac0c:	d402      	bmi.n	800ac14 <_vfiprintf_r+0x220>
 800ac0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac10:	f000 fc35 	bl	800b47e <__retarget_lock_release_recursive>
 800ac14:	89ab      	ldrh	r3, [r5, #12]
 800ac16:	065b      	lsls	r3, r3, #25
 800ac18:	f53f af12 	bmi.w	800aa40 <_vfiprintf_r+0x4c>
 800ac1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac1e:	e711      	b.n	800aa44 <_vfiprintf_r+0x50>
 800ac20:	ab03      	add	r3, sp, #12
 800ac22:	9300      	str	r3, [sp, #0]
 800ac24:	462a      	mov	r2, r5
 800ac26:	4b09      	ldr	r3, [pc, #36]	; (800ac4c <_vfiprintf_r+0x258>)
 800ac28:	a904      	add	r1, sp, #16
 800ac2a:	4630      	mov	r0, r6
 800ac2c:	f000 f880 	bl	800ad30 <_printf_i>
 800ac30:	e7e4      	b.n	800abfc <_vfiprintf_r+0x208>
 800ac32:	bf00      	nop
 800ac34:	0800b964 	.word	0x0800b964
 800ac38:	0800b984 	.word	0x0800b984
 800ac3c:	0800b944 	.word	0x0800b944
 800ac40:	0800b90e 	.word	0x0800b90e
 800ac44:	0800b918 	.word	0x0800b918
 800ac48:	00000000 	.word	0x00000000
 800ac4c:	0800a9cf 	.word	0x0800a9cf
 800ac50:	0800b914 	.word	0x0800b914

0800ac54 <_printf_common>:
 800ac54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac58:	4616      	mov	r6, r2
 800ac5a:	4699      	mov	r9, r3
 800ac5c:	688a      	ldr	r2, [r1, #8]
 800ac5e:	690b      	ldr	r3, [r1, #16]
 800ac60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac64:	4293      	cmp	r3, r2
 800ac66:	bfb8      	it	lt
 800ac68:	4613      	movlt	r3, r2
 800ac6a:	6033      	str	r3, [r6, #0]
 800ac6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac70:	4607      	mov	r7, r0
 800ac72:	460c      	mov	r4, r1
 800ac74:	b10a      	cbz	r2, 800ac7a <_printf_common+0x26>
 800ac76:	3301      	adds	r3, #1
 800ac78:	6033      	str	r3, [r6, #0]
 800ac7a:	6823      	ldr	r3, [r4, #0]
 800ac7c:	0699      	lsls	r1, r3, #26
 800ac7e:	bf42      	ittt	mi
 800ac80:	6833      	ldrmi	r3, [r6, #0]
 800ac82:	3302      	addmi	r3, #2
 800ac84:	6033      	strmi	r3, [r6, #0]
 800ac86:	6825      	ldr	r5, [r4, #0]
 800ac88:	f015 0506 	ands.w	r5, r5, #6
 800ac8c:	d106      	bne.n	800ac9c <_printf_common+0x48>
 800ac8e:	f104 0a19 	add.w	sl, r4, #25
 800ac92:	68e3      	ldr	r3, [r4, #12]
 800ac94:	6832      	ldr	r2, [r6, #0]
 800ac96:	1a9b      	subs	r3, r3, r2
 800ac98:	42ab      	cmp	r3, r5
 800ac9a:	dc26      	bgt.n	800acea <_printf_common+0x96>
 800ac9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aca0:	1e13      	subs	r3, r2, #0
 800aca2:	6822      	ldr	r2, [r4, #0]
 800aca4:	bf18      	it	ne
 800aca6:	2301      	movne	r3, #1
 800aca8:	0692      	lsls	r2, r2, #26
 800acaa:	d42b      	bmi.n	800ad04 <_printf_common+0xb0>
 800acac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800acb0:	4649      	mov	r1, r9
 800acb2:	4638      	mov	r0, r7
 800acb4:	47c0      	blx	r8
 800acb6:	3001      	adds	r0, #1
 800acb8:	d01e      	beq.n	800acf8 <_printf_common+0xa4>
 800acba:	6823      	ldr	r3, [r4, #0]
 800acbc:	68e5      	ldr	r5, [r4, #12]
 800acbe:	6832      	ldr	r2, [r6, #0]
 800acc0:	f003 0306 	and.w	r3, r3, #6
 800acc4:	2b04      	cmp	r3, #4
 800acc6:	bf08      	it	eq
 800acc8:	1aad      	subeq	r5, r5, r2
 800acca:	68a3      	ldr	r3, [r4, #8]
 800accc:	6922      	ldr	r2, [r4, #16]
 800acce:	bf0c      	ite	eq
 800acd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800acd4:	2500      	movne	r5, #0
 800acd6:	4293      	cmp	r3, r2
 800acd8:	bfc4      	itt	gt
 800acda:	1a9b      	subgt	r3, r3, r2
 800acdc:	18ed      	addgt	r5, r5, r3
 800acde:	2600      	movs	r6, #0
 800ace0:	341a      	adds	r4, #26
 800ace2:	42b5      	cmp	r5, r6
 800ace4:	d11a      	bne.n	800ad1c <_printf_common+0xc8>
 800ace6:	2000      	movs	r0, #0
 800ace8:	e008      	b.n	800acfc <_printf_common+0xa8>
 800acea:	2301      	movs	r3, #1
 800acec:	4652      	mov	r2, sl
 800acee:	4649      	mov	r1, r9
 800acf0:	4638      	mov	r0, r7
 800acf2:	47c0      	blx	r8
 800acf4:	3001      	adds	r0, #1
 800acf6:	d103      	bne.n	800ad00 <_printf_common+0xac>
 800acf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800acfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad00:	3501      	adds	r5, #1
 800ad02:	e7c6      	b.n	800ac92 <_printf_common+0x3e>
 800ad04:	18e1      	adds	r1, r4, r3
 800ad06:	1c5a      	adds	r2, r3, #1
 800ad08:	2030      	movs	r0, #48	; 0x30
 800ad0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ad0e:	4422      	add	r2, r4
 800ad10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ad14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ad18:	3302      	adds	r3, #2
 800ad1a:	e7c7      	b.n	800acac <_printf_common+0x58>
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	4622      	mov	r2, r4
 800ad20:	4649      	mov	r1, r9
 800ad22:	4638      	mov	r0, r7
 800ad24:	47c0      	blx	r8
 800ad26:	3001      	adds	r0, #1
 800ad28:	d0e6      	beq.n	800acf8 <_printf_common+0xa4>
 800ad2a:	3601      	adds	r6, #1
 800ad2c:	e7d9      	b.n	800ace2 <_printf_common+0x8e>
	...

0800ad30 <_printf_i>:
 800ad30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad34:	7e0f      	ldrb	r7, [r1, #24]
 800ad36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ad38:	2f78      	cmp	r7, #120	; 0x78
 800ad3a:	4691      	mov	r9, r2
 800ad3c:	4680      	mov	r8, r0
 800ad3e:	460c      	mov	r4, r1
 800ad40:	469a      	mov	sl, r3
 800ad42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ad46:	d807      	bhi.n	800ad58 <_printf_i+0x28>
 800ad48:	2f62      	cmp	r7, #98	; 0x62
 800ad4a:	d80a      	bhi.n	800ad62 <_printf_i+0x32>
 800ad4c:	2f00      	cmp	r7, #0
 800ad4e:	f000 80d8 	beq.w	800af02 <_printf_i+0x1d2>
 800ad52:	2f58      	cmp	r7, #88	; 0x58
 800ad54:	f000 80a3 	beq.w	800ae9e <_printf_i+0x16e>
 800ad58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ad60:	e03a      	b.n	800add8 <_printf_i+0xa8>
 800ad62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ad66:	2b15      	cmp	r3, #21
 800ad68:	d8f6      	bhi.n	800ad58 <_printf_i+0x28>
 800ad6a:	a101      	add	r1, pc, #4	; (adr r1, 800ad70 <_printf_i+0x40>)
 800ad6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad70:	0800adc9 	.word	0x0800adc9
 800ad74:	0800addd 	.word	0x0800addd
 800ad78:	0800ad59 	.word	0x0800ad59
 800ad7c:	0800ad59 	.word	0x0800ad59
 800ad80:	0800ad59 	.word	0x0800ad59
 800ad84:	0800ad59 	.word	0x0800ad59
 800ad88:	0800addd 	.word	0x0800addd
 800ad8c:	0800ad59 	.word	0x0800ad59
 800ad90:	0800ad59 	.word	0x0800ad59
 800ad94:	0800ad59 	.word	0x0800ad59
 800ad98:	0800ad59 	.word	0x0800ad59
 800ad9c:	0800aee9 	.word	0x0800aee9
 800ada0:	0800ae0d 	.word	0x0800ae0d
 800ada4:	0800aecb 	.word	0x0800aecb
 800ada8:	0800ad59 	.word	0x0800ad59
 800adac:	0800ad59 	.word	0x0800ad59
 800adb0:	0800af0b 	.word	0x0800af0b
 800adb4:	0800ad59 	.word	0x0800ad59
 800adb8:	0800ae0d 	.word	0x0800ae0d
 800adbc:	0800ad59 	.word	0x0800ad59
 800adc0:	0800ad59 	.word	0x0800ad59
 800adc4:	0800aed3 	.word	0x0800aed3
 800adc8:	682b      	ldr	r3, [r5, #0]
 800adca:	1d1a      	adds	r2, r3, #4
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	602a      	str	r2, [r5, #0]
 800add0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800add4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800add8:	2301      	movs	r3, #1
 800adda:	e0a3      	b.n	800af24 <_printf_i+0x1f4>
 800addc:	6820      	ldr	r0, [r4, #0]
 800adde:	6829      	ldr	r1, [r5, #0]
 800ade0:	0606      	lsls	r6, r0, #24
 800ade2:	f101 0304 	add.w	r3, r1, #4
 800ade6:	d50a      	bpl.n	800adfe <_printf_i+0xce>
 800ade8:	680e      	ldr	r6, [r1, #0]
 800adea:	602b      	str	r3, [r5, #0]
 800adec:	2e00      	cmp	r6, #0
 800adee:	da03      	bge.n	800adf8 <_printf_i+0xc8>
 800adf0:	232d      	movs	r3, #45	; 0x2d
 800adf2:	4276      	negs	r6, r6
 800adf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adf8:	485e      	ldr	r0, [pc, #376]	; (800af74 <_printf_i+0x244>)
 800adfa:	230a      	movs	r3, #10
 800adfc:	e019      	b.n	800ae32 <_printf_i+0x102>
 800adfe:	680e      	ldr	r6, [r1, #0]
 800ae00:	602b      	str	r3, [r5, #0]
 800ae02:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ae06:	bf18      	it	ne
 800ae08:	b236      	sxthne	r6, r6
 800ae0a:	e7ef      	b.n	800adec <_printf_i+0xbc>
 800ae0c:	682b      	ldr	r3, [r5, #0]
 800ae0e:	6820      	ldr	r0, [r4, #0]
 800ae10:	1d19      	adds	r1, r3, #4
 800ae12:	6029      	str	r1, [r5, #0]
 800ae14:	0601      	lsls	r1, r0, #24
 800ae16:	d501      	bpl.n	800ae1c <_printf_i+0xec>
 800ae18:	681e      	ldr	r6, [r3, #0]
 800ae1a:	e002      	b.n	800ae22 <_printf_i+0xf2>
 800ae1c:	0646      	lsls	r6, r0, #25
 800ae1e:	d5fb      	bpl.n	800ae18 <_printf_i+0xe8>
 800ae20:	881e      	ldrh	r6, [r3, #0]
 800ae22:	4854      	ldr	r0, [pc, #336]	; (800af74 <_printf_i+0x244>)
 800ae24:	2f6f      	cmp	r7, #111	; 0x6f
 800ae26:	bf0c      	ite	eq
 800ae28:	2308      	moveq	r3, #8
 800ae2a:	230a      	movne	r3, #10
 800ae2c:	2100      	movs	r1, #0
 800ae2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae32:	6865      	ldr	r5, [r4, #4]
 800ae34:	60a5      	str	r5, [r4, #8]
 800ae36:	2d00      	cmp	r5, #0
 800ae38:	bfa2      	ittt	ge
 800ae3a:	6821      	ldrge	r1, [r4, #0]
 800ae3c:	f021 0104 	bicge.w	r1, r1, #4
 800ae40:	6021      	strge	r1, [r4, #0]
 800ae42:	b90e      	cbnz	r6, 800ae48 <_printf_i+0x118>
 800ae44:	2d00      	cmp	r5, #0
 800ae46:	d04d      	beq.n	800aee4 <_printf_i+0x1b4>
 800ae48:	4615      	mov	r5, r2
 800ae4a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ae4e:	fb03 6711 	mls	r7, r3, r1, r6
 800ae52:	5dc7      	ldrb	r7, [r0, r7]
 800ae54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ae58:	4637      	mov	r7, r6
 800ae5a:	42bb      	cmp	r3, r7
 800ae5c:	460e      	mov	r6, r1
 800ae5e:	d9f4      	bls.n	800ae4a <_printf_i+0x11a>
 800ae60:	2b08      	cmp	r3, #8
 800ae62:	d10b      	bne.n	800ae7c <_printf_i+0x14c>
 800ae64:	6823      	ldr	r3, [r4, #0]
 800ae66:	07de      	lsls	r6, r3, #31
 800ae68:	d508      	bpl.n	800ae7c <_printf_i+0x14c>
 800ae6a:	6923      	ldr	r3, [r4, #16]
 800ae6c:	6861      	ldr	r1, [r4, #4]
 800ae6e:	4299      	cmp	r1, r3
 800ae70:	bfde      	ittt	le
 800ae72:	2330      	movle	r3, #48	; 0x30
 800ae74:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ae78:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ae7c:	1b52      	subs	r2, r2, r5
 800ae7e:	6122      	str	r2, [r4, #16]
 800ae80:	f8cd a000 	str.w	sl, [sp]
 800ae84:	464b      	mov	r3, r9
 800ae86:	aa03      	add	r2, sp, #12
 800ae88:	4621      	mov	r1, r4
 800ae8a:	4640      	mov	r0, r8
 800ae8c:	f7ff fee2 	bl	800ac54 <_printf_common>
 800ae90:	3001      	adds	r0, #1
 800ae92:	d14c      	bne.n	800af2e <_printf_i+0x1fe>
 800ae94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae98:	b004      	add	sp, #16
 800ae9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae9e:	4835      	ldr	r0, [pc, #212]	; (800af74 <_printf_i+0x244>)
 800aea0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800aea4:	6829      	ldr	r1, [r5, #0]
 800aea6:	6823      	ldr	r3, [r4, #0]
 800aea8:	f851 6b04 	ldr.w	r6, [r1], #4
 800aeac:	6029      	str	r1, [r5, #0]
 800aeae:	061d      	lsls	r5, r3, #24
 800aeb0:	d514      	bpl.n	800aedc <_printf_i+0x1ac>
 800aeb2:	07df      	lsls	r7, r3, #31
 800aeb4:	bf44      	itt	mi
 800aeb6:	f043 0320 	orrmi.w	r3, r3, #32
 800aeba:	6023      	strmi	r3, [r4, #0]
 800aebc:	b91e      	cbnz	r6, 800aec6 <_printf_i+0x196>
 800aebe:	6823      	ldr	r3, [r4, #0]
 800aec0:	f023 0320 	bic.w	r3, r3, #32
 800aec4:	6023      	str	r3, [r4, #0]
 800aec6:	2310      	movs	r3, #16
 800aec8:	e7b0      	b.n	800ae2c <_printf_i+0xfc>
 800aeca:	6823      	ldr	r3, [r4, #0]
 800aecc:	f043 0320 	orr.w	r3, r3, #32
 800aed0:	6023      	str	r3, [r4, #0]
 800aed2:	2378      	movs	r3, #120	; 0x78
 800aed4:	4828      	ldr	r0, [pc, #160]	; (800af78 <_printf_i+0x248>)
 800aed6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aeda:	e7e3      	b.n	800aea4 <_printf_i+0x174>
 800aedc:	0659      	lsls	r1, r3, #25
 800aede:	bf48      	it	mi
 800aee0:	b2b6      	uxthmi	r6, r6
 800aee2:	e7e6      	b.n	800aeb2 <_printf_i+0x182>
 800aee4:	4615      	mov	r5, r2
 800aee6:	e7bb      	b.n	800ae60 <_printf_i+0x130>
 800aee8:	682b      	ldr	r3, [r5, #0]
 800aeea:	6826      	ldr	r6, [r4, #0]
 800aeec:	6961      	ldr	r1, [r4, #20]
 800aeee:	1d18      	adds	r0, r3, #4
 800aef0:	6028      	str	r0, [r5, #0]
 800aef2:	0635      	lsls	r5, r6, #24
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	d501      	bpl.n	800aefc <_printf_i+0x1cc>
 800aef8:	6019      	str	r1, [r3, #0]
 800aefa:	e002      	b.n	800af02 <_printf_i+0x1d2>
 800aefc:	0670      	lsls	r0, r6, #25
 800aefe:	d5fb      	bpl.n	800aef8 <_printf_i+0x1c8>
 800af00:	8019      	strh	r1, [r3, #0]
 800af02:	2300      	movs	r3, #0
 800af04:	6123      	str	r3, [r4, #16]
 800af06:	4615      	mov	r5, r2
 800af08:	e7ba      	b.n	800ae80 <_printf_i+0x150>
 800af0a:	682b      	ldr	r3, [r5, #0]
 800af0c:	1d1a      	adds	r2, r3, #4
 800af0e:	602a      	str	r2, [r5, #0]
 800af10:	681d      	ldr	r5, [r3, #0]
 800af12:	6862      	ldr	r2, [r4, #4]
 800af14:	2100      	movs	r1, #0
 800af16:	4628      	mov	r0, r5
 800af18:	f7f5 f95a 	bl	80001d0 <memchr>
 800af1c:	b108      	cbz	r0, 800af22 <_printf_i+0x1f2>
 800af1e:	1b40      	subs	r0, r0, r5
 800af20:	6060      	str	r0, [r4, #4]
 800af22:	6863      	ldr	r3, [r4, #4]
 800af24:	6123      	str	r3, [r4, #16]
 800af26:	2300      	movs	r3, #0
 800af28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af2c:	e7a8      	b.n	800ae80 <_printf_i+0x150>
 800af2e:	6923      	ldr	r3, [r4, #16]
 800af30:	462a      	mov	r2, r5
 800af32:	4649      	mov	r1, r9
 800af34:	4640      	mov	r0, r8
 800af36:	47d0      	blx	sl
 800af38:	3001      	adds	r0, #1
 800af3a:	d0ab      	beq.n	800ae94 <_printf_i+0x164>
 800af3c:	6823      	ldr	r3, [r4, #0]
 800af3e:	079b      	lsls	r3, r3, #30
 800af40:	d413      	bmi.n	800af6a <_printf_i+0x23a>
 800af42:	68e0      	ldr	r0, [r4, #12]
 800af44:	9b03      	ldr	r3, [sp, #12]
 800af46:	4298      	cmp	r0, r3
 800af48:	bfb8      	it	lt
 800af4a:	4618      	movlt	r0, r3
 800af4c:	e7a4      	b.n	800ae98 <_printf_i+0x168>
 800af4e:	2301      	movs	r3, #1
 800af50:	4632      	mov	r2, r6
 800af52:	4649      	mov	r1, r9
 800af54:	4640      	mov	r0, r8
 800af56:	47d0      	blx	sl
 800af58:	3001      	adds	r0, #1
 800af5a:	d09b      	beq.n	800ae94 <_printf_i+0x164>
 800af5c:	3501      	adds	r5, #1
 800af5e:	68e3      	ldr	r3, [r4, #12]
 800af60:	9903      	ldr	r1, [sp, #12]
 800af62:	1a5b      	subs	r3, r3, r1
 800af64:	42ab      	cmp	r3, r5
 800af66:	dcf2      	bgt.n	800af4e <_printf_i+0x21e>
 800af68:	e7eb      	b.n	800af42 <_printf_i+0x212>
 800af6a:	2500      	movs	r5, #0
 800af6c:	f104 0619 	add.w	r6, r4, #25
 800af70:	e7f5      	b.n	800af5e <_printf_i+0x22e>
 800af72:	bf00      	nop
 800af74:	0800b91f 	.word	0x0800b91f
 800af78:	0800b930 	.word	0x0800b930

0800af7c <__swbuf_r>:
 800af7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af7e:	460e      	mov	r6, r1
 800af80:	4614      	mov	r4, r2
 800af82:	4605      	mov	r5, r0
 800af84:	b118      	cbz	r0, 800af8e <__swbuf_r+0x12>
 800af86:	6983      	ldr	r3, [r0, #24]
 800af88:	b90b      	cbnz	r3, 800af8e <__swbuf_r+0x12>
 800af8a:	f000 f9d9 	bl	800b340 <__sinit>
 800af8e:	4b21      	ldr	r3, [pc, #132]	; (800b014 <__swbuf_r+0x98>)
 800af90:	429c      	cmp	r4, r3
 800af92:	d12b      	bne.n	800afec <__swbuf_r+0x70>
 800af94:	686c      	ldr	r4, [r5, #4]
 800af96:	69a3      	ldr	r3, [r4, #24]
 800af98:	60a3      	str	r3, [r4, #8]
 800af9a:	89a3      	ldrh	r3, [r4, #12]
 800af9c:	071a      	lsls	r2, r3, #28
 800af9e:	d52f      	bpl.n	800b000 <__swbuf_r+0x84>
 800afa0:	6923      	ldr	r3, [r4, #16]
 800afa2:	b36b      	cbz	r3, 800b000 <__swbuf_r+0x84>
 800afa4:	6923      	ldr	r3, [r4, #16]
 800afa6:	6820      	ldr	r0, [r4, #0]
 800afa8:	1ac0      	subs	r0, r0, r3
 800afaa:	6963      	ldr	r3, [r4, #20]
 800afac:	b2f6      	uxtb	r6, r6
 800afae:	4283      	cmp	r3, r0
 800afb0:	4637      	mov	r7, r6
 800afb2:	dc04      	bgt.n	800afbe <__swbuf_r+0x42>
 800afb4:	4621      	mov	r1, r4
 800afb6:	4628      	mov	r0, r5
 800afb8:	f000 f92e 	bl	800b218 <_fflush_r>
 800afbc:	bb30      	cbnz	r0, 800b00c <__swbuf_r+0x90>
 800afbe:	68a3      	ldr	r3, [r4, #8]
 800afc0:	3b01      	subs	r3, #1
 800afc2:	60a3      	str	r3, [r4, #8]
 800afc4:	6823      	ldr	r3, [r4, #0]
 800afc6:	1c5a      	adds	r2, r3, #1
 800afc8:	6022      	str	r2, [r4, #0]
 800afca:	701e      	strb	r6, [r3, #0]
 800afcc:	6963      	ldr	r3, [r4, #20]
 800afce:	3001      	adds	r0, #1
 800afd0:	4283      	cmp	r3, r0
 800afd2:	d004      	beq.n	800afde <__swbuf_r+0x62>
 800afd4:	89a3      	ldrh	r3, [r4, #12]
 800afd6:	07db      	lsls	r3, r3, #31
 800afd8:	d506      	bpl.n	800afe8 <__swbuf_r+0x6c>
 800afda:	2e0a      	cmp	r6, #10
 800afdc:	d104      	bne.n	800afe8 <__swbuf_r+0x6c>
 800afde:	4621      	mov	r1, r4
 800afe0:	4628      	mov	r0, r5
 800afe2:	f000 f919 	bl	800b218 <_fflush_r>
 800afe6:	b988      	cbnz	r0, 800b00c <__swbuf_r+0x90>
 800afe8:	4638      	mov	r0, r7
 800afea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afec:	4b0a      	ldr	r3, [pc, #40]	; (800b018 <__swbuf_r+0x9c>)
 800afee:	429c      	cmp	r4, r3
 800aff0:	d101      	bne.n	800aff6 <__swbuf_r+0x7a>
 800aff2:	68ac      	ldr	r4, [r5, #8]
 800aff4:	e7cf      	b.n	800af96 <__swbuf_r+0x1a>
 800aff6:	4b09      	ldr	r3, [pc, #36]	; (800b01c <__swbuf_r+0xa0>)
 800aff8:	429c      	cmp	r4, r3
 800affa:	bf08      	it	eq
 800affc:	68ec      	ldreq	r4, [r5, #12]
 800affe:	e7ca      	b.n	800af96 <__swbuf_r+0x1a>
 800b000:	4621      	mov	r1, r4
 800b002:	4628      	mov	r0, r5
 800b004:	f000 f80c 	bl	800b020 <__swsetup_r>
 800b008:	2800      	cmp	r0, #0
 800b00a:	d0cb      	beq.n	800afa4 <__swbuf_r+0x28>
 800b00c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b010:	e7ea      	b.n	800afe8 <__swbuf_r+0x6c>
 800b012:	bf00      	nop
 800b014:	0800b964 	.word	0x0800b964
 800b018:	0800b984 	.word	0x0800b984
 800b01c:	0800b944 	.word	0x0800b944

0800b020 <__swsetup_r>:
 800b020:	4b32      	ldr	r3, [pc, #200]	; (800b0ec <__swsetup_r+0xcc>)
 800b022:	b570      	push	{r4, r5, r6, lr}
 800b024:	681d      	ldr	r5, [r3, #0]
 800b026:	4606      	mov	r6, r0
 800b028:	460c      	mov	r4, r1
 800b02a:	b125      	cbz	r5, 800b036 <__swsetup_r+0x16>
 800b02c:	69ab      	ldr	r3, [r5, #24]
 800b02e:	b913      	cbnz	r3, 800b036 <__swsetup_r+0x16>
 800b030:	4628      	mov	r0, r5
 800b032:	f000 f985 	bl	800b340 <__sinit>
 800b036:	4b2e      	ldr	r3, [pc, #184]	; (800b0f0 <__swsetup_r+0xd0>)
 800b038:	429c      	cmp	r4, r3
 800b03a:	d10f      	bne.n	800b05c <__swsetup_r+0x3c>
 800b03c:	686c      	ldr	r4, [r5, #4]
 800b03e:	89a3      	ldrh	r3, [r4, #12]
 800b040:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b044:	0719      	lsls	r1, r3, #28
 800b046:	d42c      	bmi.n	800b0a2 <__swsetup_r+0x82>
 800b048:	06dd      	lsls	r5, r3, #27
 800b04a:	d411      	bmi.n	800b070 <__swsetup_r+0x50>
 800b04c:	2309      	movs	r3, #9
 800b04e:	6033      	str	r3, [r6, #0]
 800b050:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b054:	81a3      	strh	r3, [r4, #12]
 800b056:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b05a:	e03e      	b.n	800b0da <__swsetup_r+0xba>
 800b05c:	4b25      	ldr	r3, [pc, #148]	; (800b0f4 <__swsetup_r+0xd4>)
 800b05e:	429c      	cmp	r4, r3
 800b060:	d101      	bne.n	800b066 <__swsetup_r+0x46>
 800b062:	68ac      	ldr	r4, [r5, #8]
 800b064:	e7eb      	b.n	800b03e <__swsetup_r+0x1e>
 800b066:	4b24      	ldr	r3, [pc, #144]	; (800b0f8 <__swsetup_r+0xd8>)
 800b068:	429c      	cmp	r4, r3
 800b06a:	bf08      	it	eq
 800b06c:	68ec      	ldreq	r4, [r5, #12]
 800b06e:	e7e6      	b.n	800b03e <__swsetup_r+0x1e>
 800b070:	0758      	lsls	r0, r3, #29
 800b072:	d512      	bpl.n	800b09a <__swsetup_r+0x7a>
 800b074:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b076:	b141      	cbz	r1, 800b08a <__swsetup_r+0x6a>
 800b078:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b07c:	4299      	cmp	r1, r3
 800b07e:	d002      	beq.n	800b086 <__swsetup_r+0x66>
 800b080:	4630      	mov	r0, r6
 800b082:	f7ff fac9 	bl	800a618 <_free_r>
 800b086:	2300      	movs	r3, #0
 800b088:	6363      	str	r3, [r4, #52]	; 0x34
 800b08a:	89a3      	ldrh	r3, [r4, #12]
 800b08c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b090:	81a3      	strh	r3, [r4, #12]
 800b092:	2300      	movs	r3, #0
 800b094:	6063      	str	r3, [r4, #4]
 800b096:	6923      	ldr	r3, [r4, #16]
 800b098:	6023      	str	r3, [r4, #0]
 800b09a:	89a3      	ldrh	r3, [r4, #12]
 800b09c:	f043 0308 	orr.w	r3, r3, #8
 800b0a0:	81a3      	strh	r3, [r4, #12]
 800b0a2:	6923      	ldr	r3, [r4, #16]
 800b0a4:	b94b      	cbnz	r3, 800b0ba <__swsetup_r+0x9a>
 800b0a6:	89a3      	ldrh	r3, [r4, #12]
 800b0a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b0ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0b0:	d003      	beq.n	800b0ba <__swsetup_r+0x9a>
 800b0b2:	4621      	mov	r1, r4
 800b0b4:	4630      	mov	r0, r6
 800b0b6:	f000 fa09 	bl	800b4cc <__smakebuf_r>
 800b0ba:	89a0      	ldrh	r0, [r4, #12]
 800b0bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b0c0:	f010 0301 	ands.w	r3, r0, #1
 800b0c4:	d00a      	beq.n	800b0dc <__swsetup_r+0xbc>
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	60a3      	str	r3, [r4, #8]
 800b0ca:	6963      	ldr	r3, [r4, #20]
 800b0cc:	425b      	negs	r3, r3
 800b0ce:	61a3      	str	r3, [r4, #24]
 800b0d0:	6923      	ldr	r3, [r4, #16]
 800b0d2:	b943      	cbnz	r3, 800b0e6 <__swsetup_r+0xc6>
 800b0d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b0d8:	d1ba      	bne.n	800b050 <__swsetup_r+0x30>
 800b0da:	bd70      	pop	{r4, r5, r6, pc}
 800b0dc:	0781      	lsls	r1, r0, #30
 800b0de:	bf58      	it	pl
 800b0e0:	6963      	ldrpl	r3, [r4, #20]
 800b0e2:	60a3      	str	r3, [r4, #8]
 800b0e4:	e7f4      	b.n	800b0d0 <__swsetup_r+0xb0>
 800b0e6:	2000      	movs	r0, #0
 800b0e8:	e7f7      	b.n	800b0da <__swsetup_r+0xba>
 800b0ea:	bf00      	nop
 800b0ec:	20000104 	.word	0x20000104
 800b0f0:	0800b964 	.word	0x0800b964
 800b0f4:	0800b984 	.word	0x0800b984
 800b0f8:	0800b944 	.word	0x0800b944

0800b0fc <abort>:
 800b0fc:	b508      	push	{r3, lr}
 800b0fe:	2006      	movs	r0, #6
 800b100:	f000 fa4c 	bl	800b59c <raise>
 800b104:	2001      	movs	r0, #1
 800b106:	f7ff f8c3 	bl	800a290 <_exit>
	...

0800b10c <__sflush_r>:
 800b10c:	898a      	ldrh	r2, [r1, #12]
 800b10e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b112:	4605      	mov	r5, r0
 800b114:	0710      	lsls	r0, r2, #28
 800b116:	460c      	mov	r4, r1
 800b118:	d458      	bmi.n	800b1cc <__sflush_r+0xc0>
 800b11a:	684b      	ldr	r3, [r1, #4]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	dc05      	bgt.n	800b12c <__sflush_r+0x20>
 800b120:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b122:	2b00      	cmp	r3, #0
 800b124:	dc02      	bgt.n	800b12c <__sflush_r+0x20>
 800b126:	2000      	movs	r0, #0
 800b128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b12c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b12e:	2e00      	cmp	r6, #0
 800b130:	d0f9      	beq.n	800b126 <__sflush_r+0x1a>
 800b132:	2300      	movs	r3, #0
 800b134:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b138:	682f      	ldr	r7, [r5, #0]
 800b13a:	602b      	str	r3, [r5, #0]
 800b13c:	d032      	beq.n	800b1a4 <__sflush_r+0x98>
 800b13e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b140:	89a3      	ldrh	r3, [r4, #12]
 800b142:	075a      	lsls	r2, r3, #29
 800b144:	d505      	bpl.n	800b152 <__sflush_r+0x46>
 800b146:	6863      	ldr	r3, [r4, #4]
 800b148:	1ac0      	subs	r0, r0, r3
 800b14a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b14c:	b10b      	cbz	r3, 800b152 <__sflush_r+0x46>
 800b14e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b150:	1ac0      	subs	r0, r0, r3
 800b152:	2300      	movs	r3, #0
 800b154:	4602      	mov	r2, r0
 800b156:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b158:	6a21      	ldr	r1, [r4, #32]
 800b15a:	4628      	mov	r0, r5
 800b15c:	47b0      	blx	r6
 800b15e:	1c43      	adds	r3, r0, #1
 800b160:	89a3      	ldrh	r3, [r4, #12]
 800b162:	d106      	bne.n	800b172 <__sflush_r+0x66>
 800b164:	6829      	ldr	r1, [r5, #0]
 800b166:	291d      	cmp	r1, #29
 800b168:	d82c      	bhi.n	800b1c4 <__sflush_r+0xb8>
 800b16a:	4a2a      	ldr	r2, [pc, #168]	; (800b214 <__sflush_r+0x108>)
 800b16c:	40ca      	lsrs	r2, r1
 800b16e:	07d6      	lsls	r6, r2, #31
 800b170:	d528      	bpl.n	800b1c4 <__sflush_r+0xb8>
 800b172:	2200      	movs	r2, #0
 800b174:	6062      	str	r2, [r4, #4]
 800b176:	04d9      	lsls	r1, r3, #19
 800b178:	6922      	ldr	r2, [r4, #16]
 800b17a:	6022      	str	r2, [r4, #0]
 800b17c:	d504      	bpl.n	800b188 <__sflush_r+0x7c>
 800b17e:	1c42      	adds	r2, r0, #1
 800b180:	d101      	bne.n	800b186 <__sflush_r+0x7a>
 800b182:	682b      	ldr	r3, [r5, #0]
 800b184:	b903      	cbnz	r3, 800b188 <__sflush_r+0x7c>
 800b186:	6560      	str	r0, [r4, #84]	; 0x54
 800b188:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b18a:	602f      	str	r7, [r5, #0]
 800b18c:	2900      	cmp	r1, #0
 800b18e:	d0ca      	beq.n	800b126 <__sflush_r+0x1a>
 800b190:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b194:	4299      	cmp	r1, r3
 800b196:	d002      	beq.n	800b19e <__sflush_r+0x92>
 800b198:	4628      	mov	r0, r5
 800b19a:	f7ff fa3d 	bl	800a618 <_free_r>
 800b19e:	2000      	movs	r0, #0
 800b1a0:	6360      	str	r0, [r4, #52]	; 0x34
 800b1a2:	e7c1      	b.n	800b128 <__sflush_r+0x1c>
 800b1a4:	6a21      	ldr	r1, [r4, #32]
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	4628      	mov	r0, r5
 800b1aa:	47b0      	blx	r6
 800b1ac:	1c41      	adds	r1, r0, #1
 800b1ae:	d1c7      	bne.n	800b140 <__sflush_r+0x34>
 800b1b0:	682b      	ldr	r3, [r5, #0]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d0c4      	beq.n	800b140 <__sflush_r+0x34>
 800b1b6:	2b1d      	cmp	r3, #29
 800b1b8:	d001      	beq.n	800b1be <__sflush_r+0xb2>
 800b1ba:	2b16      	cmp	r3, #22
 800b1bc:	d101      	bne.n	800b1c2 <__sflush_r+0xb6>
 800b1be:	602f      	str	r7, [r5, #0]
 800b1c0:	e7b1      	b.n	800b126 <__sflush_r+0x1a>
 800b1c2:	89a3      	ldrh	r3, [r4, #12]
 800b1c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1c8:	81a3      	strh	r3, [r4, #12]
 800b1ca:	e7ad      	b.n	800b128 <__sflush_r+0x1c>
 800b1cc:	690f      	ldr	r7, [r1, #16]
 800b1ce:	2f00      	cmp	r7, #0
 800b1d0:	d0a9      	beq.n	800b126 <__sflush_r+0x1a>
 800b1d2:	0793      	lsls	r3, r2, #30
 800b1d4:	680e      	ldr	r6, [r1, #0]
 800b1d6:	bf08      	it	eq
 800b1d8:	694b      	ldreq	r3, [r1, #20]
 800b1da:	600f      	str	r7, [r1, #0]
 800b1dc:	bf18      	it	ne
 800b1de:	2300      	movne	r3, #0
 800b1e0:	eba6 0807 	sub.w	r8, r6, r7
 800b1e4:	608b      	str	r3, [r1, #8]
 800b1e6:	f1b8 0f00 	cmp.w	r8, #0
 800b1ea:	dd9c      	ble.n	800b126 <__sflush_r+0x1a>
 800b1ec:	6a21      	ldr	r1, [r4, #32]
 800b1ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b1f0:	4643      	mov	r3, r8
 800b1f2:	463a      	mov	r2, r7
 800b1f4:	4628      	mov	r0, r5
 800b1f6:	47b0      	blx	r6
 800b1f8:	2800      	cmp	r0, #0
 800b1fa:	dc06      	bgt.n	800b20a <__sflush_r+0xfe>
 800b1fc:	89a3      	ldrh	r3, [r4, #12]
 800b1fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b202:	81a3      	strh	r3, [r4, #12]
 800b204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b208:	e78e      	b.n	800b128 <__sflush_r+0x1c>
 800b20a:	4407      	add	r7, r0
 800b20c:	eba8 0800 	sub.w	r8, r8, r0
 800b210:	e7e9      	b.n	800b1e6 <__sflush_r+0xda>
 800b212:	bf00      	nop
 800b214:	20400001 	.word	0x20400001

0800b218 <_fflush_r>:
 800b218:	b538      	push	{r3, r4, r5, lr}
 800b21a:	690b      	ldr	r3, [r1, #16]
 800b21c:	4605      	mov	r5, r0
 800b21e:	460c      	mov	r4, r1
 800b220:	b913      	cbnz	r3, 800b228 <_fflush_r+0x10>
 800b222:	2500      	movs	r5, #0
 800b224:	4628      	mov	r0, r5
 800b226:	bd38      	pop	{r3, r4, r5, pc}
 800b228:	b118      	cbz	r0, 800b232 <_fflush_r+0x1a>
 800b22a:	6983      	ldr	r3, [r0, #24]
 800b22c:	b90b      	cbnz	r3, 800b232 <_fflush_r+0x1a>
 800b22e:	f000 f887 	bl	800b340 <__sinit>
 800b232:	4b14      	ldr	r3, [pc, #80]	; (800b284 <_fflush_r+0x6c>)
 800b234:	429c      	cmp	r4, r3
 800b236:	d11b      	bne.n	800b270 <_fflush_r+0x58>
 800b238:	686c      	ldr	r4, [r5, #4]
 800b23a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d0ef      	beq.n	800b222 <_fflush_r+0xa>
 800b242:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b244:	07d0      	lsls	r0, r2, #31
 800b246:	d404      	bmi.n	800b252 <_fflush_r+0x3a>
 800b248:	0599      	lsls	r1, r3, #22
 800b24a:	d402      	bmi.n	800b252 <_fflush_r+0x3a>
 800b24c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b24e:	f000 f915 	bl	800b47c <__retarget_lock_acquire_recursive>
 800b252:	4628      	mov	r0, r5
 800b254:	4621      	mov	r1, r4
 800b256:	f7ff ff59 	bl	800b10c <__sflush_r>
 800b25a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b25c:	07da      	lsls	r2, r3, #31
 800b25e:	4605      	mov	r5, r0
 800b260:	d4e0      	bmi.n	800b224 <_fflush_r+0xc>
 800b262:	89a3      	ldrh	r3, [r4, #12]
 800b264:	059b      	lsls	r3, r3, #22
 800b266:	d4dd      	bmi.n	800b224 <_fflush_r+0xc>
 800b268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b26a:	f000 f908 	bl	800b47e <__retarget_lock_release_recursive>
 800b26e:	e7d9      	b.n	800b224 <_fflush_r+0xc>
 800b270:	4b05      	ldr	r3, [pc, #20]	; (800b288 <_fflush_r+0x70>)
 800b272:	429c      	cmp	r4, r3
 800b274:	d101      	bne.n	800b27a <_fflush_r+0x62>
 800b276:	68ac      	ldr	r4, [r5, #8]
 800b278:	e7df      	b.n	800b23a <_fflush_r+0x22>
 800b27a:	4b04      	ldr	r3, [pc, #16]	; (800b28c <_fflush_r+0x74>)
 800b27c:	429c      	cmp	r4, r3
 800b27e:	bf08      	it	eq
 800b280:	68ec      	ldreq	r4, [r5, #12]
 800b282:	e7da      	b.n	800b23a <_fflush_r+0x22>
 800b284:	0800b964 	.word	0x0800b964
 800b288:	0800b984 	.word	0x0800b984
 800b28c:	0800b944 	.word	0x0800b944

0800b290 <std>:
 800b290:	2300      	movs	r3, #0
 800b292:	b510      	push	{r4, lr}
 800b294:	4604      	mov	r4, r0
 800b296:	e9c0 3300 	strd	r3, r3, [r0]
 800b29a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b29e:	6083      	str	r3, [r0, #8]
 800b2a0:	8181      	strh	r1, [r0, #12]
 800b2a2:	6643      	str	r3, [r0, #100]	; 0x64
 800b2a4:	81c2      	strh	r2, [r0, #14]
 800b2a6:	6183      	str	r3, [r0, #24]
 800b2a8:	4619      	mov	r1, r3
 800b2aa:	2208      	movs	r2, #8
 800b2ac:	305c      	adds	r0, #92	; 0x5c
 800b2ae:	f7ff f9ab 	bl	800a608 <memset>
 800b2b2:	4b05      	ldr	r3, [pc, #20]	; (800b2c8 <std+0x38>)
 800b2b4:	6263      	str	r3, [r4, #36]	; 0x24
 800b2b6:	4b05      	ldr	r3, [pc, #20]	; (800b2cc <std+0x3c>)
 800b2b8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b2ba:	4b05      	ldr	r3, [pc, #20]	; (800b2d0 <std+0x40>)
 800b2bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b2be:	4b05      	ldr	r3, [pc, #20]	; (800b2d4 <std+0x44>)
 800b2c0:	6224      	str	r4, [r4, #32]
 800b2c2:	6323      	str	r3, [r4, #48]	; 0x30
 800b2c4:	bd10      	pop	{r4, pc}
 800b2c6:	bf00      	nop
 800b2c8:	0800b5d5 	.word	0x0800b5d5
 800b2cc:	0800b5f7 	.word	0x0800b5f7
 800b2d0:	0800b62f 	.word	0x0800b62f
 800b2d4:	0800b653 	.word	0x0800b653

0800b2d8 <_cleanup_r>:
 800b2d8:	4901      	ldr	r1, [pc, #4]	; (800b2e0 <_cleanup_r+0x8>)
 800b2da:	f000 b8af 	b.w	800b43c <_fwalk_reent>
 800b2de:	bf00      	nop
 800b2e0:	0800b219 	.word	0x0800b219

0800b2e4 <__sfmoreglue>:
 800b2e4:	b570      	push	{r4, r5, r6, lr}
 800b2e6:	2268      	movs	r2, #104	; 0x68
 800b2e8:	1e4d      	subs	r5, r1, #1
 800b2ea:	4355      	muls	r5, r2
 800b2ec:	460e      	mov	r6, r1
 800b2ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b2f2:	f7ff f9fd 	bl	800a6f0 <_malloc_r>
 800b2f6:	4604      	mov	r4, r0
 800b2f8:	b140      	cbz	r0, 800b30c <__sfmoreglue+0x28>
 800b2fa:	2100      	movs	r1, #0
 800b2fc:	e9c0 1600 	strd	r1, r6, [r0]
 800b300:	300c      	adds	r0, #12
 800b302:	60a0      	str	r0, [r4, #8]
 800b304:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b308:	f7ff f97e 	bl	800a608 <memset>
 800b30c:	4620      	mov	r0, r4
 800b30e:	bd70      	pop	{r4, r5, r6, pc}

0800b310 <__sfp_lock_acquire>:
 800b310:	4801      	ldr	r0, [pc, #4]	; (800b318 <__sfp_lock_acquire+0x8>)
 800b312:	f000 b8b3 	b.w	800b47c <__retarget_lock_acquire_recursive>
 800b316:	bf00      	nop
 800b318:	20002edd 	.word	0x20002edd

0800b31c <__sfp_lock_release>:
 800b31c:	4801      	ldr	r0, [pc, #4]	; (800b324 <__sfp_lock_release+0x8>)
 800b31e:	f000 b8ae 	b.w	800b47e <__retarget_lock_release_recursive>
 800b322:	bf00      	nop
 800b324:	20002edd 	.word	0x20002edd

0800b328 <__sinit_lock_acquire>:
 800b328:	4801      	ldr	r0, [pc, #4]	; (800b330 <__sinit_lock_acquire+0x8>)
 800b32a:	f000 b8a7 	b.w	800b47c <__retarget_lock_acquire_recursive>
 800b32e:	bf00      	nop
 800b330:	20002ede 	.word	0x20002ede

0800b334 <__sinit_lock_release>:
 800b334:	4801      	ldr	r0, [pc, #4]	; (800b33c <__sinit_lock_release+0x8>)
 800b336:	f000 b8a2 	b.w	800b47e <__retarget_lock_release_recursive>
 800b33a:	bf00      	nop
 800b33c:	20002ede 	.word	0x20002ede

0800b340 <__sinit>:
 800b340:	b510      	push	{r4, lr}
 800b342:	4604      	mov	r4, r0
 800b344:	f7ff fff0 	bl	800b328 <__sinit_lock_acquire>
 800b348:	69a3      	ldr	r3, [r4, #24]
 800b34a:	b11b      	cbz	r3, 800b354 <__sinit+0x14>
 800b34c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b350:	f7ff bff0 	b.w	800b334 <__sinit_lock_release>
 800b354:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b358:	6523      	str	r3, [r4, #80]	; 0x50
 800b35a:	4b13      	ldr	r3, [pc, #76]	; (800b3a8 <__sinit+0x68>)
 800b35c:	4a13      	ldr	r2, [pc, #76]	; (800b3ac <__sinit+0x6c>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	62a2      	str	r2, [r4, #40]	; 0x28
 800b362:	42a3      	cmp	r3, r4
 800b364:	bf04      	itt	eq
 800b366:	2301      	moveq	r3, #1
 800b368:	61a3      	streq	r3, [r4, #24]
 800b36a:	4620      	mov	r0, r4
 800b36c:	f000 f820 	bl	800b3b0 <__sfp>
 800b370:	6060      	str	r0, [r4, #4]
 800b372:	4620      	mov	r0, r4
 800b374:	f000 f81c 	bl	800b3b0 <__sfp>
 800b378:	60a0      	str	r0, [r4, #8]
 800b37a:	4620      	mov	r0, r4
 800b37c:	f000 f818 	bl	800b3b0 <__sfp>
 800b380:	2200      	movs	r2, #0
 800b382:	60e0      	str	r0, [r4, #12]
 800b384:	2104      	movs	r1, #4
 800b386:	6860      	ldr	r0, [r4, #4]
 800b388:	f7ff ff82 	bl	800b290 <std>
 800b38c:	68a0      	ldr	r0, [r4, #8]
 800b38e:	2201      	movs	r2, #1
 800b390:	2109      	movs	r1, #9
 800b392:	f7ff ff7d 	bl	800b290 <std>
 800b396:	68e0      	ldr	r0, [r4, #12]
 800b398:	2202      	movs	r2, #2
 800b39a:	2112      	movs	r1, #18
 800b39c:	f7ff ff78 	bl	800b290 <std>
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	61a3      	str	r3, [r4, #24]
 800b3a4:	e7d2      	b.n	800b34c <__sinit+0xc>
 800b3a6:	bf00      	nop
 800b3a8:	0800b85c 	.word	0x0800b85c
 800b3ac:	0800b2d9 	.word	0x0800b2d9

0800b3b0 <__sfp>:
 800b3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3b2:	4607      	mov	r7, r0
 800b3b4:	f7ff ffac 	bl	800b310 <__sfp_lock_acquire>
 800b3b8:	4b1e      	ldr	r3, [pc, #120]	; (800b434 <__sfp+0x84>)
 800b3ba:	681e      	ldr	r6, [r3, #0]
 800b3bc:	69b3      	ldr	r3, [r6, #24]
 800b3be:	b913      	cbnz	r3, 800b3c6 <__sfp+0x16>
 800b3c0:	4630      	mov	r0, r6
 800b3c2:	f7ff ffbd 	bl	800b340 <__sinit>
 800b3c6:	3648      	adds	r6, #72	; 0x48
 800b3c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b3cc:	3b01      	subs	r3, #1
 800b3ce:	d503      	bpl.n	800b3d8 <__sfp+0x28>
 800b3d0:	6833      	ldr	r3, [r6, #0]
 800b3d2:	b30b      	cbz	r3, 800b418 <__sfp+0x68>
 800b3d4:	6836      	ldr	r6, [r6, #0]
 800b3d6:	e7f7      	b.n	800b3c8 <__sfp+0x18>
 800b3d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b3dc:	b9d5      	cbnz	r5, 800b414 <__sfp+0x64>
 800b3de:	4b16      	ldr	r3, [pc, #88]	; (800b438 <__sfp+0x88>)
 800b3e0:	60e3      	str	r3, [r4, #12]
 800b3e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b3e6:	6665      	str	r5, [r4, #100]	; 0x64
 800b3e8:	f000 f847 	bl	800b47a <__retarget_lock_init_recursive>
 800b3ec:	f7ff ff96 	bl	800b31c <__sfp_lock_release>
 800b3f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b3f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b3f8:	6025      	str	r5, [r4, #0]
 800b3fa:	61a5      	str	r5, [r4, #24]
 800b3fc:	2208      	movs	r2, #8
 800b3fe:	4629      	mov	r1, r5
 800b400:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b404:	f7ff f900 	bl	800a608 <memset>
 800b408:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b40c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b410:	4620      	mov	r0, r4
 800b412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b414:	3468      	adds	r4, #104	; 0x68
 800b416:	e7d9      	b.n	800b3cc <__sfp+0x1c>
 800b418:	2104      	movs	r1, #4
 800b41a:	4638      	mov	r0, r7
 800b41c:	f7ff ff62 	bl	800b2e4 <__sfmoreglue>
 800b420:	4604      	mov	r4, r0
 800b422:	6030      	str	r0, [r6, #0]
 800b424:	2800      	cmp	r0, #0
 800b426:	d1d5      	bne.n	800b3d4 <__sfp+0x24>
 800b428:	f7ff ff78 	bl	800b31c <__sfp_lock_release>
 800b42c:	230c      	movs	r3, #12
 800b42e:	603b      	str	r3, [r7, #0]
 800b430:	e7ee      	b.n	800b410 <__sfp+0x60>
 800b432:	bf00      	nop
 800b434:	0800b85c 	.word	0x0800b85c
 800b438:	ffff0001 	.word	0xffff0001

0800b43c <_fwalk_reent>:
 800b43c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b440:	4606      	mov	r6, r0
 800b442:	4688      	mov	r8, r1
 800b444:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b448:	2700      	movs	r7, #0
 800b44a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b44e:	f1b9 0901 	subs.w	r9, r9, #1
 800b452:	d505      	bpl.n	800b460 <_fwalk_reent+0x24>
 800b454:	6824      	ldr	r4, [r4, #0]
 800b456:	2c00      	cmp	r4, #0
 800b458:	d1f7      	bne.n	800b44a <_fwalk_reent+0xe>
 800b45a:	4638      	mov	r0, r7
 800b45c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b460:	89ab      	ldrh	r3, [r5, #12]
 800b462:	2b01      	cmp	r3, #1
 800b464:	d907      	bls.n	800b476 <_fwalk_reent+0x3a>
 800b466:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b46a:	3301      	adds	r3, #1
 800b46c:	d003      	beq.n	800b476 <_fwalk_reent+0x3a>
 800b46e:	4629      	mov	r1, r5
 800b470:	4630      	mov	r0, r6
 800b472:	47c0      	blx	r8
 800b474:	4307      	orrs	r7, r0
 800b476:	3568      	adds	r5, #104	; 0x68
 800b478:	e7e9      	b.n	800b44e <_fwalk_reent+0x12>

0800b47a <__retarget_lock_init_recursive>:
 800b47a:	4770      	bx	lr

0800b47c <__retarget_lock_acquire_recursive>:
 800b47c:	4770      	bx	lr

0800b47e <__retarget_lock_release_recursive>:
 800b47e:	4770      	bx	lr

0800b480 <__swhatbuf_r>:
 800b480:	b570      	push	{r4, r5, r6, lr}
 800b482:	460e      	mov	r6, r1
 800b484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b488:	2900      	cmp	r1, #0
 800b48a:	b096      	sub	sp, #88	; 0x58
 800b48c:	4614      	mov	r4, r2
 800b48e:	461d      	mov	r5, r3
 800b490:	da08      	bge.n	800b4a4 <__swhatbuf_r+0x24>
 800b492:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b496:	2200      	movs	r2, #0
 800b498:	602a      	str	r2, [r5, #0]
 800b49a:	061a      	lsls	r2, r3, #24
 800b49c:	d410      	bmi.n	800b4c0 <__swhatbuf_r+0x40>
 800b49e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4a2:	e00e      	b.n	800b4c2 <__swhatbuf_r+0x42>
 800b4a4:	466a      	mov	r2, sp
 800b4a6:	f000 f8fb 	bl	800b6a0 <_fstat_r>
 800b4aa:	2800      	cmp	r0, #0
 800b4ac:	dbf1      	blt.n	800b492 <__swhatbuf_r+0x12>
 800b4ae:	9a01      	ldr	r2, [sp, #4]
 800b4b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b4b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b4b8:	425a      	negs	r2, r3
 800b4ba:	415a      	adcs	r2, r3
 800b4bc:	602a      	str	r2, [r5, #0]
 800b4be:	e7ee      	b.n	800b49e <__swhatbuf_r+0x1e>
 800b4c0:	2340      	movs	r3, #64	; 0x40
 800b4c2:	2000      	movs	r0, #0
 800b4c4:	6023      	str	r3, [r4, #0]
 800b4c6:	b016      	add	sp, #88	; 0x58
 800b4c8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b4cc <__smakebuf_r>:
 800b4cc:	898b      	ldrh	r3, [r1, #12]
 800b4ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b4d0:	079d      	lsls	r5, r3, #30
 800b4d2:	4606      	mov	r6, r0
 800b4d4:	460c      	mov	r4, r1
 800b4d6:	d507      	bpl.n	800b4e8 <__smakebuf_r+0x1c>
 800b4d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b4dc:	6023      	str	r3, [r4, #0]
 800b4de:	6123      	str	r3, [r4, #16]
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	6163      	str	r3, [r4, #20]
 800b4e4:	b002      	add	sp, #8
 800b4e6:	bd70      	pop	{r4, r5, r6, pc}
 800b4e8:	ab01      	add	r3, sp, #4
 800b4ea:	466a      	mov	r2, sp
 800b4ec:	f7ff ffc8 	bl	800b480 <__swhatbuf_r>
 800b4f0:	9900      	ldr	r1, [sp, #0]
 800b4f2:	4605      	mov	r5, r0
 800b4f4:	4630      	mov	r0, r6
 800b4f6:	f7ff f8fb 	bl	800a6f0 <_malloc_r>
 800b4fa:	b948      	cbnz	r0, 800b510 <__smakebuf_r+0x44>
 800b4fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b500:	059a      	lsls	r2, r3, #22
 800b502:	d4ef      	bmi.n	800b4e4 <__smakebuf_r+0x18>
 800b504:	f023 0303 	bic.w	r3, r3, #3
 800b508:	f043 0302 	orr.w	r3, r3, #2
 800b50c:	81a3      	strh	r3, [r4, #12]
 800b50e:	e7e3      	b.n	800b4d8 <__smakebuf_r+0xc>
 800b510:	4b0d      	ldr	r3, [pc, #52]	; (800b548 <__smakebuf_r+0x7c>)
 800b512:	62b3      	str	r3, [r6, #40]	; 0x28
 800b514:	89a3      	ldrh	r3, [r4, #12]
 800b516:	6020      	str	r0, [r4, #0]
 800b518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b51c:	81a3      	strh	r3, [r4, #12]
 800b51e:	9b00      	ldr	r3, [sp, #0]
 800b520:	6163      	str	r3, [r4, #20]
 800b522:	9b01      	ldr	r3, [sp, #4]
 800b524:	6120      	str	r0, [r4, #16]
 800b526:	b15b      	cbz	r3, 800b540 <__smakebuf_r+0x74>
 800b528:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b52c:	4630      	mov	r0, r6
 800b52e:	f000 f8c9 	bl	800b6c4 <_isatty_r>
 800b532:	b128      	cbz	r0, 800b540 <__smakebuf_r+0x74>
 800b534:	89a3      	ldrh	r3, [r4, #12]
 800b536:	f023 0303 	bic.w	r3, r3, #3
 800b53a:	f043 0301 	orr.w	r3, r3, #1
 800b53e:	81a3      	strh	r3, [r4, #12]
 800b540:	89a0      	ldrh	r0, [r4, #12]
 800b542:	4305      	orrs	r5, r0
 800b544:	81a5      	strh	r5, [r4, #12]
 800b546:	e7cd      	b.n	800b4e4 <__smakebuf_r+0x18>
 800b548:	0800b2d9 	.word	0x0800b2d9

0800b54c <_raise_r>:
 800b54c:	291f      	cmp	r1, #31
 800b54e:	b538      	push	{r3, r4, r5, lr}
 800b550:	4604      	mov	r4, r0
 800b552:	460d      	mov	r5, r1
 800b554:	d904      	bls.n	800b560 <_raise_r+0x14>
 800b556:	2316      	movs	r3, #22
 800b558:	6003      	str	r3, [r0, #0]
 800b55a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b55e:	bd38      	pop	{r3, r4, r5, pc}
 800b560:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b562:	b112      	cbz	r2, 800b56a <_raise_r+0x1e>
 800b564:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b568:	b94b      	cbnz	r3, 800b57e <_raise_r+0x32>
 800b56a:	4620      	mov	r0, r4
 800b56c:	f000 f830 	bl	800b5d0 <_getpid_r>
 800b570:	462a      	mov	r2, r5
 800b572:	4601      	mov	r1, r0
 800b574:	4620      	mov	r0, r4
 800b576:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b57a:	f000 b817 	b.w	800b5ac <_kill_r>
 800b57e:	2b01      	cmp	r3, #1
 800b580:	d00a      	beq.n	800b598 <_raise_r+0x4c>
 800b582:	1c59      	adds	r1, r3, #1
 800b584:	d103      	bne.n	800b58e <_raise_r+0x42>
 800b586:	2316      	movs	r3, #22
 800b588:	6003      	str	r3, [r0, #0]
 800b58a:	2001      	movs	r0, #1
 800b58c:	e7e7      	b.n	800b55e <_raise_r+0x12>
 800b58e:	2400      	movs	r4, #0
 800b590:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b594:	4628      	mov	r0, r5
 800b596:	4798      	blx	r3
 800b598:	2000      	movs	r0, #0
 800b59a:	e7e0      	b.n	800b55e <_raise_r+0x12>

0800b59c <raise>:
 800b59c:	4b02      	ldr	r3, [pc, #8]	; (800b5a8 <raise+0xc>)
 800b59e:	4601      	mov	r1, r0
 800b5a0:	6818      	ldr	r0, [r3, #0]
 800b5a2:	f7ff bfd3 	b.w	800b54c <_raise_r>
 800b5a6:	bf00      	nop
 800b5a8:	20000104 	.word	0x20000104

0800b5ac <_kill_r>:
 800b5ac:	b538      	push	{r3, r4, r5, lr}
 800b5ae:	4d07      	ldr	r5, [pc, #28]	; (800b5cc <_kill_r+0x20>)
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	4604      	mov	r4, r0
 800b5b4:	4608      	mov	r0, r1
 800b5b6:	4611      	mov	r1, r2
 800b5b8:	602b      	str	r3, [r5, #0]
 800b5ba:	f7fe fe59 	bl	800a270 <_kill>
 800b5be:	1c43      	adds	r3, r0, #1
 800b5c0:	d102      	bne.n	800b5c8 <_kill_r+0x1c>
 800b5c2:	682b      	ldr	r3, [r5, #0]
 800b5c4:	b103      	cbz	r3, 800b5c8 <_kill_r+0x1c>
 800b5c6:	6023      	str	r3, [r4, #0]
 800b5c8:	bd38      	pop	{r3, r4, r5, pc}
 800b5ca:	bf00      	nop
 800b5cc:	20002ed8 	.word	0x20002ed8

0800b5d0 <_getpid_r>:
 800b5d0:	f7fe be46 	b.w	800a260 <_getpid>

0800b5d4 <__sread>:
 800b5d4:	b510      	push	{r4, lr}
 800b5d6:	460c      	mov	r4, r1
 800b5d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5dc:	f000 f894 	bl	800b708 <_read_r>
 800b5e0:	2800      	cmp	r0, #0
 800b5e2:	bfab      	itete	ge
 800b5e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b5e6:	89a3      	ldrhlt	r3, [r4, #12]
 800b5e8:	181b      	addge	r3, r3, r0
 800b5ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b5ee:	bfac      	ite	ge
 800b5f0:	6563      	strge	r3, [r4, #84]	; 0x54
 800b5f2:	81a3      	strhlt	r3, [r4, #12]
 800b5f4:	bd10      	pop	{r4, pc}

0800b5f6 <__swrite>:
 800b5f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5fa:	461f      	mov	r7, r3
 800b5fc:	898b      	ldrh	r3, [r1, #12]
 800b5fe:	05db      	lsls	r3, r3, #23
 800b600:	4605      	mov	r5, r0
 800b602:	460c      	mov	r4, r1
 800b604:	4616      	mov	r6, r2
 800b606:	d505      	bpl.n	800b614 <__swrite+0x1e>
 800b608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b60c:	2302      	movs	r3, #2
 800b60e:	2200      	movs	r2, #0
 800b610:	f000 f868 	bl	800b6e4 <_lseek_r>
 800b614:	89a3      	ldrh	r3, [r4, #12]
 800b616:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b61a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b61e:	81a3      	strh	r3, [r4, #12]
 800b620:	4632      	mov	r2, r6
 800b622:	463b      	mov	r3, r7
 800b624:	4628      	mov	r0, r5
 800b626:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b62a:	f000 b817 	b.w	800b65c <_write_r>

0800b62e <__sseek>:
 800b62e:	b510      	push	{r4, lr}
 800b630:	460c      	mov	r4, r1
 800b632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b636:	f000 f855 	bl	800b6e4 <_lseek_r>
 800b63a:	1c43      	adds	r3, r0, #1
 800b63c:	89a3      	ldrh	r3, [r4, #12]
 800b63e:	bf15      	itete	ne
 800b640:	6560      	strne	r0, [r4, #84]	; 0x54
 800b642:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b646:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b64a:	81a3      	strheq	r3, [r4, #12]
 800b64c:	bf18      	it	ne
 800b64e:	81a3      	strhne	r3, [r4, #12]
 800b650:	bd10      	pop	{r4, pc}

0800b652 <__sclose>:
 800b652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b656:	f000 b813 	b.w	800b680 <_close_r>
	...

0800b65c <_write_r>:
 800b65c:	b538      	push	{r3, r4, r5, lr}
 800b65e:	4d07      	ldr	r5, [pc, #28]	; (800b67c <_write_r+0x20>)
 800b660:	4604      	mov	r4, r0
 800b662:	4608      	mov	r0, r1
 800b664:	4611      	mov	r1, r2
 800b666:	2200      	movs	r2, #0
 800b668:	602a      	str	r2, [r5, #0]
 800b66a:	461a      	mov	r2, r3
 800b66c:	f7fe fe37 	bl	800a2de <_write>
 800b670:	1c43      	adds	r3, r0, #1
 800b672:	d102      	bne.n	800b67a <_write_r+0x1e>
 800b674:	682b      	ldr	r3, [r5, #0]
 800b676:	b103      	cbz	r3, 800b67a <_write_r+0x1e>
 800b678:	6023      	str	r3, [r4, #0]
 800b67a:	bd38      	pop	{r3, r4, r5, pc}
 800b67c:	20002ed8 	.word	0x20002ed8

0800b680 <_close_r>:
 800b680:	b538      	push	{r3, r4, r5, lr}
 800b682:	4d06      	ldr	r5, [pc, #24]	; (800b69c <_close_r+0x1c>)
 800b684:	2300      	movs	r3, #0
 800b686:	4604      	mov	r4, r0
 800b688:	4608      	mov	r0, r1
 800b68a:	602b      	str	r3, [r5, #0]
 800b68c:	f7fe fe43 	bl	800a316 <_close>
 800b690:	1c43      	adds	r3, r0, #1
 800b692:	d102      	bne.n	800b69a <_close_r+0x1a>
 800b694:	682b      	ldr	r3, [r5, #0]
 800b696:	b103      	cbz	r3, 800b69a <_close_r+0x1a>
 800b698:	6023      	str	r3, [r4, #0]
 800b69a:	bd38      	pop	{r3, r4, r5, pc}
 800b69c:	20002ed8 	.word	0x20002ed8

0800b6a0 <_fstat_r>:
 800b6a0:	b538      	push	{r3, r4, r5, lr}
 800b6a2:	4d07      	ldr	r5, [pc, #28]	; (800b6c0 <_fstat_r+0x20>)
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	4604      	mov	r4, r0
 800b6a8:	4608      	mov	r0, r1
 800b6aa:	4611      	mov	r1, r2
 800b6ac:	602b      	str	r3, [r5, #0]
 800b6ae:	f7fe fe3e 	bl	800a32e <_fstat>
 800b6b2:	1c43      	adds	r3, r0, #1
 800b6b4:	d102      	bne.n	800b6bc <_fstat_r+0x1c>
 800b6b6:	682b      	ldr	r3, [r5, #0]
 800b6b8:	b103      	cbz	r3, 800b6bc <_fstat_r+0x1c>
 800b6ba:	6023      	str	r3, [r4, #0]
 800b6bc:	bd38      	pop	{r3, r4, r5, pc}
 800b6be:	bf00      	nop
 800b6c0:	20002ed8 	.word	0x20002ed8

0800b6c4 <_isatty_r>:
 800b6c4:	b538      	push	{r3, r4, r5, lr}
 800b6c6:	4d06      	ldr	r5, [pc, #24]	; (800b6e0 <_isatty_r+0x1c>)
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	4604      	mov	r4, r0
 800b6cc:	4608      	mov	r0, r1
 800b6ce:	602b      	str	r3, [r5, #0]
 800b6d0:	f7fe fe3d 	bl	800a34e <_isatty>
 800b6d4:	1c43      	adds	r3, r0, #1
 800b6d6:	d102      	bne.n	800b6de <_isatty_r+0x1a>
 800b6d8:	682b      	ldr	r3, [r5, #0]
 800b6da:	b103      	cbz	r3, 800b6de <_isatty_r+0x1a>
 800b6dc:	6023      	str	r3, [r4, #0]
 800b6de:	bd38      	pop	{r3, r4, r5, pc}
 800b6e0:	20002ed8 	.word	0x20002ed8

0800b6e4 <_lseek_r>:
 800b6e4:	b538      	push	{r3, r4, r5, lr}
 800b6e6:	4d07      	ldr	r5, [pc, #28]	; (800b704 <_lseek_r+0x20>)
 800b6e8:	4604      	mov	r4, r0
 800b6ea:	4608      	mov	r0, r1
 800b6ec:	4611      	mov	r1, r2
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	602a      	str	r2, [r5, #0]
 800b6f2:	461a      	mov	r2, r3
 800b6f4:	f7fe fe36 	bl	800a364 <_lseek>
 800b6f8:	1c43      	adds	r3, r0, #1
 800b6fa:	d102      	bne.n	800b702 <_lseek_r+0x1e>
 800b6fc:	682b      	ldr	r3, [r5, #0]
 800b6fe:	b103      	cbz	r3, 800b702 <_lseek_r+0x1e>
 800b700:	6023      	str	r3, [r4, #0]
 800b702:	bd38      	pop	{r3, r4, r5, pc}
 800b704:	20002ed8 	.word	0x20002ed8

0800b708 <_read_r>:
 800b708:	b538      	push	{r3, r4, r5, lr}
 800b70a:	4d07      	ldr	r5, [pc, #28]	; (800b728 <_read_r+0x20>)
 800b70c:	4604      	mov	r4, r0
 800b70e:	4608      	mov	r0, r1
 800b710:	4611      	mov	r1, r2
 800b712:	2200      	movs	r2, #0
 800b714:	602a      	str	r2, [r5, #0]
 800b716:	461a      	mov	r2, r3
 800b718:	f7fe fdc4 	bl	800a2a4 <_read>
 800b71c:	1c43      	adds	r3, r0, #1
 800b71e:	d102      	bne.n	800b726 <_read_r+0x1e>
 800b720:	682b      	ldr	r3, [r5, #0]
 800b722:	b103      	cbz	r3, 800b726 <_read_r+0x1e>
 800b724:	6023      	str	r3, [r4, #0]
 800b726:	bd38      	pop	{r3, r4, r5, pc}
 800b728:	20002ed8 	.word	0x20002ed8

0800b72c <_gettimeofday>:
 800b72c:	4b02      	ldr	r3, [pc, #8]	; (800b738 <_gettimeofday+0xc>)
 800b72e:	2258      	movs	r2, #88	; 0x58
 800b730:	601a      	str	r2, [r3, #0]
 800b732:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b736:	4770      	bx	lr
 800b738:	20002ed8 	.word	0x20002ed8

0800b73c <_init>:
 800b73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b73e:	bf00      	nop
 800b740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b742:	bc08      	pop	{r3}
 800b744:	469e      	mov	lr, r3
 800b746:	4770      	bx	lr

0800b748 <_fini>:
 800b748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b74a:	bf00      	nop
 800b74c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b74e:	bc08      	pop	{r3}
 800b750:	469e      	mov	lr, r3
 800b752:	4770      	bx	lr
