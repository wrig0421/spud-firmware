
spudglo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcf0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  0800be80  0800be80  0001be80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c084  0800c084  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800c084  0800c084  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c084  0800c084  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c084  0800c084  0001c084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c088  0800c088  0001c088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  0800c08c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003c90  200000d0  0800c15c  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003d60  0800c15c  00023d60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e385  00000000  00000000  00020143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004cf5  00000000  00000000  0003e4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bd8  00000000  00000000  000431c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001606  00000000  00000000  00044d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029809  00000000  00000000  0004639e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023484  00000000  00000000  0006fba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f82ef  00000000  00000000  0009302b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007eb0  00000000  00000000  0018b31c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  001931cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d0 	.word	0x200000d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800be68 	.word	0x0800be68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d4 	.word	0x200000d4
 80001cc:	0800be68 	.word	0x0800be68

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <current_monitor_set>:
float g_absolute_max_current_ratio = 0.0f; // DO NOT EXCEED!
p_current_t gp_current_monitor_strip[NUM_STRIPS];


void current_monitor_set(float value)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value < g_absolute_max_current_ratio)
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <current_monitor_set+0x3c>)
 8000ab8:	edd3 7a00 	vldr	s15, [r3]
 8000abc:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ac0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ac8:	d503      	bpl.n	8000ad2 <current_monitor_set+0x26>
    {
        g_max_current_ratio = value;
 8000aca:	4a08      	ldr	r2, [pc, #32]	; (8000aec <current_monitor_set+0x40>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6013      	str	r3, [r2, #0]
    }
    else
    {
        g_max_current_ratio = g_absolute_max_current_ratio;
    }
}
 8000ad0:	e003      	b.n	8000ada <current_monitor_set+0x2e>
        g_max_current_ratio = g_absolute_max_current_ratio;
 8000ad2:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <current_monitor_set+0x3c>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a05      	ldr	r2, [pc, #20]	; (8000aec <current_monitor_set+0x40>)
 8000ad8:	6013      	str	r3, [r2, #0]
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	200000ec 	.word	0x200000ec
 8000aec:	20000000 	.word	0x20000000

08000af0 <current_monitor_ratio>:


float current_monitor_ratio(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
    return g_max_current_ratio;
 8000af4:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <current_monitor_ratio+0x18>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	ee07 3a90 	vmov	s15, r3
}
 8000afc:	eeb0 0a67 	vmov.f32	s0, s15
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	20000000 	.word	0x20000000

08000b0c <current_monitor_init>:


void current_monitor_init(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
    while ((g_max_current_ratio * ((float)CURRENT_MONITOR_MAX_CURRENT_PER_LED_MA / 1000) * NUM_LEDS) > (float)CURRENT_MONITOR_MAX_CURRENT_DRAW_A)
 8000b10:	e009      	b.n	8000b26 <current_monitor_init+0x1a>
    {
        g_max_current_ratio -= 0.05f;
 8000b12:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <current_monitor_init+0x64>)
 8000b14:	edd3 7a00 	vldr	s15, [r3]
 8000b18:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000b74 <current_monitor_init+0x68>
 8000b1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000b20:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <current_monitor_init+0x64>)
 8000b22:	edc3 7a00 	vstr	s15, [r3]
    while ((g_max_current_ratio * ((float)CURRENT_MONITOR_MAX_CURRENT_PER_LED_MA / 1000) * NUM_LEDS) > (float)CURRENT_MONITOR_MAX_CURRENT_DRAW_A)
 8000b26:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <current_monitor_init+0x64>)
 8000b28:	edd3 7a00 	vldr	s15, [r3]
 8000b2c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000b78 <current_monitor_init+0x6c>
 8000b30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b34:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000b7c <current_monitor_init+0x70>
 8000b38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b3c:	eeb2 7a03 	vmov.f32	s14, #35	; 0x41180000  9.5
 8000b40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b48:	dce3      	bgt.n	8000b12 <current_monitor_init+0x6>
    }
    if (g_max_current_ratio <= 0) while(1); // broken..
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <current_monitor_init+0x64>)
 8000b4c:	edd3 7a00 	vldr	s15, [r3]
 8000b50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b58:	d800      	bhi.n	8000b5c <current_monitor_init+0x50>
 8000b5a:	e7fe      	b.n	8000b5a <current_monitor_init+0x4e>
    g_absolute_max_current_ratio = g_max_current_ratio;
 8000b5c:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <current_monitor_init+0x64>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a07      	ldr	r2, [pc, #28]	; (8000b80 <current_monitor_init+0x74>)
 8000b62:	6013      	str	r3, [r2, #0]
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	20000000 	.word	0x20000000
 8000b74:	3d4ccccd 	.word	0x3d4ccccd
 8000b78:	3d23d70a 	.word	0x3d23d70a
 8000b7c:	440e0000 	.word	0x440e0000
 8000b80:	200000ec 	.word	0x200000ec

08000b84 <animate_led_show_strip>:
 * @brief   Write data stored in `gp_ws28128b_strip` array to the strip
 * @param   strip_mask - the strip to write to
 * @return  void
 */
void animate_led_show_strip(const strip_mask_t strip_mask)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	80fb      	strh	r3, [r7, #6]
    if (strip_mask & STRIP_BIT_1)
 8000b8e:	88fb      	ldrh	r3, [r7, #6]
 8000b90:	f003 0301 	and.w	r3, r3, #1
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <animate_led_show_strip+0x18>
    {
        ws2812b_show_strip_one();
 8000b98:	f001 ff0a 	bl	80029b0 <ws2812b_show_strip_one>
    {
        // STRIP_BIT_3
        ws2812b_show_strip_three();
    }
#endif
}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <animate_led_set_pixel>:


void animate_led_set_pixel(const strip_mask_t mask, const uint16_t pixel, const uint8_t red, const uint8_t green,
                           const uint8_t blue)
{
 8000ba4:	b590      	push	{r4, r7, lr}
 8000ba6:	b087      	sub	sp, #28
 8000ba8:	af02      	add	r7, sp, #8
 8000baa:	4604      	mov	r4, r0
 8000bac:	4608      	mov	r0, r1
 8000bae:	4611      	mov	r1, r2
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4623      	mov	r3, r4
 8000bb4:	80fb      	strh	r3, [r7, #6]
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	80bb      	strh	r3, [r7, #4]
 8000bba:	460b      	mov	r3, r1
 8000bbc:	70fb      	strb	r3, [r7, #3]
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	70bb      	strb	r3, [r7, #2]
    if (STRIP_BIT_ALL_SET == mask)
 8000bc2:	88fb      	ldrh	r3, [r7, #6]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d11c      	bne.n	8000c02 <animate_led_set_pixel+0x5e>
    {
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000bc8:	2301      	movs	r3, #1
 8000bca:	73fb      	strb	r3, [r7, #15]
 8000bcc:	e015      	b.n	8000bfa <animate_led_set_pixel+0x56>
        {
            //offset = animate_led_get_strip_offset(strip_bit);
            if (ws2812_pixel_is_in_strip_range(strip_bit, pixel)) ws2812b_set_led(strip_bit, pixel, red, green, blue);
 8000bce:	88ba      	ldrh	r2, [r7, #4]
 8000bd0:	7bfb      	ldrb	r3, [r7, #15]
 8000bd2:	4611      	mov	r1, r2
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f001 fd49 	bl	800266c <ws2812_pixel_is_in_strip_range>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d009      	beq.n	8000bf4 <animate_led_set_pixel+0x50>
 8000be0:	78bc      	ldrb	r4, [r7, #2]
 8000be2:	78fa      	ldrb	r2, [r7, #3]
 8000be4:	88b9      	ldrh	r1, [r7, #4]
 8000be6:	7bf8      	ldrb	r0, [r7, #15]
 8000be8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000bec:	9300      	str	r3, [sp, #0]
 8000bee:	4623      	mov	r3, r4
 8000bf0:	f001 fd56 	bl	80026a0 <ws2812b_set_led>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	73fb      	strb	r3, [r7, #15]
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d9e6      	bls.n	8000bce <animate_led_set_pixel+0x2a>
                if (ws2812_pixel_is_in_strip_range(strip_bit, pixel)) ws2812b_set_led(strip_bit, pixel, red, green, blue);
            }
        }
    }
    //animate_led_show_strip(mask);
}
 8000c00:	e020      	b.n	8000c44 <animate_led_set_pixel+0xa0>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000c02:	2301      	movs	r3, #1
 8000c04:	73bb      	strb	r3, [r7, #14]
 8000c06:	e01a      	b.n	8000c3e <animate_led_set_pixel+0x9a>
            if (mask & strip_bit)
 8000c08:	88fa      	ldrh	r2, [r7, #6]
 8000c0a:	7bbb      	ldrb	r3, [r7, #14]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d012      	beq.n	8000c38 <animate_led_set_pixel+0x94>
                if (ws2812_pixel_is_in_strip_range(strip_bit, pixel)) ws2812b_set_led(strip_bit, pixel, red, green, blue);
 8000c12:	88ba      	ldrh	r2, [r7, #4]
 8000c14:	7bbb      	ldrb	r3, [r7, #14]
 8000c16:	4611      	mov	r1, r2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f001 fd27 	bl	800266c <ws2812_pixel_is_in_strip_range>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d009      	beq.n	8000c38 <animate_led_set_pixel+0x94>
 8000c24:	78bc      	ldrb	r4, [r7, #2]
 8000c26:	78fa      	ldrb	r2, [r7, #3]
 8000c28:	88b9      	ldrh	r1, [r7, #4]
 8000c2a:	7bb8      	ldrb	r0, [r7, #14]
 8000c2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	4623      	mov	r3, r4
 8000c34:	f001 fd34 	bl	80026a0 <ws2812b_set_led>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000c38:	7bbb      	ldrb	r3, [r7, #14]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	73bb      	strb	r3, [r7, #14]
 8000c3e:	7bbb      	ldrb	r3, [r7, #14]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d9e1      	bls.n	8000c08 <animate_led_set_pixel+0x64>
}
 8000c44:	bf00      	nop
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd90      	pop	{r4, r7, pc}

08000c4c <animate_led_set_pixels_in_range>:

// TODO function to set pixels in range...

void animate_led_set_pixels_in_range(const strip_mask_t mask, const uint16_t pixel_start,
		const uint16_t pixel_stop, const uint8_t red, const uint8_t green, const uint8_t blue)
{
 8000c4c:	b590      	push	{r4, r7, lr}
 8000c4e:	b087      	sub	sp, #28
 8000c50:	af02      	add	r7, sp, #8
 8000c52:	4604      	mov	r4, r0
 8000c54:	4608      	mov	r0, r1
 8000c56:	4611      	mov	r1, r2
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4623      	mov	r3, r4
 8000c5c:	80fb      	strh	r3, [r7, #6]
 8000c5e:	4603      	mov	r3, r0
 8000c60:	80bb      	strh	r3, [r7, #4]
 8000c62:	460b      	mov	r3, r1
 8000c64:	807b      	strh	r3, [r7, #2]
 8000c66:	4613      	mov	r3, r2
 8000c68:	707b      	strb	r3, [r7, #1]
    if (STRIP_BIT_ALL_SET == mask)
 8000c6a:	88fb      	ldrh	r3, [r7, #6]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d127      	bne.n	8000cc0 <animate_led_set_pixels_in_range+0x74>
    {
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000c70:	2301      	movs	r3, #1
 8000c72:	73fb      	strb	r3, [r7, #15]
 8000c74:	e020      	b.n	8000cb8 <animate_led_set_pixels_in_range+0x6c>
        {
            //offset = animate_led_get_strip_offset(strip_bit);
        	for (uint16_t iii = pixel_start; iii <= pixel_stop; iii++)
 8000c76:	88bb      	ldrh	r3, [r7, #4]
 8000c78:	81bb      	strh	r3, [r7, #12]
 8000c7a:	e016      	b.n	8000caa <animate_led_set_pixels_in_range+0x5e>
        	{
                if (ws2812_pixel_is_in_strip_range(strip_bit, iii)) ws2812b_set_led(strip_bit, iii, red, green, blue);
 8000c7c:	89ba      	ldrh	r2, [r7, #12]
 8000c7e:	7bfb      	ldrb	r3, [r7, #15]
 8000c80:	4611      	mov	r1, r2
 8000c82:	4618      	mov	r0, r3
 8000c84:	f001 fcf2 	bl	800266c <ws2812_pixel_is_in_strip_range>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d00a      	beq.n	8000ca4 <animate_led_set_pixels_in_range+0x58>
 8000c8e:	f897 4020 	ldrb.w	r4, [r7, #32]
 8000c92:	787a      	ldrb	r2, [r7, #1]
 8000c94:	89b9      	ldrh	r1, [r7, #12]
 8000c96:	7bf8      	ldrb	r0, [r7, #15]
 8000c98:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c9c:	9300      	str	r3, [sp, #0]
 8000c9e:	4623      	mov	r3, r4
 8000ca0:	f001 fcfe 	bl	80026a0 <ws2812b_set_led>
        	for (uint16_t iii = pixel_start; iii <= pixel_stop; iii++)
 8000ca4:	89bb      	ldrh	r3, [r7, #12]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	81bb      	strh	r3, [r7, #12]
 8000caa:	89ba      	ldrh	r2, [r7, #12]
 8000cac:	887b      	ldrh	r3, [r7, #2]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d9e4      	bls.n	8000c7c <animate_led_set_pixels_in_range+0x30>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000cb2:	7bfb      	ldrb	r3, [r7, #15]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	73fb      	strb	r3, [r7, #15]
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d9db      	bls.n	8000c76 <animate_led_set_pixels_in_range+0x2a>
            	}
            }
        }
    }
    //animate_led_show_strip(mask);
}
 8000cbe:	e02b      	b.n	8000d18 <animate_led_set_pixels_in_range+0xcc>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	72fb      	strb	r3, [r7, #11]
 8000cc4:	e025      	b.n	8000d12 <animate_led_set_pixels_in_range+0xc6>
            if (mask & strip_bit)
 8000cc6:	88fa      	ldrh	r2, [r7, #6]
 8000cc8:	7afb      	ldrb	r3, [r7, #11]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d01d      	beq.n	8000d0c <animate_led_set_pixels_in_range+0xc0>
            	for (uint16_t iii = pixel_start; iii <= pixel_stop; iii++)
 8000cd0:	88bb      	ldrh	r3, [r7, #4]
 8000cd2:	813b      	strh	r3, [r7, #8]
 8000cd4:	e016      	b.n	8000d04 <animate_led_set_pixels_in_range+0xb8>
            		if (ws2812_pixel_is_in_strip_range(strip_bit, iii)) ws2812b_set_led(strip_bit, iii, red, green, blue);
 8000cd6:	893a      	ldrh	r2, [r7, #8]
 8000cd8:	7afb      	ldrb	r3, [r7, #11]
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f001 fcc5 	bl	800266c <ws2812_pixel_is_in_strip_range>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d00a      	beq.n	8000cfe <animate_led_set_pixels_in_range+0xb2>
 8000ce8:	f897 4020 	ldrb.w	r4, [r7, #32]
 8000cec:	787a      	ldrb	r2, [r7, #1]
 8000cee:	8939      	ldrh	r1, [r7, #8]
 8000cf0:	7af8      	ldrb	r0, [r7, #11]
 8000cf2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	4623      	mov	r3, r4
 8000cfa:	f001 fcd1 	bl	80026a0 <ws2812b_set_led>
            	for (uint16_t iii = pixel_start; iii <= pixel_stop; iii++)
 8000cfe:	893b      	ldrh	r3, [r7, #8]
 8000d00:	3301      	adds	r3, #1
 8000d02:	813b      	strh	r3, [r7, #8]
 8000d04:	893a      	ldrh	r2, [r7, #8]
 8000d06:	887b      	ldrh	r3, [r7, #2]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d9e4      	bls.n	8000cd6 <animate_led_set_pixels_in_range+0x8a>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000d0c:	7afb      	ldrb	r3, [r7, #11]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	72fb      	strb	r3, [r7, #11]
 8000d12:	7afb      	ldrb	r3, [r7, #11]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d9d6      	bls.n	8000cc6 <animate_led_set_pixels_in_range+0x7a>
}
 8000d18:	bf00      	nop
 8000d1a:	3714      	adds	r7, #20
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd90      	pop	{r4, r7, pc}

08000d20 <animate_led_set_all_pixels>:


void animate_led_set_all_pixels(const strip_mask_t mask, const uint8_t red, const uint8_t green, const uint8_t blue)
{
 8000d20:	b590      	push	{r4, r7, lr}
 8000d22:	b089      	sub	sp, #36	; 0x24
 8000d24:	af02      	add	r7, sp, #8
 8000d26:	4604      	mov	r4, r0
 8000d28:	4608      	mov	r0, r1
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4623      	mov	r3, r4
 8000d30:	80fb      	strh	r3, [r7, #6]
 8000d32:	4603      	mov	r3, r0
 8000d34:	717b      	strb	r3, [r7, #5]
 8000d36:	460b      	mov	r3, r1
 8000d38:	713b      	strb	r3, [r7, #4]
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	70fb      	strb	r3, [r7, #3]
    uint16_t strip_size = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	81fb      	strh	r3, [r7, #14]
    if (mask == g_all_strip_mask)
 8000d42:	4b2b      	ldr	r3, [pc, #172]	; (8000df0 <animate_led_set_all_pixels+0xd0>)
 8000d44:	881b      	ldrh	r3, [r3, #0]
 8000d46:	88fa      	ldrh	r2, [r7, #6]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d122      	bne.n	8000d92 <animate_led_set_all_pixels+0x72>
    {
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	75fb      	strb	r3, [r7, #23]
 8000d50:	e01b      	b.n	8000d8a <animate_led_set_all_pixels+0x6a>
        {
            strip_size = ws2812_get_strip_size(strip_bit);
 8000d52:	7dfb      	ldrb	r3, [r7, #23]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f001 fc21 	bl	800259c <ws2812_get_strip_size>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	81fb      	strh	r3, [r7, #14]
            //offset = animate_led_get_strip_offset(strip_bit);
            for (uint16_t iii = 0; iii < strip_size; iii++) ws2812b_set_led(strip_bit, iii, red, green, blue);
 8000d5e:	2300      	movs	r3, #0
 8000d60:	82bb      	strh	r3, [r7, #20]
 8000d62:	e00b      	b.n	8000d7c <animate_led_set_all_pixels+0x5c>
 8000d64:	793c      	ldrb	r4, [r7, #4]
 8000d66:	797a      	ldrb	r2, [r7, #5]
 8000d68:	8ab9      	ldrh	r1, [r7, #20]
 8000d6a:	7df8      	ldrb	r0, [r7, #23]
 8000d6c:	78fb      	ldrb	r3, [r7, #3]
 8000d6e:	9300      	str	r3, [sp, #0]
 8000d70:	4623      	mov	r3, r4
 8000d72:	f001 fc95 	bl	80026a0 <ws2812b_set_led>
 8000d76:	8abb      	ldrh	r3, [r7, #20]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	82bb      	strh	r3, [r7, #20]
 8000d7c:	8aba      	ldrh	r2, [r7, #20]
 8000d7e:	89fb      	ldrh	r3, [r7, #14]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d3ef      	bcc.n	8000d64 <animate_led_set_all_pixels+0x44>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000d84:	7dfb      	ldrb	r3, [r7, #23]
 8000d86:	3301      	adds	r3, #1
 8000d88:	75fb      	strb	r3, [r7, #23]
 8000d8a:	7dfb      	ldrb	r3, [r7, #23]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d9e0      	bls.n	8000d52 <animate_led_set_all_pixels+0x32>
 8000d90:	e026      	b.n	8000de0 <animate_led_set_all_pixels+0xc0>
        }
    }
    else
    {
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000d92:	2301      	movs	r3, #1
 8000d94:	74fb      	strb	r3, [r7, #19]
 8000d96:	e020      	b.n	8000dda <animate_led_set_all_pixels+0xba>
        {
            if (mask & strip_bit)
 8000d98:	88fa      	ldrh	r2, [r7, #6]
 8000d9a:	7cfb      	ldrb	r3, [r7, #19]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d018      	beq.n	8000dd4 <animate_led_set_all_pixels+0xb4>
            {
                strip_size = ws2812_get_strip_size(strip_bit);
 8000da2:	7cfb      	ldrb	r3, [r7, #19]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f001 fbf9 	bl	800259c <ws2812_get_strip_size>
 8000daa:	4603      	mov	r3, r0
 8000dac:	81fb      	strh	r3, [r7, #14]
                for (uint16_t yyy = 0; yyy < strip_size; yyy++) ws2812b_set_led(strip_bit, yyy, red, green, blue);
 8000dae:	2300      	movs	r3, #0
 8000db0:	823b      	strh	r3, [r7, #16]
 8000db2:	e00b      	b.n	8000dcc <animate_led_set_all_pixels+0xac>
 8000db4:	793c      	ldrb	r4, [r7, #4]
 8000db6:	797a      	ldrb	r2, [r7, #5]
 8000db8:	8a39      	ldrh	r1, [r7, #16]
 8000dba:	7cf8      	ldrb	r0, [r7, #19]
 8000dbc:	78fb      	ldrb	r3, [r7, #3]
 8000dbe:	9300      	str	r3, [sp, #0]
 8000dc0:	4623      	mov	r3, r4
 8000dc2:	f001 fc6d 	bl	80026a0 <ws2812b_set_led>
 8000dc6:	8a3b      	ldrh	r3, [r7, #16]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	823b      	strh	r3, [r7, #16]
 8000dcc:	8a3a      	ldrh	r2, [r7, #16]
 8000dce:	89fb      	ldrh	r3, [r7, #14]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d3ef      	bcc.n	8000db4 <animate_led_set_all_pixels+0x94>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000dd4:	7cfb      	ldrb	r3, [r7, #19]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	74fb      	strb	r3, [r7, #19]
 8000dda:	7cfb      	ldrb	r3, [r7, #19]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d9db      	bls.n	8000d98 <animate_led_set_all_pixels+0x78>
            }
        }
    }
    animate_led_show_strip(mask);
 8000de0:	88fb      	ldrh	r3, [r7, #6]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fece 	bl	8000b84 <animate_led_show_strip>
}
 8000de8:	bf00      	nop
 8000dea:	371c      	adds	r7, #28
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd90      	pop	{r4, r7, pc}
 8000df0:	2000079e 	.word	0x2000079e

08000df4 <animate_led_custom_solid_custom_color>:
	}
}


void animate_led_custom_solid_custom_color(const strip_mask_t mask_solid, const color_hex_code_e color_solid, const uint16_t led_start, const uint16_t led_stop)
{
 8000df4:	b5b0      	push	{r4, r5, r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af02      	add	r7, sp, #8
 8000dfa:	60b9      	str	r1, [r7, #8]
 8000dfc:	4611      	mov	r1, r2
 8000dfe:	461a      	mov	r2, r3
 8000e00:	4603      	mov	r3, r0
 8000e02:	81fb      	strh	r3, [r7, #14]
 8000e04:	460b      	mov	r3, r1
 8000e06:	81bb      	strh	r3, [r7, #12]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	80fb      	strh	r3, [r7, #6]
    uint8_t color_solid_rgb[sizeof(ws2812b_led_t)] = {0};
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <animate_led_custom_solid_custom_color+0x58>)
 8000e0e:	881b      	ldrh	r3, [r3, #0]
 8000e10:	82bb      	strh	r3, [r7, #20]
 8000e12:	2300      	movs	r3, #0
 8000e14:	75bb      	strb	r3, [r7, #22]
    color_led_hex_to_rgb(color_solid, color_solid_rgb);
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	68b8      	ldr	r0, [r7, #8]
 8000e1e:	f001 fb37 	bl	8002490 <color_led_hex_to_rgb>
    animate_led_set_pixels_in_range(mask_solid, led_start, led_stop, color_solid_rgb[offsetof(ws2812b_led_t, red)],
 8000e22:	7d3d      	ldrb	r5, [r7, #20]
 8000e24:	7d7b      	ldrb	r3, [r7, #21]
 8000e26:	7dba      	ldrb	r2, [r7, #22]
 8000e28:	88fc      	ldrh	r4, [r7, #6]
 8000e2a:	89b9      	ldrh	r1, [r7, #12]
 8000e2c:	89f8      	ldrh	r0, [r7, #14]
 8000e2e:	9201      	str	r2, [sp, #4]
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	462b      	mov	r3, r5
 8000e34:	4622      	mov	r2, r4
 8000e36:	f7ff ff09 	bl	8000c4c <animate_led_set_pixels_in_range>
            color_solid_rgb[offsetof(ws2812b_led_t, green)],
            color_solid_rgb[offsetof(ws2812b_led_t, blue)]);
    animate_led_show_strip(mask_solid);
 8000e3a:	89fb      	ldrh	r3, [r7, #14]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fea1 	bl	8000b84 <animate_led_show_strip>
}
 8000e42:	bf00      	nop
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bdb0      	pop	{r4, r5, r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	0800be80 	.word	0x0800be80

08000e50 <animate_led_solid_custom_color>:


void animate_led_solid_custom_color(const strip_mask_t mask_solid, const color_hex_code_e color_solid)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	6039      	str	r1, [r7, #0]
 8000e5a:	80fb      	strh	r3, [r7, #6]
    uint8_t color_solid_rgb[sizeof(ws2812b_led_t)] = {0};
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <animate_led_solid_custom_color+0x40>)
 8000e5e:	881b      	ldrh	r3, [r3, #0]
 8000e60:	81bb      	strh	r3, [r7, #12]
 8000e62:	2300      	movs	r3, #0
 8000e64:	73bb      	strb	r3, [r7, #14]
    color_led_hex_to_rgb(color_solid, color_solid_rgb);
 8000e66:	f107 030c 	add.w	r3, r7, #12
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	6838      	ldr	r0, [r7, #0]
 8000e6e:	f001 fb0f 	bl	8002490 <color_led_hex_to_rgb>
    animate_led_set_all_pixels(mask_solid, color_solid_rgb[offsetof(ws2812b_led_t, red)],
 8000e72:	7b39      	ldrb	r1, [r7, #12]
 8000e74:	7b7a      	ldrb	r2, [r7, #13]
 8000e76:	7bbb      	ldrb	r3, [r7, #14]
 8000e78:	88f8      	ldrh	r0, [r7, #6]
 8000e7a:	f7ff ff51 	bl	8000d20 <animate_led_set_all_pixels>
                               color_solid_rgb[offsetof(ws2812b_led_t, green)],
                               color_solid_rgb[offsetof(ws2812b_led_t, blue)]);
    animate_led_show_strip(mask_solid);
 8000e7e:	88fb      	ldrh	r3, [r7, #6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fe7f 	bl	8000b84 <animate_led_show_strip>
}
 8000e86:	bf00      	nop
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	0800be80 	.word	0x0800be80

08000e94 <animate_led_turn_all_pixels_off>:
 * @param   void
 * @return  void
 * @note    This function will set `gp_ws28128b_strip` array and write it to the strip(s).
 */
void animate_led_turn_all_pixels_off(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	animate_led_set_all_pixels((strip_mask_t)STRIP_BIT_ALL_SET, 0, 0, 0);
 8000e98:	2300      	movs	r3, #0
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	f7ff ff3e 	bl	8000d20 <animate_led_set_all_pixels>
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <animate_led_custom_only_spell_word>:
}


void animate_led_custom_only_spell_word(const strip_mask_t mask_spell, const color_hex_code_e color_spell,
                                 const uint16_t time_ms, const uint16_t led_start, const uint16_t led_stop)
{
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	ed2d 8b02 	vpush	{d8}
 8000eae:	b089      	sub	sp, #36	; 0x24
 8000eb0:	af02      	add	r7, sp, #8
 8000eb2:	60b9      	str	r1, [r7, #8]
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	4603      	mov	r3, r0
 8000eba:	81fb      	strh	r3, [r7, #14]
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	81bb      	strh	r3, [r7, #12]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	80fb      	strh	r3, [r7, #6]
    uint8_t color_spell_rgb[sizeof(ws2812b_led_t)] = {0};
 8000ec4:	4b26      	ldr	r3, [pc, #152]	; (8000f60 <animate_led_custom_only_spell_word+0xb8>)
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	823b      	strh	r3, [r7, #16]
 8000eca:	2300      	movs	r3, #0
 8000ecc:	74bb      	strb	r3, [r7, #18]
    color_led_hex_to_rgb(color_spell, color_spell_rgb);
 8000ece:	f107 0310 	add.w	r3, r7, #16
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	68b8      	ldr	r0, [r7, #8]
 8000ed6:	f001 fadb 	bl	8002490 <color_led_hex_to_rgb>
	for (int i = led_start; i <= led_stop; i++)
 8000eda:	88fb      	ldrh	r3, [r7, #6]
 8000edc:	617b      	str	r3, [r7, #20]
 8000ede:	e034      	b.n	8000f4a <animate_led_custom_only_spell_word+0xa2>
	{
        if (task_button_press_interrupt_occurred())
 8000ee0:	f001 fd6c 	bl	80029bc <task_button_press_interrupt_occurred>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d00d      	beq.n	8000f06 <animate_led_custom_only_spell_word+0x5e>
        {
            if (task_button_press_check_interrupts(&color_spell_rgb[offsetof(ws2812b_led_t, red)], &color_spell_rgb[offsetof(ws2812b_led_t, green)], &color_spell_rgb[offsetof(ws2812b_led_t, blue)]))
 8000eea:	f107 0310 	add.w	r3, r7, #16
 8000eee:	1c9a      	adds	r2, r3, #2
 8000ef0:	f107 0310 	add.w	r3, r7, #16
 8000ef4:	1c59      	adds	r1, r3, #1
 8000ef6:	f107 0310 	add.w	r3, r7, #16
 8000efa:	4618      	mov	r0, r3
 8000efc:	f001 fdc2 	bl	8002a84 <task_button_press_check_interrupts>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d126      	bne.n	8000f54 <animate_led_custom_only_spell_word+0xac>
            {
                return;
            }
        }
        animate_led_set_pixel(mask_spell, i,
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	b299      	uxth	r1, r3
 8000f0a:	7c3a      	ldrb	r2, [r7, #16]
 8000f0c:	7c7c      	ldrb	r4, [r7, #17]
 8000f0e:	7cbb      	ldrb	r3, [r7, #18]
 8000f10:	89f8      	ldrh	r0, [r7, #14]
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	4623      	mov	r3, r4
 8000f16:	f7ff fe45 	bl	8000ba4 <animate_led_set_pixel>
                              color_spell_rgb[offsetof(ws2812b_led_t, red)],
                              color_spell_rgb[offsetof(ws2812b_led_t, green)],
                              color_spell_rgb[offsetof(ws2812b_led_t, blue)]);
        animate_led_show_strip(mask_spell);
 8000f1a:	89fb      	ldrh	r3, [r7, #14]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fe31 	bl	8000b84 <animate_led_show_strip>
 		task_led_ctrl_delay(time_ms / task_led_ctrl_speed());
 8000f22:	89bb      	ldrh	r3, [r7, #12]
 8000f24:	ee07 3a90 	vmov	s15, r3
 8000f28:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000f2c:	f002 fa90 	bl	8003450 <task_led_ctrl_speed>
 8000f30:	eeb0 7a40 	vmov.f32	s14, s0
 8000f34:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000f38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f3c:	ee17 0a90 	vmov	r0, s15
 8000f40:	f002 f920 	bl	8003184 <task_led_ctrl_delay>
	for (int i = led_start; i <= led_stop; i++)
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	3301      	adds	r3, #1
 8000f48:	617b      	str	r3, [r7, #20]
 8000f4a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000f4c:	697a      	ldr	r2, [r7, #20]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	ddc6      	ble.n	8000ee0 <animate_led_custom_only_spell_word+0x38>
 8000f52:	e000      	b.n	8000f56 <animate_led_custom_only_spell_word+0xae>
                return;
 8000f54:	bf00      	nop
	}
}
 8000f56:	371c      	adds	r7, #28
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	ecbd 8b02 	vpop	{d8}
 8000f5e:	bd90      	pop	{r4, r7, pc}
 8000f60:	0800be80 	.word	0x0800be80

08000f64 <animate_led_only_spell_word>:


void animate_led_only_spell_word(const strip_mask_t mask_spell, const color_hex_code_e color_spell,
                                 const uint16_t time_ms)
{
 8000f64:	b590      	push	{r4, r7, lr}
 8000f66:	ed2d 8b02 	vpush	{d8}
 8000f6a:	b089      	sub	sp, #36	; 0x24
 8000f6c:	af02      	add	r7, sp, #8
 8000f6e:	4603      	mov	r3, r0
 8000f70:	6039      	str	r1, [r7, #0]
 8000f72:	80fb      	strh	r3, [r7, #6]
 8000f74:	4613      	mov	r3, r2
 8000f76:	80bb      	strh	r3, [r7, #4]
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_spell);
 8000f78:	88fb      	ldrh	r3, [r7, #6]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f001 fb52 	bl	8002624 <ws2812_led_get_max_strip_size>
 8000f80:	4603      	mov	r3, r0
 8000f82:	827b      	strh	r3, [r7, #18]
    uint8_t color_spell_rgb[sizeof(ws2812b_led_t)] = {0};
 8000f84:	4b26      	ldr	r3, [pc, #152]	; (8001020 <animate_led_only_spell_word+0xbc>)
 8000f86:	881b      	ldrh	r3, [r3, #0]
 8000f88:	81bb      	strh	r3, [r7, #12]
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	73bb      	strb	r3, [r7, #14]
    color_led_hex_to_rgb(color_spell, color_spell_rgb);
 8000f8e:	f107 030c 	add.w	r3, r7, #12
 8000f92:	4619      	mov	r1, r3
 8000f94:	6838      	ldr	r0, [r7, #0]
 8000f96:	f001 fa7b 	bl	8002490 <color_led_hex_to_rgb>
	for (int i = 0; i < strip_size; i++)
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
 8000f9e:	e034      	b.n	800100a <animate_led_only_spell_word+0xa6>
	{
        if (task_button_press_interrupt_occurred())
 8000fa0:	f001 fd0c 	bl	80029bc <task_button_press_interrupt_occurred>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d00d      	beq.n	8000fc6 <animate_led_only_spell_word+0x62>
        {
            if (task_button_press_check_interrupts(&color_spell_rgb[offsetof(ws2812b_led_t, red)], &color_spell_rgb[offsetof(ws2812b_led_t, green)], &color_spell_rgb[offsetof(ws2812b_led_t, blue)]))
 8000faa:	f107 030c 	add.w	r3, r7, #12
 8000fae:	1c9a      	adds	r2, r3, #2
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	1c59      	adds	r1, r3, #1
 8000fb6:	f107 030c 	add.w	r3, r7, #12
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f001 fd62 	bl	8002a84 <task_button_press_check_interrupts>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d126      	bne.n	8001014 <animate_led_only_spell_word+0xb0>
            {
                return;
            }
        }
        animate_led_set_pixel(mask_spell, i,
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	b299      	uxth	r1, r3
 8000fca:	7b3a      	ldrb	r2, [r7, #12]
 8000fcc:	7b7c      	ldrb	r4, [r7, #13]
 8000fce:	7bbb      	ldrb	r3, [r7, #14]
 8000fd0:	88f8      	ldrh	r0, [r7, #6]
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	4623      	mov	r3, r4
 8000fd6:	f7ff fde5 	bl	8000ba4 <animate_led_set_pixel>
                              color_spell_rgb[offsetof(ws2812b_led_t, red)],
                              color_spell_rgb[offsetof(ws2812b_led_t, green)],
                              color_spell_rgb[offsetof(ws2812b_led_t, blue)]);
        animate_led_show_strip(mask_spell);
 8000fda:	88fb      	ldrh	r3, [r7, #6]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fdd1 	bl	8000b84 <animate_led_show_strip>
 		task_led_ctrl_delay(time_ms / task_led_ctrl_speed());
 8000fe2:	88bb      	ldrh	r3, [r7, #4]
 8000fe4:	ee07 3a90 	vmov	s15, r3
 8000fe8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000fec:	f002 fa30 	bl	8003450 <task_led_ctrl_speed>
 8000ff0:	eeb0 7a40 	vmov.f32	s14, s0
 8000ff4:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000ff8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ffc:	ee17 0a90 	vmov	r0, s15
 8001000:	f002 f8c0 	bl	8003184 <task_led_ctrl_delay>
	for (int i = 0; i < strip_size; i++)
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	3301      	adds	r3, #1
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	8a7b      	ldrh	r3, [r7, #18]
 800100c:	697a      	ldr	r2, [r7, #20]
 800100e:	429a      	cmp	r2, r3
 8001010:	dbc6      	blt.n	8000fa0 <animate_led_only_spell_word+0x3c>
 8001012:	e000      	b.n	8001016 <animate_led_only_spell_word+0xb2>
                return;
 8001014:	bf00      	nop
	}
}
 8001016:	371c      	adds	r7, #28
 8001018:	46bd      	mov	sp, r7
 800101a:	ecbd 8b02 	vpop	{d8}
 800101e:	bd90      	pop	{r4, r7, pc}
 8001020:	0800be80 	.word	0x0800be80

08001024 <animate_led_custom_fade_in_fade_out>:
    }
}


void animate_led_custom_fade_in_fade_out(const strip_mask_t mask_fade, const color_hex_code_e color_fade, const uint16_t led_start, const uint16_t led_stop)
{
 8001024:	b5b0      	push	{r4, r5, r7, lr}
 8001026:	b08c      	sub	sp, #48	; 0x30
 8001028:	af02      	add	r7, sp, #8
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	4611      	mov	r1, r2
 800102e:	461a      	mov	r2, r3
 8001030:	4603      	mov	r3, r0
 8001032:	81fb      	strh	r3, [r7, #14]
 8001034:	460b      	mov	r3, r1
 8001036:	81bb      	strh	r3, [r7, #12]
 8001038:	4613      	mov	r3, r2
 800103a:	80fb      	strh	r3, [r7, #6]
    float r, g, b;
    uint8_t color_fade_rgb[sizeof(ws2812b_led_t)] = {0};
 800103c:	4ba4      	ldr	r3, [pc, #656]	; (80012d0 <animate_led_custom_fade_in_fade_out+0x2ac>)
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	823b      	strh	r3, [r7, #16]
 8001042:	2300      	movs	r3, #0
 8001044:	74bb      	strb	r3, [r7, #18]
    color_led_hex_to_rgb(color_fade, color_fade_rgb);
 8001046:	f107 0310 	add.w	r3, r7, #16
 800104a:	4619      	mov	r1, r3
 800104c:	68b8      	ldr	r0, [r7, #8]
 800104e:	f001 fa1f 	bl	8002490 <color_led_hex_to_rgb>
    for (int iii = 0; iii < 256; iii++)
 8001052:	2300      	movs	r3, #0
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
 8001056:	e094      	b.n	8001182 <animate_led_custom_fade_in_fade_out+0x15e>
    {
        if (task_button_press_interrupt_occurred())
 8001058:	f001 fcb0 	bl	80029bc <task_button_press_interrupt_occurred>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d00e      	beq.n	8001080 <animate_led_custom_fade_in_fade_out+0x5c>
        {
            if (task_button_press_check_interrupts(&color_fade_rgb[offsetof(ws2812b_led_t, red)], &color_fade_rgb[offsetof(ws2812b_led_t, green)], &color_fade_rgb[offsetof(ws2812b_led_t, blue)]))
 8001062:	f107 0310 	add.w	r3, r7, #16
 8001066:	1c9a      	adds	r2, r3, #2
 8001068:	f107 0310 	add.w	r3, r7, #16
 800106c:	1c59      	adds	r1, r3, #1
 800106e:	f107 0310 	add.w	r3, r7, #16
 8001072:	4618      	mov	r0, r3
 8001074:	f001 fd06 	bl	8002a84 <task_button_press_check_interrupts>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	f040 8122 	bne.w	80012c4 <animate_led_custom_fade_in_fade_out+0x2a0>
            {
                return;
            }
        }
        r = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, red)];
 8001080:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001082:	f7ff fa47 	bl	8000514 <__aeabi_i2d>
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	4b92      	ldr	r3, [pc, #584]	; (80012d4 <animate_led_custom_fade_in_fade_out+0x2b0>)
 800108c:	f7ff fbd6 	bl	800083c <__aeabi_ddiv>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	4614      	mov	r4, r2
 8001096:	461d      	mov	r5, r3
 8001098:	7c3b      	ldrb	r3, [r7, #16]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fa3a 	bl	8000514 <__aeabi_i2d>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4620      	mov	r0, r4
 80010a6:	4629      	mov	r1, r5
 80010a8:	f7ff fa9e 	bl	80005e8 <__aeabi_dmul>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	4610      	mov	r0, r2
 80010b2:	4619      	mov	r1, r3
 80010b4:	f7ff fcaa 	bl	8000a0c <__aeabi_d2f>
 80010b8:	4603      	mov	r3, r0
 80010ba:	61fb      	str	r3, [r7, #28]
        g = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, green)];
 80010bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010be:	f7ff fa29 	bl	8000514 <__aeabi_i2d>
 80010c2:	f04f 0200 	mov.w	r2, #0
 80010c6:	4b83      	ldr	r3, [pc, #524]	; (80012d4 <animate_led_custom_fade_in_fade_out+0x2b0>)
 80010c8:	f7ff fbb8 	bl	800083c <__aeabi_ddiv>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	4614      	mov	r4, r2
 80010d2:	461d      	mov	r5, r3
 80010d4:	7c7b      	ldrb	r3, [r7, #17]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fa1c 	bl	8000514 <__aeabi_i2d>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	4620      	mov	r0, r4
 80010e2:	4629      	mov	r1, r5
 80010e4:	f7ff fa80 	bl	80005e8 <__aeabi_dmul>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	4610      	mov	r0, r2
 80010ee:	4619      	mov	r1, r3
 80010f0:	f7ff fc8c 	bl	8000a0c <__aeabi_d2f>
 80010f4:	4603      	mov	r3, r0
 80010f6:	61bb      	str	r3, [r7, #24]
        b = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, blue)];
 80010f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010fa:	f7ff fa0b 	bl	8000514 <__aeabi_i2d>
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	4b74      	ldr	r3, [pc, #464]	; (80012d4 <animate_led_custom_fade_in_fade_out+0x2b0>)
 8001104:	f7ff fb9a 	bl	800083c <__aeabi_ddiv>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	4614      	mov	r4, r2
 800110e:	461d      	mov	r5, r3
 8001110:	7cbb      	ldrb	r3, [r7, #18]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff f9fe 	bl	8000514 <__aeabi_i2d>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	4620      	mov	r0, r4
 800111e:	4629      	mov	r1, r5
 8001120:	f7ff fa62 	bl	80005e8 <__aeabi_dmul>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4610      	mov	r0, r2
 800112a:	4619      	mov	r1, r3
 800112c:	f7ff fc6e 	bl	8000a0c <__aeabi_d2f>
 8001130:	4603      	mov	r3, r0
 8001132:	617b      	str	r3, [r7, #20]
        animate_led_set_pixels_in_range(mask_fade, led_start, led_stop, r, g, b);
 8001134:	edd7 7a07 	vldr	s15, [r7, #28]
 8001138:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800113c:	edc7 7a00 	vstr	s15, [r7]
 8001140:	783b      	ldrb	r3, [r7, #0]
 8001142:	b2dd      	uxtb	r5, r3
 8001144:	edd7 7a06 	vldr	s15, [r7, #24]
 8001148:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800114c:	edc7 7a00 	vstr	s15, [r7]
 8001150:	783b      	ldrb	r3, [r7, #0]
 8001152:	b2db      	uxtb	r3, r3
 8001154:	edd7 7a05 	vldr	s15, [r7, #20]
 8001158:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800115c:	edc7 7a00 	vstr	s15, [r7]
 8001160:	783a      	ldrb	r2, [r7, #0]
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	88fc      	ldrh	r4, [r7, #6]
 8001166:	89b9      	ldrh	r1, [r7, #12]
 8001168:	89f8      	ldrh	r0, [r7, #14]
 800116a:	9201      	str	r2, [sp, #4]
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	462b      	mov	r3, r5
 8001170:	4622      	mov	r2, r4
 8001172:	f7ff fd6b 	bl	8000c4c <animate_led_set_pixels_in_range>
        animate_led_show_strip(STRIP_BIT_1);
 8001176:	2001      	movs	r0, #1
 8001178:	f7ff fd04 	bl	8000b84 <animate_led_show_strip>
    for (int iii = 0; iii < 256; iii++)
 800117c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117e:	3301      	adds	r3, #1
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
 8001182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001184:	2bff      	cmp	r3, #255	; 0xff
 8001186:	f77f af67 	ble.w	8001058 <animate_led_custom_fade_in_fade_out+0x34>
        //animate_led_set_all_pixels(mask_fade, r, g, b);
    }
    for (int iii = 255; iii >= 0; iii = iii-2)
 800118a:	23ff      	movs	r3, #255	; 0xff
 800118c:	623b      	str	r3, [r7, #32]
 800118e:	e094      	b.n	80012ba <animate_led_custom_fade_in_fade_out+0x296>
    {
        if (task_button_press_interrupt_occurred())
 8001190:	f001 fc14 	bl	80029bc <task_button_press_interrupt_occurred>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d00e      	beq.n	80011b8 <animate_led_custom_fade_in_fade_out+0x194>
        {
            if (task_button_press_check_interrupts(&color_fade_rgb[offsetof(ws2812b_led_t, red)], &color_fade_rgb[offsetof(ws2812b_led_t, green)], &color_fade_rgb[offsetof(ws2812b_led_t, blue)]))
 800119a:	f107 0310 	add.w	r3, r7, #16
 800119e:	1c9a      	adds	r2, r3, #2
 80011a0:	f107 0310 	add.w	r3, r7, #16
 80011a4:	1c59      	adds	r1, r3, #1
 80011a6:	f107 0310 	add.w	r3, r7, #16
 80011aa:	4618      	mov	r0, r3
 80011ac:	f001 fc6a 	bl	8002a84 <task_button_press_check_interrupts>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	f040 8088 	bne.w	80012c8 <animate_led_custom_fade_in_fade_out+0x2a4>
            {
                return;
            }
        }
        r = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, red)];
 80011b8:	6a38      	ldr	r0, [r7, #32]
 80011ba:	f7ff f9ab 	bl	8000514 <__aeabi_i2d>
 80011be:	f04f 0200 	mov.w	r2, #0
 80011c2:	4b44      	ldr	r3, [pc, #272]	; (80012d4 <animate_led_custom_fade_in_fade_out+0x2b0>)
 80011c4:	f7ff fb3a 	bl	800083c <__aeabi_ddiv>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4614      	mov	r4, r2
 80011ce:	461d      	mov	r5, r3
 80011d0:	7c3b      	ldrb	r3, [r7, #16]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f99e 	bl	8000514 <__aeabi_i2d>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4620      	mov	r0, r4
 80011de:	4629      	mov	r1, r5
 80011e0:	f7ff fa02 	bl	80005e8 <__aeabi_dmul>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4610      	mov	r0, r2
 80011ea:	4619      	mov	r1, r3
 80011ec:	f7ff fc0e 	bl	8000a0c <__aeabi_d2f>
 80011f0:	4603      	mov	r3, r0
 80011f2:	61fb      	str	r3, [r7, #28]
        g = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, green)];
 80011f4:	6a38      	ldr	r0, [r7, #32]
 80011f6:	f7ff f98d 	bl	8000514 <__aeabi_i2d>
 80011fa:	f04f 0200 	mov.w	r2, #0
 80011fe:	4b35      	ldr	r3, [pc, #212]	; (80012d4 <animate_led_custom_fade_in_fade_out+0x2b0>)
 8001200:	f7ff fb1c 	bl	800083c <__aeabi_ddiv>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4614      	mov	r4, r2
 800120a:	461d      	mov	r5, r3
 800120c:	7c7b      	ldrb	r3, [r7, #17]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f980 	bl	8000514 <__aeabi_i2d>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4620      	mov	r0, r4
 800121a:	4629      	mov	r1, r5
 800121c:	f7ff f9e4 	bl	80005e8 <__aeabi_dmul>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	f7ff fbf0 	bl	8000a0c <__aeabi_d2f>
 800122c:	4603      	mov	r3, r0
 800122e:	61bb      	str	r3, [r7, #24]
        b = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, blue)];
 8001230:	6a38      	ldr	r0, [r7, #32]
 8001232:	f7ff f96f 	bl	8000514 <__aeabi_i2d>
 8001236:	f04f 0200 	mov.w	r2, #0
 800123a:	4b26      	ldr	r3, [pc, #152]	; (80012d4 <animate_led_custom_fade_in_fade_out+0x2b0>)
 800123c:	f7ff fafe 	bl	800083c <__aeabi_ddiv>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4614      	mov	r4, r2
 8001246:	461d      	mov	r5, r3
 8001248:	7cbb      	ldrb	r3, [r7, #18]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff f962 	bl	8000514 <__aeabi_i2d>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4620      	mov	r0, r4
 8001256:	4629      	mov	r1, r5
 8001258:	f7ff f9c6 	bl	80005e8 <__aeabi_dmul>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4610      	mov	r0, r2
 8001262:	4619      	mov	r1, r3
 8001264:	f7ff fbd2 	bl	8000a0c <__aeabi_d2f>
 8001268:	4603      	mov	r3, r0
 800126a:	617b      	str	r3, [r7, #20]
        animate_led_set_pixels_in_range(mask_fade, led_start, led_stop, r, g, b);
 800126c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001270:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001274:	edc7 7a00 	vstr	s15, [r7]
 8001278:	783b      	ldrb	r3, [r7, #0]
 800127a:	b2dd      	uxtb	r5, r3
 800127c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001280:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001284:	edc7 7a00 	vstr	s15, [r7]
 8001288:	783b      	ldrb	r3, [r7, #0]
 800128a:	b2db      	uxtb	r3, r3
 800128c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001290:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001294:	edc7 7a00 	vstr	s15, [r7]
 8001298:	783a      	ldrb	r2, [r7, #0]
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	88fc      	ldrh	r4, [r7, #6]
 800129e:	89b9      	ldrh	r1, [r7, #12]
 80012a0:	89f8      	ldrh	r0, [r7, #14]
 80012a2:	9201      	str	r2, [sp, #4]
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	462b      	mov	r3, r5
 80012a8:	4622      	mov	r2, r4
 80012aa:	f7ff fccf 	bl	8000c4c <animate_led_set_pixels_in_range>
        animate_led_show_strip(STRIP_BIT_1);
 80012ae:	2001      	movs	r0, #1
 80012b0:	f7ff fc68 	bl	8000b84 <animate_led_show_strip>
    for (int iii = 255; iii >= 0; iii = iii-2)
 80012b4:	6a3b      	ldr	r3, [r7, #32]
 80012b6:	3b02      	subs	r3, #2
 80012b8:	623b      	str	r3, [r7, #32]
 80012ba:	6a3b      	ldr	r3, [r7, #32]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f6bf af67 	bge.w	8001190 <animate_led_custom_fade_in_fade_out+0x16c>
 80012c2:	e002      	b.n	80012ca <animate_led_custom_fade_in_fade_out+0x2a6>
                return;
 80012c4:	bf00      	nop
 80012c6:	e000      	b.n	80012ca <animate_led_custom_fade_in_fade_out+0x2a6>
                return;
 80012c8:	bf00      	nop
    }
}
 80012ca:	3728      	adds	r7, #40	; 0x28
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bdb0      	pop	{r4, r5, r7, pc}
 80012d0:	0800be80 	.word	0x0800be80
 80012d4:	40700000 	.word	0x40700000

080012d8 <animate_led_fade_in_fade_out>:



void animate_led_fade_in_fade_out(const strip_mask_t mask_fade, const color_hex_code_e color_fade)
{
 80012d8:	b5b0      	push	{r4, r5, r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	81fb      	strh	r3, [r7, #14]
    float r, g, b;
    uint8_t color_fade_rgb[sizeof(ws2812b_led_t)] = {0};
 80012e4:	4b9b      	ldr	r3, [pc, #620]	; (8001554 <animate_led_fade_in_fade_out+0x27c>)
 80012e6:	881b      	ldrh	r3, [r3, #0]
 80012e8:	823b      	strh	r3, [r7, #16]
 80012ea:	2300      	movs	r3, #0
 80012ec:	74bb      	strb	r3, [r7, #18]
    color_led_hex_to_rgb(color_fade, color_fade_rgb);
 80012ee:	f107 0310 	add.w	r3, r7, #16
 80012f2:	4619      	mov	r1, r3
 80012f4:	68b8      	ldr	r0, [r7, #8]
 80012f6:	f001 f8cb 	bl	8002490 <color_led_hex_to_rgb>
    for (int iii = 0; iii < 256; iii++)
 80012fa:	2300      	movs	r3, #0
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
 80012fe:	e08b      	b.n	8001418 <animate_led_fade_in_fade_out+0x140>
    {
        if (task_button_press_interrupt_occurred())
 8001300:	f001 fb5c 	bl	80029bc <task_button_press_interrupt_occurred>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d00e      	beq.n	8001328 <animate_led_fade_in_fade_out+0x50>
        {
            if (task_button_press_check_interrupts(&color_fade_rgb[offsetof(ws2812b_led_t, red)], &color_fade_rgb[offsetof(ws2812b_led_t, green)], &color_fade_rgb[offsetof(ws2812b_led_t, blue)]))
 800130a:	f107 0310 	add.w	r3, r7, #16
 800130e:	1c9a      	adds	r2, r3, #2
 8001310:	f107 0310 	add.w	r3, r7, #16
 8001314:	1c59      	adds	r1, r3, #1
 8001316:	f107 0310 	add.w	r3, r7, #16
 800131a:	4618      	mov	r0, r3
 800131c:	f001 fbb2 	bl	8002a84 <task_button_press_check_interrupts>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	f040 810f 	bne.w	8001546 <animate_led_fade_in_fade_out+0x26e>
            {
                return;
            }
        }
        r = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, red)];
 8001328:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800132a:	f7ff f8f3 	bl	8000514 <__aeabi_i2d>
 800132e:	f04f 0200 	mov.w	r2, #0
 8001332:	4b89      	ldr	r3, [pc, #548]	; (8001558 <animate_led_fade_in_fade_out+0x280>)
 8001334:	f7ff fa82 	bl	800083c <__aeabi_ddiv>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4614      	mov	r4, r2
 800133e:	461d      	mov	r5, r3
 8001340:	7c3b      	ldrb	r3, [r7, #16]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff f8e6 	bl	8000514 <__aeabi_i2d>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4620      	mov	r0, r4
 800134e:	4629      	mov	r1, r5
 8001350:	f7ff f94a 	bl	80005e8 <__aeabi_dmul>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4610      	mov	r0, r2
 800135a:	4619      	mov	r1, r3
 800135c:	f7ff fb56 	bl	8000a0c <__aeabi_d2f>
 8001360:	4603      	mov	r3, r0
 8001362:	61fb      	str	r3, [r7, #28]
        g = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, green)];
 8001364:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001366:	f7ff f8d5 	bl	8000514 <__aeabi_i2d>
 800136a:	f04f 0200 	mov.w	r2, #0
 800136e:	4b7a      	ldr	r3, [pc, #488]	; (8001558 <animate_led_fade_in_fade_out+0x280>)
 8001370:	f7ff fa64 	bl	800083c <__aeabi_ddiv>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4614      	mov	r4, r2
 800137a:	461d      	mov	r5, r3
 800137c:	7c7b      	ldrb	r3, [r7, #17]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff f8c8 	bl	8000514 <__aeabi_i2d>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4620      	mov	r0, r4
 800138a:	4629      	mov	r1, r5
 800138c:	f7ff f92c 	bl	80005e8 <__aeabi_dmul>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4610      	mov	r0, r2
 8001396:	4619      	mov	r1, r3
 8001398:	f7ff fb38 	bl	8000a0c <__aeabi_d2f>
 800139c:	4603      	mov	r3, r0
 800139e:	61bb      	str	r3, [r7, #24]
        b = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, blue)];
 80013a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80013a2:	f7ff f8b7 	bl	8000514 <__aeabi_i2d>
 80013a6:	f04f 0200 	mov.w	r2, #0
 80013aa:	4b6b      	ldr	r3, [pc, #428]	; (8001558 <animate_led_fade_in_fade_out+0x280>)
 80013ac:	f7ff fa46 	bl	800083c <__aeabi_ddiv>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4614      	mov	r4, r2
 80013b6:	461d      	mov	r5, r3
 80013b8:	7cbb      	ldrb	r3, [r7, #18]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff f8aa 	bl	8000514 <__aeabi_i2d>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4620      	mov	r0, r4
 80013c6:	4629      	mov	r1, r5
 80013c8:	f7ff f90e 	bl	80005e8 <__aeabi_dmul>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	4610      	mov	r0, r2
 80013d2:	4619      	mov	r1, r3
 80013d4:	f7ff fb1a 	bl	8000a0c <__aeabi_d2f>
 80013d8:	4603      	mov	r3, r0
 80013da:	617b      	str	r3, [r7, #20]
        animate_led_set_all_pixels(mask_fade, r, g, b);
 80013dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80013e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013e4:	edc7 7a01 	vstr	s15, [r7, #4]
 80013e8:	793b      	ldrb	r3, [r7, #4]
 80013ea:	b2d9      	uxtb	r1, r3
 80013ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80013f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013f4:	edc7 7a01 	vstr	s15, [r7, #4]
 80013f8:	793b      	ldrb	r3, [r7, #4]
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001400:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001404:	edc7 7a01 	vstr	s15, [r7, #4]
 8001408:	793b      	ldrb	r3, [r7, #4]
 800140a:	b2db      	uxtb	r3, r3
 800140c:	89f8      	ldrh	r0, [r7, #14]
 800140e:	f7ff fc87 	bl	8000d20 <animate_led_set_all_pixels>
    for (int iii = 0; iii < 256; iii++)
 8001412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001414:	3301      	adds	r3, #1
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
 8001418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141a:	2bff      	cmp	r3, #255	; 0xff
 800141c:	f77f af70 	ble.w	8001300 <animate_led_fade_in_fade_out+0x28>
    }
    for (int iii = 255; iii >= 0; iii = iii-2)
 8001420:	23ff      	movs	r3, #255	; 0xff
 8001422:	623b      	str	r3, [r7, #32]
 8001424:	e08a      	b.n	800153c <animate_led_fade_in_fade_out+0x264>
    {
        if (task_button_press_interrupt_occurred())
 8001426:	f001 fac9 	bl	80029bc <task_button_press_interrupt_occurred>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d00d      	beq.n	800144c <animate_led_fade_in_fade_out+0x174>
        {
            if (task_button_press_check_interrupts(&color_fade_rgb[offsetof(ws2812b_led_t, red)], &color_fade_rgb[offsetof(ws2812b_led_t, green)], &color_fade_rgb[offsetof(ws2812b_led_t, blue)]))
 8001430:	f107 0310 	add.w	r3, r7, #16
 8001434:	1c9a      	adds	r2, r3, #2
 8001436:	f107 0310 	add.w	r3, r7, #16
 800143a:	1c59      	adds	r1, r3, #1
 800143c:	f107 0310 	add.w	r3, r7, #16
 8001440:	4618      	mov	r0, r3
 8001442:	f001 fb1f 	bl	8002a84 <task_button_press_check_interrupts>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d17e      	bne.n	800154a <animate_led_fade_in_fade_out+0x272>
            {
                return;
            }
        }
        r = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, red)];
 800144c:	6a38      	ldr	r0, [r7, #32]
 800144e:	f7ff f861 	bl	8000514 <__aeabi_i2d>
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	4b40      	ldr	r3, [pc, #256]	; (8001558 <animate_led_fade_in_fade_out+0x280>)
 8001458:	f7ff f9f0 	bl	800083c <__aeabi_ddiv>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4614      	mov	r4, r2
 8001462:	461d      	mov	r5, r3
 8001464:	7c3b      	ldrb	r3, [r7, #16]
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff f854 	bl	8000514 <__aeabi_i2d>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4620      	mov	r0, r4
 8001472:	4629      	mov	r1, r5
 8001474:	f7ff f8b8 	bl	80005e8 <__aeabi_dmul>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	4610      	mov	r0, r2
 800147e:	4619      	mov	r1, r3
 8001480:	f7ff fac4 	bl	8000a0c <__aeabi_d2f>
 8001484:	4603      	mov	r3, r0
 8001486:	61fb      	str	r3, [r7, #28]
        g = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, green)];
 8001488:	6a38      	ldr	r0, [r7, #32]
 800148a:	f7ff f843 	bl	8000514 <__aeabi_i2d>
 800148e:	f04f 0200 	mov.w	r2, #0
 8001492:	4b31      	ldr	r3, [pc, #196]	; (8001558 <animate_led_fade_in_fade_out+0x280>)
 8001494:	f7ff f9d2 	bl	800083c <__aeabi_ddiv>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4614      	mov	r4, r2
 800149e:	461d      	mov	r5, r3
 80014a0:	7c7b      	ldrb	r3, [r7, #17]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff f836 	bl	8000514 <__aeabi_i2d>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	4620      	mov	r0, r4
 80014ae:	4629      	mov	r1, r5
 80014b0:	f7ff f89a 	bl	80005e8 <__aeabi_dmul>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4610      	mov	r0, r2
 80014ba:	4619      	mov	r1, r3
 80014bc:	f7ff faa6 	bl	8000a0c <__aeabi_d2f>
 80014c0:	4603      	mov	r3, r0
 80014c2:	61bb      	str	r3, [r7, #24]
        b = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, blue)];
 80014c4:	6a38      	ldr	r0, [r7, #32]
 80014c6:	f7ff f825 	bl	8000514 <__aeabi_i2d>
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	4b22      	ldr	r3, [pc, #136]	; (8001558 <animate_led_fade_in_fade_out+0x280>)
 80014d0:	f7ff f9b4 	bl	800083c <__aeabi_ddiv>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	4614      	mov	r4, r2
 80014da:	461d      	mov	r5, r3
 80014dc:	7cbb      	ldrb	r3, [r7, #18]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff f818 	bl	8000514 <__aeabi_i2d>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4620      	mov	r0, r4
 80014ea:	4629      	mov	r1, r5
 80014ec:	f7ff f87c 	bl	80005e8 <__aeabi_dmul>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	4610      	mov	r0, r2
 80014f6:	4619      	mov	r1, r3
 80014f8:	f7ff fa88 	bl	8000a0c <__aeabi_d2f>
 80014fc:	4603      	mov	r3, r0
 80014fe:	617b      	str	r3, [r7, #20]
        animate_led_set_all_pixels(mask_fade, r, g, b);
 8001500:	edd7 7a07 	vldr	s15, [r7, #28]
 8001504:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001508:	edc7 7a01 	vstr	s15, [r7, #4]
 800150c:	793b      	ldrb	r3, [r7, #4]
 800150e:	b2d9      	uxtb	r1, r3
 8001510:	edd7 7a06 	vldr	s15, [r7, #24]
 8001514:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001518:	edc7 7a01 	vstr	s15, [r7, #4]
 800151c:	793b      	ldrb	r3, [r7, #4]
 800151e:	b2da      	uxtb	r2, r3
 8001520:	edd7 7a05 	vldr	s15, [r7, #20]
 8001524:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001528:	edc7 7a01 	vstr	s15, [r7, #4]
 800152c:	793b      	ldrb	r3, [r7, #4]
 800152e:	b2db      	uxtb	r3, r3
 8001530:	89f8      	ldrh	r0, [r7, #14]
 8001532:	f7ff fbf5 	bl	8000d20 <animate_led_set_all_pixels>
    for (int iii = 255; iii >= 0; iii = iii-2)
 8001536:	6a3b      	ldr	r3, [r7, #32]
 8001538:	3b02      	subs	r3, #2
 800153a:	623b      	str	r3, [r7, #32]
 800153c:	6a3b      	ldr	r3, [r7, #32]
 800153e:	2b00      	cmp	r3, #0
 8001540:	f6bf af71 	bge.w	8001426 <animate_led_fade_in_fade_out+0x14e>
 8001544:	e002      	b.n	800154c <animate_led_fade_in_fade_out+0x274>
                return;
 8001546:	bf00      	nop
 8001548:	e000      	b.n	800154c <animate_led_fade_in_fade_out+0x274>
                return;
 800154a:	bf00      	nop
    }
}
 800154c:	3728      	adds	r7, #40	; 0x28
 800154e:	46bd      	mov	sp, r7
 8001550:	bdb0      	pop	{r4, r5, r7, pc}
 8001552:	bf00      	nop
 8001554:	0800be80 	.word	0x0800be80
 8001558:	40700000 	.word	0x40700000

0800155c <animate_led_custom_twinkle>:
}


void animate_led_custom_twinkle(const strip_mask_t twinkle_mask, const color_hex_code_e color_twinkle, const uint16_t count,
                         const uint16_t speed_delay, const bool only_one, const uint16_t led_start, const uint16_t led_stop)
{
 800155c:	b590      	push	{r4, r7, lr}
 800155e:	ed2d 8b02 	vpush	{d8}
 8001562:	b089      	sub	sp, #36	; 0x24
 8001564:	af02      	add	r7, sp, #8
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	4611      	mov	r1, r2
 800156a:	461a      	mov	r2, r3
 800156c:	4603      	mov	r3, r0
 800156e:	81fb      	strh	r3, [r7, #14]
 8001570:	460b      	mov	r3, r1
 8001572:	81bb      	strh	r3, [r7, #12]
 8001574:	4613      	mov	r3, r2
 8001576:	80fb      	strh	r3, [r7, #6]
    uint8_t color_twinkle_rgb[sizeof(ws2812b_led_t)] = {0};
 8001578:	4b2e      	ldr	r3, [pc, #184]	; (8001634 <animate_led_custom_twinkle+0xd8>)
 800157a:	881b      	ldrh	r3, [r3, #0]
 800157c:	823b      	strh	r3, [r7, #16]
 800157e:	2300      	movs	r3, #0
 8001580:	74bb      	strb	r3, [r7, #18]
    color_led_hex_to_rgb(color_twinkle, color_twinkle_rgb);
 8001582:	f107 0310 	add.w	r3, r7, #16
 8001586:	4619      	mov	r1, r3
 8001588:	68b8      	ldr	r0, [r7, #8]
 800158a:	f000 ff81 	bl	8002490 <color_led_hex_to_rgb>
    for (int iii = 0; iii < count; iii++)
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]
 8001592:	e044      	b.n	800161e <animate_led_custom_twinkle+0xc2>
    {
        if (task_button_press_interrupt_occurred())
 8001594:	f001 fa12 	bl	80029bc <task_button_press_interrupt_occurred>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d00d      	beq.n	80015ba <animate_led_custom_twinkle+0x5e>
        {
            if (task_button_press_check_interrupts(&color_twinkle_rgb[offsetof(ws2812b_led_t, red)], &color_twinkle_rgb[offsetof(ws2812b_led_t, green)], &color_twinkle_rgb[offsetof(ws2812b_led_t, blue)]))
 800159e:	f107 0310 	add.w	r3, r7, #16
 80015a2:	1c9a      	adds	r2, r3, #2
 80015a4:	f107 0310 	add.w	r3, r7, #16
 80015a8:	1c59      	adds	r1, r3, #1
 80015aa:	f107 0310 	add.w	r3, r7, #16
 80015ae:	4618      	mov	r0, r3
 80015b0:	f001 fa68 	bl	8002a84 <task_button_press_check_interrupts>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d136      	bne.n	8001628 <animate_led_custom_twinkle+0xcc>
            {
                return;
            }
        }
        animate_led_set_pixel(twinkle_mask, random_num(led_start, led_stop),
 80015ba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80015bc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80015be:	4611      	mov	r1, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f009 fbb9 	bl	800ad38 <random_num>
 80015c6:	4603      	mov	r3, r0
 80015c8:	b299      	uxth	r1, r3
 80015ca:	7c3a      	ldrb	r2, [r7, #16]
 80015cc:	7c7c      	ldrb	r4, [r7, #17]
 80015ce:	7cbb      	ldrb	r3, [r7, #18]
 80015d0:	89f8      	ldrh	r0, [r7, #14]
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	4623      	mov	r3, r4
 80015d6:	f7ff fae5 	bl	8000ba4 <animate_led_set_pixel>
                              (color_twinkle_rgb[offsetof(ws2812b_led_t, red)]),
                              (color_twinkle_rgb[offsetof(ws2812b_led_t, green)]),
                              (color_twinkle_rgb[offsetof(ws2812b_led_t, blue)]));
        animate_led_show_strip(twinkle_mask);
 80015da:	89fb      	ldrh	r3, [r7, #14]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff fad1 	bl	8000b84 <animate_led_show_strip>
        task_led_ctrl_delay(speed_delay / task_led_ctrl_speed());
 80015e2:	88fb      	ldrh	r3, [r7, #6]
 80015e4:	ee07 3a90 	vmov	s15, r3
 80015e8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80015ec:	f001 ff30 	bl	8003450 <task_led_ctrl_speed>
 80015f0:	eeb0 7a40 	vmov.f32	s14, s0
 80015f4:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80015f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015fc:	ee17 0a90 	vmov	r0, s15
 8001600:	f001 fdc0 	bl	8003184 <task_led_ctrl_delay>
        if (only_one) animate_led_set_all_pixels(twinkle_mask, 0, 0, 0);
 8001604:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001608:	2b00      	cmp	r3, #0
 800160a:	d005      	beq.n	8001618 <animate_led_custom_twinkle+0xbc>
 800160c:	89f8      	ldrh	r0, [r7, #14]
 800160e:	2300      	movs	r3, #0
 8001610:	2200      	movs	r2, #0
 8001612:	2100      	movs	r1, #0
 8001614:	f7ff fb84 	bl	8000d20 <animate_led_set_all_pixels>
    for (int iii = 0; iii < count; iii++)
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	3301      	adds	r3, #1
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	89bb      	ldrh	r3, [r7, #12]
 8001620:	697a      	ldr	r2, [r7, #20]
 8001622:	429a      	cmp	r2, r3
 8001624:	dbb6      	blt.n	8001594 <animate_led_custom_twinkle+0x38>
 8001626:	e000      	b.n	800162a <animate_led_custom_twinkle+0xce>
                return;
 8001628:	bf00      	nop
    }

    //task_led_ctrl_delay(speed_delay / task_led_ctrl_speed());
}
 800162a:	371c      	adds	r7, #28
 800162c:	46bd      	mov	sp, r7
 800162e:	ecbd 8b02 	vpop	{d8}
 8001632:	bd90      	pop	{r4, r7, pc}
 8001634:	0800be80 	.word	0x0800be80

08001638 <animate_led_twinkle>:



void animate_led_twinkle(const strip_mask_t twinkle_mask, const color_hex_code_e color_twinkle, const uint16_t count,
                         const uint16_t speed_delay, const bool only_one)
{
 8001638:	b590      	push	{r4, r7, lr}
 800163a:	ed2d 8b02 	vpush	{d8}
 800163e:	b08b      	sub	sp, #44	; 0x2c
 8001640:	af02      	add	r7, sp, #8
 8001642:	60b9      	str	r1, [r7, #8]
 8001644:	4611      	mov	r1, r2
 8001646:	461a      	mov	r2, r3
 8001648:	4603      	mov	r3, r0
 800164a:	81fb      	strh	r3, [r7, #14]
 800164c:	460b      	mov	r3, r1
 800164e:	81bb      	strh	r3, [r7, #12]
 8001650:	4613      	mov	r3, r2
 8001652:	80fb      	strh	r3, [r7, #6]
	uint16_t strip_size = ws2812_led_get_max_strip_size(twinkle_mask);
 8001654:	89fb      	ldrh	r3, [r7, #14]
 8001656:	4618      	mov	r0, r3
 8001658:	f000 ffe4 	bl	8002624 <ws2812_led_get_max_strip_size>
 800165c:	4603      	mov	r3, r0
 800165e:	837b      	strh	r3, [r7, #26]
    uint8_t color_twinkle_rgb[sizeof(ws2812b_led_t)] = {0};
 8001660:	4b2e      	ldr	r3, [pc, #184]	; (800171c <animate_led_twinkle+0xe4>)
 8001662:	881b      	ldrh	r3, [r3, #0]
 8001664:	82bb      	strh	r3, [r7, #20]
 8001666:	2300      	movs	r3, #0
 8001668:	75bb      	strb	r3, [r7, #22]
    color_led_hex_to_rgb(color_twinkle, color_twinkle_rgb);
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	4619      	mov	r1, r3
 8001670:	68b8      	ldr	r0, [r7, #8]
 8001672:	f000 ff0d 	bl	8002490 <color_led_hex_to_rgb>
    for (int iii = 0; iii < count; iii++)
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
 800167a:	e043      	b.n	8001704 <animate_led_twinkle+0xcc>
    {
        if (task_button_press_interrupt_occurred())
 800167c:	f001 f99e 	bl	80029bc <task_button_press_interrupt_occurred>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d00d      	beq.n	80016a2 <animate_led_twinkle+0x6a>
        {
            if (task_button_press_check_interrupts(&color_twinkle_rgb[offsetof(ws2812b_led_t, red)], &color_twinkle_rgb[offsetof(ws2812b_led_t, green)], &color_twinkle_rgb[offsetof(ws2812b_led_t, blue)]))
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	1c9a      	adds	r2, r3, #2
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	1c59      	adds	r1, r3, #1
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	4618      	mov	r0, r3
 8001698:	f001 f9f4 	bl	8002a84 <task_button_press_check_interrupts>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d135      	bne.n	800170e <animate_led_twinkle+0xd6>
            {
                return;
            }
        }
        animate_led_set_pixel(twinkle_mask, random_num(0, strip_size),
 80016a2:	8b7b      	ldrh	r3, [r7, #26]
 80016a4:	4619      	mov	r1, r3
 80016a6:	2000      	movs	r0, #0
 80016a8:	f009 fb46 	bl	800ad38 <random_num>
 80016ac:	4603      	mov	r3, r0
 80016ae:	b299      	uxth	r1, r3
 80016b0:	7d3a      	ldrb	r2, [r7, #20]
 80016b2:	7d7c      	ldrb	r4, [r7, #21]
 80016b4:	7dbb      	ldrb	r3, [r7, #22]
 80016b6:	89f8      	ldrh	r0, [r7, #14]
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	4623      	mov	r3, r4
 80016bc:	f7ff fa72 	bl	8000ba4 <animate_led_set_pixel>
                              (color_twinkle_rgb[offsetof(ws2812b_led_t, red)]),
                              (color_twinkle_rgb[offsetof(ws2812b_led_t, green)]),
                              (color_twinkle_rgb[offsetof(ws2812b_led_t, blue)]));
        animate_led_show_strip(twinkle_mask);
 80016c0:	89fb      	ldrh	r3, [r7, #14]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fa5e 	bl	8000b84 <animate_led_show_strip>
        task_led_ctrl_delay(speed_delay / task_led_ctrl_speed());
 80016c8:	88fb      	ldrh	r3, [r7, #6]
 80016ca:	ee07 3a90 	vmov	s15, r3
 80016ce:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80016d2:	f001 febd 	bl	8003450 <task_led_ctrl_speed>
 80016d6:	eeb0 7a40 	vmov.f32	s14, s0
 80016da:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80016de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016e2:	ee17 0a90 	vmov	r0, s15
 80016e6:	f001 fd4d 	bl	8003184 <task_led_ctrl_delay>
        if (only_one) animate_led_set_all_pixels(twinkle_mask, 0, 0, 0);
 80016ea:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d005      	beq.n	80016fe <animate_led_twinkle+0xc6>
 80016f2:	89f8      	ldrh	r0, [r7, #14]
 80016f4:	2300      	movs	r3, #0
 80016f6:	2200      	movs	r2, #0
 80016f8:	2100      	movs	r1, #0
 80016fa:	f7ff fb11 	bl	8000d20 <animate_led_set_all_pixels>
    for (int iii = 0; iii < count; iii++)
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3301      	adds	r3, #1
 8001702:	61fb      	str	r3, [r7, #28]
 8001704:	89bb      	ldrh	r3, [r7, #12]
 8001706:	69fa      	ldr	r2, [r7, #28]
 8001708:	429a      	cmp	r2, r3
 800170a:	dbb7      	blt.n	800167c <animate_led_twinkle+0x44>
 800170c:	e000      	b.n	8001710 <animate_led_twinkle+0xd8>
                return;
 800170e:	bf00      	nop
    }

    //task_led_ctrl_delay(speed_delay / task_led_ctrl_speed());
}
 8001710:	3724      	adds	r7, #36	; 0x24
 8001712:	46bd      	mov	sp, r7
 8001714:	ecbd 8b02 	vpop	{d8}
 8001718:	bd90      	pop	{r4, r7, pc}
 800171a:	bf00      	nop
 800171c:	0800be80 	.word	0x0800be80

08001720 <animate_led_custom_sparkle_only_random_color>:
}


void animate_led_custom_sparkle_only_random_color(const strip_mask_t mask_sparkle_random, const bool fill,
                                           const uint16_t speed_delay, const uint16_t led_start, const uint16_t led_stop)
{
 8001720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001722:	ed2d 8b02 	vpush	{d8}
 8001726:	b089      	sub	sp, #36	; 0x24
 8001728:	af02      	add	r7, sp, #8
 800172a:	4604      	mov	r4, r0
 800172c:	4608      	mov	r0, r1
 800172e:	4611      	mov	r1, r2
 8001730:	461a      	mov	r2, r3
 8001732:	4623      	mov	r3, r4
 8001734:	80fb      	strh	r3, [r7, #6]
 8001736:	4603      	mov	r3, r0
 8001738:	717b      	strb	r3, [r7, #5]
 800173a:	460b      	mov	r3, r1
 800173c:	807b      	strh	r3, [r7, #2]
 800173e:	4613      	mov	r3, r2
 8001740:	803b      	strh	r3, [r7, #0]
	float percent_to_fill = 0.7;
 8001742:	4b3e      	ldr	r3, [pc, #248]	; (800183c <animate_led_custom_sparkle_only_random_color+0x11c>)
 8001744:	613b      	str	r3, [r7, #16]
    uint8_t dummy_red, dummy_green, dummy_blue; // not used but not worth creating a unique function IMO
	for (uint16_t iii = 0; iii < (percent_to_fill * (float)(led_stop - led_start)); iii++)
 8001746:	2300      	movs	r3, #0
 8001748:	82fb      	strh	r3, [r7, #22]
 800174a:	e05a      	b.n	8001802 <animate_led_custom_sparkle_only_random_color+0xe2>
	{
	    if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 800174c:	f001 f936 	bl	80029bc <task_button_press_interrupt_occurred>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00b      	beq.n	800176e <animate_led_custom_sparkle_only_random_color+0x4e>
 8001756:	f107 0209 	add.w	r2, r7, #9
 800175a:	f107 010a 	add.w	r1, r7, #10
 800175e:	f107 030b 	add.w	r3, r7, #11
 8001762:	4618      	mov	r0, r3
 8001764:	f001 f98e 	bl	8002a84 <task_button_press_check_interrupts>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d15f      	bne.n	800182e <animate_led_custom_sparkle_only_random_color+0x10e>
		int pix = random_num(led_start, led_stop);
 800176e:	883b      	ldrh	r3, [r7, #0]
 8001770:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001772:	4611      	mov	r1, r2
 8001774:	4618      	mov	r0, r3
 8001776:	f009 fadf 	bl	800ad38 <random_num>
 800177a:	4603      	mov	r3, r0
 800177c:	60fb      	str	r3, [r7, #12]
		animate_led_set_pixel(mask_sparkle_random, pix, random_num(0, 255), random_num(0, 255), random_num(0, 255));
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	b29c      	uxth	r4, r3
 8001782:	21ff      	movs	r1, #255	; 0xff
 8001784:	2000      	movs	r0, #0
 8001786:	f009 fad7 	bl	800ad38 <random_num>
 800178a:	4603      	mov	r3, r0
 800178c:	b2dd      	uxtb	r5, r3
 800178e:	21ff      	movs	r1, #255	; 0xff
 8001790:	2000      	movs	r0, #0
 8001792:	f009 fad1 	bl	800ad38 <random_num>
 8001796:	4603      	mov	r3, r0
 8001798:	b2de      	uxtb	r6, r3
 800179a:	21ff      	movs	r1, #255	; 0xff
 800179c:	2000      	movs	r0, #0
 800179e:	f009 facb 	bl	800ad38 <random_num>
 80017a2:	4603      	mov	r3, r0
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	88f8      	ldrh	r0, [r7, #6]
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	4633      	mov	r3, r6
 80017ac:	462a      	mov	r2, r5
 80017ae:	4621      	mov	r1, r4
 80017b0:	f7ff f9f8 	bl	8000ba4 <animate_led_set_pixel>
		animate_led_show_strip(mask_sparkle_random);
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff f9e4 	bl	8000b84 <animate_led_show_strip>
        task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 80017bc:	887b      	ldrh	r3, [r7, #2]
 80017be:	ee07 3a90 	vmov	s15, r3
 80017c2:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80017c6:	f001 fe43 	bl	8003450 <task_led_ctrl_speed>
 80017ca:	eeb0 7a40 	vmov.f32	s14, s0
 80017ce:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80017d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017d6:	ee17 0a90 	vmov	r0, s15
 80017da:	f001 fcd3 	bl	8003184 <task_led_ctrl_delay>
		if (!fill) animate_led_set_pixel(mask_sparkle_random, pix, 0, 0, 0);
 80017de:	797b      	ldrb	r3, [r7, #5]
 80017e0:	f083 0301 	eor.w	r3, r3, #1
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d008      	beq.n	80017fc <animate_led_custom_sparkle_only_random_color+0xdc>
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	b299      	uxth	r1, r3
 80017ee:	88f8      	ldrh	r0, [r7, #6]
 80017f0:	2300      	movs	r3, #0
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	2300      	movs	r3, #0
 80017f6:	2200      	movs	r2, #0
 80017f8:	f7ff f9d4 	bl	8000ba4 <animate_led_set_pixel>
	for (uint16_t iii = 0; iii < (percent_to_fill * (float)(led_stop - led_start)); iii++)
 80017fc:	8afb      	ldrh	r3, [r7, #22]
 80017fe:	3301      	adds	r3, #1
 8001800:	82fb      	strh	r3, [r7, #22]
 8001802:	8afb      	ldrh	r3, [r7, #22]
 8001804:	ee07 3a90 	vmov	s15, r3
 8001808:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800180c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800180e:	883b      	ldrh	r3, [r7, #0]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	ee07 3a90 	vmov	s15, r3
 8001816:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800181a:	edd7 7a04 	vldr	s15, [r7, #16]
 800181e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001822:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182a:	d48f      	bmi.n	800174c <animate_led_custom_sparkle_only_random_color+0x2c>
 800182c:	e000      	b.n	8001830 <animate_led_custom_sparkle_only_random_color+0x110>
	    if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 800182e:	bf00      	nop
	}
}
 8001830:	371c      	adds	r7, #28
 8001832:	46bd      	mov	sp, r7
 8001834:	ecbd 8b02 	vpop	{d8}
 8001838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800183a:	bf00      	nop
 800183c:	3f333333 	.word	0x3f333333

08001840 <animate_led_sparkle_only_random_color>:

void animate_led_sparkle_only_random_color(const strip_mask_t mask_sparkle_random, const bool fill,
                                           const uint16_t speed_delay)
{
 8001840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001842:	ed2d 8b02 	vpush	{d8}
 8001846:	b08b      	sub	sp, #44	; 0x2c
 8001848:	af02      	add	r7, sp, #8
 800184a:	4603      	mov	r3, r0
 800184c:	80fb      	strh	r3, [r7, #6]
 800184e:	460b      	mov	r3, r1
 8001850:	717b      	strb	r3, [r7, #5]
 8001852:	4613      	mov	r3, r2
 8001854:	807b      	strh	r3, [r7, #2]
	float percent_to_fill = 0.7;
 8001856:	4b42      	ldr	r3, [pc, #264]	; (8001960 <animate_led_sparkle_only_random_color+0x120>)
 8001858:	61bb      	str	r3, [r7, #24]
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_sparkle_random);
 800185a:	88fb      	ldrh	r3, [r7, #6]
 800185c:	4618      	mov	r0, r3
 800185e:	f000 fee1 	bl	8002624 <ws2812_led_get_max_strip_size>
 8001862:	4603      	mov	r3, r0
 8001864:	82fb      	strh	r3, [r7, #22]
	uint16_t num_active_leds = ws2812_get_num_active_animation_leds(mask_sparkle_random);
 8001866:	88fb      	ldrh	r3, [r7, #6]
 8001868:	4618      	mov	r0, r3
 800186a:	f000 feb9 	bl	80025e0 <ws2812_get_num_active_animation_leds>
 800186e:	4603      	mov	r3, r0
 8001870:	82bb      	strh	r3, [r7, #20]
    uint8_t dummy_red, dummy_green, dummy_blue; // not used but not worth creating a unique function IMO
	for (uint16_t iii = 0; iii < (percent_to_fill * (float)num_active_leds); iii++)
 8001872:	2300      	movs	r3, #0
 8001874:	83fb      	strh	r3, [r7, #30]
 8001876:	e059      	b.n	800192c <animate_led_sparkle_only_random_color+0xec>
	{
	    if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001878:	f001 f8a0 	bl	80029bc <task_button_press_interrupt_occurred>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d00b      	beq.n	800189a <animate_led_sparkle_only_random_color+0x5a>
 8001882:	f107 020d 	add.w	r2, r7, #13
 8001886:	f107 010e 	add.w	r1, r7, #14
 800188a:	f107 030f 	add.w	r3, r7, #15
 800188e:	4618      	mov	r0, r3
 8001890:	f001 f8f8 	bl	8002a84 <task_button_press_check_interrupts>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d15c      	bne.n	8001954 <animate_led_sparkle_only_random_color+0x114>
		int pix = random_num(0, strip_size);
 800189a:	8afb      	ldrh	r3, [r7, #22]
 800189c:	4619      	mov	r1, r3
 800189e:	2000      	movs	r0, #0
 80018a0:	f009 fa4a 	bl	800ad38 <random_num>
 80018a4:	4603      	mov	r3, r0
 80018a6:	613b      	str	r3, [r7, #16]
		animate_led_set_pixel(mask_sparkle_random, pix, random_num(0, 255), random_num(0, 255), random_num(0, 255));
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	b29c      	uxth	r4, r3
 80018ac:	21ff      	movs	r1, #255	; 0xff
 80018ae:	2000      	movs	r0, #0
 80018b0:	f009 fa42 	bl	800ad38 <random_num>
 80018b4:	4603      	mov	r3, r0
 80018b6:	b2dd      	uxtb	r5, r3
 80018b8:	21ff      	movs	r1, #255	; 0xff
 80018ba:	2000      	movs	r0, #0
 80018bc:	f009 fa3c 	bl	800ad38 <random_num>
 80018c0:	4603      	mov	r3, r0
 80018c2:	b2de      	uxtb	r6, r3
 80018c4:	21ff      	movs	r1, #255	; 0xff
 80018c6:	2000      	movs	r0, #0
 80018c8:	f009 fa36 	bl	800ad38 <random_num>
 80018cc:	4603      	mov	r3, r0
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	88f8      	ldrh	r0, [r7, #6]
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	4633      	mov	r3, r6
 80018d6:	462a      	mov	r2, r5
 80018d8:	4621      	mov	r1, r4
 80018da:	f7ff f963 	bl	8000ba4 <animate_led_set_pixel>
		animate_led_show_strip(mask_sparkle_random);
 80018de:	88fb      	ldrh	r3, [r7, #6]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff f94f 	bl	8000b84 <animate_led_show_strip>
        task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 80018e6:	887b      	ldrh	r3, [r7, #2]
 80018e8:	ee07 3a90 	vmov	s15, r3
 80018ec:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80018f0:	f001 fdae 	bl	8003450 <task_led_ctrl_speed>
 80018f4:	eeb0 7a40 	vmov.f32	s14, s0
 80018f8:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80018fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001900:	ee17 0a90 	vmov	r0, s15
 8001904:	f001 fc3e 	bl	8003184 <task_led_ctrl_delay>
		if (!fill) animate_led_set_pixel(mask_sparkle_random, pix, 0, 0, 0);
 8001908:	797b      	ldrb	r3, [r7, #5]
 800190a:	f083 0301 	eor.w	r3, r3, #1
 800190e:	b2db      	uxtb	r3, r3
 8001910:	2b00      	cmp	r3, #0
 8001912:	d008      	beq.n	8001926 <animate_led_sparkle_only_random_color+0xe6>
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	b299      	uxth	r1, r3
 8001918:	88f8      	ldrh	r0, [r7, #6]
 800191a:	2300      	movs	r3, #0
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	2300      	movs	r3, #0
 8001920:	2200      	movs	r2, #0
 8001922:	f7ff f93f 	bl	8000ba4 <animate_led_set_pixel>
	for (uint16_t iii = 0; iii < (percent_to_fill * (float)num_active_leds); iii++)
 8001926:	8bfb      	ldrh	r3, [r7, #30]
 8001928:	3301      	adds	r3, #1
 800192a:	83fb      	strh	r3, [r7, #30]
 800192c:	8bfb      	ldrh	r3, [r7, #30]
 800192e:	ee07 3a90 	vmov	s15, r3
 8001932:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001936:	8abb      	ldrh	r3, [r7, #20]
 8001938:	ee07 3a90 	vmov	s15, r3
 800193c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001940:	edd7 7a06 	vldr	s15, [r7, #24]
 8001944:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001948:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800194c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001950:	d492      	bmi.n	8001878 <animate_led_sparkle_only_random_color+0x38>
 8001952:	e000      	b.n	8001956 <animate_led_sparkle_only_random_color+0x116>
	    if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001954:	bf00      	nop
	}
}
 8001956:	3724      	adds	r7, #36	; 0x24
 8001958:	46bd      	mov	sp, r7
 800195a:	ecbd 8b02 	vpop	{d8}
 800195e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001960:	3f333333 	.word	0x3f333333

08001964 <animate_led_rainbow_cycle>:
    }
}


void animate_led_rainbow_cycle(const strip_mask_t mask_rainbow_cycle, const uint16_t speed_delay)
{
 8001964:	b590      	push	{r4, r7, lr}
 8001966:	ed2d 8b02 	vpush	{d8}
 800196a:	b089      	sub	sp, #36	; 0x24
 800196c:	af02      	add	r7, sp, #8
 800196e:	4603      	mov	r3, r0
 8001970:	460a      	mov	r2, r1
 8001972:	80fb      	strh	r3, [r7, #6]
 8001974:	4613      	mov	r3, r2
 8001976:	80bb      	strh	r3, [r7, #4]
	uint8_t dummy_red, dummy_green, dummy_blue;
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_rainbow_cycle);
 8001978:	88fb      	ldrh	r3, [r7, #6]
 800197a:	4618      	mov	r0, r3
 800197c:	f000 fe52 	bl	8002624 <ws2812_led_get_max_strip_size>
 8001980:	4603      	mov	r3, r0
 8001982:	827b      	strh	r3, [r7, #18]
    uint8_t *c;
    uint16_t iii, jjj;
    for (jjj = 256 * 5; jjj > 0; jjj--)
 8001984:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001988:	82bb      	strh	r3, [r7, #20]
 800198a:	e06c      	b.n	8001a66 <animate_led_rainbow_cycle+0x102>
    {
        if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 800198c:	f001 f816 	bl	80029bc <task_button_press_interrupt_occurred>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d00b      	beq.n	80019ae <animate_led_rainbow_cycle+0x4a>
 8001996:	f107 0209 	add.w	r2, r7, #9
 800199a:	f107 010a 	add.w	r1, r7, #10
 800199e:	f107 030b 	add.w	r3, r7, #11
 80019a2:	4618      	mov	r0, r3
 80019a4:	f001 f86e 	bl	8002a84 <task_button_press_check_interrupts>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d15f      	bne.n	8001a6e <animate_led_rainbow_cycle+0x10a>
        for (iii = 0; iii < strip_size; iii++)
 80019ae:	2300      	movs	r3, #0
 80019b0:	82fb      	strh	r3, [r7, #22]
 80019b2:	e02f      	b.n	8001a14 <animate_led_rainbow_cycle+0xb0>
        {
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80019b4:	f001 f802 	bl	80029bc <task_button_press_interrupt_occurred>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d00b      	beq.n	80019d6 <animate_led_rainbow_cycle+0x72>
 80019be:	f107 0209 	add.w	r2, r7, #9
 80019c2:	f107 010a 	add.w	r1, r7, #10
 80019c6:	f107 030b 	add.w	r3, r7, #11
 80019ca:	4618      	mov	r0, r3
 80019cc:	f001 f85a 	bl	8002a84 <task_button_press_check_interrupts>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d14d      	bne.n	8001a72 <animate_led_rainbow_cycle+0x10e>
            c = animate_led_wheel(((iii * 256 / strip_size) + jjj) & 255);
 80019d6:	8afb      	ldrh	r3, [r7, #22]
 80019d8:	021a      	lsls	r2, r3, #8
 80019da:	8a7b      	ldrh	r3, [r7, #18]
 80019dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	8abb      	ldrh	r3, [r7, #20]
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	4413      	add	r3, r2
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	4618      	mov	r0, r3
 80019ec:	f000 f8d8 	bl	8001ba0 <animate_led_wheel>
 80019f0:	60f8      	str	r0, [r7, #12]
            animate_led_set_pixel(mask_rainbow_cycle, iii, *c, *(c + 1), *(c + 2));
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	781a      	ldrb	r2, [r3, #0]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	3301      	adds	r3, #1
 80019fa:	781c      	ldrb	r4, [r3, #0]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	3302      	adds	r3, #2
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	8af9      	ldrh	r1, [r7, #22]
 8001a04:	88f8      	ldrh	r0, [r7, #6]
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	4623      	mov	r3, r4
 8001a0a:	f7ff f8cb 	bl	8000ba4 <animate_led_set_pixel>
        for (iii = 0; iii < strip_size; iii++)
 8001a0e:	8afb      	ldrh	r3, [r7, #22]
 8001a10:	3301      	adds	r3, #1
 8001a12:	82fb      	strh	r3, [r7, #22]
 8001a14:	8afa      	ldrh	r2, [r7, #22]
 8001a16:	8a7b      	ldrh	r3, [r7, #18]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d3cb      	bcc.n	80019b4 <animate_led_rainbow_cycle+0x50>
        }
        animate_led_show_strip(mask_rainbow_cycle);
 8001a1c:	88fb      	ldrh	r3, [r7, #6]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff f8b0 	bl	8000b84 <animate_led_show_strip>
        if (LED_SPEED_10X == task_led_ctrl_speed()) task_led_ctrl_delay(0);
 8001a24:	f001 fd14 	bl	8003450 <task_led_ctrl_speed>
 8001a28:	eef0 7a40 	vmov.f32	s15, s0
 8001a2c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a34:	d103      	bne.n	8001a3e <animate_led_rainbow_cycle+0xda>
 8001a36:	2000      	movs	r0, #0
 8001a38:	f001 fba4 	bl	8003184 <task_led_ctrl_delay>
 8001a3c:	e010      	b.n	8001a60 <animate_led_rainbow_cycle+0xfc>
        else task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 8001a3e:	88bb      	ldrh	r3, [r7, #4]
 8001a40:	ee07 3a90 	vmov	s15, r3
 8001a44:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001a48:	f001 fd02 	bl	8003450 <task_led_ctrl_speed>
 8001a4c:	eeb0 7a40 	vmov.f32	s14, s0
 8001a50:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001a54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a58:	ee17 0a90 	vmov	r0, s15
 8001a5c:	f001 fb92 	bl	8003184 <task_led_ctrl_delay>
    for (jjj = 256 * 5; jjj > 0; jjj--)
 8001a60:	8abb      	ldrh	r3, [r7, #20]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	82bb      	strh	r3, [r7, #20]
 8001a66:	8abb      	ldrh	r3, [r7, #20]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d18f      	bne.n	800198c <animate_led_rainbow_cycle+0x28>
 8001a6c:	e002      	b.n	8001a74 <animate_led_rainbow_cycle+0x110>
        if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001a6e:	bf00      	nop
 8001a70:	e000      	b.n	8001a74 <animate_led_rainbow_cycle+0x110>
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001a72:	bf00      	nop
    }
}
 8001a74:	371c      	adds	r7, #28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	ecbd 8b02 	vpop	{d8}
 8001a7c:	bd90      	pop	{r4, r7, pc}

08001a7e <animate_led_custom_rainbow_cycle>:


void animate_led_custom_rainbow_cycle(const strip_mask_t mask_rainbow_cycle, const uint16_t speed_delay, const uint16_t led_start, const uint16_t led_stop)
{
 8001a7e:	b590      	push	{r4, r7, lr}
 8001a80:	ed2d 8b02 	vpush	{d8}
 8001a84:	b089      	sub	sp, #36	; 0x24
 8001a86:	af02      	add	r7, sp, #8
 8001a88:	4604      	mov	r4, r0
 8001a8a:	4608      	mov	r0, r1
 8001a8c:	4611      	mov	r1, r2
 8001a8e:	461a      	mov	r2, r3
 8001a90:	4623      	mov	r3, r4
 8001a92:	80fb      	strh	r3, [r7, #6]
 8001a94:	4603      	mov	r3, r0
 8001a96:	80bb      	strh	r3, [r7, #4]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	807b      	strh	r3, [r7, #2]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	803b      	strh	r3, [r7, #0]
	uint8_t dummy_red, dummy_green, dummy_blue;
    uint8_t *c;
    uint16_t iii, jjj;
    for (jjj = 0; jjj < 256 * 5; jjj++)
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	82bb      	strh	r3, [r7, #20]
 8001aa4:	e06e      	b.n	8001b84 <animate_led_custom_rainbow_cycle+0x106>
    {
        if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001aa6:	f000 ff89 	bl	80029bc <task_button_press_interrupt_occurred>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d00b      	beq.n	8001ac8 <animate_led_custom_rainbow_cycle+0x4a>
 8001ab0:	f107 020d 	add.w	r2, r7, #13
 8001ab4:	f107 010e 	add.w	r1, r7, #14
 8001ab8:	f107 030f 	add.w	r3, r7, #15
 8001abc:	4618      	mov	r0, r3
 8001abe:	f000 ffe1 	bl	8002a84 <task_button_press_check_interrupts>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d162      	bne.n	8001b8e <animate_led_custom_rainbow_cycle+0x110>
        for (iii = led_start; iii <= led_stop; iii++)
 8001ac8:	887b      	ldrh	r3, [r7, #2]
 8001aca:	82fb      	strh	r3, [r7, #22]
 8001acc:	e031      	b.n	8001b32 <animate_led_custom_rainbow_cycle+0xb4>
        {
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001ace:	f000 ff75 	bl	80029bc <task_button_press_interrupt_occurred>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d00b      	beq.n	8001af0 <animate_led_custom_rainbow_cycle+0x72>
 8001ad8:	f107 020d 	add.w	r2, r7, #13
 8001adc:	f107 010e 	add.w	r1, r7, #14
 8001ae0:	f107 030f 	add.w	r3, r7, #15
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f000 ffcd 	bl	8002a84 <task_button_press_check_interrupts>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d150      	bne.n	8001b92 <animate_led_custom_rainbow_cycle+0x114>
            c = animate_led_wheel(((iii * 256 / (led_start - led_stop)) + jjj) & 255);
 8001af0:	8afb      	ldrh	r3, [r7, #22]
 8001af2:	021a      	lsls	r2, r3, #8
 8001af4:	8879      	ldrh	r1, [r7, #2]
 8001af6:	883b      	ldrh	r3, [r7, #0]
 8001af8:	1acb      	subs	r3, r1, r3
 8001afa:	fb92 f3f3 	sdiv	r3, r2, r3
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	8abb      	ldrh	r3, [r7, #20]
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	4413      	add	r3, r2
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f000 f849 	bl	8001ba0 <animate_led_wheel>
 8001b0e:	6138      	str	r0, [r7, #16]
            animate_led_set_pixel(mask_rainbow_cycle, iii, *c, *(c + 1), *(c + 2));
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	781a      	ldrb	r2, [r3, #0]
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	3301      	adds	r3, #1
 8001b18:	781c      	ldrb	r4, [r3, #0]
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	3302      	adds	r3, #2
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	8af9      	ldrh	r1, [r7, #22]
 8001b22:	88f8      	ldrh	r0, [r7, #6]
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	4623      	mov	r3, r4
 8001b28:	f7ff f83c 	bl	8000ba4 <animate_led_set_pixel>
        for (iii = led_start; iii <= led_stop; iii++)
 8001b2c:	8afb      	ldrh	r3, [r7, #22]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	82fb      	strh	r3, [r7, #22]
 8001b32:	8afa      	ldrh	r2, [r7, #22]
 8001b34:	883b      	ldrh	r3, [r7, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d9c9      	bls.n	8001ace <animate_led_custom_rainbow_cycle+0x50>
        }
        animate_led_show_strip(mask_rainbow_cycle);
 8001b3a:	88fb      	ldrh	r3, [r7, #6]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff f821 	bl	8000b84 <animate_led_show_strip>
        if (LED_SPEED_10X == task_led_ctrl_speed()) task_led_ctrl_delay(0);
 8001b42:	f001 fc85 	bl	8003450 <task_led_ctrl_speed>
 8001b46:	eef0 7a40 	vmov.f32	s15, s0
 8001b4a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b52:	d103      	bne.n	8001b5c <animate_led_custom_rainbow_cycle+0xde>
 8001b54:	2000      	movs	r0, #0
 8001b56:	f001 fb15 	bl	8003184 <task_led_ctrl_delay>
 8001b5a:	e010      	b.n	8001b7e <animate_led_custom_rainbow_cycle+0x100>
        else task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 8001b5c:	88bb      	ldrh	r3, [r7, #4]
 8001b5e:	ee07 3a90 	vmov	s15, r3
 8001b62:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001b66:	f001 fc73 	bl	8003450 <task_led_ctrl_speed>
 8001b6a:	eeb0 7a40 	vmov.f32	s14, s0
 8001b6e:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001b72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b76:	ee17 0a90 	vmov	r0, s15
 8001b7a:	f001 fb03 	bl	8003184 <task_led_ctrl_delay>
    for (jjj = 0; jjj < 256 * 5; jjj++)
 8001b7e:	8abb      	ldrh	r3, [r7, #20]
 8001b80:	3301      	adds	r3, #1
 8001b82:	82bb      	strh	r3, [r7, #20]
 8001b84:	8abb      	ldrh	r3, [r7, #20]
 8001b86:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001b8a:	d38c      	bcc.n	8001aa6 <animate_led_custom_rainbow_cycle+0x28>
 8001b8c:	e002      	b.n	8001b94 <animate_led_custom_rainbow_cycle+0x116>
        if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001b8e:	bf00      	nop
 8001b90:	e000      	b.n	8001b94 <animate_led_custom_rainbow_cycle+0x116>
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001b92:	bf00      	nop
    }
}
 8001b94:	371c      	adds	r7, #28
 8001b96:	46bd      	mov	sp, r7
 8001b98:	ecbd 8b02 	vpop	{d8}
 8001b9c:	bd90      	pop	{r4, r7, pc}
	...

08001ba0 <animate_led_wheel>:


uint8_t* animate_led_wheel(uint8_t wheel_pos)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	71fb      	strb	r3, [r7, #7]
    static uint8_t c[3];
    if (wheel_pos < 85)
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	2b54      	cmp	r3, #84	; 0x54
 8001bae:	d813      	bhi.n	8001bd8 <animate_led_wheel+0x38>
    {
        c[0] = wheel_pos * 3;
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	0052      	lsls	r2, r2, #1
 8001bb6:	4413      	add	r3, r2
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	4b23      	ldr	r3, [pc, #140]	; (8001c48 <animate_led_wheel+0xa8>)
 8001bbc:	701a      	strb	r2, [r3, #0]
        c[1] = 255 - wheel_pos * 3; 
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	4b1e      	ldr	r3, [pc, #120]	; (8001c48 <animate_led_wheel+0xa8>)
 8001bce:	705a      	strb	r2, [r3, #1]
        c[2] = 0;
 8001bd0:	4b1d      	ldr	r3, [pc, #116]	; (8001c48 <animate_led_wheel+0xa8>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	709a      	strb	r2, [r3, #2]
 8001bd6:	e02f      	b.n	8001c38 <animate_led_wheel+0x98>
    }
    else if(wheel_pos < 170)
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	2ba9      	cmp	r3, #169	; 0xa9
 8001bdc:	d816      	bhi.n	8001c0c <animate_led_wheel+0x6c>
    {
        wheel_pos -= 85;
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	3b55      	subs	r3, #85	; 0x55
 8001be2:	71fb      	strb	r3, [r7, #7]
        c[0] = 255 - wheel_pos * 3;
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	461a      	mov	r2, r3
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <animate_led_wheel+0xa8>)
 8001bf4:	701a      	strb	r2, [r3, #0]
        c[1] = 0;
 8001bf6:	4b14      	ldr	r3, [pc, #80]	; (8001c48 <animate_led_wheel+0xa8>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	705a      	strb	r2, [r3, #1]
        c[2] = wheel_pos * 3;
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	0052      	lsls	r2, r2, #1
 8001c02:	4413      	add	r3, r2
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <animate_led_wheel+0xa8>)
 8001c08:	709a      	strb	r2, [r3, #2]
 8001c0a:	e015      	b.n	8001c38 <animate_led_wheel+0x98>
    }
    else
    {
        wheel_pos -= 170;
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	3356      	adds	r3, #86	; 0x56
 8001c10:	71fb      	strb	r3, [r7, #7]
        c[0] = 0;
 8001c12:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <animate_led_wheel+0xa8>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]
        c[1] = wheel_pos * 3; 
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	0052      	lsls	r2, r2, #1
 8001c1e:	4413      	add	r3, r2
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <animate_led_wheel+0xa8>)
 8001c24:	705a      	strb	r2, [r3, #1]
        c[2] = 255 - wheel_pos * 3;
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	3b01      	subs	r3, #1
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <animate_led_wheel+0xa8>)
 8001c36:	709a      	strb	r2, [r3, #2]
    }
    return c;
 8001c38:	4b03      	ldr	r3, [pc, #12]	; (8001c48 <animate_led_wheel+0xa8>)
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	200000f0 	.word	0x200000f0

08001c4c <animate_led_custom_theater_chase>:
}


void animate_led_custom_theater_chase(const strip_mask_t mask_theater_chase, const color_hex_code_e color_theater_chase,
                               const uint16_t speed_delay, const uint16_t led_start, const uint16_t led_stop)
{
 8001c4c:	b590      	push	{r4, r7, lr}
 8001c4e:	ed2d 8b02 	vpush	{d8}
 8001c52:	b08d      	sub	sp, #52	; 0x34
 8001c54:	af02      	add	r7, sp, #8
 8001c56:	60b9      	str	r1, [r7, #8]
 8001c58:	4611      	mov	r1, r2
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	81fb      	strh	r3, [r7, #14]
 8001c60:	460b      	mov	r3, r1
 8001c62:	81bb      	strh	r3, [r7, #12]
 8001c64:	4613      	mov	r3, r2
 8001c66:	80fb      	strh	r3, [r7, #6]
    uint8_t color_theater_chase_rgb[sizeof(ws2812b_led_t)] = {0};
 8001c68:	4b48      	ldr	r3, [pc, #288]	; (8001d8c <animate_led_custom_theater_chase+0x140>)
 8001c6a:	881b      	ldrh	r3, [r3, #0]
 8001c6c:	82bb      	strh	r3, [r7, #20]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	75bb      	strb	r3, [r7, #22]
    color_led_hex_to_rgb(color_theater_chase, color_theater_chase_rgb);
 8001c72:	f107 0314 	add.w	r3, r7, #20
 8001c76:	4619      	mov	r1, r3
 8001c78:	68b8      	ldr	r0, [r7, #8]
 8001c7a:	f000 fc09 	bl	8002490 <color_led_hex_to_rgb>
    for (int jjj = 0; jjj < 10; jjj++)
 8001c7e:	2300      	movs	r3, #0
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
 8001c82:	e077      	b.n	8001d74 <animate_led_custom_theater_chase+0x128>
    {
        for (int qqq = 0; qqq < 3; qqq++)
 8001c84:	2300      	movs	r3, #0
 8001c86:	623b      	str	r3, [r7, #32]
 8001c88:	e06e      	b.n	8001d68 <animate_led_custom_theater_chase+0x11c>
        {
            if (task_button_press_interrupt_occurred())
 8001c8a:	f000 fe97 	bl	80029bc <task_button_press_interrupt_occurred>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d00d      	beq.n	8001cb0 <animate_led_custom_theater_chase+0x64>
            {
                if (task_button_press_check_interrupts(&color_theater_chase_rgb[offsetof(ws2812b_led_t, red)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, green)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]))
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	1c9a      	adds	r2, r3, #2
 8001c9a:	f107 0314 	add.w	r3, r7, #20
 8001c9e:	1c59      	adds	r1, r3, #1
 8001ca0:	f107 0314 	add.w	r3, r7, #20
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f000 feed 	bl	8002a84 <task_button_press_check_interrupts>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d165      	bne.n	8001d7c <animate_led_custom_theater_chase+0x130>
                {
                    return;
                }
            }
            for (int iii = led_start; iii < led_stop; iii += 3)
 8001cb0:	88fb      	ldrh	r3, [r7, #6]
 8001cb2:	61fb      	str	r3, [r7, #28]
 8001cb4:	e010      	b.n	8001cd8 <animate_led_custom_theater_chase+0x8c>
            {
                animate_led_set_pixel(mask_theater_chase, iii + qqq,
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	6a3b      	ldr	r3, [r7, #32]
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	4413      	add	r3, r2
 8001cc0:	b299      	uxth	r1, r3
 8001cc2:	7d3a      	ldrb	r2, [r7, #20]
 8001cc4:	7d7c      	ldrb	r4, [r7, #21]
 8001cc6:	7dbb      	ldrb	r3, [r7, #22]
 8001cc8:	89f8      	ldrh	r0, [r7, #14]
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	4623      	mov	r3, r4
 8001cce:	f7fe ff69 	bl	8000ba4 <animate_led_set_pixel>
            for (int iii = led_start; iii < led_stop; iii += 3)
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3303      	adds	r3, #3
 8001cd6:	61fb      	str	r3, [r7, #28]
 8001cd8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001cdc:	69fa      	ldr	r2, [r7, #28]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	dbe9      	blt.n	8001cb6 <animate_led_custom_theater_chase+0x6a>
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, red)]),
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, green)]),
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]));
            }
            animate_led_show_strip(mask_theater_chase);
 8001ce2:	89fb      	ldrh	r3, [r7, #14]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7fe ff4d 	bl	8000b84 <animate_led_show_strip>
            if (task_button_press_interrupt_occurred())
 8001cea:	f000 fe67 	bl	80029bc <task_button_press_interrupt_occurred>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d00d      	beq.n	8001d10 <animate_led_custom_theater_chase+0xc4>
            {
                if (task_button_press_check_interrupts(&color_theater_chase_rgb[offsetof(ws2812b_led_t, red)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, green)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]))
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	1c9a      	adds	r2, r3, #2
 8001cfa:	f107 0314 	add.w	r3, r7, #20
 8001cfe:	1c59      	adds	r1, r3, #1
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	4618      	mov	r0, r3
 8001d06:	f000 febd 	bl	8002a84 <task_button_press_check_interrupts>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d137      	bne.n	8001d80 <animate_led_custom_theater_chase+0x134>
                {
                    return;
                }
            }
            task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 8001d10:	89bb      	ldrh	r3, [r7, #12]
 8001d12:	ee07 3a90 	vmov	s15, r3
 8001d16:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001d1a:	f001 fb99 	bl	8003450 <task_led_ctrl_speed>
 8001d1e:	eeb0 7a40 	vmov.f32	s14, s0
 8001d22:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001d26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d2a:	ee17 0a90 	vmov	r0, s15
 8001d2e:	f001 fa29 	bl	8003184 <task_led_ctrl_delay>
            for (int iii = led_start; iii < led_stop; iii += 3) animate_led_set_pixel(mask_theater_chase, iii + qqq, 0, 0, 0); // turn every third pixel off
 8001d32:	88fb      	ldrh	r3, [r7, #6]
 8001d34:	61bb      	str	r3, [r7, #24]
 8001d36:	e00f      	b.n	8001d58 <animate_led_custom_theater_chase+0x10c>
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	6a3b      	ldr	r3, [r7, #32]
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	4413      	add	r3, r2
 8001d42:	b299      	uxth	r1, r3
 8001d44:	89f8      	ldrh	r0, [r7, #14]
 8001d46:	2300      	movs	r3, #0
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f7fe ff29 	bl	8000ba4 <animate_led_set_pixel>
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	3303      	adds	r3, #3
 8001d56:	61bb      	str	r3, [r7, #24]
 8001d58:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	dbea      	blt.n	8001d38 <animate_led_custom_theater_chase+0xec>
        for (int qqq = 0; qqq < 3; qqq++)
 8001d62:	6a3b      	ldr	r3, [r7, #32]
 8001d64:	3301      	adds	r3, #1
 8001d66:	623b      	str	r3, [r7, #32]
 8001d68:	6a3b      	ldr	r3, [r7, #32]
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	dd8d      	ble.n	8001c8a <animate_led_custom_theater_chase+0x3e>
    for (int jjj = 0; jjj < 10; jjj++)
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	3301      	adds	r3, #1
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	2b09      	cmp	r3, #9
 8001d78:	dd84      	ble.n	8001c84 <animate_led_custom_theater_chase+0x38>
 8001d7a:	e002      	b.n	8001d82 <animate_led_custom_theater_chase+0x136>
                    return;
 8001d7c:	bf00      	nop
 8001d7e:	e000      	b.n	8001d82 <animate_led_custom_theater_chase+0x136>
                    return;
 8001d80:	bf00      	nop
        }
    }
}
 8001d82:	372c      	adds	r7, #44	; 0x2c
 8001d84:	46bd      	mov	sp, r7
 8001d86:	ecbd 8b02 	vpop	{d8}
 8001d8a:	bd90      	pop	{r4, r7, pc}
 8001d8c:	0800be80 	.word	0x0800be80

08001d90 <animate_led_theater_chase>:


void animate_led_theater_chase(const strip_mask_t mask_theater_chase, const color_hex_code_e color_theater_chase,
                               const uint16_t speed_delay)
{
 8001d90:	b590      	push	{r4, r7, lr}
 8001d92:	ed2d 8b02 	vpush	{d8}
 8001d96:	b08b      	sub	sp, #44	; 0x2c
 8001d98:	af02      	add	r7, sp, #8
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	6039      	str	r1, [r7, #0]
 8001d9e:	80fb      	strh	r3, [r7, #6]
 8001da0:	4613      	mov	r3, r2
 8001da2:	80bb      	strh	r3, [r7, #4]
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_theater_chase);
 8001da4:	88fb      	ldrh	r3, [r7, #6]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f000 fc3c 	bl	8002624 <ws2812_led_get_max_strip_size>
 8001dac:	4603      	mov	r3, r0
 8001dae:	81fb      	strh	r3, [r7, #14]
    uint8_t color_theater_chase_rgb[sizeof(ws2812b_led_t)] = {0};
 8001db0:	4b47      	ldr	r3, [pc, #284]	; (8001ed0 <animate_led_theater_chase+0x140>)
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	813b      	strh	r3, [r7, #8]
 8001db6:	2300      	movs	r3, #0
 8001db8:	72bb      	strb	r3, [r7, #10]
    color_led_hex_to_rgb(color_theater_chase, color_theater_chase_rgb);
 8001dba:	f107 0308 	add.w	r3, r7, #8
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	6838      	ldr	r0, [r7, #0]
 8001dc2:	f000 fb65 	bl	8002490 <color_led_hex_to_rgb>
    for (int jjj = 0; jjj < 10; jjj++)
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
 8001dca:	e075      	b.n	8001eb8 <animate_led_theater_chase+0x128>
    {
        for (int qqq = 0; qqq < 3; qqq++)
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61bb      	str	r3, [r7, #24]
 8001dd0:	e06c      	b.n	8001eac <animate_led_theater_chase+0x11c>
        {
            if (task_button_press_interrupt_occurred())
 8001dd2:	f000 fdf3 	bl	80029bc <task_button_press_interrupt_occurred>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00d      	beq.n	8001df8 <animate_led_theater_chase+0x68>
            {
                if (task_button_press_check_interrupts(&color_theater_chase_rgb[offsetof(ws2812b_led_t, red)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, green)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]))
 8001ddc:	f107 0308 	add.w	r3, r7, #8
 8001de0:	1c9a      	adds	r2, r3, #2
 8001de2:	f107 0308 	add.w	r3, r7, #8
 8001de6:	1c59      	adds	r1, r3, #1
 8001de8:	f107 0308 	add.w	r3, r7, #8
 8001dec:	4618      	mov	r0, r3
 8001dee:	f000 fe49 	bl	8002a84 <task_button_press_check_interrupts>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d163      	bne.n	8001ec0 <animate_led_theater_chase+0x130>
                {
                    return;
                }
            }
            for (int iii = 0; iii < strip_size; iii += 3)
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	e010      	b.n	8001e20 <animate_led_theater_chase+0x90>
            {
                animate_led_set_pixel(mask_theater_chase, iii + qqq,
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	4413      	add	r3, r2
 8001e08:	b299      	uxth	r1, r3
 8001e0a:	7a3a      	ldrb	r2, [r7, #8]
 8001e0c:	7a7c      	ldrb	r4, [r7, #9]
 8001e0e:	7abb      	ldrb	r3, [r7, #10]
 8001e10:	88f8      	ldrh	r0, [r7, #6]
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	4623      	mov	r3, r4
 8001e16:	f7fe fec5 	bl	8000ba4 <animate_led_set_pixel>
            for (int iii = 0; iii < strip_size; iii += 3)
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	3303      	adds	r3, #3
 8001e1e:	617b      	str	r3, [r7, #20]
 8001e20:	89fb      	ldrh	r3, [r7, #14]
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	dbea      	blt.n	8001dfe <animate_led_theater_chase+0x6e>
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, red)]),
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, green)]),
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]));
            }
            animate_led_show_strip(mask_theater_chase);
 8001e28:	88fb      	ldrh	r3, [r7, #6]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7fe feaa 	bl	8000b84 <animate_led_show_strip>
            if (task_button_press_interrupt_occurred())
 8001e30:	f000 fdc4 	bl	80029bc <task_button_press_interrupt_occurred>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00d      	beq.n	8001e56 <animate_led_theater_chase+0xc6>
            {
                if (task_button_press_check_interrupts(&color_theater_chase_rgb[offsetof(ws2812b_led_t, red)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, green)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]))
 8001e3a:	f107 0308 	add.w	r3, r7, #8
 8001e3e:	1c9a      	adds	r2, r3, #2
 8001e40:	f107 0308 	add.w	r3, r7, #8
 8001e44:	1c59      	adds	r1, r3, #1
 8001e46:	f107 0308 	add.w	r3, r7, #8
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 fe1a 	bl	8002a84 <task_button_press_check_interrupts>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d136      	bne.n	8001ec4 <animate_led_theater_chase+0x134>
                {
                    return;
                }
            }
            task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 8001e56:	88bb      	ldrh	r3, [r7, #4]
 8001e58:	ee07 3a90 	vmov	s15, r3
 8001e5c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001e60:	f001 faf6 	bl	8003450 <task_led_ctrl_speed>
 8001e64:	eeb0 7a40 	vmov.f32	s14, s0
 8001e68:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001e6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e70:	ee17 0a90 	vmov	r0, s15
 8001e74:	f001 f986 	bl	8003184 <task_led_ctrl_delay>
            for (int iii = 0; iii < strip_size; iii += 3) animate_led_set_pixel(mask_theater_chase, iii + qqq, 0, 0, 0); // turn every third pixel off
 8001e78:	2300      	movs	r3, #0
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	e00f      	b.n	8001e9e <animate_led_theater_chase+0x10e>
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	4413      	add	r3, r2
 8001e88:	b299      	uxth	r1, r3
 8001e8a:	88f8      	ldrh	r0, [r7, #6]
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	2300      	movs	r3, #0
 8001e92:	2200      	movs	r2, #0
 8001e94:	f7fe fe86 	bl	8000ba4 <animate_led_set_pixel>
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	3303      	adds	r3, #3
 8001e9c:	613b      	str	r3, [r7, #16]
 8001e9e:	89fb      	ldrh	r3, [r7, #14]
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	dbeb      	blt.n	8001e7e <animate_led_theater_chase+0xee>
        for (int qqq = 0; qqq < 3; qqq++)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	61bb      	str	r3, [r7, #24]
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	dd8f      	ble.n	8001dd2 <animate_led_theater_chase+0x42>
    for (int jjj = 0; jjj < 10; jjj++)
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	61fb      	str	r3, [r7, #28]
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	2b09      	cmp	r3, #9
 8001ebc:	dd86      	ble.n	8001dcc <animate_led_theater_chase+0x3c>
 8001ebe:	e002      	b.n	8001ec6 <animate_led_theater_chase+0x136>
                    return;
 8001ec0:	bf00      	nop
 8001ec2:	e000      	b.n	8001ec6 <animate_led_theater_chase+0x136>
                    return;
 8001ec4:	bf00      	nop
        }
    }
}
 8001ec6:	3724      	adds	r7, #36	; 0x24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	ecbd 8b02 	vpop	{d8}
 8001ece:	bd90      	pop	{r4, r7, pc}
 8001ed0:	0800be80 	.word	0x0800be80

08001ed4 <animate_led_custom_theater_chase_rainbow>:


void animate_led_custom_theater_chase_rainbow(const strip_mask_t mask_theater_chase, const uint16_t speed_delay, const uint16_t led_start, const uint16_t led_stop)
{
 8001ed4:	b590      	push	{r4, r7, lr}
 8001ed6:	ed2d 8b02 	vpush	{d8}
 8001eda:	b08b      	sub	sp, #44	; 0x2c
 8001edc:	af02      	add	r7, sp, #8
 8001ede:	4604      	mov	r4, r0
 8001ee0:	4608      	mov	r0, r1
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4623      	mov	r3, r4
 8001ee8:	80fb      	strh	r3, [r7, #6]
 8001eea:	4603      	mov	r3, r0
 8001eec:	80bb      	strh	r3, [r7, #4]
 8001eee:	460b      	mov	r3, r1
 8001ef0:	807b      	strh	r3, [r7, #2]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	803b      	strh	r3, [r7, #0]
	uint8_t dummy_red, dummy_green, dummy_blue;
    uint8_t *c;
    for (int jjj = 0; jjj < 256; jjj++) // cycle all 256 colors in the animate_led_wheel
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
 8001efa:	e08a      	b.n	8002012 <animate_led_custom_theater_chase_rainbow+0x13e>
    {
        for (int qqq = 0; qqq < 3; qqq++)
 8001efc:	2300      	movs	r3, #0
 8001efe:	61bb      	str	r3, [r7, #24]
 8001f00:	e080      	b.n	8002004 <animate_led_custom_theater_chase_rainbow+0x130>
        {
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001f02:	f000 fd5b 	bl	80029bc <task_button_press_interrupt_occurred>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00b      	beq.n	8001f24 <animate_led_custom_theater_chase_rainbow+0x50>
 8001f0c:	f107 0209 	add.w	r2, r7, #9
 8001f10:	f107 010a 	add.w	r1, r7, #10
 8001f14:	f107 030b 	add.w	r3, r7, #11
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f000 fdb3 	bl	8002a84 <task_button_press_check_interrupts>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d17b      	bne.n	800201c <animate_led_custom_theater_chase_rainbow+0x148>
            for (int iii = led_start; iii <= led_stop; iii += 3)
 8001f24:	887b      	ldrh	r3, [r7, #2]
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	e039      	b.n	8001f9e <animate_led_custom_theater_chase_rainbow+0xca>
            {
                if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001f2a:	f000 fd47 	bl	80029bc <task_button_press_interrupt_occurred>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00b      	beq.n	8001f4c <animate_led_custom_theater_chase_rainbow+0x78>
 8001f34:	f107 0209 	add.w	r2, r7, #9
 8001f38:	f107 010a 	add.w	r1, r7, #10
 8001f3c:	f107 030b 	add.w	r3, r7, #11
 8001f40:	4618      	mov	r0, r3
 8001f42:	f000 fd9f 	bl	8002a84 <task_button_press_check_interrupts>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d169      	bne.n	8002020 <animate_led_custom_theater_chase_rainbow+0x14c>
                c = animate_led_wheel((iii + jjj) % 255);
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	441a      	add	r2, r3
 8001f52:	4b36      	ldr	r3, [pc, #216]	; (800202c <animate_led_custom_theater_chase_rainbow+0x158>)
 8001f54:	fb83 1302 	smull	r1, r3, r3, r2
 8001f58:	4413      	add	r3, r2
 8001f5a:	11d9      	asrs	r1, r3, #7
 8001f5c:	17d3      	asrs	r3, r2, #31
 8001f5e:	1ac9      	subs	r1, r1, r3
 8001f60:	460b      	mov	r3, r1
 8001f62:	021b      	lsls	r3, r3, #8
 8001f64:	1a5b      	subs	r3, r3, r1
 8001f66:	1ad1      	subs	r1, r2, r3
 8001f68:	b2cb      	uxtb	r3, r1
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff fe18 	bl	8001ba0 <animate_led_wheel>
 8001f70:	60f8      	str	r0, [r7, #12]
                animate_led_set_pixel(mask_theater_chase, iii + qqq, *c, *(c + 1), *(c + 2)); // turn every third pixel on
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	4413      	add	r3, r2
 8001f7c:	b299      	uxth	r1, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	781a      	ldrb	r2, [r3, #0]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	3301      	adds	r3, #1
 8001f86:	781c      	ldrb	r4, [r3, #0]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	3302      	adds	r3, #2
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	88f8      	ldrh	r0, [r7, #6]
 8001f90:	9300      	str	r3, [sp, #0]
 8001f92:	4623      	mov	r3, r4
 8001f94:	f7fe fe06 	bl	8000ba4 <animate_led_set_pixel>
            for (int iii = led_start; iii <= led_stop; iii += 3)
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	3303      	adds	r3, #3
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	883b      	ldrh	r3, [r7, #0]
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	ddc1      	ble.n	8001f2a <animate_led_custom_theater_chase_rainbow+0x56>
            }
            animate_led_show_strip(mask_theater_chase);
 8001fa6:	88fb      	ldrh	r3, [r7, #6]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe fdeb 	bl	8000b84 <animate_led_show_strip>
            task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 8001fae:	88bb      	ldrh	r3, [r7, #4]
 8001fb0:	ee07 3a90 	vmov	s15, r3
 8001fb4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001fb8:	f001 fa4a 	bl	8003450 <task_led_ctrl_speed>
 8001fbc:	eeb0 7a40 	vmov.f32	s14, s0
 8001fc0:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001fc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fc8:	ee17 0a90 	vmov	r0, s15
 8001fcc:	f001 f8da 	bl	8003184 <task_led_ctrl_delay>
            for (int iii = led_start; iii <= led_stop; iii += 3) animate_led_set_pixel(mask_theater_chase, iii + qqq, 0, 0, 0); // turn every third pixel off
 8001fd0:	887b      	ldrh	r3, [r7, #2]
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	e00f      	b.n	8001ff6 <animate_led_custom_theater_chase_rainbow+0x122>
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	4413      	add	r3, r2
 8001fe0:	b299      	uxth	r1, r3
 8001fe2:	88f8      	ldrh	r0, [r7, #6]
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	2300      	movs	r3, #0
 8001fea:	2200      	movs	r2, #0
 8001fec:	f7fe fdda 	bl	8000ba4 <animate_led_set_pixel>
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	3303      	adds	r3, #3
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	883b      	ldrh	r3, [r7, #0]
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	ddeb      	ble.n	8001fd6 <animate_led_custom_theater_chase_rainbow+0x102>
        for (int qqq = 0; qqq < 3; qqq++)
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	3301      	adds	r3, #1
 8002002:	61bb      	str	r3, [r7, #24]
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	2b02      	cmp	r3, #2
 8002008:	f77f af7b 	ble.w	8001f02 <animate_led_custom_theater_chase_rainbow+0x2e>
    for (int jjj = 0; jjj < 256; jjj++) // cycle all 256 colors in the animate_led_wheel
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	3301      	adds	r3, #1
 8002010:	61fb      	str	r3, [r7, #28]
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	2bff      	cmp	r3, #255	; 0xff
 8002016:	f77f af71 	ble.w	8001efc <animate_led_custom_theater_chase_rainbow+0x28>
 800201a:	e002      	b.n	8002022 <animate_led_custom_theater_chase_rainbow+0x14e>
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 800201c:	bf00      	nop
 800201e:	e000      	b.n	8002022 <animate_led_custom_theater_chase_rainbow+0x14e>
                if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8002020:	bf00      	nop
        }
    }
}
 8002022:	3724      	adds	r7, #36	; 0x24
 8002024:	46bd      	mov	sp, r7
 8002026:	ecbd 8b02 	vpop	{d8}
 800202a:	bd90      	pop	{r4, r7, pc}
 800202c:	80808081 	.word	0x80808081

08002030 <animate_led_theater_chase_rainbow>:


void animate_led_theater_chase_rainbow(const strip_mask_t mask_theater_chase, const uint16_t speed_delay)
{
 8002030:	b590      	push	{r4, r7, lr}
 8002032:	ed2d 8b02 	vpush	{d8}
 8002036:	b08d      	sub	sp, #52	; 0x34
 8002038:	af02      	add	r7, sp, #8
 800203a:	4603      	mov	r3, r0
 800203c:	460a      	mov	r2, r1
 800203e:	80fb      	strh	r3, [r7, #6]
 8002040:	4613      	mov	r3, r2
 8002042:	80bb      	strh	r3, [r7, #4]
	uint8_t dummy_red, dummy_green, dummy_blue;
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_theater_chase);
 8002044:	88fb      	ldrh	r3, [r7, #6]
 8002046:	4618      	mov	r0, r3
 8002048:	f000 faec 	bl	8002624 <ws2812_led_get_max_strip_size>
 800204c:	4603      	mov	r3, r0
 800204e:	82fb      	strh	r3, [r7, #22]
    uint8_t *c;
    for (int jjj = 0; jjj < 256; jjj++) // cycel all 256 colors in the animate_led_wheel
 8002050:	2300      	movs	r3, #0
 8002052:	627b      	str	r3, [r7, #36]	; 0x24
 8002054:	e08a      	b.n	800216c <animate_led_theater_chase_rainbow+0x13c>
    {
        for (int qqq = 0; qqq < 3; qqq++)
 8002056:	2300      	movs	r3, #0
 8002058:	623b      	str	r3, [r7, #32]
 800205a:	e080      	b.n	800215e <animate_led_theater_chase_rainbow+0x12e>
        {
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 800205c:	f000 fcae 	bl	80029bc <task_button_press_interrupt_occurred>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00b      	beq.n	800207e <animate_led_theater_chase_rainbow+0x4e>
 8002066:	f107 020d 	add.w	r2, r7, #13
 800206a:	f107 010e 	add.w	r1, r7, #14
 800206e:	f107 030f 	add.w	r3, r7, #15
 8002072:	4618      	mov	r0, r3
 8002074:	f000 fd06 	bl	8002a84 <task_button_press_check_interrupts>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d17b      	bne.n	8002176 <animate_led_theater_chase_rainbow+0x146>
            for (int iii = 0; iii < strip_size; iii += 3)
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
 8002082:	e039      	b.n	80020f8 <animate_led_theater_chase_rainbow+0xc8>
            {
                if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8002084:	f000 fc9a 	bl	80029bc <task_button_press_interrupt_occurred>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00b      	beq.n	80020a6 <animate_led_theater_chase_rainbow+0x76>
 800208e:	f107 020d 	add.w	r2, r7, #13
 8002092:	f107 010e 	add.w	r1, r7, #14
 8002096:	f107 030f 	add.w	r3, r7, #15
 800209a:	4618      	mov	r0, r3
 800209c:	f000 fcf2 	bl	8002a84 <task_button_press_check_interrupts>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d169      	bne.n	800217a <animate_led_theater_chase_rainbow+0x14a>
                c = animate_led_wheel((iii + jjj) % 255);
 80020a6:	69fa      	ldr	r2, [r7, #28]
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	441a      	add	r2, r3
 80020ac:	4b36      	ldr	r3, [pc, #216]	; (8002188 <animate_led_theater_chase_rainbow+0x158>)
 80020ae:	fb83 1302 	smull	r1, r3, r3, r2
 80020b2:	4413      	add	r3, r2
 80020b4:	11d9      	asrs	r1, r3, #7
 80020b6:	17d3      	asrs	r3, r2, #31
 80020b8:	1ac9      	subs	r1, r1, r3
 80020ba:	460b      	mov	r3, r1
 80020bc:	021b      	lsls	r3, r3, #8
 80020be:	1a5b      	subs	r3, r3, r1
 80020c0:	1ad1      	subs	r1, r2, r3
 80020c2:	b2cb      	uxtb	r3, r1
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff fd6b 	bl	8001ba0 <animate_led_wheel>
 80020ca:	6138      	str	r0, [r7, #16]
                animate_led_set_pixel(mask_theater_chase, iii + qqq, *c, *(c + 1), *(c + 2)); // turn every third pixel on
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	6a3b      	ldr	r3, [r7, #32]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	4413      	add	r3, r2
 80020d6:	b299      	uxth	r1, r3
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	781a      	ldrb	r2, [r3, #0]
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	3301      	adds	r3, #1
 80020e0:	781c      	ldrb	r4, [r3, #0]
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	3302      	adds	r3, #2
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	88f8      	ldrh	r0, [r7, #6]
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	4623      	mov	r3, r4
 80020ee:	f7fe fd59 	bl	8000ba4 <animate_led_set_pixel>
            for (int iii = 0; iii < strip_size; iii += 3)
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3303      	adds	r3, #3
 80020f6:	61fb      	str	r3, [r7, #28]
 80020f8:	8afb      	ldrh	r3, [r7, #22]
 80020fa:	69fa      	ldr	r2, [r7, #28]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	dbc1      	blt.n	8002084 <animate_led_theater_chase_rainbow+0x54>
            }
            animate_led_show_strip(mask_theater_chase);
 8002100:	88fb      	ldrh	r3, [r7, #6]
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe fd3e 	bl	8000b84 <animate_led_show_strip>
            task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 8002108:	88bb      	ldrh	r3, [r7, #4]
 800210a:	ee07 3a90 	vmov	s15, r3
 800210e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8002112:	f001 f99d 	bl	8003450 <task_led_ctrl_speed>
 8002116:	eeb0 7a40 	vmov.f32	s14, s0
 800211a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800211e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002122:	ee17 0a90 	vmov	r0, s15
 8002126:	f001 f82d 	bl	8003184 <task_led_ctrl_delay>
            for (int iii = 0; iii < strip_size; iii += 3) animate_led_set_pixel(mask_theater_chase, iii + qqq, 0, 0, 0); // turn every third pixel off
 800212a:	2300      	movs	r3, #0
 800212c:	61bb      	str	r3, [r7, #24]
 800212e:	e00f      	b.n	8002150 <animate_led_theater_chase_rainbow+0x120>
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	b29a      	uxth	r2, r3
 8002134:	6a3b      	ldr	r3, [r7, #32]
 8002136:	b29b      	uxth	r3, r3
 8002138:	4413      	add	r3, r2
 800213a:	b299      	uxth	r1, r3
 800213c:	88f8      	ldrh	r0, [r7, #6]
 800213e:	2300      	movs	r3, #0
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	2300      	movs	r3, #0
 8002144:	2200      	movs	r2, #0
 8002146:	f7fe fd2d 	bl	8000ba4 <animate_led_set_pixel>
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	3303      	adds	r3, #3
 800214e:	61bb      	str	r3, [r7, #24]
 8002150:	8afb      	ldrh	r3, [r7, #22]
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	429a      	cmp	r2, r3
 8002156:	dbeb      	blt.n	8002130 <animate_led_theater_chase_rainbow+0x100>
        for (int qqq = 0; qqq < 3; qqq++)
 8002158:	6a3b      	ldr	r3, [r7, #32]
 800215a:	3301      	adds	r3, #1
 800215c:	623b      	str	r3, [r7, #32]
 800215e:	6a3b      	ldr	r3, [r7, #32]
 8002160:	2b02      	cmp	r3, #2
 8002162:	f77f af7b 	ble.w	800205c <animate_led_theater_chase_rainbow+0x2c>
    for (int jjj = 0; jjj < 256; jjj++) // cycel all 256 colors in the animate_led_wheel
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	3301      	adds	r3, #1
 800216a:	627b      	str	r3, [r7, #36]	; 0x24
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	2bff      	cmp	r3, #255	; 0xff
 8002170:	f77f af71 	ble.w	8002056 <animate_led_theater_chase_rainbow+0x26>
 8002174:	e002      	b.n	800217c <animate_led_theater_chase_rainbow+0x14c>
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8002176:	bf00      	nop
 8002178:	e000      	b.n	800217c <animate_led_theater_chase_rainbow+0x14c>
                if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 800217a:	bf00      	nop
        }
    }
}
 800217c:	372c      	adds	r7, #44	; 0x2c
 800217e:	46bd      	mov	sp, r7
 8002180:	ecbd 8b02 	vpop	{d8}
 8002184:	bd90      	pop	{r4, r7, pc}
 8002186:	bf00      	nop
 8002188:	80808081 	.word	0x80808081

0800218c <animate_led_custom_function_print_mallord>:

uint16_t g_pixel_on = 0;
uint32_t g_custom_color = 0;

void animate_led_custom_function_print_mallord(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af02      	add	r7, sp, #8
    uint8_t color_rgb[sizeof(ws2812b_led_t)] = {0};
 8002192:	4b52      	ldr	r3, [pc, #328]	; (80022dc <animate_led_custom_function_print_mallord+0x150>)
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	80bb      	strh	r3, [r7, #4]
 8002198:	2300      	movs	r3, #0
 800219a:	71bb      	strb	r3, [r7, #6]
	// mallord
	// set all brown
	color_led_hex_to_rgb(COLOR_HEX_BROWN, color_rgb);
 800219c:	1d3b      	adds	r3, r7, #4
 800219e:	4619      	mov	r1, r3
 80021a0:	484f      	ldr	r0, [pc, #316]	; (80022e0 <animate_led_custom_function_print_mallord+0x154>)
 80021a2:	f000 f975 	bl	8002490 <color_led_hex_to_rgb>
	animate_led_set_pixels_in_range(STRIP_BIT_1, 397, 439,
 80021a6:	7939      	ldrb	r1, [r7, #4]
 80021a8:	797b      	ldrb	r3, [r7, #5]
 80021aa:	79ba      	ldrb	r2, [r7, #6]
 80021ac:	9201      	str	r2, [sp, #4]
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	460b      	mov	r3, r1
 80021b2:	f240 12b7 	movw	r2, #439	; 0x1b7
 80021b6:	f240 118d 	movw	r1, #397	; 0x18d
 80021ba:	2001      	movs	r0, #1
 80021bc:	f7fe fd46 	bl	8000c4c <animate_led_set_pixels_in_range>
			color_rgb[offsetof(ws2812b_led_t, red)],
			color_rgb[offsetof(ws2812b_led_t, green)],
			color_rgb[offsetof(ws2812b_led_t, blue)]);
	animate_led_set_pixels_in_range(STRIP_BIT_1, 472, 541,
 80021c0:	7939      	ldrb	r1, [r7, #4]
 80021c2:	797b      	ldrb	r3, [r7, #5]
 80021c4:	79ba      	ldrb	r2, [r7, #6]
 80021c6:	9201      	str	r2, [sp, #4]
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	460b      	mov	r3, r1
 80021cc:	f240 221d 	movw	r2, #541	; 0x21d
 80021d0:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80021d4:	2001      	movs	r0, #1
 80021d6:	f7fe fd39 	bl	8000c4c <animate_led_set_pixels_in_range>
						color_rgb[offsetof(ws2812b_led_t, red)],
						color_rgb[offsetof(ws2812b_led_t, green)],
						color_rgb[offsetof(ws2812b_led_t, blue)]);
	// set all blue
	color_led_hex_to_rgb(COLOR_HEX_DARK_BLUE, color_rgb);
 80021da:	1d3b      	adds	r3, r7, #4
 80021dc:	4619      	mov	r1, r3
 80021de:	2099      	movs	r0, #153	; 0x99
 80021e0:	f000 f956 	bl	8002490 <color_led_hex_to_rgb>
	animate_led_set_pixels_in_range(STRIP_BIT_1, 542, 549,
 80021e4:	7939      	ldrb	r1, [r7, #4]
 80021e6:	797b      	ldrb	r3, [r7, #5]
 80021e8:	79ba      	ldrb	r2, [r7, #6]
 80021ea:	9201      	str	r2, [sp, #4]
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	460b      	mov	r3, r1
 80021f0:	f240 2225 	movw	r2, #549	; 0x225
 80021f4:	f240 211e 	movw	r1, #542	; 0x21e
 80021f8:	2001      	movs	r0, #1
 80021fa:	f7fe fd27 	bl	8000c4c <animate_led_set_pixels_in_range>
			color_rgb[offsetof(ws2812b_led_t, red)],
			color_rgb[offsetof(ws2812b_led_t, green)],
			color_rgb[offsetof(ws2812b_led_t, blue)]);

	// set all green
	color_led_hex_to_rgb(COLOR_HEX_DARK_GREEN, color_rgb);
 80021fe:	1d3b      	adds	r3, r7, #4
 8002200:	4619      	mov	r1, r3
 8002202:	4838      	ldr	r0, [pc, #224]	; (80022e4 <animate_led_custom_function_print_mallord+0x158>)
 8002204:	f000 f944 	bl	8002490 <color_led_hex_to_rgb>
	animate_led_set_pixels_in_range(STRIP_BIT_1, 461, 471,
 8002208:	7939      	ldrb	r1, [r7, #4]
 800220a:	797b      	ldrb	r3, [r7, #5]
 800220c:	79ba      	ldrb	r2, [r7, #6]
 800220e:	9201      	str	r2, [sp, #4]
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	460b      	mov	r3, r1
 8002214:	f240 12d7 	movw	r2, #471	; 0x1d7
 8002218:	f240 11cd 	movw	r1, #461	; 0x1cd
 800221c:	2001      	movs	r0, #1
 800221e:	f7fe fd15 	bl	8000c4c <animate_led_set_pixels_in_range>
			color_rgb[offsetof(ws2812b_led_t, red)],
			color_rgb[offsetof(ws2812b_led_t, green)],
			color_rgb[offsetof(ws2812b_led_t, blue)]);

	animate_led_set_pixels_in_range(STRIP_BIT_1, 440, 445,
 8002222:	7939      	ldrb	r1, [r7, #4]
 8002224:	797b      	ldrb	r3, [r7, #5]
 8002226:	79ba      	ldrb	r2, [r7, #6]
 8002228:	9201      	str	r2, [sp, #4]
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	460b      	mov	r3, r1
 800222e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8002232:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8002236:	2001      	movs	r0, #1
 8002238:	f7fe fd08 	bl	8000c4c <animate_led_set_pixels_in_range>
			color_rgb[offsetof(ws2812b_led_t, red)],
			color_rgb[offsetof(ws2812b_led_t, green)],
			color_rgb[offsetof(ws2812b_led_t, blue)]);

	// set all yellow
	color_led_hex_to_rgb(COLOR_HEX_YELLOW, color_rgb);
 800223c:	1d3b      	adds	r3, r7, #4
 800223e:	4619      	mov	r1, r3
 8002240:	4829      	ldr	r0, [pc, #164]	; (80022e8 <animate_led_custom_function_print_mallord+0x15c>)
 8002242:	f000 f925 	bl	8002490 <color_led_hex_to_rgb>
	animate_led_set_pixels_in_range(STRIP_BIT_1, 446, 460,
 8002246:	7939      	ldrb	r1, [r7, #4]
 8002248:	797b      	ldrb	r3, [r7, #5]
 800224a:	79ba      	ldrb	r2, [r7, #6]
 800224c:	9201      	str	r2, [sp, #4]
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	460b      	mov	r3, r1
 8002252:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8002256:	f44f 71df 	mov.w	r1, #446	; 0x1be
 800225a:	2001      	movs	r0, #1
 800225c:	f7fe fcf6 	bl	8000c4c <animate_led_set_pixels_in_range>
			color_rgb[offsetof(ws2812b_led_t, red)],
			color_rgb[offsetof(ws2812b_led_t, green)],
			color_rgb[offsetof(ws2812b_led_t, blue)]);

	// set all white
	color_led_hex_to_rgb(COLOR_HEX_LIGHT_GRAY, color_rgb);
 8002260:	1d3b      	adds	r3, r7, #4
 8002262:	4619      	mov	r1, r3
 8002264:	4821      	ldr	r0, [pc, #132]	; (80022ec <animate_led_custom_function_print_mallord+0x160>)
 8002266:	f000 f913 	bl	8002490 <color_led_hex_to_rgb>
	animate_led_set_pixels_in_range(STRIP_BIT_1, 550, 557,
 800226a:	7939      	ldrb	r1, [r7, #4]
 800226c:	797b      	ldrb	r3, [r7, #5]
 800226e:	79ba      	ldrb	r2, [r7, #6]
 8002270:	9201      	str	r2, [sp, #4]
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	460b      	mov	r3, r1
 8002276:	f240 222d 	movw	r2, #557	; 0x22d
 800227a:	f240 2126 	movw	r1, #550	; 0x226
 800227e:	2001      	movs	r0, #1
 8002280:	f7fe fce4 	bl	8000c4c <animate_led_set_pixels_in_range>
			color_rgb[offsetof(ws2812b_led_t, red)],
			color_rgb[offsetof(ws2812b_led_t, green)],
			color_rgb[offsetof(ws2812b_led_t, blue)]);

	animate_led_set_pixels_in_range(STRIP_BIT_1, 347, 397,
 8002284:	7939      	ldrb	r1, [r7, #4]
 8002286:	797b      	ldrb	r3, [r7, #5]
 8002288:	79ba      	ldrb	r2, [r7, #6]
 800228a:	9201      	str	r2, [sp, #4]
 800228c:	9300      	str	r3, [sp, #0]
 800228e:	460b      	mov	r3, r1
 8002290:	f240 128d 	movw	r2, #397	; 0x18d
 8002294:	f240 115b 	movw	r1, #347	; 0x15b
 8002298:	2001      	movs	r0, #1
 800229a:	f7fe fcd7 	bl	8000c4c <animate_led_set_pixels_in_range>
			color_rgb[offsetof(ws2812b_led_t, red)],
			color_rgb[offsetof(ws2812b_led_t, green)],
			color_rgb[offsetof(ws2812b_led_t, blue)]);

	animate_led_set_pixels_in_range(STRIP_BIT_1, 558, 563,
 800229e:	7939      	ldrb	r1, [r7, #4]
 80022a0:	797b      	ldrb	r3, [r7, #5]
 80022a2:	79ba      	ldrb	r2, [r7, #6]
 80022a4:	9201      	str	r2, [sp, #4]
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	460b      	mov	r3, r1
 80022aa:	f240 2233 	movw	r2, #563	; 0x233
 80022ae:	f240 212e 	movw	r1, #558	; 0x22e
 80022b2:	2001      	movs	r0, #1
 80022b4:	f7fe fcca 	bl	8000c4c <animate_led_set_pixels_in_range>
			color_rgb[offsetof(ws2812b_led_t, red)],
			color_rgb[offsetof(ws2812b_led_t, green)],
			color_rgb[offsetof(ws2812b_led_t, blue)]);

	animate_led_set_pixels_in_range(STRIP_BIT_1, 564, 568,
 80022b8:	7939      	ldrb	r1, [r7, #4]
 80022ba:	797b      	ldrb	r3, [r7, #5]
 80022bc:	79ba      	ldrb	r2, [r7, #6]
 80022be:	9201      	str	r2, [sp, #4]
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	460b      	mov	r3, r1
 80022c4:	f44f 720e 	mov.w	r2, #568	; 0x238
 80022c8:	f44f 710d 	mov.w	r1, #564	; 0x234
 80022cc:	2001      	movs	r0, #1
 80022ce:	f7fe fcbd 	bl	8000c4c <animate_led_set_pixels_in_range>
			color_rgb[offsetof(ws2812b_led_t, red)],
			color_rgb[offsetof(ws2812b_led_t, green)],
			color_rgb[offsetof(ws2812b_led_t, blue)]);

}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	0800be80 	.word	0x0800be80
 80022e0:	00331900 	.word	0x00331900
 80022e4:	00336600 	.word	0x00336600
 80022e8:	00ffff00 	.word	0x00ffff00
 80022ec:	00e0e0e0 	.word	0x00e0e0e0

080022f0 <animate_led_custom_function_print_shotgun>:


void animate_led_custom_function_print_shotgun(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af02      	add	r7, sp, #8
    uint8_t color_rgb[sizeof(ws2812b_led_t)] = {0};
 80022f6:	4b63      	ldr	r3, [pc, #396]	; (8002484 <animate_led_custom_function_print_shotgun+0x194>)
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	80bb      	strh	r3, [r7, #4]
 80022fc:	2300      	movs	r3, #0
 80022fe:	71bb      	strb	r3, [r7, #6]

	color_led_hex_to_rgb(COLOR_HEX_BROWN, color_rgb);
 8002300:	1d3b      	adds	r3, r7, #4
 8002302:	4619      	mov	r1, r3
 8002304:	4860      	ldr	r0, [pc, #384]	; (8002488 <animate_led_custom_function_print_shotgun+0x198>)
 8002306:	f000 f8c3 	bl	8002490 <color_led_hex_to_rgb>
	animate_led_set_pixels_in_range(STRIP_BIT_1, 345, 346,
 800230a:	7939      	ldrb	r1, [r7, #4]
 800230c:	797b      	ldrb	r3, [r7, #5]
 800230e:	79ba      	ldrb	r2, [r7, #6]
 8002310:	9201      	str	r2, [sp, #4]
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	460b      	mov	r3, r1
 8002316:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 800231a:	f240 1159 	movw	r1, #345	; 0x159
 800231e:	2001      	movs	r0, #1
 8002320:	f7fe fc94 	bl	8000c4c <animate_led_set_pixels_in_range>
						color_rgb[offsetof(ws2812b_led_t, red)],
						color_rgb[offsetof(ws2812b_led_t, green)],
						color_rgb[offsetof(ws2812b_led_t, blue)]);
	animate_led_set_pixels_in_range(STRIP_BIT_1, 314, 326,
 8002324:	7939      	ldrb	r1, [r7, #4]
 8002326:	797b      	ldrb	r3, [r7, #5]
 8002328:	79ba      	ldrb	r2, [r7, #6]
 800232a:	9201      	str	r2, [sp, #4]
 800232c:	9300      	str	r3, [sp, #0]
 800232e:	460b      	mov	r3, r1
 8002330:	f44f 72a3 	mov.w	r2, #326	; 0x146
 8002334:	f44f 719d 	mov.w	r1, #314	; 0x13a
 8002338:	2001      	movs	r0, #1
 800233a:	f7fe fc87 	bl	8000c4c <animate_led_set_pixels_in_range>
						color_rgb[offsetof(ws2812b_led_t, red)],
						color_rgb[offsetof(ws2812b_led_t, green)],
						color_rgb[offsetof(ws2812b_led_t, blue)]);
	animate_led_set_pixels_in_range(STRIP_BIT_1, 295, 299,
 800233e:	7939      	ldrb	r1, [r7, #4]
 8002340:	797b      	ldrb	r3, [r7, #5]
 8002342:	79ba      	ldrb	r2, [r7, #6]
 8002344:	9201      	str	r2, [sp, #4]
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	460b      	mov	r3, r1
 800234a:	f240 122b 	movw	r2, #299	; 0x12b
 800234e:	f240 1127 	movw	r1, #295	; 0x127
 8002352:	2001      	movs	r0, #1
 8002354:	f7fe fc7a 	bl	8000c4c <animate_led_set_pixels_in_range>
												color_rgb[offsetof(ws2812b_led_t, red)],
												color_rgb[offsetof(ws2812b_led_t, green)],
												color_rgb[offsetof(ws2812b_led_t, blue)]);
	animate_led_set_pixels_in_range(STRIP_BIT_1, 275, 288,
 8002358:	7939      	ldrb	r1, [r7, #4]
 800235a:	797b      	ldrb	r3, [r7, #5]
 800235c:	79ba      	ldrb	r2, [r7, #6]
 800235e:	9201      	str	r2, [sp, #4]
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	460b      	mov	r3, r1
 8002364:	f44f 7290 	mov.w	r2, #288	; 0x120
 8002368:	f240 1113 	movw	r1, #275	; 0x113
 800236c:	2001      	movs	r0, #1
 800236e:	f7fe fc6d 	bl	8000c4c <animate_led_set_pixels_in_range>
									color_rgb[offsetof(ws2812b_led_t, red)],
									color_rgb[offsetof(ws2812b_led_t, green)],
									color_rgb[offsetof(ws2812b_led_t, blue)]);
	animate_led_set_pixels_in_range(STRIP_BIT_1, 254, 266,
 8002372:	7939      	ldrb	r1, [r7, #4]
 8002374:	797b      	ldrb	r3, [r7, #5]
 8002376:	79ba      	ldrb	r2, [r7, #6]
 8002378:	9201      	str	r2, [sp, #4]
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	460b      	mov	r3, r1
 800237e:	f44f 7285 	mov.w	r2, #266	; 0x10a
 8002382:	21fe      	movs	r1, #254	; 0xfe
 8002384:	2001      	movs	r0, #1
 8002386:	f7fe fc61 	bl	8000c4c <animate_led_set_pixels_in_range>
						color_rgb[offsetof(ws2812b_led_t, red)],
						color_rgb[offsetof(ws2812b_led_t, green)],
						color_rgb[offsetof(ws2812b_led_t, blue)]);
	animate_led_set_pixels_in_range(STRIP_BIT_1, 180, 193,
 800238a:	7939      	ldrb	r1, [r7, #4]
 800238c:	797b      	ldrb	r3, [r7, #5]
 800238e:	79ba      	ldrb	r2, [r7, #6]
 8002390:	9201      	str	r2, [sp, #4]
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	460b      	mov	r3, r1
 8002396:	22c1      	movs	r2, #193	; 0xc1
 8002398:	21b4      	movs	r1, #180	; 0xb4
 800239a:	2001      	movs	r0, #1
 800239c:	f7fe fc56 	bl	8000c4c <animate_led_set_pixels_in_range>
						color_rgb[offsetof(ws2812b_led_t, red)],
						color_rgb[offsetof(ws2812b_led_t, green)],
						color_rgb[offsetof(ws2812b_led_t, blue)]);

	// set all gray
	color_led_hex_to_rgb(COLOR_HEX_LIGHT_GRAY, color_rgb);
 80023a0:	1d3b      	adds	r3, r7, #4
 80023a2:	4619      	mov	r1, r3
 80023a4:	4839      	ldr	r0, [pc, #228]	; (800248c <animate_led_custom_function_print_shotgun+0x19c>)
 80023a6:	f000 f873 	bl	8002490 <color_led_hex_to_rgb>
	animate_led_set_pixels_in_range(STRIP_BIT_1, 179, 179,
 80023aa:	7939      	ldrb	r1, [r7, #4]
 80023ac:	797b      	ldrb	r3, [r7, #5]
 80023ae:	79ba      	ldrb	r2, [r7, #6]
 80023b0:	9201      	str	r2, [sp, #4]
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	460b      	mov	r3, r1
 80023b6:	22b3      	movs	r2, #179	; 0xb3
 80023b8:	21b3      	movs	r1, #179	; 0xb3
 80023ba:	2001      	movs	r0, #1
 80023bc:	f7fe fc46 	bl	8000c4c <animate_led_set_pixels_in_range>
			color_rgb[offsetof(ws2812b_led_t, red)],
			color_rgb[offsetof(ws2812b_led_t, green)],
			color_rgb[offsetof(ws2812b_led_t, blue)]);
	animate_led_set_pixels_in_range(STRIP_BIT_1, 194, 253,
 80023c0:	7939      	ldrb	r1, [r7, #4]
 80023c2:	797b      	ldrb	r3, [r7, #5]
 80023c4:	79ba      	ldrb	r2, [r7, #6]
 80023c6:	9201      	str	r2, [sp, #4]
 80023c8:	9300      	str	r3, [sp, #0]
 80023ca:	460b      	mov	r3, r1
 80023cc:	22fd      	movs	r2, #253	; 0xfd
 80023ce:	21c2      	movs	r1, #194	; 0xc2
 80023d0:	2001      	movs	r0, #1
 80023d2:	f7fe fc3b 	bl	8000c4c <animate_led_set_pixels_in_range>
						color_rgb[offsetof(ws2812b_led_t, red)],
						color_rgb[offsetof(ws2812b_led_t, green)],
						color_rgb[offsetof(ws2812b_led_t, blue)]);
	animate_led_set_pixels_in_range(STRIP_BIT_1, 267, 274,
 80023d6:	7939      	ldrb	r1, [r7, #4]
 80023d8:	797b      	ldrb	r3, [r7, #5]
 80023da:	79ba      	ldrb	r2, [r7, #6]
 80023dc:	9201      	str	r2, [sp, #4]
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	460b      	mov	r3, r1
 80023e2:	f44f 7289 	mov.w	r2, #274	; 0x112
 80023e6:	f240 110b 	movw	r1, #267	; 0x10b
 80023ea:	2001      	movs	r0, #1
 80023ec:	f7fe fc2e 	bl	8000c4c <animate_led_set_pixels_in_range>
			color_rgb[offsetof(ws2812b_led_t, red)],
			color_rgb[offsetof(ws2812b_led_t, green)],
			color_rgb[offsetof(ws2812b_led_t, blue)]);
	animate_led_set_pixels_in_range(STRIP_BIT_1, 289, 294,
 80023f0:	7939      	ldrb	r1, [r7, #4]
 80023f2:	797b      	ldrb	r3, [r7, #5]
 80023f4:	79ba      	ldrb	r2, [r7, #6]
 80023f6:	9201      	str	r2, [sp, #4]
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	460b      	mov	r3, r1
 80023fc:	f44f 7293 	mov.w	r2, #294	; 0x126
 8002400:	f240 1121 	movw	r1, #289	; 0x121
 8002404:	2001      	movs	r0, #1
 8002406:	f7fe fc21 	bl	8000c4c <animate_led_set_pixels_in_range>
			color_rgb[offsetof(ws2812b_led_t, red)],
			color_rgb[offsetof(ws2812b_led_t, green)],
			color_rgb[offsetof(ws2812b_led_t, blue)]);
	animate_led_set_pixels_in_range(STRIP_BIT_1, 300, 307,
 800240a:	7939      	ldrb	r1, [r7, #4]
 800240c:	797b      	ldrb	r3, [r7, #5]
 800240e:	79ba      	ldrb	r2, [r7, #6]
 8002410:	9201      	str	r2, [sp, #4]
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	460b      	mov	r3, r1
 8002416:	f240 1233 	movw	r2, #307	; 0x133
 800241a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800241e:	2001      	movs	r0, #1
 8002420:	f7fe fc14 	bl	8000c4c <animate_led_set_pixels_in_range>
			color_rgb[offsetof(ws2812b_led_t, red)],
			color_rgb[offsetof(ws2812b_led_t, green)],
			color_rgb[offsetof(ws2812b_led_t, blue)]);
	animate_led_set_pixels_in_range(STRIP_BIT_1, 310, 313,
 8002424:	7939      	ldrb	r1, [r7, #4]
 8002426:	797b      	ldrb	r3, [r7, #5]
 8002428:	79ba      	ldrb	r2, [r7, #6]
 800242a:	9201      	str	r2, [sp, #4]
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	460b      	mov	r3, r1
 8002430:	f240 1239 	movw	r2, #313	; 0x139
 8002434:	f44f 719b 	mov.w	r1, #310	; 0x136
 8002438:	2001      	movs	r0, #1
 800243a:	f7fe fc07 	bl	8000c4c <animate_led_set_pixels_in_range>
			color_rgb[offsetof(ws2812b_led_t, red)],
			color_rgb[offsetof(ws2812b_led_t, green)],
			color_rgb[offsetof(ws2812b_led_t, blue)]);
	animate_led_set_pixels_in_range(STRIP_BIT_1, 327, 344,
 800243e:	7939      	ldrb	r1, [r7, #4]
 8002440:	797b      	ldrb	r3, [r7, #5]
 8002442:	79ba      	ldrb	r2, [r7, #6]
 8002444:	9201      	str	r2, [sp, #4]
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	460b      	mov	r3, r1
 800244a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800244e:	f240 1147 	movw	r1, #327	; 0x147
 8002452:	2001      	movs	r0, #1
 8002454:	f7fe fbfa 	bl	8000c4c <animate_led_set_pixels_in_range>
			color_rgb[offsetof(ws2812b_led_t, red)],
			color_rgb[offsetof(ws2812b_led_t, green)],
			color_rgb[offsetof(ws2812b_led_t, blue)]);

	color_led_hex_to_rgb(COLOR_HEX_BLACK, color_rgb);
 8002458:	1d3b      	adds	r3, r7, #4
 800245a:	4619      	mov	r1, r3
 800245c:	2000      	movs	r0, #0
 800245e:	f000 f817 	bl	8002490 <color_led_hex_to_rgb>
	animate_led_set_pixels_in_range(STRIP_BIT_1, 308, 309,
 8002462:	7939      	ldrb	r1, [r7, #4]
 8002464:	797b      	ldrb	r3, [r7, #5]
 8002466:	79ba      	ldrb	r2, [r7, #6]
 8002468:	9201      	str	r2, [sp, #4]
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	460b      	mov	r3, r1
 800246e:	f240 1235 	movw	r2, #309	; 0x135
 8002472:	f44f 719a 	mov.w	r1, #308	; 0x134
 8002476:	2001      	movs	r0, #1
 8002478:	f7fe fbe8 	bl	8000c4c <animate_led_set_pixels_in_range>
			color_rgb[offsetof(ws2812b_led_t, red)],
			color_rgb[offsetof(ws2812b_led_t, green)],
			color_rgb[offsetof(ws2812b_led_t, blue)]);
}
 800247c:	bf00      	nop
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	0800be80 	.word	0x0800be80
 8002488:	00331900 	.word	0x00331900
 800248c:	00e0e0e0 	.word	0x00e0e0e0

08002490 <color_led_hex_to_rgb>:
    [COLORS_BROWN] = COLOR_HEX_BROWN
};


void color_led_hex_to_rgb(const color_hex_code_e color, uint8_t *color_array)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
    color_array[offsetof(ws2812b_led_t, red)] = ((color & 0xFF0000) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, red))));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	0c1b      	lsrs	r3, r3, #16
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	701a      	strb	r2, [r3, #0]
    color_array[offsetof(ws2812b_led_t, green)] = ((color & 0x00FF00) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, green))));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	0a1a      	lsrs	r2, r3, #8
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	3301      	adds	r3, #1
 80024ac:	b2d2      	uxtb	r2, r2
 80024ae:	701a      	strb	r2, [r3, #0]
    color_array[offsetof(ws2812b_led_t, blue)] = ((color & 0x0000FF) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, blue))));
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	3302      	adds	r3, #2
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	701a      	strb	r2, [r3, #0]
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
	...

080024c8 <reset_ws2812b>:

extern volatile int datasentflag;

uint16_t pwm_reset[50] = {0};
void reset_ws2812b(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
    //xSemaphoreTake(g_dma_transfer_semaphore, portMAX_DELAY);
    //xTaskNotify(g_dma_transfer_handle, 0, eSetValueWithOverwrite);
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_1, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 80024cc:	2364      	movs	r3, #100	; 0x64
 80024ce:	4a09      	ldr	r2, [pc, #36]	; (80024f4 <reset_ws2812b+0x2c>)
 80024d0:	2100      	movs	r1, #0
 80024d2:	4809      	ldr	r0, [pc, #36]	; (80024f8 <reset_ws2812b+0x30>)
 80024d4:	f006 f90e 	bl	80086f4 <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_2, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 80024d8:	2364      	movs	r3, #100	; 0x64
 80024da:	4a06      	ldr	r2, [pc, #24]	; (80024f4 <reset_ws2812b+0x2c>)
 80024dc:	2104      	movs	r1, #4
 80024de:	4806      	ldr	r0, [pc, #24]	; (80024f8 <reset_ws2812b+0x30>)
 80024e0:	f006 f908 	bl	80086f4 <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_3, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 80024e4:	2364      	movs	r3, #100	; 0x64
 80024e6:	4a03      	ldr	r2, [pc, #12]	; (80024f4 <reset_ws2812b+0x2c>)
 80024e8:	2108      	movs	r1, #8
 80024ea:	4803      	ldr	r0, [pc, #12]	; (80024f8 <reset_ws2812b+0x30>)
 80024ec:	f006 f902 	bl	80086f4 <HAL_TIM_PWM_Start_DMA>
}
 80024f0:	bf00      	nop
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	200007ac 	.word	0x200007ac
 80024f8:	200022ec 	.word	0x200022ec

080024fc <ws2812_convert_strip_num_to_strip_bit>:

static strip_bit_e ws2812_convert_strip_num_to_strip_bit(const strip_num_e strip_num)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	4603      	mov	r3, r0
 8002504:	71fb      	strb	r3, [r7, #7]
	return (strip_bit_e)(strip_num + 1);
 8002506:	79fb      	ldrb	r3, [r7, #7]
 8002508:	3301      	adds	r3, #1
 800250a:	b2db      	uxtb	r3, r3
}
 800250c:	4618      	mov	r0, r3
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <ws2812_convert_strip_bit_to_strip_num>:


static strip_num_e ws2812_convert_strip_bit_to_strip_num(const strip_bit_e strip_bit)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	71fb      	strb	r3, [r7, #7]
	return (strip_num_e)(strip_bit - 1);
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	3b01      	subs	r3, #1
 8002526:	b2db      	uxtb	r3, r3
}
 8002528:	4618      	mov	r0, r3
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <ws2812_get_pwm_strip_offset>:


uint16_t ws2812_get_pwm_strip_offset(const strip_bit_e strip_bit)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	71fb      	strb	r3, [r7, #7]
    uint16_t offset = 0;
 800253e:	2300      	movs	r3, #0
 8002540:	81fb      	strh	r3, [r7, #14]
    uint8_t strip_num = 0;
 8002542:	2300      	movs	r3, #0
 8002544:	737b      	strb	r3, [r7, #13]
    switch (strip_bit)
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d104      	bne.n	8002556 <ws2812_get_pwm_strip_offset+0x22>
    {
#if defined(STRIP_1_LENGTH)
        case STRIP_BIT_1:
            offset = 0;
 800254c:	2300      	movs	r3, #0
 800254e:	81fb      	strh	r3, [r7, #14]
            strip_num = 1;
 8002550:	2301      	movs	r3, #1
 8002552:	737b      	strb	r3, [r7, #13]
        break;
 8002554:	e000      	b.n	8002558 <ws2812_get_pwm_strip_offset+0x24>
        case STRIP_BIT_5:
            offset = STRIP_1_LENGTH + STRIP_2_LENGTH + STRIP_3_LENGTH + STRIP_4_LENGTH;
        break;
#endif
        default:
        break;
 8002556:	bf00      	nop
    }
    return ((offset * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + (strip_num * WS2812B_RESET_TIME_CYCLES));
 8002558:	89fa      	ldrh	r2, [r7, #14]
 800255a:	4613      	mov	r3, r2
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	4413      	add	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	ee07 3a90 	vmov	s15, r3
 8002566:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800256a:	7b7b      	ldrb	r3, [r7, #13]
 800256c:	ee07 3a90 	vmov	s15, r3
 8002570:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002574:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002598 <ws2812_get_pwm_strip_offset+0x64>
 8002578:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800257c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002580:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002584:	ee17 3a90 	vmov	r3, s15
 8002588:	b29b      	uxth	r3, r3
}
 800258a:	4618      	mov	r0, r3
 800258c:	3714      	adds	r7, #20
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	453b8000 	.word	0x453b8000

0800259c <ws2812_get_strip_size>:


uint16_t ws2812_get_strip_size(const strip_bit_e strip_bit)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	71fb      	strb	r3, [r7, #7]
	uint16_t strip_size = 0;
 80025a6:	2300      	movs	r3, #0
 80025a8:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_ALL_SET == strip_bit) strip_size = g_max_strip_length;
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d103      	bne.n	80025b8 <ws2812_get_strip_size+0x1c>
 80025b0:	4b09      	ldr	r3, [pc, #36]	; (80025d8 <ws2812_get_strip_size+0x3c>)
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	81fb      	strh	r3, [r7, #14]
 80025b6:	e009      	b.n	80025cc <ws2812_get_strip_size+0x30>
	else strip_size = strip_length[ws2812_convert_strip_num_to_strip_bit(strip_bit)];
 80025b8:	79fb      	ldrb	r3, [r7, #7]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff ff9e 	bl	80024fc <ws2812_convert_strip_num_to_strip_bit>
 80025c0:	4603      	mov	r3, r0
 80025c2:	461a      	mov	r2, r3
 80025c4:	4b05      	ldr	r3, [pc, #20]	; (80025dc <ws2812_get_strip_size+0x40>)
 80025c6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80025ca:	81fb      	strh	r3, [r7, #14]
	return strip_size;
 80025cc:	89fb      	ldrh	r3, [r7, #14]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	200007a0 	.word	0x200007a0
 80025dc:	2000005c 	.word	0x2000005c

080025e0 <ws2812_get_num_active_animation_leds>:
	return STRIP_BIT_NO_MORE_SET;  // if this is returned
}


uint16_t ws2812_get_num_active_animation_leds(const strip_mask_t strip_mask)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	80fb      	strh	r3, [r7, #6]
	uint16_t strip_size = 0;
 80025ea:	2300      	movs	r3, #0
 80025ec:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_ALL_SET == strip_mask) strip_size = g_num_leds;
 80025ee:	88fb      	ldrh	r3, [r7, #6]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d103      	bne.n	80025fc <ws2812_get_num_active_animation_leds+0x1c>
 80025f4:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <ws2812_get_num_active_animation_leds+0x40>)
 80025f6:	881b      	ldrh	r3, [r3, #0]
 80025f8:	81fb      	strh	r3, [r7, #14]
 80025fa:	e009      	b.n	8002610 <ws2812_get_num_active_animation_leds+0x30>
	else
	{
#if defined(STRIP_1_LENGTH)
		if (STRIP_BIT_1 & strip_mask) strip_size += STRIP_1_LENGTH;
 80025fc:	88fb      	ldrh	r3, [r7, #6]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	b29b      	uxth	r3, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	d003      	beq.n	8002610 <ws2812_get_num_active_animation_leds+0x30>
 8002608:	89fb      	ldrh	r3, [r7, #14]
 800260a:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800260e:	81fb      	strh	r3, [r7, #14]
#endif
#if defined(STRIP_9_LENGTH)
		if (STRIP_BIT_9 & strip_mask) strip_size += STRIP_9_LENGTH;
#endif
	}
	return strip_size;
 8002610:	89fb      	ldrh	r3, [r7, #14]
}
 8002612:	4618      	mov	r0, r3
 8002614:	3714      	adds	r7, #20
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	2000079c 	.word	0x2000079c

08002624 <ws2812_led_get_max_strip_size>:


uint16_t ws2812_led_get_max_strip_size(const strip_mask_t strip_mask)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	80fb      	strh	r3, [r7, #6]
	uint16_t strip_size = 0;
 800262e:	2300      	movs	r3, #0
 8002630:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_ALL_SET == strip_mask) strip_size = g_max_strip_length;
 8002632:	88fb      	ldrh	r3, [r7, #6]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d103      	bne.n	8002640 <ws2812_led_get_max_strip_size+0x1c>
 8002638:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <ws2812_led_get_max_strip_size+0x44>)
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	81fb      	strh	r3, [r7, #14]
 800263e:	e00c      	b.n	800265a <ws2812_led_get_max_strip_size+0x36>
	else
	{
#if defined(STRIP_1_LENGTH)
		if ((STRIP_BIT_1 & strip_mask) && (strip_size < STRIP_1_LENGTH)) strip_size = STRIP_1_LENGTH;
 8002640:	88fb      	ldrh	r3, [r7, #6]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	b29b      	uxth	r3, r3
 8002648:	2b00      	cmp	r3, #0
 800264a:	d006      	beq.n	800265a <ws2812_led_get_max_strip_size+0x36>
 800264c:	89fb      	ldrh	r3, [r7, #14]
 800264e:	f5b3 7f0e 	cmp.w	r3, #568	; 0x238
 8002652:	d202      	bcs.n	800265a <ws2812_led_get_max_strip_size+0x36>
 8002654:	f44f 730e 	mov.w	r3, #568	; 0x238
 8002658:	81fb      	strh	r3, [r7, #14]
#endif
#if defined(STRIP_9_LENGTH)
		if ((STRIP_BIT_9 & strip_mask) && (strip_size < STRIP_9_LENGTH)) strip_size = STRIP_9_LENGTH;
#endif
	}
	return strip_size;
 800265a:	89fb      	ldrh	r3, [r7, #14]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	200007a0 	.word	0x200007a0

0800266c <ws2812_pixel_is_in_strip_range>:


bool ws2812_pixel_is_in_strip_range(const strip_bit_e strip_bit, const uint16_t pixel)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	460a      	mov	r2, r1
 8002676:	71fb      	strb	r3, [r7, #7]
 8002678:	4613      	mov	r3, r2
 800267a:	80bb      	strh	r3, [r7, #4]
	bool return_val = false;
 800267c:	2300      	movs	r3, #0
 800267e:	73fb      	strb	r3, [r7, #15]
#if defined(STRIP_1_LENGTH)
	if ((STRIP_BIT_1 == strip_bit) && (pixel < STRIP_1_LENGTH)) return_val = true;
 8002680:	79fb      	ldrb	r3, [r7, #7]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d105      	bne.n	8002692 <ws2812_pixel_is_in_strip_range+0x26>
 8002686:	88bb      	ldrh	r3, [r7, #4]
 8002688:	f5b3 7f0e 	cmp.w	r3, #568	; 0x238
 800268c:	d201      	bcs.n	8002692 <ws2812_pixel_is_in_strip_range+0x26>
 800268e:	2301      	movs	r3, #1
 8002690:	73fb      	strb	r3, [r7, #15]
	else if ((STRIP_BIT_8 == strip_bit) && (pixel < STRIP_8_LENGTH)) return_val = true;
#endif
#if defined(STRIP_9_LENGTH)
	else if ((STRIP_BIT_9 == strip_bit) && (pixel < STRIP_9_LENGTH)) return_val = true;
#endif
	return return_val;
 8002692:	7bfb      	ldrb	r3, [r7, #15]
}
 8002694:	4618      	mov	r0, r3
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <ws2812b_set_led>:


void ws2812b_set_led(const strip_bit_e strip_bit, const uint16_t led_num, const color_t red, const color_t green,
                     const color_t blue)
{
 80026a0:	b590      	push	{r4, r7, lr}
 80026a2:	b087      	sub	sp, #28
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4604      	mov	r4, r0
 80026a8:	4608      	mov	r0, r1
 80026aa:	4611      	mov	r1, r2
 80026ac:	461a      	mov	r2, r3
 80026ae:	4623      	mov	r3, r4
 80026b0:	73fb      	strb	r3, [r7, #15]
 80026b2:	4603      	mov	r3, r0
 80026b4:	81bb      	strh	r3, [r7, #12]
 80026b6:	460b      	mov	r3, r1
 80026b8:	73bb      	strb	r3, [r7, #14]
 80026ba:	4613      	mov	r3, r2
 80026bc:	72fb      	strb	r3, [r7, #11]
	strip_num_e strip_num = ws2812_convert_strip_bit_to_strip_num(strip_bit);
 80026be:	7bfb      	ldrb	r3, [r7, #15]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff ff29 	bl	8002518 <ws2812_convert_strip_bit_to_strip_num>
 80026c6:	4603      	mov	r3, r0
 80026c8:	75fb      	strb	r3, [r7, #23]
    (gp_ws28128b_strip[strip_num] + led_num)->red = red * g_max_current_ratio;
 80026ca:	7bbb      	ldrb	r3, [r7, #14]
 80026cc:	ee07 3a90 	vmov	s15, r3
 80026d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026d4:	4b26      	ldr	r3, [pc, #152]	; (8002770 <ws2812b_set_led+0xd0>)
 80026d6:	edd3 7a00 	vldr	s15, [r3]
 80026da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026de:	7dfb      	ldrb	r3, [r7, #23]
 80026e0:	4a24      	ldr	r2, [pc, #144]	; (8002774 <ws2812b_set_led+0xd4>)
 80026e2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80026e6:	89ba      	ldrh	r2, [r7, #12]
 80026e8:	4613      	mov	r3, r2
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	4413      	add	r3, r2
 80026ee:	440b      	add	r3, r1
 80026f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026f4:	edc7 7a01 	vstr	s15, [r7, #4]
 80026f8:	793a      	ldrb	r2, [r7, #4]
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	701a      	strb	r2, [r3, #0]
    (gp_ws28128b_strip[strip_num] + led_num)->green = green * g_max_current_ratio;
 80026fe:	7afb      	ldrb	r3, [r7, #11]
 8002700:	ee07 3a90 	vmov	s15, r3
 8002704:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002708:	4b19      	ldr	r3, [pc, #100]	; (8002770 <ws2812b_set_led+0xd0>)
 800270a:	edd3 7a00 	vldr	s15, [r3]
 800270e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002712:	7dfb      	ldrb	r3, [r7, #23]
 8002714:	4a17      	ldr	r2, [pc, #92]	; (8002774 <ws2812b_set_led+0xd4>)
 8002716:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800271a:	89ba      	ldrh	r2, [r7, #12]
 800271c:	4613      	mov	r3, r2
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	4413      	add	r3, r2
 8002722:	440b      	add	r3, r1
 8002724:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002728:	edc7 7a01 	vstr	s15, [r7, #4]
 800272c:	793a      	ldrb	r2, [r7, #4]
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	705a      	strb	r2, [r3, #1]
    (gp_ws28128b_strip[strip_num] + led_num)->blue = blue * g_max_current_ratio;
 8002732:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002736:	ee07 3a90 	vmov	s15, r3
 800273a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800273e:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <ws2812b_set_led+0xd0>)
 8002740:	edd3 7a00 	vldr	s15, [r3]
 8002744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002748:	7dfb      	ldrb	r3, [r7, #23]
 800274a:	4a0a      	ldr	r2, [pc, #40]	; (8002774 <ws2812b_set_led+0xd4>)
 800274c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002750:	89ba      	ldrh	r2, [r7, #12]
 8002752:	4613      	mov	r3, r2
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	4413      	add	r3, r2
 8002758:	440b      	add	r3, r1
 800275a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800275e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002762:	793a      	ldrb	r2, [r7, #4]
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	709a      	strb	r2, [r3, #2]
}
 8002768:	bf00      	nop
 800276a:	371c      	adds	r7, #28
 800276c:	46bd      	mov	sp, r7
 800276e:	bd90      	pop	{r4, r7, pc}
 8002770:	20000000 	.word	0x20000000
 8002774:	200007a8 	.word	0x200007a8

08002778 <ws2812b_fill_pwm_buffer_strip_one>:



#if defined(STRIP_1_LENGTH)
void ws2812b_fill_pwm_buffer_strip_one(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
    uint32_t color = 0;
 800277e:	2300      	movs	r3, #0
 8002780:	60fb      	str	r3, [r7, #12]
    uint32_t strip_size = STRIP_1_LENGTH;
 8002782:	f44f 730e 	mov.w	r3, #568	; 0x238
 8002786:	60bb      	str	r3, [r7, #8]
    uint32_t strip_pwm_offset = ws2812_get_pwm_strip_offset(STRIP_BIT_1);
 8002788:	2001      	movs	r0, #1
 800278a:	f7ff fed3 	bl	8002534 <ws2812_get_pwm_strip_offset>
 800278e:	4603      	mov	r3, r0
 8002790:	607b      	str	r3, [r7, #4]
    while (!gb_dma_cmplt_strip_2)
 8002792:	e002      	b.n	800279a <ws2812b_fill_pwm_buffer_strip_one+0x22>
    {
        osDelay(1);
 8002794:	2001      	movs	r0, #1
 8002796:	f001 f82d 	bl	80037f4 <osDelay>
    while (!gb_dma_cmplt_strip_2)
 800279a:	4b44      	ldr	r3, [pc, #272]	; (80028ac <ws2812b_fill_pwm_buffer_strip_one+0x134>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	f083 0301 	eor.w	r3, r3, #1
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1f5      	bne.n	8002794 <ws2812b_fill_pwm_buffer_strip_one+0x1c>
    }
    for (uint16_t iii = 0; iii < strip_size; iii++)
 80027a8:	2300      	movs	r3, #0
 80027aa:	82fb      	strh	r3, [r7, #22]
 80027ac:	e046      	b.n	800283c <ws2812b_fill_pwm_buffer_strip_one+0xc4>
    {
        color = (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->green) << 16) | \
 80027ae:	4b40      	ldr	r3, [pc, #256]	; (80028b0 <ws2812b_fill_pwm_buffer_strip_one+0x138>)
 80027b0:	6819      	ldr	r1, [r3, #0]
 80027b2:	8afa      	ldrh	r2, [r7, #22]
 80027b4:	4613      	mov	r3, r2
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	4413      	add	r3, r2
 80027ba:	440b      	add	r3, r1
 80027bc:	785b      	ldrb	r3, [r3, #1]
 80027be:	0419      	lsls	r1, r3, #16
                                (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->red) << 8) | \
 80027c0:	4b3b      	ldr	r3, [pc, #236]	; (80028b0 <ws2812b_fill_pwm_buffer_strip_one+0x138>)
 80027c2:	6818      	ldr	r0, [r3, #0]
 80027c4:	8afa      	ldrh	r2, [r7, #22]
 80027c6:	4613      	mov	r3, r2
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	4413      	add	r3, r2
 80027cc:	4403      	add	r3, r0
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	021b      	lsls	r3, r3, #8
        color = (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->green) << 16) | \
 80027d2:	4319      	orrs	r1, r3
                                (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->blue));
 80027d4:	4b36      	ldr	r3, [pc, #216]	; (80028b0 <ws2812b_fill_pwm_buffer_strip_one+0x138>)
 80027d6:	6818      	ldr	r0, [r3, #0]
 80027d8:	8afa      	ldrh	r2, [r7, #22]
 80027da:	4613      	mov	r3, r2
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	4413      	add	r3, r2
 80027e0:	4403      	add	r3, r0
 80027e2:	789b      	ldrb	r3, [r3, #2]
                                (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->red) << 8) | \
 80027e4:	430b      	orrs	r3, r1
        color = (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->green) << 16) | \
 80027e6:	60fb      	str	r3, [r7, #12]
        for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 80027e8:	2300      	movs	r3, #0
 80027ea:	757b      	strb	r3, [r7, #21]
 80027ec:	e020      	b.n	8002830 <ws2812b_fill_pwm_buffer_strip_one+0xb8>
        {
            gp_pwm_data_fill[strip_pwm_offset + (iii * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + yyy] = (color & (1 << (23 - yyy))) ? (uint16_t)(WS2812B_BIT_SET_CYCLES + 1) : (uint16_t)WS2812B_BIT_RESET_CYCLES;
 80027ee:	7d7b      	ldrb	r3, [r7, #21]
 80027f0:	f1c3 0317 	rsb	r3, r3, #23
 80027f4:	2201      	movs	r2, #1
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	461a      	mov	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4013      	ands	r3, r2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <ws2812b_fill_pwm_buffer_strip_one+0x90>
 8002804:	2028      	movs	r0, #40	; 0x28
 8002806:	e000      	b.n	800280a <ws2812b_fill_pwm_buffer_strip_one+0x92>
 8002808:	2014      	movs	r0, #20
 800280a:	4b2a      	ldr	r3, [pc, #168]	; (80028b4 <ws2812b_fill_pwm_buffer_strip_one+0x13c>)
 800280c:	6819      	ldr	r1, [r3, #0]
 800280e:	8afa      	ldrh	r2, [r7, #22]
 8002810:	4613      	mov	r3, r2
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	4413      	add	r3, r2
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	461a      	mov	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	441a      	add	r2, r3
 800281e:	7d7b      	ldrb	r3, [r7, #21]
 8002820:	4413      	add	r3, r2
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	440b      	add	r3, r1
 8002826:	4602      	mov	r2, r0
 8002828:	801a      	strh	r2, [r3, #0]
        for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 800282a:	7d7b      	ldrb	r3, [r7, #21]
 800282c:	3301      	adds	r3, #1
 800282e:	757b      	strb	r3, [r7, #21]
 8002830:	7d7b      	ldrb	r3, [r7, #21]
 8002832:	2b17      	cmp	r3, #23
 8002834:	d9db      	bls.n	80027ee <ws2812b_fill_pwm_buffer_strip_one+0x76>
    for (uint16_t iii = 0; iii < strip_size; iii++)
 8002836:	8afb      	ldrh	r3, [r7, #22]
 8002838:	3301      	adds	r3, #1
 800283a:	82fb      	strh	r3, [r7, #22]
 800283c:	8afb      	ldrh	r3, [r7, #22]
 800283e:	68ba      	ldr	r2, [r7, #8]
 8002840:	429a      	cmp	r2, r3
 8002842:	d8b4      	bhi.n	80027ae <ws2812b_fill_pwm_buffer_strip_one+0x36>
        }
    }
    for (uint16_t iii = 0; iii < WS2812B_RESET_TIME_CYCLES; iii++)
 8002844:	2300      	movs	r3, #0
 8002846:	827b      	strh	r3, [r7, #18]
 8002848:	e012      	b.n	8002870 <ws2812b_fill_pwm_buffer_strip_one+0xf8>
    {
        gp_pwm_data_fill[(strip_pwm_offset + (strip_size * BITS_PER_BYTE * sizeof(ws2812b_led_t))) + iii] = 0;
 800284a:	4b1a      	ldr	r3, [pc, #104]	; (80028b4 <ws2812b_fill_pwm_buffer_strip_one+0x13c>)
 800284c:	6819      	ldr	r1, [r3, #0]
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	4613      	mov	r3, r2
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	4413      	add	r3, r2
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	461a      	mov	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	441a      	add	r2, r3
 800285e:	8a7b      	ldrh	r3, [r7, #18]
 8002860:	4413      	add	r3, r2
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	440b      	add	r3, r1
 8002866:	2200      	movs	r2, #0
 8002868:	801a      	strh	r2, [r3, #0]
    for (uint16_t iii = 0; iii < WS2812B_RESET_TIME_CYCLES; iii++)
 800286a:	8a7b      	ldrh	r3, [r7, #18]
 800286c:	3301      	adds	r3, #1
 800286e:	827b      	strh	r3, [r7, #18]
 8002870:	8a7b      	ldrh	r3, [r7, #18]
 8002872:	ee07 3a90 	vmov	s15, r3
 8002876:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800287a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80028b8 <ws2812b_fill_pwm_buffer_strip_one+0x140>
 800287e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002886:	d4e0      	bmi.n	800284a <ws2812b_fill_pwm_buffer_strip_one+0xd2>
    }
    gb_dma_cmplt_strip_1 = false;
 8002888:	4b0c      	ldr	r3, [pc, #48]	; (80028bc <ws2812b_fill_pwm_buffer_strip_one+0x144>)
 800288a:	2200      	movs	r2, #0
 800288c:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_1, (uint32_t *)(gp_pwm_data_fill + strip_pwm_offset), (STRIP_1_LENGTH * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + WS2812B_RESET_TIME_CYCLES);
 800288e:	4b09      	ldr	r3, [pc, #36]	; (80028b4 <ws2812b_fill_pwm_buffer_strip_one+0x13c>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	441a      	add	r2, r3
 8002898:	f244 03f8 	movw	r3, #16632	; 0x40f8
 800289c:	2100      	movs	r1, #0
 800289e:	4808      	ldr	r0, [pc, #32]	; (80028c0 <ws2812b_fill_pwm_buffer_strip_one+0x148>)
 80028a0:	f005 ff28 	bl	80086f4 <HAL_TIM_PWM_Start_DMA>
}
 80028a4:	bf00      	nop
 80028a6:	3718      	adds	r7, #24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	2000006e 	.word	0x2000006e
 80028b0:	200007a8 	.word	0x200007a8
 80028b4:	200007a4 	.word	0x200007a4
 80028b8:	453b8000 	.word	0x453b8000
 80028bc:	2000006d 	.word	0x2000006d
 80028c0:	200022ec 	.word	0x200022ec

080028c4 <ws2812b_init>:


uint32_t g_size = 0;

void ws2812b_init(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0

#if defined(STRIP_1_LENGTH)
	gp_ws28128b_strip[STRIP_NUM_1] = g_strip_1;
 80028ca:	4b31      	ldr	r3, [pc, #196]	; (8002990 <ws2812b_init+0xcc>)
 80028cc:	4a31      	ldr	r2, [pc, #196]	; (8002994 <ws2812b_init+0xd0>)
 80028ce:	601a      	str	r2, [r3, #0]
#endif
#if defined(STRIP_4_LENGTH)
	gp_ws28128b_strip[STRIP_NUM_4] = g_strip_4;
#endif

	uint8_t num_strips = NUM_STRIPS;
 80028d0:	2301      	movs	r3, #1
 80028d2:	70fb      	strb	r3, [r7, #3]
	for (int iii = 0; iii < NUM_STRIPS; iii++) g_all_strip_mask |= 1 << iii;
 80028d4:	2300      	movs	r3, #0
 80028d6:	607b      	str	r3, [r7, #4]
 80028d8:	e00f      	b.n	80028fa <ws2812b_init+0x36>
 80028da:	2201      	movs	r2, #1
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	b21a      	sxth	r2, r3
 80028e4:	4b2c      	ldr	r3, [pc, #176]	; (8002998 <ws2812b_init+0xd4>)
 80028e6:	881b      	ldrh	r3, [r3, #0]
 80028e8:	b21b      	sxth	r3, r3
 80028ea:	4313      	orrs	r3, r2
 80028ec:	b21b      	sxth	r3, r3
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	4b29      	ldr	r3, [pc, #164]	; (8002998 <ws2812b_init+0xd4>)
 80028f2:	801a      	strh	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3301      	adds	r3, #1
 80028f8:	607b      	str	r3, [r7, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	ddec      	ble.n	80028da <ws2812b_init+0x16>
	switch (num_strips)
 8002900:	78fb      	ldrb	r3, [r7, #3]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d110      	bne.n	8002928 <ws2812b_init+0x64>
		case 2:
			g_num_leds += STRIP_2_LENGTH;
			if (STRIP_2_LENGTH > g_max_strip_length) g_max_strip_length = STRIP_2_LENGTH;
#endif
		case 1:
			g_num_leds += STRIP_1_LENGTH;
 8002906:	4b25      	ldr	r3, [pc, #148]	; (800299c <ws2812b_init+0xd8>)
 8002908:	881b      	ldrh	r3, [r3, #0]
 800290a:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800290e:	b29a      	uxth	r2, r3
 8002910:	4b22      	ldr	r3, [pc, #136]	; (800299c <ws2812b_init+0xd8>)
 8002912:	801a      	strh	r2, [r3, #0]
			if (STRIP_1_LENGTH > g_max_strip_length) g_max_strip_length = STRIP_1_LENGTH;
 8002914:	4b22      	ldr	r3, [pc, #136]	; (80029a0 <ws2812b_init+0xdc>)
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	f5b3 7f0e 	cmp.w	r3, #568	; 0x238
 800291c:	d203      	bcs.n	8002926 <ws2812b_init+0x62>
 800291e:	4b20      	ldr	r3, [pc, #128]	; (80029a0 <ws2812b_init+0xdc>)
 8002920:	f44f 720e 	mov.w	r2, #568	; 0x238
 8002924:	801a      	strh	r2, [r3, #0]
		break;
 8002926:	bf00      	nop
	}
    gp_pwm_data_fill = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
 8002928:	4b1c      	ldr	r3, [pc, #112]	; (800299c <ws2812b_init+0xd8>)
 800292a:	881b      	ldrh	r3, [r3, #0]
 800292c:	461a      	mov	r2, r3
 800292e:	4613      	mov	r3, r2
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	4413      	add	r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	ee07 3a90 	vmov	s15, r3
 800293a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800293e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80029a4 <ws2812b_init+0xe0>
 8002942:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002946:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800294a:	ee17 0a90 	vmov	r0, s15
 800294e:	f008 fa35 	bl	800adbc <malloc>
 8002952:	4603      	mov	r3, r0
 8002954:	461a      	mov	r2, r3
 8002956:	4b14      	ldr	r3, [pc, #80]	; (80029a8 <ws2812b_init+0xe4>)
 8002958:	601a      	str	r2, [r3, #0]
    //gp_pwm_data_ping = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
    //gp_pwm_data_pong = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
    g_size = (sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES);
 800295a:	4b10      	ldr	r3, [pc, #64]	; (800299c <ws2812b_init+0xd8>)
 800295c:	881b      	ldrh	r3, [r3, #0]
 800295e:	461a      	mov	r2, r3
 8002960:	4613      	mov	r3, r2
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	4413      	add	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	ee07 3a90 	vmov	s15, r3
 800296c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002970:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80029a4 <ws2812b_init+0xe0>
 8002974:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002978:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800297c:	ee17 2a90 	vmov	r2, s15
 8002980:	4b0a      	ldr	r3, [pc, #40]	; (80029ac <ws2812b_init+0xe8>)
 8002982:	601a      	str	r2, [r3, #0]
    //gp_pwm_data_fill = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_max_strip_length) + WS2812B_RESET_TIME_CYCLES);
	current_monitor_init();
 8002984:	f7fe f8c2 	bl	8000b0c <current_monitor_init>
}
 8002988:	bf00      	nop
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	200007a8 	.word	0x200007a8
 8002994:	200000f4 	.word	0x200000f4
 8002998:	2000079e 	.word	0x2000079e
 800299c:	2000079c 	.word	0x2000079c
 80029a0:	200007a0 	.word	0x200007a0
 80029a4:	453b8000 	.word	0x453b8000
 80029a8:	200007a4 	.word	0x200007a4
 80029ac:	20000810 	.word	0x20000810

080029b0 <ws2812b_show_strip_one>:


void ws2812b_show_strip_one(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
    ws2812b_fill_pwm_buffer_strip_one();
 80029b4:	f7ff fee0 	bl	8002778 <ws2812b_fill_pwm_buffer_strip_one>
}
 80029b8:	bf00      	nop
 80029ba:	bd80      	pop	{r7, pc}

080029bc <task_button_press_interrupt_occurred>:
bool        g_animate_led_pause_flag = false;
bool        g_animate_led_interrupt = false;
bool        g_interrupt_flag[NUM_ISR] = {false};

bool task_button_press_interrupt_occurred(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
    return g_animate_led_interrupt;
 80029c0:	4b03      	ldr	r3, [pc, #12]	; (80029d0 <task_button_press_interrupt_occurred+0x14>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	20000837 	.word	0x20000837

080029d4 <task_led_ctrl_button_to_isr>:


isr_e task_led_ctrl_button_to_isr(const board_init_push_buttons_e button)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	71fb      	strb	r3, [r7, #7]
    isr_e return_val;
    switch (button)
 80029de:	79fb      	ldrb	r3, [r7, #7]
 80029e0:	2b03      	cmp	r3, #3
 80029e2:	d817      	bhi.n	8002a14 <task_led_ctrl_button_to_isr+0x40>
 80029e4:	a201      	add	r2, pc, #4	; (adr r2, 80029ec <task_led_ctrl_button_to_isr+0x18>)
 80029e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ea:	bf00      	nop
 80029ec:	080029fd 	.word	0x080029fd
 80029f0:	08002a03 	.word	0x08002a03
 80029f4:	08002a09 	.word	0x08002a09
 80029f8:	08002a0f 	.word	0x08002a0f
    {
        case PUSH_BUTTON_A:
            return_val = ISR_SPEED;
 80029fc:	2300      	movs	r3, #0
 80029fe:	73fb      	strb	r3, [r7, #15]
        break;
 8002a00:	e009      	b.n	8002a16 <task_led_ctrl_button_to_isr+0x42>
        case PUSH_BUTTON_B:
            return_val = ISR_STATE;
 8002a02:	2301      	movs	r3, #1
 8002a04:	73fb      	strb	r3, [r7, #15]
        break;
 8002a06:	e006      	b.n	8002a16 <task_led_ctrl_button_to_isr+0x42>
        case PUSH_BUTTON_C:
            return_val = ISR_COLOR;
 8002a08:	2302      	movs	r3, #2
 8002a0a:	73fb      	strb	r3, [r7, #15]
        break;
 8002a0c:	e003      	b.n	8002a16 <task_led_ctrl_button_to_isr+0x42>
        case PUSH_BUTTON_D:
            return_val = ISR_PAUSE;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	73fb      	strb	r3, [r7, #15]
        break;
 8002a12:	e000      	b.n	8002a16 <task_led_ctrl_button_to_isr+0x42>
        default: // do nothing!
        break;
 8002a14:	bf00      	nop
    }
    return return_val;
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <task_button_press_ctrl_set_interrupt_flag>:


void task_button_press_ctrl_set_interrupt_flag(const isr_e src)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	71fb      	strb	r3, [r7, #7]
    g_animate_led_interrupt = true;
 8002a2e:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <task_button_press_ctrl_set_interrupt_flag+0x24>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	701a      	strb	r2, [r3, #0]
    g_interrupt_flag[src] = true;
 8002a34:	79fb      	ldrb	r3, [r7, #7]
 8002a36:	4a05      	ldr	r2, [pc, #20]	; (8002a4c <task_button_press_ctrl_set_interrupt_flag+0x28>)
 8002a38:	2101      	movs	r1, #1
 8002a3a:	54d1      	strb	r1, [r2, r3]
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	20000837 	.word	0x20000837
 8002a4c:	20000838 	.word	0x20000838

08002a50 <task_button_press_ctrl_interrupt_flag>:


bool task_button_press_ctrl_interrupt_flag(const isr_e src)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	71fb      	strb	r3, [r7, #7]
    bool return_val = g_interrupt_flag[src];
 8002a5a:	79fb      	ldrb	r3, [r7, #7]
 8002a5c:	4a08      	ldr	r2, [pc, #32]	; (8002a80 <task_button_press_ctrl_interrupt_flag+0x30>)
 8002a5e:	5cd3      	ldrb	r3, [r2, r3]
 8002a60:	73fb      	strb	r3, [r7, #15]
    if (return_val) g_interrupt_flag[src] = false; // auto clear
 8002a62:	7bfb      	ldrb	r3, [r7, #15]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <task_button_press_ctrl_interrupt_flag+0x20>
 8002a68:	79fb      	ldrb	r3, [r7, #7]
 8002a6a:	4a05      	ldr	r2, [pc, #20]	; (8002a80 <task_button_press_ctrl_interrupt_flag+0x30>)
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	54d1      	strb	r1, [r2, r3]
    return return_val;
 8002a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	20000838 	.word	0x20000838

08002a84 <task_button_press_check_interrupts>:


bool task_button_press_check_interrupts(uint8_t *red, uint8_t *green, uint8_t *blue)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
    bool return_val = false;
 8002a90:	2300      	movs	r3, #0
 8002a92:	75fb      	strb	r3, [r7, #23]
    if (task_button_press_major_state_change())
 8002a94:	f000 f85a 	bl	8002b4c <task_button_press_major_state_change>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d008      	beq.n	8002ab0 <task_button_press_check_interrupts+0x2c>
    {
        task_button_press_interrupt_flag_clear();
 8002a9e:	f000 f849 	bl	8002b34 <task_button_press_interrupt_flag_clear>
        return_val = true;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	75fb      	strb	r3, [r7, #23]
        animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLACK);
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	2001      	movs	r0, #1
 8002aaa:	f7fe f9d1 	bl	8000e50 <animate_led_solid_custom_color>
 8002aae:	e039      	b.n	8002b24 <task_button_press_check_interrupts+0xa0>
    }
    else if (task_button_press_ctrl_interrupt_flag(ISR_STATE))
 8002ab0:	2001      	movs	r0, #1
 8002ab2:	f7ff ffcd 	bl	8002a50 <task_button_press_ctrl_interrupt_flag>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d008      	beq.n	8002ace <task_button_press_check_interrupts+0x4a>
    {
        task_button_press_interrupt_flag_clear();
 8002abc:	f000 f83a 	bl	8002b34 <task_button_press_interrupt_flag_clear>
        return_val = true;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	75fb      	strb	r3, [r7, #23]
        animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLACK);
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	2001      	movs	r0, #1
 8002ac8:	f7fe f9c2 	bl	8000e50 <animate_led_solid_custom_color>
 8002acc:	e02a      	b.n	8002b24 <task_button_press_check_interrupts+0xa0>
    }
    else if (task_button_press_ctrl_interrupt_flag(ISR_PAUSE))
 8002ace:	2003      	movs	r0, #3
 8002ad0:	f7ff ffbe 	bl	8002a50 <task_button_press_ctrl_interrupt_flag>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00a      	beq.n	8002af0 <task_button_press_check_interrupts+0x6c>
    {
        task_button_press_interrupt_flag_clear();
 8002ada:	f000 f82b 	bl	8002b34 <task_button_press_interrupt_flag_clear>
        while (g_animate_led_pause_flag)
 8002ade:	e002      	b.n	8002ae6 <task_button_press_check_interrupts+0x62>
        {
            osDelay(10);
 8002ae0:	200a      	movs	r0, #10
 8002ae2:	f000 fe87 	bl	80037f4 <osDelay>
        while (g_animate_led_pause_flag)
 8002ae6:	4b12      	ldr	r3, [pc, #72]	; (8002b30 <task_button_press_check_interrupts+0xac>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f8      	bne.n	8002ae0 <task_button_press_check_interrupts+0x5c>
 8002aee:	e019      	b.n	8002b24 <task_button_press_check_interrupts+0xa0>
        }
    }
    else if (task_button_press_ctrl_interrupt_flag(ISR_COLOR))
 8002af0:	2002      	movs	r0, #2
 8002af2:	f7ff ffad 	bl	8002a50 <task_button_press_ctrl_interrupt_flag>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d013      	beq.n	8002b24 <task_button_press_check_interrupts+0xa0>
    {
        task_button_press_interrupt_flag_clear();
 8002afc:	f000 f81a 	bl	8002b34 <task_button_press_interrupt_flag_clear>
        // interrupt modifies the current color... apply it to the animation!
        *red = task_led_ctrl_color_red_hex();
 8002b00:	f000 fc0a 	bl	8003318 <task_led_ctrl_color_red_hex>
 8002b04:	4603      	mov	r3, r0
 8002b06:	461a      	mov	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	701a      	strb	r2, [r3, #0]
        *green = task_led_ctrl_color_green_hex();
 8002b0c:	f000 fc2c 	bl	8003368 <task_led_ctrl_color_green_hex>
 8002b10:	4603      	mov	r3, r0
 8002b12:	461a      	mov	r2, r3
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	701a      	strb	r2, [r3, #0]
        *blue = task_led_ctrl_color_blue_hex();
 8002b18:	f000 fc4e 	bl	80033b8 <task_led_ctrl_color_blue_hex>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	461a      	mov	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	701a      	strb	r2, [r3, #0]
    }
    return return_val;
 8002b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3718      	adds	r7, #24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20000836 	.word	0x20000836

08002b34 <task_button_press_interrupt_flag_clear>:


void task_button_press_interrupt_flag_clear(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
    g_animate_led_interrupt = false;
 8002b38:	4b03      	ldr	r3, [pc, #12]	; (8002b48 <task_button_press_interrupt_flag_clear+0x14>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	701a      	strb	r2, [r3, #0]
}
 8002b3e:	bf00      	nop
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	20000837 	.word	0x20000837

08002b4c <task_button_press_major_state_change>:
uint32_t c_ok_count = 0;
uint32_t d_ok_count = 0;


bool task_button_press_major_state_change(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
    return task_button_press_major_change;
 8002b50:	4b03      	ldr	r3, [pc, #12]	; (8002b60 <task_button_press_major_state_change+0x14>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	20000835 	.word	0x20000835

08002b64 <task_button_press>:
    task_button_press_major_change = false;
}


void task_button_press(void *argument)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
    uint32_t button_pressed_bit = 0;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	60bb      	str	r3, [r7, #8]
    uint32_t timestamp_diff = 0;
 8002b70:	2300      	movs	r3, #0
 8002b72:	60fb      	str	r3, [r7, #12]
    color_hex_code_e color = COLOR_HEX_BLACK;
 8002b74:	2300      	movs	r3, #0
 8002b76:	617b      	str	r3, [r7, #20]
    IRQn_Type irq_type = 0;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	74fb      	strb	r3, [r7, #19]
    while (1)
    {
        xTaskNotifyWait(0, button_pressed_bit, &button_pressed_bit, portMAX_DELAY);
 8002b7c:	68b9      	ldr	r1, [r7, #8]
 8002b7e:	f107 0208 	add.w	r2, r7, #8
 8002b82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b86:	2000      	movs	r0, #0
 8002b88:	f002 fae0 	bl	800514c <xTaskNotifyWait>
        HAL_GPIO_WritePin(PIN_PORT_B, PIN_INT_LVL_EN, GPIO_PIN_RESET);
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	2101      	movs	r1, #1
 8002b90:	488b      	ldr	r0, [pc, #556]	; (8002dc0 <task_button_press+0x25c>)
 8002b92:	f004 f9d1 	bl	8006f38 <HAL_GPIO_WritePin>
        osDelay(700);
 8002b96:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8002b9a:	f000 fe2b 	bl	80037f4 <osDelay>
        HAL_GPIO_WritePin(PIN_PORT_B, PIN_INT_LVL_EN, GPIO_PIN_SET);
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	4887      	ldr	r0, [pc, #540]	; (8002dc0 <task_button_press+0x25c>)
 8002ba4:	f004 f9c8 	bl	8006f38 <HAL_GPIO_WritePin>

        timestamp_diff = g_button_press_timestamp[(board_init_push_buttons_e) button_pressed_bit][TIMESTAMP_CURRENT] - \
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	461a      	mov	r2, r3
 8002bae:	4b85      	ldr	r3, [pc, #532]	; (8002dc4 <task_button_press+0x260>)
 8002bb0:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
                        g_button_press_timestamp[(board_init_push_buttons_e)button_pressed_bit][TIMESTAMP_PREVIOUS];
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	4982      	ldr	r1, [pc, #520]	; (8002dc4 <task_button_press+0x260>)
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	440b      	add	r3, r1
 8002bbe:	685b      	ldr	r3, [r3, #4]
        timestamp_diff = g_button_press_timestamp[(board_init_push_buttons_e) button_pressed_bit][TIMESTAMP_CURRENT] - \
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	60fb      	str	r3, [r7, #12]
        if (timestamp_diff < SWITCH_FAST_PRESS_TIME_MILLISECONDS) fast_press_count++;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bca:	d206      	bcs.n	8002bda <task_button_press+0x76>
 8002bcc:	4b7e      	ldr	r3, [pc, #504]	; (8002dc8 <task_button_press+0x264>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	4b7c      	ldr	r3, [pc, #496]	; (8002dc8 <task_button_press+0x264>)
 8002bd6:	701a      	strb	r2, [r3, #0]
 8002bd8:	e002      	b.n	8002be0 <task_button_press+0x7c>
        else fast_press_count = 0;
 8002bda:	4b7b      	ldr	r3, [pc, #492]	; (8002dc8 <task_button_press+0x264>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	701a      	strb	r2, [r3, #0]
        task_button_press_ctrl_set_interrupt_flag(task_led_ctrl_button_to_isr((board_init_push_buttons_e) button_pressed_bit));
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff fef5 	bl	80029d4 <task_led_ctrl_button_to_isr>
 8002bea:	4603      	mov	r3, r0
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff ff19 	bl	8002a24 <task_button_press_ctrl_set_interrupt_flag>
        if (fast_press_count >= (SWITCH_HISTORY_DEPTH-1))
 8002bf2:	4b75      	ldr	r3, [pc, #468]	; (8002dc8 <task_button_press+0x264>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2b03      	cmp	r3, #3
 8002bf8:	d975      	bls.n	8002ce6 <task_button_press+0x182>
        {
            task_button_press_major_change = true;
 8002bfa:	4b74      	ldr	r3, [pc, #464]	; (8002dcc <task_button_press+0x268>)
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	701a      	strb	r2, [r3, #0]
            fast_press_count = 0;
 8002c00:	4b71      	ldr	r3, [pc, #452]	; (8002dc8 <task_button_press+0x264>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	701a      	strb	r2, [r3, #0]
            switch ((board_init_push_buttons_e) button_pressed_bit)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b03      	cmp	r3, #3
 8002c0c:	d841      	bhi.n	8002c92 <task_button_press+0x12e>
 8002c0e:	a201      	add	r2, pc, #4	; (adr r2, 8002c14 <task_button_press+0xb0>)
 8002c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c14:	08002c25 	.word	0x08002c25
 8002c18:	08002c3f 	.word	0x08002c3f
 8002c1c:	08002c5b 	.word	0x08002c5b
 8002c20:	08002c75 	.word	0x08002c75
            {
                case PUSH_BUTTON_A:
                    a_ok_count++;
 8002c24:	4b6a      	ldr	r3, [pc, #424]	; (8002dd0 <task_button_press+0x26c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	4a69      	ldr	r2, [pc, #420]	; (8002dd0 <task_button_press+0x26c>)
 8002c2c:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_GREEN;
 8002c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c32:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_A_IRQ;
 8002c34:	2308      	movs	r3, #8
 8002c36:	74fb      	strb	r3, [r7, #19]
                    task_led_ctrl_draw_all_toggle();
 8002c38:	f000 f8d2 	bl	8002de0 <task_led_ctrl_draw_all_toggle>
                    //task_led_ctrl_speed_reset();
                break;
 8002c3c:	e02a      	b.n	8002c94 <task_button_press+0x130>
                case PUSH_BUTTON_B:
                    b_ok_count++;
 8002c3e:	4b65      	ldr	r3, [pc, #404]	; (8002dd4 <task_button_press+0x270>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	3301      	adds	r3, #1
 8002c44:	4a63      	ldr	r2, [pc, #396]	; (8002dd4 <task_button_press+0x270>)
 8002c46:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_BLUE;
 8002c48:	23ff      	movs	r3, #255	; 0xff
 8002c4a:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_B_IRQ;
 8002c4c:	2328      	movs	r3, #40	; 0x28
 8002c4e:	74fb      	strb	r3, [r7, #19]
                    task_led_ctrl_animate_iteration_reset();
 8002c50:	f000 fc52 	bl	80034f8 <task_led_ctrl_animate_iteration_reset>
                    task_led_ctrl_animate_state_demo(); // enter demo state
 8002c54:	f000 fc7a 	bl	800354c <task_led_ctrl_animate_state_demo>
                break;
 8002c58:	e01c      	b.n	8002c94 <task_button_press+0x130>
                case PUSH_BUTTON_C:
                    c_ok_count++;
 8002c5a:	4b5f      	ldr	r3, [pc, #380]	; (8002dd8 <task_button_press+0x274>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	4a5d      	ldr	r2, [pc, #372]	; (8002dd8 <task_button_press+0x274>)
 8002c62:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_RED;
 8002c64:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8002c68:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_C_IRQ;
 8002c6a:	2317      	movs	r3, #23
 8002c6c:	74fb      	strb	r3, [r7, #19]
                    // don't change iteration count.  Simply go to color demo mode.
                    task_led_ctrl_color_state_demo();
 8002c6e:	f000 fb05 	bl	800327c <task_led_ctrl_color_state_demo>
                break;
 8002c72:	e00f      	b.n	8002c94 <task_button_press+0x130>
                case PUSH_BUTTON_D:
                    task_led_ctrl_brightness_adjust();
 8002c74:	f000 fa9c 	bl	80031b0 <task_led_ctrl_brightness_adjust>
                    task_led_ctrl_clear_pause();
 8002c78:	f000 faca 	bl	8003210 <task_led_ctrl_clear_pause>
                    d_ok_count++;
 8002c7c:	4b57      	ldr	r3, [pc, #348]	; (8002ddc <task_button_press+0x278>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	3301      	adds	r3, #1
 8002c82:	4a56      	ldr	r2, [pc, #344]	; (8002ddc <task_button_press+0x278>)
 8002c84:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_WHITE;
 8002c86:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002c8a:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_D_IRQ;
 8002c8c:	2306      	movs	r3, #6
 8002c8e:	74fb      	strb	r3, [r7, #19]
                break;
 8002c90:	e000      	b.n	8002c94 <task_button_press+0x130>
                default:
                break;
 8002c92:	bf00      	nop
            }
            for (uint8_t iii = 0; iii < 3; iii++)
 8002c94:	2300      	movs	r3, #0
 8002c96:	74bb      	strb	r3, [r7, #18]
 8002c98:	e012      	b.n	8002cc0 <task_button_press+0x15c>
            {
                animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, color);
 8002c9a:	6979      	ldr	r1, [r7, #20]
 8002c9c:	2001      	movs	r0, #1
 8002c9e:	f7fe f8d7 	bl	8000e50 <animate_led_solid_custom_color>
                osDelay(500);
 8002ca2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ca6:	f000 fda5 	bl	80037f4 <osDelay>
                animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLACK);
 8002caa:	2100      	movs	r1, #0
 8002cac:	2001      	movs	r0, #1
 8002cae:	f7fe f8cf 	bl	8000e50 <animate_led_solid_custom_color>
                osDelay(500);
 8002cb2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002cb6:	f000 fd9d 	bl	80037f4 <osDelay>
            for (uint8_t iii = 0; iii < 3; iii++)
 8002cba:	7cbb      	ldrb	r3, [r7, #18]
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	74bb      	strb	r3, [r7, #18]
 8002cc0:	7cbb      	ldrb	r3, [r7, #18]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d9e9      	bls.n	8002c9a <task_button_press+0x136>
            }
            HAL_NVIC_SetPriority(irq_type, 24, 0);
 8002cc6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	2118      	movs	r1, #24
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f003 fcf3 	bl	80066ba <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(irq_type);
 8002cd4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f003 fd0a 	bl	80066f2 <HAL_NVIC_EnableIRQ>
            task_button_press_major_change = false;
 8002cde:	4b3b      	ldr	r3, [pc, #236]	; (8002dcc <task_button_press+0x268>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	701a      	strb	r2, [r3, #0]
 8002ce4:	e74a      	b.n	8002b7c <task_button_press+0x18>
        }
        else
        {
            // no state change here
            task_button_press_ctrl_set_interrupt_flag(task_led_ctrl_button_to_isr((board_init_push_buttons_e) button_pressed_bit));
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff fe72 	bl	80029d4 <task_led_ctrl_button_to_isr>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff fe96 	bl	8002a24 <task_button_press_ctrl_set_interrupt_flag>
            switch ((board_init_push_buttons_e) button_pressed_bit)
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b03      	cmp	r3, #3
 8002cfe:	d85d      	bhi.n	8002dbc <task_button_press+0x258>
 8002d00:	a201      	add	r2, pc, #4	; (adr r2, 8002d08 <task_button_press+0x1a4>)
 8002d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d06:	bf00      	nop
 8002d08:	08002d19 	.word	0x08002d19
 8002d0c:	08002d39 	.word	0x08002d39
 8002d10:	08002d6d 	.word	0x08002d6d
 8002d14:	08002d9d 	.word	0x08002d9d
            {
                case PUSH_BUTTON_A:
                    a_ok_count++;
 8002d18:	4b2d      	ldr	r3, [pc, #180]	; (8002dd0 <task_button_press+0x26c>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	4a2c      	ldr	r2, [pc, #176]	; (8002dd0 <task_button_press+0x26c>)
 8002d20:	6013      	str	r3, [r2, #0]
                    task_led_ctrl_speed_adjust();
 8002d22:	f000 fbd1 	bl	80034c8 <task_led_ctrl_speed_adjust>
                    HAL_NVIC_SetPriority(PUSH_BUTTON_A_IRQ, 24, 0);
 8002d26:	2200      	movs	r2, #0
 8002d28:	2118      	movs	r1, #24
 8002d2a:	2008      	movs	r0, #8
 8002d2c:	f003 fcc5 	bl	80066ba <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_A_IRQ);
 8002d30:	2008      	movs	r0, #8
 8002d32:	f003 fcde 	bl	80066f2 <HAL_NVIC_EnableIRQ>
                break;
 8002d36:	e042      	b.n	8002dbe <task_button_press+0x25a>
                case PUSH_BUTTON_B:
                    b_ok_count++;
 8002d38:	4b26      	ldr	r3, [pc, #152]	; (8002dd4 <task_button_press+0x270>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	4a25      	ldr	r2, [pc, #148]	; (8002dd4 <task_button_press+0x270>)
 8002d40:	6013      	str	r3, [r2, #0]
                    if (MASTER_LED_STATE_DEMO == task_led_ctrl_animate_state())
 8002d42:	f000 fc2b 	bl	800359c <task_led_ctrl_animate_state>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d102      	bne.n	8002d52 <task_button_press+0x1ee>
                    {
                        task_led_ctrl_animate_state_fixed(); // animation count is auto cleared here.
 8002d4c:	f000 fc10 	bl	8003570 <task_led_ctrl_animate_state_fixed>
 8002d50:	e003      	b.n	8002d5a <task_button_press+0x1f6>
                    }
                    else
                    {
                        task_led_ctrl_animate_iteration_reset();
 8002d52:	f000 fbd1 	bl	80034f8 <task_led_ctrl_animate_iteration_reset>
                        task_led_ctrl_animate_adjust_state();
 8002d56:	f000 fbdb 	bl	8003510 <task_led_ctrl_animate_adjust_state>
                    }
                    HAL_NVIC_SetPriority(PUSH_BUTTON_B_IRQ, 24, 0);
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	2118      	movs	r1, #24
 8002d5e:	2028      	movs	r0, #40	; 0x28
 8002d60:	f003 fcab 	bl	80066ba <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_B_IRQ);
 8002d64:	2028      	movs	r0, #40	; 0x28
 8002d66:	f003 fcc4 	bl	80066f2 <HAL_NVIC_EnableIRQ>
                break;
 8002d6a:	e028      	b.n	8002dbe <task_button_press+0x25a>
                case PUSH_BUTTON_C:
                    c_ok_count++;
 8002d6c:	4b1a      	ldr	r3, [pc, #104]	; (8002dd8 <task_button_press+0x274>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	3301      	adds	r3, #1
 8002d72:	4a19      	ldr	r2, [pc, #100]	; (8002dd8 <task_button_press+0x274>)
 8002d74:	6013      	str	r3, [r2, #0]
                    if (MASTER_COLOR_STATE_DEMO == task_led_ctrl_color_state())
 8002d76:	f000 fa75 	bl	8003264 <task_led_ctrl_color_state>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d102      	bne.n	8002d86 <task_button_press+0x222>
                    {
                        task_led_ctrl_color_state_fixed();
 8002d80:	f000 fa88 	bl	8003294 <task_led_ctrl_color_state_fixed>
 8002d84:	e001      	b.n	8002d8a <task_button_press+0x226>
                    }
                    else
                    {
                        task_led_ctrl_color_adjust();
 8002d86:	f000 fa97 	bl	80032b8 <task_led_ctrl_color_adjust>
                    }
                    HAL_NVIC_SetPriority(PUSH_BUTTON_C_IRQ, 24, 0);
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	2118      	movs	r1, #24
 8002d8e:	2017      	movs	r0, #23
 8002d90:	f003 fc93 	bl	80066ba <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_C_IRQ);
 8002d94:	2017      	movs	r0, #23
 8002d96:	f003 fcac 	bl	80066f2 <HAL_NVIC_EnableIRQ>

                break;
 8002d9a:	e010      	b.n	8002dbe <task_button_press+0x25a>
                case PUSH_BUTTON_D:
                    d_ok_count++;
 8002d9c:	4b0f      	ldr	r3, [pc, #60]	; (8002ddc <task_button_press+0x278>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	3301      	adds	r3, #1
 8002da2:	4a0e      	ldr	r2, [pc, #56]	; (8002ddc <task_button_press+0x278>)
 8002da4:	6013      	str	r3, [r2, #0]
                    task_led_ctrl_pause();
 8002da6:	f000 fa3f 	bl	8003228 <task_led_ctrl_pause>
                    HAL_NVIC_SetPriority(PUSH_BUTTON_D_IRQ, 24, 0);
 8002daa:	2200      	movs	r2, #0
 8002dac:	2118      	movs	r1, #24
 8002dae:	2006      	movs	r0, #6
 8002db0:	f003 fc83 	bl	80066ba <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_D_IRQ);
 8002db4:	2006      	movs	r0, #6
 8002db6:	f003 fc9c 	bl	80066f2 <HAL_NVIC_EnableIRQ>
                break;
 8002dba:	e000      	b.n	8002dbe <task_button_press+0x25a>
                default:
                break;
 8002dbc:	bf00      	nop
        xTaskNotifyWait(0, button_pressed_bit, &button_pressed_bit, portMAX_DELAY);
 8002dbe:	e6dd      	b.n	8002b7c <task_button_press+0x18>
 8002dc0:	48000400 	.word	0x48000400
 8002dc4:	20000814 	.word	0x20000814
 8002dc8:	20000834 	.word	0x20000834
 8002dcc:	20000835 	.word	0x20000835
 8002dd0:	2000083c 	.word	0x2000083c
 8002dd4:	20000840 	.word	0x20000840
 8002dd8:	20000844 	.word	0x20000844
 8002ddc:	20000848 	.word	0x20000848

08002de0 <task_led_ctrl_draw_all_toggle>:
extern bool             task_button_press_major_change;
bool g_draw_all = false;


void task_led_ctrl_draw_all_toggle(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
	animate_led_turn_all_pixels_off();
 8002de4:	f7fe f856 	bl	8000e94 <animate_led_turn_all_pixels_off>
	if (g_draw_all) g_draw_all = false;
 8002de8:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <task_led_ctrl_draw_all_toggle+0x24>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <task_led_ctrl_draw_all_toggle+0x18>
 8002df0:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <task_led_ctrl_draw_all_toggle+0x24>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	701a      	strb	r2, [r3, #0]
	else g_draw_all = true;
}
 8002df6:	e002      	b.n	8002dfe <task_led_ctrl_draw_all_toggle+0x1e>
	else g_draw_all = true;
 8002df8:	4b02      	ldr	r3, [pc, #8]	; (8002e04 <task_led_ctrl_draw_all_toggle+0x24>)
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	701a      	strb	r2, [r3, #0]
}
 8002dfe:	bf00      	nop
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	20000850 	.word	0x20000850

08002e08 <task_led_ctrl_adjust_parameters>:


static void task_led_ctrl_adjust_parameters(const task_led_ctrl_loop_iterations_e max_iterations,
                                            const task_led_ctrl_delay_ms_e animation_delay_ms)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	460a      	mov	r2, r1
 8002e12:	71fb      	strb	r3, [r7, #7]
 8002e14:	4613      	mov	r3, r2
 8002e16:	80bb      	strh	r3, [r7, #4]
    g_animation_iterations++;
 8002e18:	4b18      	ldr	r3, [pc, #96]	; (8002e7c <task_led_ctrl_adjust_parameters+0x74>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	4b16      	ldr	r3, [pc, #88]	; (8002e7c <task_led_ctrl_adjust_parameters+0x74>)
 8002e22:	701a      	strb	r2, [r3, #0]
    if (MASTER_LED_STATE_DEMO == g_master_led_state)
 8002e24:	4b16      	ldr	r3, [pc, #88]	; (8002e80 <task_led_ctrl_adjust_parameters+0x78>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d11b      	bne.n	8002e64 <task_led_ctrl_adjust_parameters+0x5c>
    {
        if (TASK_LED_CTRL_DELAY_MS_0 != animation_delay_ms) task_led_ctrl_delay(animation_delay_ms);
 8002e2c:	88bb      	ldrh	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <task_led_ctrl_adjust_parameters+0x32>
 8002e32:	88bb      	ldrh	r3, [r7, #4]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f000 f9a5 	bl	8003184 <task_led_ctrl_delay>
        if (max_iterations == g_animation_iterations)
 8002e3a:	4b10      	ldr	r3, [pc, #64]	; (8002e7c <task_led_ctrl_adjust_parameters+0x74>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	79fa      	ldrb	r2, [r7, #7]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d10f      	bne.n	8002e64 <task_led_ctrl_adjust_parameters+0x5c>
        {
            g_led_state = (led_state_e) (g_led_state + 1);
 8002e44:	4b0f      	ldr	r3, [pc, #60]	; (8002e84 <task_led_ctrl_adjust_parameters+0x7c>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	4b0d      	ldr	r3, [pc, #52]	; (8002e84 <task_led_ctrl_adjust_parameters+0x7c>)
 8002e4e:	701a      	strb	r2, [r3, #0]
            if (NUM_LED_STATES == g_led_state) g_led_state = LED_STATE_FIRST;
 8002e50:	4b0c      	ldr	r3, [pc, #48]	; (8002e84 <task_led_ctrl_adjust_parameters+0x7c>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2b0a      	cmp	r3, #10
 8002e56:	d102      	bne.n	8002e5e <task_led_ctrl_adjust_parameters+0x56>
 8002e58:	4b0a      	ldr	r3, [pc, #40]	; (8002e84 <task_led_ctrl_adjust_parameters+0x7c>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	701a      	strb	r2, [r3, #0]
            g_animation_iterations = 0;
 8002e5e:	4b07      	ldr	r3, [pc, #28]	; (8002e7c <task_led_ctrl_adjust_parameters+0x74>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	701a      	strb	r2, [r3, #0]
        }
    }
    if (MASTER_COLOR_STATE_DEMO == task_led_ctrl_color_state()) task_led_ctrl_color_random();
 8002e64:	f000 f9fe 	bl	8003264 <task_led_ctrl_color_state>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <task_led_ctrl_adjust_parameters+0x6a>
 8002e6e:	f000 fac9 	bl	8003404 <task_led_ctrl_color_random>
}
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	2000084f 	.word	0x2000084f
 8002e80:	2000084c 	.word	0x2000084c
 8002e84:	2000005e 	.word	0x2000005e

08002e88 <task_led_ctrl_strip_one>:


void task_led_ctrl_strip_one(void *argument)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af04      	add	r7, sp, #16
 8002e8e:	6078      	str	r0, [r7, #4]
    osDelay(10);
 8002e90:	200a      	movs	r0, #10
 8002e92:	f000 fcaf 	bl	80037f4 <osDelay>
    while (1)
    {
        while(task_button_press_major_state_change()) osDelay(100);
 8002e96:	e002      	b.n	8002e9e <task_led_ctrl_strip_one+0x16>
 8002e98:	2064      	movs	r0, #100	; 0x64
 8002e9a:	f000 fcab 	bl	80037f4 <osDelay>
 8002e9e:	f7ff fe55 	bl	8002b4c <task_button_press_major_state_change>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1f7      	bne.n	8002e98 <task_led_ctrl_strip_one+0x10>

        if (flash_info_animation_enabled(g_led_state))
 8002ea8:	4bb3      	ldr	r3, [pc, #716]	; (8003178 <task_led_ctrl_strip_one+0x2f0>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f007 fdc9 	bl	800aa44 <flash_info_animation_enabled>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0f2      	beq.n	8002e9e <task_led_ctrl_strip_one+0x16>
        {
            //animate_led_custom_solid_custom_color((uint16_t)STRIP_BIT_1, COLOR_HEX_BLACK, 0 , 178);
        	if (!g_draw_all)
 8002eb8:	4bb0      	ldr	r3, [pc, #704]	; (800317c <task_led_ctrl_strip_one+0x2f4>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	f083 0301 	eor.w	r3, r3, #1
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <task_led_ctrl_strip_one+0x46>
        	{
        		animate_led_custom_function_print_shotgun();
 8002ec6:	f7ff fa13 	bl	80022f0 <animate_led_custom_function_print_shotgun>
        		animate_led_custom_function_print_mallord();
 8002eca:	f7ff f95f 	bl	800218c <animate_led_custom_function_print_mallord>
        		//animate_led_show_strip(STRIP_BIT_1);
        	}
            switch(g_led_state)
 8002ece:	4baa      	ldr	r3, [pc, #680]	; (8003178 <task_led_ctrl_strip_one+0x2f0>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b09      	cmp	r3, #9
 8002ed4:	f200 814d 	bhi.w	8003172 <task_led_ctrl_strip_one+0x2ea>
 8002ed8:	a201      	add	r2, pc, #4	; (adr r2, 8002ee0 <task_led_ctrl_strip_one+0x58>)
 8002eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ede:	bf00      	nop
 8002ee0:	0800313b 	.word	0x0800313b
 8002ee4:	08002f09 	.word	0x08002f09
 8002ee8:	08002f37 	.word	0x08002f37
 8002eec:	08002f95 	.word	0x08002f95
 8002ef0:	08002fd3 	.word	0x08002fd3
 8002ef4:	08003001 	.word	0x08003001
 8002ef8:	08003029 	.word	0x08003029
 8002efc:	0800306f 	.word	0x0800306f
 8002f00:	08003097 	.word	0x08003097
 8002f04:	080030d7 	.word	0x080030d7
//            	case LED_STATE_CUSTOM:
//            		//animate_led_custom_state(g_custom_led_state);
//                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_1, TASK_LED_CTRL_DELAY_MS_5000);
//            	break;
                case LED_STATE_WHITE_COLOR:
                	if (g_draw_all)
 8002f08:	4b9c      	ldr	r3, [pc, #624]	; (800317c <task_led_ctrl_strip_one+0x2f4>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d005      	beq.n	8002f1c <task_led_ctrl_strip_one+0x94>
                	{
                		animate_led_solid_custom_color((uint16_t)STRIP_BIT_1, COLOR_HEX_WHITE);
 8002f10:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8002f14:	2001      	movs	r0, #1
 8002f16:	f7fd ff9b 	bl	8000e50 <animate_led_solid_custom_color>
 8002f1a:	e006      	b.n	8002f2a <task_led_ctrl_strip_one+0xa2>
                	}
                	else
                	{
                		animate_led_custom_solid_custom_color((uint16_t)STRIP_BIT_1, COLOR_HEX_WHITE, 0, 178);
 8002f1c:	23b2      	movs	r3, #178	; 0xb2
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8002f24:	2001      	movs	r0, #1
 8002f26:	f7fd ff65 	bl	8000df4 <animate_led_custom_solid_custom_color>
                	}
                	task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_1, TASK_LED_CTRL_DELAY_MS_5000);
 8002f2a:	f241 3188 	movw	r1, #5000	; 0x1388
 8002f2e:	2001      	movs	r0, #1
 8002f30:	f7ff ff6a 	bl	8002e08 <task_led_ctrl_adjust_parameters>
                break;
 8002f34:	e11e      	b.n	8003174 <task_led_ctrl_strip_one+0x2ec>
                case LED_STATE_SOLID_COLOR:
                	if (COLOR_HEX_BLACK == task_led_ctrl_color_hex())
 8002f36:	f000 f9dd 	bl	80032f4 <task_led_ctrl_color_hex>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <task_led_ctrl_strip_one+0xbc>
					{
						task_led_ctrl_color_adjust();
 8002f40:	f000 f9ba 	bl	80032b8 <task_led_ctrl_color_adjust>
					}
                	if (g_draw_all)
 8002f44:	4b8d      	ldr	r3, [pc, #564]	; (800317c <task_led_ctrl_strip_one+0x2f4>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d007      	beq.n	8002f5c <task_led_ctrl_strip_one+0xd4>
                	{
                		animate_led_solid_custom_color((uint16_t)STRIP_BIT_1, task_led_ctrl_color_hex());
 8002f4c:	f000 f9d2 	bl	80032f4 <task_led_ctrl_color_hex>
 8002f50:	4603      	mov	r3, r0
 8002f52:	4619      	mov	r1, r3
 8002f54:	2001      	movs	r0, #1
 8002f56:	f7fd ff7b 	bl	8000e50 <animate_led_solid_custom_color>
 8002f5a:	e007      	b.n	8002f6c <task_led_ctrl_strip_one+0xe4>
                	}
                	else
                	{
                        animate_led_custom_solid_custom_color((uint16_t)STRIP_BIT_1, task_led_ctrl_color_hex(), 0 , 178);
 8002f5c:	f000 f9ca 	bl	80032f4 <task_led_ctrl_color_hex>
 8002f60:	4601      	mov	r1, r0
 8002f62:	23b2      	movs	r3, #178	; 0xb2
 8002f64:	2200      	movs	r2, #0
 8002f66:	2001      	movs	r0, #1
 8002f68:	f7fd ff44 	bl	8000df4 <animate_led_custom_solid_custom_color>
                	}
                    if (MASTER_LED_STATE_FIXED == g_master_led_state)
 8002f6c:	4b84      	ldr	r3, [pc, #528]	; (8003180 <task_led_ctrl_strip_one+0x2f8>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d109      	bne.n	8002f88 <task_led_ctrl_strip_one+0x100>
                    {
                        task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_1000);
 8002f74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002f78:	2005      	movs	r0, #5
 8002f7a:	f7ff ff45 	bl	8002e08 <task_led_ctrl_adjust_parameters>
                        task_led_ctrl_delay(1000);
 8002f7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f82:	f000 f8ff 	bl	8003184 <task_led_ctrl_delay>
                    }
                    else task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_5000);
                break;
 8002f86:	e0f5      	b.n	8003174 <task_led_ctrl_strip_one+0x2ec>
                    else task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_5000);
 8002f88:	f241 3188 	movw	r1, #5000	; 0x1388
 8002f8c:	2005      	movs	r0, #5
 8002f8e:	f7ff ff3b 	bl	8002e08 <task_led_ctrl_adjust_parameters>
                break;
 8002f92:	e0ef      	b.n	8003174 <task_led_ctrl_strip_one+0x2ec>
                case LED_STATE_SPARKLE_NO_FILL:
                	if (g_draw_all)
 8002f94:	4b79      	ldr	r3, [pc, #484]	; (800317c <task_led_ctrl_strip_one+0x2f4>)
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d007      	beq.n	8002fac <task_led_ctrl_strip_one+0x124>
                	{
                		animate_led_turn_all_pixels_off();
 8002f9c:	f7fd ff7a 	bl	8000e94 <animate_led_turn_all_pixels_off>
                		animate_led_sparkle_only_random_color(STRIP_BIT_1, false, 100);//random(0, 50));
 8002fa0:	2264      	movs	r2, #100	; 0x64
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	2001      	movs	r0, #1
 8002fa6:	f7fe fc4b 	bl	8001840 <animate_led_sparkle_only_random_color>
 8002faa:	e00d      	b.n	8002fc8 <task_led_ctrl_strip_one+0x140>
                	}
                	else
                	{
                        animate_led_custom_solid_custom_color((uint16_t)STRIP_BIT_1, COLOR_HEX_BLACK, 0 , 178);
 8002fac:	23b2      	movs	r3, #178	; 0xb2
 8002fae:	2200      	movs	r2, #0
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	2001      	movs	r0, #1
 8002fb4:	f7fd ff1e 	bl	8000df4 <animate_led_custom_solid_custom_color>
                        animate_led_custom_sparkle_only_random_color(STRIP_BIT_1, false, 100, 0, 178);//random(0, 50));
 8002fb8:	23b2      	movs	r3, #178	; 0xb2
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	2264      	movs	r2, #100	; 0x64
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	2001      	movs	r0, #1
 8002fc4:	f7fe fbac 	bl	8001720 <animate_led_custom_sparkle_only_random_color>
                	}
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_0);
 8002fc8:	2100      	movs	r1, #0
 8002fca:	2005      	movs	r0, #5
 8002fcc:	f7ff ff1c 	bl	8002e08 <task_led_ctrl_adjust_parameters>
                break;
 8002fd0:	e0d0      	b.n	8003174 <task_led_ctrl_strip_one+0x2ec>
                case LED_STATE_SPARKLE_FILL:
                	if (g_draw_all)
 8002fd2:	4b6a      	ldr	r3, [pc, #424]	; (800317c <task_led_ctrl_strip_one+0x2f4>)
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d005      	beq.n	8002fe6 <task_led_ctrl_strip_one+0x15e>
                	{
                		animate_led_sparkle_only_random_color(STRIP_BIT_1, true, 100);
 8002fda:	2264      	movs	r2, #100	; 0x64
 8002fdc:	2101      	movs	r1, #1
 8002fde:	2001      	movs	r0, #1
 8002fe0:	f7fe fc2e 	bl	8001840 <animate_led_sparkle_only_random_color>
 8002fe4:	e007      	b.n	8002ff6 <task_led_ctrl_strip_one+0x16e>
                	}
                	else
                	{
                    	animate_led_custom_sparkle_only_random_color(STRIP_BIT_1, true, 100, 0, 178);//random(0, 50));
 8002fe6:	23b2      	movs	r3, #178	; 0xb2
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	2300      	movs	r3, #0
 8002fec:	2264      	movs	r2, #100	; 0x64
 8002fee:	2101      	movs	r1, #1
 8002ff0:	2001      	movs	r0, #1
 8002ff2:	f7fe fb95 	bl	8001720 <animate_led_custom_sparkle_only_random_color>
                	}
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	200a      	movs	r0, #10
 8002ffa:	f7ff ff05 	bl	8002e08 <task_led_ctrl_adjust_parameters>
                break;
 8002ffe:	e0b9      	b.n	8003174 <task_led_ctrl_strip_one+0x2ec>
                case LED_STATE_RAINBOW_CYCLE:
                	if (g_draw_all)
 8003000:	4b5e      	ldr	r3, [pc, #376]	; (800317c <task_led_ctrl_strip_one+0x2f4>)
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d004      	beq.n	8003012 <task_led_ctrl_strip_one+0x18a>
                	{
                        animate_led_rainbow_cycle(STRIP_BIT_1, 10);
 8003008:	210a      	movs	r1, #10
 800300a:	2001      	movs	r0, #1
 800300c:	f7fe fcaa 	bl	8001964 <animate_led_rainbow_cycle>
 8003010:	e005      	b.n	800301e <task_led_ctrl_strip_one+0x196>
                	}
                	else
                	{
                        animate_led_custom_rainbow_cycle(STRIP_BIT_1, 10, 0, 178);
 8003012:	23b2      	movs	r3, #178	; 0xb2
 8003014:	2200      	movs	r2, #0
 8003016:	210a      	movs	r1, #10
 8003018:	2001      	movs	r0, #1
 800301a:	f7fe fd30 	bl	8001a7e <animate_led_custom_rainbow_cycle>
                	}
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_0);
 800301e:	2100      	movs	r1, #0
 8003020:	2005      	movs	r0, #5
 8003022:	f7ff fef1 	bl	8002e08 <task_led_ctrl_adjust_parameters>
                break;
 8003026:	e0a5      	b.n	8003174 <task_led_ctrl_strip_one+0x2ec>
                case LED_STATE_THEATER_CHASE:
                	if (COLOR_HEX_BLACK == task_led_ctrl_color_hex())
 8003028:	f000 f964 	bl	80032f4 <task_led_ctrl_color_hex>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <task_led_ctrl_strip_one+0x1ae>
					{
						task_led_ctrl_color_adjust();
 8003032:	f000 f941 	bl	80032b8 <task_led_ctrl_color_adjust>
					}
                	if (g_draw_all)
 8003036:	4b51      	ldr	r3, [pc, #324]	; (800317c <task_led_ctrl_strip_one+0x2f4>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d008      	beq.n	8003050 <task_led_ctrl_strip_one+0x1c8>
                	{
                        animate_led_theater_chase(STRIP_BIT_1, task_led_ctrl_color_hex(), 20);
 800303e:	f000 f959 	bl	80032f4 <task_led_ctrl_color_hex>
 8003042:	4603      	mov	r3, r0
 8003044:	2214      	movs	r2, #20
 8003046:	4619      	mov	r1, r3
 8003048:	2001      	movs	r0, #1
 800304a:	f7fe fea1 	bl	8001d90 <animate_led_theater_chase>
 800304e:	e009      	b.n	8003064 <task_led_ctrl_strip_one+0x1dc>
                	}
                	else
                	{
                        animate_led_custom_theater_chase(STRIP_BIT_1, task_led_ctrl_color_hex(), 20, 0, 178);
 8003050:	f000 f950 	bl	80032f4 <task_led_ctrl_color_hex>
 8003054:	4601      	mov	r1, r0
 8003056:	23b2      	movs	r3, #178	; 0xb2
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	2300      	movs	r3, #0
 800305c:	2214      	movs	r2, #20
 800305e:	2001      	movs	r0, #1
 8003060:	f7fe fdf4 	bl	8001c4c <animate_led_custom_theater_chase>
                	}
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 8003064:	2100      	movs	r1, #0
 8003066:	200a      	movs	r0, #10
 8003068:	f7ff fece 	bl	8002e08 <task_led_ctrl_adjust_parameters>
                break;
 800306c:	e082      	b.n	8003174 <task_led_ctrl_strip_one+0x2ec>
                case LED_STATE_THEATER_CHASE_RAINBOW:
                	if (g_draw_all)
 800306e:	4b43      	ldr	r3, [pc, #268]	; (800317c <task_led_ctrl_strip_one+0x2f4>)
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d004      	beq.n	8003080 <task_led_ctrl_strip_one+0x1f8>
                	{
                		animate_led_theater_chase_rainbow(STRIP_BIT_1, 20);
 8003076:	2114      	movs	r1, #20
 8003078:	2001      	movs	r0, #1
 800307a:	f7fe ffd9 	bl	8002030 <animate_led_theater_chase_rainbow>
 800307e:	e005      	b.n	800308c <task_led_ctrl_strip_one+0x204>
                	}
                	else
                	{
                        animate_led_custom_theater_chase_rainbow(STRIP_BIT_1, 20, 0, 178);
 8003080:	23b2      	movs	r3, #178	; 0xb2
 8003082:	2200      	movs	r2, #0
 8003084:	2114      	movs	r1, #20
 8003086:	2001      	movs	r0, #1
 8003088:	f7fe ff24 	bl	8001ed4 <animate_led_custom_theater_chase_rainbow>
                	}
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_2, TASK_LED_CTRL_DELAY_MS_0);
 800308c:	2100      	movs	r1, #0
 800308e:	2002      	movs	r0, #2
 8003090:	f7ff feba 	bl	8002e08 <task_led_ctrl_adjust_parameters>
                break;
 8003094:	e06e      	b.n	8003174 <task_led_ctrl_strip_one+0x2ec>
                case LED_STATE_FADE_IN_AND_OUT:
                	if (COLOR_HEX_BLACK == task_led_ctrl_color_hex())
 8003096:	f000 f92d 	bl	80032f4 <task_led_ctrl_color_hex>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <task_led_ctrl_strip_one+0x21c>
					{
						task_led_ctrl_color_adjust();
 80030a0:	f000 f90a 	bl	80032b8 <task_led_ctrl_color_adjust>
					}
                	if (g_draw_all)
 80030a4:	4b35      	ldr	r3, [pc, #212]	; (800317c <task_led_ctrl_strip_one+0x2f4>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d007      	beq.n	80030bc <task_led_ctrl_strip_one+0x234>
                	{
                        animate_led_fade_in_fade_out((uint16_t)STRIP_BIT_1, task_led_ctrl_color_hex());
 80030ac:	f000 f922 	bl	80032f4 <task_led_ctrl_color_hex>
 80030b0:	4603      	mov	r3, r0
 80030b2:	4619      	mov	r1, r3
 80030b4:	2001      	movs	r0, #1
 80030b6:	f7fe f90f 	bl	80012d8 <animate_led_fade_in_fade_out>
 80030ba:	e007      	b.n	80030cc <task_led_ctrl_strip_one+0x244>
                	}
                	else
                	{
                        animate_led_custom_fade_in_fade_out((uint16_t)STRIP_BIT_1, task_led_ctrl_color_hex(), 0, 178);
 80030bc:	f000 f91a 	bl	80032f4 <task_led_ctrl_color_hex>
 80030c0:	4601      	mov	r1, r0
 80030c2:	23b2      	movs	r3, #178	; 0xb2
 80030c4:	2200      	movs	r2, #0
 80030c6:	2001      	movs	r0, #1
 80030c8:	f7fd ffac 	bl	8001024 <animate_led_custom_fade_in_fade_out>
                	}
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 80030cc:	2100      	movs	r1, #0
 80030ce:	200a      	movs	r0, #10
 80030d0:	f7ff fe9a 	bl	8002e08 <task_led_ctrl_adjust_parameters>
                break;
 80030d4:	e04e      	b.n	8003174 <task_led_ctrl_strip_one+0x2ec>
                case LED_STATE_TWINKLE:
                	if (COLOR_HEX_BLACK == task_led_ctrl_color_hex())
 80030d6:	f000 f90d 	bl	80032f4 <task_led_ctrl_color_hex>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <task_led_ctrl_strip_one+0x25c>
					{
						task_led_ctrl_color_adjust();
 80030e0:	f000 f8ea 	bl	80032b8 <task_led_ctrl_color_adjust>
					}
                	if (g_draw_all)
 80030e4:	4b25      	ldr	r3, [pc, #148]	; (800317c <task_led_ctrl_strip_one+0x2f4>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00d      	beq.n	8003108 <task_led_ctrl_strip_one+0x280>
                	{
                		animate_led_turn_all_pixels_off();
 80030ec:	f7fd fed2 	bl	8000e94 <animate_led_turn_all_pixels_off>
						animate_led_twinkle(STRIP_BIT_1, task_led_ctrl_color_hex(), (uint32_t)((float)NUM_LEDS * (float)0.9), 20, false);
 80030f0:	f000 f900 	bl	80032f4 <task_led_ctrl_color_hex>
 80030f4:	4601      	mov	r1, r0
 80030f6:	2300      	movs	r3, #0
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	2314      	movs	r3, #20
 80030fc:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003100:	2001      	movs	r0, #1
 8003102:	f7fe fa99 	bl	8001638 <animate_led_twinkle>
 8003106:	e013      	b.n	8003130 <task_led_ctrl_strip_one+0x2a8>
                	}
                	else
                	{
                        animate_led_custom_solid_custom_color((uint16_t)STRIP_BIT_1, COLOR_HEX_BLACK, 0 , 178);
 8003108:	23b2      	movs	r3, #178	; 0xb2
 800310a:	2200      	movs	r2, #0
 800310c:	2100      	movs	r1, #0
 800310e:	2001      	movs	r0, #1
 8003110:	f7fd fe70 	bl	8000df4 <animate_led_custom_solid_custom_color>
                        animate_led_custom_twinkle(STRIP_BIT_1, task_led_ctrl_color_hex(), (uint32_t)((float)178 * (float)0.9), 20, false, 0, 178);
 8003114:	f000 f8ee 	bl	80032f4 <task_led_ctrl_color_hex>
 8003118:	4601      	mov	r1, r0
 800311a:	23b2      	movs	r3, #178	; 0xb2
 800311c:	9302      	str	r3, [sp, #8]
 800311e:	2300      	movs	r3, #0
 8003120:	9301      	str	r3, [sp, #4]
 8003122:	2300      	movs	r3, #0
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	2314      	movs	r3, #20
 8003128:	22a0      	movs	r2, #160	; 0xa0
 800312a:	2001      	movs	r0, #1
 800312c:	f7fe fa16 	bl	800155c <animate_led_custom_twinkle>
                	}
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_0);
 8003130:	2100      	movs	r1, #0
 8003132:	2005      	movs	r0, #5
 8003134:	f7ff fe68 	bl	8002e08 <task_led_ctrl_adjust_parameters>
                break;
 8003138:	e01c      	b.n	8003174 <task_led_ctrl_strip_one+0x2ec>
                case LED_STATE_SPELL:
                	if (g_draw_all)
 800313a:	4b10      	ldr	r3, [pc, #64]	; (800317c <task_led_ctrl_strip_one+0x2f4>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d008      	beq.n	8003154 <task_led_ctrl_strip_one+0x2cc>
                	{
                		animate_led_only_spell_word(STRIP_BIT_1, task_led_ctrl_color_hex(), 20);
 8003142:	f000 f8d7 	bl	80032f4 <task_led_ctrl_color_hex>
 8003146:	4603      	mov	r3, r0
 8003148:	2214      	movs	r2, #20
 800314a:	4619      	mov	r1, r3
 800314c:	2001      	movs	r0, #1
 800314e:	f7fd ff09 	bl	8000f64 <animate_led_only_spell_word>
 8003152:	e009      	b.n	8003168 <task_led_ctrl_strip_one+0x2e0>
                	}
                	else
                	{
                    	animate_led_custom_only_spell_word(STRIP_BIT_1, task_led_ctrl_color_hex(), 20, 0, 178);
 8003154:	f000 f8ce 	bl	80032f4 <task_led_ctrl_color_hex>
 8003158:	4601      	mov	r1, r0
 800315a:	23b2      	movs	r3, #178	; 0xb2
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	2300      	movs	r3, #0
 8003160:	2214      	movs	r2, #20
 8003162:	2001      	movs	r0, #1
 8003164:	f7fd fea0 	bl	8000ea8 <animate_led_custom_only_spell_word>
                	}
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 8003168:	2100      	movs	r1, #0
 800316a:	200a      	movs	r0, #10
 800316c:	f7ff fe4c 	bl	8002e08 <task_led_ctrl_adjust_parameters>
                break;
 8003170:	e000      	b.n	8003174 <task_led_ctrl_strip_one+0x2ec>
                default:
                break;
 8003172:	bf00      	nop
        while(task_button_press_major_state_change()) osDelay(100);
 8003174:	e693      	b.n	8002e9e <task_led_ctrl_strip_one+0x16>
 8003176:	bf00      	nop
 8003178:	2000005e 	.word	0x2000005e
 800317c:	20000850 	.word	0x20000850
 8003180:	2000084c 	.word	0x2000084c

08003184 <task_led_ctrl_delay>:
    }
}


void task_led_ctrl_delay(const uint32_t time_ms)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
    uint32_t ms_count = 0;
 800318c:	2300      	movs	r3, #0
 800318e:	60fb      	str	r3, [r7, #12]
    while (ms_count++ < time_ms)
 8003190:	e002      	b.n	8003198 <task_led_ctrl_delay+0x14>
    {
        osDelay(portTICK_PERIOD_MS);
 8003192:	2001      	movs	r0, #1
 8003194:	f000 fb2e 	bl	80037f4 <osDelay>
    while (ms_count++ < time_ms)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	1c5a      	adds	r2, r3, #1
 800319c:	60fa      	str	r2, [r7, #12]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d8f6      	bhi.n	8003192 <task_led_ctrl_delay+0xe>
    }
}
 80031a4:	bf00      	nop
 80031a6:	bf00      	nop
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
	...

080031b0 <task_led_ctrl_brightness_adjust>:


void task_led_ctrl_brightness_adjust(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
    if (LED_BRIGHTNESS_FIRST == g_led_brightness) g_led_brightness = LED_BRIGHTNESS_LAST;
 80031b4:	4b14      	ldr	r3, [pc, #80]	; (8003208 <task_led_ctrl_brightness_adjust+0x58>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d103      	bne.n	80031c4 <task_led_ctrl_brightness_adjust+0x14>
 80031bc:	4b12      	ldr	r3, [pc, #72]	; (8003208 <task_led_ctrl_brightness_adjust+0x58>)
 80031be:	2202      	movs	r2, #2
 80031c0:	701a      	strb	r2, [r3, #0]
 80031c2:	e005      	b.n	80031d0 <task_led_ctrl_brightness_adjust+0x20>
    else g_led_brightness = (led_brightness_e) (g_led_brightness - 1);
 80031c4:	4b10      	ldr	r3, [pc, #64]	; (8003208 <task_led_ctrl_brightness_adjust+0x58>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	3b01      	subs	r3, #1
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	4b0e      	ldr	r3, [pc, #56]	; (8003208 <task_led_ctrl_brightness_adjust+0x58>)
 80031ce:	701a      	strb	r2, [r3, #0]
    switch (g_led_brightness)
 80031d0:	4b0d      	ldr	r3, [pc, #52]	; (8003208 <task_led_ctrl_brightness_adjust+0x58>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d010      	beq.n	80031fa <task_led_ctrl_brightness_adjust+0x4a>
 80031d8:	2b02      	cmp	r3, #2
 80031da:	dc13      	bgt.n	8003204 <task_led_ctrl_brightness_adjust+0x54>
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d002      	beq.n	80031e6 <task_led_ctrl_brightness_adjust+0x36>
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d005      	beq.n	80031f0 <task_led_ctrl_brightness_adjust+0x40>
        break;
        case LED_BRIGHTNESS_1_PERCENT:
            current_monitor_set(0.01f);
        break;
    }
}
 80031e4:	e00e      	b.n	8003204 <task_led_ctrl_brightness_adjust+0x54>
            current_monitor_set(1.0f);
 80031e6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80031ea:	f7fd fc5f 	bl	8000aac <current_monitor_set>
        break;
 80031ee:	e009      	b.n	8003204 <task_led_ctrl_brightness_adjust+0x54>
            current_monitor_set(0.25f);
 80031f0:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 80031f4:	f7fd fc5a 	bl	8000aac <current_monitor_set>
        break;
 80031f8:	e004      	b.n	8003204 <task_led_ctrl_brightness_adjust+0x54>
            current_monitor_set(0.01f);
 80031fa:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800320c <task_led_ctrl_brightness_adjust+0x5c>
 80031fe:	f7fd fc55 	bl	8000aac <current_monitor_set>
        break;
 8003202:	bf00      	nop
}
 8003204:	bf00      	nop
 8003206:	bd80      	pop	{r7, pc}
 8003208:	2000084d 	.word	0x2000084d
 800320c:	3c23d70a 	.word	0x3c23d70a

08003210 <task_led_ctrl_clear_pause>:


void task_led_ctrl_clear_pause(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
    g_animate_led_pause_flag = false;
 8003214:	4b03      	ldr	r3, [pc, #12]	; (8003224 <task_led_ctrl_clear_pause+0x14>)
 8003216:	2200      	movs	r2, #0
 8003218:	701a      	strb	r2, [r3, #0]
}
 800321a:	bf00      	nop
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	20000836 	.word	0x20000836

08003228 <task_led_ctrl_pause>:


void task_led_ctrl_pause(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
    static uint8_t flip_or_flop = 1;
    if (flip_or_flop) g_animate_led_pause_flag = true;
 800322c:	4b0b      	ldr	r3, [pc, #44]	; (800325c <task_led_ctrl_pause+0x34>)
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d003      	beq.n	800323c <task_led_ctrl_pause+0x14>
 8003234:	4b0a      	ldr	r3, [pc, #40]	; (8003260 <task_led_ctrl_pause+0x38>)
 8003236:	2201      	movs	r2, #1
 8003238:	701a      	strb	r2, [r3, #0]
 800323a:	e002      	b.n	8003242 <task_led_ctrl_pause+0x1a>
    else g_animate_led_pause_flag = false;
 800323c:	4b08      	ldr	r3, [pc, #32]	; (8003260 <task_led_ctrl_pause+0x38>)
 800323e:	2200      	movs	r2, #0
 8003240:	701a      	strb	r2, [r3, #0]
    flip_or_flop ^= 1;
 8003242:	4b06      	ldr	r3, [pc, #24]	; (800325c <task_led_ctrl_pause+0x34>)
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	f083 0301 	eor.w	r3, r3, #1
 800324a:	b2da      	uxtb	r2, r3
 800324c:	4b03      	ldr	r3, [pc, #12]	; (800325c <task_led_ctrl_pause+0x34>)
 800324e:	701a      	strb	r2, [r3, #0]
}
 8003250:	bf00      	nop
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	20000061 	.word	0x20000061
 8003260:	20000836 	.word	0x20000836

08003264 <task_led_ctrl_color_state>:


master_color_state_e task_led_ctrl_color_state(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
    return g_master_color_state;
 8003268:	4b03      	ldr	r3, [pc, #12]	; (8003278 <task_led_ctrl_color_state+0x14>)
 800326a:	781b      	ldrb	r3, [r3, #0]
}
 800326c:	4618      	mov	r0, r3
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	2000084e 	.word	0x2000084e

0800327c <task_led_ctrl_color_state_demo>:


void task_led_ctrl_color_state_demo(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
    g_master_color_state = MASTER_COLOR_STATE_DEMO;
 8003280:	4b03      	ldr	r3, [pc, #12]	; (8003290 <task_led_ctrl_color_state_demo+0x14>)
 8003282:	2200      	movs	r2, #0
 8003284:	701a      	strb	r2, [r3, #0]
}
 8003286:	bf00      	nop
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	2000084e 	.word	0x2000084e

08003294 <task_led_ctrl_color_state_fixed>:


void task_led_ctrl_color_state_fixed(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
    g_master_color_state = MASTER_COLOR_STATE_FIXED;
 8003298:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <task_led_ctrl_color_state_fixed+0x1c>)
 800329a:	2201      	movs	r2, #1
 800329c:	701a      	strb	r2, [r3, #0]
    g_led_color = COLORS_FIRST;
 800329e:	4b05      	ldr	r3, [pc, #20]	; (80032b4 <task_led_ctrl_color_state_fixed+0x20>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	701a      	strb	r2, [r3, #0]
}
 80032a4:	bf00      	nop
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	2000084e 	.word	0x2000084e
 80032b4:	20000060 	.word	0x20000060

080032b8 <task_led_ctrl_color_adjust>:
    g_led_color = COLORS_RED;
}


bool task_led_ctrl_color_adjust(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
    bool return_val = false;
 80032be:	2300      	movs	r3, #0
 80032c0:	71fb      	strb	r3, [r7, #7]
    if (COLORS_LAST == g_led_color)
 80032c2:	4b0b      	ldr	r3, [pc, #44]	; (80032f0 <task_led_ctrl_color_adjust+0x38>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	2b15      	cmp	r3, #21
 80032c8:	d105      	bne.n	80032d6 <task_led_ctrl_color_adjust+0x1e>
    {
        g_led_color = COLORS_FIRST;
 80032ca:	4b09      	ldr	r3, [pc, #36]	; (80032f0 <task_led_ctrl_color_adjust+0x38>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	701a      	strb	r2, [r3, #0]
        return_val = true;
 80032d0:	2301      	movs	r3, #1
 80032d2:	71fb      	strb	r3, [r7, #7]
 80032d4:	e005      	b.n	80032e2 <task_led_ctrl_color_adjust+0x2a>
    }
    else g_led_color = (all_colors_e) (g_led_color + 1);
 80032d6:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <task_led_ctrl_color_adjust+0x38>)
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	3301      	adds	r3, #1
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	4b04      	ldr	r3, [pc, #16]	; (80032f0 <task_led_ctrl_color_adjust+0x38>)
 80032e0:	701a      	strb	r2, [r3, #0]
    return return_val;
 80032e2:	79fb      	ldrb	r3, [r7, #7]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	20000060 	.word	0x20000060

080032f4 <task_led_ctrl_color_hex>:
    return g_led_color;
}


color_hex_code_e task_led_ctrl_color_hex(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
    return g_color_hex_codes[g_led_color];
 80032f8:	4b05      	ldr	r3, [pc, #20]	; (8003310 <task_led_ctrl_color_hex+0x1c>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	461a      	mov	r2, r3
 80032fe:	4b05      	ldr	r3, [pc, #20]	; (8003314 <task_led_ctrl_color_hex+0x20>)
 8003300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8003304:	4618      	mov	r0, r3
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	20000060 	.word	0x20000060
 8003314:	20000004 	.word	0x20000004

08003318 <task_led_ctrl_color_red_hex>:


uint8_t task_led_ctrl_color_red_hex(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	ed2d 8b02 	vpush	{d8}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
    return (((g_color_hex_codes[g_led_color] & 0xFF0000) >> 16) / current_monitor_ratio());
 8003322:	4b0f      	ldr	r3, [pc, #60]	; (8003360 <task_led_ctrl_color_red_hex+0x48>)
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	461a      	mov	r2, r3
 8003328:	4b0e      	ldr	r3, [pc, #56]	; (8003364 <task_led_ctrl_color_red_hex+0x4c>)
 800332a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800332e:	0c1b      	lsrs	r3, r3, #16
 8003330:	b2db      	uxtb	r3, r3
 8003332:	ee07 3a90 	vmov	s15, r3
 8003336:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800333a:	f7fd fbd9 	bl	8000af0 <current_monitor_ratio>
 800333e:	eeb0 7a40 	vmov.f32	s14, s0
 8003342:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8003346:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800334a:	edc7 7a01 	vstr	s15, [r7, #4]
 800334e:	793b      	ldrb	r3, [r7, #4]
 8003350:	b2db      	uxtb	r3, r3
}
 8003352:	4618      	mov	r0, r3
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	ecbd 8b02 	vpop	{d8}
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	20000060 	.word	0x20000060
 8003364:	20000004 	.word	0x20000004

08003368 <task_led_ctrl_color_green_hex>:


uint8_t task_led_ctrl_color_green_hex(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	ed2d 8b02 	vpush	{d8}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
    return (((g_color_hex_codes[g_led_color] & 0x00FF00) >> 8) / current_monitor_ratio());
 8003372:	4b0f      	ldr	r3, [pc, #60]	; (80033b0 <task_led_ctrl_color_green_hex+0x48>)
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	461a      	mov	r2, r3
 8003378:	4b0e      	ldr	r3, [pc, #56]	; (80033b4 <task_led_ctrl_color_green_hex+0x4c>)
 800337a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800337e:	0a1b      	lsrs	r3, r3, #8
 8003380:	b2db      	uxtb	r3, r3
 8003382:	ee07 3a90 	vmov	s15, r3
 8003386:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800338a:	f7fd fbb1 	bl	8000af0 <current_monitor_ratio>
 800338e:	eeb0 7a40 	vmov.f32	s14, s0
 8003392:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8003396:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800339a:	edc7 7a01 	vstr	s15, [r7, #4]
 800339e:	793b      	ldrb	r3, [r7, #4]
 80033a0:	b2db      	uxtb	r3, r3
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	ecbd 8b02 	vpop	{d8}
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	20000060 	.word	0x20000060
 80033b4:	20000004 	.word	0x20000004

080033b8 <task_led_ctrl_color_blue_hex>:


uint8_t task_led_ctrl_color_blue_hex(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	ed2d 8b02 	vpush	{d8}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
    return ((g_color_hex_codes[g_led_color] & 0x0000FF) / current_monitor_ratio());
 80033c2:	4b0e      	ldr	r3, [pc, #56]	; (80033fc <task_led_ctrl_color_blue_hex+0x44>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	461a      	mov	r2, r3
 80033c8:	4b0d      	ldr	r3, [pc, #52]	; (8003400 <task_led_ctrl_color_blue_hex+0x48>)
 80033ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	ee07 3a90 	vmov	s15, r3
 80033d4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80033d8:	f7fd fb8a 	bl	8000af0 <current_monitor_ratio>
 80033dc:	eeb0 7a40 	vmov.f32	s14, s0
 80033e0:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80033e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033e8:	edc7 7a01 	vstr	s15, [r7, #4]
 80033ec:	793b      	ldrb	r3, [r7, #4]
 80033ee:	b2db      	uxtb	r3, r3
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	ecbd 8b02 	vpop	{d8}
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	20000060 	.word	0x20000060
 8003400:	20000004 	.word	0x20000004

08003404 <task_led_ctrl_color_random>:
    return g_color_hex_codes[color];
}


void task_led_ctrl_color_random(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
    all_colors_e color = (all_colors_e)(random_num(0, NUM_COLORS));
 800340a:	2116      	movs	r1, #22
 800340c:	2000      	movs	r0, #0
 800340e:	f007 fc93 	bl	800ad38 <random_num>
 8003412:	4603      	mov	r3, r0
 8003414:	71fb      	strb	r3, [r7, #7]
    if (g_led_color == color)
 8003416:	4b0d      	ldr	r3, [pc, #52]	; (800344c <task_led_ctrl_color_random+0x48>)
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	79fa      	ldrb	r2, [r7, #7]
 800341c:	429a      	cmp	r2, r3
 800341e:	d10e      	bne.n	800343e <task_led_ctrl_color_random+0x3a>
    {
        if ((COLORS_LAST) == color) g_led_color = (all_colors_e)(color - 1);
 8003420:	79fb      	ldrb	r3, [r7, #7]
 8003422:	2b15      	cmp	r3, #21
 8003424:	d105      	bne.n	8003432 <task_led_ctrl_color_random+0x2e>
 8003426:	79fb      	ldrb	r3, [r7, #7]
 8003428:	3b01      	subs	r3, #1
 800342a:	b2da      	uxtb	r2, r3
 800342c:	4b07      	ldr	r3, [pc, #28]	; (800344c <task_led_ctrl_color_random+0x48>)
 800342e:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        g_led_color = color;
    }
}
 8003430:	e008      	b.n	8003444 <task_led_ctrl_color_random+0x40>
        else g_led_color = (all_colors_e)(color + 1);
 8003432:	79fb      	ldrb	r3, [r7, #7]
 8003434:	3301      	adds	r3, #1
 8003436:	b2da      	uxtb	r2, r3
 8003438:	4b04      	ldr	r3, [pc, #16]	; (800344c <task_led_ctrl_color_random+0x48>)
 800343a:	701a      	strb	r2, [r3, #0]
}
 800343c:	e002      	b.n	8003444 <task_led_ctrl_color_random+0x40>
        g_led_color = color;
 800343e:	4a03      	ldr	r2, [pc, #12]	; (800344c <task_led_ctrl_color_random+0x48>)
 8003440:	79fb      	ldrb	r3, [r7, #7]
 8003442:	7013      	strb	r3, [r2, #0]
}
 8003444:	bf00      	nop
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	20000060 	.word	0x20000060

08003450 <task_led_ctrl_speed>:
    g_led_state = LED_STATE_FIRST;
}


float task_led_ctrl_speed(void)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
    float speed_factor = 0.0;
 8003456:	f04f 0300 	mov.w	r3, #0
 800345a:	607b      	str	r3, [r7, #4]
    switch(g_led_speed)
 800345c:	4b17      	ldr	r3, [pc, #92]	; (80034bc <task_led_ctrl_speed+0x6c>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b04      	cmp	r3, #4
 8003462:	d81f      	bhi.n	80034a4 <task_led_ctrl_speed+0x54>
 8003464:	a201      	add	r2, pc, #4	; (adr r2, 800346c <task_led_ctrl_speed+0x1c>)
 8003466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800346a:	bf00      	nop
 800346c:	08003481 	.word	0x08003481
 8003470:	08003487 	.word	0x08003487
 8003474:	0800348d 	.word	0x0800348d
 8003478:	08003495 	.word	0x08003495
 800347c:	0800349d 	.word	0x0800349d
    {
        case LED_SPEED_10X:
            speed_factor = 10;
 8003480:	4b0f      	ldr	r3, [pc, #60]	; (80034c0 <task_led_ctrl_speed+0x70>)
 8003482:	607b      	str	r3, [r7, #4]
        break;
 8003484:	e00f      	b.n	80034a6 <task_led_ctrl_speed+0x56>
        case LED_SPEED_5X:
            speed_factor = 5;
 8003486:	4b0f      	ldr	r3, [pc, #60]	; (80034c4 <task_led_ctrl_speed+0x74>)
 8003488:	607b      	str	r3, [r7, #4]
        break;
 800348a:	e00c      	b.n	80034a6 <task_led_ctrl_speed+0x56>
//        case LED_SPEED_2X:
//            speed_factor = 2;
//        break;
        case LED_SPEED_1X:
            speed_factor = 1;
 800348c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003490:	607b      	str	r3, [r7, #4]
        break;
 8003492:	e008      	b.n	80034a6 <task_led_ctrl_speed+0x56>
        case LED_SPEED_0P5X:
            speed_factor = 0.5;
 8003494:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8003498:	607b      	str	r3, [r7, #4]
        break;
 800349a:	e004      	b.n	80034a6 <task_led_ctrl_speed+0x56>
        case LED_SPEED_0P25X:
            speed_factor = 0.25;
 800349c:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 80034a0:	607b      	str	r3, [r7, #4]
        break;
 80034a2:	e000      	b.n	80034a6 <task_led_ctrl_speed+0x56>
        default:
        break;
 80034a4:	bf00      	nop
        case LED_SPEED_0P1X:
            speed_factor = 0.1;
        break;
        */
    }
    return speed_factor;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	ee07 3a90 	vmov	s15, r3
}
 80034ac:	eeb0 0a67 	vmov.f32	s0, s15
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	2000005f 	.word	0x2000005f
 80034c0:	41200000 	.word	0x41200000
 80034c4:	40a00000 	.word	0x40a00000

080034c8 <task_led_ctrl_speed_adjust>:


void task_led_ctrl_speed_adjust(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
    if (LED_SPEED_FIRST == g_led_speed) g_led_speed = LED_SPEED_LAST;
 80034cc:	4b09      	ldr	r3, [pc, #36]	; (80034f4 <task_led_ctrl_speed_adjust+0x2c>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d103      	bne.n	80034dc <task_led_ctrl_speed_adjust+0x14>
 80034d4:	4b07      	ldr	r3, [pc, #28]	; (80034f4 <task_led_ctrl_speed_adjust+0x2c>)
 80034d6:	2204      	movs	r2, #4
 80034d8:	701a      	strb	r2, [r3, #0]
    else g_led_speed = (led_speed_e) (g_led_speed - 1);
}
 80034da:	e005      	b.n	80034e8 <task_led_ctrl_speed_adjust+0x20>
    else g_led_speed = (led_speed_e) (g_led_speed - 1);
 80034dc:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <task_led_ctrl_speed_adjust+0x2c>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	3b01      	subs	r3, #1
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	4b03      	ldr	r3, [pc, #12]	; (80034f4 <task_led_ctrl_speed_adjust+0x2c>)
 80034e6:	701a      	strb	r2, [r3, #0]
}
 80034e8:	bf00      	nop
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	2000005f 	.word	0x2000005f

080034f8 <task_led_ctrl_animate_iteration_reset>:
    return ((float)g_delay_in_animation_ms / task_led_ctrl_speed());
}


void task_led_ctrl_animate_iteration_reset(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
    g_animation_iterations = 0;
 80034fc:	4b03      	ldr	r3, [pc, #12]	; (800350c <task_led_ctrl_animate_iteration_reset+0x14>)
 80034fe:	2200      	movs	r2, #0
 8003500:	701a      	strb	r2, [r3, #0]
}
 8003502:	bf00      	nop
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	2000084f 	.word	0x2000084f

08003510 <task_led_ctrl_animate_adjust_state>:


bool task_led_ctrl_animate_adjust_state(void)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
    bool return_val = false;
 8003516:	2300      	movs	r3, #0
 8003518:	71fb      	strb	r3, [r7, #7]
    if (LED_STATE_LAST == g_led_state)
 800351a:	4b0b      	ldr	r3, [pc, #44]	; (8003548 <task_led_ctrl_animate_adjust_state+0x38>)
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	2b09      	cmp	r3, #9
 8003520:	d105      	bne.n	800352e <task_led_ctrl_animate_adjust_state+0x1e>
    {
        g_led_state = LED_STATE_FIRST;
 8003522:	4b09      	ldr	r3, [pc, #36]	; (8003548 <task_led_ctrl_animate_adjust_state+0x38>)
 8003524:	2200      	movs	r2, #0
 8003526:	701a      	strb	r2, [r3, #0]
        return_val = true;
 8003528:	2301      	movs	r3, #1
 800352a:	71fb      	strb	r3, [r7, #7]
 800352c:	e005      	b.n	800353a <task_led_ctrl_animate_adjust_state+0x2a>
    }
    else g_led_state = (led_state_e) (g_led_state + 1);
 800352e:	4b06      	ldr	r3, [pc, #24]	; (8003548 <task_led_ctrl_animate_adjust_state+0x38>)
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	3301      	adds	r3, #1
 8003534:	b2da      	uxtb	r2, r3
 8003536:	4b04      	ldr	r3, [pc, #16]	; (8003548 <task_led_ctrl_animate_adjust_state+0x38>)
 8003538:	701a      	strb	r2, [r3, #0]
    return return_val;
 800353a:	79fb      	ldrb	r3, [r7, #7]
}
 800353c:	4618      	mov	r0, r3
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	2000005e 	.word	0x2000005e

0800354c <task_led_ctrl_animate_state_demo>:


void task_led_ctrl_animate_state_demo(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
    g_master_led_state = MASTER_LED_STATE_DEMO;
 8003550:	4b05      	ldr	r3, [pc, #20]	; (8003568 <task_led_ctrl_animate_state_demo+0x1c>)
 8003552:	2200      	movs	r2, #0
 8003554:	701a      	strb	r2, [r3, #0]
    g_animation_iterations = 0;
 8003556:	4b05      	ldr	r3, [pc, #20]	; (800356c <task_led_ctrl_animate_state_demo+0x20>)
 8003558:	2200      	movs	r2, #0
 800355a:	701a      	strb	r2, [r3, #0]
}
 800355c:	bf00      	nop
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	2000084c 	.word	0x2000084c
 800356c:	2000084f 	.word	0x2000084f

08003570 <task_led_ctrl_animate_state_fixed>:


void task_led_ctrl_animate_state_fixed(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
    g_master_led_state = MASTER_LED_STATE_FIXED;
 8003574:	4b06      	ldr	r3, [pc, #24]	; (8003590 <task_led_ctrl_animate_state_fixed+0x20>)
 8003576:	2201      	movs	r2, #1
 8003578:	701a      	strb	r2, [r3, #0]
    g_led_state = LED_STATE_FIRST; // set first state
 800357a:	4b06      	ldr	r3, [pc, #24]	; (8003594 <task_led_ctrl_animate_state_fixed+0x24>)
 800357c:	2200      	movs	r2, #0
 800357e:	701a      	strb	r2, [r3, #0]
    g_animation_iterations = 0;
 8003580:	4b05      	ldr	r3, [pc, #20]	; (8003598 <task_led_ctrl_animate_state_fixed+0x28>)
 8003582:	2200      	movs	r2, #0
 8003584:	701a      	strb	r2, [r3, #0]
}
 8003586:	bf00      	nop
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr
 8003590:	2000084c 	.word	0x2000084c
 8003594:	2000005e 	.word	0x2000005e
 8003598:	2000084f 	.word	0x2000084f

0800359c <task_led_ctrl_animate_state>:


master_led_state_e task_led_ctrl_animate_state(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
    return g_master_led_state;
 80035a0:	4b03      	ldr	r3, [pc, #12]	; (80035b0 <task_led_ctrl_animate_state+0x14>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	2000084c 	.word	0x2000084c

080035b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	4603      	mov	r3, r0
 80035bc:	6039      	str	r1, [r7, #0]
 80035be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	db0a      	blt.n	80035de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	b2da      	uxtb	r2, r3
 80035cc:	490c      	ldr	r1, [pc, #48]	; (8003600 <__NVIC_SetPriority+0x4c>)
 80035ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d2:	0112      	lsls	r2, r2, #4
 80035d4:	b2d2      	uxtb	r2, r2
 80035d6:	440b      	add	r3, r1
 80035d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035dc:	e00a      	b.n	80035f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	4908      	ldr	r1, [pc, #32]	; (8003604 <__NVIC_SetPriority+0x50>)
 80035e4:	79fb      	ldrb	r3, [r7, #7]
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	3b04      	subs	r3, #4
 80035ec:	0112      	lsls	r2, r2, #4
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	440b      	add	r3, r1
 80035f2:	761a      	strb	r2, [r3, #24]
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	e000e100 	.word	0xe000e100
 8003604:	e000ed00 	.word	0xe000ed00

08003608 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800360c:	4b05      	ldr	r3, [pc, #20]	; (8003624 <SysTick_Handler+0x1c>)
 800360e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003610:	f001 fd10 	bl	8005034 <xTaskGetSchedulerState>
 8003614:	4603      	mov	r3, r0
 8003616:	2b01      	cmp	r3, #1
 8003618:	d001      	beq.n	800361e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800361a:	f002 fc2d 	bl	8005e78 <xPortSysTickHandler>
  }
}
 800361e:	bf00      	nop
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	e000e010 	.word	0xe000e010

08003628 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800362c:	2100      	movs	r1, #0
 800362e:	f06f 0004 	mvn.w	r0, #4
 8003632:	f7ff ffbf 	bl	80035b4 <__NVIC_SetPriority>
#endif
}
 8003636:	bf00      	nop
 8003638:	bd80      	pop	{r7, pc}
	...

0800363c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003642:	f3ef 8305 	mrs	r3, IPSR
 8003646:	603b      	str	r3, [r7, #0]
  return(result);
 8003648:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800364e:	f06f 0305 	mvn.w	r3, #5
 8003652:	607b      	str	r3, [r7, #4]
 8003654:	e00c      	b.n	8003670 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003656:	4b0a      	ldr	r3, [pc, #40]	; (8003680 <osKernelInitialize+0x44>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d105      	bne.n	800366a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800365e:	4b08      	ldr	r3, [pc, #32]	; (8003680 <osKernelInitialize+0x44>)
 8003660:	2201      	movs	r2, #1
 8003662:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003664:	2300      	movs	r3, #0
 8003666:	607b      	str	r3, [r7, #4]
 8003668:	e002      	b.n	8003670 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800366a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800366e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003670:	687b      	ldr	r3, [r7, #4]
}
 8003672:	4618      	mov	r0, r3
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	20000854 	.word	0x20000854

08003684 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800368a:	f3ef 8305 	mrs	r3, IPSR
 800368e:	603b      	str	r3, [r7, #0]
  return(result);
 8003690:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003696:	f06f 0305 	mvn.w	r3, #5
 800369a:	607b      	str	r3, [r7, #4]
 800369c:	e010      	b.n	80036c0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800369e:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <osKernelStart+0x48>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d109      	bne.n	80036ba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80036a6:	f7ff ffbf 	bl	8003628 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80036aa:	4b08      	ldr	r3, [pc, #32]	; (80036cc <osKernelStart+0x48>)
 80036ac:	2202      	movs	r2, #2
 80036ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80036b0:	f001 f866 	bl	8004780 <vTaskStartScheduler>
      stat = osOK;
 80036b4:	2300      	movs	r3, #0
 80036b6:	607b      	str	r3, [r7, #4]
 80036b8:	e002      	b.n	80036c0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80036ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80036c0:	687b      	ldr	r3, [r7, #4]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	20000854 	.word	0x20000854

080036d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08e      	sub	sp, #56	; 0x38
 80036d4:	af04      	add	r7, sp, #16
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80036dc:	2300      	movs	r3, #0
 80036de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036e0:	f3ef 8305 	mrs	r3, IPSR
 80036e4:	617b      	str	r3, [r7, #20]
  return(result);
 80036e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d17e      	bne.n	80037ea <osThreadNew+0x11a>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d07b      	beq.n	80037ea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80036f2:	2380      	movs	r3, #128	; 0x80
 80036f4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80036f6:	2318      	movs	r3, #24
 80036f8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80036fa:	2300      	movs	r3, #0
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80036fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003702:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d045      	beq.n	8003796 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d002      	beq.n	8003718 <osThreadNew+0x48>
        name = attr->name;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d002      	beq.n	8003726 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d008      	beq.n	800373e <osThreadNew+0x6e>
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	2b38      	cmp	r3, #56	; 0x38
 8003730:	d805      	bhi.n	800373e <osThreadNew+0x6e>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <osThreadNew+0x72>
        return (NULL);
 800373e:	2300      	movs	r3, #0
 8003740:	e054      	b.n	80037ec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	089b      	lsrs	r3, r3, #2
 8003750:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00e      	beq.n	8003778 <osThreadNew+0xa8>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	2b5b      	cmp	r3, #91	; 0x5b
 8003760:	d90a      	bls.n	8003778 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003766:	2b00      	cmp	r3, #0
 8003768:	d006      	beq.n	8003778 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d002      	beq.n	8003778 <osThreadNew+0xa8>
        mem = 1;
 8003772:	2301      	movs	r3, #1
 8003774:	61bb      	str	r3, [r7, #24]
 8003776:	e010      	b.n	800379a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10c      	bne.n	800379a <osThreadNew+0xca>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d108      	bne.n	800379a <osThreadNew+0xca>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d104      	bne.n	800379a <osThreadNew+0xca>
          mem = 0;
 8003790:	2300      	movs	r3, #0
 8003792:	61bb      	str	r3, [r7, #24]
 8003794:	e001      	b.n	800379a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003796:	2300      	movs	r3, #0
 8003798:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d110      	bne.n	80037c2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80037a8:	9202      	str	r2, [sp, #8]
 80037aa:	9301      	str	r3, [sp, #4]
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	6a3a      	ldr	r2, [r7, #32]
 80037b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f000 fe0c 	bl	80043d4 <xTaskCreateStatic>
 80037bc:	4603      	mov	r3, r0
 80037be:	613b      	str	r3, [r7, #16]
 80037c0:	e013      	b.n	80037ea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d110      	bne.n	80037ea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	f107 0310 	add.w	r3, r7, #16
 80037d0:	9301      	str	r3, [sp, #4]
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 fe57 	bl	800448e <xTaskCreate>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d001      	beq.n	80037ea <osThreadNew+0x11a>
            hTask = NULL;
 80037e6:	2300      	movs	r3, #0
 80037e8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80037ea:	693b      	ldr	r3, [r7, #16]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3728      	adds	r7, #40	; 0x28
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037fc:	f3ef 8305 	mrs	r3, IPSR
 8003800:	60bb      	str	r3, [r7, #8]
  return(result);
 8003802:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <osDelay+0x1c>
    stat = osErrorISR;
 8003808:	f06f 0305 	mvn.w	r3, #5
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	e007      	b.n	8003820 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003810:	2300      	movs	r3, #0
 8003812:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d002      	beq.n	8003820 <osDelay+0x2c>
      vTaskDelay(ticks);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 ff7c 	bl	8004718 <vTaskDelay>
    }
  }

  return (stat);
 8003820:	68fb      	ldr	r3, [r7, #12]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
	...

0800382c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	4a07      	ldr	r2, [pc, #28]	; (8003858 <vApplicationGetIdleTaskMemory+0x2c>)
 800383c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	4a06      	ldr	r2, [pc, #24]	; (800385c <vApplicationGetIdleTaskMemory+0x30>)
 8003842:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2280      	movs	r2, #128	; 0x80
 8003848:	601a      	str	r2, [r3, #0]
}
 800384a:	bf00      	nop
 800384c:	3714      	adds	r7, #20
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	20000858 	.word	0x20000858
 800385c:	200008b4 	.word	0x200008b4

08003860 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4a07      	ldr	r2, [pc, #28]	; (800388c <vApplicationGetTimerTaskMemory+0x2c>)
 8003870:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	4a06      	ldr	r2, [pc, #24]	; (8003890 <vApplicationGetTimerTaskMemory+0x30>)
 8003876:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800387e:	601a      	str	r2, [r3, #0]
}
 8003880:	bf00      	nop
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	20000ab4 	.word	0x20000ab4
 8003890:	20000b10 	.word	0x20000b10

08003894 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f103 0208 	add.w	r2, r3, #8
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f103 0208 	add.w	r2, r3, #8
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f103 0208 	add.w	r2, r3, #8
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80038e2:	bf00      	nop
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr

080038ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80038ee:	b480      	push	{r7}
 80038f0:	b085      	sub	sp, #20
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
 80038f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	1c5a      	adds	r2, r3, #1
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	601a      	str	r2, [r3, #0]
}
 800392a:	bf00      	nop
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr

08003936 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003936:	b480      	push	{r7}
 8003938:	b085      	sub	sp, #20
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
 800393e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800394c:	d103      	bne.n	8003956 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	e00c      	b.n	8003970 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	3308      	adds	r3, #8
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	e002      	b.n	8003964 <vListInsert+0x2e>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	429a      	cmp	r2, r3
 800396e:	d2f6      	bcs.n	800395e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	1c5a      	adds	r2, r3, #1
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	601a      	str	r2, [r3, #0]
}
 800399c:	bf00      	nop
 800399e:	3714      	adds	r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6892      	ldr	r2, [r2, #8]
 80039be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	6852      	ldr	r2, [r2, #4]
 80039c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d103      	bne.n	80039dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	1e5a      	subs	r2, r3, #1
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10a      	bne.n	8003a26 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a14:	f383 8811 	msr	BASEPRI, r3
 8003a18:	f3bf 8f6f 	isb	sy
 8003a1c:	f3bf 8f4f 	dsb	sy
 8003a20:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003a22:	bf00      	nop
 8003a24:	e7fe      	b.n	8003a24 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003a26:	f002 f995 	bl	8005d54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a32:	68f9      	ldr	r1, [r7, #12]
 8003a34:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a36:	fb01 f303 	mul.w	r3, r1, r3
 8003a3a:	441a      	add	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a56:	3b01      	subs	r3, #1
 8003a58:	68f9      	ldr	r1, [r7, #12]
 8003a5a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a5c:	fb01 f303 	mul.w	r3, r1, r3
 8003a60:	441a      	add	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	22ff      	movs	r2, #255	; 0xff
 8003a6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	22ff      	movs	r2, #255	; 0xff
 8003a72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d114      	bne.n	8003aa6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d01a      	beq.n	8003aba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	3310      	adds	r3, #16
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f001 f915 	bl	8004cb8 <xTaskRemoveFromEventList>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d012      	beq.n	8003aba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003a94:	4b0c      	ldr	r3, [pc, #48]	; (8003ac8 <xQueueGenericReset+0xcc>)
 8003a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	f3bf 8f6f 	isb	sy
 8003aa4:	e009      	b.n	8003aba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	3310      	adds	r3, #16
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7ff fef2 	bl	8003894 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	3324      	adds	r3, #36	; 0x24
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff feed 	bl	8003894 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003aba:	f002 f97b 	bl	8005db4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003abe:	2301      	movs	r3, #1
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	e000ed04 	.word	0xe000ed04

08003acc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b08e      	sub	sp, #56	; 0x38
 8003ad0:	af02      	add	r7, sp, #8
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
 8003ad8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10a      	bne.n	8003af6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae4:	f383 8811 	msr	BASEPRI, r3
 8003ae8:	f3bf 8f6f 	isb	sy
 8003aec:	f3bf 8f4f 	dsb	sy
 8003af0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003af2:	bf00      	nop
 8003af4:	e7fe      	b.n	8003af4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10a      	bne.n	8003b12 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b00:	f383 8811 	msr	BASEPRI, r3
 8003b04:	f3bf 8f6f 	isb	sy
 8003b08:	f3bf 8f4f 	dsb	sy
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003b0e:	bf00      	nop
 8003b10:	e7fe      	b.n	8003b10 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d002      	beq.n	8003b1e <xQueueGenericCreateStatic+0x52>
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <xQueueGenericCreateStatic+0x56>
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e000      	b.n	8003b24 <xQueueGenericCreateStatic+0x58>
 8003b22:	2300      	movs	r3, #0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10a      	bne.n	8003b3e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2c:	f383 8811 	msr	BASEPRI, r3
 8003b30:	f3bf 8f6f 	isb	sy
 8003b34:	f3bf 8f4f 	dsb	sy
 8003b38:	623b      	str	r3, [r7, #32]
}
 8003b3a:	bf00      	nop
 8003b3c:	e7fe      	b.n	8003b3c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d102      	bne.n	8003b4a <xQueueGenericCreateStatic+0x7e>
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <xQueueGenericCreateStatic+0x82>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e000      	b.n	8003b50 <xQueueGenericCreateStatic+0x84>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10a      	bne.n	8003b6a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b58:	f383 8811 	msr	BASEPRI, r3
 8003b5c:	f3bf 8f6f 	isb	sy
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	61fb      	str	r3, [r7, #28]
}
 8003b66:	bf00      	nop
 8003b68:	e7fe      	b.n	8003b68 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003b6a:	2350      	movs	r3, #80	; 0x50
 8003b6c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2b50      	cmp	r3, #80	; 0x50
 8003b72:	d00a      	beq.n	8003b8a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b78:	f383 8811 	msr	BASEPRI, r3
 8003b7c:	f3bf 8f6f 	isb	sy
 8003b80:	f3bf 8f4f 	dsb	sy
 8003b84:	61bb      	str	r3, [r7, #24]
}
 8003b86:	bf00      	nop
 8003b88:	e7fe      	b.n	8003b88 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003b8a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00d      	beq.n	8003bb2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b9e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	68b9      	ldr	r1, [r7, #8]
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 f805 	bl	8003bbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3730      	adds	r7, #48	; 0x30
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
 8003bc8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d103      	bne.n	8003bd8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	e002      	b.n	8003bde <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003bea:	2101      	movs	r1, #1
 8003bec:	69b8      	ldr	r0, [r7, #24]
 8003bee:	f7ff ff05 	bl	80039fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	78fa      	ldrb	r2, [r7, #3]
 8003bf6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003bfa:	bf00      	nop
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
	...

08003c04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08e      	sub	sp, #56	; 0x38
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
 8003c10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003c12:	2300      	movs	r3, #0
 8003c14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10a      	bne.n	8003c36 <xQueueGenericSend+0x32>
	__asm volatile
 8003c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c24:	f383 8811 	msr	BASEPRI, r3
 8003c28:	f3bf 8f6f 	isb	sy
 8003c2c:	f3bf 8f4f 	dsb	sy
 8003c30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003c32:	bf00      	nop
 8003c34:	e7fe      	b.n	8003c34 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d103      	bne.n	8003c44 <xQueueGenericSend+0x40>
 8003c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d101      	bne.n	8003c48 <xQueueGenericSend+0x44>
 8003c44:	2301      	movs	r3, #1
 8003c46:	e000      	b.n	8003c4a <xQueueGenericSend+0x46>
 8003c48:	2300      	movs	r3, #0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10a      	bne.n	8003c64 <xQueueGenericSend+0x60>
	__asm volatile
 8003c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c52:	f383 8811 	msr	BASEPRI, r3
 8003c56:	f3bf 8f6f 	isb	sy
 8003c5a:	f3bf 8f4f 	dsb	sy
 8003c5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003c60:	bf00      	nop
 8003c62:	e7fe      	b.n	8003c62 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d103      	bne.n	8003c72 <xQueueGenericSend+0x6e>
 8003c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d101      	bne.n	8003c76 <xQueueGenericSend+0x72>
 8003c72:	2301      	movs	r3, #1
 8003c74:	e000      	b.n	8003c78 <xQueueGenericSend+0x74>
 8003c76:	2300      	movs	r3, #0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10a      	bne.n	8003c92 <xQueueGenericSend+0x8e>
	__asm volatile
 8003c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c80:	f383 8811 	msr	BASEPRI, r3
 8003c84:	f3bf 8f6f 	isb	sy
 8003c88:	f3bf 8f4f 	dsb	sy
 8003c8c:	623b      	str	r3, [r7, #32]
}
 8003c8e:	bf00      	nop
 8003c90:	e7fe      	b.n	8003c90 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c92:	f001 f9cf 	bl	8005034 <xTaskGetSchedulerState>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d102      	bne.n	8003ca2 <xQueueGenericSend+0x9e>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <xQueueGenericSend+0xa2>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e000      	b.n	8003ca8 <xQueueGenericSend+0xa4>
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10a      	bne.n	8003cc2 <xQueueGenericSend+0xbe>
	__asm volatile
 8003cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb0:	f383 8811 	msr	BASEPRI, r3
 8003cb4:	f3bf 8f6f 	isb	sy
 8003cb8:	f3bf 8f4f 	dsb	sy
 8003cbc:	61fb      	str	r3, [r7, #28]
}
 8003cbe:	bf00      	nop
 8003cc0:	e7fe      	b.n	8003cc0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003cc2:	f002 f847 	bl	8005d54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d302      	bcc.n	8003cd8 <xQueueGenericSend+0xd4>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d129      	bne.n	8003d2c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003cd8:	683a      	ldr	r2, [r7, #0]
 8003cda:	68b9      	ldr	r1, [r7, #8]
 8003cdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cde:	f000 fa0b 	bl	80040f8 <prvCopyDataToQueue>
 8003ce2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d010      	beq.n	8003d0e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cee:	3324      	adds	r3, #36	; 0x24
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f000 ffe1 	bl	8004cb8 <xTaskRemoveFromEventList>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d013      	beq.n	8003d24 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003cfc:	4b3f      	ldr	r3, [pc, #252]	; (8003dfc <xQueueGenericSend+0x1f8>)
 8003cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	f3bf 8f4f 	dsb	sy
 8003d08:	f3bf 8f6f 	isb	sy
 8003d0c:	e00a      	b.n	8003d24 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d007      	beq.n	8003d24 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003d14:	4b39      	ldr	r3, [pc, #228]	; (8003dfc <xQueueGenericSend+0x1f8>)
 8003d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	f3bf 8f4f 	dsb	sy
 8003d20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003d24:	f002 f846 	bl	8005db4 <vPortExitCritical>
				return pdPASS;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e063      	b.n	8003df4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d103      	bne.n	8003d3a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d32:	f002 f83f 	bl	8005db4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003d36:	2300      	movs	r3, #0
 8003d38:	e05c      	b.n	8003df4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d106      	bne.n	8003d4e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d40:	f107 0314 	add.w	r3, r7, #20
 8003d44:	4618      	mov	r0, r3
 8003d46:	f001 f81b 	bl	8004d80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d4e:	f002 f831 	bl	8005db4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d52:	f000 fd7b 	bl	800484c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d56:	f001 fffd 	bl	8005d54 <vPortEnterCritical>
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d60:	b25b      	sxtb	r3, r3
 8003d62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d66:	d103      	bne.n	8003d70 <xQueueGenericSend+0x16c>
 8003d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d76:	b25b      	sxtb	r3, r3
 8003d78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d7c:	d103      	bne.n	8003d86 <xQueueGenericSend+0x182>
 8003d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d86:	f002 f815 	bl	8005db4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d8a:	1d3a      	adds	r2, r7, #4
 8003d8c:	f107 0314 	add.w	r3, r7, #20
 8003d90:	4611      	mov	r1, r2
 8003d92:	4618      	mov	r0, r3
 8003d94:	f001 f80a 	bl	8004dac <xTaskCheckForTimeOut>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d124      	bne.n	8003de8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003d9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003da0:	f000 faa2 	bl	80042e8 <prvIsQueueFull>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d018      	beq.n	8003ddc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dac:	3310      	adds	r3, #16
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	4611      	mov	r1, r2
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 ff30 	bl	8004c18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003db8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dba:	f000 fa2d 	bl	8004218 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003dbe:	f000 fd53 	bl	8004868 <xTaskResumeAll>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f47f af7c 	bne.w	8003cc2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003dca:	4b0c      	ldr	r3, [pc, #48]	; (8003dfc <xQueueGenericSend+0x1f8>)
 8003dcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	f3bf 8f6f 	isb	sy
 8003dda:	e772      	b.n	8003cc2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003ddc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dde:	f000 fa1b 	bl	8004218 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003de2:	f000 fd41 	bl	8004868 <xTaskResumeAll>
 8003de6:	e76c      	b.n	8003cc2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003de8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dea:	f000 fa15 	bl	8004218 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003dee:	f000 fd3b 	bl	8004868 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003df2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3738      	adds	r7, #56	; 0x38
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	e000ed04 	.word	0xe000ed04

08003e00 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b090      	sub	sp, #64	; 0x40
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
 8003e0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10a      	bne.n	8003e2e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1c:	f383 8811 	msr	BASEPRI, r3
 8003e20:	f3bf 8f6f 	isb	sy
 8003e24:	f3bf 8f4f 	dsb	sy
 8003e28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003e2a:	bf00      	nop
 8003e2c:	e7fe      	b.n	8003e2c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d103      	bne.n	8003e3c <xQueueGenericSendFromISR+0x3c>
 8003e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <xQueueGenericSendFromISR+0x40>
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e000      	b.n	8003e42 <xQueueGenericSendFromISR+0x42>
 8003e40:	2300      	movs	r3, #0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10a      	bne.n	8003e5c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4a:	f383 8811 	msr	BASEPRI, r3
 8003e4e:	f3bf 8f6f 	isb	sy
 8003e52:	f3bf 8f4f 	dsb	sy
 8003e56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003e58:	bf00      	nop
 8003e5a:	e7fe      	b.n	8003e5a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d103      	bne.n	8003e6a <xQueueGenericSendFromISR+0x6a>
 8003e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d101      	bne.n	8003e6e <xQueueGenericSendFromISR+0x6e>
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e000      	b.n	8003e70 <xQueueGenericSendFromISR+0x70>
 8003e6e:	2300      	movs	r3, #0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10a      	bne.n	8003e8a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e78:	f383 8811 	msr	BASEPRI, r3
 8003e7c:	f3bf 8f6f 	isb	sy
 8003e80:	f3bf 8f4f 	dsb	sy
 8003e84:	623b      	str	r3, [r7, #32]
}
 8003e86:	bf00      	nop
 8003e88:	e7fe      	b.n	8003e88 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e8a:	f002 f845 	bl	8005f18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003e8e:	f3ef 8211 	mrs	r2, BASEPRI
 8003e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e96:	f383 8811 	msr	BASEPRI, r3
 8003e9a:	f3bf 8f6f 	isb	sy
 8003e9e:	f3bf 8f4f 	dsb	sy
 8003ea2:	61fa      	str	r2, [r7, #28]
 8003ea4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003ea6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003ea8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d302      	bcc.n	8003ebc <xQueueGenericSendFromISR+0xbc>
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d12f      	bne.n	8003f1c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ebe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eca:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	68b9      	ldr	r1, [r7, #8]
 8003ed0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003ed2:	f000 f911 	bl	80040f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003ed6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003eda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ede:	d112      	bne.n	8003f06 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d016      	beq.n	8003f16 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eea:	3324      	adds	r3, #36	; 0x24
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 fee3 	bl	8004cb8 <xTaskRemoveFromEventList>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00e      	beq.n	8003f16 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00b      	beq.n	8003f16 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	e007      	b.n	8003f16 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003f06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	b25a      	sxtb	r2, r3
 8003f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003f16:	2301      	movs	r3, #1
 8003f18:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003f1a:	e001      	b.n	8003f20 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f22:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003f2a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3740      	adds	r7, #64	; 0x40
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
	...

08003f38 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b08c      	sub	sp, #48	; 0x30
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003f44:	2300      	movs	r3, #0
 8003f46:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10a      	bne.n	8003f68 <xQueueReceive+0x30>
	__asm volatile
 8003f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f56:	f383 8811 	msr	BASEPRI, r3
 8003f5a:	f3bf 8f6f 	isb	sy
 8003f5e:	f3bf 8f4f 	dsb	sy
 8003f62:	623b      	str	r3, [r7, #32]
}
 8003f64:	bf00      	nop
 8003f66:	e7fe      	b.n	8003f66 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d103      	bne.n	8003f76 <xQueueReceive+0x3e>
 8003f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <xQueueReceive+0x42>
 8003f76:	2301      	movs	r3, #1
 8003f78:	e000      	b.n	8003f7c <xQueueReceive+0x44>
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10a      	bne.n	8003f96 <xQueueReceive+0x5e>
	__asm volatile
 8003f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f84:	f383 8811 	msr	BASEPRI, r3
 8003f88:	f3bf 8f6f 	isb	sy
 8003f8c:	f3bf 8f4f 	dsb	sy
 8003f90:	61fb      	str	r3, [r7, #28]
}
 8003f92:	bf00      	nop
 8003f94:	e7fe      	b.n	8003f94 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f96:	f001 f84d 	bl	8005034 <xTaskGetSchedulerState>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d102      	bne.n	8003fa6 <xQueueReceive+0x6e>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <xQueueReceive+0x72>
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e000      	b.n	8003fac <xQueueReceive+0x74>
 8003faa:	2300      	movs	r3, #0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10a      	bne.n	8003fc6 <xQueueReceive+0x8e>
	__asm volatile
 8003fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb4:	f383 8811 	msr	BASEPRI, r3
 8003fb8:	f3bf 8f6f 	isb	sy
 8003fbc:	f3bf 8f4f 	dsb	sy
 8003fc0:	61bb      	str	r3, [r7, #24]
}
 8003fc2:	bf00      	nop
 8003fc4:	e7fe      	b.n	8003fc4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003fc6:	f001 fec5 	bl	8005d54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d01f      	beq.n	8004016 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003fd6:	68b9      	ldr	r1, [r7, #8]
 8003fd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fda:	f000 f8f7 	bl	80041cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	1e5a      	subs	r2, r3, #1
 8003fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00f      	beq.n	800400e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff0:	3310      	adds	r3, #16
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 fe60 	bl	8004cb8 <xTaskRemoveFromEventList>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d007      	beq.n	800400e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003ffe:	4b3d      	ldr	r3, [pc, #244]	; (80040f4 <xQueueReceive+0x1bc>)
 8004000:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004004:	601a      	str	r2, [r3, #0]
 8004006:	f3bf 8f4f 	dsb	sy
 800400a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800400e:	f001 fed1 	bl	8005db4 <vPortExitCritical>
				return pdPASS;
 8004012:	2301      	movs	r3, #1
 8004014:	e069      	b.n	80040ea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d103      	bne.n	8004024 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800401c:	f001 feca 	bl	8005db4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004020:	2300      	movs	r3, #0
 8004022:	e062      	b.n	80040ea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004026:	2b00      	cmp	r3, #0
 8004028:	d106      	bne.n	8004038 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800402a:	f107 0310 	add.w	r3, r7, #16
 800402e:	4618      	mov	r0, r3
 8004030:	f000 fea6 	bl	8004d80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004034:	2301      	movs	r3, #1
 8004036:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004038:	f001 febc 	bl	8005db4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800403c:	f000 fc06 	bl	800484c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004040:	f001 fe88 	bl	8005d54 <vPortEnterCritical>
 8004044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004046:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800404a:	b25b      	sxtb	r3, r3
 800404c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004050:	d103      	bne.n	800405a <xQueueReceive+0x122>
 8004052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800405a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004060:	b25b      	sxtb	r3, r3
 8004062:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004066:	d103      	bne.n	8004070 <xQueueReceive+0x138>
 8004068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406a:	2200      	movs	r2, #0
 800406c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004070:	f001 fea0 	bl	8005db4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004074:	1d3a      	adds	r2, r7, #4
 8004076:	f107 0310 	add.w	r3, r7, #16
 800407a:	4611      	mov	r1, r2
 800407c:	4618      	mov	r0, r3
 800407e:	f000 fe95 	bl	8004dac <xTaskCheckForTimeOut>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d123      	bne.n	80040d0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004088:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800408a:	f000 f917 	bl	80042bc <prvIsQueueEmpty>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d017      	beq.n	80040c4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004096:	3324      	adds	r3, #36	; 0x24
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	4611      	mov	r1, r2
 800409c:	4618      	mov	r0, r3
 800409e:	f000 fdbb 	bl	8004c18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80040a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040a4:	f000 f8b8 	bl	8004218 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80040a8:	f000 fbde 	bl	8004868 <xTaskResumeAll>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d189      	bne.n	8003fc6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80040b2:	4b10      	ldr	r3, [pc, #64]	; (80040f4 <xQueueReceive+0x1bc>)
 80040b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	f3bf 8f4f 	dsb	sy
 80040be:	f3bf 8f6f 	isb	sy
 80040c2:	e780      	b.n	8003fc6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80040c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040c6:	f000 f8a7 	bl	8004218 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80040ca:	f000 fbcd 	bl	8004868 <xTaskResumeAll>
 80040ce:	e77a      	b.n	8003fc6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80040d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040d2:	f000 f8a1 	bl	8004218 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80040d6:	f000 fbc7 	bl	8004868 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040dc:	f000 f8ee 	bl	80042bc <prvIsQueueEmpty>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f43f af6f 	beq.w	8003fc6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80040e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3730      	adds	r7, #48	; 0x30
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	e000ed04 	.word	0xe000ed04

080040f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004104:	2300      	movs	r3, #0
 8004106:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10d      	bne.n	8004132 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d14d      	bne.n	80041ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	4618      	mov	r0, r3
 8004124:	f000 ffa4 	bl	8005070 <xTaskPriorityDisinherit>
 8004128:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	609a      	str	r2, [r3, #8]
 8004130:	e043      	b.n	80041ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d119      	bne.n	800416c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6858      	ldr	r0, [r3, #4]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004140:	461a      	mov	r2, r3
 8004142:	68b9      	ldr	r1, [r7, #8]
 8004144:	f007 f88d 	bl	800b262 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004150:	441a      	add	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	429a      	cmp	r2, r3
 8004160:	d32b      	bcc.n	80041ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	605a      	str	r2, [r3, #4]
 800416a:	e026      	b.n	80041ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	68d8      	ldr	r0, [r3, #12]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004174:	461a      	mov	r2, r3
 8004176:	68b9      	ldr	r1, [r7, #8]
 8004178:	f007 f873 	bl	800b262 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	68da      	ldr	r2, [r3, #12]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004184:	425b      	negs	r3, r3
 8004186:	441a      	add	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	68da      	ldr	r2, [r3, #12]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	429a      	cmp	r2, r3
 8004196:	d207      	bcs.n	80041a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	689a      	ldr	r2, [r3, #8]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a0:	425b      	negs	r3, r3
 80041a2:	441a      	add	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d105      	bne.n	80041ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d002      	beq.n	80041ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	3b01      	subs	r3, #1
 80041b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1c5a      	adds	r2, r3, #1
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80041c2:	697b      	ldr	r3, [r7, #20]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3718      	adds	r7, #24
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d018      	beq.n	8004210 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68da      	ldr	r2, [r3, #12]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	441a      	add	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d303      	bcc.n	8004200 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68d9      	ldr	r1, [r3, #12]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004208:	461a      	mov	r2, r3
 800420a:	6838      	ldr	r0, [r7, #0]
 800420c:	f007 f829 	bl	800b262 <memcpy>
	}
}
 8004210:	bf00      	nop
 8004212:	3708      	adds	r7, #8
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004220:	f001 fd98 	bl	8005d54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800422a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800422c:	e011      	b.n	8004252 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	2b00      	cmp	r3, #0
 8004234:	d012      	beq.n	800425c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	3324      	adds	r3, #36	; 0x24
 800423a:	4618      	mov	r0, r3
 800423c:	f000 fd3c 	bl	8004cb8 <xTaskRemoveFromEventList>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004246:	f000 fe13 	bl	8004e70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800424a:	7bfb      	ldrb	r3, [r7, #15]
 800424c:	3b01      	subs	r3, #1
 800424e:	b2db      	uxtb	r3, r3
 8004250:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004256:	2b00      	cmp	r3, #0
 8004258:	dce9      	bgt.n	800422e <prvUnlockQueue+0x16>
 800425a:	e000      	b.n	800425e <prvUnlockQueue+0x46>
					break;
 800425c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	22ff      	movs	r2, #255	; 0xff
 8004262:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004266:	f001 fda5 	bl	8005db4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800426a:	f001 fd73 	bl	8005d54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004274:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004276:	e011      	b.n	800429c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d012      	beq.n	80042a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3310      	adds	r3, #16
 8004284:	4618      	mov	r0, r3
 8004286:	f000 fd17 	bl	8004cb8 <xTaskRemoveFromEventList>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d001      	beq.n	8004294 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004290:	f000 fdee 	bl	8004e70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004294:	7bbb      	ldrb	r3, [r7, #14]
 8004296:	3b01      	subs	r3, #1
 8004298:	b2db      	uxtb	r3, r3
 800429a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800429c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	dce9      	bgt.n	8004278 <prvUnlockQueue+0x60>
 80042a4:	e000      	b.n	80042a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80042a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	22ff      	movs	r2, #255	; 0xff
 80042ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80042b0:	f001 fd80 	bl	8005db4 <vPortExitCritical>
}
 80042b4:	bf00      	nop
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80042c4:	f001 fd46 	bl	8005d54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d102      	bne.n	80042d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80042d0:	2301      	movs	r3, #1
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	e001      	b.n	80042da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80042d6:	2300      	movs	r3, #0
 80042d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80042da:	f001 fd6b 	bl	8005db4 <vPortExitCritical>

	return xReturn;
 80042de:	68fb      	ldr	r3, [r7, #12]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80042f0:	f001 fd30 	bl	8005d54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d102      	bne.n	8004306 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004300:	2301      	movs	r3, #1
 8004302:	60fb      	str	r3, [r7, #12]
 8004304:	e001      	b.n	800430a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004306:	2300      	movs	r3, #0
 8004308:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800430a:	f001 fd53 	bl	8005db4 <vPortExitCritical>

	return xReturn;
 800430e:	68fb      	ldr	r3, [r7, #12]
}
 8004310:	4618      	mov	r0, r3
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004322:	2300      	movs	r3, #0
 8004324:	60fb      	str	r3, [r7, #12]
 8004326:	e014      	b.n	8004352 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004328:	4a0f      	ldr	r2, [pc, #60]	; (8004368 <vQueueAddToRegistry+0x50>)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10b      	bne.n	800434c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004334:	490c      	ldr	r1, [pc, #48]	; (8004368 <vQueueAddToRegistry+0x50>)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800433e:	4a0a      	ldr	r2, [pc, #40]	; (8004368 <vQueueAddToRegistry+0x50>)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	4413      	add	r3, r2
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800434a:	e006      	b.n	800435a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	3301      	adds	r3, #1
 8004350:	60fb      	str	r3, [r7, #12]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2b07      	cmp	r3, #7
 8004356:	d9e7      	bls.n	8004328 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004358:	bf00      	nop
 800435a:	bf00      	nop
 800435c:	3714      	adds	r7, #20
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	20000f10 	.word	0x20000f10

0800436c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800437c:	f001 fcea 	bl	8005d54 <vPortEnterCritical>
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004386:	b25b      	sxtb	r3, r3
 8004388:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800438c:	d103      	bne.n	8004396 <vQueueWaitForMessageRestricted+0x2a>
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800439c:	b25b      	sxtb	r3, r3
 800439e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043a2:	d103      	bne.n	80043ac <vQueueWaitForMessageRestricted+0x40>
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043ac:	f001 fd02 	bl	8005db4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d106      	bne.n	80043c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	3324      	adds	r3, #36	; 0x24
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	68b9      	ldr	r1, [r7, #8]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f000 fc4d 	bl	8004c60 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80043c6:	6978      	ldr	r0, [r7, #20]
 80043c8:	f7ff ff26 	bl	8004218 <prvUnlockQueue>
	}
 80043cc:	bf00      	nop
 80043ce:	3718      	adds	r7, #24
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b08e      	sub	sp, #56	; 0x38
 80043d8:	af04      	add	r7, sp, #16
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
 80043e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80043e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10a      	bne.n	80043fe <xTaskCreateStatic+0x2a>
	__asm volatile
 80043e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ec:	f383 8811 	msr	BASEPRI, r3
 80043f0:	f3bf 8f6f 	isb	sy
 80043f4:	f3bf 8f4f 	dsb	sy
 80043f8:	623b      	str	r3, [r7, #32]
}
 80043fa:	bf00      	nop
 80043fc:	e7fe      	b.n	80043fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80043fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10a      	bne.n	800441a <xTaskCreateStatic+0x46>
	__asm volatile
 8004404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004408:	f383 8811 	msr	BASEPRI, r3
 800440c:	f3bf 8f6f 	isb	sy
 8004410:	f3bf 8f4f 	dsb	sy
 8004414:	61fb      	str	r3, [r7, #28]
}
 8004416:	bf00      	nop
 8004418:	e7fe      	b.n	8004418 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800441a:	235c      	movs	r3, #92	; 0x5c
 800441c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	2b5c      	cmp	r3, #92	; 0x5c
 8004422:	d00a      	beq.n	800443a <xTaskCreateStatic+0x66>
	__asm volatile
 8004424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004428:	f383 8811 	msr	BASEPRI, r3
 800442c:	f3bf 8f6f 	isb	sy
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	61bb      	str	r3, [r7, #24]
}
 8004436:	bf00      	nop
 8004438:	e7fe      	b.n	8004438 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800443a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800443c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443e:	2b00      	cmp	r3, #0
 8004440:	d01e      	beq.n	8004480 <xTaskCreateStatic+0xac>
 8004442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004444:	2b00      	cmp	r3, #0
 8004446:	d01b      	beq.n	8004480 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800444a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004450:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004454:	2202      	movs	r2, #2
 8004456:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800445a:	2300      	movs	r3, #0
 800445c:	9303      	str	r3, [sp, #12]
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	9302      	str	r3, [sp, #8]
 8004462:	f107 0314 	add.w	r3, r7, #20
 8004466:	9301      	str	r3, [sp, #4]
 8004468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	68b9      	ldr	r1, [r7, #8]
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f000 f850 	bl	8004518 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004478:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800447a:	f000 f8dd 	bl	8004638 <prvAddNewTaskToReadyList>
 800447e:	e001      	b.n	8004484 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004480:	2300      	movs	r3, #0
 8004482:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004484:	697b      	ldr	r3, [r7, #20]
	}
 8004486:	4618      	mov	r0, r3
 8004488:	3728      	adds	r7, #40	; 0x28
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800448e:	b580      	push	{r7, lr}
 8004490:	b08c      	sub	sp, #48	; 0x30
 8004492:	af04      	add	r7, sp, #16
 8004494:	60f8      	str	r0, [r7, #12]
 8004496:	60b9      	str	r1, [r7, #8]
 8004498:	603b      	str	r3, [r7, #0]
 800449a:	4613      	mov	r3, r2
 800449c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800449e:	88fb      	ldrh	r3, [r7, #6]
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	4618      	mov	r0, r3
 80044a4:	f001 fd78 	bl	8005f98 <pvPortMalloc>
 80044a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00e      	beq.n	80044ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80044b0:	205c      	movs	r0, #92	; 0x5c
 80044b2:	f001 fd71 	bl	8005f98 <pvPortMalloc>
 80044b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	631a      	str	r2, [r3, #48]	; 0x30
 80044c4:	e005      	b.n	80044d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80044c6:	6978      	ldr	r0, [r7, #20]
 80044c8:	f001 fe32 	bl	8006130 <vPortFree>
 80044cc:	e001      	b.n	80044d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80044ce:	2300      	movs	r3, #0
 80044d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d017      	beq.n	8004508 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80044e0:	88fa      	ldrh	r2, [r7, #6]
 80044e2:	2300      	movs	r3, #0
 80044e4:	9303      	str	r3, [sp, #12]
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	9302      	str	r3, [sp, #8]
 80044ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ec:	9301      	str	r3, [sp, #4]
 80044ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	68b9      	ldr	r1, [r7, #8]
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f000 f80e 	bl	8004518 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80044fc:	69f8      	ldr	r0, [r7, #28]
 80044fe:	f000 f89b 	bl	8004638 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004502:	2301      	movs	r3, #1
 8004504:	61bb      	str	r3, [r7, #24]
 8004506:	e002      	b.n	800450e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004508:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800450c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800450e:	69bb      	ldr	r3, [r7, #24]
	}
 8004510:	4618      	mov	r0, r3
 8004512:	3720      	adds	r7, #32
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b088      	sub	sp, #32
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
 8004524:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004528:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	461a      	mov	r2, r3
 8004530:	21a5      	movs	r1, #165	; 0xa5
 8004532:	f006 fe25 	bl	800b180 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004538:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004540:	3b01      	subs	r3, #1
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	4413      	add	r3, r2
 8004546:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	f023 0307 	bic.w	r3, r3, #7
 800454e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00a      	beq.n	8004570 <prvInitialiseNewTask+0x58>
	__asm volatile
 800455a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455e:	f383 8811 	msr	BASEPRI, r3
 8004562:	f3bf 8f6f 	isb	sy
 8004566:	f3bf 8f4f 	dsb	sy
 800456a:	617b      	str	r3, [r7, #20]
}
 800456c:	bf00      	nop
 800456e:	e7fe      	b.n	800456e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d01f      	beq.n	80045b6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004576:	2300      	movs	r3, #0
 8004578:	61fb      	str	r3, [r7, #28]
 800457a:	e012      	b.n	80045a2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	4413      	add	r3, r2
 8004582:	7819      	ldrb	r1, [r3, #0]
 8004584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	4413      	add	r3, r2
 800458a:	3334      	adds	r3, #52	; 0x34
 800458c:	460a      	mov	r2, r1
 800458e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	4413      	add	r3, r2
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d006      	beq.n	80045aa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	3301      	adds	r3, #1
 80045a0:	61fb      	str	r3, [r7, #28]
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	2b0f      	cmp	r3, #15
 80045a6:	d9e9      	bls.n	800457c <prvInitialiseNewTask+0x64>
 80045a8:	e000      	b.n	80045ac <prvInitialiseNewTask+0x94>
			{
				break;
 80045aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80045ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045b4:	e003      	b.n	80045be <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80045b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80045be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c0:	2b37      	cmp	r3, #55	; 0x37
 80045c2:	d901      	bls.n	80045c8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80045c4:	2337      	movs	r3, #55	; 0x37
 80045c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80045c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80045ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045d2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80045d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d6:	2200      	movs	r2, #0
 80045d8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80045da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045dc:	3304      	adds	r3, #4
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff f978 	bl	80038d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80045e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e6:	3318      	adds	r3, #24
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7ff f973 	bl	80038d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80045ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80045fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80045fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004600:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004602:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004606:	2200      	movs	r2, #0
 8004608:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800460a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	68f9      	ldr	r1, [r7, #12]
 8004616:	69b8      	ldr	r0, [r7, #24]
 8004618:	f001 fa70 	bl	8005afc <pxPortInitialiseStack>
 800461c:	4602      	mov	r2, r0
 800461e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004620:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004624:	2b00      	cmp	r3, #0
 8004626:	d002      	beq.n	800462e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800462a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800462c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800462e:	bf00      	nop
 8004630:	3720      	adds	r7, #32
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
	...

08004638 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004640:	f001 fb88 	bl	8005d54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004644:	4b2d      	ldr	r3, [pc, #180]	; (80046fc <prvAddNewTaskToReadyList+0xc4>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	3301      	adds	r3, #1
 800464a:	4a2c      	ldr	r2, [pc, #176]	; (80046fc <prvAddNewTaskToReadyList+0xc4>)
 800464c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800464e:	4b2c      	ldr	r3, [pc, #176]	; (8004700 <prvAddNewTaskToReadyList+0xc8>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d109      	bne.n	800466a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004656:	4a2a      	ldr	r2, [pc, #168]	; (8004700 <prvAddNewTaskToReadyList+0xc8>)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800465c:	4b27      	ldr	r3, [pc, #156]	; (80046fc <prvAddNewTaskToReadyList+0xc4>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d110      	bne.n	8004686 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004664:	f000 fc28 	bl	8004eb8 <prvInitialiseTaskLists>
 8004668:	e00d      	b.n	8004686 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800466a:	4b26      	ldr	r3, [pc, #152]	; (8004704 <prvAddNewTaskToReadyList+0xcc>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d109      	bne.n	8004686 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004672:	4b23      	ldr	r3, [pc, #140]	; (8004700 <prvAddNewTaskToReadyList+0xc8>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467c:	429a      	cmp	r2, r3
 800467e:	d802      	bhi.n	8004686 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004680:	4a1f      	ldr	r2, [pc, #124]	; (8004700 <prvAddNewTaskToReadyList+0xc8>)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004686:	4b20      	ldr	r3, [pc, #128]	; (8004708 <prvAddNewTaskToReadyList+0xd0>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	3301      	adds	r3, #1
 800468c:	4a1e      	ldr	r2, [pc, #120]	; (8004708 <prvAddNewTaskToReadyList+0xd0>)
 800468e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004690:	4b1d      	ldr	r3, [pc, #116]	; (8004708 <prvAddNewTaskToReadyList+0xd0>)
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800469c:	4b1b      	ldr	r3, [pc, #108]	; (800470c <prvAddNewTaskToReadyList+0xd4>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d903      	bls.n	80046ac <prvAddNewTaskToReadyList+0x74>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a8:	4a18      	ldr	r2, [pc, #96]	; (800470c <prvAddNewTaskToReadyList+0xd4>)
 80046aa:	6013      	str	r3, [r2, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b0:	4613      	mov	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4a15      	ldr	r2, [pc, #84]	; (8004710 <prvAddNewTaskToReadyList+0xd8>)
 80046ba:	441a      	add	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	3304      	adds	r3, #4
 80046c0:	4619      	mov	r1, r3
 80046c2:	4610      	mov	r0, r2
 80046c4:	f7ff f913 	bl	80038ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80046c8:	f001 fb74 	bl	8005db4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80046cc:	4b0d      	ldr	r3, [pc, #52]	; (8004704 <prvAddNewTaskToReadyList+0xcc>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00e      	beq.n	80046f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80046d4:	4b0a      	ldr	r3, [pc, #40]	; (8004700 <prvAddNewTaskToReadyList+0xc8>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046de:	429a      	cmp	r2, r3
 80046e0:	d207      	bcs.n	80046f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80046e2:	4b0c      	ldr	r3, [pc, #48]	; (8004714 <prvAddNewTaskToReadyList+0xdc>)
 80046e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	f3bf 8f4f 	dsb	sy
 80046ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046f2:	bf00      	nop
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	20001424 	.word	0x20001424
 8004700:	20000f50 	.word	0x20000f50
 8004704:	20001430 	.word	0x20001430
 8004708:	20001440 	.word	0x20001440
 800470c:	2000142c 	.word	0x2000142c
 8004710:	20000f54 	.word	0x20000f54
 8004714:	e000ed04 	.word	0xe000ed04

08004718 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004720:	2300      	movs	r3, #0
 8004722:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d017      	beq.n	800475a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800472a:	4b13      	ldr	r3, [pc, #76]	; (8004778 <vTaskDelay+0x60>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00a      	beq.n	8004748 <vTaskDelay+0x30>
	__asm volatile
 8004732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	60bb      	str	r3, [r7, #8]
}
 8004744:	bf00      	nop
 8004746:	e7fe      	b.n	8004746 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004748:	f000 f880 	bl	800484c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800474c:	2100      	movs	r1, #0
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 fe32 	bl	80053b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004754:	f000 f888 	bl	8004868 <xTaskResumeAll>
 8004758:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d107      	bne.n	8004770 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004760:	4b06      	ldr	r3, [pc, #24]	; (800477c <vTaskDelay+0x64>)
 8004762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004766:	601a      	str	r2, [r3, #0]
 8004768:	f3bf 8f4f 	dsb	sy
 800476c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004770:	bf00      	nop
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	2000144c 	.word	0x2000144c
 800477c:	e000ed04 	.word	0xe000ed04

08004780 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b08a      	sub	sp, #40	; 0x28
 8004784:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004786:	2300      	movs	r3, #0
 8004788:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800478a:	2300      	movs	r3, #0
 800478c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800478e:	463a      	mov	r2, r7
 8004790:	1d39      	adds	r1, r7, #4
 8004792:	f107 0308 	add.w	r3, r7, #8
 8004796:	4618      	mov	r0, r3
 8004798:	f7ff f848 	bl	800382c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800479c:	6839      	ldr	r1, [r7, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	9202      	str	r2, [sp, #8]
 80047a4:	9301      	str	r3, [sp, #4]
 80047a6:	2300      	movs	r3, #0
 80047a8:	9300      	str	r3, [sp, #0]
 80047aa:	2300      	movs	r3, #0
 80047ac:	460a      	mov	r2, r1
 80047ae:	4921      	ldr	r1, [pc, #132]	; (8004834 <vTaskStartScheduler+0xb4>)
 80047b0:	4821      	ldr	r0, [pc, #132]	; (8004838 <vTaskStartScheduler+0xb8>)
 80047b2:	f7ff fe0f 	bl	80043d4 <xTaskCreateStatic>
 80047b6:	4603      	mov	r3, r0
 80047b8:	4a20      	ldr	r2, [pc, #128]	; (800483c <vTaskStartScheduler+0xbc>)
 80047ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80047bc:	4b1f      	ldr	r3, [pc, #124]	; (800483c <vTaskStartScheduler+0xbc>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d002      	beq.n	80047ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80047c4:	2301      	movs	r3, #1
 80047c6:	617b      	str	r3, [r7, #20]
 80047c8:	e001      	b.n	80047ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80047ca:	2300      	movs	r3, #0
 80047cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d102      	bne.n	80047da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80047d4:	f000 fe44 	bl	8005460 <xTimerCreateTimerTask>
 80047d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d116      	bne.n	800480e <vTaskStartScheduler+0x8e>
	__asm volatile
 80047e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e4:	f383 8811 	msr	BASEPRI, r3
 80047e8:	f3bf 8f6f 	isb	sy
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	613b      	str	r3, [r7, #16]
}
 80047f2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80047f4:	4b12      	ldr	r3, [pc, #72]	; (8004840 <vTaskStartScheduler+0xc0>)
 80047f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047fa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80047fc:	4b11      	ldr	r3, [pc, #68]	; (8004844 <vTaskStartScheduler+0xc4>)
 80047fe:	2201      	movs	r2, #1
 8004800:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004802:	4b11      	ldr	r3, [pc, #68]	; (8004848 <vTaskStartScheduler+0xc8>)
 8004804:	2200      	movs	r2, #0
 8004806:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004808:	f001 fa02 	bl	8005c10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800480c:	e00e      	b.n	800482c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004814:	d10a      	bne.n	800482c <vTaskStartScheduler+0xac>
	__asm volatile
 8004816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481a:	f383 8811 	msr	BASEPRI, r3
 800481e:	f3bf 8f6f 	isb	sy
 8004822:	f3bf 8f4f 	dsb	sy
 8004826:	60fb      	str	r3, [r7, #12]
}
 8004828:	bf00      	nop
 800482a:	e7fe      	b.n	800482a <vTaskStartScheduler+0xaa>
}
 800482c:	bf00      	nop
 800482e:	3718      	adds	r7, #24
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	0800be84 	.word	0x0800be84
 8004838:	08004e89 	.word	0x08004e89
 800483c:	20001448 	.word	0x20001448
 8004840:	20001444 	.word	0x20001444
 8004844:	20001430 	.word	0x20001430
 8004848:	20001428 	.word	0x20001428

0800484c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004850:	4b04      	ldr	r3, [pc, #16]	; (8004864 <vTaskSuspendAll+0x18>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	3301      	adds	r3, #1
 8004856:	4a03      	ldr	r2, [pc, #12]	; (8004864 <vTaskSuspendAll+0x18>)
 8004858:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800485a:	bf00      	nop
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	2000144c 	.word	0x2000144c

08004868 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800486e:	2300      	movs	r3, #0
 8004870:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004872:	2300      	movs	r3, #0
 8004874:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004876:	4b42      	ldr	r3, [pc, #264]	; (8004980 <xTaskResumeAll+0x118>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10a      	bne.n	8004894 <xTaskResumeAll+0x2c>
	__asm volatile
 800487e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004882:	f383 8811 	msr	BASEPRI, r3
 8004886:	f3bf 8f6f 	isb	sy
 800488a:	f3bf 8f4f 	dsb	sy
 800488e:	603b      	str	r3, [r7, #0]
}
 8004890:	bf00      	nop
 8004892:	e7fe      	b.n	8004892 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004894:	f001 fa5e 	bl	8005d54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004898:	4b39      	ldr	r3, [pc, #228]	; (8004980 <xTaskResumeAll+0x118>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3b01      	subs	r3, #1
 800489e:	4a38      	ldr	r2, [pc, #224]	; (8004980 <xTaskResumeAll+0x118>)
 80048a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048a2:	4b37      	ldr	r3, [pc, #220]	; (8004980 <xTaskResumeAll+0x118>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d162      	bne.n	8004970 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80048aa:	4b36      	ldr	r3, [pc, #216]	; (8004984 <xTaskResumeAll+0x11c>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d05e      	beq.n	8004970 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048b2:	e02f      	b.n	8004914 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048b4:	4b34      	ldr	r3, [pc, #208]	; (8004988 <xTaskResumeAll+0x120>)
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	3318      	adds	r3, #24
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7ff f871 	bl	80039a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	3304      	adds	r3, #4
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7ff f86c 	bl	80039a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d4:	4b2d      	ldr	r3, [pc, #180]	; (800498c <xTaskResumeAll+0x124>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d903      	bls.n	80048e4 <xTaskResumeAll+0x7c>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e0:	4a2a      	ldr	r2, [pc, #168]	; (800498c <xTaskResumeAll+0x124>)
 80048e2:	6013      	str	r3, [r2, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e8:	4613      	mov	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4413      	add	r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4a27      	ldr	r2, [pc, #156]	; (8004990 <xTaskResumeAll+0x128>)
 80048f2:	441a      	add	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	3304      	adds	r3, #4
 80048f8:	4619      	mov	r1, r3
 80048fa:	4610      	mov	r0, r2
 80048fc:	f7fe fff7 	bl	80038ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004904:	4b23      	ldr	r3, [pc, #140]	; (8004994 <xTaskResumeAll+0x12c>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490a:	429a      	cmp	r2, r3
 800490c:	d302      	bcc.n	8004914 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800490e:	4b22      	ldr	r3, [pc, #136]	; (8004998 <xTaskResumeAll+0x130>)
 8004910:	2201      	movs	r2, #1
 8004912:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004914:	4b1c      	ldr	r3, [pc, #112]	; (8004988 <xTaskResumeAll+0x120>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1cb      	bne.n	80048b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004922:	f000 fb67 	bl	8004ff4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004926:	4b1d      	ldr	r3, [pc, #116]	; (800499c <xTaskResumeAll+0x134>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d010      	beq.n	8004954 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004932:	f000 f859 	bl	80049e8 <xTaskIncrementTick>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d002      	beq.n	8004942 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800493c:	4b16      	ldr	r3, [pc, #88]	; (8004998 <xTaskResumeAll+0x130>)
 800493e:	2201      	movs	r2, #1
 8004940:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	3b01      	subs	r3, #1
 8004946:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1f1      	bne.n	8004932 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800494e:	4b13      	ldr	r3, [pc, #76]	; (800499c <xTaskResumeAll+0x134>)
 8004950:	2200      	movs	r2, #0
 8004952:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004954:	4b10      	ldr	r3, [pc, #64]	; (8004998 <xTaskResumeAll+0x130>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d009      	beq.n	8004970 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800495c:	2301      	movs	r3, #1
 800495e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004960:	4b0f      	ldr	r3, [pc, #60]	; (80049a0 <xTaskResumeAll+0x138>)
 8004962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004966:	601a      	str	r2, [r3, #0]
 8004968:	f3bf 8f4f 	dsb	sy
 800496c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004970:	f001 fa20 	bl	8005db4 <vPortExitCritical>

	return xAlreadyYielded;
 8004974:	68bb      	ldr	r3, [r7, #8]
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	2000144c 	.word	0x2000144c
 8004984:	20001424 	.word	0x20001424
 8004988:	200013e4 	.word	0x200013e4
 800498c:	2000142c 	.word	0x2000142c
 8004990:	20000f54 	.word	0x20000f54
 8004994:	20000f50 	.word	0x20000f50
 8004998:	20001438 	.word	0x20001438
 800499c:	20001434 	.word	0x20001434
 80049a0:	e000ed04 	.word	0xe000ed04

080049a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80049aa:	4b05      	ldr	r3, [pc, #20]	; (80049c0 <xTaskGetTickCount+0x1c>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80049b0:	687b      	ldr	r3, [r7, #4]
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	20001428 	.word	0x20001428

080049c4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80049ca:	f001 faa5 	bl	8005f18 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80049ce:	2300      	movs	r3, #0
 80049d0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80049d2:	4b04      	ldr	r3, [pc, #16]	; (80049e4 <xTaskGetTickCountFromISR+0x20>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80049d8:	683b      	ldr	r3, [r7, #0]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3708      	adds	r7, #8
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	20001428 	.word	0x20001428

080049e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80049ee:	2300      	movs	r3, #0
 80049f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049f2:	4b4f      	ldr	r3, [pc, #316]	; (8004b30 <xTaskIncrementTick+0x148>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f040 808f 	bne.w	8004b1a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80049fc:	4b4d      	ldr	r3, [pc, #308]	; (8004b34 <xTaskIncrementTick+0x14c>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	3301      	adds	r3, #1
 8004a02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004a04:	4a4b      	ldr	r2, [pc, #300]	; (8004b34 <xTaskIncrementTick+0x14c>)
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d120      	bne.n	8004a52 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004a10:	4b49      	ldr	r3, [pc, #292]	; (8004b38 <xTaskIncrementTick+0x150>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00a      	beq.n	8004a30 <xTaskIncrementTick+0x48>
	__asm volatile
 8004a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1e:	f383 8811 	msr	BASEPRI, r3
 8004a22:	f3bf 8f6f 	isb	sy
 8004a26:	f3bf 8f4f 	dsb	sy
 8004a2a:	603b      	str	r3, [r7, #0]
}
 8004a2c:	bf00      	nop
 8004a2e:	e7fe      	b.n	8004a2e <xTaskIncrementTick+0x46>
 8004a30:	4b41      	ldr	r3, [pc, #260]	; (8004b38 <xTaskIncrementTick+0x150>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	60fb      	str	r3, [r7, #12]
 8004a36:	4b41      	ldr	r3, [pc, #260]	; (8004b3c <xTaskIncrementTick+0x154>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a3f      	ldr	r2, [pc, #252]	; (8004b38 <xTaskIncrementTick+0x150>)
 8004a3c:	6013      	str	r3, [r2, #0]
 8004a3e:	4a3f      	ldr	r2, [pc, #252]	; (8004b3c <xTaskIncrementTick+0x154>)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6013      	str	r3, [r2, #0]
 8004a44:	4b3e      	ldr	r3, [pc, #248]	; (8004b40 <xTaskIncrementTick+0x158>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	4a3d      	ldr	r2, [pc, #244]	; (8004b40 <xTaskIncrementTick+0x158>)
 8004a4c:	6013      	str	r3, [r2, #0]
 8004a4e:	f000 fad1 	bl	8004ff4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004a52:	4b3c      	ldr	r3, [pc, #240]	; (8004b44 <xTaskIncrementTick+0x15c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d349      	bcc.n	8004af0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a5c:	4b36      	ldr	r3, [pc, #216]	; (8004b38 <xTaskIncrementTick+0x150>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d104      	bne.n	8004a70 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a66:	4b37      	ldr	r3, [pc, #220]	; (8004b44 <xTaskIncrementTick+0x15c>)
 8004a68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a6c:	601a      	str	r2, [r3, #0]
					break;
 8004a6e:	e03f      	b.n	8004af0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a70:	4b31      	ldr	r3, [pc, #196]	; (8004b38 <xTaskIncrementTick+0x150>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d203      	bcs.n	8004a90 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a88:	4a2e      	ldr	r2, [pc, #184]	; (8004b44 <xTaskIncrementTick+0x15c>)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004a8e:	e02f      	b.n	8004af0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	3304      	adds	r3, #4
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7fe ff87 	bl	80039a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d004      	beq.n	8004aac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	3318      	adds	r3, #24
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7fe ff7e 	bl	80039a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab0:	4b25      	ldr	r3, [pc, #148]	; (8004b48 <xTaskIncrementTick+0x160>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d903      	bls.n	8004ac0 <xTaskIncrementTick+0xd8>
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abc:	4a22      	ldr	r2, [pc, #136]	; (8004b48 <xTaskIncrementTick+0x160>)
 8004abe:	6013      	str	r3, [r2, #0]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4a1f      	ldr	r2, [pc, #124]	; (8004b4c <xTaskIncrementTick+0x164>)
 8004ace:	441a      	add	r2, r3
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	4610      	mov	r0, r2
 8004ad8:	f7fe ff09 	bl	80038ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae0:	4b1b      	ldr	r3, [pc, #108]	; (8004b50 <xTaskIncrementTick+0x168>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d3b8      	bcc.n	8004a5c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004aea:	2301      	movs	r3, #1
 8004aec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004aee:	e7b5      	b.n	8004a5c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004af0:	4b17      	ldr	r3, [pc, #92]	; (8004b50 <xTaskIncrementTick+0x168>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af6:	4915      	ldr	r1, [pc, #84]	; (8004b4c <xTaskIncrementTick+0x164>)
 8004af8:	4613      	mov	r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4413      	add	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	440b      	add	r3, r1
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d901      	bls.n	8004b0c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004b0c:	4b11      	ldr	r3, [pc, #68]	; (8004b54 <xTaskIncrementTick+0x16c>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d007      	beq.n	8004b24 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004b14:	2301      	movs	r3, #1
 8004b16:	617b      	str	r3, [r7, #20]
 8004b18:	e004      	b.n	8004b24 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004b1a:	4b0f      	ldr	r3, [pc, #60]	; (8004b58 <xTaskIncrementTick+0x170>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	4a0d      	ldr	r2, [pc, #52]	; (8004b58 <xTaskIncrementTick+0x170>)
 8004b22:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004b24:	697b      	ldr	r3, [r7, #20]
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3718      	adds	r7, #24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	2000144c 	.word	0x2000144c
 8004b34:	20001428 	.word	0x20001428
 8004b38:	200013dc 	.word	0x200013dc
 8004b3c:	200013e0 	.word	0x200013e0
 8004b40:	2000143c 	.word	0x2000143c
 8004b44:	20001444 	.word	0x20001444
 8004b48:	2000142c 	.word	0x2000142c
 8004b4c:	20000f54 	.word	0x20000f54
 8004b50:	20000f50 	.word	0x20000f50
 8004b54:	20001438 	.word	0x20001438
 8004b58:	20001434 	.word	0x20001434

08004b5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b62:	4b28      	ldr	r3, [pc, #160]	; (8004c04 <vTaskSwitchContext+0xa8>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d003      	beq.n	8004b72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004b6a:	4b27      	ldr	r3, [pc, #156]	; (8004c08 <vTaskSwitchContext+0xac>)
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004b70:	e041      	b.n	8004bf6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004b72:	4b25      	ldr	r3, [pc, #148]	; (8004c08 <vTaskSwitchContext+0xac>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b78:	4b24      	ldr	r3, [pc, #144]	; (8004c0c <vTaskSwitchContext+0xb0>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	60fb      	str	r3, [r7, #12]
 8004b7e:	e010      	b.n	8004ba2 <vTaskSwitchContext+0x46>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10a      	bne.n	8004b9c <vTaskSwitchContext+0x40>
	__asm volatile
 8004b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8a:	f383 8811 	msr	BASEPRI, r3
 8004b8e:	f3bf 8f6f 	isb	sy
 8004b92:	f3bf 8f4f 	dsb	sy
 8004b96:	607b      	str	r3, [r7, #4]
}
 8004b98:	bf00      	nop
 8004b9a:	e7fe      	b.n	8004b9a <vTaskSwitchContext+0x3e>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	60fb      	str	r3, [r7, #12]
 8004ba2:	491b      	ldr	r1, [pc, #108]	; (8004c10 <vTaskSwitchContext+0xb4>)
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4413      	add	r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	440b      	add	r3, r1
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d0e4      	beq.n	8004b80 <vTaskSwitchContext+0x24>
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4413      	add	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4a13      	ldr	r2, [pc, #76]	; (8004c10 <vTaskSwitchContext+0xb4>)
 8004bc2:	4413      	add	r3, r2
 8004bc4:	60bb      	str	r3, [r7, #8]
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	685a      	ldr	r2, [r3, #4]
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	605a      	str	r2, [r3, #4]
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	685a      	ldr	r2, [r3, #4]
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	3308      	adds	r3, #8
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d104      	bne.n	8004be6 <vTaskSwitchContext+0x8a>
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	685a      	ldr	r2, [r3, #4]
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	605a      	str	r2, [r3, #4]
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	4a09      	ldr	r2, [pc, #36]	; (8004c14 <vTaskSwitchContext+0xb8>)
 8004bee:	6013      	str	r3, [r2, #0]
 8004bf0:	4a06      	ldr	r2, [pc, #24]	; (8004c0c <vTaskSwitchContext+0xb0>)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6013      	str	r3, [r2, #0]
}
 8004bf6:	bf00      	nop
 8004bf8:	3714      	adds	r7, #20
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	2000144c 	.word	0x2000144c
 8004c08:	20001438 	.word	0x20001438
 8004c0c:	2000142c 	.word	0x2000142c
 8004c10:	20000f54 	.word	0x20000f54
 8004c14:	20000f50 	.word	0x20000f50

08004c18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10a      	bne.n	8004c3e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2c:	f383 8811 	msr	BASEPRI, r3
 8004c30:	f3bf 8f6f 	isb	sy
 8004c34:	f3bf 8f4f 	dsb	sy
 8004c38:	60fb      	str	r3, [r7, #12]
}
 8004c3a:	bf00      	nop
 8004c3c:	e7fe      	b.n	8004c3c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c3e:	4b07      	ldr	r3, [pc, #28]	; (8004c5c <vTaskPlaceOnEventList+0x44>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	3318      	adds	r3, #24
 8004c44:	4619      	mov	r1, r3
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7fe fe75 	bl	8003936 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c4c:	2101      	movs	r1, #1
 8004c4e:	6838      	ldr	r0, [r7, #0]
 8004c50:	f000 fbb2 	bl	80053b8 <prvAddCurrentTaskToDelayedList>
}
 8004c54:	bf00      	nop
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	20000f50 	.word	0x20000f50

08004c60 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10a      	bne.n	8004c88 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c76:	f383 8811 	msr	BASEPRI, r3
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	617b      	str	r3, [r7, #20]
}
 8004c84:	bf00      	nop
 8004c86:	e7fe      	b.n	8004c86 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c88:	4b0a      	ldr	r3, [pc, #40]	; (8004cb4 <vTaskPlaceOnEventListRestricted+0x54>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	3318      	adds	r3, #24
 8004c8e:	4619      	mov	r1, r3
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f7fe fe2c 	bl	80038ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d002      	beq.n	8004ca2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004c9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ca0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004ca2:	6879      	ldr	r1, [r7, #4]
 8004ca4:	68b8      	ldr	r0, [r7, #8]
 8004ca6:	f000 fb87 	bl	80053b8 <prvAddCurrentTaskToDelayedList>
	}
 8004caa:	bf00      	nop
 8004cac:	3718      	adds	r7, #24
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	20000f50 	.word	0x20000f50

08004cb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10a      	bne.n	8004ce4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd2:	f383 8811 	msr	BASEPRI, r3
 8004cd6:	f3bf 8f6f 	isb	sy
 8004cda:	f3bf 8f4f 	dsb	sy
 8004cde:	60fb      	str	r3, [r7, #12]
}
 8004ce0:	bf00      	nop
 8004ce2:	e7fe      	b.n	8004ce2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	3318      	adds	r3, #24
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7fe fe5d 	bl	80039a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cee:	4b1e      	ldr	r3, [pc, #120]	; (8004d68 <xTaskRemoveFromEventList+0xb0>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d11d      	bne.n	8004d32 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	3304      	adds	r3, #4
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fe fe54 	bl	80039a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d04:	4b19      	ldr	r3, [pc, #100]	; (8004d6c <xTaskRemoveFromEventList+0xb4>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d903      	bls.n	8004d14 <xTaskRemoveFromEventList+0x5c>
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d10:	4a16      	ldr	r2, [pc, #88]	; (8004d6c <xTaskRemoveFromEventList+0xb4>)
 8004d12:	6013      	str	r3, [r2, #0]
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d18:	4613      	mov	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4a13      	ldr	r2, [pc, #76]	; (8004d70 <xTaskRemoveFromEventList+0xb8>)
 8004d22:	441a      	add	r2, r3
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	3304      	adds	r3, #4
 8004d28:	4619      	mov	r1, r3
 8004d2a:	4610      	mov	r0, r2
 8004d2c:	f7fe fddf 	bl	80038ee <vListInsertEnd>
 8004d30:	e005      	b.n	8004d3e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	3318      	adds	r3, #24
 8004d36:	4619      	mov	r1, r3
 8004d38:	480e      	ldr	r0, [pc, #56]	; (8004d74 <xTaskRemoveFromEventList+0xbc>)
 8004d3a:	f7fe fdd8 	bl	80038ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d42:	4b0d      	ldr	r3, [pc, #52]	; (8004d78 <xTaskRemoveFromEventList+0xc0>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d905      	bls.n	8004d58 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004d50:	4b0a      	ldr	r3, [pc, #40]	; (8004d7c <xTaskRemoveFromEventList+0xc4>)
 8004d52:	2201      	movs	r2, #1
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	e001      	b.n	8004d5c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004d5c:	697b      	ldr	r3, [r7, #20]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3718      	adds	r7, #24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	2000144c 	.word	0x2000144c
 8004d6c:	2000142c 	.word	0x2000142c
 8004d70:	20000f54 	.word	0x20000f54
 8004d74:	200013e4 	.word	0x200013e4
 8004d78:	20000f50 	.word	0x20000f50
 8004d7c:	20001438 	.word	0x20001438

08004d80 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d88:	4b06      	ldr	r3, [pc, #24]	; (8004da4 <vTaskInternalSetTimeOutState+0x24>)
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004d90:	4b05      	ldr	r3, [pc, #20]	; (8004da8 <vTaskInternalSetTimeOutState+0x28>)
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	605a      	str	r2, [r3, #4]
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	2000143c 	.word	0x2000143c
 8004da8:	20001428 	.word	0x20001428

08004dac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b088      	sub	sp, #32
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10a      	bne.n	8004dd2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc0:	f383 8811 	msr	BASEPRI, r3
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	f3bf 8f4f 	dsb	sy
 8004dcc:	613b      	str	r3, [r7, #16]
}
 8004dce:	bf00      	nop
 8004dd0:	e7fe      	b.n	8004dd0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d10a      	bne.n	8004dee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ddc:	f383 8811 	msr	BASEPRI, r3
 8004de0:	f3bf 8f6f 	isb	sy
 8004de4:	f3bf 8f4f 	dsb	sy
 8004de8:	60fb      	str	r3, [r7, #12]
}
 8004dea:	bf00      	nop
 8004dec:	e7fe      	b.n	8004dec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004dee:	f000 ffb1 	bl	8005d54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004df2:	4b1d      	ldr	r3, [pc, #116]	; (8004e68 <xTaskCheckForTimeOut+0xbc>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e0a:	d102      	bne.n	8004e12 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	61fb      	str	r3, [r7, #28]
 8004e10:	e023      	b.n	8004e5a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	4b15      	ldr	r3, [pc, #84]	; (8004e6c <xTaskCheckForTimeOut+0xc0>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d007      	beq.n	8004e2e <xTaskCheckForTimeOut+0x82>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	69ba      	ldr	r2, [r7, #24]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d302      	bcc.n	8004e2e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	61fb      	str	r3, [r7, #28]
 8004e2c:	e015      	b.n	8004e5a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d20b      	bcs.n	8004e50 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	1ad2      	subs	r2, r2, r3
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f7ff ff9b 	bl	8004d80 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	61fb      	str	r3, [r7, #28]
 8004e4e:	e004      	b.n	8004e5a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	2200      	movs	r2, #0
 8004e54:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004e56:	2301      	movs	r3, #1
 8004e58:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004e5a:	f000 ffab 	bl	8005db4 <vPortExitCritical>

	return xReturn;
 8004e5e:	69fb      	ldr	r3, [r7, #28]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3720      	adds	r7, #32
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	20001428 	.word	0x20001428
 8004e6c:	2000143c 	.word	0x2000143c

08004e70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004e70:	b480      	push	{r7}
 8004e72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004e74:	4b03      	ldr	r3, [pc, #12]	; (8004e84 <vTaskMissedYield+0x14>)
 8004e76:	2201      	movs	r2, #1
 8004e78:	601a      	str	r2, [r3, #0]
}
 8004e7a:	bf00      	nop
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr
 8004e84:	20001438 	.word	0x20001438

08004e88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004e90:	f000 f852 	bl	8004f38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e94:	4b06      	ldr	r3, [pc, #24]	; (8004eb0 <prvIdleTask+0x28>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d9f9      	bls.n	8004e90 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004e9c:	4b05      	ldr	r3, [pc, #20]	; (8004eb4 <prvIdleTask+0x2c>)
 8004e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ea2:	601a      	str	r2, [r3, #0]
 8004ea4:	f3bf 8f4f 	dsb	sy
 8004ea8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004eac:	e7f0      	b.n	8004e90 <prvIdleTask+0x8>
 8004eae:	bf00      	nop
 8004eb0:	20000f54 	.word	0x20000f54
 8004eb4:	e000ed04 	.word	0xe000ed04

08004eb8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	607b      	str	r3, [r7, #4]
 8004ec2:	e00c      	b.n	8004ede <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	4413      	add	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4a12      	ldr	r2, [pc, #72]	; (8004f18 <prvInitialiseTaskLists+0x60>)
 8004ed0:	4413      	add	r3, r2
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7fe fcde 	bl	8003894 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	3301      	adds	r3, #1
 8004edc:	607b      	str	r3, [r7, #4]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2b37      	cmp	r3, #55	; 0x37
 8004ee2:	d9ef      	bls.n	8004ec4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ee4:	480d      	ldr	r0, [pc, #52]	; (8004f1c <prvInitialiseTaskLists+0x64>)
 8004ee6:	f7fe fcd5 	bl	8003894 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004eea:	480d      	ldr	r0, [pc, #52]	; (8004f20 <prvInitialiseTaskLists+0x68>)
 8004eec:	f7fe fcd2 	bl	8003894 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ef0:	480c      	ldr	r0, [pc, #48]	; (8004f24 <prvInitialiseTaskLists+0x6c>)
 8004ef2:	f7fe fccf 	bl	8003894 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004ef6:	480c      	ldr	r0, [pc, #48]	; (8004f28 <prvInitialiseTaskLists+0x70>)
 8004ef8:	f7fe fccc 	bl	8003894 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004efc:	480b      	ldr	r0, [pc, #44]	; (8004f2c <prvInitialiseTaskLists+0x74>)
 8004efe:	f7fe fcc9 	bl	8003894 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004f02:	4b0b      	ldr	r3, [pc, #44]	; (8004f30 <prvInitialiseTaskLists+0x78>)
 8004f04:	4a05      	ldr	r2, [pc, #20]	; (8004f1c <prvInitialiseTaskLists+0x64>)
 8004f06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004f08:	4b0a      	ldr	r3, [pc, #40]	; (8004f34 <prvInitialiseTaskLists+0x7c>)
 8004f0a:	4a05      	ldr	r2, [pc, #20]	; (8004f20 <prvInitialiseTaskLists+0x68>)
 8004f0c:	601a      	str	r2, [r3, #0]
}
 8004f0e:	bf00      	nop
 8004f10:	3708      	adds	r7, #8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	20000f54 	.word	0x20000f54
 8004f1c:	200013b4 	.word	0x200013b4
 8004f20:	200013c8 	.word	0x200013c8
 8004f24:	200013e4 	.word	0x200013e4
 8004f28:	200013f8 	.word	0x200013f8
 8004f2c:	20001410 	.word	0x20001410
 8004f30:	200013dc 	.word	0x200013dc
 8004f34:	200013e0 	.word	0x200013e0

08004f38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f3e:	e019      	b.n	8004f74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004f40:	f000 ff08 	bl	8005d54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f44:	4b10      	ldr	r3, [pc, #64]	; (8004f88 <prvCheckTasksWaitingTermination+0x50>)
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	3304      	adds	r3, #4
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7fe fd29 	bl	80039a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004f56:	4b0d      	ldr	r3, [pc, #52]	; (8004f8c <prvCheckTasksWaitingTermination+0x54>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	4a0b      	ldr	r2, [pc, #44]	; (8004f8c <prvCheckTasksWaitingTermination+0x54>)
 8004f5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004f60:	4b0b      	ldr	r3, [pc, #44]	; (8004f90 <prvCheckTasksWaitingTermination+0x58>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	3b01      	subs	r3, #1
 8004f66:	4a0a      	ldr	r2, [pc, #40]	; (8004f90 <prvCheckTasksWaitingTermination+0x58>)
 8004f68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004f6a:	f000 ff23 	bl	8005db4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f810 	bl	8004f94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f74:	4b06      	ldr	r3, [pc, #24]	; (8004f90 <prvCheckTasksWaitingTermination+0x58>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1e1      	bne.n	8004f40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004f7c:	bf00      	nop
 8004f7e:	bf00      	nop
 8004f80:	3708      	adds	r7, #8
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	200013f8 	.word	0x200013f8
 8004f8c:	20001424 	.word	0x20001424
 8004f90:	2000140c 	.word	0x2000140c

08004f94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d108      	bne.n	8004fb8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004faa:	4618      	mov	r0, r3
 8004fac:	f001 f8c0 	bl	8006130 <vPortFree>
				vPortFree( pxTCB );
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f001 f8bd 	bl	8006130 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004fb6:	e018      	b.n	8004fea <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d103      	bne.n	8004fca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f001 f8b4 	bl	8006130 <vPortFree>
	}
 8004fc8:	e00f      	b.n	8004fea <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d00a      	beq.n	8004fea <prvDeleteTCB+0x56>
	__asm volatile
 8004fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd8:	f383 8811 	msr	BASEPRI, r3
 8004fdc:	f3bf 8f6f 	isb	sy
 8004fe0:	f3bf 8f4f 	dsb	sy
 8004fe4:	60fb      	str	r3, [r7, #12]
}
 8004fe6:	bf00      	nop
 8004fe8:	e7fe      	b.n	8004fe8 <prvDeleteTCB+0x54>
	}
 8004fea:	bf00      	nop
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
	...

08004ff4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ffa:	4b0c      	ldr	r3, [pc, #48]	; (800502c <prvResetNextTaskUnblockTime+0x38>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d104      	bne.n	800500e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005004:	4b0a      	ldr	r3, [pc, #40]	; (8005030 <prvResetNextTaskUnblockTime+0x3c>)
 8005006:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800500a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800500c:	e008      	b.n	8005020 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800500e:	4b07      	ldr	r3, [pc, #28]	; (800502c <prvResetNextTaskUnblockTime+0x38>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	4a04      	ldr	r2, [pc, #16]	; (8005030 <prvResetNextTaskUnblockTime+0x3c>)
 800501e:	6013      	str	r3, [r2, #0]
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr
 800502c:	200013dc 	.word	0x200013dc
 8005030:	20001444 	.word	0x20001444

08005034 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800503a:	4b0b      	ldr	r3, [pc, #44]	; (8005068 <xTaskGetSchedulerState+0x34>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d102      	bne.n	8005048 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005042:	2301      	movs	r3, #1
 8005044:	607b      	str	r3, [r7, #4]
 8005046:	e008      	b.n	800505a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005048:	4b08      	ldr	r3, [pc, #32]	; (800506c <xTaskGetSchedulerState+0x38>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d102      	bne.n	8005056 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005050:	2302      	movs	r3, #2
 8005052:	607b      	str	r3, [r7, #4]
 8005054:	e001      	b.n	800505a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005056:	2300      	movs	r3, #0
 8005058:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800505a:	687b      	ldr	r3, [r7, #4]
	}
 800505c:	4618      	mov	r0, r3
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	20001430 	.word	0x20001430
 800506c:	2000144c 	.word	0x2000144c

08005070 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800507c:	2300      	movs	r3, #0
 800507e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d056      	beq.n	8005134 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005086:	4b2e      	ldr	r3, [pc, #184]	; (8005140 <xTaskPriorityDisinherit+0xd0>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	429a      	cmp	r2, r3
 800508e:	d00a      	beq.n	80050a6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005094:	f383 8811 	msr	BASEPRI, r3
 8005098:	f3bf 8f6f 	isb	sy
 800509c:	f3bf 8f4f 	dsb	sy
 80050a0:	60fb      	str	r3, [r7, #12]
}
 80050a2:	bf00      	nop
 80050a4:	e7fe      	b.n	80050a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10a      	bne.n	80050c4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80050ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b2:	f383 8811 	msr	BASEPRI, r3
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	60bb      	str	r3, [r7, #8]
}
 80050c0:	bf00      	nop
 80050c2:	e7fe      	b.n	80050c2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050c8:	1e5a      	subs	r2, r3, #1
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d02c      	beq.n	8005134 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d128      	bne.n	8005134 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	3304      	adds	r3, #4
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7fe fc5e 	bl	80039a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005104:	4b0f      	ldr	r3, [pc, #60]	; (8005144 <xTaskPriorityDisinherit+0xd4>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	429a      	cmp	r2, r3
 800510a:	d903      	bls.n	8005114 <xTaskPriorityDisinherit+0xa4>
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005110:	4a0c      	ldr	r2, [pc, #48]	; (8005144 <xTaskPriorityDisinherit+0xd4>)
 8005112:	6013      	str	r3, [r2, #0]
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005118:	4613      	mov	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4a09      	ldr	r2, [pc, #36]	; (8005148 <xTaskPriorityDisinherit+0xd8>)
 8005122:	441a      	add	r2, r3
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	3304      	adds	r3, #4
 8005128:	4619      	mov	r1, r3
 800512a:	4610      	mov	r0, r2
 800512c:	f7fe fbdf 	bl	80038ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005130:	2301      	movs	r3, #1
 8005132:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005134:	697b      	ldr	r3, [r7, #20]
	}
 8005136:	4618      	mov	r0, r3
 8005138:	3718      	adds	r7, #24
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	20000f50 	.word	0x20000f50
 8005144:	2000142c 	.word	0x2000142c
 8005148:	20000f54 	.word	0x20000f54

0800514c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
 8005158:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800515a:	f000 fdfb 	bl	8005d54 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800515e:	4b26      	ldr	r3, [pc, #152]	; (80051f8 <xTaskNotifyWait+0xac>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005166:	b2db      	uxtb	r3, r3
 8005168:	2b02      	cmp	r3, #2
 800516a:	d01a      	beq.n	80051a2 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800516c:	4b22      	ldr	r3, [pc, #136]	; (80051f8 <xTaskNotifyWait+0xac>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	43d2      	mvns	r2, r2
 8005176:	400a      	ands	r2, r1
 8005178:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800517a:	4b1f      	ldr	r3, [pc, #124]	; (80051f8 <xTaskNotifyWait+0xac>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00b      	beq.n	80051a2 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800518a:	2101      	movs	r1, #1
 800518c:	6838      	ldr	r0, [r7, #0]
 800518e:	f000 f913 	bl	80053b8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8005192:	4b1a      	ldr	r3, [pc, #104]	; (80051fc <xTaskNotifyWait+0xb0>)
 8005194:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005198:	601a      	str	r2, [r3, #0]
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80051a2:	f000 fe07 	bl	8005db4 <vPortExitCritical>

		taskENTER_CRITICAL();
 80051a6:	f000 fdd5 	bl	8005d54 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d004      	beq.n	80051ba <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80051b0:	4b11      	ldr	r3, [pc, #68]	; (80051f8 <xTaskNotifyWait+0xac>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80051ba:	4b0f      	ldr	r3, [pc, #60]	; (80051f8 <xTaskNotifyWait+0xac>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d002      	beq.n	80051ce <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80051c8:	2300      	movs	r3, #0
 80051ca:	617b      	str	r3, [r7, #20]
 80051cc:	e008      	b.n	80051e0 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80051ce:	4b0a      	ldr	r3, [pc, #40]	; (80051f8 <xTaskNotifyWait+0xac>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	43d2      	mvns	r2, r2
 80051d8:	400a      	ands	r2, r1
 80051da:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 80051dc:	2301      	movs	r3, #1
 80051de:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80051e0:	4b05      	ldr	r3, [pc, #20]	; (80051f8 <xTaskNotifyWait+0xac>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 80051ea:	f000 fde3 	bl	8005db4 <vPortExitCritical>

		return xReturn;
 80051ee:	697b      	ldr	r3, [r7, #20]
	}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3718      	adds	r7, #24
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	20000f50 	.word	0x20000f50
 80051fc:	e000ed04 	.word	0xe000ed04

08005200 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005200:	b580      	push	{r7, lr}
 8005202:	b08e      	sub	sp, #56	; 0x38
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	603b      	str	r3, [r7, #0]
 800520c:	4613      	mov	r3, r2
 800520e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8005210:	2301      	movs	r3, #1
 8005212:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10a      	bne.n	8005230 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800521a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521e:	f383 8811 	msr	BASEPRI, r3
 8005222:	f3bf 8f6f 	isb	sy
 8005226:	f3bf 8f4f 	dsb	sy
 800522a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800522c:	bf00      	nop
 800522e:	e7fe      	b.n	800522e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005230:	f000 fe72 	bl	8005f18 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8005238:	f3ef 8211 	mrs	r2, BASEPRI
 800523c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005240:	f383 8811 	msr	BASEPRI, r3
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	f3bf 8f4f 	dsb	sy
 800524c:	623a      	str	r2, [r7, #32]
 800524e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8005250:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005252:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800525a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005264:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005268:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800526c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526e:	2202      	movs	r2, #2
 8005270:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8005274:	79fb      	ldrb	r3, [r7, #7]
 8005276:	2b04      	cmp	r3, #4
 8005278:	d828      	bhi.n	80052cc <xTaskGenericNotifyFromISR+0xcc>
 800527a:	a201      	add	r2, pc, #4	; (adr r2, 8005280 <xTaskGenericNotifyFromISR+0x80>)
 800527c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005280:	080052ed 	.word	0x080052ed
 8005284:	08005295 	.word	0x08005295
 8005288:	080052a3 	.word	0x080052a3
 800528c:	080052af 	.word	0x080052af
 8005290:	080052b7 	.word	0x080052b7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005296:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	431a      	orrs	r2, r3
 800529c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80052a0:	e027      	b.n	80052f2 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80052a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a6:	1c5a      	adds	r2, r3, #1
 80052a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052aa:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80052ac:	e021      	b.n	80052f2 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80052ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80052b4:	e01d      	b.n	80052f2 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80052b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d003      	beq.n	80052c6 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80052be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80052c4:	e015      	b.n	80052f2 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 80052c6:	2300      	movs	r3, #0
 80052c8:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80052ca:	e012      	b.n	80052f2 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80052cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052d4:	d00c      	beq.n	80052f0 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 80052d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052da:	f383 8811 	msr	BASEPRI, r3
 80052de:	f3bf 8f6f 	isb	sy
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	61bb      	str	r3, [r7, #24]
}
 80052e8:	bf00      	nop
 80052ea:	e7fe      	b.n	80052ea <xTaskGenericNotifyFromISR+0xea>
					break;
 80052ec:	bf00      	nop
 80052ee:	e000      	b.n	80052f2 <xTaskGenericNotifyFromISR+0xf2>
					break;
 80052f0:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80052f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d146      	bne.n	8005388 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80052fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00a      	beq.n	8005318 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8005302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005306:	f383 8811 	msr	BASEPRI, r3
 800530a:	f3bf 8f6f 	isb	sy
 800530e:	f3bf 8f4f 	dsb	sy
 8005312:	617b      	str	r3, [r7, #20]
}
 8005314:	bf00      	nop
 8005316:	e7fe      	b.n	8005316 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005318:	4b21      	ldr	r3, [pc, #132]	; (80053a0 <xTaskGenericNotifyFromISR+0x1a0>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d11d      	bne.n	800535c <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005322:	3304      	adds	r3, #4
 8005324:	4618      	mov	r0, r3
 8005326:	f7fe fb3f 	bl	80039a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800532a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800532e:	4b1d      	ldr	r3, [pc, #116]	; (80053a4 <xTaskGenericNotifyFromISR+0x1a4>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	429a      	cmp	r2, r3
 8005334:	d903      	bls.n	800533e <xTaskGenericNotifyFromISR+0x13e>
 8005336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533a:	4a1a      	ldr	r2, [pc, #104]	; (80053a4 <xTaskGenericNotifyFromISR+0x1a4>)
 800533c:	6013      	str	r3, [r2, #0]
 800533e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005342:	4613      	mov	r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	4413      	add	r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4a17      	ldr	r2, [pc, #92]	; (80053a8 <xTaskGenericNotifyFromISR+0x1a8>)
 800534c:	441a      	add	r2, r3
 800534e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005350:	3304      	adds	r3, #4
 8005352:	4619      	mov	r1, r3
 8005354:	4610      	mov	r0, r2
 8005356:	f7fe faca 	bl	80038ee <vListInsertEnd>
 800535a:	e005      	b.n	8005368 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800535c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535e:	3318      	adds	r3, #24
 8005360:	4619      	mov	r1, r3
 8005362:	4812      	ldr	r0, [pc, #72]	; (80053ac <xTaskGenericNotifyFromISR+0x1ac>)
 8005364:	f7fe fac3 	bl	80038ee <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800536c:	4b10      	ldr	r3, [pc, #64]	; (80053b0 <xTaskGenericNotifyFromISR+0x1b0>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005372:	429a      	cmp	r2, r3
 8005374:	d908      	bls.n	8005388 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8005376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005378:	2b00      	cmp	r3, #0
 800537a:	d002      	beq.n	8005382 <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800537c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800537e:	2201      	movs	r2, #1
 8005380:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8005382:	4b0c      	ldr	r3, [pc, #48]	; (80053b4 <xTaskGenericNotifyFromISR+0x1b4>)
 8005384:	2201      	movs	r2, #1
 8005386:	601a      	str	r2, [r3, #0]
 8005388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538a:	613b      	str	r3, [r7, #16]
	__asm volatile
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	f383 8811 	msr	BASEPRI, r3
}
 8005392:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8005394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8005396:	4618      	mov	r0, r3
 8005398:	3738      	adds	r7, #56	; 0x38
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	2000144c 	.word	0x2000144c
 80053a4:	2000142c 	.word	0x2000142c
 80053a8:	20000f54 	.word	0x20000f54
 80053ac:	200013e4 	.word	0x200013e4
 80053b0:	20000f50 	.word	0x20000f50
 80053b4:	20001438 	.word	0x20001438

080053b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80053c2:	4b21      	ldr	r3, [pc, #132]	; (8005448 <prvAddCurrentTaskToDelayedList+0x90>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053c8:	4b20      	ldr	r3, [pc, #128]	; (800544c <prvAddCurrentTaskToDelayedList+0x94>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	3304      	adds	r3, #4
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7fe faea 	bl	80039a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053da:	d10a      	bne.n	80053f2 <prvAddCurrentTaskToDelayedList+0x3a>
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d007      	beq.n	80053f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053e2:	4b1a      	ldr	r3, [pc, #104]	; (800544c <prvAddCurrentTaskToDelayedList+0x94>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	3304      	adds	r3, #4
 80053e8:	4619      	mov	r1, r3
 80053ea:	4819      	ldr	r0, [pc, #100]	; (8005450 <prvAddCurrentTaskToDelayedList+0x98>)
 80053ec:	f7fe fa7f 	bl	80038ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80053f0:	e026      	b.n	8005440 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4413      	add	r3, r2
 80053f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80053fa:	4b14      	ldr	r3, [pc, #80]	; (800544c <prvAddCurrentTaskToDelayedList+0x94>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68ba      	ldr	r2, [r7, #8]
 8005400:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	429a      	cmp	r2, r3
 8005408:	d209      	bcs.n	800541e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800540a:	4b12      	ldr	r3, [pc, #72]	; (8005454 <prvAddCurrentTaskToDelayedList+0x9c>)
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	4b0f      	ldr	r3, [pc, #60]	; (800544c <prvAddCurrentTaskToDelayedList+0x94>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	3304      	adds	r3, #4
 8005414:	4619      	mov	r1, r3
 8005416:	4610      	mov	r0, r2
 8005418:	f7fe fa8d 	bl	8003936 <vListInsert>
}
 800541c:	e010      	b.n	8005440 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800541e:	4b0e      	ldr	r3, [pc, #56]	; (8005458 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	4b0a      	ldr	r3, [pc, #40]	; (800544c <prvAddCurrentTaskToDelayedList+0x94>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	3304      	adds	r3, #4
 8005428:	4619      	mov	r1, r3
 800542a:	4610      	mov	r0, r2
 800542c:	f7fe fa83 	bl	8003936 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005430:	4b0a      	ldr	r3, [pc, #40]	; (800545c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	429a      	cmp	r2, r3
 8005438:	d202      	bcs.n	8005440 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800543a:	4a08      	ldr	r2, [pc, #32]	; (800545c <prvAddCurrentTaskToDelayedList+0xa4>)
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	6013      	str	r3, [r2, #0]
}
 8005440:	bf00      	nop
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	20001428 	.word	0x20001428
 800544c:	20000f50 	.word	0x20000f50
 8005450:	20001410 	.word	0x20001410
 8005454:	200013e0 	.word	0x200013e0
 8005458:	200013dc 	.word	0x200013dc
 800545c:	20001444 	.word	0x20001444

08005460 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b08a      	sub	sp, #40	; 0x28
 8005464:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005466:	2300      	movs	r3, #0
 8005468:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800546a:	f000 fb07 	bl	8005a7c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800546e:	4b1c      	ldr	r3, [pc, #112]	; (80054e0 <xTimerCreateTimerTask+0x80>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d021      	beq.n	80054ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005476:	2300      	movs	r3, #0
 8005478:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800547a:	2300      	movs	r3, #0
 800547c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800547e:	1d3a      	adds	r2, r7, #4
 8005480:	f107 0108 	add.w	r1, r7, #8
 8005484:	f107 030c 	add.w	r3, r7, #12
 8005488:	4618      	mov	r0, r3
 800548a:	f7fe f9e9 	bl	8003860 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800548e:	6879      	ldr	r1, [r7, #4]
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	9202      	str	r2, [sp, #8]
 8005496:	9301      	str	r3, [sp, #4]
 8005498:	2302      	movs	r3, #2
 800549a:	9300      	str	r3, [sp, #0]
 800549c:	2300      	movs	r3, #0
 800549e:	460a      	mov	r2, r1
 80054a0:	4910      	ldr	r1, [pc, #64]	; (80054e4 <xTimerCreateTimerTask+0x84>)
 80054a2:	4811      	ldr	r0, [pc, #68]	; (80054e8 <xTimerCreateTimerTask+0x88>)
 80054a4:	f7fe ff96 	bl	80043d4 <xTaskCreateStatic>
 80054a8:	4603      	mov	r3, r0
 80054aa:	4a10      	ldr	r2, [pc, #64]	; (80054ec <xTimerCreateTimerTask+0x8c>)
 80054ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80054ae:	4b0f      	ldr	r3, [pc, #60]	; (80054ec <xTimerCreateTimerTask+0x8c>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80054b6:	2301      	movs	r3, #1
 80054b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10a      	bne.n	80054d6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80054c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c4:	f383 8811 	msr	BASEPRI, r3
 80054c8:	f3bf 8f6f 	isb	sy
 80054cc:	f3bf 8f4f 	dsb	sy
 80054d0:	613b      	str	r3, [r7, #16]
}
 80054d2:	bf00      	nop
 80054d4:	e7fe      	b.n	80054d4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80054d6:	697b      	ldr	r3, [r7, #20]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3718      	adds	r7, #24
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	20001480 	.word	0x20001480
 80054e4:	0800be8c 	.word	0x0800be8c
 80054e8:	08005625 	.word	0x08005625
 80054ec:	20001484 	.word	0x20001484

080054f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b08a      	sub	sp, #40	; 0x28
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
 80054fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80054fe:	2300      	movs	r3, #0
 8005500:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d10a      	bne.n	800551e <xTimerGenericCommand+0x2e>
	__asm volatile
 8005508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550c:	f383 8811 	msr	BASEPRI, r3
 8005510:	f3bf 8f6f 	isb	sy
 8005514:	f3bf 8f4f 	dsb	sy
 8005518:	623b      	str	r3, [r7, #32]
}
 800551a:	bf00      	nop
 800551c:	e7fe      	b.n	800551c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800551e:	4b1a      	ldr	r3, [pc, #104]	; (8005588 <xTimerGenericCommand+0x98>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d02a      	beq.n	800557c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	2b05      	cmp	r3, #5
 8005536:	dc18      	bgt.n	800556a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005538:	f7ff fd7c 	bl	8005034 <xTaskGetSchedulerState>
 800553c:	4603      	mov	r3, r0
 800553e:	2b02      	cmp	r3, #2
 8005540:	d109      	bne.n	8005556 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005542:	4b11      	ldr	r3, [pc, #68]	; (8005588 <xTimerGenericCommand+0x98>)
 8005544:	6818      	ldr	r0, [r3, #0]
 8005546:	f107 0110 	add.w	r1, r7, #16
 800554a:	2300      	movs	r3, #0
 800554c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800554e:	f7fe fb59 	bl	8003c04 <xQueueGenericSend>
 8005552:	6278      	str	r0, [r7, #36]	; 0x24
 8005554:	e012      	b.n	800557c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005556:	4b0c      	ldr	r3, [pc, #48]	; (8005588 <xTimerGenericCommand+0x98>)
 8005558:	6818      	ldr	r0, [r3, #0]
 800555a:	f107 0110 	add.w	r1, r7, #16
 800555e:	2300      	movs	r3, #0
 8005560:	2200      	movs	r2, #0
 8005562:	f7fe fb4f 	bl	8003c04 <xQueueGenericSend>
 8005566:	6278      	str	r0, [r7, #36]	; 0x24
 8005568:	e008      	b.n	800557c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800556a:	4b07      	ldr	r3, [pc, #28]	; (8005588 <xTimerGenericCommand+0x98>)
 800556c:	6818      	ldr	r0, [r3, #0]
 800556e:	f107 0110 	add.w	r1, r7, #16
 8005572:	2300      	movs	r3, #0
 8005574:	683a      	ldr	r2, [r7, #0]
 8005576:	f7fe fc43 	bl	8003e00 <xQueueGenericSendFromISR>
 800557a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800557c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800557e:	4618      	mov	r0, r3
 8005580:	3728      	adds	r7, #40	; 0x28
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	20001480 	.word	0x20001480

0800558c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b088      	sub	sp, #32
 8005590:	af02      	add	r7, sp, #8
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005596:	4b22      	ldr	r3, [pc, #136]	; (8005620 <prvProcessExpiredTimer+0x94>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	3304      	adds	r3, #4
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7fe f9ff 	bl	80039a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055b0:	f003 0304 	and.w	r3, r3, #4
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d022      	beq.n	80055fe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	699a      	ldr	r2, [r3, #24]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	18d1      	adds	r1, r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	6978      	ldr	r0, [r7, #20]
 80055c6:	f000 f8d1 	bl	800576c <prvInsertTimerInActiveList>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d01f      	beq.n	8005610 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80055d0:	2300      	movs	r3, #0
 80055d2:	9300      	str	r3, [sp, #0]
 80055d4:	2300      	movs	r3, #0
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	2100      	movs	r1, #0
 80055da:	6978      	ldr	r0, [r7, #20]
 80055dc:	f7ff ff88 	bl	80054f0 <xTimerGenericCommand>
 80055e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d113      	bne.n	8005610 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80055e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ec:	f383 8811 	msr	BASEPRI, r3
 80055f0:	f3bf 8f6f 	isb	sy
 80055f4:	f3bf 8f4f 	dsb	sy
 80055f8:	60fb      	str	r3, [r7, #12]
}
 80055fa:	bf00      	nop
 80055fc:	e7fe      	b.n	80055fc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005604:	f023 0301 	bic.w	r3, r3, #1
 8005608:	b2da      	uxtb	r2, r3
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	6a1b      	ldr	r3, [r3, #32]
 8005614:	6978      	ldr	r0, [r7, #20]
 8005616:	4798      	blx	r3
}
 8005618:	bf00      	nop
 800561a:	3718      	adds	r7, #24
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	20001478 	.word	0x20001478

08005624 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800562c:	f107 0308 	add.w	r3, r7, #8
 8005630:	4618      	mov	r0, r3
 8005632:	f000 f857 	bl	80056e4 <prvGetNextExpireTime>
 8005636:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	4619      	mov	r1, r3
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f000 f803 	bl	8005648 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005642:	f000 f8d5 	bl	80057f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005646:	e7f1      	b.n	800562c <prvTimerTask+0x8>

08005648 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005652:	f7ff f8fb 	bl	800484c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005656:	f107 0308 	add.w	r3, r7, #8
 800565a:	4618      	mov	r0, r3
 800565c:	f000 f866 	bl	800572c <prvSampleTimeNow>
 8005660:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d130      	bne.n	80056ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10a      	bne.n	8005684 <prvProcessTimerOrBlockTask+0x3c>
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	429a      	cmp	r2, r3
 8005674:	d806      	bhi.n	8005684 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005676:	f7ff f8f7 	bl	8004868 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800567a:	68f9      	ldr	r1, [r7, #12]
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f7ff ff85 	bl	800558c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005682:	e024      	b.n	80056ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d008      	beq.n	800569c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800568a:	4b13      	ldr	r3, [pc, #76]	; (80056d8 <prvProcessTimerOrBlockTask+0x90>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <prvProcessTimerOrBlockTask+0x50>
 8005694:	2301      	movs	r3, #1
 8005696:	e000      	b.n	800569a <prvProcessTimerOrBlockTask+0x52>
 8005698:	2300      	movs	r3, #0
 800569a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800569c:	4b0f      	ldr	r3, [pc, #60]	; (80056dc <prvProcessTimerOrBlockTask+0x94>)
 800569e:	6818      	ldr	r0, [r3, #0]
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	4619      	mov	r1, r3
 80056aa:	f7fe fe5f 	bl	800436c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80056ae:	f7ff f8db 	bl	8004868 <xTaskResumeAll>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10a      	bne.n	80056ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80056b8:	4b09      	ldr	r3, [pc, #36]	; (80056e0 <prvProcessTimerOrBlockTask+0x98>)
 80056ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056be:	601a      	str	r2, [r3, #0]
 80056c0:	f3bf 8f4f 	dsb	sy
 80056c4:	f3bf 8f6f 	isb	sy
}
 80056c8:	e001      	b.n	80056ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80056ca:	f7ff f8cd 	bl	8004868 <xTaskResumeAll>
}
 80056ce:	bf00      	nop
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	2000147c 	.word	0x2000147c
 80056dc:	20001480 	.word	0x20001480
 80056e0:	e000ed04 	.word	0xe000ed04

080056e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80056ec:	4b0e      	ldr	r3, [pc, #56]	; (8005728 <prvGetNextExpireTime+0x44>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <prvGetNextExpireTime+0x16>
 80056f6:	2201      	movs	r2, #1
 80056f8:	e000      	b.n	80056fc <prvGetNextExpireTime+0x18>
 80056fa:	2200      	movs	r2, #0
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d105      	bne.n	8005714 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005708:	4b07      	ldr	r3, [pc, #28]	; (8005728 <prvGetNextExpireTime+0x44>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	60fb      	str	r3, [r7, #12]
 8005712:	e001      	b.n	8005718 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005714:	2300      	movs	r3, #0
 8005716:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005718:	68fb      	ldr	r3, [r7, #12]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3714      	adds	r7, #20
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	20001478 	.word	0x20001478

0800572c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005734:	f7ff f936 	bl	80049a4 <xTaskGetTickCount>
 8005738:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800573a:	4b0b      	ldr	r3, [pc, #44]	; (8005768 <prvSampleTimeNow+0x3c>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	429a      	cmp	r2, r3
 8005742:	d205      	bcs.n	8005750 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005744:	f000 f936 	bl	80059b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	601a      	str	r2, [r3, #0]
 800574e:	e002      	b.n	8005756 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005756:	4a04      	ldr	r2, [pc, #16]	; (8005768 <prvSampleTimeNow+0x3c>)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800575c:	68fb      	ldr	r3, [r7, #12]
}
 800575e:	4618      	mov	r0, r3
 8005760:	3710      	adds	r7, #16
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	20001488 	.word	0x20001488

0800576c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
 8005778:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800577a:	2300      	movs	r3, #0
 800577c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	429a      	cmp	r2, r3
 8005790:	d812      	bhi.n	80057b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	1ad2      	subs	r2, r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	429a      	cmp	r2, r3
 800579e:	d302      	bcc.n	80057a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80057a0:	2301      	movs	r3, #1
 80057a2:	617b      	str	r3, [r7, #20]
 80057a4:	e01b      	b.n	80057de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80057a6:	4b10      	ldr	r3, [pc, #64]	; (80057e8 <prvInsertTimerInActiveList+0x7c>)
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	3304      	adds	r3, #4
 80057ae:	4619      	mov	r1, r3
 80057b0:	4610      	mov	r0, r2
 80057b2:	f7fe f8c0 	bl	8003936 <vListInsert>
 80057b6:	e012      	b.n	80057de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d206      	bcs.n	80057ce <prvInsertTimerInActiveList+0x62>
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d302      	bcc.n	80057ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80057c8:	2301      	movs	r3, #1
 80057ca:	617b      	str	r3, [r7, #20]
 80057cc:	e007      	b.n	80057de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80057ce:	4b07      	ldr	r3, [pc, #28]	; (80057ec <prvInsertTimerInActiveList+0x80>)
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	3304      	adds	r3, #4
 80057d6:	4619      	mov	r1, r3
 80057d8:	4610      	mov	r0, r2
 80057da:	f7fe f8ac 	bl	8003936 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80057de:	697b      	ldr	r3, [r7, #20]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3718      	adds	r7, #24
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	2000147c 	.word	0x2000147c
 80057ec:	20001478 	.word	0x20001478

080057f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b08e      	sub	sp, #56	; 0x38
 80057f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80057f6:	e0ca      	b.n	800598e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	da18      	bge.n	8005830 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80057fe:	1d3b      	adds	r3, r7, #4
 8005800:	3304      	adds	r3, #4
 8005802:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10a      	bne.n	8005820 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800580a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580e:	f383 8811 	msr	BASEPRI, r3
 8005812:	f3bf 8f6f 	isb	sy
 8005816:	f3bf 8f4f 	dsb	sy
 800581a:	61fb      	str	r3, [r7, #28]
}
 800581c:	bf00      	nop
 800581e:	e7fe      	b.n	800581e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005826:	6850      	ldr	r0, [r2, #4]
 8005828:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800582a:	6892      	ldr	r2, [r2, #8]
 800582c:	4611      	mov	r1, r2
 800582e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	f2c0 80ab 	blt.w	800598e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800583c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583e:	695b      	ldr	r3, [r3, #20]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d004      	beq.n	800584e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005846:	3304      	adds	r3, #4
 8005848:	4618      	mov	r0, r3
 800584a:	f7fe f8ad 	bl	80039a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800584e:	463b      	mov	r3, r7
 8005850:	4618      	mov	r0, r3
 8005852:	f7ff ff6b 	bl	800572c <prvSampleTimeNow>
 8005856:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b09      	cmp	r3, #9
 800585c:	f200 8096 	bhi.w	800598c <prvProcessReceivedCommands+0x19c>
 8005860:	a201      	add	r2, pc, #4	; (adr r2, 8005868 <prvProcessReceivedCommands+0x78>)
 8005862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005866:	bf00      	nop
 8005868:	08005891 	.word	0x08005891
 800586c:	08005891 	.word	0x08005891
 8005870:	08005891 	.word	0x08005891
 8005874:	08005905 	.word	0x08005905
 8005878:	08005919 	.word	0x08005919
 800587c:	08005963 	.word	0x08005963
 8005880:	08005891 	.word	0x08005891
 8005884:	08005891 	.word	0x08005891
 8005888:	08005905 	.word	0x08005905
 800588c:	08005919 	.word	0x08005919
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005892:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005896:	f043 0301 	orr.w	r3, r3, #1
 800589a:	b2da      	uxtb	r2, r3
 800589c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	18d1      	adds	r1, r2, r3
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058b0:	f7ff ff5c 	bl	800576c <prvInsertTimerInActiveList>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d069      	beq.n	800598e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80058c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058c8:	f003 0304 	and.w	r3, r3, #4
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d05e      	beq.n	800598e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80058d0:	68ba      	ldr	r2, [r7, #8]
 80058d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	441a      	add	r2, r3
 80058d8:	2300      	movs	r3, #0
 80058da:	9300      	str	r3, [sp, #0]
 80058dc:	2300      	movs	r3, #0
 80058de:	2100      	movs	r1, #0
 80058e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058e2:	f7ff fe05 	bl	80054f0 <xTimerGenericCommand>
 80058e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80058e8:	6a3b      	ldr	r3, [r7, #32]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d14f      	bne.n	800598e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80058ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f2:	f383 8811 	msr	BASEPRI, r3
 80058f6:	f3bf 8f6f 	isb	sy
 80058fa:	f3bf 8f4f 	dsb	sy
 80058fe:	61bb      	str	r3, [r7, #24]
}
 8005900:	bf00      	nop
 8005902:	e7fe      	b.n	8005902 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005906:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800590a:	f023 0301 	bic.w	r3, r3, #1
 800590e:	b2da      	uxtb	r2, r3
 8005910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005912:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005916:	e03a      	b.n	800598e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800591e:	f043 0301 	orr.w	r3, r3, #1
 8005922:	b2da      	uxtb	r2, r3
 8005924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005926:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800592a:	68ba      	ldr	r2, [r7, #8]
 800592c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10a      	bne.n	800594e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593c:	f383 8811 	msr	BASEPRI, r3
 8005940:	f3bf 8f6f 	isb	sy
 8005944:	f3bf 8f4f 	dsb	sy
 8005948:	617b      	str	r3, [r7, #20]
}
 800594a:	bf00      	nop
 800594c:	e7fe      	b.n	800594c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800594e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005950:	699a      	ldr	r2, [r3, #24]
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	18d1      	adds	r1, r2, r3
 8005956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800595a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800595c:	f7ff ff06 	bl	800576c <prvInsertTimerInActiveList>
					break;
 8005960:	e015      	b.n	800598e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005964:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005968:	f003 0302 	and.w	r3, r3, #2
 800596c:	2b00      	cmp	r3, #0
 800596e:	d103      	bne.n	8005978 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005970:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005972:	f000 fbdd 	bl	8006130 <vPortFree>
 8005976:	e00a      	b.n	800598e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800597e:	f023 0301 	bic.w	r3, r3, #1
 8005982:	b2da      	uxtb	r2, r3
 8005984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005986:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800598a:	e000      	b.n	800598e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800598c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800598e:	4b08      	ldr	r3, [pc, #32]	; (80059b0 <prvProcessReceivedCommands+0x1c0>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	1d39      	adds	r1, r7, #4
 8005994:	2200      	movs	r2, #0
 8005996:	4618      	mov	r0, r3
 8005998:	f7fe face 	bl	8003f38 <xQueueReceive>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	f47f af2a 	bne.w	80057f8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80059a4:	bf00      	nop
 80059a6:	bf00      	nop
 80059a8:	3730      	adds	r7, #48	; 0x30
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	20001480 	.word	0x20001480

080059b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b088      	sub	sp, #32
 80059b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80059ba:	e048      	b.n	8005a4e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80059bc:	4b2d      	ldr	r3, [pc, #180]	; (8005a74 <prvSwitchTimerLists+0xc0>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059c6:	4b2b      	ldr	r3, [pc, #172]	; (8005a74 <prvSwitchTimerLists+0xc0>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	3304      	adds	r3, #4
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7fd ffe7 	bl	80039a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059e8:	f003 0304 	and.w	r3, r3, #4
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d02e      	beq.n	8005a4e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	4413      	add	r3, r2
 80059f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d90e      	bls.n	8005a20 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	68ba      	ldr	r2, [r7, #8]
 8005a06:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a0e:	4b19      	ldr	r3, [pc, #100]	; (8005a74 <prvSwitchTimerLists+0xc0>)
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	3304      	adds	r3, #4
 8005a16:	4619      	mov	r1, r3
 8005a18:	4610      	mov	r0, r2
 8005a1a:	f7fd ff8c 	bl	8003936 <vListInsert>
 8005a1e:	e016      	b.n	8005a4e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a20:	2300      	movs	r3, #0
 8005a22:	9300      	str	r3, [sp, #0]
 8005a24:	2300      	movs	r3, #0
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	2100      	movs	r1, #0
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f7ff fd60 	bl	80054f0 <xTimerGenericCommand>
 8005a30:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d10a      	bne.n	8005a4e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a3c:	f383 8811 	msr	BASEPRI, r3
 8005a40:	f3bf 8f6f 	isb	sy
 8005a44:	f3bf 8f4f 	dsb	sy
 8005a48:	603b      	str	r3, [r7, #0]
}
 8005a4a:	bf00      	nop
 8005a4c:	e7fe      	b.n	8005a4c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a4e:	4b09      	ldr	r3, [pc, #36]	; (8005a74 <prvSwitchTimerLists+0xc0>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1b1      	bne.n	80059bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005a58:	4b06      	ldr	r3, [pc, #24]	; (8005a74 <prvSwitchTimerLists+0xc0>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005a5e:	4b06      	ldr	r3, [pc, #24]	; (8005a78 <prvSwitchTimerLists+0xc4>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a04      	ldr	r2, [pc, #16]	; (8005a74 <prvSwitchTimerLists+0xc0>)
 8005a64:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005a66:	4a04      	ldr	r2, [pc, #16]	; (8005a78 <prvSwitchTimerLists+0xc4>)
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	6013      	str	r3, [r2, #0]
}
 8005a6c:	bf00      	nop
 8005a6e:	3718      	adds	r7, #24
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	20001478 	.word	0x20001478
 8005a78:	2000147c 	.word	0x2000147c

08005a7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005a82:	f000 f967 	bl	8005d54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005a86:	4b15      	ldr	r3, [pc, #84]	; (8005adc <prvCheckForValidListAndQueue+0x60>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d120      	bne.n	8005ad0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005a8e:	4814      	ldr	r0, [pc, #80]	; (8005ae0 <prvCheckForValidListAndQueue+0x64>)
 8005a90:	f7fd ff00 	bl	8003894 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005a94:	4813      	ldr	r0, [pc, #76]	; (8005ae4 <prvCheckForValidListAndQueue+0x68>)
 8005a96:	f7fd fefd 	bl	8003894 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005a9a:	4b13      	ldr	r3, [pc, #76]	; (8005ae8 <prvCheckForValidListAndQueue+0x6c>)
 8005a9c:	4a10      	ldr	r2, [pc, #64]	; (8005ae0 <prvCheckForValidListAndQueue+0x64>)
 8005a9e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005aa0:	4b12      	ldr	r3, [pc, #72]	; (8005aec <prvCheckForValidListAndQueue+0x70>)
 8005aa2:	4a10      	ldr	r2, [pc, #64]	; (8005ae4 <prvCheckForValidListAndQueue+0x68>)
 8005aa4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	4b11      	ldr	r3, [pc, #68]	; (8005af0 <prvCheckForValidListAndQueue+0x74>)
 8005aac:	4a11      	ldr	r2, [pc, #68]	; (8005af4 <prvCheckForValidListAndQueue+0x78>)
 8005aae:	2110      	movs	r1, #16
 8005ab0:	200a      	movs	r0, #10
 8005ab2:	f7fe f80b 	bl	8003acc <xQueueGenericCreateStatic>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	4a08      	ldr	r2, [pc, #32]	; (8005adc <prvCheckForValidListAndQueue+0x60>)
 8005aba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005abc:	4b07      	ldr	r3, [pc, #28]	; (8005adc <prvCheckForValidListAndQueue+0x60>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d005      	beq.n	8005ad0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005ac4:	4b05      	ldr	r3, [pc, #20]	; (8005adc <prvCheckForValidListAndQueue+0x60>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	490b      	ldr	r1, [pc, #44]	; (8005af8 <prvCheckForValidListAndQueue+0x7c>)
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7fe fc24 	bl	8004318 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ad0:	f000 f970 	bl	8005db4 <vPortExitCritical>
}
 8005ad4:	bf00      	nop
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	20001480 	.word	0x20001480
 8005ae0:	20001450 	.word	0x20001450
 8005ae4:	20001464 	.word	0x20001464
 8005ae8:	20001478 	.word	0x20001478
 8005aec:	2000147c 	.word	0x2000147c
 8005af0:	2000152c 	.word	0x2000152c
 8005af4:	2000148c 	.word	0x2000148c
 8005af8:	0800be94 	.word	0x0800be94

08005afc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	3b04      	subs	r3, #4
 8005b0c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005b14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	3b04      	subs	r3, #4
 8005b1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	f023 0201 	bic.w	r2, r3, #1
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	3b04      	subs	r3, #4
 8005b2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b2c:	4a0c      	ldr	r2, [pc, #48]	; (8005b60 <pxPortInitialiseStack+0x64>)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	3b14      	subs	r3, #20
 8005b36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	3b04      	subs	r3, #4
 8005b42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f06f 0202 	mvn.w	r2, #2
 8005b4a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	3b20      	subs	r3, #32
 8005b50:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005b52:	68fb      	ldr	r3, [r7, #12]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3714      	adds	r7, #20
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr
 8005b60:	08005b65 	.word	0x08005b65

08005b64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005b6e:	4b12      	ldr	r3, [pc, #72]	; (8005bb8 <prvTaskExitError+0x54>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b76:	d00a      	beq.n	8005b8e <prvTaskExitError+0x2a>
	__asm volatile
 8005b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7c:	f383 8811 	msr	BASEPRI, r3
 8005b80:	f3bf 8f6f 	isb	sy
 8005b84:	f3bf 8f4f 	dsb	sy
 8005b88:	60fb      	str	r3, [r7, #12]
}
 8005b8a:	bf00      	nop
 8005b8c:	e7fe      	b.n	8005b8c <prvTaskExitError+0x28>
	__asm volatile
 8005b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b92:	f383 8811 	msr	BASEPRI, r3
 8005b96:	f3bf 8f6f 	isb	sy
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	60bb      	str	r3, [r7, #8]
}
 8005ba0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ba2:	bf00      	nop
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d0fc      	beq.n	8005ba4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005baa:	bf00      	nop
 8005bac:	bf00      	nop
 8005bae:	3714      	adds	r7, #20
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr
 8005bb8:	20000064 	.word	0x20000064
 8005bbc:	00000000 	.word	0x00000000

08005bc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005bc0:	4b07      	ldr	r3, [pc, #28]	; (8005be0 <pxCurrentTCBConst2>)
 8005bc2:	6819      	ldr	r1, [r3, #0]
 8005bc4:	6808      	ldr	r0, [r1, #0]
 8005bc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bca:	f380 8809 	msr	PSP, r0
 8005bce:	f3bf 8f6f 	isb	sy
 8005bd2:	f04f 0000 	mov.w	r0, #0
 8005bd6:	f380 8811 	msr	BASEPRI, r0
 8005bda:	4770      	bx	lr
 8005bdc:	f3af 8000 	nop.w

08005be0 <pxCurrentTCBConst2>:
 8005be0:	20000f50 	.word	0x20000f50
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005be4:	bf00      	nop
 8005be6:	bf00      	nop

08005be8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005be8:	4808      	ldr	r0, [pc, #32]	; (8005c0c <prvPortStartFirstTask+0x24>)
 8005bea:	6800      	ldr	r0, [r0, #0]
 8005bec:	6800      	ldr	r0, [r0, #0]
 8005bee:	f380 8808 	msr	MSP, r0
 8005bf2:	f04f 0000 	mov.w	r0, #0
 8005bf6:	f380 8814 	msr	CONTROL, r0
 8005bfa:	b662      	cpsie	i
 8005bfc:	b661      	cpsie	f
 8005bfe:	f3bf 8f4f 	dsb	sy
 8005c02:	f3bf 8f6f 	isb	sy
 8005c06:	df00      	svc	0
 8005c08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005c0a:	bf00      	nop
 8005c0c:	e000ed08 	.word	0xe000ed08

08005c10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005c16:	4b46      	ldr	r3, [pc, #280]	; (8005d30 <xPortStartScheduler+0x120>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a46      	ldr	r2, [pc, #280]	; (8005d34 <xPortStartScheduler+0x124>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d10a      	bne.n	8005c36 <xPortStartScheduler+0x26>
	__asm volatile
 8005c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c24:	f383 8811 	msr	BASEPRI, r3
 8005c28:	f3bf 8f6f 	isb	sy
 8005c2c:	f3bf 8f4f 	dsb	sy
 8005c30:	613b      	str	r3, [r7, #16]
}
 8005c32:	bf00      	nop
 8005c34:	e7fe      	b.n	8005c34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005c36:	4b3e      	ldr	r3, [pc, #248]	; (8005d30 <xPortStartScheduler+0x120>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a3f      	ldr	r2, [pc, #252]	; (8005d38 <xPortStartScheduler+0x128>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d10a      	bne.n	8005c56 <xPortStartScheduler+0x46>
	__asm volatile
 8005c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c44:	f383 8811 	msr	BASEPRI, r3
 8005c48:	f3bf 8f6f 	isb	sy
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	60fb      	str	r3, [r7, #12]
}
 8005c52:	bf00      	nop
 8005c54:	e7fe      	b.n	8005c54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005c56:	4b39      	ldr	r3, [pc, #228]	; (8005d3c <xPortStartScheduler+0x12c>)
 8005c58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	22ff      	movs	r2, #255	; 0xff
 8005c66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005c70:	78fb      	ldrb	r3, [r7, #3]
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005c78:	b2da      	uxtb	r2, r3
 8005c7a:	4b31      	ldr	r3, [pc, #196]	; (8005d40 <xPortStartScheduler+0x130>)
 8005c7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005c7e:	4b31      	ldr	r3, [pc, #196]	; (8005d44 <xPortStartScheduler+0x134>)
 8005c80:	2207      	movs	r2, #7
 8005c82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c84:	e009      	b.n	8005c9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005c86:	4b2f      	ldr	r3, [pc, #188]	; (8005d44 <xPortStartScheduler+0x134>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	4a2d      	ldr	r2, [pc, #180]	; (8005d44 <xPortStartScheduler+0x134>)
 8005c8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005c90:	78fb      	ldrb	r3, [r7, #3]
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	005b      	lsls	r3, r3, #1
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c9a:	78fb      	ldrb	r3, [r7, #3]
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca2:	2b80      	cmp	r3, #128	; 0x80
 8005ca4:	d0ef      	beq.n	8005c86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005ca6:	4b27      	ldr	r3, [pc, #156]	; (8005d44 <xPortStartScheduler+0x134>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f1c3 0307 	rsb	r3, r3, #7
 8005cae:	2b04      	cmp	r3, #4
 8005cb0:	d00a      	beq.n	8005cc8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb6:	f383 8811 	msr	BASEPRI, r3
 8005cba:	f3bf 8f6f 	isb	sy
 8005cbe:	f3bf 8f4f 	dsb	sy
 8005cc2:	60bb      	str	r3, [r7, #8]
}
 8005cc4:	bf00      	nop
 8005cc6:	e7fe      	b.n	8005cc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005cc8:	4b1e      	ldr	r3, [pc, #120]	; (8005d44 <xPortStartScheduler+0x134>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	021b      	lsls	r3, r3, #8
 8005cce:	4a1d      	ldr	r2, [pc, #116]	; (8005d44 <xPortStartScheduler+0x134>)
 8005cd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005cd2:	4b1c      	ldr	r3, [pc, #112]	; (8005d44 <xPortStartScheduler+0x134>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005cda:	4a1a      	ldr	r2, [pc, #104]	; (8005d44 <xPortStartScheduler+0x134>)
 8005cdc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	b2da      	uxtb	r2, r3
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005ce6:	4b18      	ldr	r3, [pc, #96]	; (8005d48 <xPortStartScheduler+0x138>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a17      	ldr	r2, [pc, #92]	; (8005d48 <xPortStartScheduler+0x138>)
 8005cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005cf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005cf2:	4b15      	ldr	r3, [pc, #84]	; (8005d48 <xPortStartScheduler+0x138>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a14      	ldr	r2, [pc, #80]	; (8005d48 <xPortStartScheduler+0x138>)
 8005cf8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005cfc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005cfe:	f000 f8dd 	bl	8005ebc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005d02:	4b12      	ldr	r3, [pc, #72]	; (8005d4c <xPortStartScheduler+0x13c>)
 8005d04:	2200      	movs	r2, #0
 8005d06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005d08:	f000 f8fc 	bl	8005f04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005d0c:	4b10      	ldr	r3, [pc, #64]	; (8005d50 <xPortStartScheduler+0x140>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a0f      	ldr	r2, [pc, #60]	; (8005d50 <xPortStartScheduler+0x140>)
 8005d12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005d16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005d18:	f7ff ff66 	bl	8005be8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005d1c:	f7fe ff1e 	bl	8004b5c <vTaskSwitchContext>
	prvTaskExitError();
 8005d20:	f7ff ff20 	bl	8005b64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3718      	adds	r7, #24
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	e000ed00 	.word	0xe000ed00
 8005d34:	410fc271 	.word	0x410fc271
 8005d38:	410fc270 	.word	0x410fc270
 8005d3c:	e000e400 	.word	0xe000e400
 8005d40:	2000157c 	.word	0x2000157c
 8005d44:	20001580 	.word	0x20001580
 8005d48:	e000ed20 	.word	0xe000ed20
 8005d4c:	20000064 	.word	0x20000064
 8005d50:	e000ef34 	.word	0xe000ef34

08005d54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
	__asm volatile
 8005d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5e:	f383 8811 	msr	BASEPRI, r3
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	607b      	str	r3, [r7, #4]
}
 8005d6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005d6e:	4b0f      	ldr	r3, [pc, #60]	; (8005dac <vPortEnterCritical+0x58>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	3301      	adds	r3, #1
 8005d74:	4a0d      	ldr	r2, [pc, #52]	; (8005dac <vPortEnterCritical+0x58>)
 8005d76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005d78:	4b0c      	ldr	r3, [pc, #48]	; (8005dac <vPortEnterCritical+0x58>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d10f      	bne.n	8005da0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005d80:	4b0b      	ldr	r3, [pc, #44]	; (8005db0 <vPortEnterCritical+0x5c>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00a      	beq.n	8005da0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8e:	f383 8811 	msr	BASEPRI, r3
 8005d92:	f3bf 8f6f 	isb	sy
 8005d96:	f3bf 8f4f 	dsb	sy
 8005d9a:	603b      	str	r3, [r7, #0]
}
 8005d9c:	bf00      	nop
 8005d9e:	e7fe      	b.n	8005d9e <vPortEnterCritical+0x4a>
	}
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr
 8005dac:	20000064 	.word	0x20000064
 8005db0:	e000ed04 	.word	0xe000ed04

08005db4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005dba:	4b12      	ldr	r3, [pc, #72]	; (8005e04 <vPortExitCritical+0x50>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10a      	bne.n	8005dd8 <vPortExitCritical+0x24>
	__asm volatile
 8005dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc6:	f383 8811 	msr	BASEPRI, r3
 8005dca:	f3bf 8f6f 	isb	sy
 8005dce:	f3bf 8f4f 	dsb	sy
 8005dd2:	607b      	str	r3, [r7, #4]
}
 8005dd4:	bf00      	nop
 8005dd6:	e7fe      	b.n	8005dd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005dd8:	4b0a      	ldr	r3, [pc, #40]	; (8005e04 <vPortExitCritical+0x50>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	4a09      	ldr	r2, [pc, #36]	; (8005e04 <vPortExitCritical+0x50>)
 8005de0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005de2:	4b08      	ldr	r3, [pc, #32]	; (8005e04 <vPortExitCritical+0x50>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d105      	bne.n	8005df6 <vPortExitCritical+0x42>
 8005dea:	2300      	movs	r3, #0
 8005dec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	f383 8811 	msr	BASEPRI, r3
}
 8005df4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005df6:	bf00      	nop
 8005df8:	370c      	adds	r7, #12
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	20000064 	.word	0x20000064
	...

08005e10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005e10:	f3ef 8009 	mrs	r0, PSP
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	4b15      	ldr	r3, [pc, #84]	; (8005e70 <pxCurrentTCBConst>)
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	f01e 0f10 	tst.w	lr, #16
 8005e20:	bf08      	it	eq
 8005e22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005e26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e2a:	6010      	str	r0, [r2, #0]
 8005e2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005e30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005e34:	f380 8811 	msr	BASEPRI, r0
 8005e38:	f3bf 8f4f 	dsb	sy
 8005e3c:	f3bf 8f6f 	isb	sy
 8005e40:	f7fe fe8c 	bl	8004b5c <vTaskSwitchContext>
 8005e44:	f04f 0000 	mov.w	r0, #0
 8005e48:	f380 8811 	msr	BASEPRI, r0
 8005e4c:	bc09      	pop	{r0, r3}
 8005e4e:	6819      	ldr	r1, [r3, #0]
 8005e50:	6808      	ldr	r0, [r1, #0]
 8005e52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e56:	f01e 0f10 	tst.w	lr, #16
 8005e5a:	bf08      	it	eq
 8005e5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005e60:	f380 8809 	msr	PSP, r0
 8005e64:	f3bf 8f6f 	isb	sy
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	f3af 8000 	nop.w

08005e70 <pxCurrentTCBConst>:
 8005e70:	20000f50 	.word	0x20000f50
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005e74:	bf00      	nop
 8005e76:	bf00      	nop

08005e78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e82:	f383 8811 	msr	BASEPRI, r3
 8005e86:	f3bf 8f6f 	isb	sy
 8005e8a:	f3bf 8f4f 	dsb	sy
 8005e8e:	607b      	str	r3, [r7, #4]
}
 8005e90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005e92:	f7fe fda9 	bl	80049e8 <xTaskIncrementTick>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d003      	beq.n	8005ea4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005e9c:	4b06      	ldr	r3, [pc, #24]	; (8005eb8 <xPortSysTickHandler+0x40>)
 8005e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ea2:	601a      	str	r2, [r3, #0]
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	f383 8811 	msr	BASEPRI, r3
}
 8005eae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005eb0:	bf00      	nop
 8005eb2:	3708      	adds	r7, #8
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	e000ed04 	.word	0xe000ed04

08005ebc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ec0:	4b0b      	ldr	r3, [pc, #44]	; (8005ef0 <vPortSetupTimerInterrupt+0x34>)
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ec6:	4b0b      	ldr	r3, [pc, #44]	; (8005ef4 <vPortSetupTimerInterrupt+0x38>)
 8005ec8:	2200      	movs	r2, #0
 8005eca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005ecc:	4b0a      	ldr	r3, [pc, #40]	; (8005ef8 <vPortSetupTimerInterrupt+0x3c>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a0a      	ldr	r2, [pc, #40]	; (8005efc <vPortSetupTimerInterrupt+0x40>)
 8005ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed6:	099b      	lsrs	r3, r3, #6
 8005ed8:	4a09      	ldr	r2, [pc, #36]	; (8005f00 <vPortSetupTimerInterrupt+0x44>)
 8005eda:	3b01      	subs	r3, #1
 8005edc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005ede:	4b04      	ldr	r3, [pc, #16]	; (8005ef0 <vPortSetupTimerInterrupt+0x34>)
 8005ee0:	2207      	movs	r2, #7
 8005ee2:	601a      	str	r2, [r3, #0]
}
 8005ee4:	bf00      	nop
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	e000e010 	.word	0xe000e010
 8005ef4:	e000e018 	.word	0xe000e018
 8005ef8:	20000070 	.word	0x20000070
 8005efc:	10624dd3 	.word	0x10624dd3
 8005f00:	e000e014 	.word	0xe000e014

08005f04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005f04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005f14 <vPortEnableVFP+0x10>
 8005f08:	6801      	ldr	r1, [r0, #0]
 8005f0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005f0e:	6001      	str	r1, [r0, #0]
 8005f10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005f12:	bf00      	nop
 8005f14:	e000ed88 	.word	0xe000ed88

08005f18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005f1e:	f3ef 8305 	mrs	r3, IPSR
 8005f22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2b0f      	cmp	r3, #15
 8005f28:	d914      	bls.n	8005f54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005f2a:	4a17      	ldr	r2, [pc, #92]	; (8005f88 <vPortValidateInterruptPriority+0x70>)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	4413      	add	r3, r2
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005f34:	4b15      	ldr	r3, [pc, #84]	; (8005f8c <vPortValidateInterruptPriority+0x74>)
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	7afa      	ldrb	r2, [r7, #11]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d20a      	bcs.n	8005f54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f42:	f383 8811 	msr	BASEPRI, r3
 8005f46:	f3bf 8f6f 	isb	sy
 8005f4a:	f3bf 8f4f 	dsb	sy
 8005f4e:	607b      	str	r3, [r7, #4]
}
 8005f50:	bf00      	nop
 8005f52:	e7fe      	b.n	8005f52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005f54:	4b0e      	ldr	r3, [pc, #56]	; (8005f90 <vPortValidateInterruptPriority+0x78>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005f5c:	4b0d      	ldr	r3, [pc, #52]	; (8005f94 <vPortValidateInterruptPriority+0x7c>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d90a      	bls.n	8005f7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f68:	f383 8811 	msr	BASEPRI, r3
 8005f6c:	f3bf 8f6f 	isb	sy
 8005f70:	f3bf 8f4f 	dsb	sy
 8005f74:	603b      	str	r3, [r7, #0]
}
 8005f76:	bf00      	nop
 8005f78:	e7fe      	b.n	8005f78 <vPortValidateInterruptPriority+0x60>
	}
 8005f7a:	bf00      	nop
 8005f7c:	3714      	adds	r7, #20
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	e000e3f0 	.word	0xe000e3f0
 8005f8c:	2000157c 	.word	0x2000157c
 8005f90:	e000ed0c 	.word	0xe000ed0c
 8005f94:	20001580 	.word	0x20001580

08005f98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b08a      	sub	sp, #40	; 0x28
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005fa4:	f7fe fc52 	bl	800484c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005fa8:	4b5b      	ldr	r3, [pc, #364]	; (8006118 <pvPortMalloc+0x180>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d101      	bne.n	8005fb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005fb0:	f000 f920 	bl	80061f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005fb4:	4b59      	ldr	r3, [pc, #356]	; (800611c <pvPortMalloc+0x184>)
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4013      	ands	r3, r2
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f040 8093 	bne.w	80060e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d01d      	beq.n	8006004 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005fc8:	2208      	movs	r2, #8
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4413      	add	r3, r2
 8005fce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f003 0307 	and.w	r3, r3, #7
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d014      	beq.n	8006004 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f023 0307 	bic.w	r3, r3, #7
 8005fe0:	3308      	adds	r3, #8
 8005fe2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f003 0307 	and.w	r3, r3, #7
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00a      	beq.n	8006004 <pvPortMalloc+0x6c>
	__asm volatile
 8005fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff2:	f383 8811 	msr	BASEPRI, r3
 8005ff6:	f3bf 8f6f 	isb	sy
 8005ffa:	f3bf 8f4f 	dsb	sy
 8005ffe:	617b      	str	r3, [r7, #20]
}
 8006000:	bf00      	nop
 8006002:	e7fe      	b.n	8006002 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d06e      	beq.n	80060e8 <pvPortMalloc+0x150>
 800600a:	4b45      	ldr	r3, [pc, #276]	; (8006120 <pvPortMalloc+0x188>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	429a      	cmp	r2, r3
 8006012:	d869      	bhi.n	80060e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006014:	4b43      	ldr	r3, [pc, #268]	; (8006124 <pvPortMalloc+0x18c>)
 8006016:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006018:	4b42      	ldr	r3, [pc, #264]	; (8006124 <pvPortMalloc+0x18c>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800601e:	e004      	b.n	800602a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006022:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800602a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	429a      	cmp	r2, r3
 8006032:	d903      	bls.n	800603c <pvPortMalloc+0xa4>
 8006034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1f1      	bne.n	8006020 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800603c:	4b36      	ldr	r3, [pc, #216]	; (8006118 <pvPortMalloc+0x180>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006042:	429a      	cmp	r2, r3
 8006044:	d050      	beq.n	80060e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006046:	6a3b      	ldr	r3, [r7, #32]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2208      	movs	r2, #8
 800604c:	4413      	add	r3, r2
 800604e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	6a3b      	ldr	r3, [r7, #32]
 8006056:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	1ad2      	subs	r2, r2, r3
 8006060:	2308      	movs	r3, #8
 8006062:	005b      	lsls	r3, r3, #1
 8006064:	429a      	cmp	r2, r3
 8006066:	d91f      	bls.n	80060a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4413      	add	r3, r2
 800606e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	f003 0307 	and.w	r3, r3, #7
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00a      	beq.n	8006090 <pvPortMalloc+0xf8>
	__asm volatile
 800607a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607e:	f383 8811 	msr	BASEPRI, r3
 8006082:	f3bf 8f6f 	isb	sy
 8006086:	f3bf 8f4f 	dsb	sy
 800608a:	613b      	str	r3, [r7, #16]
}
 800608c:	bf00      	nop
 800608e:	e7fe      	b.n	800608e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006092:	685a      	ldr	r2, [r3, #4]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	1ad2      	subs	r2, r2, r3
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800609c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80060a2:	69b8      	ldr	r0, [r7, #24]
 80060a4:	f000 f908 	bl	80062b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80060a8:	4b1d      	ldr	r3, [pc, #116]	; (8006120 <pvPortMalloc+0x188>)
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	4a1b      	ldr	r2, [pc, #108]	; (8006120 <pvPortMalloc+0x188>)
 80060b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80060b6:	4b1a      	ldr	r3, [pc, #104]	; (8006120 <pvPortMalloc+0x188>)
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	4b1b      	ldr	r3, [pc, #108]	; (8006128 <pvPortMalloc+0x190>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d203      	bcs.n	80060ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80060c2:	4b17      	ldr	r3, [pc, #92]	; (8006120 <pvPortMalloc+0x188>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a18      	ldr	r2, [pc, #96]	; (8006128 <pvPortMalloc+0x190>)
 80060c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80060ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060cc:	685a      	ldr	r2, [r3, #4]
 80060ce:	4b13      	ldr	r3, [pc, #76]	; (800611c <pvPortMalloc+0x184>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	431a      	orrs	r2, r3
 80060d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80060d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060da:	2200      	movs	r2, #0
 80060dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80060de:	4b13      	ldr	r3, [pc, #76]	; (800612c <pvPortMalloc+0x194>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	3301      	adds	r3, #1
 80060e4:	4a11      	ldr	r2, [pc, #68]	; (800612c <pvPortMalloc+0x194>)
 80060e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80060e8:	f7fe fbbe 	bl	8004868 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	f003 0307 	and.w	r3, r3, #7
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00a      	beq.n	800610c <pvPortMalloc+0x174>
	__asm volatile
 80060f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fa:	f383 8811 	msr	BASEPRI, r3
 80060fe:	f3bf 8f6f 	isb	sy
 8006102:	f3bf 8f4f 	dsb	sy
 8006106:	60fb      	str	r3, [r7, #12]
}
 8006108:	bf00      	nop
 800610a:	e7fe      	b.n	800610a <pvPortMalloc+0x172>
	return pvReturn;
 800610c:	69fb      	ldr	r3, [r7, #28]
}
 800610e:	4618      	mov	r0, r3
 8006110:	3728      	adds	r7, #40	; 0x28
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	20002144 	.word	0x20002144
 800611c:	20002158 	.word	0x20002158
 8006120:	20002148 	.word	0x20002148
 8006124:	2000213c 	.word	0x2000213c
 8006128:	2000214c 	.word	0x2000214c
 800612c:	20002150 	.word	0x20002150

08006130 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b086      	sub	sp, #24
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d04d      	beq.n	80061de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006142:	2308      	movs	r3, #8
 8006144:	425b      	negs	r3, r3
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	4413      	add	r3, r2
 800614a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	685a      	ldr	r2, [r3, #4]
 8006154:	4b24      	ldr	r3, [pc, #144]	; (80061e8 <vPortFree+0xb8>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4013      	ands	r3, r2
 800615a:	2b00      	cmp	r3, #0
 800615c:	d10a      	bne.n	8006174 <vPortFree+0x44>
	__asm volatile
 800615e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006162:	f383 8811 	msr	BASEPRI, r3
 8006166:	f3bf 8f6f 	isb	sy
 800616a:	f3bf 8f4f 	dsb	sy
 800616e:	60fb      	str	r3, [r7, #12]
}
 8006170:	bf00      	nop
 8006172:	e7fe      	b.n	8006172 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00a      	beq.n	8006192 <vPortFree+0x62>
	__asm volatile
 800617c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006180:	f383 8811 	msr	BASEPRI, r3
 8006184:	f3bf 8f6f 	isb	sy
 8006188:	f3bf 8f4f 	dsb	sy
 800618c:	60bb      	str	r3, [r7, #8]
}
 800618e:	bf00      	nop
 8006190:	e7fe      	b.n	8006190 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	685a      	ldr	r2, [r3, #4]
 8006196:	4b14      	ldr	r3, [pc, #80]	; (80061e8 <vPortFree+0xb8>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4013      	ands	r3, r2
 800619c:	2b00      	cmp	r3, #0
 800619e:	d01e      	beq.n	80061de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d11a      	bne.n	80061de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	685a      	ldr	r2, [r3, #4]
 80061ac:	4b0e      	ldr	r3, [pc, #56]	; (80061e8 <vPortFree+0xb8>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	43db      	mvns	r3, r3
 80061b2:	401a      	ands	r2, r3
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80061b8:	f7fe fb48 	bl	800484c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	685a      	ldr	r2, [r3, #4]
 80061c0:	4b0a      	ldr	r3, [pc, #40]	; (80061ec <vPortFree+0xbc>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4413      	add	r3, r2
 80061c6:	4a09      	ldr	r2, [pc, #36]	; (80061ec <vPortFree+0xbc>)
 80061c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80061ca:	6938      	ldr	r0, [r7, #16]
 80061cc:	f000 f874 	bl	80062b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80061d0:	4b07      	ldr	r3, [pc, #28]	; (80061f0 <vPortFree+0xc0>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	3301      	adds	r3, #1
 80061d6:	4a06      	ldr	r2, [pc, #24]	; (80061f0 <vPortFree+0xc0>)
 80061d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80061da:	f7fe fb45 	bl	8004868 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80061de:	bf00      	nop
 80061e0:	3718      	adds	r7, #24
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	20002158 	.word	0x20002158
 80061ec:	20002148 	.word	0x20002148
 80061f0:	20002154 	.word	0x20002154

080061f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80061fa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80061fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006200:	4b27      	ldr	r3, [pc, #156]	; (80062a0 <prvHeapInit+0xac>)
 8006202:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f003 0307 	and.w	r3, r3, #7
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00c      	beq.n	8006228 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	3307      	adds	r3, #7
 8006212:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f023 0307 	bic.w	r3, r3, #7
 800621a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	4a1f      	ldr	r2, [pc, #124]	; (80062a0 <prvHeapInit+0xac>)
 8006224:	4413      	add	r3, r2
 8006226:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800622c:	4a1d      	ldr	r2, [pc, #116]	; (80062a4 <prvHeapInit+0xb0>)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006232:	4b1c      	ldr	r3, [pc, #112]	; (80062a4 <prvHeapInit+0xb0>)
 8006234:	2200      	movs	r2, #0
 8006236:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	4413      	add	r3, r2
 800623e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006240:	2208      	movs	r2, #8
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	1a9b      	subs	r3, r3, r2
 8006246:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f023 0307 	bic.w	r3, r3, #7
 800624e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	4a15      	ldr	r2, [pc, #84]	; (80062a8 <prvHeapInit+0xb4>)
 8006254:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006256:	4b14      	ldr	r3, [pc, #80]	; (80062a8 <prvHeapInit+0xb4>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2200      	movs	r2, #0
 800625c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800625e:	4b12      	ldr	r3, [pc, #72]	; (80062a8 <prvHeapInit+0xb4>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2200      	movs	r2, #0
 8006264:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	1ad2      	subs	r2, r2, r3
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006274:	4b0c      	ldr	r3, [pc, #48]	; (80062a8 <prvHeapInit+0xb4>)
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	4a0a      	ldr	r2, [pc, #40]	; (80062ac <prvHeapInit+0xb8>)
 8006282:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	4a09      	ldr	r2, [pc, #36]	; (80062b0 <prvHeapInit+0xbc>)
 800628a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800628c:	4b09      	ldr	r3, [pc, #36]	; (80062b4 <prvHeapInit+0xc0>)
 800628e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006292:	601a      	str	r2, [r3, #0]
}
 8006294:	bf00      	nop
 8006296:	3714      	adds	r7, #20
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr
 80062a0:	20001584 	.word	0x20001584
 80062a4:	2000213c 	.word	0x2000213c
 80062a8:	20002144 	.word	0x20002144
 80062ac:	2000214c 	.word	0x2000214c
 80062b0:	20002148 	.word	0x20002148
 80062b4:	20002158 	.word	0x20002158

080062b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80062b8:	b480      	push	{r7}
 80062ba:	b085      	sub	sp, #20
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80062c0:	4b28      	ldr	r3, [pc, #160]	; (8006364 <prvInsertBlockIntoFreeList+0xac>)
 80062c2:	60fb      	str	r3, [r7, #12]
 80062c4:	e002      	b.n	80062cc <prvInsertBlockIntoFreeList+0x14>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	60fb      	str	r3, [r7, #12]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d8f7      	bhi.n	80062c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	4413      	add	r3, r2
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d108      	bne.n	80062fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	685a      	ldr	r2, [r3, #4]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	441a      	add	r2, r3
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	441a      	add	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	429a      	cmp	r2, r3
 800630c:	d118      	bne.n	8006340 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	4b15      	ldr	r3, [pc, #84]	; (8006368 <prvInsertBlockIntoFreeList+0xb0>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	429a      	cmp	r2, r3
 8006318:	d00d      	beq.n	8006336 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685a      	ldr	r2, [r3, #4]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	441a      	add	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	601a      	str	r2, [r3, #0]
 8006334:	e008      	b.n	8006348 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006336:	4b0c      	ldr	r3, [pc, #48]	; (8006368 <prvInsertBlockIntoFreeList+0xb0>)
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	601a      	str	r2, [r3, #0]
 800633e:	e003      	b.n	8006348 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	429a      	cmp	r2, r3
 800634e:	d002      	beq.n	8006356 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006356:	bf00      	nop
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	2000213c 	.word	0x2000213c
 8006368:	20002144 	.word	0x20002144

0800636c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006372:	2300      	movs	r3, #0
 8006374:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set In terrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006376:	2003      	movs	r0, #3
 8006378:	f000 f994 	bl	80066a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800637c:	2000      	movs	r0, #0
 800637e:	f000 f80d 	bl	800639c <HAL_InitTick>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d002      	beq.n	800638e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	71fb      	strb	r3, [r7, #7]
 800638c:	e001      	b.n	8006392 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800638e:	f003 ff0f 	bl	800a1b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006392:	79fb      	ldrb	r3, [r7, #7]
}
 8006394:	4618      	mov	r0, r3
 8006396:	3708      	adds	r7, #8
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80063a4:	2300      	movs	r3, #0
 80063a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80063a8:	4b17      	ldr	r3, [pc, #92]	; (8006408 <HAL_InitTick+0x6c>)
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d023      	beq.n	80063f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80063b0:	4b16      	ldr	r3, [pc, #88]	; (800640c <HAL_InitTick+0x70>)
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	4b14      	ldr	r3, [pc, #80]	; (8006408 <HAL_InitTick+0x6c>)
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	4619      	mov	r1, r3
 80063ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80063be:	fbb3 f3f1 	udiv	r3, r3, r1
 80063c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 f9af 	bl	800672a <HAL_SYSTICK_Config>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10f      	bne.n	80063f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2b0f      	cmp	r3, #15
 80063d6:	d809      	bhi.n	80063ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80063d8:	2200      	movs	r2, #0
 80063da:	6879      	ldr	r1, [r7, #4]
 80063dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063e0:	f000 f96b 	bl	80066ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80063e4:	4a0a      	ldr	r2, [pc, #40]	; (8006410 <HAL_InitTick+0x74>)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6013      	str	r3, [r2, #0]
 80063ea:	e007      	b.n	80063fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	73fb      	strb	r3, [r7, #15]
 80063f0:	e004      	b.n	80063fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	73fb      	strb	r3, [r7, #15]
 80063f6:	e001      	b.n	80063fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80063fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	2000006c 	.word	0x2000006c
 800640c:	20000070 	.word	0x20000070
 8006410:	20000068 	.word	0x20000068

08006414 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006414:	b480      	push	{r7}
 8006416:	af00      	add	r7, sp, #0
    //return xTaskGetTickCount();
    return uwTick;
 8006418:	4b03      	ldr	r3, [pc, #12]	; (8006428 <HAL_GetTick+0x14>)
 800641a:	681b      	ldr	r3, [r3, #0]
}
 800641c:	4618      	mov	r0, r3
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	2000215c 	.word	0x2000215c

0800642c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006434:	f7ff ffee 	bl	8006414 <HAL_GetTick>
 8006438:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006444:	d005      	beq.n	8006452 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8006446:	4b0a      	ldr	r3, [pc, #40]	; (8006470 <HAL_Delay+0x44>)
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	461a      	mov	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	4413      	add	r3, r2
 8006450:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006452:	bf00      	nop
 8006454:	f7ff ffde 	bl	8006414 <HAL_GetTick>
 8006458:	4602      	mov	r2, r0
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	429a      	cmp	r2, r3
 8006462:	d8f7      	bhi.n	8006454 <HAL_Delay+0x28>
  {
  }
}
 8006464:	bf00      	nop
 8006466:	bf00      	nop
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	2000006c 	.word	0x2000006c

08006474 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8006474:	b480      	push	{r7}
 8006476:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8006478:	4b03      	ldr	r3, [pc, #12]	; (8006488 <HAL_GetUIDw0+0x14>)
 800647a:	681b      	ldr	r3, [r3, #0]
}
 800647c:	4618      	mov	r0, r3
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	1fff7590 	.word	0x1fff7590

0800648c <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800648c:	b480      	push	{r7}
 800648e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8006490:	4b03      	ldr	r3, [pc, #12]	; (80064a0 <HAL_GetUIDw1+0x14>)
 8006492:	681b      	ldr	r3, [r3, #0]
}
 8006494:	4618      	mov	r0, r3
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	1fff7594 	.word	0x1fff7594

080064a4 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80064a4:	b480      	push	{r7}
 80064a6:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80064a8:	4b03      	ldr	r3, [pc, #12]	; (80064b8 <HAL_GetUIDw2+0x14>)
 80064aa:	681b      	ldr	r3, [r3, #0]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	1fff7598 	.word	0x1fff7598

080064bc <__NVIC_SetPriorityGrouping>:
{
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f003 0307 	and.w	r3, r3, #7
 80064ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80064cc:	4b0c      	ldr	r3, [pc, #48]	; (8006500 <__NVIC_SetPriorityGrouping+0x44>)
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80064d8:	4013      	ands	r3, r2
 80064da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80064e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80064e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80064ee:	4a04      	ldr	r2, [pc, #16]	; (8006500 <__NVIC_SetPriorityGrouping+0x44>)
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	60d3      	str	r3, [r2, #12]
}
 80064f4:	bf00      	nop
 80064f6:	3714      	adds	r7, #20
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr
 8006500:	e000ed00 	.word	0xe000ed00

08006504 <__NVIC_GetPriorityGrouping>:
{
 8006504:	b480      	push	{r7}
 8006506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006508:	4b04      	ldr	r3, [pc, #16]	; (800651c <__NVIC_GetPriorityGrouping+0x18>)
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	0a1b      	lsrs	r3, r3, #8
 800650e:	f003 0307 	and.w	r3, r3, #7
}
 8006512:	4618      	mov	r0, r3
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr
 800651c:	e000ed00 	.word	0xe000ed00

08006520 <__NVIC_EnableIRQ>:
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	4603      	mov	r3, r0
 8006528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800652a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800652e:	2b00      	cmp	r3, #0
 8006530:	db0b      	blt.n	800654a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006532:	79fb      	ldrb	r3, [r7, #7]
 8006534:	f003 021f 	and.w	r2, r3, #31
 8006538:	4907      	ldr	r1, [pc, #28]	; (8006558 <__NVIC_EnableIRQ+0x38>)
 800653a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800653e:	095b      	lsrs	r3, r3, #5
 8006540:	2001      	movs	r0, #1
 8006542:	fa00 f202 	lsl.w	r2, r0, r2
 8006546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800654a:	bf00      	nop
 800654c:	370c      	adds	r7, #12
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop
 8006558:	e000e100 	.word	0xe000e100

0800655c <__NVIC_DisableIRQ>:
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	4603      	mov	r3, r0
 8006564:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800656a:	2b00      	cmp	r3, #0
 800656c:	db12      	blt.n	8006594 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800656e:	79fb      	ldrb	r3, [r7, #7]
 8006570:	f003 021f 	and.w	r2, r3, #31
 8006574:	490a      	ldr	r1, [pc, #40]	; (80065a0 <__NVIC_DisableIRQ+0x44>)
 8006576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800657a:	095b      	lsrs	r3, r3, #5
 800657c:	2001      	movs	r0, #1
 800657e:	fa00 f202 	lsl.w	r2, r0, r2
 8006582:	3320      	adds	r3, #32
 8006584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006588:	f3bf 8f4f 	dsb	sy
}
 800658c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800658e:	f3bf 8f6f 	isb	sy
}
 8006592:	bf00      	nop
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr
 80065a0:	e000e100 	.word	0xe000e100

080065a4 <__NVIC_SetPriority>:
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	4603      	mov	r3, r0
 80065ac:	6039      	str	r1, [r7, #0]
 80065ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	db0a      	blt.n	80065ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	b2da      	uxtb	r2, r3
 80065bc:	490c      	ldr	r1, [pc, #48]	; (80065f0 <__NVIC_SetPriority+0x4c>)
 80065be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065c2:	0112      	lsls	r2, r2, #4
 80065c4:	b2d2      	uxtb	r2, r2
 80065c6:	440b      	add	r3, r1
 80065c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80065cc:	e00a      	b.n	80065e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	b2da      	uxtb	r2, r3
 80065d2:	4908      	ldr	r1, [pc, #32]	; (80065f4 <__NVIC_SetPriority+0x50>)
 80065d4:	79fb      	ldrb	r3, [r7, #7]
 80065d6:	f003 030f 	and.w	r3, r3, #15
 80065da:	3b04      	subs	r3, #4
 80065dc:	0112      	lsls	r2, r2, #4
 80065de:	b2d2      	uxtb	r2, r2
 80065e0:	440b      	add	r3, r1
 80065e2:	761a      	strb	r2, [r3, #24]
}
 80065e4:	bf00      	nop
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr
 80065f0:	e000e100 	.word	0xe000e100
 80065f4:	e000ed00 	.word	0xe000ed00

080065f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b089      	sub	sp, #36	; 0x24
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f003 0307 	and.w	r3, r3, #7
 800660a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	f1c3 0307 	rsb	r3, r3, #7
 8006612:	2b04      	cmp	r3, #4
 8006614:	bf28      	it	cs
 8006616:	2304      	movcs	r3, #4
 8006618:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	3304      	adds	r3, #4
 800661e:	2b06      	cmp	r3, #6
 8006620:	d902      	bls.n	8006628 <NVIC_EncodePriority+0x30>
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	3b03      	subs	r3, #3
 8006626:	e000      	b.n	800662a <NVIC_EncodePriority+0x32>
 8006628:	2300      	movs	r3, #0
 800662a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800662c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	fa02 f303 	lsl.w	r3, r2, r3
 8006636:	43da      	mvns	r2, r3
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	401a      	ands	r2, r3
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006640:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	fa01 f303 	lsl.w	r3, r1, r3
 800664a:	43d9      	mvns	r1, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006650:	4313      	orrs	r3, r2
         );
}
 8006652:	4618      	mov	r0, r3
 8006654:	3724      	adds	r7, #36	; 0x24
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
	...

08006660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	3b01      	subs	r3, #1
 800666c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006670:	d301      	bcc.n	8006676 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006672:	2301      	movs	r3, #1
 8006674:	e00f      	b.n	8006696 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006676:	4a0a      	ldr	r2, [pc, #40]	; (80066a0 <SysTick_Config+0x40>)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	3b01      	subs	r3, #1
 800667c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800667e:	210f      	movs	r1, #15
 8006680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006684:	f7ff ff8e 	bl	80065a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006688:	4b05      	ldr	r3, [pc, #20]	; (80066a0 <SysTick_Config+0x40>)
 800668a:	2200      	movs	r2, #0
 800668c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800668e:	4b04      	ldr	r3, [pc, #16]	; (80066a0 <SysTick_Config+0x40>)
 8006690:	2207      	movs	r2, #7
 8006692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3708      	adds	r7, #8
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	e000e010 	.word	0xe000e010

080066a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f7ff ff05 	bl	80064bc <__NVIC_SetPriorityGrouping>
}
 80066b2:	bf00      	nop
 80066b4:	3708      	adds	r7, #8
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b086      	sub	sp, #24
 80066be:	af00      	add	r7, sp, #0
 80066c0:	4603      	mov	r3, r0
 80066c2:	60b9      	str	r1, [r7, #8]
 80066c4:	607a      	str	r2, [r7, #4]
 80066c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80066c8:	2300      	movs	r3, #0
 80066ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80066cc:	f7ff ff1a 	bl	8006504 <__NVIC_GetPriorityGrouping>
 80066d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	68b9      	ldr	r1, [r7, #8]
 80066d6:	6978      	ldr	r0, [r7, #20]
 80066d8:	f7ff ff8e 	bl	80065f8 <NVIC_EncodePriority>
 80066dc:	4602      	mov	r2, r0
 80066de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066e2:	4611      	mov	r1, r2
 80066e4:	4618      	mov	r0, r3
 80066e6:	f7ff ff5d 	bl	80065a4 <__NVIC_SetPriority>
}
 80066ea:	bf00      	nop
 80066ec:	3718      	adds	r7, #24
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b082      	sub	sp, #8
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	4603      	mov	r3, r0
 80066fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80066fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006700:	4618      	mov	r0, r3
 8006702:	f7ff ff0d 	bl	8006520 <__NVIC_EnableIRQ>
}
 8006706:	bf00      	nop
 8006708:	3708      	adds	r7, #8
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b082      	sub	sp, #8
 8006712:	af00      	add	r7, sp, #0
 8006714:	4603      	mov	r3, r0
 8006716:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800671c:	4618      	mov	r0, r3
 800671e:	f7ff ff1d 	bl	800655c <__NVIC_DisableIRQ>
}
 8006722:	bf00      	nop
 8006724:	3708      	adds	r7, #8
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800672a:	b580      	push	{r7, lr}
 800672c:	b082      	sub	sp, #8
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f7ff ff94 	bl	8006660 <SysTick_Config>
 8006738:	4603      	mov	r3, r0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3708      	adds	r7, #8
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
	...

08006744 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d101      	bne.n	8006756 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e098      	b.n	8006888 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	461a      	mov	r2, r3
 800675c:	4b4d      	ldr	r3, [pc, #308]	; (8006894 <HAL_DMA_Init+0x150>)
 800675e:	429a      	cmp	r2, r3
 8006760:	d80f      	bhi.n	8006782 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	461a      	mov	r2, r3
 8006768:	4b4b      	ldr	r3, [pc, #300]	; (8006898 <HAL_DMA_Init+0x154>)
 800676a:	4413      	add	r3, r2
 800676c:	4a4b      	ldr	r2, [pc, #300]	; (800689c <HAL_DMA_Init+0x158>)
 800676e:	fba2 2303 	umull	r2, r3, r2, r3
 8006772:	091b      	lsrs	r3, r3, #4
 8006774:	009a      	lsls	r2, r3, #2
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a48      	ldr	r2, [pc, #288]	; (80068a0 <HAL_DMA_Init+0x15c>)
 800677e:	641a      	str	r2, [r3, #64]	; 0x40
 8006780:	e00e      	b.n	80067a0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	461a      	mov	r2, r3
 8006788:	4b46      	ldr	r3, [pc, #280]	; (80068a4 <HAL_DMA_Init+0x160>)
 800678a:	4413      	add	r3, r2
 800678c:	4a43      	ldr	r2, [pc, #268]	; (800689c <HAL_DMA_Init+0x158>)
 800678e:	fba2 2303 	umull	r2, r3, r2, r3
 8006792:	091b      	lsrs	r3, r3, #4
 8006794:	009a      	lsls	r2, r3, #2
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a42      	ldr	r2, [pc, #264]	; (80068a8 <HAL_DMA_Init+0x164>)
 800679e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2202      	movs	r2, #2
 80067a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80067b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80067c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067fa:	d039      	beq.n	8006870 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006800:	4a27      	ldr	r2, [pc, #156]	; (80068a0 <HAL_DMA_Init+0x15c>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d11a      	bne.n	800683c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006806:	4b29      	ldr	r3, [pc, #164]	; (80068ac <HAL_DMA_Init+0x168>)
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800680e:	f003 031c 	and.w	r3, r3, #28
 8006812:	210f      	movs	r1, #15
 8006814:	fa01 f303 	lsl.w	r3, r1, r3
 8006818:	43db      	mvns	r3, r3
 800681a:	4924      	ldr	r1, [pc, #144]	; (80068ac <HAL_DMA_Init+0x168>)
 800681c:	4013      	ands	r3, r2
 800681e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006820:	4b22      	ldr	r3, [pc, #136]	; (80068ac <HAL_DMA_Init+0x168>)
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6859      	ldr	r1, [r3, #4]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800682c:	f003 031c 	and.w	r3, r3, #28
 8006830:	fa01 f303 	lsl.w	r3, r1, r3
 8006834:	491d      	ldr	r1, [pc, #116]	; (80068ac <HAL_DMA_Init+0x168>)
 8006836:	4313      	orrs	r3, r2
 8006838:	600b      	str	r3, [r1, #0]
 800683a:	e019      	b.n	8006870 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800683c:	4b1c      	ldr	r3, [pc, #112]	; (80068b0 <HAL_DMA_Init+0x16c>)
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006844:	f003 031c 	and.w	r3, r3, #28
 8006848:	210f      	movs	r1, #15
 800684a:	fa01 f303 	lsl.w	r3, r1, r3
 800684e:	43db      	mvns	r3, r3
 8006850:	4917      	ldr	r1, [pc, #92]	; (80068b0 <HAL_DMA_Init+0x16c>)
 8006852:	4013      	ands	r3, r2
 8006854:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006856:	4b16      	ldr	r3, [pc, #88]	; (80068b0 <HAL_DMA_Init+0x16c>)
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6859      	ldr	r1, [r3, #4]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006862:	f003 031c 	and.w	r3, r3, #28
 8006866:	fa01 f303 	lsl.w	r3, r1, r3
 800686a:	4911      	ldr	r1, [pc, #68]	; (80068b0 <HAL_DMA_Init+0x16c>)
 800686c:	4313      	orrs	r3, r2
 800686e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3714      	adds	r7, #20
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr
 8006894:	40020407 	.word	0x40020407
 8006898:	bffdfff8 	.word	0xbffdfff8
 800689c:	cccccccd 	.word	0xcccccccd
 80068a0:	40020000 	.word	0x40020000
 80068a4:	bffdfbf8 	.word	0xbffdfbf8
 80068a8:	40020400 	.word	0x40020400
 80068ac:	400200a8 	.word	0x400200a8
 80068b0:	400204a8 	.word	0x400204a8

080068b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b086      	sub	sp, #24
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
 80068c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068c2:	2300      	movs	r3, #0
 80068c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d101      	bne.n	80068d4 <HAL_DMA_Start_IT+0x20>
 80068d0:	2302      	movs	r3, #2
 80068d2:	e04b      	b.n	800696c <HAL_DMA_Start_IT+0xb8>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d13a      	bne.n	800695e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2202      	movs	r2, #2
 80068ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f022 0201 	bic.w	r2, r2, #1
 8006904:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	68b9      	ldr	r1, [r7, #8]
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f000 f969 	bl	8006be4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006916:	2b00      	cmp	r3, #0
 8006918:	d008      	beq.n	800692c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f042 020e 	orr.w	r2, r2, #14
 8006928:	601a      	str	r2, [r3, #0]
 800692a:	e00f      	b.n	800694c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f022 0204 	bic.w	r2, r2, #4
 800693a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f042 020a 	orr.w	r2, r2, #10
 800694a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f042 0201 	orr.w	r2, r2, #1
 800695a:	601a      	str	r2, [r3, #0]
 800695c:	e005      	b.n	800696a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006966:	2302      	movs	r3, #2
 8006968:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800696a:	7dfb      	ldrb	r3, [r7, #23]
}
 800696c:	4618      	mov	r0, r3
 800696e:	3718      	adds	r7, #24
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800697c:	2300      	movs	r3, #0
 800697e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006986:	b2db      	uxtb	r3, r3
 8006988:	2b02      	cmp	r3, #2
 800698a:	d005      	beq.n	8006998 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2204      	movs	r2, #4
 8006990:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	73fb      	strb	r3, [r7, #15]
 8006996:	e029      	b.n	80069ec <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f022 020e 	bic.w	r2, r2, #14
 80069a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f022 0201 	bic.w	r2, r2, #1
 80069b6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069bc:	f003 021c 	and.w	r2, r3, #28
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c4:	2101      	movs	r1, #1
 80069c6:	fa01 f202 	lsl.w	r2, r1, r2
 80069ca:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d003      	beq.n	80069ec <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	4798      	blx	r3
    }
  }
  return status;
 80069ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3710      	adds	r7, #16
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b084      	sub	sp, #16
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a12:	f003 031c 	and.w	r3, r3, #28
 8006a16:	2204      	movs	r2, #4
 8006a18:	409a      	lsls	r2, r3
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d026      	beq.n	8006a70 <HAL_DMA_IRQHandler+0x7a>
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	f003 0304 	and.w	r3, r3, #4
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d021      	beq.n	8006a70 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 0320 	and.w	r3, r3, #32
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d107      	bne.n	8006a4a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f022 0204 	bic.w	r2, r2, #4
 8006a48:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a4e:	f003 021c 	and.w	r2, r3, #28
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a56:	2104      	movs	r1, #4
 8006a58:	fa01 f202 	lsl.w	r2, r1, r2
 8006a5c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d071      	beq.n	8006b4a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8006a6e:	e06c      	b.n	8006b4a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a74:	f003 031c 	and.w	r3, r3, #28
 8006a78:	2202      	movs	r2, #2
 8006a7a:	409a      	lsls	r2, r3
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	4013      	ands	r3, r2
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d02e      	beq.n	8006ae2 <HAL_DMA_IRQHandler+0xec>
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	f003 0302 	and.w	r3, r3, #2
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d029      	beq.n	8006ae2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0320 	and.w	r3, r3, #32
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10b      	bne.n	8006ab4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f022 020a 	bic.w	r2, r2, #10
 8006aaa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ab8:	f003 021c 	and.w	r2, r3, #28
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac0:	2102      	movs	r1, #2
 8006ac2:	fa01 f202 	lsl.w	r2, r1, r2
 8006ac6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d038      	beq.n	8006b4a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006ae0:	e033      	b.n	8006b4a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ae6:	f003 031c 	and.w	r3, r3, #28
 8006aea:	2208      	movs	r2, #8
 8006aec:	409a      	lsls	r2, r3
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	4013      	ands	r3, r2
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d02a      	beq.n	8006b4c <HAL_DMA_IRQHandler+0x156>
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	f003 0308 	and.w	r3, r3, #8
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d025      	beq.n	8006b4c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f022 020e 	bic.w	r2, r2, #14
 8006b0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b14:	f003 021c 	and.w	r2, r3, #28
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1c:	2101      	movs	r1, #1
 8006b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8006b22:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d004      	beq.n	8006b4c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006b4a:	bf00      	nop
 8006b4c:	bf00      	nop
}
 8006b4e:	3710      	adds	r7, #16
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 8006b54:	b480      	push	{r7}
 8006b56:	b087      	sub	sp, #28
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	607a      	str	r2, [r7, #4]
 8006b60:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006b62:	2300      	movs	r3, #0
 8006b64:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d101      	bne.n	8006b74 <HAL_DMA_RegisterCallback+0x20>
 8006b70:	2302      	movs	r3, #2
 8006b72:	e031      	b.n	8006bd8 <HAL_DMA_RegisterCallback+0x84>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d120      	bne.n	8006bca <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8006b88:	7afb      	ldrb	r3, [r7, #11]
 8006b8a:	2b03      	cmp	r3, #3
 8006b8c:	d81a      	bhi.n	8006bc4 <HAL_DMA_RegisterCallback+0x70>
 8006b8e:	a201      	add	r2, pc, #4	; (adr r2, 8006b94 <HAL_DMA_RegisterCallback+0x40>)
 8006b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b94:	08006ba5 	.word	0x08006ba5
 8006b98:	08006bad 	.word	0x08006bad
 8006b9c:	08006bb5 	.word	0x08006bb5
 8006ba0:	08006bbd 	.word	0x08006bbd
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = pCallback;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	62da      	str	r2, [r3, #44]	; 0x2c
           break;
 8006baa:	e010      	b.n	8006bce <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = pCallback;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	631a      	str	r2, [r3, #48]	; 0x30
           break;
 8006bb2:	e00c      	b.n	8006bce <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = pCallback;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	635a      	str	r2, [r3, #52]	; 0x34
           break;
 8006bba:	e008      	b.n	8006bce <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = pCallback;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 8006bc2:	e004      	b.n	8006bce <HAL_DMA_RegisterCallback+0x7a>

     default:
           status = HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	75fb      	strb	r3, [r7, #23]
           break;
 8006bc8:	e001      	b.n	8006bce <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8006bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	371c      	adds	r7, #28
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	607a      	str	r2, [r7, #4]
 8006bf0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bf6:	f003 021c 	and.w	r2, r3, #28
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfe:	2101      	movs	r1, #1
 8006c00:	fa01 f202 	lsl.w	r2, r1, r2
 8006c04:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	683a      	ldr	r2, [r7, #0]
 8006c0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	2b10      	cmp	r3, #16
 8006c14:	d108      	bne.n	8006c28 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68ba      	ldr	r2, [r7, #8]
 8006c24:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006c26:	e007      	b.n	8006c38 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	60da      	str	r2, [r3, #12]
}
 8006c38:	bf00      	nop
 8006c3a:	3714      	adds	r7, #20
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b087      	sub	sp, #28
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006c52:	e154      	b.n	8006efe <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	2101      	movs	r1, #1
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c60:	4013      	ands	r3, r2
 8006c62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	f000 8146 	beq.w	8006ef8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	f003 0303 	and.w	r3, r3, #3
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d005      	beq.n	8006c84 <HAL_GPIO_Init+0x40>
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	f003 0303 	and.w	r3, r3, #3
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	d130      	bne.n	8006ce6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	005b      	lsls	r3, r3, #1
 8006c8e:	2203      	movs	r2, #3
 8006c90:	fa02 f303 	lsl.w	r3, r2, r3
 8006c94:	43db      	mvns	r3, r3
 8006c96:	693a      	ldr	r2, [r7, #16]
 8006c98:	4013      	ands	r3, r2
 8006c9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	68da      	ldr	r2, [r3, #12]
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	005b      	lsls	r3, r3, #1
 8006ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca8:	693a      	ldr	r2, [r7, #16]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	693a      	ldr	r2, [r7, #16]
 8006cb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006cba:	2201      	movs	r2, #1
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc2:	43db      	mvns	r3, r3
 8006cc4:	693a      	ldr	r2, [r7, #16]
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	091b      	lsrs	r3, r3, #4
 8006cd0:	f003 0201 	and.w	r2, r3, #1
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	693a      	ldr	r2, [r7, #16]
 8006ce4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	f003 0303 	and.w	r3, r3, #3
 8006cee:	2b03      	cmp	r3, #3
 8006cf0:	d017      	beq.n	8006d22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	005b      	lsls	r3, r3, #1
 8006cfc:	2203      	movs	r2, #3
 8006cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8006d02:	43db      	mvns	r3, r3
 8006d04:	693a      	ldr	r2, [r7, #16]
 8006d06:	4013      	ands	r3, r2
 8006d08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	689a      	ldr	r2, [r3, #8]
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	005b      	lsls	r3, r3, #1
 8006d12:	fa02 f303 	lsl.w	r3, r2, r3
 8006d16:	693a      	ldr	r2, [r7, #16]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	693a      	ldr	r2, [r7, #16]
 8006d20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	f003 0303 	and.w	r3, r3, #3
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d123      	bne.n	8006d76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	08da      	lsrs	r2, r3, #3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	3208      	adds	r2, #8
 8006d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	f003 0307 	and.w	r3, r3, #7
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	220f      	movs	r2, #15
 8006d46:	fa02 f303 	lsl.w	r3, r2, r3
 8006d4a:	43db      	mvns	r3, r3
 8006d4c:	693a      	ldr	r2, [r7, #16]
 8006d4e:	4013      	ands	r3, r2
 8006d50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	691a      	ldr	r2, [r3, #16]
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	f003 0307 	and.w	r3, r3, #7
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	08da      	lsrs	r2, r3, #3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	3208      	adds	r2, #8
 8006d70:	6939      	ldr	r1, [r7, #16]
 8006d72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	005b      	lsls	r3, r3, #1
 8006d80:	2203      	movs	r2, #3
 8006d82:	fa02 f303 	lsl.w	r3, r2, r3
 8006d86:	43db      	mvns	r3, r3
 8006d88:	693a      	ldr	r2, [r7, #16]
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	f003 0203 	and.w	r2, r3, #3
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	005b      	lsls	r3, r3, #1
 8006d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d9e:	693a      	ldr	r2, [r7, #16]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	693a      	ldr	r2, [r7, #16]
 8006da8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	f000 80a0 	beq.w	8006ef8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006db8:	4b58      	ldr	r3, [pc, #352]	; (8006f1c <HAL_GPIO_Init+0x2d8>)
 8006dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dbc:	4a57      	ldr	r2, [pc, #348]	; (8006f1c <HAL_GPIO_Init+0x2d8>)
 8006dbe:	f043 0301 	orr.w	r3, r3, #1
 8006dc2:	6613      	str	r3, [r2, #96]	; 0x60
 8006dc4:	4b55      	ldr	r3, [pc, #340]	; (8006f1c <HAL_GPIO_Init+0x2d8>)
 8006dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dc8:	f003 0301 	and.w	r3, r3, #1
 8006dcc:	60bb      	str	r3, [r7, #8]
 8006dce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006dd0:	4a53      	ldr	r2, [pc, #332]	; (8006f20 <HAL_GPIO_Init+0x2dc>)
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	089b      	lsrs	r3, r3, #2
 8006dd6:	3302      	adds	r3, #2
 8006dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	f003 0303 	and.w	r3, r3, #3
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	220f      	movs	r2, #15
 8006de8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dec:	43db      	mvns	r3, r3
 8006dee:	693a      	ldr	r2, [r7, #16]
 8006df0:	4013      	ands	r3, r2
 8006df2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006dfa:	d019      	beq.n	8006e30 <HAL_GPIO_Init+0x1ec>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a49      	ldr	r2, [pc, #292]	; (8006f24 <HAL_GPIO_Init+0x2e0>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d013      	beq.n	8006e2c <HAL_GPIO_Init+0x1e8>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a48      	ldr	r2, [pc, #288]	; (8006f28 <HAL_GPIO_Init+0x2e4>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d00d      	beq.n	8006e28 <HAL_GPIO_Init+0x1e4>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a47      	ldr	r2, [pc, #284]	; (8006f2c <HAL_GPIO_Init+0x2e8>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d007      	beq.n	8006e24 <HAL_GPIO_Init+0x1e0>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a46      	ldr	r2, [pc, #280]	; (8006f30 <HAL_GPIO_Init+0x2ec>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d101      	bne.n	8006e20 <HAL_GPIO_Init+0x1dc>
 8006e1c:	2304      	movs	r3, #4
 8006e1e:	e008      	b.n	8006e32 <HAL_GPIO_Init+0x1ee>
 8006e20:	2307      	movs	r3, #7
 8006e22:	e006      	b.n	8006e32 <HAL_GPIO_Init+0x1ee>
 8006e24:	2303      	movs	r3, #3
 8006e26:	e004      	b.n	8006e32 <HAL_GPIO_Init+0x1ee>
 8006e28:	2302      	movs	r3, #2
 8006e2a:	e002      	b.n	8006e32 <HAL_GPIO_Init+0x1ee>
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e000      	b.n	8006e32 <HAL_GPIO_Init+0x1ee>
 8006e30:	2300      	movs	r3, #0
 8006e32:	697a      	ldr	r2, [r7, #20]
 8006e34:	f002 0203 	and.w	r2, r2, #3
 8006e38:	0092      	lsls	r2, r2, #2
 8006e3a:	4093      	lsls	r3, r2
 8006e3c:	693a      	ldr	r2, [r7, #16]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006e42:	4937      	ldr	r1, [pc, #220]	; (8006f20 <HAL_GPIO_Init+0x2dc>)
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	089b      	lsrs	r3, r3, #2
 8006e48:	3302      	adds	r3, #2
 8006e4a:	693a      	ldr	r2, [r7, #16]
 8006e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006e50:	4b38      	ldr	r3, [pc, #224]	; (8006f34 <HAL_GPIO_Init+0x2f0>)
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	43db      	mvns	r3, r3
 8006e5a:	693a      	ldr	r2, [r7, #16]
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d003      	beq.n	8006e74 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8006e6c:	693a      	ldr	r2, [r7, #16]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006e74:	4a2f      	ldr	r2, [pc, #188]	; (8006f34 <HAL_GPIO_Init+0x2f0>)
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006e7a:	4b2e      	ldr	r3, [pc, #184]	; (8006f34 <HAL_GPIO_Init+0x2f0>)
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	43db      	mvns	r3, r3
 8006e84:	693a      	ldr	r2, [r7, #16]
 8006e86:	4013      	ands	r3, r2
 8006e88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d003      	beq.n	8006e9e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006e9e:	4a25      	ldr	r2, [pc, #148]	; (8006f34 <HAL_GPIO_Init+0x2f0>)
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006ea4:	4b23      	ldr	r3, [pc, #140]	; (8006f34 <HAL_GPIO_Init+0x2f0>)
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	43db      	mvns	r3, r3
 8006eae:	693a      	ldr	r2, [r7, #16]
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d003      	beq.n	8006ec8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006ec8:	4a1a      	ldr	r2, [pc, #104]	; (8006f34 <HAL_GPIO_Init+0x2f0>)
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006ece:	4b19      	ldr	r3, [pc, #100]	; (8006f34 <HAL_GPIO_Init+0x2f0>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	43db      	mvns	r3, r3
 8006ed8:	693a      	ldr	r2, [r7, #16]
 8006eda:	4013      	ands	r3, r2
 8006edc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d003      	beq.n	8006ef2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006eea:	693a      	ldr	r2, [r7, #16]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006ef2:	4a10      	ldr	r2, [pc, #64]	; (8006f34 <HAL_GPIO_Init+0x2f0>)
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	3301      	adds	r3, #1
 8006efc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	fa22 f303 	lsr.w	r3, r2, r3
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	f47f aea3 	bne.w	8006c54 <HAL_GPIO_Init+0x10>
  }
}
 8006f0e:	bf00      	nop
 8006f10:	bf00      	nop
 8006f12:	371c      	adds	r7, #28
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr
 8006f1c:	40021000 	.word	0x40021000
 8006f20:	40010000 	.word	0x40010000
 8006f24:	48000400 	.word	0x48000400
 8006f28:	48000800 	.word	0x48000800
 8006f2c:	48000c00 	.word	0x48000c00
 8006f30:	48001000 	.word	0x48001000
 8006f34:	40010400 	.word	0x40010400

08006f38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	460b      	mov	r3, r1
 8006f42:	807b      	strh	r3, [r7, #2]
 8006f44:	4613      	mov	r3, r2
 8006f46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006f48:	787b      	ldrb	r3, [r7, #1]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d003      	beq.n	8006f56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006f4e:	887a      	ldrh	r2, [r7, #2]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006f54:	e002      	b.n	8006f5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006f56:	887a      	ldrh	r2, [r7, #2]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006f5c:	bf00      	nop
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	4603      	mov	r3, r0
 8006f70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006f72:	4b08      	ldr	r3, [pc, #32]	; (8006f94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006f74:	695a      	ldr	r2, [r3, #20]
 8006f76:	88fb      	ldrh	r3, [r7, #6]
 8006f78:	4013      	ands	r3, r2
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d006      	beq.n	8006f8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006f7e:	4a05      	ldr	r2, [pc, #20]	; (8006f94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006f80:	88fb      	ldrh	r3, [r7, #6]
 8006f82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006f84:	88fb      	ldrh	r3, [r7, #6]
 8006f86:	4618      	mov	r0, r3
 8006f88:	f003 fc10 	bl	800a7ac <HAL_GPIO_EXTI_Callback>
  }
}
 8006f8c:	bf00      	nop
 8006f8e:	3708      	adds	r7, #8
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	40010400 	.word	0x40010400

08006f98 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f9c:	4b05      	ldr	r3, [pc, #20]	; (8006fb4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a04      	ldr	r2, [pc, #16]	; (8006fb4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fa6:	6013      	str	r3, [r2, #0]
}
 8006fa8:	bf00      	nop
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	40007000 	.word	0x40007000

08006fb8 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8006fc0:	4b2b      	ldr	r3, [pc, #172]	; (8007070 <HAL_PWR_ConfigPVD+0xb8>)
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	f023 020e 	bic.w	r2, r3, #14
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4928      	ldr	r1, [pc, #160]	; (8007070 <HAL_PWR_ConfigPVD+0xb8>)
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8006fd2:	4b28      	ldr	r3, [pc, #160]	; (8007074 <HAL_PWR_ConfigPVD+0xbc>)
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	4a27      	ldr	r2, [pc, #156]	; (8007074 <HAL_PWR_ConfigPVD+0xbc>)
 8006fd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fdc:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8006fde:	4b25      	ldr	r3, [pc, #148]	; (8007074 <HAL_PWR_ConfigPVD+0xbc>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a24      	ldr	r2, [pc, #144]	; (8007074 <HAL_PWR_ConfigPVD+0xbc>)
 8006fe4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fe8:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8006fea:	4b22      	ldr	r3, [pc, #136]	; (8007074 <HAL_PWR_ConfigPVD+0xbc>)
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	4a21      	ldr	r2, [pc, #132]	; (8007074 <HAL_PWR_ConfigPVD+0xbc>)
 8006ff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ff4:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8006ff6:	4b1f      	ldr	r3, [pc, #124]	; (8007074 <HAL_PWR_ConfigPVD+0xbc>)
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	4a1e      	ldr	r2, [pc, #120]	; (8007074 <HAL_PWR_ConfigPVD+0xbc>)
 8006ffc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007000:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800700a:	2b00      	cmp	r3, #0
 800700c:	d005      	beq.n	800701a <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 800700e:	4b19      	ldr	r3, [pc, #100]	; (8007074 <HAL_PWR_ConfigPVD+0xbc>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a18      	ldr	r2, [pc, #96]	; (8007074 <HAL_PWR_ConfigPVD+0xbc>)
 8007014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007018:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007022:	2b00      	cmp	r3, #0
 8007024:	d005      	beq.n	8007032 <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8007026:	4b13      	ldr	r3, [pc, #76]	; (8007074 <HAL_PWR_ConfigPVD+0xbc>)
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	4a12      	ldr	r2, [pc, #72]	; (8007074 <HAL_PWR_ConfigPVD+0xbc>)
 800702c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007030:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	f003 0301 	and.w	r3, r3, #1
 800703a:	2b00      	cmp	r3, #0
 800703c:	d005      	beq.n	800704a <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800703e:	4b0d      	ldr	r3, [pc, #52]	; (8007074 <HAL_PWR_ConfigPVD+0xbc>)
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	4a0c      	ldr	r2, [pc, #48]	; (8007074 <HAL_PWR_ConfigPVD+0xbc>)
 8007044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007048:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	f003 0302 	and.w	r3, r3, #2
 8007052:	2b00      	cmp	r3, #0
 8007054:	d005      	beq.n	8007062 <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8007056:	4b07      	ldr	r3, [pc, #28]	; (8007074 <HAL_PWR_ConfigPVD+0xbc>)
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	4a06      	ldr	r2, [pc, #24]	; (8007074 <HAL_PWR_ConfigPVD+0xbc>)
 800705c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007060:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 8007062:	2300      	movs	r3, #0
}
 8007064:	4618      	mov	r0, r3
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr
 8007070:	40007000 	.word	0x40007000
 8007074:	40010400 	.word	0x40010400

08007078 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8007078:	b480      	push	{r7}
 800707a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 800707c:	4b05      	ldr	r3, [pc, #20]	; (8007094 <HAL_PWR_EnablePVD+0x1c>)
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	4a04      	ldr	r2, [pc, #16]	; (8007094 <HAL_PWR_EnablePVD+0x1c>)
 8007082:	f043 0301 	orr.w	r3, r3, #1
 8007086:	6053      	str	r3, [r2, #4]
}
 8007088:	bf00      	nop
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	40007000 	.word	0x40007000

08007098 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007098:	b480      	push	{r7}
 800709a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800709c:	4b04      	ldr	r3, [pc, #16]	; (80070b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	40007000 	.word	0x40007000

080070b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b085      	sub	sp, #20
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070c2:	d130      	bne.n	8007126 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80070c4:	4b23      	ldr	r3, [pc, #140]	; (8007154 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80070cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070d0:	d038      	beq.n	8007144 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80070d2:	4b20      	ldr	r3, [pc, #128]	; (8007154 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80070da:	4a1e      	ldr	r2, [pc, #120]	; (8007154 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80070dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80070e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80070e2:	4b1d      	ldr	r3, [pc, #116]	; (8007158 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2232      	movs	r2, #50	; 0x32
 80070e8:	fb02 f303 	mul.w	r3, r2, r3
 80070ec:	4a1b      	ldr	r2, [pc, #108]	; (800715c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80070ee:	fba2 2303 	umull	r2, r3, r2, r3
 80070f2:	0c9b      	lsrs	r3, r3, #18
 80070f4:	3301      	adds	r3, #1
 80070f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80070f8:	e002      	b.n	8007100 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	3b01      	subs	r3, #1
 80070fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007100:	4b14      	ldr	r3, [pc, #80]	; (8007154 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007102:	695b      	ldr	r3, [r3, #20]
 8007104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007108:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800710c:	d102      	bne.n	8007114 <HAL_PWREx_ControlVoltageScaling+0x60>
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d1f2      	bne.n	80070fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007114:	4b0f      	ldr	r3, [pc, #60]	; (8007154 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007116:	695b      	ldr	r3, [r3, #20]
 8007118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800711c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007120:	d110      	bne.n	8007144 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007122:	2303      	movs	r3, #3
 8007124:	e00f      	b.n	8007146 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007126:	4b0b      	ldr	r3, [pc, #44]	; (8007154 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800712e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007132:	d007      	beq.n	8007144 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007134:	4b07      	ldr	r3, [pc, #28]	; (8007154 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800713c:	4a05      	ldr	r2, [pc, #20]	; (8007154 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800713e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007142:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	3714      	adds	r7, #20
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	40007000 	.word	0x40007000
 8007158:	20000070 	.word	0x20000070
 800715c:	431bde83 	.word	0x431bde83

08007160 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b088      	sub	sp, #32
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d102      	bne.n	8007174 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	f000 bc02 	b.w	8007978 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007174:	4b96      	ldr	r3, [pc, #600]	; (80073d0 <HAL_RCC_OscConfig+0x270>)
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	f003 030c 	and.w	r3, r3, #12
 800717c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800717e:	4b94      	ldr	r3, [pc, #592]	; (80073d0 <HAL_RCC_OscConfig+0x270>)
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	f003 0303 	and.w	r3, r3, #3
 8007186:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 0310 	and.w	r3, r3, #16
 8007190:	2b00      	cmp	r3, #0
 8007192:	f000 80e4 	beq.w	800735e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d007      	beq.n	80071ac <HAL_RCC_OscConfig+0x4c>
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	2b0c      	cmp	r3, #12
 80071a0:	f040 808b 	bne.w	80072ba <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	f040 8087 	bne.w	80072ba <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80071ac:	4b88      	ldr	r3, [pc, #544]	; (80073d0 <HAL_RCC_OscConfig+0x270>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 0302 	and.w	r3, r3, #2
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d005      	beq.n	80071c4 <HAL_RCC_OscConfig+0x64>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	699b      	ldr	r3, [r3, #24]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d101      	bne.n	80071c4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	e3d9      	b.n	8007978 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a1a      	ldr	r2, [r3, #32]
 80071c8:	4b81      	ldr	r3, [pc, #516]	; (80073d0 <HAL_RCC_OscConfig+0x270>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 0308 	and.w	r3, r3, #8
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d004      	beq.n	80071de <HAL_RCC_OscConfig+0x7e>
 80071d4:	4b7e      	ldr	r3, [pc, #504]	; (80073d0 <HAL_RCC_OscConfig+0x270>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071dc:	e005      	b.n	80071ea <HAL_RCC_OscConfig+0x8a>
 80071de:	4b7c      	ldr	r3, [pc, #496]	; (80073d0 <HAL_RCC_OscConfig+0x270>)
 80071e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071e4:	091b      	lsrs	r3, r3, #4
 80071e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d223      	bcs.n	8007236 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a1b      	ldr	r3, [r3, #32]
 80071f2:	4618      	mov	r0, r3
 80071f4:	f000 fd54 	bl	8007ca0 <RCC_SetFlashLatencyFromMSIRange>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d001      	beq.n	8007202 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	e3ba      	b.n	8007978 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007202:	4b73      	ldr	r3, [pc, #460]	; (80073d0 <HAL_RCC_OscConfig+0x270>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a72      	ldr	r2, [pc, #456]	; (80073d0 <HAL_RCC_OscConfig+0x270>)
 8007208:	f043 0308 	orr.w	r3, r3, #8
 800720c:	6013      	str	r3, [r2, #0]
 800720e:	4b70      	ldr	r3, [pc, #448]	; (80073d0 <HAL_RCC_OscConfig+0x270>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a1b      	ldr	r3, [r3, #32]
 800721a:	496d      	ldr	r1, [pc, #436]	; (80073d0 <HAL_RCC_OscConfig+0x270>)
 800721c:	4313      	orrs	r3, r2
 800721e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007220:	4b6b      	ldr	r3, [pc, #428]	; (80073d0 <HAL_RCC_OscConfig+0x270>)
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	69db      	ldr	r3, [r3, #28]
 800722c:	021b      	lsls	r3, r3, #8
 800722e:	4968      	ldr	r1, [pc, #416]	; (80073d0 <HAL_RCC_OscConfig+0x270>)
 8007230:	4313      	orrs	r3, r2
 8007232:	604b      	str	r3, [r1, #4]
 8007234:	e025      	b.n	8007282 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007236:	4b66      	ldr	r3, [pc, #408]	; (80073d0 <HAL_RCC_OscConfig+0x270>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a65      	ldr	r2, [pc, #404]	; (80073d0 <HAL_RCC_OscConfig+0x270>)
 800723c:	f043 0308 	orr.w	r3, r3, #8
 8007240:	6013      	str	r3, [r2, #0]
 8007242:	4b63      	ldr	r3, [pc, #396]	; (80073d0 <HAL_RCC_OscConfig+0x270>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a1b      	ldr	r3, [r3, #32]
 800724e:	4960      	ldr	r1, [pc, #384]	; (80073d0 <HAL_RCC_OscConfig+0x270>)
 8007250:	4313      	orrs	r3, r2
 8007252:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007254:	4b5e      	ldr	r3, [pc, #376]	; (80073d0 <HAL_RCC_OscConfig+0x270>)
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	69db      	ldr	r3, [r3, #28]
 8007260:	021b      	lsls	r3, r3, #8
 8007262:	495b      	ldr	r1, [pc, #364]	; (80073d0 <HAL_RCC_OscConfig+0x270>)
 8007264:	4313      	orrs	r3, r2
 8007266:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d109      	bne.n	8007282 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a1b      	ldr	r3, [r3, #32]
 8007272:	4618      	mov	r0, r3
 8007274:	f000 fd14 	bl	8007ca0 <RCC_SetFlashLatencyFromMSIRange>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d001      	beq.n	8007282 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e37a      	b.n	8007978 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007282:	f000 fc81 	bl	8007b88 <HAL_RCC_GetSysClockFreq>
 8007286:	4602      	mov	r2, r0
 8007288:	4b51      	ldr	r3, [pc, #324]	; (80073d0 <HAL_RCC_OscConfig+0x270>)
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	091b      	lsrs	r3, r3, #4
 800728e:	f003 030f 	and.w	r3, r3, #15
 8007292:	4950      	ldr	r1, [pc, #320]	; (80073d4 <HAL_RCC_OscConfig+0x274>)
 8007294:	5ccb      	ldrb	r3, [r1, r3]
 8007296:	f003 031f 	and.w	r3, r3, #31
 800729a:	fa22 f303 	lsr.w	r3, r2, r3
 800729e:	4a4e      	ldr	r2, [pc, #312]	; (80073d8 <HAL_RCC_OscConfig+0x278>)
 80072a0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80072a2:	4b4e      	ldr	r3, [pc, #312]	; (80073dc <HAL_RCC_OscConfig+0x27c>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4618      	mov	r0, r3
 80072a8:	f7ff f878 	bl	800639c <HAL_InitTick>
 80072ac:	4603      	mov	r3, r0
 80072ae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80072b0:	7bfb      	ldrb	r3, [r7, #15]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d052      	beq.n	800735c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80072b6:	7bfb      	ldrb	r3, [r7, #15]
 80072b8:	e35e      	b.n	8007978 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	699b      	ldr	r3, [r3, #24]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d032      	beq.n	8007328 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80072c2:	4b43      	ldr	r3, [pc, #268]	; (80073d0 <HAL_RCC_OscConfig+0x270>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a42      	ldr	r2, [pc, #264]	; (80073d0 <HAL_RCC_OscConfig+0x270>)
 80072c8:	f043 0301 	orr.w	r3, r3, #1
 80072cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80072ce:	f7ff f8a1 	bl	8006414 <HAL_GetTick>
 80072d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80072d4:	e008      	b.n	80072e8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80072d6:	f7ff f89d 	bl	8006414 <HAL_GetTick>
 80072da:	4602      	mov	r2, r0
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	1ad3      	subs	r3, r2, r3
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	d901      	bls.n	80072e8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80072e4:	2303      	movs	r3, #3
 80072e6:	e347      	b.n	8007978 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80072e8:	4b39      	ldr	r3, [pc, #228]	; (80073d0 <HAL_RCC_OscConfig+0x270>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 0302 	and.w	r3, r3, #2
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d0f0      	beq.n	80072d6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80072f4:	4b36      	ldr	r3, [pc, #216]	; (80073d0 <HAL_RCC_OscConfig+0x270>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a35      	ldr	r2, [pc, #212]	; (80073d0 <HAL_RCC_OscConfig+0x270>)
 80072fa:	f043 0308 	orr.w	r3, r3, #8
 80072fe:	6013      	str	r3, [r2, #0]
 8007300:	4b33      	ldr	r3, [pc, #204]	; (80073d0 <HAL_RCC_OscConfig+0x270>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6a1b      	ldr	r3, [r3, #32]
 800730c:	4930      	ldr	r1, [pc, #192]	; (80073d0 <HAL_RCC_OscConfig+0x270>)
 800730e:	4313      	orrs	r3, r2
 8007310:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007312:	4b2f      	ldr	r3, [pc, #188]	; (80073d0 <HAL_RCC_OscConfig+0x270>)
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	69db      	ldr	r3, [r3, #28]
 800731e:	021b      	lsls	r3, r3, #8
 8007320:	492b      	ldr	r1, [pc, #172]	; (80073d0 <HAL_RCC_OscConfig+0x270>)
 8007322:	4313      	orrs	r3, r2
 8007324:	604b      	str	r3, [r1, #4]
 8007326:	e01a      	b.n	800735e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007328:	4b29      	ldr	r3, [pc, #164]	; (80073d0 <HAL_RCC_OscConfig+0x270>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a28      	ldr	r2, [pc, #160]	; (80073d0 <HAL_RCC_OscConfig+0x270>)
 800732e:	f023 0301 	bic.w	r3, r3, #1
 8007332:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007334:	f7ff f86e 	bl	8006414 <HAL_GetTick>
 8007338:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800733a:	e008      	b.n	800734e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800733c:	f7ff f86a 	bl	8006414 <HAL_GetTick>
 8007340:	4602      	mov	r2, r0
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	1ad3      	subs	r3, r2, r3
 8007346:	2b02      	cmp	r3, #2
 8007348:	d901      	bls.n	800734e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800734a:	2303      	movs	r3, #3
 800734c:	e314      	b.n	8007978 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800734e:	4b20      	ldr	r3, [pc, #128]	; (80073d0 <HAL_RCC_OscConfig+0x270>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 0302 	and.w	r3, r3, #2
 8007356:	2b00      	cmp	r3, #0
 8007358:	d1f0      	bne.n	800733c <HAL_RCC_OscConfig+0x1dc>
 800735a:	e000      	b.n	800735e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800735c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f003 0301 	and.w	r3, r3, #1
 8007366:	2b00      	cmp	r3, #0
 8007368:	d073      	beq.n	8007452 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	2b08      	cmp	r3, #8
 800736e:	d005      	beq.n	800737c <HAL_RCC_OscConfig+0x21c>
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	2b0c      	cmp	r3, #12
 8007374:	d10e      	bne.n	8007394 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	2b03      	cmp	r3, #3
 800737a:	d10b      	bne.n	8007394 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800737c:	4b14      	ldr	r3, [pc, #80]	; (80073d0 <HAL_RCC_OscConfig+0x270>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007384:	2b00      	cmp	r3, #0
 8007386:	d063      	beq.n	8007450 <HAL_RCC_OscConfig+0x2f0>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d15f      	bne.n	8007450 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e2f1      	b.n	8007978 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800739c:	d106      	bne.n	80073ac <HAL_RCC_OscConfig+0x24c>
 800739e:	4b0c      	ldr	r3, [pc, #48]	; (80073d0 <HAL_RCC_OscConfig+0x270>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a0b      	ldr	r2, [pc, #44]	; (80073d0 <HAL_RCC_OscConfig+0x270>)
 80073a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073a8:	6013      	str	r3, [r2, #0]
 80073aa:	e025      	b.n	80073f8 <HAL_RCC_OscConfig+0x298>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80073b4:	d114      	bne.n	80073e0 <HAL_RCC_OscConfig+0x280>
 80073b6:	4b06      	ldr	r3, [pc, #24]	; (80073d0 <HAL_RCC_OscConfig+0x270>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a05      	ldr	r2, [pc, #20]	; (80073d0 <HAL_RCC_OscConfig+0x270>)
 80073bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80073c0:	6013      	str	r3, [r2, #0]
 80073c2:	4b03      	ldr	r3, [pc, #12]	; (80073d0 <HAL_RCC_OscConfig+0x270>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a02      	ldr	r2, [pc, #8]	; (80073d0 <HAL_RCC_OscConfig+0x270>)
 80073c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073cc:	6013      	str	r3, [r2, #0]
 80073ce:	e013      	b.n	80073f8 <HAL_RCC_OscConfig+0x298>
 80073d0:	40021000 	.word	0x40021000
 80073d4:	0800bf1c 	.word	0x0800bf1c
 80073d8:	20000070 	.word	0x20000070
 80073dc:	20000068 	.word	0x20000068
 80073e0:	4ba0      	ldr	r3, [pc, #640]	; (8007664 <HAL_RCC_OscConfig+0x504>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a9f      	ldr	r2, [pc, #636]	; (8007664 <HAL_RCC_OscConfig+0x504>)
 80073e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073ea:	6013      	str	r3, [r2, #0]
 80073ec:	4b9d      	ldr	r3, [pc, #628]	; (8007664 <HAL_RCC_OscConfig+0x504>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a9c      	ldr	r2, [pc, #624]	; (8007664 <HAL_RCC_OscConfig+0x504>)
 80073f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80073f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d013      	beq.n	8007428 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007400:	f7ff f808 	bl	8006414 <HAL_GetTick>
 8007404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007406:	e008      	b.n	800741a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007408:	f7ff f804 	bl	8006414 <HAL_GetTick>
 800740c:	4602      	mov	r2, r0
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	1ad3      	subs	r3, r2, r3
 8007412:	2b64      	cmp	r3, #100	; 0x64
 8007414:	d901      	bls.n	800741a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007416:	2303      	movs	r3, #3
 8007418:	e2ae      	b.n	8007978 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800741a:	4b92      	ldr	r3, [pc, #584]	; (8007664 <HAL_RCC_OscConfig+0x504>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007422:	2b00      	cmp	r3, #0
 8007424:	d0f0      	beq.n	8007408 <HAL_RCC_OscConfig+0x2a8>
 8007426:	e014      	b.n	8007452 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007428:	f7fe fff4 	bl	8006414 <HAL_GetTick>
 800742c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800742e:	e008      	b.n	8007442 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007430:	f7fe fff0 	bl	8006414 <HAL_GetTick>
 8007434:	4602      	mov	r2, r0
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	1ad3      	subs	r3, r2, r3
 800743a:	2b64      	cmp	r3, #100	; 0x64
 800743c:	d901      	bls.n	8007442 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800743e:	2303      	movs	r3, #3
 8007440:	e29a      	b.n	8007978 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007442:	4b88      	ldr	r3, [pc, #544]	; (8007664 <HAL_RCC_OscConfig+0x504>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1f0      	bne.n	8007430 <HAL_RCC_OscConfig+0x2d0>
 800744e:	e000      	b.n	8007452 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 0302 	and.w	r3, r3, #2
 800745a:	2b00      	cmp	r3, #0
 800745c:	d060      	beq.n	8007520 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	2b04      	cmp	r3, #4
 8007462:	d005      	beq.n	8007470 <HAL_RCC_OscConfig+0x310>
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	2b0c      	cmp	r3, #12
 8007468:	d119      	bne.n	800749e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	2b02      	cmp	r3, #2
 800746e:	d116      	bne.n	800749e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007470:	4b7c      	ldr	r3, [pc, #496]	; (8007664 <HAL_RCC_OscConfig+0x504>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007478:	2b00      	cmp	r3, #0
 800747a:	d005      	beq.n	8007488 <HAL_RCC_OscConfig+0x328>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d101      	bne.n	8007488 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	e277      	b.n	8007978 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007488:	4b76      	ldr	r3, [pc, #472]	; (8007664 <HAL_RCC_OscConfig+0x504>)
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	691b      	ldr	r3, [r3, #16]
 8007494:	061b      	lsls	r3, r3, #24
 8007496:	4973      	ldr	r1, [pc, #460]	; (8007664 <HAL_RCC_OscConfig+0x504>)
 8007498:	4313      	orrs	r3, r2
 800749a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800749c:	e040      	b.n	8007520 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d023      	beq.n	80074ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80074a6:	4b6f      	ldr	r3, [pc, #444]	; (8007664 <HAL_RCC_OscConfig+0x504>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a6e      	ldr	r2, [pc, #440]	; (8007664 <HAL_RCC_OscConfig+0x504>)
 80074ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074b2:	f7fe ffaf 	bl	8006414 <HAL_GetTick>
 80074b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80074b8:	e008      	b.n	80074cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074ba:	f7fe ffab 	bl	8006414 <HAL_GetTick>
 80074be:	4602      	mov	r2, r0
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	1ad3      	subs	r3, r2, r3
 80074c4:	2b02      	cmp	r3, #2
 80074c6:	d901      	bls.n	80074cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80074c8:	2303      	movs	r3, #3
 80074ca:	e255      	b.n	8007978 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80074cc:	4b65      	ldr	r3, [pc, #404]	; (8007664 <HAL_RCC_OscConfig+0x504>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d0f0      	beq.n	80074ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074d8:	4b62      	ldr	r3, [pc, #392]	; (8007664 <HAL_RCC_OscConfig+0x504>)
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	061b      	lsls	r3, r3, #24
 80074e6:	495f      	ldr	r1, [pc, #380]	; (8007664 <HAL_RCC_OscConfig+0x504>)
 80074e8:	4313      	orrs	r3, r2
 80074ea:	604b      	str	r3, [r1, #4]
 80074ec:	e018      	b.n	8007520 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80074ee:	4b5d      	ldr	r3, [pc, #372]	; (8007664 <HAL_RCC_OscConfig+0x504>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a5c      	ldr	r2, [pc, #368]	; (8007664 <HAL_RCC_OscConfig+0x504>)
 80074f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074fa:	f7fe ff8b 	bl	8006414 <HAL_GetTick>
 80074fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007500:	e008      	b.n	8007514 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007502:	f7fe ff87 	bl	8006414 <HAL_GetTick>
 8007506:	4602      	mov	r2, r0
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	1ad3      	subs	r3, r2, r3
 800750c:	2b02      	cmp	r3, #2
 800750e:	d901      	bls.n	8007514 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007510:	2303      	movs	r3, #3
 8007512:	e231      	b.n	8007978 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007514:	4b53      	ldr	r3, [pc, #332]	; (8007664 <HAL_RCC_OscConfig+0x504>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800751c:	2b00      	cmp	r3, #0
 800751e:	d1f0      	bne.n	8007502 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 0308 	and.w	r3, r3, #8
 8007528:	2b00      	cmp	r3, #0
 800752a:	d03c      	beq.n	80075a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	695b      	ldr	r3, [r3, #20]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d01c      	beq.n	800756e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007534:	4b4b      	ldr	r3, [pc, #300]	; (8007664 <HAL_RCC_OscConfig+0x504>)
 8007536:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800753a:	4a4a      	ldr	r2, [pc, #296]	; (8007664 <HAL_RCC_OscConfig+0x504>)
 800753c:	f043 0301 	orr.w	r3, r3, #1
 8007540:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007544:	f7fe ff66 	bl	8006414 <HAL_GetTick>
 8007548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800754a:	e008      	b.n	800755e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800754c:	f7fe ff62 	bl	8006414 <HAL_GetTick>
 8007550:	4602      	mov	r2, r0
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	1ad3      	subs	r3, r2, r3
 8007556:	2b02      	cmp	r3, #2
 8007558:	d901      	bls.n	800755e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800755a:	2303      	movs	r3, #3
 800755c:	e20c      	b.n	8007978 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800755e:	4b41      	ldr	r3, [pc, #260]	; (8007664 <HAL_RCC_OscConfig+0x504>)
 8007560:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007564:	f003 0302 	and.w	r3, r3, #2
 8007568:	2b00      	cmp	r3, #0
 800756a:	d0ef      	beq.n	800754c <HAL_RCC_OscConfig+0x3ec>
 800756c:	e01b      	b.n	80075a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800756e:	4b3d      	ldr	r3, [pc, #244]	; (8007664 <HAL_RCC_OscConfig+0x504>)
 8007570:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007574:	4a3b      	ldr	r2, [pc, #236]	; (8007664 <HAL_RCC_OscConfig+0x504>)
 8007576:	f023 0301 	bic.w	r3, r3, #1
 800757a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800757e:	f7fe ff49 	bl	8006414 <HAL_GetTick>
 8007582:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007584:	e008      	b.n	8007598 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007586:	f7fe ff45 	bl	8006414 <HAL_GetTick>
 800758a:	4602      	mov	r2, r0
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	1ad3      	subs	r3, r2, r3
 8007590:	2b02      	cmp	r3, #2
 8007592:	d901      	bls.n	8007598 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007594:	2303      	movs	r3, #3
 8007596:	e1ef      	b.n	8007978 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007598:	4b32      	ldr	r3, [pc, #200]	; (8007664 <HAL_RCC_OscConfig+0x504>)
 800759a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800759e:	f003 0302 	and.w	r3, r3, #2
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d1ef      	bne.n	8007586 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f003 0304 	and.w	r3, r3, #4
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	f000 80a6 	beq.w	8007700 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80075b4:	2300      	movs	r3, #0
 80075b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80075b8:	4b2a      	ldr	r3, [pc, #168]	; (8007664 <HAL_RCC_OscConfig+0x504>)
 80075ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d10d      	bne.n	80075e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075c4:	4b27      	ldr	r3, [pc, #156]	; (8007664 <HAL_RCC_OscConfig+0x504>)
 80075c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075c8:	4a26      	ldr	r2, [pc, #152]	; (8007664 <HAL_RCC_OscConfig+0x504>)
 80075ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075ce:	6593      	str	r3, [r2, #88]	; 0x58
 80075d0:	4b24      	ldr	r3, [pc, #144]	; (8007664 <HAL_RCC_OscConfig+0x504>)
 80075d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075d8:	60bb      	str	r3, [r7, #8]
 80075da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075dc:	2301      	movs	r3, #1
 80075de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80075e0:	4b21      	ldr	r3, [pc, #132]	; (8007668 <HAL_RCC_OscConfig+0x508>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d118      	bne.n	800761e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80075ec:	4b1e      	ldr	r3, [pc, #120]	; (8007668 <HAL_RCC_OscConfig+0x508>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a1d      	ldr	r2, [pc, #116]	; (8007668 <HAL_RCC_OscConfig+0x508>)
 80075f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80075f8:	f7fe ff0c 	bl	8006414 <HAL_GetTick>
 80075fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80075fe:	e008      	b.n	8007612 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007600:	f7fe ff08 	bl	8006414 <HAL_GetTick>
 8007604:	4602      	mov	r2, r0
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	1ad3      	subs	r3, r2, r3
 800760a:	2b02      	cmp	r3, #2
 800760c:	d901      	bls.n	8007612 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	e1b2      	b.n	8007978 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007612:	4b15      	ldr	r3, [pc, #84]	; (8007668 <HAL_RCC_OscConfig+0x508>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800761a:	2b00      	cmp	r3, #0
 800761c:	d0f0      	beq.n	8007600 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	2b01      	cmp	r3, #1
 8007624:	d108      	bne.n	8007638 <HAL_RCC_OscConfig+0x4d8>
 8007626:	4b0f      	ldr	r3, [pc, #60]	; (8007664 <HAL_RCC_OscConfig+0x504>)
 8007628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800762c:	4a0d      	ldr	r2, [pc, #52]	; (8007664 <HAL_RCC_OscConfig+0x504>)
 800762e:	f043 0301 	orr.w	r3, r3, #1
 8007632:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007636:	e029      	b.n	800768c <HAL_RCC_OscConfig+0x52c>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	2b05      	cmp	r3, #5
 800763e:	d115      	bne.n	800766c <HAL_RCC_OscConfig+0x50c>
 8007640:	4b08      	ldr	r3, [pc, #32]	; (8007664 <HAL_RCC_OscConfig+0x504>)
 8007642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007646:	4a07      	ldr	r2, [pc, #28]	; (8007664 <HAL_RCC_OscConfig+0x504>)
 8007648:	f043 0304 	orr.w	r3, r3, #4
 800764c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007650:	4b04      	ldr	r3, [pc, #16]	; (8007664 <HAL_RCC_OscConfig+0x504>)
 8007652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007656:	4a03      	ldr	r2, [pc, #12]	; (8007664 <HAL_RCC_OscConfig+0x504>)
 8007658:	f043 0301 	orr.w	r3, r3, #1
 800765c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007660:	e014      	b.n	800768c <HAL_RCC_OscConfig+0x52c>
 8007662:	bf00      	nop
 8007664:	40021000 	.word	0x40021000
 8007668:	40007000 	.word	0x40007000
 800766c:	4b9a      	ldr	r3, [pc, #616]	; (80078d8 <HAL_RCC_OscConfig+0x778>)
 800766e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007672:	4a99      	ldr	r2, [pc, #612]	; (80078d8 <HAL_RCC_OscConfig+0x778>)
 8007674:	f023 0301 	bic.w	r3, r3, #1
 8007678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800767c:	4b96      	ldr	r3, [pc, #600]	; (80078d8 <HAL_RCC_OscConfig+0x778>)
 800767e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007682:	4a95      	ldr	r2, [pc, #596]	; (80078d8 <HAL_RCC_OscConfig+0x778>)
 8007684:	f023 0304 	bic.w	r3, r3, #4
 8007688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d016      	beq.n	80076c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007694:	f7fe febe 	bl	8006414 <HAL_GetTick>
 8007698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800769a:	e00a      	b.n	80076b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800769c:	f7fe feba 	bl	8006414 <HAL_GetTick>
 80076a0:	4602      	mov	r2, r0
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	1ad3      	subs	r3, r2, r3
 80076a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d901      	bls.n	80076b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e162      	b.n	8007978 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80076b2:	4b89      	ldr	r3, [pc, #548]	; (80078d8 <HAL_RCC_OscConfig+0x778>)
 80076b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076b8:	f003 0302 	and.w	r3, r3, #2
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d0ed      	beq.n	800769c <HAL_RCC_OscConfig+0x53c>
 80076c0:	e015      	b.n	80076ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076c2:	f7fe fea7 	bl	8006414 <HAL_GetTick>
 80076c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80076c8:	e00a      	b.n	80076e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076ca:	f7fe fea3 	bl	8006414 <HAL_GetTick>
 80076ce:	4602      	mov	r2, r0
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	1ad3      	subs	r3, r2, r3
 80076d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80076d8:	4293      	cmp	r3, r2
 80076da:	d901      	bls.n	80076e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80076dc:	2303      	movs	r3, #3
 80076de:	e14b      	b.n	8007978 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80076e0:	4b7d      	ldr	r3, [pc, #500]	; (80078d8 <HAL_RCC_OscConfig+0x778>)
 80076e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076e6:	f003 0302 	and.w	r3, r3, #2
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d1ed      	bne.n	80076ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80076ee:	7ffb      	ldrb	r3, [r7, #31]
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d105      	bne.n	8007700 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076f4:	4b78      	ldr	r3, [pc, #480]	; (80078d8 <HAL_RCC_OscConfig+0x778>)
 80076f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076f8:	4a77      	ldr	r2, [pc, #476]	; (80078d8 <HAL_RCC_OscConfig+0x778>)
 80076fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 0320 	and.w	r3, r3, #32
 8007708:	2b00      	cmp	r3, #0
 800770a:	d03c      	beq.n	8007786 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007710:	2b00      	cmp	r3, #0
 8007712:	d01c      	beq.n	800774e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007714:	4b70      	ldr	r3, [pc, #448]	; (80078d8 <HAL_RCC_OscConfig+0x778>)
 8007716:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800771a:	4a6f      	ldr	r2, [pc, #444]	; (80078d8 <HAL_RCC_OscConfig+0x778>)
 800771c:	f043 0301 	orr.w	r3, r3, #1
 8007720:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007724:	f7fe fe76 	bl	8006414 <HAL_GetTick>
 8007728:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800772a:	e008      	b.n	800773e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800772c:	f7fe fe72 	bl	8006414 <HAL_GetTick>
 8007730:	4602      	mov	r2, r0
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	2b02      	cmp	r3, #2
 8007738:	d901      	bls.n	800773e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800773a:	2303      	movs	r3, #3
 800773c:	e11c      	b.n	8007978 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800773e:	4b66      	ldr	r3, [pc, #408]	; (80078d8 <HAL_RCC_OscConfig+0x778>)
 8007740:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007744:	f003 0302 	and.w	r3, r3, #2
 8007748:	2b00      	cmp	r3, #0
 800774a:	d0ef      	beq.n	800772c <HAL_RCC_OscConfig+0x5cc>
 800774c:	e01b      	b.n	8007786 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800774e:	4b62      	ldr	r3, [pc, #392]	; (80078d8 <HAL_RCC_OscConfig+0x778>)
 8007750:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007754:	4a60      	ldr	r2, [pc, #384]	; (80078d8 <HAL_RCC_OscConfig+0x778>)
 8007756:	f023 0301 	bic.w	r3, r3, #1
 800775a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800775e:	f7fe fe59 	bl	8006414 <HAL_GetTick>
 8007762:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007764:	e008      	b.n	8007778 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007766:	f7fe fe55 	bl	8006414 <HAL_GetTick>
 800776a:	4602      	mov	r2, r0
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	2b02      	cmp	r3, #2
 8007772:	d901      	bls.n	8007778 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007774:	2303      	movs	r3, #3
 8007776:	e0ff      	b.n	8007978 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007778:	4b57      	ldr	r3, [pc, #348]	; (80078d8 <HAL_RCC_OscConfig+0x778>)
 800777a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800777e:	f003 0302 	and.w	r3, r3, #2
 8007782:	2b00      	cmp	r3, #0
 8007784:	d1ef      	bne.n	8007766 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800778a:	2b00      	cmp	r3, #0
 800778c:	f000 80f3 	beq.w	8007976 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007794:	2b02      	cmp	r3, #2
 8007796:	f040 80c9 	bne.w	800792c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800779a:	4b4f      	ldr	r3, [pc, #316]	; (80078d8 <HAL_RCC_OscConfig+0x778>)
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	f003 0203 	and.w	r2, r3, #3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d12c      	bne.n	8007808 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b8:	3b01      	subs	r3, #1
 80077ba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80077bc:	429a      	cmp	r2, r3
 80077be:	d123      	bne.n	8007808 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077ca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d11b      	bne.n	8007808 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077da:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80077dc:	429a      	cmp	r2, r3
 80077de:	d113      	bne.n	8007808 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ea:	085b      	lsrs	r3, r3, #1
 80077ec:	3b01      	subs	r3, #1
 80077ee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d109      	bne.n	8007808 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fe:	085b      	lsrs	r3, r3, #1
 8007800:	3b01      	subs	r3, #1
 8007802:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007804:	429a      	cmp	r2, r3
 8007806:	d06b      	beq.n	80078e0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007808:	69bb      	ldr	r3, [r7, #24]
 800780a:	2b0c      	cmp	r3, #12
 800780c:	d062      	beq.n	80078d4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800780e:	4b32      	ldr	r3, [pc, #200]	; (80078d8 <HAL_RCC_OscConfig+0x778>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007816:	2b00      	cmp	r3, #0
 8007818:	d001      	beq.n	800781e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e0ac      	b.n	8007978 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800781e:	4b2e      	ldr	r3, [pc, #184]	; (80078d8 <HAL_RCC_OscConfig+0x778>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a2d      	ldr	r2, [pc, #180]	; (80078d8 <HAL_RCC_OscConfig+0x778>)
 8007824:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007828:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800782a:	f7fe fdf3 	bl	8006414 <HAL_GetTick>
 800782e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007830:	e008      	b.n	8007844 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007832:	f7fe fdef 	bl	8006414 <HAL_GetTick>
 8007836:	4602      	mov	r2, r0
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	1ad3      	subs	r3, r2, r3
 800783c:	2b02      	cmp	r3, #2
 800783e:	d901      	bls.n	8007844 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8007840:	2303      	movs	r3, #3
 8007842:	e099      	b.n	8007978 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007844:	4b24      	ldr	r3, [pc, #144]	; (80078d8 <HAL_RCC_OscConfig+0x778>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800784c:	2b00      	cmp	r3, #0
 800784e:	d1f0      	bne.n	8007832 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007850:	4b21      	ldr	r3, [pc, #132]	; (80078d8 <HAL_RCC_OscConfig+0x778>)
 8007852:	68da      	ldr	r2, [r3, #12]
 8007854:	4b21      	ldr	r3, [pc, #132]	; (80078dc <HAL_RCC_OscConfig+0x77c>)
 8007856:	4013      	ands	r3, r2
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007860:	3a01      	subs	r2, #1
 8007862:	0112      	lsls	r2, r2, #4
 8007864:	4311      	orrs	r1, r2
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800786a:	0212      	lsls	r2, r2, #8
 800786c:	4311      	orrs	r1, r2
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007872:	0852      	lsrs	r2, r2, #1
 8007874:	3a01      	subs	r2, #1
 8007876:	0552      	lsls	r2, r2, #21
 8007878:	4311      	orrs	r1, r2
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800787e:	0852      	lsrs	r2, r2, #1
 8007880:	3a01      	subs	r2, #1
 8007882:	0652      	lsls	r2, r2, #25
 8007884:	4311      	orrs	r1, r2
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800788a:	06d2      	lsls	r2, r2, #27
 800788c:	430a      	orrs	r2, r1
 800788e:	4912      	ldr	r1, [pc, #72]	; (80078d8 <HAL_RCC_OscConfig+0x778>)
 8007890:	4313      	orrs	r3, r2
 8007892:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007894:	4b10      	ldr	r3, [pc, #64]	; (80078d8 <HAL_RCC_OscConfig+0x778>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a0f      	ldr	r2, [pc, #60]	; (80078d8 <HAL_RCC_OscConfig+0x778>)
 800789a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800789e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80078a0:	4b0d      	ldr	r3, [pc, #52]	; (80078d8 <HAL_RCC_OscConfig+0x778>)
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	4a0c      	ldr	r2, [pc, #48]	; (80078d8 <HAL_RCC_OscConfig+0x778>)
 80078a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80078ac:	f7fe fdb2 	bl	8006414 <HAL_GetTick>
 80078b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80078b2:	e008      	b.n	80078c6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078b4:	f7fe fdae 	bl	8006414 <HAL_GetTick>
 80078b8:	4602      	mov	r2, r0
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	1ad3      	subs	r3, r2, r3
 80078be:	2b02      	cmp	r3, #2
 80078c0:	d901      	bls.n	80078c6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80078c2:	2303      	movs	r3, #3
 80078c4:	e058      	b.n	8007978 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80078c6:	4b04      	ldr	r3, [pc, #16]	; (80078d8 <HAL_RCC_OscConfig+0x778>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d0f0      	beq.n	80078b4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80078d2:	e050      	b.n	8007976 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	e04f      	b.n	8007978 <HAL_RCC_OscConfig+0x818>
 80078d8:	40021000 	.word	0x40021000
 80078dc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80078e0:	4b27      	ldr	r3, [pc, #156]	; (8007980 <HAL_RCC_OscConfig+0x820>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d144      	bne.n	8007976 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80078ec:	4b24      	ldr	r3, [pc, #144]	; (8007980 <HAL_RCC_OscConfig+0x820>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a23      	ldr	r2, [pc, #140]	; (8007980 <HAL_RCC_OscConfig+0x820>)
 80078f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078f6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80078f8:	4b21      	ldr	r3, [pc, #132]	; (8007980 <HAL_RCC_OscConfig+0x820>)
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	4a20      	ldr	r2, [pc, #128]	; (8007980 <HAL_RCC_OscConfig+0x820>)
 80078fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007902:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007904:	f7fe fd86 	bl	8006414 <HAL_GetTick>
 8007908:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800790a:	e008      	b.n	800791e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800790c:	f7fe fd82 	bl	8006414 <HAL_GetTick>
 8007910:	4602      	mov	r2, r0
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	1ad3      	subs	r3, r2, r3
 8007916:	2b02      	cmp	r3, #2
 8007918:	d901      	bls.n	800791e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800791a:	2303      	movs	r3, #3
 800791c:	e02c      	b.n	8007978 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800791e:	4b18      	ldr	r3, [pc, #96]	; (8007980 <HAL_RCC_OscConfig+0x820>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007926:	2b00      	cmp	r3, #0
 8007928:	d0f0      	beq.n	800790c <HAL_RCC_OscConfig+0x7ac>
 800792a:	e024      	b.n	8007976 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	2b0c      	cmp	r3, #12
 8007930:	d01f      	beq.n	8007972 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007932:	4b13      	ldr	r3, [pc, #76]	; (8007980 <HAL_RCC_OscConfig+0x820>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a12      	ldr	r2, [pc, #72]	; (8007980 <HAL_RCC_OscConfig+0x820>)
 8007938:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800793c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800793e:	f7fe fd69 	bl	8006414 <HAL_GetTick>
 8007942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007944:	e008      	b.n	8007958 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007946:	f7fe fd65 	bl	8006414 <HAL_GetTick>
 800794a:	4602      	mov	r2, r0
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	1ad3      	subs	r3, r2, r3
 8007950:	2b02      	cmp	r3, #2
 8007952:	d901      	bls.n	8007958 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8007954:	2303      	movs	r3, #3
 8007956:	e00f      	b.n	8007978 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007958:	4b09      	ldr	r3, [pc, #36]	; (8007980 <HAL_RCC_OscConfig+0x820>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1f0      	bne.n	8007946 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8007964:	4b06      	ldr	r3, [pc, #24]	; (8007980 <HAL_RCC_OscConfig+0x820>)
 8007966:	68da      	ldr	r2, [r3, #12]
 8007968:	4905      	ldr	r1, [pc, #20]	; (8007980 <HAL_RCC_OscConfig+0x820>)
 800796a:	4b06      	ldr	r3, [pc, #24]	; (8007984 <HAL_RCC_OscConfig+0x824>)
 800796c:	4013      	ands	r3, r2
 800796e:	60cb      	str	r3, [r1, #12]
 8007970:	e001      	b.n	8007976 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	e000      	b.n	8007978 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	3720      	adds	r7, #32
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}
 8007980:	40021000 	.word	0x40021000
 8007984:	feeefffc 	.word	0xfeeefffc

08007988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d101      	bne.n	800799c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	e0e7      	b.n	8007b6c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800799c:	4b75      	ldr	r3, [pc, #468]	; (8007b74 <HAL_RCC_ClockConfig+0x1ec>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f003 0307 	and.w	r3, r3, #7
 80079a4:	683a      	ldr	r2, [r7, #0]
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d910      	bls.n	80079cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079aa:	4b72      	ldr	r3, [pc, #456]	; (8007b74 <HAL_RCC_ClockConfig+0x1ec>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f023 0207 	bic.w	r2, r3, #7
 80079b2:	4970      	ldr	r1, [pc, #448]	; (8007b74 <HAL_RCC_ClockConfig+0x1ec>)
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	4313      	orrs	r3, r2
 80079b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80079ba:	4b6e      	ldr	r3, [pc, #440]	; (8007b74 <HAL_RCC_ClockConfig+0x1ec>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f003 0307 	and.w	r3, r3, #7
 80079c2:	683a      	ldr	r2, [r7, #0]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d001      	beq.n	80079cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	e0cf      	b.n	8007b6c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f003 0302 	and.w	r3, r3, #2
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d010      	beq.n	80079fa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	689a      	ldr	r2, [r3, #8]
 80079dc:	4b66      	ldr	r3, [pc, #408]	; (8007b78 <HAL_RCC_ClockConfig+0x1f0>)
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d908      	bls.n	80079fa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079e8:	4b63      	ldr	r3, [pc, #396]	; (8007b78 <HAL_RCC_ClockConfig+0x1f0>)
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	4960      	ldr	r1, [pc, #384]	; (8007b78 <HAL_RCC_ClockConfig+0x1f0>)
 80079f6:	4313      	orrs	r3, r2
 80079f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 0301 	and.w	r3, r3, #1
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d04c      	beq.n	8007aa0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	2b03      	cmp	r3, #3
 8007a0c:	d107      	bne.n	8007a1e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a0e:	4b5a      	ldr	r3, [pc, #360]	; (8007b78 <HAL_RCC_ClockConfig+0x1f0>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d121      	bne.n	8007a5e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e0a6      	b.n	8007b6c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	d107      	bne.n	8007a36 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a26:	4b54      	ldr	r3, [pc, #336]	; (8007b78 <HAL_RCC_ClockConfig+0x1f0>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d115      	bne.n	8007a5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e09a      	b.n	8007b6c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d107      	bne.n	8007a4e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007a3e:	4b4e      	ldr	r3, [pc, #312]	; (8007b78 <HAL_RCC_ClockConfig+0x1f0>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f003 0302 	and.w	r3, r3, #2
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d109      	bne.n	8007a5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e08e      	b.n	8007b6c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007a4e:	4b4a      	ldr	r3, [pc, #296]	; (8007b78 <HAL_RCC_ClockConfig+0x1f0>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d101      	bne.n	8007a5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e086      	b.n	8007b6c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007a5e:	4b46      	ldr	r3, [pc, #280]	; (8007b78 <HAL_RCC_ClockConfig+0x1f0>)
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	f023 0203 	bic.w	r2, r3, #3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	4943      	ldr	r1, [pc, #268]	; (8007b78 <HAL_RCC_ClockConfig+0x1f0>)
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a70:	f7fe fcd0 	bl	8006414 <HAL_GetTick>
 8007a74:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a76:	e00a      	b.n	8007a8e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a78:	f7fe fccc 	bl	8006414 <HAL_GetTick>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	1ad3      	subs	r3, r2, r3
 8007a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d901      	bls.n	8007a8e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	e06e      	b.n	8007b6c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a8e:	4b3a      	ldr	r3, [pc, #232]	; (8007b78 <HAL_RCC_ClockConfig+0x1f0>)
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	f003 020c 	and.w	r2, r3, #12
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d1eb      	bne.n	8007a78 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 0302 	and.w	r3, r3, #2
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d010      	beq.n	8007ace <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	689a      	ldr	r2, [r3, #8]
 8007ab0:	4b31      	ldr	r3, [pc, #196]	; (8007b78 <HAL_RCC_ClockConfig+0x1f0>)
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d208      	bcs.n	8007ace <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007abc:	4b2e      	ldr	r3, [pc, #184]	; (8007b78 <HAL_RCC_ClockConfig+0x1f0>)
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	492b      	ldr	r1, [pc, #172]	; (8007b78 <HAL_RCC_ClockConfig+0x1f0>)
 8007aca:	4313      	orrs	r3, r2
 8007acc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007ace:	4b29      	ldr	r3, [pc, #164]	; (8007b74 <HAL_RCC_ClockConfig+0x1ec>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f003 0307 	and.w	r3, r3, #7
 8007ad6:	683a      	ldr	r2, [r7, #0]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d210      	bcs.n	8007afe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007adc:	4b25      	ldr	r3, [pc, #148]	; (8007b74 <HAL_RCC_ClockConfig+0x1ec>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f023 0207 	bic.w	r2, r3, #7
 8007ae4:	4923      	ldr	r1, [pc, #140]	; (8007b74 <HAL_RCC_ClockConfig+0x1ec>)
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007aec:	4b21      	ldr	r3, [pc, #132]	; (8007b74 <HAL_RCC_ClockConfig+0x1ec>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f003 0307 	and.w	r3, r3, #7
 8007af4:	683a      	ldr	r2, [r7, #0]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d001      	beq.n	8007afe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e036      	b.n	8007b6c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f003 0304 	and.w	r3, r3, #4
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d008      	beq.n	8007b1c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b0a:	4b1b      	ldr	r3, [pc, #108]	; (8007b78 <HAL_RCC_ClockConfig+0x1f0>)
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	4918      	ldr	r1, [pc, #96]	; (8007b78 <HAL_RCC_ClockConfig+0x1f0>)
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 0308 	and.w	r3, r3, #8
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d009      	beq.n	8007b3c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007b28:	4b13      	ldr	r3, [pc, #76]	; (8007b78 <HAL_RCC_ClockConfig+0x1f0>)
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	691b      	ldr	r3, [r3, #16]
 8007b34:	00db      	lsls	r3, r3, #3
 8007b36:	4910      	ldr	r1, [pc, #64]	; (8007b78 <HAL_RCC_ClockConfig+0x1f0>)
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007b3c:	f000 f824 	bl	8007b88 <HAL_RCC_GetSysClockFreq>
 8007b40:	4602      	mov	r2, r0
 8007b42:	4b0d      	ldr	r3, [pc, #52]	; (8007b78 <HAL_RCC_ClockConfig+0x1f0>)
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	091b      	lsrs	r3, r3, #4
 8007b48:	f003 030f 	and.w	r3, r3, #15
 8007b4c:	490b      	ldr	r1, [pc, #44]	; (8007b7c <HAL_RCC_ClockConfig+0x1f4>)
 8007b4e:	5ccb      	ldrb	r3, [r1, r3]
 8007b50:	f003 031f 	and.w	r3, r3, #31
 8007b54:	fa22 f303 	lsr.w	r3, r2, r3
 8007b58:	4a09      	ldr	r2, [pc, #36]	; (8007b80 <HAL_RCC_ClockConfig+0x1f8>)
 8007b5a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007b5c:	4b09      	ldr	r3, [pc, #36]	; (8007b84 <HAL_RCC_ClockConfig+0x1fc>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7fe fc1b 	bl	800639c <HAL_InitTick>
 8007b66:	4603      	mov	r3, r0
 8007b68:	72fb      	strb	r3, [r7, #11]

  return status;
 8007b6a:	7afb      	ldrb	r3, [r7, #11]
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	40022000 	.word	0x40022000
 8007b78:	40021000 	.word	0x40021000
 8007b7c:	0800bf1c 	.word	0x0800bf1c
 8007b80:	20000070 	.word	0x20000070
 8007b84:	20000068 	.word	0x20000068

08007b88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b089      	sub	sp, #36	; 0x24
 8007b8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	61fb      	str	r3, [r7, #28]
 8007b92:	2300      	movs	r3, #0
 8007b94:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b96:	4b3e      	ldr	r3, [pc, #248]	; (8007c90 <HAL_RCC_GetSysClockFreq+0x108>)
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	f003 030c 	and.w	r3, r3, #12
 8007b9e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007ba0:	4b3b      	ldr	r3, [pc, #236]	; (8007c90 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	f003 0303 	and.w	r3, r3, #3
 8007ba8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d005      	beq.n	8007bbc <HAL_RCC_GetSysClockFreq+0x34>
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	2b0c      	cmp	r3, #12
 8007bb4:	d121      	bne.n	8007bfa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d11e      	bne.n	8007bfa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007bbc:	4b34      	ldr	r3, [pc, #208]	; (8007c90 <HAL_RCC_GetSysClockFreq+0x108>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f003 0308 	and.w	r3, r3, #8
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d107      	bne.n	8007bd8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007bc8:	4b31      	ldr	r3, [pc, #196]	; (8007c90 <HAL_RCC_GetSysClockFreq+0x108>)
 8007bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bce:	0a1b      	lsrs	r3, r3, #8
 8007bd0:	f003 030f 	and.w	r3, r3, #15
 8007bd4:	61fb      	str	r3, [r7, #28]
 8007bd6:	e005      	b.n	8007be4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007bd8:	4b2d      	ldr	r3, [pc, #180]	; (8007c90 <HAL_RCC_GetSysClockFreq+0x108>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	091b      	lsrs	r3, r3, #4
 8007bde:	f003 030f 	and.w	r3, r3, #15
 8007be2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007be4:	4a2b      	ldr	r2, [pc, #172]	; (8007c94 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d10d      	bne.n	8007c10 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007bf8:	e00a      	b.n	8007c10 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	2b04      	cmp	r3, #4
 8007bfe:	d102      	bne.n	8007c06 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007c00:	4b25      	ldr	r3, [pc, #148]	; (8007c98 <HAL_RCC_GetSysClockFreq+0x110>)
 8007c02:	61bb      	str	r3, [r7, #24]
 8007c04:	e004      	b.n	8007c10 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	2b08      	cmp	r3, #8
 8007c0a:	d101      	bne.n	8007c10 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007c0c:	4b23      	ldr	r3, [pc, #140]	; (8007c9c <HAL_RCC_GetSysClockFreq+0x114>)
 8007c0e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	2b0c      	cmp	r3, #12
 8007c14:	d134      	bne.n	8007c80 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007c16:	4b1e      	ldr	r3, [pc, #120]	; (8007c90 <HAL_RCC_GetSysClockFreq+0x108>)
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	f003 0303 	and.w	r3, r3, #3
 8007c1e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	2b02      	cmp	r3, #2
 8007c24:	d003      	beq.n	8007c2e <HAL_RCC_GetSysClockFreq+0xa6>
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	2b03      	cmp	r3, #3
 8007c2a:	d003      	beq.n	8007c34 <HAL_RCC_GetSysClockFreq+0xac>
 8007c2c:	e005      	b.n	8007c3a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007c2e:	4b1a      	ldr	r3, [pc, #104]	; (8007c98 <HAL_RCC_GetSysClockFreq+0x110>)
 8007c30:	617b      	str	r3, [r7, #20]
      break;
 8007c32:	e005      	b.n	8007c40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007c34:	4b19      	ldr	r3, [pc, #100]	; (8007c9c <HAL_RCC_GetSysClockFreq+0x114>)
 8007c36:	617b      	str	r3, [r7, #20]
      break;
 8007c38:	e002      	b.n	8007c40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007c3a:	69fb      	ldr	r3, [r7, #28]
 8007c3c:	617b      	str	r3, [r7, #20]
      break;
 8007c3e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007c40:	4b13      	ldr	r3, [pc, #76]	; (8007c90 <HAL_RCC_GetSysClockFreq+0x108>)
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	091b      	lsrs	r3, r3, #4
 8007c46:	f003 0307 	and.w	r3, r3, #7
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007c4e:	4b10      	ldr	r3, [pc, #64]	; (8007c90 <HAL_RCC_GetSysClockFreq+0x108>)
 8007c50:	68db      	ldr	r3, [r3, #12]
 8007c52:	0a1b      	lsrs	r3, r3, #8
 8007c54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c58:	697a      	ldr	r2, [r7, #20]
 8007c5a:	fb03 f202 	mul.w	r2, r3, r2
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c64:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007c66:	4b0a      	ldr	r3, [pc, #40]	; (8007c90 <HAL_RCC_GetSysClockFreq+0x108>)
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	0e5b      	lsrs	r3, r3, #25
 8007c6c:	f003 0303 	and.w	r3, r3, #3
 8007c70:	3301      	adds	r3, #1
 8007c72:	005b      	lsls	r3, r3, #1
 8007c74:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007c76:	697a      	ldr	r2, [r7, #20]
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c7e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007c80:	69bb      	ldr	r3, [r7, #24]
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3724      	adds	r7, #36	; 0x24
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr
 8007c8e:	bf00      	nop
 8007c90:	40021000 	.word	0x40021000
 8007c94:	0800bf2c 	.word	0x0800bf2c
 8007c98:	00f42400 	.word	0x00f42400
 8007c9c:	02dc6c00 	.word	0x02dc6c00

08007ca0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b086      	sub	sp, #24
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007ca8:	2300      	movs	r3, #0
 8007caa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007cac:	4b2a      	ldr	r3, [pc, #168]	; (8007d58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d003      	beq.n	8007cc0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007cb8:	f7ff f9ee 	bl	8007098 <HAL_PWREx_GetVoltageRange>
 8007cbc:	6178      	str	r0, [r7, #20]
 8007cbe:	e014      	b.n	8007cea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007cc0:	4b25      	ldr	r3, [pc, #148]	; (8007d58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cc4:	4a24      	ldr	r2, [pc, #144]	; (8007d58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007cc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cca:	6593      	str	r3, [r2, #88]	; 0x58
 8007ccc:	4b22      	ldr	r3, [pc, #136]	; (8007d58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cd4:	60fb      	str	r3, [r7, #12]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007cd8:	f7ff f9de 	bl	8007098 <HAL_PWREx_GetVoltageRange>
 8007cdc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007cde:	4b1e      	ldr	r3, [pc, #120]	; (8007d58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ce2:	4a1d      	ldr	r2, [pc, #116]	; (8007d58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007ce4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ce8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cf0:	d10b      	bne.n	8007d0a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2b80      	cmp	r3, #128	; 0x80
 8007cf6:	d919      	bls.n	8007d2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2ba0      	cmp	r3, #160	; 0xa0
 8007cfc:	d902      	bls.n	8007d04 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007cfe:	2302      	movs	r3, #2
 8007d00:	613b      	str	r3, [r7, #16]
 8007d02:	e013      	b.n	8007d2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007d04:	2301      	movs	r3, #1
 8007d06:	613b      	str	r3, [r7, #16]
 8007d08:	e010      	b.n	8007d2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2b80      	cmp	r3, #128	; 0x80
 8007d0e:	d902      	bls.n	8007d16 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007d10:	2303      	movs	r3, #3
 8007d12:	613b      	str	r3, [r7, #16]
 8007d14:	e00a      	b.n	8007d2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2b80      	cmp	r3, #128	; 0x80
 8007d1a:	d102      	bne.n	8007d22 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007d1c:	2302      	movs	r3, #2
 8007d1e:	613b      	str	r3, [r7, #16]
 8007d20:	e004      	b.n	8007d2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2b70      	cmp	r3, #112	; 0x70
 8007d26:	d101      	bne.n	8007d2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007d28:	2301      	movs	r3, #1
 8007d2a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007d2c:	4b0b      	ldr	r3, [pc, #44]	; (8007d5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f023 0207 	bic.w	r2, r3, #7
 8007d34:	4909      	ldr	r1, [pc, #36]	; (8007d5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007d3c:	4b07      	ldr	r3, [pc, #28]	; (8007d5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f003 0307 	and.w	r3, r3, #7
 8007d44:	693a      	ldr	r2, [r7, #16]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d001      	beq.n	8007d4e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e000      	b.n	8007d50 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3718      	adds	r7, #24
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	40021000 	.word	0x40021000
 8007d5c:	40022000 	.word	0x40022000

08007d60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b086      	sub	sp, #24
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007d68:	2300      	movs	r3, #0
 8007d6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d031      	beq.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d80:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007d84:	d01a      	beq.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8007d86:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007d8a:	d814      	bhi.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d009      	beq.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007d90:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007d94:	d10f      	bne.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8007d96:	4b5d      	ldr	r3, [pc, #372]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	4a5c      	ldr	r2, [pc, #368]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007da0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007da2:	e00c      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	3304      	adds	r3, #4
 8007da8:	2100      	movs	r1, #0
 8007daa:	4618      	mov	r0, r3
 8007dac:	f000 f9f0 	bl	8008190 <RCCEx_PLLSAI1_Config>
 8007db0:	4603      	mov	r3, r0
 8007db2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007db4:	e003      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	74fb      	strb	r3, [r7, #19]
      break;
 8007dba:	e000      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8007dbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dbe:	7cfb      	ldrb	r3, [r7, #19]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d10b      	bne.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007dc4:	4b51      	ldr	r3, [pc, #324]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dd2:	494e      	ldr	r1, [pc, #312]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007dda:	e001      	b.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ddc:	7cfb      	ldrb	r3, [r7, #19]
 8007dde:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	f000 809e 	beq.w	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007dee:	2300      	movs	r3, #0
 8007df0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007df2:	4b46      	ldr	r3, [pc, #280]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d101      	bne.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e000      	b.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8007e02:	2300      	movs	r3, #0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00d      	beq.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e08:	4b40      	ldr	r3, [pc, #256]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e0c:	4a3f      	ldr	r2, [pc, #252]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e12:	6593      	str	r3, [r2, #88]	; 0x58
 8007e14:	4b3d      	ldr	r3, [pc, #244]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e1c:	60bb      	str	r3, [r7, #8]
 8007e1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e20:	2301      	movs	r3, #1
 8007e22:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007e24:	4b3a      	ldr	r3, [pc, #232]	; (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a39      	ldr	r2, [pc, #228]	; (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007e30:	f7fe faf0 	bl	8006414 <HAL_GetTick>
 8007e34:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007e36:	e009      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e38:	f7fe faec 	bl	8006414 <HAL_GetTick>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	1ad3      	subs	r3, r2, r3
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	d902      	bls.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8007e46:	2303      	movs	r3, #3
 8007e48:	74fb      	strb	r3, [r7, #19]
        break;
 8007e4a:	e005      	b.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007e4c:	4b30      	ldr	r3, [pc, #192]	; (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d0ef      	beq.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8007e58:	7cfb      	ldrb	r3, [r7, #19]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d15a      	bne.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007e5e:	4b2b      	ldr	r3, [pc, #172]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e68:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d01e      	beq.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e74:	697a      	ldr	r2, [r7, #20]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d019      	beq.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007e7a:	4b24      	ldr	r3, [pc, #144]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e84:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007e86:	4b21      	ldr	r3, [pc, #132]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e8c:	4a1f      	ldr	r2, [pc, #124]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007e8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007e96:	4b1d      	ldr	r3, [pc, #116]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e9c:	4a1b      	ldr	r2, [pc, #108]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ea2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007ea6:	4a19      	ldr	r2, [pc, #100]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	f003 0301 	and.w	r3, r3, #1
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d016      	beq.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eb8:	f7fe faac 	bl	8006414 <HAL_GetTick>
 8007ebc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ebe:	e00b      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ec0:	f7fe faa8 	bl	8006414 <HAL_GetTick>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d902      	bls.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	74fb      	strb	r3, [r7, #19]
            break;
 8007ed6:	e006      	b.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ed8:	4b0c      	ldr	r3, [pc, #48]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ede:	f003 0302 	and.w	r3, r3, #2
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d0ec      	beq.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8007ee6:	7cfb      	ldrb	r3, [r7, #19]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d10b      	bne.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007eec:	4b07      	ldr	r3, [pc, #28]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ef2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007efa:	4904      	ldr	r1, [pc, #16]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007efc:	4313      	orrs	r3, r2
 8007efe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007f02:	e009      	b.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007f04:	7cfb      	ldrb	r3, [r7, #19]
 8007f06:	74bb      	strb	r3, [r7, #18]
 8007f08:	e006      	b.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8007f0a:	bf00      	nop
 8007f0c:	40021000 	.word	0x40021000
 8007f10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f14:	7cfb      	ldrb	r3, [r7, #19]
 8007f16:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007f18:	7c7b      	ldrb	r3, [r7, #17]
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d105      	bne.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f1e:	4b9b      	ldr	r3, [pc, #620]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f22:	4a9a      	ldr	r2, [pc, #616]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007f24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f28:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f003 0301 	and.w	r3, r3, #1
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d00a      	beq.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007f36:	4b95      	ldr	r3, [pc, #596]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f3c:	f023 0203 	bic.w	r2, r3, #3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6a1b      	ldr	r3, [r3, #32]
 8007f44:	4991      	ldr	r1, [pc, #580]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007f46:	4313      	orrs	r3, r2
 8007f48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f003 0302 	and.w	r3, r3, #2
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d00a      	beq.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007f58:	4b8c      	ldr	r3, [pc, #560]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f5e:	f023 020c 	bic.w	r2, r3, #12
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f66:	4989      	ldr	r1, [pc, #548]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f003 0304 	and.w	r3, r3, #4
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00a      	beq.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007f7a:	4b84      	ldr	r3, [pc, #528]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f80:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f88:	4980      	ldr	r1, [pc, #512]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f003 0320 	and.w	r3, r3, #32
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d00a      	beq.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007f9c:	4b7b      	ldr	r3, [pc, #492]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fa2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007faa:	4978      	ldr	r1, [pc, #480]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007fac:	4313      	orrs	r3, r2
 8007fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00a      	beq.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007fbe:	4b73      	ldr	r3, [pc, #460]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fc4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fcc:	496f      	ldr	r1, [pc, #444]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d00a      	beq.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007fe0:	4b6a      	ldr	r3, [pc, #424]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fe6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fee:	4967      	ldr	r1, [pc, #412]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00a      	beq.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008002:	4b62      	ldr	r3, [pc, #392]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008008:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008010:	495e      	ldr	r1, [pc, #376]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008012:	4313      	orrs	r3, r2
 8008014:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008020:	2b00      	cmp	r3, #0
 8008022:	d00a      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008024:	4b59      	ldr	r3, [pc, #356]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800802a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008032:	4956      	ldr	r1, [pc, #344]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008034:	4313      	orrs	r3, r2
 8008036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00a      	beq.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008046:	4b51      	ldr	r3, [pc, #324]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800804c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008054:	494d      	ldr	r1, [pc, #308]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008056:	4313      	orrs	r3, r2
 8008058:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008064:	2b00      	cmp	r3, #0
 8008066:	d028      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008068:	4b48      	ldr	r3, [pc, #288]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800806a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800806e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008076:	4945      	ldr	r1, [pc, #276]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008078:	4313      	orrs	r3, r2
 800807a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008082:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008086:	d106      	bne.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008088:	4b40      	ldr	r3, [pc, #256]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	4a3f      	ldr	r2, [pc, #252]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800808e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008092:	60d3      	str	r3, [r2, #12]
 8008094:	e011      	b.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800809a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800809e:	d10c      	bne.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	3304      	adds	r3, #4
 80080a4:	2101      	movs	r1, #1
 80080a6:	4618      	mov	r0, r3
 80080a8:	f000 f872 	bl	8008190 <RCCEx_PLLSAI1_Config>
 80080ac:	4603      	mov	r3, r0
 80080ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80080b0:	7cfb      	ldrb	r3, [r7, #19]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d001      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 80080b6:	7cfb      	ldrb	r3, [r7, #19]
 80080b8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d028      	beq.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80080c6:	4b31      	ldr	r3, [pc, #196]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80080c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080d4:	492d      	ldr	r1, [pc, #180]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80080d6:	4313      	orrs	r3, r2
 80080d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080e4:	d106      	bne.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80080e6:	4b29      	ldr	r3, [pc, #164]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	4a28      	ldr	r2, [pc, #160]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80080ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080f0:	60d3      	str	r3, [r2, #12]
 80080f2:	e011      	b.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80080fc:	d10c      	bne.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	3304      	adds	r3, #4
 8008102:	2101      	movs	r1, #1
 8008104:	4618      	mov	r0, r3
 8008106:	f000 f843 	bl	8008190 <RCCEx_PLLSAI1_Config>
 800810a:	4603      	mov	r3, r0
 800810c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800810e:	7cfb      	ldrb	r3, [r7, #19]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d001      	beq.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8008114:	7cfb      	ldrb	r3, [r7, #19]
 8008116:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008120:	2b00      	cmp	r3, #0
 8008122:	d01c      	beq.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008124:	4b19      	ldr	r3, [pc, #100]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800812a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008132:	4916      	ldr	r1, [pc, #88]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008134:	4313      	orrs	r3, r2
 8008136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800813e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008142:	d10c      	bne.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	3304      	adds	r3, #4
 8008148:	2102      	movs	r1, #2
 800814a:	4618      	mov	r0, r3
 800814c:	f000 f820 	bl	8008190 <RCCEx_PLLSAI1_Config>
 8008150:	4603      	mov	r3, r0
 8008152:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008154:	7cfb      	ldrb	r3, [r7, #19]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d001      	beq.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 800815a:	7cfb      	ldrb	r3, [r7, #19]
 800815c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008166:	2b00      	cmp	r3, #0
 8008168:	d00a      	beq.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800816a:	4b08      	ldr	r3, [pc, #32]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800816c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008170:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008178:	4904      	ldr	r1, [pc, #16]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800817a:	4313      	orrs	r3, r2
 800817c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008180:	7cbb      	ldrb	r3, [r7, #18]
}
 8008182:	4618      	mov	r0, r3
 8008184:	3718      	adds	r7, #24
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	40021000 	.word	0x40021000

08008190 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800819a:	2300      	movs	r3, #0
 800819c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800819e:	4b74      	ldr	r3, [pc, #464]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e0>)
 80081a0:	68db      	ldr	r3, [r3, #12]
 80081a2:	f003 0303 	and.w	r3, r3, #3
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d018      	beq.n	80081dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80081aa:	4b71      	ldr	r3, [pc, #452]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e0>)
 80081ac:	68db      	ldr	r3, [r3, #12]
 80081ae:	f003 0203 	and.w	r2, r3, #3
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d10d      	bne.n	80081d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
       ||
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d009      	beq.n	80081d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80081c2:	4b6b      	ldr	r3, [pc, #428]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e0>)
 80081c4:	68db      	ldr	r3, [r3, #12]
 80081c6:	091b      	lsrs	r3, r3, #4
 80081c8:	f003 0307 	and.w	r3, r3, #7
 80081cc:	1c5a      	adds	r2, r3, #1
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	685b      	ldr	r3, [r3, #4]
       ||
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d047      	beq.n	8008266 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80081d6:	2301      	movs	r3, #1
 80081d8:	73fb      	strb	r3, [r7, #15]
 80081da:	e044      	b.n	8008266 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	2b03      	cmp	r3, #3
 80081e2:	d018      	beq.n	8008216 <RCCEx_PLLSAI1_Config+0x86>
 80081e4:	2b03      	cmp	r3, #3
 80081e6:	d825      	bhi.n	8008234 <RCCEx_PLLSAI1_Config+0xa4>
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d002      	beq.n	80081f2 <RCCEx_PLLSAI1_Config+0x62>
 80081ec:	2b02      	cmp	r3, #2
 80081ee:	d009      	beq.n	8008204 <RCCEx_PLLSAI1_Config+0x74>
 80081f0:	e020      	b.n	8008234 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80081f2:	4b5f      	ldr	r3, [pc, #380]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e0>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f003 0302 	and.w	r3, r3, #2
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d11d      	bne.n	800823a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008202:	e01a      	b.n	800823a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008204:	4b5a      	ldr	r3, [pc, #360]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800820c:	2b00      	cmp	r3, #0
 800820e:	d116      	bne.n	800823e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008214:	e013      	b.n	800823e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008216:	4b56      	ldr	r3, [pc, #344]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800821e:	2b00      	cmp	r3, #0
 8008220:	d10f      	bne.n	8008242 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008222:	4b53      	ldr	r3, [pc, #332]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800822a:	2b00      	cmp	r3, #0
 800822c:	d109      	bne.n	8008242 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008232:	e006      	b.n	8008242 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008234:	2301      	movs	r3, #1
 8008236:	73fb      	strb	r3, [r7, #15]
      break;
 8008238:	e004      	b.n	8008244 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800823a:	bf00      	nop
 800823c:	e002      	b.n	8008244 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800823e:	bf00      	nop
 8008240:	e000      	b.n	8008244 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008242:	bf00      	nop
    }

    if(status == HAL_OK)
 8008244:	7bfb      	ldrb	r3, [r7, #15]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d10d      	bne.n	8008266 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800824a:	4b49      	ldr	r3, [pc, #292]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e0>)
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6819      	ldr	r1, [r3, #0]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	3b01      	subs	r3, #1
 800825c:	011b      	lsls	r3, r3, #4
 800825e:	430b      	orrs	r3, r1
 8008260:	4943      	ldr	r1, [pc, #268]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008262:	4313      	orrs	r3, r2
 8008264:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008266:	7bfb      	ldrb	r3, [r7, #15]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d17c      	bne.n	8008366 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800826c:	4b40      	ldr	r3, [pc, #256]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e0>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a3f      	ldr	r2, [pc, #252]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008272:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008276:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008278:	f7fe f8cc 	bl	8006414 <HAL_GetTick>
 800827c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800827e:	e009      	b.n	8008294 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008280:	f7fe f8c8 	bl	8006414 <HAL_GetTick>
 8008284:	4602      	mov	r2, r0
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	1ad3      	subs	r3, r2, r3
 800828a:	2b02      	cmp	r3, #2
 800828c:	d902      	bls.n	8008294 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800828e:	2303      	movs	r3, #3
 8008290:	73fb      	strb	r3, [r7, #15]
        break;
 8008292:	e005      	b.n	80082a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008294:	4b36      	ldr	r3, [pc, #216]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800829c:	2b00      	cmp	r3, #0
 800829e:	d1ef      	bne.n	8008280 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80082a0:	7bfb      	ldrb	r3, [r7, #15]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d15f      	bne.n	8008366 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d110      	bne.n	80082ce <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80082ac:	4b30      	ldr	r3, [pc, #192]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e0>)
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80082b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	6892      	ldr	r2, [r2, #8]
 80082bc:	0211      	lsls	r1, r2, #8
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	68d2      	ldr	r2, [r2, #12]
 80082c2:	06d2      	lsls	r2, r2, #27
 80082c4:	430a      	orrs	r2, r1
 80082c6:	492a      	ldr	r1, [pc, #168]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e0>)
 80082c8:	4313      	orrs	r3, r2
 80082ca:	610b      	str	r3, [r1, #16]
 80082cc:	e027      	b.n	800831e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d112      	bne.n	80082fa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80082d4:	4b26      	ldr	r3, [pc, #152]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e0>)
 80082d6:	691b      	ldr	r3, [r3, #16]
 80082d8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80082dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	6892      	ldr	r2, [r2, #8]
 80082e4:	0211      	lsls	r1, r2, #8
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	6912      	ldr	r2, [r2, #16]
 80082ea:	0852      	lsrs	r2, r2, #1
 80082ec:	3a01      	subs	r2, #1
 80082ee:	0552      	lsls	r2, r2, #21
 80082f0:	430a      	orrs	r2, r1
 80082f2:	491f      	ldr	r1, [pc, #124]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e0>)
 80082f4:	4313      	orrs	r3, r2
 80082f6:	610b      	str	r3, [r1, #16]
 80082f8:	e011      	b.n	800831e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80082fa:	4b1d      	ldr	r3, [pc, #116]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e0>)
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008302:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	6892      	ldr	r2, [r2, #8]
 800830a:	0211      	lsls	r1, r2, #8
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	6952      	ldr	r2, [r2, #20]
 8008310:	0852      	lsrs	r2, r2, #1
 8008312:	3a01      	subs	r2, #1
 8008314:	0652      	lsls	r2, r2, #25
 8008316:	430a      	orrs	r2, r1
 8008318:	4915      	ldr	r1, [pc, #84]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e0>)
 800831a:	4313      	orrs	r3, r2
 800831c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800831e:	4b14      	ldr	r3, [pc, #80]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a13      	ldr	r2, [pc, #76]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008324:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008328:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800832a:	f7fe f873 	bl	8006414 <HAL_GetTick>
 800832e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008330:	e009      	b.n	8008346 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008332:	f7fe f86f 	bl	8006414 <HAL_GetTick>
 8008336:	4602      	mov	r2, r0
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	1ad3      	subs	r3, r2, r3
 800833c:	2b02      	cmp	r3, #2
 800833e:	d902      	bls.n	8008346 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8008340:	2303      	movs	r3, #3
 8008342:	73fb      	strb	r3, [r7, #15]
          break;
 8008344:	e005      	b.n	8008352 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008346:	4b0a      	ldr	r3, [pc, #40]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800834e:	2b00      	cmp	r3, #0
 8008350:	d0ef      	beq.n	8008332 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8008352:	7bfb      	ldrb	r3, [r7, #15]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d106      	bne.n	8008366 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008358:	4b05      	ldr	r3, [pc, #20]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e0>)
 800835a:	691a      	ldr	r2, [r3, #16]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	699b      	ldr	r3, [r3, #24]
 8008360:	4903      	ldr	r1, [pc, #12]	; (8008370 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008362:	4313      	orrs	r3, r2
 8008364:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008366:	7bfb      	ldrb	r3, [r7, #15]
}
 8008368:	4618      	mov	r0, r3
 800836a:	3710      	adds	r7, #16
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}
 8008370:	40021000 	.word	0x40021000

08008374 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d06c      	beq.n	8008460 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800838c:	b2db      	uxtb	r3, r3
 800838e:	2b00      	cmp	r3, #0
 8008390:	d106      	bne.n	80083a0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f001 ff3a 	bl	800a214 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2202      	movs	r2, #2
 80083a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	22ca      	movs	r2, #202	; 0xca
 80083ae:	625a      	str	r2, [r3, #36]	; 0x24
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	2253      	movs	r2, #83	; 0x53
 80083b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f000 f87c 	bl	80084b6 <RTC_EnterInitMode>
 80083be:	4603      	mov	r3, r0
 80083c0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80083c2:	7bfb      	ldrb	r3, [r7, #15]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d14b      	bne.n	8008460 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	6812      	ldr	r2, [r2, #0]
 80083d2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80083d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083da:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	6899      	ldr	r1, [r3, #8]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	685a      	ldr	r2, [r3, #4]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	691b      	ldr	r3, [r3, #16]
 80083ea:	431a      	orrs	r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	699b      	ldr	r3, [r3, #24]
 80083f0:	431a      	orrs	r2, r3
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	430a      	orrs	r2, r1
 80083f8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	68d2      	ldr	r2, [r2, #12]
 8008402:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	6919      	ldr	r1, [r3, #16]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	041a      	lsls	r2, r3, #16
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	430a      	orrs	r2, r1
 8008416:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 f87f 	bl	800851c <RTC_ExitInitMode>
 800841e:	4603      	mov	r3, r0
 8008420:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8008422:	7bfb      	ldrb	r3, [r7, #15]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d11b      	bne.n	8008460 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f022 0203 	bic.w	r2, r2, #3
 8008436:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	69da      	ldr	r2, [r3, #28]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	695b      	ldr	r3, [r3, #20]
 8008446:	431a      	orrs	r2, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	430a      	orrs	r2, r1
 800844e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	22ff      	movs	r2, #255	; 0xff
 8008456:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2201      	movs	r2, #1
 800845c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8008460:	7bfb      	ldrb	r3, [r7, #15]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b084      	sub	sp, #16
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	68da      	ldr	r2, [r3, #12]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008480:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8008482:	f7fd ffc7 	bl	8006414 <HAL_GetTick>
 8008486:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008488:	e009      	b.n	800849e <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800848a:	f7fd ffc3 	bl	8006414 <HAL_GetTick>
 800848e:	4602      	mov	r2, r0
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	1ad3      	subs	r3, r2, r3
 8008494:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008498:	d901      	bls.n	800849e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800849a:	2303      	movs	r3, #3
 800849c:	e007      	b.n	80084ae <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	68db      	ldr	r3, [r3, #12]
 80084a4:	f003 0320 	and.w	r3, r3, #32
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d0ee      	beq.n	800848a <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80084ac:	2300      	movs	r3, #0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b084      	sub	sp, #16
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80084be:	2300      	movs	r3, #0
 80084c0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d120      	bne.n	8008512 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80084d8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80084da:	f7fd ff9b 	bl	8006414 <HAL_GetTick>
 80084de:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80084e0:	e00d      	b.n	80084fe <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80084e2:	f7fd ff97 	bl	8006414 <HAL_GetTick>
 80084e6:	4602      	mov	r2, r0
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	1ad3      	subs	r3, r2, r3
 80084ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80084f0:	d905      	bls.n	80084fe <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80084f2:	2303      	movs	r3, #3
 80084f4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2203      	movs	r2, #3
 80084fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008508:	2b00      	cmp	r3, #0
 800850a:	d102      	bne.n	8008512 <RTC_EnterInitMode+0x5c>
 800850c:	7bfb      	ldrb	r3, [r7, #15]
 800850e:	2b03      	cmp	r3, #3
 8008510:	d1e7      	bne.n	80084e2 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8008512:	7bfb      	ldrb	r3, [r7, #15]
}
 8008514:	4618      	mov	r0, r3
 8008516:	3710      	adds	r7, #16
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008524:	2300      	movs	r3, #0
 8008526:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8008528:	4b1a      	ldr	r3, [pc, #104]	; (8008594 <RTC_ExitInitMode+0x78>)
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	4a19      	ldr	r2, [pc, #100]	; (8008594 <RTC_ExitInitMode+0x78>)
 800852e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008532:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008534:	4b17      	ldr	r3, [pc, #92]	; (8008594 <RTC_ExitInitMode+0x78>)
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	f003 0320 	and.w	r3, r3, #32
 800853c:	2b00      	cmp	r3, #0
 800853e:	d10c      	bne.n	800855a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f7ff ff92 	bl	800846a <HAL_RTC_WaitForSynchro>
 8008546:	4603      	mov	r3, r0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d01e      	beq.n	800858a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2203      	movs	r2, #3
 8008550:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008554:	2303      	movs	r3, #3
 8008556:	73fb      	strb	r3, [r7, #15]
 8008558:	e017      	b.n	800858a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800855a:	4b0e      	ldr	r3, [pc, #56]	; (8008594 <RTC_ExitInitMode+0x78>)
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	4a0d      	ldr	r2, [pc, #52]	; (8008594 <RTC_ExitInitMode+0x78>)
 8008560:	f023 0320 	bic.w	r3, r3, #32
 8008564:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f7ff ff7f 	bl	800846a <HAL_RTC_WaitForSynchro>
 800856c:	4603      	mov	r3, r0
 800856e:	2b00      	cmp	r3, #0
 8008570:	d005      	beq.n	800857e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2203      	movs	r2, #3
 8008576:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800857a:	2303      	movs	r3, #3
 800857c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800857e:	4b05      	ldr	r3, [pc, #20]	; (8008594 <RTC_ExitInitMode+0x78>)
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	4a04      	ldr	r2, [pc, #16]	; (8008594 <RTC_ExitInitMode+0x78>)
 8008584:	f043 0320 	orr.w	r3, r3, #32
 8008588:	6093      	str	r3, [r2, #8]
  }

  return status;
 800858a:	7bfb      	ldrb	r3, [r7, #15]
}
 800858c:	4618      	mov	r0, r3
 800858e:	3710      	adds	r7, #16
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}
 8008594:	40002800 	.word	0x40002800

08008598 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d101      	bne.n	80085aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	e049      	b.n	800863e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d106      	bne.n	80085c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2200      	movs	r2, #0
 80085ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f001 fe44 	bl	800a24c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2202      	movs	r2, #2
 80085c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	3304      	adds	r3, #4
 80085d4:	4619      	mov	r1, r3
 80085d6:	4610      	mov	r0, r2
 80085d8:	f000 fe2e 	bl	8009238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2201      	movs	r2, #1
 8008610:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2201      	movs	r2, #1
 8008618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2201      	movs	r2, #1
 8008628:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2201      	movs	r2, #1
 8008630:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2201      	movs	r2, #1
 8008638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800863c:	2300      	movs	r3, #0
}
 800863e:	4618      	mov	r0, r3
 8008640:	3708      	adds	r7, #8
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b082      	sub	sp, #8
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d101      	bne.n	8008658 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008654:	2301      	movs	r3, #1
 8008656:	e049      	b.n	80086ec <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800865e:	b2db      	uxtb	r3, r3
 8008660:	2b00      	cmp	r3, #0
 8008662:	d106      	bne.n	8008672 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f001 fee7 	bl	800a440 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2202      	movs	r2, #2
 8008676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	3304      	adds	r3, #4
 8008682:	4619      	mov	r1, r3
 8008684:	4610      	mov	r0, r2
 8008686:	f000 fdd7 	bl	8009238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2201      	movs	r2, #1
 800868e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2201      	movs	r2, #1
 8008696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2201      	movs	r2, #1
 800869e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2201      	movs	r2, #1
 80086a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2201      	movs	r2, #1
 80086ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2201      	movs	r2, #1
 80086b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2201      	movs	r2, #1
 80086be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2201      	movs	r2, #1
 80086c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2201      	movs	r2, #1
 80086ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2201      	movs	r2, #1
 80086d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2201      	movs	r2, #1
 80086de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2201      	movs	r2, #1
 80086e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80086ea:	2300      	movs	r3, #0
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3708      	adds	r7, #8
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b086      	sub	sp, #24
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	60b9      	str	r1, [r7, #8]
 80086fe:	607a      	str	r2, [r7, #4]
 8008700:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8008702:	2300      	movs	r3, #0
 8008704:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d109      	bne.n	8008720 <HAL_TIM_PWM_Start_DMA+0x2c>
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008712:	b2db      	uxtb	r3, r3
 8008714:	2b02      	cmp	r3, #2
 8008716:	bf0c      	ite	eq
 8008718:	2301      	moveq	r3, #1
 800871a:	2300      	movne	r3, #0
 800871c:	b2db      	uxtb	r3, r3
 800871e:	e03c      	b.n	800879a <HAL_TIM_PWM_Start_DMA+0xa6>
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	2b04      	cmp	r3, #4
 8008724:	d109      	bne.n	800873a <HAL_TIM_PWM_Start_DMA+0x46>
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800872c:	b2db      	uxtb	r3, r3
 800872e:	2b02      	cmp	r3, #2
 8008730:	bf0c      	ite	eq
 8008732:	2301      	moveq	r3, #1
 8008734:	2300      	movne	r3, #0
 8008736:	b2db      	uxtb	r3, r3
 8008738:	e02f      	b.n	800879a <HAL_TIM_PWM_Start_DMA+0xa6>
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	2b08      	cmp	r3, #8
 800873e:	d109      	bne.n	8008754 <HAL_TIM_PWM_Start_DMA+0x60>
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008746:	b2db      	uxtb	r3, r3
 8008748:	2b02      	cmp	r3, #2
 800874a:	bf0c      	ite	eq
 800874c:	2301      	moveq	r3, #1
 800874e:	2300      	movne	r3, #0
 8008750:	b2db      	uxtb	r3, r3
 8008752:	e022      	b.n	800879a <HAL_TIM_PWM_Start_DMA+0xa6>
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	2b0c      	cmp	r3, #12
 8008758:	d109      	bne.n	800876e <HAL_TIM_PWM_Start_DMA+0x7a>
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008760:	b2db      	uxtb	r3, r3
 8008762:	2b02      	cmp	r3, #2
 8008764:	bf0c      	ite	eq
 8008766:	2301      	moveq	r3, #1
 8008768:	2300      	movne	r3, #0
 800876a:	b2db      	uxtb	r3, r3
 800876c:	e015      	b.n	800879a <HAL_TIM_PWM_Start_DMA+0xa6>
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	2b10      	cmp	r3, #16
 8008772:	d109      	bne.n	8008788 <HAL_TIM_PWM_Start_DMA+0x94>
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800877a:	b2db      	uxtb	r3, r3
 800877c:	2b02      	cmp	r3, #2
 800877e:	bf0c      	ite	eq
 8008780:	2301      	moveq	r3, #1
 8008782:	2300      	movne	r3, #0
 8008784:	b2db      	uxtb	r3, r3
 8008786:	e008      	b.n	800879a <HAL_TIM_PWM_Start_DMA+0xa6>
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800878e:	b2db      	uxtb	r3, r3
 8008790:	2b02      	cmp	r3, #2
 8008792:	bf0c      	ite	eq
 8008794:	2301      	moveq	r3, #1
 8008796:	2300      	movne	r3, #0
 8008798:	b2db      	uxtb	r3, r3
 800879a:	2b00      	cmp	r3, #0
 800879c:	d001      	beq.n	80087a2 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800879e:	2302      	movs	r3, #2
 80087a0:	e18d      	b.n	8008abe <HAL_TIM_PWM_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d109      	bne.n	80087bc <HAL_TIM_PWM_Start_DMA+0xc8>
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	bf0c      	ite	eq
 80087b4:	2301      	moveq	r3, #1
 80087b6:	2300      	movne	r3, #0
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	e03c      	b.n	8008836 <HAL_TIM_PWM_Start_DMA+0x142>
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	2b04      	cmp	r3, #4
 80087c0:	d109      	bne.n	80087d6 <HAL_TIM_PWM_Start_DMA+0xe2>
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	2b01      	cmp	r3, #1
 80087cc:	bf0c      	ite	eq
 80087ce:	2301      	moveq	r3, #1
 80087d0:	2300      	movne	r3, #0
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	e02f      	b.n	8008836 <HAL_TIM_PWM_Start_DMA+0x142>
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	2b08      	cmp	r3, #8
 80087da:	d109      	bne.n	80087f0 <HAL_TIM_PWM_Start_DMA+0xfc>
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	bf0c      	ite	eq
 80087e8:	2301      	moveq	r3, #1
 80087ea:	2300      	movne	r3, #0
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	e022      	b.n	8008836 <HAL_TIM_PWM_Start_DMA+0x142>
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	2b0c      	cmp	r3, #12
 80087f4:	d109      	bne.n	800880a <HAL_TIM_PWM_Start_DMA+0x116>
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	2b01      	cmp	r3, #1
 8008800:	bf0c      	ite	eq
 8008802:	2301      	moveq	r3, #1
 8008804:	2300      	movne	r3, #0
 8008806:	b2db      	uxtb	r3, r3
 8008808:	e015      	b.n	8008836 <HAL_TIM_PWM_Start_DMA+0x142>
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	2b10      	cmp	r3, #16
 800880e:	d109      	bne.n	8008824 <HAL_TIM_PWM_Start_DMA+0x130>
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008816:	b2db      	uxtb	r3, r3
 8008818:	2b01      	cmp	r3, #1
 800881a:	bf0c      	ite	eq
 800881c:	2301      	moveq	r3, #1
 800881e:	2300      	movne	r3, #0
 8008820:	b2db      	uxtb	r3, r3
 8008822:	e008      	b.n	8008836 <HAL_TIM_PWM_Start_DMA+0x142>
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800882a:	b2db      	uxtb	r3, r3
 800882c:	2b01      	cmp	r3, #1
 800882e:	bf0c      	ite	eq
 8008830:	2301      	moveq	r3, #1
 8008832:	2300      	movne	r3, #0
 8008834:	b2db      	uxtb	r3, r3
 8008836:	2b00      	cmp	r3, #0
 8008838:	d034      	beq.n	80088a4 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d002      	beq.n	8008846 <HAL_TIM_PWM_Start_DMA+0x152>
 8008840:	887b      	ldrh	r3, [r7, #2]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d101      	bne.n	800884a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8008846:	2301      	movs	r3, #1
 8008848:	e139      	b.n	8008abe <HAL_TIM_PWM_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d104      	bne.n	800885a <HAL_TIM_PWM_Start_DMA+0x166>
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2202      	movs	r2, #2
 8008854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008858:	e026      	b.n	80088a8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	2b04      	cmp	r3, #4
 800885e:	d104      	bne.n	800886a <HAL_TIM_PWM_Start_DMA+0x176>
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2202      	movs	r2, #2
 8008864:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008868:	e01e      	b.n	80088a8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	2b08      	cmp	r3, #8
 800886e:	d104      	bne.n	800887a <HAL_TIM_PWM_Start_DMA+0x186>
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2202      	movs	r2, #2
 8008874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008878:	e016      	b.n	80088a8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	2b0c      	cmp	r3, #12
 800887e:	d104      	bne.n	800888a <HAL_TIM_PWM_Start_DMA+0x196>
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2202      	movs	r2, #2
 8008884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008888:	e00e      	b.n	80088a8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	2b10      	cmp	r3, #16
 800888e:	d104      	bne.n	800889a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2202      	movs	r2, #2
 8008894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008898:	e006      	b.n	80088a8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2202      	movs	r2, #2
 800889e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80088a2:	e001      	b.n	80088a8 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80088a4:	2301      	movs	r3, #1
 80088a6:	e10a      	b.n	8008abe <HAL_TIM_PWM_Start_DMA+0x3ca>
  }

  switch (Channel)
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	2b0c      	cmp	r3, #12
 80088ac:	f200 80ae 	bhi.w	8008a0c <HAL_TIM_PWM_Start_DMA+0x318>
 80088b0:	a201      	add	r2, pc, #4	; (adr r2, 80088b8 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80088b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b6:	bf00      	nop
 80088b8:	080088ed 	.word	0x080088ed
 80088bc:	08008a0d 	.word	0x08008a0d
 80088c0:	08008a0d 	.word	0x08008a0d
 80088c4:	08008a0d 	.word	0x08008a0d
 80088c8:	08008935 	.word	0x08008935
 80088cc:	08008a0d 	.word	0x08008a0d
 80088d0:	08008a0d 	.word	0x08008a0d
 80088d4:	08008a0d 	.word	0x08008a0d
 80088d8:	0800897d 	.word	0x0800897d
 80088dc:	08008a0d 	.word	0x08008a0d
 80088e0:	08008a0d 	.word	0x08008a0d
 80088e4:	08008a0d 	.word	0x08008a0d
 80088e8:	080089c5 	.word	0x080089c5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f0:	4a75      	ldr	r2, [pc, #468]	; (8008ac8 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80088f2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f8:	4a74      	ldr	r2, [pc, #464]	; (8008acc <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80088fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008900:	4a73      	ldr	r2, [pc, #460]	; (8008ad0 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8008902:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008908:	6879      	ldr	r1, [r7, #4]
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	3334      	adds	r3, #52	; 0x34
 8008910:	461a      	mov	r2, r3
 8008912:	887b      	ldrh	r3, [r7, #2]
 8008914:	f7fd ffce 	bl	80068b4 <HAL_DMA_Start_IT>
 8008918:	4603      	mov	r3, r0
 800891a:	2b00      	cmp	r3, #0
 800891c:	d001      	beq.n	8008922 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800891e:	2301      	movs	r3, #1
 8008920:	e0cd      	b.n	8008abe <HAL_TIM_PWM_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	68da      	ldr	r2, [r3, #12]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008930:	60da      	str	r2, [r3, #12]
      break;
 8008932:	e06e      	b.n	8008a12 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008938:	4a63      	ldr	r2, [pc, #396]	; (8008ac8 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800893a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008940:	4a62      	ldr	r2, [pc, #392]	; (8008acc <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8008942:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008948:	4a61      	ldr	r2, [pc, #388]	; (8008ad0 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800894a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008950:	6879      	ldr	r1, [r7, #4]
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	3338      	adds	r3, #56	; 0x38
 8008958:	461a      	mov	r2, r3
 800895a:	887b      	ldrh	r3, [r7, #2]
 800895c:	f7fd ffaa 	bl	80068b4 <HAL_DMA_Start_IT>
 8008960:	4603      	mov	r3, r0
 8008962:	2b00      	cmp	r3, #0
 8008964:	d001      	beq.n	800896a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	e0a9      	b.n	8008abe <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	68da      	ldr	r2, [r3, #12]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008978:	60da      	str	r2, [r3, #12]
      break;
 800897a:	e04a      	b.n	8008a12 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008980:	4a51      	ldr	r2, [pc, #324]	; (8008ac8 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8008982:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008988:	4a50      	ldr	r2, [pc, #320]	; (8008acc <HAL_TIM_PWM_Start_DMA+0x3d8>)
 800898a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008990:	4a4f      	ldr	r2, [pc, #316]	; (8008ad0 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8008992:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008998:	6879      	ldr	r1, [r7, #4]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	333c      	adds	r3, #60	; 0x3c
 80089a0:	461a      	mov	r2, r3
 80089a2:	887b      	ldrh	r3, [r7, #2]
 80089a4:	f7fd ff86 	bl	80068b4 <HAL_DMA_Start_IT>
 80089a8:	4603      	mov	r3, r0
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d001      	beq.n	80089b2 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80089ae:	2301      	movs	r3, #1
 80089b0:	e085      	b.n	8008abe <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	68da      	ldr	r2, [r3, #12]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089c0:	60da      	str	r2, [r3, #12]
      break;
 80089c2:	e026      	b.n	8008a12 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c8:	4a3f      	ldr	r2, [pc, #252]	; (8008ac8 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80089ca:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089d0:	4a3e      	ldr	r2, [pc, #248]	; (8008acc <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80089d2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089d8:	4a3d      	ldr	r2, [pc, #244]	; (8008ad0 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80089da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80089e0:	6879      	ldr	r1, [r7, #4]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	3340      	adds	r3, #64	; 0x40
 80089e8:	461a      	mov	r2, r3
 80089ea:	887b      	ldrh	r3, [r7, #2]
 80089ec:	f7fd ff62 	bl	80068b4 <HAL_DMA_Start_IT>
 80089f0:	4603      	mov	r3, r0
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d001      	beq.n	80089fa <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80089f6:	2301      	movs	r3, #1
 80089f8:	e061      	b.n	8008abe <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	68da      	ldr	r2, [r3, #12]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008a08:	60da      	str	r2, [r3, #12]
      break;
 8008a0a:	e002      	b.n	8008a12 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	75fb      	strb	r3, [r7, #23]
      break;
 8008a10:	bf00      	nop
  }

  if (status == HAL_OK)
 8008a12:	7dfb      	ldrb	r3, [r7, #23]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d151      	bne.n	8008abc <HAL_TIM_PWM_Start_DMA+0x3c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	68b9      	ldr	r1, [r7, #8]
 8008a20:	4618      	mov	r0, r3
 8008a22:	f000 ff85 	bl	8009930 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a2a      	ldr	r2, [pc, #168]	; (8008ad4 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d009      	beq.n	8008a44 <HAL_TIM_PWM_Start_DMA+0x350>
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a28      	ldr	r2, [pc, #160]	; (8008ad8 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d004      	beq.n	8008a44 <HAL_TIM_PWM_Start_DMA+0x350>
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a27      	ldr	r2, [pc, #156]	; (8008adc <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d101      	bne.n	8008a48 <HAL_TIM_PWM_Start_DMA+0x354>
 8008a44:	2301      	movs	r3, #1
 8008a46:	e000      	b.n	8008a4a <HAL_TIM_PWM_Start_DMA+0x356>
 8008a48:	2300      	movs	r3, #0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d007      	beq.n	8008a5e <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a5c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a1c      	ldr	r2, [pc, #112]	; (8008ad4 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d009      	beq.n	8008a7c <HAL_TIM_PWM_Start_DMA+0x388>
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a70:	d004      	beq.n	8008a7c <HAL_TIM_PWM_Start_DMA+0x388>
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a18      	ldr	r2, [pc, #96]	; (8008ad8 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d115      	bne.n	8008aa8 <HAL_TIM_PWM_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	689a      	ldr	r2, [r3, #8]
 8008a82:	4b17      	ldr	r3, [pc, #92]	; (8008ae0 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8008a84:	4013      	ands	r3, r2
 8008a86:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	2b06      	cmp	r3, #6
 8008a8c:	d015      	beq.n	8008aba <HAL_TIM_PWM_Start_DMA+0x3c6>
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a94:	d011      	beq.n	8008aba <HAL_TIM_PWM_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f042 0201 	orr.w	r2, r2, #1
 8008aa4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aa6:	e008      	b.n	8008aba <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f042 0201 	orr.w	r2, r2, #1
 8008ab6:	601a      	str	r2, [r3, #0]
 8008ab8:	e000      	b.n	8008abc <HAL_TIM_PWM_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aba:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3718      	adds	r7, #24
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	08009129 	.word	0x08009129
 8008acc:	080091d1 	.word	0x080091d1
 8008ad0:	08009097 	.word	0x08009097
 8008ad4:	40012c00 	.word	0x40012c00
 8008ad8:	40014000 	.word	0x40014000
 8008adc:	40014400 	.word	0x40014400
 8008ae0:	00010007 	.word	0x00010007

08008ae4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008aee:	2300      	movs	r3, #0
 8008af0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	2b0c      	cmp	r3, #12
 8008af6:	d855      	bhi.n	8008ba4 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8008af8:	a201      	add	r2, pc, #4	; (adr r2, 8008b00 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8008afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008afe:	bf00      	nop
 8008b00:	08008b35 	.word	0x08008b35
 8008b04:	08008ba5 	.word	0x08008ba5
 8008b08:	08008ba5 	.word	0x08008ba5
 8008b0c:	08008ba5 	.word	0x08008ba5
 8008b10:	08008b51 	.word	0x08008b51
 8008b14:	08008ba5 	.word	0x08008ba5
 8008b18:	08008ba5 	.word	0x08008ba5
 8008b1c:	08008ba5 	.word	0x08008ba5
 8008b20:	08008b6d 	.word	0x08008b6d
 8008b24:	08008ba5 	.word	0x08008ba5
 8008b28:	08008ba5 	.word	0x08008ba5
 8008b2c:	08008ba5 	.word	0x08008ba5
 8008b30:	08008b89 	.word	0x08008b89
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	68da      	ldr	r2, [r3, #12]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008b42:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f7fd ff13 	bl	8006974 <HAL_DMA_Abort_IT>
      break;
 8008b4e:	e02c      	b.n	8008baa <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	68da      	ldr	r2, [r3, #12]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b5e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b64:	4618      	mov	r0, r3
 8008b66:	f7fd ff05 	bl	8006974 <HAL_DMA_Abort_IT>
      break;
 8008b6a:	e01e      	b.n	8008baa <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	68da      	ldr	r2, [r3, #12]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b7a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b80:	4618      	mov	r0, r3
 8008b82:	f7fd fef7 	bl	8006974 <HAL_DMA_Abort_IT>
      break;
 8008b86:	e010      	b.n	8008baa <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	68da      	ldr	r2, [r3, #12]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008b96:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7fd fee9 	bl	8006974 <HAL_DMA_Abort_IT>
      break;
 8008ba2:	e002      	b.n	8008baa <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ba8:	bf00      	nop
  }

  if (status == HAL_OK)
 8008baa:	7bfb      	ldrb	r3, [r7, #15]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d176      	bne.n	8008c9e <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	6839      	ldr	r1, [r7, #0]
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f000 feb9 	bl	8009930 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a39      	ldr	r2, [pc, #228]	; (8008ca8 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d009      	beq.n	8008bdc <HAL_TIM_PWM_Stop_DMA+0xf8>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a37      	ldr	r2, [pc, #220]	; (8008cac <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d004      	beq.n	8008bdc <HAL_TIM_PWM_Stop_DMA+0xf8>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a36      	ldr	r2, [pc, #216]	; (8008cb0 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d101      	bne.n	8008be0 <HAL_TIM_PWM_Stop_DMA+0xfc>
 8008bdc:	2301      	movs	r3, #1
 8008bde:	e000      	b.n	8008be2 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8008be0:	2300      	movs	r3, #0
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d017      	beq.n	8008c16 <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	6a1a      	ldr	r2, [r3, #32]
 8008bec:	f241 1311 	movw	r3, #4369	; 0x1111
 8008bf0:	4013      	ands	r3, r2
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d10f      	bne.n	8008c16 <HAL_TIM_PWM_Stop_DMA+0x132>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	6a1a      	ldr	r2, [r3, #32]
 8008bfc:	f240 4344 	movw	r3, #1092	; 0x444
 8008c00:	4013      	ands	r3, r2
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d107      	bne.n	8008c16 <HAL_TIM_PWM_Stop_DMA+0x132>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008c14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	6a1a      	ldr	r2, [r3, #32]
 8008c1c:	f241 1311 	movw	r3, #4369	; 0x1111
 8008c20:	4013      	ands	r3, r2
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d10f      	bne.n	8008c46 <HAL_TIM_PWM_Stop_DMA+0x162>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	6a1a      	ldr	r2, [r3, #32]
 8008c2c:	f240 4344 	movw	r3, #1092	; 0x444
 8008c30:	4013      	ands	r3, r2
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d107      	bne.n	8008c46 <HAL_TIM_PWM_Stop_DMA+0x162>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	681a      	ldr	r2, [r3, #0]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f022 0201 	bic.w	r2, r2, #1
 8008c44:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d104      	bne.n	8008c56 <HAL_TIM_PWM_Stop_DMA+0x172>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c54:	e023      	b.n	8008c9e <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	2b04      	cmp	r3, #4
 8008c5a:	d104      	bne.n	8008c66 <HAL_TIM_PWM_Stop_DMA+0x182>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c64:	e01b      	b.n	8008c9e <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	2b08      	cmp	r3, #8
 8008c6a:	d104      	bne.n	8008c76 <HAL_TIM_PWM_Stop_DMA+0x192>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c74:	e013      	b.n	8008c9e <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	2b0c      	cmp	r3, #12
 8008c7a:	d104      	bne.n	8008c86 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008c84:	e00b      	b.n	8008c9e <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	2b10      	cmp	r3, #16
 8008c8a:	d104      	bne.n	8008c96 <HAL_TIM_PWM_Stop_DMA+0x1b2>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c94:	e003      	b.n	8008c9e <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2201      	movs	r2, #1
 8008c9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8008c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3710      	adds	r7, #16
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}
 8008ca8:	40012c00 	.word	0x40012c00
 8008cac:	40014000 	.word	0x40014000
 8008cb0:	40014400 	.word	0x40014400

08008cb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b086      	sub	sp, #24
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d101      	bne.n	8008cd2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008cce:	2302      	movs	r3, #2
 8008cd0:	e0ff      	b.n	8008ed2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2b14      	cmp	r3, #20
 8008cde:	f200 80f0 	bhi.w	8008ec2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008ce2:	a201      	add	r2, pc, #4	; (adr r2, 8008ce8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce8:	08008d3d 	.word	0x08008d3d
 8008cec:	08008ec3 	.word	0x08008ec3
 8008cf0:	08008ec3 	.word	0x08008ec3
 8008cf4:	08008ec3 	.word	0x08008ec3
 8008cf8:	08008d7d 	.word	0x08008d7d
 8008cfc:	08008ec3 	.word	0x08008ec3
 8008d00:	08008ec3 	.word	0x08008ec3
 8008d04:	08008ec3 	.word	0x08008ec3
 8008d08:	08008dbf 	.word	0x08008dbf
 8008d0c:	08008ec3 	.word	0x08008ec3
 8008d10:	08008ec3 	.word	0x08008ec3
 8008d14:	08008ec3 	.word	0x08008ec3
 8008d18:	08008dff 	.word	0x08008dff
 8008d1c:	08008ec3 	.word	0x08008ec3
 8008d20:	08008ec3 	.word	0x08008ec3
 8008d24:	08008ec3 	.word	0x08008ec3
 8008d28:	08008e41 	.word	0x08008e41
 8008d2c:	08008ec3 	.word	0x08008ec3
 8008d30:	08008ec3 	.word	0x08008ec3
 8008d34:	08008ec3 	.word	0x08008ec3
 8008d38:	08008e81 	.word	0x08008e81
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	68b9      	ldr	r1, [r7, #8]
 8008d42:	4618      	mov	r0, r3
 8008d44:	f000 fadc 	bl	8009300 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	699a      	ldr	r2, [r3, #24]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f042 0208 	orr.w	r2, r2, #8
 8008d56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	699a      	ldr	r2, [r3, #24]
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f022 0204 	bic.w	r2, r2, #4
 8008d66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	6999      	ldr	r1, [r3, #24]
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	691a      	ldr	r2, [r3, #16]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	430a      	orrs	r2, r1
 8008d78:	619a      	str	r2, [r3, #24]
      break;
 8008d7a:	e0a5      	b.n	8008ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	68b9      	ldr	r1, [r7, #8]
 8008d82:	4618      	mov	r0, r3
 8008d84:	f000 fb38 	bl	80093f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	699a      	ldr	r2, [r3, #24]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	699a      	ldr	r2, [r3, #24]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008da6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	6999      	ldr	r1, [r3, #24]
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	691b      	ldr	r3, [r3, #16]
 8008db2:	021a      	lsls	r2, r3, #8
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	430a      	orrs	r2, r1
 8008dba:	619a      	str	r2, [r3, #24]
      break;
 8008dbc:	e084      	b.n	8008ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	68b9      	ldr	r1, [r7, #8]
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f000 fb91 	bl	80094ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	69da      	ldr	r2, [r3, #28]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f042 0208 	orr.w	r2, r2, #8
 8008dd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	69da      	ldr	r2, [r3, #28]
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f022 0204 	bic.w	r2, r2, #4
 8008de8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	69d9      	ldr	r1, [r3, #28]
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	691a      	ldr	r2, [r3, #16]
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	430a      	orrs	r2, r1
 8008dfa:	61da      	str	r2, [r3, #28]
      break;
 8008dfc:	e064      	b.n	8008ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	68b9      	ldr	r1, [r7, #8]
 8008e04:	4618      	mov	r0, r3
 8008e06:	f000 fbe9 	bl	80095dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	69da      	ldr	r2, [r3, #28]
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	69da      	ldr	r2, [r3, #28]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	69d9      	ldr	r1, [r3, #28]
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	021a      	lsls	r2, r3, #8
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	430a      	orrs	r2, r1
 8008e3c:	61da      	str	r2, [r3, #28]
      break;
 8008e3e:	e043      	b.n	8008ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	68b9      	ldr	r1, [r7, #8]
 8008e46:	4618      	mov	r0, r3
 8008e48:	f000 fc26 	bl	8009698 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f042 0208 	orr.w	r2, r2, #8
 8008e5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f022 0204 	bic.w	r2, r2, #4
 8008e6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	691a      	ldr	r2, [r3, #16]
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	430a      	orrs	r2, r1
 8008e7c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008e7e:	e023      	b.n	8008ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	68b9      	ldr	r1, [r7, #8]
 8008e86:	4618      	mov	r0, r3
 8008e88:	f000 fc5e 	bl	8009748 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e9a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008eaa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	691b      	ldr	r3, [r3, #16]
 8008eb6:	021a      	lsls	r2, r3, #8
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	430a      	orrs	r2, r1
 8008ebe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008ec0:	e002      	b.n	8008ec8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	75fb      	strb	r3, [r7, #23]
      break;
 8008ec6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008ed0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3718      	adds	r7, #24
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop

08008edc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d101      	bne.n	8008ef8 <HAL_TIM_ConfigClockSource+0x1c>
 8008ef4:	2302      	movs	r3, #2
 8008ef6:	e0b6      	b.n	8009066 <HAL_TIM_ConfigClockSource+0x18a>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2201      	movs	r2, #1
 8008efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2202      	movs	r2, #2
 8008f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	689b      	ldr	r3, [r3, #8]
 8008f0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008f1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	68ba      	ldr	r2, [r7, #8]
 8008f2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f34:	d03e      	beq.n	8008fb4 <HAL_TIM_ConfigClockSource+0xd8>
 8008f36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f3a:	f200 8087 	bhi.w	800904c <HAL_TIM_ConfigClockSource+0x170>
 8008f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f42:	f000 8086 	beq.w	8009052 <HAL_TIM_ConfigClockSource+0x176>
 8008f46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f4a:	d87f      	bhi.n	800904c <HAL_TIM_ConfigClockSource+0x170>
 8008f4c:	2b70      	cmp	r3, #112	; 0x70
 8008f4e:	d01a      	beq.n	8008f86 <HAL_TIM_ConfigClockSource+0xaa>
 8008f50:	2b70      	cmp	r3, #112	; 0x70
 8008f52:	d87b      	bhi.n	800904c <HAL_TIM_ConfigClockSource+0x170>
 8008f54:	2b60      	cmp	r3, #96	; 0x60
 8008f56:	d050      	beq.n	8008ffa <HAL_TIM_ConfigClockSource+0x11e>
 8008f58:	2b60      	cmp	r3, #96	; 0x60
 8008f5a:	d877      	bhi.n	800904c <HAL_TIM_ConfigClockSource+0x170>
 8008f5c:	2b50      	cmp	r3, #80	; 0x50
 8008f5e:	d03c      	beq.n	8008fda <HAL_TIM_ConfigClockSource+0xfe>
 8008f60:	2b50      	cmp	r3, #80	; 0x50
 8008f62:	d873      	bhi.n	800904c <HAL_TIM_ConfigClockSource+0x170>
 8008f64:	2b40      	cmp	r3, #64	; 0x40
 8008f66:	d058      	beq.n	800901a <HAL_TIM_ConfigClockSource+0x13e>
 8008f68:	2b40      	cmp	r3, #64	; 0x40
 8008f6a:	d86f      	bhi.n	800904c <HAL_TIM_ConfigClockSource+0x170>
 8008f6c:	2b30      	cmp	r3, #48	; 0x30
 8008f6e:	d064      	beq.n	800903a <HAL_TIM_ConfigClockSource+0x15e>
 8008f70:	2b30      	cmp	r3, #48	; 0x30
 8008f72:	d86b      	bhi.n	800904c <HAL_TIM_ConfigClockSource+0x170>
 8008f74:	2b20      	cmp	r3, #32
 8008f76:	d060      	beq.n	800903a <HAL_TIM_ConfigClockSource+0x15e>
 8008f78:	2b20      	cmp	r3, #32
 8008f7a:	d867      	bhi.n	800904c <HAL_TIM_ConfigClockSource+0x170>
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d05c      	beq.n	800903a <HAL_TIM_ConfigClockSource+0x15e>
 8008f80:	2b10      	cmp	r3, #16
 8008f82:	d05a      	beq.n	800903a <HAL_TIM_ConfigClockSource+0x15e>
 8008f84:	e062      	b.n	800904c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008f96:	f000 fcab 	bl	80098f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	689b      	ldr	r3, [r3, #8]
 8008fa0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008fa8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	68ba      	ldr	r2, [r7, #8]
 8008fb0:	609a      	str	r2, [r3, #8]
      break;
 8008fb2:	e04f      	b.n	8009054 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008fc4:	f000 fc94 	bl	80098f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	689a      	ldr	r2, [r3, #8]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008fd6:	609a      	str	r2, [r3, #8]
      break;
 8008fd8:	e03c      	b.n	8009054 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	f000 fc08 	bl	80097fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	2150      	movs	r1, #80	; 0x50
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f000 fc61 	bl	80098ba <TIM_ITRx_SetConfig>
      break;
 8008ff8:	e02c      	b.n	8009054 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009006:	461a      	mov	r2, r3
 8009008:	f000 fc27 	bl	800985a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2160      	movs	r1, #96	; 0x60
 8009012:	4618      	mov	r0, r3
 8009014:	f000 fc51 	bl	80098ba <TIM_ITRx_SetConfig>
      break;
 8009018:	e01c      	b.n	8009054 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009026:	461a      	mov	r2, r3
 8009028:	f000 fbe8 	bl	80097fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2140      	movs	r1, #64	; 0x40
 8009032:	4618      	mov	r0, r3
 8009034:	f000 fc41 	bl	80098ba <TIM_ITRx_SetConfig>
      break;
 8009038:	e00c      	b.n	8009054 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681a      	ldr	r2, [r3, #0]
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4619      	mov	r1, r3
 8009044:	4610      	mov	r0, r2
 8009046:	f000 fc38 	bl	80098ba <TIM_ITRx_SetConfig>
      break;
 800904a:	e003      	b.n	8009054 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800904c:	2301      	movs	r3, #1
 800904e:	73fb      	strb	r3, [r7, #15]
      break;
 8009050:	e000      	b.n	8009054 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009052:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2201      	movs	r2, #1
 8009058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009064:	7bfb      	ldrb	r3, [r7, #15]
}
 8009066:	4618      	mov	r0, r3
 8009068:	3710      	adds	r7, #16
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800906e:	b480      	push	{r7}
 8009070:	b083      	sub	sp, #12
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009076:	bf00      	nop
 8009078:	370c      	adds	r7, #12
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr

08009082 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009082:	b480      	push	{r7}
 8009084:	b083      	sub	sp, #12
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800908a:	bf00      	nop
 800908c:	370c      	adds	r7, #12
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr

08009096 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8009096:	b580      	push	{r7, lr}
 8009098:	b084      	sub	sp, #16
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090a2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d107      	bne.n	80090be <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2201      	movs	r2, #1
 80090b2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2201      	movs	r2, #1
 80090b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090bc:	e02a      	b.n	8009114 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d107      	bne.n	80090d8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2202      	movs	r2, #2
 80090cc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2201      	movs	r2, #1
 80090d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090d6:	e01d      	b.n	8009114 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	429a      	cmp	r2, r3
 80090e0:	d107      	bne.n	80090f2 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2204      	movs	r2, #4
 80090e6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2201      	movs	r2, #1
 80090ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090f0:	e010      	b.n	8009114 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090f6:	687a      	ldr	r2, [r7, #4]
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d107      	bne.n	800910c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2208      	movs	r2, #8
 8009100:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2201      	movs	r2, #1
 8009106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800910a:	e003      	b.n	8009114 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2201      	movs	r2, #1
 8009110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8009114:	68f8      	ldr	r0, [r7, #12]
 8009116:	f7ff ffb4 	bl	8009082 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2200      	movs	r2, #0
 800911e:	771a      	strb	r2, [r3, #28]
}
 8009120:	bf00      	nop
 8009122:	3710      	adds	r7, #16
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009134:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	429a      	cmp	r2, r3
 800913e:	d10b      	bne.n	8009158 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2201      	movs	r2, #1
 8009144:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	69db      	ldr	r3, [r3, #28]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d136      	bne.n	80091bc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2201      	movs	r2, #1
 8009152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009156:	e031      	b.n	80091bc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	429a      	cmp	r2, r3
 8009160:	d10b      	bne.n	800917a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2202      	movs	r2, #2
 8009166:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	69db      	ldr	r3, [r3, #28]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d125      	bne.n	80091bc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2201      	movs	r2, #1
 8009174:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009178:	e020      	b.n	80091bc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	429a      	cmp	r2, r3
 8009182:	d10b      	bne.n	800919c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2204      	movs	r2, #4
 8009188:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	69db      	ldr	r3, [r3, #28]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d114      	bne.n	80091bc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2201      	movs	r2, #1
 8009196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800919a:	e00f      	b.n	80091bc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091a0:	687a      	ldr	r2, [r7, #4]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d10a      	bne.n	80091bc <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2208      	movs	r2, #8
 80091aa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	69db      	ldr	r3, [r3, #28]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d103      	bne.n	80091bc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2201      	movs	r2, #1
 80091b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091bc:	68f8      	ldr	r0, [r7, #12]
 80091be:	f001 fb05 	bl	800a7cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2200      	movs	r2, #0
 80091c6:	771a      	strb	r2, [r3, #28]
  //g_tim_pwm_transfer_cmplt = true;

}
 80091c8:	bf00      	nop
 80091ca:	3710      	adds	r7, #16
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091dc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d103      	bne.n	80091f0 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2201      	movs	r2, #1
 80091ec:	771a      	strb	r2, [r3, #28]
 80091ee:	e019      	b.n	8009224 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d103      	bne.n	8009202 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2202      	movs	r2, #2
 80091fe:	771a      	strb	r2, [r3, #28]
 8009200:	e010      	b.n	8009224 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009206:	687a      	ldr	r2, [r7, #4]
 8009208:	429a      	cmp	r2, r3
 800920a:	d103      	bne.n	8009214 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2204      	movs	r2, #4
 8009210:	771a      	strb	r2, [r3, #28]
 8009212:	e007      	b.n	8009224 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	429a      	cmp	r2, r3
 800921c:	d102      	bne.n	8009224 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2208      	movs	r2, #8
 8009222:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009224:	68f8      	ldr	r0, [r7, #12]
 8009226:	f7ff ff22 	bl	800906e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2200      	movs	r2, #0
 800922e:	771a      	strb	r2, [r3, #28]
}
 8009230:	bf00      	nop
 8009232:	3710      	adds	r7, #16
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009238:	b480      	push	{r7}
 800923a:	b085      	sub	sp, #20
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	4a2a      	ldr	r2, [pc, #168]	; (80092f4 <TIM_Base_SetConfig+0xbc>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d003      	beq.n	8009258 <TIM_Base_SetConfig+0x20>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009256:	d108      	bne.n	800926a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800925e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	68fa      	ldr	r2, [r7, #12]
 8009266:	4313      	orrs	r3, r2
 8009268:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	4a21      	ldr	r2, [pc, #132]	; (80092f4 <TIM_Base_SetConfig+0xbc>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d00b      	beq.n	800928a <TIM_Base_SetConfig+0x52>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009278:	d007      	beq.n	800928a <TIM_Base_SetConfig+0x52>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	4a1e      	ldr	r2, [pc, #120]	; (80092f8 <TIM_Base_SetConfig+0xc0>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d003      	beq.n	800928a <TIM_Base_SetConfig+0x52>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	4a1d      	ldr	r2, [pc, #116]	; (80092fc <TIM_Base_SetConfig+0xc4>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d108      	bne.n	800929c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009290:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	68db      	ldr	r3, [r3, #12]
 8009296:	68fa      	ldr	r2, [r7, #12]
 8009298:	4313      	orrs	r3, r2
 800929a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	695b      	ldr	r3, [r3, #20]
 80092a6:	4313      	orrs	r3, r2
 80092a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	68fa      	ldr	r2, [r7, #12]
 80092ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	689a      	ldr	r2, [r3, #8]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	4a0c      	ldr	r2, [pc, #48]	; (80092f4 <TIM_Base_SetConfig+0xbc>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d007      	beq.n	80092d8 <TIM_Base_SetConfig+0xa0>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	4a0b      	ldr	r2, [pc, #44]	; (80092f8 <TIM_Base_SetConfig+0xc0>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d003      	beq.n	80092d8 <TIM_Base_SetConfig+0xa0>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	4a0a      	ldr	r2, [pc, #40]	; (80092fc <TIM_Base_SetConfig+0xc4>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d103      	bne.n	80092e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	691a      	ldr	r2, [r3, #16]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	615a      	str	r2, [r3, #20]
}
 80092e6:	bf00      	nop
 80092e8:	3714      	adds	r7, #20
 80092ea:	46bd      	mov	sp, r7
 80092ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f0:	4770      	bx	lr
 80092f2:	bf00      	nop
 80092f4:	40012c00 	.word	0x40012c00
 80092f8:	40014000 	.word	0x40014000
 80092fc:	40014400 	.word	0x40014400

08009300 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009300:	b480      	push	{r7}
 8009302:	b087      	sub	sp, #28
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a1b      	ldr	r3, [r3, #32]
 800930e:	f023 0201 	bic.w	r2, r3, #1
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6a1b      	ldr	r3, [r3, #32]
 800931a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	699b      	ldr	r3, [r3, #24]
 8009326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800932e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f023 0303 	bic.w	r3, r3, #3
 800933a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	68fa      	ldr	r2, [r7, #12]
 8009342:	4313      	orrs	r3, r2
 8009344:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	f023 0302 	bic.w	r3, r3, #2
 800934c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	689b      	ldr	r3, [r3, #8]
 8009352:	697a      	ldr	r2, [r7, #20]
 8009354:	4313      	orrs	r3, r2
 8009356:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	4a24      	ldr	r2, [pc, #144]	; (80093ec <TIM_OC1_SetConfig+0xec>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d007      	beq.n	8009370 <TIM_OC1_SetConfig+0x70>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	4a23      	ldr	r2, [pc, #140]	; (80093f0 <TIM_OC1_SetConfig+0xf0>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d003      	beq.n	8009370 <TIM_OC1_SetConfig+0x70>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	4a22      	ldr	r2, [pc, #136]	; (80093f4 <TIM_OC1_SetConfig+0xf4>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d10c      	bne.n	800938a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	f023 0308 	bic.w	r3, r3, #8
 8009376:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	68db      	ldr	r3, [r3, #12]
 800937c:	697a      	ldr	r2, [r7, #20]
 800937e:	4313      	orrs	r3, r2
 8009380:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	f023 0304 	bic.w	r3, r3, #4
 8009388:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	4a17      	ldr	r2, [pc, #92]	; (80093ec <TIM_OC1_SetConfig+0xec>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d007      	beq.n	80093a2 <TIM_OC1_SetConfig+0xa2>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	4a16      	ldr	r2, [pc, #88]	; (80093f0 <TIM_OC1_SetConfig+0xf0>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d003      	beq.n	80093a2 <TIM_OC1_SetConfig+0xa2>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	4a15      	ldr	r2, [pc, #84]	; (80093f4 <TIM_OC1_SetConfig+0xf4>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d111      	bne.n	80093c6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80093b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	695b      	ldr	r3, [r3, #20]
 80093b6:	693a      	ldr	r2, [r7, #16]
 80093b8:	4313      	orrs	r3, r2
 80093ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	699b      	ldr	r3, [r3, #24]
 80093c0:	693a      	ldr	r2, [r7, #16]
 80093c2:	4313      	orrs	r3, r2
 80093c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	693a      	ldr	r2, [r7, #16]
 80093ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	68fa      	ldr	r2, [r7, #12]
 80093d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	685a      	ldr	r2, [r3, #4]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	697a      	ldr	r2, [r7, #20]
 80093de:	621a      	str	r2, [r3, #32]
}
 80093e0:	bf00      	nop
 80093e2:	371c      	adds	r7, #28
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr
 80093ec:	40012c00 	.word	0x40012c00
 80093f0:	40014000 	.word	0x40014000
 80093f4:	40014400 	.word	0x40014400

080093f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b087      	sub	sp, #28
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6a1b      	ldr	r3, [r3, #32]
 8009406:	f023 0210 	bic.w	r2, r3, #16
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6a1b      	ldr	r3, [r3, #32]
 8009412:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	699b      	ldr	r3, [r3, #24]
 800941e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800942a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009432:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	021b      	lsls	r3, r3, #8
 800943a:	68fa      	ldr	r2, [r7, #12]
 800943c:	4313      	orrs	r3, r2
 800943e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	f023 0320 	bic.w	r3, r3, #32
 8009446:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	689b      	ldr	r3, [r3, #8]
 800944c:	011b      	lsls	r3, r3, #4
 800944e:	697a      	ldr	r2, [r7, #20]
 8009450:	4313      	orrs	r3, r2
 8009452:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	4a22      	ldr	r2, [pc, #136]	; (80094e0 <TIM_OC2_SetConfig+0xe8>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d10d      	bne.n	8009478 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009462:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	68db      	ldr	r3, [r3, #12]
 8009468:	011b      	lsls	r3, r3, #4
 800946a:	697a      	ldr	r2, [r7, #20]
 800946c:	4313      	orrs	r3, r2
 800946e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009476:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4a19      	ldr	r2, [pc, #100]	; (80094e0 <TIM_OC2_SetConfig+0xe8>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d007      	beq.n	8009490 <TIM_OC2_SetConfig+0x98>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	4a18      	ldr	r2, [pc, #96]	; (80094e4 <TIM_OC2_SetConfig+0xec>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d003      	beq.n	8009490 <TIM_OC2_SetConfig+0x98>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	4a17      	ldr	r2, [pc, #92]	; (80094e8 <TIM_OC2_SetConfig+0xf0>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d113      	bne.n	80094b8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009496:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800949e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	695b      	ldr	r3, [r3, #20]
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	693a      	ldr	r2, [r7, #16]
 80094a8:	4313      	orrs	r3, r2
 80094aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	699b      	ldr	r3, [r3, #24]
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	693a      	ldr	r2, [r7, #16]
 80094b4:	4313      	orrs	r3, r2
 80094b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	693a      	ldr	r2, [r7, #16]
 80094bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	68fa      	ldr	r2, [r7, #12]
 80094c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	685a      	ldr	r2, [r3, #4]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	697a      	ldr	r2, [r7, #20]
 80094d0:	621a      	str	r2, [r3, #32]
}
 80094d2:	bf00      	nop
 80094d4:	371c      	adds	r7, #28
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr
 80094de:	bf00      	nop
 80094e0:	40012c00 	.word	0x40012c00
 80094e4:	40014000 	.word	0x40014000
 80094e8:	40014400 	.word	0x40014400

080094ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b087      	sub	sp, #28
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6a1b      	ldr	r3, [r3, #32]
 80094fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a1b      	ldr	r3, [r3, #32]
 8009506:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	69db      	ldr	r3, [r3, #28]
 8009512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800951a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800951e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f023 0303 	bic.w	r3, r3, #3
 8009526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	68fa      	ldr	r2, [r7, #12]
 800952e:	4313      	orrs	r3, r2
 8009530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009538:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	021b      	lsls	r3, r3, #8
 8009540:	697a      	ldr	r2, [r7, #20]
 8009542:	4313      	orrs	r3, r2
 8009544:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	4a21      	ldr	r2, [pc, #132]	; (80095d0 <TIM_OC3_SetConfig+0xe4>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d10d      	bne.n	800956a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009554:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	68db      	ldr	r3, [r3, #12]
 800955a:	021b      	lsls	r3, r3, #8
 800955c:	697a      	ldr	r2, [r7, #20]
 800955e:	4313      	orrs	r3, r2
 8009560:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009568:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4a18      	ldr	r2, [pc, #96]	; (80095d0 <TIM_OC3_SetConfig+0xe4>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d007      	beq.n	8009582 <TIM_OC3_SetConfig+0x96>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	4a17      	ldr	r2, [pc, #92]	; (80095d4 <TIM_OC3_SetConfig+0xe8>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d003      	beq.n	8009582 <TIM_OC3_SetConfig+0x96>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4a16      	ldr	r2, [pc, #88]	; (80095d8 <TIM_OC3_SetConfig+0xec>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d113      	bne.n	80095aa <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009588:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009590:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	695b      	ldr	r3, [r3, #20]
 8009596:	011b      	lsls	r3, r3, #4
 8009598:	693a      	ldr	r2, [r7, #16]
 800959a:	4313      	orrs	r3, r2
 800959c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	699b      	ldr	r3, [r3, #24]
 80095a2:	011b      	lsls	r3, r3, #4
 80095a4:	693a      	ldr	r2, [r7, #16]
 80095a6:	4313      	orrs	r3, r2
 80095a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	693a      	ldr	r2, [r7, #16]
 80095ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	68fa      	ldr	r2, [r7, #12]
 80095b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	685a      	ldr	r2, [r3, #4]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	697a      	ldr	r2, [r7, #20]
 80095c2:	621a      	str	r2, [r3, #32]
}
 80095c4:	bf00      	nop
 80095c6:	371c      	adds	r7, #28
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr
 80095d0:	40012c00 	.word	0x40012c00
 80095d4:	40014000 	.word	0x40014000
 80095d8:	40014400 	.word	0x40014400

080095dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095dc:	b480      	push	{r7}
 80095de:	b087      	sub	sp, #28
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6a1b      	ldr	r3, [r3, #32]
 80095ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6a1b      	ldr	r3, [r3, #32]
 80095f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	69db      	ldr	r3, [r3, #28]
 8009602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800960a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800960e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009616:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	021b      	lsls	r3, r3, #8
 800961e:	68fa      	ldr	r2, [r7, #12]
 8009620:	4313      	orrs	r3, r2
 8009622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800962a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	689b      	ldr	r3, [r3, #8]
 8009630:	031b      	lsls	r3, r3, #12
 8009632:	693a      	ldr	r2, [r7, #16]
 8009634:	4313      	orrs	r3, r2
 8009636:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	4a14      	ldr	r2, [pc, #80]	; (800968c <TIM_OC4_SetConfig+0xb0>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d007      	beq.n	8009650 <TIM_OC4_SetConfig+0x74>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	4a13      	ldr	r2, [pc, #76]	; (8009690 <TIM_OC4_SetConfig+0xb4>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d003      	beq.n	8009650 <TIM_OC4_SetConfig+0x74>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	4a12      	ldr	r2, [pc, #72]	; (8009694 <TIM_OC4_SetConfig+0xb8>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d109      	bne.n	8009664 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009656:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	695b      	ldr	r3, [r3, #20]
 800965c:	019b      	lsls	r3, r3, #6
 800965e:	697a      	ldr	r2, [r7, #20]
 8009660:	4313      	orrs	r3, r2
 8009662:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	697a      	ldr	r2, [r7, #20]
 8009668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	68fa      	ldr	r2, [r7, #12]
 800966e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	685a      	ldr	r2, [r3, #4]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	693a      	ldr	r2, [r7, #16]
 800967c:	621a      	str	r2, [r3, #32]
}
 800967e:	bf00      	nop
 8009680:	371c      	adds	r7, #28
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr
 800968a:	bf00      	nop
 800968c:	40012c00 	.word	0x40012c00
 8009690:	40014000 	.word	0x40014000
 8009694:	40014400 	.word	0x40014400

08009698 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009698:	b480      	push	{r7}
 800969a:	b087      	sub	sp, #28
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6a1b      	ldr	r3, [r3, #32]
 80096a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6a1b      	ldr	r3, [r3, #32]
 80096b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	68fa      	ldr	r2, [r7, #12]
 80096d2:	4313      	orrs	r3, r2
 80096d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80096dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	041b      	lsls	r3, r3, #16
 80096e4:	693a      	ldr	r2, [r7, #16]
 80096e6:	4313      	orrs	r3, r2
 80096e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4a13      	ldr	r2, [pc, #76]	; (800973c <TIM_OC5_SetConfig+0xa4>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d007      	beq.n	8009702 <TIM_OC5_SetConfig+0x6a>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	4a12      	ldr	r2, [pc, #72]	; (8009740 <TIM_OC5_SetConfig+0xa8>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d003      	beq.n	8009702 <TIM_OC5_SetConfig+0x6a>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	4a11      	ldr	r2, [pc, #68]	; (8009744 <TIM_OC5_SetConfig+0xac>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d109      	bne.n	8009716 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009708:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	695b      	ldr	r3, [r3, #20]
 800970e:	021b      	lsls	r3, r3, #8
 8009710:	697a      	ldr	r2, [r7, #20]
 8009712:	4313      	orrs	r3, r2
 8009714:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	697a      	ldr	r2, [r7, #20]
 800971a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	68fa      	ldr	r2, [r7, #12]
 8009720:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	685a      	ldr	r2, [r3, #4]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	693a      	ldr	r2, [r7, #16]
 800972e:	621a      	str	r2, [r3, #32]
}
 8009730:	bf00      	nop
 8009732:	371c      	adds	r7, #28
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr
 800973c:	40012c00 	.word	0x40012c00
 8009740:	40014000 	.word	0x40014000
 8009744:	40014400 	.word	0x40014400

08009748 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009748:	b480      	push	{r7}
 800974a:	b087      	sub	sp, #28
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6a1b      	ldr	r3, [r3, #32]
 8009756:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6a1b      	ldr	r3, [r3, #32]
 8009762:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800976e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800977a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	021b      	lsls	r3, r3, #8
 8009782:	68fa      	ldr	r2, [r7, #12]
 8009784:	4313      	orrs	r3, r2
 8009786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800978e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	051b      	lsls	r3, r3, #20
 8009796:	693a      	ldr	r2, [r7, #16]
 8009798:	4313      	orrs	r3, r2
 800979a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	4a14      	ldr	r2, [pc, #80]	; (80097f0 <TIM_OC6_SetConfig+0xa8>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d007      	beq.n	80097b4 <TIM_OC6_SetConfig+0x6c>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	4a13      	ldr	r2, [pc, #76]	; (80097f4 <TIM_OC6_SetConfig+0xac>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d003      	beq.n	80097b4 <TIM_OC6_SetConfig+0x6c>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	4a12      	ldr	r2, [pc, #72]	; (80097f8 <TIM_OC6_SetConfig+0xb0>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d109      	bne.n	80097c8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80097ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	695b      	ldr	r3, [r3, #20]
 80097c0:	029b      	lsls	r3, r3, #10
 80097c2:	697a      	ldr	r2, [r7, #20]
 80097c4:	4313      	orrs	r3, r2
 80097c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	697a      	ldr	r2, [r7, #20]
 80097cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	68fa      	ldr	r2, [r7, #12]
 80097d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	685a      	ldr	r2, [r3, #4]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	693a      	ldr	r2, [r7, #16]
 80097e0:	621a      	str	r2, [r3, #32]
}
 80097e2:	bf00      	nop
 80097e4:	371c      	adds	r7, #28
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop
 80097f0:	40012c00 	.word	0x40012c00
 80097f4:	40014000 	.word	0x40014000
 80097f8:	40014400 	.word	0x40014400

080097fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b087      	sub	sp, #28
 8009800:	af00      	add	r7, sp, #0
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	60b9      	str	r1, [r7, #8]
 8009806:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	6a1b      	ldr	r3, [r3, #32]
 800980c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	6a1b      	ldr	r3, [r3, #32]
 8009812:	f023 0201 	bic.w	r2, r3, #1
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	699b      	ldr	r3, [r3, #24]
 800981e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009826:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	011b      	lsls	r3, r3, #4
 800982c:	693a      	ldr	r2, [r7, #16]
 800982e:	4313      	orrs	r3, r2
 8009830:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	f023 030a 	bic.w	r3, r3, #10
 8009838:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800983a:	697a      	ldr	r2, [r7, #20]
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	4313      	orrs	r3, r2
 8009840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	693a      	ldr	r2, [r7, #16]
 8009846:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	697a      	ldr	r2, [r7, #20]
 800984c:	621a      	str	r2, [r3, #32]
}
 800984e:	bf00      	nop
 8009850:	371c      	adds	r7, #28
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr

0800985a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800985a:	b480      	push	{r7}
 800985c:	b087      	sub	sp, #28
 800985e:	af00      	add	r7, sp, #0
 8009860:	60f8      	str	r0, [r7, #12]
 8009862:	60b9      	str	r1, [r7, #8]
 8009864:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	6a1b      	ldr	r3, [r3, #32]
 800986a:	f023 0210 	bic.w	r2, r3, #16
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	699b      	ldr	r3, [r3, #24]
 8009876:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	6a1b      	ldr	r3, [r3, #32]
 800987c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009884:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	031b      	lsls	r3, r3, #12
 800988a:	697a      	ldr	r2, [r7, #20]
 800988c:	4313      	orrs	r3, r2
 800988e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009896:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	011b      	lsls	r3, r3, #4
 800989c:	693a      	ldr	r2, [r7, #16]
 800989e:	4313      	orrs	r3, r2
 80098a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	697a      	ldr	r2, [r7, #20]
 80098a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	693a      	ldr	r2, [r7, #16]
 80098ac:	621a      	str	r2, [r3, #32]
}
 80098ae:	bf00      	nop
 80098b0:	371c      	adds	r7, #28
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr

080098ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80098ba:	b480      	push	{r7}
 80098bc:	b085      	sub	sp, #20
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
 80098c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	689b      	ldr	r3, [r3, #8]
 80098c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80098d2:	683a      	ldr	r2, [r7, #0]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	4313      	orrs	r3, r2
 80098d8:	f043 0307 	orr.w	r3, r3, #7
 80098dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	68fa      	ldr	r2, [r7, #12]
 80098e2:	609a      	str	r2, [r3, #8]
}
 80098e4:	bf00      	nop
 80098e6:	3714      	adds	r7, #20
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b087      	sub	sp, #28
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	607a      	str	r2, [r7, #4]
 80098fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	689b      	ldr	r3, [r3, #8]
 8009902:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800990a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	021a      	lsls	r2, r3, #8
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	431a      	orrs	r2, r3
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	4313      	orrs	r3, r2
 8009918:	697a      	ldr	r2, [r7, #20]
 800991a:	4313      	orrs	r3, r2
 800991c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	697a      	ldr	r2, [r7, #20]
 8009922:	609a      	str	r2, [r3, #8]
}
 8009924:	bf00      	nop
 8009926:	371c      	adds	r7, #28
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr

08009930 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009930:	b480      	push	{r7}
 8009932:	b087      	sub	sp, #28
 8009934:	af00      	add	r7, sp, #0
 8009936:	60f8      	str	r0, [r7, #12]
 8009938:	60b9      	str	r1, [r7, #8]
 800993a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	f003 031f 	and.w	r3, r3, #31
 8009942:	2201      	movs	r2, #1
 8009944:	fa02 f303 	lsl.w	r3, r2, r3
 8009948:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	6a1a      	ldr	r2, [r3, #32]
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	43db      	mvns	r3, r3
 8009952:	401a      	ands	r2, r3
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	6a1a      	ldr	r2, [r3, #32]
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	f003 031f 	and.w	r3, r3, #31
 8009962:	6879      	ldr	r1, [r7, #4]
 8009964:	fa01 f303 	lsl.w	r3, r1, r3
 8009968:	431a      	orrs	r2, r3
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	621a      	str	r2, [r3, #32]
}
 800996e:	bf00      	nop
 8009970:	371c      	adds	r7, #28
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr
	...

0800997c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800997c:	b480      	push	{r7}
 800997e:	b085      	sub	sp, #20
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800998c:	2b01      	cmp	r3, #1
 800998e:	d101      	bne.n	8009994 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009990:	2302      	movs	r3, #2
 8009992:	e04f      	b.n	8009a34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2201      	movs	r2, #1
 8009998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2202      	movs	r2, #2
 80099a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a21      	ldr	r2, [pc, #132]	; (8009a40 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d108      	bne.n	80099d0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80099c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	68fa      	ldr	r2, [r7, #12]
 80099cc:	4313      	orrs	r3, r2
 80099ce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	68fa      	ldr	r2, [r7, #12]
 80099de:	4313      	orrs	r3, r2
 80099e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	68fa      	ldr	r2, [r7, #12]
 80099e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4a14      	ldr	r2, [pc, #80]	; (8009a40 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d009      	beq.n	8009a08 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099fc:	d004      	beq.n	8009a08 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a10      	ldr	r2, [pc, #64]	; (8009a44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d10c      	bne.n	8009a22 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a0e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	68ba      	ldr	r2, [r7, #8]
 8009a16:	4313      	orrs	r3, r2
 8009a18:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	68ba      	ldr	r2, [r7, #8]
 8009a20:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2201      	movs	r2, #1
 8009a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a32:	2300      	movs	r3, #0
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3714      	adds	r7, #20
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr
 8009a40:	40012c00 	.word	0x40012c00
 8009a44:	40014000 	.word	0x40014000

08009a48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b085      	sub	sp, #20
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009a52:	2300      	movs	r3, #0
 8009a54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d101      	bne.n	8009a64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009a60:	2302      	movs	r3, #2
 8009a62:	e060      	b.n	8009b26 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2201      	movs	r2, #1
 8009a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	68db      	ldr	r3, [r3, #12]
 8009a76:	4313      	orrs	r3, r2
 8009a78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	689b      	ldr	r3, [r3, #8]
 8009a84:	4313      	orrs	r3, r2
 8009a86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	4313      	orrs	r3, r2
 8009a94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	691b      	ldr	r3, [r3, #16]
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	695b      	ldr	r3, [r3, #20]
 8009abc:	4313      	orrs	r3, r2
 8009abe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aca:	4313      	orrs	r3, r2
 8009acc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	699b      	ldr	r3, [r3, #24]
 8009ad8:	041b      	lsls	r3, r3, #16
 8009ada:	4313      	orrs	r3, r2
 8009adc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4a14      	ldr	r2, [pc, #80]	; (8009b34 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d115      	bne.n	8009b14 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af2:	051b      	lsls	r3, r3, #20
 8009af4:	4313      	orrs	r3, r2
 8009af6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	69db      	ldr	r3, [r3, #28]
 8009b02:	4313      	orrs	r3, r2
 8009b04:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	6a1b      	ldr	r3, [r3, #32]
 8009b10:	4313      	orrs	r3, r2
 8009b12:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	68fa      	ldr	r2, [r7, #12]
 8009b1a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b24:	2300      	movs	r3, #0
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3714      	adds	r7, #20
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b30:	4770      	bx	lr
 8009b32:	bf00      	nop
 8009b34:	40012c00 	.word	0x40012c00

08009b38 <board_init_common_rtc_init>:
uint32_t g_button_on_count[NUM_PUSH_BUTTONS] = {0};
bool button_press_state[NUM_PUSH_BUTTONS] = {false};
extern UART_HandleTypeDef      gh_host_usart;

static void board_init_common_rtc_init(void)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	af00      	add	r7, sp, #0
    g_rtc_handle.Instance = RTC;
 8009b3c:	4b10      	ldr	r3, [pc, #64]	; (8009b80 <board_init_common_rtc_init+0x48>)
 8009b3e:	4a11      	ldr	r2, [pc, #68]	; (8009b84 <board_init_common_rtc_init+0x4c>)
 8009b40:	601a      	str	r2, [r3, #0]
    g_rtc_handle.Init.HourFormat = RTC_HOURFORMAT_24;
 8009b42:	4b0f      	ldr	r3, [pc, #60]	; (8009b80 <board_init_common_rtc_init+0x48>)
 8009b44:	2200      	movs	r2, #0
 8009b46:	605a      	str	r2, [r3, #4]
    g_rtc_handle.Init.AsynchPrediv = 127;
 8009b48:	4b0d      	ldr	r3, [pc, #52]	; (8009b80 <board_init_common_rtc_init+0x48>)
 8009b4a:	227f      	movs	r2, #127	; 0x7f
 8009b4c:	609a      	str	r2, [r3, #8]
    g_rtc_handle.Init.SynchPrediv = 255;
 8009b4e:	4b0c      	ldr	r3, [pc, #48]	; (8009b80 <board_init_common_rtc_init+0x48>)
 8009b50:	22ff      	movs	r2, #255	; 0xff
 8009b52:	60da      	str	r2, [r3, #12]
    g_rtc_handle.Init.OutPut = RTC_OUTPUT_DISABLE;
 8009b54:	4b0a      	ldr	r3, [pc, #40]	; (8009b80 <board_init_common_rtc_init+0x48>)
 8009b56:	2200      	movs	r2, #0
 8009b58:	611a      	str	r2, [r3, #16]
    g_rtc_handle.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8009b5a:	4b09      	ldr	r3, [pc, #36]	; (8009b80 <board_init_common_rtc_init+0x48>)
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	615a      	str	r2, [r3, #20]
    g_rtc_handle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8009b60:	4b07      	ldr	r3, [pc, #28]	; (8009b80 <board_init_common_rtc_init+0x48>)
 8009b62:	2200      	movs	r2, #0
 8009b64:	619a      	str	r2, [r3, #24]
    g_rtc_handle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8009b66:	4b06      	ldr	r3, [pc, #24]	; (8009b80 <board_init_common_rtc_init+0x48>)
 8009b68:	2200      	movs	r2, #0
 8009b6a:	61da      	str	r2, [r3, #28]
    if (HAL_RTC_Init(&g_rtc_handle) != HAL_OK) Error_Handler();
 8009b6c:	4804      	ldr	r0, [pc, #16]	; (8009b80 <board_init_common_rtc_init+0x48>)
 8009b6e:	f7fe fc01 	bl	8008374 <HAL_RTC_Init>
 8009b72:	4603      	mov	r3, r0
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d001      	beq.n	8009b7c <board_init_common_rtc_init+0x44>
 8009b78:	f000 fa4b 	bl	800a012 <Error_Handler>
}
 8009b7c:	bf00      	nop
 8009b7e:	bd80      	pop	{r7, pc}
 8009b80:	200022c8 	.word	0x200022c8
 8009b84:	40002800 	.word	0x40002800

08009b88 <SystemClock_Config>:

static void SystemClock_Config(void)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b0ae      	sub	sp, #184	; 0xb8
 8009b8c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009b8e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009b92:	2244      	movs	r2, #68	; 0x44
 8009b94:	2100      	movs	r1, #0
 8009b96:	4618      	mov	r0, r3
 8009b98:	f001 faf2 	bl	800b180 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009b9c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	601a      	str	r2, [r3, #0]
 8009ba4:	605a      	str	r2, [r3, #4]
 8009ba6:	609a      	str	r2, [r3, #8]
 8009ba8:	60da      	str	r2, [r3, #12]
 8009baa:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009bac:	1d3b      	adds	r3, r7, #4
 8009bae:	225c      	movs	r2, #92	; 0x5c
 8009bb0:	2100      	movs	r1, #0
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f001 fae4 	bl	800b180 <memset>

    HAL_PWR_EnableBkUpAccess();
 8009bb8:	f7fd f9ee 	bl	8006f98 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8009bbc:	4b25      	ldr	r3, [pc, #148]	; (8009c54 <SystemClock_Config+0xcc>)
 8009bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bc2:	4a24      	ldr	r2, [pc, #144]	; (8009c54 <SystemClock_Config+0xcc>)
 8009bc4:	f023 0318 	bic.w	r3, r3, #24
 8009bc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8009bcc:	2305      	movs	r3, #5
 8009bce:	677b      	str	r3, [r7, #116]	; 0x74
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009bd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009bd4:	67bb      	str	r3, [r7, #120]	; 0x78
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	67fb      	str	r3, [r7, #124]	; 0x7c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) while(1);
 8009be0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009be4:	4618      	mov	r0, r3
 8009be6:	f7fd fabb 	bl	8007160 <HAL_RCC_OscConfig>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d000      	beq.n	8009bf2 <SystemClock_Config+0x6a>
 8009bf0:	e7fe      	b.n	8009bf0 <SystemClock_Config+0x68>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009bf2:	230f      	movs	r3, #15
 8009bf4:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8009bf6:	2302      	movs	r3, #2
 8009bf8:	667b      	str	r3, [r7, #100]	; 0x64
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	66fb      	str	r3, [r7, #108]	; 0x6c
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009c02:	2300      	movs	r3, #0
 8009c04:	673b      	str	r3, [r7, #112]	; 0x70

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) while(1);
 8009c06:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009c0a:	2102      	movs	r1, #2
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f7fd febb 	bl	8007988 <HAL_RCC_ClockConfig>
 8009c12:	4603      	mov	r3, r0
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d000      	beq.n	8009c1a <SystemClock_Config+0x92>
 8009c18:	e7fe      	b.n	8009c18 <SystemClock_Config+0x90>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8009c1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009c1e:	607b      	str	r3, [r7, #4]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8009c20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c24:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) Error_Handler();
 8009c26:	1d3b      	adds	r3, r7, #4
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f7fe f899 	bl	8007d60 <HAL_RCCEx_PeriphCLKConfig>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d001      	beq.n	8009c38 <SystemClock_Config+0xb0>
 8009c34:	f000 f9ed 	bl	800a012 <Error_Handler>
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) Error_Handler();
 8009c38:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009c3c:	f7fd fa3a 	bl	80070b4 <HAL_PWREx_ControlVoltageScaling>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d001      	beq.n	8009c4a <SystemClock_Config+0xc2>
 8009c46:	f000 f9e4 	bl	800a012 <Error_Handler>
}
 8009c4a:	bf00      	nop
 8009c4c:	37b8      	adds	r7, #184	; 0xb8
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	bf00      	nop
 8009c54:	40021000 	.word	0x40021000

08009c58 <board_init_common_timer_init>:


static void board_init_common_timer_init(void)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b09e      	sub	sp, #120	; 0x78
 8009c5c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c5e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009c62:	2200      	movs	r2, #0
 8009c64:	601a      	str	r2, [r3, #0]
 8009c66:	605a      	str	r2, [r3, #4]
 8009c68:	609a      	str	r2, [r3, #8]
 8009c6a:	60da      	str	r2, [r3, #12]
 8009c6c:	611a      	str	r2, [r3, #16]
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009c6e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009c72:	2200      	movs	r2, #0
 8009c74:	601a      	str	r2, [r3, #0]
 8009c76:	605a      	str	r2, [r3, #4]
 8009c78:	609a      	str	r2, [r3, #8]
 8009c7a:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009c7c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009c80:	2200      	movs	r2, #0
 8009c82:	601a      	str	r2, [r3, #0]
 8009c84:	605a      	str	r2, [r3, #4]
 8009c86:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8009c88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	601a      	str	r2, [r3, #0]
 8009c90:	605a      	str	r2, [r3, #4]
 8009c92:	609a      	str	r2, [r3, #8]
 8009c94:	60da      	str	r2, [r3, #12]
 8009c96:	611a      	str	r2, [r3, #16]
 8009c98:	615a      	str	r2, [r3, #20]
 8009c9a:	619a      	str	r2, [r3, #24]
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009c9c:	463b      	mov	r3, r7
 8009c9e:	222c      	movs	r2, #44	; 0x2c
 8009ca0:	2100      	movs	r1, #0
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f001 fa6c 	bl	800b180 <memset>
    g_tim1_handle.Instance = TIM1;
 8009ca8:	4b5c      	ldr	r3, [pc, #368]	; (8009e1c <board_init_common_timer_init+0x1c4>)
 8009caa:	4a5d      	ldr	r2, [pc, #372]	; (8009e20 <board_init_common_timer_init+0x1c8>)
 8009cac:	601a      	str	r2, [r3, #0]
    g_tim1_handle.Init.Prescaler = 0;
 8009cae:	4b5b      	ldr	r3, [pc, #364]	; (8009e1c <board_init_common_timer_init+0x1c4>)
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	605a      	str	r2, [r3, #4]
    g_tim1_handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009cb4:	4b59      	ldr	r3, [pc, #356]	; (8009e1c <board_init_common_timer_init+0x1c4>)
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	609a      	str	r2, [r3, #8]
    g_tim1_handle.Init.Period = 60-1;
 8009cba:	4b58      	ldr	r3, [pc, #352]	; (8009e1c <board_init_common_timer_init+0x1c4>)
 8009cbc:	223b      	movs	r2, #59	; 0x3b
 8009cbe:	60da      	str	r2, [r3, #12]
    g_tim1_handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009cc0:	4b56      	ldr	r3, [pc, #344]	; (8009e1c <board_init_common_timer_init+0x1c4>)
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	611a      	str	r2, [r3, #16]
    g_tim1_handle.Init.RepetitionCounter = 0;
 8009cc6:	4b55      	ldr	r3, [pc, #340]	; (8009e1c <board_init_common_timer_init+0x1c4>)
 8009cc8:	2200      	movs	r2, #0
 8009cca:	615a      	str	r2, [r3, #20]
    g_tim1_handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009ccc:	4b53      	ldr	r3, [pc, #332]	; (8009e1c <board_init_common_timer_init+0x1c4>)
 8009cce:	2200      	movs	r2, #0
 8009cd0:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&g_tim1_handle) != HAL_OK) Error_Handler();
 8009cd2:	4852      	ldr	r0, [pc, #328]	; (8009e1c <board_init_common_timer_init+0x1c4>)
 8009cd4:	f7fe fc60 	bl	8008598 <HAL_TIM_Base_Init>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d001      	beq.n	8009ce2 <board_init_common_timer_init+0x8a>
 8009cde:	f000 f998 	bl	800a012 <Error_Handler>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009ce2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ce6:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_TIM_ConfigClockSource(&g_tim1_handle, &sClockSourceConfig) != HAL_OK) Error_Handler();
 8009ce8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009cec:	4619      	mov	r1, r3
 8009cee:	484b      	ldr	r0, [pc, #300]	; (8009e1c <board_init_common_timer_init+0x1c4>)
 8009cf0:	f7ff f8f4 	bl	8008edc <HAL_TIM_ConfigClockSource>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d001      	beq.n	8009cfe <board_init_common_timer_init+0xa6>
 8009cfa:	f000 f98a 	bl	800a012 <Error_Handler>
    if (HAL_TIM_PWM_Init(&g_tim1_handle) != HAL_OK) Error_Handler();
 8009cfe:	4847      	ldr	r0, [pc, #284]	; (8009e1c <board_init_common_timer_init+0x1c4>)
 8009d00:	f7fe fca1 	bl	8008646 <HAL_TIM_PWM_Init>
 8009d04:	4603      	mov	r3, r0
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d001      	beq.n	8009d0e <board_init_common_timer_init+0xb6>
 8009d0a:	f000 f982 	bl	800a012 <Error_Handler>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	64bb      	str	r3, [r7, #72]	; 0x48
    sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009d12:	2300      	movs	r3, #0
 8009d14:	64fb      	str	r3, [r7, #76]	; 0x4c
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009d16:	2300      	movs	r3, #0
 8009d18:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_TIMEx_MasterConfigSynchronization(&g_tim1_handle, &sMasterConfig) != HAL_OK) Error_Handler();
 8009d1a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009d1e:	4619      	mov	r1, r3
 8009d20:	483e      	ldr	r0, [pc, #248]	; (8009e1c <board_init_common_timer_init+0x1c4>)
 8009d22:	f7ff fe2b 	bl	800997c <HAL_TIMEx_MasterConfigSynchronization>
 8009d26:	4603      	mov	r3, r0
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d001      	beq.n	8009d30 <board_init_common_timer_init+0xd8>
 8009d2c:	f000 f971 	bl	800a012 <Error_Handler>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009d30:	2360      	movs	r3, #96	; 0x60
 8009d32:	62fb      	str	r3, [r7, #44]	; 0x2c
    sConfigOC.Pulse = 0;
 8009d34:	2300      	movs	r3, #0
 8009d36:	633b      	str	r3, [r7, #48]	; 0x30
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	637b      	str	r3, [r7, #52]	; 0x34
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	63bb      	str	r3, [r7, #56]	; 0x38
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009d40:	2300      	movs	r3, #0
 8009d42:	63fb      	str	r3, [r7, #60]	; 0x3c
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009d44:	2300      	movs	r3, #0
 8009d46:	643b      	str	r3, [r7, #64]	; 0x40
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 8009d4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009d50:	2200      	movs	r2, #0
 8009d52:	4619      	mov	r1, r3
 8009d54:	4831      	ldr	r0, [pc, #196]	; (8009e1c <board_init_common_timer_init+0x1c4>)
 8009d56:	f7fe ffad 	bl	8008cb4 <HAL_TIM_PWM_ConfigChannel>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d001      	beq.n	8009d64 <board_init_common_timer_init+0x10c>
 8009d60:	f000 f957 	bl	800a012 <Error_Handler>
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) Error_Handler();
 8009d64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009d68:	2204      	movs	r2, #4
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	482b      	ldr	r0, [pc, #172]	; (8009e1c <board_init_common_timer_init+0x1c4>)
 8009d6e:	f7fe ffa1 	bl	8008cb4 <HAL_TIM_PWM_ConfigChannel>
 8009d72:	4603      	mov	r3, r0
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d001      	beq.n	8009d7c <board_init_common_timer_init+0x124>
 8009d78:	f000 f94b 	bl	800a012 <Error_Handler>
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) Error_Handler();
 8009d7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009d80:	2208      	movs	r2, #8
 8009d82:	4619      	mov	r1, r3
 8009d84:	4825      	ldr	r0, [pc, #148]	; (8009e1c <board_init_common_timer_init+0x1c4>)
 8009d86:	f7fe ff95 	bl	8008cb4 <HAL_TIM_PWM_ConfigChannel>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d001      	beq.n	8009d94 <board_init_common_timer_init+0x13c>
 8009d90:	f000 f93f 	bl	800a012 <Error_Handler>
    sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009d94:	2300      	movs	r3, #0
 8009d96:	603b      	str	r3, [r7, #0]
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	607b      	str	r3, [r7, #4]
    sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	60bb      	str	r3, [r7, #8]
    sBreakDeadTimeConfig.DeadTime = 0;
 8009da0:	2300      	movs	r3, #0
 8009da2:	60fb      	str	r3, [r7, #12]
    sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009da4:	2300      	movs	r3, #0
 8009da6:	613b      	str	r3, [r7, #16]
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009da8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009dac:	617b      	str	r3, [r7, #20]
    sBreakDeadTimeConfig.BreakFilter = 0;
 8009dae:	2300      	movs	r3, #0
 8009db0:	61bb      	str	r3, [r7, #24]
    sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8009db2:	2300      	movs	r3, #0
 8009db4:	61fb      	str	r3, [r7, #28]
    sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8009db6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009dba:	623b      	str	r3, [r7, #32]
    sBreakDeadTimeConfig.Break2Filter = 0;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	627b      	str	r3, [r7, #36]	; 0x24
    sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIMEx_ConfigBreakDeadTime(&g_tim1_handle, &sBreakDeadTimeConfig) != HAL_OK) Error_Handler();
 8009dc4:	463b      	mov	r3, r7
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	4814      	ldr	r0, [pc, #80]	; (8009e1c <board_init_common_timer_init+0x1c4>)
 8009dca:	f7ff fe3d 	bl	8009a48 <HAL_TIMEx_ConfigBreakDeadTime>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d001      	beq.n	8009dd8 <board_init_common_timer_init+0x180>
 8009dd4:	f000 f91d 	bl	800a012 <Error_Handler>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_1);
 8009dd8:	2100      	movs	r1, #0
 8009dda:	4810      	ldr	r0, [pc, #64]	; (8009e1c <board_init_common_timer_init+0x1c4>)
 8009ddc:	f7fe fe82 	bl	8008ae4 <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_2);
 8009de0:	2104      	movs	r1, #4
 8009de2:	480e      	ldr	r0, [pc, #56]	; (8009e1c <board_init_common_timer_init+0x1c4>)
 8009de4:	f7fe fe7e 	bl	8008ae4 <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_3);
 8009de8:	2108      	movs	r1, #8
 8009dea:	480c      	ldr	r0, [pc, #48]	; (8009e1c <board_init_common_timer_init+0x1c4>)
 8009dec:	f7fe fe7a 	bl	8008ae4 <HAL_TIM_PWM_Stop_DMA>
    GPIO_InitStruct.Pin = PIN_TIM1_CH1|PIN_TIM1_CH2|PIN_TIM1_CH3;
 8009df0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8009df4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009df6:	2302      	movs	r3, #2
 8009df8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8009e02:	2301      	movs	r3, #1
 8009e04:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e06:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009e10:	f7fc ff18 	bl	8006c44 <HAL_GPIO_Init>
}
 8009e14:	bf00      	nop
 8009e16:	3778      	adds	r7, #120	; 0x78
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	200022ec 	.word	0x200022ec
 8009e20:	40012c00 	.word	0x40012c00

08009e24 <board_init_common_nvic_setup_interrupts>:


static void board_init_common_nvic_setup_interrupts(void)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	af00      	add	r7, sp, #0
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI0_IRQn);
 8009e28:	4b30      	ldr	r3, [pc, #192]	; (8009eec <board_init_common_nvic_setup_interrupts+0xc8>)
 8009e2a:	2206      	movs	r2, #6
 8009e2c:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI2_IRQn);
 8009e2e:	4b2f      	ldr	r3, [pc, #188]	; (8009eec <board_init_common_nvic_setup_interrupts+0xc8>)
 8009e30:	2208      	movs	r2, #8
 8009e32:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI9_5_IRQn);
 8009e34:	4b2d      	ldr	r3, [pc, #180]	; (8009eec <board_init_common_nvic_setup_interrupts+0xc8>)
 8009e36:	2217      	movs	r2, #23
 8009e38:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI15_10_IRQn);
 8009e3a:	4b2c      	ldr	r3, [pc, #176]	; (8009eec <board_init_common_nvic_setup_interrupts+0xc8>)
 8009e3c:	2228      	movs	r2, #40	; 0x28
 8009e3e:	615a      	str	r2, [r3, #20]
    HAL_NVIC_SetPriority(EXTI0_IRQn, 24, 0);
 8009e40:	2200      	movs	r2, #0
 8009e42:	2118      	movs	r1, #24
 8009e44:	2006      	movs	r0, #6
 8009e46:	f7fc fc38 	bl	80066ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8009e4a:	2006      	movs	r0, #6
 8009e4c:	f7fc fc51 	bl	80066f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI2_IRQn, 24, 0);
 8009e50:	2200      	movs	r2, #0
 8009e52:	2118      	movs	r1, #24
 8009e54:	2008      	movs	r0, #8
 8009e56:	f7fc fc30 	bl	80066ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8009e5a:	2008      	movs	r0, #8
 8009e5c:	f7fc fc49 	bl	80066f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 24, 0);
 8009e60:	2200      	movs	r2, #0
 8009e62:	2118      	movs	r1, #24
 8009e64:	2017      	movs	r0, #23
 8009e66:	f7fc fc28 	bl	80066ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8009e6a:	2017      	movs	r0, #23
 8009e6c:	f7fc fc41 	bl	80066f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 24, 0);
 8009e70:	2200      	movs	r2, #0
 8009e72:	2118      	movs	r1, #24
 8009e74:	2028      	movs	r0, #40	; 0x28
 8009e76:	f7fc fc20 	bl	80066ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8009e7a:	2028      	movs	r0, #40	; 0x28
 8009e7c:	f7fc fc39 	bl	80066f2 <HAL_NVIC_EnableIRQ>
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI0_IRQn);
 8009e80:	4b1a      	ldr	r3, [pc, #104]	; (8009eec <board_init_common_nvic_setup_interrupts+0xc8>)
 8009e82:	2206      	movs	r2, #6
 8009e84:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI2_IRQn);
 8009e86:	4b19      	ldr	r3, [pc, #100]	; (8009eec <board_init_common_nvic_setup_interrupts+0xc8>)
 8009e88:	2208      	movs	r2, #8
 8009e8a:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI9_5_IRQn);
 8009e8c:	4b17      	ldr	r3, [pc, #92]	; (8009eec <board_init_common_nvic_setup_interrupts+0xc8>)
 8009e8e:	2217      	movs	r2, #23
 8009e90:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI15_10_IRQn);
 8009e92:	4b16      	ldr	r3, [pc, #88]	; (8009eec <board_init_common_nvic_setup_interrupts+0xc8>)
 8009e94:	2228      	movs	r2, #40	; 0x28
 8009e96:	615a      	str	r2, [r3, #20]
    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8009e98:	2200      	movs	r2, #0
 8009e9a:	2100      	movs	r1, #0
 8009e9c:	200c      	movs	r0, #12
 8009e9e:	f7fc fc0c 	bl	80066ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8009ea2:	200c      	movs	r0, #12
 8009ea4:	f7fc fc25 	bl	80066f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	2100      	movs	r1, #0
 8009eac:	200d      	movs	r0, #13
 8009eae:	f7fc fc04 	bl	80066ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8009eb2:	200d      	movs	r0, #13
 8009eb4:	f7fc fc1d 	bl	80066f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8009eb8:	2200      	movs	r2, #0
 8009eba:	2100      	movs	r1, #0
 8009ebc:	200f      	movs	r0, #15
 8009ebe:	f7fc fbfc 	bl	80066ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8009ec2:	200f      	movs	r0, #15
 8009ec4:	f7fc fc15 	bl	80066f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8009ec8:	2200      	movs	r2, #0
 8009eca:	2100      	movs	r1, #0
 8009ecc:	2010      	movs	r0, #16
 8009ece:	f7fc fbf4 	bl	80066ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8009ed2:	2010      	movs	r0, #16
 8009ed4:	f7fc fc0d 	bl	80066f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8009ed8:	2200      	movs	r2, #0
 8009eda:	2100      	movs	r1, #0
 8009edc:	2011      	movs	r0, #17
 8009ede:	f7fc fbec 	bl	80066ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8009ee2:	2011      	movs	r0, #17
 8009ee4:	f7fc fc05 	bl	80066f2 <HAL_NVIC_EnableIRQ>
}
 8009ee8:	bf00      	nop
 8009eea:	bd80      	pop	{r7, pc}
 8009eec:	40010400 	.word	0x40010400

08009ef0 <board_init_common_setup_wakeups>:


static void board_init_common_setup_wakeups(void)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b086      	sub	sp, #24
 8009ef4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ef6:	1d3b      	adds	r3, r7, #4
 8009ef8:	2200      	movs	r2, #0
 8009efa:	601a      	str	r2, [r3, #0]
 8009efc:	605a      	str	r2, [r3, #4]
 8009efe:	609a      	str	r2, [r3, #8]
 8009f00:	60da      	str	r2, [r3, #12]
 8009f02:	611a      	str	r2, [r3, #16]

    // future setup wakeups
    GPIO_InitStruct.Pin = PIN_WKUP_1|PIN_WKUP_4;
 8009f04:	2305      	movs	r3, #5
 8009f06:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8009f08:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8009f0c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 8009f12:	1d3b      	adds	r3, r7, #4
 8009f14:	4619      	mov	r1, r3
 8009f16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009f1a:	f7fc fe93 	bl	8006c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_WKUP_2|PIN_WKUP_3;
 8009f1e:	f242 0320 	movw	r3, #8224	; 0x2020
 8009f22:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8009f24:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8009f28:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 8009f2e:	1d3b      	adds	r3, r7, #4
 8009f30:	4619      	mov	r1, r3
 8009f32:	4804      	ldr	r0, [pc, #16]	; (8009f44 <board_init_common_setup_wakeups+0x54>)
 8009f34:	f7fc fe86 	bl	8006c44 <HAL_GPIO_Init>
    board_init_common_nvic_setup_interrupts();
 8009f38:	f7ff ff74 	bl	8009e24 <board_init_common_nvic_setup_interrupts>
}
 8009f3c:	bf00      	nop
 8009f3e:	3718      	adds	r7, #24
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}
 8009f44:	48000800 	.word	0x48000800

08009f48 <board_init_port_wakeup>:

static void board_init_port_wakeup(void)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b087      	sub	sp, #28
 8009f4c:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f4e:	4b21      	ldr	r3, [pc, #132]	; (8009fd4 <board_init_port_wakeup+0x8c>)
 8009f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f52:	4a20      	ldr	r2, [pc, #128]	; (8009fd4 <board_init_port_wakeup+0x8c>)
 8009f54:	f043 0301 	orr.w	r3, r3, #1
 8009f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009f5a:	4b1e      	ldr	r3, [pc, #120]	; (8009fd4 <board_init_port_wakeup+0x8c>)
 8009f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f5e:	f003 0301 	and.w	r3, r3, #1
 8009f62:	617b      	str	r3, [r7, #20]
 8009f64:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009f66:	4b1b      	ldr	r3, [pc, #108]	; (8009fd4 <board_init_port_wakeup+0x8c>)
 8009f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f6a:	4a1a      	ldr	r2, [pc, #104]	; (8009fd4 <board_init_port_wakeup+0x8c>)
 8009f6c:	f043 0302 	orr.w	r3, r3, #2
 8009f70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009f72:	4b18      	ldr	r3, [pc, #96]	; (8009fd4 <board_init_port_wakeup+0x8c>)
 8009f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f76:	f003 0302 	and.w	r3, r3, #2
 8009f7a:	613b      	str	r3, [r7, #16]
 8009f7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009f7e:	4b15      	ldr	r3, [pc, #84]	; (8009fd4 <board_init_port_wakeup+0x8c>)
 8009f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f82:	4a14      	ldr	r2, [pc, #80]	; (8009fd4 <board_init_port_wakeup+0x8c>)
 8009f84:	f043 0304 	orr.w	r3, r3, #4
 8009f88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009f8a:	4b12      	ldr	r3, [pc, #72]	; (8009fd4 <board_init_port_wakeup+0x8c>)
 8009f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f8e:	f003 0304 	and.w	r3, r3, #4
 8009f92:	60fb      	str	r3, [r7, #12]
 8009f94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8009f96:	4b0f      	ldr	r3, [pc, #60]	; (8009fd4 <board_init_port_wakeup+0x8c>)
 8009f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f9a:	4a0e      	ldr	r2, [pc, #56]	; (8009fd4 <board_init_port_wakeup+0x8c>)
 8009f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009fa2:	4b0c      	ldr	r3, [pc, #48]	; (8009fd4 <board_init_port_wakeup+0x8c>)
 8009fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009faa:	60bb      	str	r3, [r7, #8]
 8009fac:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_DMA1_CLK_ENABLE();
 8009fae:	4b09      	ldr	r3, [pc, #36]	; (8009fd4 <board_init_port_wakeup+0x8c>)
 8009fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fb2:	4a08      	ldr	r2, [pc, #32]	; (8009fd4 <board_init_port_wakeup+0x8c>)
 8009fb4:	f043 0301 	orr.w	r3, r3, #1
 8009fb8:	6493      	str	r3, [r2, #72]	; 0x48
 8009fba:	4b06      	ldr	r3, [pc, #24]	; (8009fd4 <board_init_port_wakeup+0x8c>)
 8009fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fbe:	f003 0301 	and.w	r3, r3, #1
 8009fc2:	607b      	str	r3, [r7, #4]
 8009fc4:	687b      	ldr	r3, [r7, #4]
}
 8009fc6:	bf00      	nop
 8009fc8:	371c      	adds	r7, #28
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr
 8009fd2:	bf00      	nop
 8009fd4:	40021000 	.word	0x40021000

08009fd8 <board_init_common_board_init>:


void board_init_common_board_init(void)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	af00      	add	r7, sp, #0
    srand(time(0));
 8009fdc:	2000      	movs	r0, #0
 8009fde:	f001 f8d7 	bl	800b190 <time>
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	4613      	mov	r3, r2
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f000 ff9b 	bl	800af24 <srand>
    HAL_Init();
 8009fee:	f7fc f9bd 	bl	800636c <HAL_Init>
    SystemClock_Config();
 8009ff2:	f7ff fdc9 	bl	8009b88 <SystemClock_Config>

    board_init_port_wakeup();
 8009ff6:	f7ff ffa7 	bl	8009f48 <board_init_port_wakeup>
    board_init_common_setup_wakeups();
 8009ffa:	f7ff ff79 	bl	8009ef0 <board_init_common_setup_wakeups>
    board_init_specific();
 8009ffe:	f000 f80d 	bl	800a01c <board_init_specific>

    board_init_common_timer_init();
 800a002:	f7ff fe29 	bl	8009c58 <board_init_common_timer_init>

    ws2812b_init();
 800a006:	f7f8 fc5d 	bl	80028c4 <ws2812b_init>

    board_init_common_rtc_init();
 800a00a:	f7ff fd95 	bl	8009b38 <board_init_common_rtc_init>
}
 800a00e:	bf00      	nop
 800a010:	bd80      	pop	{r7, pc}

0800a012 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a012:	b480      	push	{r7}
 800a014:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800a016:	b672      	cpsid	i
}
 800a018:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a01a:	e7fe      	b.n	800a01a <Error_Handler+0x8>

0800a01c <board_init_specific>:
}
#endif


void board_init_specific(void)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b086      	sub	sp, #24
 800a020:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a022:	1d3b      	adds	r3, r7, #4
 800a024:	2200      	movs	r2, #0
 800a026:	601a      	str	r2, [r3, #0]
 800a028:	605a      	str	r2, [r3, #4]
 800a02a:	609a      	str	r2, [r3, #8]
 800a02c:	60da      	str	r2, [r3, #12]
 800a02e:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = PIN_INT_LVL_EN;
 800a030:	2301      	movs	r3, #1
 800a032:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a034:	2301      	movs	r3, #1
 800a036:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a038:	2300      	movs	r3, #0
 800a03a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);
 800a03c:	1d3b      	adds	r3, r7, #4
 800a03e:	4619      	mov	r1, r3
 800a040:	4844      	ldr	r0, [pc, #272]	; (800a154 <board_init_specific+0x138>)
 800a042:	f7fc fdff 	bl	8006c44 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_B, PIN_INT_LVL_EN, GPIO_PIN_SET);
 800a046:	2201      	movs	r2, #1
 800a048:	2101      	movs	r1, #1
 800a04a:	4842      	ldr	r0, [pc, #264]	; (800a154 <board_init_specific+0x138>)
 800a04c:	f7fc ff74 	bl	8006f38 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_LVL_EN;
 800a050:	2380      	movs	r3, #128	; 0x80
 800a052:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a054:	2301      	movs	r3, #1
 800a056:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a058:	2300      	movs	r3, #0
 800a05a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800a05c:	1d3b      	adds	r3, r7, #4
 800a05e:	4619      	mov	r1, r3
 800a060:	483d      	ldr	r0, [pc, #244]	; (800a158 <board_init_specific+0x13c>)
 800a062:	f7fc fdef 	bl	8006c44 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_LVL_EN, GPIO_PIN_RESET);
 800a066:	2200      	movs	r2, #0
 800a068:	2180      	movs	r1, #128	; 0x80
 800a06a:	483b      	ldr	r0, [pc, #236]	; (800a158 <board_init_specific+0x13c>)
 800a06c:	f7fc ff64 	bl	8006f38 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_LVL_DIR;
 800a070:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a074:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a076:	2301      	movs	r3, #1
 800a078:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a07a:	2300      	movs	r3, #0
 800a07c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800a07e:	1d3b      	adds	r3, r7, #4
 800a080:	4619      	mov	r1, r3
 800a082:	4835      	ldr	r0, [pc, #212]	; (800a158 <board_init_specific+0x13c>)
 800a084:	f7fc fdde 	bl	8006c44 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_LVL_DIR, GPIO_PIN_SET);
 800a088:	2201      	movs	r2, #1
 800a08a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a08e:	4832      	ldr	r0, [pc, #200]	; (800a158 <board_init_specific+0x13c>)
 800a090:	f7fc ff52 	bl	8006f38 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_DISP_RST | PIN_DISP_DC |PIN_DISP_BACKLIGHT;
 800a094:	23e0      	movs	r3, #224	; 0xe0
 800a096:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a098:	2301      	movs	r3, #1
 800a09a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a09c:	2300      	movs	r3, #0
 800a09e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 800a0a0:	1d3b      	adds	r3, r7, #4
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a0a8:	f7fc fdcc 	bl	8006c44 <HAL_GPIO_Init>

    // setup XR_RX and XR_TX
    GPIO_InitStruct.Pin = PIN_XR_GPIO | PIN_VBUS_PRESENT;
 800a0ac:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800a0b0:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);
 800a0ba:	1d3b      	adds	r3, r7, #4
 800a0bc:	4619      	mov	r1, r3
 800a0be:	4825      	ldr	r0, [pc, #148]	; (800a154 <board_init_specific+0x138>)
 800a0c0:	f7fc fdc0 	bl	8006c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_BLUE_LED;
 800a0c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0c8:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);
 800a0d2:	1d3b      	adds	r3, r7, #4
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	481f      	ldr	r0, [pc, #124]	; (800a154 <board_init_specific+0x138>)
 800a0d8:	f7fc fdb4 	bl	8006c44 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_B, PIN_BLUE_LED, GPIO_PIN_RESET);
 800a0dc:	2200      	movs	r2, #0
 800a0de:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a0e2:	481c      	ldr	r0, [pc, #112]	; (800a154 <board_init_specific+0x138>)
 800a0e4:	f7fc ff28 	bl	8006f38 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_ORANGE_LED;
 800a0e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0ec:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);
 800a0f6:	1d3b      	adds	r3, r7, #4
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	4816      	ldr	r0, [pc, #88]	; (800a154 <board_init_specific+0x138>)
 800a0fc:	f7fc fda2 	bl	8006c44 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_B, PIN_ORANGE_LED, GPIO_PIN_RESET);
 800a100:	2200      	movs	r2, #0
 800a102:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a106:	4813      	ldr	r0, [pc, #76]	; (800a154 <board_init_specific+0x138>)
 800a108:	f7fc ff16 	bl	8006f38 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_GREEN_LED;
 800a10c:	2304      	movs	r3, #4
 800a10e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a110:	2301      	movs	r3, #1
 800a112:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a114:	2300      	movs	r3, #0
 800a116:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800a118:	1d3b      	adds	r3, r7, #4
 800a11a:	4619      	mov	r1, r3
 800a11c:	480e      	ldr	r0, [pc, #56]	; (800a158 <board_init_specific+0x13c>)
 800a11e:	f7fc fd91 	bl	8006c44 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_GREEN_LED, GPIO_PIN_RESET);
 800a122:	2200      	movs	r2, #0
 800a124:	2104      	movs	r1, #4
 800a126:	480c      	ldr	r0, [pc, #48]	; (800a158 <board_init_specific+0x13c>)
 800a128:	f7fc ff06 	bl	8006f38 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_RED_LED;
 800a12c:	2308      	movs	r3, #8
 800a12e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a130:	2301      	movs	r3, #1
 800a132:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a134:	2300      	movs	r3, #0
 800a136:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800a138:	1d3b      	adds	r3, r7, #4
 800a13a:	4619      	mov	r1, r3
 800a13c:	4806      	ldr	r0, [pc, #24]	; (800a158 <board_init_specific+0x13c>)
 800a13e:	f7fc fd81 	bl	8006c44 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_RED_LED, GPIO_PIN_RESET);
 800a142:	2200      	movs	r2, #0
 800a144:	2108      	movs	r1, #8
 800a146:	4804      	ldr	r0, [pc, #16]	; (800a158 <board_init_specific+0x13c>)
 800a148:	f7fc fef6 	bl	8006f38 <HAL_GPIO_WritePin>

#if defined(BOARD_SPUD_GLO_V4P2)
    board_init_peripheral_setup();
#endif
}
 800a14c:	bf00      	nop
 800a14e:	3718      	adds	r7, #24
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}
 800a154:	48000400 	.word	0x48000400
 800a158:	48000800 	.word	0x48000800

0800a15c <HAL_Set_DMA_Callbacks>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);


// Function below added by SRW
static void HAL_Set_DMA_Callbacks(void)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	af00      	add	r7, sp, #0
    HAL_DMA_RegisterCallback(&hdma_tim1_ch1, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 800a160:	4a0d      	ldr	r2, [pc, #52]	; (800a198 <HAL_Set_DMA_Callbacks+0x3c>)
 800a162:	2100      	movs	r1, #0
 800a164:	480d      	ldr	r0, [pc, #52]	; (800a19c <HAL_Set_DMA_Callbacks+0x40>)
 800a166:	f7fc fcf5 	bl	8006b54 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim1_ch2, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 800a16a:	4a0b      	ldr	r2, [pc, #44]	; (800a198 <HAL_Set_DMA_Callbacks+0x3c>)
 800a16c:	2100      	movs	r1, #0
 800a16e:	480c      	ldr	r0, [pc, #48]	; (800a1a0 <HAL_Set_DMA_Callbacks+0x44>)
 800a170:	f7fc fcf0 	bl	8006b54 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim1_ch3, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 800a174:	4a08      	ldr	r2, [pc, #32]	; (800a198 <HAL_Set_DMA_Callbacks+0x3c>)
 800a176:	2100      	movs	r1, #0
 800a178:	480a      	ldr	r0, [pc, #40]	; (800a1a4 <HAL_Set_DMA_Callbacks+0x48>)
 800a17a:	f7fc fceb 	bl	8006b54 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim15_ch1_up_trig_com, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 800a17e:	4a06      	ldr	r2, [pc, #24]	; (800a198 <HAL_Set_DMA_Callbacks+0x3c>)
 800a180:	2100      	movs	r1, #0
 800a182:	4809      	ldr	r0, [pc, #36]	; (800a1a8 <HAL_Set_DMA_Callbacks+0x4c>)
 800a184:	f7fc fce6 	bl	8006b54 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim16_ch1_up, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 800a188:	4a03      	ldr	r2, [pc, #12]	; (800a198 <HAL_Set_DMA_Callbacks+0x3c>)
 800a18a:	2100      	movs	r1, #0
 800a18c:	4807      	ldr	r0, [pc, #28]	; (800a1ac <HAL_Set_DMA_Callbacks+0x50>)
 800a18e:	f7fc fce1 	bl	8006b54 <HAL_DMA_RegisterCallback>
}
 800a192:	bf00      	nop
 800a194:	bd80      	pop	{r7, pc}
 800a196:	bf00      	nop
 800a198:	0800a7c3 	.word	0x0800a7c3
 800a19c:	20002160 	.word	0x20002160
 800a1a0:	200021a8 	.word	0x200021a8
 800a1a4:	200021f0 	.word	0x200021f0
 800a1a8:	20002238 	.word	0x20002238
 800a1ac:	20002280 	.word	0x20002280

0800a1b0 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b084      	sub	sp, #16
 800a1b4:	af00      	add	r7, sp, #0
  PWR_PVDTypeDef sConfigPVD = {0};
 800a1b6:	f107 0308 	add.w	r3, r7, #8
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	601a      	str	r2, [r3, #0]
 800a1be:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a1c0:	4b13      	ldr	r3, [pc, #76]	; (800a210 <HAL_MspInit+0x60>)
 800a1c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1c4:	4a12      	ldr	r2, [pc, #72]	; (800a210 <HAL_MspInit+0x60>)
 800a1c6:	f043 0301 	orr.w	r3, r3, #1
 800a1ca:	6613      	str	r3, [r2, #96]	; 0x60
 800a1cc:	4b10      	ldr	r3, [pc, #64]	; (800a210 <HAL_MspInit+0x60>)
 800a1ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1d0:	f003 0301 	and.w	r3, r3, #1
 800a1d4:	607b      	str	r3, [r7, #4]
 800a1d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a1d8:	4b0d      	ldr	r3, [pc, #52]	; (800a210 <HAL_MspInit+0x60>)
 800a1da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1dc:	4a0c      	ldr	r2, [pc, #48]	; (800a210 <HAL_MspInit+0x60>)
 800a1de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1e2:	6593      	str	r3, [r2, #88]	; 0x58
 800a1e4:	4b0a      	ldr	r3, [pc, #40]	; (800a210 <HAL_MspInit+0x60>)
 800a1e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a1ec:	603b      	str	r3, [r7, #0]
 800a1ee:	683b      	ldr	r3, [r7, #0]

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 800a1f8:	f107 0308 	add.w	r3, r7, #8
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f7fc fedb 	bl	8006fb8 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 800a202:	f7fc ff39 	bl	8007078 <HAL_PWR_EnablePVD>
}
 800a206:	bf00      	nop
 800a208:	3710      	adds	r7, #16
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop
 800a210:	40021000 	.word	0x40021000

0800a214 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800a214:	b480      	push	{r7}
 800a216:	b083      	sub	sp, #12
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a08      	ldr	r2, [pc, #32]	; (800a244 <HAL_RTC_MspInit+0x30>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d107      	bne.n	800a236 <HAL_RTC_MspInit+0x22>
  {
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800a226:	4b08      	ldr	r3, [pc, #32]	; (800a248 <HAL_RTC_MspInit+0x34>)
 800a228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a22c:	4a06      	ldr	r2, [pc, #24]	; (800a248 <HAL_RTC_MspInit+0x34>)
 800a22e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a232:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

}
 800a236:	bf00      	nop
 800a238:	370c      	adds	r7, #12
 800a23a:	46bd      	mov	sp, r7
 800a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a240:	4770      	bx	lr
 800a242:	bf00      	nop
 800a244:	40002800 	.word	0x40002800
 800a248:	40021000 	.word	0x40021000

0800a24c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b084      	sub	sp, #16
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4a6e      	ldr	r2, [pc, #440]	; (800a414 <HAL_TIM_Base_MspInit+0x1c8>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	f040 8091 	bne.w	800a382 <HAL_TIM_Base_MspInit+0x136>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a260:	4b6d      	ldr	r3, [pc, #436]	; (800a418 <HAL_TIM_Base_MspInit+0x1cc>)
 800a262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a264:	4a6c      	ldr	r2, [pc, #432]	; (800a418 <HAL_TIM_Base_MspInit+0x1cc>)
 800a266:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a26a:	6613      	str	r3, [r2, #96]	; 0x60
 800a26c:	4b6a      	ldr	r3, [pc, #424]	; (800a418 <HAL_TIM_Base_MspInit+0x1cc>)
 800a26e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a270:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a274:	60fb      	str	r3, [r7, #12]
 800a276:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 800a278:	4b68      	ldr	r3, [pc, #416]	; (800a41c <HAL_TIM_Base_MspInit+0x1d0>)
 800a27a:	4a69      	ldr	r2, [pc, #420]	; (800a420 <HAL_TIM_Base_MspInit+0x1d4>)
 800a27c:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 800a27e:	4b67      	ldr	r3, [pc, #412]	; (800a41c <HAL_TIM_Base_MspInit+0x1d0>)
 800a280:	2207      	movs	r2, #7
 800a282:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a284:	4b65      	ldr	r3, [pc, #404]	; (800a41c <HAL_TIM_Base_MspInit+0x1d0>)
 800a286:	2210      	movs	r2, #16
 800a288:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800a28a:	4b64      	ldr	r3, [pc, #400]	; (800a41c <HAL_TIM_Base_MspInit+0x1d0>)
 800a28c:	2200      	movs	r2, #0
 800a28e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800a290:	4b62      	ldr	r3, [pc, #392]	; (800a41c <HAL_TIM_Base_MspInit+0x1d0>)
 800a292:	2280      	movs	r2, #128	; 0x80
 800a294:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800a296:	4b61      	ldr	r3, [pc, #388]	; (800a41c <HAL_TIM_Base_MspInit+0x1d0>)
 800a298:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a29c:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800a29e:	4b5f      	ldr	r3, [pc, #380]	; (800a41c <HAL_TIM_Base_MspInit+0x1d0>)
 800a2a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a2a4:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800a2a6:	4b5d      	ldr	r3, [pc, #372]	; (800a41c <HAL_TIM_Base_MspInit+0x1d0>)
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800a2ac:	4b5b      	ldr	r3, [pc, #364]	; (800a41c <HAL_TIM_Base_MspInit+0x1d0>)
 800a2ae:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a2b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800a2b4:	4859      	ldr	r0, [pc, #356]	; (800a41c <HAL_TIM_Base_MspInit+0x1d0>)
 800a2b6:	f7fc fa45 	bl	8006744 <HAL_DMA_Init>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d001      	beq.n	800a2c4 <HAL_TIM_Base_MspInit+0x78>
    {
      Error_Handler();
 800a2c0:	f7ff fea7 	bl	800a012 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	4a55      	ldr	r2, [pc, #340]	; (800a41c <HAL_TIM_Base_MspInit+0x1d0>)
 800a2c8:	625a      	str	r2, [r3, #36]	; 0x24
 800a2ca:	4a54      	ldr	r2, [pc, #336]	; (800a41c <HAL_TIM_Base_MspInit+0x1d0>)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel3;
 800a2d0:	4b54      	ldr	r3, [pc, #336]	; (800a424 <HAL_TIM_Base_MspInit+0x1d8>)
 800a2d2:	4a55      	ldr	r2, [pc, #340]	; (800a428 <HAL_TIM_Base_MspInit+0x1dc>)
 800a2d4:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_7;
 800a2d6:	4b53      	ldr	r3, [pc, #332]	; (800a424 <HAL_TIM_Base_MspInit+0x1d8>)
 800a2d8:	2207      	movs	r2, #7
 800a2da:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a2dc:	4b51      	ldr	r3, [pc, #324]	; (800a424 <HAL_TIM_Base_MspInit+0x1d8>)
 800a2de:	2210      	movs	r2, #16
 800a2e0:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800a2e2:	4b50      	ldr	r3, [pc, #320]	; (800a424 <HAL_TIM_Base_MspInit+0x1d8>)
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800a2e8:	4b4e      	ldr	r3, [pc, #312]	; (800a424 <HAL_TIM_Base_MspInit+0x1d8>)
 800a2ea:	2280      	movs	r2, #128	; 0x80
 800a2ec:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800a2ee:	4b4d      	ldr	r3, [pc, #308]	; (800a424 <HAL_TIM_Base_MspInit+0x1d8>)
 800a2f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a2f4:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800a2f6:	4b4b      	ldr	r3, [pc, #300]	; (800a424 <HAL_TIM_Base_MspInit+0x1d8>)
 800a2f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a2fc:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 800a2fe:	4b49      	ldr	r3, [pc, #292]	; (800a424 <HAL_TIM_Base_MspInit+0x1d8>)
 800a300:	2200      	movs	r2, #0
 800a302:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800a304:	4b47      	ldr	r3, [pc, #284]	; (800a424 <HAL_TIM_Base_MspInit+0x1d8>)
 800a306:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a30a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 800a30c:	4845      	ldr	r0, [pc, #276]	; (800a424 <HAL_TIM_Base_MspInit+0x1d8>)
 800a30e:	f7fc fa19 	bl	8006744 <HAL_DMA_Init>
 800a312:	4603      	mov	r3, r0
 800a314:	2b00      	cmp	r3, #0
 800a316:	d001      	beq.n	800a31c <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 800a318:	f7ff fe7b 	bl	800a012 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	4a41      	ldr	r2, [pc, #260]	; (800a424 <HAL_TIM_Base_MspInit+0x1d8>)
 800a320:	629a      	str	r2, [r3, #40]	; 0x28
 800a322:	4a40      	ldr	r2, [pc, #256]	; (800a424 <HAL_TIM_Base_MspInit+0x1d8>)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel7;
 800a328:	4b40      	ldr	r3, [pc, #256]	; (800a42c <HAL_TIM_Base_MspInit+0x1e0>)
 800a32a:	4a41      	ldr	r2, [pc, #260]	; (800a430 <HAL_TIM_Base_MspInit+0x1e4>)
 800a32c:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Request = DMA_REQUEST_7;
 800a32e:	4b3f      	ldr	r3, [pc, #252]	; (800a42c <HAL_TIM_Base_MspInit+0x1e0>)
 800a330:	2207      	movs	r2, #7
 800a332:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a334:	4b3d      	ldr	r3, [pc, #244]	; (800a42c <HAL_TIM_Base_MspInit+0x1e0>)
 800a336:	2210      	movs	r2, #16
 800a338:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800a33a:	4b3c      	ldr	r3, [pc, #240]	; (800a42c <HAL_TIM_Base_MspInit+0x1e0>)
 800a33c:	2200      	movs	r2, #0
 800a33e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800a340:	4b3a      	ldr	r3, [pc, #232]	; (800a42c <HAL_TIM_Base_MspInit+0x1e0>)
 800a342:	2280      	movs	r2, #128	; 0x80
 800a344:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800a346:	4b39      	ldr	r3, [pc, #228]	; (800a42c <HAL_TIM_Base_MspInit+0x1e0>)
 800a348:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a34c:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800a34e:	4b37      	ldr	r3, [pc, #220]	; (800a42c <HAL_TIM_Base_MspInit+0x1e0>)
 800a350:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a354:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 800a356:	4b35      	ldr	r3, [pc, #212]	; (800a42c <HAL_TIM_Base_MspInit+0x1e0>)
 800a358:	2200      	movs	r2, #0
 800a35a:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800a35c:	4b33      	ldr	r3, [pc, #204]	; (800a42c <HAL_TIM_Base_MspInit+0x1e0>)
 800a35e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a362:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 800a364:	4831      	ldr	r0, [pc, #196]	; (800a42c <HAL_TIM_Base_MspInit+0x1e0>)
 800a366:	f7fc f9ed 	bl	8006744 <HAL_DMA_Init>
 800a36a:	4603      	mov	r3, r0
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d001      	beq.n	800a374 <HAL_TIM_Base_MspInit+0x128>
    {
      Error_Handler();
 800a370:	f7ff fe4f 	bl	800a012 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	4a2d      	ldr	r2, [pc, #180]	; (800a42c <HAL_TIM_Base_MspInit+0x1e0>)
 800a378:	62da      	str	r2, [r3, #44]	; 0x2c
 800a37a:	4a2c      	ldr	r2, [pc, #176]	; (800a42c <HAL_TIM_Base_MspInit+0x1e0>)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	6293      	str	r3, [r2, #40]	; 0x28
 800a380:	e041      	b.n	800a406 <HAL_TIM_Base_MspInit+0x1ba>
  }
  else if(htim_base->Instance==TIM16)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4a2b      	ldr	r2, [pc, #172]	; (800a434 <HAL_TIM_Base_MspInit+0x1e8>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d13c      	bne.n	800a406 <HAL_TIM_Base_MspInit+0x1ba>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800a38c:	4b22      	ldr	r3, [pc, #136]	; (800a418 <HAL_TIM_Base_MspInit+0x1cc>)
 800a38e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a390:	4a21      	ldr	r2, [pc, #132]	; (800a418 <HAL_TIM_Base_MspInit+0x1cc>)
 800a392:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a396:	6613      	str	r3, [r2, #96]	; 0x60
 800a398:	4b1f      	ldr	r3, [pc, #124]	; (800a418 <HAL_TIM_Base_MspInit+0x1cc>)
 800a39a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a39c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3a0:	60bb      	str	r3, [r7, #8]
 800a3a2:	68bb      	ldr	r3, [r7, #8]

    /* TIM16 DMA Init */
    /* TIM16_CH1_UP Init */
    hdma_tim16_ch1_up.Instance = DMA1_Channel6;
 800a3a4:	4b24      	ldr	r3, [pc, #144]	; (800a438 <HAL_TIM_Base_MspInit+0x1ec>)
 800a3a6:	4a25      	ldr	r2, [pc, #148]	; (800a43c <HAL_TIM_Base_MspInit+0x1f0>)
 800a3a8:	601a      	str	r2, [r3, #0]
    hdma_tim16_ch1_up.Init.Request = DMA_REQUEST_4;
 800a3aa:	4b23      	ldr	r3, [pc, #140]	; (800a438 <HAL_TIM_Base_MspInit+0x1ec>)
 800a3ac:	2204      	movs	r2, #4
 800a3ae:	605a      	str	r2, [r3, #4]
    hdma_tim16_ch1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a3b0:	4b21      	ldr	r3, [pc, #132]	; (800a438 <HAL_TIM_Base_MspInit+0x1ec>)
 800a3b2:	2210      	movs	r2, #16
 800a3b4:	609a      	str	r2, [r3, #8]
    hdma_tim16_ch1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800a3b6:	4b20      	ldr	r3, [pc, #128]	; (800a438 <HAL_TIM_Base_MspInit+0x1ec>)
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	60da      	str	r2, [r3, #12]
    hdma_tim16_ch1_up.Init.MemInc = DMA_MINC_ENABLE;
 800a3bc:	4b1e      	ldr	r3, [pc, #120]	; (800a438 <HAL_TIM_Base_MspInit+0x1ec>)
 800a3be:	2280      	movs	r2, #128	; 0x80
 800a3c0:	611a      	str	r2, [r3, #16]
    hdma_tim16_ch1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800a3c2:	4b1d      	ldr	r3, [pc, #116]	; (800a438 <HAL_TIM_Base_MspInit+0x1ec>)
 800a3c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a3c8:	615a      	str	r2, [r3, #20]
    hdma_tim16_ch1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800a3ca:	4b1b      	ldr	r3, [pc, #108]	; (800a438 <HAL_TIM_Base_MspInit+0x1ec>)
 800a3cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a3d0:	619a      	str	r2, [r3, #24]
    hdma_tim16_ch1_up.Init.Mode = DMA_NORMAL;
 800a3d2:	4b19      	ldr	r3, [pc, #100]	; (800a438 <HAL_TIM_Base_MspInit+0x1ec>)
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	61da      	str	r2, [r3, #28]
    hdma_tim16_ch1_up.Init.Priority = DMA_PRIORITY_LOW;
 800a3d8:	4b17      	ldr	r3, [pc, #92]	; (800a438 <HAL_TIM_Base_MspInit+0x1ec>)
 800a3da:	2200      	movs	r2, #0
 800a3dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim16_ch1_up) != HAL_OK)
 800a3de:	4816      	ldr	r0, [pc, #88]	; (800a438 <HAL_TIM_Base_MspInit+0x1ec>)
 800a3e0:	f7fc f9b0 	bl	8006744 <HAL_DMA_Init>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d001      	beq.n	800a3ee <HAL_TIM_Base_MspInit+0x1a2>
    {
      Error_Handler();
 800a3ea:	f7ff fe12 	bl	800a012 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim16_ch1_up);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	4a11      	ldr	r2, [pc, #68]	; (800a438 <HAL_TIM_Base_MspInit+0x1ec>)
 800a3f2:	625a      	str	r2, [r3, #36]	; 0x24
 800a3f4:	4a10      	ldr	r2, [pc, #64]	; (800a438 <HAL_TIM_Base_MspInit+0x1ec>)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim16_ch1_up);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	4a0e      	ldr	r2, [pc, #56]	; (800a438 <HAL_TIM_Base_MspInit+0x1ec>)
 800a3fe:	621a      	str	r2, [r3, #32]
 800a400:	4a0d      	ldr	r2, [pc, #52]	; (800a438 <HAL_TIM_Base_MspInit+0x1ec>)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6293      	str	r3, [r2, #40]	; 0x28
  }
  HAL_Set_DMA_Callbacks();
 800a406:	f7ff fea9 	bl	800a15c <HAL_Set_DMA_Callbacks>
}
 800a40a:	bf00      	nop
 800a40c:	3710      	adds	r7, #16
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	40012c00 	.word	0x40012c00
 800a418:	40021000 	.word	0x40021000
 800a41c:	20002160 	.word	0x20002160
 800a420:	4002001c 	.word	0x4002001c
 800a424:	200021a8 	.word	0x200021a8
 800a428:	40020030 	.word	0x40020030
 800a42c:	200021f0 	.word	0x200021f0
 800a430:	40020080 	.word	0x40020080
 800a434:	40014400 	.word	0x40014400
 800a438:	20002280 	.word	0x20002280
 800a43c:	4002006c 	.word	0x4002006c

0800a440 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b084      	sub	sp, #16
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4a28      	ldr	r2, [pc, #160]	; (800a4f0 <HAL_TIM_PWM_MspInit+0xb0>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d149      	bne.n	800a4e6 <HAL_TIM_PWM_MspInit+0xa6>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800a452:	4b28      	ldr	r3, [pc, #160]	; (800a4f4 <HAL_TIM_PWM_MspInit+0xb4>)
 800a454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a456:	4a27      	ldr	r2, [pc, #156]	; (800a4f4 <HAL_TIM_PWM_MspInit+0xb4>)
 800a458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a45c:	6613      	str	r3, [r2, #96]	; 0x60
 800a45e:	4b25      	ldr	r3, [pc, #148]	; (800a4f4 <HAL_TIM_PWM_MspInit+0xb4>)
 800a460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a466:	60fb      	str	r3, [r7, #12]
 800a468:	68fb      	ldr	r3, [r7, #12]

    /* TIM15 DMA Init */
    /* TIM15_CH1_UP_TRIG_COM Init */
    hdma_tim15_ch1_up_trig_com.Instance = DMA1_Channel5;
 800a46a:	4b23      	ldr	r3, [pc, #140]	; (800a4f8 <HAL_TIM_PWM_MspInit+0xb8>)
 800a46c:	4a23      	ldr	r2, [pc, #140]	; (800a4fc <HAL_TIM_PWM_MspInit+0xbc>)
 800a46e:	601a      	str	r2, [r3, #0]
    hdma_tim15_ch1_up_trig_com.Init.Request = DMA_REQUEST_7;
 800a470:	4b21      	ldr	r3, [pc, #132]	; (800a4f8 <HAL_TIM_PWM_MspInit+0xb8>)
 800a472:	2207      	movs	r2, #7
 800a474:	605a      	str	r2, [r3, #4]
    hdma_tim15_ch1_up_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a476:	4b20      	ldr	r3, [pc, #128]	; (800a4f8 <HAL_TIM_PWM_MspInit+0xb8>)
 800a478:	2210      	movs	r2, #16
 800a47a:	609a      	str	r2, [r3, #8]
    hdma_tim15_ch1_up_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 800a47c:	4b1e      	ldr	r3, [pc, #120]	; (800a4f8 <HAL_TIM_PWM_MspInit+0xb8>)
 800a47e:	2200      	movs	r2, #0
 800a480:	60da      	str	r2, [r3, #12]
    hdma_tim15_ch1_up_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 800a482:	4b1d      	ldr	r3, [pc, #116]	; (800a4f8 <HAL_TIM_PWM_MspInit+0xb8>)
 800a484:	2280      	movs	r2, #128	; 0x80
 800a486:	611a      	str	r2, [r3, #16]
    hdma_tim15_ch1_up_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800a488:	4b1b      	ldr	r3, [pc, #108]	; (800a4f8 <HAL_TIM_PWM_MspInit+0xb8>)
 800a48a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a48e:	615a      	str	r2, [r3, #20]
    hdma_tim15_ch1_up_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800a490:	4b19      	ldr	r3, [pc, #100]	; (800a4f8 <HAL_TIM_PWM_MspInit+0xb8>)
 800a492:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a496:	619a      	str	r2, [r3, #24]
    hdma_tim15_ch1_up_trig_com.Init.Mode = DMA_NORMAL;
 800a498:	4b17      	ldr	r3, [pc, #92]	; (800a4f8 <HAL_TIM_PWM_MspInit+0xb8>)
 800a49a:	2200      	movs	r2, #0
 800a49c:	61da      	str	r2, [r3, #28]
    hdma_tim15_ch1_up_trig_com.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800a49e:	4b16      	ldr	r3, [pc, #88]	; (800a4f8 <HAL_TIM_PWM_MspInit+0xb8>)
 800a4a0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a4a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim15_ch1_up_trig_com) != HAL_OK)
 800a4a6:	4814      	ldr	r0, [pc, #80]	; (800a4f8 <HAL_TIM_PWM_MspInit+0xb8>)
 800a4a8:	f7fc f94c 	bl	8006744 <HAL_DMA_Init>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d001      	beq.n	800a4b6 <HAL_TIM_PWM_MspInit+0x76>
    {
      Error_Handler();
 800a4b2:	f7ff fdae 	bl	800a012 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim15_ch1_up_trig_com);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	4a0f      	ldr	r2, [pc, #60]	; (800a4f8 <HAL_TIM_PWM_MspInit+0xb8>)
 800a4ba:	625a      	str	r2, [r3, #36]	; 0x24
 800a4bc:	4a0e      	ldr	r2, [pc, #56]	; (800a4f8 <HAL_TIM_PWM_MspInit+0xb8>)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim15_ch1_up_trig_com);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	4a0c      	ldr	r2, [pc, #48]	; (800a4f8 <HAL_TIM_PWM_MspInit+0xb8>)
 800a4c6:	621a      	str	r2, [r3, #32]
 800a4c8:	4a0b      	ldr	r2, [pc, #44]	; (800a4f8 <HAL_TIM_PWM_MspInit+0xb8>)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim15_ch1_up_trig_com);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	4a09      	ldr	r2, [pc, #36]	; (800a4f8 <HAL_TIM_PWM_MspInit+0xb8>)
 800a4d2:	639a      	str	r2, [r3, #56]	; 0x38
 800a4d4:	4a08      	ldr	r2, [pc, #32]	; (800a4f8 <HAL_TIM_PWM_MspInit+0xb8>)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim15_ch1_up_trig_com);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	4a06      	ldr	r2, [pc, #24]	; (800a4f8 <HAL_TIM_PWM_MspInit+0xb8>)
 800a4de:	635a      	str	r2, [r3, #52]	; 0x34
 800a4e0:	4a05      	ldr	r2, [pc, #20]	; (800a4f8 <HAL_TIM_PWM_MspInit+0xb8>)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 800a4e6:	bf00      	nop
 800a4e8:	3710      	adds	r7, #16
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
 800a4ee:	bf00      	nop
 800a4f0:	40014000 	.word	0x40014000
 800a4f4:	40021000 	.word	0x40021000
 800a4f8:	20002238 	.word	0x20002238
 800a4fc:	40020058 	.word	0x40020058

0800a500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 1; iii++)
 800a506:	2300      	movs	r3, #0
 800a508:	71fb      	strb	r3, [r7, #7]
 800a50a:	e005      	b.n	800a518 <NMI_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800a50c:	2064      	movs	r0, #100	; 0x64
 800a50e:	f7fb ff8d 	bl	800642c <HAL_Delay>
        for (uint8_t iii = 0; iii < 1; iii++)
 800a512:	79fb      	ldrb	r3, [r7, #7]
 800a514:	3301      	adds	r3, #1
 800a516:	71fb      	strb	r3, [r7, #7]
 800a518:	79fb      	ldrb	r3, [r7, #7]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d0f6      	beq.n	800a50c <NMI_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800a51e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a522:	f7fb ff83 	bl	800642c <HAL_Delay>
        for (uint8_t iii = 0; iii < 1; iii++)
 800a526:	e7ee      	b.n	800a506 <NMI_Handler+0x6>

0800a528 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b082      	sub	sp, #8
 800a52c:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 2; iii++)
 800a52e:	2300      	movs	r3, #0
 800a530:	71fb      	strb	r3, [r7, #7]
 800a532:	e005      	b.n	800a540 <HardFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800a534:	2064      	movs	r0, #100	; 0x64
 800a536:	f7fb ff79 	bl	800642c <HAL_Delay>
        for (uint8_t iii = 0; iii < 2; iii++)
 800a53a:	79fb      	ldrb	r3, [r7, #7]
 800a53c:	3301      	adds	r3, #1
 800a53e:	71fb      	strb	r3, [r7, #7]
 800a540:	79fb      	ldrb	r3, [r7, #7]
 800a542:	2b01      	cmp	r3, #1
 800a544:	d9f6      	bls.n	800a534 <HardFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800a546:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a54a:	f7fb ff6f 	bl	800642c <HAL_Delay>
        for (uint8_t iii = 0; iii < 2; iii++)
 800a54e:	e7ee      	b.n	800a52e <HardFault_Handler+0x6>

0800a550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b082      	sub	sp, #8
 800a554:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 3; iii++)
 800a556:	2300      	movs	r3, #0
 800a558:	71fb      	strb	r3, [r7, #7]
 800a55a:	e005      	b.n	800a568 <MemManage_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800a55c:	2064      	movs	r0, #100	; 0x64
 800a55e:	f7fb ff65 	bl	800642c <HAL_Delay>
        for (uint8_t iii = 0; iii < 3; iii++)
 800a562:	79fb      	ldrb	r3, [r7, #7]
 800a564:	3301      	adds	r3, #1
 800a566:	71fb      	strb	r3, [r7, #7]
 800a568:	79fb      	ldrb	r3, [r7, #7]
 800a56a:	2b02      	cmp	r3, #2
 800a56c:	d9f6      	bls.n	800a55c <MemManage_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800a56e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a572:	f7fb ff5b 	bl	800642c <HAL_Delay>
        for (uint8_t iii = 0; iii < 3; iii++)
 800a576:	e7ee      	b.n	800a556 <MemManage_Handler+0x6>

0800a578 <BusFault_Handler>:
}
/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b082      	sub	sp, #8
 800a57c:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 4; iii++)
 800a57e:	2300      	movs	r3, #0
 800a580:	71fb      	strb	r3, [r7, #7]
 800a582:	e005      	b.n	800a590 <BusFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800a584:	2064      	movs	r0, #100	; 0x64
 800a586:	f7fb ff51 	bl	800642c <HAL_Delay>
        for (uint8_t iii = 0; iii < 4; iii++)
 800a58a:	79fb      	ldrb	r3, [r7, #7]
 800a58c:	3301      	adds	r3, #1
 800a58e:	71fb      	strb	r3, [r7, #7]
 800a590:	79fb      	ldrb	r3, [r7, #7]
 800a592:	2b03      	cmp	r3, #3
 800a594:	d9f6      	bls.n	800a584 <BusFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800a596:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a59a:	f7fb ff47 	bl	800642c <HAL_Delay>
        for (uint8_t iii = 0; iii < 4; iii++)
 800a59e:	e7ee      	b.n	800a57e <BusFault_Handler+0x6>

0800a5a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b082      	sub	sp, #8
 800a5a4:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 5; iii++)
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	71fb      	strb	r3, [r7, #7]
 800a5aa:	e005      	b.n	800a5b8 <UsageFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800a5ac:	2064      	movs	r0, #100	; 0x64
 800a5ae:	f7fb ff3d 	bl	800642c <HAL_Delay>
        for (uint8_t iii = 0; iii < 5; iii++)
 800a5b2:	79fb      	ldrb	r3, [r7, #7]
 800a5b4:	3301      	adds	r3, #1
 800a5b6:	71fb      	strb	r3, [r7, #7]
 800a5b8:	79fb      	ldrb	r3, [r7, #7]
 800a5ba:	2b04      	cmp	r3, #4
 800a5bc:	d9f6      	bls.n	800a5ac <UsageFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800a5be:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a5c2:	f7fb ff33 	bl	800642c <HAL_Delay>
        for (uint8_t iii = 0; iii < 5; iii++)
 800a5c6:	e7ee      	b.n	800a5a6 <UsageFault_Handler+0x6>

0800a5c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	af00      	add	r7, sp, #0
}
 800a5cc:	bf00      	nop
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d4:	4770      	bx	lr
	...

0800a5d8 <EXTI0_IRQHandler>:
volatile uint32_t d_passes = 0;
/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800a5d8:	b590      	push	{r4, r7, lr}
 800a5da:	b085      	sub	sp, #20
 800a5dc:	af02      	add	r7, sp, #8
    // D is pause
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_D_PIN;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_D;
 800a5e2:	2303      	movs	r3, #3
 800a5e4:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_D_IRQ;
 800a5e6:	2306      	movs	r3, #6
 800a5e8:	713b      	strb	r3, [r7, #4]
    d_passes++;
 800a5ea:	4b15      	ldr	r3, [pc, #84]	; (800a640 <EXTI0_IRQHandler+0x68>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	3301      	adds	r3, #1
 800a5f0:	4a13      	ldr	r2, [pc, #76]	; (800a640 <EXTI0_IRQHandler+0x68>)
 800a5f2:	6013      	str	r3, [r2, #0]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800a5f4:	88fb      	ldrh	r3, [r7, #6]
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f7fc fcb6 	bl	8006f68 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800a5fc:	797a      	ldrb	r2, [r7, #5]
 800a5fe:	797b      	ldrb	r3, [r7, #5]
 800a600:	4910      	ldr	r1, [pc, #64]	; (800a644 <EXTI0_IRQHandler+0x6c>)
 800a602:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800a606:	490f      	ldr	r1, [pc, #60]	; (800a644 <EXTI0_IRQHandler+0x6c>)
 800a608:	00db      	lsls	r3, r3, #3
 800a60a:	440b      	add	r3, r1
 800a60c:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800a60e:	797c      	ldrb	r4, [r7, #5]
 800a610:	f7fa f9d8 	bl	80049c4 <xTaskGetTickCountFromISR>
 800a614:	4603      	mov	r3, r0
 800a616:	4a0b      	ldr	r2, [pc, #44]	; (800a644 <EXTI0_IRQHandler+0x6c>)
 800a618:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800a61c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800a620:	4618      	mov	r0, r3
 800a622:	f7fc f874 	bl	800670e <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800a626:	4b08      	ldr	r3, [pc, #32]	; (800a648 <EXTI0_IRQHandler+0x70>)
 800a628:	6818      	ldr	r0, [r3, #0]
 800a62a:	7979      	ldrb	r1, [r7, #5]
 800a62c:	463b      	mov	r3, r7
 800a62e:	9300      	str	r3, [sp, #0]
 800a630:	2300      	movs	r3, #0
 800a632:	2203      	movs	r2, #3
 800a634:	f7fa fde4 	bl	8005200 <xTaskGenericNotifyFromISR>
}
 800a638:	bf00      	nop
 800a63a:	370c      	adds	r7, #12
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd90      	pop	{r4, r7, pc}
 800a640:	20002338 	.word	0x20002338
 800a644:	20000814 	.word	0x20000814
 800a648:	20002b54 	.word	0x20002b54

0800a64c <EXTI2_IRQHandler>:
uint32_t g_dbg_b_interrupt_count = 0;
/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800a64c:	b590      	push	{r4, r7, lr}
 800a64e:	b085      	sub	sp, #20
 800a650:	af02      	add	r7, sp, #8
    // A is speed
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_A_PIN;
 800a652:	2304      	movs	r3, #4
 800a654:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_A;
 800a656:	2300      	movs	r3, #0
 800a658:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_A_IRQ;
 800a65a:	2308      	movs	r3, #8
 800a65c:	713b      	strb	r3, [r7, #4]
    a_passes++;
 800a65e:	4b15      	ldr	r3, [pc, #84]	; (800a6b4 <EXTI2_IRQHandler+0x68>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	3301      	adds	r3, #1
 800a664:	4a13      	ldr	r2, [pc, #76]	; (800a6b4 <EXTI2_IRQHandler+0x68>)
 800a666:	6013      	str	r3, [r2, #0]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800a668:	88fb      	ldrh	r3, [r7, #6]
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7fc fc7c 	bl	8006f68 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800a670:	797a      	ldrb	r2, [r7, #5]
 800a672:	797b      	ldrb	r3, [r7, #5]
 800a674:	4910      	ldr	r1, [pc, #64]	; (800a6b8 <EXTI2_IRQHandler+0x6c>)
 800a676:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800a67a:	490f      	ldr	r1, [pc, #60]	; (800a6b8 <EXTI2_IRQHandler+0x6c>)
 800a67c:	00db      	lsls	r3, r3, #3
 800a67e:	440b      	add	r3, r1
 800a680:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800a682:	797c      	ldrb	r4, [r7, #5]
 800a684:	f7fa f99e 	bl	80049c4 <xTaskGetTickCountFromISR>
 800a688:	4603      	mov	r3, r0
 800a68a:	4a0b      	ldr	r2, [pc, #44]	; (800a6b8 <EXTI2_IRQHandler+0x6c>)
 800a68c:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800a690:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800a694:	4618      	mov	r0, r3
 800a696:	f7fc f83a 	bl	800670e <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800a69a:	4b08      	ldr	r3, [pc, #32]	; (800a6bc <EXTI2_IRQHandler+0x70>)
 800a69c:	6818      	ldr	r0, [r3, #0]
 800a69e:	7979      	ldrb	r1, [r7, #5]
 800a6a0:	463b      	mov	r3, r7
 800a6a2:	9300      	str	r3, [sp, #0]
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	2203      	movs	r2, #3
 800a6a8:	f7fa fdaa 	bl	8005200 <xTaskGenericNotifyFromISR>
}
 800a6ac:	bf00      	nop
 800a6ae:	370c      	adds	r7, #12
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd90      	pop	{r4, r7, pc}
 800a6b4:	2000233c 	.word	0x2000233c
 800a6b8:	20000814 	.word	0x20000814
 800a6bc:	20002b54 	.word	0x20002b54

0800a6c0 <EXTI15_10_IRQHandler>:
volatile uint32_t b_passes = 0;
/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800a6c0:	b590      	push	{r4, r7, lr}
 800a6c2:	b085      	sub	sp, #20
 800a6c4:	af02      	add	r7, sp, #8
    // B is state
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_B_PIN;
 800a6c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a6ca:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_B;
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_B_IRQ;
 800a6d0:	2328      	movs	r3, #40	; 0x28
 800a6d2:	713b      	strb	r3, [r7, #4]
    b_passes++;
 800a6d4:	4b15      	ldr	r3, [pc, #84]	; (800a72c <EXTI15_10_IRQHandler+0x6c>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	3301      	adds	r3, #1
 800a6da:	4a14      	ldr	r2, [pc, #80]	; (800a72c <EXTI15_10_IRQHandler+0x6c>)
 800a6dc:	6013      	str	r3, [r2, #0]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800a6de:	88fb      	ldrh	r3, [r7, #6]
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f7fc fc41 	bl	8006f68 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800a6e6:	797a      	ldrb	r2, [r7, #5]
 800a6e8:	797b      	ldrb	r3, [r7, #5]
 800a6ea:	4911      	ldr	r1, [pc, #68]	; (800a730 <EXTI15_10_IRQHandler+0x70>)
 800a6ec:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800a6f0:	490f      	ldr	r1, [pc, #60]	; (800a730 <EXTI15_10_IRQHandler+0x70>)
 800a6f2:	00db      	lsls	r3, r3, #3
 800a6f4:	440b      	add	r3, r1
 800a6f6:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800a6f8:	797c      	ldrb	r4, [r7, #5]
 800a6fa:	f7fa f963 	bl	80049c4 <xTaskGetTickCountFromISR>
 800a6fe:	4603      	mov	r3, r0
 800a700:	4a0b      	ldr	r2, [pc, #44]	; (800a730 <EXTI15_10_IRQHandler+0x70>)
 800a702:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800a706:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800a70a:	4618      	mov	r0, r3
 800a70c:	f7fb ffff 	bl	800670e <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800a710:	4b08      	ldr	r3, [pc, #32]	; (800a734 <EXTI15_10_IRQHandler+0x74>)
 800a712:	6818      	ldr	r0, [r3, #0]
 800a714:	7979      	ldrb	r1, [r7, #5]
 800a716:	463b      	mov	r3, r7
 800a718:	9300      	str	r3, [sp, #0]
 800a71a:	2300      	movs	r3, #0
 800a71c:	2203      	movs	r2, #3
 800a71e:	f7fa fd6f 	bl	8005200 <xTaskGenericNotifyFromISR>
}
 800a722:	bf00      	nop
 800a724:	370c      	adds	r7, #12
 800a726:	46bd      	mov	sp, r7
 800a728:	bd90      	pop	{r4, r7, pc}
 800a72a:	bf00      	nop
 800a72c:	20002340 	.word	0x20002340
 800a730:	20000814 	.word	0x20000814
 800a734:	20002b54 	.word	0x20002b54

0800a738 <EXTI9_5_IRQHandler>:
volatile uint32_t c_passes = 0;
/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800a738:	b590      	push	{r4, r7, lr}
 800a73a:	b085      	sub	sp, #20
 800a73c:	af02      	add	r7, sp, #8
    // C is color
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_C_PIN;
 800a73e:	2320      	movs	r3, #32
 800a740:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_C;
 800a742:	2302      	movs	r3, #2
 800a744:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_C_IRQ;
 800a746:	2317      	movs	r3, #23
 800a748:	713b      	strb	r3, [r7, #4]
    c_passes++;
 800a74a:	4b15      	ldr	r3, [pc, #84]	; (800a7a0 <EXTI9_5_IRQHandler+0x68>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	3301      	adds	r3, #1
 800a750:	4a13      	ldr	r2, [pc, #76]	; (800a7a0 <EXTI9_5_IRQHandler+0x68>)
 800a752:	6013      	str	r3, [r2, #0]
    // add button irq here..
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800a754:	88fb      	ldrh	r3, [r7, #6]
 800a756:	4618      	mov	r0, r3
 800a758:	f7fc fc06 	bl	8006f68 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800a75c:	797a      	ldrb	r2, [r7, #5]
 800a75e:	797b      	ldrb	r3, [r7, #5]
 800a760:	4910      	ldr	r1, [pc, #64]	; (800a7a4 <EXTI9_5_IRQHandler+0x6c>)
 800a762:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800a766:	490f      	ldr	r1, [pc, #60]	; (800a7a4 <EXTI9_5_IRQHandler+0x6c>)
 800a768:	00db      	lsls	r3, r3, #3
 800a76a:	440b      	add	r3, r1
 800a76c:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800a76e:	797c      	ldrb	r4, [r7, #5]
 800a770:	f7fa f928 	bl	80049c4 <xTaskGetTickCountFromISR>
 800a774:	4603      	mov	r3, r0
 800a776:	4a0b      	ldr	r2, [pc, #44]	; (800a7a4 <EXTI9_5_IRQHandler+0x6c>)
 800a778:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800a77c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800a780:	4618      	mov	r0, r3
 800a782:	f7fb ffc4 	bl	800670e <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800a786:	4b08      	ldr	r3, [pc, #32]	; (800a7a8 <EXTI9_5_IRQHandler+0x70>)
 800a788:	6818      	ldr	r0, [r3, #0]
 800a78a:	7979      	ldrb	r1, [r7, #5]
 800a78c:	463b      	mov	r3, r7
 800a78e:	9300      	str	r3, [sp, #0]
 800a790:	2300      	movs	r3, #0
 800a792:	2203      	movs	r2, #3
 800a794:	f7fa fd34 	bl	8005200 <xTaskGenericNotifyFromISR>
}
 800a798:	bf00      	nop
 800a79a:	370c      	adds	r7, #12
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd90      	pop	{r4, r7, pc}
 800a7a0:	20002344 	.word	0x20002344
 800a7a4:	20000814 	.word	0x20000814
 800a7a8:	20002b54 	.word	0x20002b54

0800a7ac <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	80fb      	strh	r3, [r7, #6]

}
 800a7b6:	bf00      	nop
 800a7b8:	370c      	adds	r7, #12
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c0:	4770      	bx	lr

0800a7c2 <HAL_DMA_CMPLT_CALLBACK>:


void HAL_DMA_CMPLT_CALLBACK(DMA_HandleTypeDef *hdma)
{
 800a7c2:	b480      	push	{r7}
 800a7c4:	b083      	sub	sp, #12
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	6078      	str	r0, [r7, #4]
    while(1);
 800a7ca:	e7fe      	b.n	800a7ca <HAL_DMA_CMPLT_CALLBACK+0x8>

0800a7cc <HAL_TIM_PWM_PulseFinishedCallback>:
bool gb_dma_cmplt_strip_1 = true;
bool gb_dma_cmplt_strip_2 = true;
bool gb_dma_cmplt_strip_3 = true;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b082      	sub	sp, #8
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
    switch (htim->Channel)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	7f1b      	ldrb	r3, [r3, #28]
 800a7d8:	2b04      	cmp	r3, #4
 800a7da:	d016      	beq.n	800a80a <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
 800a7dc:	2b04      	cmp	r3, #4
 800a7de:	dc1c      	bgt.n	800a81a <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d002      	beq.n	800a7ea <HAL_TIM_PWM_PulseFinishedCallback+0x1e>
 800a7e4:	2b02      	cmp	r3, #2
 800a7e6:	d008      	beq.n	800a7fa <HAL_TIM_PWM_PulseFinishedCallback+0x2e>
        case HAL_TIM_ACTIVE_CHANNEL_3:
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
            gb_dma_cmplt_strip_3 = true;
        break;
        default:
        break;
 800a7e8:	e017      	b.n	800a81a <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 800a7ea:	2100      	movs	r1, #0
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f7fe f979 	bl	8008ae4 <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_1 = true;
 800a7f2:	4b0c      	ldr	r3, [pc, #48]	; (800a824 <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	701a      	strb	r2, [r3, #0]
        break;
 800a7f8:	e010      	b.n	800a81c <HAL_TIM_PWM_PulseFinishedCallback+0x50>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_2);
 800a7fa:	2104      	movs	r1, #4
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f7fe f971 	bl	8008ae4 <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_2 = true;
 800a802:	4b09      	ldr	r3, [pc, #36]	; (800a828 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 800a804:	2201      	movs	r2, #1
 800a806:	701a      	strb	r2, [r3, #0]
        break;
 800a808:	e008      	b.n	800a81c <HAL_TIM_PWM_PulseFinishedCallback+0x50>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
 800a80a:	2108      	movs	r1, #8
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f7fe f969 	bl	8008ae4 <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_3 = true;
 800a812:	4b06      	ldr	r3, [pc, #24]	; (800a82c <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 800a814:	2201      	movs	r2, #1
 800a816:	701a      	strb	r2, [r3, #0]
        break;
 800a818:	e000      	b.n	800a81c <HAL_TIM_PWM_PulseFinishedCallback+0x50>
        break;
 800a81a:	bf00      	nop
    }
}
 800a81c:	bf00      	nop
 800a81e:	3708      	adds	r7, #8
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}
 800a824:	2000006d 	.word	0x2000006d
 800a828:	2000006e 	.word	0x2000006e
 800a82c:	2000006f 	.word	0x2000006f

0800a830 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800a834:	4802      	ldr	r0, [pc, #8]	; (800a840 <DMA1_Channel2_IRQHandler+0x10>)
 800a836:	f7fc f8de 	bl	80069f6 <HAL_DMA_IRQHandler>
}
 800a83a:	bf00      	nop
 800a83c:	bd80      	pop	{r7, pc}
 800a83e:	bf00      	nop
 800a840:	20002160 	.word	0x20002160

0800a844 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 800a848:	4802      	ldr	r0, [pc, #8]	; (800a854 <DMA1_Channel3_IRQHandler+0x10>)
 800a84a:	f7fc f8d4 	bl	80069f6 <HAL_DMA_IRQHandler>
}
 800a84e:	bf00      	nop
 800a850:	bd80      	pop	{r7, pc}
 800a852:	bf00      	nop
 800a854:	200021a8 	.word	0x200021a8

0800a858 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim15_ch1_up_trig_com);
 800a85c:	4802      	ldr	r0, [pc, #8]	; (800a868 <DMA1_Channel5_IRQHandler+0x10>)
 800a85e:	f7fc f8ca 	bl	80069f6 <HAL_DMA_IRQHandler>
}
 800a862:	bf00      	nop
 800a864:	bd80      	pop	{r7, pc}
 800a866:	bf00      	nop
 800a868:	20002238 	.word	0x20002238

0800a86c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim16_ch1_up);
 800a870:	4802      	ldr	r0, [pc, #8]	; (800a87c <DMA1_Channel6_IRQHandler+0x10>)
 800a872:	f7fc f8c0 	bl	80069f6 <HAL_DMA_IRQHandler>
}
 800a876:	bf00      	nop
 800a878:	bd80      	pop	{r7, pc}
 800a87a:	bf00      	nop
 800a87c:	20002280 	.word	0x20002280

0800a880 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 800a884:	4802      	ldr	r0, [pc, #8]	; (800a890 <DMA1_Channel7_IRQHandler+0x10>)
 800a886:	f7fc f8b6 	bl	80069f6 <HAL_DMA_IRQHandler>
}
 800a88a:	bf00      	nop
 800a88c:	bd80      	pop	{r7, pc}
 800a88e:	bf00      	nop
 800a890:	200021f0 	.word	0x200021f0

0800a894 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a894:	b480      	push	{r7}
 800a896:	af00      	add	r7, sp, #0
	return 1;
 800a898:	2301      	movs	r3, #1
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr

0800a8a4 <_kill>:

int _kill(int pid, int sig)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b082      	sub	sp, #8
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800a8ae:	f000 fcab 	bl	800b208 <__errno>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	2216      	movs	r2, #22
 800a8b6:	601a      	str	r2, [r3, #0]
	return -1;
 800a8b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3708      	adds	r7, #8
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}

0800a8c4 <_exit>:

void _exit (int status)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800a8cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f7ff ffe7 	bl	800a8a4 <_kill>
	while (1) {}		/* Make sure we hang here */
 800a8d6:	e7fe      	b.n	800a8d6 <_exit+0x12>

0800a8d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b086      	sub	sp, #24
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	60f8      	str	r0, [r7, #12]
 800a8e0:	60b9      	str	r1, [r7, #8]
 800a8e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	617b      	str	r3, [r7, #20]
 800a8e8:	e00a      	b.n	800a900 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800a8ea:	f3af 8000 	nop.w
 800a8ee:	4601      	mov	r1, r0
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	1c5a      	adds	r2, r3, #1
 800a8f4:	60ba      	str	r2, [r7, #8]
 800a8f6:	b2ca      	uxtb	r2, r1
 800a8f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	617b      	str	r3, [r7, #20]
 800a900:	697a      	ldr	r2, [r7, #20]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	429a      	cmp	r2, r3
 800a906:	dbf0      	blt.n	800a8ea <_read+0x12>
	}

return len;
 800a908:	687b      	ldr	r3, [r7, #4]
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3718      	adds	r7, #24
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}

0800a912 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a912:	b580      	push	{r7, lr}
 800a914:	b086      	sub	sp, #24
 800a916:	af00      	add	r7, sp, #0
 800a918:	60f8      	str	r0, [r7, #12]
 800a91a:	60b9      	str	r1, [r7, #8]
 800a91c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a91e:	2300      	movs	r3, #0
 800a920:	617b      	str	r3, [r7, #20]
 800a922:	e009      	b.n	800a938 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	1c5a      	adds	r2, r3, #1
 800a928:	60ba      	str	r2, [r7, #8]
 800a92a:	781b      	ldrb	r3, [r3, #0]
 800a92c:	4618      	mov	r0, r3
 800a92e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	3301      	adds	r3, #1
 800a936:	617b      	str	r3, [r7, #20]
 800a938:	697a      	ldr	r2, [r7, #20]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	429a      	cmp	r2, r3
 800a93e:	dbf1      	blt.n	800a924 <_write+0x12>
	}
	return len;
 800a940:	687b      	ldr	r3, [r7, #4]
}
 800a942:	4618      	mov	r0, r3
 800a944:	3718      	adds	r7, #24
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}

0800a94a <_close>:

int _close(int file)
{
 800a94a:	b480      	push	{r7}
 800a94c:	b083      	sub	sp, #12
 800a94e:	af00      	add	r7, sp, #0
 800a950:	6078      	str	r0, [r7, #4]
	return -1;
 800a952:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800a956:	4618      	mov	r0, r3
 800a958:	370c      	adds	r7, #12
 800a95a:	46bd      	mov	sp, r7
 800a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a960:	4770      	bx	lr

0800a962 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a962:	b480      	push	{r7}
 800a964:	b083      	sub	sp, #12
 800a966:	af00      	add	r7, sp, #0
 800a968:	6078      	str	r0, [r7, #4]
 800a96a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a972:	605a      	str	r2, [r3, #4]
	return 0;
 800a974:	2300      	movs	r3, #0
}
 800a976:	4618      	mov	r0, r3
 800a978:	370c      	adds	r7, #12
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr

0800a982 <_isatty>:

int _isatty(int file)
{
 800a982:	b480      	push	{r7}
 800a984:	b083      	sub	sp, #12
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
	return 1;
 800a98a:	2301      	movs	r3, #1
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	370c      	adds	r7, #12
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr

0800a998 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800a998:	b480      	push	{r7}
 800a99a:	b085      	sub	sp, #20
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	60f8      	str	r0, [r7, #12]
 800a9a0:	60b9      	str	r1, [r7, #8]
 800a9a2:	607a      	str	r2, [r7, #4]
	return 0;
 800a9a4:	2300      	movs	r3, #0
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3714      	adds	r7, #20
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b0:	4770      	bx	lr
	...

0800a9b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b086      	sub	sp, #24
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a9bc:	4a14      	ldr	r2, [pc, #80]	; (800aa10 <_sbrk+0x5c>)
 800a9be:	4b15      	ldr	r3, [pc, #84]	; (800aa14 <_sbrk+0x60>)
 800a9c0:	1ad3      	subs	r3, r2, r3
 800a9c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a9c8:	4b13      	ldr	r3, [pc, #76]	; (800aa18 <_sbrk+0x64>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d102      	bne.n	800a9d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a9d0:	4b11      	ldr	r3, [pc, #68]	; (800aa18 <_sbrk+0x64>)
 800a9d2:	4a12      	ldr	r2, [pc, #72]	; (800aa1c <_sbrk+0x68>)
 800a9d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a9d6:	4b10      	ldr	r3, [pc, #64]	; (800aa18 <_sbrk+0x64>)
 800a9d8:	681a      	ldr	r2, [r3, #0]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	4413      	add	r3, r2
 800a9de:	693a      	ldr	r2, [r7, #16]
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d207      	bcs.n	800a9f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a9e4:	f000 fc10 	bl	800b208 <__errno>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	220c      	movs	r2, #12
 800a9ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a9ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a9f2:	e009      	b.n	800aa08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a9f4:	4b08      	ldr	r3, [pc, #32]	; (800aa18 <_sbrk+0x64>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a9fa:	4b07      	ldr	r3, [pc, #28]	; (800aa18 <_sbrk+0x64>)
 800a9fc:	681a      	ldr	r2, [r3, #0]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	4413      	add	r3, r2
 800aa02:	4a05      	ldr	r2, [pc, #20]	; (800aa18 <_sbrk+0x64>)
 800aa04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800aa06:	68fb      	ldr	r3, [r7, #12]
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3718      	adds	r7, #24
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}
 800aa10:	20010000 	.word	0x20010000
 800aa14:	00000400 	.word	0x00000400
 800aa18:	20002348 	.word	0x20002348
 800aa1c:	20003d60 	.word	0x20003d60

0800aa20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800aa20:	b480      	push	{r7}
 800aa22:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800aa24:	4b06      	ldr	r3, [pc, #24]	; (800aa40 <SystemInit+0x20>)
 800aa26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa2a:	4a05      	ldr	r2, [pc, #20]	; (800aa40 <SystemInit+0x20>)
 800aa2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aa30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800aa34:	bf00      	nop
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr
 800aa3e:	bf00      	nop
 800aa40:	e000ed00 	.word	0xe000ed00

0800aa44 <flash_info_animation_enabled>:

flash_info_block_t  g_flash_info_block;


bool flash_info_animation_enabled(led_state_e animation)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b085      	sub	sp, #20
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	71fb      	strb	r3, [r7, #7]
    bool return_val = false;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	73fb      	strb	r3, [r7, #15]
    switch (animation)
 800aa52:	79fb      	ldrb	r3, [r7, #7]
 800aa54:	2b0b      	cmp	r3, #11
 800aa56:	f200 8089 	bhi.w	800ab6c <flash_info_animation_enabled+0x128>
 800aa5a:	a201      	add	r2, pc, #4	; (adr r2, 800aa60 <flash_info_animation_enabled+0x1c>)
 800aa5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa60:	0800aa91 	.word	0x0800aa91
 800aa64:	0800aaa5 	.word	0x0800aaa5
 800aa68:	0800aab9 	.word	0x0800aab9
 800aa6c:	0800aacd 	.word	0x0800aacd
 800aa70:	0800aae1 	.word	0x0800aae1
 800aa74:	0800aaf5 	.word	0x0800aaf5
 800aa78:	0800ab09 	.word	0x0800ab09
 800aa7c:	0800ab1d 	.word	0x0800ab1d
 800aa80:	0800ab31 	.word	0x0800ab31
 800aa84:	0800ab45 	.word	0x0800ab45
 800aa88:	0800ab6d 	.word	0x0800ab6d
 800aa8c:	0800ab59 	.word	0x0800ab59
    {
        case LED_STATE_SPELL:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.spell) return_val = true;
 800aa90:	4b45      	ldr	r3, [pc, #276]	; (800aba8 <flash_info_animation_enabled+0x164>)
 800aa92:	7adb      	ldrb	r3, [r3, #11]
 800aa94:	f003 0301 	and.w	r3, r3, #1
 800aa98:	b2db      	uxtb	r3, r3
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d068      	beq.n	800ab70 <flash_info_animation_enabled+0x12c>
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	73fb      	strb	r3, [r7, #15]
        break;
 800aaa2:	e065      	b.n	800ab70 <flash_info_animation_enabled+0x12c>
//        case LED_STATE_CUSTOM:
//        	return_val = true;
//            //if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.spell) return_val = true;
//        break;
        case LED_STATE_WHITE_COLOR:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.white) return_val = true;
 800aaa4:	4b40      	ldr	r3, [pc, #256]	; (800aba8 <flash_info_animation_enabled+0x164>)
 800aaa6:	7adb      	ldrb	r3, [r3, #11]
 800aaa8:	f003 0302 	and.w	r3, r3, #2
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d060      	beq.n	800ab74 <flash_info_animation_enabled+0x130>
 800aab2:	2301      	movs	r3, #1
 800aab4:	73fb      	strb	r3, [r7, #15]
        break;
 800aab6:	e05d      	b.n	800ab74 <flash_info_animation_enabled+0x130>
        case LED_STATE_SOLID_COLOR:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.solid) return_val = true;
 800aab8:	4b3b      	ldr	r3, [pc, #236]	; (800aba8 <flash_info_animation_enabled+0x164>)
 800aaba:	7adb      	ldrb	r3, [r3, #11]
 800aabc:	f003 0304 	and.w	r3, r3, #4
 800aac0:	b2db      	uxtb	r3, r3
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d058      	beq.n	800ab78 <flash_info_animation_enabled+0x134>
 800aac6:	2301      	movs	r3, #1
 800aac8:	73fb      	strb	r3, [r7, #15]
        break;
 800aaca:	e055      	b.n	800ab78 <flash_info_animation_enabled+0x134>
        case LED_STATE_SPARKLE_NO_FILL:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.sparkle_no_fill) return_val = true;
 800aacc:	4b36      	ldr	r3, [pc, #216]	; (800aba8 <flash_info_animation_enabled+0x164>)
 800aace:	7adb      	ldrb	r3, [r3, #11]
 800aad0:	f003 0310 	and.w	r3, r3, #16
 800aad4:	b2db      	uxtb	r3, r3
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d050      	beq.n	800ab7c <flash_info_animation_enabled+0x138>
 800aada:	2301      	movs	r3, #1
 800aadc:	73fb      	strb	r3, [r7, #15]
        break;
 800aade:	e04d      	b.n	800ab7c <flash_info_animation_enabled+0x138>
        case LED_STATE_SPARKLE_FILL:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.sparkle) return_val = true;
 800aae0:	4b31      	ldr	r3, [pc, #196]	; (800aba8 <flash_info_animation_enabled+0x164>)
 800aae2:	7adb      	ldrb	r3, [r3, #11]
 800aae4:	f003 0308 	and.w	r3, r3, #8
 800aae8:	b2db      	uxtb	r3, r3
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d048      	beq.n	800ab80 <flash_info_animation_enabled+0x13c>
 800aaee:	2301      	movs	r3, #1
 800aaf0:	73fb      	strb	r3, [r7, #15]
        break;
 800aaf2:	e045      	b.n	800ab80 <flash_info_animation_enabled+0x13c>
        case LED_STATE_RAINBOW_CYCLE:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.rainbow) return_val = true;
 800aaf4:	4b2c      	ldr	r3, [pc, #176]	; (800aba8 <flash_info_animation_enabled+0x164>)
 800aaf6:	7adb      	ldrb	r3, [r3, #11]
 800aaf8:	f003 0320 	and.w	r3, r3, #32
 800aafc:	b2db      	uxtb	r3, r3
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d040      	beq.n	800ab84 <flash_info_animation_enabled+0x140>
 800ab02:	2301      	movs	r3, #1
 800ab04:	73fb      	strb	r3, [r7, #15]
        break;
 800ab06:	e03d      	b.n	800ab84 <flash_info_animation_enabled+0x140>
        case LED_STATE_THEATER_CHASE:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.chase) return_val = true;
 800ab08:	4b27      	ldr	r3, [pc, #156]	; (800aba8 <flash_info_animation_enabled+0x164>)
 800ab0a:	7adb      	ldrb	r3, [r3, #11]
 800ab0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab10:	b2db      	uxtb	r3, r3
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d038      	beq.n	800ab88 <flash_info_animation_enabled+0x144>
 800ab16:	2301      	movs	r3, #1
 800ab18:	73fb      	strb	r3, [r7, #15]
        break;
 800ab1a:	e035      	b.n	800ab88 <flash_info_animation_enabled+0x144>
        case LED_STATE_THEATER_CHASE_RAINBOW:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.chase_rainbow) return_val = true;
 800ab1c:	4b22      	ldr	r3, [pc, #136]	; (800aba8 <flash_info_animation_enabled+0x164>)
 800ab1e:	7adb      	ldrb	r3, [r3, #11]
 800ab20:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ab24:	b2db      	uxtb	r3, r3
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d030      	beq.n	800ab8c <flash_info_animation_enabled+0x148>
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	73fb      	strb	r3, [r7, #15]
        break;
 800ab2e:	e02d      	b.n	800ab8c <flash_info_animation_enabled+0x148>
        case LED_STATE_FADE_IN_AND_OUT:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.fade) return_val = true;
 800ab30:	4b1d      	ldr	r3, [pc, #116]	; (800aba8 <flash_info_animation_enabled+0x164>)
 800ab32:	7b1b      	ldrb	r3, [r3, #12]
 800ab34:	f003 0301 	and.w	r3, r3, #1
 800ab38:	b2db      	uxtb	r3, r3
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d028      	beq.n	800ab90 <flash_info_animation_enabled+0x14c>
 800ab3e:	2301      	movs	r3, #1
 800ab40:	73fb      	strb	r3, [r7, #15]
        break;
 800ab42:	e025      	b.n	800ab90 <flash_info_animation_enabled+0x14c>
        case LED_STATE_TWINKLE:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.twinkle) return_val = true;
 800ab44:	4b18      	ldr	r3, [pc, #96]	; (800aba8 <flash_info_animation_enabled+0x164>)
 800ab46:	7b1b      	ldrb	r3, [r3, #12]
 800ab48:	f003 0302 	and.w	r3, r3, #2
 800ab4c:	b2db      	uxtb	r3, r3
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d020      	beq.n	800ab94 <flash_info_animation_enabled+0x150>
 800ab52:	2301      	movs	r3, #1
 800ab54:	73fb      	strb	r3, [r7, #15]
        break;
 800ab56:	e01d      	b.n	800ab94 <flash_info_animation_enabled+0x150>
        case LED_STATE_SRW_DEBUG:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.white) return_val = true;
 800ab58:	4b13      	ldr	r3, [pc, #76]	; (800aba8 <flash_info_animation_enabled+0x164>)
 800ab5a:	7adb      	ldrb	r3, [r3, #11]
 800ab5c:	f003 0302 	and.w	r3, r3, #2
 800ab60:	b2db      	uxtb	r3, r3
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d018      	beq.n	800ab98 <flash_info_animation_enabled+0x154>
 800ab66:	2301      	movs	r3, #1
 800ab68:	73fb      	strb	r3, [r7, #15]
        break;
 800ab6a:	e015      	b.n	800ab98 <flash_info_animation_enabled+0x154>
        default:
        break;
 800ab6c:	bf00      	nop
 800ab6e:	e014      	b.n	800ab9a <flash_info_animation_enabled+0x156>
        break;
 800ab70:	bf00      	nop
 800ab72:	e012      	b.n	800ab9a <flash_info_animation_enabled+0x156>
        break;
 800ab74:	bf00      	nop
 800ab76:	e010      	b.n	800ab9a <flash_info_animation_enabled+0x156>
        break;
 800ab78:	bf00      	nop
 800ab7a:	e00e      	b.n	800ab9a <flash_info_animation_enabled+0x156>
        break;
 800ab7c:	bf00      	nop
 800ab7e:	e00c      	b.n	800ab9a <flash_info_animation_enabled+0x156>
        break;
 800ab80:	bf00      	nop
 800ab82:	e00a      	b.n	800ab9a <flash_info_animation_enabled+0x156>
        break;
 800ab84:	bf00      	nop
 800ab86:	e008      	b.n	800ab9a <flash_info_animation_enabled+0x156>
        break;
 800ab88:	bf00      	nop
 800ab8a:	e006      	b.n	800ab9a <flash_info_animation_enabled+0x156>
        break;
 800ab8c:	bf00      	nop
 800ab8e:	e004      	b.n	800ab9a <flash_info_animation_enabled+0x156>
        break;
 800ab90:	bf00      	nop
 800ab92:	e002      	b.n	800ab9a <flash_info_animation_enabled+0x156>
        break;
 800ab94:	bf00      	nop
 800ab96:	e000      	b.n	800ab9a <flash_info_animation_enabled+0x156>
        break;
 800ab98:	bf00      	nop
    }
    return return_val;
 800ab9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3714      	adds	r7, #20
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr
 800aba8:	2000234c 	.word	0x2000234c

0800abac <flash_info_block_init>:


void flash_info_block_init(void)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	af00      	add	r7, sp, #0
    g_flash_info_block.flash_info_data.uuid.data[0] = HAL_GetUIDw0();
 800abb0:	f7fb fc60 	bl	8006474 <HAL_GetUIDw0>
 800abb4:	4603      	mov	r3, r0
 800abb6:	4a32      	ldr	r2, [pc, #200]	; (800ac80 <flash_info_block_init+0xd4>)
 800abb8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    g_flash_info_block.flash_info_data.uuid.data[1] = HAL_GetUIDw1();
 800abbc:	f7fb fc66 	bl	800648c <HAL_GetUIDw1>
 800abc0:	4603      	mov	r3, r0
 800abc2:	4a2f      	ldr	r2, [pc, #188]	; (800ac80 <flash_info_block_init+0xd4>)
 800abc4:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    g_flash_info_block.flash_info_data.uuid.data[2] = HAL_GetUIDw2();
 800abc8:	f7fb fc6c 	bl	80064a4 <HAL_GetUIDw2>
 800abcc:	4603      	mov	r3, r0
 800abce:	4a2c      	ldr	r2, [pc, #176]	; (800ac80 <flash_info_block_init+0xd4>)
 800abd0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    g_flash_info_block.flash_info_data.strip_info.num_strips = 1;
 800abd4:	4b2a      	ldr	r3, [pc, #168]	; (800ac80 <flash_info_block_init+0xd4>)
 800abd6:	2201      	movs	r2, #1
 800abd8:	701a      	strb	r2, [r3, #0]
    g_flash_info_block.flash_info_data.strip_info.strip_sync_animation = 1;
 800abda:	4b29      	ldr	r3, [pc, #164]	; (800ac80 <flash_info_block_init+0xd4>)
 800abdc:	2201      	movs	r2, #1
 800abde:	705a      	strb	r2, [r3, #1]
    g_flash_info_block.flash_info_data.strip_info.strip_length_one = 1;
 800abe0:	4b27      	ldr	r3, [pc, #156]	; (800ac80 <flash_info_block_init+0xd4>)
 800abe2:	2201      	movs	r2, #1
 800abe4:	805a      	strh	r2, [r3, #2]
    g_flash_info_block.flash_info_data.strip_info.strip_length_two = 1;
 800abe6:	4b26      	ldr	r3, [pc, #152]	; (800ac80 <flash_info_block_init+0xd4>)
 800abe8:	2201      	movs	r2, #1
 800abea:	809a      	strh	r2, [r3, #4]
    g_flash_info_block.flash_info_data.strip_info.strip_length_three = 1;
 800abec:	4b24      	ldr	r3, [pc, #144]	; (800ac80 <flash_info_block_init+0xd4>)
 800abee:	2201      	movs	r2, #1
 800abf0:	80da      	strh	r2, [r3, #6]
    g_flash_info_block.flash_info_data.strip_info.strip_one_brightness = 1;
 800abf2:	4b23      	ldr	r3, [pc, #140]	; (800ac80 <flash_info_block_init+0xd4>)
 800abf4:	2201      	movs	r2, #1
 800abf6:	721a      	strb	r2, [r3, #8]
    g_flash_info_block.flash_info_data.strip_info.strip_two_brightness = 1;
 800abf8:	4b21      	ldr	r3, [pc, #132]	; (800ac80 <flash_info_block_init+0xd4>)
 800abfa:	2201      	movs	r2, #1
 800abfc:	725a      	strb	r2, [r3, #9]
    g_flash_info_block.flash_info_data.strip_info.strip_three_brightness = 1;
 800abfe:	4b20      	ldr	r3, [pc, #128]	; (800ac80 <flash_info_block_init+0xd4>)
 800ac00:	2201      	movs	r2, #1
 800ac02:	729a      	strb	r2, [r3, #10]
    g_flash_info_block.flash_info_data.strip_info.strip_one_brightness = 1;
 800ac04:	4b1e      	ldr	r3, [pc, #120]	; (800ac80 <flash_info_block_init+0xd4>)
 800ac06:	2201      	movs	r2, #1
 800ac08:	721a      	strb	r2, [r3, #8]

    g_flash_info_block.flash_info_data.strip_info.strip_two_brightness = 1;
 800ac0a:	4b1d      	ldr	r3, [pc, #116]	; (800ac80 <flash_info_block_init+0xd4>)
 800ac0c:	2201      	movs	r2, #1
 800ac0e:	725a      	strb	r2, [r3, #9]
    g_flash_info_block.flash_info_data.strip_info.strip_three_brightness = 1;
 800ac10:	4b1b      	ldr	r3, [pc, #108]	; (800ac80 <flash_info_block_init+0xd4>)
 800ac12:	2201      	movs	r2, #1
 800ac14:	729a      	strb	r2, [r3, #10]

    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.spell = 1;
 800ac16:	4a1a      	ldr	r2, [pc, #104]	; (800ac80 <flash_info_block_init+0xd4>)
 800ac18:	7ad3      	ldrb	r3, [r2, #11]
 800ac1a:	f043 0301 	orr.w	r3, r3, #1
 800ac1e:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.white = 1;
 800ac20:	4a17      	ldr	r2, [pc, #92]	; (800ac80 <flash_info_block_init+0xd4>)
 800ac22:	7ad3      	ldrb	r3, [r2, #11]
 800ac24:	f043 0302 	orr.w	r3, r3, #2
 800ac28:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.solid = 1;
 800ac2a:	4a15      	ldr	r2, [pc, #84]	; (800ac80 <flash_info_block_init+0xd4>)
 800ac2c:	7ad3      	ldrb	r3, [r2, #11]
 800ac2e:	f043 0304 	orr.w	r3, r3, #4
 800ac32:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.sparkle = 1;
 800ac34:	4a12      	ldr	r2, [pc, #72]	; (800ac80 <flash_info_block_init+0xd4>)
 800ac36:	7ad3      	ldrb	r3, [r2, #11]
 800ac38:	f043 0308 	orr.w	r3, r3, #8
 800ac3c:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.sparkle_no_fill = 1;
 800ac3e:	4a10      	ldr	r2, [pc, #64]	; (800ac80 <flash_info_block_init+0xd4>)
 800ac40:	7ad3      	ldrb	r3, [r2, #11]
 800ac42:	f043 0310 	orr.w	r3, r3, #16
 800ac46:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.rainbow = 1;
 800ac48:	4a0d      	ldr	r2, [pc, #52]	; (800ac80 <flash_info_block_init+0xd4>)
 800ac4a:	7ad3      	ldrb	r3, [r2, #11]
 800ac4c:	f043 0320 	orr.w	r3, r3, #32
 800ac50:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.chase = 1;
 800ac52:	4a0b      	ldr	r2, [pc, #44]	; (800ac80 <flash_info_block_init+0xd4>)
 800ac54:	7ad3      	ldrb	r3, [r2, #11]
 800ac56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac5a:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.chase_rainbow = 1;
 800ac5c:	4a08      	ldr	r2, [pc, #32]	; (800ac80 <flash_info_block_init+0xd4>)
 800ac5e:	7ad3      	ldrb	r3, [r2, #11]
 800ac60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac64:	72d3      	strb	r3, [r2, #11]

    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.fade = 1;
 800ac66:	4a06      	ldr	r2, [pc, #24]	; (800ac80 <flash_info_block_init+0xd4>)
 800ac68:	7b13      	ldrb	r3, [r2, #12]
 800ac6a:	f043 0301 	orr.w	r3, r3, #1
 800ac6e:	7313      	strb	r3, [r2, #12]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.twinkle = 1;
 800ac70:	4a03      	ldr	r2, [pc, #12]	; (800ac80 <flash_info_block_init+0xd4>)
 800ac72:	7b13      	ldrb	r3, [r2, #12]
 800ac74:	f043 0302 	orr.w	r3, r3, #2
 800ac78:	7313      	strb	r3, [r2, #12]
    //g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.rsvd0 = 1; // future
    //g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.rsvd1 = 1; // future
    //g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.rsvd2 = 1; // future

    // need to write to flash!
}
 800ac7a:	bf00      	nop
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	2000234c 	.word	0x2000234c

0800ac84 <flash_info_init>:
}


uint32_t temp = 0;
void flash_info_init(void)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	af00      	add	r7, sp, #0
    temp = sizeof(flash_info_data_t);
 800ac88:	4b0d      	ldr	r3, [pc, #52]	; (800acc0 <flash_info_init+0x3c>)
 800ac8a:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800ac8e:	601a      	str	r2, [r3, #0]
    flash_info_block_init();
 800ac90:	f7ff ff8c 	bl	800abac <flash_info_block_init>
    //flash_access_read_flash_info_sector(g_flash_info_block.flat_data_uint32);
    if ((UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[0]) &&
 800ac94:	4b0b      	ldr	r3, [pc, #44]	; (800acc4 <flash_info_init+0x40>)
 800ac96:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800ac9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac9e:	d10d      	bne.n	800acbc <flash_info_init+0x38>
                    (UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[1]) &&
 800aca0:	4b08      	ldr	r3, [pc, #32]	; (800acc4 <flash_info_init+0x40>)
 800aca2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    if ((UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[0]) &&
 800aca6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acaa:	d107      	bne.n	800acbc <flash_info_init+0x38>
                    (UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[2]))
 800acac:	4b05      	ldr	r3, [pc, #20]	; (800acc4 <flash_info_init+0x40>)
 800acae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
                    (UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[1]) &&
 800acb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acb6:	d101      	bne.n	800acbc <flash_info_init+0x38>
    {
        flash_info_block_init();
 800acb8:	f7ff ff78 	bl	800abac <flash_info_block_init>
    }
}
 800acbc:	bf00      	nop
 800acbe:	bd80      	pop	{r7, pc}
 800acc0:	20002b4c 	.word	0x20002b4c
 800acc4:	2000234c 	.word	0x2000234c

0800acc8 <main>:
#include "task_create.h"
#include "animate_led.h"
#include "flash_info.h"

int main(void)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	af00      	add	r7, sp, #0
    board_init_common_board_init();
 800accc:	f7ff f984 	bl	8009fd8 <board_init_common_board_init>
    flash_info_init();
 800acd0:	f7ff ffd8 	bl	800ac84 <flash_info_init>
    task_create();
 800acd4:	f000 f808 	bl	800ace8 <task_create>
	//semaphore_create();
    reset_ws2812b();
 800acd8:	f7f7 fbf6 	bl	80024c8 <reset_ws2812b>
	osKernelStart();
 800acdc:	f7f8 fcd2 	bl	8003684 <osKernelStart>
 800ace0:	2300      	movs	r3, #0
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	bd80      	pop	{r7, pc}
	...

0800ace8 <task_create>:
	.priority = (osPriority_t) osPriorityNormal,
};


void task_create(void)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	af00      	add	r7, sp, #0
    osKernelInitialize();
 800acec:	f7f8 fca6 	bl	800363c <osKernelInitialize>
	g_button_press_handle = osThreadNew(task_button_press, NULL, &g_task_button_press_attributes);
 800acf0:	4a0a      	ldr	r2, [pc, #40]	; (800ad1c <task_create+0x34>)
 800acf2:	2100      	movs	r1, #0
 800acf4:	480a      	ldr	r0, [pc, #40]	; (800ad20 <task_create+0x38>)
 800acf6:	f7f8 fceb 	bl	80036d0 <osThreadNew>
 800acfa:	4603      	mov	r3, r0
 800acfc:	4a09      	ldr	r2, [pc, #36]	; (800ad24 <task_create+0x3c>)
 800acfe:	6013      	str	r3, [r2, #0]
    //g_dma_transfer_handle = osThreadNew(task_dma_transfer, NULL, &g_task_dma_transfer_attributes);
    g_led_strip_1_ctrl_handle = osThreadNew(task_led_ctrl_strip_one, NULL, &g_task_strip_1_led_ctrl_attributes);
 800ad00:	4a09      	ldr	r2, [pc, #36]	; (800ad28 <task_create+0x40>)
 800ad02:	2100      	movs	r1, #0
 800ad04:	4809      	ldr	r0, [pc, #36]	; (800ad2c <task_create+0x44>)
 800ad06:	f7f8 fce3 	bl	80036d0 <osThreadNew>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	4a08      	ldr	r2, [pc, #32]	; (800ad30 <task_create+0x48>)
 800ad0e:	6013      	str	r3, [r2, #0]
    g_tasks_running = true; // technically will be running after task scheduler started
 800ad10:	4b08      	ldr	r3, [pc, #32]	; (800ad34 <task_create+0x4c>)
 800ad12:	2201      	movs	r2, #1
 800ad14:	701a      	strb	r2, [r3, #0]
}
 800ad16:	bf00      	nop
 800ad18:	bd80      	pop	{r7, pc}
 800ad1a:	bf00      	nop
 800ad1c:	0800bf5c 	.word	0x0800bf5c
 800ad20:	08002b65 	.word	0x08002b65
 800ad24:	20002b54 	.word	0x20002b54
 800ad28:	0800bf80 	.word	0x0800bf80
 800ad2c:	08002e89 	.word	0x08002e89
 800ad30:	20002b50 	.word	0x20002b50
 800ad34:	20003c10 	.word	0x20003c10

0800ad38 <random_num>:
#include <stdint.h>
#include <stdlib.h>
#include "numbers.h"

uint32_t random_num(uint32_t min, uint32_t max)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b082      	sub	sp, #8
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	6039      	str	r1, [r7, #0]
   return min + rand() % (max - min);
 800ad42:	f000 f91d 	bl	800af80 <rand>
 800ad46:	4603      	mov	r3, r0
 800ad48:	461a      	mov	r2, r3
 800ad4a:	6839      	ldr	r1, [r7, #0]
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	1acb      	subs	r3, r1, r3
 800ad50:	fbb2 f1f3 	udiv	r1, r2, r3
 800ad54:	fb01 f303 	mul.w	r3, r1, r3
 800ad58:	1ad2      	subs	r2, r2, r3
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	4413      	add	r3, r2
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3708      	adds	r7, #8
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
	...

0800ad68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800ad68:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ada0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800ad6c:	f7ff fe58 	bl	800aa20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800ad70:	480c      	ldr	r0, [pc, #48]	; (800ada4 <LoopForever+0x6>)
  ldr r1, =_edata
 800ad72:	490d      	ldr	r1, [pc, #52]	; (800ada8 <LoopForever+0xa>)
  ldr r2, =_sidata
 800ad74:	4a0d      	ldr	r2, [pc, #52]	; (800adac <LoopForever+0xe>)
  movs r3, #0
 800ad76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ad78:	e002      	b.n	800ad80 <LoopCopyDataInit>

0800ad7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ad7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ad7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ad7e:	3304      	adds	r3, #4

0800ad80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ad80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ad82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ad84:	d3f9      	bcc.n	800ad7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ad86:	4a0a      	ldr	r2, [pc, #40]	; (800adb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 800ad88:	4c0a      	ldr	r4, [pc, #40]	; (800adb4 <LoopForever+0x16>)
  movs r3, #0
 800ad8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ad8c:	e001      	b.n	800ad92 <LoopFillZerobss>

0800ad8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ad8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ad90:	3204      	adds	r2, #4

0800ad92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ad92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ad94:	d3fb      	bcc.n	800ad8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800ad96:	f000 fa3d 	bl	800b214 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800ad9a:	f7ff ff95 	bl	800acc8 <main>

0800ad9e <LoopForever>:

LoopForever:
    b LoopForever
 800ad9e:	e7fe      	b.n	800ad9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800ada0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800ada4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ada8:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 800adac:	0800c08c 	.word	0x0800c08c
  ldr r2, =_sbss
 800adb0:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 800adb4:	20003d60 	.word	0x20003d60

0800adb8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800adb8:	e7fe      	b.n	800adb8 <ADC1_IRQHandler>
	...

0800adbc <malloc>:
 800adbc:	4b02      	ldr	r3, [pc, #8]	; (800adc8 <malloc+0xc>)
 800adbe:	4601      	mov	r1, r0
 800adc0:	6818      	ldr	r0, [r3, #0]
 800adc2:	f000 b823 	b.w	800ae0c <_malloc_r>
 800adc6:	bf00      	nop
 800adc8:	200000cc 	.word	0x200000cc

0800adcc <sbrk_aligned>:
 800adcc:	b570      	push	{r4, r5, r6, lr}
 800adce:	4e0e      	ldr	r6, [pc, #56]	; (800ae08 <sbrk_aligned+0x3c>)
 800add0:	460c      	mov	r4, r1
 800add2:	6831      	ldr	r1, [r6, #0]
 800add4:	4605      	mov	r5, r0
 800add6:	b911      	cbnz	r1, 800adde <sbrk_aligned+0x12>
 800add8:	f000 fa06 	bl	800b1e8 <_sbrk_r>
 800addc:	6030      	str	r0, [r6, #0]
 800adde:	4621      	mov	r1, r4
 800ade0:	4628      	mov	r0, r5
 800ade2:	f000 fa01 	bl	800b1e8 <_sbrk_r>
 800ade6:	1c43      	adds	r3, r0, #1
 800ade8:	d00a      	beq.n	800ae00 <sbrk_aligned+0x34>
 800adea:	1cc4      	adds	r4, r0, #3
 800adec:	f024 0403 	bic.w	r4, r4, #3
 800adf0:	42a0      	cmp	r0, r4
 800adf2:	d007      	beq.n	800ae04 <sbrk_aligned+0x38>
 800adf4:	1a21      	subs	r1, r4, r0
 800adf6:	4628      	mov	r0, r5
 800adf8:	f000 f9f6 	bl	800b1e8 <_sbrk_r>
 800adfc:	3001      	adds	r0, #1
 800adfe:	d101      	bne.n	800ae04 <sbrk_aligned+0x38>
 800ae00:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ae04:	4620      	mov	r0, r4
 800ae06:	bd70      	pop	{r4, r5, r6, pc}
 800ae08:	20003c18 	.word	0x20003c18

0800ae0c <_malloc_r>:
 800ae0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae10:	1ccd      	adds	r5, r1, #3
 800ae12:	f025 0503 	bic.w	r5, r5, #3
 800ae16:	3508      	adds	r5, #8
 800ae18:	2d0c      	cmp	r5, #12
 800ae1a:	bf38      	it	cc
 800ae1c:	250c      	movcc	r5, #12
 800ae1e:	2d00      	cmp	r5, #0
 800ae20:	4607      	mov	r7, r0
 800ae22:	db01      	blt.n	800ae28 <_malloc_r+0x1c>
 800ae24:	42a9      	cmp	r1, r5
 800ae26:	d905      	bls.n	800ae34 <_malloc_r+0x28>
 800ae28:	230c      	movs	r3, #12
 800ae2a:	603b      	str	r3, [r7, #0]
 800ae2c:	2600      	movs	r6, #0
 800ae2e:	4630      	mov	r0, r6
 800ae30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae34:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800af08 <_malloc_r+0xfc>
 800ae38:	f000 f868 	bl	800af0c <__malloc_lock>
 800ae3c:	f8d8 3000 	ldr.w	r3, [r8]
 800ae40:	461c      	mov	r4, r3
 800ae42:	bb5c      	cbnz	r4, 800ae9c <_malloc_r+0x90>
 800ae44:	4629      	mov	r1, r5
 800ae46:	4638      	mov	r0, r7
 800ae48:	f7ff ffc0 	bl	800adcc <sbrk_aligned>
 800ae4c:	1c43      	adds	r3, r0, #1
 800ae4e:	4604      	mov	r4, r0
 800ae50:	d155      	bne.n	800aefe <_malloc_r+0xf2>
 800ae52:	f8d8 4000 	ldr.w	r4, [r8]
 800ae56:	4626      	mov	r6, r4
 800ae58:	2e00      	cmp	r6, #0
 800ae5a:	d145      	bne.n	800aee8 <_malloc_r+0xdc>
 800ae5c:	2c00      	cmp	r4, #0
 800ae5e:	d048      	beq.n	800aef2 <_malloc_r+0xe6>
 800ae60:	6823      	ldr	r3, [r4, #0]
 800ae62:	4631      	mov	r1, r6
 800ae64:	4638      	mov	r0, r7
 800ae66:	eb04 0903 	add.w	r9, r4, r3
 800ae6a:	f000 f9bd 	bl	800b1e8 <_sbrk_r>
 800ae6e:	4581      	cmp	r9, r0
 800ae70:	d13f      	bne.n	800aef2 <_malloc_r+0xe6>
 800ae72:	6821      	ldr	r1, [r4, #0]
 800ae74:	1a6d      	subs	r5, r5, r1
 800ae76:	4629      	mov	r1, r5
 800ae78:	4638      	mov	r0, r7
 800ae7a:	f7ff ffa7 	bl	800adcc <sbrk_aligned>
 800ae7e:	3001      	adds	r0, #1
 800ae80:	d037      	beq.n	800aef2 <_malloc_r+0xe6>
 800ae82:	6823      	ldr	r3, [r4, #0]
 800ae84:	442b      	add	r3, r5
 800ae86:	6023      	str	r3, [r4, #0]
 800ae88:	f8d8 3000 	ldr.w	r3, [r8]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d038      	beq.n	800af02 <_malloc_r+0xf6>
 800ae90:	685a      	ldr	r2, [r3, #4]
 800ae92:	42a2      	cmp	r2, r4
 800ae94:	d12b      	bne.n	800aeee <_malloc_r+0xe2>
 800ae96:	2200      	movs	r2, #0
 800ae98:	605a      	str	r2, [r3, #4]
 800ae9a:	e00f      	b.n	800aebc <_malloc_r+0xb0>
 800ae9c:	6822      	ldr	r2, [r4, #0]
 800ae9e:	1b52      	subs	r2, r2, r5
 800aea0:	d41f      	bmi.n	800aee2 <_malloc_r+0xd6>
 800aea2:	2a0b      	cmp	r2, #11
 800aea4:	d917      	bls.n	800aed6 <_malloc_r+0xca>
 800aea6:	1961      	adds	r1, r4, r5
 800aea8:	42a3      	cmp	r3, r4
 800aeaa:	6025      	str	r5, [r4, #0]
 800aeac:	bf18      	it	ne
 800aeae:	6059      	strne	r1, [r3, #4]
 800aeb0:	6863      	ldr	r3, [r4, #4]
 800aeb2:	bf08      	it	eq
 800aeb4:	f8c8 1000 	streq.w	r1, [r8]
 800aeb8:	5162      	str	r2, [r4, r5]
 800aeba:	604b      	str	r3, [r1, #4]
 800aebc:	4638      	mov	r0, r7
 800aebe:	f104 060b 	add.w	r6, r4, #11
 800aec2:	f000 f829 	bl	800af18 <__malloc_unlock>
 800aec6:	f026 0607 	bic.w	r6, r6, #7
 800aeca:	1d23      	adds	r3, r4, #4
 800aecc:	1af2      	subs	r2, r6, r3
 800aece:	d0ae      	beq.n	800ae2e <_malloc_r+0x22>
 800aed0:	1b9b      	subs	r3, r3, r6
 800aed2:	50a3      	str	r3, [r4, r2]
 800aed4:	e7ab      	b.n	800ae2e <_malloc_r+0x22>
 800aed6:	42a3      	cmp	r3, r4
 800aed8:	6862      	ldr	r2, [r4, #4]
 800aeda:	d1dd      	bne.n	800ae98 <_malloc_r+0x8c>
 800aedc:	f8c8 2000 	str.w	r2, [r8]
 800aee0:	e7ec      	b.n	800aebc <_malloc_r+0xb0>
 800aee2:	4623      	mov	r3, r4
 800aee4:	6864      	ldr	r4, [r4, #4]
 800aee6:	e7ac      	b.n	800ae42 <_malloc_r+0x36>
 800aee8:	4634      	mov	r4, r6
 800aeea:	6876      	ldr	r6, [r6, #4]
 800aeec:	e7b4      	b.n	800ae58 <_malloc_r+0x4c>
 800aeee:	4613      	mov	r3, r2
 800aef0:	e7cc      	b.n	800ae8c <_malloc_r+0x80>
 800aef2:	230c      	movs	r3, #12
 800aef4:	603b      	str	r3, [r7, #0]
 800aef6:	4638      	mov	r0, r7
 800aef8:	f000 f80e 	bl	800af18 <__malloc_unlock>
 800aefc:	e797      	b.n	800ae2e <_malloc_r+0x22>
 800aefe:	6025      	str	r5, [r4, #0]
 800af00:	e7dc      	b.n	800aebc <_malloc_r+0xb0>
 800af02:	605b      	str	r3, [r3, #4]
 800af04:	deff      	udf	#255	; 0xff
 800af06:	bf00      	nop
 800af08:	20003c14 	.word	0x20003c14

0800af0c <__malloc_lock>:
 800af0c:	4801      	ldr	r0, [pc, #4]	; (800af14 <__malloc_lock+0x8>)
 800af0e:	f000 b9a6 	b.w	800b25e <__retarget_lock_acquire_recursive>
 800af12:	bf00      	nop
 800af14:	20003d58 	.word	0x20003d58

0800af18 <__malloc_unlock>:
 800af18:	4801      	ldr	r0, [pc, #4]	; (800af20 <__malloc_unlock+0x8>)
 800af1a:	f000 b9a1 	b.w	800b260 <__retarget_lock_release_recursive>
 800af1e:	bf00      	nop
 800af20:	20003d58 	.word	0x20003d58

0800af24 <srand>:
 800af24:	b538      	push	{r3, r4, r5, lr}
 800af26:	4b10      	ldr	r3, [pc, #64]	; (800af68 <srand+0x44>)
 800af28:	681d      	ldr	r5, [r3, #0]
 800af2a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800af2c:	4604      	mov	r4, r0
 800af2e:	b9b3      	cbnz	r3, 800af5e <srand+0x3a>
 800af30:	2018      	movs	r0, #24
 800af32:	f7ff ff43 	bl	800adbc <malloc>
 800af36:	4602      	mov	r2, r0
 800af38:	6328      	str	r0, [r5, #48]	; 0x30
 800af3a:	b920      	cbnz	r0, 800af46 <srand+0x22>
 800af3c:	4b0b      	ldr	r3, [pc, #44]	; (800af6c <srand+0x48>)
 800af3e:	480c      	ldr	r0, [pc, #48]	; (800af70 <srand+0x4c>)
 800af40:	2146      	movs	r1, #70	; 0x46
 800af42:	f000 f99d 	bl	800b280 <__assert_func>
 800af46:	490b      	ldr	r1, [pc, #44]	; (800af74 <srand+0x50>)
 800af48:	4b0b      	ldr	r3, [pc, #44]	; (800af78 <srand+0x54>)
 800af4a:	e9c0 1300 	strd	r1, r3, [r0]
 800af4e:	4b0b      	ldr	r3, [pc, #44]	; (800af7c <srand+0x58>)
 800af50:	6083      	str	r3, [r0, #8]
 800af52:	230b      	movs	r3, #11
 800af54:	8183      	strh	r3, [r0, #12]
 800af56:	2100      	movs	r1, #0
 800af58:	2001      	movs	r0, #1
 800af5a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800af5e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800af60:	2200      	movs	r2, #0
 800af62:	611c      	str	r4, [r3, #16]
 800af64:	615a      	str	r2, [r3, #20]
 800af66:	bd38      	pop	{r3, r4, r5, pc}
 800af68:	200000cc 	.word	0x200000cc
 800af6c:	0800bfa4 	.word	0x0800bfa4
 800af70:	0800bfbb 	.word	0x0800bfbb
 800af74:	abcd330e 	.word	0xabcd330e
 800af78:	e66d1234 	.word	0xe66d1234
 800af7c:	0005deec 	.word	0x0005deec

0800af80 <rand>:
 800af80:	4b16      	ldr	r3, [pc, #88]	; (800afdc <rand+0x5c>)
 800af82:	b510      	push	{r4, lr}
 800af84:	681c      	ldr	r4, [r3, #0]
 800af86:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800af88:	b9b3      	cbnz	r3, 800afb8 <rand+0x38>
 800af8a:	2018      	movs	r0, #24
 800af8c:	f7ff ff16 	bl	800adbc <malloc>
 800af90:	4602      	mov	r2, r0
 800af92:	6320      	str	r0, [r4, #48]	; 0x30
 800af94:	b920      	cbnz	r0, 800afa0 <rand+0x20>
 800af96:	4b12      	ldr	r3, [pc, #72]	; (800afe0 <rand+0x60>)
 800af98:	4812      	ldr	r0, [pc, #72]	; (800afe4 <rand+0x64>)
 800af9a:	2152      	movs	r1, #82	; 0x52
 800af9c:	f000 f970 	bl	800b280 <__assert_func>
 800afa0:	4911      	ldr	r1, [pc, #68]	; (800afe8 <rand+0x68>)
 800afa2:	4b12      	ldr	r3, [pc, #72]	; (800afec <rand+0x6c>)
 800afa4:	e9c0 1300 	strd	r1, r3, [r0]
 800afa8:	4b11      	ldr	r3, [pc, #68]	; (800aff0 <rand+0x70>)
 800afaa:	6083      	str	r3, [r0, #8]
 800afac:	230b      	movs	r3, #11
 800afae:	8183      	strh	r3, [r0, #12]
 800afb0:	2100      	movs	r1, #0
 800afb2:	2001      	movs	r0, #1
 800afb4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800afb8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800afba:	480e      	ldr	r0, [pc, #56]	; (800aff4 <rand+0x74>)
 800afbc:	690b      	ldr	r3, [r1, #16]
 800afbe:	694c      	ldr	r4, [r1, #20]
 800afc0:	4a0d      	ldr	r2, [pc, #52]	; (800aff8 <rand+0x78>)
 800afc2:	4358      	muls	r0, r3
 800afc4:	fb02 0004 	mla	r0, r2, r4, r0
 800afc8:	fba3 3202 	umull	r3, r2, r3, r2
 800afcc:	3301      	adds	r3, #1
 800afce:	eb40 0002 	adc.w	r0, r0, r2
 800afd2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800afd6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800afda:	bd10      	pop	{r4, pc}
 800afdc:	200000cc 	.word	0x200000cc
 800afe0:	0800bfa4 	.word	0x0800bfa4
 800afe4:	0800bfbb 	.word	0x0800bfbb
 800afe8:	abcd330e 	.word	0xabcd330e
 800afec:	e66d1234 	.word	0xe66d1234
 800aff0:	0005deec 	.word	0x0005deec
 800aff4:	5851f42d 	.word	0x5851f42d
 800aff8:	4c957f2d 	.word	0x4c957f2d

0800affc <std>:
 800affc:	2300      	movs	r3, #0
 800affe:	b510      	push	{r4, lr}
 800b000:	4604      	mov	r4, r0
 800b002:	e9c0 3300 	strd	r3, r3, [r0]
 800b006:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b00a:	6083      	str	r3, [r0, #8]
 800b00c:	8181      	strh	r1, [r0, #12]
 800b00e:	6643      	str	r3, [r0, #100]	; 0x64
 800b010:	81c2      	strh	r2, [r0, #14]
 800b012:	6183      	str	r3, [r0, #24]
 800b014:	4619      	mov	r1, r3
 800b016:	2208      	movs	r2, #8
 800b018:	305c      	adds	r0, #92	; 0x5c
 800b01a:	f000 f8b1 	bl	800b180 <memset>
 800b01e:	4b0d      	ldr	r3, [pc, #52]	; (800b054 <std+0x58>)
 800b020:	6263      	str	r3, [r4, #36]	; 0x24
 800b022:	4b0d      	ldr	r3, [pc, #52]	; (800b058 <std+0x5c>)
 800b024:	62a3      	str	r3, [r4, #40]	; 0x28
 800b026:	4b0d      	ldr	r3, [pc, #52]	; (800b05c <std+0x60>)
 800b028:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b02a:	4b0d      	ldr	r3, [pc, #52]	; (800b060 <std+0x64>)
 800b02c:	6323      	str	r3, [r4, #48]	; 0x30
 800b02e:	4b0d      	ldr	r3, [pc, #52]	; (800b064 <std+0x68>)
 800b030:	6224      	str	r4, [r4, #32]
 800b032:	429c      	cmp	r4, r3
 800b034:	d006      	beq.n	800b044 <std+0x48>
 800b036:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b03a:	4294      	cmp	r4, r2
 800b03c:	d002      	beq.n	800b044 <std+0x48>
 800b03e:	33d0      	adds	r3, #208	; 0xd0
 800b040:	429c      	cmp	r4, r3
 800b042:	d105      	bne.n	800b050 <std+0x54>
 800b044:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b04c:	f000 b906 	b.w	800b25c <__retarget_lock_init_recursive>
 800b050:	bd10      	pop	{r4, pc}
 800b052:	bf00      	nop
 800b054:	0800b4b1 	.word	0x0800b4b1
 800b058:	0800b4d3 	.word	0x0800b4d3
 800b05c:	0800b50b 	.word	0x0800b50b
 800b060:	0800b52f 	.word	0x0800b52f
 800b064:	20003c1c 	.word	0x20003c1c

0800b068 <stdio_exit_handler>:
 800b068:	4a02      	ldr	r2, [pc, #8]	; (800b074 <stdio_exit_handler+0xc>)
 800b06a:	4903      	ldr	r1, [pc, #12]	; (800b078 <stdio_exit_handler+0x10>)
 800b06c:	4803      	ldr	r0, [pc, #12]	; (800b07c <stdio_exit_handler+0x14>)
 800b06e:	f000 b869 	b.w	800b144 <_fwalk_sglue>
 800b072:	bf00      	nop
 800b074:	20000074 	.word	0x20000074
 800b078:	0800b461 	.word	0x0800b461
 800b07c:	20000080 	.word	0x20000080

0800b080 <cleanup_stdio>:
 800b080:	6841      	ldr	r1, [r0, #4]
 800b082:	4b0c      	ldr	r3, [pc, #48]	; (800b0b4 <cleanup_stdio+0x34>)
 800b084:	4299      	cmp	r1, r3
 800b086:	b510      	push	{r4, lr}
 800b088:	4604      	mov	r4, r0
 800b08a:	d001      	beq.n	800b090 <cleanup_stdio+0x10>
 800b08c:	f000 f9e8 	bl	800b460 <_fflush_r>
 800b090:	68a1      	ldr	r1, [r4, #8]
 800b092:	4b09      	ldr	r3, [pc, #36]	; (800b0b8 <cleanup_stdio+0x38>)
 800b094:	4299      	cmp	r1, r3
 800b096:	d002      	beq.n	800b09e <cleanup_stdio+0x1e>
 800b098:	4620      	mov	r0, r4
 800b09a:	f000 f9e1 	bl	800b460 <_fflush_r>
 800b09e:	68e1      	ldr	r1, [r4, #12]
 800b0a0:	4b06      	ldr	r3, [pc, #24]	; (800b0bc <cleanup_stdio+0x3c>)
 800b0a2:	4299      	cmp	r1, r3
 800b0a4:	d004      	beq.n	800b0b0 <cleanup_stdio+0x30>
 800b0a6:	4620      	mov	r0, r4
 800b0a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0ac:	f000 b9d8 	b.w	800b460 <_fflush_r>
 800b0b0:	bd10      	pop	{r4, pc}
 800b0b2:	bf00      	nop
 800b0b4:	20003c1c 	.word	0x20003c1c
 800b0b8:	20003c84 	.word	0x20003c84
 800b0bc:	20003cec 	.word	0x20003cec

0800b0c0 <global_stdio_init.part.0>:
 800b0c0:	b510      	push	{r4, lr}
 800b0c2:	4b0b      	ldr	r3, [pc, #44]	; (800b0f0 <global_stdio_init.part.0+0x30>)
 800b0c4:	4c0b      	ldr	r4, [pc, #44]	; (800b0f4 <global_stdio_init.part.0+0x34>)
 800b0c6:	4a0c      	ldr	r2, [pc, #48]	; (800b0f8 <global_stdio_init.part.0+0x38>)
 800b0c8:	601a      	str	r2, [r3, #0]
 800b0ca:	4620      	mov	r0, r4
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	2104      	movs	r1, #4
 800b0d0:	f7ff ff94 	bl	800affc <std>
 800b0d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b0d8:	2201      	movs	r2, #1
 800b0da:	2109      	movs	r1, #9
 800b0dc:	f7ff ff8e 	bl	800affc <std>
 800b0e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b0e4:	2202      	movs	r2, #2
 800b0e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0ea:	2112      	movs	r1, #18
 800b0ec:	f7ff bf86 	b.w	800affc <std>
 800b0f0:	20003d54 	.word	0x20003d54
 800b0f4:	20003c1c 	.word	0x20003c1c
 800b0f8:	0800b069 	.word	0x0800b069

0800b0fc <__sfp_lock_acquire>:
 800b0fc:	4801      	ldr	r0, [pc, #4]	; (800b104 <__sfp_lock_acquire+0x8>)
 800b0fe:	f000 b8ae 	b.w	800b25e <__retarget_lock_acquire_recursive>
 800b102:	bf00      	nop
 800b104:	20003d59 	.word	0x20003d59

0800b108 <__sfp_lock_release>:
 800b108:	4801      	ldr	r0, [pc, #4]	; (800b110 <__sfp_lock_release+0x8>)
 800b10a:	f000 b8a9 	b.w	800b260 <__retarget_lock_release_recursive>
 800b10e:	bf00      	nop
 800b110:	20003d59 	.word	0x20003d59

0800b114 <__sinit>:
 800b114:	b510      	push	{r4, lr}
 800b116:	4604      	mov	r4, r0
 800b118:	f7ff fff0 	bl	800b0fc <__sfp_lock_acquire>
 800b11c:	6a23      	ldr	r3, [r4, #32]
 800b11e:	b11b      	cbz	r3, 800b128 <__sinit+0x14>
 800b120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b124:	f7ff bff0 	b.w	800b108 <__sfp_lock_release>
 800b128:	4b04      	ldr	r3, [pc, #16]	; (800b13c <__sinit+0x28>)
 800b12a:	6223      	str	r3, [r4, #32]
 800b12c:	4b04      	ldr	r3, [pc, #16]	; (800b140 <__sinit+0x2c>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d1f5      	bne.n	800b120 <__sinit+0xc>
 800b134:	f7ff ffc4 	bl	800b0c0 <global_stdio_init.part.0>
 800b138:	e7f2      	b.n	800b120 <__sinit+0xc>
 800b13a:	bf00      	nop
 800b13c:	0800b081 	.word	0x0800b081
 800b140:	20003d54 	.word	0x20003d54

0800b144 <_fwalk_sglue>:
 800b144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b148:	4607      	mov	r7, r0
 800b14a:	4688      	mov	r8, r1
 800b14c:	4614      	mov	r4, r2
 800b14e:	2600      	movs	r6, #0
 800b150:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b154:	f1b9 0901 	subs.w	r9, r9, #1
 800b158:	d505      	bpl.n	800b166 <_fwalk_sglue+0x22>
 800b15a:	6824      	ldr	r4, [r4, #0]
 800b15c:	2c00      	cmp	r4, #0
 800b15e:	d1f7      	bne.n	800b150 <_fwalk_sglue+0xc>
 800b160:	4630      	mov	r0, r6
 800b162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b166:	89ab      	ldrh	r3, [r5, #12]
 800b168:	2b01      	cmp	r3, #1
 800b16a:	d907      	bls.n	800b17c <_fwalk_sglue+0x38>
 800b16c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b170:	3301      	adds	r3, #1
 800b172:	d003      	beq.n	800b17c <_fwalk_sglue+0x38>
 800b174:	4629      	mov	r1, r5
 800b176:	4638      	mov	r0, r7
 800b178:	47c0      	blx	r8
 800b17a:	4306      	orrs	r6, r0
 800b17c:	3568      	adds	r5, #104	; 0x68
 800b17e:	e7e9      	b.n	800b154 <_fwalk_sglue+0x10>

0800b180 <memset>:
 800b180:	4402      	add	r2, r0
 800b182:	4603      	mov	r3, r0
 800b184:	4293      	cmp	r3, r2
 800b186:	d100      	bne.n	800b18a <memset+0xa>
 800b188:	4770      	bx	lr
 800b18a:	f803 1b01 	strb.w	r1, [r3], #1
 800b18e:	e7f9      	b.n	800b184 <memset+0x4>

0800b190 <time>:
 800b190:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b192:	4b0b      	ldr	r3, [pc, #44]	; (800b1c0 <time+0x30>)
 800b194:	2200      	movs	r2, #0
 800b196:	4669      	mov	r1, sp
 800b198:	4604      	mov	r4, r0
 800b19a:	6818      	ldr	r0, [r3, #0]
 800b19c:	f000 f812 	bl	800b1c4 <_gettimeofday_r>
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	bfbe      	ittt	lt
 800b1a4:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 800b1a8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b1ac:	e9cd 2300 	strdlt	r2, r3, [sp]
 800b1b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b1b4:	b10c      	cbz	r4, 800b1ba <time+0x2a>
 800b1b6:	e9c4 0100 	strd	r0, r1, [r4]
 800b1ba:	b004      	add	sp, #16
 800b1bc:	bd10      	pop	{r4, pc}
 800b1be:	bf00      	nop
 800b1c0:	200000cc 	.word	0x200000cc

0800b1c4 <_gettimeofday_r>:
 800b1c4:	b538      	push	{r3, r4, r5, lr}
 800b1c6:	4d07      	ldr	r5, [pc, #28]	; (800b1e4 <_gettimeofday_r+0x20>)
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	4604      	mov	r4, r0
 800b1cc:	4608      	mov	r0, r1
 800b1ce:	4611      	mov	r1, r2
 800b1d0:	602b      	str	r3, [r5, #0]
 800b1d2:	f000 fe41 	bl	800be58 <_gettimeofday>
 800b1d6:	1c43      	adds	r3, r0, #1
 800b1d8:	d102      	bne.n	800b1e0 <_gettimeofday_r+0x1c>
 800b1da:	682b      	ldr	r3, [r5, #0]
 800b1dc:	b103      	cbz	r3, 800b1e0 <_gettimeofday_r+0x1c>
 800b1de:	6023      	str	r3, [r4, #0]
 800b1e0:	bd38      	pop	{r3, r4, r5, pc}
 800b1e2:	bf00      	nop
 800b1e4:	20003d5c 	.word	0x20003d5c

0800b1e8 <_sbrk_r>:
 800b1e8:	b538      	push	{r3, r4, r5, lr}
 800b1ea:	4d06      	ldr	r5, [pc, #24]	; (800b204 <_sbrk_r+0x1c>)
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	4604      	mov	r4, r0
 800b1f0:	4608      	mov	r0, r1
 800b1f2:	602b      	str	r3, [r5, #0]
 800b1f4:	f7ff fbde 	bl	800a9b4 <_sbrk>
 800b1f8:	1c43      	adds	r3, r0, #1
 800b1fa:	d102      	bne.n	800b202 <_sbrk_r+0x1a>
 800b1fc:	682b      	ldr	r3, [r5, #0]
 800b1fe:	b103      	cbz	r3, 800b202 <_sbrk_r+0x1a>
 800b200:	6023      	str	r3, [r4, #0]
 800b202:	bd38      	pop	{r3, r4, r5, pc}
 800b204:	20003d5c 	.word	0x20003d5c

0800b208 <__errno>:
 800b208:	4b01      	ldr	r3, [pc, #4]	; (800b210 <__errno+0x8>)
 800b20a:	6818      	ldr	r0, [r3, #0]
 800b20c:	4770      	bx	lr
 800b20e:	bf00      	nop
 800b210:	200000cc 	.word	0x200000cc

0800b214 <__libc_init_array>:
 800b214:	b570      	push	{r4, r5, r6, lr}
 800b216:	4d0d      	ldr	r5, [pc, #52]	; (800b24c <__libc_init_array+0x38>)
 800b218:	4c0d      	ldr	r4, [pc, #52]	; (800b250 <__libc_init_array+0x3c>)
 800b21a:	1b64      	subs	r4, r4, r5
 800b21c:	10a4      	asrs	r4, r4, #2
 800b21e:	2600      	movs	r6, #0
 800b220:	42a6      	cmp	r6, r4
 800b222:	d109      	bne.n	800b238 <__libc_init_array+0x24>
 800b224:	4d0b      	ldr	r5, [pc, #44]	; (800b254 <__libc_init_array+0x40>)
 800b226:	4c0c      	ldr	r4, [pc, #48]	; (800b258 <__libc_init_array+0x44>)
 800b228:	f000 fe1e 	bl	800be68 <_init>
 800b22c:	1b64      	subs	r4, r4, r5
 800b22e:	10a4      	asrs	r4, r4, #2
 800b230:	2600      	movs	r6, #0
 800b232:	42a6      	cmp	r6, r4
 800b234:	d105      	bne.n	800b242 <__libc_init_array+0x2e>
 800b236:	bd70      	pop	{r4, r5, r6, pc}
 800b238:	f855 3b04 	ldr.w	r3, [r5], #4
 800b23c:	4798      	blx	r3
 800b23e:	3601      	adds	r6, #1
 800b240:	e7ee      	b.n	800b220 <__libc_init_array+0xc>
 800b242:	f855 3b04 	ldr.w	r3, [r5], #4
 800b246:	4798      	blx	r3
 800b248:	3601      	adds	r6, #1
 800b24a:	e7f2      	b.n	800b232 <__libc_init_array+0x1e>
 800b24c:	0800c084 	.word	0x0800c084
 800b250:	0800c084 	.word	0x0800c084
 800b254:	0800c084 	.word	0x0800c084
 800b258:	0800c088 	.word	0x0800c088

0800b25c <__retarget_lock_init_recursive>:
 800b25c:	4770      	bx	lr

0800b25e <__retarget_lock_acquire_recursive>:
 800b25e:	4770      	bx	lr

0800b260 <__retarget_lock_release_recursive>:
 800b260:	4770      	bx	lr

0800b262 <memcpy>:
 800b262:	440a      	add	r2, r1
 800b264:	4291      	cmp	r1, r2
 800b266:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b26a:	d100      	bne.n	800b26e <memcpy+0xc>
 800b26c:	4770      	bx	lr
 800b26e:	b510      	push	{r4, lr}
 800b270:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b274:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b278:	4291      	cmp	r1, r2
 800b27a:	d1f9      	bne.n	800b270 <memcpy+0xe>
 800b27c:	bd10      	pop	{r4, pc}
	...

0800b280 <__assert_func>:
 800b280:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b282:	4614      	mov	r4, r2
 800b284:	461a      	mov	r2, r3
 800b286:	4b09      	ldr	r3, [pc, #36]	; (800b2ac <__assert_func+0x2c>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	4605      	mov	r5, r0
 800b28c:	68d8      	ldr	r0, [r3, #12]
 800b28e:	b14c      	cbz	r4, 800b2a4 <__assert_func+0x24>
 800b290:	4b07      	ldr	r3, [pc, #28]	; (800b2b0 <__assert_func+0x30>)
 800b292:	9100      	str	r1, [sp, #0]
 800b294:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b298:	4906      	ldr	r1, [pc, #24]	; (800b2b4 <__assert_func+0x34>)
 800b29a:	462b      	mov	r3, r5
 800b29c:	f000 f94c 	bl	800b538 <fiprintf>
 800b2a0:	f000 f9a2 	bl	800b5e8 <abort>
 800b2a4:	4b04      	ldr	r3, [pc, #16]	; (800b2b8 <__assert_func+0x38>)
 800b2a6:	461c      	mov	r4, r3
 800b2a8:	e7f3      	b.n	800b292 <__assert_func+0x12>
 800b2aa:	bf00      	nop
 800b2ac:	200000cc 	.word	0x200000cc
 800b2b0:	0800c013 	.word	0x0800c013
 800b2b4:	0800c020 	.word	0x0800c020
 800b2b8:	0800c04e 	.word	0x0800c04e

0800b2bc <_free_r>:
 800b2bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b2be:	2900      	cmp	r1, #0
 800b2c0:	d044      	beq.n	800b34c <_free_r+0x90>
 800b2c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2c6:	9001      	str	r0, [sp, #4]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	f1a1 0404 	sub.w	r4, r1, #4
 800b2ce:	bfb8      	it	lt
 800b2d0:	18e4      	addlt	r4, r4, r3
 800b2d2:	f7ff fe1b 	bl	800af0c <__malloc_lock>
 800b2d6:	4a1e      	ldr	r2, [pc, #120]	; (800b350 <_free_r+0x94>)
 800b2d8:	9801      	ldr	r0, [sp, #4]
 800b2da:	6813      	ldr	r3, [r2, #0]
 800b2dc:	b933      	cbnz	r3, 800b2ec <_free_r+0x30>
 800b2de:	6063      	str	r3, [r4, #4]
 800b2e0:	6014      	str	r4, [r2, #0]
 800b2e2:	b003      	add	sp, #12
 800b2e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b2e8:	f7ff be16 	b.w	800af18 <__malloc_unlock>
 800b2ec:	42a3      	cmp	r3, r4
 800b2ee:	d908      	bls.n	800b302 <_free_r+0x46>
 800b2f0:	6825      	ldr	r5, [r4, #0]
 800b2f2:	1961      	adds	r1, r4, r5
 800b2f4:	428b      	cmp	r3, r1
 800b2f6:	bf01      	itttt	eq
 800b2f8:	6819      	ldreq	r1, [r3, #0]
 800b2fa:	685b      	ldreq	r3, [r3, #4]
 800b2fc:	1949      	addeq	r1, r1, r5
 800b2fe:	6021      	streq	r1, [r4, #0]
 800b300:	e7ed      	b.n	800b2de <_free_r+0x22>
 800b302:	461a      	mov	r2, r3
 800b304:	685b      	ldr	r3, [r3, #4]
 800b306:	b10b      	cbz	r3, 800b30c <_free_r+0x50>
 800b308:	42a3      	cmp	r3, r4
 800b30a:	d9fa      	bls.n	800b302 <_free_r+0x46>
 800b30c:	6811      	ldr	r1, [r2, #0]
 800b30e:	1855      	adds	r5, r2, r1
 800b310:	42a5      	cmp	r5, r4
 800b312:	d10b      	bne.n	800b32c <_free_r+0x70>
 800b314:	6824      	ldr	r4, [r4, #0]
 800b316:	4421      	add	r1, r4
 800b318:	1854      	adds	r4, r2, r1
 800b31a:	42a3      	cmp	r3, r4
 800b31c:	6011      	str	r1, [r2, #0]
 800b31e:	d1e0      	bne.n	800b2e2 <_free_r+0x26>
 800b320:	681c      	ldr	r4, [r3, #0]
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	6053      	str	r3, [r2, #4]
 800b326:	440c      	add	r4, r1
 800b328:	6014      	str	r4, [r2, #0]
 800b32a:	e7da      	b.n	800b2e2 <_free_r+0x26>
 800b32c:	d902      	bls.n	800b334 <_free_r+0x78>
 800b32e:	230c      	movs	r3, #12
 800b330:	6003      	str	r3, [r0, #0]
 800b332:	e7d6      	b.n	800b2e2 <_free_r+0x26>
 800b334:	6825      	ldr	r5, [r4, #0]
 800b336:	1961      	adds	r1, r4, r5
 800b338:	428b      	cmp	r3, r1
 800b33a:	bf04      	itt	eq
 800b33c:	6819      	ldreq	r1, [r3, #0]
 800b33e:	685b      	ldreq	r3, [r3, #4]
 800b340:	6063      	str	r3, [r4, #4]
 800b342:	bf04      	itt	eq
 800b344:	1949      	addeq	r1, r1, r5
 800b346:	6021      	streq	r1, [r4, #0]
 800b348:	6054      	str	r4, [r2, #4]
 800b34a:	e7ca      	b.n	800b2e2 <_free_r+0x26>
 800b34c:	b003      	add	sp, #12
 800b34e:	bd30      	pop	{r4, r5, pc}
 800b350:	20003c14 	.word	0x20003c14

0800b354 <__sflush_r>:
 800b354:	898a      	ldrh	r2, [r1, #12]
 800b356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b35a:	4605      	mov	r5, r0
 800b35c:	0710      	lsls	r0, r2, #28
 800b35e:	460c      	mov	r4, r1
 800b360:	d458      	bmi.n	800b414 <__sflush_r+0xc0>
 800b362:	684b      	ldr	r3, [r1, #4]
 800b364:	2b00      	cmp	r3, #0
 800b366:	dc05      	bgt.n	800b374 <__sflush_r+0x20>
 800b368:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	dc02      	bgt.n	800b374 <__sflush_r+0x20>
 800b36e:	2000      	movs	r0, #0
 800b370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b374:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b376:	2e00      	cmp	r6, #0
 800b378:	d0f9      	beq.n	800b36e <__sflush_r+0x1a>
 800b37a:	2300      	movs	r3, #0
 800b37c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b380:	682f      	ldr	r7, [r5, #0]
 800b382:	6a21      	ldr	r1, [r4, #32]
 800b384:	602b      	str	r3, [r5, #0]
 800b386:	d032      	beq.n	800b3ee <__sflush_r+0x9a>
 800b388:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b38a:	89a3      	ldrh	r3, [r4, #12]
 800b38c:	075a      	lsls	r2, r3, #29
 800b38e:	d505      	bpl.n	800b39c <__sflush_r+0x48>
 800b390:	6863      	ldr	r3, [r4, #4]
 800b392:	1ac0      	subs	r0, r0, r3
 800b394:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b396:	b10b      	cbz	r3, 800b39c <__sflush_r+0x48>
 800b398:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b39a:	1ac0      	subs	r0, r0, r3
 800b39c:	2300      	movs	r3, #0
 800b39e:	4602      	mov	r2, r0
 800b3a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b3a2:	6a21      	ldr	r1, [r4, #32]
 800b3a4:	4628      	mov	r0, r5
 800b3a6:	47b0      	blx	r6
 800b3a8:	1c43      	adds	r3, r0, #1
 800b3aa:	89a3      	ldrh	r3, [r4, #12]
 800b3ac:	d106      	bne.n	800b3bc <__sflush_r+0x68>
 800b3ae:	6829      	ldr	r1, [r5, #0]
 800b3b0:	291d      	cmp	r1, #29
 800b3b2:	d82b      	bhi.n	800b40c <__sflush_r+0xb8>
 800b3b4:	4a29      	ldr	r2, [pc, #164]	; (800b45c <__sflush_r+0x108>)
 800b3b6:	410a      	asrs	r2, r1
 800b3b8:	07d6      	lsls	r6, r2, #31
 800b3ba:	d427      	bmi.n	800b40c <__sflush_r+0xb8>
 800b3bc:	2200      	movs	r2, #0
 800b3be:	6062      	str	r2, [r4, #4]
 800b3c0:	04d9      	lsls	r1, r3, #19
 800b3c2:	6922      	ldr	r2, [r4, #16]
 800b3c4:	6022      	str	r2, [r4, #0]
 800b3c6:	d504      	bpl.n	800b3d2 <__sflush_r+0x7e>
 800b3c8:	1c42      	adds	r2, r0, #1
 800b3ca:	d101      	bne.n	800b3d0 <__sflush_r+0x7c>
 800b3cc:	682b      	ldr	r3, [r5, #0]
 800b3ce:	b903      	cbnz	r3, 800b3d2 <__sflush_r+0x7e>
 800b3d0:	6560      	str	r0, [r4, #84]	; 0x54
 800b3d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3d4:	602f      	str	r7, [r5, #0]
 800b3d6:	2900      	cmp	r1, #0
 800b3d8:	d0c9      	beq.n	800b36e <__sflush_r+0x1a>
 800b3da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3de:	4299      	cmp	r1, r3
 800b3e0:	d002      	beq.n	800b3e8 <__sflush_r+0x94>
 800b3e2:	4628      	mov	r0, r5
 800b3e4:	f7ff ff6a 	bl	800b2bc <_free_r>
 800b3e8:	2000      	movs	r0, #0
 800b3ea:	6360      	str	r0, [r4, #52]	; 0x34
 800b3ec:	e7c0      	b.n	800b370 <__sflush_r+0x1c>
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	4628      	mov	r0, r5
 800b3f2:	47b0      	blx	r6
 800b3f4:	1c41      	adds	r1, r0, #1
 800b3f6:	d1c8      	bne.n	800b38a <__sflush_r+0x36>
 800b3f8:	682b      	ldr	r3, [r5, #0]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d0c5      	beq.n	800b38a <__sflush_r+0x36>
 800b3fe:	2b1d      	cmp	r3, #29
 800b400:	d001      	beq.n	800b406 <__sflush_r+0xb2>
 800b402:	2b16      	cmp	r3, #22
 800b404:	d101      	bne.n	800b40a <__sflush_r+0xb6>
 800b406:	602f      	str	r7, [r5, #0]
 800b408:	e7b1      	b.n	800b36e <__sflush_r+0x1a>
 800b40a:	89a3      	ldrh	r3, [r4, #12]
 800b40c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b410:	81a3      	strh	r3, [r4, #12]
 800b412:	e7ad      	b.n	800b370 <__sflush_r+0x1c>
 800b414:	690f      	ldr	r7, [r1, #16]
 800b416:	2f00      	cmp	r7, #0
 800b418:	d0a9      	beq.n	800b36e <__sflush_r+0x1a>
 800b41a:	0793      	lsls	r3, r2, #30
 800b41c:	680e      	ldr	r6, [r1, #0]
 800b41e:	bf08      	it	eq
 800b420:	694b      	ldreq	r3, [r1, #20]
 800b422:	600f      	str	r7, [r1, #0]
 800b424:	bf18      	it	ne
 800b426:	2300      	movne	r3, #0
 800b428:	eba6 0807 	sub.w	r8, r6, r7
 800b42c:	608b      	str	r3, [r1, #8]
 800b42e:	f1b8 0f00 	cmp.w	r8, #0
 800b432:	dd9c      	ble.n	800b36e <__sflush_r+0x1a>
 800b434:	6a21      	ldr	r1, [r4, #32]
 800b436:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b438:	4643      	mov	r3, r8
 800b43a:	463a      	mov	r2, r7
 800b43c:	4628      	mov	r0, r5
 800b43e:	47b0      	blx	r6
 800b440:	2800      	cmp	r0, #0
 800b442:	dc06      	bgt.n	800b452 <__sflush_r+0xfe>
 800b444:	89a3      	ldrh	r3, [r4, #12]
 800b446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b44a:	81a3      	strh	r3, [r4, #12]
 800b44c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b450:	e78e      	b.n	800b370 <__sflush_r+0x1c>
 800b452:	4407      	add	r7, r0
 800b454:	eba8 0800 	sub.w	r8, r8, r0
 800b458:	e7e9      	b.n	800b42e <__sflush_r+0xda>
 800b45a:	bf00      	nop
 800b45c:	dfbffffe 	.word	0xdfbffffe

0800b460 <_fflush_r>:
 800b460:	b538      	push	{r3, r4, r5, lr}
 800b462:	690b      	ldr	r3, [r1, #16]
 800b464:	4605      	mov	r5, r0
 800b466:	460c      	mov	r4, r1
 800b468:	b913      	cbnz	r3, 800b470 <_fflush_r+0x10>
 800b46a:	2500      	movs	r5, #0
 800b46c:	4628      	mov	r0, r5
 800b46e:	bd38      	pop	{r3, r4, r5, pc}
 800b470:	b118      	cbz	r0, 800b47a <_fflush_r+0x1a>
 800b472:	6a03      	ldr	r3, [r0, #32]
 800b474:	b90b      	cbnz	r3, 800b47a <_fflush_r+0x1a>
 800b476:	f7ff fe4d 	bl	800b114 <__sinit>
 800b47a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d0f3      	beq.n	800b46a <_fflush_r+0xa>
 800b482:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b484:	07d0      	lsls	r0, r2, #31
 800b486:	d404      	bmi.n	800b492 <_fflush_r+0x32>
 800b488:	0599      	lsls	r1, r3, #22
 800b48a:	d402      	bmi.n	800b492 <_fflush_r+0x32>
 800b48c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b48e:	f7ff fee6 	bl	800b25e <__retarget_lock_acquire_recursive>
 800b492:	4628      	mov	r0, r5
 800b494:	4621      	mov	r1, r4
 800b496:	f7ff ff5d 	bl	800b354 <__sflush_r>
 800b49a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b49c:	07da      	lsls	r2, r3, #31
 800b49e:	4605      	mov	r5, r0
 800b4a0:	d4e4      	bmi.n	800b46c <_fflush_r+0xc>
 800b4a2:	89a3      	ldrh	r3, [r4, #12]
 800b4a4:	059b      	lsls	r3, r3, #22
 800b4a6:	d4e1      	bmi.n	800b46c <_fflush_r+0xc>
 800b4a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4aa:	f7ff fed9 	bl	800b260 <__retarget_lock_release_recursive>
 800b4ae:	e7dd      	b.n	800b46c <_fflush_r+0xc>

0800b4b0 <__sread>:
 800b4b0:	b510      	push	{r4, lr}
 800b4b2:	460c      	mov	r4, r1
 800b4b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4b8:	f000 f872 	bl	800b5a0 <_read_r>
 800b4bc:	2800      	cmp	r0, #0
 800b4be:	bfab      	itete	ge
 800b4c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b4c2:	89a3      	ldrhlt	r3, [r4, #12]
 800b4c4:	181b      	addge	r3, r3, r0
 800b4c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b4ca:	bfac      	ite	ge
 800b4cc:	6563      	strge	r3, [r4, #84]	; 0x54
 800b4ce:	81a3      	strhlt	r3, [r4, #12]
 800b4d0:	bd10      	pop	{r4, pc}

0800b4d2 <__swrite>:
 800b4d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4d6:	461f      	mov	r7, r3
 800b4d8:	898b      	ldrh	r3, [r1, #12]
 800b4da:	05db      	lsls	r3, r3, #23
 800b4dc:	4605      	mov	r5, r0
 800b4de:	460c      	mov	r4, r1
 800b4e0:	4616      	mov	r6, r2
 800b4e2:	d505      	bpl.n	800b4f0 <__swrite+0x1e>
 800b4e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4e8:	2302      	movs	r3, #2
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	f000 f846 	bl	800b57c <_lseek_r>
 800b4f0:	89a3      	ldrh	r3, [r4, #12]
 800b4f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b4fa:	81a3      	strh	r3, [r4, #12]
 800b4fc:	4632      	mov	r2, r6
 800b4fe:	463b      	mov	r3, r7
 800b500:	4628      	mov	r0, r5
 800b502:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b506:	f000 b85d 	b.w	800b5c4 <_write_r>

0800b50a <__sseek>:
 800b50a:	b510      	push	{r4, lr}
 800b50c:	460c      	mov	r4, r1
 800b50e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b512:	f000 f833 	bl	800b57c <_lseek_r>
 800b516:	1c43      	adds	r3, r0, #1
 800b518:	89a3      	ldrh	r3, [r4, #12]
 800b51a:	bf15      	itete	ne
 800b51c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b51e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b522:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b526:	81a3      	strheq	r3, [r4, #12]
 800b528:	bf18      	it	ne
 800b52a:	81a3      	strhne	r3, [r4, #12]
 800b52c:	bd10      	pop	{r4, pc}

0800b52e <__sclose>:
 800b52e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b532:	f000 b813 	b.w	800b55c <_close_r>
	...

0800b538 <fiprintf>:
 800b538:	b40e      	push	{r1, r2, r3}
 800b53a:	b503      	push	{r0, r1, lr}
 800b53c:	4601      	mov	r1, r0
 800b53e:	ab03      	add	r3, sp, #12
 800b540:	4805      	ldr	r0, [pc, #20]	; (800b558 <fiprintf+0x20>)
 800b542:	f853 2b04 	ldr.w	r2, [r3], #4
 800b546:	6800      	ldr	r0, [r0, #0]
 800b548:	9301      	str	r3, [sp, #4]
 800b54a:	f000 f87d 	bl	800b648 <_vfiprintf_r>
 800b54e:	b002      	add	sp, #8
 800b550:	f85d eb04 	ldr.w	lr, [sp], #4
 800b554:	b003      	add	sp, #12
 800b556:	4770      	bx	lr
 800b558:	200000cc 	.word	0x200000cc

0800b55c <_close_r>:
 800b55c:	b538      	push	{r3, r4, r5, lr}
 800b55e:	4d06      	ldr	r5, [pc, #24]	; (800b578 <_close_r+0x1c>)
 800b560:	2300      	movs	r3, #0
 800b562:	4604      	mov	r4, r0
 800b564:	4608      	mov	r0, r1
 800b566:	602b      	str	r3, [r5, #0]
 800b568:	f7ff f9ef 	bl	800a94a <_close>
 800b56c:	1c43      	adds	r3, r0, #1
 800b56e:	d102      	bne.n	800b576 <_close_r+0x1a>
 800b570:	682b      	ldr	r3, [r5, #0]
 800b572:	b103      	cbz	r3, 800b576 <_close_r+0x1a>
 800b574:	6023      	str	r3, [r4, #0]
 800b576:	bd38      	pop	{r3, r4, r5, pc}
 800b578:	20003d5c 	.word	0x20003d5c

0800b57c <_lseek_r>:
 800b57c:	b538      	push	{r3, r4, r5, lr}
 800b57e:	4d07      	ldr	r5, [pc, #28]	; (800b59c <_lseek_r+0x20>)
 800b580:	4604      	mov	r4, r0
 800b582:	4608      	mov	r0, r1
 800b584:	4611      	mov	r1, r2
 800b586:	2200      	movs	r2, #0
 800b588:	602a      	str	r2, [r5, #0]
 800b58a:	461a      	mov	r2, r3
 800b58c:	f7ff fa04 	bl	800a998 <_lseek>
 800b590:	1c43      	adds	r3, r0, #1
 800b592:	d102      	bne.n	800b59a <_lseek_r+0x1e>
 800b594:	682b      	ldr	r3, [r5, #0]
 800b596:	b103      	cbz	r3, 800b59a <_lseek_r+0x1e>
 800b598:	6023      	str	r3, [r4, #0]
 800b59a:	bd38      	pop	{r3, r4, r5, pc}
 800b59c:	20003d5c 	.word	0x20003d5c

0800b5a0 <_read_r>:
 800b5a0:	b538      	push	{r3, r4, r5, lr}
 800b5a2:	4d07      	ldr	r5, [pc, #28]	; (800b5c0 <_read_r+0x20>)
 800b5a4:	4604      	mov	r4, r0
 800b5a6:	4608      	mov	r0, r1
 800b5a8:	4611      	mov	r1, r2
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	602a      	str	r2, [r5, #0]
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	f7ff f992 	bl	800a8d8 <_read>
 800b5b4:	1c43      	adds	r3, r0, #1
 800b5b6:	d102      	bne.n	800b5be <_read_r+0x1e>
 800b5b8:	682b      	ldr	r3, [r5, #0]
 800b5ba:	b103      	cbz	r3, 800b5be <_read_r+0x1e>
 800b5bc:	6023      	str	r3, [r4, #0]
 800b5be:	bd38      	pop	{r3, r4, r5, pc}
 800b5c0:	20003d5c 	.word	0x20003d5c

0800b5c4 <_write_r>:
 800b5c4:	b538      	push	{r3, r4, r5, lr}
 800b5c6:	4d07      	ldr	r5, [pc, #28]	; (800b5e4 <_write_r+0x20>)
 800b5c8:	4604      	mov	r4, r0
 800b5ca:	4608      	mov	r0, r1
 800b5cc:	4611      	mov	r1, r2
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	602a      	str	r2, [r5, #0]
 800b5d2:	461a      	mov	r2, r3
 800b5d4:	f7ff f99d 	bl	800a912 <_write>
 800b5d8:	1c43      	adds	r3, r0, #1
 800b5da:	d102      	bne.n	800b5e2 <_write_r+0x1e>
 800b5dc:	682b      	ldr	r3, [r5, #0]
 800b5de:	b103      	cbz	r3, 800b5e2 <_write_r+0x1e>
 800b5e0:	6023      	str	r3, [r4, #0]
 800b5e2:	bd38      	pop	{r3, r4, r5, pc}
 800b5e4:	20003d5c 	.word	0x20003d5c

0800b5e8 <abort>:
 800b5e8:	b508      	push	{r3, lr}
 800b5ea:	2006      	movs	r0, #6
 800b5ec:	f000 fc18 	bl	800be20 <raise>
 800b5f0:	2001      	movs	r0, #1
 800b5f2:	f7ff f967 	bl	800a8c4 <_exit>

0800b5f6 <__sfputc_r>:
 800b5f6:	6893      	ldr	r3, [r2, #8]
 800b5f8:	3b01      	subs	r3, #1
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	b410      	push	{r4}
 800b5fe:	6093      	str	r3, [r2, #8]
 800b600:	da08      	bge.n	800b614 <__sfputc_r+0x1e>
 800b602:	6994      	ldr	r4, [r2, #24]
 800b604:	42a3      	cmp	r3, r4
 800b606:	db01      	blt.n	800b60c <__sfputc_r+0x16>
 800b608:	290a      	cmp	r1, #10
 800b60a:	d103      	bne.n	800b614 <__sfputc_r+0x1e>
 800b60c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b610:	f000 bac4 	b.w	800bb9c <__swbuf_r>
 800b614:	6813      	ldr	r3, [r2, #0]
 800b616:	1c58      	adds	r0, r3, #1
 800b618:	6010      	str	r0, [r2, #0]
 800b61a:	7019      	strb	r1, [r3, #0]
 800b61c:	4608      	mov	r0, r1
 800b61e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b622:	4770      	bx	lr

0800b624 <__sfputs_r>:
 800b624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b626:	4606      	mov	r6, r0
 800b628:	460f      	mov	r7, r1
 800b62a:	4614      	mov	r4, r2
 800b62c:	18d5      	adds	r5, r2, r3
 800b62e:	42ac      	cmp	r4, r5
 800b630:	d101      	bne.n	800b636 <__sfputs_r+0x12>
 800b632:	2000      	movs	r0, #0
 800b634:	e007      	b.n	800b646 <__sfputs_r+0x22>
 800b636:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b63a:	463a      	mov	r2, r7
 800b63c:	4630      	mov	r0, r6
 800b63e:	f7ff ffda 	bl	800b5f6 <__sfputc_r>
 800b642:	1c43      	adds	r3, r0, #1
 800b644:	d1f3      	bne.n	800b62e <__sfputs_r+0xa>
 800b646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b648 <_vfiprintf_r>:
 800b648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b64c:	460d      	mov	r5, r1
 800b64e:	b09d      	sub	sp, #116	; 0x74
 800b650:	4614      	mov	r4, r2
 800b652:	4698      	mov	r8, r3
 800b654:	4606      	mov	r6, r0
 800b656:	b118      	cbz	r0, 800b660 <_vfiprintf_r+0x18>
 800b658:	6a03      	ldr	r3, [r0, #32]
 800b65a:	b90b      	cbnz	r3, 800b660 <_vfiprintf_r+0x18>
 800b65c:	f7ff fd5a 	bl	800b114 <__sinit>
 800b660:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b662:	07d9      	lsls	r1, r3, #31
 800b664:	d405      	bmi.n	800b672 <_vfiprintf_r+0x2a>
 800b666:	89ab      	ldrh	r3, [r5, #12]
 800b668:	059a      	lsls	r2, r3, #22
 800b66a:	d402      	bmi.n	800b672 <_vfiprintf_r+0x2a>
 800b66c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b66e:	f7ff fdf6 	bl	800b25e <__retarget_lock_acquire_recursive>
 800b672:	89ab      	ldrh	r3, [r5, #12]
 800b674:	071b      	lsls	r3, r3, #28
 800b676:	d501      	bpl.n	800b67c <_vfiprintf_r+0x34>
 800b678:	692b      	ldr	r3, [r5, #16]
 800b67a:	b99b      	cbnz	r3, 800b6a4 <_vfiprintf_r+0x5c>
 800b67c:	4629      	mov	r1, r5
 800b67e:	4630      	mov	r0, r6
 800b680:	f000 faca 	bl	800bc18 <__swsetup_r>
 800b684:	b170      	cbz	r0, 800b6a4 <_vfiprintf_r+0x5c>
 800b686:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b688:	07dc      	lsls	r4, r3, #31
 800b68a:	d504      	bpl.n	800b696 <_vfiprintf_r+0x4e>
 800b68c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b690:	b01d      	add	sp, #116	; 0x74
 800b692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b696:	89ab      	ldrh	r3, [r5, #12]
 800b698:	0598      	lsls	r0, r3, #22
 800b69a:	d4f7      	bmi.n	800b68c <_vfiprintf_r+0x44>
 800b69c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b69e:	f7ff fddf 	bl	800b260 <__retarget_lock_release_recursive>
 800b6a2:	e7f3      	b.n	800b68c <_vfiprintf_r+0x44>
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	9309      	str	r3, [sp, #36]	; 0x24
 800b6a8:	2320      	movs	r3, #32
 800b6aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b6ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6b2:	2330      	movs	r3, #48	; 0x30
 800b6b4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b868 <_vfiprintf_r+0x220>
 800b6b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b6bc:	f04f 0901 	mov.w	r9, #1
 800b6c0:	4623      	mov	r3, r4
 800b6c2:	469a      	mov	sl, r3
 800b6c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6c8:	b10a      	cbz	r2, 800b6ce <_vfiprintf_r+0x86>
 800b6ca:	2a25      	cmp	r2, #37	; 0x25
 800b6cc:	d1f9      	bne.n	800b6c2 <_vfiprintf_r+0x7a>
 800b6ce:	ebba 0b04 	subs.w	fp, sl, r4
 800b6d2:	d00b      	beq.n	800b6ec <_vfiprintf_r+0xa4>
 800b6d4:	465b      	mov	r3, fp
 800b6d6:	4622      	mov	r2, r4
 800b6d8:	4629      	mov	r1, r5
 800b6da:	4630      	mov	r0, r6
 800b6dc:	f7ff ffa2 	bl	800b624 <__sfputs_r>
 800b6e0:	3001      	adds	r0, #1
 800b6e2:	f000 80a9 	beq.w	800b838 <_vfiprintf_r+0x1f0>
 800b6e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6e8:	445a      	add	r2, fp
 800b6ea:	9209      	str	r2, [sp, #36]	; 0x24
 800b6ec:	f89a 3000 	ldrb.w	r3, [sl]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	f000 80a1 	beq.w	800b838 <_vfiprintf_r+0x1f0>
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b6fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b700:	f10a 0a01 	add.w	sl, sl, #1
 800b704:	9304      	str	r3, [sp, #16]
 800b706:	9307      	str	r3, [sp, #28]
 800b708:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b70c:	931a      	str	r3, [sp, #104]	; 0x68
 800b70e:	4654      	mov	r4, sl
 800b710:	2205      	movs	r2, #5
 800b712:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b716:	4854      	ldr	r0, [pc, #336]	; (800b868 <_vfiprintf_r+0x220>)
 800b718:	f7f4 fd5a 	bl	80001d0 <memchr>
 800b71c:	9a04      	ldr	r2, [sp, #16]
 800b71e:	b9d8      	cbnz	r0, 800b758 <_vfiprintf_r+0x110>
 800b720:	06d1      	lsls	r1, r2, #27
 800b722:	bf44      	itt	mi
 800b724:	2320      	movmi	r3, #32
 800b726:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b72a:	0713      	lsls	r3, r2, #28
 800b72c:	bf44      	itt	mi
 800b72e:	232b      	movmi	r3, #43	; 0x2b
 800b730:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b734:	f89a 3000 	ldrb.w	r3, [sl]
 800b738:	2b2a      	cmp	r3, #42	; 0x2a
 800b73a:	d015      	beq.n	800b768 <_vfiprintf_r+0x120>
 800b73c:	9a07      	ldr	r2, [sp, #28]
 800b73e:	4654      	mov	r4, sl
 800b740:	2000      	movs	r0, #0
 800b742:	f04f 0c0a 	mov.w	ip, #10
 800b746:	4621      	mov	r1, r4
 800b748:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b74c:	3b30      	subs	r3, #48	; 0x30
 800b74e:	2b09      	cmp	r3, #9
 800b750:	d94d      	bls.n	800b7ee <_vfiprintf_r+0x1a6>
 800b752:	b1b0      	cbz	r0, 800b782 <_vfiprintf_r+0x13a>
 800b754:	9207      	str	r2, [sp, #28]
 800b756:	e014      	b.n	800b782 <_vfiprintf_r+0x13a>
 800b758:	eba0 0308 	sub.w	r3, r0, r8
 800b75c:	fa09 f303 	lsl.w	r3, r9, r3
 800b760:	4313      	orrs	r3, r2
 800b762:	9304      	str	r3, [sp, #16]
 800b764:	46a2      	mov	sl, r4
 800b766:	e7d2      	b.n	800b70e <_vfiprintf_r+0xc6>
 800b768:	9b03      	ldr	r3, [sp, #12]
 800b76a:	1d19      	adds	r1, r3, #4
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	9103      	str	r1, [sp, #12]
 800b770:	2b00      	cmp	r3, #0
 800b772:	bfbb      	ittet	lt
 800b774:	425b      	neglt	r3, r3
 800b776:	f042 0202 	orrlt.w	r2, r2, #2
 800b77a:	9307      	strge	r3, [sp, #28]
 800b77c:	9307      	strlt	r3, [sp, #28]
 800b77e:	bfb8      	it	lt
 800b780:	9204      	strlt	r2, [sp, #16]
 800b782:	7823      	ldrb	r3, [r4, #0]
 800b784:	2b2e      	cmp	r3, #46	; 0x2e
 800b786:	d10c      	bne.n	800b7a2 <_vfiprintf_r+0x15a>
 800b788:	7863      	ldrb	r3, [r4, #1]
 800b78a:	2b2a      	cmp	r3, #42	; 0x2a
 800b78c:	d134      	bne.n	800b7f8 <_vfiprintf_r+0x1b0>
 800b78e:	9b03      	ldr	r3, [sp, #12]
 800b790:	1d1a      	adds	r2, r3, #4
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	9203      	str	r2, [sp, #12]
 800b796:	2b00      	cmp	r3, #0
 800b798:	bfb8      	it	lt
 800b79a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b79e:	3402      	adds	r4, #2
 800b7a0:	9305      	str	r3, [sp, #20]
 800b7a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b878 <_vfiprintf_r+0x230>
 800b7a6:	7821      	ldrb	r1, [r4, #0]
 800b7a8:	2203      	movs	r2, #3
 800b7aa:	4650      	mov	r0, sl
 800b7ac:	f7f4 fd10 	bl	80001d0 <memchr>
 800b7b0:	b138      	cbz	r0, 800b7c2 <_vfiprintf_r+0x17a>
 800b7b2:	9b04      	ldr	r3, [sp, #16]
 800b7b4:	eba0 000a 	sub.w	r0, r0, sl
 800b7b8:	2240      	movs	r2, #64	; 0x40
 800b7ba:	4082      	lsls	r2, r0
 800b7bc:	4313      	orrs	r3, r2
 800b7be:	3401      	adds	r4, #1
 800b7c0:	9304      	str	r3, [sp, #16]
 800b7c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7c6:	4829      	ldr	r0, [pc, #164]	; (800b86c <_vfiprintf_r+0x224>)
 800b7c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b7cc:	2206      	movs	r2, #6
 800b7ce:	f7f4 fcff 	bl	80001d0 <memchr>
 800b7d2:	2800      	cmp	r0, #0
 800b7d4:	d03f      	beq.n	800b856 <_vfiprintf_r+0x20e>
 800b7d6:	4b26      	ldr	r3, [pc, #152]	; (800b870 <_vfiprintf_r+0x228>)
 800b7d8:	bb1b      	cbnz	r3, 800b822 <_vfiprintf_r+0x1da>
 800b7da:	9b03      	ldr	r3, [sp, #12]
 800b7dc:	3307      	adds	r3, #7
 800b7de:	f023 0307 	bic.w	r3, r3, #7
 800b7e2:	3308      	adds	r3, #8
 800b7e4:	9303      	str	r3, [sp, #12]
 800b7e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7e8:	443b      	add	r3, r7
 800b7ea:	9309      	str	r3, [sp, #36]	; 0x24
 800b7ec:	e768      	b.n	800b6c0 <_vfiprintf_r+0x78>
 800b7ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7f2:	460c      	mov	r4, r1
 800b7f4:	2001      	movs	r0, #1
 800b7f6:	e7a6      	b.n	800b746 <_vfiprintf_r+0xfe>
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	3401      	adds	r4, #1
 800b7fc:	9305      	str	r3, [sp, #20]
 800b7fe:	4619      	mov	r1, r3
 800b800:	f04f 0c0a 	mov.w	ip, #10
 800b804:	4620      	mov	r0, r4
 800b806:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b80a:	3a30      	subs	r2, #48	; 0x30
 800b80c:	2a09      	cmp	r2, #9
 800b80e:	d903      	bls.n	800b818 <_vfiprintf_r+0x1d0>
 800b810:	2b00      	cmp	r3, #0
 800b812:	d0c6      	beq.n	800b7a2 <_vfiprintf_r+0x15a>
 800b814:	9105      	str	r1, [sp, #20]
 800b816:	e7c4      	b.n	800b7a2 <_vfiprintf_r+0x15a>
 800b818:	fb0c 2101 	mla	r1, ip, r1, r2
 800b81c:	4604      	mov	r4, r0
 800b81e:	2301      	movs	r3, #1
 800b820:	e7f0      	b.n	800b804 <_vfiprintf_r+0x1bc>
 800b822:	ab03      	add	r3, sp, #12
 800b824:	9300      	str	r3, [sp, #0]
 800b826:	462a      	mov	r2, r5
 800b828:	4b12      	ldr	r3, [pc, #72]	; (800b874 <_vfiprintf_r+0x22c>)
 800b82a:	a904      	add	r1, sp, #16
 800b82c:	4630      	mov	r0, r6
 800b82e:	f3af 8000 	nop.w
 800b832:	4607      	mov	r7, r0
 800b834:	1c78      	adds	r0, r7, #1
 800b836:	d1d6      	bne.n	800b7e6 <_vfiprintf_r+0x19e>
 800b838:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b83a:	07d9      	lsls	r1, r3, #31
 800b83c:	d405      	bmi.n	800b84a <_vfiprintf_r+0x202>
 800b83e:	89ab      	ldrh	r3, [r5, #12]
 800b840:	059a      	lsls	r2, r3, #22
 800b842:	d402      	bmi.n	800b84a <_vfiprintf_r+0x202>
 800b844:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b846:	f7ff fd0b 	bl	800b260 <__retarget_lock_release_recursive>
 800b84a:	89ab      	ldrh	r3, [r5, #12]
 800b84c:	065b      	lsls	r3, r3, #25
 800b84e:	f53f af1d 	bmi.w	800b68c <_vfiprintf_r+0x44>
 800b852:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b854:	e71c      	b.n	800b690 <_vfiprintf_r+0x48>
 800b856:	ab03      	add	r3, sp, #12
 800b858:	9300      	str	r3, [sp, #0]
 800b85a:	462a      	mov	r2, r5
 800b85c:	4b05      	ldr	r3, [pc, #20]	; (800b874 <_vfiprintf_r+0x22c>)
 800b85e:	a904      	add	r1, sp, #16
 800b860:	4630      	mov	r0, r6
 800b862:	f000 f879 	bl	800b958 <_printf_i>
 800b866:	e7e4      	b.n	800b832 <_vfiprintf_r+0x1ea>
 800b868:	0800c04f 	.word	0x0800c04f
 800b86c:	0800c059 	.word	0x0800c059
 800b870:	00000000 	.word	0x00000000
 800b874:	0800b625 	.word	0x0800b625
 800b878:	0800c055 	.word	0x0800c055

0800b87c <_printf_common>:
 800b87c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b880:	4616      	mov	r6, r2
 800b882:	4699      	mov	r9, r3
 800b884:	688a      	ldr	r2, [r1, #8]
 800b886:	690b      	ldr	r3, [r1, #16]
 800b888:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b88c:	4293      	cmp	r3, r2
 800b88e:	bfb8      	it	lt
 800b890:	4613      	movlt	r3, r2
 800b892:	6033      	str	r3, [r6, #0]
 800b894:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b898:	4607      	mov	r7, r0
 800b89a:	460c      	mov	r4, r1
 800b89c:	b10a      	cbz	r2, 800b8a2 <_printf_common+0x26>
 800b89e:	3301      	adds	r3, #1
 800b8a0:	6033      	str	r3, [r6, #0]
 800b8a2:	6823      	ldr	r3, [r4, #0]
 800b8a4:	0699      	lsls	r1, r3, #26
 800b8a6:	bf42      	ittt	mi
 800b8a8:	6833      	ldrmi	r3, [r6, #0]
 800b8aa:	3302      	addmi	r3, #2
 800b8ac:	6033      	strmi	r3, [r6, #0]
 800b8ae:	6825      	ldr	r5, [r4, #0]
 800b8b0:	f015 0506 	ands.w	r5, r5, #6
 800b8b4:	d106      	bne.n	800b8c4 <_printf_common+0x48>
 800b8b6:	f104 0a19 	add.w	sl, r4, #25
 800b8ba:	68e3      	ldr	r3, [r4, #12]
 800b8bc:	6832      	ldr	r2, [r6, #0]
 800b8be:	1a9b      	subs	r3, r3, r2
 800b8c0:	42ab      	cmp	r3, r5
 800b8c2:	dc26      	bgt.n	800b912 <_printf_common+0x96>
 800b8c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b8c8:	1e13      	subs	r3, r2, #0
 800b8ca:	6822      	ldr	r2, [r4, #0]
 800b8cc:	bf18      	it	ne
 800b8ce:	2301      	movne	r3, #1
 800b8d0:	0692      	lsls	r2, r2, #26
 800b8d2:	d42b      	bmi.n	800b92c <_printf_common+0xb0>
 800b8d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b8d8:	4649      	mov	r1, r9
 800b8da:	4638      	mov	r0, r7
 800b8dc:	47c0      	blx	r8
 800b8de:	3001      	adds	r0, #1
 800b8e0:	d01e      	beq.n	800b920 <_printf_common+0xa4>
 800b8e2:	6823      	ldr	r3, [r4, #0]
 800b8e4:	6922      	ldr	r2, [r4, #16]
 800b8e6:	f003 0306 	and.w	r3, r3, #6
 800b8ea:	2b04      	cmp	r3, #4
 800b8ec:	bf02      	ittt	eq
 800b8ee:	68e5      	ldreq	r5, [r4, #12]
 800b8f0:	6833      	ldreq	r3, [r6, #0]
 800b8f2:	1aed      	subeq	r5, r5, r3
 800b8f4:	68a3      	ldr	r3, [r4, #8]
 800b8f6:	bf0c      	ite	eq
 800b8f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b8fc:	2500      	movne	r5, #0
 800b8fe:	4293      	cmp	r3, r2
 800b900:	bfc4      	itt	gt
 800b902:	1a9b      	subgt	r3, r3, r2
 800b904:	18ed      	addgt	r5, r5, r3
 800b906:	2600      	movs	r6, #0
 800b908:	341a      	adds	r4, #26
 800b90a:	42b5      	cmp	r5, r6
 800b90c:	d11a      	bne.n	800b944 <_printf_common+0xc8>
 800b90e:	2000      	movs	r0, #0
 800b910:	e008      	b.n	800b924 <_printf_common+0xa8>
 800b912:	2301      	movs	r3, #1
 800b914:	4652      	mov	r2, sl
 800b916:	4649      	mov	r1, r9
 800b918:	4638      	mov	r0, r7
 800b91a:	47c0      	blx	r8
 800b91c:	3001      	adds	r0, #1
 800b91e:	d103      	bne.n	800b928 <_printf_common+0xac>
 800b920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b928:	3501      	adds	r5, #1
 800b92a:	e7c6      	b.n	800b8ba <_printf_common+0x3e>
 800b92c:	18e1      	adds	r1, r4, r3
 800b92e:	1c5a      	adds	r2, r3, #1
 800b930:	2030      	movs	r0, #48	; 0x30
 800b932:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b936:	4422      	add	r2, r4
 800b938:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b93c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b940:	3302      	adds	r3, #2
 800b942:	e7c7      	b.n	800b8d4 <_printf_common+0x58>
 800b944:	2301      	movs	r3, #1
 800b946:	4622      	mov	r2, r4
 800b948:	4649      	mov	r1, r9
 800b94a:	4638      	mov	r0, r7
 800b94c:	47c0      	blx	r8
 800b94e:	3001      	adds	r0, #1
 800b950:	d0e6      	beq.n	800b920 <_printf_common+0xa4>
 800b952:	3601      	adds	r6, #1
 800b954:	e7d9      	b.n	800b90a <_printf_common+0x8e>
	...

0800b958 <_printf_i>:
 800b958:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b95c:	7e0f      	ldrb	r7, [r1, #24]
 800b95e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b960:	2f78      	cmp	r7, #120	; 0x78
 800b962:	4691      	mov	r9, r2
 800b964:	4680      	mov	r8, r0
 800b966:	460c      	mov	r4, r1
 800b968:	469a      	mov	sl, r3
 800b96a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b96e:	d807      	bhi.n	800b980 <_printf_i+0x28>
 800b970:	2f62      	cmp	r7, #98	; 0x62
 800b972:	d80a      	bhi.n	800b98a <_printf_i+0x32>
 800b974:	2f00      	cmp	r7, #0
 800b976:	f000 80d4 	beq.w	800bb22 <_printf_i+0x1ca>
 800b97a:	2f58      	cmp	r7, #88	; 0x58
 800b97c:	f000 80c0 	beq.w	800bb00 <_printf_i+0x1a8>
 800b980:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b984:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b988:	e03a      	b.n	800ba00 <_printf_i+0xa8>
 800b98a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b98e:	2b15      	cmp	r3, #21
 800b990:	d8f6      	bhi.n	800b980 <_printf_i+0x28>
 800b992:	a101      	add	r1, pc, #4	; (adr r1, 800b998 <_printf_i+0x40>)
 800b994:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b998:	0800b9f1 	.word	0x0800b9f1
 800b99c:	0800ba05 	.word	0x0800ba05
 800b9a0:	0800b981 	.word	0x0800b981
 800b9a4:	0800b981 	.word	0x0800b981
 800b9a8:	0800b981 	.word	0x0800b981
 800b9ac:	0800b981 	.word	0x0800b981
 800b9b0:	0800ba05 	.word	0x0800ba05
 800b9b4:	0800b981 	.word	0x0800b981
 800b9b8:	0800b981 	.word	0x0800b981
 800b9bc:	0800b981 	.word	0x0800b981
 800b9c0:	0800b981 	.word	0x0800b981
 800b9c4:	0800bb09 	.word	0x0800bb09
 800b9c8:	0800ba31 	.word	0x0800ba31
 800b9cc:	0800bac3 	.word	0x0800bac3
 800b9d0:	0800b981 	.word	0x0800b981
 800b9d4:	0800b981 	.word	0x0800b981
 800b9d8:	0800bb2b 	.word	0x0800bb2b
 800b9dc:	0800b981 	.word	0x0800b981
 800b9e0:	0800ba31 	.word	0x0800ba31
 800b9e4:	0800b981 	.word	0x0800b981
 800b9e8:	0800b981 	.word	0x0800b981
 800b9ec:	0800bacb 	.word	0x0800bacb
 800b9f0:	682b      	ldr	r3, [r5, #0]
 800b9f2:	1d1a      	adds	r2, r3, #4
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	602a      	str	r2, [r5, #0]
 800b9f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b9fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ba00:	2301      	movs	r3, #1
 800ba02:	e09f      	b.n	800bb44 <_printf_i+0x1ec>
 800ba04:	6820      	ldr	r0, [r4, #0]
 800ba06:	682b      	ldr	r3, [r5, #0]
 800ba08:	0607      	lsls	r7, r0, #24
 800ba0a:	f103 0104 	add.w	r1, r3, #4
 800ba0e:	6029      	str	r1, [r5, #0]
 800ba10:	d501      	bpl.n	800ba16 <_printf_i+0xbe>
 800ba12:	681e      	ldr	r6, [r3, #0]
 800ba14:	e003      	b.n	800ba1e <_printf_i+0xc6>
 800ba16:	0646      	lsls	r6, r0, #25
 800ba18:	d5fb      	bpl.n	800ba12 <_printf_i+0xba>
 800ba1a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ba1e:	2e00      	cmp	r6, #0
 800ba20:	da03      	bge.n	800ba2a <_printf_i+0xd2>
 800ba22:	232d      	movs	r3, #45	; 0x2d
 800ba24:	4276      	negs	r6, r6
 800ba26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba2a:	485a      	ldr	r0, [pc, #360]	; (800bb94 <_printf_i+0x23c>)
 800ba2c:	230a      	movs	r3, #10
 800ba2e:	e012      	b.n	800ba56 <_printf_i+0xfe>
 800ba30:	682b      	ldr	r3, [r5, #0]
 800ba32:	6820      	ldr	r0, [r4, #0]
 800ba34:	1d19      	adds	r1, r3, #4
 800ba36:	6029      	str	r1, [r5, #0]
 800ba38:	0605      	lsls	r5, r0, #24
 800ba3a:	d501      	bpl.n	800ba40 <_printf_i+0xe8>
 800ba3c:	681e      	ldr	r6, [r3, #0]
 800ba3e:	e002      	b.n	800ba46 <_printf_i+0xee>
 800ba40:	0641      	lsls	r1, r0, #25
 800ba42:	d5fb      	bpl.n	800ba3c <_printf_i+0xe4>
 800ba44:	881e      	ldrh	r6, [r3, #0]
 800ba46:	4853      	ldr	r0, [pc, #332]	; (800bb94 <_printf_i+0x23c>)
 800ba48:	2f6f      	cmp	r7, #111	; 0x6f
 800ba4a:	bf0c      	ite	eq
 800ba4c:	2308      	moveq	r3, #8
 800ba4e:	230a      	movne	r3, #10
 800ba50:	2100      	movs	r1, #0
 800ba52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ba56:	6865      	ldr	r5, [r4, #4]
 800ba58:	60a5      	str	r5, [r4, #8]
 800ba5a:	2d00      	cmp	r5, #0
 800ba5c:	bfa2      	ittt	ge
 800ba5e:	6821      	ldrge	r1, [r4, #0]
 800ba60:	f021 0104 	bicge.w	r1, r1, #4
 800ba64:	6021      	strge	r1, [r4, #0]
 800ba66:	b90e      	cbnz	r6, 800ba6c <_printf_i+0x114>
 800ba68:	2d00      	cmp	r5, #0
 800ba6a:	d04b      	beq.n	800bb04 <_printf_i+0x1ac>
 800ba6c:	4615      	mov	r5, r2
 800ba6e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ba72:	fb03 6711 	mls	r7, r3, r1, r6
 800ba76:	5dc7      	ldrb	r7, [r0, r7]
 800ba78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ba7c:	4637      	mov	r7, r6
 800ba7e:	42bb      	cmp	r3, r7
 800ba80:	460e      	mov	r6, r1
 800ba82:	d9f4      	bls.n	800ba6e <_printf_i+0x116>
 800ba84:	2b08      	cmp	r3, #8
 800ba86:	d10b      	bne.n	800baa0 <_printf_i+0x148>
 800ba88:	6823      	ldr	r3, [r4, #0]
 800ba8a:	07de      	lsls	r6, r3, #31
 800ba8c:	d508      	bpl.n	800baa0 <_printf_i+0x148>
 800ba8e:	6923      	ldr	r3, [r4, #16]
 800ba90:	6861      	ldr	r1, [r4, #4]
 800ba92:	4299      	cmp	r1, r3
 800ba94:	bfde      	ittt	le
 800ba96:	2330      	movle	r3, #48	; 0x30
 800ba98:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ba9c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800baa0:	1b52      	subs	r2, r2, r5
 800baa2:	6122      	str	r2, [r4, #16]
 800baa4:	f8cd a000 	str.w	sl, [sp]
 800baa8:	464b      	mov	r3, r9
 800baaa:	aa03      	add	r2, sp, #12
 800baac:	4621      	mov	r1, r4
 800baae:	4640      	mov	r0, r8
 800bab0:	f7ff fee4 	bl	800b87c <_printf_common>
 800bab4:	3001      	adds	r0, #1
 800bab6:	d14a      	bne.n	800bb4e <_printf_i+0x1f6>
 800bab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800babc:	b004      	add	sp, #16
 800babe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bac2:	6823      	ldr	r3, [r4, #0]
 800bac4:	f043 0320 	orr.w	r3, r3, #32
 800bac8:	6023      	str	r3, [r4, #0]
 800baca:	4833      	ldr	r0, [pc, #204]	; (800bb98 <_printf_i+0x240>)
 800bacc:	2778      	movs	r7, #120	; 0x78
 800bace:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bad2:	6823      	ldr	r3, [r4, #0]
 800bad4:	6829      	ldr	r1, [r5, #0]
 800bad6:	061f      	lsls	r7, r3, #24
 800bad8:	f851 6b04 	ldr.w	r6, [r1], #4
 800badc:	d402      	bmi.n	800bae4 <_printf_i+0x18c>
 800bade:	065f      	lsls	r7, r3, #25
 800bae0:	bf48      	it	mi
 800bae2:	b2b6      	uxthmi	r6, r6
 800bae4:	07df      	lsls	r7, r3, #31
 800bae6:	bf48      	it	mi
 800bae8:	f043 0320 	orrmi.w	r3, r3, #32
 800baec:	6029      	str	r1, [r5, #0]
 800baee:	bf48      	it	mi
 800baf0:	6023      	strmi	r3, [r4, #0]
 800baf2:	b91e      	cbnz	r6, 800bafc <_printf_i+0x1a4>
 800baf4:	6823      	ldr	r3, [r4, #0]
 800baf6:	f023 0320 	bic.w	r3, r3, #32
 800bafa:	6023      	str	r3, [r4, #0]
 800bafc:	2310      	movs	r3, #16
 800bafe:	e7a7      	b.n	800ba50 <_printf_i+0xf8>
 800bb00:	4824      	ldr	r0, [pc, #144]	; (800bb94 <_printf_i+0x23c>)
 800bb02:	e7e4      	b.n	800bace <_printf_i+0x176>
 800bb04:	4615      	mov	r5, r2
 800bb06:	e7bd      	b.n	800ba84 <_printf_i+0x12c>
 800bb08:	682b      	ldr	r3, [r5, #0]
 800bb0a:	6826      	ldr	r6, [r4, #0]
 800bb0c:	6961      	ldr	r1, [r4, #20]
 800bb0e:	1d18      	adds	r0, r3, #4
 800bb10:	6028      	str	r0, [r5, #0]
 800bb12:	0635      	lsls	r5, r6, #24
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	d501      	bpl.n	800bb1c <_printf_i+0x1c4>
 800bb18:	6019      	str	r1, [r3, #0]
 800bb1a:	e002      	b.n	800bb22 <_printf_i+0x1ca>
 800bb1c:	0670      	lsls	r0, r6, #25
 800bb1e:	d5fb      	bpl.n	800bb18 <_printf_i+0x1c0>
 800bb20:	8019      	strh	r1, [r3, #0]
 800bb22:	2300      	movs	r3, #0
 800bb24:	6123      	str	r3, [r4, #16]
 800bb26:	4615      	mov	r5, r2
 800bb28:	e7bc      	b.n	800baa4 <_printf_i+0x14c>
 800bb2a:	682b      	ldr	r3, [r5, #0]
 800bb2c:	1d1a      	adds	r2, r3, #4
 800bb2e:	602a      	str	r2, [r5, #0]
 800bb30:	681d      	ldr	r5, [r3, #0]
 800bb32:	6862      	ldr	r2, [r4, #4]
 800bb34:	2100      	movs	r1, #0
 800bb36:	4628      	mov	r0, r5
 800bb38:	f7f4 fb4a 	bl	80001d0 <memchr>
 800bb3c:	b108      	cbz	r0, 800bb42 <_printf_i+0x1ea>
 800bb3e:	1b40      	subs	r0, r0, r5
 800bb40:	6060      	str	r0, [r4, #4]
 800bb42:	6863      	ldr	r3, [r4, #4]
 800bb44:	6123      	str	r3, [r4, #16]
 800bb46:	2300      	movs	r3, #0
 800bb48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb4c:	e7aa      	b.n	800baa4 <_printf_i+0x14c>
 800bb4e:	6923      	ldr	r3, [r4, #16]
 800bb50:	462a      	mov	r2, r5
 800bb52:	4649      	mov	r1, r9
 800bb54:	4640      	mov	r0, r8
 800bb56:	47d0      	blx	sl
 800bb58:	3001      	adds	r0, #1
 800bb5a:	d0ad      	beq.n	800bab8 <_printf_i+0x160>
 800bb5c:	6823      	ldr	r3, [r4, #0]
 800bb5e:	079b      	lsls	r3, r3, #30
 800bb60:	d413      	bmi.n	800bb8a <_printf_i+0x232>
 800bb62:	68e0      	ldr	r0, [r4, #12]
 800bb64:	9b03      	ldr	r3, [sp, #12]
 800bb66:	4298      	cmp	r0, r3
 800bb68:	bfb8      	it	lt
 800bb6a:	4618      	movlt	r0, r3
 800bb6c:	e7a6      	b.n	800babc <_printf_i+0x164>
 800bb6e:	2301      	movs	r3, #1
 800bb70:	4632      	mov	r2, r6
 800bb72:	4649      	mov	r1, r9
 800bb74:	4640      	mov	r0, r8
 800bb76:	47d0      	blx	sl
 800bb78:	3001      	adds	r0, #1
 800bb7a:	d09d      	beq.n	800bab8 <_printf_i+0x160>
 800bb7c:	3501      	adds	r5, #1
 800bb7e:	68e3      	ldr	r3, [r4, #12]
 800bb80:	9903      	ldr	r1, [sp, #12]
 800bb82:	1a5b      	subs	r3, r3, r1
 800bb84:	42ab      	cmp	r3, r5
 800bb86:	dcf2      	bgt.n	800bb6e <_printf_i+0x216>
 800bb88:	e7eb      	b.n	800bb62 <_printf_i+0x20a>
 800bb8a:	2500      	movs	r5, #0
 800bb8c:	f104 0619 	add.w	r6, r4, #25
 800bb90:	e7f5      	b.n	800bb7e <_printf_i+0x226>
 800bb92:	bf00      	nop
 800bb94:	0800c060 	.word	0x0800c060
 800bb98:	0800c071 	.word	0x0800c071

0800bb9c <__swbuf_r>:
 800bb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb9e:	460e      	mov	r6, r1
 800bba0:	4614      	mov	r4, r2
 800bba2:	4605      	mov	r5, r0
 800bba4:	b118      	cbz	r0, 800bbae <__swbuf_r+0x12>
 800bba6:	6a03      	ldr	r3, [r0, #32]
 800bba8:	b90b      	cbnz	r3, 800bbae <__swbuf_r+0x12>
 800bbaa:	f7ff fab3 	bl	800b114 <__sinit>
 800bbae:	69a3      	ldr	r3, [r4, #24]
 800bbb0:	60a3      	str	r3, [r4, #8]
 800bbb2:	89a3      	ldrh	r3, [r4, #12]
 800bbb4:	071a      	lsls	r2, r3, #28
 800bbb6:	d525      	bpl.n	800bc04 <__swbuf_r+0x68>
 800bbb8:	6923      	ldr	r3, [r4, #16]
 800bbba:	b31b      	cbz	r3, 800bc04 <__swbuf_r+0x68>
 800bbbc:	6823      	ldr	r3, [r4, #0]
 800bbbe:	6922      	ldr	r2, [r4, #16]
 800bbc0:	1a98      	subs	r0, r3, r2
 800bbc2:	6963      	ldr	r3, [r4, #20]
 800bbc4:	b2f6      	uxtb	r6, r6
 800bbc6:	4283      	cmp	r3, r0
 800bbc8:	4637      	mov	r7, r6
 800bbca:	dc04      	bgt.n	800bbd6 <__swbuf_r+0x3a>
 800bbcc:	4621      	mov	r1, r4
 800bbce:	4628      	mov	r0, r5
 800bbd0:	f7ff fc46 	bl	800b460 <_fflush_r>
 800bbd4:	b9e0      	cbnz	r0, 800bc10 <__swbuf_r+0x74>
 800bbd6:	68a3      	ldr	r3, [r4, #8]
 800bbd8:	3b01      	subs	r3, #1
 800bbda:	60a3      	str	r3, [r4, #8]
 800bbdc:	6823      	ldr	r3, [r4, #0]
 800bbde:	1c5a      	adds	r2, r3, #1
 800bbe0:	6022      	str	r2, [r4, #0]
 800bbe2:	701e      	strb	r6, [r3, #0]
 800bbe4:	6962      	ldr	r2, [r4, #20]
 800bbe6:	1c43      	adds	r3, r0, #1
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d004      	beq.n	800bbf6 <__swbuf_r+0x5a>
 800bbec:	89a3      	ldrh	r3, [r4, #12]
 800bbee:	07db      	lsls	r3, r3, #31
 800bbf0:	d506      	bpl.n	800bc00 <__swbuf_r+0x64>
 800bbf2:	2e0a      	cmp	r6, #10
 800bbf4:	d104      	bne.n	800bc00 <__swbuf_r+0x64>
 800bbf6:	4621      	mov	r1, r4
 800bbf8:	4628      	mov	r0, r5
 800bbfa:	f7ff fc31 	bl	800b460 <_fflush_r>
 800bbfe:	b938      	cbnz	r0, 800bc10 <__swbuf_r+0x74>
 800bc00:	4638      	mov	r0, r7
 800bc02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc04:	4621      	mov	r1, r4
 800bc06:	4628      	mov	r0, r5
 800bc08:	f000 f806 	bl	800bc18 <__swsetup_r>
 800bc0c:	2800      	cmp	r0, #0
 800bc0e:	d0d5      	beq.n	800bbbc <__swbuf_r+0x20>
 800bc10:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bc14:	e7f4      	b.n	800bc00 <__swbuf_r+0x64>
	...

0800bc18 <__swsetup_r>:
 800bc18:	b538      	push	{r3, r4, r5, lr}
 800bc1a:	4b2a      	ldr	r3, [pc, #168]	; (800bcc4 <__swsetup_r+0xac>)
 800bc1c:	4605      	mov	r5, r0
 800bc1e:	6818      	ldr	r0, [r3, #0]
 800bc20:	460c      	mov	r4, r1
 800bc22:	b118      	cbz	r0, 800bc2c <__swsetup_r+0x14>
 800bc24:	6a03      	ldr	r3, [r0, #32]
 800bc26:	b90b      	cbnz	r3, 800bc2c <__swsetup_r+0x14>
 800bc28:	f7ff fa74 	bl	800b114 <__sinit>
 800bc2c:	89a3      	ldrh	r3, [r4, #12]
 800bc2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc32:	0718      	lsls	r0, r3, #28
 800bc34:	d422      	bmi.n	800bc7c <__swsetup_r+0x64>
 800bc36:	06d9      	lsls	r1, r3, #27
 800bc38:	d407      	bmi.n	800bc4a <__swsetup_r+0x32>
 800bc3a:	2309      	movs	r3, #9
 800bc3c:	602b      	str	r3, [r5, #0]
 800bc3e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bc42:	81a3      	strh	r3, [r4, #12]
 800bc44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc48:	e034      	b.n	800bcb4 <__swsetup_r+0x9c>
 800bc4a:	0758      	lsls	r0, r3, #29
 800bc4c:	d512      	bpl.n	800bc74 <__swsetup_r+0x5c>
 800bc4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc50:	b141      	cbz	r1, 800bc64 <__swsetup_r+0x4c>
 800bc52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc56:	4299      	cmp	r1, r3
 800bc58:	d002      	beq.n	800bc60 <__swsetup_r+0x48>
 800bc5a:	4628      	mov	r0, r5
 800bc5c:	f7ff fb2e 	bl	800b2bc <_free_r>
 800bc60:	2300      	movs	r3, #0
 800bc62:	6363      	str	r3, [r4, #52]	; 0x34
 800bc64:	89a3      	ldrh	r3, [r4, #12]
 800bc66:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc6a:	81a3      	strh	r3, [r4, #12]
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	6063      	str	r3, [r4, #4]
 800bc70:	6923      	ldr	r3, [r4, #16]
 800bc72:	6023      	str	r3, [r4, #0]
 800bc74:	89a3      	ldrh	r3, [r4, #12]
 800bc76:	f043 0308 	orr.w	r3, r3, #8
 800bc7a:	81a3      	strh	r3, [r4, #12]
 800bc7c:	6923      	ldr	r3, [r4, #16]
 800bc7e:	b94b      	cbnz	r3, 800bc94 <__swsetup_r+0x7c>
 800bc80:	89a3      	ldrh	r3, [r4, #12]
 800bc82:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc8a:	d003      	beq.n	800bc94 <__swsetup_r+0x7c>
 800bc8c:	4621      	mov	r1, r4
 800bc8e:	4628      	mov	r0, r5
 800bc90:	f000 f840 	bl	800bd14 <__smakebuf_r>
 800bc94:	89a0      	ldrh	r0, [r4, #12]
 800bc96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc9a:	f010 0301 	ands.w	r3, r0, #1
 800bc9e:	d00a      	beq.n	800bcb6 <__swsetup_r+0x9e>
 800bca0:	2300      	movs	r3, #0
 800bca2:	60a3      	str	r3, [r4, #8]
 800bca4:	6963      	ldr	r3, [r4, #20]
 800bca6:	425b      	negs	r3, r3
 800bca8:	61a3      	str	r3, [r4, #24]
 800bcaa:	6923      	ldr	r3, [r4, #16]
 800bcac:	b943      	cbnz	r3, 800bcc0 <__swsetup_r+0xa8>
 800bcae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bcb2:	d1c4      	bne.n	800bc3e <__swsetup_r+0x26>
 800bcb4:	bd38      	pop	{r3, r4, r5, pc}
 800bcb6:	0781      	lsls	r1, r0, #30
 800bcb8:	bf58      	it	pl
 800bcba:	6963      	ldrpl	r3, [r4, #20]
 800bcbc:	60a3      	str	r3, [r4, #8]
 800bcbe:	e7f4      	b.n	800bcaa <__swsetup_r+0x92>
 800bcc0:	2000      	movs	r0, #0
 800bcc2:	e7f7      	b.n	800bcb4 <__swsetup_r+0x9c>
 800bcc4:	200000cc 	.word	0x200000cc

0800bcc8 <__swhatbuf_r>:
 800bcc8:	b570      	push	{r4, r5, r6, lr}
 800bcca:	460c      	mov	r4, r1
 800bccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcd0:	2900      	cmp	r1, #0
 800bcd2:	b096      	sub	sp, #88	; 0x58
 800bcd4:	4615      	mov	r5, r2
 800bcd6:	461e      	mov	r6, r3
 800bcd8:	da0d      	bge.n	800bcf6 <__swhatbuf_r+0x2e>
 800bcda:	89a3      	ldrh	r3, [r4, #12]
 800bcdc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bce0:	f04f 0100 	mov.w	r1, #0
 800bce4:	bf0c      	ite	eq
 800bce6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bcea:	2340      	movne	r3, #64	; 0x40
 800bcec:	2000      	movs	r0, #0
 800bcee:	6031      	str	r1, [r6, #0]
 800bcf0:	602b      	str	r3, [r5, #0]
 800bcf2:	b016      	add	sp, #88	; 0x58
 800bcf4:	bd70      	pop	{r4, r5, r6, pc}
 800bcf6:	466a      	mov	r2, sp
 800bcf8:	f000 f848 	bl	800bd8c <_fstat_r>
 800bcfc:	2800      	cmp	r0, #0
 800bcfe:	dbec      	blt.n	800bcda <__swhatbuf_r+0x12>
 800bd00:	9901      	ldr	r1, [sp, #4]
 800bd02:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bd06:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bd0a:	4259      	negs	r1, r3
 800bd0c:	4159      	adcs	r1, r3
 800bd0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd12:	e7eb      	b.n	800bcec <__swhatbuf_r+0x24>

0800bd14 <__smakebuf_r>:
 800bd14:	898b      	ldrh	r3, [r1, #12]
 800bd16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bd18:	079d      	lsls	r5, r3, #30
 800bd1a:	4606      	mov	r6, r0
 800bd1c:	460c      	mov	r4, r1
 800bd1e:	d507      	bpl.n	800bd30 <__smakebuf_r+0x1c>
 800bd20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bd24:	6023      	str	r3, [r4, #0]
 800bd26:	6123      	str	r3, [r4, #16]
 800bd28:	2301      	movs	r3, #1
 800bd2a:	6163      	str	r3, [r4, #20]
 800bd2c:	b002      	add	sp, #8
 800bd2e:	bd70      	pop	{r4, r5, r6, pc}
 800bd30:	ab01      	add	r3, sp, #4
 800bd32:	466a      	mov	r2, sp
 800bd34:	f7ff ffc8 	bl	800bcc8 <__swhatbuf_r>
 800bd38:	9900      	ldr	r1, [sp, #0]
 800bd3a:	4605      	mov	r5, r0
 800bd3c:	4630      	mov	r0, r6
 800bd3e:	f7ff f865 	bl	800ae0c <_malloc_r>
 800bd42:	b948      	cbnz	r0, 800bd58 <__smakebuf_r+0x44>
 800bd44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd48:	059a      	lsls	r2, r3, #22
 800bd4a:	d4ef      	bmi.n	800bd2c <__smakebuf_r+0x18>
 800bd4c:	f023 0303 	bic.w	r3, r3, #3
 800bd50:	f043 0302 	orr.w	r3, r3, #2
 800bd54:	81a3      	strh	r3, [r4, #12]
 800bd56:	e7e3      	b.n	800bd20 <__smakebuf_r+0xc>
 800bd58:	89a3      	ldrh	r3, [r4, #12]
 800bd5a:	6020      	str	r0, [r4, #0]
 800bd5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd60:	81a3      	strh	r3, [r4, #12]
 800bd62:	9b00      	ldr	r3, [sp, #0]
 800bd64:	6163      	str	r3, [r4, #20]
 800bd66:	9b01      	ldr	r3, [sp, #4]
 800bd68:	6120      	str	r0, [r4, #16]
 800bd6a:	b15b      	cbz	r3, 800bd84 <__smakebuf_r+0x70>
 800bd6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd70:	4630      	mov	r0, r6
 800bd72:	f000 f81d 	bl	800bdb0 <_isatty_r>
 800bd76:	b128      	cbz	r0, 800bd84 <__smakebuf_r+0x70>
 800bd78:	89a3      	ldrh	r3, [r4, #12]
 800bd7a:	f023 0303 	bic.w	r3, r3, #3
 800bd7e:	f043 0301 	orr.w	r3, r3, #1
 800bd82:	81a3      	strh	r3, [r4, #12]
 800bd84:	89a3      	ldrh	r3, [r4, #12]
 800bd86:	431d      	orrs	r5, r3
 800bd88:	81a5      	strh	r5, [r4, #12]
 800bd8a:	e7cf      	b.n	800bd2c <__smakebuf_r+0x18>

0800bd8c <_fstat_r>:
 800bd8c:	b538      	push	{r3, r4, r5, lr}
 800bd8e:	4d07      	ldr	r5, [pc, #28]	; (800bdac <_fstat_r+0x20>)
 800bd90:	2300      	movs	r3, #0
 800bd92:	4604      	mov	r4, r0
 800bd94:	4608      	mov	r0, r1
 800bd96:	4611      	mov	r1, r2
 800bd98:	602b      	str	r3, [r5, #0]
 800bd9a:	f7fe fde2 	bl	800a962 <_fstat>
 800bd9e:	1c43      	adds	r3, r0, #1
 800bda0:	d102      	bne.n	800bda8 <_fstat_r+0x1c>
 800bda2:	682b      	ldr	r3, [r5, #0]
 800bda4:	b103      	cbz	r3, 800bda8 <_fstat_r+0x1c>
 800bda6:	6023      	str	r3, [r4, #0]
 800bda8:	bd38      	pop	{r3, r4, r5, pc}
 800bdaa:	bf00      	nop
 800bdac:	20003d5c 	.word	0x20003d5c

0800bdb0 <_isatty_r>:
 800bdb0:	b538      	push	{r3, r4, r5, lr}
 800bdb2:	4d06      	ldr	r5, [pc, #24]	; (800bdcc <_isatty_r+0x1c>)
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	4604      	mov	r4, r0
 800bdb8:	4608      	mov	r0, r1
 800bdba:	602b      	str	r3, [r5, #0]
 800bdbc:	f7fe fde1 	bl	800a982 <_isatty>
 800bdc0:	1c43      	adds	r3, r0, #1
 800bdc2:	d102      	bne.n	800bdca <_isatty_r+0x1a>
 800bdc4:	682b      	ldr	r3, [r5, #0]
 800bdc6:	b103      	cbz	r3, 800bdca <_isatty_r+0x1a>
 800bdc8:	6023      	str	r3, [r4, #0]
 800bdca:	bd38      	pop	{r3, r4, r5, pc}
 800bdcc:	20003d5c 	.word	0x20003d5c

0800bdd0 <_raise_r>:
 800bdd0:	291f      	cmp	r1, #31
 800bdd2:	b538      	push	{r3, r4, r5, lr}
 800bdd4:	4604      	mov	r4, r0
 800bdd6:	460d      	mov	r5, r1
 800bdd8:	d904      	bls.n	800bde4 <_raise_r+0x14>
 800bdda:	2316      	movs	r3, #22
 800bddc:	6003      	str	r3, [r0, #0]
 800bdde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bde2:	bd38      	pop	{r3, r4, r5, pc}
 800bde4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bde6:	b112      	cbz	r2, 800bdee <_raise_r+0x1e>
 800bde8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bdec:	b94b      	cbnz	r3, 800be02 <_raise_r+0x32>
 800bdee:	4620      	mov	r0, r4
 800bdf0:	f000 f830 	bl	800be54 <_getpid_r>
 800bdf4:	462a      	mov	r2, r5
 800bdf6:	4601      	mov	r1, r0
 800bdf8:	4620      	mov	r0, r4
 800bdfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bdfe:	f000 b817 	b.w	800be30 <_kill_r>
 800be02:	2b01      	cmp	r3, #1
 800be04:	d00a      	beq.n	800be1c <_raise_r+0x4c>
 800be06:	1c59      	adds	r1, r3, #1
 800be08:	d103      	bne.n	800be12 <_raise_r+0x42>
 800be0a:	2316      	movs	r3, #22
 800be0c:	6003      	str	r3, [r0, #0]
 800be0e:	2001      	movs	r0, #1
 800be10:	e7e7      	b.n	800bde2 <_raise_r+0x12>
 800be12:	2400      	movs	r4, #0
 800be14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800be18:	4628      	mov	r0, r5
 800be1a:	4798      	blx	r3
 800be1c:	2000      	movs	r0, #0
 800be1e:	e7e0      	b.n	800bde2 <_raise_r+0x12>

0800be20 <raise>:
 800be20:	4b02      	ldr	r3, [pc, #8]	; (800be2c <raise+0xc>)
 800be22:	4601      	mov	r1, r0
 800be24:	6818      	ldr	r0, [r3, #0]
 800be26:	f7ff bfd3 	b.w	800bdd0 <_raise_r>
 800be2a:	bf00      	nop
 800be2c:	200000cc 	.word	0x200000cc

0800be30 <_kill_r>:
 800be30:	b538      	push	{r3, r4, r5, lr}
 800be32:	4d07      	ldr	r5, [pc, #28]	; (800be50 <_kill_r+0x20>)
 800be34:	2300      	movs	r3, #0
 800be36:	4604      	mov	r4, r0
 800be38:	4608      	mov	r0, r1
 800be3a:	4611      	mov	r1, r2
 800be3c:	602b      	str	r3, [r5, #0]
 800be3e:	f7fe fd31 	bl	800a8a4 <_kill>
 800be42:	1c43      	adds	r3, r0, #1
 800be44:	d102      	bne.n	800be4c <_kill_r+0x1c>
 800be46:	682b      	ldr	r3, [r5, #0]
 800be48:	b103      	cbz	r3, 800be4c <_kill_r+0x1c>
 800be4a:	6023      	str	r3, [r4, #0]
 800be4c:	bd38      	pop	{r3, r4, r5, pc}
 800be4e:	bf00      	nop
 800be50:	20003d5c 	.word	0x20003d5c

0800be54 <_getpid_r>:
 800be54:	f7fe bd1e 	b.w	800a894 <_getpid>

0800be58 <_gettimeofday>:
 800be58:	4b02      	ldr	r3, [pc, #8]	; (800be64 <_gettimeofday+0xc>)
 800be5a:	2258      	movs	r2, #88	; 0x58
 800be5c:	601a      	str	r2, [r3, #0]
 800be5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be62:	4770      	bx	lr
 800be64:	20003d5c 	.word	0x20003d5c

0800be68 <_init>:
 800be68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be6a:	bf00      	nop
 800be6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be6e:	bc08      	pop	{r3}
 800be70:	469e      	mov	lr, r3
 800be72:	4770      	bx	lr

0800be74 <_fini>:
 800be74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be76:	bf00      	nop
 800be78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be7a:	bc08      	pop	{r3}
 800be7c:	469e      	mov	lr, r3
 800be7e:	4770      	bx	lr
