
spudglo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a918  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  0800aaa8  0800aaa8  0001aaa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad14  0800ad14  0002025c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad14  0800ad14  0001ad14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad1c  0800ad1c  0002025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad1c  0800ad1c  0001ad1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad20  0800ad20  0001ad20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000025c  20000000  0800ad24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003d5c  2000025c  0800af80  0002025c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003fb8  0800af80  00023fb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026b40  00000000  00000000  000202cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005c39  00000000  00000000  00046e0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020d8  00000000  00000000  0004ca48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001989  00000000  00000000  0004eb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a9b1  00000000  00000000  000504a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b7b2  00000000  00000000  0007ae5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f9ca5  00000000  00000000  000a660c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000091a4  00000000  00000000  001a02b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  001a9458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000025c 	.word	0x2000025c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aa90 	.word	0x0800aa90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000260 	.word	0x20000260
 80001cc:	0800aa90 	.word	0x0800aa90

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <current_monitor_set>:
float g_absolute_max_current_ratio = 0.0f; // DO NOT EXCEED!
p_current_t gp_current_monitor_strip[NUM_STRIPS];


void current_monitor_set(float value)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value < g_absolute_max_current_ratio)
 8000576:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <current_monitor_set+0x3c>)
 8000578:	edd3 7a00 	vldr	s15, [r3]
 800057c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000580:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000588:	d503      	bpl.n	8000592 <current_monitor_set+0x26>
    {
        g_max_current_ratio = value;
 800058a:	4a08      	ldr	r2, [pc, #32]	; (80005ac <current_monitor_set+0x40>)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	6013      	str	r3, [r2, #0]
    }
    else
    {
        g_max_current_ratio = g_absolute_max_current_ratio;
    }
}
 8000590:	e003      	b.n	800059a <current_monitor_set+0x2e>
        g_max_current_ratio = g_absolute_max_current_ratio;
 8000592:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <current_monitor_set+0x3c>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a05      	ldr	r2, [pc, #20]	; (80005ac <current_monitor_set+0x40>)
 8000598:	6013      	str	r3, [r2, #0]
}
 800059a:	bf00      	nop
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000278 	.word	0x20000278
 80005ac:	20000000 	.word	0x20000000

080005b0 <current_monitor_init>:
    return g_max_current_ratio;
}


void current_monitor_init(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
    while ((g_max_current_ratio * ((float)CURRENT_MONITOR_MAX_CURRENT_PER_LED_MA / 1000) * NUM_LEDS) > (float)CURRENT_MONITOR_MAX_CURRENT_DRAW_A)
 80005b4:	e009      	b.n	80005ca <current_monitor_init+0x1a>
    {
        g_max_current_ratio -= 0.05f;
 80005b6:	4b17      	ldr	r3, [pc, #92]	; (8000614 <current_monitor_init+0x64>)
 80005b8:	edd3 7a00 	vldr	s15, [r3]
 80005bc:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000618 <current_monitor_init+0x68>
 80005c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80005c4:	4b13      	ldr	r3, [pc, #76]	; (8000614 <current_monitor_init+0x64>)
 80005c6:	edc3 7a00 	vstr	s15, [r3]
    while ((g_max_current_ratio * ((float)CURRENT_MONITOR_MAX_CURRENT_PER_LED_MA / 1000) * NUM_LEDS) > (float)CURRENT_MONITOR_MAX_CURRENT_DRAW_A)
 80005ca:	4b12      	ldr	r3, [pc, #72]	; (8000614 <current_monitor_init+0x64>)
 80005cc:	edd3 7a00 	vldr	s15, [r3]
 80005d0:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800061c <current_monitor_init+0x6c>
 80005d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005d8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000620 <current_monitor_init+0x70>
 80005dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005e0:	eeb2 7a03 	vmov.f32	s14, #35	; 0x41180000  9.5
 80005e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005ec:	dce3      	bgt.n	80005b6 <current_monitor_init+0x6>
    }
    if (g_max_current_ratio <= 0) while(1); // broken..
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <current_monitor_init+0x64>)
 80005f0:	edd3 7a00 	vldr	s15, [r3]
 80005f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80005f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005fc:	d800      	bhi.n	8000600 <current_monitor_init+0x50>
 80005fe:	e7fe      	b.n	80005fe <current_monitor_init+0x4e>
    g_absolute_max_current_ratio = g_max_current_ratio;
 8000600:	4b04      	ldr	r3, [pc, #16]	; (8000614 <current_monitor_init+0x64>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a07      	ldr	r2, [pc, #28]	; (8000624 <current_monitor_init+0x74>)
 8000606:	6013      	str	r3, [r2, #0]
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	20000000 	.word	0x20000000
 8000618:	3d4ccccd 	.word	0x3d4ccccd
 800061c:	3d23d70a 	.word	0x3d23d70a
 8000620:	441f0000 	.word	0x441f0000
 8000624:	20000278 	.word	0x20000278

08000628 <animate_led_show_strip>:
 * @brief   Write data stored in `gp_ws28128b_strip` array to the strip
 * @param   strip_mask - the strip to write to
 * @return  void
 */
void animate_led_show_strip(const strip_mask_t strip_mask)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	80fb      	strh	r3, [r7, #6]
    if (strip_mask & STRIP_BIT_1)
 8000632:	88fb      	ldrh	r3, [r7, #6]
 8000634:	f003 0301 	and.w	r3, r3, #1
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <animate_led_show_strip+0x18>
    {
        ws2812b_show_strip_one();
 800063c:	f000 fac0 	bl	8000bc0 <ws2812b_show_strip_one>
    {
        // STRIP_BIT_3
        ws2812b_show_strip_three();
    }
#endif
}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <animate_led_set_all_pixels>:
    //animate_led_show_strip(mask);
}


void animate_led_set_all_pixels(const strip_mask_t mask, const uint8_t red, const uint8_t green, const uint8_t blue)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b089      	sub	sp, #36	; 0x24
 800064c:	af02      	add	r7, sp, #8
 800064e:	4604      	mov	r4, r0
 8000650:	4608      	mov	r0, r1
 8000652:	4611      	mov	r1, r2
 8000654:	461a      	mov	r2, r3
 8000656:	4623      	mov	r3, r4
 8000658:	80fb      	strh	r3, [r7, #6]
 800065a:	4603      	mov	r3, r0
 800065c:	717b      	strb	r3, [r7, #5]
 800065e:	460b      	mov	r3, r1
 8000660:	713b      	strb	r3, [r7, #4]
 8000662:	4613      	mov	r3, r2
 8000664:	70fb      	strb	r3, [r7, #3]
    uint16_t strip_size = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	81fb      	strh	r3, [r7, #14]
    if (mask == g_all_strip_mask)
 800066a:	4b2b      	ldr	r3, [pc, #172]	; (8000718 <animate_led_set_all_pixels+0xd0>)
 800066c:	881b      	ldrh	r3, [r3, #0]
 800066e:	88fa      	ldrh	r2, [r7, #6]
 8000670:	429a      	cmp	r2, r3
 8000672:	d122      	bne.n	80006ba <animate_led_set_all_pixels+0x72>
    {
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000674:	2301      	movs	r3, #1
 8000676:	75fb      	strb	r3, [r7, #23]
 8000678:	e01b      	b.n	80006b2 <animate_led_set_all_pixels+0x6a>
        {
            strip_size = ws2812_get_strip_size(strip_bit);
 800067a:	7dfb      	ldrb	r3, [r7, #23]
 800067c:	4618      	mov	r0, r3
 800067e:	f000 f8f5 	bl	800086c <ws2812_get_strip_size>
 8000682:	4603      	mov	r3, r0
 8000684:	81fb      	strh	r3, [r7, #14]
            //offset = animate_led_get_strip_offset(strip_bit);
            for (uint16_t iii = 0; iii < strip_size; iii++) ws2812b_set_led(strip_bit, iii, red, green, blue);
 8000686:	2300      	movs	r3, #0
 8000688:	82bb      	strh	r3, [r7, #20]
 800068a:	e00b      	b.n	80006a4 <animate_led_set_all_pixels+0x5c>
 800068c:	793c      	ldrb	r4, [r7, #4]
 800068e:	797a      	ldrb	r2, [r7, #5]
 8000690:	8ab9      	ldrh	r1, [r7, #20]
 8000692:	7df8      	ldrb	r0, [r7, #23]
 8000694:	78fb      	ldrb	r3, [r7, #3]
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	4623      	mov	r3, r4
 800069a:	f000 f909 	bl	80008b0 <ws2812b_set_led>
 800069e:	8abb      	ldrh	r3, [r7, #20]
 80006a0:	3301      	adds	r3, #1
 80006a2:	82bb      	strh	r3, [r7, #20]
 80006a4:	8aba      	ldrh	r2, [r7, #20]
 80006a6:	89fb      	ldrh	r3, [r7, #14]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d3ef      	bcc.n	800068c <animate_led_set_all_pixels+0x44>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 80006ac:	7dfb      	ldrb	r3, [r7, #23]
 80006ae:	3301      	adds	r3, #1
 80006b0:	75fb      	strb	r3, [r7, #23]
 80006b2:	7dfb      	ldrb	r3, [r7, #23]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d9e0      	bls.n	800067a <animate_led_set_all_pixels+0x32>
 80006b8:	e026      	b.n	8000708 <animate_led_set_all_pixels+0xc0>
        }
    }
    else
    {
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 80006ba:	2301      	movs	r3, #1
 80006bc:	74fb      	strb	r3, [r7, #19]
 80006be:	e020      	b.n	8000702 <animate_led_set_all_pixels+0xba>
        {
            if (mask & strip_bit)
 80006c0:	88fa      	ldrh	r2, [r7, #6]
 80006c2:	7cfb      	ldrb	r3, [r7, #19]
 80006c4:	4013      	ands	r3, r2
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d018      	beq.n	80006fc <animate_led_set_all_pixels+0xb4>
            {
                strip_size = ws2812_get_strip_size(strip_bit);
 80006ca:	7cfb      	ldrb	r3, [r7, #19]
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 f8cd 	bl	800086c <ws2812_get_strip_size>
 80006d2:	4603      	mov	r3, r0
 80006d4:	81fb      	strh	r3, [r7, #14]
                for (uint16_t yyy = 0; yyy < strip_size; yyy++) ws2812b_set_led(strip_bit, yyy, red, green, blue);
 80006d6:	2300      	movs	r3, #0
 80006d8:	823b      	strh	r3, [r7, #16]
 80006da:	e00b      	b.n	80006f4 <animate_led_set_all_pixels+0xac>
 80006dc:	793c      	ldrb	r4, [r7, #4]
 80006de:	797a      	ldrb	r2, [r7, #5]
 80006e0:	8a39      	ldrh	r1, [r7, #16]
 80006e2:	7cf8      	ldrb	r0, [r7, #19]
 80006e4:	78fb      	ldrb	r3, [r7, #3]
 80006e6:	9300      	str	r3, [sp, #0]
 80006e8:	4623      	mov	r3, r4
 80006ea:	f000 f8e1 	bl	80008b0 <ws2812b_set_led>
 80006ee:	8a3b      	ldrh	r3, [r7, #16]
 80006f0:	3301      	adds	r3, #1
 80006f2:	823b      	strh	r3, [r7, #16]
 80006f4:	8a3a      	ldrh	r2, [r7, #16]
 80006f6:	89fb      	ldrh	r3, [r7, #14]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d3ef      	bcc.n	80006dc <animate_led_set_all_pixels+0x94>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 80006fc:	7cfb      	ldrb	r3, [r7, #19]
 80006fe:	3301      	adds	r3, #1
 8000700:	74fb      	strb	r3, [r7, #19]
 8000702:	7cfb      	ldrb	r3, [r7, #19]
 8000704:	2b01      	cmp	r3, #1
 8000706:	d9db      	bls.n	80006c0 <animate_led_set_all_pixels+0x78>
            }
        }
    }
    animate_led_show_strip(mask);
 8000708:	88fb      	ldrh	r3, [r7, #6]
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff ff8c 	bl	8000628 <animate_led_show_strip>
}
 8000710:	bf00      	nop
 8000712:	371c      	adds	r7, #28
 8000714:	46bd      	mov	sp, r7
 8000716:	bd90      	pop	{r4, r7, pc}
 8000718:	200009f2 	.word	0x200009f2

0800071c <animate_led_solid_custom_color>:
	}
}


void animate_led_solid_custom_color(const strip_mask_t mask_solid, const color_hex_code_e color_solid)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	6039      	str	r1, [r7, #0]
 8000726:	80fb      	strh	r3, [r7, #6]
    uint8_t color_solid_rgb[sizeof(ws2812b_led_t)] = {0};
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <animate_led_solid_custom_color+0x40>)
 800072a:	881b      	ldrh	r3, [r3, #0]
 800072c:	81bb      	strh	r3, [r7, #12]
 800072e:	2300      	movs	r3, #0
 8000730:	73bb      	strb	r3, [r7, #14]
    color_led_hex_to_rgb(color_solid, color_solid_rgb);
 8000732:	f107 030c 	add.w	r3, r7, #12
 8000736:	4619      	mov	r1, r3
 8000738:	6838      	ldr	r0, [r7, #0]
 800073a:	f000 f811 	bl	8000760 <color_led_hex_to_rgb>
    animate_led_set_all_pixels(mask_solid, color_solid_rgb[offsetof(ws2812b_led_t, red)],
 800073e:	7b39      	ldrb	r1, [r7, #12]
 8000740:	7b7a      	ldrb	r2, [r7, #13]
 8000742:	7bbb      	ldrb	r3, [r7, #14]
 8000744:	88f8      	ldrh	r0, [r7, #6]
 8000746:	f7ff ff7f 	bl	8000648 <animate_led_set_all_pixels>
                               color_solid_rgb[offsetof(ws2812b_led_t, green)],
                               color_solid_rgb[offsetof(ws2812b_led_t, blue)]);
    animate_led_show_strip(mask_solid);
 800074a:	88fb      	ldrh	r3, [r7, #6]
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ff6b 	bl	8000628 <animate_led_show_strip>
}
 8000752:	bf00      	nop
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	0800aaa8 	.word	0x0800aaa8

08000760 <color_led_hex_to_rgb>:
    [COLORS_BROWN] = COLOR_HEX_BROWN
};


void color_led_hex_to_rgb(const color_hex_code_e color, uint8_t *color_array)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	6039      	str	r1, [r7, #0]
    color_array[offsetof(ws2812b_led_t, red)] = ((color & 0xFF0000) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, red))));
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	0c1b      	lsrs	r3, r3, #16
 800076e:	b2da      	uxtb	r2, r3
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	701a      	strb	r2, [r3, #0]
    color_array[offsetof(ws2812b_led_t, green)] = ((color & 0x00FF00) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, green))));
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	0a1a      	lsrs	r2, r3, #8
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	3301      	adds	r3, #1
 800077c:	b2d2      	uxtb	r2, r2
 800077e:	701a      	strb	r2, [r3, #0]
    color_array[offsetof(ws2812b_led_t, blue)] = ((color & 0x0000FF) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, blue))));
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	3302      	adds	r3, #2
 8000784:	687a      	ldr	r2, [r7, #4]
 8000786:	b2d2      	uxtb	r2, r2
 8000788:	701a      	strb	r2, [r3, #0]
}
 800078a:	bf00      	nop
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
	...

08000798 <reset_ws2812b>:

extern volatile int datasentflag;

uint16_t pwm_reset[50] = {0};
void reset_ws2812b(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
    //xSemaphoreTake(g_dma_transfer_semaphore, portMAX_DELAY);
    //xTaskNotify(g_dma_transfer_handle, 0, eSetValueWithOverwrite);
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_1, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 800079c:	2364      	movs	r3, #100	; 0x64
 800079e:	4a09      	ldr	r2, [pc, #36]	; (80007c4 <reset_ws2812b+0x2c>)
 80007a0:	2100      	movs	r1, #0
 80007a2:	4809      	ldr	r0, [pc, #36]	; (80007c8 <reset_ws2812b+0x30>)
 80007a4:	f005 fe8c 	bl	80064c0 <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_2, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 80007a8:	2364      	movs	r3, #100	; 0x64
 80007aa:	4a06      	ldr	r2, [pc, #24]	; (80007c4 <reset_ws2812b+0x2c>)
 80007ac:	2104      	movs	r1, #4
 80007ae:	4806      	ldr	r0, [pc, #24]	; (80007c8 <reset_ws2812b+0x30>)
 80007b0:	f005 fe86 	bl	80064c0 <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_3, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 80007b4:	2364      	movs	r3, #100	; 0x64
 80007b6:	4a03      	ldr	r2, [pc, #12]	; (80007c4 <reset_ws2812b+0x2c>)
 80007b8:	2108      	movs	r1, #8
 80007ba:	4803      	ldr	r0, [pc, #12]	; (80007c8 <reset_ws2812b+0x30>)
 80007bc:	f005 fe80 	bl	80064c0 <HAL_TIM_PWM_Start_DMA>
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000a00 	.word	0x20000a00
 80007c8:	20002544 	.word	0x20002544

080007cc <ws2812_convert_strip_num_to_strip_bit>:

static strip_bit_e ws2812_convert_strip_num_to_strip_bit(const strip_num_e strip_num)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
	return (strip_bit_e)(strip_num + 1);
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	3301      	adds	r3, #1
 80007da:	b2db      	uxtb	r3, r3
}
 80007dc:	4618      	mov	r0, r3
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <ws2812_convert_strip_bit_to_strip_num>:


static strip_num_e ws2812_convert_strip_bit_to_strip_num(const strip_bit_e strip_bit)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]
	return (strip_num_e)(strip_bit - 1);
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	3b01      	subs	r3, #1
 80007f6:	b2db      	uxtb	r3, r3
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <ws2812_get_pwm_strip_offset>:


uint16_t ws2812_get_pwm_strip_offset(const strip_bit_e strip_bit)
{
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	71fb      	strb	r3, [r7, #7]
    uint16_t offset = 0;
 800080e:	2300      	movs	r3, #0
 8000810:	81fb      	strh	r3, [r7, #14]
    uint8_t strip_num = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	737b      	strb	r3, [r7, #13]
    switch (strip_bit)
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	2b01      	cmp	r3, #1
 800081a:	d104      	bne.n	8000826 <ws2812_get_pwm_strip_offset+0x22>
    {
#if defined(STRIP_1_LENGTH)
        case STRIP_BIT_1:
            offset = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	81fb      	strh	r3, [r7, #14]
            strip_num = 1;
 8000820:	2301      	movs	r3, #1
 8000822:	737b      	strb	r3, [r7, #13]
        break;
 8000824:	e000      	b.n	8000828 <ws2812_get_pwm_strip_offset+0x24>
        case STRIP_BIT_5:
            offset = STRIP_1_LENGTH + STRIP_2_LENGTH + STRIP_3_LENGTH + STRIP_4_LENGTH;
        break;
#endif
        default:
        break;
 8000826:	bf00      	nop
    }
    return ((offset * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + (strip_num * WS2812B_RESET_TIME_CYCLES));
 8000828:	89fa      	ldrh	r2, [r7, #14]
 800082a:	4613      	mov	r3, r2
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	4413      	add	r3, r2
 8000830:	00db      	lsls	r3, r3, #3
 8000832:	ee07 3a90 	vmov	s15, r3
 8000836:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800083a:	7b7b      	ldrb	r3, [r7, #13]
 800083c:	ee07 3a90 	vmov	s15, r3
 8000840:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000844:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000868 <ws2812_get_pwm_strip_offset+0x64>
 8000848:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800084c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000850:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000854:	ee17 3a90 	vmov	r3, s15
 8000858:	b29b      	uxth	r3, r3
}
 800085a:	4618      	mov	r0, r3
 800085c:	3714      	adds	r7, #20
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	453b8000 	.word	0x453b8000

0800086c <ws2812_get_strip_size>:


uint16_t ws2812_get_strip_size(const strip_bit_e strip_bit)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
	uint16_t strip_size = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_ALL_SET == strip_bit) strip_size = g_max_strip_length;
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	2b01      	cmp	r3, #1
 800087e:	d103      	bne.n	8000888 <ws2812_get_strip_size+0x1c>
 8000880:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <ws2812_get_strip_size+0x3c>)
 8000882:	881b      	ldrh	r3, [r3, #0]
 8000884:	81fb      	strh	r3, [r7, #14]
 8000886:	e009      	b.n	800089c <ws2812_get_strip_size+0x30>
	else strip_size = strip_length[ws2812_convert_strip_num_to_strip_bit(strip_bit)];
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff ff9e 	bl	80007cc <ws2812_convert_strip_num_to_strip_bit>
 8000890:	4603      	mov	r3, r0
 8000892:	461a      	mov	r2, r3
 8000894:	4b05      	ldr	r3, [pc, #20]	; (80008ac <ws2812_get_strip_size+0x40>)
 8000896:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800089a:	81fb      	strh	r3, [r7, #14]
	return strip_size;
 800089c:	89fb      	ldrh	r3, [r7, #14]
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	200009f4 	.word	0x200009f4
 80008ac:	20000004 	.word	0x20000004

080008b0 <ws2812b_set_led>:
}


void ws2812b_set_led(const strip_bit_e strip_bit, const uint16_t led_num, const color_t red, const color_t green,
                     const color_t blue)
{
 80008b0:	b590      	push	{r4, r7, lr}
 80008b2:	b087      	sub	sp, #28
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4604      	mov	r4, r0
 80008b8:	4608      	mov	r0, r1
 80008ba:	4611      	mov	r1, r2
 80008bc:	461a      	mov	r2, r3
 80008be:	4623      	mov	r3, r4
 80008c0:	73fb      	strb	r3, [r7, #15]
 80008c2:	4603      	mov	r3, r0
 80008c4:	81bb      	strh	r3, [r7, #12]
 80008c6:	460b      	mov	r3, r1
 80008c8:	73bb      	strb	r3, [r7, #14]
 80008ca:	4613      	mov	r3, r2
 80008cc:	72fb      	strb	r3, [r7, #11]
	strip_num_e strip_num = ws2812_convert_strip_bit_to_strip_num(strip_bit);
 80008ce:	7bfb      	ldrb	r3, [r7, #15]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff ff89 	bl	80007e8 <ws2812_convert_strip_bit_to_strip_num>
 80008d6:	4603      	mov	r3, r0
 80008d8:	75fb      	strb	r3, [r7, #23]
    (gp_ws28128b_strip[strip_num] + led_num)->red = red * g_max_current_ratio;
 80008da:	7bbb      	ldrb	r3, [r7, #14]
 80008dc:	ee07 3a90 	vmov	s15, r3
 80008e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008e4:	4b26      	ldr	r3, [pc, #152]	; (8000980 <ws2812b_set_led+0xd0>)
 80008e6:	edd3 7a00 	vldr	s15, [r3]
 80008ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008ee:	7dfb      	ldrb	r3, [r7, #23]
 80008f0:	4a24      	ldr	r2, [pc, #144]	; (8000984 <ws2812b_set_led+0xd4>)
 80008f2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80008f6:	89ba      	ldrh	r2, [r7, #12]
 80008f8:	4613      	mov	r3, r2
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	4413      	add	r3, r2
 80008fe:	440b      	add	r3, r1
 8000900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000904:	edc7 7a01 	vstr	s15, [r7, #4]
 8000908:	793a      	ldrb	r2, [r7, #4]
 800090a:	b2d2      	uxtb	r2, r2
 800090c:	701a      	strb	r2, [r3, #0]
    (gp_ws28128b_strip[strip_num] + led_num)->green = green * g_max_current_ratio;
 800090e:	7afb      	ldrb	r3, [r7, #11]
 8000910:	ee07 3a90 	vmov	s15, r3
 8000914:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000918:	4b19      	ldr	r3, [pc, #100]	; (8000980 <ws2812b_set_led+0xd0>)
 800091a:	edd3 7a00 	vldr	s15, [r3]
 800091e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000922:	7dfb      	ldrb	r3, [r7, #23]
 8000924:	4a17      	ldr	r2, [pc, #92]	; (8000984 <ws2812b_set_led+0xd4>)
 8000926:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800092a:	89ba      	ldrh	r2, [r7, #12]
 800092c:	4613      	mov	r3, r2
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	4413      	add	r3, r2
 8000932:	440b      	add	r3, r1
 8000934:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000938:	edc7 7a01 	vstr	s15, [r7, #4]
 800093c:	793a      	ldrb	r2, [r7, #4]
 800093e:	b2d2      	uxtb	r2, r2
 8000940:	705a      	strb	r2, [r3, #1]
    (gp_ws28128b_strip[strip_num] + led_num)->blue = blue * g_max_current_ratio;
 8000942:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000946:	ee07 3a90 	vmov	s15, r3
 800094a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <ws2812b_set_led+0xd0>)
 8000950:	edd3 7a00 	vldr	s15, [r3]
 8000954:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000958:	7dfb      	ldrb	r3, [r7, #23]
 800095a:	4a0a      	ldr	r2, [pc, #40]	; (8000984 <ws2812b_set_led+0xd4>)
 800095c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000960:	89ba      	ldrh	r2, [r7, #12]
 8000962:	4613      	mov	r3, r2
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	4413      	add	r3, r2
 8000968:	440b      	add	r3, r1
 800096a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800096e:	edc7 7a01 	vstr	s15, [r7, #4]
 8000972:	793a      	ldrb	r2, [r7, #4]
 8000974:	b2d2      	uxtb	r2, r2
 8000976:	709a      	strb	r2, [r3, #2]
}
 8000978:	bf00      	nop
 800097a:	371c      	adds	r7, #28
 800097c:	46bd      	mov	sp, r7
 800097e:	bd90      	pop	{r4, r7, pc}
 8000980:	20000000 	.word	0x20000000
 8000984:	200009fc 	.word	0x200009fc

08000988 <ws2812b_fill_pwm_buffer_strip_one>:



#if defined(STRIP_1_LENGTH)
void ws2812b_fill_pwm_buffer_strip_one(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
    uint32_t color = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
    uint32_t strip_size = STRIP_1_LENGTH;
 8000992:	f44f 731f 	mov.w	r3, #636	; 0x27c
 8000996:	60bb      	str	r3, [r7, #8]
    uint32_t strip_pwm_offset = ws2812_get_pwm_strip_offset(STRIP_BIT_1);
 8000998:	2001      	movs	r0, #1
 800099a:	f7ff ff33 	bl	8000804 <ws2812_get_pwm_strip_offset>
 800099e:	4603      	mov	r3, r0
 80009a0:	607b      	str	r3, [r7, #4]
    while (!gb_dma_cmplt_strip_2)
 80009a2:	e002      	b.n	80009aa <ws2812b_fill_pwm_buffer_strip_one+0x22>
    {
        osDelay(1);
 80009a4:	2001      	movs	r0, #1
 80009a6:	f000 fd21 	bl	80013ec <osDelay>
    while (!gb_dma_cmplt_strip_2)
 80009aa:	4b44      	ldr	r3, [pc, #272]	; (8000abc <ws2812b_fill_pwm_buffer_strip_one+0x134>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	f083 0301 	eor.w	r3, r3, #1
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d1f5      	bne.n	80009a4 <ws2812b_fill_pwm_buffer_strip_one+0x1c>
    }
    for (uint16_t iii = 0; iii < strip_size; iii++)
 80009b8:	2300      	movs	r3, #0
 80009ba:	82fb      	strh	r3, [r7, #22]
 80009bc:	e046      	b.n	8000a4c <ws2812b_fill_pwm_buffer_strip_one+0xc4>
    {
        color = (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->green) << 16) | \
 80009be:	4b40      	ldr	r3, [pc, #256]	; (8000ac0 <ws2812b_fill_pwm_buffer_strip_one+0x138>)
 80009c0:	6819      	ldr	r1, [r3, #0]
 80009c2:	8afa      	ldrh	r2, [r7, #22]
 80009c4:	4613      	mov	r3, r2
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	4413      	add	r3, r2
 80009ca:	440b      	add	r3, r1
 80009cc:	785b      	ldrb	r3, [r3, #1]
 80009ce:	0419      	lsls	r1, r3, #16
                                (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->red) << 8) | \
 80009d0:	4b3b      	ldr	r3, [pc, #236]	; (8000ac0 <ws2812b_fill_pwm_buffer_strip_one+0x138>)
 80009d2:	6818      	ldr	r0, [r3, #0]
 80009d4:	8afa      	ldrh	r2, [r7, #22]
 80009d6:	4613      	mov	r3, r2
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	4413      	add	r3, r2
 80009dc:	4403      	add	r3, r0
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	021b      	lsls	r3, r3, #8
        color = (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->green) << 16) | \
 80009e2:	4319      	orrs	r1, r3
                                (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->blue));
 80009e4:	4b36      	ldr	r3, [pc, #216]	; (8000ac0 <ws2812b_fill_pwm_buffer_strip_one+0x138>)
 80009e6:	6818      	ldr	r0, [r3, #0]
 80009e8:	8afa      	ldrh	r2, [r7, #22]
 80009ea:	4613      	mov	r3, r2
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	4413      	add	r3, r2
 80009f0:	4403      	add	r3, r0
 80009f2:	789b      	ldrb	r3, [r3, #2]
                                (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->red) << 8) | \
 80009f4:	430b      	orrs	r3, r1
        color = (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->green) << 16) | \
 80009f6:	60fb      	str	r3, [r7, #12]
        for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 80009f8:	2300      	movs	r3, #0
 80009fa:	757b      	strb	r3, [r7, #21]
 80009fc:	e020      	b.n	8000a40 <ws2812b_fill_pwm_buffer_strip_one+0xb8>
        {
            gp_pwm_data_fill[strip_pwm_offset + (iii * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + yyy] = (color & (1 << (23 - yyy))) ? (uint16_t)(WS2812B_BIT_SET_CYCLES + 1) : (uint16_t)WS2812B_BIT_RESET_CYCLES;
 80009fe:	7d7b      	ldrb	r3, [r7, #21]
 8000a00:	f1c3 0317 	rsb	r3, r3, #23
 8000a04:	2201      	movs	r2, #1
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	4013      	ands	r3, r2
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <ws2812b_fill_pwm_buffer_strip_one+0x90>
 8000a14:	2028      	movs	r0, #40	; 0x28
 8000a16:	e000      	b.n	8000a1a <ws2812b_fill_pwm_buffer_strip_one+0x92>
 8000a18:	2014      	movs	r0, #20
 8000a1a:	4b2a      	ldr	r3, [pc, #168]	; (8000ac4 <ws2812b_fill_pwm_buffer_strip_one+0x13c>)
 8000a1c:	6819      	ldr	r1, [r3, #0]
 8000a1e:	8afa      	ldrh	r2, [r7, #22]
 8000a20:	4613      	mov	r3, r2
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	4413      	add	r3, r2
 8000a26:	00db      	lsls	r3, r3, #3
 8000a28:	461a      	mov	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	441a      	add	r2, r3
 8000a2e:	7d7b      	ldrb	r3, [r7, #21]
 8000a30:	4413      	add	r3, r2
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	440b      	add	r3, r1
 8000a36:	4602      	mov	r2, r0
 8000a38:	801a      	strh	r2, [r3, #0]
        for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 8000a3a:	7d7b      	ldrb	r3, [r7, #21]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	757b      	strb	r3, [r7, #21]
 8000a40:	7d7b      	ldrb	r3, [r7, #21]
 8000a42:	2b17      	cmp	r3, #23
 8000a44:	d9db      	bls.n	80009fe <ws2812b_fill_pwm_buffer_strip_one+0x76>
    for (uint16_t iii = 0; iii < strip_size; iii++)
 8000a46:	8afb      	ldrh	r3, [r7, #22]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	82fb      	strh	r3, [r7, #22]
 8000a4c:	8afb      	ldrh	r3, [r7, #22]
 8000a4e:	68ba      	ldr	r2, [r7, #8]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d8b4      	bhi.n	80009be <ws2812b_fill_pwm_buffer_strip_one+0x36>
        }
    }
    for (uint16_t iii = 0; iii < WS2812B_RESET_TIME_CYCLES; iii++)
 8000a54:	2300      	movs	r3, #0
 8000a56:	827b      	strh	r3, [r7, #18]
 8000a58:	e012      	b.n	8000a80 <ws2812b_fill_pwm_buffer_strip_one+0xf8>
    {
        gp_pwm_data_fill[(strip_pwm_offset + (strip_size * BITS_PER_BYTE * sizeof(ws2812b_led_t))) + iii] = 0;
 8000a5a:	4b1a      	ldr	r3, [pc, #104]	; (8000ac4 <ws2812b_fill_pwm_buffer_strip_one+0x13c>)
 8000a5c:	6819      	ldr	r1, [r3, #0]
 8000a5e:	68ba      	ldr	r2, [r7, #8]
 8000a60:	4613      	mov	r3, r2
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	4413      	add	r3, r2
 8000a66:	00db      	lsls	r3, r3, #3
 8000a68:	461a      	mov	r2, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	441a      	add	r2, r3
 8000a6e:	8a7b      	ldrh	r3, [r7, #18]
 8000a70:	4413      	add	r3, r2
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	440b      	add	r3, r1
 8000a76:	2200      	movs	r2, #0
 8000a78:	801a      	strh	r2, [r3, #0]
    for (uint16_t iii = 0; iii < WS2812B_RESET_TIME_CYCLES; iii++)
 8000a7a:	8a7b      	ldrh	r3, [r7, #18]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	827b      	strh	r3, [r7, #18]
 8000a80:	8a7b      	ldrh	r3, [r7, #18]
 8000a82:	ee07 3a90 	vmov	s15, r3
 8000a86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a8a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000ac8 <ws2812b_fill_pwm_buffer_strip_one+0x140>
 8000a8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a96:	d4e0      	bmi.n	8000a5a <ws2812b_fill_pwm_buffer_strip_one+0xd2>
    }
    gb_dma_cmplt_strip_1 = false;
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <ws2812b_fill_pwm_buffer_strip_one+0x144>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_1, (uint32_t *)(gp_pwm_data_fill + strip_pwm_offset), (STRIP_1_LENGTH * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + WS2812B_RESET_TIME_CYCLES);
 8000a9e:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <ws2812b_fill_pwm_buffer_strip_one+0x13c>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	441a      	add	r2, r3
 8000aa8:	f244 7358 	movw	r3, #18264	; 0x4758
 8000aac:	2100      	movs	r1, #0
 8000aae:	4808      	ldr	r0, [pc, #32]	; (8000ad0 <ws2812b_fill_pwm_buffer_strip_one+0x148>)
 8000ab0:	f005 fd06 	bl	80064c0 <HAL_TIM_PWM_Start_DMA>
}
 8000ab4:	bf00      	nop
 8000ab6:	3718      	adds	r7, #24
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000086 	.word	0x20000086
 8000ac0:	200009fc 	.word	0x200009fc
 8000ac4:	200009f8 	.word	0x200009f8
 8000ac8:	453b8000 	.word	0x453b8000
 8000acc:	20000085 	.word	0x20000085
 8000ad0:	20002544 	.word	0x20002544

08000ad4 <ws2812b_init>:


uint32_t g_size = 0;

void ws2812b_init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0

#if defined(STRIP_1_LENGTH)
	gp_ws28128b_strip[STRIP_NUM_1] = g_strip_1;
 8000ada:	4b31      	ldr	r3, [pc, #196]	; (8000ba0 <ws2812b_init+0xcc>)
 8000adc:	4a31      	ldr	r2, [pc, #196]	; (8000ba4 <ws2812b_init+0xd0>)
 8000ade:	601a      	str	r2, [r3, #0]
#endif
#if defined(STRIP_4_LENGTH)
	gp_ws28128b_strip[STRIP_NUM_4] = g_strip_4;
#endif

	uint8_t num_strips = NUM_STRIPS;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	70fb      	strb	r3, [r7, #3]
	for (int iii = 0; iii < NUM_STRIPS; iii++) g_all_strip_mask |= 1 << iii;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	e00f      	b.n	8000b0a <ws2812b_init+0x36>
 8000aea:	2201      	movs	r2, #1
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	b21a      	sxth	r2, r3
 8000af4:	4b2c      	ldr	r3, [pc, #176]	; (8000ba8 <ws2812b_init+0xd4>)
 8000af6:	881b      	ldrh	r3, [r3, #0]
 8000af8:	b21b      	sxth	r3, r3
 8000afa:	4313      	orrs	r3, r2
 8000afc:	b21b      	sxth	r3, r3
 8000afe:	b29a      	uxth	r2, r3
 8000b00:	4b29      	ldr	r3, [pc, #164]	; (8000ba8 <ws2812b_init+0xd4>)
 8000b02:	801a      	strh	r2, [r3, #0]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3301      	adds	r3, #1
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	ddec      	ble.n	8000aea <ws2812b_init+0x16>
	switch (num_strips)
 8000b10:	78fb      	ldrb	r3, [r7, #3]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d110      	bne.n	8000b38 <ws2812b_init+0x64>
		case 2:
			g_num_leds += STRIP_2_LENGTH;
			if (STRIP_2_LENGTH > g_max_strip_length) g_max_strip_length = STRIP_2_LENGTH;
#endif
		case 1:
			g_num_leds += STRIP_1_LENGTH;
 8000b16:	4b25      	ldr	r3, [pc, #148]	; (8000bac <ws2812b_init+0xd8>)
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8000b1e:	b29a      	uxth	r2, r3
 8000b20:	4b22      	ldr	r3, [pc, #136]	; (8000bac <ws2812b_init+0xd8>)
 8000b22:	801a      	strh	r2, [r3, #0]
			if (STRIP_1_LENGTH > g_max_strip_length) g_max_strip_length = STRIP_1_LENGTH;
 8000b24:	4b22      	ldr	r3, [pc, #136]	; (8000bb0 <ws2812b_init+0xdc>)
 8000b26:	881b      	ldrh	r3, [r3, #0]
 8000b28:	f5b3 7f1f 	cmp.w	r3, #636	; 0x27c
 8000b2c:	d203      	bcs.n	8000b36 <ws2812b_init+0x62>
 8000b2e:	4b20      	ldr	r3, [pc, #128]	; (8000bb0 <ws2812b_init+0xdc>)
 8000b30:	f44f 721f 	mov.w	r2, #636	; 0x27c
 8000b34:	801a      	strh	r2, [r3, #0]
		break;
 8000b36:	bf00      	nop
	}
    gp_pwm_data_fill = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
 8000b38:	4b1c      	ldr	r3, [pc, #112]	; (8000bac <ws2812b_init+0xd8>)
 8000b3a:	881b      	ldrh	r3, [r3, #0]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4613      	mov	r3, r2
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	4413      	add	r3, r2
 8000b44:	00db      	lsls	r3, r3, #3
 8000b46:	ee07 3a90 	vmov	s15, r3
 8000b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b4e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000bb4 <ws2812b_init+0xe0>
 8000b52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b5a:	ee17 0a90 	vmov	r0, s15
 8000b5e:	f008 ff7f 	bl	8009a60 <malloc>
 8000b62:	4603      	mov	r3, r0
 8000b64:	461a      	mov	r2, r3
 8000b66:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <ws2812b_init+0xe4>)
 8000b68:	601a      	str	r2, [r3, #0]
    //gp_pwm_data_ping = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
    //gp_pwm_data_pong = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
    g_size = (sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES);
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <ws2812b_init+0xd8>)
 8000b6c:	881b      	ldrh	r3, [r3, #0]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	4613      	mov	r3, r2
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	4413      	add	r3, r2
 8000b76:	00db      	lsls	r3, r3, #3
 8000b78:	ee07 3a90 	vmov	s15, r3
 8000b7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b80:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000bb4 <ws2812b_init+0xe0>
 8000b84:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b8c:	ee17 2a90 	vmov	r2, s15
 8000b90:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <ws2812b_init+0xe8>)
 8000b92:	601a      	str	r2, [r3, #0]
    //gp_pwm_data_fill = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_max_strip_length) + WS2812B_RESET_TIME_CYCLES);
	current_monitor_init();
 8000b94:	f7ff fd0c 	bl	80005b0 <current_monitor_init>
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	200009fc 	.word	0x200009fc
 8000ba4:	2000027c 	.word	0x2000027c
 8000ba8:	200009f2 	.word	0x200009f2
 8000bac:	200009f0 	.word	0x200009f0
 8000bb0:	200009f4 	.word	0x200009f4
 8000bb4:	453b8000 	.word	0x453b8000
 8000bb8:	200009f8 	.word	0x200009f8
 8000bbc:	20000a64 	.word	0x20000a64

08000bc0 <ws2812b_show_strip_one>:


void ws2812b_show_strip_one(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
    ws2812b_fill_pwm_buffer_strip_one();
 8000bc4:	f7ff fee0 	bl	8000988 <ws2812b_fill_pwm_buffer_strip_one>
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <uart_access_write_block_esp8266>:
	uart_access_hal_write_byte(uart_config_esp8266_handle(), data);
}


void uart_access_write_block_esp8266(uint8_t* data, uint16_t len)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	807b      	strh	r3, [r7, #2]
	uart_access_hal_write_block(uart_config_esp8266_handle(), data, len);
 8000bd8:	f008 f90a 	bl	8008df0 <uart_config_esp8266_handle>
 8000bdc:	887b      	ldrh	r3, [r7, #2]
 8000bde:	461a      	mov	r2, r3
 8000be0:	6879      	ldr	r1, [r7, #4]
 8000be2:	f007 ffe5 	bl	8008bb0 <uart_access_hal_write_block>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <uart_access_read_block_esp8266>:
	uart_access_hal_read_byte(uart_config_esp8266_handle(), buf);
}


void uart_access_read_block_esp8266(uint8_t* buf, uint16_t len)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b082      	sub	sp, #8
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	807b      	strh	r3, [r7, #2]
	uart_access_hal_read_block(uart_config_esp8266_handle(), buf, len);
 8000bfa:	f008 f8f9 	bl	8008df0 <uart_config_esp8266_handle>
 8000bfe:	887b      	ldrh	r3, [r7, #2]
 8000c00:	461a      	mov	r2, r3
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	f007 ffea 	bl	8008bdc <uart_access_hal_read_block>
}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <task_led_ctrl_button_to_isr>:
    return g_animate_led_interrupt;
}


isr_e task_led_ctrl_button_to_isr(const board_init_push_buttons_e button)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]
    isr_e return_val;
    switch (button)
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	2b03      	cmp	r3, #3
 8000c1e:	d817      	bhi.n	8000c50 <task_led_ctrl_button_to_isr+0x40>
 8000c20:	a201      	add	r2, pc, #4	; (adr r2, 8000c28 <task_led_ctrl_button_to_isr+0x18>)
 8000c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c26:	bf00      	nop
 8000c28:	08000c39 	.word	0x08000c39
 8000c2c:	08000c3f 	.word	0x08000c3f
 8000c30:	08000c45 	.word	0x08000c45
 8000c34:	08000c4b 	.word	0x08000c4b
    {
        case PUSH_BUTTON_A:
            return_val = ISR_SPEED;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	73fb      	strb	r3, [r7, #15]
        break;
 8000c3c:	e009      	b.n	8000c52 <task_led_ctrl_button_to_isr+0x42>
        case PUSH_BUTTON_B:
            return_val = ISR_STATE;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	73fb      	strb	r3, [r7, #15]
        break;
 8000c42:	e006      	b.n	8000c52 <task_led_ctrl_button_to_isr+0x42>
        case PUSH_BUTTON_C:
            return_val = ISR_COLOR;
 8000c44:	2302      	movs	r3, #2
 8000c46:	73fb      	strb	r3, [r7, #15]
        break;
 8000c48:	e003      	b.n	8000c52 <task_led_ctrl_button_to_isr+0x42>
        case PUSH_BUTTON_D:
            return_val = ISR_PAUSE;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	73fb      	strb	r3, [r7, #15]
        break;
 8000c4e:	e000      	b.n	8000c52 <task_led_ctrl_button_to_isr+0x42>
        default: // do nothing!
        break;
 8000c50:	bf00      	nop
    }
    return return_val;
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <task_button_press_ctrl_set_interrupt_flag>:


void task_button_press_ctrl_set_interrupt_flag(const isr_e src)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]
    g_animate_led_interrupt = true;
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <task_button_press_ctrl_set_interrupt_flag+0x24>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	701a      	strb	r2, [r3, #0]
    g_interrupt_flag[src] = true;
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	4a05      	ldr	r2, [pc, #20]	; (8000c88 <task_button_press_ctrl_set_interrupt_flag+0x28>)
 8000c74:	2101      	movs	r1, #1
 8000c76:	54d1      	strb	r1, [r2, r3]
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	20000a8b 	.word	0x20000a8b
 8000c88:	20000a8c 	.word	0x20000a8c

08000c8c <task_button_press>:
    task_button_press_major_change = false;
}


void task_button_press(void *argument)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
    uint32_t button_pressed_bit = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	60bb      	str	r3, [r7, #8]
    uint32_t timestamp_diff = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60fb      	str	r3, [r7, #12]
    color_hex_code_e color = COLOR_HEX_BLACK;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
    IRQn_Type irq_type = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	74fb      	strb	r3, [r7, #19]
    while (1)
    {
        xTaskNotifyWait(0, button_pressed_bit, &button_pressed_bit, portMAX_DELAY);
 8000ca4:	68b9      	ldr	r1, [r7, #8]
 8000ca6:	f107 0208 	add.w	r2, r7, #8
 8000caa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f002 f848 	bl	8002d44 <xTaskNotifyWait>
#if !defined(BOARD_SPUDGLO_V5)
        HAL_GPIO_WritePin(PIN_PORT_B, PIN_INT_LVL_EN, GPIO_PIN_RESET);
        osDelay(700);
        HAL_GPIO_WritePin(PIN_PORT_B, PIN_INT_LVL_EN, GPIO_PIN_SET);
#endif
        timestamp_diff = g_button_press_timestamp[(board_init_push_buttons_e) button_pressed_bit][TIMESTAMP_CURRENT] - \
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4b84      	ldr	r3, [pc, #528]	; (8000ecc <task_button_press+0x240>)
 8000cbc:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
                        g_button_press_timestamp[(board_init_push_buttons_e)button_pressed_bit][TIMESTAMP_PREVIOUS];
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	4981      	ldr	r1, [pc, #516]	; (8000ecc <task_button_press+0x240>)
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	440b      	add	r3, r1
 8000cca:	685b      	ldr	r3, [r3, #4]
        timestamp_diff = g_button_press_timestamp[(board_init_push_buttons_e) button_pressed_bit][TIMESTAMP_CURRENT] - \
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	60fb      	str	r3, [r7, #12]
        if (timestamp_diff < SWITCH_FAST_PRESS_TIME_MILLISECONDS) fast_press_count++;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cd6:	d206      	bcs.n	8000ce6 <task_button_press+0x5a>
 8000cd8:	4b7d      	ldr	r3, [pc, #500]	; (8000ed0 <task_button_press+0x244>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	4b7b      	ldr	r3, [pc, #492]	; (8000ed0 <task_button_press+0x244>)
 8000ce2:	701a      	strb	r2, [r3, #0]
 8000ce4:	e002      	b.n	8000cec <task_button_press+0x60>
        else fast_press_count = 0;
 8000ce6:	4b7a      	ldr	r3, [pc, #488]	; (8000ed0 <task_button_press+0x244>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
        task_button_press_ctrl_set_interrupt_flag(task_led_ctrl_button_to_isr((board_init_push_buttons_e) button_pressed_bit));
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff8d 	bl	8000c10 <task_led_ctrl_button_to_isr>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ffb1 	bl	8000c60 <task_button_press_ctrl_set_interrupt_flag>
        if (fast_press_count >= (SWITCH_HISTORY_DEPTH-1))
 8000cfe:	4b74      	ldr	r3, [pc, #464]	; (8000ed0 <task_button_press+0x244>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	2b03      	cmp	r3, #3
 8000d04:	d975      	bls.n	8000df2 <task_button_press+0x166>
        {
            task_button_press_major_change = true;
 8000d06:	4b73      	ldr	r3, [pc, #460]	; (8000ed4 <task_button_press+0x248>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	701a      	strb	r2, [r3, #0]
            fast_press_count = 0;
 8000d0c:	4b70      	ldr	r3, [pc, #448]	; (8000ed0 <task_button_press+0x244>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	701a      	strb	r2, [r3, #0]
            switch ((board_init_push_buttons_e) button_pressed_bit)
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	2b03      	cmp	r3, #3
 8000d18:	d841      	bhi.n	8000d9e <task_button_press+0x112>
 8000d1a:	a201      	add	r2, pc, #4	; (adr r2, 8000d20 <task_button_press+0x94>)
 8000d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d20:	08000d31 	.word	0x08000d31
 8000d24:	08000d4b 	.word	0x08000d4b
 8000d28:	08000d67 	.word	0x08000d67
 8000d2c:	08000d81 	.word	0x08000d81
            {
                case PUSH_BUTTON_A:
                    a_ok_count++;
 8000d30:	4b69      	ldr	r3, [pc, #420]	; (8000ed8 <task_button_press+0x24c>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	3301      	adds	r3, #1
 8000d36:	4a68      	ldr	r2, [pc, #416]	; (8000ed8 <task_button_press+0x24c>)
 8000d38:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_GREEN;
 8000d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d3e:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_A_IRQ;
 8000d40:	2308      	movs	r3, #8
 8000d42:	74fb      	strb	r3, [r7, #19]
                    task_led_ctrl_speed_reset();
 8000d44:	f000 f9a6 	bl	8001094 <task_led_ctrl_speed_reset>

                break;
 8000d48:	e02a      	b.n	8000da0 <task_button_press+0x114>
                case PUSH_BUTTON_B:
                    b_ok_count++;
 8000d4a:	4b64      	ldr	r3, [pc, #400]	; (8000edc <task_button_press+0x250>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	4a62      	ldr	r2, [pc, #392]	; (8000edc <task_button_press+0x250>)
 8000d52:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_BLUE;
 8000d54:	23ff      	movs	r3, #255	; 0xff
 8000d56:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_B_IRQ;
 8000d58:	2328      	movs	r3, #40	; 0x28
 8000d5a:	74fb      	strb	r3, [r7, #19]
                    task_led_ctrl_animate_iteration_reset();
 8000d5c:	f000 f9a6 	bl	80010ac <task_led_ctrl_animate_iteration_reset>
                    task_led_ctrl_animate_state_demo(); // enter demo state
 8000d60:	f000 f9ce 	bl	8001100 <task_led_ctrl_animate_state_demo>
                break;
 8000d64:	e01c      	b.n	8000da0 <task_button_press+0x114>
                case PUSH_BUTTON_C:
                    c_ok_count++;
 8000d66:	4b5e      	ldr	r3, [pc, #376]	; (8000ee0 <task_button_press+0x254>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	4a5c      	ldr	r2, [pc, #368]	; (8000ee0 <task_button_press+0x254>)
 8000d6e:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_RED;
 8000d70:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8000d74:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_C_IRQ;
 8000d76:	2317      	movs	r3, #23
 8000d78:	74fb      	strb	r3, [r7, #19]
                    // don't change iteration count.  Simply go to color demo mode.
                    task_led_ctrl_color_state_demo();
 8000d7a:	f000 f937 	bl	8000fec <task_led_ctrl_color_state_demo>
                break;
 8000d7e:	e00f      	b.n	8000da0 <task_button_press+0x114>
                case PUSH_BUTTON_D:
                    task_led_ctrl_brightness_adjust();
 8000d80:	f000 f8ce 	bl	8000f20 <task_led_ctrl_brightness_adjust>
                    task_led_ctrl_clear_pause();
 8000d84:	f000 f8fc 	bl	8000f80 <task_led_ctrl_clear_pause>
                    d_ok_count++;
 8000d88:	4b56      	ldr	r3, [pc, #344]	; (8000ee4 <task_button_press+0x258>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	4a55      	ldr	r2, [pc, #340]	; (8000ee4 <task_button_press+0x258>)
 8000d90:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_WHITE;
 8000d92:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000d96:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_D_IRQ;
 8000d98:	2306      	movs	r3, #6
 8000d9a:	74fb      	strb	r3, [r7, #19]
                break;
 8000d9c:	e000      	b.n	8000da0 <task_button_press+0x114>
                default:
                break;
 8000d9e:	bf00      	nop
            }
            for (uint8_t iii = 0; iii < 3; iii++)
 8000da0:	2300      	movs	r3, #0
 8000da2:	74bb      	strb	r3, [r7, #18]
 8000da4:	e012      	b.n	8000dcc <task_button_press+0x140>
            {
                animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, color);
 8000da6:	6979      	ldr	r1, [r7, #20]
 8000da8:	2001      	movs	r0, #1
 8000daa:	f7ff fcb7 	bl	800071c <animate_led_solid_custom_color>
                osDelay(500);
 8000dae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000db2:	f000 fb1b 	bl	80013ec <osDelay>
                animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLACK);
 8000db6:	2100      	movs	r1, #0
 8000db8:	2001      	movs	r0, #1
 8000dba:	f7ff fcaf 	bl	800071c <animate_led_solid_custom_color>
                osDelay(500);
 8000dbe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dc2:	f000 fb13 	bl	80013ec <osDelay>
            for (uint8_t iii = 0; iii < 3; iii++)
 8000dc6:	7cbb      	ldrb	r3, [r7, #18]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	74bb      	strb	r3, [r7, #18]
 8000dcc:	7cbb      	ldrb	r3, [r7, #18]
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d9e9      	bls.n	8000da6 <task_button_press+0x11a>
            }
            HAL_NVIC_SetPriority(irq_type, 24, 0);
 8000dd2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2118      	movs	r1, #24
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f003 fa6d 	bl	80042ba <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(irq_type);
 8000de0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f003 fa84 	bl	80042f2 <HAL_NVIC_EnableIRQ>
            task_button_press_major_change = false;
 8000dea:	4b3a      	ldr	r3, [pc, #232]	; (8000ed4 <task_button_press+0x248>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	701a      	strb	r2, [r3, #0]
 8000df0:	e758      	b.n	8000ca4 <task_button_press+0x18>
        }
        else
        {
            // no state change here
            task_button_press_ctrl_set_interrupt_flag(task_led_ctrl_button_to_isr((board_init_push_buttons_e) button_pressed_bit));
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff0a 	bl	8000c10 <task_led_ctrl_button_to_isr>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff ff2e 	bl	8000c60 <task_button_press_ctrl_set_interrupt_flag>
            switch ((board_init_push_buttons_e) button_pressed_bit)
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	2b03      	cmp	r3, #3
 8000e0a:	d85d      	bhi.n	8000ec8 <task_button_press+0x23c>
 8000e0c:	a201      	add	r2, pc, #4	; (adr r2, 8000e14 <task_button_press+0x188>)
 8000e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e12:	bf00      	nop
 8000e14:	08000e25 	.word	0x08000e25
 8000e18:	08000e45 	.word	0x08000e45
 8000e1c:	08000e79 	.word	0x08000e79
 8000e20:	08000ea9 	.word	0x08000ea9
            {
                case PUSH_BUTTON_A:
                    a_ok_count++;
 8000e24:	4b2c      	ldr	r3, [pc, #176]	; (8000ed8 <task_button_press+0x24c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	4a2b      	ldr	r2, [pc, #172]	; (8000ed8 <task_button_press+0x24c>)
 8000e2c:	6013      	str	r3, [r2, #0]
                    task_led_ctrl_speed_adjust();
 8000e2e:	f000 f919 	bl	8001064 <task_led_ctrl_speed_adjust>
                    HAL_NVIC_SetPriority(PUSH_BUTTON_A_IRQ, 24, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2118      	movs	r1, #24
 8000e36:	2008      	movs	r0, #8
 8000e38:	f003 fa3f 	bl	80042ba <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_A_IRQ);
 8000e3c:	2008      	movs	r0, #8
 8000e3e:	f003 fa58 	bl	80042f2 <HAL_NVIC_EnableIRQ>
                break;
 8000e42:	e042      	b.n	8000eca <task_button_press+0x23e>
                case PUSH_BUTTON_B:
                    b_ok_count++;
 8000e44:	4b25      	ldr	r3, [pc, #148]	; (8000edc <task_button_press+0x250>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	4a24      	ldr	r2, [pc, #144]	; (8000edc <task_button_press+0x250>)
 8000e4c:	6013      	str	r3, [r2, #0]
                    if (MASTER_LED_STATE_DEMO == task_led_ctrl_animate_state())
 8000e4e:	f000 f97f 	bl	8001150 <task_led_ctrl_animate_state>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d102      	bne.n	8000e5e <task_button_press+0x1d2>
                    {
                        task_led_ctrl_animate_state_fixed(); // animation count is auto cleared here.
 8000e58:	f000 f964 	bl	8001124 <task_led_ctrl_animate_state_fixed>
 8000e5c:	e003      	b.n	8000e66 <task_button_press+0x1da>
                    }
                    else
                    {
                        task_led_ctrl_animate_iteration_reset();
 8000e5e:	f000 f925 	bl	80010ac <task_led_ctrl_animate_iteration_reset>
                        task_led_ctrl_animate_adjust_state();
 8000e62:	f000 f92f 	bl	80010c4 <task_led_ctrl_animate_adjust_state>
                    }
                    HAL_NVIC_SetPriority(PUSH_BUTTON_B_IRQ, 24, 0);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2118      	movs	r1, #24
 8000e6a:	2028      	movs	r0, #40	; 0x28
 8000e6c:	f003 fa25 	bl	80042ba <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_B_IRQ);
 8000e70:	2028      	movs	r0, #40	; 0x28
 8000e72:	f003 fa3e 	bl	80042f2 <HAL_NVIC_EnableIRQ>
                break;
 8000e76:	e028      	b.n	8000eca <task_button_press+0x23e>
                case PUSH_BUTTON_C:
                    c_ok_count++;
 8000e78:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <task_button_press+0x254>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	4a18      	ldr	r2, [pc, #96]	; (8000ee0 <task_button_press+0x254>)
 8000e80:	6013      	str	r3, [r2, #0]
                    if (MASTER_COLOR_STATE_DEMO == task_led_ctrl_color_state())
 8000e82:	f000 f8a7 	bl	8000fd4 <task_led_ctrl_color_state>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d102      	bne.n	8000e92 <task_button_press+0x206>
                    {
                        task_led_ctrl_color_state_fixed();
 8000e8c:	f000 f8ba 	bl	8001004 <task_led_ctrl_color_state_fixed>
 8000e90:	e001      	b.n	8000e96 <task_button_press+0x20a>
                    }
                    else
                    {
                        task_led_ctrl_color_adjust();
 8000e92:	f000 f8c9 	bl	8001028 <task_led_ctrl_color_adjust>
                    }
                    HAL_NVIC_SetPriority(PUSH_BUTTON_C_IRQ, 24, 0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2118      	movs	r1, #24
 8000e9a:	2017      	movs	r0, #23
 8000e9c:	f003 fa0d 	bl	80042ba <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_C_IRQ);
 8000ea0:	2017      	movs	r0, #23
 8000ea2:	f003 fa26 	bl	80042f2 <HAL_NVIC_EnableIRQ>

                break;
 8000ea6:	e010      	b.n	8000eca <task_button_press+0x23e>
                case PUSH_BUTTON_D:
                    d_ok_count++;
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <task_button_press+0x258>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	3301      	adds	r3, #1
 8000eae:	4a0d      	ldr	r2, [pc, #52]	; (8000ee4 <task_button_press+0x258>)
 8000eb0:	6013      	str	r3, [r2, #0]
                    task_led_ctrl_pause();
 8000eb2:	f000 f871 	bl	8000f98 <task_led_ctrl_pause>
                    HAL_NVIC_SetPriority(PUSH_BUTTON_D_IRQ, 24, 0);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2118      	movs	r1, #24
 8000eba:	2006      	movs	r0, #6
 8000ebc:	f003 f9fd 	bl	80042ba <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_D_IRQ);
 8000ec0:	2006      	movs	r0, #6
 8000ec2:	f003 fa16 	bl	80042f2 <HAL_NVIC_EnableIRQ>
                break;
 8000ec6:	e000      	b.n	8000eca <task_button_press+0x23e>
                default:
                break;
 8000ec8:	bf00      	nop
        xTaskNotifyWait(0, button_pressed_bit, &button_pressed_bit, portMAX_DELAY);
 8000eca:	e6eb      	b.n	8000ca4 <task_button_press+0x18>
 8000ecc:	20000a68 	.word	0x20000a68
 8000ed0:	20000a88 	.word	0x20000a88
 8000ed4:	20000a89 	.word	0x20000a89
 8000ed8:	20000a90 	.word	0x20000a90
 8000edc:	20000a94 	.word	0x20000a94
 8000ee0:	20000a98 	.word	0x20000a98
 8000ee4:	20000a9c 	.word	0x20000a9c

08000ee8 <task_led_ctrl_strip_one>:
    if (MASTER_COLOR_STATE_DEMO == task_led_ctrl_color_state()) task_led_ctrl_color_random();
}

uint8_t g_data[2];
void task_led_ctrl_strip_one(void *argument)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]


	board_init_specific_esp8266_power_disable();
 8000ef0:	f008 fc86 	bl	8009800 <board_init_specific_esp8266_power_disable>
	osDelay(2000);
 8000ef4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ef8:	f000 fa78 	bl	80013ec <osDelay>
	board_init_specific_esp8266_power_enable();
 8000efc:	f008 fc60 	bl	80097c0 <board_init_specific_esp8266_power_enable>
	board_init_specific_esp8266_reset_deassert();
 8000f00:	f008 fc9e 	bl	8009840 <board_init_specific_esp8266_reset_deassert>
	osDelay(2000);
 8000f04:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f08:	f000 fa70 	bl	80013ec <osDelay>
	esp8266_write_command(ESP8266_AT_STARTUP);
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	f000 f93b 	bl	8001188 <esp8266_write_command>
	uart_access_read_block_esp8266(g_data, 2);
 8000f12:	2102      	movs	r1, #2
 8000f14:	4801      	ldr	r0, [pc, #4]	; (8000f1c <task_led_ctrl_strip_one+0x34>)
 8000f16:	f7ff fe6a 	bl	8000bee <uart_access_read_block_esp8266>
	while(1);
 8000f1a:	e7fe      	b.n	8000f1a <task_led_ctrl_strip_one+0x32>
 8000f1c:	20000aa8 	.word	0x20000aa8

08000f20 <task_led_ctrl_brightness_adjust>:
    }
}


void task_led_ctrl_brightness_adjust(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
    if (LED_BRIGHTNESS_FIRST == g_led_brightness) g_led_brightness = LED_BRIGHTNESS_LAST;
 8000f24:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <task_led_ctrl_brightness_adjust+0x58>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d103      	bne.n	8000f34 <task_led_ctrl_brightness_adjust+0x14>
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <task_led_ctrl_brightness_adjust+0x58>)
 8000f2e:	2202      	movs	r2, #2
 8000f30:	701a      	strb	r2, [r3, #0]
 8000f32:	e005      	b.n	8000f40 <task_led_ctrl_brightness_adjust+0x20>
    else g_led_brightness = (led_brightness_e) (g_led_brightness - 1);
 8000f34:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <task_led_ctrl_brightness_adjust+0x58>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <task_led_ctrl_brightness_adjust+0x58>)
 8000f3e:	701a      	strb	r2, [r3, #0]
    switch (g_led_brightness)
 8000f40:	4b0d      	ldr	r3, [pc, #52]	; (8000f78 <task_led_ctrl_brightness_adjust+0x58>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d010      	beq.n	8000f6a <task_led_ctrl_brightness_adjust+0x4a>
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	dc13      	bgt.n	8000f74 <task_led_ctrl_brightness_adjust+0x54>
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d002      	beq.n	8000f56 <task_led_ctrl_brightness_adjust+0x36>
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d005      	beq.n	8000f60 <task_led_ctrl_brightness_adjust+0x40>
        break;
        case LED_BRIGHTNESS_1_PERCENT:
            current_monitor_set(0.01f);
        break;
    }
}
 8000f54:	e00e      	b.n	8000f74 <task_led_ctrl_brightness_adjust+0x54>
            current_monitor_set(1.0f);
 8000f56:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000f5a:	f7ff fb07 	bl	800056c <current_monitor_set>
        break;
 8000f5e:	e009      	b.n	8000f74 <task_led_ctrl_brightness_adjust+0x54>
            current_monitor_set(0.25f);
 8000f60:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8000f64:	f7ff fb02 	bl	800056c <current_monitor_set>
        break;
 8000f68:	e004      	b.n	8000f74 <task_led_ctrl_brightness_adjust+0x54>
            current_monitor_set(0.01f);
 8000f6a:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8000f7c <task_led_ctrl_brightness_adjust+0x5c>
 8000f6e:	f7ff fafd 	bl	800056c <current_monitor_set>
        break;
 8000f72:	bf00      	nop
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000aa3 	.word	0x20000aa3
 8000f7c:	3c23d70a 	.word	0x3c23d70a

08000f80 <task_led_ctrl_clear_pause>:


void task_led_ctrl_clear_pause(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
    g_animate_led_pause_flag = false;
 8000f84:	4b03      	ldr	r3, [pc, #12]	; (8000f94 <task_led_ctrl_clear_pause+0x14>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	20000a8a 	.word	0x20000a8a

08000f98 <task_led_ctrl_pause>:


void task_led_ctrl_pause(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
    static uint8_t flip_or_flop = 1;
    if (flip_or_flop) g_animate_led_pause_flag = true;
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <task_led_ctrl_pause+0x34>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d003      	beq.n	8000fac <task_led_ctrl_pause+0x14>
 8000fa4:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <task_led_ctrl_pause+0x38>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	701a      	strb	r2, [r3, #0]
 8000faa:	e002      	b.n	8000fb2 <task_led_ctrl_pause+0x1a>
    else g_animate_led_pause_flag = false;
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <task_led_ctrl_pause+0x38>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	701a      	strb	r2, [r3, #0]
    flip_or_flop ^= 1;
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <task_led_ctrl_pause+0x34>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	f083 0301 	eor.w	r3, r3, #1
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	4b03      	ldr	r3, [pc, #12]	; (8000fcc <task_led_ctrl_pause+0x34>)
 8000fbe:	701a      	strb	r2, [r3, #0]
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	20000007 	.word	0x20000007
 8000fd0:	20000a8a 	.word	0x20000a8a

08000fd4 <task_led_ctrl_color_state>:


master_color_state_e task_led_ctrl_color_state(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
    return g_master_color_state;
 8000fd8:	4b03      	ldr	r3, [pc, #12]	; (8000fe8 <task_led_ctrl_color_state+0x14>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	20000aa4 	.word	0x20000aa4

08000fec <task_led_ctrl_color_state_demo>:


void task_led_ctrl_color_state_demo(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
    g_master_color_state = MASTER_COLOR_STATE_DEMO;
 8000ff0:	4b03      	ldr	r3, [pc, #12]	; (8001000 <task_led_ctrl_color_state_demo+0x14>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	20000aa4 	.word	0x20000aa4

08001004 <task_led_ctrl_color_state_fixed>:


void task_led_ctrl_color_state_fixed(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
    g_master_color_state = MASTER_COLOR_STATE_FIXED;
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <task_led_ctrl_color_state_fixed+0x1c>)
 800100a:	2201      	movs	r2, #1
 800100c:	701a      	strb	r2, [r3, #0]
    g_led_color = COLORS_FIRST;
 800100e:	4b05      	ldr	r3, [pc, #20]	; (8001024 <task_led_ctrl_color_state_fixed+0x20>)
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	20000aa4 	.word	0x20000aa4
 8001024:	20000006 	.word	0x20000006

08001028 <task_led_ctrl_color_adjust>:
    g_led_color = COLORS_RED;
}


bool task_led_ctrl_color_adjust(void)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
    bool return_val = false;
 800102e:	2300      	movs	r3, #0
 8001030:	71fb      	strb	r3, [r7, #7]
    if (COLORS_LAST == g_led_color)
 8001032:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <task_led_ctrl_color_adjust+0x38>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b15      	cmp	r3, #21
 8001038:	d105      	bne.n	8001046 <task_led_ctrl_color_adjust+0x1e>
    {
        g_led_color = COLORS_FIRST;
 800103a:	4b09      	ldr	r3, [pc, #36]	; (8001060 <task_led_ctrl_color_adjust+0x38>)
 800103c:	2200      	movs	r2, #0
 800103e:	701a      	strb	r2, [r3, #0]
        return_val = true;
 8001040:	2301      	movs	r3, #1
 8001042:	71fb      	strb	r3, [r7, #7]
 8001044:	e005      	b.n	8001052 <task_led_ctrl_color_adjust+0x2a>
    }
    else g_led_color = (all_colors_e) (g_led_color + 1);
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <task_led_ctrl_color_adjust+0x38>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	3301      	adds	r3, #1
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4b04      	ldr	r3, [pc, #16]	; (8001060 <task_led_ctrl_color_adjust+0x38>)
 8001050:	701a      	strb	r2, [r3, #0]
    return return_val;
 8001052:	79fb      	ldrb	r3, [r7, #7]
}
 8001054:	4618      	mov	r0, r3
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	20000006 	.word	0x20000006

08001064 <task_led_ctrl_speed_adjust>:
    return speed_factor;
}


void task_led_ctrl_speed_adjust(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
    if (LED_SPEED_FIRST == g_led_speed) g_led_speed = LED_SPEED_LAST;
 8001068:	4b09      	ldr	r3, [pc, #36]	; (8001090 <task_led_ctrl_speed_adjust+0x2c>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d103      	bne.n	8001078 <task_led_ctrl_speed_adjust+0x14>
 8001070:	4b07      	ldr	r3, [pc, #28]	; (8001090 <task_led_ctrl_speed_adjust+0x2c>)
 8001072:	2204      	movs	r2, #4
 8001074:	701a      	strb	r2, [r3, #0]
    else g_led_speed = (led_speed_e) (g_led_speed - 1);
}
 8001076:	e005      	b.n	8001084 <task_led_ctrl_speed_adjust+0x20>
    else g_led_speed = (led_speed_e) (g_led_speed - 1);
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <task_led_ctrl_speed_adjust+0x2c>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	3b01      	subs	r3, #1
 800107e:	b2da      	uxtb	r2, r3
 8001080:	4b03      	ldr	r3, [pc, #12]	; (8001090 <task_led_ctrl_speed_adjust+0x2c>)
 8001082:	701a      	strb	r2, [r3, #0]
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20000aa2 	.word	0x20000aa2

08001094 <task_led_ctrl_speed_reset>:


void task_led_ctrl_speed_reset(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
    g_led_speed = LED_SPEED_1X;
 8001098:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <task_led_ctrl_speed_reset+0x14>)
 800109a:	2202      	movs	r2, #2
 800109c:	701a      	strb	r2, [r3, #0]
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	20000aa2 	.word	0x20000aa2

080010ac <task_led_ctrl_animate_iteration_reset>:
    return ((float)g_delay_in_animation_ms / task_led_ctrl_speed());
}


void task_led_ctrl_animate_iteration_reset(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
    g_animation_iterations = 0;
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <task_led_ctrl_animate_iteration_reset+0x14>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	20000aa5 	.word	0x20000aa5

080010c4 <task_led_ctrl_animate_adjust_state>:


bool task_led_ctrl_animate_adjust_state(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
    bool return_val = false;
 80010ca:	2300      	movs	r3, #0
 80010cc:	71fb      	strb	r3, [r7, #7]
    if (LED_STATE_LAST == g_led_state)
 80010ce:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <task_led_ctrl_animate_adjust_state+0x38>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b09      	cmp	r3, #9
 80010d4:	d105      	bne.n	80010e2 <task_led_ctrl_animate_adjust_state+0x1e>
    {
        g_led_state = LED_STATE_FIRST;
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <task_led_ctrl_animate_adjust_state+0x38>)
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
        return_val = true;
 80010dc:	2301      	movs	r3, #1
 80010de:	71fb      	strb	r3, [r7, #7]
 80010e0:	e005      	b.n	80010ee <task_led_ctrl_animate_adjust_state+0x2a>
    }
    else g_led_state = (led_state_e) (g_led_state + 1);
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <task_led_ctrl_animate_adjust_state+0x38>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	3301      	adds	r3, #1
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4b04      	ldr	r3, [pc, #16]	; (80010fc <task_led_ctrl_animate_adjust_state+0x38>)
 80010ec:	701a      	strb	r2, [r3, #0]
    return return_val;
 80010ee:	79fb      	ldrb	r3, [r7, #7]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	20000aa1 	.word	0x20000aa1

08001100 <task_led_ctrl_animate_state_demo>:


void task_led_ctrl_animate_state_demo(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
    g_master_led_state = MASTER_LED_STATE_DEMO;
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <task_led_ctrl_animate_state_demo+0x1c>)
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]
    g_animation_iterations = 0;
 800110a:	4b05      	ldr	r3, [pc, #20]	; (8001120 <task_led_ctrl_animate_state_demo+0x20>)
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	20000aa0 	.word	0x20000aa0
 8001120:	20000aa5 	.word	0x20000aa5

08001124 <task_led_ctrl_animate_state_fixed>:


void task_led_ctrl_animate_state_fixed(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
    g_master_led_state = MASTER_LED_STATE_FIXED;
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <task_led_ctrl_animate_state_fixed+0x20>)
 800112a:	2201      	movs	r2, #1
 800112c:	701a      	strb	r2, [r3, #0]
    g_led_state = LED_STATE_FIRST; // set first state
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <task_led_ctrl_animate_state_fixed+0x24>)
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]
    g_animation_iterations = 0;
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <task_led_ctrl_animate_state_fixed+0x28>)
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	20000aa0 	.word	0x20000aa0
 8001148:	20000aa1 	.word	0x20000aa1
 800114c:	20000aa5 	.word	0x20000aa5

08001150 <task_led_ctrl_animate_state>:


master_led_state_e task_led_ctrl_animate_state(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
    return g_master_led_state;
 8001154:	4b03      	ldr	r3, [pc, #12]	; (8001164 <task_led_ctrl_animate_state+0x14>)
 8001156:	781b      	ldrb	r3, [r3, #0]
}
 8001158:	4618      	mov	r0, r3
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	20000aa0 	.word	0x20000aa0

08001168 <esp8266_write_block>:

};


void esp8266_write_block(uint8_t* data, uint16_t len)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	807b      	strh	r3, [r7, #2]
	uart_access_write_block_esp8266(data, len);
 8001174:	887b      	ldrh	r3, [r7, #2]
 8001176:	4619      	mov	r1, r3
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff fd27 	bl	8000bcc <uart_access_write_block_esp8266>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <esp8266_write_command>:
	uart_access_read_block_esp8266(data, len);
}


void esp8266_write_command(esp8266_at_commands_e cmd)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
	esp8266_write_block((uint8_t *)esp8266_at_command_lookup[ESP8266_AT_STARTUP], sizeof(esp8266_at_command_lookup[ESP8266_AT_STARTUP]));
 8001192:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <esp8266_write_command+0x20>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2104      	movs	r1, #4
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ffe5 	bl	8001168 <esp8266_write_block>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000008 	.word	0x20000008

080011ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	6039      	str	r1, [r7, #0]
 80011b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	db0a      	blt.n	80011d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	490c      	ldr	r1, [pc, #48]	; (80011f8 <__NVIC_SetPriority+0x4c>)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	0112      	lsls	r2, r2, #4
 80011cc:	b2d2      	uxtb	r2, r2
 80011ce:	440b      	add	r3, r1
 80011d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d4:	e00a      	b.n	80011ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4908      	ldr	r1, [pc, #32]	; (80011fc <__NVIC_SetPriority+0x50>)
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	f003 030f 	and.w	r3, r3, #15
 80011e2:	3b04      	subs	r3, #4
 80011e4:	0112      	lsls	r2, r2, #4
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	440b      	add	r3, r1
 80011ea:	761a      	strb	r2, [r3, #24]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000e100 	.word	0xe000e100
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001204:	4b05      	ldr	r3, [pc, #20]	; (800121c <SysTick_Handler+0x1c>)
 8001206:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001208:	f001 fd10 	bl	8002c2c <xTaskGetSchedulerState>
 800120c:	4603      	mov	r3, r0
 800120e:	2b01      	cmp	r3, #1
 8001210:	d001      	beq.n	8001216 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001212:	f002 fc31 	bl	8003a78 <xPortSysTickHandler>
  }
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	e000e010 	.word	0xe000e010

08001220 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001224:	2100      	movs	r1, #0
 8001226:	f06f 0004 	mvn.w	r0, #4
 800122a:	f7ff ffbf 	bl	80011ac <__NVIC_SetPriority>
#endif
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800123a:	f3ef 8305 	mrs	r3, IPSR
 800123e:	603b      	str	r3, [r7, #0]
  return(result);
 8001240:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001246:	f06f 0305 	mvn.w	r3, #5
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	e00c      	b.n	8001268 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800124e:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <osKernelInitialize+0x44>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d105      	bne.n	8001262 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001256:	4b08      	ldr	r3, [pc, #32]	; (8001278 <osKernelInitialize+0x44>)
 8001258:	2201      	movs	r2, #1
 800125a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800125c:	2300      	movs	r3, #0
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	e002      	b.n	8001268 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001262:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001266:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001268:	687b      	ldr	r3, [r7, #4]
}
 800126a:	4618      	mov	r0, r3
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	20000aac 	.word	0x20000aac

0800127c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001282:	f3ef 8305 	mrs	r3, IPSR
 8001286:	603b      	str	r3, [r7, #0]
  return(result);
 8001288:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <osKernelStart+0x1a>
    stat = osErrorISR;
 800128e:	f06f 0305 	mvn.w	r3, #5
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	e010      	b.n	80012b8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001296:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <osKernelStart+0x48>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d109      	bne.n	80012b2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800129e:	f7ff ffbf 	bl	8001220 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80012a2:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <osKernelStart+0x48>)
 80012a4:	2202      	movs	r2, #2
 80012a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80012a8:	f001 f866 	bl	8002378 <vTaskStartScheduler>
      stat = osOK;
 80012ac:	2300      	movs	r3, #0
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	e002      	b.n	80012b8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80012b8:	687b      	ldr	r3, [r7, #4]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000aac 	.word	0x20000aac

080012c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08e      	sub	sp, #56	; 0x38
 80012cc:	af04      	add	r7, sp, #16
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80012d8:	f3ef 8305 	mrs	r3, IPSR
 80012dc:	617b      	str	r3, [r7, #20]
  return(result);
 80012de:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d17e      	bne.n	80013e2 <osThreadNew+0x11a>
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d07b      	beq.n	80013e2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80012ea:	2380      	movs	r3, #128	; 0x80
 80012ec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80012ee:	2318      	movs	r3, #24
 80012f0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80012f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012fa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d045      	beq.n	800138e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d002      	beq.n	8001310 <osThreadNew+0x48>
        name = attr->name;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d002      	beq.n	800131e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d008      	beq.n	8001336 <osThreadNew+0x6e>
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	2b38      	cmp	r3, #56	; 0x38
 8001328:	d805      	bhi.n	8001336 <osThreadNew+0x6e>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <osThreadNew+0x72>
        return (NULL);
 8001336:	2300      	movs	r3, #0
 8001338:	e054      	b.n	80013e4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	089b      	lsrs	r3, r3, #2
 8001348:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d00e      	beq.n	8001370 <osThreadNew+0xa8>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	2b5b      	cmp	r3, #91	; 0x5b
 8001358:	d90a      	bls.n	8001370 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800135e:	2b00      	cmp	r3, #0
 8001360:	d006      	beq.n	8001370 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d002      	beq.n	8001370 <osThreadNew+0xa8>
        mem = 1;
 800136a:	2301      	movs	r3, #1
 800136c:	61bb      	str	r3, [r7, #24]
 800136e:	e010      	b.n	8001392 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d10c      	bne.n	8001392 <osThreadNew+0xca>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d108      	bne.n	8001392 <osThreadNew+0xca>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d104      	bne.n	8001392 <osThreadNew+0xca>
          mem = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	61bb      	str	r3, [r7, #24]
 800138c:	e001      	b.n	8001392 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d110      	bne.n	80013ba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80013a0:	9202      	str	r2, [sp, #8]
 80013a2:	9301      	str	r3, [sp, #4]
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	6a3a      	ldr	r2, [r7, #32]
 80013ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013ae:	68f8      	ldr	r0, [r7, #12]
 80013b0:	f000 fe0c 	bl	8001fcc <xTaskCreateStatic>
 80013b4:	4603      	mov	r3, r0
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	e013      	b.n	80013e2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d110      	bne.n	80013e2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80013c0:	6a3b      	ldr	r3, [r7, #32]
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	f107 0310 	add.w	r3, r7, #16
 80013c8:	9301      	str	r3, [sp, #4]
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f000 fe57 	bl	8002086 <xTaskCreate>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d001      	beq.n	80013e2 <osThreadNew+0x11a>
            hTask = NULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80013e2:	693b      	ldr	r3, [r7, #16]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3728      	adds	r7, #40	; 0x28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80013f4:	f3ef 8305 	mrs	r3, IPSR
 80013f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80013fa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <osDelay+0x1c>
    stat = osErrorISR;
 8001400:	f06f 0305 	mvn.w	r3, #5
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	e007      	b.n	8001418 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001408:	2300      	movs	r3, #0
 800140a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d002      	beq.n	8001418 <osDelay+0x2c>
      vTaskDelay(ticks);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f000 ff7c 	bl	8002310 <vTaskDelay>
    }
  }

  return (stat);
 8001418:	68fb      	ldr	r3, [r7, #12]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4a07      	ldr	r2, [pc, #28]	; (8001450 <vApplicationGetIdleTaskMemory+0x2c>)
 8001434:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	4a06      	ldr	r2, [pc, #24]	; (8001454 <vApplicationGetIdleTaskMemory+0x30>)
 800143a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2280      	movs	r2, #128	; 0x80
 8001440:	601a      	str	r2, [r3, #0]
}
 8001442:	bf00      	nop
 8001444:	3714      	adds	r7, #20
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	20000ab0 	.word	0x20000ab0
 8001454:	20000b0c 	.word	0x20000b0c

08001458 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4a07      	ldr	r2, [pc, #28]	; (8001484 <vApplicationGetTimerTaskMemory+0x2c>)
 8001468:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	4a06      	ldr	r2, [pc, #24]	; (8001488 <vApplicationGetTimerTaskMemory+0x30>)
 800146e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001476:	601a      	str	r2, [r3, #0]
}
 8001478:	bf00      	nop
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	20000d0c 	.word	0x20000d0c
 8001488:	20000d68 	.word	0x20000d68

0800148c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f103 0208 	add.w	r2, r3, #8
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f103 0208 	add.w	r2, r3, #8
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f103 0208 	add.w	r2, r3, #8
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80014e6:	b480      	push	{r7}
 80014e8:	b085      	sub	sp, #20
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
 80014ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	1c5a      	adds	r2, r3, #1
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	601a      	str	r2, [r3, #0]
}
 8001522:	bf00      	nop
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800152e:	b480      	push	{r7}
 8001530:	b085      	sub	sp, #20
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
 8001536:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001544:	d103      	bne.n	800154e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	e00c      	b.n	8001568 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	3308      	adds	r3, #8
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	e002      	b.n	800155c <vListInsert+0x2e>
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	68ba      	ldr	r2, [r7, #8]
 8001564:	429a      	cmp	r2, r3
 8001566:	d2f6      	bcs.n	8001556 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	1c5a      	adds	r2, r3, #1
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	601a      	str	r2, [r3, #0]
}
 8001594:	bf00      	nop
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	6892      	ldr	r2, [r2, #8]
 80015b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	6852      	ldr	r2, [r2, #4]
 80015c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d103      	bne.n	80015d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	1e5a      	subs	r2, r3, #1
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d10a      	bne.n	800161e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800160c:	f383 8811 	msr	BASEPRI, r3
 8001610:	f3bf 8f6f 	isb	sy
 8001614:	f3bf 8f4f 	dsb	sy
 8001618:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800161a:	bf00      	nop
 800161c:	e7fe      	b.n	800161c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800161e:	f002 f999 	bl	8003954 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800162a:	68f9      	ldr	r1, [r7, #12]
 800162c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800162e:	fb01 f303 	mul.w	r3, r1, r3
 8001632:	441a      	add	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2200      	movs	r2, #0
 800163c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800164e:	3b01      	subs	r3, #1
 8001650:	68f9      	ldr	r1, [r7, #12]
 8001652:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001654:	fb01 f303 	mul.w	r3, r1, r3
 8001658:	441a      	add	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	22ff      	movs	r2, #255	; 0xff
 8001662:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	22ff      	movs	r2, #255	; 0xff
 800166a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d114      	bne.n	800169e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d01a      	beq.n	80016b2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	3310      	adds	r3, #16
 8001680:	4618      	mov	r0, r3
 8001682:	f001 f915 	bl	80028b0 <xTaskRemoveFromEventList>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d012      	beq.n	80016b2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <xQueueGenericReset+0xcc>)
 800168e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	f3bf 8f4f 	dsb	sy
 8001698:	f3bf 8f6f 	isb	sy
 800169c:	e009      	b.n	80016b2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	3310      	adds	r3, #16
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fef2 	bl	800148c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	3324      	adds	r3, #36	; 0x24
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff feed 	bl	800148c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80016b2:	f002 f97f 	bl	80039b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80016b6:	2301      	movs	r3, #1
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	e000ed04 	.word	0xe000ed04

080016c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08e      	sub	sp, #56	; 0x38
 80016c8:	af02      	add	r7, sp, #8
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
 80016d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d10a      	bne.n	80016ee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80016d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016dc:	f383 8811 	msr	BASEPRI, r3
 80016e0:	f3bf 8f6f 	isb	sy
 80016e4:	f3bf 8f4f 	dsb	sy
 80016e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80016ea:	bf00      	nop
 80016ec:	e7fe      	b.n	80016ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d10a      	bne.n	800170a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80016f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016f8:	f383 8811 	msr	BASEPRI, r3
 80016fc:	f3bf 8f6f 	isb	sy
 8001700:	f3bf 8f4f 	dsb	sy
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001706:	bf00      	nop
 8001708:	e7fe      	b.n	8001708 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d002      	beq.n	8001716 <xQueueGenericCreateStatic+0x52>
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <xQueueGenericCreateStatic+0x56>
 8001716:	2301      	movs	r3, #1
 8001718:	e000      	b.n	800171c <xQueueGenericCreateStatic+0x58>
 800171a:	2300      	movs	r3, #0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d10a      	bne.n	8001736 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8001720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001724:	f383 8811 	msr	BASEPRI, r3
 8001728:	f3bf 8f6f 	isb	sy
 800172c:	f3bf 8f4f 	dsb	sy
 8001730:	623b      	str	r3, [r7, #32]
}
 8001732:	bf00      	nop
 8001734:	e7fe      	b.n	8001734 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d102      	bne.n	8001742 <xQueueGenericCreateStatic+0x7e>
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <xQueueGenericCreateStatic+0x82>
 8001742:	2301      	movs	r3, #1
 8001744:	e000      	b.n	8001748 <xQueueGenericCreateStatic+0x84>
 8001746:	2300      	movs	r3, #0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d10a      	bne.n	8001762 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800174c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001750:	f383 8811 	msr	BASEPRI, r3
 8001754:	f3bf 8f6f 	isb	sy
 8001758:	f3bf 8f4f 	dsb	sy
 800175c:	61fb      	str	r3, [r7, #28]
}
 800175e:	bf00      	nop
 8001760:	e7fe      	b.n	8001760 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001762:	2350      	movs	r3, #80	; 0x50
 8001764:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	2b50      	cmp	r3, #80	; 0x50
 800176a:	d00a      	beq.n	8001782 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800176c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001770:	f383 8811 	msr	BASEPRI, r3
 8001774:	f3bf 8f6f 	isb	sy
 8001778:	f3bf 8f4f 	dsb	sy
 800177c:	61bb      	str	r3, [r7, #24]
}
 800177e:	bf00      	nop
 8001780:	e7fe      	b.n	8001780 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001782:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800178a:	2b00      	cmp	r3, #0
 800178c:	d00d      	beq.n	80017aa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800178e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001790:	2201      	movs	r2, #1
 8001792:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001796:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800179a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	4613      	mov	r3, r2
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	68b9      	ldr	r1, [r7, #8]
 80017a4:	68f8      	ldr	r0, [r7, #12]
 80017a6:	f000 f805 	bl	80017b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80017aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3730      	adds	r7, #48	; 0x30
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
 80017c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d103      	bne.n	80017d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	e002      	b.n	80017d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80017e2:	2101      	movs	r1, #1
 80017e4:	69b8      	ldr	r0, [r7, #24]
 80017e6:	f7ff ff05 	bl	80015f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	78fa      	ldrb	r2, [r7, #3]
 80017ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80017f2:	bf00      	nop
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08e      	sub	sp, #56	; 0x38
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
 8001808:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800180a:	2300      	movs	r3, #0
 800180c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001814:	2b00      	cmp	r3, #0
 8001816:	d10a      	bne.n	800182e <xQueueGenericSend+0x32>
	__asm volatile
 8001818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800181c:	f383 8811 	msr	BASEPRI, r3
 8001820:	f3bf 8f6f 	isb	sy
 8001824:	f3bf 8f4f 	dsb	sy
 8001828:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800182a:	bf00      	nop
 800182c:	e7fe      	b.n	800182c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d103      	bne.n	800183c <xQueueGenericSend+0x40>
 8001834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001838:	2b00      	cmp	r3, #0
 800183a:	d101      	bne.n	8001840 <xQueueGenericSend+0x44>
 800183c:	2301      	movs	r3, #1
 800183e:	e000      	b.n	8001842 <xQueueGenericSend+0x46>
 8001840:	2300      	movs	r3, #0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d10a      	bne.n	800185c <xQueueGenericSend+0x60>
	__asm volatile
 8001846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800184a:	f383 8811 	msr	BASEPRI, r3
 800184e:	f3bf 8f6f 	isb	sy
 8001852:	f3bf 8f4f 	dsb	sy
 8001856:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001858:	bf00      	nop
 800185a:	e7fe      	b.n	800185a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	2b02      	cmp	r3, #2
 8001860:	d103      	bne.n	800186a <xQueueGenericSend+0x6e>
 8001862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001866:	2b01      	cmp	r3, #1
 8001868:	d101      	bne.n	800186e <xQueueGenericSend+0x72>
 800186a:	2301      	movs	r3, #1
 800186c:	e000      	b.n	8001870 <xQueueGenericSend+0x74>
 800186e:	2300      	movs	r3, #0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d10a      	bne.n	800188a <xQueueGenericSend+0x8e>
	__asm volatile
 8001874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001878:	f383 8811 	msr	BASEPRI, r3
 800187c:	f3bf 8f6f 	isb	sy
 8001880:	f3bf 8f4f 	dsb	sy
 8001884:	623b      	str	r3, [r7, #32]
}
 8001886:	bf00      	nop
 8001888:	e7fe      	b.n	8001888 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800188a:	f001 f9cf 	bl	8002c2c <xTaskGetSchedulerState>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d102      	bne.n	800189a <xQueueGenericSend+0x9e>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <xQueueGenericSend+0xa2>
 800189a:	2301      	movs	r3, #1
 800189c:	e000      	b.n	80018a0 <xQueueGenericSend+0xa4>
 800189e:	2300      	movs	r3, #0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d10a      	bne.n	80018ba <xQueueGenericSend+0xbe>
	__asm volatile
 80018a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018a8:	f383 8811 	msr	BASEPRI, r3
 80018ac:	f3bf 8f6f 	isb	sy
 80018b0:	f3bf 8f4f 	dsb	sy
 80018b4:	61fb      	str	r3, [r7, #28]
}
 80018b6:	bf00      	nop
 80018b8:	e7fe      	b.n	80018b8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80018ba:	f002 f84b 	bl	8003954 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80018be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d302      	bcc.n	80018d0 <xQueueGenericSend+0xd4>
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d129      	bne.n	8001924 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	68b9      	ldr	r1, [r7, #8]
 80018d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80018d6:	f000 fa0b 	bl	8001cf0 <prvCopyDataToQueue>
 80018da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80018dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d010      	beq.n	8001906 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80018e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018e6:	3324      	adds	r3, #36	; 0x24
 80018e8:	4618      	mov	r0, r3
 80018ea:	f000 ffe1 	bl	80028b0 <xTaskRemoveFromEventList>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d013      	beq.n	800191c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80018f4:	4b3f      	ldr	r3, [pc, #252]	; (80019f4 <xQueueGenericSend+0x1f8>)
 80018f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	f3bf 8f4f 	dsb	sy
 8001900:	f3bf 8f6f 	isb	sy
 8001904:	e00a      	b.n	800191c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001908:	2b00      	cmp	r3, #0
 800190a:	d007      	beq.n	800191c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800190c:	4b39      	ldr	r3, [pc, #228]	; (80019f4 <xQueueGenericSend+0x1f8>)
 800190e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	f3bf 8f4f 	dsb	sy
 8001918:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800191c:	f002 f84a 	bl	80039b4 <vPortExitCritical>
				return pdPASS;
 8001920:	2301      	movs	r3, #1
 8001922:	e063      	b.n	80019ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d103      	bne.n	8001932 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800192a:	f002 f843 	bl	80039b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800192e:	2300      	movs	r3, #0
 8001930:	e05c      	b.n	80019ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001934:	2b00      	cmp	r3, #0
 8001936:	d106      	bne.n	8001946 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	4618      	mov	r0, r3
 800193e:	f001 f81b 	bl	8002978 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001942:	2301      	movs	r3, #1
 8001944:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001946:	f002 f835 	bl	80039b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800194a:	f000 fd7b 	bl	8002444 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800194e:	f002 f801 	bl	8003954 <vPortEnterCritical>
 8001952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001954:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001958:	b25b      	sxtb	r3, r3
 800195a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800195e:	d103      	bne.n	8001968 <xQueueGenericSend+0x16c>
 8001960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001962:	2200      	movs	r2, #0
 8001964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800196a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800196e:	b25b      	sxtb	r3, r3
 8001970:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001974:	d103      	bne.n	800197e <xQueueGenericSend+0x182>
 8001976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800197e:	f002 f819 	bl	80039b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001982:	1d3a      	adds	r2, r7, #4
 8001984:	f107 0314 	add.w	r3, r7, #20
 8001988:	4611      	mov	r1, r2
 800198a:	4618      	mov	r0, r3
 800198c:	f001 f80a 	bl	80029a4 <xTaskCheckForTimeOut>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d124      	bne.n	80019e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001996:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001998:	f000 faa2 	bl	8001ee0 <prvIsQueueFull>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d018      	beq.n	80019d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80019a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019a4:	3310      	adds	r3, #16
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	4611      	mov	r1, r2
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 ff30 	bl	8002810 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80019b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80019b2:	f000 fa2d 	bl	8001e10 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80019b6:	f000 fd53 	bl	8002460 <xTaskResumeAll>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f47f af7c 	bne.w	80018ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80019c2:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <xQueueGenericSend+0x1f8>)
 80019c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	f3bf 8f4f 	dsb	sy
 80019ce:	f3bf 8f6f 	isb	sy
 80019d2:	e772      	b.n	80018ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80019d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80019d6:	f000 fa1b 	bl	8001e10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80019da:	f000 fd41 	bl	8002460 <xTaskResumeAll>
 80019de:	e76c      	b.n	80018ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80019e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80019e2:	f000 fa15 	bl	8001e10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80019e6:	f000 fd3b 	bl	8002460 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80019ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3738      	adds	r7, #56	; 0x38
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	e000ed04 	.word	0xe000ed04

080019f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b090      	sub	sp, #64	; 0x40
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
 8001a04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8001a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d10a      	bne.n	8001a26 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8001a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a14:	f383 8811 	msr	BASEPRI, r3
 8001a18:	f3bf 8f6f 	isb	sy
 8001a1c:	f3bf 8f4f 	dsb	sy
 8001a20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001a22:	bf00      	nop
 8001a24:	e7fe      	b.n	8001a24 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d103      	bne.n	8001a34 <xQueueGenericSendFromISR+0x3c>
 8001a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d101      	bne.n	8001a38 <xQueueGenericSendFromISR+0x40>
 8001a34:	2301      	movs	r3, #1
 8001a36:	e000      	b.n	8001a3a <xQueueGenericSendFromISR+0x42>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d10a      	bne.n	8001a54 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8001a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a42:	f383 8811 	msr	BASEPRI, r3
 8001a46:	f3bf 8f6f 	isb	sy
 8001a4a:	f3bf 8f4f 	dsb	sy
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001a50:	bf00      	nop
 8001a52:	e7fe      	b.n	8001a52 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d103      	bne.n	8001a62 <xQueueGenericSendFromISR+0x6a>
 8001a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d101      	bne.n	8001a66 <xQueueGenericSendFromISR+0x6e>
 8001a62:	2301      	movs	r3, #1
 8001a64:	e000      	b.n	8001a68 <xQueueGenericSendFromISR+0x70>
 8001a66:	2300      	movs	r3, #0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d10a      	bne.n	8001a82 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8001a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a70:	f383 8811 	msr	BASEPRI, r3
 8001a74:	f3bf 8f6f 	isb	sy
 8001a78:	f3bf 8f4f 	dsb	sy
 8001a7c:	623b      	str	r3, [r7, #32]
}
 8001a7e:	bf00      	nop
 8001a80:	e7fe      	b.n	8001a80 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001a82:	f002 f849 	bl	8003b18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001a86:	f3ef 8211 	mrs	r2, BASEPRI
 8001a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a8e:	f383 8811 	msr	BASEPRI, r3
 8001a92:	f3bf 8f6f 	isb	sy
 8001a96:	f3bf 8f4f 	dsb	sy
 8001a9a:	61fa      	str	r2, [r7, #28]
 8001a9c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001a9e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001aa0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d302      	bcc.n	8001ab4 <xQueueGenericSendFromISR+0xbc>
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d12f      	bne.n	8001b14 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ab6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	68b9      	ldr	r1, [r7, #8]
 8001ac8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001aca:	f000 f911 	bl	8001cf0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001ace:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001ad2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ad6:	d112      	bne.n	8001afe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d016      	beq.n	8001b0e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ae2:	3324      	adds	r3, #36	; 0x24
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f000 fee3 	bl	80028b0 <xTaskRemoveFromEventList>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d00e      	beq.n	8001b0e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00b      	beq.n	8001b0e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2201      	movs	r2, #1
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	e007      	b.n	8001b0e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001afe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b02:	3301      	adds	r3, #1
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	b25a      	sxtb	r2, r3
 8001b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8001b12:	e001      	b.n	8001b18 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b1a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001b22:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3740      	adds	r7, #64	; 0x40
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08c      	sub	sp, #48	; 0x30
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10a      	bne.n	8001b60 <xQueueReceive+0x30>
	__asm volatile
 8001b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b4e:	f383 8811 	msr	BASEPRI, r3
 8001b52:	f3bf 8f6f 	isb	sy
 8001b56:	f3bf 8f4f 	dsb	sy
 8001b5a:	623b      	str	r3, [r7, #32]
}
 8001b5c:	bf00      	nop
 8001b5e:	e7fe      	b.n	8001b5e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d103      	bne.n	8001b6e <xQueueReceive+0x3e>
 8001b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <xQueueReceive+0x42>
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <xQueueReceive+0x44>
 8001b72:	2300      	movs	r3, #0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d10a      	bne.n	8001b8e <xQueueReceive+0x5e>
	__asm volatile
 8001b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b7c:	f383 8811 	msr	BASEPRI, r3
 8001b80:	f3bf 8f6f 	isb	sy
 8001b84:	f3bf 8f4f 	dsb	sy
 8001b88:	61fb      	str	r3, [r7, #28]
}
 8001b8a:	bf00      	nop
 8001b8c:	e7fe      	b.n	8001b8c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001b8e:	f001 f84d 	bl	8002c2c <xTaskGetSchedulerState>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d102      	bne.n	8001b9e <xQueueReceive+0x6e>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <xQueueReceive+0x72>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e000      	b.n	8001ba4 <xQueueReceive+0x74>
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d10a      	bne.n	8001bbe <xQueueReceive+0x8e>
	__asm volatile
 8001ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bac:	f383 8811 	msr	BASEPRI, r3
 8001bb0:	f3bf 8f6f 	isb	sy
 8001bb4:	f3bf 8f4f 	dsb	sy
 8001bb8:	61bb      	str	r3, [r7, #24]
}
 8001bba:	bf00      	nop
 8001bbc:	e7fe      	b.n	8001bbc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001bbe:	f001 fec9 	bl	8003954 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d01f      	beq.n	8001c0e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001bce:	68b9      	ldr	r1, [r7, #8]
 8001bd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001bd2:	f000 f8f7 	bl	8001dc4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	1e5a      	subs	r2, r3, #1
 8001bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bdc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00f      	beq.n	8001c06 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be8:	3310      	adds	r3, #16
 8001bea:	4618      	mov	r0, r3
 8001bec:	f000 fe60 	bl	80028b0 <xTaskRemoveFromEventList>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d007      	beq.n	8001c06 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001bf6:	4b3d      	ldr	r3, [pc, #244]	; (8001cec <xQueueReceive+0x1bc>)
 8001bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	f3bf 8f4f 	dsb	sy
 8001c02:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001c06:	f001 fed5 	bl	80039b4 <vPortExitCritical>
				return pdPASS;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e069      	b.n	8001ce2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d103      	bne.n	8001c1c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001c14:	f001 fece 	bl	80039b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	e062      	b.n	8001ce2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d106      	bne.n	8001c30 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001c22:	f107 0310 	add.w	r3, r7, #16
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 fea6 	bl	8002978 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001c30:	f001 fec0 	bl	80039b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001c34:	f000 fc06 	bl	8002444 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001c38:	f001 fe8c 	bl	8003954 <vPortEnterCritical>
 8001c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c42:	b25b      	sxtb	r3, r3
 8001c44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c48:	d103      	bne.n	8001c52 <xQueueReceive+0x122>
 8001c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c58:	b25b      	sxtb	r3, r3
 8001c5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c5e:	d103      	bne.n	8001c68 <xQueueReceive+0x138>
 8001c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c68:	f001 fea4 	bl	80039b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001c6c:	1d3a      	adds	r2, r7, #4
 8001c6e:	f107 0310 	add.w	r3, r7, #16
 8001c72:	4611      	mov	r1, r2
 8001c74:	4618      	mov	r0, r3
 8001c76:	f000 fe95 	bl	80029a4 <xTaskCheckForTimeOut>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d123      	bne.n	8001cc8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001c80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c82:	f000 f917 	bl	8001eb4 <prvIsQueueEmpty>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d017      	beq.n	8001cbc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c8e:	3324      	adds	r3, #36	; 0x24
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	4611      	mov	r1, r2
 8001c94:	4618      	mov	r0, r3
 8001c96:	f000 fdbb 	bl	8002810 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001c9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c9c:	f000 f8b8 	bl	8001e10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001ca0:	f000 fbde 	bl	8002460 <xTaskResumeAll>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d189      	bne.n	8001bbe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8001caa:	4b10      	ldr	r3, [pc, #64]	; (8001cec <xQueueReceive+0x1bc>)
 8001cac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	f3bf 8f4f 	dsb	sy
 8001cb6:	f3bf 8f6f 	isb	sy
 8001cba:	e780      	b.n	8001bbe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001cbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001cbe:	f000 f8a7 	bl	8001e10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001cc2:	f000 fbcd 	bl	8002460 <xTaskResumeAll>
 8001cc6:	e77a      	b.n	8001bbe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001cc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001cca:	f000 f8a1 	bl	8001e10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001cce:	f000 fbc7 	bl	8002460 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001cd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001cd4:	f000 f8ee 	bl	8001eb4 <prvIsQueueEmpty>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f43f af6f 	beq.w	8001bbe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001ce0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3730      	adds	r7, #48	; 0x30
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	e000ed04 	.word	0xe000ed04

08001cf0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d04:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10d      	bne.n	8001d2a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d14d      	bne.n	8001db2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f000 ffa4 	bl	8002c68 <xTaskPriorityDisinherit>
 8001d20:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	e043      	b.n	8001db2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d119      	bne.n	8001d64 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6858      	ldr	r0, [r3, #4]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d38:	461a      	mov	r2, r3
 8001d3a:	68b9      	ldr	r1, [r7, #8]
 8001d3c:	f008 f8a5 	bl	8009e8a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d48:	441a      	add	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d32b      	bcc.n	8001db2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	e026      	b.n	8001db2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	68d8      	ldr	r0, [r3, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	68b9      	ldr	r1, [r7, #8]
 8001d70:	f008 f88b 	bl	8009e8a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	68da      	ldr	r2, [r3, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	425b      	negs	r3, r3
 8001d7e:	441a      	add	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	68da      	ldr	r2, [r3, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d207      	bcs.n	8001da0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d98:	425b      	negs	r3, r3
 8001d9a:	441a      	add	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d105      	bne.n	8001db2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d002      	beq.n	8001db2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1c5a      	adds	r2, r3, #1
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8001dba:	697b      	ldr	r3, [r7, #20]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3718      	adds	r7, #24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d018      	beq.n	8001e08 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68da      	ldr	r2, [r3, #12]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	441a      	add	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68da      	ldr	r2, [r3, #12]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d303      	bcc.n	8001df8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68d9      	ldr	r1, [r3, #12]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e00:	461a      	mov	r2, r3
 8001e02:	6838      	ldr	r0, [r7, #0]
 8001e04:	f008 f841 	bl	8009e8a <memcpy>
	}
}
 8001e08:	bf00      	nop
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001e18:	f001 fd9c 	bl	8003954 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e22:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001e24:	e011      	b.n	8001e4a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d012      	beq.n	8001e54 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	3324      	adds	r3, #36	; 0x24
 8001e32:	4618      	mov	r0, r3
 8001e34:	f000 fd3c 	bl	80028b0 <xTaskRemoveFromEventList>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001e3e:	f000 fe13 	bl	8002a68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
 8001e44:	3b01      	subs	r3, #1
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	dce9      	bgt.n	8001e26 <prvUnlockQueue+0x16>
 8001e52:	e000      	b.n	8001e56 <prvUnlockQueue+0x46>
					break;
 8001e54:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	22ff      	movs	r2, #255	; 0xff
 8001e5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8001e5e:	f001 fda9 	bl	80039b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001e62:	f001 fd77 	bl	8003954 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e6c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001e6e:	e011      	b.n	8001e94 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d012      	beq.n	8001e9e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3310      	adds	r3, #16
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f000 fd17 	bl	80028b0 <xTaskRemoveFromEventList>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001e88:	f000 fdee 	bl	8002a68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001e8c:	7bbb      	ldrb	r3, [r7, #14]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001e94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	dce9      	bgt.n	8001e70 <prvUnlockQueue+0x60>
 8001e9c:	e000      	b.n	8001ea0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8001e9e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	22ff      	movs	r2, #255	; 0xff
 8001ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001ea8:	f001 fd84 	bl	80039b4 <vPortExitCritical>
}
 8001eac:	bf00      	nop
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001ebc:	f001 fd4a 	bl	8003954 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d102      	bne.n	8001ece <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	e001      	b.n	8001ed2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001ed2:	f001 fd6f 	bl	80039b4 <vPortExitCritical>

	return xReturn;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001ee8:	f001 fd34 	bl	8003954 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d102      	bne.n	8001efe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	e001      	b.n	8001f02 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001f02:	f001 fd57 	bl	80039b4 <vPortExitCritical>

	return xReturn;
 8001f06:	68fb      	ldr	r3, [r7, #12]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	e014      	b.n	8001f4a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001f20:	4a0f      	ldr	r2, [pc, #60]	; (8001f60 <vQueueAddToRegistry+0x50>)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10b      	bne.n	8001f44 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001f2c:	490c      	ldr	r1, [pc, #48]	; (8001f60 <vQueueAddToRegistry+0x50>)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001f36:	4a0a      	ldr	r2, [pc, #40]	; (8001f60 <vQueueAddToRegistry+0x50>)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	4413      	add	r3, r2
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001f42:	e006      	b.n	8001f52 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	3301      	adds	r3, #1
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2b07      	cmp	r3, #7
 8001f4e:	d9e7      	bls.n	8001f20 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001f50:	bf00      	nop
 8001f52:	bf00      	nop
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	20001168 	.word	0x20001168

08001f64 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001f74:	f001 fcee 	bl	8003954 <vPortEnterCritical>
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f7e:	b25b      	sxtb	r3, r3
 8001f80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f84:	d103      	bne.n	8001f8e <vQueueWaitForMessageRestricted+0x2a>
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f94:	b25b      	sxtb	r3, r3
 8001f96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f9a:	d103      	bne.n	8001fa4 <vQueueWaitForMessageRestricted+0x40>
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001fa4:	f001 fd06 	bl	80039b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d106      	bne.n	8001fbe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	3324      	adds	r3, #36	; 0x24
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	68b9      	ldr	r1, [r7, #8]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f000 fc4d 	bl	8002858 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8001fbe:	6978      	ldr	r0, [r7, #20]
 8001fc0:	f7ff ff26 	bl	8001e10 <prvUnlockQueue>
	}
 8001fc4:	bf00      	nop
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08e      	sub	sp, #56	; 0x38
 8001fd0:	af04      	add	r7, sp, #16
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
 8001fd8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d10a      	bne.n	8001ff6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8001fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fe4:	f383 8811 	msr	BASEPRI, r3
 8001fe8:	f3bf 8f6f 	isb	sy
 8001fec:	f3bf 8f4f 	dsb	sy
 8001ff0:	623b      	str	r3, [r7, #32]
}
 8001ff2:	bf00      	nop
 8001ff4:	e7fe      	b.n	8001ff4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10a      	bne.n	8002012 <xTaskCreateStatic+0x46>
	__asm volatile
 8001ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002000:	f383 8811 	msr	BASEPRI, r3
 8002004:	f3bf 8f6f 	isb	sy
 8002008:	f3bf 8f4f 	dsb	sy
 800200c:	61fb      	str	r3, [r7, #28]
}
 800200e:	bf00      	nop
 8002010:	e7fe      	b.n	8002010 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002012:	235c      	movs	r3, #92	; 0x5c
 8002014:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	2b5c      	cmp	r3, #92	; 0x5c
 800201a:	d00a      	beq.n	8002032 <xTaskCreateStatic+0x66>
	__asm volatile
 800201c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002020:	f383 8811 	msr	BASEPRI, r3
 8002024:	f3bf 8f6f 	isb	sy
 8002028:	f3bf 8f4f 	dsb	sy
 800202c:	61bb      	str	r3, [r7, #24]
}
 800202e:	bf00      	nop
 8002030:	e7fe      	b.n	8002030 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002032:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002036:	2b00      	cmp	r3, #0
 8002038:	d01e      	beq.n	8002078 <xTaskCreateStatic+0xac>
 800203a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800203c:	2b00      	cmp	r3, #0
 800203e:	d01b      	beq.n	8002078 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002042:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002048:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	2202      	movs	r2, #2
 800204e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002052:	2300      	movs	r3, #0
 8002054:	9303      	str	r3, [sp, #12]
 8002056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002058:	9302      	str	r3, [sp, #8]
 800205a:	f107 0314 	add.w	r3, r7, #20
 800205e:	9301      	str	r3, [sp, #4]
 8002060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	68b9      	ldr	r1, [r7, #8]
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	f000 f850 	bl	8002110 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002070:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002072:	f000 f8dd 	bl	8002230 <prvAddNewTaskToReadyList>
 8002076:	e001      	b.n	800207c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800207c:	697b      	ldr	r3, [r7, #20]
	}
 800207e:	4618      	mov	r0, r3
 8002080:	3728      	adds	r7, #40	; 0x28
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002086:	b580      	push	{r7, lr}
 8002088:	b08c      	sub	sp, #48	; 0x30
 800208a:	af04      	add	r7, sp, #16
 800208c:	60f8      	str	r0, [r7, #12]
 800208e:	60b9      	str	r1, [r7, #8]
 8002090:	603b      	str	r3, [r7, #0]
 8002092:	4613      	mov	r3, r2
 8002094:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002096:	88fb      	ldrh	r3, [r7, #6]
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4618      	mov	r0, r3
 800209c:	f001 fd7c 	bl	8003b98 <pvPortMalloc>
 80020a0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00e      	beq.n	80020c6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80020a8:	205c      	movs	r0, #92	; 0x5c
 80020aa:	f001 fd75 	bl	8003b98 <pvPortMalloc>
 80020ae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	631a      	str	r2, [r3, #48]	; 0x30
 80020bc:	e005      	b.n	80020ca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80020be:	6978      	ldr	r0, [r7, #20]
 80020c0:	f001 fe36 	bl	8003d30 <vPortFree>
 80020c4:	e001      	b.n	80020ca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80020c6:	2300      	movs	r3, #0
 80020c8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d017      	beq.n	8002100 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80020d8:	88fa      	ldrh	r2, [r7, #6]
 80020da:	2300      	movs	r3, #0
 80020dc:	9303      	str	r3, [sp, #12]
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	9302      	str	r3, [sp, #8]
 80020e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e4:	9301      	str	r3, [sp, #4]
 80020e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	68b9      	ldr	r1, [r7, #8]
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 f80e 	bl	8002110 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80020f4:	69f8      	ldr	r0, [r7, #28]
 80020f6:	f000 f89b 	bl	8002230 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80020fa:	2301      	movs	r3, #1
 80020fc:	61bb      	str	r3, [r7, #24]
 80020fe:	e002      	b.n	8002106 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002100:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002104:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002106:	69bb      	ldr	r3, [r7, #24]
	}
 8002108:	4618      	mov	r0, r3
 800210a:	3720      	adds	r7, #32
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b088      	sub	sp, #32
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
 800211c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800211e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002120:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	461a      	mov	r2, r3
 8002128:	21a5      	movs	r1, #165	; 0xa5
 800212a:	f007 fe3d 	bl	8009da8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800212e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002130:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002138:	3b01      	subs	r3, #1
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	f023 0307 	bic.w	r3, r3, #7
 8002146:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00a      	beq.n	8002168 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002156:	f383 8811 	msr	BASEPRI, r3
 800215a:	f3bf 8f6f 	isb	sy
 800215e:	f3bf 8f4f 	dsb	sy
 8002162:	617b      	str	r3, [r7, #20]
}
 8002164:	bf00      	nop
 8002166:	e7fe      	b.n	8002166 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d01f      	beq.n	80021ae <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800216e:	2300      	movs	r3, #0
 8002170:	61fb      	str	r3, [r7, #28]
 8002172:	e012      	b.n	800219a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002174:	68ba      	ldr	r2, [r7, #8]
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	4413      	add	r3, r2
 800217a:	7819      	ldrb	r1, [r3, #0]
 800217c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	4413      	add	r3, r2
 8002182:	3334      	adds	r3, #52	; 0x34
 8002184:	460a      	mov	r2, r1
 8002186:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	4413      	add	r3, r2
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d006      	beq.n	80021a2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	3301      	adds	r3, #1
 8002198:	61fb      	str	r3, [r7, #28]
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	2b0f      	cmp	r3, #15
 800219e:	d9e9      	bls.n	8002174 <prvInitialiseNewTask+0x64>
 80021a0:	e000      	b.n	80021a4 <prvInitialiseNewTask+0x94>
			{
				break;
 80021a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80021a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021ac:	e003      	b.n	80021b6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80021ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80021b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b8:	2b37      	cmp	r3, #55	; 0x37
 80021ba:	d901      	bls.n	80021c0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80021bc:	2337      	movs	r3, #55	; 0x37
 80021be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80021c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80021c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021ca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80021cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ce:	2200      	movs	r2, #0
 80021d0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80021d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d4:	3304      	adds	r3, #4
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff f978 	bl	80014cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80021dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021de:	3318      	adds	r3, #24
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff f973 	bl	80014cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80021e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80021f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80021f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80021fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021fe:	2200      	movs	r2, #0
 8002200:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002204:	2200      	movs	r2, #0
 8002206:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	68f9      	ldr	r1, [r7, #12]
 800220e:	69b8      	ldr	r0, [r7, #24]
 8002210:	f001 fa70 	bl	80036f4 <pxPortInitialiseStack>
 8002214:	4602      	mov	r2, r0
 8002216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002218:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800221a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800221c:	2b00      	cmp	r3, #0
 800221e:	d002      	beq.n	8002226 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002222:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002224:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002226:	bf00      	nop
 8002228:	3720      	adds	r7, #32
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
	...

08002230 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002238:	f001 fb8c 	bl	8003954 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800223c:	4b2d      	ldr	r3, [pc, #180]	; (80022f4 <prvAddNewTaskToReadyList+0xc4>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	3301      	adds	r3, #1
 8002242:	4a2c      	ldr	r2, [pc, #176]	; (80022f4 <prvAddNewTaskToReadyList+0xc4>)
 8002244:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002246:	4b2c      	ldr	r3, [pc, #176]	; (80022f8 <prvAddNewTaskToReadyList+0xc8>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d109      	bne.n	8002262 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800224e:	4a2a      	ldr	r2, [pc, #168]	; (80022f8 <prvAddNewTaskToReadyList+0xc8>)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002254:	4b27      	ldr	r3, [pc, #156]	; (80022f4 <prvAddNewTaskToReadyList+0xc4>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d110      	bne.n	800227e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800225c:	f000 fc28 	bl	8002ab0 <prvInitialiseTaskLists>
 8002260:	e00d      	b.n	800227e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002262:	4b26      	ldr	r3, [pc, #152]	; (80022fc <prvAddNewTaskToReadyList+0xcc>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d109      	bne.n	800227e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800226a:	4b23      	ldr	r3, [pc, #140]	; (80022f8 <prvAddNewTaskToReadyList+0xc8>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002274:	429a      	cmp	r2, r3
 8002276:	d802      	bhi.n	800227e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002278:	4a1f      	ldr	r2, [pc, #124]	; (80022f8 <prvAddNewTaskToReadyList+0xc8>)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800227e:	4b20      	ldr	r3, [pc, #128]	; (8002300 <prvAddNewTaskToReadyList+0xd0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	3301      	adds	r3, #1
 8002284:	4a1e      	ldr	r2, [pc, #120]	; (8002300 <prvAddNewTaskToReadyList+0xd0>)
 8002286:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002288:	4b1d      	ldr	r3, [pc, #116]	; (8002300 <prvAddNewTaskToReadyList+0xd0>)
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002294:	4b1b      	ldr	r3, [pc, #108]	; (8002304 <prvAddNewTaskToReadyList+0xd4>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	d903      	bls.n	80022a4 <prvAddNewTaskToReadyList+0x74>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a0:	4a18      	ldr	r2, [pc, #96]	; (8002304 <prvAddNewTaskToReadyList+0xd4>)
 80022a2:	6013      	str	r3, [r2, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022a8:	4613      	mov	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4a15      	ldr	r2, [pc, #84]	; (8002308 <prvAddNewTaskToReadyList+0xd8>)
 80022b2:	441a      	add	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3304      	adds	r3, #4
 80022b8:	4619      	mov	r1, r3
 80022ba:	4610      	mov	r0, r2
 80022bc:	f7ff f913 	bl	80014e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80022c0:	f001 fb78 	bl	80039b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80022c4:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <prvAddNewTaskToReadyList+0xcc>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00e      	beq.n	80022ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80022cc:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <prvAddNewTaskToReadyList+0xc8>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d207      	bcs.n	80022ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80022da:	4b0c      	ldr	r3, [pc, #48]	; (800230c <prvAddNewTaskToReadyList+0xdc>)
 80022dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	f3bf 8f4f 	dsb	sy
 80022e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	2000167c 	.word	0x2000167c
 80022f8:	200011a8 	.word	0x200011a8
 80022fc:	20001688 	.word	0x20001688
 8002300:	20001698 	.word	0x20001698
 8002304:	20001684 	.word	0x20001684
 8002308:	200011ac 	.word	0x200011ac
 800230c:	e000ed04 	.word	0xe000ed04

08002310 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002318:	2300      	movs	r3, #0
 800231a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d017      	beq.n	8002352 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002322:	4b13      	ldr	r3, [pc, #76]	; (8002370 <vTaskDelay+0x60>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00a      	beq.n	8002340 <vTaskDelay+0x30>
	__asm volatile
 800232a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800232e:	f383 8811 	msr	BASEPRI, r3
 8002332:	f3bf 8f6f 	isb	sy
 8002336:	f3bf 8f4f 	dsb	sy
 800233a:	60bb      	str	r3, [r7, #8]
}
 800233c:	bf00      	nop
 800233e:	e7fe      	b.n	800233e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002340:	f000 f880 	bl	8002444 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002344:	2100      	movs	r1, #0
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 fe32 	bl	8002fb0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800234c:	f000 f888 	bl	8002460 <xTaskResumeAll>
 8002350:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d107      	bne.n	8002368 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002358:	4b06      	ldr	r3, [pc, #24]	; (8002374 <vTaskDelay+0x64>)
 800235a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	f3bf 8f4f 	dsb	sy
 8002364:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002368:	bf00      	nop
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	200016a4 	.word	0x200016a4
 8002374:	e000ed04 	.word	0xe000ed04

08002378 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08a      	sub	sp, #40	; 0x28
 800237c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800237e:	2300      	movs	r3, #0
 8002380:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002382:	2300      	movs	r3, #0
 8002384:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002386:	463a      	mov	r2, r7
 8002388:	1d39      	adds	r1, r7, #4
 800238a:	f107 0308 	add.w	r3, r7, #8
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff f848 	bl	8001424 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002394:	6839      	ldr	r1, [r7, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	9202      	str	r2, [sp, #8]
 800239c:	9301      	str	r3, [sp, #4]
 800239e:	2300      	movs	r3, #0
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	2300      	movs	r3, #0
 80023a4:	460a      	mov	r2, r1
 80023a6:	4921      	ldr	r1, [pc, #132]	; (800242c <vTaskStartScheduler+0xb4>)
 80023a8:	4821      	ldr	r0, [pc, #132]	; (8002430 <vTaskStartScheduler+0xb8>)
 80023aa:	f7ff fe0f 	bl	8001fcc <xTaskCreateStatic>
 80023ae:	4603      	mov	r3, r0
 80023b0:	4a20      	ldr	r2, [pc, #128]	; (8002434 <vTaskStartScheduler+0xbc>)
 80023b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80023b4:	4b1f      	ldr	r3, [pc, #124]	; (8002434 <vTaskStartScheduler+0xbc>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d002      	beq.n	80023c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80023bc:	2301      	movs	r3, #1
 80023be:	617b      	str	r3, [r7, #20]
 80023c0:	e001      	b.n	80023c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d102      	bne.n	80023d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80023cc:	f000 fe44 	bl	8003058 <xTimerCreateTimerTask>
 80023d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d116      	bne.n	8002406 <vTaskStartScheduler+0x8e>
	__asm volatile
 80023d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023dc:	f383 8811 	msr	BASEPRI, r3
 80023e0:	f3bf 8f6f 	isb	sy
 80023e4:	f3bf 8f4f 	dsb	sy
 80023e8:	613b      	str	r3, [r7, #16]
}
 80023ea:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80023ec:	4b12      	ldr	r3, [pc, #72]	; (8002438 <vTaskStartScheduler+0xc0>)
 80023ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023f2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80023f4:	4b11      	ldr	r3, [pc, #68]	; (800243c <vTaskStartScheduler+0xc4>)
 80023f6:	2201      	movs	r2, #1
 80023f8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80023fa:	4b11      	ldr	r3, [pc, #68]	; (8002440 <vTaskStartScheduler+0xc8>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002400:	f001 fa06 	bl	8003810 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002404:	e00e      	b.n	8002424 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800240c:	d10a      	bne.n	8002424 <vTaskStartScheduler+0xac>
	__asm volatile
 800240e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002412:	f383 8811 	msr	BASEPRI, r3
 8002416:	f3bf 8f6f 	isb	sy
 800241a:	f3bf 8f4f 	dsb	sy
 800241e:	60fb      	str	r3, [r7, #12]
}
 8002420:	bf00      	nop
 8002422:	e7fe      	b.n	8002422 <vTaskStartScheduler+0xaa>
}
 8002424:	bf00      	nop
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	0800aab4 	.word	0x0800aab4
 8002430:	08002a81 	.word	0x08002a81
 8002434:	200016a0 	.word	0x200016a0
 8002438:	2000169c 	.word	0x2000169c
 800243c:	20001688 	.word	0x20001688
 8002440:	20001680 	.word	0x20001680

08002444 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002448:	4b04      	ldr	r3, [pc, #16]	; (800245c <vTaskSuspendAll+0x18>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	3301      	adds	r3, #1
 800244e:	4a03      	ldr	r2, [pc, #12]	; (800245c <vTaskSuspendAll+0x18>)
 8002450:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002452:	bf00      	nop
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	200016a4 	.word	0x200016a4

08002460 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800246a:	2300      	movs	r3, #0
 800246c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800246e:	4b42      	ldr	r3, [pc, #264]	; (8002578 <xTaskResumeAll+0x118>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10a      	bne.n	800248c <xTaskResumeAll+0x2c>
	__asm volatile
 8002476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800247a:	f383 8811 	msr	BASEPRI, r3
 800247e:	f3bf 8f6f 	isb	sy
 8002482:	f3bf 8f4f 	dsb	sy
 8002486:	603b      	str	r3, [r7, #0]
}
 8002488:	bf00      	nop
 800248a:	e7fe      	b.n	800248a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800248c:	f001 fa62 	bl	8003954 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002490:	4b39      	ldr	r3, [pc, #228]	; (8002578 <xTaskResumeAll+0x118>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	3b01      	subs	r3, #1
 8002496:	4a38      	ldr	r2, [pc, #224]	; (8002578 <xTaskResumeAll+0x118>)
 8002498:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800249a:	4b37      	ldr	r3, [pc, #220]	; (8002578 <xTaskResumeAll+0x118>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d162      	bne.n	8002568 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80024a2:	4b36      	ldr	r3, [pc, #216]	; (800257c <xTaskResumeAll+0x11c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d05e      	beq.n	8002568 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80024aa:	e02f      	b.n	800250c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024ac:	4b34      	ldr	r3, [pc, #208]	; (8002580 <xTaskResumeAll+0x120>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	3318      	adds	r3, #24
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff f871 	bl	80015a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	3304      	adds	r3, #4
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff f86c 	bl	80015a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024cc:	4b2d      	ldr	r3, [pc, #180]	; (8002584 <xTaskResumeAll+0x124>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d903      	bls.n	80024dc <xTaskResumeAll+0x7c>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d8:	4a2a      	ldr	r2, [pc, #168]	; (8002584 <xTaskResumeAll+0x124>)
 80024da:	6013      	str	r3, [r2, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e0:	4613      	mov	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4a27      	ldr	r2, [pc, #156]	; (8002588 <xTaskResumeAll+0x128>)
 80024ea:	441a      	add	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	3304      	adds	r3, #4
 80024f0:	4619      	mov	r1, r3
 80024f2:	4610      	mov	r0, r2
 80024f4:	f7fe fff7 	bl	80014e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024fc:	4b23      	ldr	r3, [pc, #140]	; (800258c <xTaskResumeAll+0x12c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002502:	429a      	cmp	r2, r3
 8002504:	d302      	bcc.n	800250c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002506:	4b22      	ldr	r3, [pc, #136]	; (8002590 <xTaskResumeAll+0x130>)
 8002508:	2201      	movs	r2, #1
 800250a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800250c:	4b1c      	ldr	r3, [pc, #112]	; (8002580 <xTaskResumeAll+0x120>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1cb      	bne.n	80024ac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800251a:	f000 fb67 	bl	8002bec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800251e:	4b1d      	ldr	r3, [pc, #116]	; (8002594 <xTaskResumeAll+0x134>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d010      	beq.n	800254c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800252a:	f000 f859 	bl	80025e0 <xTaskIncrementTick>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d002      	beq.n	800253a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002534:	4b16      	ldr	r3, [pc, #88]	; (8002590 <xTaskResumeAll+0x130>)
 8002536:	2201      	movs	r2, #1
 8002538:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	3b01      	subs	r3, #1
 800253e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f1      	bne.n	800252a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002546:	4b13      	ldr	r3, [pc, #76]	; (8002594 <xTaskResumeAll+0x134>)
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800254c:	4b10      	ldr	r3, [pc, #64]	; (8002590 <xTaskResumeAll+0x130>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d009      	beq.n	8002568 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002554:	2301      	movs	r3, #1
 8002556:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002558:	4b0f      	ldr	r3, [pc, #60]	; (8002598 <xTaskResumeAll+0x138>)
 800255a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	f3bf 8f4f 	dsb	sy
 8002564:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002568:	f001 fa24 	bl	80039b4 <vPortExitCritical>

	return xAlreadyYielded;
 800256c:	68bb      	ldr	r3, [r7, #8]
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	200016a4 	.word	0x200016a4
 800257c:	2000167c 	.word	0x2000167c
 8002580:	2000163c 	.word	0x2000163c
 8002584:	20001684 	.word	0x20001684
 8002588:	200011ac 	.word	0x200011ac
 800258c:	200011a8 	.word	0x200011a8
 8002590:	20001690 	.word	0x20001690
 8002594:	2000168c 	.word	0x2000168c
 8002598:	e000ed04 	.word	0xe000ed04

0800259c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80025a2:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <xTaskGetTickCount+0x1c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80025a8:	687b      	ldr	r3, [r7, #4]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	20001680 	.word	0x20001680

080025bc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80025c2:	f001 faa9 	bl	8003b18 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80025c6:	2300      	movs	r3, #0
 80025c8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80025ca:	4b04      	ldr	r3, [pc, #16]	; (80025dc <xTaskGetTickCountFromISR+0x20>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80025d0:	683b      	ldr	r3, [r7, #0]
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	20001680 	.word	0x20001680

080025e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80025e6:	2300      	movs	r3, #0
 80025e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025ea:	4b4f      	ldr	r3, [pc, #316]	; (8002728 <xTaskIncrementTick+0x148>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f040 808f 	bne.w	8002712 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80025f4:	4b4d      	ldr	r3, [pc, #308]	; (800272c <xTaskIncrementTick+0x14c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	3301      	adds	r3, #1
 80025fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80025fc:	4a4b      	ldr	r2, [pc, #300]	; (800272c <xTaskIncrementTick+0x14c>)
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d120      	bne.n	800264a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002608:	4b49      	ldr	r3, [pc, #292]	; (8002730 <xTaskIncrementTick+0x150>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00a      	beq.n	8002628 <xTaskIncrementTick+0x48>
	__asm volatile
 8002612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002616:	f383 8811 	msr	BASEPRI, r3
 800261a:	f3bf 8f6f 	isb	sy
 800261e:	f3bf 8f4f 	dsb	sy
 8002622:	603b      	str	r3, [r7, #0]
}
 8002624:	bf00      	nop
 8002626:	e7fe      	b.n	8002626 <xTaskIncrementTick+0x46>
 8002628:	4b41      	ldr	r3, [pc, #260]	; (8002730 <xTaskIncrementTick+0x150>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	4b41      	ldr	r3, [pc, #260]	; (8002734 <xTaskIncrementTick+0x154>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a3f      	ldr	r2, [pc, #252]	; (8002730 <xTaskIncrementTick+0x150>)
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	4a3f      	ldr	r2, [pc, #252]	; (8002734 <xTaskIncrementTick+0x154>)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6013      	str	r3, [r2, #0]
 800263c:	4b3e      	ldr	r3, [pc, #248]	; (8002738 <xTaskIncrementTick+0x158>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	3301      	adds	r3, #1
 8002642:	4a3d      	ldr	r2, [pc, #244]	; (8002738 <xTaskIncrementTick+0x158>)
 8002644:	6013      	str	r3, [r2, #0]
 8002646:	f000 fad1 	bl	8002bec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800264a:	4b3c      	ldr	r3, [pc, #240]	; (800273c <xTaskIncrementTick+0x15c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	429a      	cmp	r2, r3
 8002652:	d349      	bcc.n	80026e8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002654:	4b36      	ldr	r3, [pc, #216]	; (8002730 <xTaskIncrementTick+0x150>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d104      	bne.n	8002668 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800265e:	4b37      	ldr	r3, [pc, #220]	; (800273c <xTaskIncrementTick+0x15c>)
 8002660:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002664:	601a      	str	r2, [r3, #0]
					break;
 8002666:	e03f      	b.n	80026e8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002668:	4b31      	ldr	r3, [pc, #196]	; (8002730 <xTaskIncrementTick+0x150>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	429a      	cmp	r2, r3
 800267e:	d203      	bcs.n	8002688 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002680:	4a2e      	ldr	r2, [pc, #184]	; (800273c <xTaskIncrementTick+0x15c>)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002686:	e02f      	b.n	80026e8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	3304      	adds	r3, #4
 800268c:	4618      	mov	r0, r3
 800268e:	f7fe ff87 	bl	80015a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002696:	2b00      	cmp	r3, #0
 8002698:	d004      	beq.n	80026a4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	3318      	adds	r3, #24
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fe ff7e 	bl	80015a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a8:	4b25      	ldr	r3, [pc, #148]	; (8002740 <xTaskIncrementTick+0x160>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d903      	bls.n	80026b8 <xTaskIncrementTick+0xd8>
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b4:	4a22      	ldr	r2, [pc, #136]	; (8002740 <xTaskIncrementTick+0x160>)
 80026b6:	6013      	str	r3, [r2, #0]
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026bc:	4613      	mov	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4a1f      	ldr	r2, [pc, #124]	; (8002744 <xTaskIncrementTick+0x164>)
 80026c6:	441a      	add	r2, r3
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	3304      	adds	r3, #4
 80026cc:	4619      	mov	r1, r3
 80026ce:	4610      	mov	r0, r2
 80026d0:	f7fe ff09 	bl	80014e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026d8:	4b1b      	ldr	r3, [pc, #108]	; (8002748 <xTaskIncrementTick+0x168>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026de:	429a      	cmp	r2, r3
 80026e0:	d3b8      	bcc.n	8002654 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80026e2:	2301      	movs	r3, #1
 80026e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026e6:	e7b5      	b.n	8002654 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80026e8:	4b17      	ldr	r3, [pc, #92]	; (8002748 <xTaskIncrementTick+0x168>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ee:	4915      	ldr	r1, [pc, #84]	; (8002744 <xTaskIncrementTick+0x164>)
 80026f0:	4613      	mov	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4413      	add	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d901      	bls.n	8002704 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8002700:	2301      	movs	r3, #1
 8002702:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002704:	4b11      	ldr	r3, [pc, #68]	; (800274c <xTaskIncrementTick+0x16c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d007      	beq.n	800271c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800270c:	2301      	movs	r3, #1
 800270e:	617b      	str	r3, [r7, #20]
 8002710:	e004      	b.n	800271c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002712:	4b0f      	ldr	r3, [pc, #60]	; (8002750 <xTaskIncrementTick+0x170>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	3301      	adds	r3, #1
 8002718:	4a0d      	ldr	r2, [pc, #52]	; (8002750 <xTaskIncrementTick+0x170>)
 800271a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800271c:	697b      	ldr	r3, [r7, #20]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3718      	adds	r7, #24
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	200016a4 	.word	0x200016a4
 800272c:	20001680 	.word	0x20001680
 8002730:	20001634 	.word	0x20001634
 8002734:	20001638 	.word	0x20001638
 8002738:	20001694 	.word	0x20001694
 800273c:	2000169c 	.word	0x2000169c
 8002740:	20001684 	.word	0x20001684
 8002744:	200011ac 	.word	0x200011ac
 8002748:	200011a8 	.word	0x200011a8
 800274c:	20001690 	.word	0x20001690
 8002750:	2000168c 	.word	0x2000168c

08002754 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800275a:	4b28      	ldr	r3, [pc, #160]	; (80027fc <vTaskSwitchContext+0xa8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002762:	4b27      	ldr	r3, [pc, #156]	; (8002800 <vTaskSwitchContext+0xac>)
 8002764:	2201      	movs	r2, #1
 8002766:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002768:	e041      	b.n	80027ee <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800276a:	4b25      	ldr	r3, [pc, #148]	; (8002800 <vTaskSwitchContext+0xac>)
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002770:	4b24      	ldr	r3, [pc, #144]	; (8002804 <vTaskSwitchContext+0xb0>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	e010      	b.n	800279a <vTaskSwitchContext+0x46>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10a      	bne.n	8002794 <vTaskSwitchContext+0x40>
	__asm volatile
 800277e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002782:	f383 8811 	msr	BASEPRI, r3
 8002786:	f3bf 8f6f 	isb	sy
 800278a:	f3bf 8f4f 	dsb	sy
 800278e:	607b      	str	r3, [r7, #4]
}
 8002790:	bf00      	nop
 8002792:	e7fe      	b.n	8002792 <vTaskSwitchContext+0x3e>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	3b01      	subs	r3, #1
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	491b      	ldr	r1, [pc, #108]	; (8002808 <vTaskSwitchContext+0xb4>)
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	4613      	mov	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	440b      	add	r3, r1
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0e4      	beq.n	8002778 <vTaskSwitchContext+0x24>
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	4613      	mov	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4a13      	ldr	r2, [pc, #76]	; (8002808 <vTaskSwitchContext+0xb4>)
 80027ba:	4413      	add	r3, r2
 80027bc:	60bb      	str	r3, [r7, #8]
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	605a      	str	r2, [r3, #4]
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	3308      	adds	r3, #8
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d104      	bne.n	80027de <vTaskSwitchContext+0x8a>
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	4a09      	ldr	r2, [pc, #36]	; (800280c <vTaskSwitchContext+0xb8>)
 80027e6:	6013      	str	r3, [r2, #0]
 80027e8:	4a06      	ldr	r2, [pc, #24]	; (8002804 <vTaskSwitchContext+0xb0>)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6013      	str	r3, [r2, #0]
}
 80027ee:	bf00      	nop
 80027f0:	3714      	adds	r7, #20
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	200016a4 	.word	0x200016a4
 8002800:	20001690 	.word	0x20001690
 8002804:	20001684 	.word	0x20001684
 8002808:	200011ac 	.word	0x200011ac
 800280c:	200011a8 	.word	0x200011a8

08002810 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d10a      	bne.n	8002836 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8002820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002824:	f383 8811 	msr	BASEPRI, r3
 8002828:	f3bf 8f6f 	isb	sy
 800282c:	f3bf 8f4f 	dsb	sy
 8002830:	60fb      	str	r3, [r7, #12]
}
 8002832:	bf00      	nop
 8002834:	e7fe      	b.n	8002834 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002836:	4b07      	ldr	r3, [pc, #28]	; (8002854 <vTaskPlaceOnEventList+0x44>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	3318      	adds	r3, #24
 800283c:	4619      	mov	r1, r3
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7fe fe75 	bl	800152e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002844:	2101      	movs	r1, #1
 8002846:	6838      	ldr	r0, [r7, #0]
 8002848:	f000 fbb2 	bl	8002fb0 <prvAddCurrentTaskToDelayedList>
}
 800284c:	bf00      	nop
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	200011a8 	.word	0x200011a8

08002858 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10a      	bne.n	8002880 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800286a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800286e:	f383 8811 	msr	BASEPRI, r3
 8002872:	f3bf 8f6f 	isb	sy
 8002876:	f3bf 8f4f 	dsb	sy
 800287a:	617b      	str	r3, [r7, #20]
}
 800287c:	bf00      	nop
 800287e:	e7fe      	b.n	800287e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002880:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <vTaskPlaceOnEventListRestricted+0x54>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	3318      	adds	r3, #24
 8002886:	4619      	mov	r1, r3
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f7fe fe2c 	bl	80014e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d002      	beq.n	800289a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8002894:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002898:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	68b8      	ldr	r0, [r7, #8]
 800289e:	f000 fb87 	bl	8002fb0 <prvAddCurrentTaskToDelayedList>
	}
 80028a2:	bf00      	nop
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	200011a8 	.word	0x200011a8

080028b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10a      	bne.n	80028dc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80028c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ca:	f383 8811 	msr	BASEPRI, r3
 80028ce:	f3bf 8f6f 	isb	sy
 80028d2:	f3bf 8f4f 	dsb	sy
 80028d6:	60fb      	str	r3, [r7, #12]
}
 80028d8:	bf00      	nop
 80028da:	e7fe      	b.n	80028da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	3318      	adds	r3, #24
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7fe fe5d 	bl	80015a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80028e6:	4b1e      	ldr	r3, [pc, #120]	; (8002960 <xTaskRemoveFromEventList+0xb0>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d11d      	bne.n	800292a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	3304      	adds	r3, #4
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fe fe54 	bl	80015a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028fc:	4b19      	ldr	r3, [pc, #100]	; (8002964 <xTaskRemoveFromEventList+0xb4>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	429a      	cmp	r2, r3
 8002902:	d903      	bls.n	800290c <xTaskRemoveFromEventList+0x5c>
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002908:	4a16      	ldr	r2, [pc, #88]	; (8002964 <xTaskRemoveFromEventList+0xb4>)
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002910:	4613      	mov	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4a13      	ldr	r2, [pc, #76]	; (8002968 <xTaskRemoveFromEventList+0xb8>)
 800291a:	441a      	add	r2, r3
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	3304      	adds	r3, #4
 8002920:	4619      	mov	r1, r3
 8002922:	4610      	mov	r0, r2
 8002924:	f7fe fddf 	bl	80014e6 <vListInsertEnd>
 8002928:	e005      	b.n	8002936 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	3318      	adds	r3, #24
 800292e:	4619      	mov	r1, r3
 8002930:	480e      	ldr	r0, [pc, #56]	; (800296c <xTaskRemoveFromEventList+0xbc>)
 8002932:	f7fe fdd8 	bl	80014e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800293a:	4b0d      	ldr	r3, [pc, #52]	; (8002970 <xTaskRemoveFromEventList+0xc0>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002940:	429a      	cmp	r2, r3
 8002942:	d905      	bls.n	8002950 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002944:	2301      	movs	r3, #1
 8002946:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002948:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <xTaskRemoveFromEventList+0xc4>)
 800294a:	2201      	movs	r2, #1
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	e001      	b.n	8002954 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8002950:	2300      	movs	r3, #0
 8002952:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002954:	697b      	ldr	r3, [r7, #20]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	200016a4 	.word	0x200016a4
 8002964:	20001684 	.word	0x20001684
 8002968:	200011ac 	.word	0x200011ac
 800296c:	2000163c 	.word	0x2000163c
 8002970:	200011a8 	.word	0x200011a8
 8002974:	20001690 	.word	0x20001690

08002978 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002980:	4b06      	ldr	r3, [pc, #24]	; (800299c <vTaskInternalSetTimeOutState+0x24>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002988:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <vTaskInternalSetTimeOutState+0x28>)
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	605a      	str	r2, [r3, #4]
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	20001694 	.word	0x20001694
 80029a0:	20001680 	.word	0x20001680

080029a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b088      	sub	sp, #32
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10a      	bne.n	80029ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80029b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b8:	f383 8811 	msr	BASEPRI, r3
 80029bc:	f3bf 8f6f 	isb	sy
 80029c0:	f3bf 8f4f 	dsb	sy
 80029c4:	613b      	str	r3, [r7, #16]
}
 80029c6:	bf00      	nop
 80029c8:	e7fe      	b.n	80029c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10a      	bne.n	80029e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80029d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d4:	f383 8811 	msr	BASEPRI, r3
 80029d8:	f3bf 8f6f 	isb	sy
 80029dc:	f3bf 8f4f 	dsb	sy
 80029e0:	60fb      	str	r3, [r7, #12]
}
 80029e2:	bf00      	nop
 80029e4:	e7fe      	b.n	80029e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80029e6:	f000 ffb5 	bl	8003954 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80029ea:	4b1d      	ldr	r3, [pc, #116]	; (8002a60 <xTaskCheckForTimeOut+0xbc>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a02:	d102      	bne.n	8002a0a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002a04:	2300      	movs	r3, #0
 8002a06:	61fb      	str	r3, [r7, #28]
 8002a08:	e023      	b.n	8002a52 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	4b15      	ldr	r3, [pc, #84]	; (8002a64 <xTaskCheckForTimeOut+0xc0>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d007      	beq.n	8002a26 <xTaskCheckForTimeOut+0x82>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d302      	bcc.n	8002a26 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002a20:	2301      	movs	r3, #1
 8002a22:	61fb      	str	r3, [r7, #28]
 8002a24:	e015      	b.n	8002a52 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d20b      	bcs.n	8002a48 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	1ad2      	subs	r2, r2, r3
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f7ff ff9b 	bl	8002978 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002a42:	2300      	movs	r3, #0
 8002a44:	61fb      	str	r3, [r7, #28]
 8002a46:	e004      	b.n	8002a52 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002a52:	f000 ffaf 	bl	80039b4 <vPortExitCritical>

	return xReturn;
 8002a56:	69fb      	ldr	r3, [r7, #28]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3720      	adds	r7, #32
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	20001680 	.word	0x20001680
 8002a64:	20001694 	.word	0x20001694

08002a68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002a6c:	4b03      	ldr	r3, [pc, #12]	; (8002a7c <vTaskMissedYield+0x14>)
 8002a6e:	2201      	movs	r2, #1
 8002a70:	601a      	str	r2, [r3, #0]
}
 8002a72:	bf00      	nop
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr
 8002a7c:	20001690 	.word	0x20001690

08002a80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002a88:	f000 f852 	bl	8002b30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002a8c:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <prvIdleTask+0x28>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d9f9      	bls.n	8002a88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002a94:	4b05      	ldr	r3, [pc, #20]	; (8002aac <prvIdleTask+0x2c>)
 8002a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	f3bf 8f4f 	dsb	sy
 8002aa0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002aa4:	e7f0      	b.n	8002a88 <prvIdleTask+0x8>
 8002aa6:	bf00      	nop
 8002aa8:	200011ac 	.word	0x200011ac
 8002aac:	e000ed04 	.word	0xe000ed04

08002ab0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	607b      	str	r3, [r7, #4]
 8002aba:	e00c      	b.n	8002ad6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4a12      	ldr	r2, [pc, #72]	; (8002b10 <prvInitialiseTaskLists+0x60>)
 8002ac8:	4413      	add	r3, r2
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fe fcde 	bl	800148c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	607b      	str	r3, [r7, #4]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b37      	cmp	r3, #55	; 0x37
 8002ada:	d9ef      	bls.n	8002abc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002adc:	480d      	ldr	r0, [pc, #52]	; (8002b14 <prvInitialiseTaskLists+0x64>)
 8002ade:	f7fe fcd5 	bl	800148c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002ae2:	480d      	ldr	r0, [pc, #52]	; (8002b18 <prvInitialiseTaskLists+0x68>)
 8002ae4:	f7fe fcd2 	bl	800148c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002ae8:	480c      	ldr	r0, [pc, #48]	; (8002b1c <prvInitialiseTaskLists+0x6c>)
 8002aea:	f7fe fccf 	bl	800148c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002aee:	480c      	ldr	r0, [pc, #48]	; (8002b20 <prvInitialiseTaskLists+0x70>)
 8002af0:	f7fe fccc 	bl	800148c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002af4:	480b      	ldr	r0, [pc, #44]	; (8002b24 <prvInitialiseTaskLists+0x74>)
 8002af6:	f7fe fcc9 	bl	800148c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002afa:	4b0b      	ldr	r3, [pc, #44]	; (8002b28 <prvInitialiseTaskLists+0x78>)
 8002afc:	4a05      	ldr	r2, [pc, #20]	; (8002b14 <prvInitialiseTaskLists+0x64>)
 8002afe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002b00:	4b0a      	ldr	r3, [pc, #40]	; (8002b2c <prvInitialiseTaskLists+0x7c>)
 8002b02:	4a05      	ldr	r2, [pc, #20]	; (8002b18 <prvInitialiseTaskLists+0x68>)
 8002b04:	601a      	str	r2, [r3, #0]
}
 8002b06:	bf00      	nop
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	200011ac 	.word	0x200011ac
 8002b14:	2000160c 	.word	0x2000160c
 8002b18:	20001620 	.word	0x20001620
 8002b1c:	2000163c 	.word	0x2000163c
 8002b20:	20001650 	.word	0x20001650
 8002b24:	20001668 	.word	0x20001668
 8002b28:	20001634 	.word	0x20001634
 8002b2c:	20001638 	.word	0x20001638

08002b30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b36:	e019      	b.n	8002b6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002b38:	f000 ff0c 	bl	8003954 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b3c:	4b10      	ldr	r3, [pc, #64]	; (8002b80 <prvCheckTasksWaitingTermination+0x50>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3304      	adds	r3, #4
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7fe fd29 	bl	80015a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002b4e:	4b0d      	ldr	r3, [pc, #52]	; (8002b84 <prvCheckTasksWaitingTermination+0x54>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	3b01      	subs	r3, #1
 8002b54:	4a0b      	ldr	r2, [pc, #44]	; (8002b84 <prvCheckTasksWaitingTermination+0x54>)
 8002b56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002b58:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <prvCheckTasksWaitingTermination+0x58>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	4a0a      	ldr	r2, [pc, #40]	; (8002b88 <prvCheckTasksWaitingTermination+0x58>)
 8002b60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002b62:	f000 ff27 	bl	80039b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f810 	bl	8002b8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b6c:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <prvCheckTasksWaitingTermination+0x58>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1e1      	bne.n	8002b38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002b74:	bf00      	nop
 8002b76:	bf00      	nop
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20001650 	.word	0x20001650
 8002b84:	2000167c 	.word	0x2000167c
 8002b88:	20001664 	.word	0x20001664

08002b8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d108      	bne.n	8002bb0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f001 f8c4 	bl	8003d30 <vPortFree>
				vPortFree( pxTCB );
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f001 f8c1 	bl	8003d30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002bae:	e018      	b.n	8002be2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d103      	bne.n	8002bc2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f001 f8b8 	bl	8003d30 <vPortFree>
	}
 8002bc0:	e00f      	b.n	8002be2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d00a      	beq.n	8002be2 <prvDeleteTCB+0x56>
	__asm volatile
 8002bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd0:	f383 8811 	msr	BASEPRI, r3
 8002bd4:	f3bf 8f6f 	isb	sy
 8002bd8:	f3bf 8f4f 	dsb	sy
 8002bdc:	60fb      	str	r3, [r7, #12]
}
 8002bde:	bf00      	nop
 8002be0:	e7fe      	b.n	8002be0 <prvDeleteTCB+0x54>
	}
 8002be2:	bf00      	nop
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
	...

08002bec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bf2:	4b0c      	ldr	r3, [pc, #48]	; (8002c24 <prvResetNextTaskUnblockTime+0x38>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d104      	bne.n	8002c06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002bfc:	4b0a      	ldr	r3, [pc, #40]	; (8002c28 <prvResetNextTaskUnblockTime+0x3c>)
 8002bfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002c04:	e008      	b.n	8002c18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c06:	4b07      	ldr	r3, [pc, #28]	; (8002c24 <prvResetNextTaskUnblockTime+0x38>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	4a04      	ldr	r2, [pc, #16]	; (8002c28 <prvResetNextTaskUnblockTime+0x3c>)
 8002c16:	6013      	str	r3, [r2, #0]
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	20001634 	.word	0x20001634
 8002c28:	2000169c 	.word	0x2000169c

08002c2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002c32:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <xTaskGetSchedulerState+0x34>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d102      	bne.n	8002c40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	607b      	str	r3, [r7, #4]
 8002c3e:	e008      	b.n	8002c52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c40:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <xTaskGetSchedulerState+0x38>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d102      	bne.n	8002c4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002c48:	2302      	movs	r3, #2
 8002c4a:	607b      	str	r3, [r7, #4]
 8002c4c:	e001      	b.n	8002c52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002c52:	687b      	ldr	r3, [r7, #4]
	}
 8002c54:	4618      	mov	r0, r3
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	20001688 	.word	0x20001688
 8002c64:	200016a4 	.word	0x200016a4

08002c68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002c74:	2300      	movs	r3, #0
 8002c76:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d056      	beq.n	8002d2c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002c7e:	4b2e      	ldr	r3, [pc, #184]	; (8002d38 <xTaskPriorityDisinherit+0xd0>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d00a      	beq.n	8002c9e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8002c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8c:	f383 8811 	msr	BASEPRI, r3
 8002c90:	f3bf 8f6f 	isb	sy
 8002c94:	f3bf 8f4f 	dsb	sy
 8002c98:	60fb      	str	r3, [r7, #12]
}
 8002c9a:	bf00      	nop
 8002c9c:	e7fe      	b.n	8002c9c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10a      	bne.n	8002cbc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8002ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002caa:	f383 8811 	msr	BASEPRI, r3
 8002cae:	f3bf 8f6f 	isb	sy
 8002cb2:	f3bf 8f4f 	dsb	sy
 8002cb6:	60bb      	str	r3, [r7, #8]
}
 8002cb8:	bf00      	nop
 8002cba:	e7fe      	b.n	8002cba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cc0:	1e5a      	subs	r2, r3, #1
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d02c      	beq.n	8002d2c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d128      	bne.n	8002d2c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	3304      	adds	r3, #4
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fe fc5e 	bl	80015a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cfc:	4b0f      	ldr	r3, [pc, #60]	; (8002d3c <xTaskPriorityDisinherit+0xd4>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d903      	bls.n	8002d0c <xTaskPriorityDisinherit+0xa4>
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d08:	4a0c      	ldr	r2, [pc, #48]	; (8002d3c <xTaskPriorityDisinherit+0xd4>)
 8002d0a:	6013      	str	r3, [r2, #0]
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d10:	4613      	mov	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4a09      	ldr	r2, [pc, #36]	; (8002d40 <xTaskPriorityDisinherit+0xd8>)
 8002d1a:	441a      	add	r2, r3
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	3304      	adds	r3, #4
 8002d20:	4619      	mov	r1, r3
 8002d22:	4610      	mov	r0, r2
 8002d24:	f7fe fbdf 	bl	80014e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002d2c:	697b      	ldr	r3, [r7, #20]
	}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3718      	adds	r7, #24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	200011a8 	.word	0x200011a8
 8002d3c:	20001684 	.word	0x20001684
 8002d40:	200011ac 	.word	0x200011ac

08002d44 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
 8002d50:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8002d52:	f000 fdff 	bl	8003954 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8002d56:	4b26      	ldr	r3, [pc, #152]	; (8002df0 <xTaskNotifyWait+0xac>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d01a      	beq.n	8002d9a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8002d64:	4b22      	ldr	r3, [pc, #136]	; (8002df0 <xTaskNotifyWait+0xac>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	43d2      	mvns	r2, r2
 8002d6e:	400a      	ands	r2, r1
 8002d70:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8002d72:	4b1f      	ldr	r3, [pc, #124]	; (8002df0 <xTaskNotifyWait+0xac>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00b      	beq.n	8002d9a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002d82:	2101      	movs	r1, #1
 8002d84:	6838      	ldr	r0, [r7, #0]
 8002d86:	f000 f913 	bl	8002fb0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8002d8a:	4b1a      	ldr	r3, [pc, #104]	; (8002df4 <xTaskNotifyWait+0xb0>)
 8002d8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	f3bf 8f4f 	dsb	sy
 8002d96:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8002d9a:	f000 fe0b 	bl	80039b4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8002d9e:	f000 fdd9 	bl	8003954 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d004      	beq.n	8002db2 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8002da8:	4b11      	ldr	r3, [pc, #68]	; (8002df0 <xTaskNotifyWait+0xac>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8002db2:	4b0f      	ldr	r3, [pc, #60]	; (8002df0 <xTaskNotifyWait+0xac>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d002      	beq.n	8002dc6 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	e008      	b.n	8002dd8 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8002dc6:	4b0a      	ldr	r3, [pc, #40]	; (8002df0 <xTaskNotifyWait+0xac>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	43d2      	mvns	r2, r2
 8002dd0:	400a      	ands	r2, r1
 8002dd2:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002dd8:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <xTaskNotifyWait+0xac>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8002de2:	f000 fde7 	bl	80039b4 <vPortExitCritical>

		return xReturn;
 8002de6:	697b      	ldr	r3, [r7, #20]
	}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	200011a8 	.word	0x200011a8
 8002df4:	e000ed04 	.word	0xe000ed04

08002df8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b08e      	sub	sp, #56	; 0x38
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	603b      	str	r3, [r7, #0]
 8002e04:	4613      	mov	r3, r2
 8002e06:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10a      	bne.n	8002e28 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8002e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e16:	f383 8811 	msr	BASEPRI, r3
 8002e1a:	f3bf 8f6f 	isb	sy
 8002e1e:	f3bf 8f4f 	dsb	sy
 8002e22:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e24:	bf00      	nop
 8002e26:	e7fe      	b.n	8002e26 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e28:	f000 fe76 	bl	8003b18 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8002e30:	f3ef 8211 	mrs	r2, BASEPRI
 8002e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e38:	f383 8811 	msr	BASEPRI, r3
 8002e3c:	f3bf 8f6f 	isb	sy
 8002e40:	f3bf 8f4f 	dsb	sy
 8002e44:	623a      	str	r2, [r7, #32]
 8002e46:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8002e48:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8002e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8002e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002e60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8002e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e66:	2202      	movs	r2, #2
 8002e68:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8002e6c:	79fb      	ldrb	r3, [r7, #7]
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	d828      	bhi.n	8002ec4 <xTaskGenericNotifyFromISR+0xcc>
 8002e72:	a201      	add	r2, pc, #4	; (adr r2, 8002e78 <xTaskGenericNotifyFromISR+0x80>)
 8002e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e78:	08002ee5 	.word	0x08002ee5
 8002e7c:	08002e8d 	.word	0x08002e8d
 8002e80:	08002e9b 	.word	0x08002e9b
 8002e84:	08002ea7 	.word	0x08002ea7
 8002e88:	08002eaf 	.word	0x08002eaf
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8002e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	431a      	orrs	r2, r3
 8002e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e96:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8002e98:	e027      	b.n	8002eea <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8002e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9e:	1c5a      	adds	r2, r3, #1
 8002ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8002ea4:	e021      	b.n	8002eea <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8002ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea8:	68ba      	ldr	r2, [r7, #8]
 8002eaa:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8002eac:	e01d      	b.n	8002eea <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002eae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d003      	beq.n	8002ebe <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8002eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb8:	68ba      	ldr	r2, [r7, #8]
 8002eba:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8002ebc:	e015      	b.n	8002eea <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8002ec2:	e012      	b.n	8002eea <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8002ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ecc:	d00c      	beq.n	8002ee8 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8002ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed2:	f383 8811 	msr	BASEPRI, r3
 8002ed6:	f3bf 8f6f 	isb	sy
 8002eda:	f3bf 8f4f 	dsb	sy
 8002ede:	61bb      	str	r3, [r7, #24]
}
 8002ee0:	bf00      	nop
 8002ee2:	e7fe      	b.n	8002ee2 <xTaskGenericNotifyFromISR+0xea>
					break;
 8002ee4:	bf00      	nop
 8002ee6:	e000      	b.n	8002eea <xTaskGenericNotifyFromISR+0xf2>
					break;
 8002ee8:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002eea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d146      	bne.n	8002f80 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00a      	beq.n	8002f10 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8002efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002efe:	f383 8811 	msr	BASEPRI, r3
 8002f02:	f3bf 8f6f 	isb	sy
 8002f06:	f3bf 8f4f 	dsb	sy
 8002f0a:	617b      	str	r3, [r7, #20]
}
 8002f0c:	bf00      	nop
 8002f0e:	e7fe      	b.n	8002f0e <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f10:	4b21      	ldr	r3, [pc, #132]	; (8002f98 <xTaskGenericNotifyFromISR+0x1a0>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d11d      	bne.n	8002f54 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7fe fb3f 	bl	80015a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f26:	4b1d      	ldr	r3, [pc, #116]	; (8002f9c <xTaskGenericNotifyFromISR+0x1a4>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d903      	bls.n	8002f36 <xTaskGenericNotifyFromISR+0x13e>
 8002f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f32:	4a1a      	ldr	r2, [pc, #104]	; (8002f9c <xTaskGenericNotifyFromISR+0x1a4>)
 8002f34:	6013      	str	r3, [r2, #0]
 8002f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4a17      	ldr	r2, [pc, #92]	; (8002fa0 <xTaskGenericNotifyFromISR+0x1a8>)
 8002f44:	441a      	add	r2, r3
 8002f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f48:	3304      	adds	r3, #4
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4610      	mov	r0, r2
 8002f4e:	f7fe faca 	bl	80014e6 <vListInsertEnd>
 8002f52:	e005      	b.n	8002f60 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8002f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f56:	3318      	adds	r3, #24
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4812      	ldr	r0, [pc, #72]	; (8002fa4 <xTaskGenericNotifyFromISR+0x1ac>)
 8002f5c:	f7fe fac3 	bl	80014e6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f64:	4b10      	ldr	r3, [pc, #64]	; (8002fa8 <xTaskGenericNotifyFromISR+0x1b0>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d908      	bls.n	8002f80 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8002f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d002      	beq.n	8002f7a <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8002f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f76:	2201      	movs	r2, #1
 8002f78:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8002f7a:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <xTaskGenericNotifyFromISR+0x1b4>)
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f82:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	f383 8811 	msr	BASEPRI, r3
}
 8002f8a:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8002f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3738      	adds	r7, #56	; 0x38
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	200016a4 	.word	0x200016a4
 8002f9c:	20001684 	.word	0x20001684
 8002fa0:	200011ac 	.word	0x200011ac
 8002fa4:	2000163c 	.word	0x2000163c
 8002fa8:	200011a8 	.word	0x200011a8
 8002fac:	20001690 	.word	0x20001690

08002fb0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002fba:	4b21      	ldr	r3, [pc, #132]	; (8003040 <prvAddCurrentTaskToDelayedList+0x90>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002fc0:	4b20      	ldr	r3, [pc, #128]	; (8003044 <prvAddCurrentTaskToDelayedList+0x94>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fe faea 	bl	80015a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fd2:	d10a      	bne.n	8002fea <prvAddCurrentTaskToDelayedList+0x3a>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d007      	beq.n	8002fea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fda:	4b1a      	ldr	r3, [pc, #104]	; (8003044 <prvAddCurrentTaskToDelayedList+0x94>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	3304      	adds	r3, #4
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4819      	ldr	r0, [pc, #100]	; (8003048 <prvAddCurrentTaskToDelayedList+0x98>)
 8002fe4:	f7fe fa7f 	bl	80014e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002fe8:	e026      	b.n	8003038 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4413      	add	r3, r2
 8002ff0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002ff2:	4b14      	ldr	r3, [pc, #80]	; (8003044 <prvAddCurrentTaskToDelayedList+0x94>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d209      	bcs.n	8003016 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003002:	4b12      	ldr	r3, [pc, #72]	; (800304c <prvAddCurrentTaskToDelayedList+0x9c>)
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	4b0f      	ldr	r3, [pc, #60]	; (8003044 <prvAddCurrentTaskToDelayedList+0x94>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	3304      	adds	r3, #4
 800300c:	4619      	mov	r1, r3
 800300e:	4610      	mov	r0, r2
 8003010:	f7fe fa8d 	bl	800152e <vListInsert>
}
 8003014:	e010      	b.n	8003038 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003016:	4b0e      	ldr	r3, [pc, #56]	; (8003050 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	4b0a      	ldr	r3, [pc, #40]	; (8003044 <prvAddCurrentTaskToDelayedList+0x94>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	3304      	adds	r3, #4
 8003020:	4619      	mov	r1, r3
 8003022:	4610      	mov	r0, r2
 8003024:	f7fe fa83 	bl	800152e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003028:	4b0a      	ldr	r3, [pc, #40]	; (8003054 <prvAddCurrentTaskToDelayedList+0xa4>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68ba      	ldr	r2, [r7, #8]
 800302e:	429a      	cmp	r2, r3
 8003030:	d202      	bcs.n	8003038 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003032:	4a08      	ldr	r2, [pc, #32]	; (8003054 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	6013      	str	r3, [r2, #0]
}
 8003038:	bf00      	nop
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	20001680 	.word	0x20001680
 8003044:	200011a8 	.word	0x200011a8
 8003048:	20001668 	.word	0x20001668
 800304c:	20001638 	.word	0x20001638
 8003050:	20001634 	.word	0x20001634
 8003054:	2000169c 	.word	0x2000169c

08003058 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b08a      	sub	sp, #40	; 0x28
 800305c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800305e:	2300      	movs	r3, #0
 8003060:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003062:	f000 fb07 	bl	8003674 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003066:	4b1c      	ldr	r3, [pc, #112]	; (80030d8 <xTimerCreateTimerTask+0x80>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d021      	beq.n	80030b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800306e:	2300      	movs	r3, #0
 8003070:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003072:	2300      	movs	r3, #0
 8003074:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003076:	1d3a      	adds	r2, r7, #4
 8003078:	f107 0108 	add.w	r1, r7, #8
 800307c:	f107 030c 	add.w	r3, r7, #12
 8003080:	4618      	mov	r0, r3
 8003082:	f7fe f9e9 	bl	8001458 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	9202      	str	r2, [sp, #8]
 800308e:	9301      	str	r3, [sp, #4]
 8003090:	2302      	movs	r3, #2
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	2300      	movs	r3, #0
 8003096:	460a      	mov	r2, r1
 8003098:	4910      	ldr	r1, [pc, #64]	; (80030dc <xTimerCreateTimerTask+0x84>)
 800309a:	4811      	ldr	r0, [pc, #68]	; (80030e0 <xTimerCreateTimerTask+0x88>)
 800309c:	f7fe ff96 	bl	8001fcc <xTaskCreateStatic>
 80030a0:	4603      	mov	r3, r0
 80030a2:	4a10      	ldr	r2, [pc, #64]	; (80030e4 <xTimerCreateTimerTask+0x8c>)
 80030a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80030a6:	4b0f      	ldr	r3, [pc, #60]	; (80030e4 <xTimerCreateTimerTask+0x8c>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80030ae:	2301      	movs	r3, #1
 80030b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10a      	bne.n	80030ce <xTimerCreateTimerTask+0x76>
	__asm volatile
 80030b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030bc:	f383 8811 	msr	BASEPRI, r3
 80030c0:	f3bf 8f6f 	isb	sy
 80030c4:	f3bf 8f4f 	dsb	sy
 80030c8:	613b      	str	r3, [r7, #16]
}
 80030ca:	bf00      	nop
 80030cc:	e7fe      	b.n	80030cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80030ce:	697b      	ldr	r3, [r7, #20]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	200016d8 	.word	0x200016d8
 80030dc:	0800aabc 	.word	0x0800aabc
 80030e0:	0800321d 	.word	0x0800321d
 80030e4:	200016dc 	.word	0x200016dc

080030e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08a      	sub	sp, #40	; 0x28
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
 80030f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80030f6:	2300      	movs	r3, #0
 80030f8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10a      	bne.n	8003116 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003104:	f383 8811 	msr	BASEPRI, r3
 8003108:	f3bf 8f6f 	isb	sy
 800310c:	f3bf 8f4f 	dsb	sy
 8003110:	623b      	str	r3, [r7, #32]
}
 8003112:	bf00      	nop
 8003114:	e7fe      	b.n	8003114 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003116:	4b1a      	ldr	r3, [pc, #104]	; (8003180 <xTimerGenericCommand+0x98>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d02a      	beq.n	8003174 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2b05      	cmp	r3, #5
 800312e:	dc18      	bgt.n	8003162 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003130:	f7ff fd7c 	bl	8002c2c <xTaskGetSchedulerState>
 8003134:	4603      	mov	r3, r0
 8003136:	2b02      	cmp	r3, #2
 8003138:	d109      	bne.n	800314e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800313a:	4b11      	ldr	r3, [pc, #68]	; (8003180 <xTimerGenericCommand+0x98>)
 800313c:	6818      	ldr	r0, [r3, #0]
 800313e:	f107 0110 	add.w	r1, r7, #16
 8003142:	2300      	movs	r3, #0
 8003144:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003146:	f7fe fb59 	bl	80017fc <xQueueGenericSend>
 800314a:	6278      	str	r0, [r7, #36]	; 0x24
 800314c:	e012      	b.n	8003174 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800314e:	4b0c      	ldr	r3, [pc, #48]	; (8003180 <xTimerGenericCommand+0x98>)
 8003150:	6818      	ldr	r0, [r3, #0]
 8003152:	f107 0110 	add.w	r1, r7, #16
 8003156:	2300      	movs	r3, #0
 8003158:	2200      	movs	r2, #0
 800315a:	f7fe fb4f 	bl	80017fc <xQueueGenericSend>
 800315e:	6278      	str	r0, [r7, #36]	; 0x24
 8003160:	e008      	b.n	8003174 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003162:	4b07      	ldr	r3, [pc, #28]	; (8003180 <xTimerGenericCommand+0x98>)
 8003164:	6818      	ldr	r0, [r3, #0]
 8003166:	f107 0110 	add.w	r1, r7, #16
 800316a:	2300      	movs	r3, #0
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	f7fe fc43 	bl	80019f8 <xQueueGenericSendFromISR>
 8003172:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003176:	4618      	mov	r0, r3
 8003178:	3728      	adds	r7, #40	; 0x28
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	200016d8 	.word	0x200016d8

08003184 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b088      	sub	sp, #32
 8003188:	af02      	add	r7, sp, #8
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800318e:	4b22      	ldr	r3, [pc, #136]	; (8003218 <prvProcessExpiredTimer+0x94>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	3304      	adds	r3, #4
 800319c:	4618      	mov	r0, r3
 800319e:	f7fe f9ff 	bl	80015a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d022      	beq.n	80031f6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	699a      	ldr	r2, [r3, #24]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	18d1      	adds	r1, r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	6978      	ldr	r0, [r7, #20]
 80031be:	f000 f8d1 	bl	8003364 <prvInsertTimerInActiveList>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d01f      	beq.n	8003208 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80031c8:	2300      	movs	r3, #0
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	2300      	movs	r3, #0
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	2100      	movs	r1, #0
 80031d2:	6978      	ldr	r0, [r7, #20]
 80031d4:	f7ff ff88 	bl	80030e8 <xTimerGenericCommand>
 80031d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d113      	bne.n	8003208 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80031e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e4:	f383 8811 	msr	BASEPRI, r3
 80031e8:	f3bf 8f6f 	isb	sy
 80031ec:	f3bf 8f4f 	dsb	sy
 80031f0:	60fb      	str	r3, [r7, #12]
}
 80031f2:	bf00      	nop
 80031f4:	e7fe      	b.n	80031f4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80031fc:	f023 0301 	bic.w	r3, r3, #1
 8003200:	b2da      	uxtb	r2, r3
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	6978      	ldr	r0, [r7, #20]
 800320e:	4798      	blx	r3
}
 8003210:	bf00      	nop
 8003212:	3718      	adds	r7, #24
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	200016d0 	.word	0x200016d0

0800321c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003224:	f107 0308 	add.w	r3, r7, #8
 8003228:	4618      	mov	r0, r3
 800322a:	f000 f857 	bl	80032dc <prvGetNextExpireTime>
 800322e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	4619      	mov	r1, r3
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f000 f803 	bl	8003240 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800323a:	f000 f8d5 	bl	80033e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800323e:	e7f1      	b.n	8003224 <prvTimerTask+0x8>

08003240 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800324a:	f7ff f8fb 	bl	8002444 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800324e:	f107 0308 	add.w	r3, r7, #8
 8003252:	4618      	mov	r0, r3
 8003254:	f000 f866 	bl	8003324 <prvSampleTimeNow>
 8003258:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d130      	bne.n	80032c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10a      	bne.n	800327c <prvProcessTimerOrBlockTask+0x3c>
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	429a      	cmp	r2, r3
 800326c:	d806      	bhi.n	800327c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800326e:	f7ff f8f7 	bl	8002460 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003272:	68f9      	ldr	r1, [r7, #12]
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f7ff ff85 	bl	8003184 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800327a:	e024      	b.n	80032c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d008      	beq.n	8003294 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003282:	4b13      	ldr	r3, [pc, #76]	; (80032d0 <prvProcessTimerOrBlockTask+0x90>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <prvProcessTimerOrBlockTask+0x50>
 800328c:	2301      	movs	r3, #1
 800328e:	e000      	b.n	8003292 <prvProcessTimerOrBlockTask+0x52>
 8003290:	2300      	movs	r3, #0
 8003292:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003294:	4b0f      	ldr	r3, [pc, #60]	; (80032d4 <prvProcessTimerOrBlockTask+0x94>)
 8003296:	6818      	ldr	r0, [r3, #0]
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	4619      	mov	r1, r3
 80032a2:	f7fe fe5f 	bl	8001f64 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80032a6:	f7ff f8db 	bl	8002460 <xTaskResumeAll>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10a      	bne.n	80032c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80032b0:	4b09      	ldr	r3, [pc, #36]	; (80032d8 <prvProcessTimerOrBlockTask+0x98>)
 80032b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	f3bf 8f4f 	dsb	sy
 80032bc:	f3bf 8f6f 	isb	sy
}
 80032c0:	e001      	b.n	80032c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80032c2:	f7ff f8cd 	bl	8002460 <xTaskResumeAll>
}
 80032c6:	bf00      	nop
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	200016d4 	.word	0x200016d4
 80032d4:	200016d8 	.word	0x200016d8
 80032d8:	e000ed04 	.word	0xe000ed04

080032dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80032e4:	4b0e      	ldr	r3, [pc, #56]	; (8003320 <prvGetNextExpireTime+0x44>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <prvGetNextExpireTime+0x16>
 80032ee:	2201      	movs	r2, #1
 80032f0:	e000      	b.n	80032f4 <prvGetNextExpireTime+0x18>
 80032f2:	2200      	movs	r2, #0
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d105      	bne.n	800330c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003300:	4b07      	ldr	r3, [pc, #28]	; (8003320 <prvGetNextExpireTime+0x44>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	e001      	b.n	8003310 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800330c:	2300      	movs	r3, #0
 800330e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003310:	68fb      	ldr	r3, [r7, #12]
}
 8003312:	4618      	mov	r0, r3
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	200016d0 	.word	0x200016d0

08003324 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800332c:	f7ff f936 	bl	800259c <xTaskGetTickCount>
 8003330:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003332:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <prvSampleTimeNow+0x3c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	429a      	cmp	r2, r3
 800333a:	d205      	bcs.n	8003348 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800333c:	f000 f936 	bl	80035ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	e002      	b.n	800334e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800334e:	4a04      	ldr	r2, [pc, #16]	; (8003360 <prvSampleTimeNow+0x3c>)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003354:	68fb      	ldr	r3, [r7, #12]
}
 8003356:	4618      	mov	r0, r3
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	200016e0 	.word	0x200016e0

08003364 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
 8003370:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003372:	2300      	movs	r3, #0
 8003374:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	68ba      	ldr	r2, [r7, #8]
 800337a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003382:	68ba      	ldr	r2, [r7, #8]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	429a      	cmp	r2, r3
 8003388:	d812      	bhi.n	80033b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	1ad2      	subs	r2, r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	429a      	cmp	r2, r3
 8003396:	d302      	bcc.n	800339e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003398:	2301      	movs	r3, #1
 800339a:	617b      	str	r3, [r7, #20]
 800339c:	e01b      	b.n	80033d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800339e:	4b10      	ldr	r3, [pc, #64]	; (80033e0 <prvInsertTimerInActiveList+0x7c>)
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	3304      	adds	r3, #4
 80033a6:	4619      	mov	r1, r3
 80033a8:	4610      	mov	r0, r2
 80033aa:	f7fe f8c0 	bl	800152e <vListInsert>
 80033ae:	e012      	b.n	80033d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d206      	bcs.n	80033c6 <prvInsertTimerInActiveList+0x62>
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d302      	bcc.n	80033c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80033c0:	2301      	movs	r3, #1
 80033c2:	617b      	str	r3, [r7, #20]
 80033c4:	e007      	b.n	80033d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80033c6:	4b07      	ldr	r3, [pc, #28]	; (80033e4 <prvInsertTimerInActiveList+0x80>)
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	3304      	adds	r3, #4
 80033ce:	4619      	mov	r1, r3
 80033d0:	4610      	mov	r0, r2
 80033d2:	f7fe f8ac 	bl	800152e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80033d6:	697b      	ldr	r3, [r7, #20]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	200016d4 	.word	0x200016d4
 80033e4:	200016d0 	.word	0x200016d0

080033e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b08e      	sub	sp, #56	; 0x38
 80033ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80033ee:	e0ca      	b.n	8003586 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	da18      	bge.n	8003428 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80033f6:	1d3b      	adds	r3, r7, #4
 80033f8:	3304      	adds	r3, #4
 80033fa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80033fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10a      	bne.n	8003418 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003406:	f383 8811 	msr	BASEPRI, r3
 800340a:	f3bf 8f6f 	isb	sy
 800340e:	f3bf 8f4f 	dsb	sy
 8003412:	61fb      	str	r3, [r7, #28]
}
 8003414:	bf00      	nop
 8003416:	e7fe      	b.n	8003416 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800341e:	6850      	ldr	r0, [r2, #4]
 8003420:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003422:	6892      	ldr	r2, [r2, #8]
 8003424:	4611      	mov	r1, r2
 8003426:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	f2c0 80ab 	blt.w	8003586 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d004      	beq.n	8003446 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800343c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343e:	3304      	adds	r3, #4
 8003440:	4618      	mov	r0, r3
 8003442:	f7fe f8ad 	bl	80015a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003446:	463b      	mov	r3, r7
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff ff6b 	bl	8003324 <prvSampleTimeNow>
 800344e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b09      	cmp	r3, #9
 8003454:	f200 8096 	bhi.w	8003584 <prvProcessReceivedCommands+0x19c>
 8003458:	a201      	add	r2, pc, #4	; (adr r2, 8003460 <prvProcessReceivedCommands+0x78>)
 800345a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345e:	bf00      	nop
 8003460:	08003489 	.word	0x08003489
 8003464:	08003489 	.word	0x08003489
 8003468:	08003489 	.word	0x08003489
 800346c:	080034fd 	.word	0x080034fd
 8003470:	08003511 	.word	0x08003511
 8003474:	0800355b 	.word	0x0800355b
 8003478:	08003489 	.word	0x08003489
 800347c:	08003489 	.word	0x08003489
 8003480:	080034fd 	.word	0x080034fd
 8003484:	08003511 	.word	0x08003511
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800348e:	f043 0301 	orr.w	r3, r3, #1
 8003492:	b2da      	uxtb	r2, r3
 8003494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003496:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	18d1      	adds	r1, r2, r3
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034a8:	f7ff ff5c 	bl	8003364 <prvInsertTimerInActiveList>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d069      	beq.n	8003586 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80034b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034b8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80034ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d05e      	beq.n	8003586 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80034c8:	68ba      	ldr	r2, [r7, #8]
 80034ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	441a      	add	r2, r3
 80034d0:	2300      	movs	r3, #0
 80034d2:	9300      	str	r3, [sp, #0]
 80034d4:	2300      	movs	r3, #0
 80034d6:	2100      	movs	r1, #0
 80034d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034da:	f7ff fe05 	bl	80030e8 <xTimerGenericCommand>
 80034de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d14f      	bne.n	8003586 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80034e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ea:	f383 8811 	msr	BASEPRI, r3
 80034ee:	f3bf 8f6f 	isb	sy
 80034f2:	f3bf 8f4f 	dsb	sy
 80034f6:	61bb      	str	r3, [r7, #24]
}
 80034f8:	bf00      	nop
 80034fa:	e7fe      	b.n	80034fa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80034fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003502:	f023 0301 	bic.w	r3, r3, #1
 8003506:	b2da      	uxtb	r2, r3
 8003508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800350e:	e03a      	b.n	8003586 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003512:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003516:	f043 0301 	orr.w	r3, r3, #1
 800351a:	b2da      	uxtb	r2, r3
 800351c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003522:	68ba      	ldr	r2, [r7, #8]
 8003524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003526:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10a      	bne.n	8003546 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8003530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003534:	f383 8811 	msr	BASEPRI, r3
 8003538:	f3bf 8f6f 	isb	sy
 800353c:	f3bf 8f4f 	dsb	sy
 8003540:	617b      	str	r3, [r7, #20]
}
 8003542:	bf00      	nop
 8003544:	e7fe      	b.n	8003544 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003548:	699a      	ldr	r2, [r3, #24]
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	18d1      	adds	r1, r2, r3
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003552:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003554:	f7ff ff06 	bl	8003364 <prvInsertTimerInActiveList>
					break;
 8003558:	e015      	b.n	8003586 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800355a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d103      	bne.n	8003570 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8003568:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800356a:	f000 fbe1 	bl	8003d30 <vPortFree>
 800356e:	e00a      	b.n	8003586 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003572:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003576:	f023 0301 	bic.w	r3, r3, #1
 800357a:	b2da      	uxtb	r2, r3
 800357c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003582:	e000      	b.n	8003586 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8003584:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003586:	4b08      	ldr	r3, [pc, #32]	; (80035a8 <prvProcessReceivedCommands+0x1c0>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	1d39      	adds	r1, r7, #4
 800358c:	2200      	movs	r2, #0
 800358e:	4618      	mov	r0, r3
 8003590:	f7fe face 	bl	8001b30 <xQueueReceive>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	f47f af2a 	bne.w	80033f0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800359c:	bf00      	nop
 800359e:	bf00      	nop
 80035a0:	3730      	adds	r7, #48	; 0x30
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	200016d8 	.word	0x200016d8

080035ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b088      	sub	sp, #32
 80035b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80035b2:	e048      	b.n	8003646 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80035b4:	4b2d      	ldr	r3, [pc, #180]	; (800366c <prvSwitchTimerLists+0xc0>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035be:	4b2b      	ldr	r3, [pc, #172]	; (800366c <prvSwitchTimerLists+0xc0>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	3304      	adds	r3, #4
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7fd ffe7 	bl	80015a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d02e      	beq.n	8003646 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	4413      	add	r3, r2
 80035f0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d90e      	bls.n	8003618 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003606:	4b19      	ldr	r3, [pc, #100]	; (800366c <prvSwitchTimerLists+0xc0>)
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	3304      	adds	r3, #4
 800360e:	4619      	mov	r1, r3
 8003610:	4610      	mov	r0, r2
 8003612:	f7fd ff8c 	bl	800152e <vListInsert>
 8003616:	e016      	b.n	8003646 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003618:	2300      	movs	r3, #0
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	2300      	movs	r3, #0
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	2100      	movs	r1, #0
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f7ff fd60 	bl	80030e8 <xTimerGenericCommand>
 8003628:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10a      	bne.n	8003646 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8003630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003634:	f383 8811 	msr	BASEPRI, r3
 8003638:	f3bf 8f6f 	isb	sy
 800363c:	f3bf 8f4f 	dsb	sy
 8003640:	603b      	str	r3, [r7, #0]
}
 8003642:	bf00      	nop
 8003644:	e7fe      	b.n	8003644 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003646:	4b09      	ldr	r3, [pc, #36]	; (800366c <prvSwitchTimerLists+0xc0>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1b1      	bne.n	80035b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003650:	4b06      	ldr	r3, [pc, #24]	; (800366c <prvSwitchTimerLists+0xc0>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003656:	4b06      	ldr	r3, [pc, #24]	; (8003670 <prvSwitchTimerLists+0xc4>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a04      	ldr	r2, [pc, #16]	; (800366c <prvSwitchTimerLists+0xc0>)
 800365c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800365e:	4a04      	ldr	r2, [pc, #16]	; (8003670 <prvSwitchTimerLists+0xc4>)
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	6013      	str	r3, [r2, #0]
}
 8003664:	bf00      	nop
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	200016d0 	.word	0x200016d0
 8003670:	200016d4 	.word	0x200016d4

08003674 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800367a:	f000 f96b 	bl	8003954 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800367e:	4b15      	ldr	r3, [pc, #84]	; (80036d4 <prvCheckForValidListAndQueue+0x60>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d120      	bne.n	80036c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003686:	4814      	ldr	r0, [pc, #80]	; (80036d8 <prvCheckForValidListAndQueue+0x64>)
 8003688:	f7fd ff00 	bl	800148c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800368c:	4813      	ldr	r0, [pc, #76]	; (80036dc <prvCheckForValidListAndQueue+0x68>)
 800368e:	f7fd fefd 	bl	800148c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003692:	4b13      	ldr	r3, [pc, #76]	; (80036e0 <prvCheckForValidListAndQueue+0x6c>)
 8003694:	4a10      	ldr	r2, [pc, #64]	; (80036d8 <prvCheckForValidListAndQueue+0x64>)
 8003696:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003698:	4b12      	ldr	r3, [pc, #72]	; (80036e4 <prvCheckForValidListAndQueue+0x70>)
 800369a:	4a10      	ldr	r2, [pc, #64]	; (80036dc <prvCheckForValidListAndQueue+0x68>)
 800369c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800369e:	2300      	movs	r3, #0
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	4b11      	ldr	r3, [pc, #68]	; (80036e8 <prvCheckForValidListAndQueue+0x74>)
 80036a4:	4a11      	ldr	r2, [pc, #68]	; (80036ec <prvCheckForValidListAndQueue+0x78>)
 80036a6:	2110      	movs	r1, #16
 80036a8:	200a      	movs	r0, #10
 80036aa:	f7fe f80b 	bl	80016c4 <xQueueGenericCreateStatic>
 80036ae:	4603      	mov	r3, r0
 80036b0:	4a08      	ldr	r2, [pc, #32]	; (80036d4 <prvCheckForValidListAndQueue+0x60>)
 80036b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80036b4:	4b07      	ldr	r3, [pc, #28]	; (80036d4 <prvCheckForValidListAndQueue+0x60>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d005      	beq.n	80036c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80036bc:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <prvCheckForValidListAndQueue+0x60>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	490b      	ldr	r1, [pc, #44]	; (80036f0 <prvCheckForValidListAndQueue+0x7c>)
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fe fc24 	bl	8001f10 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80036c8:	f000 f974 	bl	80039b4 <vPortExitCritical>
}
 80036cc:	bf00      	nop
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	200016d8 	.word	0x200016d8
 80036d8:	200016a8 	.word	0x200016a8
 80036dc:	200016bc 	.word	0x200016bc
 80036e0:	200016d0 	.word	0x200016d0
 80036e4:	200016d4 	.word	0x200016d4
 80036e8:	20001784 	.word	0x20001784
 80036ec:	200016e4 	.word	0x200016e4
 80036f0:	0800aac4 	.word	0x0800aac4

080036f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	3b04      	subs	r3, #4
 8003704:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800370c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	3b04      	subs	r3, #4
 8003712:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	f023 0201 	bic.w	r2, r3, #1
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	3b04      	subs	r3, #4
 8003722:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003724:	4a0c      	ldr	r2, [pc, #48]	; (8003758 <pxPortInitialiseStack+0x64>)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	3b14      	subs	r3, #20
 800372e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	3b04      	subs	r3, #4
 800373a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f06f 0202 	mvn.w	r2, #2
 8003742:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	3b20      	subs	r3, #32
 8003748:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800374a:	68fb      	ldr	r3, [r7, #12]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	0800375d 	.word	0x0800375d

0800375c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003762:	2300      	movs	r3, #0
 8003764:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003766:	4b12      	ldr	r3, [pc, #72]	; (80037b0 <prvTaskExitError+0x54>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800376e:	d00a      	beq.n	8003786 <prvTaskExitError+0x2a>
	__asm volatile
 8003770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003774:	f383 8811 	msr	BASEPRI, r3
 8003778:	f3bf 8f6f 	isb	sy
 800377c:	f3bf 8f4f 	dsb	sy
 8003780:	60fb      	str	r3, [r7, #12]
}
 8003782:	bf00      	nop
 8003784:	e7fe      	b.n	8003784 <prvTaskExitError+0x28>
	__asm volatile
 8003786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800378a:	f383 8811 	msr	BASEPRI, r3
 800378e:	f3bf 8f6f 	isb	sy
 8003792:	f3bf 8f4f 	dsb	sy
 8003796:	60bb      	str	r3, [r7, #8]
}
 8003798:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800379a:	bf00      	nop
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0fc      	beq.n	800379c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80037a2:	bf00      	nop
 80037a4:	bf00      	nop
 80037a6:	3714      	adds	r7, #20
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	2000007c 	.word	0x2000007c
	...

080037c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80037c0:	4b07      	ldr	r3, [pc, #28]	; (80037e0 <pxCurrentTCBConst2>)
 80037c2:	6819      	ldr	r1, [r3, #0]
 80037c4:	6808      	ldr	r0, [r1, #0]
 80037c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037ca:	f380 8809 	msr	PSP, r0
 80037ce:	f3bf 8f6f 	isb	sy
 80037d2:	f04f 0000 	mov.w	r0, #0
 80037d6:	f380 8811 	msr	BASEPRI, r0
 80037da:	4770      	bx	lr
 80037dc:	f3af 8000 	nop.w

080037e0 <pxCurrentTCBConst2>:
 80037e0:	200011a8 	.word	0x200011a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80037e4:	bf00      	nop
 80037e6:	bf00      	nop

080037e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80037e8:	4808      	ldr	r0, [pc, #32]	; (800380c <prvPortStartFirstTask+0x24>)
 80037ea:	6800      	ldr	r0, [r0, #0]
 80037ec:	6800      	ldr	r0, [r0, #0]
 80037ee:	f380 8808 	msr	MSP, r0
 80037f2:	f04f 0000 	mov.w	r0, #0
 80037f6:	f380 8814 	msr	CONTROL, r0
 80037fa:	b662      	cpsie	i
 80037fc:	b661      	cpsie	f
 80037fe:	f3bf 8f4f 	dsb	sy
 8003802:	f3bf 8f6f 	isb	sy
 8003806:	df00      	svc	0
 8003808:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800380a:	bf00      	nop
 800380c:	e000ed08 	.word	0xe000ed08

08003810 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003816:	4b46      	ldr	r3, [pc, #280]	; (8003930 <xPortStartScheduler+0x120>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a46      	ldr	r2, [pc, #280]	; (8003934 <xPortStartScheduler+0x124>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d10a      	bne.n	8003836 <xPortStartScheduler+0x26>
	__asm volatile
 8003820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003824:	f383 8811 	msr	BASEPRI, r3
 8003828:	f3bf 8f6f 	isb	sy
 800382c:	f3bf 8f4f 	dsb	sy
 8003830:	613b      	str	r3, [r7, #16]
}
 8003832:	bf00      	nop
 8003834:	e7fe      	b.n	8003834 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003836:	4b3e      	ldr	r3, [pc, #248]	; (8003930 <xPortStartScheduler+0x120>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a3f      	ldr	r2, [pc, #252]	; (8003938 <xPortStartScheduler+0x128>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d10a      	bne.n	8003856 <xPortStartScheduler+0x46>
	__asm volatile
 8003840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003844:	f383 8811 	msr	BASEPRI, r3
 8003848:	f3bf 8f6f 	isb	sy
 800384c:	f3bf 8f4f 	dsb	sy
 8003850:	60fb      	str	r3, [r7, #12]
}
 8003852:	bf00      	nop
 8003854:	e7fe      	b.n	8003854 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003856:	4b39      	ldr	r3, [pc, #228]	; (800393c <xPortStartScheduler+0x12c>)
 8003858:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	b2db      	uxtb	r3, r3
 8003860:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	22ff      	movs	r2, #255	; 0xff
 8003866:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	b2db      	uxtb	r3, r3
 800386e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	b2db      	uxtb	r3, r3
 8003874:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003878:	b2da      	uxtb	r2, r3
 800387a:	4b31      	ldr	r3, [pc, #196]	; (8003940 <xPortStartScheduler+0x130>)
 800387c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800387e:	4b31      	ldr	r3, [pc, #196]	; (8003944 <xPortStartScheduler+0x134>)
 8003880:	2207      	movs	r2, #7
 8003882:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003884:	e009      	b.n	800389a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003886:	4b2f      	ldr	r3, [pc, #188]	; (8003944 <xPortStartScheduler+0x134>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	3b01      	subs	r3, #1
 800388c:	4a2d      	ldr	r2, [pc, #180]	; (8003944 <xPortStartScheduler+0x134>)
 800388e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003890:	78fb      	ldrb	r3, [r7, #3]
 8003892:	b2db      	uxtb	r3, r3
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	b2db      	uxtb	r3, r3
 8003898:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800389a:	78fb      	ldrb	r3, [r7, #3]
 800389c:	b2db      	uxtb	r3, r3
 800389e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a2:	2b80      	cmp	r3, #128	; 0x80
 80038a4:	d0ef      	beq.n	8003886 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80038a6:	4b27      	ldr	r3, [pc, #156]	; (8003944 <xPortStartScheduler+0x134>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f1c3 0307 	rsb	r3, r3, #7
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	d00a      	beq.n	80038c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80038b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b6:	f383 8811 	msr	BASEPRI, r3
 80038ba:	f3bf 8f6f 	isb	sy
 80038be:	f3bf 8f4f 	dsb	sy
 80038c2:	60bb      	str	r3, [r7, #8]
}
 80038c4:	bf00      	nop
 80038c6:	e7fe      	b.n	80038c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80038c8:	4b1e      	ldr	r3, [pc, #120]	; (8003944 <xPortStartScheduler+0x134>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	021b      	lsls	r3, r3, #8
 80038ce:	4a1d      	ldr	r2, [pc, #116]	; (8003944 <xPortStartScheduler+0x134>)
 80038d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80038d2:	4b1c      	ldr	r3, [pc, #112]	; (8003944 <xPortStartScheduler+0x134>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038da:	4a1a      	ldr	r2, [pc, #104]	; (8003944 <xPortStartScheduler+0x134>)
 80038dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80038e6:	4b18      	ldr	r3, [pc, #96]	; (8003948 <xPortStartScheduler+0x138>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a17      	ldr	r2, [pc, #92]	; (8003948 <xPortStartScheduler+0x138>)
 80038ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80038f2:	4b15      	ldr	r3, [pc, #84]	; (8003948 <xPortStartScheduler+0x138>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a14      	ldr	r2, [pc, #80]	; (8003948 <xPortStartScheduler+0x138>)
 80038f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80038fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80038fe:	f000 f8dd 	bl	8003abc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003902:	4b12      	ldr	r3, [pc, #72]	; (800394c <xPortStartScheduler+0x13c>)
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003908:	f000 f8fc 	bl	8003b04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800390c:	4b10      	ldr	r3, [pc, #64]	; (8003950 <xPortStartScheduler+0x140>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a0f      	ldr	r2, [pc, #60]	; (8003950 <xPortStartScheduler+0x140>)
 8003912:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003916:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003918:	f7ff ff66 	bl	80037e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800391c:	f7fe ff1a 	bl	8002754 <vTaskSwitchContext>
	prvTaskExitError();
 8003920:	f7ff ff1c 	bl	800375c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3718      	adds	r7, #24
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	e000ed00 	.word	0xe000ed00
 8003934:	410fc271 	.word	0x410fc271
 8003938:	410fc270 	.word	0x410fc270
 800393c:	e000e400 	.word	0xe000e400
 8003940:	200017d4 	.word	0x200017d4
 8003944:	200017d8 	.word	0x200017d8
 8003948:	e000ed20 	.word	0xe000ed20
 800394c:	2000007c 	.word	0x2000007c
 8003950:	e000ef34 	.word	0xe000ef34

08003954 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
	__asm volatile
 800395a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395e:	f383 8811 	msr	BASEPRI, r3
 8003962:	f3bf 8f6f 	isb	sy
 8003966:	f3bf 8f4f 	dsb	sy
 800396a:	607b      	str	r3, [r7, #4]
}
 800396c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800396e:	4b0f      	ldr	r3, [pc, #60]	; (80039ac <vPortEnterCritical+0x58>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	3301      	adds	r3, #1
 8003974:	4a0d      	ldr	r2, [pc, #52]	; (80039ac <vPortEnterCritical+0x58>)
 8003976:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003978:	4b0c      	ldr	r3, [pc, #48]	; (80039ac <vPortEnterCritical+0x58>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d10f      	bne.n	80039a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003980:	4b0b      	ldr	r3, [pc, #44]	; (80039b0 <vPortEnterCritical+0x5c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00a      	beq.n	80039a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800398a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398e:	f383 8811 	msr	BASEPRI, r3
 8003992:	f3bf 8f6f 	isb	sy
 8003996:	f3bf 8f4f 	dsb	sy
 800399a:	603b      	str	r3, [r7, #0]
}
 800399c:	bf00      	nop
 800399e:	e7fe      	b.n	800399e <vPortEnterCritical+0x4a>
	}
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	2000007c 	.word	0x2000007c
 80039b0:	e000ed04 	.word	0xe000ed04

080039b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80039ba:	4b12      	ldr	r3, [pc, #72]	; (8003a04 <vPortExitCritical+0x50>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10a      	bne.n	80039d8 <vPortExitCritical+0x24>
	__asm volatile
 80039c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c6:	f383 8811 	msr	BASEPRI, r3
 80039ca:	f3bf 8f6f 	isb	sy
 80039ce:	f3bf 8f4f 	dsb	sy
 80039d2:	607b      	str	r3, [r7, #4]
}
 80039d4:	bf00      	nop
 80039d6:	e7fe      	b.n	80039d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80039d8:	4b0a      	ldr	r3, [pc, #40]	; (8003a04 <vPortExitCritical+0x50>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	3b01      	subs	r3, #1
 80039de:	4a09      	ldr	r2, [pc, #36]	; (8003a04 <vPortExitCritical+0x50>)
 80039e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80039e2:	4b08      	ldr	r3, [pc, #32]	; (8003a04 <vPortExitCritical+0x50>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d105      	bne.n	80039f6 <vPortExitCritical+0x42>
 80039ea:	2300      	movs	r3, #0
 80039ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	f383 8811 	msr	BASEPRI, r3
}
 80039f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	2000007c 	.word	0x2000007c
	...

08003a10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003a10:	f3ef 8009 	mrs	r0, PSP
 8003a14:	f3bf 8f6f 	isb	sy
 8003a18:	4b15      	ldr	r3, [pc, #84]	; (8003a70 <pxCurrentTCBConst>)
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	f01e 0f10 	tst.w	lr, #16
 8003a20:	bf08      	it	eq
 8003a22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003a26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a2a:	6010      	str	r0, [r2, #0]
 8003a2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003a30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003a34:	f380 8811 	msr	BASEPRI, r0
 8003a38:	f3bf 8f4f 	dsb	sy
 8003a3c:	f3bf 8f6f 	isb	sy
 8003a40:	f7fe fe88 	bl	8002754 <vTaskSwitchContext>
 8003a44:	f04f 0000 	mov.w	r0, #0
 8003a48:	f380 8811 	msr	BASEPRI, r0
 8003a4c:	bc09      	pop	{r0, r3}
 8003a4e:	6819      	ldr	r1, [r3, #0]
 8003a50:	6808      	ldr	r0, [r1, #0]
 8003a52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a56:	f01e 0f10 	tst.w	lr, #16
 8003a5a:	bf08      	it	eq
 8003a5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003a60:	f380 8809 	msr	PSP, r0
 8003a64:	f3bf 8f6f 	isb	sy
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	f3af 8000 	nop.w

08003a70 <pxCurrentTCBConst>:
 8003a70:	200011a8 	.word	0x200011a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003a74:	bf00      	nop
 8003a76:	bf00      	nop

08003a78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8003a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a82:	f383 8811 	msr	BASEPRI, r3
 8003a86:	f3bf 8f6f 	isb	sy
 8003a8a:	f3bf 8f4f 	dsb	sy
 8003a8e:	607b      	str	r3, [r7, #4]
}
 8003a90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003a92:	f7fe fda5 	bl	80025e0 <xTaskIncrementTick>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d003      	beq.n	8003aa4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003a9c:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <xPortSysTickHandler+0x40>)
 8003a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	f383 8811 	msr	BASEPRI, r3
}
 8003aae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003ab0:	bf00      	nop
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	e000ed04 	.word	0xe000ed04

08003abc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003ac0:	4b0b      	ldr	r3, [pc, #44]	; (8003af0 <vPortSetupTimerInterrupt+0x34>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003ac6:	4b0b      	ldr	r3, [pc, #44]	; (8003af4 <vPortSetupTimerInterrupt+0x38>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003acc:	4b0a      	ldr	r3, [pc, #40]	; (8003af8 <vPortSetupTimerInterrupt+0x3c>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a0a      	ldr	r2, [pc, #40]	; (8003afc <vPortSetupTimerInterrupt+0x40>)
 8003ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad6:	099b      	lsrs	r3, r3, #6
 8003ad8:	4a09      	ldr	r2, [pc, #36]	; (8003b00 <vPortSetupTimerInterrupt+0x44>)
 8003ada:	3b01      	subs	r3, #1
 8003adc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003ade:	4b04      	ldr	r3, [pc, #16]	; (8003af0 <vPortSetupTimerInterrupt+0x34>)
 8003ae0:	2207      	movs	r2, #7
 8003ae2:	601a      	str	r2, [r3, #0]
}
 8003ae4:	bf00      	nop
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	e000e010 	.word	0xe000e010
 8003af4:	e000e018 	.word	0xe000e018
 8003af8:	20000088 	.word	0x20000088
 8003afc:	10624dd3 	.word	0x10624dd3
 8003b00:	e000e014 	.word	0xe000e014

08003b04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003b04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003b14 <vPortEnableVFP+0x10>
 8003b08:	6801      	ldr	r1, [r0, #0]
 8003b0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003b0e:	6001      	str	r1, [r0, #0]
 8003b10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003b12:	bf00      	nop
 8003b14:	e000ed88 	.word	0xe000ed88

08003b18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003b1e:	f3ef 8305 	mrs	r3, IPSR
 8003b22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2b0f      	cmp	r3, #15
 8003b28:	d914      	bls.n	8003b54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003b2a:	4a17      	ldr	r2, [pc, #92]	; (8003b88 <vPortValidateInterruptPriority+0x70>)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4413      	add	r3, r2
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003b34:	4b15      	ldr	r3, [pc, #84]	; (8003b8c <vPortValidateInterruptPriority+0x74>)
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	7afa      	ldrb	r2, [r7, #11]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d20a      	bcs.n	8003b54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b42:	f383 8811 	msr	BASEPRI, r3
 8003b46:	f3bf 8f6f 	isb	sy
 8003b4a:	f3bf 8f4f 	dsb	sy
 8003b4e:	607b      	str	r3, [r7, #4]
}
 8003b50:	bf00      	nop
 8003b52:	e7fe      	b.n	8003b52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003b54:	4b0e      	ldr	r3, [pc, #56]	; (8003b90 <vPortValidateInterruptPriority+0x78>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b5c:	4b0d      	ldr	r3, [pc, #52]	; (8003b94 <vPortValidateInterruptPriority+0x7c>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d90a      	bls.n	8003b7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8003b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b68:	f383 8811 	msr	BASEPRI, r3
 8003b6c:	f3bf 8f6f 	isb	sy
 8003b70:	f3bf 8f4f 	dsb	sy
 8003b74:	603b      	str	r3, [r7, #0]
}
 8003b76:	bf00      	nop
 8003b78:	e7fe      	b.n	8003b78 <vPortValidateInterruptPriority+0x60>
	}
 8003b7a:	bf00      	nop
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	e000e3f0 	.word	0xe000e3f0
 8003b8c:	200017d4 	.word	0x200017d4
 8003b90:	e000ed0c 	.word	0xe000ed0c
 8003b94:	200017d8 	.word	0x200017d8

08003b98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b08a      	sub	sp, #40	; 0x28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003ba4:	f7fe fc4e 	bl	8002444 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003ba8:	4b5b      	ldr	r3, [pc, #364]	; (8003d18 <pvPortMalloc+0x180>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003bb0:	f000 f920 	bl	8003df4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003bb4:	4b59      	ldr	r3, [pc, #356]	; (8003d1c <pvPortMalloc+0x184>)
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f040 8093 	bne.w	8003ce8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d01d      	beq.n	8003c04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003bc8:	2208      	movs	r2, #8
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4413      	add	r3, r2
 8003bce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f003 0307 	and.w	r3, r3, #7
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d014      	beq.n	8003c04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f023 0307 	bic.w	r3, r3, #7
 8003be0:	3308      	adds	r3, #8
 8003be2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f003 0307 	and.w	r3, r3, #7
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00a      	beq.n	8003c04 <pvPortMalloc+0x6c>
	__asm volatile
 8003bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf2:	f383 8811 	msr	BASEPRI, r3
 8003bf6:	f3bf 8f6f 	isb	sy
 8003bfa:	f3bf 8f4f 	dsb	sy
 8003bfe:	617b      	str	r3, [r7, #20]
}
 8003c00:	bf00      	nop
 8003c02:	e7fe      	b.n	8003c02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d06e      	beq.n	8003ce8 <pvPortMalloc+0x150>
 8003c0a:	4b45      	ldr	r3, [pc, #276]	; (8003d20 <pvPortMalloc+0x188>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d869      	bhi.n	8003ce8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003c14:	4b43      	ldr	r3, [pc, #268]	; (8003d24 <pvPortMalloc+0x18c>)
 8003c16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003c18:	4b42      	ldr	r3, [pc, #264]	; (8003d24 <pvPortMalloc+0x18c>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c1e:	e004      	b.n	8003c2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d903      	bls.n	8003c3c <pvPortMalloc+0xa4>
 8003c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1f1      	bne.n	8003c20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003c3c:	4b36      	ldr	r3, [pc, #216]	; (8003d18 <pvPortMalloc+0x180>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d050      	beq.n	8003ce8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003c46:	6a3b      	ldr	r3, [r7, #32]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2208      	movs	r2, #8
 8003c4c:	4413      	add	r3, r2
 8003c4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	6a3b      	ldr	r3, [r7, #32]
 8003c56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	1ad2      	subs	r2, r2, r3
 8003c60:	2308      	movs	r3, #8
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d91f      	bls.n	8003ca8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	f003 0307 	and.w	r3, r3, #7
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00a      	beq.n	8003c90 <pvPortMalloc+0xf8>
	__asm volatile
 8003c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7e:	f383 8811 	msr	BASEPRI, r3
 8003c82:	f3bf 8f6f 	isb	sy
 8003c86:	f3bf 8f4f 	dsb	sy
 8003c8a:	613b      	str	r3, [r7, #16]
}
 8003c8c:	bf00      	nop
 8003c8e:	e7fe      	b.n	8003c8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	1ad2      	subs	r2, r2, r3
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003ca2:	69b8      	ldr	r0, [r7, #24]
 8003ca4:	f000 f908 	bl	8003eb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003ca8:	4b1d      	ldr	r3, [pc, #116]	; (8003d20 <pvPortMalloc+0x188>)
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	4a1b      	ldr	r2, [pc, #108]	; (8003d20 <pvPortMalloc+0x188>)
 8003cb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003cb6:	4b1a      	ldr	r3, [pc, #104]	; (8003d20 <pvPortMalloc+0x188>)
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	4b1b      	ldr	r3, [pc, #108]	; (8003d28 <pvPortMalloc+0x190>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d203      	bcs.n	8003cca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003cc2:	4b17      	ldr	r3, [pc, #92]	; (8003d20 <pvPortMalloc+0x188>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a18      	ldr	r2, [pc, #96]	; (8003d28 <pvPortMalloc+0x190>)
 8003cc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	4b13      	ldr	r3, [pc, #76]	; (8003d1c <pvPortMalloc+0x184>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	2200      	movs	r2, #0
 8003cdc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003cde:	4b13      	ldr	r3, [pc, #76]	; (8003d2c <pvPortMalloc+0x194>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	4a11      	ldr	r2, [pc, #68]	; (8003d2c <pvPortMalloc+0x194>)
 8003ce6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003ce8:	f7fe fbba 	bl	8002460 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	f003 0307 	and.w	r3, r3, #7
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00a      	beq.n	8003d0c <pvPortMalloc+0x174>
	__asm volatile
 8003cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfa:	f383 8811 	msr	BASEPRI, r3
 8003cfe:	f3bf 8f6f 	isb	sy
 8003d02:	f3bf 8f4f 	dsb	sy
 8003d06:	60fb      	str	r3, [r7, #12]
}
 8003d08:	bf00      	nop
 8003d0a:	e7fe      	b.n	8003d0a <pvPortMalloc+0x172>
	return pvReturn;
 8003d0c:	69fb      	ldr	r3, [r7, #28]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3728      	adds	r7, #40	; 0x28
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	2000239c 	.word	0x2000239c
 8003d1c:	200023b0 	.word	0x200023b0
 8003d20:	200023a0 	.word	0x200023a0
 8003d24:	20002394 	.word	0x20002394
 8003d28:	200023a4 	.word	0x200023a4
 8003d2c:	200023a8 	.word	0x200023a8

08003d30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d04d      	beq.n	8003dde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003d42:	2308      	movs	r3, #8
 8003d44:	425b      	negs	r3, r3
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	4413      	add	r3, r2
 8003d4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	4b24      	ldr	r3, [pc, #144]	; (8003de8 <vPortFree+0xb8>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10a      	bne.n	8003d74 <vPortFree+0x44>
	__asm volatile
 8003d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d62:	f383 8811 	msr	BASEPRI, r3
 8003d66:	f3bf 8f6f 	isb	sy
 8003d6a:	f3bf 8f4f 	dsb	sy
 8003d6e:	60fb      	str	r3, [r7, #12]
}
 8003d70:	bf00      	nop
 8003d72:	e7fe      	b.n	8003d72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00a      	beq.n	8003d92 <vPortFree+0x62>
	__asm volatile
 8003d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d80:	f383 8811 	msr	BASEPRI, r3
 8003d84:	f3bf 8f6f 	isb	sy
 8003d88:	f3bf 8f4f 	dsb	sy
 8003d8c:	60bb      	str	r3, [r7, #8]
}
 8003d8e:	bf00      	nop
 8003d90:	e7fe      	b.n	8003d90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	4b14      	ldr	r3, [pc, #80]	; (8003de8 <vPortFree+0xb8>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d01e      	beq.n	8003dde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d11a      	bne.n	8003dde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	4b0e      	ldr	r3, [pc, #56]	; (8003de8 <vPortFree+0xb8>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	43db      	mvns	r3, r3
 8003db2:	401a      	ands	r2, r3
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003db8:	f7fe fb44 	bl	8002444 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	4b0a      	ldr	r3, [pc, #40]	; (8003dec <vPortFree+0xbc>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	4a09      	ldr	r2, [pc, #36]	; (8003dec <vPortFree+0xbc>)
 8003dc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003dca:	6938      	ldr	r0, [r7, #16]
 8003dcc:	f000 f874 	bl	8003eb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003dd0:	4b07      	ldr	r3, [pc, #28]	; (8003df0 <vPortFree+0xc0>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	4a06      	ldr	r2, [pc, #24]	; (8003df0 <vPortFree+0xc0>)
 8003dd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003dda:	f7fe fb41 	bl	8002460 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003dde:	bf00      	nop
 8003de0:	3718      	adds	r7, #24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	200023b0 	.word	0x200023b0
 8003dec:	200023a0 	.word	0x200023a0
 8003df0:	200023ac 	.word	0x200023ac

08003df4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003dfa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003dfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003e00:	4b27      	ldr	r3, [pc, #156]	; (8003ea0 <prvHeapInit+0xac>)
 8003e02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f003 0307 	and.w	r3, r3, #7
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00c      	beq.n	8003e28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	3307      	adds	r3, #7
 8003e12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f023 0307 	bic.w	r3, r3, #7
 8003e1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	4a1f      	ldr	r2, [pc, #124]	; (8003ea0 <prvHeapInit+0xac>)
 8003e24:	4413      	add	r3, r2
 8003e26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003e2c:	4a1d      	ldr	r2, [pc, #116]	; (8003ea4 <prvHeapInit+0xb0>)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003e32:	4b1c      	ldr	r3, [pc, #112]	; (8003ea4 <prvHeapInit+0xb0>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003e40:	2208      	movs	r2, #8
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	1a9b      	subs	r3, r3, r2
 8003e46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f023 0307 	bic.w	r3, r3, #7
 8003e4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4a15      	ldr	r2, [pc, #84]	; (8003ea8 <prvHeapInit+0xb4>)
 8003e54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003e56:	4b14      	ldr	r3, [pc, #80]	; (8003ea8 <prvHeapInit+0xb4>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003e5e:	4b12      	ldr	r3, [pc, #72]	; (8003ea8 <prvHeapInit+0xb4>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	1ad2      	subs	r2, r2, r3
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003e74:	4b0c      	ldr	r3, [pc, #48]	; (8003ea8 <prvHeapInit+0xb4>)
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	4a0a      	ldr	r2, [pc, #40]	; (8003eac <prvHeapInit+0xb8>)
 8003e82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	4a09      	ldr	r2, [pc, #36]	; (8003eb0 <prvHeapInit+0xbc>)
 8003e8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003e8c:	4b09      	ldr	r3, [pc, #36]	; (8003eb4 <prvHeapInit+0xc0>)
 8003e8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003e92:	601a      	str	r2, [r3, #0]
}
 8003e94:	bf00      	nop
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr
 8003ea0:	200017dc 	.word	0x200017dc
 8003ea4:	20002394 	.word	0x20002394
 8003ea8:	2000239c 	.word	0x2000239c
 8003eac:	200023a4 	.word	0x200023a4
 8003eb0:	200023a0 	.word	0x200023a0
 8003eb4:	200023b0 	.word	0x200023b0

08003eb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003ec0:	4b28      	ldr	r3, [pc, #160]	; (8003f64 <prvInsertBlockIntoFreeList+0xac>)
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	e002      	b.n	8003ecc <prvInsertBlockIntoFreeList+0x14>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d8f7      	bhi.n	8003ec6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d108      	bne.n	8003efa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	441a      	add	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	441a      	add	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d118      	bne.n	8003f40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	4b15      	ldr	r3, [pc, #84]	; (8003f68 <prvInsertBlockIntoFreeList+0xb0>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d00d      	beq.n	8003f36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	441a      	add	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	e008      	b.n	8003f48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003f36:	4b0c      	ldr	r3, [pc, #48]	; (8003f68 <prvInsertBlockIntoFreeList+0xb0>)
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	e003      	b.n	8003f48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d002      	beq.n	8003f56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f56:	bf00      	nop
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	20002394 	.word	0x20002394
 8003f68:	2000239c 	.word	0x2000239c

08003f6c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003f72:	2300      	movs	r3, #0
 8003f74:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set In terrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f76:	2003      	movs	r0, #3
 8003f78:	f000 f994 	bl	80042a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f7c:	2000      	movs	r0, #0
 8003f7e:	f000 f80d 	bl	8003f9c <HAL_InitTick>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d002      	beq.n	8003f8e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	71fb      	strb	r3, [r7, #7]
 8003f8c:	e001      	b.n	8003f92 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003f8e:	f004 ff63 	bl	8008e58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003f92:	79fb      	ldrb	r3, [r7, #7]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3708      	adds	r7, #8
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003fa8:	4b17      	ldr	r3, [pc, #92]	; (8004008 <HAL_InitTick+0x6c>)
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d023      	beq.n	8003ff8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003fb0:	4b16      	ldr	r3, [pc, #88]	; (800400c <HAL_InitTick+0x70>)
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	4b14      	ldr	r3, [pc, #80]	; (8004008 <HAL_InitTick+0x6c>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	4619      	mov	r1, r3
 8003fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 f9af 	bl	800432a <HAL_SYSTICK_Config>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10f      	bne.n	8003ff2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2b0f      	cmp	r3, #15
 8003fd6:	d809      	bhi.n	8003fec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fd8:	2200      	movs	r2, #0
 8003fda:	6879      	ldr	r1, [r7, #4]
 8003fdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fe0:	f000 f96b 	bl	80042ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003fe4:	4a0a      	ldr	r2, [pc, #40]	; (8004010 <HAL_InitTick+0x74>)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	e007      	b.n	8003ffc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	73fb      	strb	r3, [r7, #15]
 8003ff0:	e004      	b.n	8003ffc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	73fb      	strb	r3, [r7, #15]
 8003ff6:	e001      	b.n	8003ffc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	20000084 	.word	0x20000084
 800400c:	20000088 	.word	0x20000088
 8004010:	20000080 	.word	0x20000080

08004014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
    //return xTaskGetTickCount();
    return uwTick;
 8004018:	4b03      	ldr	r3, [pc, #12]	; (8004028 <HAL_GetTick+0x14>)
 800401a:	681b      	ldr	r3, [r3, #0]
}
 800401c:	4618      	mov	r0, r3
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	200023b4 	.word	0x200023b4

0800402c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004034:	f7ff ffee 	bl	8004014 <HAL_GetTick>
 8004038:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004044:	d005      	beq.n	8004052 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004046:	4b0a      	ldr	r3, [pc, #40]	; (8004070 <HAL_Delay+0x44>)
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	461a      	mov	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4413      	add	r3, r2
 8004050:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004052:	bf00      	nop
 8004054:	f7ff ffde 	bl	8004014 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	429a      	cmp	r2, r3
 8004062:	d8f7      	bhi.n	8004054 <HAL_Delay+0x28>
  {
  }
}
 8004064:	bf00      	nop
 8004066:	bf00      	nop
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	20000084 	.word	0x20000084

08004074 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8004078:	4b03      	ldr	r3, [pc, #12]	; (8004088 <HAL_GetUIDw0+0x14>)
 800407a:	681b      	ldr	r3, [r3, #0]
}
 800407c:	4618      	mov	r0, r3
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	1fff7590 	.word	0x1fff7590

0800408c <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8004090:	4b03      	ldr	r3, [pc, #12]	; (80040a0 <HAL_GetUIDw1+0x14>)
 8004092:	681b      	ldr	r3, [r3, #0]
}
 8004094:	4618      	mov	r0, r3
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	1fff7594 	.word	0x1fff7594

080040a4 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80040a8:	4b03      	ldr	r3, [pc, #12]	; (80040b8 <HAL_GetUIDw2+0x14>)
 80040aa:	681b      	ldr	r3, [r3, #0]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	1fff7598 	.word	0x1fff7598

080040bc <__NVIC_SetPriorityGrouping>:
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f003 0307 	and.w	r3, r3, #7
 80040ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040cc:	4b0c      	ldr	r3, [pc, #48]	; (8004100 <__NVIC_SetPriorityGrouping+0x44>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040d8:	4013      	ands	r3, r2
 80040da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040ee:	4a04      	ldr	r2, [pc, #16]	; (8004100 <__NVIC_SetPriorityGrouping+0x44>)
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	60d3      	str	r3, [r2, #12]
}
 80040f4:	bf00      	nop
 80040f6:	3714      	adds	r7, #20
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	e000ed00 	.word	0xe000ed00

08004104 <__NVIC_GetPriorityGrouping>:
{
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004108:	4b04      	ldr	r3, [pc, #16]	; (800411c <__NVIC_GetPriorityGrouping+0x18>)
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	0a1b      	lsrs	r3, r3, #8
 800410e:	f003 0307 	and.w	r3, r3, #7
}
 8004112:	4618      	mov	r0, r3
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	e000ed00 	.word	0xe000ed00

08004120 <__NVIC_EnableIRQ>:
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	4603      	mov	r3, r0
 8004128:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800412a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800412e:	2b00      	cmp	r3, #0
 8004130:	db0b      	blt.n	800414a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004132:	79fb      	ldrb	r3, [r7, #7]
 8004134:	f003 021f 	and.w	r2, r3, #31
 8004138:	4907      	ldr	r1, [pc, #28]	; (8004158 <__NVIC_EnableIRQ+0x38>)
 800413a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800413e:	095b      	lsrs	r3, r3, #5
 8004140:	2001      	movs	r0, #1
 8004142:	fa00 f202 	lsl.w	r2, r0, r2
 8004146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800414a:	bf00      	nop
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	e000e100 	.word	0xe000e100

0800415c <__NVIC_DisableIRQ>:
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	4603      	mov	r3, r0
 8004164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800416a:	2b00      	cmp	r3, #0
 800416c:	db12      	blt.n	8004194 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800416e:	79fb      	ldrb	r3, [r7, #7]
 8004170:	f003 021f 	and.w	r2, r3, #31
 8004174:	490a      	ldr	r1, [pc, #40]	; (80041a0 <__NVIC_DisableIRQ+0x44>)
 8004176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800417a:	095b      	lsrs	r3, r3, #5
 800417c:	2001      	movs	r0, #1
 800417e:	fa00 f202 	lsl.w	r2, r0, r2
 8004182:	3320      	adds	r3, #32
 8004184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004188:	f3bf 8f4f 	dsb	sy
}
 800418c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800418e:	f3bf 8f6f 	isb	sy
}
 8004192:	bf00      	nop
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	e000e100 	.word	0xe000e100

080041a4 <__NVIC_SetPriority>:
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	4603      	mov	r3, r0
 80041ac:	6039      	str	r1, [r7, #0]
 80041ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	db0a      	blt.n	80041ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	490c      	ldr	r1, [pc, #48]	; (80041f0 <__NVIC_SetPriority+0x4c>)
 80041be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041c2:	0112      	lsls	r2, r2, #4
 80041c4:	b2d2      	uxtb	r2, r2
 80041c6:	440b      	add	r3, r1
 80041c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80041cc:	e00a      	b.n	80041e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	b2da      	uxtb	r2, r3
 80041d2:	4908      	ldr	r1, [pc, #32]	; (80041f4 <__NVIC_SetPriority+0x50>)
 80041d4:	79fb      	ldrb	r3, [r7, #7]
 80041d6:	f003 030f 	and.w	r3, r3, #15
 80041da:	3b04      	subs	r3, #4
 80041dc:	0112      	lsls	r2, r2, #4
 80041de:	b2d2      	uxtb	r2, r2
 80041e0:	440b      	add	r3, r1
 80041e2:	761a      	strb	r2, [r3, #24]
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	e000e100 	.word	0xe000e100
 80041f4:	e000ed00 	.word	0xe000ed00

080041f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b089      	sub	sp, #36	; 0x24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	f1c3 0307 	rsb	r3, r3, #7
 8004212:	2b04      	cmp	r3, #4
 8004214:	bf28      	it	cs
 8004216:	2304      	movcs	r3, #4
 8004218:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	3304      	adds	r3, #4
 800421e:	2b06      	cmp	r3, #6
 8004220:	d902      	bls.n	8004228 <NVIC_EncodePriority+0x30>
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	3b03      	subs	r3, #3
 8004226:	e000      	b.n	800422a <NVIC_EncodePriority+0x32>
 8004228:	2300      	movs	r3, #0
 800422a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800422c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	fa02 f303 	lsl.w	r3, r2, r3
 8004236:	43da      	mvns	r2, r3
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	401a      	ands	r2, r3
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004240:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	fa01 f303 	lsl.w	r3, r1, r3
 800424a:	43d9      	mvns	r1, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004250:	4313      	orrs	r3, r2
         );
}
 8004252:	4618      	mov	r0, r3
 8004254:	3724      	adds	r7, #36	; 0x24
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
	...

08004260 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	3b01      	subs	r3, #1
 800426c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004270:	d301      	bcc.n	8004276 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004272:	2301      	movs	r3, #1
 8004274:	e00f      	b.n	8004296 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004276:	4a0a      	ldr	r2, [pc, #40]	; (80042a0 <SysTick_Config+0x40>)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3b01      	subs	r3, #1
 800427c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800427e:	210f      	movs	r1, #15
 8004280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004284:	f7ff ff8e 	bl	80041a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004288:	4b05      	ldr	r3, [pc, #20]	; (80042a0 <SysTick_Config+0x40>)
 800428a:	2200      	movs	r2, #0
 800428c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800428e:	4b04      	ldr	r3, [pc, #16]	; (80042a0 <SysTick_Config+0x40>)
 8004290:	2207      	movs	r2, #7
 8004292:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3708      	adds	r7, #8
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	e000e010 	.word	0xe000e010

080042a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7ff ff05 	bl	80040bc <__NVIC_SetPriorityGrouping>
}
 80042b2:	bf00      	nop
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b086      	sub	sp, #24
 80042be:	af00      	add	r7, sp, #0
 80042c0:	4603      	mov	r3, r0
 80042c2:	60b9      	str	r1, [r7, #8]
 80042c4:	607a      	str	r2, [r7, #4]
 80042c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80042c8:	2300      	movs	r3, #0
 80042ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80042cc:	f7ff ff1a 	bl	8004104 <__NVIC_GetPriorityGrouping>
 80042d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	68b9      	ldr	r1, [r7, #8]
 80042d6:	6978      	ldr	r0, [r7, #20]
 80042d8:	f7ff ff8e 	bl	80041f8 <NVIC_EncodePriority>
 80042dc:	4602      	mov	r2, r0
 80042de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042e2:	4611      	mov	r1, r2
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7ff ff5d 	bl	80041a4 <__NVIC_SetPriority>
}
 80042ea:	bf00      	nop
 80042ec:	3718      	adds	r7, #24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b082      	sub	sp, #8
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	4603      	mov	r3, r0
 80042fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004300:	4618      	mov	r0, r3
 8004302:	f7ff ff0d 	bl	8004120 <__NVIC_EnableIRQ>
}
 8004306:	bf00      	nop
 8004308:	3708      	adds	r7, #8
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}

0800430e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800430e:	b580      	push	{r7, lr}
 8004310:	b082      	sub	sp, #8
 8004312:	af00      	add	r7, sp, #0
 8004314:	4603      	mov	r3, r0
 8004316:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800431c:	4618      	mov	r0, r3
 800431e:	f7ff ff1d 	bl	800415c <__NVIC_DisableIRQ>
}
 8004322:	bf00      	nop
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b082      	sub	sp, #8
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7ff ff94 	bl	8004260 <SysTick_Config>
 8004338:	4603      	mov	r3, r0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
	...

08004344 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e098      	b.n	8004488 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	461a      	mov	r2, r3
 800435c:	4b4d      	ldr	r3, [pc, #308]	; (8004494 <HAL_DMA_Init+0x150>)
 800435e:	429a      	cmp	r2, r3
 8004360:	d80f      	bhi.n	8004382 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	461a      	mov	r2, r3
 8004368:	4b4b      	ldr	r3, [pc, #300]	; (8004498 <HAL_DMA_Init+0x154>)
 800436a:	4413      	add	r3, r2
 800436c:	4a4b      	ldr	r2, [pc, #300]	; (800449c <HAL_DMA_Init+0x158>)
 800436e:	fba2 2303 	umull	r2, r3, r2, r3
 8004372:	091b      	lsrs	r3, r3, #4
 8004374:	009a      	lsls	r2, r3, #2
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a48      	ldr	r2, [pc, #288]	; (80044a0 <HAL_DMA_Init+0x15c>)
 800437e:	641a      	str	r2, [r3, #64]	; 0x40
 8004380:	e00e      	b.n	80043a0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	461a      	mov	r2, r3
 8004388:	4b46      	ldr	r3, [pc, #280]	; (80044a4 <HAL_DMA_Init+0x160>)
 800438a:	4413      	add	r3, r2
 800438c:	4a43      	ldr	r2, [pc, #268]	; (800449c <HAL_DMA_Init+0x158>)
 800438e:	fba2 2303 	umull	r2, r3, r2, r3
 8004392:	091b      	lsrs	r3, r3, #4
 8004394:	009a      	lsls	r2, r3, #2
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a42      	ldr	r2, [pc, #264]	; (80044a8 <HAL_DMA_Init+0x164>)
 800439e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80043b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80043c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043fa:	d039      	beq.n	8004470 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004400:	4a27      	ldr	r2, [pc, #156]	; (80044a0 <HAL_DMA_Init+0x15c>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d11a      	bne.n	800443c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004406:	4b29      	ldr	r3, [pc, #164]	; (80044ac <HAL_DMA_Init+0x168>)
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440e:	f003 031c 	and.w	r3, r3, #28
 8004412:	210f      	movs	r1, #15
 8004414:	fa01 f303 	lsl.w	r3, r1, r3
 8004418:	43db      	mvns	r3, r3
 800441a:	4924      	ldr	r1, [pc, #144]	; (80044ac <HAL_DMA_Init+0x168>)
 800441c:	4013      	ands	r3, r2
 800441e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004420:	4b22      	ldr	r3, [pc, #136]	; (80044ac <HAL_DMA_Init+0x168>)
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6859      	ldr	r1, [r3, #4]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800442c:	f003 031c 	and.w	r3, r3, #28
 8004430:	fa01 f303 	lsl.w	r3, r1, r3
 8004434:	491d      	ldr	r1, [pc, #116]	; (80044ac <HAL_DMA_Init+0x168>)
 8004436:	4313      	orrs	r3, r2
 8004438:	600b      	str	r3, [r1, #0]
 800443a:	e019      	b.n	8004470 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800443c:	4b1c      	ldr	r3, [pc, #112]	; (80044b0 <HAL_DMA_Init+0x16c>)
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004444:	f003 031c 	and.w	r3, r3, #28
 8004448:	210f      	movs	r1, #15
 800444a:	fa01 f303 	lsl.w	r3, r1, r3
 800444e:	43db      	mvns	r3, r3
 8004450:	4917      	ldr	r1, [pc, #92]	; (80044b0 <HAL_DMA_Init+0x16c>)
 8004452:	4013      	ands	r3, r2
 8004454:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004456:	4b16      	ldr	r3, [pc, #88]	; (80044b0 <HAL_DMA_Init+0x16c>)
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6859      	ldr	r1, [r3, #4]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004462:	f003 031c 	and.w	r3, r3, #28
 8004466:	fa01 f303 	lsl.w	r3, r1, r3
 800446a:	4911      	ldr	r1, [pc, #68]	; (80044b0 <HAL_DMA_Init+0x16c>)
 800446c:	4313      	orrs	r3, r2
 800446e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3714      	adds	r7, #20
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	40020407 	.word	0x40020407
 8004498:	bffdfff8 	.word	0xbffdfff8
 800449c:	cccccccd 	.word	0xcccccccd
 80044a0:	40020000 	.word	0x40020000
 80044a4:	bffdfbf8 	.word	0xbffdfbf8
 80044a8:	40020400 	.word	0x40020400
 80044ac:	400200a8 	.word	0x400200a8
 80044b0:	400204a8 	.word	0x400204a8

080044b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
 80044c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044c2:	2300      	movs	r3, #0
 80044c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d101      	bne.n	80044d4 <HAL_DMA_Start_IT+0x20>
 80044d0:	2302      	movs	r3, #2
 80044d2:	e04b      	b.n	800456c <HAL_DMA_Start_IT+0xb8>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d13a      	bne.n	800455e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2202      	movs	r2, #2
 80044ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 0201 	bic.w	r2, r2, #1
 8004504:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	68b9      	ldr	r1, [r7, #8]
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f000 f969 	bl	80047e4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004516:	2b00      	cmp	r3, #0
 8004518:	d008      	beq.n	800452c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f042 020e 	orr.w	r2, r2, #14
 8004528:	601a      	str	r2, [r3, #0]
 800452a:	e00f      	b.n	800454c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 0204 	bic.w	r2, r2, #4
 800453a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f042 020a 	orr.w	r2, r2, #10
 800454a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f042 0201 	orr.w	r2, r2, #1
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	e005      	b.n	800456a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004566:	2302      	movs	r3, #2
 8004568:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800456a:	7dfb      	ldrb	r3, [r7, #23]
}
 800456c:	4618      	mov	r0, r3
 800456e:	3718      	adds	r7, #24
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800457c:	2300      	movs	r3, #0
 800457e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d005      	beq.n	8004598 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2204      	movs	r2, #4
 8004590:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	73fb      	strb	r3, [r7, #15]
 8004596:	e029      	b.n	80045ec <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 020e 	bic.w	r2, r2, #14
 80045a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 0201 	bic.w	r2, r2, #1
 80045b6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045bc:	f003 021c 	and.w	r2, r3, #28
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c4:	2101      	movs	r1, #1
 80045c6:	fa01 f202 	lsl.w	r2, r1, r2
 80045ca:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d003      	beq.n	80045ec <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	4798      	blx	r3
    }
  }
  return status;
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b084      	sub	sp, #16
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004612:	f003 031c 	and.w	r3, r3, #28
 8004616:	2204      	movs	r2, #4
 8004618:	409a      	lsls	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	4013      	ands	r3, r2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d026      	beq.n	8004670 <HAL_DMA_IRQHandler+0x7a>
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	f003 0304 	and.w	r3, r3, #4
 8004628:	2b00      	cmp	r3, #0
 800462a:	d021      	beq.n	8004670 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0320 	and.w	r3, r3, #32
 8004636:	2b00      	cmp	r3, #0
 8004638:	d107      	bne.n	800464a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0204 	bic.w	r2, r2, #4
 8004648:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464e:	f003 021c 	and.w	r2, r3, #28
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	2104      	movs	r1, #4
 8004658:	fa01 f202 	lsl.w	r2, r1, r2
 800465c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004662:	2b00      	cmp	r3, #0
 8004664:	d071      	beq.n	800474a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800466e:	e06c      	b.n	800474a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004674:	f003 031c 	and.w	r3, r3, #28
 8004678:	2202      	movs	r2, #2
 800467a:	409a      	lsls	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4013      	ands	r3, r2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d02e      	beq.n	80046e2 <HAL_DMA_IRQHandler+0xec>
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d029      	beq.n	80046e2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0320 	and.w	r3, r3, #32
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10b      	bne.n	80046b4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 020a 	bic.w	r2, r2, #10
 80046aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b8:	f003 021c 	and.w	r2, r3, #28
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c0:	2102      	movs	r1, #2
 80046c2:	fa01 f202 	lsl.w	r2, r1, r2
 80046c6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d038      	beq.n	800474a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80046e0:	e033      	b.n	800474a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e6:	f003 031c 	and.w	r3, r3, #28
 80046ea:	2208      	movs	r2, #8
 80046ec:	409a      	lsls	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	4013      	ands	r3, r2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d02a      	beq.n	800474c <HAL_DMA_IRQHandler+0x156>
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	f003 0308 	and.w	r3, r3, #8
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d025      	beq.n	800474c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 020e 	bic.w	r2, r2, #14
 800470e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004714:	f003 021c 	and.w	r2, r3, #28
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471c:	2101      	movs	r1, #1
 800471e:	fa01 f202 	lsl.w	r2, r1, r2
 8004722:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800473e:	2b00      	cmp	r3, #0
 8004740:	d004      	beq.n	800474c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800474a:	bf00      	nop
 800474c:	bf00      	nop
}
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	460b      	mov	r3, r1
 800475e:	607a      	str	r2, [r7, #4]
 8004760:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004762:	2300      	movs	r3, #0
 8004764:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800476c:	2b01      	cmp	r3, #1
 800476e:	d101      	bne.n	8004774 <HAL_DMA_RegisterCallback+0x20>
 8004770:	2302      	movs	r3, #2
 8004772:	e031      	b.n	80047d8 <HAL_DMA_RegisterCallback+0x84>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004782:	b2db      	uxtb	r3, r3
 8004784:	2b01      	cmp	r3, #1
 8004786:	d120      	bne.n	80047ca <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8004788:	7afb      	ldrb	r3, [r7, #11]
 800478a:	2b03      	cmp	r3, #3
 800478c:	d81a      	bhi.n	80047c4 <HAL_DMA_RegisterCallback+0x70>
 800478e:	a201      	add	r2, pc, #4	; (adr r2, 8004794 <HAL_DMA_RegisterCallback+0x40>)
 8004790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004794:	080047a5 	.word	0x080047a5
 8004798:	080047ad 	.word	0x080047ad
 800479c:	080047b5 	.word	0x080047b5
 80047a0:	080047bd 	.word	0x080047bd
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = pCallback;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	62da      	str	r2, [r3, #44]	; 0x2c
           break;
 80047aa:	e010      	b.n	80047ce <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = pCallback;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	631a      	str	r2, [r3, #48]	; 0x30
           break;
 80047b2:	e00c      	b.n	80047ce <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = pCallback;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	635a      	str	r2, [r3, #52]	; 0x34
           break;
 80047ba:	e008      	b.n	80047ce <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = pCallback;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 80047c2:	e004      	b.n	80047ce <HAL_DMA_RegisterCallback+0x7a>

     default:
           status = HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	75fb      	strb	r3, [r7, #23]
           break;
 80047c8:	e001      	b.n	80047ce <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80047d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	371c      	adds	r7, #28
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
 80047f0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f6:	f003 021c 	and.w	r2, r3, #28
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fe:	2101      	movs	r1, #1
 8004800:	fa01 f202 	lsl.w	r2, r1, r2
 8004804:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	2b10      	cmp	r3, #16
 8004814:	d108      	bne.n	8004828 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004826:	e007      	b.n	8004838 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68ba      	ldr	r2, [r7, #8]
 800482e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	60da      	str	r2, [r3, #12]
}
 8004838:	bf00      	nop
 800483a:	3714      	adds	r7, #20
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800484e:	2300      	movs	r3, #0
 8004850:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004852:	e154      	b.n	8004afe <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	2101      	movs	r1, #1
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	fa01 f303 	lsl.w	r3, r1, r3
 8004860:	4013      	ands	r3, r2
 8004862:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 8146 	beq.w	8004af8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f003 0303 	and.w	r3, r3, #3
 8004874:	2b01      	cmp	r3, #1
 8004876:	d005      	beq.n	8004884 <HAL_GPIO_Init+0x40>
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f003 0303 	and.w	r3, r3, #3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d130      	bne.n	80048e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	2203      	movs	r2, #3
 8004890:	fa02 f303 	lsl.w	r3, r2, r3
 8004894:	43db      	mvns	r3, r3
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	4013      	ands	r3, r2
 800489a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	68da      	ldr	r2, [r3, #12]
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	fa02 f303 	lsl.w	r3, r2, r3
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80048ba:	2201      	movs	r2, #1
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	fa02 f303 	lsl.w	r3, r2, r3
 80048c2:	43db      	mvns	r3, r3
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	4013      	ands	r3, r2
 80048c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	091b      	lsrs	r3, r3, #4
 80048d0:	f003 0201 	and.w	r2, r3, #1
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	fa02 f303 	lsl.w	r3, r2, r3
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	4313      	orrs	r3, r2
 80048de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f003 0303 	and.w	r3, r3, #3
 80048ee:	2b03      	cmp	r3, #3
 80048f0:	d017      	beq.n	8004922 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	2203      	movs	r2, #3
 80048fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004902:	43db      	mvns	r3, r3
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	4013      	ands	r3, r2
 8004908:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	689a      	ldr	r2, [r3, #8]
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	fa02 f303 	lsl.w	r3, r2, r3
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	4313      	orrs	r3, r2
 800491a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f003 0303 	and.w	r3, r3, #3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d123      	bne.n	8004976 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	08da      	lsrs	r2, r3, #3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	3208      	adds	r2, #8
 8004936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800493a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f003 0307 	and.w	r3, r3, #7
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	220f      	movs	r2, #15
 8004946:	fa02 f303 	lsl.w	r3, r2, r3
 800494a:	43db      	mvns	r3, r3
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	4013      	ands	r3, r2
 8004950:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	691a      	ldr	r2, [r3, #16]
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f003 0307 	and.w	r3, r3, #7
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	fa02 f303 	lsl.w	r3, r2, r3
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	4313      	orrs	r3, r2
 8004966:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	08da      	lsrs	r2, r3, #3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	3208      	adds	r2, #8
 8004970:	6939      	ldr	r1, [r7, #16]
 8004972:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	005b      	lsls	r3, r3, #1
 8004980:	2203      	movs	r2, #3
 8004982:	fa02 f303 	lsl.w	r3, r2, r3
 8004986:	43db      	mvns	r3, r3
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	4013      	ands	r3, r2
 800498c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f003 0203 	and.w	r2, r3, #3
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	005b      	lsls	r3, r3, #1
 800499a:	fa02 f303 	lsl.w	r3, r2, r3
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f000 80a0 	beq.w	8004af8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049b8:	4b58      	ldr	r3, [pc, #352]	; (8004b1c <HAL_GPIO_Init+0x2d8>)
 80049ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049bc:	4a57      	ldr	r2, [pc, #348]	; (8004b1c <HAL_GPIO_Init+0x2d8>)
 80049be:	f043 0301 	orr.w	r3, r3, #1
 80049c2:	6613      	str	r3, [r2, #96]	; 0x60
 80049c4:	4b55      	ldr	r3, [pc, #340]	; (8004b1c <HAL_GPIO_Init+0x2d8>)
 80049c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	60bb      	str	r3, [r7, #8]
 80049ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80049d0:	4a53      	ldr	r2, [pc, #332]	; (8004b20 <HAL_GPIO_Init+0x2dc>)
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	089b      	lsrs	r3, r3, #2
 80049d6:	3302      	adds	r3, #2
 80049d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f003 0303 	and.w	r3, r3, #3
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	220f      	movs	r2, #15
 80049e8:	fa02 f303 	lsl.w	r3, r2, r3
 80049ec:	43db      	mvns	r3, r3
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	4013      	ands	r3, r2
 80049f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80049fa:	d019      	beq.n	8004a30 <HAL_GPIO_Init+0x1ec>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a49      	ldr	r2, [pc, #292]	; (8004b24 <HAL_GPIO_Init+0x2e0>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d013      	beq.n	8004a2c <HAL_GPIO_Init+0x1e8>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a48      	ldr	r2, [pc, #288]	; (8004b28 <HAL_GPIO_Init+0x2e4>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d00d      	beq.n	8004a28 <HAL_GPIO_Init+0x1e4>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a47      	ldr	r2, [pc, #284]	; (8004b2c <HAL_GPIO_Init+0x2e8>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d007      	beq.n	8004a24 <HAL_GPIO_Init+0x1e0>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a46      	ldr	r2, [pc, #280]	; (8004b30 <HAL_GPIO_Init+0x2ec>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d101      	bne.n	8004a20 <HAL_GPIO_Init+0x1dc>
 8004a1c:	2304      	movs	r3, #4
 8004a1e:	e008      	b.n	8004a32 <HAL_GPIO_Init+0x1ee>
 8004a20:	2307      	movs	r3, #7
 8004a22:	e006      	b.n	8004a32 <HAL_GPIO_Init+0x1ee>
 8004a24:	2303      	movs	r3, #3
 8004a26:	e004      	b.n	8004a32 <HAL_GPIO_Init+0x1ee>
 8004a28:	2302      	movs	r3, #2
 8004a2a:	e002      	b.n	8004a32 <HAL_GPIO_Init+0x1ee>
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e000      	b.n	8004a32 <HAL_GPIO_Init+0x1ee>
 8004a30:	2300      	movs	r3, #0
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	f002 0203 	and.w	r2, r2, #3
 8004a38:	0092      	lsls	r2, r2, #2
 8004a3a:	4093      	lsls	r3, r2
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004a42:	4937      	ldr	r1, [pc, #220]	; (8004b20 <HAL_GPIO_Init+0x2dc>)
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	089b      	lsrs	r3, r3, #2
 8004a48:	3302      	adds	r3, #2
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a50:	4b38      	ldr	r3, [pc, #224]	; (8004b34 <HAL_GPIO_Init+0x2f0>)
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	43db      	mvns	r3, r3
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d003      	beq.n	8004a74 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a74:	4a2f      	ldr	r2, [pc, #188]	; (8004b34 <HAL_GPIO_Init+0x2f0>)
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a7a:	4b2e      	ldr	r3, [pc, #184]	; (8004b34 <HAL_GPIO_Init+0x2f0>)
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	43db      	mvns	r3, r3
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	4013      	ands	r3, r2
 8004a88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d003      	beq.n	8004a9e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a9e:	4a25      	ldr	r2, [pc, #148]	; (8004b34 <HAL_GPIO_Init+0x2f0>)
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004aa4:	4b23      	ldr	r3, [pc, #140]	; (8004b34 <HAL_GPIO_Init+0x2f0>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	43db      	mvns	r3, r3
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d003      	beq.n	8004ac8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ac8:	4a1a      	ldr	r2, [pc, #104]	; (8004b34 <HAL_GPIO_Init+0x2f0>)
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004ace:	4b19      	ldr	r3, [pc, #100]	; (8004b34 <HAL_GPIO_Init+0x2f0>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	43db      	mvns	r3, r3
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	4013      	ands	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d003      	beq.n	8004af2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004af2:	4a10      	ldr	r2, [pc, #64]	; (8004b34 <HAL_GPIO_Init+0x2f0>)
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	3301      	adds	r3, #1
 8004afc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	fa22 f303 	lsr.w	r3, r2, r3
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f47f aea3 	bne.w	8004854 <HAL_GPIO_Init+0x10>
  }
}
 8004b0e:	bf00      	nop
 8004b10:	bf00      	nop
 8004b12:	371c      	adds	r7, #28
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	40021000 	.word	0x40021000
 8004b20:	40010000 	.word	0x40010000
 8004b24:	48000400 	.word	0x48000400
 8004b28:	48000800 	.word	0x48000800
 8004b2c:	48000c00 	.word	0x48000c00
 8004b30:	48001000 	.word	0x48001000
 8004b34:	40010400 	.word	0x40010400

08004b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	460b      	mov	r3, r1
 8004b42:	807b      	strh	r3, [r7, #2]
 8004b44:	4613      	mov	r3, r2
 8004b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b48:	787b      	ldrb	r3, [r7, #1]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b4e:	887a      	ldrh	r2, [r7, #2]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b54:	e002      	b.n	8004b5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b56:	887a      	ldrh	r2, [r7, #2]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	4603      	mov	r3, r0
 8004b70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004b72:	4b08      	ldr	r3, [pc, #32]	; (8004b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b74:	695a      	ldr	r2, [r3, #20]
 8004b76:	88fb      	ldrh	r3, [r7, #6]
 8004b78:	4013      	ands	r3, r2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d006      	beq.n	8004b8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b7e:	4a05      	ldr	r2, [pc, #20]	; (8004b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b80:	88fb      	ldrh	r3, [r7, #6]
 8004b82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b84:	88fb      	ldrh	r3, [r7, #6]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f004 fc64 	bl	8009454 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b8c:	bf00      	nop
 8004b8e:	3708      	adds	r7, #8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	40010400 	.word	0x40010400

08004b98 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b9c:	4b05      	ldr	r3, [pc, #20]	; (8004bb4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a04      	ldr	r2, [pc, #16]	; (8004bb4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ba6:	6013      	str	r3, [r2, #0]
}
 8004ba8:	bf00      	nop
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	40007000 	.word	0x40007000

08004bb8 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8004bc0:	4b2b      	ldr	r3, [pc, #172]	; (8004c70 <HAL_PWR_ConfigPVD+0xb8>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f023 020e 	bic.w	r2, r3, #14
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4928      	ldr	r1, [pc, #160]	; (8004c70 <HAL_PWR_ConfigPVD+0xb8>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8004bd2:	4b28      	ldr	r3, [pc, #160]	; (8004c74 <HAL_PWR_ConfigPVD+0xbc>)
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	4a27      	ldr	r2, [pc, #156]	; (8004c74 <HAL_PWR_ConfigPVD+0xbc>)
 8004bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bdc:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8004bde:	4b25      	ldr	r3, [pc, #148]	; (8004c74 <HAL_PWR_ConfigPVD+0xbc>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a24      	ldr	r2, [pc, #144]	; (8004c74 <HAL_PWR_ConfigPVD+0xbc>)
 8004be4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004be8:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8004bea:	4b22      	ldr	r3, [pc, #136]	; (8004c74 <HAL_PWR_ConfigPVD+0xbc>)
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	4a21      	ldr	r2, [pc, #132]	; (8004c74 <HAL_PWR_ConfigPVD+0xbc>)
 8004bf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bf4:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8004bf6:	4b1f      	ldr	r3, [pc, #124]	; (8004c74 <HAL_PWR_ConfigPVD+0xbc>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	4a1e      	ldr	r2, [pc, #120]	; (8004c74 <HAL_PWR_ConfigPVD+0xbc>)
 8004bfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c00:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d005      	beq.n	8004c1a <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8004c0e:	4b19      	ldr	r3, [pc, #100]	; (8004c74 <HAL_PWR_ConfigPVD+0xbc>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a18      	ldr	r2, [pc, #96]	; (8004c74 <HAL_PWR_ConfigPVD+0xbc>)
 8004c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c18:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d005      	beq.n	8004c32 <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8004c26:	4b13      	ldr	r3, [pc, #76]	; (8004c74 <HAL_PWR_ConfigPVD+0xbc>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	4a12      	ldr	r2, [pc, #72]	; (8004c74 <HAL_PWR_ConfigPVD+0xbc>)
 8004c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c30:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d005      	beq.n	8004c4a <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8004c3e:	4b0d      	ldr	r3, [pc, #52]	; (8004c74 <HAL_PWR_ConfigPVD+0xbc>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	4a0c      	ldr	r2, [pc, #48]	; (8004c74 <HAL_PWR_ConfigPVD+0xbc>)
 8004c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c48:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d005      	beq.n	8004c62 <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8004c56:	4b07      	ldr	r3, [pc, #28]	; (8004c74 <HAL_PWR_ConfigPVD+0xbc>)
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	4a06      	ldr	r2, [pc, #24]	; (8004c74 <HAL_PWR_ConfigPVD+0xbc>)
 8004c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c60:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	40007000 	.word	0x40007000
 8004c74:	40010400 	.word	0x40010400

08004c78 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8004c7c:	4b05      	ldr	r3, [pc, #20]	; (8004c94 <HAL_PWR_EnablePVD+0x1c>)
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	4a04      	ldr	r2, [pc, #16]	; (8004c94 <HAL_PWR_EnablePVD+0x1c>)
 8004c82:	f043 0301 	orr.w	r3, r3, #1
 8004c86:	6053      	str	r3, [r2, #4]
}
 8004c88:	bf00      	nop
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	40007000 	.word	0x40007000

08004c98 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004c9c:	4b04      	ldr	r3, [pc, #16]	; (8004cb0 <HAL_PWREx_GetVoltageRange+0x18>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	40007000 	.word	0x40007000

08004cb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cc2:	d130      	bne.n	8004d26 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cc4:	4b23      	ldr	r3, [pc, #140]	; (8004d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cd0:	d038      	beq.n	8004d44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004cd2:	4b20      	ldr	r3, [pc, #128]	; (8004d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004cda:	4a1e      	ldr	r2, [pc, #120]	; (8004d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ce0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ce2:	4b1d      	ldr	r3, [pc, #116]	; (8004d58 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2232      	movs	r2, #50	; 0x32
 8004ce8:	fb02 f303 	mul.w	r3, r2, r3
 8004cec:	4a1b      	ldr	r2, [pc, #108]	; (8004d5c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004cee:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf2:	0c9b      	lsrs	r3, r3, #18
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cf8:	e002      	b.n	8004d00 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d00:	4b14      	ldr	r3, [pc, #80]	; (8004d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d0c:	d102      	bne.n	8004d14 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1f2      	bne.n	8004cfa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d14:	4b0f      	ldr	r3, [pc, #60]	; (8004d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d20:	d110      	bne.n	8004d44 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e00f      	b.n	8004d46 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d26:	4b0b      	ldr	r3, [pc, #44]	; (8004d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d32:	d007      	beq.n	8004d44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004d34:	4b07      	ldr	r3, [pc, #28]	; (8004d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d3c:	4a05      	ldr	r2, [pc, #20]	; (8004d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d42:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3714      	adds	r7, #20
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	40007000 	.word	0x40007000
 8004d58:	20000088 	.word	0x20000088
 8004d5c:	431bde83 	.word	0x431bde83

08004d60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b088      	sub	sp, #32
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d102      	bne.n	8004d74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	f000 bc02 	b.w	8005578 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d74:	4b96      	ldr	r3, [pc, #600]	; (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f003 030c 	and.w	r3, r3, #12
 8004d7c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d7e:	4b94      	ldr	r3, [pc, #592]	; (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	f003 0303 	and.w	r3, r3, #3
 8004d86:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0310 	and.w	r3, r3, #16
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f000 80e4 	beq.w	8004f5e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d007      	beq.n	8004dac <HAL_RCC_OscConfig+0x4c>
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	2b0c      	cmp	r3, #12
 8004da0:	f040 808b 	bne.w	8004eba <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	f040 8087 	bne.w	8004eba <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004dac:	4b88      	ldr	r3, [pc, #544]	; (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d005      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x64>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d101      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e3d9      	b.n	8005578 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a1a      	ldr	r2, [r3, #32]
 8004dc8:	4b81      	ldr	r3, [pc, #516]	; (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0308 	and.w	r3, r3, #8
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d004      	beq.n	8004dde <HAL_RCC_OscConfig+0x7e>
 8004dd4:	4b7e      	ldr	r3, [pc, #504]	; (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ddc:	e005      	b.n	8004dea <HAL_RCC_OscConfig+0x8a>
 8004dde:	4b7c      	ldr	r3, [pc, #496]	; (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004de0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004de4:	091b      	lsrs	r3, r3, #4
 8004de6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d223      	bcs.n	8004e36 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 fd8c 	bl	8005910 <RCC_SetFlashLatencyFromMSIRange>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e3ba      	b.n	8005578 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e02:	4b73      	ldr	r3, [pc, #460]	; (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a72      	ldr	r2, [pc, #456]	; (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004e08:	f043 0308 	orr.w	r3, r3, #8
 8004e0c:	6013      	str	r3, [r2, #0]
 8004e0e:	4b70      	ldr	r3, [pc, #448]	; (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	496d      	ldr	r1, [pc, #436]	; (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e20:	4b6b      	ldr	r3, [pc, #428]	; (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	69db      	ldr	r3, [r3, #28]
 8004e2c:	021b      	lsls	r3, r3, #8
 8004e2e:	4968      	ldr	r1, [pc, #416]	; (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	604b      	str	r3, [r1, #4]
 8004e34:	e025      	b.n	8004e82 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e36:	4b66      	ldr	r3, [pc, #408]	; (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a65      	ldr	r2, [pc, #404]	; (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004e3c:	f043 0308 	orr.w	r3, r3, #8
 8004e40:	6013      	str	r3, [r2, #0]
 8004e42:	4b63      	ldr	r3, [pc, #396]	; (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	4960      	ldr	r1, [pc, #384]	; (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e54:	4b5e      	ldr	r3, [pc, #376]	; (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	69db      	ldr	r3, [r3, #28]
 8004e60:	021b      	lsls	r3, r3, #8
 8004e62:	495b      	ldr	r1, [pc, #364]	; (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d109      	bne.n	8004e82 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 fd4c 	bl	8005910 <RCC_SetFlashLatencyFromMSIRange>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d001      	beq.n	8004e82 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e37a      	b.n	8005578 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e82:	f000 fc81 	bl	8005788 <HAL_RCC_GetSysClockFreq>
 8004e86:	4602      	mov	r2, r0
 8004e88:	4b51      	ldr	r3, [pc, #324]	; (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	091b      	lsrs	r3, r3, #4
 8004e8e:	f003 030f 	and.w	r3, r3, #15
 8004e92:	4950      	ldr	r1, [pc, #320]	; (8004fd4 <HAL_RCC_OscConfig+0x274>)
 8004e94:	5ccb      	ldrb	r3, [r1, r3]
 8004e96:	f003 031f 	and.w	r3, r3, #31
 8004e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e9e:	4a4e      	ldr	r2, [pc, #312]	; (8004fd8 <HAL_RCC_OscConfig+0x278>)
 8004ea0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004ea2:	4b4e      	ldr	r3, [pc, #312]	; (8004fdc <HAL_RCC_OscConfig+0x27c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7ff f878 	bl	8003f9c <HAL_InitTick>
 8004eac:	4603      	mov	r3, r0
 8004eae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d052      	beq.n	8004f5c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004eb6:	7bfb      	ldrb	r3, [r7, #15]
 8004eb8:	e35e      	b.n	8005578 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d032      	beq.n	8004f28 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004ec2:	4b43      	ldr	r3, [pc, #268]	; (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a42      	ldr	r2, [pc, #264]	; (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004ec8:	f043 0301 	orr.w	r3, r3, #1
 8004ecc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ece:	f7ff f8a1 	bl	8004014 <HAL_GetTick>
 8004ed2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ed4:	e008      	b.n	8004ee8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ed6:	f7ff f89d 	bl	8004014 <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d901      	bls.n	8004ee8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e347      	b.n	8005578 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ee8:	4b39      	ldr	r3, [pc, #228]	; (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0302 	and.w	r3, r3, #2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d0f0      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ef4:	4b36      	ldr	r3, [pc, #216]	; (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a35      	ldr	r2, [pc, #212]	; (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004efa:	f043 0308 	orr.w	r3, r3, #8
 8004efe:	6013      	str	r3, [r2, #0]
 8004f00:	4b33      	ldr	r3, [pc, #204]	; (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a1b      	ldr	r3, [r3, #32]
 8004f0c:	4930      	ldr	r1, [pc, #192]	; (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f12:	4b2f      	ldr	r3, [pc, #188]	; (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	021b      	lsls	r3, r3, #8
 8004f20:	492b      	ldr	r1, [pc, #172]	; (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	604b      	str	r3, [r1, #4]
 8004f26:	e01a      	b.n	8004f5e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004f28:	4b29      	ldr	r3, [pc, #164]	; (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a28      	ldr	r2, [pc, #160]	; (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004f2e:	f023 0301 	bic.w	r3, r3, #1
 8004f32:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004f34:	f7ff f86e 	bl	8004014 <HAL_GetTick>
 8004f38:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004f3a:	e008      	b.n	8004f4e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f3c:	f7ff f86a 	bl	8004014 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e314      	b.n	8005578 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004f4e:	4b20      	ldr	r3, [pc, #128]	; (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1f0      	bne.n	8004f3c <HAL_RCC_OscConfig+0x1dc>
 8004f5a:	e000      	b.n	8004f5e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f5c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d073      	beq.n	8005052 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	2b08      	cmp	r3, #8
 8004f6e:	d005      	beq.n	8004f7c <HAL_RCC_OscConfig+0x21c>
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	2b0c      	cmp	r3, #12
 8004f74:	d10e      	bne.n	8004f94 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	2b03      	cmp	r3, #3
 8004f7a:	d10b      	bne.n	8004f94 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f7c:	4b14      	ldr	r3, [pc, #80]	; (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d063      	beq.n	8005050 <HAL_RCC_OscConfig+0x2f0>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d15f      	bne.n	8005050 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e2f1      	b.n	8005578 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f9c:	d106      	bne.n	8004fac <HAL_RCC_OscConfig+0x24c>
 8004f9e:	4b0c      	ldr	r3, [pc, #48]	; (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a0b      	ldr	r2, [pc, #44]	; (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fa8:	6013      	str	r3, [r2, #0]
 8004faa:	e025      	b.n	8004ff8 <HAL_RCC_OscConfig+0x298>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fb4:	d114      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x280>
 8004fb6:	4b06      	ldr	r3, [pc, #24]	; (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a05      	ldr	r2, [pc, #20]	; (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fc0:	6013      	str	r3, [r2, #0]
 8004fc2:	4b03      	ldr	r3, [pc, #12]	; (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a02      	ldr	r2, [pc, #8]	; (8004fd0 <HAL_RCC_OscConfig+0x270>)
 8004fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fcc:	6013      	str	r3, [r2, #0]
 8004fce:	e013      	b.n	8004ff8 <HAL_RCC_OscConfig+0x298>
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	0800ab4c 	.word	0x0800ab4c
 8004fd8:	20000088 	.word	0x20000088
 8004fdc:	20000080 	.word	0x20000080
 8004fe0:	4ba0      	ldr	r3, [pc, #640]	; (8005264 <HAL_RCC_OscConfig+0x504>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a9f      	ldr	r2, [pc, #636]	; (8005264 <HAL_RCC_OscConfig+0x504>)
 8004fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fea:	6013      	str	r3, [r2, #0]
 8004fec:	4b9d      	ldr	r3, [pc, #628]	; (8005264 <HAL_RCC_OscConfig+0x504>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a9c      	ldr	r2, [pc, #624]	; (8005264 <HAL_RCC_OscConfig+0x504>)
 8004ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ff6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d013      	beq.n	8005028 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005000:	f7ff f808 	bl	8004014 <HAL_GetTick>
 8005004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005006:	e008      	b.n	800501a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005008:	f7ff f804 	bl	8004014 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b64      	cmp	r3, #100	; 0x64
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e2ae      	b.n	8005578 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800501a:	4b92      	ldr	r3, [pc, #584]	; (8005264 <HAL_RCC_OscConfig+0x504>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d0f0      	beq.n	8005008 <HAL_RCC_OscConfig+0x2a8>
 8005026:	e014      	b.n	8005052 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005028:	f7fe fff4 	bl	8004014 <HAL_GetTick>
 800502c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800502e:	e008      	b.n	8005042 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005030:	f7fe fff0 	bl	8004014 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2b64      	cmp	r3, #100	; 0x64
 800503c:	d901      	bls.n	8005042 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e29a      	b.n	8005578 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005042:	4b88      	ldr	r3, [pc, #544]	; (8005264 <HAL_RCC_OscConfig+0x504>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1f0      	bne.n	8005030 <HAL_RCC_OscConfig+0x2d0>
 800504e:	e000      	b.n	8005052 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d060      	beq.n	8005120 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	2b04      	cmp	r3, #4
 8005062:	d005      	beq.n	8005070 <HAL_RCC_OscConfig+0x310>
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	2b0c      	cmp	r3, #12
 8005068:	d119      	bne.n	800509e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	2b02      	cmp	r3, #2
 800506e:	d116      	bne.n	800509e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005070:	4b7c      	ldr	r3, [pc, #496]	; (8005264 <HAL_RCC_OscConfig+0x504>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005078:	2b00      	cmp	r3, #0
 800507a:	d005      	beq.n	8005088 <HAL_RCC_OscConfig+0x328>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d101      	bne.n	8005088 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e277      	b.n	8005578 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005088:	4b76      	ldr	r3, [pc, #472]	; (8005264 <HAL_RCC_OscConfig+0x504>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	061b      	lsls	r3, r3, #24
 8005096:	4973      	ldr	r1, [pc, #460]	; (8005264 <HAL_RCC_OscConfig+0x504>)
 8005098:	4313      	orrs	r3, r2
 800509a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800509c:	e040      	b.n	8005120 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d023      	beq.n	80050ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050a6:	4b6f      	ldr	r3, [pc, #444]	; (8005264 <HAL_RCC_OscConfig+0x504>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a6e      	ldr	r2, [pc, #440]	; (8005264 <HAL_RCC_OscConfig+0x504>)
 80050ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b2:	f7fe ffaf 	bl	8004014 <HAL_GetTick>
 80050b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050b8:	e008      	b.n	80050cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050ba:	f7fe ffab 	bl	8004014 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d901      	bls.n	80050cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e255      	b.n	8005578 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050cc:	4b65      	ldr	r3, [pc, #404]	; (8005264 <HAL_RCC_OscConfig+0x504>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d0f0      	beq.n	80050ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050d8:	4b62      	ldr	r3, [pc, #392]	; (8005264 <HAL_RCC_OscConfig+0x504>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	061b      	lsls	r3, r3, #24
 80050e6:	495f      	ldr	r1, [pc, #380]	; (8005264 <HAL_RCC_OscConfig+0x504>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	604b      	str	r3, [r1, #4]
 80050ec:	e018      	b.n	8005120 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050ee:	4b5d      	ldr	r3, [pc, #372]	; (8005264 <HAL_RCC_OscConfig+0x504>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a5c      	ldr	r2, [pc, #368]	; (8005264 <HAL_RCC_OscConfig+0x504>)
 80050f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fa:	f7fe ff8b 	bl	8004014 <HAL_GetTick>
 80050fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005100:	e008      	b.n	8005114 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005102:	f7fe ff87 	bl	8004014 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d901      	bls.n	8005114 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e231      	b.n	8005578 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005114:	4b53      	ldr	r3, [pc, #332]	; (8005264 <HAL_RCC_OscConfig+0x504>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1f0      	bne.n	8005102 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0308 	and.w	r3, r3, #8
 8005128:	2b00      	cmp	r3, #0
 800512a:	d03c      	beq.n	80051a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d01c      	beq.n	800516e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005134:	4b4b      	ldr	r3, [pc, #300]	; (8005264 <HAL_RCC_OscConfig+0x504>)
 8005136:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800513a:	4a4a      	ldr	r2, [pc, #296]	; (8005264 <HAL_RCC_OscConfig+0x504>)
 800513c:	f043 0301 	orr.w	r3, r3, #1
 8005140:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005144:	f7fe ff66 	bl	8004014 <HAL_GetTick>
 8005148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800514a:	e008      	b.n	800515e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800514c:	f7fe ff62 	bl	8004014 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e20c      	b.n	8005578 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800515e:	4b41      	ldr	r3, [pc, #260]	; (8005264 <HAL_RCC_OscConfig+0x504>)
 8005160:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d0ef      	beq.n	800514c <HAL_RCC_OscConfig+0x3ec>
 800516c:	e01b      	b.n	80051a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800516e:	4b3d      	ldr	r3, [pc, #244]	; (8005264 <HAL_RCC_OscConfig+0x504>)
 8005170:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005174:	4a3b      	ldr	r2, [pc, #236]	; (8005264 <HAL_RCC_OscConfig+0x504>)
 8005176:	f023 0301 	bic.w	r3, r3, #1
 800517a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800517e:	f7fe ff49 	bl	8004014 <HAL_GetTick>
 8005182:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005184:	e008      	b.n	8005198 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005186:	f7fe ff45 	bl	8004014 <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	2b02      	cmp	r3, #2
 8005192:	d901      	bls.n	8005198 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e1ef      	b.n	8005578 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005198:	4b32      	ldr	r3, [pc, #200]	; (8005264 <HAL_RCC_OscConfig+0x504>)
 800519a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1ef      	bne.n	8005186 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0304 	and.w	r3, r3, #4
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f000 80a6 	beq.w	8005300 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051b4:	2300      	movs	r3, #0
 80051b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80051b8:	4b2a      	ldr	r3, [pc, #168]	; (8005264 <HAL_RCC_OscConfig+0x504>)
 80051ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10d      	bne.n	80051e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051c4:	4b27      	ldr	r3, [pc, #156]	; (8005264 <HAL_RCC_OscConfig+0x504>)
 80051c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c8:	4a26      	ldr	r2, [pc, #152]	; (8005264 <HAL_RCC_OscConfig+0x504>)
 80051ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ce:	6593      	str	r3, [r2, #88]	; 0x58
 80051d0:	4b24      	ldr	r3, [pc, #144]	; (8005264 <HAL_RCC_OscConfig+0x504>)
 80051d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051d8:	60bb      	str	r3, [r7, #8]
 80051da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051dc:	2301      	movs	r3, #1
 80051de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051e0:	4b21      	ldr	r3, [pc, #132]	; (8005268 <HAL_RCC_OscConfig+0x508>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d118      	bne.n	800521e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051ec:	4b1e      	ldr	r3, [pc, #120]	; (8005268 <HAL_RCC_OscConfig+0x508>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a1d      	ldr	r2, [pc, #116]	; (8005268 <HAL_RCC_OscConfig+0x508>)
 80051f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051f8:	f7fe ff0c 	bl	8004014 <HAL_GetTick>
 80051fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051fe:	e008      	b.n	8005212 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005200:	f7fe ff08 	bl	8004014 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d901      	bls.n	8005212 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e1b2      	b.n	8005578 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005212:	4b15      	ldr	r3, [pc, #84]	; (8005268 <HAL_RCC_OscConfig+0x508>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800521a:	2b00      	cmp	r3, #0
 800521c:	d0f0      	beq.n	8005200 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d108      	bne.n	8005238 <HAL_RCC_OscConfig+0x4d8>
 8005226:	4b0f      	ldr	r3, [pc, #60]	; (8005264 <HAL_RCC_OscConfig+0x504>)
 8005228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800522c:	4a0d      	ldr	r2, [pc, #52]	; (8005264 <HAL_RCC_OscConfig+0x504>)
 800522e:	f043 0301 	orr.w	r3, r3, #1
 8005232:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005236:	e029      	b.n	800528c <HAL_RCC_OscConfig+0x52c>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	2b05      	cmp	r3, #5
 800523e:	d115      	bne.n	800526c <HAL_RCC_OscConfig+0x50c>
 8005240:	4b08      	ldr	r3, [pc, #32]	; (8005264 <HAL_RCC_OscConfig+0x504>)
 8005242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005246:	4a07      	ldr	r2, [pc, #28]	; (8005264 <HAL_RCC_OscConfig+0x504>)
 8005248:	f043 0304 	orr.w	r3, r3, #4
 800524c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005250:	4b04      	ldr	r3, [pc, #16]	; (8005264 <HAL_RCC_OscConfig+0x504>)
 8005252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005256:	4a03      	ldr	r2, [pc, #12]	; (8005264 <HAL_RCC_OscConfig+0x504>)
 8005258:	f043 0301 	orr.w	r3, r3, #1
 800525c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005260:	e014      	b.n	800528c <HAL_RCC_OscConfig+0x52c>
 8005262:	bf00      	nop
 8005264:	40021000 	.word	0x40021000
 8005268:	40007000 	.word	0x40007000
 800526c:	4b9a      	ldr	r3, [pc, #616]	; (80054d8 <HAL_RCC_OscConfig+0x778>)
 800526e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005272:	4a99      	ldr	r2, [pc, #612]	; (80054d8 <HAL_RCC_OscConfig+0x778>)
 8005274:	f023 0301 	bic.w	r3, r3, #1
 8005278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800527c:	4b96      	ldr	r3, [pc, #600]	; (80054d8 <HAL_RCC_OscConfig+0x778>)
 800527e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005282:	4a95      	ldr	r2, [pc, #596]	; (80054d8 <HAL_RCC_OscConfig+0x778>)
 8005284:	f023 0304 	bic.w	r3, r3, #4
 8005288:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d016      	beq.n	80052c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005294:	f7fe febe 	bl	8004014 <HAL_GetTick>
 8005298:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800529a:	e00a      	b.n	80052b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800529c:	f7fe feba 	bl	8004014 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d901      	bls.n	80052b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e162      	b.n	8005578 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052b2:	4b89      	ldr	r3, [pc, #548]	; (80054d8 <HAL_RCC_OscConfig+0x778>)
 80052b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b8:	f003 0302 	and.w	r3, r3, #2
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d0ed      	beq.n	800529c <HAL_RCC_OscConfig+0x53c>
 80052c0:	e015      	b.n	80052ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c2:	f7fe fea7 	bl	8004014 <HAL_GetTick>
 80052c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052c8:	e00a      	b.n	80052e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ca:	f7fe fea3 	bl	8004014 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052d8:	4293      	cmp	r3, r2
 80052da:	d901      	bls.n	80052e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e14b      	b.n	8005578 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052e0:	4b7d      	ldr	r3, [pc, #500]	; (80054d8 <HAL_RCC_OscConfig+0x778>)
 80052e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1ed      	bne.n	80052ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052ee:	7ffb      	ldrb	r3, [r7, #31]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d105      	bne.n	8005300 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052f4:	4b78      	ldr	r3, [pc, #480]	; (80054d8 <HAL_RCC_OscConfig+0x778>)
 80052f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052f8:	4a77      	ldr	r2, [pc, #476]	; (80054d8 <HAL_RCC_OscConfig+0x778>)
 80052fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0320 	and.w	r3, r3, #32
 8005308:	2b00      	cmp	r3, #0
 800530a:	d03c      	beq.n	8005386 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005310:	2b00      	cmp	r3, #0
 8005312:	d01c      	beq.n	800534e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005314:	4b70      	ldr	r3, [pc, #448]	; (80054d8 <HAL_RCC_OscConfig+0x778>)
 8005316:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800531a:	4a6f      	ldr	r2, [pc, #444]	; (80054d8 <HAL_RCC_OscConfig+0x778>)
 800531c:	f043 0301 	orr.w	r3, r3, #1
 8005320:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005324:	f7fe fe76 	bl	8004014 <HAL_GetTick>
 8005328:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800532a:	e008      	b.n	800533e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800532c:	f7fe fe72 	bl	8004014 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	2b02      	cmp	r3, #2
 8005338:	d901      	bls.n	800533e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e11c      	b.n	8005578 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800533e:	4b66      	ldr	r3, [pc, #408]	; (80054d8 <HAL_RCC_OscConfig+0x778>)
 8005340:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005344:	f003 0302 	and.w	r3, r3, #2
 8005348:	2b00      	cmp	r3, #0
 800534a:	d0ef      	beq.n	800532c <HAL_RCC_OscConfig+0x5cc>
 800534c:	e01b      	b.n	8005386 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800534e:	4b62      	ldr	r3, [pc, #392]	; (80054d8 <HAL_RCC_OscConfig+0x778>)
 8005350:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005354:	4a60      	ldr	r2, [pc, #384]	; (80054d8 <HAL_RCC_OscConfig+0x778>)
 8005356:	f023 0301 	bic.w	r3, r3, #1
 800535a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800535e:	f7fe fe59 	bl	8004014 <HAL_GetTick>
 8005362:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005364:	e008      	b.n	8005378 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005366:	f7fe fe55 	bl	8004014 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	2b02      	cmp	r3, #2
 8005372:	d901      	bls.n	8005378 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e0ff      	b.n	8005578 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005378:	4b57      	ldr	r3, [pc, #348]	; (80054d8 <HAL_RCC_OscConfig+0x778>)
 800537a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1ef      	bne.n	8005366 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538a:	2b00      	cmp	r3, #0
 800538c:	f000 80f3 	beq.w	8005576 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005394:	2b02      	cmp	r3, #2
 8005396:	f040 80c9 	bne.w	800552c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800539a:	4b4f      	ldr	r3, [pc, #316]	; (80054d8 <HAL_RCC_OscConfig+0x778>)
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f003 0203 	and.w	r2, r3, #3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d12c      	bne.n	8005408 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b8:	3b01      	subs	r3, #1
 80053ba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80053bc:	429a      	cmp	r2, r3
 80053be:	d123      	bne.n	8005408 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d11b      	bne.n	8005408 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053da:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80053dc:	429a      	cmp	r2, r3
 80053de:	d113      	bne.n	8005408 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ea:	085b      	lsrs	r3, r3, #1
 80053ec:	3b01      	subs	r3, #1
 80053ee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d109      	bne.n	8005408 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fe:	085b      	lsrs	r3, r3, #1
 8005400:	3b01      	subs	r3, #1
 8005402:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005404:	429a      	cmp	r2, r3
 8005406:	d06b      	beq.n	80054e0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	2b0c      	cmp	r3, #12
 800540c:	d062      	beq.n	80054d4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800540e:	4b32      	ldr	r3, [pc, #200]	; (80054d8 <HAL_RCC_OscConfig+0x778>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d001      	beq.n	800541e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e0ac      	b.n	8005578 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800541e:	4b2e      	ldr	r3, [pc, #184]	; (80054d8 <HAL_RCC_OscConfig+0x778>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a2d      	ldr	r2, [pc, #180]	; (80054d8 <HAL_RCC_OscConfig+0x778>)
 8005424:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005428:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800542a:	f7fe fdf3 	bl	8004014 <HAL_GetTick>
 800542e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005430:	e008      	b.n	8005444 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005432:	f7fe fdef 	bl	8004014 <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	2b02      	cmp	r3, #2
 800543e:	d901      	bls.n	8005444 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e099      	b.n	8005578 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005444:	4b24      	ldr	r3, [pc, #144]	; (80054d8 <HAL_RCC_OscConfig+0x778>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1f0      	bne.n	8005432 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005450:	4b21      	ldr	r3, [pc, #132]	; (80054d8 <HAL_RCC_OscConfig+0x778>)
 8005452:	68da      	ldr	r2, [r3, #12]
 8005454:	4b21      	ldr	r3, [pc, #132]	; (80054dc <HAL_RCC_OscConfig+0x77c>)
 8005456:	4013      	ands	r3, r2
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005460:	3a01      	subs	r2, #1
 8005462:	0112      	lsls	r2, r2, #4
 8005464:	4311      	orrs	r1, r2
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800546a:	0212      	lsls	r2, r2, #8
 800546c:	4311      	orrs	r1, r2
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005472:	0852      	lsrs	r2, r2, #1
 8005474:	3a01      	subs	r2, #1
 8005476:	0552      	lsls	r2, r2, #21
 8005478:	4311      	orrs	r1, r2
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800547e:	0852      	lsrs	r2, r2, #1
 8005480:	3a01      	subs	r2, #1
 8005482:	0652      	lsls	r2, r2, #25
 8005484:	4311      	orrs	r1, r2
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800548a:	06d2      	lsls	r2, r2, #27
 800548c:	430a      	orrs	r2, r1
 800548e:	4912      	ldr	r1, [pc, #72]	; (80054d8 <HAL_RCC_OscConfig+0x778>)
 8005490:	4313      	orrs	r3, r2
 8005492:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005494:	4b10      	ldr	r3, [pc, #64]	; (80054d8 <HAL_RCC_OscConfig+0x778>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a0f      	ldr	r2, [pc, #60]	; (80054d8 <HAL_RCC_OscConfig+0x778>)
 800549a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800549e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80054a0:	4b0d      	ldr	r3, [pc, #52]	; (80054d8 <HAL_RCC_OscConfig+0x778>)
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	4a0c      	ldr	r2, [pc, #48]	; (80054d8 <HAL_RCC_OscConfig+0x778>)
 80054a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80054ac:	f7fe fdb2 	bl	8004014 <HAL_GetTick>
 80054b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054b2:	e008      	b.n	80054c6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054b4:	f7fe fdae 	bl	8004014 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d901      	bls.n	80054c6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e058      	b.n	8005578 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054c6:	4b04      	ldr	r3, [pc, #16]	; (80054d8 <HAL_RCC_OscConfig+0x778>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d0f0      	beq.n	80054b4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80054d2:	e050      	b.n	8005576 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e04f      	b.n	8005578 <HAL_RCC_OscConfig+0x818>
 80054d8:	40021000 	.word	0x40021000
 80054dc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054e0:	4b27      	ldr	r3, [pc, #156]	; (8005580 <HAL_RCC_OscConfig+0x820>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d144      	bne.n	8005576 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80054ec:	4b24      	ldr	r3, [pc, #144]	; (8005580 <HAL_RCC_OscConfig+0x820>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a23      	ldr	r2, [pc, #140]	; (8005580 <HAL_RCC_OscConfig+0x820>)
 80054f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054f6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80054f8:	4b21      	ldr	r3, [pc, #132]	; (8005580 <HAL_RCC_OscConfig+0x820>)
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	4a20      	ldr	r2, [pc, #128]	; (8005580 <HAL_RCC_OscConfig+0x820>)
 80054fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005502:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005504:	f7fe fd86 	bl	8004014 <HAL_GetTick>
 8005508:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800550a:	e008      	b.n	800551e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800550c:	f7fe fd82 	bl	8004014 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b02      	cmp	r3, #2
 8005518:	d901      	bls.n	800551e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e02c      	b.n	8005578 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800551e:	4b18      	ldr	r3, [pc, #96]	; (8005580 <HAL_RCC_OscConfig+0x820>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d0f0      	beq.n	800550c <HAL_RCC_OscConfig+0x7ac>
 800552a:	e024      	b.n	8005576 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	2b0c      	cmp	r3, #12
 8005530:	d01f      	beq.n	8005572 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005532:	4b13      	ldr	r3, [pc, #76]	; (8005580 <HAL_RCC_OscConfig+0x820>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a12      	ldr	r2, [pc, #72]	; (8005580 <HAL_RCC_OscConfig+0x820>)
 8005538:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800553c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800553e:	f7fe fd69 	bl	8004014 <HAL_GetTick>
 8005542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005544:	e008      	b.n	8005558 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005546:	f7fe fd65 	bl	8004014 <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d901      	bls.n	8005558 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e00f      	b.n	8005578 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005558:	4b09      	ldr	r3, [pc, #36]	; (8005580 <HAL_RCC_OscConfig+0x820>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d1f0      	bne.n	8005546 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005564:	4b06      	ldr	r3, [pc, #24]	; (8005580 <HAL_RCC_OscConfig+0x820>)
 8005566:	68da      	ldr	r2, [r3, #12]
 8005568:	4905      	ldr	r1, [pc, #20]	; (8005580 <HAL_RCC_OscConfig+0x820>)
 800556a:	4b06      	ldr	r3, [pc, #24]	; (8005584 <HAL_RCC_OscConfig+0x824>)
 800556c:	4013      	ands	r3, r2
 800556e:	60cb      	str	r3, [r1, #12]
 8005570:	e001      	b.n	8005576 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e000      	b.n	8005578 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3720      	adds	r7, #32
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	40021000 	.word	0x40021000
 8005584:	feeefffc 	.word	0xfeeefffc

08005588 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d101      	bne.n	800559c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e0e7      	b.n	800576c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800559c:	4b75      	ldr	r3, [pc, #468]	; (8005774 <HAL_RCC_ClockConfig+0x1ec>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0307 	and.w	r3, r3, #7
 80055a4:	683a      	ldr	r2, [r7, #0]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d910      	bls.n	80055cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055aa:	4b72      	ldr	r3, [pc, #456]	; (8005774 <HAL_RCC_ClockConfig+0x1ec>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f023 0207 	bic.w	r2, r3, #7
 80055b2:	4970      	ldr	r1, [pc, #448]	; (8005774 <HAL_RCC_ClockConfig+0x1ec>)
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ba:	4b6e      	ldr	r3, [pc, #440]	; (8005774 <HAL_RCC_ClockConfig+0x1ec>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0307 	and.w	r3, r3, #7
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d001      	beq.n	80055cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e0cf      	b.n	800576c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d010      	beq.n	80055fa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	4b66      	ldr	r3, [pc, #408]	; (8005778 <HAL_RCC_ClockConfig+0x1f0>)
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d908      	bls.n	80055fa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055e8:	4b63      	ldr	r3, [pc, #396]	; (8005778 <HAL_RCC_ClockConfig+0x1f0>)
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	4960      	ldr	r1, [pc, #384]	; (8005778 <HAL_RCC_ClockConfig+0x1f0>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	2b00      	cmp	r3, #0
 8005604:	d04c      	beq.n	80056a0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	2b03      	cmp	r3, #3
 800560c:	d107      	bne.n	800561e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800560e:	4b5a      	ldr	r3, [pc, #360]	; (8005778 <HAL_RCC_ClockConfig+0x1f0>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d121      	bne.n	800565e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e0a6      	b.n	800576c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	2b02      	cmp	r3, #2
 8005624:	d107      	bne.n	8005636 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005626:	4b54      	ldr	r3, [pc, #336]	; (8005778 <HAL_RCC_ClockConfig+0x1f0>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d115      	bne.n	800565e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e09a      	b.n	800576c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d107      	bne.n	800564e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800563e:	4b4e      	ldr	r3, [pc, #312]	; (8005778 <HAL_RCC_ClockConfig+0x1f0>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	2b00      	cmp	r3, #0
 8005648:	d109      	bne.n	800565e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e08e      	b.n	800576c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800564e:	4b4a      	ldr	r3, [pc, #296]	; (8005778 <HAL_RCC_ClockConfig+0x1f0>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e086      	b.n	800576c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800565e:	4b46      	ldr	r3, [pc, #280]	; (8005778 <HAL_RCC_ClockConfig+0x1f0>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f023 0203 	bic.w	r2, r3, #3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	4943      	ldr	r1, [pc, #268]	; (8005778 <HAL_RCC_ClockConfig+0x1f0>)
 800566c:	4313      	orrs	r3, r2
 800566e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005670:	f7fe fcd0 	bl	8004014 <HAL_GetTick>
 8005674:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005676:	e00a      	b.n	800568e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005678:	f7fe fccc 	bl	8004014 <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	f241 3288 	movw	r2, #5000	; 0x1388
 8005686:	4293      	cmp	r3, r2
 8005688:	d901      	bls.n	800568e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e06e      	b.n	800576c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800568e:	4b3a      	ldr	r3, [pc, #232]	; (8005778 <HAL_RCC_ClockConfig+0x1f0>)
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f003 020c 	and.w	r2, r3, #12
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	429a      	cmp	r2, r3
 800569e:	d1eb      	bne.n	8005678 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0302 	and.w	r3, r3, #2
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d010      	beq.n	80056ce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	689a      	ldr	r2, [r3, #8]
 80056b0:	4b31      	ldr	r3, [pc, #196]	; (8005778 <HAL_RCC_ClockConfig+0x1f0>)
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d208      	bcs.n	80056ce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056bc:	4b2e      	ldr	r3, [pc, #184]	; (8005778 <HAL_RCC_ClockConfig+0x1f0>)
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	492b      	ldr	r1, [pc, #172]	; (8005778 <HAL_RCC_ClockConfig+0x1f0>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056ce:	4b29      	ldr	r3, [pc, #164]	; (8005774 <HAL_RCC_ClockConfig+0x1ec>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0307 	and.w	r3, r3, #7
 80056d6:	683a      	ldr	r2, [r7, #0]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d210      	bcs.n	80056fe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056dc:	4b25      	ldr	r3, [pc, #148]	; (8005774 <HAL_RCC_ClockConfig+0x1ec>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f023 0207 	bic.w	r2, r3, #7
 80056e4:	4923      	ldr	r1, [pc, #140]	; (8005774 <HAL_RCC_ClockConfig+0x1ec>)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ec:	4b21      	ldr	r3, [pc, #132]	; (8005774 <HAL_RCC_ClockConfig+0x1ec>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0307 	and.w	r3, r3, #7
 80056f4:	683a      	ldr	r2, [r7, #0]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d001      	beq.n	80056fe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e036      	b.n	800576c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0304 	and.w	r3, r3, #4
 8005706:	2b00      	cmp	r3, #0
 8005708:	d008      	beq.n	800571c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800570a:	4b1b      	ldr	r3, [pc, #108]	; (8005778 <HAL_RCC_ClockConfig+0x1f0>)
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	4918      	ldr	r1, [pc, #96]	; (8005778 <HAL_RCC_ClockConfig+0x1f0>)
 8005718:	4313      	orrs	r3, r2
 800571a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0308 	and.w	r3, r3, #8
 8005724:	2b00      	cmp	r3, #0
 8005726:	d009      	beq.n	800573c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005728:	4b13      	ldr	r3, [pc, #76]	; (8005778 <HAL_RCC_ClockConfig+0x1f0>)
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	00db      	lsls	r3, r3, #3
 8005736:	4910      	ldr	r1, [pc, #64]	; (8005778 <HAL_RCC_ClockConfig+0x1f0>)
 8005738:	4313      	orrs	r3, r2
 800573a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800573c:	f000 f824 	bl	8005788 <HAL_RCC_GetSysClockFreq>
 8005740:	4602      	mov	r2, r0
 8005742:	4b0d      	ldr	r3, [pc, #52]	; (8005778 <HAL_RCC_ClockConfig+0x1f0>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	091b      	lsrs	r3, r3, #4
 8005748:	f003 030f 	and.w	r3, r3, #15
 800574c:	490b      	ldr	r1, [pc, #44]	; (800577c <HAL_RCC_ClockConfig+0x1f4>)
 800574e:	5ccb      	ldrb	r3, [r1, r3]
 8005750:	f003 031f 	and.w	r3, r3, #31
 8005754:	fa22 f303 	lsr.w	r3, r2, r3
 8005758:	4a09      	ldr	r2, [pc, #36]	; (8005780 <HAL_RCC_ClockConfig+0x1f8>)
 800575a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800575c:	4b09      	ldr	r3, [pc, #36]	; (8005784 <HAL_RCC_ClockConfig+0x1fc>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4618      	mov	r0, r3
 8005762:	f7fe fc1b 	bl	8003f9c <HAL_InitTick>
 8005766:	4603      	mov	r3, r0
 8005768:	72fb      	strb	r3, [r7, #11]

  return status;
 800576a:	7afb      	ldrb	r3, [r7, #11]
}
 800576c:	4618      	mov	r0, r3
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	40022000 	.word	0x40022000
 8005778:	40021000 	.word	0x40021000
 800577c:	0800ab4c 	.word	0x0800ab4c
 8005780:	20000088 	.word	0x20000088
 8005784:	20000080 	.word	0x20000080

08005788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005788:	b480      	push	{r7}
 800578a:	b089      	sub	sp, #36	; 0x24
 800578c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800578e:	2300      	movs	r3, #0
 8005790:	61fb      	str	r3, [r7, #28]
 8005792:	2300      	movs	r3, #0
 8005794:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005796:	4b3e      	ldr	r3, [pc, #248]	; (8005890 <HAL_RCC_GetSysClockFreq+0x108>)
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f003 030c 	and.w	r3, r3, #12
 800579e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057a0:	4b3b      	ldr	r3, [pc, #236]	; (8005890 <HAL_RCC_GetSysClockFreq+0x108>)
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	f003 0303 	and.w	r3, r3, #3
 80057a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d005      	beq.n	80057bc <HAL_RCC_GetSysClockFreq+0x34>
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	2b0c      	cmp	r3, #12
 80057b4:	d121      	bne.n	80057fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d11e      	bne.n	80057fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80057bc:	4b34      	ldr	r3, [pc, #208]	; (8005890 <HAL_RCC_GetSysClockFreq+0x108>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0308 	and.w	r3, r3, #8
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d107      	bne.n	80057d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80057c8:	4b31      	ldr	r3, [pc, #196]	; (8005890 <HAL_RCC_GetSysClockFreq+0x108>)
 80057ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057ce:	0a1b      	lsrs	r3, r3, #8
 80057d0:	f003 030f 	and.w	r3, r3, #15
 80057d4:	61fb      	str	r3, [r7, #28]
 80057d6:	e005      	b.n	80057e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80057d8:	4b2d      	ldr	r3, [pc, #180]	; (8005890 <HAL_RCC_GetSysClockFreq+0x108>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	091b      	lsrs	r3, r3, #4
 80057de:	f003 030f 	and.w	r3, r3, #15
 80057e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80057e4:	4a2b      	ldr	r2, [pc, #172]	; (8005894 <HAL_RCC_GetSysClockFreq+0x10c>)
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10d      	bne.n	8005810 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80057f8:	e00a      	b.n	8005810 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	2b04      	cmp	r3, #4
 80057fe:	d102      	bne.n	8005806 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005800:	4b25      	ldr	r3, [pc, #148]	; (8005898 <HAL_RCC_GetSysClockFreq+0x110>)
 8005802:	61bb      	str	r3, [r7, #24]
 8005804:	e004      	b.n	8005810 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	2b08      	cmp	r3, #8
 800580a:	d101      	bne.n	8005810 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800580c:	4b23      	ldr	r3, [pc, #140]	; (800589c <HAL_RCC_GetSysClockFreq+0x114>)
 800580e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	2b0c      	cmp	r3, #12
 8005814:	d134      	bne.n	8005880 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005816:	4b1e      	ldr	r3, [pc, #120]	; (8005890 <HAL_RCC_GetSysClockFreq+0x108>)
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	f003 0303 	and.w	r3, r3, #3
 800581e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2b02      	cmp	r3, #2
 8005824:	d003      	beq.n	800582e <HAL_RCC_GetSysClockFreq+0xa6>
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	2b03      	cmp	r3, #3
 800582a:	d003      	beq.n	8005834 <HAL_RCC_GetSysClockFreq+0xac>
 800582c:	e005      	b.n	800583a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800582e:	4b1a      	ldr	r3, [pc, #104]	; (8005898 <HAL_RCC_GetSysClockFreq+0x110>)
 8005830:	617b      	str	r3, [r7, #20]
      break;
 8005832:	e005      	b.n	8005840 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005834:	4b19      	ldr	r3, [pc, #100]	; (800589c <HAL_RCC_GetSysClockFreq+0x114>)
 8005836:	617b      	str	r3, [r7, #20]
      break;
 8005838:	e002      	b.n	8005840 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	617b      	str	r3, [r7, #20]
      break;
 800583e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005840:	4b13      	ldr	r3, [pc, #76]	; (8005890 <HAL_RCC_GetSysClockFreq+0x108>)
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	091b      	lsrs	r3, r3, #4
 8005846:	f003 0307 	and.w	r3, r3, #7
 800584a:	3301      	adds	r3, #1
 800584c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800584e:	4b10      	ldr	r3, [pc, #64]	; (8005890 <HAL_RCC_GetSysClockFreq+0x108>)
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	0a1b      	lsrs	r3, r3, #8
 8005854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	fb03 f202 	mul.w	r2, r3, r2
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	fbb2 f3f3 	udiv	r3, r2, r3
 8005864:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005866:	4b0a      	ldr	r3, [pc, #40]	; (8005890 <HAL_RCC_GetSysClockFreq+0x108>)
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	0e5b      	lsrs	r3, r3, #25
 800586c:	f003 0303 	and.w	r3, r3, #3
 8005870:	3301      	adds	r3, #1
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	fbb2 f3f3 	udiv	r3, r2, r3
 800587e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005880:	69bb      	ldr	r3, [r7, #24]
}
 8005882:	4618      	mov	r0, r3
 8005884:	3724      	adds	r7, #36	; 0x24
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	40021000 	.word	0x40021000
 8005894:	0800ab64 	.word	0x0800ab64
 8005898:	00f42400 	.word	0x00f42400
 800589c:	02dc6c00 	.word	0x02dc6c00

080058a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058a0:	b480      	push	{r7}
 80058a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058a4:	4b03      	ldr	r3, [pc, #12]	; (80058b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80058a6:	681b      	ldr	r3, [r3, #0]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	20000088 	.word	0x20000088

080058b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80058bc:	f7ff fff0 	bl	80058a0 <HAL_RCC_GetHCLKFreq>
 80058c0:	4602      	mov	r2, r0
 80058c2:	4b06      	ldr	r3, [pc, #24]	; (80058dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	0a1b      	lsrs	r3, r3, #8
 80058c8:	f003 0307 	and.w	r3, r3, #7
 80058cc:	4904      	ldr	r1, [pc, #16]	; (80058e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80058ce:	5ccb      	ldrb	r3, [r1, r3]
 80058d0:	f003 031f 	and.w	r3, r3, #31
 80058d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058d8:	4618      	mov	r0, r3
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	40021000 	.word	0x40021000
 80058e0:	0800ab5c 	.word	0x0800ab5c

080058e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80058e8:	f7ff ffda 	bl	80058a0 <HAL_RCC_GetHCLKFreq>
 80058ec:	4602      	mov	r2, r0
 80058ee:	4b06      	ldr	r3, [pc, #24]	; (8005908 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	0adb      	lsrs	r3, r3, #11
 80058f4:	f003 0307 	and.w	r3, r3, #7
 80058f8:	4904      	ldr	r1, [pc, #16]	; (800590c <HAL_RCC_GetPCLK2Freq+0x28>)
 80058fa:	5ccb      	ldrb	r3, [r1, r3]
 80058fc:	f003 031f 	and.w	r3, r3, #31
 8005900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005904:	4618      	mov	r0, r3
 8005906:	bd80      	pop	{r7, pc}
 8005908:	40021000 	.word	0x40021000
 800590c:	0800ab5c 	.word	0x0800ab5c

08005910 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005918:	2300      	movs	r3, #0
 800591a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800591c:	4b2a      	ldr	r3, [pc, #168]	; (80059c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800591e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d003      	beq.n	8005930 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005928:	f7ff f9b6 	bl	8004c98 <HAL_PWREx_GetVoltageRange>
 800592c:	6178      	str	r0, [r7, #20]
 800592e:	e014      	b.n	800595a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005930:	4b25      	ldr	r3, [pc, #148]	; (80059c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005934:	4a24      	ldr	r2, [pc, #144]	; (80059c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800593a:	6593      	str	r3, [r2, #88]	; 0x58
 800593c:	4b22      	ldr	r3, [pc, #136]	; (80059c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800593e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005944:	60fb      	str	r3, [r7, #12]
 8005946:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005948:	f7ff f9a6 	bl	8004c98 <HAL_PWREx_GetVoltageRange>
 800594c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800594e:	4b1e      	ldr	r3, [pc, #120]	; (80059c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005952:	4a1d      	ldr	r2, [pc, #116]	; (80059c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005954:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005958:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005960:	d10b      	bne.n	800597a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2b80      	cmp	r3, #128	; 0x80
 8005966:	d919      	bls.n	800599c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2ba0      	cmp	r3, #160	; 0xa0
 800596c:	d902      	bls.n	8005974 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800596e:	2302      	movs	r3, #2
 8005970:	613b      	str	r3, [r7, #16]
 8005972:	e013      	b.n	800599c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005974:	2301      	movs	r3, #1
 8005976:	613b      	str	r3, [r7, #16]
 8005978:	e010      	b.n	800599c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2b80      	cmp	r3, #128	; 0x80
 800597e:	d902      	bls.n	8005986 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005980:	2303      	movs	r3, #3
 8005982:	613b      	str	r3, [r7, #16]
 8005984:	e00a      	b.n	800599c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b80      	cmp	r3, #128	; 0x80
 800598a:	d102      	bne.n	8005992 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800598c:	2302      	movs	r3, #2
 800598e:	613b      	str	r3, [r7, #16]
 8005990:	e004      	b.n	800599c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b70      	cmp	r3, #112	; 0x70
 8005996:	d101      	bne.n	800599c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005998:	2301      	movs	r3, #1
 800599a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800599c:	4b0b      	ldr	r3, [pc, #44]	; (80059cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f023 0207 	bic.w	r2, r3, #7
 80059a4:	4909      	ldr	r1, [pc, #36]	; (80059cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80059ac:	4b07      	ldr	r3, [pc, #28]	; (80059cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0307 	and.w	r3, r3, #7
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d001      	beq.n	80059be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e000      	b.n	80059c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3718      	adds	r7, #24
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	40021000 	.word	0x40021000
 80059cc:	40022000 	.word	0x40022000

080059d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80059d8:	2300      	movs	r3, #0
 80059da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80059dc:	2300      	movs	r3, #0
 80059de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d031      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80059f4:	d01a      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80059f6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80059fa:	d814      	bhi.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d009      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005a00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a04:	d10f      	bne.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005a06:	4b5d      	ldr	r3, [pc, #372]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	4a5c      	ldr	r2, [pc, #368]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a10:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005a12:	e00c      	b.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	3304      	adds	r3, #4
 8005a18:	2100      	movs	r1, #0
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 f9f0 	bl	8005e00 <RCCEx_PLLSAI1_Config>
 8005a20:	4603      	mov	r3, r0
 8005a22:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005a24:	e003      	b.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	74fb      	strb	r3, [r7, #19]
      break;
 8005a2a:	e000      	b.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005a2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a2e:	7cfb      	ldrb	r3, [r7, #19]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10b      	bne.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a34:	4b51      	ldr	r3, [pc, #324]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a42:	494e      	ldr	r1, [pc, #312]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005a4a:	e001      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a4c:	7cfb      	ldrb	r3, [r7, #19]
 8005a4e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f000 809e 	beq.w	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005a62:	4b46      	ldr	r3, [pc, #280]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d101      	bne.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e000      	b.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005a72:	2300      	movs	r3, #0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00d      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a78:	4b40      	ldr	r3, [pc, #256]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a7c:	4a3f      	ldr	r2, [pc, #252]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a82:	6593      	str	r3, [r2, #88]	; 0x58
 8005a84:	4b3d      	ldr	r3, [pc, #244]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a8c:	60bb      	str	r3, [r7, #8]
 8005a8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a90:	2301      	movs	r3, #1
 8005a92:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a94:	4b3a      	ldr	r3, [pc, #232]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a39      	ldr	r2, [pc, #228]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005aa0:	f7fe fab8 	bl	8004014 <HAL_GetTick>
 8005aa4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005aa6:	e009      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aa8:	f7fe fab4 	bl	8004014 <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d902      	bls.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	74fb      	strb	r3, [r7, #19]
        break;
 8005aba:	e005      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005abc:	4b30      	ldr	r3, [pc, #192]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d0ef      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005ac8:	7cfb      	ldrb	r3, [r7, #19]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d15a      	bne.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ace:	4b2b      	ldr	r3, [pc, #172]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ad4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ad8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d01e      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d019      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005aea:	4b24      	ldr	r3, [pc, #144]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005af0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005af4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005af6:	4b21      	ldr	r3, [pc, #132]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005afc:	4a1f      	ldr	r2, [pc, #124]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b06:	4b1d      	ldr	r3, [pc, #116]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b0c:	4a1b      	ldr	r2, [pc, #108]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005b16:	4a19      	ldr	r2, [pc, #100]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	f003 0301 	and.w	r3, r3, #1
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d016      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b28:	f7fe fa74 	bl	8004014 <HAL_GetTick>
 8005b2c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b2e:	e00b      	b.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b30:	f7fe fa70 	bl	8004014 <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d902      	bls.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	74fb      	strb	r3, [r7, #19]
            break;
 8005b46:	e006      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b48:	4b0c      	ldr	r3, [pc, #48]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d0ec      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005b56:	7cfb      	ldrb	r3, [r7, #19]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10b      	bne.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b5c:	4b07      	ldr	r3, [pc, #28]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b6a:	4904      	ldr	r1, [pc, #16]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005b72:	e009      	b.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b74:	7cfb      	ldrb	r3, [r7, #19]
 8005b76:	74bb      	strb	r3, [r7, #18]
 8005b78:	e006      	b.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005b7a:	bf00      	nop
 8005b7c:	40021000 	.word	0x40021000
 8005b80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b84:	7cfb      	ldrb	r3, [r7, #19]
 8005b86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b88:	7c7b      	ldrb	r3, [r7, #17]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d105      	bne.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b8e:	4b9b      	ldr	r3, [pc, #620]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b92:	4a9a      	ldr	r2, [pc, #616]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005b94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b98:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00a      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ba6:	4b95      	ldr	r3, [pc, #596]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bac:	f023 0203 	bic.w	r2, r3, #3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a1b      	ldr	r3, [r3, #32]
 8005bb4:	4991      	ldr	r1, [pc, #580]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0302 	and.w	r3, r3, #2
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00a      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005bc8:	4b8c      	ldr	r3, [pc, #560]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bce:	f023 020c 	bic.w	r2, r3, #12
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd6:	4989      	ldr	r1, [pc, #548]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0304 	and.w	r3, r3, #4
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00a      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005bea:	4b84      	ldr	r3, [pc, #528]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bf0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf8:	4980      	ldr	r1, [pc, #512]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0320 	and.w	r3, r3, #32
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00a      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c0c:	4b7b      	ldr	r3, [pc, #492]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1a:	4978      	ldr	r1, [pc, #480]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00a      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c2e:	4b73      	ldr	r3, [pc, #460]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c3c:	496f      	ldr	r1, [pc, #444]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00a      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005c50:	4b6a      	ldr	r3, [pc, #424]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5e:	4967      	ldr	r1, [pc, #412]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00a      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c72:	4b62      	ldr	r3, [pc, #392]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c78:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c80:	495e      	ldr	r1, [pc, #376]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00a      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c94:	4b59      	ldr	r3, [pc, #356]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c9a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ca2:	4956      	ldr	r1, [pc, #344]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00a      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005cb6:	4b51      	ldr	r3, [pc, #324]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cbc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc4:	494d      	ldr	r1, [pc, #308]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d028      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005cd8:	4b48      	ldr	r3, [pc, #288]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cde:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ce6:	4945      	ldr	r1, [pc, #276]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cf2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cf6:	d106      	bne.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cf8:	4b40      	ldr	r3, [pc, #256]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	4a3f      	ldr	r2, [pc, #252]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005cfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d02:	60d3      	str	r3, [r2, #12]
 8005d04:	e011      	b.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d0e:	d10c      	bne.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	3304      	adds	r3, #4
 8005d14:	2101      	movs	r1, #1
 8005d16:	4618      	mov	r0, r3
 8005d18:	f000 f872 	bl	8005e00 <RCCEx_PLLSAI1_Config>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d20:	7cfb      	ldrb	r3, [r7, #19]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d001      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8005d26:	7cfb      	ldrb	r3, [r7, #19]
 8005d28:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d028      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d36:	4b31      	ldr	r3, [pc, #196]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d3c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d44:	492d      	ldr	r1, [pc, #180]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d54:	d106      	bne.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d56:	4b29      	ldr	r3, [pc, #164]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	4a28      	ldr	r2, [pc, #160]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005d5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d60:	60d3      	str	r3, [r2, #12]
 8005d62:	e011      	b.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d6c:	d10c      	bne.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	3304      	adds	r3, #4
 8005d72:	2101      	movs	r1, #1
 8005d74:	4618      	mov	r0, r3
 8005d76:	f000 f843 	bl	8005e00 <RCCEx_PLLSAI1_Config>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d7e:	7cfb      	ldrb	r3, [r7, #19]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d001      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8005d84:	7cfb      	ldrb	r3, [r7, #19]
 8005d86:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d01c      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d94:	4b19      	ldr	r3, [pc, #100]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d9a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005da2:	4916      	ldr	r1, [pc, #88]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005da4:	4313      	orrs	r3, r2
 8005da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005db2:	d10c      	bne.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	3304      	adds	r3, #4
 8005db8:	2102      	movs	r1, #2
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f000 f820 	bl	8005e00 <RCCEx_PLLSAI1_Config>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005dc4:	7cfb      	ldrb	r3, [r7, #19]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d001      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8005dca:	7cfb      	ldrb	r3, [r7, #19]
 8005dcc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00a      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005dda:	4b08      	ldr	r3, [pc, #32]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de8:	4904      	ldr	r1, [pc, #16]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005df0:	7cbb      	ldrb	r3, [r7, #18]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3718      	adds	r7, #24
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	40021000 	.word	0x40021000

08005e00 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005e0e:	4b74      	ldr	r3, [pc, #464]	; (8005fe0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	f003 0303 	and.w	r3, r3, #3
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d018      	beq.n	8005e4c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005e1a:	4b71      	ldr	r3, [pc, #452]	; (8005fe0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	f003 0203 	and.w	r2, r3, #3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d10d      	bne.n	8005e46 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
       ||
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d009      	beq.n	8005e46 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005e32:	4b6b      	ldr	r3, [pc, #428]	; (8005fe0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	091b      	lsrs	r3, r3, #4
 8005e38:	f003 0307 	and.w	r3, r3, #7
 8005e3c:	1c5a      	adds	r2, r3, #1
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
       ||
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d047      	beq.n	8005ed6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	73fb      	strb	r3, [r7, #15]
 8005e4a:	e044      	b.n	8005ed6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2b03      	cmp	r3, #3
 8005e52:	d018      	beq.n	8005e86 <RCCEx_PLLSAI1_Config+0x86>
 8005e54:	2b03      	cmp	r3, #3
 8005e56:	d825      	bhi.n	8005ea4 <RCCEx_PLLSAI1_Config+0xa4>
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d002      	beq.n	8005e62 <RCCEx_PLLSAI1_Config+0x62>
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d009      	beq.n	8005e74 <RCCEx_PLLSAI1_Config+0x74>
 8005e60:	e020      	b.n	8005ea4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005e62:	4b5f      	ldr	r3, [pc, #380]	; (8005fe0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d11d      	bne.n	8005eaa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e72:	e01a      	b.n	8005eaa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005e74:	4b5a      	ldr	r3, [pc, #360]	; (8005fe0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d116      	bne.n	8005eae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e84:	e013      	b.n	8005eae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005e86:	4b56      	ldr	r3, [pc, #344]	; (8005fe0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10f      	bne.n	8005eb2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005e92:	4b53      	ldr	r3, [pc, #332]	; (8005fe0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d109      	bne.n	8005eb2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005ea2:	e006      	b.n	8005eb2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ea8:	e004      	b.n	8005eb4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005eaa:	bf00      	nop
 8005eac:	e002      	b.n	8005eb4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005eae:	bf00      	nop
 8005eb0:	e000      	b.n	8005eb4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005eb2:	bf00      	nop
    }

    if(status == HAL_OK)
 8005eb4:	7bfb      	ldrb	r3, [r7, #15]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d10d      	bne.n	8005ed6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005eba:	4b49      	ldr	r3, [pc, #292]	; (8005fe0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6819      	ldr	r1, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	011b      	lsls	r3, r3, #4
 8005ece:	430b      	orrs	r3, r1
 8005ed0:	4943      	ldr	r1, [pc, #268]	; (8005fe0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005ed6:	7bfb      	ldrb	r3, [r7, #15]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d17c      	bne.n	8005fd6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005edc:	4b40      	ldr	r3, [pc, #256]	; (8005fe0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a3f      	ldr	r2, [pc, #252]	; (8005fe0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ee2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ee6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ee8:	f7fe f894 	bl	8004014 <HAL_GetTick>
 8005eec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005eee:	e009      	b.n	8005f04 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ef0:	f7fe f890 	bl	8004014 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d902      	bls.n	8005f04 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	73fb      	strb	r3, [r7, #15]
        break;
 8005f02:	e005      	b.n	8005f10 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f04:	4b36      	ldr	r3, [pc, #216]	; (8005fe0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1ef      	bne.n	8005ef0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005f10:	7bfb      	ldrb	r3, [r7, #15]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d15f      	bne.n	8005fd6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d110      	bne.n	8005f3e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f1c:	4b30      	ldr	r3, [pc, #192]	; (8005fe0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005f24:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	6892      	ldr	r2, [r2, #8]
 8005f2c:	0211      	lsls	r1, r2, #8
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	68d2      	ldr	r2, [r2, #12]
 8005f32:	06d2      	lsls	r2, r2, #27
 8005f34:	430a      	orrs	r2, r1
 8005f36:	492a      	ldr	r1, [pc, #168]	; (8005fe0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	610b      	str	r3, [r1, #16]
 8005f3c:	e027      	b.n	8005f8e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d112      	bne.n	8005f6a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f44:	4b26      	ldr	r3, [pc, #152]	; (8005fe0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005f4c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	6892      	ldr	r2, [r2, #8]
 8005f54:	0211      	lsls	r1, r2, #8
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	6912      	ldr	r2, [r2, #16]
 8005f5a:	0852      	lsrs	r2, r2, #1
 8005f5c:	3a01      	subs	r2, #1
 8005f5e:	0552      	lsls	r2, r2, #21
 8005f60:	430a      	orrs	r2, r1
 8005f62:	491f      	ldr	r1, [pc, #124]	; (8005fe0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f64:	4313      	orrs	r3, r2
 8005f66:	610b      	str	r3, [r1, #16]
 8005f68:	e011      	b.n	8005f8e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f6a:	4b1d      	ldr	r3, [pc, #116]	; (8005fe0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005f72:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	6892      	ldr	r2, [r2, #8]
 8005f7a:	0211      	lsls	r1, r2, #8
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	6952      	ldr	r2, [r2, #20]
 8005f80:	0852      	lsrs	r2, r2, #1
 8005f82:	3a01      	subs	r2, #1
 8005f84:	0652      	lsls	r2, r2, #25
 8005f86:	430a      	orrs	r2, r1
 8005f88:	4915      	ldr	r1, [pc, #84]	; (8005fe0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005f8e:	4b14      	ldr	r3, [pc, #80]	; (8005fe0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a13      	ldr	r2, [pc, #76]	; (8005fe0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f98:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f9a:	f7fe f83b 	bl	8004014 <HAL_GetTick>
 8005f9e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005fa0:	e009      	b.n	8005fb6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005fa2:	f7fe f837 	bl	8004014 <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d902      	bls.n	8005fb6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	73fb      	strb	r3, [r7, #15]
          break;
 8005fb4:	e005      	b.n	8005fc2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005fb6:	4b0a      	ldr	r3, [pc, #40]	; (8005fe0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d0ef      	beq.n	8005fa2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005fc2:	7bfb      	ldrb	r3, [r7, #15]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d106      	bne.n	8005fd6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005fc8:	4b05      	ldr	r3, [pc, #20]	; (8005fe0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fca:	691a      	ldr	r2, [r3, #16]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	4903      	ldr	r1, [pc, #12]	; (8005fe0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	40021000 	.word	0x40021000

08005fe4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d06c      	beq.n	80060d0 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d106      	bne.n	8006010 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f002 ff56 	bl	8008ebc <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2202      	movs	r2, #2
 8006014:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	22ca      	movs	r2, #202	; 0xca
 800601e:	625a      	str	r2, [r3, #36]	; 0x24
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2253      	movs	r2, #83	; 0x53
 8006026:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 f87c 	bl	8006126 <RTC_EnterInitMode>
 800602e:	4603      	mov	r3, r0
 8006030:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006032:	7bfb      	ldrb	r3, [r7, #15]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d14b      	bne.n	80060d0 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	6812      	ldr	r2, [r2, #0]
 8006042:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006046:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800604a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6899      	ldr	r1, [r3, #8]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685a      	ldr	r2, [r3, #4]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	431a      	orrs	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	431a      	orrs	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	68d2      	ldr	r2, [r2, #12]
 8006072:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6919      	ldr	r1, [r3, #16]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	041a      	lsls	r2, r3, #16
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	430a      	orrs	r2, r1
 8006086:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 f87f 	bl	800618c <RTC_ExitInitMode>
 800608e:	4603      	mov	r3, r0
 8006090:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006092:	7bfb      	ldrb	r3, [r7, #15]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d11b      	bne.n	80060d0 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f022 0203 	bic.w	r2, r2, #3
 80060a6:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	69da      	ldr	r2, [r3, #28]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	431a      	orrs	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	430a      	orrs	r2, r1
 80060be:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	22ff      	movs	r2, #255	; 0xff
 80060c6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80060d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b084      	sub	sp, #16
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68da      	ldr	r2, [r3, #12]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80060f0:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80060f2:	f7fd ff8f 	bl	8004014 <HAL_GetTick>
 80060f6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80060f8:	e009      	b.n	800610e <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80060fa:	f7fd ff8b 	bl	8004014 <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006108:	d901      	bls.n	800610e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e007      	b.n	800611e <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	f003 0320 	and.w	r3, r3, #32
 8006118:	2b00      	cmp	r3, #0
 800611a:	d0ee      	beq.n	80060fa <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006126:	b580      	push	{r7, lr}
 8006128:	b084      	sub	sp, #16
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800612e:	2300      	movs	r3, #0
 8006130:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800613c:	2b00      	cmp	r3, #0
 800613e:	d120      	bne.n	8006182 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006148:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800614a:	f7fd ff63 	bl	8004014 <HAL_GetTick>
 800614e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006150:	e00d      	b.n	800616e <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006152:	f7fd ff5f 	bl	8004014 <HAL_GetTick>
 8006156:	4602      	mov	r2, r0
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	1ad3      	subs	r3, r2, r3
 800615c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006160:	d905      	bls.n	800616e <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2203      	movs	r2, #3
 800616a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006178:	2b00      	cmp	r3, #0
 800617a:	d102      	bne.n	8006182 <RTC_EnterInitMode+0x5c>
 800617c:	7bfb      	ldrb	r3, [r7, #15]
 800617e:	2b03      	cmp	r3, #3
 8006180:	d1e7      	bne.n	8006152 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8006182:	7bfb      	ldrb	r3, [r7, #15]
}
 8006184:	4618      	mov	r0, r3
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006194:	2300      	movs	r3, #0
 8006196:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8006198:	4b1a      	ldr	r3, [pc, #104]	; (8006204 <RTC_ExitInitMode+0x78>)
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	4a19      	ldr	r2, [pc, #100]	; (8006204 <RTC_ExitInitMode+0x78>)
 800619e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061a2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80061a4:	4b17      	ldr	r3, [pc, #92]	; (8006204 <RTC_ExitInitMode+0x78>)
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f003 0320 	and.w	r3, r3, #32
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10c      	bne.n	80061ca <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f7ff ff92 	bl	80060da <HAL_RTC_WaitForSynchro>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d01e      	beq.n	80061fa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2203      	movs	r2, #3
 80061c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	73fb      	strb	r3, [r7, #15]
 80061c8:	e017      	b.n	80061fa <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80061ca:	4b0e      	ldr	r3, [pc, #56]	; (8006204 <RTC_ExitInitMode+0x78>)
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	4a0d      	ldr	r2, [pc, #52]	; (8006204 <RTC_ExitInitMode+0x78>)
 80061d0:	f023 0320 	bic.w	r3, r3, #32
 80061d4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f7ff ff7f 	bl	80060da <HAL_RTC_WaitForSynchro>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d005      	beq.n	80061ee <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2203      	movs	r2, #3
 80061e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80061ee:	4b05      	ldr	r3, [pc, #20]	; (8006204 <RTC_ExitInitMode+0x78>)
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	4a04      	ldr	r2, [pc, #16]	; (8006204 <RTC_ExitInitMode+0x78>)
 80061f4:	f043 0320 	orr.w	r3, r3, #32
 80061f8:	6093      	str	r3, [r2, #8]
  }

  return status;
 80061fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3710      	adds	r7, #16
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	40002800 	.word	0x40002800

08006208 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e095      	b.n	8006346 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621e:	2b00      	cmp	r3, #0
 8006220:	d108      	bne.n	8006234 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800622a:	d009      	beq.n	8006240 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	61da      	str	r2, [r3, #28]
 8006232:	e005      	b.n	8006240 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d106      	bne.n	8006260 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f877 	bl	800634e <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2202      	movs	r2, #2
 8006264:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006276:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006280:	d902      	bls.n	8006288 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006282:	2300      	movs	r3, #0
 8006284:	60fb      	str	r3, [r7, #12]
 8006286:	e002      	b.n	800628e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006288:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800628c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006296:	d007      	beq.n	80062a8 <HAL_SPI_Init+0xa0>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062a0:	d002      	beq.n	80062a8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80062b8:	431a      	orrs	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	431a      	orrs	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	695b      	ldr	r3, [r3, #20]
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	431a      	orrs	r2, r3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062d6:	431a      	orrs	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	69db      	ldr	r3, [r3, #28]
 80062dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062e0:	431a      	orrs	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ea:	ea42 0103 	orr.w	r1, r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	0c1b      	lsrs	r3, r3, #16
 8006304:	f003 0204 	and.w	r2, r3, #4
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630c:	f003 0310 	and.w	r3, r3, #16
 8006310:	431a      	orrs	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006316:	f003 0308 	and.w	r3, r3, #8
 800631a:	431a      	orrs	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006324:	ea42 0103 	orr.w	r1, r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	430a      	orrs	r2, r1
 8006334:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800634e:	b480      	push	{r7}
 8006350:	b083      	sub	sp, #12
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8006356:	bf00      	nop
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b082      	sub	sp, #8
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d101      	bne.n	8006374 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e049      	b.n	8006408 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b00      	cmp	r3, #0
 800637e:	d106      	bne.n	800638e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f002 fdb3 	bl	8008ef4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2202      	movs	r2, #2
 8006392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	3304      	adds	r3, #4
 800639e:	4619      	mov	r1, r3
 80063a0:	4610      	mov	r0, r2
 80063a2:	f000 fe2f 	bl	8007004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2201      	movs	r2, #1
 80063b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2201      	movs	r2, #1
 80063ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2201      	movs	r2, #1
 80063fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3708      	adds	r7, #8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d101      	bne.n	8006422 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e049      	b.n	80064b6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006428:	b2db      	uxtb	r3, r3
 800642a:	2b00      	cmp	r3, #0
 800642c:	d106      	bne.n	800643c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f002 fe56 	bl	80090e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2202      	movs	r2, #2
 8006440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	3304      	adds	r3, #4
 800644c:	4619      	mov	r1, r3
 800644e:	4610      	mov	r0, r2
 8006450:	f000 fdd8 	bl	8007004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3708      	adds	r7, #8
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
	...

080064c0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b086      	sub	sp, #24
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
 80064cc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80064ce:	2300      	movs	r3, #0
 80064d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d109      	bne.n	80064ec <HAL_TIM_PWM_Start_DMA+0x2c>
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	bf0c      	ite	eq
 80064e4:	2301      	moveq	r3, #1
 80064e6:	2300      	movne	r3, #0
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	e03c      	b.n	8006566 <HAL_TIM_PWM_Start_DMA+0xa6>
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	2b04      	cmp	r3, #4
 80064f0:	d109      	bne.n	8006506 <HAL_TIM_PWM_Start_DMA+0x46>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	bf0c      	ite	eq
 80064fe:	2301      	moveq	r3, #1
 8006500:	2300      	movne	r3, #0
 8006502:	b2db      	uxtb	r3, r3
 8006504:	e02f      	b.n	8006566 <HAL_TIM_PWM_Start_DMA+0xa6>
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	2b08      	cmp	r3, #8
 800650a:	d109      	bne.n	8006520 <HAL_TIM_PWM_Start_DMA+0x60>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006512:	b2db      	uxtb	r3, r3
 8006514:	2b02      	cmp	r3, #2
 8006516:	bf0c      	ite	eq
 8006518:	2301      	moveq	r3, #1
 800651a:	2300      	movne	r3, #0
 800651c:	b2db      	uxtb	r3, r3
 800651e:	e022      	b.n	8006566 <HAL_TIM_PWM_Start_DMA+0xa6>
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	2b0c      	cmp	r3, #12
 8006524:	d109      	bne.n	800653a <HAL_TIM_PWM_Start_DMA+0x7a>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b02      	cmp	r3, #2
 8006530:	bf0c      	ite	eq
 8006532:	2301      	moveq	r3, #1
 8006534:	2300      	movne	r3, #0
 8006536:	b2db      	uxtb	r3, r3
 8006538:	e015      	b.n	8006566 <HAL_TIM_PWM_Start_DMA+0xa6>
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	2b10      	cmp	r3, #16
 800653e:	d109      	bne.n	8006554 <HAL_TIM_PWM_Start_DMA+0x94>
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b02      	cmp	r3, #2
 800654a:	bf0c      	ite	eq
 800654c:	2301      	moveq	r3, #1
 800654e:	2300      	movne	r3, #0
 8006550:	b2db      	uxtb	r3, r3
 8006552:	e008      	b.n	8006566 <HAL_TIM_PWM_Start_DMA+0xa6>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800655a:	b2db      	uxtb	r3, r3
 800655c:	2b02      	cmp	r3, #2
 800655e:	bf0c      	ite	eq
 8006560:	2301      	moveq	r3, #1
 8006562:	2300      	movne	r3, #0
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b00      	cmp	r3, #0
 8006568:	d001      	beq.n	800656e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800656a:	2302      	movs	r3, #2
 800656c:	e18d      	b.n	800688a <HAL_TIM_PWM_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d109      	bne.n	8006588 <HAL_TIM_PWM_Start_DMA+0xc8>
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b01      	cmp	r3, #1
 800657e:	bf0c      	ite	eq
 8006580:	2301      	moveq	r3, #1
 8006582:	2300      	movne	r3, #0
 8006584:	b2db      	uxtb	r3, r3
 8006586:	e03c      	b.n	8006602 <HAL_TIM_PWM_Start_DMA+0x142>
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	2b04      	cmp	r3, #4
 800658c:	d109      	bne.n	80065a2 <HAL_TIM_PWM_Start_DMA+0xe2>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b01      	cmp	r3, #1
 8006598:	bf0c      	ite	eq
 800659a:	2301      	moveq	r3, #1
 800659c:	2300      	movne	r3, #0
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	e02f      	b.n	8006602 <HAL_TIM_PWM_Start_DMA+0x142>
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	2b08      	cmp	r3, #8
 80065a6:	d109      	bne.n	80065bc <HAL_TIM_PWM_Start_DMA+0xfc>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	bf0c      	ite	eq
 80065b4:	2301      	moveq	r3, #1
 80065b6:	2300      	movne	r3, #0
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	e022      	b.n	8006602 <HAL_TIM_PWM_Start_DMA+0x142>
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	2b0c      	cmp	r3, #12
 80065c0:	d109      	bne.n	80065d6 <HAL_TIM_PWM_Start_DMA+0x116>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	bf0c      	ite	eq
 80065ce:	2301      	moveq	r3, #1
 80065d0:	2300      	movne	r3, #0
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	e015      	b.n	8006602 <HAL_TIM_PWM_Start_DMA+0x142>
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	2b10      	cmp	r3, #16
 80065da:	d109      	bne.n	80065f0 <HAL_TIM_PWM_Start_DMA+0x130>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	bf0c      	ite	eq
 80065e8:	2301      	moveq	r3, #1
 80065ea:	2300      	movne	r3, #0
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	e008      	b.n	8006602 <HAL_TIM_PWM_Start_DMA+0x142>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	bf0c      	ite	eq
 80065fc:	2301      	moveq	r3, #1
 80065fe:	2300      	movne	r3, #0
 8006600:	b2db      	uxtb	r3, r3
 8006602:	2b00      	cmp	r3, #0
 8006604:	d034      	beq.n	8006670 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d002      	beq.n	8006612 <HAL_TIM_PWM_Start_DMA+0x152>
 800660c:	887b      	ldrh	r3, [r7, #2]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d101      	bne.n	8006616 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e139      	b.n	800688a <HAL_TIM_PWM_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d104      	bne.n	8006626 <HAL_TIM_PWM_Start_DMA+0x166>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2202      	movs	r2, #2
 8006620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006624:	e026      	b.n	8006674 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	2b04      	cmp	r3, #4
 800662a:	d104      	bne.n	8006636 <HAL_TIM_PWM_Start_DMA+0x176>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2202      	movs	r2, #2
 8006630:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006634:	e01e      	b.n	8006674 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	2b08      	cmp	r3, #8
 800663a:	d104      	bne.n	8006646 <HAL_TIM_PWM_Start_DMA+0x186>
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2202      	movs	r2, #2
 8006640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006644:	e016      	b.n	8006674 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	2b0c      	cmp	r3, #12
 800664a:	d104      	bne.n	8006656 <HAL_TIM_PWM_Start_DMA+0x196>
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2202      	movs	r2, #2
 8006650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006654:	e00e      	b.n	8006674 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	2b10      	cmp	r3, #16
 800665a:	d104      	bne.n	8006666 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2202      	movs	r2, #2
 8006660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006664:	e006      	b.n	8006674 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2202      	movs	r2, #2
 800666a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800666e:	e001      	b.n	8006674 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e10a      	b.n	800688a <HAL_TIM_PWM_Start_DMA+0x3ca>
  }

  switch (Channel)
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	2b0c      	cmp	r3, #12
 8006678:	f200 80ae 	bhi.w	80067d8 <HAL_TIM_PWM_Start_DMA+0x318>
 800667c:	a201      	add	r2, pc, #4	; (adr r2, 8006684 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800667e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006682:	bf00      	nop
 8006684:	080066b9 	.word	0x080066b9
 8006688:	080067d9 	.word	0x080067d9
 800668c:	080067d9 	.word	0x080067d9
 8006690:	080067d9 	.word	0x080067d9
 8006694:	08006701 	.word	0x08006701
 8006698:	080067d9 	.word	0x080067d9
 800669c:	080067d9 	.word	0x080067d9
 80066a0:	080067d9 	.word	0x080067d9
 80066a4:	08006749 	.word	0x08006749
 80066a8:	080067d9 	.word	0x080067d9
 80066ac:	080067d9 	.word	0x080067d9
 80066b0:	080067d9 	.word	0x080067d9
 80066b4:	08006791 	.word	0x08006791
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066bc:	4a75      	ldr	r2, [pc, #468]	; (8006894 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80066be:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c4:	4a74      	ldr	r2, [pc, #464]	; (8006898 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80066c6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066cc:	4a73      	ldr	r2, [pc, #460]	; (800689c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80066ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80066d4:	6879      	ldr	r1, [r7, #4]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	3334      	adds	r3, #52	; 0x34
 80066dc:	461a      	mov	r2, r3
 80066de:	887b      	ldrh	r3, [r7, #2]
 80066e0:	f7fd fee8 	bl	80044b4 <HAL_DMA_Start_IT>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d001      	beq.n	80066ee <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e0cd      	b.n	800688a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68da      	ldr	r2, [r3, #12]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066fc:	60da      	str	r2, [r3, #12]
      break;
 80066fe:	e06e      	b.n	80067de <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006704:	4a63      	ldr	r2, [pc, #396]	; (8006894 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8006706:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800670c:	4a62      	ldr	r2, [pc, #392]	; (8006898 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 800670e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006714:	4a61      	ldr	r2, [pc, #388]	; (800689c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8006716:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800671c:	6879      	ldr	r1, [r7, #4]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	3338      	adds	r3, #56	; 0x38
 8006724:	461a      	mov	r2, r3
 8006726:	887b      	ldrh	r3, [r7, #2]
 8006728:	f7fd fec4 	bl	80044b4 <HAL_DMA_Start_IT>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d001      	beq.n	8006736 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e0a9      	b.n	800688a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68da      	ldr	r2, [r3, #12]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006744:	60da      	str	r2, [r3, #12]
      break;
 8006746:	e04a      	b.n	80067de <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674c:	4a51      	ldr	r2, [pc, #324]	; (8006894 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800674e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006754:	4a50      	ldr	r2, [pc, #320]	; (8006898 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8006756:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675c:	4a4f      	ldr	r2, [pc, #316]	; (800689c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800675e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006764:	6879      	ldr	r1, [r7, #4]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	333c      	adds	r3, #60	; 0x3c
 800676c:	461a      	mov	r2, r3
 800676e:	887b      	ldrh	r3, [r7, #2]
 8006770:	f7fd fea0 	bl	80044b4 <HAL_DMA_Start_IT>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d001      	beq.n	800677e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e085      	b.n	800688a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68da      	ldr	r2, [r3, #12]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800678c:	60da      	str	r2, [r3, #12]
      break;
 800678e:	e026      	b.n	80067de <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006794:	4a3f      	ldr	r2, [pc, #252]	; (8006894 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8006796:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679c:	4a3e      	ldr	r2, [pc, #248]	; (8006898 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 800679e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a4:	4a3d      	ldr	r2, [pc, #244]	; (800689c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80067a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80067ac:	6879      	ldr	r1, [r7, #4]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	3340      	adds	r3, #64	; 0x40
 80067b4:	461a      	mov	r2, r3
 80067b6:	887b      	ldrh	r3, [r7, #2]
 80067b8:	f7fd fe7c 	bl	80044b4 <HAL_DMA_Start_IT>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d001      	beq.n	80067c6 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e061      	b.n	800688a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68da      	ldr	r2, [r3, #12]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80067d4:	60da      	str	r2, [r3, #12]
      break;
 80067d6:	e002      	b.n	80067de <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	75fb      	strb	r3, [r7, #23]
      break;
 80067dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80067de:	7dfb      	ldrb	r3, [r7, #23]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d151      	bne.n	8006888 <HAL_TIM_PWM_Start_DMA+0x3c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2201      	movs	r2, #1
 80067ea:	68b9      	ldr	r1, [r7, #8]
 80067ec:	4618      	mov	r0, r3
 80067ee:	f000 ff85 	bl	80076fc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a2a      	ldr	r2, [pc, #168]	; (80068a0 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d009      	beq.n	8006810 <HAL_TIM_PWM_Start_DMA+0x350>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a28      	ldr	r2, [pc, #160]	; (80068a4 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d004      	beq.n	8006810 <HAL_TIM_PWM_Start_DMA+0x350>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a27      	ldr	r2, [pc, #156]	; (80068a8 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d101      	bne.n	8006814 <HAL_TIM_PWM_Start_DMA+0x354>
 8006810:	2301      	movs	r3, #1
 8006812:	e000      	b.n	8006816 <HAL_TIM_PWM_Start_DMA+0x356>
 8006814:	2300      	movs	r3, #0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d007      	beq.n	800682a <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006828:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a1c      	ldr	r2, [pc, #112]	; (80068a0 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d009      	beq.n	8006848 <HAL_TIM_PWM_Start_DMA+0x388>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800683c:	d004      	beq.n	8006848 <HAL_TIM_PWM_Start_DMA+0x388>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a18      	ldr	r2, [pc, #96]	; (80068a4 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d115      	bne.n	8006874 <HAL_TIM_PWM_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	689a      	ldr	r2, [r3, #8]
 800684e:	4b17      	ldr	r3, [pc, #92]	; (80068ac <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8006850:	4013      	ands	r3, r2
 8006852:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	2b06      	cmp	r3, #6
 8006858:	d015      	beq.n	8006886 <HAL_TIM_PWM_Start_DMA+0x3c6>
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006860:	d011      	beq.n	8006886 <HAL_TIM_PWM_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f042 0201 	orr.w	r2, r2, #1
 8006870:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006872:	e008      	b.n	8006886 <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f042 0201 	orr.w	r2, r2, #1
 8006882:	601a      	str	r2, [r3, #0]
 8006884:	e000      	b.n	8006888 <HAL_TIM_PWM_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006886:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006888:	7dfb      	ldrb	r3, [r7, #23]
}
 800688a:	4618      	mov	r0, r3
 800688c:	3718      	adds	r7, #24
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	08006ef5 	.word	0x08006ef5
 8006898:	08006f9d 	.word	0x08006f9d
 800689c:	08006e63 	.word	0x08006e63
 80068a0:	40012c00 	.word	0x40012c00
 80068a4:	40014000 	.word	0x40014000
 80068a8:	40014400 	.word	0x40014400
 80068ac:	00010007 	.word	0x00010007

080068b0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068ba:	2300      	movs	r3, #0
 80068bc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	2b0c      	cmp	r3, #12
 80068c2:	d855      	bhi.n	8006970 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80068c4:	a201      	add	r2, pc, #4	; (adr r2, 80068cc <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80068c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ca:	bf00      	nop
 80068cc:	08006901 	.word	0x08006901
 80068d0:	08006971 	.word	0x08006971
 80068d4:	08006971 	.word	0x08006971
 80068d8:	08006971 	.word	0x08006971
 80068dc:	0800691d 	.word	0x0800691d
 80068e0:	08006971 	.word	0x08006971
 80068e4:	08006971 	.word	0x08006971
 80068e8:	08006971 	.word	0x08006971
 80068ec:	08006939 	.word	0x08006939
 80068f0:	08006971 	.word	0x08006971
 80068f4:	08006971 	.word	0x08006971
 80068f8:	08006971 	.word	0x08006971
 80068fc:	08006955 	.word	0x08006955
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68da      	ldr	r2, [r3, #12]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800690e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006914:	4618      	mov	r0, r3
 8006916:	f7fd fe2d 	bl	8004574 <HAL_DMA_Abort_IT>
      break;
 800691a:	e02c      	b.n	8006976 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68da      	ldr	r2, [r3, #12]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800692a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006930:	4618      	mov	r0, r3
 8006932:	f7fd fe1f 	bl	8004574 <HAL_DMA_Abort_IT>
      break;
 8006936:	e01e      	b.n	8006976 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68da      	ldr	r2, [r3, #12]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006946:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694c:	4618      	mov	r0, r3
 800694e:	f7fd fe11 	bl	8004574 <HAL_DMA_Abort_IT>
      break;
 8006952:	e010      	b.n	8006976 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68da      	ldr	r2, [r3, #12]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006962:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006968:	4618      	mov	r0, r3
 800696a:	f7fd fe03 	bl	8004574 <HAL_DMA_Abort_IT>
      break;
 800696e:	e002      	b.n	8006976 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	73fb      	strb	r3, [r7, #15]
      break;
 8006974:	bf00      	nop
  }

  if (status == HAL_OK)
 8006976:	7bfb      	ldrb	r3, [r7, #15]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d176      	bne.n	8006a6a <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2200      	movs	r2, #0
 8006982:	6839      	ldr	r1, [r7, #0]
 8006984:	4618      	mov	r0, r3
 8006986:	f000 feb9 	bl	80076fc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a39      	ldr	r2, [pc, #228]	; (8006a74 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d009      	beq.n	80069a8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a37      	ldr	r2, [pc, #220]	; (8006a78 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d004      	beq.n	80069a8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a36      	ldr	r2, [pc, #216]	; (8006a7c <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d101      	bne.n	80069ac <HAL_TIM_PWM_Stop_DMA+0xfc>
 80069a8:	2301      	movs	r3, #1
 80069aa:	e000      	b.n	80069ae <HAL_TIM_PWM_Stop_DMA+0xfe>
 80069ac:	2300      	movs	r3, #0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d017      	beq.n	80069e2 <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	6a1a      	ldr	r2, [r3, #32]
 80069b8:	f241 1311 	movw	r3, #4369	; 0x1111
 80069bc:	4013      	ands	r3, r2
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d10f      	bne.n	80069e2 <HAL_TIM_PWM_Stop_DMA+0x132>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	6a1a      	ldr	r2, [r3, #32]
 80069c8:	f240 4344 	movw	r3, #1092	; 0x444
 80069cc:	4013      	ands	r3, r2
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d107      	bne.n	80069e2 <HAL_TIM_PWM_Stop_DMA+0x132>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80069e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	6a1a      	ldr	r2, [r3, #32]
 80069e8:	f241 1311 	movw	r3, #4369	; 0x1111
 80069ec:	4013      	ands	r3, r2
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d10f      	bne.n	8006a12 <HAL_TIM_PWM_Stop_DMA+0x162>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	6a1a      	ldr	r2, [r3, #32]
 80069f8:	f240 4344 	movw	r3, #1092	; 0x444
 80069fc:	4013      	ands	r3, r2
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d107      	bne.n	8006a12 <HAL_TIM_PWM_Stop_DMA+0x162>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f022 0201 	bic.w	r2, r2, #1
 8006a10:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d104      	bne.n	8006a22 <HAL_TIM_PWM_Stop_DMA+0x172>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a20:	e023      	b.n	8006a6a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	2b04      	cmp	r3, #4
 8006a26:	d104      	bne.n	8006a32 <HAL_TIM_PWM_Stop_DMA+0x182>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a30:	e01b      	b.n	8006a6a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	2b08      	cmp	r3, #8
 8006a36:	d104      	bne.n	8006a42 <HAL_TIM_PWM_Stop_DMA+0x192>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a40:	e013      	b.n	8006a6a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	2b0c      	cmp	r3, #12
 8006a46:	d104      	bne.n	8006a52 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a50:	e00b      	b.n	8006a6a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	2b10      	cmp	r3, #16
 8006a56:	d104      	bne.n	8006a62 <HAL_TIM_PWM_Stop_DMA+0x1b2>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a60:	e003      	b.n	8006a6a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2201      	movs	r2, #1
 8006a66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8006a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3710      	adds	r7, #16
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	40012c00 	.word	0x40012c00
 8006a78:	40014000 	.word	0x40014000
 8006a7c:	40014400 	.word	0x40014400

08006a80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b086      	sub	sp, #24
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d101      	bne.n	8006a9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006a9a:	2302      	movs	r3, #2
 8006a9c:	e0ff      	b.n	8006c9e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2b14      	cmp	r3, #20
 8006aaa:	f200 80f0 	bhi.w	8006c8e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006aae:	a201      	add	r2, pc, #4	; (adr r2, 8006ab4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab4:	08006b09 	.word	0x08006b09
 8006ab8:	08006c8f 	.word	0x08006c8f
 8006abc:	08006c8f 	.word	0x08006c8f
 8006ac0:	08006c8f 	.word	0x08006c8f
 8006ac4:	08006b49 	.word	0x08006b49
 8006ac8:	08006c8f 	.word	0x08006c8f
 8006acc:	08006c8f 	.word	0x08006c8f
 8006ad0:	08006c8f 	.word	0x08006c8f
 8006ad4:	08006b8b 	.word	0x08006b8b
 8006ad8:	08006c8f 	.word	0x08006c8f
 8006adc:	08006c8f 	.word	0x08006c8f
 8006ae0:	08006c8f 	.word	0x08006c8f
 8006ae4:	08006bcb 	.word	0x08006bcb
 8006ae8:	08006c8f 	.word	0x08006c8f
 8006aec:	08006c8f 	.word	0x08006c8f
 8006af0:	08006c8f 	.word	0x08006c8f
 8006af4:	08006c0d 	.word	0x08006c0d
 8006af8:	08006c8f 	.word	0x08006c8f
 8006afc:	08006c8f 	.word	0x08006c8f
 8006b00:	08006c8f 	.word	0x08006c8f
 8006b04:	08006c4d 	.word	0x08006c4d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68b9      	ldr	r1, [r7, #8]
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f000 fadc 	bl	80070cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	699a      	ldr	r2, [r3, #24]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f042 0208 	orr.w	r2, r2, #8
 8006b22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	699a      	ldr	r2, [r3, #24]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f022 0204 	bic.w	r2, r2, #4
 8006b32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	6999      	ldr	r1, [r3, #24]
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	691a      	ldr	r2, [r3, #16]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	430a      	orrs	r2, r1
 8006b44:	619a      	str	r2, [r3, #24]
      break;
 8006b46:	e0a5      	b.n	8006c94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68b9      	ldr	r1, [r7, #8]
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f000 fb38 	bl	80071c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	699a      	ldr	r2, [r3, #24]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	699a      	ldr	r2, [r3, #24]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	6999      	ldr	r1, [r3, #24]
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	021a      	lsls	r2, r3, #8
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	430a      	orrs	r2, r1
 8006b86:	619a      	str	r2, [r3, #24]
      break;
 8006b88:	e084      	b.n	8006c94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68b9      	ldr	r1, [r7, #8]
 8006b90:	4618      	mov	r0, r3
 8006b92:	f000 fb91 	bl	80072b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	69da      	ldr	r2, [r3, #28]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f042 0208 	orr.w	r2, r2, #8
 8006ba4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	69da      	ldr	r2, [r3, #28]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f022 0204 	bic.w	r2, r2, #4
 8006bb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	69d9      	ldr	r1, [r3, #28]
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	691a      	ldr	r2, [r3, #16]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	430a      	orrs	r2, r1
 8006bc6:	61da      	str	r2, [r3, #28]
      break;
 8006bc8:	e064      	b.n	8006c94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68b9      	ldr	r1, [r7, #8]
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f000 fbe9 	bl	80073a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	69da      	ldr	r2, [r3, #28]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006be4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	69da      	ldr	r2, [r3, #28]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	69d9      	ldr	r1, [r3, #28]
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	021a      	lsls	r2, r3, #8
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	430a      	orrs	r2, r1
 8006c08:	61da      	str	r2, [r3, #28]
      break;
 8006c0a:	e043      	b.n	8006c94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68b9      	ldr	r1, [r7, #8]
 8006c12:	4618      	mov	r0, r3
 8006c14:	f000 fc26 	bl	8007464 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f042 0208 	orr.w	r2, r2, #8
 8006c26:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f022 0204 	bic.w	r2, r2, #4
 8006c36:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	691a      	ldr	r2, [r3, #16]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	430a      	orrs	r2, r1
 8006c48:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006c4a:	e023      	b.n	8006c94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68b9      	ldr	r1, [r7, #8]
 8006c52:	4618      	mov	r0, r3
 8006c54:	f000 fc5e 	bl	8007514 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c66:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c76:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	021a      	lsls	r2, r3, #8
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	430a      	orrs	r2, r1
 8006c8a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006c8c:	e002      	b.n	8006c94 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	75fb      	strb	r3, [r7, #23]
      break;
 8006c92:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3718      	adds	r7, #24
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop

08006ca8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d101      	bne.n	8006cc4 <HAL_TIM_ConfigClockSource+0x1c>
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	e0b6      	b.n	8006e32 <HAL_TIM_ConfigClockSource+0x18a>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2202      	movs	r2, #2
 8006cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ce2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ce6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68ba      	ldr	r2, [r7, #8]
 8006cf6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d00:	d03e      	beq.n	8006d80 <HAL_TIM_ConfigClockSource+0xd8>
 8006d02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d06:	f200 8087 	bhi.w	8006e18 <HAL_TIM_ConfigClockSource+0x170>
 8006d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d0e:	f000 8086 	beq.w	8006e1e <HAL_TIM_ConfigClockSource+0x176>
 8006d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d16:	d87f      	bhi.n	8006e18 <HAL_TIM_ConfigClockSource+0x170>
 8006d18:	2b70      	cmp	r3, #112	; 0x70
 8006d1a:	d01a      	beq.n	8006d52 <HAL_TIM_ConfigClockSource+0xaa>
 8006d1c:	2b70      	cmp	r3, #112	; 0x70
 8006d1e:	d87b      	bhi.n	8006e18 <HAL_TIM_ConfigClockSource+0x170>
 8006d20:	2b60      	cmp	r3, #96	; 0x60
 8006d22:	d050      	beq.n	8006dc6 <HAL_TIM_ConfigClockSource+0x11e>
 8006d24:	2b60      	cmp	r3, #96	; 0x60
 8006d26:	d877      	bhi.n	8006e18 <HAL_TIM_ConfigClockSource+0x170>
 8006d28:	2b50      	cmp	r3, #80	; 0x50
 8006d2a:	d03c      	beq.n	8006da6 <HAL_TIM_ConfigClockSource+0xfe>
 8006d2c:	2b50      	cmp	r3, #80	; 0x50
 8006d2e:	d873      	bhi.n	8006e18 <HAL_TIM_ConfigClockSource+0x170>
 8006d30:	2b40      	cmp	r3, #64	; 0x40
 8006d32:	d058      	beq.n	8006de6 <HAL_TIM_ConfigClockSource+0x13e>
 8006d34:	2b40      	cmp	r3, #64	; 0x40
 8006d36:	d86f      	bhi.n	8006e18 <HAL_TIM_ConfigClockSource+0x170>
 8006d38:	2b30      	cmp	r3, #48	; 0x30
 8006d3a:	d064      	beq.n	8006e06 <HAL_TIM_ConfigClockSource+0x15e>
 8006d3c:	2b30      	cmp	r3, #48	; 0x30
 8006d3e:	d86b      	bhi.n	8006e18 <HAL_TIM_ConfigClockSource+0x170>
 8006d40:	2b20      	cmp	r3, #32
 8006d42:	d060      	beq.n	8006e06 <HAL_TIM_ConfigClockSource+0x15e>
 8006d44:	2b20      	cmp	r3, #32
 8006d46:	d867      	bhi.n	8006e18 <HAL_TIM_ConfigClockSource+0x170>
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d05c      	beq.n	8006e06 <HAL_TIM_ConfigClockSource+0x15e>
 8006d4c:	2b10      	cmp	r3, #16
 8006d4e:	d05a      	beq.n	8006e06 <HAL_TIM_ConfigClockSource+0x15e>
 8006d50:	e062      	b.n	8006e18 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d62:	f000 fcab 	bl	80076bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68ba      	ldr	r2, [r7, #8]
 8006d7c:	609a      	str	r2, [r3, #8]
      break;
 8006d7e:	e04f      	b.n	8006e20 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d90:	f000 fc94 	bl	80076bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	689a      	ldr	r2, [r3, #8]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006da2:	609a      	str	r2, [r3, #8]
      break;
 8006da4:	e03c      	b.n	8006e20 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006db2:	461a      	mov	r2, r3
 8006db4:	f000 fc08 	bl	80075c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2150      	movs	r1, #80	; 0x50
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f000 fc61 	bl	8007686 <TIM_ITRx_SetConfig>
      break;
 8006dc4:	e02c      	b.n	8006e20 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	f000 fc27 	bl	8007626 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2160      	movs	r1, #96	; 0x60
 8006dde:	4618      	mov	r0, r3
 8006de0:	f000 fc51 	bl	8007686 <TIM_ITRx_SetConfig>
      break;
 8006de4:	e01c      	b.n	8006e20 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006df2:	461a      	mov	r2, r3
 8006df4:	f000 fbe8 	bl	80075c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2140      	movs	r1, #64	; 0x40
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f000 fc41 	bl	8007686 <TIM_ITRx_SetConfig>
      break;
 8006e04:	e00c      	b.n	8006e20 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4619      	mov	r1, r3
 8006e10:	4610      	mov	r0, r2
 8006e12:	f000 fc38 	bl	8007686 <TIM_ITRx_SetConfig>
      break;
 8006e16:	e003      	b.n	8006e20 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e1c:	e000      	b.n	8006e20 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006e1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3710      	adds	r7, #16
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b083      	sub	sp, #12
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006e42:	bf00      	nop
 8006e44:	370c      	adds	r7, #12
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr

08006e4e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b083      	sub	sp, #12
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006e56:	bf00      	nop
 8006e58:	370c      	adds	r7, #12
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr

08006e62 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b084      	sub	sp, #16
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d107      	bne.n	8006e8a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e88:	e02a      	b.n	8006ee0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d107      	bne.n	8006ea4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2202      	movs	r2, #2
 8006e98:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ea2:	e01d      	b.n	8006ee0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d107      	bne.n	8006ebe <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2204      	movs	r2, #4
 8006eb2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ebc:	e010      	b.n	8006ee0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d107      	bne.n	8006ed8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2208      	movs	r2, #8
 8006ecc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ed6:	e003      	b.n	8006ee0 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	f7ff ffb4 	bl	8006e4e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	771a      	strb	r2, [r3, #28]
}
 8006eec:	bf00      	nop
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f00:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d10b      	bne.n	8006f24 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	69db      	ldr	r3, [r3, #28]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d136      	bne.n	8006f88 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f22:	e031      	b.n	8006f88 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d10b      	bne.n	8006f46 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2202      	movs	r2, #2
 8006f32:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	69db      	ldr	r3, [r3, #28]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d125      	bne.n	8006f88 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f44:	e020      	b.n	8006f88 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d10b      	bne.n	8006f68 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2204      	movs	r2, #4
 8006f54:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	69db      	ldr	r3, [r3, #28]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d114      	bne.n	8006f88 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f66:	e00f      	b.n	8006f88 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d10a      	bne.n	8006f88 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2208      	movs	r2, #8
 8006f76:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	69db      	ldr	r3, [r3, #28]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d103      	bne.n	8006f88 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f002 fa73 	bl	8009474 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	771a      	strb	r2, [r3, #28]
  //g_tim_pwm_transfer_cmplt = true;

}
 8006f94:	bf00      	nop
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d103      	bne.n	8006fbc <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	771a      	strb	r2, [r3, #28]
 8006fba:	e019      	b.n	8006ff0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d103      	bne.n	8006fce <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2202      	movs	r2, #2
 8006fca:	771a      	strb	r2, [r3, #28]
 8006fcc:	e010      	b.n	8006ff0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d103      	bne.n	8006fe0 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2204      	movs	r2, #4
 8006fdc:	771a      	strb	r2, [r3, #28]
 8006fde:	e007      	b.n	8006ff0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d102      	bne.n	8006ff0 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2208      	movs	r2, #8
 8006fee:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f7ff ff22 	bl	8006e3a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	771a      	strb	r2, [r3, #28]
}
 8006ffc:	bf00      	nop
 8006ffe:	3710      	adds	r7, #16
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007004:	b480      	push	{r7}
 8007006:	b085      	sub	sp, #20
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4a2a      	ldr	r2, [pc, #168]	; (80070c0 <TIM_Base_SetConfig+0xbc>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d003      	beq.n	8007024 <TIM_Base_SetConfig+0x20>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007022:	d108      	bne.n	8007036 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800702a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	4313      	orrs	r3, r2
 8007034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a21      	ldr	r2, [pc, #132]	; (80070c0 <TIM_Base_SetConfig+0xbc>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d00b      	beq.n	8007056 <TIM_Base_SetConfig+0x52>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007044:	d007      	beq.n	8007056 <TIM_Base_SetConfig+0x52>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a1e      	ldr	r2, [pc, #120]	; (80070c4 <TIM_Base_SetConfig+0xc0>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d003      	beq.n	8007056 <TIM_Base_SetConfig+0x52>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a1d      	ldr	r2, [pc, #116]	; (80070c8 <TIM_Base_SetConfig+0xc4>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d108      	bne.n	8007068 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800705c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	4313      	orrs	r3, r2
 8007066:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	4313      	orrs	r3, r2
 8007074:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	689a      	ldr	r2, [r3, #8]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a0c      	ldr	r2, [pc, #48]	; (80070c0 <TIM_Base_SetConfig+0xbc>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d007      	beq.n	80070a4 <TIM_Base_SetConfig+0xa0>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4a0b      	ldr	r2, [pc, #44]	; (80070c4 <TIM_Base_SetConfig+0xc0>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d003      	beq.n	80070a4 <TIM_Base_SetConfig+0xa0>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a0a      	ldr	r2, [pc, #40]	; (80070c8 <TIM_Base_SetConfig+0xc4>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d103      	bne.n	80070ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	691a      	ldr	r2, [r3, #16]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	615a      	str	r2, [r3, #20]
}
 80070b2:	bf00      	nop
 80070b4:	3714      	adds	r7, #20
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop
 80070c0:	40012c00 	.word	0x40012c00
 80070c4:	40014000 	.word	0x40014000
 80070c8:	40014400 	.word	0x40014400

080070cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b087      	sub	sp, #28
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a1b      	ldr	r3, [r3, #32]
 80070da:	f023 0201 	bic.w	r2, r3, #1
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f023 0303 	bic.w	r3, r3, #3
 8007106:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	4313      	orrs	r3, r2
 8007110:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	f023 0302 	bic.w	r3, r3, #2
 8007118:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	697a      	ldr	r2, [r7, #20]
 8007120:	4313      	orrs	r3, r2
 8007122:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a24      	ldr	r2, [pc, #144]	; (80071b8 <TIM_OC1_SetConfig+0xec>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d007      	beq.n	800713c <TIM_OC1_SetConfig+0x70>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a23      	ldr	r2, [pc, #140]	; (80071bc <TIM_OC1_SetConfig+0xf0>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d003      	beq.n	800713c <TIM_OC1_SetConfig+0x70>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a22      	ldr	r2, [pc, #136]	; (80071c0 <TIM_OC1_SetConfig+0xf4>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d10c      	bne.n	8007156 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	f023 0308 	bic.w	r3, r3, #8
 8007142:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	697a      	ldr	r2, [r7, #20]
 800714a:	4313      	orrs	r3, r2
 800714c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	f023 0304 	bic.w	r3, r3, #4
 8007154:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a17      	ldr	r2, [pc, #92]	; (80071b8 <TIM_OC1_SetConfig+0xec>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d007      	beq.n	800716e <TIM_OC1_SetConfig+0xa2>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a16      	ldr	r2, [pc, #88]	; (80071bc <TIM_OC1_SetConfig+0xf0>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d003      	beq.n	800716e <TIM_OC1_SetConfig+0xa2>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a15      	ldr	r2, [pc, #84]	; (80071c0 <TIM_OC1_SetConfig+0xf4>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d111      	bne.n	8007192 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007174:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800717c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	693a      	ldr	r2, [r7, #16]
 8007184:	4313      	orrs	r3, r2
 8007186:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	699b      	ldr	r3, [r3, #24]
 800718c:	693a      	ldr	r2, [r7, #16]
 800718e:	4313      	orrs	r3, r2
 8007190:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	693a      	ldr	r2, [r7, #16]
 8007196:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	685a      	ldr	r2, [r3, #4]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	697a      	ldr	r2, [r7, #20]
 80071aa:	621a      	str	r2, [r3, #32]
}
 80071ac:	bf00      	nop
 80071ae:	371c      	adds	r7, #28
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr
 80071b8:	40012c00 	.word	0x40012c00
 80071bc:	40014000 	.word	0x40014000
 80071c0:	40014400 	.word	0x40014400

080071c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b087      	sub	sp, #28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a1b      	ldr	r3, [r3, #32]
 80071d2:	f023 0210 	bic.w	r2, r3, #16
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a1b      	ldr	r3, [r3, #32]
 80071de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	021b      	lsls	r3, r3, #8
 8007206:	68fa      	ldr	r2, [r7, #12]
 8007208:	4313      	orrs	r3, r2
 800720a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	f023 0320 	bic.w	r3, r3, #32
 8007212:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	011b      	lsls	r3, r3, #4
 800721a:	697a      	ldr	r2, [r7, #20]
 800721c:	4313      	orrs	r3, r2
 800721e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a22      	ldr	r2, [pc, #136]	; (80072ac <TIM_OC2_SetConfig+0xe8>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d10d      	bne.n	8007244 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800722e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	011b      	lsls	r3, r3, #4
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	4313      	orrs	r3, r2
 800723a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007242:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4a19      	ldr	r2, [pc, #100]	; (80072ac <TIM_OC2_SetConfig+0xe8>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d007      	beq.n	800725c <TIM_OC2_SetConfig+0x98>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4a18      	ldr	r2, [pc, #96]	; (80072b0 <TIM_OC2_SetConfig+0xec>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d003      	beq.n	800725c <TIM_OC2_SetConfig+0x98>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a17      	ldr	r2, [pc, #92]	; (80072b4 <TIM_OC2_SetConfig+0xf0>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d113      	bne.n	8007284 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007262:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800726a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	695b      	ldr	r3, [r3, #20]
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	4313      	orrs	r3, r2
 8007276:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	699b      	ldr	r3, [r3, #24]
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	693a      	ldr	r2, [r7, #16]
 8007280:	4313      	orrs	r3, r2
 8007282:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	693a      	ldr	r2, [r7, #16]
 8007288:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	68fa      	ldr	r2, [r7, #12]
 800728e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	685a      	ldr	r2, [r3, #4]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	697a      	ldr	r2, [r7, #20]
 800729c:	621a      	str	r2, [r3, #32]
}
 800729e:	bf00      	nop
 80072a0:	371c      	adds	r7, #28
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	40012c00 	.word	0x40012c00
 80072b0:	40014000 	.word	0x40014000
 80072b4:	40014400 	.word	0x40014400

080072b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b087      	sub	sp, #28
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a1b      	ldr	r3, [r3, #32]
 80072c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	69db      	ldr	r3, [r3, #28]
 80072de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f023 0303 	bic.w	r3, r3, #3
 80072f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007304:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	021b      	lsls	r3, r3, #8
 800730c:	697a      	ldr	r2, [r7, #20]
 800730e:	4313      	orrs	r3, r2
 8007310:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4a21      	ldr	r2, [pc, #132]	; (800739c <TIM_OC3_SetConfig+0xe4>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d10d      	bne.n	8007336 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007320:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	021b      	lsls	r3, r3, #8
 8007328:	697a      	ldr	r2, [r7, #20]
 800732a:	4313      	orrs	r3, r2
 800732c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007334:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4a18      	ldr	r2, [pc, #96]	; (800739c <TIM_OC3_SetConfig+0xe4>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d007      	beq.n	800734e <TIM_OC3_SetConfig+0x96>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4a17      	ldr	r2, [pc, #92]	; (80073a0 <TIM_OC3_SetConfig+0xe8>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d003      	beq.n	800734e <TIM_OC3_SetConfig+0x96>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4a16      	ldr	r2, [pc, #88]	; (80073a4 <TIM_OC3_SetConfig+0xec>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d113      	bne.n	8007376 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007354:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800735c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	695b      	ldr	r3, [r3, #20]
 8007362:	011b      	lsls	r3, r3, #4
 8007364:	693a      	ldr	r2, [r7, #16]
 8007366:	4313      	orrs	r3, r2
 8007368:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	699b      	ldr	r3, [r3, #24]
 800736e:	011b      	lsls	r3, r3, #4
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	4313      	orrs	r3, r2
 8007374:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	693a      	ldr	r2, [r7, #16]
 800737a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	685a      	ldr	r2, [r3, #4]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	697a      	ldr	r2, [r7, #20]
 800738e:	621a      	str	r2, [r3, #32]
}
 8007390:	bf00      	nop
 8007392:	371c      	adds	r7, #28
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr
 800739c:	40012c00 	.word	0x40012c00
 80073a0:	40014000 	.word	0x40014000
 80073a4:	40014400 	.word	0x40014400

080073a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b087      	sub	sp, #28
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a1b      	ldr	r3, [r3, #32]
 80073b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a1b      	ldr	r3, [r3, #32]
 80073c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	69db      	ldr	r3, [r3, #28]
 80073ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	021b      	lsls	r3, r3, #8
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	031b      	lsls	r3, r3, #12
 80073fe:	693a      	ldr	r2, [r7, #16]
 8007400:	4313      	orrs	r3, r2
 8007402:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4a14      	ldr	r2, [pc, #80]	; (8007458 <TIM_OC4_SetConfig+0xb0>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d007      	beq.n	800741c <TIM_OC4_SetConfig+0x74>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4a13      	ldr	r2, [pc, #76]	; (800745c <TIM_OC4_SetConfig+0xb4>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d003      	beq.n	800741c <TIM_OC4_SetConfig+0x74>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4a12      	ldr	r2, [pc, #72]	; (8007460 <TIM_OC4_SetConfig+0xb8>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d109      	bne.n	8007430 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007422:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	695b      	ldr	r3, [r3, #20]
 8007428:	019b      	lsls	r3, r3, #6
 800742a:	697a      	ldr	r2, [r7, #20]
 800742c:	4313      	orrs	r3, r2
 800742e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	697a      	ldr	r2, [r7, #20]
 8007434:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	685a      	ldr	r2, [r3, #4]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	693a      	ldr	r2, [r7, #16]
 8007448:	621a      	str	r2, [r3, #32]
}
 800744a:	bf00      	nop
 800744c:	371c      	adds	r7, #28
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	40012c00 	.word	0x40012c00
 800745c:	40014000 	.word	0x40014000
 8007460:	40014400 	.word	0x40014400

08007464 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007464:	b480      	push	{r7}
 8007466:	b087      	sub	sp, #28
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a1b      	ldr	r3, [r3, #32]
 8007472:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a1b      	ldr	r3, [r3, #32]
 800747e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800748a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	4313      	orrs	r3, r2
 80074a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80074a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	041b      	lsls	r3, r3, #16
 80074b0:	693a      	ldr	r2, [r7, #16]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a13      	ldr	r2, [pc, #76]	; (8007508 <TIM_OC5_SetConfig+0xa4>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d007      	beq.n	80074ce <TIM_OC5_SetConfig+0x6a>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a12      	ldr	r2, [pc, #72]	; (800750c <TIM_OC5_SetConfig+0xa8>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d003      	beq.n	80074ce <TIM_OC5_SetConfig+0x6a>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a11      	ldr	r2, [pc, #68]	; (8007510 <TIM_OC5_SetConfig+0xac>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d109      	bne.n	80074e2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	021b      	lsls	r3, r3, #8
 80074dc:	697a      	ldr	r2, [r7, #20]
 80074de:	4313      	orrs	r3, r2
 80074e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	697a      	ldr	r2, [r7, #20]
 80074e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	68fa      	ldr	r2, [r7, #12]
 80074ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	685a      	ldr	r2, [r3, #4]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	693a      	ldr	r2, [r7, #16]
 80074fa:	621a      	str	r2, [r3, #32]
}
 80074fc:	bf00      	nop
 80074fe:	371c      	adds	r7, #28
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr
 8007508:	40012c00 	.word	0x40012c00
 800750c:	40014000 	.word	0x40014000
 8007510:	40014400 	.word	0x40014400

08007514 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007514:	b480      	push	{r7}
 8007516:	b087      	sub	sp, #28
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a1b      	ldr	r3, [r3, #32]
 8007522:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a1b      	ldr	r3, [r3, #32]
 800752e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800753a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007546:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	021b      	lsls	r3, r3, #8
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	4313      	orrs	r3, r2
 8007552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800755a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	051b      	lsls	r3, r3, #20
 8007562:	693a      	ldr	r2, [r7, #16]
 8007564:	4313      	orrs	r3, r2
 8007566:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a14      	ldr	r2, [pc, #80]	; (80075bc <TIM_OC6_SetConfig+0xa8>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d007      	beq.n	8007580 <TIM_OC6_SetConfig+0x6c>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a13      	ldr	r2, [pc, #76]	; (80075c0 <TIM_OC6_SetConfig+0xac>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d003      	beq.n	8007580 <TIM_OC6_SetConfig+0x6c>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a12      	ldr	r2, [pc, #72]	; (80075c4 <TIM_OC6_SetConfig+0xb0>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d109      	bne.n	8007594 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007586:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	695b      	ldr	r3, [r3, #20]
 800758c:	029b      	lsls	r3, r3, #10
 800758e:	697a      	ldr	r2, [r7, #20]
 8007590:	4313      	orrs	r3, r2
 8007592:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	697a      	ldr	r2, [r7, #20]
 8007598:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	685a      	ldr	r2, [r3, #4]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	693a      	ldr	r2, [r7, #16]
 80075ac:	621a      	str	r2, [r3, #32]
}
 80075ae:	bf00      	nop
 80075b0:	371c      	adds	r7, #28
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr
 80075ba:	bf00      	nop
 80075bc:	40012c00 	.word	0x40012c00
 80075c0:	40014000 	.word	0x40014000
 80075c4:	40014400 	.word	0x40014400

080075c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b087      	sub	sp, #28
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6a1b      	ldr	r3, [r3, #32]
 80075d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6a1b      	ldr	r3, [r3, #32]
 80075de:	f023 0201 	bic.w	r2, r3, #1
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	699b      	ldr	r3, [r3, #24]
 80075ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	011b      	lsls	r3, r3, #4
 80075f8:	693a      	ldr	r2, [r7, #16]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	f023 030a 	bic.w	r3, r3, #10
 8007604:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007606:	697a      	ldr	r2, [r7, #20]
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	4313      	orrs	r3, r2
 800760c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	693a      	ldr	r2, [r7, #16]
 8007612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	621a      	str	r2, [r3, #32]
}
 800761a:	bf00      	nop
 800761c:	371c      	adds	r7, #28
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr

08007626 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007626:	b480      	push	{r7}
 8007628:	b087      	sub	sp, #28
 800762a:	af00      	add	r7, sp, #0
 800762c:	60f8      	str	r0, [r7, #12]
 800762e:	60b9      	str	r1, [r7, #8]
 8007630:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6a1b      	ldr	r3, [r3, #32]
 8007636:	f023 0210 	bic.w	r2, r3, #16
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	699b      	ldr	r3, [r3, #24]
 8007642:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6a1b      	ldr	r3, [r3, #32]
 8007648:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007650:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	031b      	lsls	r3, r3, #12
 8007656:	697a      	ldr	r2, [r7, #20]
 8007658:	4313      	orrs	r3, r2
 800765a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007662:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	011b      	lsls	r3, r3, #4
 8007668:	693a      	ldr	r2, [r7, #16]
 800766a:	4313      	orrs	r3, r2
 800766c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	697a      	ldr	r2, [r7, #20]
 8007672:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	693a      	ldr	r2, [r7, #16]
 8007678:	621a      	str	r2, [r3, #32]
}
 800767a:	bf00      	nop
 800767c:	371c      	adds	r7, #28
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr

08007686 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007686:	b480      	push	{r7}
 8007688:	b085      	sub	sp, #20
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800769c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800769e:	683a      	ldr	r2, [r7, #0]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	f043 0307 	orr.w	r3, r3, #7
 80076a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	609a      	str	r2, [r3, #8]
}
 80076b0:	bf00      	nop
 80076b2:	3714      	adds	r7, #20
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80076bc:	b480      	push	{r7}
 80076be:	b087      	sub	sp, #28
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]
 80076c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	021a      	lsls	r2, r3, #8
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	431a      	orrs	r2, r3
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	4313      	orrs	r3, r2
 80076e4:	697a      	ldr	r2, [r7, #20]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	697a      	ldr	r2, [r7, #20]
 80076ee:	609a      	str	r2, [r3, #8]
}
 80076f0:	bf00      	nop
 80076f2:	371c      	adds	r7, #28
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b087      	sub	sp, #28
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	f003 031f 	and.w	r3, r3, #31
 800770e:	2201      	movs	r2, #1
 8007710:	fa02 f303 	lsl.w	r3, r2, r3
 8007714:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	6a1a      	ldr	r2, [r3, #32]
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	43db      	mvns	r3, r3
 800771e:	401a      	ands	r2, r3
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6a1a      	ldr	r2, [r3, #32]
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	f003 031f 	and.w	r3, r3, #31
 800772e:	6879      	ldr	r1, [r7, #4]
 8007730:	fa01 f303 	lsl.w	r3, r1, r3
 8007734:	431a      	orrs	r2, r3
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	621a      	str	r2, [r3, #32]
}
 800773a:	bf00      	nop
 800773c:	371c      	adds	r7, #28
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr
	...

08007748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007758:	2b01      	cmp	r3, #1
 800775a:	d101      	bne.n	8007760 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800775c:	2302      	movs	r3, #2
 800775e:	e04f      	b.n	8007800 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2202      	movs	r2, #2
 800776c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a21      	ldr	r2, [pc, #132]	; (800780c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d108      	bne.n	800779c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007790:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	4313      	orrs	r3, r2
 800779a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68fa      	ldr	r2, [r7, #12]
 80077b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a14      	ldr	r2, [pc, #80]	; (800780c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d009      	beq.n	80077d4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077c8:	d004      	beq.n	80077d4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a10      	ldr	r2, [pc, #64]	; (8007810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d10c      	bne.n	80077ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68ba      	ldr	r2, [r7, #8]
 80077ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2201      	movs	r2, #1
 80077f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3714      	adds	r7, #20
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr
 800780c:	40012c00 	.word	0x40012c00
 8007810:	40014000 	.word	0x40014000

08007814 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007814:	b480      	push	{r7}
 8007816:	b085      	sub	sp, #20
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800781e:	2300      	movs	r3, #0
 8007820:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007828:	2b01      	cmp	r3, #1
 800782a:	d101      	bne.n	8007830 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800782c:	2302      	movs	r3, #2
 800782e:	e060      	b.n	80078f2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	4313      	orrs	r3, r2
 8007844:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	4313      	orrs	r3, r2
 8007852:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	4313      	orrs	r3, r2
 8007860:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4313      	orrs	r3, r2
 800786e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	4313      	orrs	r3, r2
 800787c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	695b      	ldr	r3, [r3, #20]
 8007888:	4313      	orrs	r3, r2
 800788a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007896:	4313      	orrs	r3, r2
 8007898:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	699b      	ldr	r3, [r3, #24]
 80078a4:	041b      	lsls	r3, r3, #16
 80078a6:	4313      	orrs	r3, r2
 80078a8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a14      	ldr	r2, [pc, #80]	; (8007900 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d115      	bne.n	80078e0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078be:	051b      	lsls	r3, r3, #20
 80078c0:	4313      	orrs	r3, r2
 80078c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	69db      	ldr	r3, [r3, #28]
 80078ce:	4313      	orrs	r3, r2
 80078d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	6a1b      	ldr	r3, [r3, #32]
 80078dc:	4313      	orrs	r3, r2
 80078de:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	68fa      	ldr	r2, [r7, #12]
 80078e6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3714      	adds	r7, #20
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr
 80078fe:	bf00      	nop
 8007900:	40012c00 	.word	0x40012c00

08007904 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d101      	bne.n	8007916 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e040      	b.n	8007998 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800791a:	2b00      	cmp	r3, #0
 800791c:	d106      	bne.n	800792c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 f873 	bl	8007a12 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2224      	movs	r2, #36	; 0x24
 8007930:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f022 0201 	bic.w	r2, r2, #1
 8007940:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 f9de 	bl	8007d04 <UART_SetConfig>
 8007948:	4603      	mov	r3, r0
 800794a:	2b01      	cmp	r3, #1
 800794c:	d101      	bne.n	8007952 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e022      	b.n	8007998 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007956:	2b00      	cmp	r3, #0
 8007958:	d002      	beq.n	8007960 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 fc2c 	bl	80081b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	685a      	ldr	r2, [r3, #4]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800796e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	689a      	ldr	r2, [r3, #8]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800797e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f042 0201 	orr.w	r2, r2, #1
 800798e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 fcb3 	bl	80082fc <UART_CheckIdleState>
 8007996:	4603      	mov	r3, r0
}
 8007998:	4618      	mov	r0, r3
 800799a:	3708      	adds	r7, #8
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d101      	bne.n	80079b2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e02b      	b.n	8007a0a <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2224      	movs	r2, #36	; 0x24
 80079b6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f022 0201 	bic.w	r2, r2, #1
 80079c6:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2200      	movs	r2, #0
 80079ce:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2200      	movs	r2, #0
 80079d6:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2200      	movs	r2, #0
 80079de:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 f820 	bl	8007a26 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3708      	adds	r7, #8
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8007a12:	b480      	push	{r7}
 8007a14:	b083      	sub	sp, #12
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8007a1a:	bf00      	nop
 8007a1c:	370c      	adds	r7, #12
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr

08007a26 <HAL_UART_MspDeInit>:
  * @brief DeInitialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8007a26:	b480      	push	{r7}
 8007a28:	b083      	sub	sp, #12
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8007a2e:	bf00      	nop
 8007a30:	370c      	adds	r7, #12
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr

08007a3a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b08a      	sub	sp, #40	; 0x28
 8007a3e:	af02      	add	r7, sp, #8
 8007a40:	60f8      	str	r0, [r7, #12]
 8007a42:	60b9      	str	r1, [r7, #8]
 8007a44:	603b      	str	r3, [r7, #0]
 8007a46:	4613      	mov	r3, r2
 8007a48:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a4e:	2b20      	cmp	r3, #32
 8007a50:	f040 8082 	bne.w	8007b58 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d002      	beq.n	8007a60 <HAL_UART_Transmit+0x26>
 8007a5a:	88fb      	ldrh	r3, [r7, #6]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d101      	bne.n	8007a64 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	e07a      	b.n	8007b5a <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d101      	bne.n	8007a72 <HAL_UART_Transmit+0x38>
 8007a6e:	2302      	movs	r3, #2
 8007a70:	e073      	b.n	8007b5a <HAL_UART_Transmit+0x120>
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2201      	movs	r2, #1
 8007a76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2221      	movs	r2, #33	; 0x21
 8007a86:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a88:	f7fc fac4 	bl	8004014 <HAL_GetTick>
 8007a8c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	88fa      	ldrh	r2, [r7, #6]
 8007a92:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	88fa      	ldrh	r2, [r7, #6]
 8007a9a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aa6:	d108      	bne.n	8007aba <HAL_UART_Transmit+0x80>
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d104      	bne.n	8007aba <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	61bb      	str	r3, [r7, #24]
 8007ab8:	e003      	b.n	8007ac2 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007aca:	e02d      	b.n	8007b28 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	9300      	str	r3, [sp, #0]
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	2180      	movs	r1, #128	; 0x80
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f000 fc59 	bl	800838e <UART_WaitOnFlagUntilTimeout>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d001      	beq.n	8007ae6 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007ae2:	2303      	movs	r3, #3
 8007ae4:	e039      	b.n	8007b5a <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d10b      	bne.n	8007b04 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	881a      	ldrh	r2, [r3, #0]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007af8:	b292      	uxth	r2, r2
 8007afa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	3302      	adds	r3, #2
 8007b00:	61bb      	str	r3, [r7, #24]
 8007b02:	e008      	b.n	8007b16 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	781a      	ldrb	r2, [r3, #0]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	b292      	uxth	r2, r2
 8007b0e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	3301      	adds	r3, #1
 8007b14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	b29a      	uxth	r2, r3
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d1cb      	bne.n	8007acc <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	9300      	str	r3, [sp, #0]
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	2140      	movs	r1, #64	; 0x40
 8007b3e:	68f8      	ldr	r0, [r7, #12]
 8007b40:	f000 fc25 	bl	800838e <UART_WaitOnFlagUntilTimeout>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d001      	beq.n	8007b4e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	e005      	b.n	8007b5a <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2220      	movs	r2, #32
 8007b52:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007b54:	2300      	movs	r3, #0
 8007b56:	e000      	b.n	8007b5a <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007b58:	2302      	movs	r3, #2
  }
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3720      	adds	r7, #32
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b08a      	sub	sp, #40	; 0x28
 8007b66:	af02      	add	r7, sp, #8
 8007b68:	60f8      	str	r0, [r7, #12]
 8007b6a:	60b9      	str	r1, [r7, #8]
 8007b6c:	603b      	str	r3, [r7, #0]
 8007b6e:	4613      	mov	r3, r2
 8007b70:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b76:	2b20      	cmp	r3, #32
 8007b78:	f040 80bf 	bne.w	8007cfa <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d002      	beq.n	8007b88 <HAL_UART_Receive+0x26>
 8007b82:	88fb      	ldrh	r3, [r7, #6]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d101      	bne.n	8007b8c <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e0b7      	b.n	8007cfc <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d101      	bne.n	8007b9a <HAL_UART_Receive+0x38>
 8007b96:	2302      	movs	r3, #2
 8007b98:	e0b0      	b.n	8007cfc <HAL_UART_Receive+0x19a>
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2222      	movs	r2, #34	; 0x22
 8007bae:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007bb6:	f7fc fa2d 	bl	8004014 <HAL_GetTick>
 8007bba:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	88fa      	ldrh	r2, [r7, #6]
 8007bc0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	88fa      	ldrh	r2, [r7, #6]
 8007bc8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bd4:	d10e      	bne.n	8007bf4 <HAL_UART_Receive+0x92>
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d105      	bne.n	8007bea <HAL_UART_Receive+0x88>
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007be4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007be8:	e02d      	b.n	8007c46 <HAL_UART_Receive+0xe4>
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	22ff      	movs	r2, #255	; 0xff
 8007bee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007bf2:	e028      	b.n	8007c46 <HAL_UART_Receive+0xe4>
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d10d      	bne.n	8007c18 <HAL_UART_Receive+0xb6>
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d104      	bne.n	8007c0e <HAL_UART_Receive+0xac>
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	22ff      	movs	r2, #255	; 0xff
 8007c08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c0c:	e01b      	b.n	8007c46 <HAL_UART_Receive+0xe4>
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	227f      	movs	r2, #127	; 0x7f
 8007c12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c16:	e016      	b.n	8007c46 <HAL_UART_Receive+0xe4>
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c20:	d10d      	bne.n	8007c3e <HAL_UART_Receive+0xdc>
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d104      	bne.n	8007c34 <HAL_UART_Receive+0xd2>
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	227f      	movs	r2, #127	; 0x7f
 8007c2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c32:	e008      	b.n	8007c46 <HAL_UART_Receive+0xe4>
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	223f      	movs	r2, #63	; 0x3f
 8007c38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c3c:	e003      	b.n	8007c46 <HAL_UART_Receive+0xe4>
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c4c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c56:	d108      	bne.n	8007c6a <HAL_UART_Receive+0x108>
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	691b      	ldr	r3, [r3, #16]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d104      	bne.n	8007c6a <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8007c60:	2300      	movs	r3, #0
 8007c62:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	61bb      	str	r3, [r7, #24]
 8007c68:	e003      	b.n	8007c72 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007c7a:	e033      	b.n	8007ce4 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	9300      	str	r3, [sp, #0]
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	2200      	movs	r2, #0
 8007c84:	2120      	movs	r1, #32
 8007c86:	68f8      	ldr	r0, [r7, #12]
 8007c88:	f000 fb81 	bl	800838e <UART_WaitOnFlagUntilTimeout>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d001      	beq.n	8007c96 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8007c92:	2303      	movs	r3, #3
 8007c94:	e032      	b.n	8007cfc <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d10c      	bne.n	8007cb6 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	8a7b      	ldrh	r3, [r7, #18]
 8007ca6:	4013      	ands	r3, r2
 8007ca8:	b29a      	uxth	r2, r3
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	3302      	adds	r3, #2
 8007cb2:	61bb      	str	r3, [r7, #24]
 8007cb4:	e00d      	b.n	8007cd2 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	b2da      	uxtb	r2, r3
 8007cc0:	8a7b      	ldrh	r3, [r7, #18]
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	4013      	ands	r3, r2
 8007cc6:	b2da      	uxtb	r2, r3
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	3b01      	subs	r3, #1
 8007cdc:	b29a      	uxth	r2, r3
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d1c5      	bne.n	8007c7c <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2220      	movs	r2, #32
 8007cf4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	e000      	b.n	8007cfc <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8007cfa:	2302      	movs	r3, #2
  }
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3720      	adds	r7, #32
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d08:	b08a      	sub	sp, #40	; 0x28
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	689a      	ldr	r2, [r3, #8]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	431a      	orrs	r2, r3
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	695b      	ldr	r3, [r3, #20]
 8007d22:	431a      	orrs	r2, r3
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	69db      	ldr	r3, [r3, #28]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	4b9e      	ldr	r3, [pc, #632]	; (8007fac <UART_SetConfig+0x2a8>)
 8007d34:	4013      	ands	r3, r2
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	6812      	ldr	r2, [r2, #0]
 8007d3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d3c:	430b      	orrs	r3, r1
 8007d3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	68da      	ldr	r2, [r3, #12]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	430a      	orrs	r2, r1
 8007d54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	699b      	ldr	r3, [r3, #24]
 8007d5a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a93      	ldr	r2, [pc, #588]	; (8007fb0 <UART_SetConfig+0x2ac>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d004      	beq.n	8007d70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	6a1b      	ldr	r3, [r3, #32]
 8007d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d80:	430a      	orrs	r2, r1
 8007d82:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a8a      	ldr	r2, [pc, #552]	; (8007fb4 <UART_SetConfig+0x2b0>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d126      	bne.n	8007ddc <UART_SetConfig+0xd8>
 8007d8e:	4b8a      	ldr	r3, [pc, #552]	; (8007fb8 <UART_SetConfig+0x2b4>)
 8007d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d94:	f003 0303 	and.w	r3, r3, #3
 8007d98:	2b03      	cmp	r3, #3
 8007d9a:	d81b      	bhi.n	8007dd4 <UART_SetConfig+0xd0>
 8007d9c:	a201      	add	r2, pc, #4	; (adr r2, 8007da4 <UART_SetConfig+0xa0>)
 8007d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da2:	bf00      	nop
 8007da4:	08007db5 	.word	0x08007db5
 8007da8:	08007dc5 	.word	0x08007dc5
 8007dac:	08007dbd 	.word	0x08007dbd
 8007db0:	08007dcd 	.word	0x08007dcd
 8007db4:	2301      	movs	r3, #1
 8007db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dba:	e0ab      	b.n	8007f14 <UART_SetConfig+0x210>
 8007dbc:	2302      	movs	r3, #2
 8007dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dc2:	e0a7      	b.n	8007f14 <UART_SetConfig+0x210>
 8007dc4:	2304      	movs	r3, #4
 8007dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dca:	e0a3      	b.n	8007f14 <UART_SetConfig+0x210>
 8007dcc:	2308      	movs	r3, #8
 8007dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dd2:	e09f      	b.n	8007f14 <UART_SetConfig+0x210>
 8007dd4:	2310      	movs	r3, #16
 8007dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dda:	e09b      	b.n	8007f14 <UART_SetConfig+0x210>
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a76      	ldr	r2, [pc, #472]	; (8007fbc <UART_SetConfig+0x2b8>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d138      	bne.n	8007e58 <UART_SetConfig+0x154>
 8007de6:	4b74      	ldr	r3, [pc, #464]	; (8007fb8 <UART_SetConfig+0x2b4>)
 8007de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dec:	f003 030c 	and.w	r3, r3, #12
 8007df0:	2b0c      	cmp	r3, #12
 8007df2:	d82d      	bhi.n	8007e50 <UART_SetConfig+0x14c>
 8007df4:	a201      	add	r2, pc, #4	; (adr r2, 8007dfc <UART_SetConfig+0xf8>)
 8007df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dfa:	bf00      	nop
 8007dfc:	08007e31 	.word	0x08007e31
 8007e00:	08007e51 	.word	0x08007e51
 8007e04:	08007e51 	.word	0x08007e51
 8007e08:	08007e51 	.word	0x08007e51
 8007e0c:	08007e41 	.word	0x08007e41
 8007e10:	08007e51 	.word	0x08007e51
 8007e14:	08007e51 	.word	0x08007e51
 8007e18:	08007e51 	.word	0x08007e51
 8007e1c:	08007e39 	.word	0x08007e39
 8007e20:	08007e51 	.word	0x08007e51
 8007e24:	08007e51 	.word	0x08007e51
 8007e28:	08007e51 	.word	0x08007e51
 8007e2c:	08007e49 	.word	0x08007e49
 8007e30:	2300      	movs	r3, #0
 8007e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e36:	e06d      	b.n	8007f14 <UART_SetConfig+0x210>
 8007e38:	2302      	movs	r3, #2
 8007e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e3e:	e069      	b.n	8007f14 <UART_SetConfig+0x210>
 8007e40:	2304      	movs	r3, #4
 8007e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e46:	e065      	b.n	8007f14 <UART_SetConfig+0x210>
 8007e48:	2308      	movs	r3, #8
 8007e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e4e:	e061      	b.n	8007f14 <UART_SetConfig+0x210>
 8007e50:	2310      	movs	r3, #16
 8007e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e56:	e05d      	b.n	8007f14 <UART_SetConfig+0x210>
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a58      	ldr	r2, [pc, #352]	; (8007fc0 <UART_SetConfig+0x2bc>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d125      	bne.n	8007eae <UART_SetConfig+0x1aa>
 8007e62:	4b55      	ldr	r3, [pc, #340]	; (8007fb8 <UART_SetConfig+0x2b4>)
 8007e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e68:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007e6c:	2b30      	cmp	r3, #48	; 0x30
 8007e6e:	d016      	beq.n	8007e9e <UART_SetConfig+0x19a>
 8007e70:	2b30      	cmp	r3, #48	; 0x30
 8007e72:	d818      	bhi.n	8007ea6 <UART_SetConfig+0x1a2>
 8007e74:	2b20      	cmp	r3, #32
 8007e76:	d00a      	beq.n	8007e8e <UART_SetConfig+0x18a>
 8007e78:	2b20      	cmp	r3, #32
 8007e7a:	d814      	bhi.n	8007ea6 <UART_SetConfig+0x1a2>
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d002      	beq.n	8007e86 <UART_SetConfig+0x182>
 8007e80:	2b10      	cmp	r3, #16
 8007e82:	d008      	beq.n	8007e96 <UART_SetConfig+0x192>
 8007e84:	e00f      	b.n	8007ea6 <UART_SetConfig+0x1a2>
 8007e86:	2300      	movs	r3, #0
 8007e88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e8c:	e042      	b.n	8007f14 <UART_SetConfig+0x210>
 8007e8e:	2302      	movs	r3, #2
 8007e90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e94:	e03e      	b.n	8007f14 <UART_SetConfig+0x210>
 8007e96:	2304      	movs	r3, #4
 8007e98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e9c:	e03a      	b.n	8007f14 <UART_SetConfig+0x210>
 8007e9e:	2308      	movs	r3, #8
 8007ea0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ea4:	e036      	b.n	8007f14 <UART_SetConfig+0x210>
 8007ea6:	2310      	movs	r3, #16
 8007ea8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007eac:	e032      	b.n	8007f14 <UART_SetConfig+0x210>
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a3f      	ldr	r2, [pc, #252]	; (8007fb0 <UART_SetConfig+0x2ac>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d12a      	bne.n	8007f0e <UART_SetConfig+0x20a>
 8007eb8:	4b3f      	ldr	r3, [pc, #252]	; (8007fb8 <UART_SetConfig+0x2b4>)
 8007eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ebe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007ec2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ec6:	d01a      	beq.n	8007efe <UART_SetConfig+0x1fa>
 8007ec8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ecc:	d81b      	bhi.n	8007f06 <UART_SetConfig+0x202>
 8007ece:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ed2:	d00c      	beq.n	8007eee <UART_SetConfig+0x1ea>
 8007ed4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ed8:	d815      	bhi.n	8007f06 <UART_SetConfig+0x202>
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d003      	beq.n	8007ee6 <UART_SetConfig+0x1e2>
 8007ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ee2:	d008      	beq.n	8007ef6 <UART_SetConfig+0x1f2>
 8007ee4:	e00f      	b.n	8007f06 <UART_SetConfig+0x202>
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007eec:	e012      	b.n	8007f14 <UART_SetConfig+0x210>
 8007eee:	2302      	movs	r3, #2
 8007ef0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ef4:	e00e      	b.n	8007f14 <UART_SetConfig+0x210>
 8007ef6:	2304      	movs	r3, #4
 8007ef8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007efc:	e00a      	b.n	8007f14 <UART_SetConfig+0x210>
 8007efe:	2308      	movs	r3, #8
 8007f00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f04:	e006      	b.n	8007f14 <UART_SetConfig+0x210>
 8007f06:	2310      	movs	r3, #16
 8007f08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f0c:	e002      	b.n	8007f14 <UART_SetConfig+0x210>
 8007f0e:	2310      	movs	r3, #16
 8007f10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a25      	ldr	r2, [pc, #148]	; (8007fb0 <UART_SetConfig+0x2ac>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	f040 808a 	bne.w	8008034 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007f20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f24:	2b08      	cmp	r3, #8
 8007f26:	d824      	bhi.n	8007f72 <UART_SetConfig+0x26e>
 8007f28:	a201      	add	r2, pc, #4	; (adr r2, 8007f30 <UART_SetConfig+0x22c>)
 8007f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f2e:	bf00      	nop
 8007f30:	08007f55 	.word	0x08007f55
 8007f34:	08007f73 	.word	0x08007f73
 8007f38:	08007f5d 	.word	0x08007f5d
 8007f3c:	08007f73 	.word	0x08007f73
 8007f40:	08007f63 	.word	0x08007f63
 8007f44:	08007f73 	.word	0x08007f73
 8007f48:	08007f73 	.word	0x08007f73
 8007f4c:	08007f73 	.word	0x08007f73
 8007f50:	08007f6b 	.word	0x08007f6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f54:	f7fd fcb0 	bl	80058b8 <HAL_RCC_GetPCLK1Freq>
 8007f58:	61f8      	str	r0, [r7, #28]
        break;
 8007f5a:	e010      	b.n	8007f7e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f5c:	4b19      	ldr	r3, [pc, #100]	; (8007fc4 <UART_SetConfig+0x2c0>)
 8007f5e:	61fb      	str	r3, [r7, #28]
        break;
 8007f60:	e00d      	b.n	8007f7e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f62:	f7fd fc11 	bl	8005788 <HAL_RCC_GetSysClockFreq>
 8007f66:	61f8      	str	r0, [r7, #28]
        break;
 8007f68:	e009      	b.n	8007f7e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f6e:	61fb      	str	r3, [r7, #28]
        break;
 8007f70:	e005      	b.n	8007f7e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8007f72:	2300      	movs	r3, #0
 8007f74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007f7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f000 8109 	beq.w	8008198 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	685a      	ldr	r2, [r3, #4]
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	005b      	lsls	r3, r3, #1
 8007f8e:	4413      	add	r3, r2
 8007f90:	69fa      	ldr	r2, [r7, #28]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d305      	bcc.n	8007fa2 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007f9c:	69fa      	ldr	r2, [r7, #28]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d912      	bls.n	8007fc8 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007fa8:	e0f6      	b.n	8008198 <UART_SetConfig+0x494>
 8007faa:	bf00      	nop
 8007fac:	efff69f3 	.word	0xefff69f3
 8007fb0:	40008000 	.word	0x40008000
 8007fb4:	40013800 	.word	0x40013800
 8007fb8:	40021000 	.word	0x40021000
 8007fbc:	40004400 	.word	0x40004400
 8007fc0:	40004800 	.word	0x40004800
 8007fc4:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	461c      	mov	r4, r3
 8007fce:	4615      	mov	r5, r2
 8007fd0:	f04f 0200 	mov.w	r2, #0
 8007fd4:	f04f 0300 	mov.w	r3, #0
 8007fd8:	022b      	lsls	r3, r5, #8
 8007fda:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007fde:	0222      	lsls	r2, r4, #8
 8007fe0:	68f9      	ldr	r1, [r7, #12]
 8007fe2:	6849      	ldr	r1, [r1, #4]
 8007fe4:	0849      	lsrs	r1, r1, #1
 8007fe6:	2000      	movs	r0, #0
 8007fe8:	4688      	mov	r8, r1
 8007fea:	4681      	mov	r9, r0
 8007fec:	eb12 0a08 	adds.w	sl, r2, r8
 8007ff0:	eb43 0b09 	adc.w	fp, r3, r9
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	603b      	str	r3, [r7, #0]
 8007ffc:	607a      	str	r2, [r7, #4]
 8007ffe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008002:	4650      	mov	r0, sl
 8008004:	4659      	mov	r1, fp
 8008006:	f7f8 f933 	bl	8000270 <__aeabi_uldivmod>
 800800a:	4602      	mov	r2, r0
 800800c:	460b      	mov	r3, r1
 800800e:	4613      	mov	r3, r2
 8008010:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008018:	d308      	bcc.n	800802c <UART_SetConfig+0x328>
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008020:	d204      	bcs.n	800802c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	69ba      	ldr	r2, [r7, #24]
 8008028:	60da      	str	r2, [r3, #12]
 800802a:	e0b5      	b.n	8008198 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008032:	e0b1      	b.n	8008198 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	69db      	ldr	r3, [r3, #28]
 8008038:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800803c:	d15d      	bne.n	80080fa <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800803e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008042:	2b08      	cmp	r3, #8
 8008044:	d827      	bhi.n	8008096 <UART_SetConfig+0x392>
 8008046:	a201      	add	r2, pc, #4	; (adr r2, 800804c <UART_SetConfig+0x348>)
 8008048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800804c:	08008071 	.word	0x08008071
 8008050:	08008079 	.word	0x08008079
 8008054:	08008081 	.word	0x08008081
 8008058:	08008097 	.word	0x08008097
 800805c:	08008087 	.word	0x08008087
 8008060:	08008097 	.word	0x08008097
 8008064:	08008097 	.word	0x08008097
 8008068:	08008097 	.word	0x08008097
 800806c:	0800808f 	.word	0x0800808f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008070:	f7fd fc22 	bl	80058b8 <HAL_RCC_GetPCLK1Freq>
 8008074:	61f8      	str	r0, [r7, #28]
        break;
 8008076:	e014      	b.n	80080a2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008078:	f7fd fc34 	bl	80058e4 <HAL_RCC_GetPCLK2Freq>
 800807c:	61f8      	str	r0, [r7, #28]
        break;
 800807e:	e010      	b.n	80080a2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008080:	4b4c      	ldr	r3, [pc, #304]	; (80081b4 <UART_SetConfig+0x4b0>)
 8008082:	61fb      	str	r3, [r7, #28]
        break;
 8008084:	e00d      	b.n	80080a2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008086:	f7fd fb7f 	bl	8005788 <HAL_RCC_GetSysClockFreq>
 800808a:	61f8      	str	r0, [r7, #28]
        break;
 800808c:	e009      	b.n	80080a2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800808e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008092:	61fb      	str	r3, [r7, #28]
        break;
 8008094:	e005      	b.n	80080a2 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8008096:	2300      	movs	r3, #0
 8008098:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80080a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d077      	beq.n	8008198 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80080a8:	69fb      	ldr	r3, [r7, #28]
 80080aa:	005a      	lsls	r2, r3, #1
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	085b      	lsrs	r3, r3, #1
 80080b2:	441a      	add	r2, r3
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80080bc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	2b0f      	cmp	r3, #15
 80080c2:	d916      	bls.n	80080f2 <UART_SetConfig+0x3ee>
 80080c4:	69bb      	ldr	r3, [r7, #24]
 80080c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080ca:	d212      	bcs.n	80080f2 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80080cc:	69bb      	ldr	r3, [r7, #24]
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	f023 030f 	bic.w	r3, r3, #15
 80080d4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	085b      	lsrs	r3, r3, #1
 80080da:	b29b      	uxth	r3, r3
 80080dc:	f003 0307 	and.w	r3, r3, #7
 80080e0:	b29a      	uxth	r2, r3
 80080e2:	8afb      	ldrh	r3, [r7, #22]
 80080e4:	4313      	orrs	r3, r2
 80080e6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	8afa      	ldrh	r2, [r7, #22]
 80080ee:	60da      	str	r2, [r3, #12]
 80080f0:	e052      	b.n	8008198 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80080f8:	e04e      	b.n	8008198 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80080fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80080fe:	2b08      	cmp	r3, #8
 8008100:	d827      	bhi.n	8008152 <UART_SetConfig+0x44e>
 8008102:	a201      	add	r2, pc, #4	; (adr r2, 8008108 <UART_SetConfig+0x404>)
 8008104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008108:	0800812d 	.word	0x0800812d
 800810c:	08008135 	.word	0x08008135
 8008110:	0800813d 	.word	0x0800813d
 8008114:	08008153 	.word	0x08008153
 8008118:	08008143 	.word	0x08008143
 800811c:	08008153 	.word	0x08008153
 8008120:	08008153 	.word	0x08008153
 8008124:	08008153 	.word	0x08008153
 8008128:	0800814b 	.word	0x0800814b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800812c:	f7fd fbc4 	bl	80058b8 <HAL_RCC_GetPCLK1Freq>
 8008130:	61f8      	str	r0, [r7, #28]
        break;
 8008132:	e014      	b.n	800815e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008134:	f7fd fbd6 	bl	80058e4 <HAL_RCC_GetPCLK2Freq>
 8008138:	61f8      	str	r0, [r7, #28]
        break;
 800813a:	e010      	b.n	800815e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800813c:	4b1d      	ldr	r3, [pc, #116]	; (80081b4 <UART_SetConfig+0x4b0>)
 800813e:	61fb      	str	r3, [r7, #28]
        break;
 8008140:	e00d      	b.n	800815e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008142:	f7fd fb21 	bl	8005788 <HAL_RCC_GetSysClockFreq>
 8008146:	61f8      	str	r0, [r7, #28]
        break;
 8008148:	e009      	b.n	800815e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800814a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800814e:	61fb      	str	r3, [r7, #28]
        break;
 8008150:	e005      	b.n	800815e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8008152:	2300      	movs	r3, #0
 8008154:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800815c:	bf00      	nop
    }

    if (pclk != 0U)
 800815e:	69fb      	ldr	r3, [r7, #28]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d019      	beq.n	8008198 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	085a      	lsrs	r2, r3, #1
 800816a:	69fb      	ldr	r3, [r7, #28]
 800816c:	441a      	add	r2, r3
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	fbb2 f3f3 	udiv	r3, r2, r3
 8008176:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008178:	69bb      	ldr	r3, [r7, #24]
 800817a:	2b0f      	cmp	r3, #15
 800817c:	d909      	bls.n	8008192 <UART_SetConfig+0x48e>
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008184:	d205      	bcs.n	8008192 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	b29a      	uxth	r2, r3
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	60da      	str	r2, [r3, #12]
 8008190:	e002      	b.n	8008198 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2200      	movs	r2, #0
 800819c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2200      	movs	r2, #0
 80081a2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80081a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3728      	adds	r7, #40	; 0x28
 80081ac:	46bd      	mov	sp, r7
 80081ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081b2:	bf00      	nop
 80081b4:	00f42400 	.word	0x00f42400

080081b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c4:	f003 0301 	and.w	r3, r3, #1
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d00a      	beq.n	80081e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	430a      	orrs	r2, r1
 80081e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e6:	f003 0302 	and.w	r3, r3, #2
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d00a      	beq.n	8008204 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	430a      	orrs	r2, r1
 8008202:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008208:	f003 0304 	and.w	r3, r3, #4
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00a      	beq.n	8008226 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	430a      	orrs	r2, r1
 8008224:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800822a:	f003 0308 	and.w	r3, r3, #8
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00a      	beq.n	8008248 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	430a      	orrs	r2, r1
 8008246:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824c:	f003 0310 	and.w	r3, r3, #16
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00a      	beq.n	800826a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	430a      	orrs	r2, r1
 8008268:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826e:	f003 0320 	and.w	r3, r3, #32
 8008272:	2b00      	cmp	r3, #0
 8008274:	d00a      	beq.n	800828c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	430a      	orrs	r2, r1
 800828a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008294:	2b00      	cmp	r3, #0
 8008296:	d01a      	beq.n	80082ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	430a      	orrs	r2, r1
 80082ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082b6:	d10a      	bne.n	80082ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	430a      	orrs	r2, r1
 80082cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00a      	beq.n	80082f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	430a      	orrs	r2, r1
 80082ee:	605a      	str	r2, [r3, #4]
  }
}
 80082f0:	bf00      	nop
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b086      	sub	sp, #24
 8008300:	af02      	add	r7, sp, #8
 8008302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800830c:	f7fb fe82 	bl	8004014 <HAL_GetTick>
 8008310:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f003 0308 	and.w	r3, r3, #8
 800831c:	2b08      	cmp	r3, #8
 800831e:	d10e      	bne.n	800833e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008320:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008324:	9300      	str	r3, [sp, #0]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2200      	movs	r2, #0
 800832a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 f82d 	bl	800838e <UART_WaitOnFlagUntilTimeout>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d001      	beq.n	800833e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800833a:	2303      	movs	r3, #3
 800833c:	e023      	b.n	8008386 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f003 0304 	and.w	r3, r3, #4
 8008348:	2b04      	cmp	r3, #4
 800834a:	d10e      	bne.n	800836a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800834c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008350:	9300      	str	r3, [sp, #0]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2200      	movs	r2, #0
 8008356:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 f817 	bl	800838e <UART_WaitOnFlagUntilTimeout>
 8008360:	4603      	mov	r3, r0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d001      	beq.n	800836a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008366:	2303      	movs	r3, #3
 8008368:	e00d      	b.n	8008386 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2220      	movs	r2, #32
 800836e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2220      	movs	r2, #32
 8008374:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2200      	movs	r2, #0
 800837a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	3710      	adds	r7, #16
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}

0800838e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800838e:	b580      	push	{r7, lr}
 8008390:	b09c      	sub	sp, #112	; 0x70
 8008392:	af00      	add	r7, sp, #0
 8008394:	60f8      	str	r0, [r7, #12]
 8008396:	60b9      	str	r1, [r7, #8]
 8008398:	603b      	str	r3, [r7, #0]
 800839a:	4613      	mov	r3, r2
 800839c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800839e:	e0a5      	b.n	80084ec <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083a6:	f000 80a1 	beq.w	80084ec <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083aa:	f7fb fe33 	bl	8004014 <HAL_GetTick>
 80083ae:	4602      	mov	r2, r0
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	1ad3      	subs	r3, r2, r3
 80083b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d302      	bcc.n	80083c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80083ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d13e      	bne.n	800843e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083c8:	e853 3f00 	ldrex	r3, [r3]
 80083cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80083ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80083d4:	667b      	str	r3, [r7, #100]	; 0x64
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	461a      	mov	r2, r3
 80083dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083e0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80083e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80083e6:	e841 2300 	strex	r3, r2, [r1]
 80083ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80083ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d1e6      	bne.n	80083c0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	3308      	adds	r3, #8
 80083f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083fc:	e853 3f00 	ldrex	r3, [r3]
 8008400:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008404:	f023 0301 	bic.w	r3, r3, #1
 8008408:	663b      	str	r3, [r7, #96]	; 0x60
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	3308      	adds	r3, #8
 8008410:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008412:	64ba      	str	r2, [r7, #72]	; 0x48
 8008414:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008416:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008418:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800841a:	e841 2300 	strex	r3, r2, [r1]
 800841e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008422:	2b00      	cmp	r3, #0
 8008424:	d1e5      	bne.n	80083f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2220      	movs	r2, #32
 800842a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2220      	movs	r2, #32
 8008430:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2200      	movs	r2, #0
 8008436:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800843a:	2303      	movs	r3, #3
 800843c:	e067      	b.n	800850e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f003 0304 	and.w	r3, r3, #4
 8008448:	2b00      	cmp	r3, #0
 800844a:	d04f      	beq.n	80084ec <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	69db      	ldr	r3, [r3, #28]
 8008452:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008456:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800845a:	d147      	bne.n	80084ec <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008464:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846e:	e853 3f00 	ldrex	r3, [r3]
 8008472:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008476:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800847a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	461a      	mov	r2, r3
 8008482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008484:	637b      	str	r3, [r7, #52]	; 0x34
 8008486:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008488:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800848a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800848c:	e841 2300 	strex	r3, r2, [r1]
 8008490:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008494:	2b00      	cmp	r3, #0
 8008496:	d1e6      	bne.n	8008466 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	3308      	adds	r3, #8
 800849e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	e853 3f00 	ldrex	r3, [r3]
 80084a6:	613b      	str	r3, [r7, #16]
   return(result);
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	f023 0301 	bic.w	r3, r3, #1
 80084ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	3308      	adds	r3, #8
 80084b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80084b8:	623a      	str	r2, [r7, #32]
 80084ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084bc:	69f9      	ldr	r1, [r7, #28]
 80084be:	6a3a      	ldr	r2, [r7, #32]
 80084c0:	e841 2300 	strex	r3, r2, [r1]
 80084c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80084c6:	69bb      	ldr	r3, [r7, #24]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d1e5      	bne.n	8008498 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2220      	movs	r2, #32
 80084d0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2220      	movs	r2, #32
 80084d6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2220      	movs	r2, #32
 80084dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80084e8:	2303      	movs	r3, #3
 80084ea:	e010      	b.n	800850e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	69da      	ldr	r2, [r3, #28]
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	4013      	ands	r3, r2
 80084f6:	68ba      	ldr	r2, [r7, #8]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	bf0c      	ite	eq
 80084fc:	2301      	moveq	r3, #1
 80084fe:	2300      	movne	r3, #0
 8008500:	b2db      	uxtb	r3, r3
 8008502:	461a      	mov	r2, r3
 8008504:	79fb      	ldrb	r3, [r7, #7]
 8008506:	429a      	cmp	r2, r3
 8008508:	f43f af4a 	beq.w	80083a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800850c:	2300      	movs	r3, #0
}
 800850e:	4618      	mov	r0, r3
 8008510:	3770      	adds	r7, #112	; 0x70
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
	...

08008518 <board_init_common_rtc_init>:
uint32_t g_button_on_count[NUM_PUSH_BUTTONS] = {0};
bool button_press_state[NUM_PUSH_BUTTONS] = {false};
extern UART_HandleTypeDef      gh_host_usart;

static void board_init_common_rtc_init(void)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	af00      	add	r7, sp, #0
    g_rtc_handle.Instance = RTC;
 800851c:	4b10      	ldr	r3, [pc, #64]	; (8008560 <board_init_common_rtc_init+0x48>)
 800851e:	4a11      	ldr	r2, [pc, #68]	; (8008564 <board_init_common_rtc_init+0x4c>)
 8008520:	601a      	str	r2, [r3, #0]
    g_rtc_handle.Init.HourFormat = RTC_HOURFORMAT_24;
 8008522:	4b0f      	ldr	r3, [pc, #60]	; (8008560 <board_init_common_rtc_init+0x48>)
 8008524:	2200      	movs	r2, #0
 8008526:	605a      	str	r2, [r3, #4]
    g_rtc_handle.Init.AsynchPrediv = 127;
 8008528:	4b0d      	ldr	r3, [pc, #52]	; (8008560 <board_init_common_rtc_init+0x48>)
 800852a:	227f      	movs	r2, #127	; 0x7f
 800852c:	609a      	str	r2, [r3, #8]
    g_rtc_handle.Init.SynchPrediv = 255;
 800852e:	4b0c      	ldr	r3, [pc, #48]	; (8008560 <board_init_common_rtc_init+0x48>)
 8008530:	22ff      	movs	r2, #255	; 0xff
 8008532:	60da      	str	r2, [r3, #12]
    g_rtc_handle.Init.OutPut = RTC_OUTPUT_DISABLE;
 8008534:	4b0a      	ldr	r3, [pc, #40]	; (8008560 <board_init_common_rtc_init+0x48>)
 8008536:	2200      	movs	r2, #0
 8008538:	611a      	str	r2, [r3, #16]
    g_rtc_handle.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800853a:	4b09      	ldr	r3, [pc, #36]	; (8008560 <board_init_common_rtc_init+0x48>)
 800853c:	2200      	movs	r2, #0
 800853e:	615a      	str	r2, [r3, #20]
    g_rtc_handle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8008540:	4b07      	ldr	r3, [pc, #28]	; (8008560 <board_init_common_rtc_init+0x48>)
 8008542:	2200      	movs	r2, #0
 8008544:	619a      	str	r2, [r3, #24]
    g_rtc_handle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8008546:	4b06      	ldr	r3, [pc, #24]	; (8008560 <board_init_common_rtc_init+0x48>)
 8008548:	2200      	movs	r2, #0
 800854a:	61da      	str	r2, [r3, #28]
    if (HAL_RTC_Init(&g_rtc_handle) != HAL_OK) Error_Handler();
 800854c:	4804      	ldr	r0, [pc, #16]	; (8008560 <board_init_common_rtc_init+0x48>)
 800854e:	f7fd fd49 	bl	8005fe4 <HAL_RTC_Init>
 8008552:	4603      	mov	r3, r0
 8008554:	2b00      	cmp	r3, #0
 8008556:	d001      	beq.n	800855c <board_init_common_rtc_init+0x44>
 8008558:	f000 fa4b 	bl	80089f2 <Error_Handler>
}
 800855c:	bf00      	nop
 800855e:	bd80      	pop	{r7, pc}
 8008560:	20002520 	.word	0x20002520
 8008564:	40002800 	.word	0x40002800

08008568 <SystemClock_Config>:

static void SystemClock_Config(void)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b0ae      	sub	sp, #184	; 0xb8
 800856c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800856e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008572:	2244      	movs	r2, #68	; 0x44
 8008574:	2100      	movs	r1, #0
 8008576:	4618      	mov	r0, r3
 8008578:	f001 fc16 	bl	8009da8 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800857c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008580:	2200      	movs	r2, #0
 8008582:	601a      	str	r2, [r3, #0]
 8008584:	605a      	str	r2, [r3, #4]
 8008586:	609a      	str	r2, [r3, #8]
 8008588:	60da      	str	r2, [r3, #12]
 800858a:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800858c:	1d3b      	adds	r3, r7, #4
 800858e:	225c      	movs	r2, #92	; 0x5c
 8008590:	2100      	movs	r1, #0
 8008592:	4618      	mov	r0, r3
 8008594:	f001 fc08 	bl	8009da8 <memset>

    HAL_PWR_EnableBkUpAccess();
 8008598:	f7fc fafe 	bl	8004b98 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800859c:	4b25      	ldr	r3, [pc, #148]	; (8008634 <SystemClock_Config+0xcc>)
 800859e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085a2:	4a24      	ldr	r2, [pc, #144]	; (8008634 <SystemClock_Config+0xcc>)
 80085a4:	f023 0318 	bic.w	r3, r3, #24
 80085a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80085ac:	2305      	movs	r3, #5
 80085ae:	677b      	str	r3, [r7, #116]	; 0x74
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80085b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80085b4:	67bb      	str	r3, [r7, #120]	; 0x78
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80085b6:	2301      	movs	r3, #1
 80085b8:	67fb      	str	r3, [r7, #124]	; 0x7c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80085ba:	2300      	movs	r3, #0
 80085bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) while(1);
 80085c0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80085c4:	4618      	mov	r0, r3
 80085c6:	f7fc fbcb 	bl	8004d60 <HAL_RCC_OscConfig>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d000      	beq.n	80085d2 <SystemClock_Config+0x6a>
 80085d0:	e7fe      	b.n	80085d0 <SystemClock_Config+0x68>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80085d2:	230f      	movs	r3, #15
 80085d4:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80085d6:	2302      	movs	r3, #2
 80085d8:	667b      	str	r3, [r7, #100]	; 0x64
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80085da:	2300      	movs	r3, #0
 80085dc:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80085de:	2300      	movs	r3, #0
 80085e0:	66fb      	str	r3, [r7, #108]	; 0x6c
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80085e2:	2300      	movs	r3, #0
 80085e4:	673b      	str	r3, [r7, #112]	; 0x70

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) while(1);
 80085e6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80085ea:	2102      	movs	r1, #2
 80085ec:	4618      	mov	r0, r3
 80085ee:	f7fc ffcb 	bl	8005588 <HAL_RCC_ClockConfig>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d000      	beq.n	80085fa <SystemClock_Config+0x92>
 80085f8:	e7fe      	b.n	80085f8 <SystemClock_Config+0x90>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80085fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80085fe:	607b      	str	r3, [r7, #4]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8008600:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008604:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) Error_Handler();
 8008606:	1d3b      	adds	r3, r7, #4
 8008608:	4618      	mov	r0, r3
 800860a:	f7fd f9e1 	bl	80059d0 <HAL_RCCEx_PeriphCLKConfig>
 800860e:	4603      	mov	r3, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d001      	beq.n	8008618 <SystemClock_Config+0xb0>
 8008614:	f000 f9ed 	bl	80089f2 <Error_Handler>
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) Error_Handler();
 8008618:	f44f 7000 	mov.w	r0, #512	; 0x200
 800861c:	f7fc fb4a 	bl	8004cb4 <HAL_PWREx_ControlVoltageScaling>
 8008620:	4603      	mov	r3, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	d001      	beq.n	800862a <SystemClock_Config+0xc2>
 8008626:	f000 f9e4 	bl	80089f2 <Error_Handler>
}
 800862a:	bf00      	nop
 800862c:	37b8      	adds	r7, #184	; 0xb8
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	40021000 	.word	0x40021000

08008638 <board_init_common_timer_init>:


static void board_init_common_timer_init(void)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b09e      	sub	sp, #120	; 0x78
 800863c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800863e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008642:	2200      	movs	r2, #0
 8008644:	601a      	str	r2, [r3, #0]
 8008646:	605a      	str	r2, [r3, #4]
 8008648:	609a      	str	r2, [r3, #8]
 800864a:	60da      	str	r2, [r3, #12]
 800864c:	611a      	str	r2, [r3, #16]
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800864e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008652:	2200      	movs	r2, #0
 8008654:	601a      	str	r2, [r3, #0]
 8008656:	605a      	str	r2, [r3, #4]
 8008658:	609a      	str	r2, [r3, #8]
 800865a:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800865c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008660:	2200      	movs	r2, #0
 8008662:	601a      	str	r2, [r3, #0]
 8008664:	605a      	str	r2, [r3, #4]
 8008666:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8008668:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800866c:	2200      	movs	r2, #0
 800866e:	601a      	str	r2, [r3, #0]
 8008670:	605a      	str	r2, [r3, #4]
 8008672:	609a      	str	r2, [r3, #8]
 8008674:	60da      	str	r2, [r3, #12]
 8008676:	611a      	str	r2, [r3, #16]
 8008678:	615a      	str	r2, [r3, #20]
 800867a:	619a      	str	r2, [r3, #24]
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800867c:	463b      	mov	r3, r7
 800867e:	222c      	movs	r2, #44	; 0x2c
 8008680:	2100      	movs	r1, #0
 8008682:	4618      	mov	r0, r3
 8008684:	f001 fb90 	bl	8009da8 <memset>
    g_tim1_handle.Instance = TIM1;
 8008688:	4b5c      	ldr	r3, [pc, #368]	; (80087fc <board_init_common_timer_init+0x1c4>)
 800868a:	4a5d      	ldr	r2, [pc, #372]	; (8008800 <board_init_common_timer_init+0x1c8>)
 800868c:	601a      	str	r2, [r3, #0]
    g_tim1_handle.Init.Prescaler = 0;
 800868e:	4b5b      	ldr	r3, [pc, #364]	; (80087fc <board_init_common_timer_init+0x1c4>)
 8008690:	2200      	movs	r2, #0
 8008692:	605a      	str	r2, [r3, #4]
    g_tim1_handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008694:	4b59      	ldr	r3, [pc, #356]	; (80087fc <board_init_common_timer_init+0x1c4>)
 8008696:	2200      	movs	r2, #0
 8008698:	609a      	str	r2, [r3, #8]
    g_tim1_handle.Init.Period = 60-1;
 800869a:	4b58      	ldr	r3, [pc, #352]	; (80087fc <board_init_common_timer_init+0x1c4>)
 800869c:	223b      	movs	r2, #59	; 0x3b
 800869e:	60da      	str	r2, [r3, #12]
    g_tim1_handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80086a0:	4b56      	ldr	r3, [pc, #344]	; (80087fc <board_init_common_timer_init+0x1c4>)
 80086a2:	2200      	movs	r2, #0
 80086a4:	611a      	str	r2, [r3, #16]
    g_tim1_handle.Init.RepetitionCounter = 0;
 80086a6:	4b55      	ldr	r3, [pc, #340]	; (80087fc <board_init_common_timer_init+0x1c4>)
 80086a8:	2200      	movs	r2, #0
 80086aa:	615a      	str	r2, [r3, #20]
    g_tim1_handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80086ac:	4b53      	ldr	r3, [pc, #332]	; (80087fc <board_init_common_timer_init+0x1c4>)
 80086ae:	2200      	movs	r2, #0
 80086b0:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&g_tim1_handle) != HAL_OK) Error_Handler();
 80086b2:	4852      	ldr	r0, [pc, #328]	; (80087fc <board_init_common_timer_init+0x1c4>)
 80086b4:	f7fd fe55 	bl	8006362 <HAL_TIM_Base_Init>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d001      	beq.n	80086c2 <board_init_common_timer_init+0x8a>
 80086be:	f000 f998 	bl	80089f2 <Error_Handler>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80086c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086c6:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_TIM_ConfigClockSource(&g_tim1_handle, &sClockSourceConfig) != HAL_OK) Error_Handler();
 80086c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80086cc:	4619      	mov	r1, r3
 80086ce:	484b      	ldr	r0, [pc, #300]	; (80087fc <board_init_common_timer_init+0x1c4>)
 80086d0:	f7fe faea 	bl	8006ca8 <HAL_TIM_ConfigClockSource>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d001      	beq.n	80086de <board_init_common_timer_init+0xa6>
 80086da:	f000 f98a 	bl	80089f2 <Error_Handler>
    if (HAL_TIM_PWM_Init(&g_tim1_handle) != HAL_OK) Error_Handler();
 80086de:	4847      	ldr	r0, [pc, #284]	; (80087fc <board_init_common_timer_init+0x1c4>)
 80086e0:	f7fd fe96 	bl	8006410 <HAL_TIM_PWM_Init>
 80086e4:	4603      	mov	r3, r0
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d001      	beq.n	80086ee <board_init_common_timer_init+0xb6>
 80086ea:	f000 f982 	bl	80089f2 <Error_Handler>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80086ee:	2300      	movs	r3, #0
 80086f0:	64bb      	str	r3, [r7, #72]	; 0x48
    sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80086f2:	2300      	movs	r3, #0
 80086f4:	64fb      	str	r3, [r7, #76]	; 0x4c
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80086f6:	2300      	movs	r3, #0
 80086f8:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_TIMEx_MasterConfigSynchronization(&g_tim1_handle, &sMasterConfig) != HAL_OK) Error_Handler();
 80086fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80086fe:	4619      	mov	r1, r3
 8008700:	483e      	ldr	r0, [pc, #248]	; (80087fc <board_init_common_timer_init+0x1c4>)
 8008702:	f7ff f821 	bl	8007748 <HAL_TIMEx_MasterConfigSynchronization>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d001      	beq.n	8008710 <board_init_common_timer_init+0xd8>
 800870c:	f000 f971 	bl	80089f2 <Error_Handler>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008710:	2360      	movs	r3, #96	; 0x60
 8008712:	62fb      	str	r3, [r7, #44]	; 0x2c
    sConfigOC.Pulse = 0;
 8008714:	2300      	movs	r3, #0
 8008716:	633b      	str	r3, [r7, #48]	; 0x30
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008718:	2300      	movs	r3, #0
 800871a:	637b      	str	r3, [r7, #52]	; 0x34
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800871c:	2300      	movs	r3, #0
 800871e:	63bb      	str	r3, [r7, #56]	; 0x38
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008720:	2300      	movs	r3, #0
 8008722:	63fb      	str	r3, [r7, #60]	; 0x3c
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008724:	2300      	movs	r3, #0
 8008726:	643b      	str	r3, [r7, #64]	; 0x40
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008728:	2300      	movs	r3, #0
 800872a:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 800872c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008730:	2200      	movs	r2, #0
 8008732:	4619      	mov	r1, r3
 8008734:	4831      	ldr	r0, [pc, #196]	; (80087fc <board_init_common_timer_init+0x1c4>)
 8008736:	f7fe f9a3 	bl	8006a80 <HAL_TIM_PWM_ConfigChannel>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	d001      	beq.n	8008744 <board_init_common_timer_init+0x10c>
 8008740:	f000 f957 	bl	80089f2 <Error_Handler>
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) Error_Handler();
 8008744:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008748:	2204      	movs	r2, #4
 800874a:	4619      	mov	r1, r3
 800874c:	482b      	ldr	r0, [pc, #172]	; (80087fc <board_init_common_timer_init+0x1c4>)
 800874e:	f7fe f997 	bl	8006a80 <HAL_TIM_PWM_ConfigChannel>
 8008752:	4603      	mov	r3, r0
 8008754:	2b00      	cmp	r3, #0
 8008756:	d001      	beq.n	800875c <board_init_common_timer_init+0x124>
 8008758:	f000 f94b 	bl	80089f2 <Error_Handler>
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) Error_Handler();
 800875c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008760:	2208      	movs	r2, #8
 8008762:	4619      	mov	r1, r3
 8008764:	4825      	ldr	r0, [pc, #148]	; (80087fc <board_init_common_timer_init+0x1c4>)
 8008766:	f7fe f98b 	bl	8006a80 <HAL_TIM_PWM_ConfigChannel>
 800876a:	4603      	mov	r3, r0
 800876c:	2b00      	cmp	r3, #0
 800876e:	d001      	beq.n	8008774 <board_init_common_timer_init+0x13c>
 8008770:	f000 f93f 	bl	80089f2 <Error_Handler>
    sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008774:	2300      	movs	r3, #0
 8008776:	603b      	str	r3, [r7, #0]
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008778:	2300      	movs	r3, #0
 800877a:	607b      	str	r3, [r7, #4]
    sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800877c:	2300      	movs	r3, #0
 800877e:	60bb      	str	r3, [r7, #8]
    sBreakDeadTimeConfig.DeadTime = 0;
 8008780:	2300      	movs	r3, #0
 8008782:	60fb      	str	r3, [r7, #12]
    sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008784:	2300      	movs	r3, #0
 8008786:	613b      	str	r3, [r7, #16]
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008788:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800878c:	617b      	str	r3, [r7, #20]
    sBreakDeadTimeConfig.BreakFilter = 0;
 800878e:	2300      	movs	r3, #0
 8008790:	61bb      	str	r3, [r7, #24]
    sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8008792:	2300      	movs	r3, #0
 8008794:	61fb      	str	r3, [r7, #28]
    sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8008796:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800879a:	623b      	str	r3, [r7, #32]
    sBreakDeadTimeConfig.Break2Filter = 0;
 800879c:	2300      	movs	r3, #0
 800879e:	627b      	str	r3, [r7, #36]	; 0x24
    sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80087a0:	2300      	movs	r3, #0
 80087a2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIMEx_ConfigBreakDeadTime(&g_tim1_handle, &sBreakDeadTimeConfig) != HAL_OK) Error_Handler();
 80087a4:	463b      	mov	r3, r7
 80087a6:	4619      	mov	r1, r3
 80087a8:	4814      	ldr	r0, [pc, #80]	; (80087fc <board_init_common_timer_init+0x1c4>)
 80087aa:	f7ff f833 	bl	8007814 <HAL_TIMEx_ConfigBreakDeadTime>
 80087ae:	4603      	mov	r3, r0
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d001      	beq.n	80087b8 <board_init_common_timer_init+0x180>
 80087b4:	f000 f91d 	bl	80089f2 <Error_Handler>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_1);
 80087b8:	2100      	movs	r1, #0
 80087ba:	4810      	ldr	r0, [pc, #64]	; (80087fc <board_init_common_timer_init+0x1c4>)
 80087bc:	f7fe f878 	bl	80068b0 <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_2);
 80087c0:	2104      	movs	r1, #4
 80087c2:	480e      	ldr	r0, [pc, #56]	; (80087fc <board_init_common_timer_init+0x1c4>)
 80087c4:	f7fe f874 	bl	80068b0 <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_3);
 80087c8:	2108      	movs	r1, #8
 80087ca:	480c      	ldr	r0, [pc, #48]	; (80087fc <board_init_common_timer_init+0x1c4>)
 80087cc:	f7fe f870 	bl	80068b0 <HAL_TIM_PWM_Stop_DMA>
    GPIO_InitStruct.Pin = PIN_TIM1_CH1|PIN_TIM1_CH2|PIN_TIM1_CH3;
 80087d0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80087d4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087d6:	2302      	movs	r3, #2
 80087d8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087da:	2300      	movs	r3, #0
 80087dc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087de:	2300      	movs	r3, #0
 80087e0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80087e2:	2301      	movs	r3, #1
 80087e4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087e6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80087ea:	4619      	mov	r1, r3
 80087ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80087f0:	f7fc f828 	bl	8004844 <HAL_GPIO_Init>
}
 80087f4:	bf00      	nop
 80087f6:	3778      	adds	r7, #120	; 0x78
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	20002544 	.word	0x20002544
 8008800:	40012c00 	.word	0x40012c00

08008804 <board_init_common_nvic_setup_interrupts>:


static void board_init_common_nvic_setup_interrupts(void)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	af00      	add	r7, sp, #0
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI0_IRQn);
 8008808:	4b30      	ldr	r3, [pc, #192]	; (80088cc <board_init_common_nvic_setup_interrupts+0xc8>)
 800880a:	2206      	movs	r2, #6
 800880c:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI2_IRQn);
 800880e:	4b2f      	ldr	r3, [pc, #188]	; (80088cc <board_init_common_nvic_setup_interrupts+0xc8>)
 8008810:	2208      	movs	r2, #8
 8008812:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI9_5_IRQn);
 8008814:	4b2d      	ldr	r3, [pc, #180]	; (80088cc <board_init_common_nvic_setup_interrupts+0xc8>)
 8008816:	2217      	movs	r2, #23
 8008818:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI15_10_IRQn);
 800881a:	4b2c      	ldr	r3, [pc, #176]	; (80088cc <board_init_common_nvic_setup_interrupts+0xc8>)
 800881c:	2228      	movs	r2, #40	; 0x28
 800881e:	615a      	str	r2, [r3, #20]
    HAL_NVIC_SetPriority(EXTI0_IRQn, 24, 0);
 8008820:	2200      	movs	r2, #0
 8008822:	2118      	movs	r1, #24
 8008824:	2006      	movs	r0, #6
 8008826:	f7fb fd48 	bl	80042ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800882a:	2006      	movs	r0, #6
 800882c:	f7fb fd61 	bl	80042f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI2_IRQn, 24, 0);
 8008830:	2200      	movs	r2, #0
 8008832:	2118      	movs	r1, #24
 8008834:	2008      	movs	r0, #8
 8008836:	f7fb fd40 	bl	80042ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800883a:	2008      	movs	r0, #8
 800883c:	f7fb fd59 	bl	80042f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 24, 0);
 8008840:	2200      	movs	r2, #0
 8008842:	2118      	movs	r1, #24
 8008844:	2017      	movs	r0, #23
 8008846:	f7fb fd38 	bl	80042ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800884a:	2017      	movs	r0, #23
 800884c:	f7fb fd51 	bl	80042f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 24, 0);
 8008850:	2200      	movs	r2, #0
 8008852:	2118      	movs	r1, #24
 8008854:	2028      	movs	r0, #40	; 0x28
 8008856:	f7fb fd30 	bl	80042ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800885a:	2028      	movs	r0, #40	; 0x28
 800885c:	f7fb fd49 	bl	80042f2 <HAL_NVIC_EnableIRQ>
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI0_IRQn);
 8008860:	4b1a      	ldr	r3, [pc, #104]	; (80088cc <board_init_common_nvic_setup_interrupts+0xc8>)
 8008862:	2206      	movs	r2, #6
 8008864:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI2_IRQn);
 8008866:	4b19      	ldr	r3, [pc, #100]	; (80088cc <board_init_common_nvic_setup_interrupts+0xc8>)
 8008868:	2208      	movs	r2, #8
 800886a:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI9_5_IRQn);
 800886c:	4b17      	ldr	r3, [pc, #92]	; (80088cc <board_init_common_nvic_setup_interrupts+0xc8>)
 800886e:	2217      	movs	r2, #23
 8008870:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI15_10_IRQn);
 8008872:	4b16      	ldr	r3, [pc, #88]	; (80088cc <board_init_common_nvic_setup_interrupts+0xc8>)
 8008874:	2228      	movs	r2, #40	; 0x28
 8008876:	615a      	str	r2, [r3, #20]
    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8008878:	2200      	movs	r2, #0
 800887a:	2100      	movs	r1, #0
 800887c:	200c      	movs	r0, #12
 800887e:	f7fb fd1c 	bl	80042ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8008882:	200c      	movs	r0, #12
 8008884:	f7fb fd35 	bl	80042f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8008888:	2200      	movs	r2, #0
 800888a:	2100      	movs	r1, #0
 800888c:	200d      	movs	r0, #13
 800888e:	f7fb fd14 	bl	80042ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8008892:	200d      	movs	r0, #13
 8008894:	f7fb fd2d 	bl	80042f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8008898:	2200      	movs	r2, #0
 800889a:	2100      	movs	r1, #0
 800889c:	200f      	movs	r0, #15
 800889e:	f7fb fd0c 	bl	80042ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80088a2:	200f      	movs	r0, #15
 80088a4:	f7fb fd25 	bl	80042f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80088a8:	2200      	movs	r2, #0
 80088aa:	2100      	movs	r1, #0
 80088ac:	2010      	movs	r0, #16
 80088ae:	f7fb fd04 	bl	80042ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80088b2:	2010      	movs	r0, #16
 80088b4:	f7fb fd1d 	bl	80042f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80088b8:	2200      	movs	r2, #0
 80088ba:	2100      	movs	r1, #0
 80088bc:	2011      	movs	r0, #17
 80088be:	f7fb fcfc 	bl	80042ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80088c2:	2011      	movs	r0, #17
 80088c4:	f7fb fd15 	bl	80042f2 <HAL_NVIC_EnableIRQ>
}
 80088c8:	bf00      	nop
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	40010400 	.word	0x40010400

080088d0 <board_init_common_setup_wakeups>:


static void board_init_common_setup_wakeups(void)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b086      	sub	sp, #24
 80088d4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088d6:	1d3b      	adds	r3, r7, #4
 80088d8:	2200      	movs	r2, #0
 80088da:	601a      	str	r2, [r3, #0]
 80088dc:	605a      	str	r2, [r3, #4]
 80088de:	609a      	str	r2, [r3, #8]
 80088e0:	60da      	str	r2, [r3, #12]
 80088e2:	611a      	str	r2, [r3, #16]

    // future setup wakeups
    GPIO_InitStruct.Pin = PIN_WKUP_1|PIN_WKUP_4;
 80088e4:	2305      	movs	r3, #5
 80088e6:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80088e8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80088ec:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80088ee:	2301      	movs	r3, #1
 80088f0:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 80088f2:	1d3b      	adds	r3, r7, #4
 80088f4:	4619      	mov	r1, r3
 80088f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80088fa:	f7fb ffa3 	bl	8004844 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_WKUP_2|PIN_WKUP_3;
 80088fe:	f242 0320 	movw	r3, #8224	; 0x2020
 8008902:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8008904:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8008908:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800890a:	2301      	movs	r3, #1
 800890c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800890e:	1d3b      	adds	r3, r7, #4
 8008910:	4619      	mov	r1, r3
 8008912:	4804      	ldr	r0, [pc, #16]	; (8008924 <board_init_common_setup_wakeups+0x54>)
 8008914:	f7fb ff96 	bl	8004844 <HAL_GPIO_Init>
    board_init_common_nvic_setup_interrupts();
 8008918:	f7ff ff74 	bl	8008804 <board_init_common_nvic_setup_interrupts>
}
 800891c:	bf00      	nop
 800891e:	3718      	adds	r7, #24
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}
 8008924:	48000800 	.word	0x48000800

08008928 <board_init_port_wakeup>:

static void board_init_port_wakeup(void)
{
 8008928:	b480      	push	{r7}
 800892a:	b087      	sub	sp, #28
 800892c:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800892e:	4b21      	ldr	r3, [pc, #132]	; (80089b4 <board_init_port_wakeup+0x8c>)
 8008930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008932:	4a20      	ldr	r2, [pc, #128]	; (80089b4 <board_init_port_wakeup+0x8c>)
 8008934:	f043 0301 	orr.w	r3, r3, #1
 8008938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800893a:	4b1e      	ldr	r3, [pc, #120]	; (80089b4 <board_init_port_wakeup+0x8c>)
 800893c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800893e:	f003 0301 	and.w	r3, r3, #1
 8008942:	617b      	str	r3, [r7, #20]
 8008944:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008946:	4b1b      	ldr	r3, [pc, #108]	; (80089b4 <board_init_port_wakeup+0x8c>)
 8008948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800894a:	4a1a      	ldr	r2, [pc, #104]	; (80089b4 <board_init_port_wakeup+0x8c>)
 800894c:	f043 0302 	orr.w	r3, r3, #2
 8008950:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008952:	4b18      	ldr	r3, [pc, #96]	; (80089b4 <board_init_port_wakeup+0x8c>)
 8008954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008956:	f003 0302 	and.w	r3, r3, #2
 800895a:	613b      	str	r3, [r7, #16]
 800895c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800895e:	4b15      	ldr	r3, [pc, #84]	; (80089b4 <board_init_port_wakeup+0x8c>)
 8008960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008962:	4a14      	ldr	r2, [pc, #80]	; (80089b4 <board_init_port_wakeup+0x8c>)
 8008964:	f043 0304 	orr.w	r3, r3, #4
 8008968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800896a:	4b12      	ldr	r3, [pc, #72]	; (80089b4 <board_init_port_wakeup+0x8c>)
 800896c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800896e:	f003 0304 	and.w	r3, r3, #4
 8008972:	60fb      	str	r3, [r7, #12]
 8008974:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8008976:	4b0f      	ldr	r3, [pc, #60]	; (80089b4 <board_init_port_wakeup+0x8c>)
 8008978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800897a:	4a0e      	ldr	r2, [pc, #56]	; (80089b4 <board_init_port_wakeup+0x8c>)
 800897c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008982:	4b0c      	ldr	r3, [pc, #48]	; (80089b4 <board_init_port_wakeup+0x8c>)
 8008984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800898a:	60bb      	str	r3, [r7, #8]
 800898c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_DMA1_CLK_ENABLE();
 800898e:	4b09      	ldr	r3, [pc, #36]	; (80089b4 <board_init_port_wakeup+0x8c>)
 8008990:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008992:	4a08      	ldr	r2, [pc, #32]	; (80089b4 <board_init_port_wakeup+0x8c>)
 8008994:	f043 0301 	orr.w	r3, r3, #1
 8008998:	6493      	str	r3, [r2, #72]	; 0x48
 800899a:	4b06      	ldr	r3, [pc, #24]	; (80089b4 <board_init_port_wakeup+0x8c>)
 800899c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800899e:	f003 0301 	and.w	r3, r3, #1
 80089a2:	607b      	str	r3, [r7, #4]
 80089a4:	687b      	ldr	r3, [r7, #4]
}
 80089a6:	bf00      	nop
 80089a8:	371c      	adds	r7, #28
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr
 80089b2:	bf00      	nop
 80089b4:	40021000 	.word	0x40021000

080089b8 <board_init_common_board_init>:


void board_init_common_board_init(void)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	af00      	add	r7, sp, #0
    srand(time(0));
 80089bc:	2000      	movs	r0, #0
 80089be:	f001 f9fb 	bl	8009db8 <time>
 80089c2:	4602      	mov	r2, r0
 80089c4:	460b      	mov	r3, r1
 80089c6:	4613      	mov	r3, r2
 80089c8:	4618      	mov	r0, r3
 80089ca:	f001 f8fd 	bl	8009bc8 <srand>
    HAL_Init();
 80089ce:	f7fb facd 	bl	8003f6c <HAL_Init>
    SystemClock_Config();
 80089d2:	f7ff fdc9 	bl	8008568 <SystemClock_Config>

    board_init_port_wakeup();
 80089d6:	f7ff ffa7 	bl	8008928 <board_init_port_wakeup>
    board_init_common_setup_wakeups();
 80089da:	f7ff ff79 	bl	80088d0 <board_init_common_setup_wakeups>
    board_init_specific();
 80089de:	f000 fe8d 	bl	80096fc <board_init_specific>

    board_init_common_timer_init();
 80089e2:	f7ff fe29 	bl	8008638 <board_init_common_timer_init>

    ws2812b_init();
 80089e6:	f7f8 f875 	bl	8000ad4 <ws2812b_init>

    board_init_common_rtc_init();
 80089ea:	f7ff fd95 	bl	8008518 <board_init_common_rtc_init>
}
 80089ee:	bf00      	nop
 80089f0:	bd80      	pop	{r7, pc}

080089f2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80089f2:	b480      	push	{r7}
 80089f4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80089f6:	b672      	cpsid	i
}
 80089f8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80089fa:	e7fe      	b.n	80089fa <Error_Handler+0x8>

080089fc <spi_config_hal_setup>:
}



void spi_config_hal_setup(void)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b088      	sub	sp, #32
 8008a00:	af00      	add	r7, sp, #0
    //RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
    GPIO_InitTypeDef  GPIO_InitStruct;

    for (spi_config_bus_e bus = SPI_CONFIG_BUS_FIRST; bus < NUM_SPI_CONFIG_BUSES; bus++)
 8008a02:	2300      	movs	r3, #0
 8008a04:	77fb      	strb	r3, [r7, #31]
 8008a06:	e0c3      	b.n	8008b90 <spi_config_hal_setup+0x194>
    {
    	if (g_spi_num_chips_per_bus[bus])
 8008a08:	7ffb      	ldrb	r3, [r7, #31]
 8008a0a:	4a66      	ldr	r2, [pc, #408]	; (8008ba4 <spi_config_hal_setup+0x1a8>)
 8008a0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	f000 80ba 	beq.w	8008b8a <spi_config_hal_setup+0x18e>
    	{
    	    GPIO_InitStruct.Pin       = g_spi_config[bus].pin.mosi;
 8008a16:	7ffa      	ldrb	r2, [r7, #31]
 8008a18:	4963      	ldr	r1, [pc, #396]	; (8008ba8 <spi_config_hal_setup+0x1ac>)
 8008a1a:	4613      	mov	r3, r2
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	4413      	add	r3, r2
 8008a20:	00db      	lsls	r3, r3, #3
 8008a22:	440b      	add	r3, r1
 8008a24:	881b      	ldrh	r3, [r3, #0]
 8008a26:	60bb      	str	r3, [r7, #8]
    	    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8008a28:	2302      	movs	r3, #2
 8008a2a:	60fb      	str	r3, [r7, #12]
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	613b      	str	r3, [r7, #16]
    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 8008a30:	2300      	movs	r3, #0
 8008a32:	617b      	str	r3, [r7, #20]
    	    GPIO_InitStruct.Alternate = g_spi_config[bus].pin.mosi_alt_func;
 8008a34:	7ffa      	ldrb	r2, [r7, #31]
 8008a36:	495c      	ldr	r1, [pc, #368]	; (8008ba8 <spi_config_hal_setup+0x1ac>)
 8008a38:	4613      	mov	r3, r2
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	4413      	add	r3, r2
 8008a3e:	00db      	lsls	r3, r3, #3
 8008a40:	440b      	add	r3, r1
 8008a42:	3308      	adds	r3, #8
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	61bb      	str	r3, [r7, #24]
    	    HAL_GPIO_Init(g_spi_config[bus].pin.mosi_port, &GPIO_InitStruct);
 8008a48:	7ffa      	ldrb	r2, [r7, #31]
 8008a4a:	4957      	ldr	r1, [pc, #348]	; (8008ba8 <spi_config_hal_setup+0x1ac>)
 8008a4c:	4613      	mov	r3, r2
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	4413      	add	r3, r2
 8008a52:	00db      	lsls	r3, r3, #3
 8008a54:	440b      	add	r3, r1
 8008a56:	3304      	adds	r3, #4
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f107 0208 	add.w	r2, r7, #8
 8008a5e:	4611      	mov	r1, r2
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7fb feef 	bl	8004844 <HAL_GPIO_Init>

    	    GPIO_InitStruct.Pin       = g_spi_config[bus].pin.miso;
 8008a66:	7ffa      	ldrb	r2, [r7, #31]
 8008a68:	494f      	ldr	r1, [pc, #316]	; (8008ba8 <spi_config_hal_setup+0x1ac>)
 8008a6a:	4613      	mov	r3, r2
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	4413      	add	r3, r2
 8008a70:	00db      	lsls	r3, r3, #3
 8008a72:	440b      	add	r3, r1
 8008a74:	330a      	adds	r3, #10
 8008a76:	881b      	ldrh	r3, [r3, #0]
 8008a78:	60bb      	str	r3, [r7, #8]
    	    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8008a7a:	2302      	movs	r3, #2
 8008a7c:	60fb      	str	r3, [r7, #12]
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	613b      	str	r3, [r7, #16]
    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 8008a82:	2300      	movs	r3, #0
 8008a84:	617b      	str	r3, [r7, #20]
    	    GPIO_InitStruct.Alternate = g_spi_config[bus].pin.miso_alt_func;
 8008a86:	7ffa      	ldrb	r2, [r7, #31]
 8008a88:	4947      	ldr	r1, [pc, #284]	; (8008ba8 <spi_config_hal_setup+0x1ac>)
 8008a8a:	4613      	mov	r3, r2
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	4413      	add	r3, r2
 8008a90:	00db      	lsls	r3, r3, #3
 8008a92:	440b      	add	r3, r1
 8008a94:	3310      	adds	r3, #16
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	61bb      	str	r3, [r7, #24]
    	    HAL_GPIO_Init(g_spi_config[bus].pin.miso_port, &GPIO_InitStruct);
 8008a9a:	7ffa      	ldrb	r2, [r7, #31]
 8008a9c:	4942      	ldr	r1, [pc, #264]	; (8008ba8 <spi_config_hal_setup+0x1ac>)
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	4413      	add	r3, r2
 8008aa4:	00db      	lsls	r3, r3, #3
 8008aa6:	440b      	add	r3, r1
 8008aa8:	330c      	adds	r3, #12
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f107 0208 	add.w	r2, r7, #8
 8008ab0:	4611      	mov	r1, r2
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f7fb fec6 	bl	8004844 <HAL_GPIO_Init>

    	    GPIO_InitStruct.Pin       = g_spi_config[bus].pin.sck;
 8008ab8:	7ffa      	ldrb	r2, [r7, #31]
 8008aba:	493b      	ldr	r1, [pc, #236]	; (8008ba8 <spi_config_hal_setup+0x1ac>)
 8008abc:	4613      	mov	r3, r2
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	4413      	add	r3, r2
 8008ac2:	00db      	lsls	r3, r3, #3
 8008ac4:	440b      	add	r3, r1
 8008ac6:	3312      	adds	r3, #18
 8008ac8:	881b      	ldrh	r3, [r3, #0]
 8008aca:	60bb      	str	r3, [r7, #8]
    	    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8008acc:	2302      	movs	r3, #2
 8008ace:	60fb      	str	r3, [r7, #12]
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	613b      	str	r3, [r7, #16]
    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	617b      	str	r3, [r7, #20]
    	    GPIO_InitStruct.Alternate = g_spi_config[bus].pin.sck_alt_func;
 8008ad8:	7ffa      	ldrb	r2, [r7, #31]
 8008ada:	4933      	ldr	r1, [pc, #204]	; (8008ba8 <spi_config_hal_setup+0x1ac>)
 8008adc:	4613      	mov	r3, r2
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	4413      	add	r3, r2
 8008ae2:	00db      	lsls	r3, r3, #3
 8008ae4:	440b      	add	r3, r1
 8008ae6:	3318      	adds	r3, #24
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	61bb      	str	r3, [r7, #24]
    	    HAL_GPIO_Init(g_spi_config[bus].pin.sck_port, &GPIO_InitStruct);
 8008aec:	7ffa      	ldrb	r2, [r7, #31]
 8008aee:	492e      	ldr	r1, [pc, #184]	; (8008ba8 <spi_config_hal_setup+0x1ac>)
 8008af0:	4613      	mov	r3, r2
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	4413      	add	r3, r2
 8008af6:	00db      	lsls	r3, r3, #3
 8008af8:	440b      	add	r3, r1
 8008afa:	3314      	adds	r3, #20
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f107 0208 	add.w	r2, r7, #8
 8008b02:	4611      	mov	r1, r2
 8008b04:	4618      	mov	r0, r3
 8008b06:	f7fb fe9d 	bl	8004844 <HAL_GPIO_Init>

    	    GPIO_InitStruct.Pin       = g_spi_config[bus].pin.csn;
 8008b0a:	7ffa      	ldrb	r2, [r7, #31]
 8008b0c:	4926      	ldr	r1, [pc, #152]	; (8008ba8 <spi_config_hal_setup+0x1ac>)
 8008b0e:	4613      	mov	r3, r2
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	4413      	add	r3, r2
 8008b14:	00db      	lsls	r3, r3, #3
 8008b16:	440b      	add	r3, r1
 8008b18:	331a      	adds	r3, #26
 8008b1a:	881b      	ldrh	r3, [r3, #0]
 8008b1c:	60bb      	str	r3, [r7, #8]
    	    GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_PP;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	60fb      	str	r3, [r7, #12]
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8008b22:	2300      	movs	r3, #0
 8008b24:	613b      	str	r3, [r7, #16]
    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 8008b26:	2300      	movs	r3, #0
 8008b28:	617b      	str	r3, [r7, #20]
    	    HAL_GPIO_Init(g_spi_config[bus].pin.csn_port, &GPIO_InitStruct);
 8008b2a:	7ffa      	ldrb	r2, [r7, #31]
 8008b2c:	491e      	ldr	r1, [pc, #120]	; (8008ba8 <spi_config_hal_setup+0x1ac>)
 8008b2e:	4613      	mov	r3, r2
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	4413      	add	r3, r2
 8008b34:	00db      	lsls	r3, r3, #3
 8008b36:	440b      	add	r3, r1
 8008b38:	331c      	adds	r3, #28
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f107 0208 	add.w	r2, r7, #8
 8008b40:	4611      	mov	r1, r2
 8008b42:	4618      	mov	r0, r3
 8008b44:	f7fb fe7e 	bl	8004844 <HAL_GPIO_Init>

        	switch (bus)
 8008b48:	7ffb      	ldrb	r3, [r7, #31]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d10c      	bne.n	8008b68 <spi_config_hal_setup+0x16c>
        	{
        		case SPI_CONFIG_BUS_WIFI:
        		    __HAL_RCC_SPI1_CLK_ENABLE();
 8008b4e:	4b17      	ldr	r3, [pc, #92]	; (8008bac <spi_config_hal_setup+0x1b0>)
 8008b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b52:	4a16      	ldr	r2, [pc, #88]	; (8008bac <spi_config_hal_setup+0x1b0>)
 8008b54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008b58:	6613      	str	r3, [r2, #96]	; 0x60
 8008b5a:	4b14      	ldr	r3, [pc, #80]	; (8008bac <spi_config_hal_setup+0x1b0>)
 8008b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008b62:	607b      	str	r3, [r7, #4]
 8008b64:	687b      	ldr	r3, [r7, #4]
        		break;
 8008b66:	e000      	b.n	8008b6a <spi_config_hal_setup+0x16e>
        		default:
				break;
 8008b68:	bf00      	nop
        	}
    	    if(HAL_SPI_Init(g_spi_config[bus].handle) != HAL_OK)
 8008b6a:	7ffa      	ldrb	r2, [r7, #31]
 8008b6c:	490e      	ldr	r1, [pc, #56]	; (8008ba8 <spi_config_hal_setup+0x1ac>)
 8008b6e:	4613      	mov	r3, r2
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	4413      	add	r3, r2
 8008b74:	00db      	lsls	r3, r3, #3
 8008b76:	440b      	add	r3, r1
 8008b78:	3324      	adds	r3, #36	; 0x24
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f7fd fb43 	bl	8006208 <HAL_SPI_Init>
 8008b82:	4603      	mov	r3, r0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d000      	beq.n	8008b8a <spi_config_hal_setup+0x18e>
    	    {
    	        /* Initialization Error */
    	        while(1);
 8008b88:	e7fe      	b.n	8008b88 <spi_config_hal_setup+0x18c>
    for (spi_config_bus_e bus = SPI_CONFIG_BUS_FIRST; bus < NUM_SPI_CONFIG_BUSES; bus++)
 8008b8a:	7ffb      	ldrb	r3, [r7, #31]
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	77fb      	strb	r3, [r7, #31]
 8008b90:	7ffb      	ldrb	r3, [r7, #31]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	f43f af38 	beq.w	8008a08 <spi_config_hal_setup+0xc>
    // TODO make this an array that gets populated so you don't need to lookup everytime..
//    for (spi_access_chip_id_e chip_id = SPI_ACCESS_CHIP_ID_FIRST; chip_id < NUM_SPI_ACCESS_CHIP_IDS; chip_id++)
//    {
//    	g_spi_chip_id_handle[chip_id] = spi_config_bus_lookup_from_chip_id(chip_id);
//    }
}
 8008b98:	bf00      	nop
 8008b9a:	bf00      	nop
 8008b9c:	3720      	adds	r7, #32
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	200000f0 	.word	0x200000f0
 8008ba8:	0800ab94 	.word	0x0800ab94
 8008bac:	40021000 	.word	0x40021000

08008bb0 <uart_access_hal_write_block>:
	}
}


void uart_access_hal_write_block(uart_handle_t ph_uart, uint8_t* data, uint16_t len)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	60b9      	str	r1, [r7, #8]
 8008bba:	4613      	mov	r3, r2
 8008bbc:	80fb      	strh	r3, [r7, #6]
	if (HAL_OK != HAL_UART_Transmit(ph_uart, data, len, 10000))
 8008bbe:	88fa      	ldrh	r2, [r7, #6]
 8008bc0:	f242 7310 	movw	r3, #10000	; 0x2710
 8008bc4:	68b9      	ldr	r1, [r7, #8]
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	f7fe ff37 	bl	8007a3a <HAL_UART_Transmit>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d000      	beq.n	8008bd4 <uart_access_hal_write_block+0x24>
	{
		while (1);
 8008bd2:	e7fe      	b.n	8008bd2 <uart_access_hal_write_block+0x22>
	}
}
 8008bd4:	bf00      	nop
 8008bd6:	3710      	adds	r7, #16
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <uart_access_hal_read_block>:
	}
}


void uart_access_hal_read_block(uart_handle_t ph_uart, uint8_t* buf, uint16_t len)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	60b9      	str	r1, [r7, #8]
 8008be6:	4613      	mov	r3, r2
 8008be8:	80fb      	strh	r3, [r7, #6]
	if (HAL_OK != HAL_UART_Receive(ph_uart, buf, len, 10000))
 8008bea:	88fa      	ldrh	r2, [r7, #6]
 8008bec:	f242 7310 	movw	r3, #10000	; 0x2710
 8008bf0:	68b9      	ldr	r1, [r7, #8]
 8008bf2:	68f8      	ldr	r0, [r7, #12]
 8008bf4:	f7fe ffb5 	bl	8007b62 <HAL_UART_Receive>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d000      	beq.n	8008c00 <uart_access_hal_read_block+0x24>
	{
		while (1);
 8008bfe:	e7fe      	b.n	8008bfe <uart_access_hal_read_block+0x22>
	}
}
 8008c00:	bf00      	nop
 8008c02:	3710      	adds	r7, #16
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <uart_config_hal_setup>:
extern const uart_access_id_e* g_uart_chip_bus_lookup[NUM_UART_CONFIG_BUSES];
extern uint16_t g_uart_num_chips_per_bus[NUM_UART_CONFIG_BUSES];


void uart_config_hal_setup(void)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b0a0      	sub	sp, #128	; 0x80
 8008c0c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStruct;

    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008c0e:	f107 030c 	add.w	r3, r7, #12
 8008c12:	225c      	movs	r2, #92	; 0x5c
 8008c14:	2100      	movs	r1, #0
 8008c16:	4618      	mov	r0, r3
 8008c18:	f001 f8c6 	bl	8009da8 <memset>

    for (uart_config_bus_e bus = UART_CONFIG_BUS_FIRST; bus < NUM_UART_CONFIG_BUSES; bus++)
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8008c22:	e0d3      	b.n	8008dcc <uart_config_hal_setup+0x1c4>
    {
    	if (g_uart_num_chips_per_bus[bus])
 8008c24:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008c28:	4a6d      	ldr	r2, [pc, #436]	; (8008de0 <uart_config_hal_setup+0x1d8>)
 8008c2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	f000 80c7 	beq.w	8008dc2 <uart_config_hal_setup+0x1ba>
    	{
    	    GPIO_InitStruct.Pin       = g_uart_config[bus].pin.rx;
 8008c34:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8008c38:	496a      	ldr	r1, [pc, #424]	; (8008de4 <uart_config_hal_setup+0x1dc>)
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	005b      	lsls	r3, r3, #1
 8008c3e:	4413      	add	r3, r2
 8008c40:	00db      	lsls	r3, r3, #3
 8008c42:	440b      	add	r3, r1
 8008c44:	881b      	ldrh	r3, [r3, #0]
 8008c46:	66bb      	str	r3, [r7, #104]	; 0x68
    	    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8008c48:	2302      	movs	r3, #2
 8008c4a:	66fb      	str	r3, [r7, #108]	; 0x6c
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	673b      	str	r3, [r7, #112]	; 0x70
    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 8008c50:	2300      	movs	r3, #0
 8008c52:	677b      	str	r3, [r7, #116]	; 0x74
    	    GPIO_InitStruct.Alternate = g_uart_config[bus].pin.rx_alt_func;
 8008c54:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8008c58:	4962      	ldr	r1, [pc, #392]	; (8008de4 <uart_config_hal_setup+0x1dc>)
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	005b      	lsls	r3, r3, #1
 8008c5e:	4413      	add	r3, r2
 8008c60:	00db      	lsls	r3, r3, #3
 8008c62:	440b      	add	r3, r1
 8008c64:	3308      	adds	r3, #8
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	67bb      	str	r3, [r7, #120]	; 0x78
    	    HAL_GPIO_Init(g_uart_config[bus].pin.rx_port, &GPIO_InitStruct);
 8008c6a:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8008c6e:	495d      	ldr	r1, [pc, #372]	; (8008de4 <uart_config_hal_setup+0x1dc>)
 8008c70:	4613      	mov	r3, r2
 8008c72:	005b      	lsls	r3, r3, #1
 8008c74:	4413      	add	r3, r2
 8008c76:	00db      	lsls	r3, r3, #3
 8008c78:	440b      	add	r3, r1
 8008c7a:	3304      	adds	r3, #4
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8008c82:	4611      	mov	r1, r2
 8008c84:	4618      	mov	r0, r3
 8008c86:	f7fb fddd 	bl	8004844 <HAL_GPIO_Init>

    	    GPIO_InitStruct.Pin       = g_uart_config[bus].pin.tx;
 8008c8a:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8008c8e:	4955      	ldr	r1, [pc, #340]	; (8008de4 <uart_config_hal_setup+0x1dc>)
 8008c90:	4613      	mov	r3, r2
 8008c92:	005b      	lsls	r3, r3, #1
 8008c94:	4413      	add	r3, r2
 8008c96:	00db      	lsls	r3, r3, #3
 8008c98:	440b      	add	r3, r1
 8008c9a:	330a      	adds	r3, #10
 8008c9c:	881b      	ldrh	r3, [r3, #0]
 8008c9e:	66bb      	str	r3, [r7, #104]	; 0x68
    	    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8008ca0:	2302      	movs	r3, #2
 8008ca2:	66fb      	str	r3, [r7, #108]	; 0x6c
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	673b      	str	r3, [r7, #112]	; 0x70
    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	677b      	str	r3, [r7, #116]	; 0x74
    	    GPIO_InitStruct.Alternate = g_uart_config[bus].pin.tx_alt_func;
 8008cac:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8008cb0:	494c      	ldr	r1, [pc, #304]	; (8008de4 <uart_config_hal_setup+0x1dc>)
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	005b      	lsls	r3, r3, #1
 8008cb6:	4413      	add	r3, r2
 8008cb8:	00db      	lsls	r3, r3, #3
 8008cba:	440b      	add	r3, r1
 8008cbc:	3310      	adds	r3, #16
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	67bb      	str	r3, [r7, #120]	; 0x78
    	    HAL_GPIO_Init(g_uart_config[bus].pin.tx_port, &GPIO_InitStruct);
 8008cc2:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8008cc6:	4947      	ldr	r1, [pc, #284]	; (8008de4 <uart_config_hal_setup+0x1dc>)
 8008cc8:	4613      	mov	r3, r2
 8008cca:	005b      	lsls	r3, r3, #1
 8008ccc:	4413      	add	r3, r2
 8008cce:	00db      	lsls	r3, r3, #3
 8008cd0:	440b      	add	r3, r1
 8008cd2:	330c      	adds	r3, #12
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8008cda:	4611      	mov	r1, r2
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f7fb fdb1 	bl	8004844 <HAL_GPIO_Init>

    	    switch (bus)
 8008ce2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d002      	beq.n	8008cf0 <uart_config_hal_setup+0xe8>
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d01b      	beq.n	8008d26 <uart_config_hal_setup+0x11e>
    	    	       //Error_Handler();
    	    	     }
    	    	    __HAL_RCC_USART1_CLK_ENABLE();
				break;
    	    	default:
    	    	break;
 8008cee:	e034      	b.n	8008d5a <uart_config_hal_setup+0x152>
    	    	    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8008cf0:	2320      	movs	r3, #32
 8008cf2:	60fb      	str	r3, [r7, #12]
    	    	    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_LSE;
 8008cf4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008cf8:	63bb      	str	r3, [r7, #56]	; 0x38
    	    	    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008cfa:	f107 030c 	add.w	r3, r7, #12
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f7fc fe66 	bl	80059d0 <HAL_RCCEx_PeriphCLKConfig>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d000      	beq.n	8008d0c <uart_config_hal_setup+0x104>
    	    	         while(1);
 8008d0a:	e7fe      	b.n	8008d0a <uart_config_hal_setup+0x102>
    	    	    __HAL_RCC_LPUART1_CLK_ENABLE();
 8008d0c:	4b36      	ldr	r3, [pc, #216]	; (8008de8 <uart_config_hal_setup+0x1e0>)
 8008d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d10:	4a35      	ldr	r2, [pc, #212]	; (8008de8 <uart_config_hal_setup+0x1e0>)
 8008d12:	f043 0301 	orr.w	r3, r3, #1
 8008d16:	65d3      	str	r3, [r2, #92]	; 0x5c
 8008d18:	4b33      	ldr	r3, [pc, #204]	; (8008de8 <uart_config_hal_setup+0x1e0>)
 8008d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d1c:	f003 0301 	and.w	r3, r3, #1
 8008d20:	60bb      	str	r3, [r7, #8]
 8008d22:	68bb      	ldr	r3, [r7, #8]
    	    	break;
 8008d24:	e019      	b.n	8008d5a <uart_config_hal_setup+0x152>
    	    	    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8008d26:	2320      	movs	r3, #32
 8008d28:	60fb      	str	r3, [r7, #12]
    	    	    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_LSE;
 8008d2a:	2303      	movs	r3, #3
 8008d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    	    	    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008d2e:	f107 030c 	add.w	r3, r7, #12
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7fc fe4c 	bl	80059d0 <HAL_RCCEx_PeriphCLKConfig>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d000      	beq.n	8008d40 <uart_config_hal_setup+0x138>
    	    	         while(1);
 8008d3e:	e7fe      	b.n	8008d3e <uart_config_hal_setup+0x136>
    	    	    __HAL_RCC_USART1_CLK_ENABLE();
 8008d40:	4b29      	ldr	r3, [pc, #164]	; (8008de8 <uart_config_hal_setup+0x1e0>)
 8008d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d44:	4a28      	ldr	r2, [pc, #160]	; (8008de8 <uart_config_hal_setup+0x1e0>)
 8008d46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008d4a:	6613      	str	r3, [r2, #96]	; 0x60
 8008d4c:	4b26      	ldr	r3, [pc, #152]	; (8008de8 <uart_config_hal_setup+0x1e0>)
 8008d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d54:	607b      	str	r3, [r7, #4]
 8008d56:	687b      	ldr	r3, [r7, #4]
				break;
 8008d58:	bf00      	nop
    	    }

    	    HAL_NVIC_SetPriority(g_uart_config[bus].irqn, 0, 1);
 8008d5a:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8008d5e:	4921      	ldr	r1, [pc, #132]	; (8008de4 <uart_config_hal_setup+0x1dc>)
 8008d60:	4613      	mov	r3, r2
 8008d62:	005b      	lsls	r3, r3, #1
 8008d64:	4413      	add	r3, r2
 8008d66:	00db      	lsls	r3, r3, #3
 8008d68:	440b      	add	r3, r1
 8008d6a:	3314      	adds	r3, #20
 8008d6c:	f993 3000 	ldrsb.w	r3, [r3]
 8008d70:	2201      	movs	r2, #1
 8008d72:	2100      	movs	r1, #0
 8008d74:	4618      	mov	r0, r3
 8008d76:	f7fb faa0 	bl	80042ba <HAL_NVIC_SetPriority>
    	    HAL_NVIC_EnableIRQ(g_uart_config[bus].irqn);
 8008d7a:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8008d7e:	4919      	ldr	r1, [pc, #100]	; (8008de4 <uart_config_hal_setup+0x1dc>)
 8008d80:	4613      	mov	r3, r2
 8008d82:	005b      	lsls	r3, r3, #1
 8008d84:	4413      	add	r3, r2
 8008d86:	00db      	lsls	r3, r3, #3
 8008d88:	440b      	add	r3, r1
 8008d8a:	3314      	adds	r3, #20
 8008d8c:	f993 3000 	ldrsb.w	r3, [r3]
 8008d90:	4618      	mov	r0, r3
 8008d92:	f7fb faae 	bl	80042f2 <HAL_NVIC_EnableIRQ>

    	    if(HAL_UART_DeInit(&g_uart_handle_config[bus]) != HAL_OK)
 8008d96:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	015b      	lsls	r3, r3, #5
 8008d9e:	4413      	add	r3, r2
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	4a12      	ldr	r2, [pc, #72]	; (8008dec <uart_config_hal_setup+0x1e4>)
 8008da4:	4413      	add	r3, r2
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7fe fdfa 	bl	80079a0 <HAL_UART_DeInit>
    	    {
    	        //Error_Handler();
    	    }
    	    if(HAL_UART_Init(&g_uart_handle_config[bus]) != HAL_OK)
 8008dac:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8008db0:	4613      	mov	r3, r2
 8008db2:	015b      	lsls	r3, r3, #5
 8008db4:	4413      	add	r3, r2
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	4a0c      	ldr	r2, [pc, #48]	; (8008dec <uart_config_hal_setup+0x1e4>)
 8008dba:	4413      	add	r3, r2
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f7fe fda1 	bl	8007904 <HAL_UART_Init>
    for (uart_config_bus_e bus = UART_CONFIG_BUS_FIRST; bus < NUM_UART_CONFIG_BUSES; bus++)
 8008dc2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8008dcc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	f67f af27 	bls.w	8008c24 <uart_config_hal_setup+0x1c>
    	        //Error_Handler();
    	    }
    	}
    }

}
 8008dd6:	bf00      	nop
 8008dd8:	bf00      	nop
 8008dda:	3780      	adds	r7, #128	; 0x80
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}
 8008de0:	200001fc 	.word	0x200001fc
 8008de4:	0800abbc 	.word	0x0800abbc
 8008de8:	40021000 	.word	0x40021000
 8008dec:	200000f4 	.word	0x200000f4

08008df0 <uart_config_esp8266_handle>:
	return &g_uart_handle_config[UART_CONFIG_BUS_HOST];
}


uart_handle_t uart_config_esp8266_handle(void)
{
 8008df0:	b480      	push	{r7}
 8008df2:	af00      	add	r7, sp, #0
	return &g_uart_handle_config[UART_CONFIG_BUS_ESP8266];
 8008df4:	4b02      	ldr	r3, [pc, #8]	; (8008e00 <uart_config_esp8266_handle+0x10>)
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr
 8008e00:	20000178 	.word	0x20000178

08008e04 <HAL_Set_DMA_Callbacks>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);


// Function below added by SRW
static void HAL_Set_DMA_Callbacks(void)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	af00      	add	r7, sp, #0
    HAL_DMA_RegisterCallback(&hdma_tim1_ch1, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8008e08:	4a0d      	ldr	r2, [pc, #52]	; (8008e40 <HAL_Set_DMA_Callbacks+0x3c>)
 8008e0a:	2100      	movs	r1, #0
 8008e0c:	480d      	ldr	r0, [pc, #52]	; (8008e44 <HAL_Set_DMA_Callbacks+0x40>)
 8008e0e:	f7fb fca1 	bl	8004754 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim1_ch2, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8008e12:	4a0b      	ldr	r2, [pc, #44]	; (8008e40 <HAL_Set_DMA_Callbacks+0x3c>)
 8008e14:	2100      	movs	r1, #0
 8008e16:	480c      	ldr	r0, [pc, #48]	; (8008e48 <HAL_Set_DMA_Callbacks+0x44>)
 8008e18:	f7fb fc9c 	bl	8004754 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim1_ch3, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8008e1c:	4a08      	ldr	r2, [pc, #32]	; (8008e40 <HAL_Set_DMA_Callbacks+0x3c>)
 8008e1e:	2100      	movs	r1, #0
 8008e20:	480a      	ldr	r0, [pc, #40]	; (8008e4c <HAL_Set_DMA_Callbacks+0x48>)
 8008e22:	f7fb fc97 	bl	8004754 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim15_ch1_up_trig_com, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8008e26:	4a06      	ldr	r2, [pc, #24]	; (8008e40 <HAL_Set_DMA_Callbacks+0x3c>)
 8008e28:	2100      	movs	r1, #0
 8008e2a:	4809      	ldr	r0, [pc, #36]	; (8008e50 <HAL_Set_DMA_Callbacks+0x4c>)
 8008e2c:	f7fb fc92 	bl	8004754 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim16_ch1_up, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8008e30:	4a03      	ldr	r2, [pc, #12]	; (8008e40 <HAL_Set_DMA_Callbacks+0x3c>)
 8008e32:	2100      	movs	r1, #0
 8008e34:	4807      	ldr	r0, [pc, #28]	; (8008e54 <HAL_Set_DMA_Callbacks+0x50>)
 8008e36:	f7fb fc8d 	bl	8004754 <HAL_DMA_RegisterCallback>
}
 8008e3a:	bf00      	nop
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	0800946b 	.word	0x0800946b
 8008e44:	200023b8 	.word	0x200023b8
 8008e48:	20002400 	.word	0x20002400
 8008e4c:	20002448 	.word	0x20002448
 8008e50:	20002490 	.word	0x20002490
 8008e54:	200024d8 	.word	0x200024d8

08008e58 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
  PWR_PVDTypeDef sConfigPVD = {0};
 8008e5e:	f107 0308 	add.w	r3, r7, #8
 8008e62:	2200      	movs	r2, #0
 8008e64:	601a      	str	r2, [r3, #0]
 8008e66:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008e68:	4b13      	ldr	r3, [pc, #76]	; (8008eb8 <HAL_MspInit+0x60>)
 8008e6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e6c:	4a12      	ldr	r2, [pc, #72]	; (8008eb8 <HAL_MspInit+0x60>)
 8008e6e:	f043 0301 	orr.w	r3, r3, #1
 8008e72:	6613      	str	r3, [r2, #96]	; 0x60
 8008e74:	4b10      	ldr	r3, [pc, #64]	; (8008eb8 <HAL_MspInit+0x60>)
 8008e76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e78:	f003 0301 	and.w	r3, r3, #1
 8008e7c:	607b      	str	r3, [r7, #4]
 8008e7e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008e80:	4b0d      	ldr	r3, [pc, #52]	; (8008eb8 <HAL_MspInit+0x60>)
 8008e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e84:	4a0c      	ldr	r2, [pc, #48]	; (8008eb8 <HAL_MspInit+0x60>)
 8008e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e8a:	6593      	str	r3, [r2, #88]	; 0x58
 8008e8c:	4b0a      	ldr	r3, [pc, #40]	; (8008eb8 <HAL_MspInit+0x60>)
 8008e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e94:	603b      	str	r3, [r7, #0]
 8008e96:	683b      	ldr	r3, [r7, #0]

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8008ea0:	f107 0308 	add.w	r3, r7, #8
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f7fb fe87 	bl	8004bb8 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8008eaa:	f7fb fee5 	bl	8004c78 <HAL_PWR_EnablePVD>
}
 8008eae:	bf00      	nop
 8008eb0:	3710      	adds	r7, #16
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	bf00      	nop
 8008eb8:	40021000 	.word	0x40021000

08008ebc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b083      	sub	sp, #12
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a08      	ldr	r2, [pc, #32]	; (8008eec <HAL_RTC_MspInit+0x30>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d107      	bne.n	8008ede <HAL_RTC_MspInit+0x22>
  {
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8008ece:	4b08      	ldr	r3, [pc, #32]	; (8008ef0 <HAL_RTC_MspInit+0x34>)
 8008ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ed4:	4a06      	ldr	r2, [pc, #24]	; (8008ef0 <HAL_RTC_MspInit+0x34>)
 8008ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008eda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

}
 8008ede:	bf00      	nop
 8008ee0:	370c      	adds	r7, #12
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr
 8008eea:	bf00      	nop
 8008eec:	40002800 	.word	0x40002800
 8008ef0:	40021000 	.word	0x40021000

08008ef4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a6e      	ldr	r2, [pc, #440]	; (80090bc <HAL_TIM_Base_MspInit+0x1c8>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	f040 8091 	bne.w	800902a <HAL_TIM_Base_MspInit+0x136>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008f08:	4b6d      	ldr	r3, [pc, #436]	; (80090c0 <HAL_TIM_Base_MspInit+0x1cc>)
 8008f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f0c:	4a6c      	ldr	r2, [pc, #432]	; (80090c0 <HAL_TIM_Base_MspInit+0x1cc>)
 8008f0e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008f12:	6613      	str	r3, [r2, #96]	; 0x60
 8008f14:	4b6a      	ldr	r3, [pc, #424]	; (80090c0 <HAL_TIM_Base_MspInit+0x1cc>)
 8008f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f1c:	60fb      	str	r3, [r7, #12]
 8008f1e:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8008f20:	4b68      	ldr	r3, [pc, #416]	; (80090c4 <HAL_TIM_Base_MspInit+0x1d0>)
 8008f22:	4a69      	ldr	r2, [pc, #420]	; (80090c8 <HAL_TIM_Base_MspInit+0x1d4>)
 8008f24:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 8008f26:	4b67      	ldr	r3, [pc, #412]	; (80090c4 <HAL_TIM_Base_MspInit+0x1d0>)
 8008f28:	2207      	movs	r2, #7
 8008f2a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008f2c:	4b65      	ldr	r3, [pc, #404]	; (80090c4 <HAL_TIM_Base_MspInit+0x1d0>)
 8008f2e:	2210      	movs	r2, #16
 8008f30:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008f32:	4b64      	ldr	r3, [pc, #400]	; (80090c4 <HAL_TIM_Base_MspInit+0x1d0>)
 8008f34:	2200      	movs	r2, #0
 8008f36:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8008f38:	4b62      	ldr	r3, [pc, #392]	; (80090c4 <HAL_TIM_Base_MspInit+0x1d0>)
 8008f3a:	2280      	movs	r2, #128	; 0x80
 8008f3c:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008f3e:	4b61      	ldr	r3, [pc, #388]	; (80090c4 <HAL_TIM_Base_MspInit+0x1d0>)
 8008f40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f44:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008f46:	4b5f      	ldr	r3, [pc, #380]	; (80090c4 <HAL_TIM_Base_MspInit+0x1d0>)
 8008f48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008f4c:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8008f4e:	4b5d      	ldr	r3, [pc, #372]	; (80090c4 <HAL_TIM_Base_MspInit+0x1d0>)
 8008f50:	2200      	movs	r2, #0
 8008f52:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008f54:	4b5b      	ldr	r3, [pc, #364]	; (80090c4 <HAL_TIM_Base_MspInit+0x1d0>)
 8008f56:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8008f5a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8008f5c:	4859      	ldr	r0, [pc, #356]	; (80090c4 <HAL_TIM_Base_MspInit+0x1d0>)
 8008f5e:	f7fb f9f1 	bl	8004344 <HAL_DMA_Init>
 8008f62:	4603      	mov	r3, r0
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d001      	beq.n	8008f6c <HAL_TIM_Base_MspInit+0x78>
    {
      Error_Handler();
 8008f68:	f7ff fd43 	bl	80089f2 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	4a55      	ldr	r2, [pc, #340]	; (80090c4 <HAL_TIM_Base_MspInit+0x1d0>)
 8008f70:	625a      	str	r2, [r3, #36]	; 0x24
 8008f72:	4a54      	ldr	r2, [pc, #336]	; (80090c4 <HAL_TIM_Base_MspInit+0x1d0>)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel3;
 8008f78:	4b54      	ldr	r3, [pc, #336]	; (80090cc <HAL_TIM_Base_MspInit+0x1d8>)
 8008f7a:	4a55      	ldr	r2, [pc, #340]	; (80090d0 <HAL_TIM_Base_MspInit+0x1dc>)
 8008f7c:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_7;
 8008f7e:	4b53      	ldr	r3, [pc, #332]	; (80090cc <HAL_TIM_Base_MspInit+0x1d8>)
 8008f80:	2207      	movs	r2, #7
 8008f82:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008f84:	4b51      	ldr	r3, [pc, #324]	; (80090cc <HAL_TIM_Base_MspInit+0x1d8>)
 8008f86:	2210      	movs	r2, #16
 8008f88:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8008f8a:	4b50      	ldr	r3, [pc, #320]	; (80090cc <HAL_TIM_Base_MspInit+0x1d8>)
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8008f90:	4b4e      	ldr	r3, [pc, #312]	; (80090cc <HAL_TIM_Base_MspInit+0x1d8>)
 8008f92:	2280      	movs	r2, #128	; 0x80
 8008f94:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008f96:	4b4d      	ldr	r3, [pc, #308]	; (80090cc <HAL_TIM_Base_MspInit+0x1d8>)
 8008f98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f9c:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008f9e:	4b4b      	ldr	r3, [pc, #300]	; (80090cc <HAL_TIM_Base_MspInit+0x1d8>)
 8008fa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008fa4:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 8008fa6:	4b49      	ldr	r3, [pc, #292]	; (80090cc <HAL_TIM_Base_MspInit+0x1d8>)
 8008fa8:	2200      	movs	r2, #0
 8008faa:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008fac:	4b47      	ldr	r3, [pc, #284]	; (80090cc <HAL_TIM_Base_MspInit+0x1d8>)
 8008fae:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8008fb2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8008fb4:	4845      	ldr	r0, [pc, #276]	; (80090cc <HAL_TIM_Base_MspInit+0x1d8>)
 8008fb6:	f7fb f9c5 	bl	8004344 <HAL_DMA_Init>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d001      	beq.n	8008fc4 <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 8008fc0:	f7ff fd17 	bl	80089f2 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	4a41      	ldr	r2, [pc, #260]	; (80090cc <HAL_TIM_Base_MspInit+0x1d8>)
 8008fc8:	629a      	str	r2, [r3, #40]	; 0x28
 8008fca:	4a40      	ldr	r2, [pc, #256]	; (80090cc <HAL_TIM_Base_MspInit+0x1d8>)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel7;
 8008fd0:	4b40      	ldr	r3, [pc, #256]	; (80090d4 <HAL_TIM_Base_MspInit+0x1e0>)
 8008fd2:	4a41      	ldr	r2, [pc, #260]	; (80090d8 <HAL_TIM_Base_MspInit+0x1e4>)
 8008fd4:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Request = DMA_REQUEST_7;
 8008fd6:	4b3f      	ldr	r3, [pc, #252]	; (80090d4 <HAL_TIM_Base_MspInit+0x1e0>)
 8008fd8:	2207      	movs	r2, #7
 8008fda:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008fdc:	4b3d      	ldr	r3, [pc, #244]	; (80090d4 <HAL_TIM_Base_MspInit+0x1e0>)
 8008fde:	2210      	movs	r2, #16
 8008fe0:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8008fe2:	4b3c      	ldr	r3, [pc, #240]	; (80090d4 <HAL_TIM_Base_MspInit+0x1e0>)
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8008fe8:	4b3a      	ldr	r3, [pc, #232]	; (80090d4 <HAL_TIM_Base_MspInit+0x1e0>)
 8008fea:	2280      	movs	r2, #128	; 0x80
 8008fec:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008fee:	4b39      	ldr	r3, [pc, #228]	; (80090d4 <HAL_TIM_Base_MspInit+0x1e0>)
 8008ff0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008ff4:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008ff6:	4b37      	ldr	r3, [pc, #220]	; (80090d4 <HAL_TIM_Base_MspInit+0x1e0>)
 8008ff8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008ffc:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 8008ffe:	4b35      	ldr	r3, [pc, #212]	; (80090d4 <HAL_TIM_Base_MspInit+0x1e0>)
 8009000:	2200      	movs	r2, #0
 8009002:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8009004:	4b33      	ldr	r3, [pc, #204]	; (80090d4 <HAL_TIM_Base_MspInit+0x1e0>)
 8009006:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800900a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 800900c:	4831      	ldr	r0, [pc, #196]	; (80090d4 <HAL_TIM_Base_MspInit+0x1e0>)
 800900e:	f7fb f999 	bl	8004344 <HAL_DMA_Init>
 8009012:	4603      	mov	r3, r0
 8009014:	2b00      	cmp	r3, #0
 8009016:	d001      	beq.n	800901c <HAL_TIM_Base_MspInit+0x128>
    {
      Error_Handler();
 8009018:	f7ff fceb 	bl	80089f2 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	4a2d      	ldr	r2, [pc, #180]	; (80090d4 <HAL_TIM_Base_MspInit+0x1e0>)
 8009020:	62da      	str	r2, [r3, #44]	; 0x2c
 8009022:	4a2c      	ldr	r2, [pc, #176]	; (80090d4 <HAL_TIM_Base_MspInit+0x1e0>)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6293      	str	r3, [r2, #40]	; 0x28
 8009028:	e041      	b.n	80090ae <HAL_TIM_Base_MspInit+0x1ba>
  }
  else if(htim_base->Instance==TIM16)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a2b      	ldr	r2, [pc, #172]	; (80090dc <HAL_TIM_Base_MspInit+0x1e8>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d13c      	bne.n	80090ae <HAL_TIM_Base_MspInit+0x1ba>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8009034:	4b22      	ldr	r3, [pc, #136]	; (80090c0 <HAL_TIM_Base_MspInit+0x1cc>)
 8009036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009038:	4a21      	ldr	r2, [pc, #132]	; (80090c0 <HAL_TIM_Base_MspInit+0x1cc>)
 800903a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800903e:	6613      	str	r3, [r2, #96]	; 0x60
 8009040:	4b1f      	ldr	r3, [pc, #124]	; (80090c0 <HAL_TIM_Base_MspInit+0x1cc>)
 8009042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009048:	60bb      	str	r3, [r7, #8]
 800904a:	68bb      	ldr	r3, [r7, #8]

    /* TIM16 DMA Init */
    /* TIM16_CH1_UP Init */
    hdma_tim16_ch1_up.Instance = DMA1_Channel6;
 800904c:	4b24      	ldr	r3, [pc, #144]	; (80090e0 <HAL_TIM_Base_MspInit+0x1ec>)
 800904e:	4a25      	ldr	r2, [pc, #148]	; (80090e4 <HAL_TIM_Base_MspInit+0x1f0>)
 8009050:	601a      	str	r2, [r3, #0]
    hdma_tim16_ch1_up.Init.Request = DMA_REQUEST_4;
 8009052:	4b23      	ldr	r3, [pc, #140]	; (80090e0 <HAL_TIM_Base_MspInit+0x1ec>)
 8009054:	2204      	movs	r2, #4
 8009056:	605a      	str	r2, [r3, #4]
    hdma_tim16_ch1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009058:	4b21      	ldr	r3, [pc, #132]	; (80090e0 <HAL_TIM_Base_MspInit+0x1ec>)
 800905a:	2210      	movs	r2, #16
 800905c:	609a      	str	r2, [r3, #8]
    hdma_tim16_ch1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800905e:	4b20      	ldr	r3, [pc, #128]	; (80090e0 <HAL_TIM_Base_MspInit+0x1ec>)
 8009060:	2200      	movs	r2, #0
 8009062:	60da      	str	r2, [r3, #12]
    hdma_tim16_ch1_up.Init.MemInc = DMA_MINC_ENABLE;
 8009064:	4b1e      	ldr	r3, [pc, #120]	; (80090e0 <HAL_TIM_Base_MspInit+0x1ec>)
 8009066:	2280      	movs	r2, #128	; 0x80
 8009068:	611a      	str	r2, [r3, #16]
    hdma_tim16_ch1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800906a:	4b1d      	ldr	r3, [pc, #116]	; (80090e0 <HAL_TIM_Base_MspInit+0x1ec>)
 800906c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009070:	615a      	str	r2, [r3, #20]
    hdma_tim16_ch1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009072:	4b1b      	ldr	r3, [pc, #108]	; (80090e0 <HAL_TIM_Base_MspInit+0x1ec>)
 8009074:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009078:	619a      	str	r2, [r3, #24]
    hdma_tim16_ch1_up.Init.Mode = DMA_NORMAL;
 800907a:	4b19      	ldr	r3, [pc, #100]	; (80090e0 <HAL_TIM_Base_MspInit+0x1ec>)
 800907c:	2200      	movs	r2, #0
 800907e:	61da      	str	r2, [r3, #28]
    hdma_tim16_ch1_up.Init.Priority = DMA_PRIORITY_LOW;
 8009080:	4b17      	ldr	r3, [pc, #92]	; (80090e0 <HAL_TIM_Base_MspInit+0x1ec>)
 8009082:	2200      	movs	r2, #0
 8009084:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim16_ch1_up) != HAL_OK)
 8009086:	4816      	ldr	r0, [pc, #88]	; (80090e0 <HAL_TIM_Base_MspInit+0x1ec>)
 8009088:	f7fb f95c 	bl	8004344 <HAL_DMA_Init>
 800908c:	4603      	mov	r3, r0
 800908e:	2b00      	cmp	r3, #0
 8009090:	d001      	beq.n	8009096 <HAL_TIM_Base_MspInit+0x1a2>
    {
      Error_Handler();
 8009092:	f7ff fcae 	bl	80089f2 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim16_ch1_up);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	4a11      	ldr	r2, [pc, #68]	; (80090e0 <HAL_TIM_Base_MspInit+0x1ec>)
 800909a:	625a      	str	r2, [r3, #36]	; 0x24
 800909c:	4a10      	ldr	r2, [pc, #64]	; (80090e0 <HAL_TIM_Base_MspInit+0x1ec>)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim16_ch1_up);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	4a0e      	ldr	r2, [pc, #56]	; (80090e0 <HAL_TIM_Base_MspInit+0x1ec>)
 80090a6:	621a      	str	r2, [r3, #32]
 80090a8:	4a0d      	ldr	r2, [pc, #52]	; (80090e0 <HAL_TIM_Base_MspInit+0x1ec>)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6293      	str	r3, [r2, #40]	; 0x28
  }
  HAL_Set_DMA_Callbacks();
 80090ae:	f7ff fea9 	bl	8008e04 <HAL_Set_DMA_Callbacks>
}
 80090b2:	bf00      	nop
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	40012c00 	.word	0x40012c00
 80090c0:	40021000 	.word	0x40021000
 80090c4:	200023b8 	.word	0x200023b8
 80090c8:	4002001c 	.word	0x4002001c
 80090cc:	20002400 	.word	0x20002400
 80090d0:	40020030 	.word	0x40020030
 80090d4:	20002448 	.word	0x20002448
 80090d8:	40020080 	.word	0x40020080
 80090dc:	40014400 	.word	0x40014400
 80090e0:	200024d8 	.word	0x200024d8
 80090e4:	4002006c 	.word	0x4002006c

080090e8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a28      	ldr	r2, [pc, #160]	; (8009198 <HAL_TIM_PWM_MspInit+0xb0>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d149      	bne.n	800918e <HAL_TIM_PWM_MspInit+0xa6>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80090fa:	4b28      	ldr	r3, [pc, #160]	; (800919c <HAL_TIM_PWM_MspInit+0xb4>)
 80090fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090fe:	4a27      	ldr	r2, [pc, #156]	; (800919c <HAL_TIM_PWM_MspInit+0xb4>)
 8009100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009104:	6613      	str	r3, [r2, #96]	; 0x60
 8009106:	4b25      	ldr	r3, [pc, #148]	; (800919c <HAL_TIM_PWM_MspInit+0xb4>)
 8009108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800910a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800910e:	60fb      	str	r3, [r7, #12]
 8009110:	68fb      	ldr	r3, [r7, #12]

    /* TIM15 DMA Init */
    /* TIM15_CH1_UP_TRIG_COM Init */
    hdma_tim15_ch1_up_trig_com.Instance = DMA1_Channel5;
 8009112:	4b23      	ldr	r3, [pc, #140]	; (80091a0 <HAL_TIM_PWM_MspInit+0xb8>)
 8009114:	4a23      	ldr	r2, [pc, #140]	; (80091a4 <HAL_TIM_PWM_MspInit+0xbc>)
 8009116:	601a      	str	r2, [r3, #0]
    hdma_tim15_ch1_up_trig_com.Init.Request = DMA_REQUEST_7;
 8009118:	4b21      	ldr	r3, [pc, #132]	; (80091a0 <HAL_TIM_PWM_MspInit+0xb8>)
 800911a:	2207      	movs	r2, #7
 800911c:	605a      	str	r2, [r3, #4]
    hdma_tim15_ch1_up_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800911e:	4b20      	ldr	r3, [pc, #128]	; (80091a0 <HAL_TIM_PWM_MspInit+0xb8>)
 8009120:	2210      	movs	r2, #16
 8009122:	609a      	str	r2, [r3, #8]
    hdma_tim15_ch1_up_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8009124:	4b1e      	ldr	r3, [pc, #120]	; (80091a0 <HAL_TIM_PWM_MspInit+0xb8>)
 8009126:	2200      	movs	r2, #0
 8009128:	60da      	str	r2, [r3, #12]
    hdma_tim15_ch1_up_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 800912a:	4b1d      	ldr	r3, [pc, #116]	; (80091a0 <HAL_TIM_PWM_MspInit+0xb8>)
 800912c:	2280      	movs	r2, #128	; 0x80
 800912e:	611a      	str	r2, [r3, #16]
    hdma_tim15_ch1_up_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009130:	4b1b      	ldr	r3, [pc, #108]	; (80091a0 <HAL_TIM_PWM_MspInit+0xb8>)
 8009132:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009136:	615a      	str	r2, [r3, #20]
    hdma_tim15_ch1_up_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009138:	4b19      	ldr	r3, [pc, #100]	; (80091a0 <HAL_TIM_PWM_MspInit+0xb8>)
 800913a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800913e:	619a      	str	r2, [r3, #24]
    hdma_tim15_ch1_up_trig_com.Init.Mode = DMA_NORMAL;
 8009140:	4b17      	ldr	r3, [pc, #92]	; (80091a0 <HAL_TIM_PWM_MspInit+0xb8>)
 8009142:	2200      	movs	r2, #0
 8009144:	61da      	str	r2, [r3, #28]
    hdma_tim15_ch1_up_trig_com.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8009146:	4b16      	ldr	r3, [pc, #88]	; (80091a0 <HAL_TIM_PWM_MspInit+0xb8>)
 8009148:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800914c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim15_ch1_up_trig_com) != HAL_OK)
 800914e:	4814      	ldr	r0, [pc, #80]	; (80091a0 <HAL_TIM_PWM_MspInit+0xb8>)
 8009150:	f7fb f8f8 	bl	8004344 <HAL_DMA_Init>
 8009154:	4603      	mov	r3, r0
 8009156:	2b00      	cmp	r3, #0
 8009158:	d001      	beq.n	800915e <HAL_TIM_PWM_MspInit+0x76>
    {
      Error_Handler();
 800915a:	f7ff fc4a 	bl	80089f2 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim15_ch1_up_trig_com);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	4a0f      	ldr	r2, [pc, #60]	; (80091a0 <HAL_TIM_PWM_MspInit+0xb8>)
 8009162:	625a      	str	r2, [r3, #36]	; 0x24
 8009164:	4a0e      	ldr	r2, [pc, #56]	; (80091a0 <HAL_TIM_PWM_MspInit+0xb8>)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim15_ch1_up_trig_com);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	4a0c      	ldr	r2, [pc, #48]	; (80091a0 <HAL_TIM_PWM_MspInit+0xb8>)
 800916e:	621a      	str	r2, [r3, #32]
 8009170:	4a0b      	ldr	r2, [pc, #44]	; (80091a0 <HAL_TIM_PWM_MspInit+0xb8>)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim15_ch1_up_trig_com);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	4a09      	ldr	r2, [pc, #36]	; (80091a0 <HAL_TIM_PWM_MspInit+0xb8>)
 800917a:	639a      	str	r2, [r3, #56]	; 0x38
 800917c:	4a08      	ldr	r2, [pc, #32]	; (80091a0 <HAL_TIM_PWM_MspInit+0xb8>)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim15_ch1_up_trig_com);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	4a06      	ldr	r2, [pc, #24]	; (80091a0 <HAL_TIM_PWM_MspInit+0xb8>)
 8009186:	635a      	str	r2, [r3, #52]	; 0x34
 8009188:	4a05      	ldr	r2, [pc, #20]	; (80091a0 <HAL_TIM_PWM_MspInit+0xb8>)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 800918e:	bf00      	nop
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop
 8009198:	40014000 	.word	0x40014000
 800919c:	40021000 	.word	0x40021000
 80091a0:	20002490 	.word	0x20002490
 80091a4:	40020058 	.word	0x40020058

080091a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 1; iii++)
 80091ae:	2300      	movs	r3, #0
 80091b0:	71fb      	strb	r3, [r7, #7]
 80091b2:	e005      	b.n	80091c0 <NMI_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 80091b4:	2064      	movs	r0, #100	; 0x64
 80091b6:	f7fa ff39 	bl	800402c <HAL_Delay>
        for (uint8_t iii = 0; iii < 1; iii++)
 80091ba:	79fb      	ldrb	r3, [r7, #7]
 80091bc:	3301      	adds	r3, #1
 80091be:	71fb      	strb	r3, [r7, #7]
 80091c0:	79fb      	ldrb	r3, [r7, #7]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d0f6      	beq.n	80091b4 <NMI_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 80091c6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80091ca:	f7fa ff2f 	bl	800402c <HAL_Delay>
        for (uint8_t iii = 0; iii < 1; iii++)
 80091ce:	e7ee      	b.n	80091ae <NMI_Handler+0x6>

080091d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b082      	sub	sp, #8
 80091d4:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 2; iii++)
 80091d6:	2300      	movs	r3, #0
 80091d8:	71fb      	strb	r3, [r7, #7]
 80091da:	e005      	b.n	80091e8 <HardFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 80091dc:	2064      	movs	r0, #100	; 0x64
 80091de:	f7fa ff25 	bl	800402c <HAL_Delay>
        for (uint8_t iii = 0; iii < 2; iii++)
 80091e2:	79fb      	ldrb	r3, [r7, #7]
 80091e4:	3301      	adds	r3, #1
 80091e6:	71fb      	strb	r3, [r7, #7]
 80091e8:	79fb      	ldrb	r3, [r7, #7]
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d9f6      	bls.n	80091dc <HardFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 80091ee:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80091f2:	f7fa ff1b 	bl	800402c <HAL_Delay>
        for (uint8_t iii = 0; iii < 2; iii++)
 80091f6:	e7ee      	b.n	80091d6 <HardFault_Handler+0x6>

080091f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 3; iii++)
 80091fe:	2300      	movs	r3, #0
 8009200:	71fb      	strb	r3, [r7, #7]
 8009202:	e005      	b.n	8009210 <MemManage_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 8009204:	2064      	movs	r0, #100	; 0x64
 8009206:	f7fa ff11 	bl	800402c <HAL_Delay>
        for (uint8_t iii = 0; iii < 3; iii++)
 800920a:	79fb      	ldrb	r3, [r7, #7]
 800920c:	3301      	adds	r3, #1
 800920e:	71fb      	strb	r3, [r7, #7]
 8009210:	79fb      	ldrb	r3, [r7, #7]
 8009212:	2b02      	cmp	r3, #2
 8009214:	d9f6      	bls.n	8009204 <MemManage_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 8009216:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800921a:	f7fa ff07 	bl	800402c <HAL_Delay>
        for (uint8_t iii = 0; iii < 3; iii++)
 800921e:	e7ee      	b.n	80091fe <MemManage_Handler+0x6>

08009220 <BusFault_Handler>:
}
/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 4; iii++)
 8009226:	2300      	movs	r3, #0
 8009228:	71fb      	strb	r3, [r7, #7]
 800922a:	e005      	b.n	8009238 <BusFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800922c:	2064      	movs	r0, #100	; 0x64
 800922e:	f7fa fefd 	bl	800402c <HAL_Delay>
        for (uint8_t iii = 0; iii < 4; iii++)
 8009232:	79fb      	ldrb	r3, [r7, #7]
 8009234:	3301      	adds	r3, #1
 8009236:	71fb      	strb	r3, [r7, #7]
 8009238:	79fb      	ldrb	r3, [r7, #7]
 800923a:	2b03      	cmp	r3, #3
 800923c:	d9f6      	bls.n	800922c <BusFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800923e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8009242:	f7fa fef3 	bl	800402c <HAL_Delay>
        for (uint8_t iii = 0; iii < 4; iii++)
 8009246:	e7ee      	b.n	8009226 <BusFault_Handler+0x6>

08009248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 5; iii++)
 800924e:	2300      	movs	r3, #0
 8009250:	71fb      	strb	r3, [r7, #7]
 8009252:	e005      	b.n	8009260 <UsageFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 8009254:	2064      	movs	r0, #100	; 0x64
 8009256:	f7fa fee9 	bl	800402c <HAL_Delay>
        for (uint8_t iii = 0; iii < 5; iii++)
 800925a:	79fb      	ldrb	r3, [r7, #7]
 800925c:	3301      	adds	r3, #1
 800925e:	71fb      	strb	r3, [r7, #7]
 8009260:	79fb      	ldrb	r3, [r7, #7]
 8009262:	2b04      	cmp	r3, #4
 8009264:	d9f6      	bls.n	8009254 <UsageFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 8009266:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800926a:	f7fa fedf 	bl	800402c <HAL_Delay>
        for (uint8_t iii = 0; iii < 5; iii++)
 800926e:	e7ee      	b.n	800924e <UsageFault_Handler+0x6>

08009270 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009270:	b480      	push	{r7}
 8009272:	af00      	add	r7, sp, #0
}
 8009274:	bf00      	nop
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr
	...

08009280 <EXTI0_IRQHandler>:
volatile uint32_t d_passes = 0;
/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8009280:	b590      	push	{r4, r7, lr}
 8009282:	b085      	sub	sp, #20
 8009284:	af02      	add	r7, sp, #8
    // D is pause
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_D_PIN;
 8009286:	2301      	movs	r3, #1
 8009288:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_D;
 800928a:	2303      	movs	r3, #3
 800928c:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_D_IRQ;
 800928e:	2306      	movs	r3, #6
 8009290:	713b      	strb	r3, [r7, #4]
    d_passes++;
 8009292:	4b15      	ldr	r3, [pc, #84]	; (80092e8 <EXTI0_IRQHandler+0x68>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	3301      	adds	r3, #1
 8009298:	4a13      	ldr	r2, [pc, #76]	; (80092e8 <EXTI0_IRQHandler+0x68>)
 800929a:	6013      	str	r3, [r2, #0]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800929c:	88fb      	ldrh	r3, [r7, #6]
 800929e:	4618      	mov	r0, r3
 80092a0:	f7fb fc62 	bl	8004b68 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 80092a4:	797a      	ldrb	r2, [r7, #5]
 80092a6:	797b      	ldrb	r3, [r7, #5]
 80092a8:	4910      	ldr	r1, [pc, #64]	; (80092ec <EXTI0_IRQHandler+0x6c>)
 80092aa:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 80092ae:	490f      	ldr	r1, [pc, #60]	; (80092ec <EXTI0_IRQHandler+0x6c>)
 80092b0:	00db      	lsls	r3, r3, #3
 80092b2:	440b      	add	r3, r1
 80092b4:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 80092b6:	797c      	ldrb	r4, [r7, #5]
 80092b8:	f7f9 f980 	bl	80025bc <xTaskGetTickCountFromISR>
 80092bc:	4603      	mov	r3, r0
 80092be:	4a0b      	ldr	r2, [pc, #44]	; (80092ec <EXTI0_IRQHandler+0x6c>)
 80092c0:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 80092c4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80092c8:	4618      	mov	r0, r3
 80092ca:	f7fb f820 	bl	800430e <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 80092ce:	4b08      	ldr	r3, [pc, #32]	; (80092f0 <EXTI0_IRQHandler+0x70>)
 80092d0:	6818      	ldr	r0, [r3, #0]
 80092d2:	7979      	ldrb	r1, [r7, #5]
 80092d4:	463b      	mov	r3, r7
 80092d6:	9300      	str	r3, [sp, #0]
 80092d8:	2300      	movs	r3, #0
 80092da:	2203      	movs	r2, #3
 80092dc:	f7f9 fd8c 	bl	8002df8 <xTaskGenericNotifyFromISR>
}
 80092e0:	bf00      	nop
 80092e2:	370c      	adds	r7, #12
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd90      	pop	{r4, r7, pc}
 80092e8:	20002590 	.word	0x20002590
 80092ec:	20000a68 	.word	0x20000a68
 80092f0:	20002dac 	.word	0x20002dac

080092f4 <EXTI2_IRQHandler>:
uint32_t g_dbg_b_interrupt_count = 0;
/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80092f4:	b590      	push	{r4, r7, lr}
 80092f6:	b085      	sub	sp, #20
 80092f8:	af02      	add	r7, sp, #8
    // A is speed
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_A_PIN;
 80092fa:	2304      	movs	r3, #4
 80092fc:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_A;
 80092fe:	2300      	movs	r3, #0
 8009300:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_A_IRQ;
 8009302:	2308      	movs	r3, #8
 8009304:	713b      	strb	r3, [r7, #4]
    a_passes++;
 8009306:	4b15      	ldr	r3, [pc, #84]	; (800935c <EXTI2_IRQHandler+0x68>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	3301      	adds	r3, #1
 800930c:	4a13      	ldr	r2, [pc, #76]	; (800935c <EXTI2_IRQHandler+0x68>)
 800930e:	6013      	str	r3, [r2, #0]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 8009310:	88fb      	ldrh	r3, [r7, #6]
 8009312:	4618      	mov	r0, r3
 8009314:	f7fb fc28 	bl	8004b68 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 8009318:	797a      	ldrb	r2, [r7, #5]
 800931a:	797b      	ldrb	r3, [r7, #5]
 800931c:	4910      	ldr	r1, [pc, #64]	; (8009360 <EXTI2_IRQHandler+0x6c>)
 800931e:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 8009322:	490f      	ldr	r1, [pc, #60]	; (8009360 <EXTI2_IRQHandler+0x6c>)
 8009324:	00db      	lsls	r3, r3, #3
 8009326:	440b      	add	r3, r1
 8009328:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800932a:	797c      	ldrb	r4, [r7, #5]
 800932c:	f7f9 f946 	bl	80025bc <xTaskGetTickCountFromISR>
 8009330:	4603      	mov	r3, r0
 8009332:	4a0b      	ldr	r2, [pc, #44]	; (8009360 <EXTI2_IRQHandler+0x6c>)
 8009334:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 8009338:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800933c:	4618      	mov	r0, r3
 800933e:	f7fa ffe6 	bl	800430e <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8009342:	4b08      	ldr	r3, [pc, #32]	; (8009364 <EXTI2_IRQHandler+0x70>)
 8009344:	6818      	ldr	r0, [r3, #0]
 8009346:	7979      	ldrb	r1, [r7, #5]
 8009348:	463b      	mov	r3, r7
 800934a:	9300      	str	r3, [sp, #0]
 800934c:	2300      	movs	r3, #0
 800934e:	2203      	movs	r2, #3
 8009350:	f7f9 fd52 	bl	8002df8 <xTaskGenericNotifyFromISR>
}
 8009354:	bf00      	nop
 8009356:	370c      	adds	r7, #12
 8009358:	46bd      	mov	sp, r7
 800935a:	bd90      	pop	{r4, r7, pc}
 800935c:	20002594 	.word	0x20002594
 8009360:	20000a68 	.word	0x20000a68
 8009364:	20002dac 	.word	0x20002dac

08009368 <EXTI15_10_IRQHandler>:
volatile uint32_t b_passes = 0;
/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8009368:	b590      	push	{r4, r7, lr}
 800936a:	b085      	sub	sp, #20
 800936c:	af02      	add	r7, sp, #8
    // B is state
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_B_PIN;
 800936e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009372:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_B;
 8009374:	2301      	movs	r3, #1
 8009376:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_B_IRQ;
 8009378:	2328      	movs	r3, #40	; 0x28
 800937a:	713b      	strb	r3, [r7, #4]
    b_passes++;
 800937c:	4b15      	ldr	r3, [pc, #84]	; (80093d4 <EXTI15_10_IRQHandler+0x6c>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	3301      	adds	r3, #1
 8009382:	4a14      	ldr	r2, [pc, #80]	; (80093d4 <EXTI15_10_IRQHandler+0x6c>)
 8009384:	6013      	str	r3, [r2, #0]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 8009386:	88fb      	ldrh	r3, [r7, #6]
 8009388:	4618      	mov	r0, r3
 800938a:	f7fb fbed 	bl	8004b68 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800938e:	797a      	ldrb	r2, [r7, #5]
 8009390:	797b      	ldrb	r3, [r7, #5]
 8009392:	4911      	ldr	r1, [pc, #68]	; (80093d8 <EXTI15_10_IRQHandler+0x70>)
 8009394:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 8009398:	490f      	ldr	r1, [pc, #60]	; (80093d8 <EXTI15_10_IRQHandler+0x70>)
 800939a:	00db      	lsls	r3, r3, #3
 800939c:	440b      	add	r3, r1
 800939e:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 80093a0:	797c      	ldrb	r4, [r7, #5]
 80093a2:	f7f9 f90b 	bl	80025bc <xTaskGetTickCountFromISR>
 80093a6:	4603      	mov	r3, r0
 80093a8:	4a0b      	ldr	r2, [pc, #44]	; (80093d8 <EXTI15_10_IRQHandler+0x70>)
 80093aa:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 80093ae:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80093b2:	4618      	mov	r0, r3
 80093b4:	f7fa ffab 	bl	800430e <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 80093b8:	4b08      	ldr	r3, [pc, #32]	; (80093dc <EXTI15_10_IRQHandler+0x74>)
 80093ba:	6818      	ldr	r0, [r3, #0]
 80093bc:	7979      	ldrb	r1, [r7, #5]
 80093be:	463b      	mov	r3, r7
 80093c0:	9300      	str	r3, [sp, #0]
 80093c2:	2300      	movs	r3, #0
 80093c4:	2203      	movs	r2, #3
 80093c6:	f7f9 fd17 	bl	8002df8 <xTaskGenericNotifyFromISR>
}
 80093ca:	bf00      	nop
 80093cc:	370c      	adds	r7, #12
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd90      	pop	{r4, r7, pc}
 80093d2:	bf00      	nop
 80093d4:	20002598 	.word	0x20002598
 80093d8:	20000a68 	.word	0x20000a68
 80093dc:	20002dac 	.word	0x20002dac

080093e0 <EXTI9_5_IRQHandler>:
volatile uint32_t c_passes = 0;
/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80093e0:	b590      	push	{r4, r7, lr}
 80093e2:	b085      	sub	sp, #20
 80093e4:	af02      	add	r7, sp, #8
    // C is color
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_C_PIN;
 80093e6:	2320      	movs	r3, #32
 80093e8:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_C;
 80093ea:	2302      	movs	r3, #2
 80093ec:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_C_IRQ;
 80093ee:	2317      	movs	r3, #23
 80093f0:	713b      	strb	r3, [r7, #4]
    c_passes++;
 80093f2:	4b15      	ldr	r3, [pc, #84]	; (8009448 <EXTI9_5_IRQHandler+0x68>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	3301      	adds	r3, #1
 80093f8:	4a13      	ldr	r2, [pc, #76]	; (8009448 <EXTI9_5_IRQHandler+0x68>)
 80093fa:	6013      	str	r3, [r2, #0]
    // add button irq here..
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 80093fc:	88fb      	ldrh	r3, [r7, #6]
 80093fe:	4618      	mov	r0, r3
 8009400:	f7fb fbb2 	bl	8004b68 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 8009404:	797a      	ldrb	r2, [r7, #5]
 8009406:	797b      	ldrb	r3, [r7, #5]
 8009408:	4910      	ldr	r1, [pc, #64]	; (800944c <EXTI9_5_IRQHandler+0x6c>)
 800940a:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800940e:	490f      	ldr	r1, [pc, #60]	; (800944c <EXTI9_5_IRQHandler+0x6c>)
 8009410:	00db      	lsls	r3, r3, #3
 8009412:	440b      	add	r3, r1
 8009414:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 8009416:	797c      	ldrb	r4, [r7, #5]
 8009418:	f7f9 f8d0 	bl	80025bc <xTaskGetTickCountFromISR>
 800941c:	4603      	mov	r3, r0
 800941e:	4a0b      	ldr	r2, [pc, #44]	; (800944c <EXTI9_5_IRQHandler+0x6c>)
 8009420:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 8009424:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8009428:	4618      	mov	r0, r3
 800942a:	f7fa ff70 	bl	800430e <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800942e:	4b08      	ldr	r3, [pc, #32]	; (8009450 <EXTI9_5_IRQHandler+0x70>)
 8009430:	6818      	ldr	r0, [r3, #0]
 8009432:	7979      	ldrb	r1, [r7, #5]
 8009434:	463b      	mov	r3, r7
 8009436:	9300      	str	r3, [sp, #0]
 8009438:	2300      	movs	r3, #0
 800943a:	2203      	movs	r2, #3
 800943c:	f7f9 fcdc 	bl	8002df8 <xTaskGenericNotifyFromISR>
}
 8009440:	bf00      	nop
 8009442:	370c      	adds	r7, #12
 8009444:	46bd      	mov	sp, r7
 8009446:	bd90      	pop	{r4, r7, pc}
 8009448:	2000259c 	.word	0x2000259c
 800944c:	20000a68 	.word	0x20000a68
 8009450:	20002dac 	.word	0x20002dac

08009454 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009454:	b480      	push	{r7}
 8009456:	b083      	sub	sp, #12
 8009458:	af00      	add	r7, sp, #0
 800945a:	4603      	mov	r3, r0
 800945c:	80fb      	strh	r3, [r7, #6]

}
 800945e:	bf00      	nop
 8009460:	370c      	adds	r7, #12
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr

0800946a <HAL_DMA_CMPLT_CALLBACK>:


void HAL_DMA_CMPLT_CALLBACK(DMA_HandleTypeDef *hdma)
{
 800946a:	b480      	push	{r7}
 800946c:	b083      	sub	sp, #12
 800946e:	af00      	add	r7, sp, #0
 8009470:	6078      	str	r0, [r7, #4]
    while(1);
 8009472:	e7fe      	b.n	8009472 <HAL_DMA_CMPLT_CALLBACK+0x8>

08009474 <HAL_TIM_PWM_PulseFinishedCallback>:
bool gb_dma_cmplt_strip_1 = true;
bool gb_dma_cmplt_strip_2 = true;
bool gb_dma_cmplt_strip_3 = true;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b082      	sub	sp, #8
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
    switch (htim->Channel)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	7f1b      	ldrb	r3, [r3, #28]
 8009480:	2b04      	cmp	r3, #4
 8009482:	d016      	beq.n	80094b2 <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
 8009484:	2b04      	cmp	r3, #4
 8009486:	dc1c      	bgt.n	80094c2 <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
 8009488:	2b01      	cmp	r3, #1
 800948a:	d002      	beq.n	8009492 <HAL_TIM_PWM_PulseFinishedCallback+0x1e>
 800948c:	2b02      	cmp	r3, #2
 800948e:	d008      	beq.n	80094a2 <HAL_TIM_PWM_PulseFinishedCallback+0x2e>
        case HAL_TIM_ACTIVE_CHANNEL_3:
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
            gb_dma_cmplt_strip_3 = true;
        break;
        default:
        break;
 8009490:	e017      	b.n	80094c2 <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 8009492:	2100      	movs	r1, #0
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f7fd fa0b 	bl	80068b0 <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_1 = true;
 800949a:	4b0c      	ldr	r3, [pc, #48]	; (80094cc <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 800949c:	2201      	movs	r2, #1
 800949e:	701a      	strb	r2, [r3, #0]
        break;
 80094a0:	e010      	b.n	80094c4 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_2);
 80094a2:	2104      	movs	r1, #4
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f7fd fa03 	bl	80068b0 <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_2 = true;
 80094aa:	4b09      	ldr	r3, [pc, #36]	; (80094d0 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 80094ac:	2201      	movs	r2, #1
 80094ae:	701a      	strb	r2, [r3, #0]
        break;
 80094b0:	e008      	b.n	80094c4 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
 80094b2:	2108      	movs	r1, #8
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f7fd f9fb 	bl	80068b0 <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_3 = true;
 80094ba:	4b06      	ldr	r3, [pc, #24]	; (80094d4 <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 80094bc:	2201      	movs	r2, #1
 80094be:	701a      	strb	r2, [r3, #0]
        break;
 80094c0:	e000      	b.n	80094c4 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
        break;
 80094c2:	bf00      	nop
    }
}
 80094c4:	bf00      	nop
 80094c6:	3708      	adds	r7, #8
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	20000085 	.word	0x20000085
 80094d0:	20000086 	.word	0x20000086
 80094d4:	20000087 	.word	0x20000087

080094d8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80094dc:	4802      	ldr	r0, [pc, #8]	; (80094e8 <DMA1_Channel2_IRQHandler+0x10>)
 80094de:	f7fb f88a 	bl	80045f6 <HAL_DMA_IRQHandler>
}
 80094e2:	bf00      	nop
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	200023b8 	.word	0x200023b8

080094ec <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 80094f0:	4802      	ldr	r0, [pc, #8]	; (80094fc <DMA1_Channel3_IRQHandler+0x10>)
 80094f2:	f7fb f880 	bl	80045f6 <HAL_DMA_IRQHandler>
}
 80094f6:	bf00      	nop
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	bf00      	nop
 80094fc:	20002400 	.word	0x20002400

08009500 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim15_ch1_up_trig_com);
 8009504:	4802      	ldr	r0, [pc, #8]	; (8009510 <DMA1_Channel5_IRQHandler+0x10>)
 8009506:	f7fb f876 	bl	80045f6 <HAL_DMA_IRQHandler>
}
 800950a:	bf00      	nop
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop
 8009510:	20002490 	.word	0x20002490

08009514 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim16_ch1_up);
 8009518:	4802      	ldr	r0, [pc, #8]	; (8009524 <DMA1_Channel6_IRQHandler+0x10>)
 800951a:	f7fb f86c 	bl	80045f6 <HAL_DMA_IRQHandler>
}
 800951e:	bf00      	nop
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	200024d8 	.word	0x200024d8

08009528 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 800952c:	4802      	ldr	r0, [pc, #8]	; (8009538 <DMA1_Channel7_IRQHandler+0x10>)
 800952e:	f7fb f862 	bl	80045f6 <HAL_DMA_IRQHandler>
}
 8009532:	bf00      	nop
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	20002448 	.word	0x20002448

0800953c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800953c:	b480      	push	{r7}
 800953e:	af00      	add	r7, sp, #0
	return 1;
 8009540:	2301      	movs	r3, #1
}
 8009542:	4618      	mov	r0, r3
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <_kill>:

int _kill(int pid, int sig)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8009556:	f000 fc6b 	bl	8009e30 <__errno>
 800955a:	4603      	mov	r3, r0
 800955c:	2216      	movs	r2, #22
 800955e:	601a      	str	r2, [r3, #0]
	return -1;
 8009560:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8009564:	4618      	mov	r0, r3
 8009566:	3708      	adds	r7, #8
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <_exit>:

void _exit (int status)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8009574:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f7ff ffe7 	bl	800954c <_kill>
	while (1) {}		/* Make sure we hang here */
 800957e:	e7fe      	b.n	800957e <_exit+0x12>

08009580 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b086      	sub	sp, #24
 8009584:	af00      	add	r7, sp, #0
 8009586:	60f8      	str	r0, [r7, #12]
 8009588:	60b9      	str	r1, [r7, #8]
 800958a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800958c:	2300      	movs	r3, #0
 800958e:	617b      	str	r3, [r7, #20]
 8009590:	e00a      	b.n	80095a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8009592:	f3af 8000 	nop.w
 8009596:	4601      	mov	r1, r0
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	1c5a      	adds	r2, r3, #1
 800959c:	60ba      	str	r2, [r7, #8]
 800959e:	b2ca      	uxtb	r2, r1
 80095a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	3301      	adds	r3, #1
 80095a6:	617b      	str	r3, [r7, #20]
 80095a8:	697a      	ldr	r2, [r7, #20]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	429a      	cmp	r2, r3
 80095ae:	dbf0      	blt.n	8009592 <_read+0x12>
	}

return len;
 80095b0:	687b      	ldr	r3, [r7, #4]
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3718      	adds	r7, #24
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b086      	sub	sp, #24
 80095be:	af00      	add	r7, sp, #0
 80095c0:	60f8      	str	r0, [r7, #12]
 80095c2:	60b9      	str	r1, [r7, #8]
 80095c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80095c6:	2300      	movs	r3, #0
 80095c8:	617b      	str	r3, [r7, #20]
 80095ca:	e009      	b.n	80095e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	1c5a      	adds	r2, r3, #1
 80095d0:	60ba      	str	r2, [r7, #8]
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	4618      	mov	r0, r3
 80095d6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	3301      	adds	r3, #1
 80095de:	617b      	str	r3, [r7, #20]
 80095e0:	697a      	ldr	r2, [r7, #20]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	dbf1      	blt.n	80095cc <_write+0x12>
	}
	return len;
 80095e8:	687b      	ldr	r3, [r7, #4]
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3718      	adds	r7, #24
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}

080095f2 <_close>:

int _close(int file)
{
 80095f2:	b480      	push	{r7}
 80095f4:	b083      	sub	sp, #12
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
	return -1;
 80095fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80095fe:	4618      	mov	r0, r3
 8009600:	370c      	adds	r7, #12
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr

0800960a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800960a:	b480      	push	{r7}
 800960c:	b083      	sub	sp, #12
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
 8009612:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800961a:	605a      	str	r2, [r3, #4]
	return 0;
 800961c:	2300      	movs	r3, #0
}
 800961e:	4618      	mov	r0, r3
 8009620:	370c      	adds	r7, #12
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr

0800962a <_isatty>:

int _isatty(int file)
{
 800962a:	b480      	push	{r7}
 800962c:	b083      	sub	sp, #12
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
	return 1;
 8009632:	2301      	movs	r3, #1
}
 8009634:	4618      	mov	r0, r3
 8009636:	370c      	adds	r7, #12
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr

08009640 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009640:	b480      	push	{r7}
 8009642:	b085      	sub	sp, #20
 8009644:	af00      	add	r7, sp, #0
 8009646:	60f8      	str	r0, [r7, #12]
 8009648:	60b9      	str	r1, [r7, #8]
 800964a:	607a      	str	r2, [r7, #4]
	return 0;
 800964c:	2300      	movs	r3, #0
}
 800964e:	4618      	mov	r0, r3
 8009650:	3714      	adds	r7, #20
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr
	...

0800965c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b086      	sub	sp, #24
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009664:	4a14      	ldr	r2, [pc, #80]	; (80096b8 <_sbrk+0x5c>)
 8009666:	4b15      	ldr	r3, [pc, #84]	; (80096bc <_sbrk+0x60>)
 8009668:	1ad3      	subs	r3, r2, r3
 800966a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009670:	4b13      	ldr	r3, [pc, #76]	; (80096c0 <_sbrk+0x64>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d102      	bne.n	800967e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009678:	4b11      	ldr	r3, [pc, #68]	; (80096c0 <_sbrk+0x64>)
 800967a:	4a12      	ldr	r2, [pc, #72]	; (80096c4 <_sbrk+0x68>)
 800967c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800967e:	4b10      	ldr	r3, [pc, #64]	; (80096c0 <_sbrk+0x64>)
 8009680:	681a      	ldr	r2, [r3, #0]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	4413      	add	r3, r2
 8009686:	693a      	ldr	r2, [r7, #16]
 8009688:	429a      	cmp	r2, r3
 800968a:	d207      	bcs.n	800969c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800968c:	f000 fbd0 	bl	8009e30 <__errno>
 8009690:	4603      	mov	r3, r0
 8009692:	220c      	movs	r2, #12
 8009694:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009696:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800969a:	e009      	b.n	80096b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800969c:	4b08      	ldr	r3, [pc, #32]	; (80096c0 <_sbrk+0x64>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80096a2:	4b07      	ldr	r3, [pc, #28]	; (80096c0 <_sbrk+0x64>)
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	4413      	add	r3, r2
 80096aa:	4a05      	ldr	r2, [pc, #20]	; (80096c0 <_sbrk+0x64>)
 80096ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80096ae:	68fb      	ldr	r3, [r7, #12]
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3718      	adds	r7, #24
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	20010000 	.word	0x20010000
 80096bc:	00000400 	.word	0x00000400
 80096c0:	200025a0 	.word	0x200025a0
 80096c4:	20003fb8 	.word	0x20003fb8

080096c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80096c8:	b480      	push	{r7}
 80096ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80096cc:	4b06      	ldr	r3, [pc, #24]	; (80096e8 <SystemInit+0x20>)
 80096ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096d2:	4a05      	ldr	r2, [pc, #20]	; (80096e8 <SystemInit+0x20>)
 80096d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80096d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80096dc:	bf00      	nop
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr
 80096e6:	bf00      	nop
 80096e8:	e000ed00 	.word	0xe000ed00

080096ec <board_init_peripheral_setup>:

#if defined(BOARD_SPUDGLO_V5)


static void board_init_peripheral_setup(void)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	af00      	add	r7, sp, #0
	uart_config_hal_setup();
 80096f0:	f7ff fa8a 	bl	8008c08 <uart_config_hal_setup>
	spi_config_hal_setup();
 80096f4:	f7ff f982 	bl	80089fc <spi_config_hal_setup>
}
 80096f8:	bf00      	nop
 80096fa:	bd80      	pop	{r7, pc}

080096fc <board_init_specific>:


void board_init_specific(void)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b086      	sub	sp, #24
 8009700:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009702:	1d3b      	adds	r3, r7, #4
 8009704:	2200      	movs	r2, #0
 8009706:	601a      	str	r2, [r3, #0]
 8009708:	605a      	str	r2, [r3, #4]
 800970a:	609a      	str	r2, [r3, #8]
 800970c:	60da      	str	r2, [r3, #12]
 800970e:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = PIN_LVL_EN;
 8009710:	2380      	movs	r3, #128	; 0x80
 8009712:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009714:	2301      	movs	r3, #1
 8009716:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009718:	2300      	movs	r3, #0
 800971a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800971c:	1d3b      	adds	r3, r7, #4
 800971e:	4619      	mov	r1, r3
 8009720:	4825      	ldr	r0, [pc, #148]	; (80097b8 <board_init_specific+0xbc>)
 8009722:	f7fb f88f 	bl	8004844 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_LVL_EN, GPIO_PIN_RESET);
 8009726:	2200      	movs	r2, #0
 8009728:	2180      	movs	r1, #128	; 0x80
 800972a:	4823      	ldr	r0, [pc, #140]	; (80097b8 <board_init_specific+0xbc>)
 800972c:	f7fb fa04 	bl	8004b38 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_LVL_DIR;
 8009730:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009734:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009736:	2301      	movs	r3, #1
 8009738:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800973a:	2300      	movs	r3, #0
 800973c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800973e:	1d3b      	adds	r3, r7, #4
 8009740:	4619      	mov	r1, r3
 8009742:	481d      	ldr	r0, [pc, #116]	; (80097b8 <board_init_specific+0xbc>)
 8009744:	f7fb f87e 	bl	8004844 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_LVL_DIR, GPIO_PIN_SET);
 8009748:	2201      	movs	r2, #1
 800974a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800974e:	481a      	ldr	r0, [pc, #104]	; (80097b8 <board_init_specific+0xbc>)
 8009750:	f7fb f9f2 	bl	8004b38 <HAL_GPIO_WritePin>

    // setup XR_RX and XR_TX
    GPIO_InitStruct.Pin = PIN_VBUS_PRESENT;
 8009754:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009758:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800975a:	2300      	movs	r3, #0
 800975c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800975e:	2300      	movs	r3, #0
 8009760:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);
 8009762:	1d3b      	adds	r3, r7, #4
 8009764:	4619      	mov	r1, r3
 8009766:	4815      	ldr	r0, [pc, #84]	; (80097bc <board_init_specific+0xc0>)
 8009768:	f7fb f86c 	bl	8004844 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_GREEN_LED;
 800976c:	2304      	movs	r3, #4
 800976e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009770:	2301      	movs	r3, #1
 8009772:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009774:	2300      	movs	r3, #0
 8009776:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 8009778:	1d3b      	adds	r3, r7, #4
 800977a:	4619      	mov	r1, r3
 800977c:	480e      	ldr	r0, [pc, #56]	; (80097b8 <board_init_specific+0xbc>)
 800977e:	f7fb f861 	bl	8004844 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_GREEN_LED, GPIO_PIN_RESET);
 8009782:	2200      	movs	r2, #0
 8009784:	2104      	movs	r1, #4
 8009786:	480c      	ldr	r0, [pc, #48]	; (80097b8 <board_init_specific+0xbc>)
 8009788:	f7fb f9d6 	bl	8004b38 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_RED_LED;
 800978c:	2308      	movs	r3, #8
 800978e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009790:	2301      	movs	r3, #1
 8009792:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009794:	2300      	movs	r3, #0
 8009796:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 8009798:	1d3b      	adds	r3, r7, #4
 800979a:	4619      	mov	r1, r3
 800979c:	4806      	ldr	r0, [pc, #24]	; (80097b8 <board_init_specific+0xbc>)
 800979e:	f7fb f851 	bl	8004844 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_RED_LED, GPIO_PIN_RESET);
 80097a2:	2200      	movs	r2, #0
 80097a4:	2108      	movs	r1, #8
 80097a6:	4804      	ldr	r0, [pc, #16]	; (80097b8 <board_init_specific+0xbc>)
 80097a8:	f7fb f9c6 	bl	8004b38 <HAL_GPIO_WritePin>

    board_init_peripheral_setup();
 80097ac:	f7ff ff9e 	bl	80096ec <board_init_peripheral_setup>
}
 80097b0:	bf00      	nop
 80097b2:	3718      	adds	r7, #24
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}
 80097b8:	48000800 	.word	0x48000800
 80097bc:	48000400 	.word	0x48000400

080097c0 <board_init_specific_esp8266_power_enable>:
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_LVL_EN, GPIO_PIN_SET);
}


void board_init_specific_esp8266_power_enable(void)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b086      	sub	sp, #24
 80097c4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80097c6:	1d3b      	adds	r3, r7, #4
 80097c8:	2200      	movs	r2, #0
 80097ca:	601a      	str	r2, [r3, #0]
 80097cc:	605a      	str	r2, [r3, #4]
 80097ce:	609a      	str	r2, [r3, #8]
 80097d0:	60da      	str	r2, [r3, #12]
 80097d2:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = PIN_ESP8266_EN;
 80097d4:	2340      	movs	r3, #64	; 0x40
 80097d6:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80097d8:	2301      	movs	r3, #1
 80097da:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097dc:	2300      	movs	r3, #0
 80097de:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 80097e0:	1d3b      	adds	r3, r7, #4
 80097e2:	4619      	mov	r1, r3
 80097e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80097e8:	f7fb f82c 	bl	8004844 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_A, PIN_ESP8266_EN, GPIO_PIN_SET);
 80097ec:	2201      	movs	r2, #1
 80097ee:	2140      	movs	r1, #64	; 0x40
 80097f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80097f4:	f7fb f9a0 	bl	8004b38 <HAL_GPIO_WritePin>
}
 80097f8:	bf00      	nop
 80097fa:	3718      	adds	r7, #24
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <board_init_specific_esp8266_power_disable>:


void board_init_specific_esp8266_power_disable(void)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b086      	sub	sp, #24
 8009804:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009806:	1d3b      	adds	r3, r7, #4
 8009808:	2200      	movs	r2, #0
 800980a:	601a      	str	r2, [r3, #0]
 800980c:	605a      	str	r2, [r3, #4]
 800980e:	609a      	str	r2, [r3, #8]
 8009810:	60da      	str	r2, [r3, #12]
 8009812:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = PIN_ESP8266_EN;
 8009814:	2340      	movs	r3, #64	; 0x40
 8009816:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009818:	2301      	movs	r3, #1
 800981a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800981c:	2300      	movs	r3, #0
 800981e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 8009820:	1d3b      	adds	r3, r7, #4
 8009822:	4619      	mov	r1, r3
 8009824:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009828:	f7fb f80c 	bl	8004844 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_A, PIN_ESP8266_EN, GPIO_PIN_RESET);
 800982c:	2200      	movs	r2, #0
 800982e:	2140      	movs	r1, #64	; 0x40
 8009830:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009834:	f7fb f980 	bl	8004b38 <HAL_GPIO_WritePin>
}
 8009838:	bf00      	nop
 800983a:	3718      	adds	r7, #24
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <board_init_specific_esp8266_reset_deassert>:
    HAL_GPIO_WritePin(PIN_PORT_A, PIN_ESP8266_EN, GPIO_PIN_RESET);
}


void board_init_specific_esp8266_reset_deassert(void)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b086      	sub	sp, #24
 8009844:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009846:	1d3b      	adds	r3, r7, #4
 8009848:	2200      	movs	r2, #0
 800984a:	601a      	str	r2, [r3, #0]
 800984c:	605a      	str	r2, [r3, #4]
 800984e:	609a      	str	r2, [r3, #8]
 8009850:	60da      	str	r2, [r3, #12]
 8009852:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = PIN_ESP8266_EN;
 8009854:	2340      	movs	r3, #64	; 0x40
 8009856:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009858:	2301      	movs	r3, #1
 800985a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800985c:	2300      	movs	r3, #0
 800985e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 8009860:	1d3b      	adds	r3, r7, #4
 8009862:	4619      	mov	r1, r3
 8009864:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009868:	f7fa ffec 	bl	8004844 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_A, PIN_ESP8266_RST, GPIO_PIN_SET);
 800986c:	2201      	movs	r2, #1
 800986e:	2180      	movs	r1, #128	; 0x80
 8009870:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009874:	f7fb f960 	bl	8004b38 <HAL_GPIO_WritePin>
}
 8009878:	bf00      	nop
 800987a:	3718      	adds	r7, #24
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <flash_info_block_init>:
    return return_val;
}


void flash_info_block_init(void)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	af00      	add	r7, sp, #0
    g_flash_info_block.flash_info_data.uuid.data[0] = HAL_GetUIDw0();
 8009884:	f7fa fbf6 	bl	8004074 <HAL_GetUIDw0>
 8009888:	4603      	mov	r3, r0
 800988a:	4a32      	ldr	r2, [pc, #200]	; (8009954 <flash_info_block_init+0xd4>)
 800988c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    g_flash_info_block.flash_info_data.uuid.data[1] = HAL_GetUIDw1();
 8009890:	f7fa fbfc 	bl	800408c <HAL_GetUIDw1>
 8009894:	4603      	mov	r3, r0
 8009896:	4a2f      	ldr	r2, [pc, #188]	; (8009954 <flash_info_block_init+0xd4>)
 8009898:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    g_flash_info_block.flash_info_data.uuid.data[2] = HAL_GetUIDw2();
 800989c:	f7fa fc02 	bl	80040a4 <HAL_GetUIDw2>
 80098a0:	4603      	mov	r3, r0
 80098a2:	4a2c      	ldr	r2, [pc, #176]	; (8009954 <flash_info_block_init+0xd4>)
 80098a4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    g_flash_info_block.flash_info_data.strip_info.num_strips = 1;
 80098a8:	4b2a      	ldr	r3, [pc, #168]	; (8009954 <flash_info_block_init+0xd4>)
 80098aa:	2201      	movs	r2, #1
 80098ac:	701a      	strb	r2, [r3, #0]
    g_flash_info_block.flash_info_data.strip_info.strip_sync_animation = 1;
 80098ae:	4b29      	ldr	r3, [pc, #164]	; (8009954 <flash_info_block_init+0xd4>)
 80098b0:	2201      	movs	r2, #1
 80098b2:	705a      	strb	r2, [r3, #1]
    g_flash_info_block.flash_info_data.strip_info.strip_length_one = 1;
 80098b4:	4b27      	ldr	r3, [pc, #156]	; (8009954 <flash_info_block_init+0xd4>)
 80098b6:	2201      	movs	r2, #1
 80098b8:	805a      	strh	r2, [r3, #2]
    g_flash_info_block.flash_info_data.strip_info.strip_length_two = 1;
 80098ba:	4b26      	ldr	r3, [pc, #152]	; (8009954 <flash_info_block_init+0xd4>)
 80098bc:	2201      	movs	r2, #1
 80098be:	809a      	strh	r2, [r3, #4]
    g_flash_info_block.flash_info_data.strip_info.strip_length_three = 1;
 80098c0:	4b24      	ldr	r3, [pc, #144]	; (8009954 <flash_info_block_init+0xd4>)
 80098c2:	2201      	movs	r2, #1
 80098c4:	80da      	strh	r2, [r3, #6]
    g_flash_info_block.flash_info_data.strip_info.strip_one_brightness = 1;
 80098c6:	4b23      	ldr	r3, [pc, #140]	; (8009954 <flash_info_block_init+0xd4>)
 80098c8:	2201      	movs	r2, #1
 80098ca:	721a      	strb	r2, [r3, #8]
    g_flash_info_block.flash_info_data.strip_info.strip_two_brightness = 1;
 80098cc:	4b21      	ldr	r3, [pc, #132]	; (8009954 <flash_info_block_init+0xd4>)
 80098ce:	2201      	movs	r2, #1
 80098d0:	725a      	strb	r2, [r3, #9]
    g_flash_info_block.flash_info_data.strip_info.strip_three_brightness = 1;
 80098d2:	4b20      	ldr	r3, [pc, #128]	; (8009954 <flash_info_block_init+0xd4>)
 80098d4:	2201      	movs	r2, #1
 80098d6:	729a      	strb	r2, [r3, #10]
    g_flash_info_block.flash_info_data.strip_info.strip_one_brightness = 1;
 80098d8:	4b1e      	ldr	r3, [pc, #120]	; (8009954 <flash_info_block_init+0xd4>)
 80098da:	2201      	movs	r2, #1
 80098dc:	721a      	strb	r2, [r3, #8]

    g_flash_info_block.flash_info_data.strip_info.strip_two_brightness = 1;
 80098de:	4b1d      	ldr	r3, [pc, #116]	; (8009954 <flash_info_block_init+0xd4>)
 80098e0:	2201      	movs	r2, #1
 80098e2:	725a      	strb	r2, [r3, #9]
    g_flash_info_block.flash_info_data.strip_info.strip_three_brightness = 1;
 80098e4:	4b1b      	ldr	r3, [pc, #108]	; (8009954 <flash_info_block_init+0xd4>)
 80098e6:	2201      	movs	r2, #1
 80098e8:	729a      	strb	r2, [r3, #10]

    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.spell = 1;
 80098ea:	4a1a      	ldr	r2, [pc, #104]	; (8009954 <flash_info_block_init+0xd4>)
 80098ec:	7ad3      	ldrb	r3, [r2, #11]
 80098ee:	f043 0301 	orr.w	r3, r3, #1
 80098f2:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.white = 1;
 80098f4:	4a17      	ldr	r2, [pc, #92]	; (8009954 <flash_info_block_init+0xd4>)
 80098f6:	7ad3      	ldrb	r3, [r2, #11]
 80098f8:	f043 0302 	orr.w	r3, r3, #2
 80098fc:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.solid = 1;
 80098fe:	4a15      	ldr	r2, [pc, #84]	; (8009954 <flash_info_block_init+0xd4>)
 8009900:	7ad3      	ldrb	r3, [r2, #11]
 8009902:	f043 0304 	orr.w	r3, r3, #4
 8009906:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.sparkle = 1;
 8009908:	4a12      	ldr	r2, [pc, #72]	; (8009954 <flash_info_block_init+0xd4>)
 800990a:	7ad3      	ldrb	r3, [r2, #11]
 800990c:	f043 0308 	orr.w	r3, r3, #8
 8009910:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.sparkle_no_fill = 1;
 8009912:	4a10      	ldr	r2, [pc, #64]	; (8009954 <flash_info_block_init+0xd4>)
 8009914:	7ad3      	ldrb	r3, [r2, #11]
 8009916:	f043 0310 	orr.w	r3, r3, #16
 800991a:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.rainbow = 1;
 800991c:	4a0d      	ldr	r2, [pc, #52]	; (8009954 <flash_info_block_init+0xd4>)
 800991e:	7ad3      	ldrb	r3, [r2, #11]
 8009920:	f043 0320 	orr.w	r3, r3, #32
 8009924:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.chase = 1;
 8009926:	4a0b      	ldr	r2, [pc, #44]	; (8009954 <flash_info_block_init+0xd4>)
 8009928:	7ad3      	ldrb	r3, [r2, #11]
 800992a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800992e:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.chase_rainbow = 1;
 8009930:	4a08      	ldr	r2, [pc, #32]	; (8009954 <flash_info_block_init+0xd4>)
 8009932:	7ad3      	ldrb	r3, [r2, #11]
 8009934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009938:	72d3      	strb	r3, [r2, #11]

    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.fade = 1;
 800993a:	4a06      	ldr	r2, [pc, #24]	; (8009954 <flash_info_block_init+0xd4>)
 800993c:	7b13      	ldrb	r3, [r2, #12]
 800993e:	f043 0301 	orr.w	r3, r3, #1
 8009942:	7313      	strb	r3, [r2, #12]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.twinkle = 1;
 8009944:	4a03      	ldr	r2, [pc, #12]	; (8009954 <flash_info_block_init+0xd4>)
 8009946:	7b13      	ldrb	r3, [r2, #12]
 8009948:	f043 0302 	orr.w	r3, r3, #2
 800994c:	7313      	strb	r3, [r2, #12]
    //g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.rsvd0 = 1; // future
    //g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.rsvd1 = 1; // future
    //g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.rsvd2 = 1; // future

    // need to write to flash!
}
 800994e:	bf00      	nop
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop
 8009954:	200025a4 	.word	0x200025a4

08009958 <flash_info_init>:
}


uint32_t temp = 0;
void flash_info_init(void)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	af00      	add	r7, sp, #0
    temp = sizeof(flash_info_data_t);
 800995c:	4b0d      	ldr	r3, [pc, #52]	; (8009994 <flash_info_init+0x3c>)
 800995e:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8009962:	601a      	str	r2, [r3, #0]
    flash_info_block_init();
 8009964:	f7ff ff8c 	bl	8009880 <flash_info_block_init>
    //flash_access_read_flash_info_sector(g_flash_info_block.flat_data_uint32);
    if ((UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[0]) &&
 8009968:	4b0b      	ldr	r3, [pc, #44]	; (8009998 <flash_info_init+0x40>)
 800996a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800996e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009972:	d10d      	bne.n	8009990 <flash_info_init+0x38>
                    (UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[1]) &&
 8009974:	4b08      	ldr	r3, [pc, #32]	; (8009998 <flash_info_init+0x40>)
 8009976:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    if ((UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[0]) &&
 800997a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800997e:	d107      	bne.n	8009990 <flash_info_init+0x38>
                    (UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[2]))
 8009980:	4b05      	ldr	r3, [pc, #20]	; (8009998 <flash_info_init+0x40>)
 8009982:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
                    (UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[1]) &&
 8009986:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800998a:	d101      	bne.n	8009990 <flash_info_init+0x38>
    {
        flash_info_block_init();
 800998c:	f7ff ff78 	bl	8009880 <flash_info_block_init>
    }
}
 8009990:	bf00      	nop
 8009992:	bd80      	pop	{r7, pc}
 8009994:	20002da4 	.word	0x20002da4
 8009998:	200025a4 	.word	0x200025a4

0800999c <main>:
#include "task_create.h"
#include "animate_led.h"
#include "flash_info.h"

int main(void)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	af00      	add	r7, sp, #0
    board_init_common_board_init();
 80099a0:	f7ff f80a 	bl	80089b8 <board_init_common_board_init>
    flash_info_init();
 80099a4:	f7ff ffd8 	bl	8009958 <flash_info_init>
    task_create();
 80099a8:	f000 f808 	bl	80099bc <task_create>
	//semaphore_create();
    reset_ws2812b();
 80099ac:	f7f6 fef4 	bl	8000798 <reset_ws2812b>
	osKernelStart();
 80099b0:	f7f7 fc64 	bl	800127c <osKernelStart>
 80099b4:	2300      	movs	r3, #0
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	bd80      	pop	{r7, pc}
	...

080099bc <task_create>:
	.priority = (osPriority_t) osPriorityNormal,
};


void task_create(void)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	af00      	add	r7, sp, #0
    osKernelInitialize();
 80099c0:	f7f7 fc38 	bl	8001234 <osKernelInitialize>
	g_button_press_handle = osThreadNew(task_button_press, NULL, &g_task_button_press_attributes);
 80099c4:	4a0a      	ldr	r2, [pc, #40]	; (80099f0 <task_create+0x34>)
 80099c6:	2100      	movs	r1, #0
 80099c8:	480a      	ldr	r0, [pc, #40]	; (80099f4 <task_create+0x38>)
 80099ca:	f7f7 fc7d 	bl	80012c8 <osThreadNew>
 80099ce:	4603      	mov	r3, r0
 80099d0:	4a09      	ldr	r2, [pc, #36]	; (80099f8 <task_create+0x3c>)
 80099d2:	6013      	str	r3, [r2, #0]
    //g_dma_transfer_handle = osThreadNew(task_dma_transfer, NULL, &g_task_dma_transfer_attributes);
    g_led_strip_1_ctrl_handle = osThreadNew(task_led_ctrl_strip_one, NULL, &g_task_strip_1_led_ctrl_attributes);
 80099d4:	4a09      	ldr	r2, [pc, #36]	; (80099fc <task_create+0x40>)
 80099d6:	2100      	movs	r1, #0
 80099d8:	4809      	ldr	r0, [pc, #36]	; (8009a00 <task_create+0x44>)
 80099da:	f7f7 fc75 	bl	80012c8 <osThreadNew>
 80099de:	4603      	mov	r3, r0
 80099e0:	4a08      	ldr	r2, [pc, #32]	; (8009a04 <task_create+0x48>)
 80099e2:	6013      	str	r3, [r2, #0]
    g_tasks_running = true; // technically will be running after task scheduler started
 80099e4:	4b08      	ldr	r3, [pc, #32]	; (8009a08 <task_create+0x4c>)
 80099e6:	2201      	movs	r2, #1
 80099e8:	701a      	strb	r2, [r3, #0]
}
 80099ea:	bf00      	nop
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	0800abec 	.word	0x0800abec
 80099f4:	08000c8d 	.word	0x08000c8d
 80099f8:	20002dac 	.word	0x20002dac
 80099fc:	0800ac10 	.word	0x0800ac10
 8009a00:	08000ee9 	.word	0x08000ee9
 8009a04:	20002da8 	.word	0x20002da8
 8009a08:	20003e68 	.word	0x20003e68

08009a0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8009a0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009a44 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8009a10:	f7ff fe5a 	bl	80096c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009a14:	480c      	ldr	r0, [pc, #48]	; (8009a48 <LoopForever+0x6>)
  ldr r1, =_edata
 8009a16:	490d      	ldr	r1, [pc, #52]	; (8009a4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8009a18:	4a0d      	ldr	r2, [pc, #52]	; (8009a50 <LoopForever+0xe>)
  movs r3, #0
 8009a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009a1c:	e002      	b.n	8009a24 <LoopCopyDataInit>

08009a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009a22:	3304      	adds	r3, #4

08009a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009a28:	d3f9      	bcc.n	8009a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009a2a:	4a0a      	ldr	r2, [pc, #40]	; (8009a54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8009a2c:	4c0a      	ldr	r4, [pc, #40]	; (8009a58 <LoopForever+0x16>)
  movs r3, #0
 8009a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009a30:	e001      	b.n	8009a36 <LoopFillZerobss>

08009a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009a34:	3204      	adds	r2, #4

08009a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009a38:	d3fb      	bcc.n	8009a32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009a3a:	f000 f9ff 	bl	8009e3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8009a3e:	f7ff ffad 	bl	800999c <main>

08009a42 <LoopForever>:

LoopForever:
    b LoopForever
 8009a42:	e7fe      	b.n	8009a42 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8009a44:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8009a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009a4c:	2000025c 	.word	0x2000025c
  ldr r2, =_sidata
 8009a50:	0800ad24 	.word	0x0800ad24
  ldr r2, =_sbss
 8009a54:	2000025c 	.word	0x2000025c
  ldr r4, =_ebss
 8009a58:	20003fb8 	.word	0x20003fb8

08009a5c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009a5c:	e7fe      	b.n	8009a5c <ADC1_IRQHandler>
	...

08009a60 <malloc>:
 8009a60:	4b02      	ldr	r3, [pc, #8]	; (8009a6c <malloc+0xc>)
 8009a62:	4601      	mov	r1, r0
 8009a64:	6818      	ldr	r0, [r3, #0]
 8009a66:	f000 b823 	b.w	8009ab0 <_malloc_r>
 8009a6a:	bf00      	nop
 8009a6c:	20000258 	.word	0x20000258

08009a70 <sbrk_aligned>:
 8009a70:	b570      	push	{r4, r5, r6, lr}
 8009a72:	4e0e      	ldr	r6, [pc, #56]	; (8009aac <sbrk_aligned+0x3c>)
 8009a74:	460c      	mov	r4, r1
 8009a76:	6831      	ldr	r1, [r6, #0]
 8009a78:	4605      	mov	r5, r0
 8009a7a:	b911      	cbnz	r1, 8009a82 <sbrk_aligned+0x12>
 8009a7c:	f000 f9c8 	bl	8009e10 <_sbrk_r>
 8009a80:	6030      	str	r0, [r6, #0]
 8009a82:	4621      	mov	r1, r4
 8009a84:	4628      	mov	r0, r5
 8009a86:	f000 f9c3 	bl	8009e10 <_sbrk_r>
 8009a8a:	1c43      	adds	r3, r0, #1
 8009a8c:	d00a      	beq.n	8009aa4 <sbrk_aligned+0x34>
 8009a8e:	1cc4      	adds	r4, r0, #3
 8009a90:	f024 0403 	bic.w	r4, r4, #3
 8009a94:	42a0      	cmp	r0, r4
 8009a96:	d007      	beq.n	8009aa8 <sbrk_aligned+0x38>
 8009a98:	1a21      	subs	r1, r4, r0
 8009a9a:	4628      	mov	r0, r5
 8009a9c:	f000 f9b8 	bl	8009e10 <_sbrk_r>
 8009aa0:	3001      	adds	r0, #1
 8009aa2:	d101      	bne.n	8009aa8 <sbrk_aligned+0x38>
 8009aa4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	bd70      	pop	{r4, r5, r6, pc}
 8009aac:	20003e70 	.word	0x20003e70

08009ab0 <_malloc_r>:
 8009ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ab4:	1ccd      	adds	r5, r1, #3
 8009ab6:	f025 0503 	bic.w	r5, r5, #3
 8009aba:	3508      	adds	r5, #8
 8009abc:	2d0c      	cmp	r5, #12
 8009abe:	bf38      	it	cc
 8009ac0:	250c      	movcc	r5, #12
 8009ac2:	2d00      	cmp	r5, #0
 8009ac4:	4607      	mov	r7, r0
 8009ac6:	db01      	blt.n	8009acc <_malloc_r+0x1c>
 8009ac8:	42a9      	cmp	r1, r5
 8009aca:	d905      	bls.n	8009ad8 <_malloc_r+0x28>
 8009acc:	230c      	movs	r3, #12
 8009ace:	603b      	str	r3, [r7, #0]
 8009ad0:	2600      	movs	r6, #0
 8009ad2:	4630      	mov	r0, r6
 8009ad4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ad8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009bac <_malloc_r+0xfc>
 8009adc:	f000 f868 	bl	8009bb0 <__malloc_lock>
 8009ae0:	f8d8 3000 	ldr.w	r3, [r8]
 8009ae4:	461c      	mov	r4, r3
 8009ae6:	bb5c      	cbnz	r4, 8009b40 <_malloc_r+0x90>
 8009ae8:	4629      	mov	r1, r5
 8009aea:	4638      	mov	r0, r7
 8009aec:	f7ff ffc0 	bl	8009a70 <sbrk_aligned>
 8009af0:	1c43      	adds	r3, r0, #1
 8009af2:	4604      	mov	r4, r0
 8009af4:	d155      	bne.n	8009ba2 <_malloc_r+0xf2>
 8009af6:	f8d8 4000 	ldr.w	r4, [r8]
 8009afa:	4626      	mov	r6, r4
 8009afc:	2e00      	cmp	r6, #0
 8009afe:	d145      	bne.n	8009b8c <_malloc_r+0xdc>
 8009b00:	2c00      	cmp	r4, #0
 8009b02:	d048      	beq.n	8009b96 <_malloc_r+0xe6>
 8009b04:	6823      	ldr	r3, [r4, #0]
 8009b06:	4631      	mov	r1, r6
 8009b08:	4638      	mov	r0, r7
 8009b0a:	eb04 0903 	add.w	r9, r4, r3
 8009b0e:	f000 f97f 	bl	8009e10 <_sbrk_r>
 8009b12:	4581      	cmp	r9, r0
 8009b14:	d13f      	bne.n	8009b96 <_malloc_r+0xe6>
 8009b16:	6821      	ldr	r1, [r4, #0]
 8009b18:	1a6d      	subs	r5, r5, r1
 8009b1a:	4629      	mov	r1, r5
 8009b1c:	4638      	mov	r0, r7
 8009b1e:	f7ff ffa7 	bl	8009a70 <sbrk_aligned>
 8009b22:	3001      	adds	r0, #1
 8009b24:	d037      	beq.n	8009b96 <_malloc_r+0xe6>
 8009b26:	6823      	ldr	r3, [r4, #0]
 8009b28:	442b      	add	r3, r5
 8009b2a:	6023      	str	r3, [r4, #0]
 8009b2c:	f8d8 3000 	ldr.w	r3, [r8]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d038      	beq.n	8009ba6 <_malloc_r+0xf6>
 8009b34:	685a      	ldr	r2, [r3, #4]
 8009b36:	42a2      	cmp	r2, r4
 8009b38:	d12b      	bne.n	8009b92 <_malloc_r+0xe2>
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	605a      	str	r2, [r3, #4]
 8009b3e:	e00f      	b.n	8009b60 <_malloc_r+0xb0>
 8009b40:	6822      	ldr	r2, [r4, #0]
 8009b42:	1b52      	subs	r2, r2, r5
 8009b44:	d41f      	bmi.n	8009b86 <_malloc_r+0xd6>
 8009b46:	2a0b      	cmp	r2, #11
 8009b48:	d917      	bls.n	8009b7a <_malloc_r+0xca>
 8009b4a:	1961      	adds	r1, r4, r5
 8009b4c:	42a3      	cmp	r3, r4
 8009b4e:	6025      	str	r5, [r4, #0]
 8009b50:	bf18      	it	ne
 8009b52:	6059      	strne	r1, [r3, #4]
 8009b54:	6863      	ldr	r3, [r4, #4]
 8009b56:	bf08      	it	eq
 8009b58:	f8c8 1000 	streq.w	r1, [r8]
 8009b5c:	5162      	str	r2, [r4, r5]
 8009b5e:	604b      	str	r3, [r1, #4]
 8009b60:	4638      	mov	r0, r7
 8009b62:	f104 060b 	add.w	r6, r4, #11
 8009b66:	f000 f829 	bl	8009bbc <__malloc_unlock>
 8009b6a:	f026 0607 	bic.w	r6, r6, #7
 8009b6e:	1d23      	adds	r3, r4, #4
 8009b70:	1af2      	subs	r2, r6, r3
 8009b72:	d0ae      	beq.n	8009ad2 <_malloc_r+0x22>
 8009b74:	1b9b      	subs	r3, r3, r6
 8009b76:	50a3      	str	r3, [r4, r2]
 8009b78:	e7ab      	b.n	8009ad2 <_malloc_r+0x22>
 8009b7a:	42a3      	cmp	r3, r4
 8009b7c:	6862      	ldr	r2, [r4, #4]
 8009b7e:	d1dd      	bne.n	8009b3c <_malloc_r+0x8c>
 8009b80:	f8c8 2000 	str.w	r2, [r8]
 8009b84:	e7ec      	b.n	8009b60 <_malloc_r+0xb0>
 8009b86:	4623      	mov	r3, r4
 8009b88:	6864      	ldr	r4, [r4, #4]
 8009b8a:	e7ac      	b.n	8009ae6 <_malloc_r+0x36>
 8009b8c:	4634      	mov	r4, r6
 8009b8e:	6876      	ldr	r6, [r6, #4]
 8009b90:	e7b4      	b.n	8009afc <_malloc_r+0x4c>
 8009b92:	4613      	mov	r3, r2
 8009b94:	e7cc      	b.n	8009b30 <_malloc_r+0x80>
 8009b96:	230c      	movs	r3, #12
 8009b98:	603b      	str	r3, [r7, #0]
 8009b9a:	4638      	mov	r0, r7
 8009b9c:	f000 f80e 	bl	8009bbc <__malloc_unlock>
 8009ba0:	e797      	b.n	8009ad2 <_malloc_r+0x22>
 8009ba2:	6025      	str	r5, [r4, #0]
 8009ba4:	e7dc      	b.n	8009b60 <_malloc_r+0xb0>
 8009ba6:	605b      	str	r3, [r3, #4]
 8009ba8:	deff      	udf	#255	; 0xff
 8009baa:	bf00      	nop
 8009bac:	20003e6c 	.word	0x20003e6c

08009bb0 <__malloc_lock>:
 8009bb0:	4801      	ldr	r0, [pc, #4]	; (8009bb8 <__malloc_lock+0x8>)
 8009bb2:	f000 b968 	b.w	8009e86 <__retarget_lock_acquire_recursive>
 8009bb6:	bf00      	nop
 8009bb8:	20003fb0 	.word	0x20003fb0

08009bbc <__malloc_unlock>:
 8009bbc:	4801      	ldr	r0, [pc, #4]	; (8009bc4 <__malloc_unlock+0x8>)
 8009bbe:	f000 b963 	b.w	8009e88 <__retarget_lock_release_recursive>
 8009bc2:	bf00      	nop
 8009bc4:	20003fb0 	.word	0x20003fb0

08009bc8 <srand>:
 8009bc8:	b538      	push	{r3, r4, r5, lr}
 8009bca:	4b10      	ldr	r3, [pc, #64]	; (8009c0c <srand+0x44>)
 8009bcc:	681d      	ldr	r5, [r3, #0]
 8009bce:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8009bd0:	4604      	mov	r4, r0
 8009bd2:	b9b3      	cbnz	r3, 8009c02 <srand+0x3a>
 8009bd4:	2018      	movs	r0, #24
 8009bd6:	f7ff ff43 	bl	8009a60 <malloc>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	6328      	str	r0, [r5, #48]	; 0x30
 8009bde:	b920      	cbnz	r0, 8009bea <srand+0x22>
 8009be0:	4b0b      	ldr	r3, [pc, #44]	; (8009c10 <srand+0x48>)
 8009be2:	480c      	ldr	r0, [pc, #48]	; (8009c14 <srand+0x4c>)
 8009be4:	2146      	movs	r1, #70	; 0x46
 8009be6:	f000 f95f 	bl	8009ea8 <__assert_func>
 8009bea:	490b      	ldr	r1, [pc, #44]	; (8009c18 <srand+0x50>)
 8009bec:	4b0b      	ldr	r3, [pc, #44]	; (8009c1c <srand+0x54>)
 8009bee:	e9c0 1300 	strd	r1, r3, [r0]
 8009bf2:	4b0b      	ldr	r3, [pc, #44]	; (8009c20 <srand+0x58>)
 8009bf4:	6083      	str	r3, [r0, #8]
 8009bf6:	230b      	movs	r3, #11
 8009bf8:	8183      	strh	r3, [r0, #12]
 8009bfa:	2100      	movs	r1, #0
 8009bfc:	2001      	movs	r0, #1
 8009bfe:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8009c02:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8009c04:	2200      	movs	r2, #0
 8009c06:	611c      	str	r4, [r3, #16]
 8009c08:	615a      	str	r2, [r3, #20]
 8009c0a:	bd38      	pop	{r3, r4, r5, pc}
 8009c0c:	20000258 	.word	0x20000258
 8009c10:	0800ac34 	.word	0x0800ac34
 8009c14:	0800ac4b 	.word	0x0800ac4b
 8009c18:	abcd330e 	.word	0xabcd330e
 8009c1c:	e66d1234 	.word	0xe66d1234
 8009c20:	0005deec 	.word	0x0005deec

08009c24 <std>:
 8009c24:	2300      	movs	r3, #0
 8009c26:	b510      	push	{r4, lr}
 8009c28:	4604      	mov	r4, r0
 8009c2a:	e9c0 3300 	strd	r3, r3, [r0]
 8009c2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c32:	6083      	str	r3, [r0, #8]
 8009c34:	8181      	strh	r1, [r0, #12]
 8009c36:	6643      	str	r3, [r0, #100]	; 0x64
 8009c38:	81c2      	strh	r2, [r0, #14]
 8009c3a:	6183      	str	r3, [r0, #24]
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	2208      	movs	r2, #8
 8009c40:	305c      	adds	r0, #92	; 0x5c
 8009c42:	f000 f8b1 	bl	8009da8 <memset>
 8009c46:	4b0d      	ldr	r3, [pc, #52]	; (8009c7c <std+0x58>)
 8009c48:	6263      	str	r3, [r4, #36]	; 0x24
 8009c4a:	4b0d      	ldr	r3, [pc, #52]	; (8009c80 <std+0x5c>)
 8009c4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c4e:	4b0d      	ldr	r3, [pc, #52]	; (8009c84 <std+0x60>)
 8009c50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009c52:	4b0d      	ldr	r3, [pc, #52]	; (8009c88 <std+0x64>)
 8009c54:	6323      	str	r3, [r4, #48]	; 0x30
 8009c56:	4b0d      	ldr	r3, [pc, #52]	; (8009c8c <std+0x68>)
 8009c58:	6224      	str	r4, [r4, #32]
 8009c5a:	429c      	cmp	r4, r3
 8009c5c:	d006      	beq.n	8009c6c <std+0x48>
 8009c5e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009c62:	4294      	cmp	r4, r2
 8009c64:	d002      	beq.n	8009c6c <std+0x48>
 8009c66:	33d0      	adds	r3, #208	; 0xd0
 8009c68:	429c      	cmp	r4, r3
 8009c6a:	d105      	bne.n	8009c78 <std+0x54>
 8009c6c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c74:	f000 b906 	b.w	8009e84 <__retarget_lock_init_recursive>
 8009c78:	bd10      	pop	{r4, pc}
 8009c7a:	bf00      	nop
 8009c7c:	0800a0d9 	.word	0x0800a0d9
 8009c80:	0800a0fb 	.word	0x0800a0fb
 8009c84:	0800a133 	.word	0x0800a133
 8009c88:	0800a157 	.word	0x0800a157
 8009c8c:	20003e74 	.word	0x20003e74

08009c90 <stdio_exit_handler>:
 8009c90:	4a02      	ldr	r2, [pc, #8]	; (8009c9c <stdio_exit_handler+0xc>)
 8009c92:	4903      	ldr	r1, [pc, #12]	; (8009ca0 <stdio_exit_handler+0x10>)
 8009c94:	4803      	ldr	r0, [pc, #12]	; (8009ca4 <stdio_exit_handler+0x14>)
 8009c96:	f000 b869 	b.w	8009d6c <_fwalk_sglue>
 8009c9a:	bf00      	nop
 8009c9c:	20000200 	.word	0x20000200
 8009ca0:	0800a089 	.word	0x0800a089
 8009ca4:	2000020c 	.word	0x2000020c

08009ca8 <cleanup_stdio>:
 8009ca8:	6841      	ldr	r1, [r0, #4]
 8009caa:	4b0c      	ldr	r3, [pc, #48]	; (8009cdc <cleanup_stdio+0x34>)
 8009cac:	4299      	cmp	r1, r3
 8009cae:	b510      	push	{r4, lr}
 8009cb0:	4604      	mov	r4, r0
 8009cb2:	d001      	beq.n	8009cb8 <cleanup_stdio+0x10>
 8009cb4:	f000 f9e8 	bl	800a088 <_fflush_r>
 8009cb8:	68a1      	ldr	r1, [r4, #8]
 8009cba:	4b09      	ldr	r3, [pc, #36]	; (8009ce0 <cleanup_stdio+0x38>)
 8009cbc:	4299      	cmp	r1, r3
 8009cbe:	d002      	beq.n	8009cc6 <cleanup_stdio+0x1e>
 8009cc0:	4620      	mov	r0, r4
 8009cc2:	f000 f9e1 	bl	800a088 <_fflush_r>
 8009cc6:	68e1      	ldr	r1, [r4, #12]
 8009cc8:	4b06      	ldr	r3, [pc, #24]	; (8009ce4 <cleanup_stdio+0x3c>)
 8009cca:	4299      	cmp	r1, r3
 8009ccc:	d004      	beq.n	8009cd8 <cleanup_stdio+0x30>
 8009cce:	4620      	mov	r0, r4
 8009cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cd4:	f000 b9d8 	b.w	800a088 <_fflush_r>
 8009cd8:	bd10      	pop	{r4, pc}
 8009cda:	bf00      	nop
 8009cdc:	20003e74 	.word	0x20003e74
 8009ce0:	20003edc 	.word	0x20003edc
 8009ce4:	20003f44 	.word	0x20003f44

08009ce8 <global_stdio_init.part.0>:
 8009ce8:	b510      	push	{r4, lr}
 8009cea:	4b0b      	ldr	r3, [pc, #44]	; (8009d18 <global_stdio_init.part.0+0x30>)
 8009cec:	4c0b      	ldr	r4, [pc, #44]	; (8009d1c <global_stdio_init.part.0+0x34>)
 8009cee:	4a0c      	ldr	r2, [pc, #48]	; (8009d20 <global_stdio_init.part.0+0x38>)
 8009cf0:	601a      	str	r2, [r3, #0]
 8009cf2:	4620      	mov	r0, r4
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	2104      	movs	r1, #4
 8009cf8:	f7ff ff94 	bl	8009c24 <std>
 8009cfc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009d00:	2201      	movs	r2, #1
 8009d02:	2109      	movs	r1, #9
 8009d04:	f7ff ff8e 	bl	8009c24 <std>
 8009d08:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009d0c:	2202      	movs	r2, #2
 8009d0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d12:	2112      	movs	r1, #18
 8009d14:	f7ff bf86 	b.w	8009c24 <std>
 8009d18:	20003fac 	.word	0x20003fac
 8009d1c:	20003e74 	.word	0x20003e74
 8009d20:	08009c91 	.word	0x08009c91

08009d24 <__sfp_lock_acquire>:
 8009d24:	4801      	ldr	r0, [pc, #4]	; (8009d2c <__sfp_lock_acquire+0x8>)
 8009d26:	f000 b8ae 	b.w	8009e86 <__retarget_lock_acquire_recursive>
 8009d2a:	bf00      	nop
 8009d2c:	20003fb1 	.word	0x20003fb1

08009d30 <__sfp_lock_release>:
 8009d30:	4801      	ldr	r0, [pc, #4]	; (8009d38 <__sfp_lock_release+0x8>)
 8009d32:	f000 b8a9 	b.w	8009e88 <__retarget_lock_release_recursive>
 8009d36:	bf00      	nop
 8009d38:	20003fb1 	.word	0x20003fb1

08009d3c <__sinit>:
 8009d3c:	b510      	push	{r4, lr}
 8009d3e:	4604      	mov	r4, r0
 8009d40:	f7ff fff0 	bl	8009d24 <__sfp_lock_acquire>
 8009d44:	6a23      	ldr	r3, [r4, #32]
 8009d46:	b11b      	cbz	r3, 8009d50 <__sinit+0x14>
 8009d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d4c:	f7ff bff0 	b.w	8009d30 <__sfp_lock_release>
 8009d50:	4b04      	ldr	r3, [pc, #16]	; (8009d64 <__sinit+0x28>)
 8009d52:	6223      	str	r3, [r4, #32]
 8009d54:	4b04      	ldr	r3, [pc, #16]	; (8009d68 <__sinit+0x2c>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d1f5      	bne.n	8009d48 <__sinit+0xc>
 8009d5c:	f7ff ffc4 	bl	8009ce8 <global_stdio_init.part.0>
 8009d60:	e7f2      	b.n	8009d48 <__sinit+0xc>
 8009d62:	bf00      	nop
 8009d64:	08009ca9 	.word	0x08009ca9
 8009d68:	20003fac 	.word	0x20003fac

08009d6c <_fwalk_sglue>:
 8009d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d70:	4607      	mov	r7, r0
 8009d72:	4688      	mov	r8, r1
 8009d74:	4614      	mov	r4, r2
 8009d76:	2600      	movs	r6, #0
 8009d78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d7c:	f1b9 0901 	subs.w	r9, r9, #1
 8009d80:	d505      	bpl.n	8009d8e <_fwalk_sglue+0x22>
 8009d82:	6824      	ldr	r4, [r4, #0]
 8009d84:	2c00      	cmp	r4, #0
 8009d86:	d1f7      	bne.n	8009d78 <_fwalk_sglue+0xc>
 8009d88:	4630      	mov	r0, r6
 8009d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d8e:	89ab      	ldrh	r3, [r5, #12]
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d907      	bls.n	8009da4 <_fwalk_sglue+0x38>
 8009d94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d98:	3301      	adds	r3, #1
 8009d9a:	d003      	beq.n	8009da4 <_fwalk_sglue+0x38>
 8009d9c:	4629      	mov	r1, r5
 8009d9e:	4638      	mov	r0, r7
 8009da0:	47c0      	blx	r8
 8009da2:	4306      	orrs	r6, r0
 8009da4:	3568      	adds	r5, #104	; 0x68
 8009da6:	e7e9      	b.n	8009d7c <_fwalk_sglue+0x10>

08009da8 <memset>:
 8009da8:	4402      	add	r2, r0
 8009daa:	4603      	mov	r3, r0
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d100      	bne.n	8009db2 <memset+0xa>
 8009db0:	4770      	bx	lr
 8009db2:	f803 1b01 	strb.w	r1, [r3], #1
 8009db6:	e7f9      	b.n	8009dac <memset+0x4>

08009db8 <time>:
 8009db8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009dba:	4b0b      	ldr	r3, [pc, #44]	; (8009de8 <time+0x30>)
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	4669      	mov	r1, sp
 8009dc0:	4604      	mov	r4, r0
 8009dc2:	6818      	ldr	r0, [r3, #0]
 8009dc4:	f000 f812 	bl	8009dec <_gettimeofday_r>
 8009dc8:	2800      	cmp	r0, #0
 8009dca:	bfbe      	ittt	lt
 8009dcc:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 8009dd0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009dd4:	e9cd 2300 	strdlt	r2, r3, [sp]
 8009dd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ddc:	b10c      	cbz	r4, 8009de2 <time+0x2a>
 8009dde:	e9c4 0100 	strd	r0, r1, [r4]
 8009de2:	b004      	add	sp, #16
 8009de4:	bd10      	pop	{r4, pc}
 8009de6:	bf00      	nop
 8009de8:	20000258 	.word	0x20000258

08009dec <_gettimeofday_r>:
 8009dec:	b538      	push	{r3, r4, r5, lr}
 8009dee:	4d07      	ldr	r5, [pc, #28]	; (8009e0c <_gettimeofday_r+0x20>)
 8009df0:	2300      	movs	r3, #0
 8009df2:	4604      	mov	r4, r0
 8009df4:	4608      	mov	r0, r1
 8009df6:	4611      	mov	r1, r2
 8009df8:	602b      	str	r3, [r5, #0]
 8009dfa:	f000 fe41 	bl	800aa80 <_gettimeofday>
 8009dfe:	1c43      	adds	r3, r0, #1
 8009e00:	d102      	bne.n	8009e08 <_gettimeofday_r+0x1c>
 8009e02:	682b      	ldr	r3, [r5, #0]
 8009e04:	b103      	cbz	r3, 8009e08 <_gettimeofday_r+0x1c>
 8009e06:	6023      	str	r3, [r4, #0]
 8009e08:	bd38      	pop	{r3, r4, r5, pc}
 8009e0a:	bf00      	nop
 8009e0c:	20003fb4 	.word	0x20003fb4

08009e10 <_sbrk_r>:
 8009e10:	b538      	push	{r3, r4, r5, lr}
 8009e12:	4d06      	ldr	r5, [pc, #24]	; (8009e2c <_sbrk_r+0x1c>)
 8009e14:	2300      	movs	r3, #0
 8009e16:	4604      	mov	r4, r0
 8009e18:	4608      	mov	r0, r1
 8009e1a:	602b      	str	r3, [r5, #0]
 8009e1c:	f7ff fc1e 	bl	800965c <_sbrk>
 8009e20:	1c43      	adds	r3, r0, #1
 8009e22:	d102      	bne.n	8009e2a <_sbrk_r+0x1a>
 8009e24:	682b      	ldr	r3, [r5, #0]
 8009e26:	b103      	cbz	r3, 8009e2a <_sbrk_r+0x1a>
 8009e28:	6023      	str	r3, [r4, #0]
 8009e2a:	bd38      	pop	{r3, r4, r5, pc}
 8009e2c:	20003fb4 	.word	0x20003fb4

08009e30 <__errno>:
 8009e30:	4b01      	ldr	r3, [pc, #4]	; (8009e38 <__errno+0x8>)
 8009e32:	6818      	ldr	r0, [r3, #0]
 8009e34:	4770      	bx	lr
 8009e36:	bf00      	nop
 8009e38:	20000258 	.word	0x20000258

08009e3c <__libc_init_array>:
 8009e3c:	b570      	push	{r4, r5, r6, lr}
 8009e3e:	4d0d      	ldr	r5, [pc, #52]	; (8009e74 <__libc_init_array+0x38>)
 8009e40:	4c0d      	ldr	r4, [pc, #52]	; (8009e78 <__libc_init_array+0x3c>)
 8009e42:	1b64      	subs	r4, r4, r5
 8009e44:	10a4      	asrs	r4, r4, #2
 8009e46:	2600      	movs	r6, #0
 8009e48:	42a6      	cmp	r6, r4
 8009e4a:	d109      	bne.n	8009e60 <__libc_init_array+0x24>
 8009e4c:	4d0b      	ldr	r5, [pc, #44]	; (8009e7c <__libc_init_array+0x40>)
 8009e4e:	4c0c      	ldr	r4, [pc, #48]	; (8009e80 <__libc_init_array+0x44>)
 8009e50:	f000 fe1e 	bl	800aa90 <_init>
 8009e54:	1b64      	subs	r4, r4, r5
 8009e56:	10a4      	asrs	r4, r4, #2
 8009e58:	2600      	movs	r6, #0
 8009e5a:	42a6      	cmp	r6, r4
 8009e5c:	d105      	bne.n	8009e6a <__libc_init_array+0x2e>
 8009e5e:	bd70      	pop	{r4, r5, r6, pc}
 8009e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e64:	4798      	blx	r3
 8009e66:	3601      	adds	r6, #1
 8009e68:	e7ee      	b.n	8009e48 <__libc_init_array+0xc>
 8009e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e6e:	4798      	blx	r3
 8009e70:	3601      	adds	r6, #1
 8009e72:	e7f2      	b.n	8009e5a <__libc_init_array+0x1e>
 8009e74:	0800ad1c 	.word	0x0800ad1c
 8009e78:	0800ad1c 	.word	0x0800ad1c
 8009e7c:	0800ad1c 	.word	0x0800ad1c
 8009e80:	0800ad20 	.word	0x0800ad20

08009e84 <__retarget_lock_init_recursive>:
 8009e84:	4770      	bx	lr

08009e86 <__retarget_lock_acquire_recursive>:
 8009e86:	4770      	bx	lr

08009e88 <__retarget_lock_release_recursive>:
 8009e88:	4770      	bx	lr

08009e8a <memcpy>:
 8009e8a:	440a      	add	r2, r1
 8009e8c:	4291      	cmp	r1, r2
 8009e8e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009e92:	d100      	bne.n	8009e96 <memcpy+0xc>
 8009e94:	4770      	bx	lr
 8009e96:	b510      	push	{r4, lr}
 8009e98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ea0:	4291      	cmp	r1, r2
 8009ea2:	d1f9      	bne.n	8009e98 <memcpy+0xe>
 8009ea4:	bd10      	pop	{r4, pc}
	...

08009ea8 <__assert_func>:
 8009ea8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009eaa:	4614      	mov	r4, r2
 8009eac:	461a      	mov	r2, r3
 8009eae:	4b09      	ldr	r3, [pc, #36]	; (8009ed4 <__assert_func+0x2c>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4605      	mov	r5, r0
 8009eb4:	68d8      	ldr	r0, [r3, #12]
 8009eb6:	b14c      	cbz	r4, 8009ecc <__assert_func+0x24>
 8009eb8:	4b07      	ldr	r3, [pc, #28]	; (8009ed8 <__assert_func+0x30>)
 8009eba:	9100      	str	r1, [sp, #0]
 8009ebc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ec0:	4906      	ldr	r1, [pc, #24]	; (8009edc <__assert_func+0x34>)
 8009ec2:	462b      	mov	r3, r5
 8009ec4:	f000 f94c 	bl	800a160 <fiprintf>
 8009ec8:	f000 f9a2 	bl	800a210 <abort>
 8009ecc:	4b04      	ldr	r3, [pc, #16]	; (8009ee0 <__assert_func+0x38>)
 8009ece:	461c      	mov	r4, r3
 8009ed0:	e7f3      	b.n	8009eba <__assert_func+0x12>
 8009ed2:	bf00      	nop
 8009ed4:	20000258 	.word	0x20000258
 8009ed8:	0800aca3 	.word	0x0800aca3
 8009edc:	0800acb0 	.word	0x0800acb0
 8009ee0:	0800acde 	.word	0x0800acde

08009ee4 <_free_r>:
 8009ee4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ee6:	2900      	cmp	r1, #0
 8009ee8:	d044      	beq.n	8009f74 <_free_r+0x90>
 8009eea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009eee:	9001      	str	r0, [sp, #4]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	f1a1 0404 	sub.w	r4, r1, #4
 8009ef6:	bfb8      	it	lt
 8009ef8:	18e4      	addlt	r4, r4, r3
 8009efa:	f7ff fe59 	bl	8009bb0 <__malloc_lock>
 8009efe:	4a1e      	ldr	r2, [pc, #120]	; (8009f78 <_free_r+0x94>)
 8009f00:	9801      	ldr	r0, [sp, #4]
 8009f02:	6813      	ldr	r3, [r2, #0]
 8009f04:	b933      	cbnz	r3, 8009f14 <_free_r+0x30>
 8009f06:	6063      	str	r3, [r4, #4]
 8009f08:	6014      	str	r4, [r2, #0]
 8009f0a:	b003      	add	sp, #12
 8009f0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f10:	f7ff be54 	b.w	8009bbc <__malloc_unlock>
 8009f14:	42a3      	cmp	r3, r4
 8009f16:	d908      	bls.n	8009f2a <_free_r+0x46>
 8009f18:	6825      	ldr	r5, [r4, #0]
 8009f1a:	1961      	adds	r1, r4, r5
 8009f1c:	428b      	cmp	r3, r1
 8009f1e:	bf01      	itttt	eq
 8009f20:	6819      	ldreq	r1, [r3, #0]
 8009f22:	685b      	ldreq	r3, [r3, #4]
 8009f24:	1949      	addeq	r1, r1, r5
 8009f26:	6021      	streq	r1, [r4, #0]
 8009f28:	e7ed      	b.n	8009f06 <_free_r+0x22>
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	b10b      	cbz	r3, 8009f34 <_free_r+0x50>
 8009f30:	42a3      	cmp	r3, r4
 8009f32:	d9fa      	bls.n	8009f2a <_free_r+0x46>
 8009f34:	6811      	ldr	r1, [r2, #0]
 8009f36:	1855      	adds	r5, r2, r1
 8009f38:	42a5      	cmp	r5, r4
 8009f3a:	d10b      	bne.n	8009f54 <_free_r+0x70>
 8009f3c:	6824      	ldr	r4, [r4, #0]
 8009f3e:	4421      	add	r1, r4
 8009f40:	1854      	adds	r4, r2, r1
 8009f42:	42a3      	cmp	r3, r4
 8009f44:	6011      	str	r1, [r2, #0]
 8009f46:	d1e0      	bne.n	8009f0a <_free_r+0x26>
 8009f48:	681c      	ldr	r4, [r3, #0]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	6053      	str	r3, [r2, #4]
 8009f4e:	440c      	add	r4, r1
 8009f50:	6014      	str	r4, [r2, #0]
 8009f52:	e7da      	b.n	8009f0a <_free_r+0x26>
 8009f54:	d902      	bls.n	8009f5c <_free_r+0x78>
 8009f56:	230c      	movs	r3, #12
 8009f58:	6003      	str	r3, [r0, #0]
 8009f5a:	e7d6      	b.n	8009f0a <_free_r+0x26>
 8009f5c:	6825      	ldr	r5, [r4, #0]
 8009f5e:	1961      	adds	r1, r4, r5
 8009f60:	428b      	cmp	r3, r1
 8009f62:	bf04      	itt	eq
 8009f64:	6819      	ldreq	r1, [r3, #0]
 8009f66:	685b      	ldreq	r3, [r3, #4]
 8009f68:	6063      	str	r3, [r4, #4]
 8009f6a:	bf04      	itt	eq
 8009f6c:	1949      	addeq	r1, r1, r5
 8009f6e:	6021      	streq	r1, [r4, #0]
 8009f70:	6054      	str	r4, [r2, #4]
 8009f72:	e7ca      	b.n	8009f0a <_free_r+0x26>
 8009f74:	b003      	add	sp, #12
 8009f76:	bd30      	pop	{r4, r5, pc}
 8009f78:	20003e6c 	.word	0x20003e6c

08009f7c <__sflush_r>:
 8009f7c:	898a      	ldrh	r2, [r1, #12]
 8009f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f82:	4605      	mov	r5, r0
 8009f84:	0710      	lsls	r0, r2, #28
 8009f86:	460c      	mov	r4, r1
 8009f88:	d458      	bmi.n	800a03c <__sflush_r+0xc0>
 8009f8a:	684b      	ldr	r3, [r1, #4]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	dc05      	bgt.n	8009f9c <__sflush_r+0x20>
 8009f90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	dc02      	bgt.n	8009f9c <__sflush_r+0x20>
 8009f96:	2000      	movs	r0, #0
 8009f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f9e:	2e00      	cmp	r6, #0
 8009fa0:	d0f9      	beq.n	8009f96 <__sflush_r+0x1a>
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009fa8:	682f      	ldr	r7, [r5, #0]
 8009faa:	6a21      	ldr	r1, [r4, #32]
 8009fac:	602b      	str	r3, [r5, #0]
 8009fae:	d032      	beq.n	800a016 <__sflush_r+0x9a>
 8009fb0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009fb2:	89a3      	ldrh	r3, [r4, #12]
 8009fb4:	075a      	lsls	r2, r3, #29
 8009fb6:	d505      	bpl.n	8009fc4 <__sflush_r+0x48>
 8009fb8:	6863      	ldr	r3, [r4, #4]
 8009fba:	1ac0      	subs	r0, r0, r3
 8009fbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009fbe:	b10b      	cbz	r3, 8009fc4 <__sflush_r+0x48>
 8009fc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009fc2:	1ac0      	subs	r0, r0, r3
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	4602      	mov	r2, r0
 8009fc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009fca:	6a21      	ldr	r1, [r4, #32]
 8009fcc:	4628      	mov	r0, r5
 8009fce:	47b0      	blx	r6
 8009fd0:	1c43      	adds	r3, r0, #1
 8009fd2:	89a3      	ldrh	r3, [r4, #12]
 8009fd4:	d106      	bne.n	8009fe4 <__sflush_r+0x68>
 8009fd6:	6829      	ldr	r1, [r5, #0]
 8009fd8:	291d      	cmp	r1, #29
 8009fda:	d82b      	bhi.n	800a034 <__sflush_r+0xb8>
 8009fdc:	4a29      	ldr	r2, [pc, #164]	; (800a084 <__sflush_r+0x108>)
 8009fde:	410a      	asrs	r2, r1
 8009fe0:	07d6      	lsls	r6, r2, #31
 8009fe2:	d427      	bmi.n	800a034 <__sflush_r+0xb8>
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	6062      	str	r2, [r4, #4]
 8009fe8:	04d9      	lsls	r1, r3, #19
 8009fea:	6922      	ldr	r2, [r4, #16]
 8009fec:	6022      	str	r2, [r4, #0]
 8009fee:	d504      	bpl.n	8009ffa <__sflush_r+0x7e>
 8009ff0:	1c42      	adds	r2, r0, #1
 8009ff2:	d101      	bne.n	8009ff8 <__sflush_r+0x7c>
 8009ff4:	682b      	ldr	r3, [r5, #0]
 8009ff6:	b903      	cbnz	r3, 8009ffa <__sflush_r+0x7e>
 8009ff8:	6560      	str	r0, [r4, #84]	; 0x54
 8009ffa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ffc:	602f      	str	r7, [r5, #0]
 8009ffe:	2900      	cmp	r1, #0
 800a000:	d0c9      	beq.n	8009f96 <__sflush_r+0x1a>
 800a002:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a006:	4299      	cmp	r1, r3
 800a008:	d002      	beq.n	800a010 <__sflush_r+0x94>
 800a00a:	4628      	mov	r0, r5
 800a00c:	f7ff ff6a 	bl	8009ee4 <_free_r>
 800a010:	2000      	movs	r0, #0
 800a012:	6360      	str	r0, [r4, #52]	; 0x34
 800a014:	e7c0      	b.n	8009f98 <__sflush_r+0x1c>
 800a016:	2301      	movs	r3, #1
 800a018:	4628      	mov	r0, r5
 800a01a:	47b0      	blx	r6
 800a01c:	1c41      	adds	r1, r0, #1
 800a01e:	d1c8      	bne.n	8009fb2 <__sflush_r+0x36>
 800a020:	682b      	ldr	r3, [r5, #0]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d0c5      	beq.n	8009fb2 <__sflush_r+0x36>
 800a026:	2b1d      	cmp	r3, #29
 800a028:	d001      	beq.n	800a02e <__sflush_r+0xb2>
 800a02a:	2b16      	cmp	r3, #22
 800a02c:	d101      	bne.n	800a032 <__sflush_r+0xb6>
 800a02e:	602f      	str	r7, [r5, #0]
 800a030:	e7b1      	b.n	8009f96 <__sflush_r+0x1a>
 800a032:	89a3      	ldrh	r3, [r4, #12]
 800a034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a038:	81a3      	strh	r3, [r4, #12]
 800a03a:	e7ad      	b.n	8009f98 <__sflush_r+0x1c>
 800a03c:	690f      	ldr	r7, [r1, #16]
 800a03e:	2f00      	cmp	r7, #0
 800a040:	d0a9      	beq.n	8009f96 <__sflush_r+0x1a>
 800a042:	0793      	lsls	r3, r2, #30
 800a044:	680e      	ldr	r6, [r1, #0]
 800a046:	bf08      	it	eq
 800a048:	694b      	ldreq	r3, [r1, #20]
 800a04a:	600f      	str	r7, [r1, #0]
 800a04c:	bf18      	it	ne
 800a04e:	2300      	movne	r3, #0
 800a050:	eba6 0807 	sub.w	r8, r6, r7
 800a054:	608b      	str	r3, [r1, #8]
 800a056:	f1b8 0f00 	cmp.w	r8, #0
 800a05a:	dd9c      	ble.n	8009f96 <__sflush_r+0x1a>
 800a05c:	6a21      	ldr	r1, [r4, #32]
 800a05e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a060:	4643      	mov	r3, r8
 800a062:	463a      	mov	r2, r7
 800a064:	4628      	mov	r0, r5
 800a066:	47b0      	blx	r6
 800a068:	2800      	cmp	r0, #0
 800a06a:	dc06      	bgt.n	800a07a <__sflush_r+0xfe>
 800a06c:	89a3      	ldrh	r3, [r4, #12]
 800a06e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a072:	81a3      	strh	r3, [r4, #12]
 800a074:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a078:	e78e      	b.n	8009f98 <__sflush_r+0x1c>
 800a07a:	4407      	add	r7, r0
 800a07c:	eba8 0800 	sub.w	r8, r8, r0
 800a080:	e7e9      	b.n	800a056 <__sflush_r+0xda>
 800a082:	bf00      	nop
 800a084:	dfbffffe 	.word	0xdfbffffe

0800a088 <_fflush_r>:
 800a088:	b538      	push	{r3, r4, r5, lr}
 800a08a:	690b      	ldr	r3, [r1, #16]
 800a08c:	4605      	mov	r5, r0
 800a08e:	460c      	mov	r4, r1
 800a090:	b913      	cbnz	r3, 800a098 <_fflush_r+0x10>
 800a092:	2500      	movs	r5, #0
 800a094:	4628      	mov	r0, r5
 800a096:	bd38      	pop	{r3, r4, r5, pc}
 800a098:	b118      	cbz	r0, 800a0a2 <_fflush_r+0x1a>
 800a09a:	6a03      	ldr	r3, [r0, #32]
 800a09c:	b90b      	cbnz	r3, 800a0a2 <_fflush_r+0x1a>
 800a09e:	f7ff fe4d 	bl	8009d3c <__sinit>
 800a0a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d0f3      	beq.n	800a092 <_fflush_r+0xa>
 800a0aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a0ac:	07d0      	lsls	r0, r2, #31
 800a0ae:	d404      	bmi.n	800a0ba <_fflush_r+0x32>
 800a0b0:	0599      	lsls	r1, r3, #22
 800a0b2:	d402      	bmi.n	800a0ba <_fflush_r+0x32>
 800a0b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0b6:	f7ff fee6 	bl	8009e86 <__retarget_lock_acquire_recursive>
 800a0ba:	4628      	mov	r0, r5
 800a0bc:	4621      	mov	r1, r4
 800a0be:	f7ff ff5d 	bl	8009f7c <__sflush_r>
 800a0c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a0c4:	07da      	lsls	r2, r3, #31
 800a0c6:	4605      	mov	r5, r0
 800a0c8:	d4e4      	bmi.n	800a094 <_fflush_r+0xc>
 800a0ca:	89a3      	ldrh	r3, [r4, #12]
 800a0cc:	059b      	lsls	r3, r3, #22
 800a0ce:	d4e1      	bmi.n	800a094 <_fflush_r+0xc>
 800a0d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0d2:	f7ff fed9 	bl	8009e88 <__retarget_lock_release_recursive>
 800a0d6:	e7dd      	b.n	800a094 <_fflush_r+0xc>

0800a0d8 <__sread>:
 800a0d8:	b510      	push	{r4, lr}
 800a0da:	460c      	mov	r4, r1
 800a0dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0e0:	f000 f872 	bl	800a1c8 <_read_r>
 800a0e4:	2800      	cmp	r0, #0
 800a0e6:	bfab      	itete	ge
 800a0e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a0ea:	89a3      	ldrhlt	r3, [r4, #12]
 800a0ec:	181b      	addge	r3, r3, r0
 800a0ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a0f2:	bfac      	ite	ge
 800a0f4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a0f6:	81a3      	strhlt	r3, [r4, #12]
 800a0f8:	bd10      	pop	{r4, pc}

0800a0fa <__swrite>:
 800a0fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0fe:	461f      	mov	r7, r3
 800a100:	898b      	ldrh	r3, [r1, #12]
 800a102:	05db      	lsls	r3, r3, #23
 800a104:	4605      	mov	r5, r0
 800a106:	460c      	mov	r4, r1
 800a108:	4616      	mov	r6, r2
 800a10a:	d505      	bpl.n	800a118 <__swrite+0x1e>
 800a10c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a110:	2302      	movs	r3, #2
 800a112:	2200      	movs	r2, #0
 800a114:	f000 f846 	bl	800a1a4 <_lseek_r>
 800a118:	89a3      	ldrh	r3, [r4, #12]
 800a11a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a11e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a122:	81a3      	strh	r3, [r4, #12]
 800a124:	4632      	mov	r2, r6
 800a126:	463b      	mov	r3, r7
 800a128:	4628      	mov	r0, r5
 800a12a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a12e:	f000 b85d 	b.w	800a1ec <_write_r>

0800a132 <__sseek>:
 800a132:	b510      	push	{r4, lr}
 800a134:	460c      	mov	r4, r1
 800a136:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a13a:	f000 f833 	bl	800a1a4 <_lseek_r>
 800a13e:	1c43      	adds	r3, r0, #1
 800a140:	89a3      	ldrh	r3, [r4, #12]
 800a142:	bf15      	itete	ne
 800a144:	6560      	strne	r0, [r4, #84]	; 0x54
 800a146:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a14a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a14e:	81a3      	strheq	r3, [r4, #12]
 800a150:	bf18      	it	ne
 800a152:	81a3      	strhne	r3, [r4, #12]
 800a154:	bd10      	pop	{r4, pc}

0800a156 <__sclose>:
 800a156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a15a:	f000 b813 	b.w	800a184 <_close_r>
	...

0800a160 <fiprintf>:
 800a160:	b40e      	push	{r1, r2, r3}
 800a162:	b503      	push	{r0, r1, lr}
 800a164:	4601      	mov	r1, r0
 800a166:	ab03      	add	r3, sp, #12
 800a168:	4805      	ldr	r0, [pc, #20]	; (800a180 <fiprintf+0x20>)
 800a16a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a16e:	6800      	ldr	r0, [r0, #0]
 800a170:	9301      	str	r3, [sp, #4]
 800a172:	f000 f87d 	bl	800a270 <_vfiprintf_r>
 800a176:	b002      	add	sp, #8
 800a178:	f85d eb04 	ldr.w	lr, [sp], #4
 800a17c:	b003      	add	sp, #12
 800a17e:	4770      	bx	lr
 800a180:	20000258 	.word	0x20000258

0800a184 <_close_r>:
 800a184:	b538      	push	{r3, r4, r5, lr}
 800a186:	4d06      	ldr	r5, [pc, #24]	; (800a1a0 <_close_r+0x1c>)
 800a188:	2300      	movs	r3, #0
 800a18a:	4604      	mov	r4, r0
 800a18c:	4608      	mov	r0, r1
 800a18e:	602b      	str	r3, [r5, #0]
 800a190:	f7ff fa2f 	bl	80095f2 <_close>
 800a194:	1c43      	adds	r3, r0, #1
 800a196:	d102      	bne.n	800a19e <_close_r+0x1a>
 800a198:	682b      	ldr	r3, [r5, #0]
 800a19a:	b103      	cbz	r3, 800a19e <_close_r+0x1a>
 800a19c:	6023      	str	r3, [r4, #0]
 800a19e:	bd38      	pop	{r3, r4, r5, pc}
 800a1a0:	20003fb4 	.word	0x20003fb4

0800a1a4 <_lseek_r>:
 800a1a4:	b538      	push	{r3, r4, r5, lr}
 800a1a6:	4d07      	ldr	r5, [pc, #28]	; (800a1c4 <_lseek_r+0x20>)
 800a1a8:	4604      	mov	r4, r0
 800a1aa:	4608      	mov	r0, r1
 800a1ac:	4611      	mov	r1, r2
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	602a      	str	r2, [r5, #0]
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	f7ff fa44 	bl	8009640 <_lseek>
 800a1b8:	1c43      	adds	r3, r0, #1
 800a1ba:	d102      	bne.n	800a1c2 <_lseek_r+0x1e>
 800a1bc:	682b      	ldr	r3, [r5, #0]
 800a1be:	b103      	cbz	r3, 800a1c2 <_lseek_r+0x1e>
 800a1c0:	6023      	str	r3, [r4, #0]
 800a1c2:	bd38      	pop	{r3, r4, r5, pc}
 800a1c4:	20003fb4 	.word	0x20003fb4

0800a1c8 <_read_r>:
 800a1c8:	b538      	push	{r3, r4, r5, lr}
 800a1ca:	4d07      	ldr	r5, [pc, #28]	; (800a1e8 <_read_r+0x20>)
 800a1cc:	4604      	mov	r4, r0
 800a1ce:	4608      	mov	r0, r1
 800a1d0:	4611      	mov	r1, r2
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	602a      	str	r2, [r5, #0]
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	f7ff f9d2 	bl	8009580 <_read>
 800a1dc:	1c43      	adds	r3, r0, #1
 800a1de:	d102      	bne.n	800a1e6 <_read_r+0x1e>
 800a1e0:	682b      	ldr	r3, [r5, #0]
 800a1e2:	b103      	cbz	r3, 800a1e6 <_read_r+0x1e>
 800a1e4:	6023      	str	r3, [r4, #0]
 800a1e6:	bd38      	pop	{r3, r4, r5, pc}
 800a1e8:	20003fb4 	.word	0x20003fb4

0800a1ec <_write_r>:
 800a1ec:	b538      	push	{r3, r4, r5, lr}
 800a1ee:	4d07      	ldr	r5, [pc, #28]	; (800a20c <_write_r+0x20>)
 800a1f0:	4604      	mov	r4, r0
 800a1f2:	4608      	mov	r0, r1
 800a1f4:	4611      	mov	r1, r2
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	602a      	str	r2, [r5, #0]
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	f7ff f9dd 	bl	80095ba <_write>
 800a200:	1c43      	adds	r3, r0, #1
 800a202:	d102      	bne.n	800a20a <_write_r+0x1e>
 800a204:	682b      	ldr	r3, [r5, #0]
 800a206:	b103      	cbz	r3, 800a20a <_write_r+0x1e>
 800a208:	6023      	str	r3, [r4, #0]
 800a20a:	bd38      	pop	{r3, r4, r5, pc}
 800a20c:	20003fb4 	.word	0x20003fb4

0800a210 <abort>:
 800a210:	b508      	push	{r3, lr}
 800a212:	2006      	movs	r0, #6
 800a214:	f000 fc18 	bl	800aa48 <raise>
 800a218:	2001      	movs	r0, #1
 800a21a:	f7ff f9a7 	bl	800956c <_exit>

0800a21e <__sfputc_r>:
 800a21e:	6893      	ldr	r3, [r2, #8]
 800a220:	3b01      	subs	r3, #1
 800a222:	2b00      	cmp	r3, #0
 800a224:	b410      	push	{r4}
 800a226:	6093      	str	r3, [r2, #8]
 800a228:	da08      	bge.n	800a23c <__sfputc_r+0x1e>
 800a22a:	6994      	ldr	r4, [r2, #24]
 800a22c:	42a3      	cmp	r3, r4
 800a22e:	db01      	blt.n	800a234 <__sfputc_r+0x16>
 800a230:	290a      	cmp	r1, #10
 800a232:	d103      	bne.n	800a23c <__sfputc_r+0x1e>
 800a234:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a238:	f000 bac4 	b.w	800a7c4 <__swbuf_r>
 800a23c:	6813      	ldr	r3, [r2, #0]
 800a23e:	1c58      	adds	r0, r3, #1
 800a240:	6010      	str	r0, [r2, #0]
 800a242:	7019      	strb	r1, [r3, #0]
 800a244:	4608      	mov	r0, r1
 800a246:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <__sfputs_r>:
 800a24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a24e:	4606      	mov	r6, r0
 800a250:	460f      	mov	r7, r1
 800a252:	4614      	mov	r4, r2
 800a254:	18d5      	adds	r5, r2, r3
 800a256:	42ac      	cmp	r4, r5
 800a258:	d101      	bne.n	800a25e <__sfputs_r+0x12>
 800a25a:	2000      	movs	r0, #0
 800a25c:	e007      	b.n	800a26e <__sfputs_r+0x22>
 800a25e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a262:	463a      	mov	r2, r7
 800a264:	4630      	mov	r0, r6
 800a266:	f7ff ffda 	bl	800a21e <__sfputc_r>
 800a26a:	1c43      	adds	r3, r0, #1
 800a26c:	d1f3      	bne.n	800a256 <__sfputs_r+0xa>
 800a26e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a270 <_vfiprintf_r>:
 800a270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a274:	460d      	mov	r5, r1
 800a276:	b09d      	sub	sp, #116	; 0x74
 800a278:	4614      	mov	r4, r2
 800a27a:	4698      	mov	r8, r3
 800a27c:	4606      	mov	r6, r0
 800a27e:	b118      	cbz	r0, 800a288 <_vfiprintf_r+0x18>
 800a280:	6a03      	ldr	r3, [r0, #32]
 800a282:	b90b      	cbnz	r3, 800a288 <_vfiprintf_r+0x18>
 800a284:	f7ff fd5a 	bl	8009d3c <__sinit>
 800a288:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a28a:	07d9      	lsls	r1, r3, #31
 800a28c:	d405      	bmi.n	800a29a <_vfiprintf_r+0x2a>
 800a28e:	89ab      	ldrh	r3, [r5, #12]
 800a290:	059a      	lsls	r2, r3, #22
 800a292:	d402      	bmi.n	800a29a <_vfiprintf_r+0x2a>
 800a294:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a296:	f7ff fdf6 	bl	8009e86 <__retarget_lock_acquire_recursive>
 800a29a:	89ab      	ldrh	r3, [r5, #12]
 800a29c:	071b      	lsls	r3, r3, #28
 800a29e:	d501      	bpl.n	800a2a4 <_vfiprintf_r+0x34>
 800a2a0:	692b      	ldr	r3, [r5, #16]
 800a2a2:	b99b      	cbnz	r3, 800a2cc <_vfiprintf_r+0x5c>
 800a2a4:	4629      	mov	r1, r5
 800a2a6:	4630      	mov	r0, r6
 800a2a8:	f000 faca 	bl	800a840 <__swsetup_r>
 800a2ac:	b170      	cbz	r0, 800a2cc <_vfiprintf_r+0x5c>
 800a2ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2b0:	07dc      	lsls	r4, r3, #31
 800a2b2:	d504      	bpl.n	800a2be <_vfiprintf_r+0x4e>
 800a2b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a2b8:	b01d      	add	sp, #116	; 0x74
 800a2ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2be:	89ab      	ldrh	r3, [r5, #12]
 800a2c0:	0598      	lsls	r0, r3, #22
 800a2c2:	d4f7      	bmi.n	800a2b4 <_vfiprintf_r+0x44>
 800a2c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2c6:	f7ff fddf 	bl	8009e88 <__retarget_lock_release_recursive>
 800a2ca:	e7f3      	b.n	800a2b4 <_vfiprintf_r+0x44>
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	9309      	str	r3, [sp, #36]	; 0x24
 800a2d0:	2320      	movs	r3, #32
 800a2d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2da:	2330      	movs	r3, #48	; 0x30
 800a2dc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a490 <_vfiprintf_r+0x220>
 800a2e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2e4:	f04f 0901 	mov.w	r9, #1
 800a2e8:	4623      	mov	r3, r4
 800a2ea:	469a      	mov	sl, r3
 800a2ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2f0:	b10a      	cbz	r2, 800a2f6 <_vfiprintf_r+0x86>
 800a2f2:	2a25      	cmp	r2, #37	; 0x25
 800a2f4:	d1f9      	bne.n	800a2ea <_vfiprintf_r+0x7a>
 800a2f6:	ebba 0b04 	subs.w	fp, sl, r4
 800a2fa:	d00b      	beq.n	800a314 <_vfiprintf_r+0xa4>
 800a2fc:	465b      	mov	r3, fp
 800a2fe:	4622      	mov	r2, r4
 800a300:	4629      	mov	r1, r5
 800a302:	4630      	mov	r0, r6
 800a304:	f7ff ffa2 	bl	800a24c <__sfputs_r>
 800a308:	3001      	adds	r0, #1
 800a30a:	f000 80a9 	beq.w	800a460 <_vfiprintf_r+0x1f0>
 800a30e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a310:	445a      	add	r2, fp
 800a312:	9209      	str	r2, [sp, #36]	; 0x24
 800a314:	f89a 3000 	ldrb.w	r3, [sl]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	f000 80a1 	beq.w	800a460 <_vfiprintf_r+0x1f0>
 800a31e:	2300      	movs	r3, #0
 800a320:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a324:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a328:	f10a 0a01 	add.w	sl, sl, #1
 800a32c:	9304      	str	r3, [sp, #16]
 800a32e:	9307      	str	r3, [sp, #28]
 800a330:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a334:	931a      	str	r3, [sp, #104]	; 0x68
 800a336:	4654      	mov	r4, sl
 800a338:	2205      	movs	r2, #5
 800a33a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a33e:	4854      	ldr	r0, [pc, #336]	; (800a490 <_vfiprintf_r+0x220>)
 800a340:	f7f5 ff46 	bl	80001d0 <memchr>
 800a344:	9a04      	ldr	r2, [sp, #16]
 800a346:	b9d8      	cbnz	r0, 800a380 <_vfiprintf_r+0x110>
 800a348:	06d1      	lsls	r1, r2, #27
 800a34a:	bf44      	itt	mi
 800a34c:	2320      	movmi	r3, #32
 800a34e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a352:	0713      	lsls	r3, r2, #28
 800a354:	bf44      	itt	mi
 800a356:	232b      	movmi	r3, #43	; 0x2b
 800a358:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a35c:	f89a 3000 	ldrb.w	r3, [sl]
 800a360:	2b2a      	cmp	r3, #42	; 0x2a
 800a362:	d015      	beq.n	800a390 <_vfiprintf_r+0x120>
 800a364:	9a07      	ldr	r2, [sp, #28]
 800a366:	4654      	mov	r4, sl
 800a368:	2000      	movs	r0, #0
 800a36a:	f04f 0c0a 	mov.w	ip, #10
 800a36e:	4621      	mov	r1, r4
 800a370:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a374:	3b30      	subs	r3, #48	; 0x30
 800a376:	2b09      	cmp	r3, #9
 800a378:	d94d      	bls.n	800a416 <_vfiprintf_r+0x1a6>
 800a37a:	b1b0      	cbz	r0, 800a3aa <_vfiprintf_r+0x13a>
 800a37c:	9207      	str	r2, [sp, #28]
 800a37e:	e014      	b.n	800a3aa <_vfiprintf_r+0x13a>
 800a380:	eba0 0308 	sub.w	r3, r0, r8
 800a384:	fa09 f303 	lsl.w	r3, r9, r3
 800a388:	4313      	orrs	r3, r2
 800a38a:	9304      	str	r3, [sp, #16]
 800a38c:	46a2      	mov	sl, r4
 800a38e:	e7d2      	b.n	800a336 <_vfiprintf_r+0xc6>
 800a390:	9b03      	ldr	r3, [sp, #12]
 800a392:	1d19      	adds	r1, r3, #4
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	9103      	str	r1, [sp, #12]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	bfbb      	ittet	lt
 800a39c:	425b      	neglt	r3, r3
 800a39e:	f042 0202 	orrlt.w	r2, r2, #2
 800a3a2:	9307      	strge	r3, [sp, #28]
 800a3a4:	9307      	strlt	r3, [sp, #28]
 800a3a6:	bfb8      	it	lt
 800a3a8:	9204      	strlt	r2, [sp, #16]
 800a3aa:	7823      	ldrb	r3, [r4, #0]
 800a3ac:	2b2e      	cmp	r3, #46	; 0x2e
 800a3ae:	d10c      	bne.n	800a3ca <_vfiprintf_r+0x15a>
 800a3b0:	7863      	ldrb	r3, [r4, #1]
 800a3b2:	2b2a      	cmp	r3, #42	; 0x2a
 800a3b4:	d134      	bne.n	800a420 <_vfiprintf_r+0x1b0>
 800a3b6:	9b03      	ldr	r3, [sp, #12]
 800a3b8:	1d1a      	adds	r2, r3, #4
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	9203      	str	r2, [sp, #12]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	bfb8      	it	lt
 800a3c2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a3c6:	3402      	adds	r4, #2
 800a3c8:	9305      	str	r3, [sp, #20]
 800a3ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a4a0 <_vfiprintf_r+0x230>
 800a3ce:	7821      	ldrb	r1, [r4, #0]
 800a3d0:	2203      	movs	r2, #3
 800a3d2:	4650      	mov	r0, sl
 800a3d4:	f7f5 fefc 	bl	80001d0 <memchr>
 800a3d8:	b138      	cbz	r0, 800a3ea <_vfiprintf_r+0x17a>
 800a3da:	9b04      	ldr	r3, [sp, #16]
 800a3dc:	eba0 000a 	sub.w	r0, r0, sl
 800a3e0:	2240      	movs	r2, #64	; 0x40
 800a3e2:	4082      	lsls	r2, r0
 800a3e4:	4313      	orrs	r3, r2
 800a3e6:	3401      	adds	r4, #1
 800a3e8:	9304      	str	r3, [sp, #16]
 800a3ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3ee:	4829      	ldr	r0, [pc, #164]	; (800a494 <_vfiprintf_r+0x224>)
 800a3f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3f4:	2206      	movs	r2, #6
 800a3f6:	f7f5 feeb 	bl	80001d0 <memchr>
 800a3fa:	2800      	cmp	r0, #0
 800a3fc:	d03f      	beq.n	800a47e <_vfiprintf_r+0x20e>
 800a3fe:	4b26      	ldr	r3, [pc, #152]	; (800a498 <_vfiprintf_r+0x228>)
 800a400:	bb1b      	cbnz	r3, 800a44a <_vfiprintf_r+0x1da>
 800a402:	9b03      	ldr	r3, [sp, #12]
 800a404:	3307      	adds	r3, #7
 800a406:	f023 0307 	bic.w	r3, r3, #7
 800a40a:	3308      	adds	r3, #8
 800a40c:	9303      	str	r3, [sp, #12]
 800a40e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a410:	443b      	add	r3, r7
 800a412:	9309      	str	r3, [sp, #36]	; 0x24
 800a414:	e768      	b.n	800a2e8 <_vfiprintf_r+0x78>
 800a416:	fb0c 3202 	mla	r2, ip, r2, r3
 800a41a:	460c      	mov	r4, r1
 800a41c:	2001      	movs	r0, #1
 800a41e:	e7a6      	b.n	800a36e <_vfiprintf_r+0xfe>
 800a420:	2300      	movs	r3, #0
 800a422:	3401      	adds	r4, #1
 800a424:	9305      	str	r3, [sp, #20]
 800a426:	4619      	mov	r1, r3
 800a428:	f04f 0c0a 	mov.w	ip, #10
 800a42c:	4620      	mov	r0, r4
 800a42e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a432:	3a30      	subs	r2, #48	; 0x30
 800a434:	2a09      	cmp	r2, #9
 800a436:	d903      	bls.n	800a440 <_vfiprintf_r+0x1d0>
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d0c6      	beq.n	800a3ca <_vfiprintf_r+0x15a>
 800a43c:	9105      	str	r1, [sp, #20]
 800a43e:	e7c4      	b.n	800a3ca <_vfiprintf_r+0x15a>
 800a440:	fb0c 2101 	mla	r1, ip, r1, r2
 800a444:	4604      	mov	r4, r0
 800a446:	2301      	movs	r3, #1
 800a448:	e7f0      	b.n	800a42c <_vfiprintf_r+0x1bc>
 800a44a:	ab03      	add	r3, sp, #12
 800a44c:	9300      	str	r3, [sp, #0]
 800a44e:	462a      	mov	r2, r5
 800a450:	4b12      	ldr	r3, [pc, #72]	; (800a49c <_vfiprintf_r+0x22c>)
 800a452:	a904      	add	r1, sp, #16
 800a454:	4630      	mov	r0, r6
 800a456:	f3af 8000 	nop.w
 800a45a:	4607      	mov	r7, r0
 800a45c:	1c78      	adds	r0, r7, #1
 800a45e:	d1d6      	bne.n	800a40e <_vfiprintf_r+0x19e>
 800a460:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a462:	07d9      	lsls	r1, r3, #31
 800a464:	d405      	bmi.n	800a472 <_vfiprintf_r+0x202>
 800a466:	89ab      	ldrh	r3, [r5, #12]
 800a468:	059a      	lsls	r2, r3, #22
 800a46a:	d402      	bmi.n	800a472 <_vfiprintf_r+0x202>
 800a46c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a46e:	f7ff fd0b 	bl	8009e88 <__retarget_lock_release_recursive>
 800a472:	89ab      	ldrh	r3, [r5, #12]
 800a474:	065b      	lsls	r3, r3, #25
 800a476:	f53f af1d 	bmi.w	800a2b4 <_vfiprintf_r+0x44>
 800a47a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a47c:	e71c      	b.n	800a2b8 <_vfiprintf_r+0x48>
 800a47e:	ab03      	add	r3, sp, #12
 800a480:	9300      	str	r3, [sp, #0]
 800a482:	462a      	mov	r2, r5
 800a484:	4b05      	ldr	r3, [pc, #20]	; (800a49c <_vfiprintf_r+0x22c>)
 800a486:	a904      	add	r1, sp, #16
 800a488:	4630      	mov	r0, r6
 800a48a:	f000 f879 	bl	800a580 <_printf_i>
 800a48e:	e7e4      	b.n	800a45a <_vfiprintf_r+0x1ea>
 800a490:	0800acdf 	.word	0x0800acdf
 800a494:	0800ace9 	.word	0x0800ace9
 800a498:	00000000 	.word	0x00000000
 800a49c:	0800a24d 	.word	0x0800a24d
 800a4a0:	0800ace5 	.word	0x0800ace5

0800a4a4 <_printf_common>:
 800a4a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4a8:	4616      	mov	r6, r2
 800a4aa:	4699      	mov	r9, r3
 800a4ac:	688a      	ldr	r2, [r1, #8]
 800a4ae:	690b      	ldr	r3, [r1, #16]
 800a4b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	bfb8      	it	lt
 800a4b8:	4613      	movlt	r3, r2
 800a4ba:	6033      	str	r3, [r6, #0]
 800a4bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a4c0:	4607      	mov	r7, r0
 800a4c2:	460c      	mov	r4, r1
 800a4c4:	b10a      	cbz	r2, 800a4ca <_printf_common+0x26>
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	6033      	str	r3, [r6, #0]
 800a4ca:	6823      	ldr	r3, [r4, #0]
 800a4cc:	0699      	lsls	r1, r3, #26
 800a4ce:	bf42      	ittt	mi
 800a4d0:	6833      	ldrmi	r3, [r6, #0]
 800a4d2:	3302      	addmi	r3, #2
 800a4d4:	6033      	strmi	r3, [r6, #0]
 800a4d6:	6825      	ldr	r5, [r4, #0]
 800a4d8:	f015 0506 	ands.w	r5, r5, #6
 800a4dc:	d106      	bne.n	800a4ec <_printf_common+0x48>
 800a4de:	f104 0a19 	add.w	sl, r4, #25
 800a4e2:	68e3      	ldr	r3, [r4, #12]
 800a4e4:	6832      	ldr	r2, [r6, #0]
 800a4e6:	1a9b      	subs	r3, r3, r2
 800a4e8:	42ab      	cmp	r3, r5
 800a4ea:	dc26      	bgt.n	800a53a <_printf_common+0x96>
 800a4ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a4f0:	1e13      	subs	r3, r2, #0
 800a4f2:	6822      	ldr	r2, [r4, #0]
 800a4f4:	bf18      	it	ne
 800a4f6:	2301      	movne	r3, #1
 800a4f8:	0692      	lsls	r2, r2, #26
 800a4fa:	d42b      	bmi.n	800a554 <_printf_common+0xb0>
 800a4fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a500:	4649      	mov	r1, r9
 800a502:	4638      	mov	r0, r7
 800a504:	47c0      	blx	r8
 800a506:	3001      	adds	r0, #1
 800a508:	d01e      	beq.n	800a548 <_printf_common+0xa4>
 800a50a:	6823      	ldr	r3, [r4, #0]
 800a50c:	6922      	ldr	r2, [r4, #16]
 800a50e:	f003 0306 	and.w	r3, r3, #6
 800a512:	2b04      	cmp	r3, #4
 800a514:	bf02      	ittt	eq
 800a516:	68e5      	ldreq	r5, [r4, #12]
 800a518:	6833      	ldreq	r3, [r6, #0]
 800a51a:	1aed      	subeq	r5, r5, r3
 800a51c:	68a3      	ldr	r3, [r4, #8]
 800a51e:	bf0c      	ite	eq
 800a520:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a524:	2500      	movne	r5, #0
 800a526:	4293      	cmp	r3, r2
 800a528:	bfc4      	itt	gt
 800a52a:	1a9b      	subgt	r3, r3, r2
 800a52c:	18ed      	addgt	r5, r5, r3
 800a52e:	2600      	movs	r6, #0
 800a530:	341a      	adds	r4, #26
 800a532:	42b5      	cmp	r5, r6
 800a534:	d11a      	bne.n	800a56c <_printf_common+0xc8>
 800a536:	2000      	movs	r0, #0
 800a538:	e008      	b.n	800a54c <_printf_common+0xa8>
 800a53a:	2301      	movs	r3, #1
 800a53c:	4652      	mov	r2, sl
 800a53e:	4649      	mov	r1, r9
 800a540:	4638      	mov	r0, r7
 800a542:	47c0      	blx	r8
 800a544:	3001      	adds	r0, #1
 800a546:	d103      	bne.n	800a550 <_printf_common+0xac>
 800a548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a54c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a550:	3501      	adds	r5, #1
 800a552:	e7c6      	b.n	800a4e2 <_printf_common+0x3e>
 800a554:	18e1      	adds	r1, r4, r3
 800a556:	1c5a      	adds	r2, r3, #1
 800a558:	2030      	movs	r0, #48	; 0x30
 800a55a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a55e:	4422      	add	r2, r4
 800a560:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a564:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a568:	3302      	adds	r3, #2
 800a56a:	e7c7      	b.n	800a4fc <_printf_common+0x58>
 800a56c:	2301      	movs	r3, #1
 800a56e:	4622      	mov	r2, r4
 800a570:	4649      	mov	r1, r9
 800a572:	4638      	mov	r0, r7
 800a574:	47c0      	blx	r8
 800a576:	3001      	adds	r0, #1
 800a578:	d0e6      	beq.n	800a548 <_printf_common+0xa4>
 800a57a:	3601      	adds	r6, #1
 800a57c:	e7d9      	b.n	800a532 <_printf_common+0x8e>
	...

0800a580 <_printf_i>:
 800a580:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a584:	7e0f      	ldrb	r7, [r1, #24]
 800a586:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a588:	2f78      	cmp	r7, #120	; 0x78
 800a58a:	4691      	mov	r9, r2
 800a58c:	4680      	mov	r8, r0
 800a58e:	460c      	mov	r4, r1
 800a590:	469a      	mov	sl, r3
 800a592:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a596:	d807      	bhi.n	800a5a8 <_printf_i+0x28>
 800a598:	2f62      	cmp	r7, #98	; 0x62
 800a59a:	d80a      	bhi.n	800a5b2 <_printf_i+0x32>
 800a59c:	2f00      	cmp	r7, #0
 800a59e:	f000 80d4 	beq.w	800a74a <_printf_i+0x1ca>
 800a5a2:	2f58      	cmp	r7, #88	; 0x58
 800a5a4:	f000 80c0 	beq.w	800a728 <_printf_i+0x1a8>
 800a5a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a5b0:	e03a      	b.n	800a628 <_printf_i+0xa8>
 800a5b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a5b6:	2b15      	cmp	r3, #21
 800a5b8:	d8f6      	bhi.n	800a5a8 <_printf_i+0x28>
 800a5ba:	a101      	add	r1, pc, #4	; (adr r1, 800a5c0 <_printf_i+0x40>)
 800a5bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a5c0:	0800a619 	.word	0x0800a619
 800a5c4:	0800a62d 	.word	0x0800a62d
 800a5c8:	0800a5a9 	.word	0x0800a5a9
 800a5cc:	0800a5a9 	.word	0x0800a5a9
 800a5d0:	0800a5a9 	.word	0x0800a5a9
 800a5d4:	0800a5a9 	.word	0x0800a5a9
 800a5d8:	0800a62d 	.word	0x0800a62d
 800a5dc:	0800a5a9 	.word	0x0800a5a9
 800a5e0:	0800a5a9 	.word	0x0800a5a9
 800a5e4:	0800a5a9 	.word	0x0800a5a9
 800a5e8:	0800a5a9 	.word	0x0800a5a9
 800a5ec:	0800a731 	.word	0x0800a731
 800a5f0:	0800a659 	.word	0x0800a659
 800a5f4:	0800a6eb 	.word	0x0800a6eb
 800a5f8:	0800a5a9 	.word	0x0800a5a9
 800a5fc:	0800a5a9 	.word	0x0800a5a9
 800a600:	0800a753 	.word	0x0800a753
 800a604:	0800a5a9 	.word	0x0800a5a9
 800a608:	0800a659 	.word	0x0800a659
 800a60c:	0800a5a9 	.word	0x0800a5a9
 800a610:	0800a5a9 	.word	0x0800a5a9
 800a614:	0800a6f3 	.word	0x0800a6f3
 800a618:	682b      	ldr	r3, [r5, #0]
 800a61a:	1d1a      	adds	r2, r3, #4
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	602a      	str	r2, [r5, #0]
 800a620:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a624:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a628:	2301      	movs	r3, #1
 800a62a:	e09f      	b.n	800a76c <_printf_i+0x1ec>
 800a62c:	6820      	ldr	r0, [r4, #0]
 800a62e:	682b      	ldr	r3, [r5, #0]
 800a630:	0607      	lsls	r7, r0, #24
 800a632:	f103 0104 	add.w	r1, r3, #4
 800a636:	6029      	str	r1, [r5, #0]
 800a638:	d501      	bpl.n	800a63e <_printf_i+0xbe>
 800a63a:	681e      	ldr	r6, [r3, #0]
 800a63c:	e003      	b.n	800a646 <_printf_i+0xc6>
 800a63e:	0646      	lsls	r6, r0, #25
 800a640:	d5fb      	bpl.n	800a63a <_printf_i+0xba>
 800a642:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a646:	2e00      	cmp	r6, #0
 800a648:	da03      	bge.n	800a652 <_printf_i+0xd2>
 800a64a:	232d      	movs	r3, #45	; 0x2d
 800a64c:	4276      	negs	r6, r6
 800a64e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a652:	485a      	ldr	r0, [pc, #360]	; (800a7bc <_printf_i+0x23c>)
 800a654:	230a      	movs	r3, #10
 800a656:	e012      	b.n	800a67e <_printf_i+0xfe>
 800a658:	682b      	ldr	r3, [r5, #0]
 800a65a:	6820      	ldr	r0, [r4, #0]
 800a65c:	1d19      	adds	r1, r3, #4
 800a65e:	6029      	str	r1, [r5, #0]
 800a660:	0605      	lsls	r5, r0, #24
 800a662:	d501      	bpl.n	800a668 <_printf_i+0xe8>
 800a664:	681e      	ldr	r6, [r3, #0]
 800a666:	e002      	b.n	800a66e <_printf_i+0xee>
 800a668:	0641      	lsls	r1, r0, #25
 800a66a:	d5fb      	bpl.n	800a664 <_printf_i+0xe4>
 800a66c:	881e      	ldrh	r6, [r3, #0]
 800a66e:	4853      	ldr	r0, [pc, #332]	; (800a7bc <_printf_i+0x23c>)
 800a670:	2f6f      	cmp	r7, #111	; 0x6f
 800a672:	bf0c      	ite	eq
 800a674:	2308      	moveq	r3, #8
 800a676:	230a      	movne	r3, #10
 800a678:	2100      	movs	r1, #0
 800a67a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a67e:	6865      	ldr	r5, [r4, #4]
 800a680:	60a5      	str	r5, [r4, #8]
 800a682:	2d00      	cmp	r5, #0
 800a684:	bfa2      	ittt	ge
 800a686:	6821      	ldrge	r1, [r4, #0]
 800a688:	f021 0104 	bicge.w	r1, r1, #4
 800a68c:	6021      	strge	r1, [r4, #0]
 800a68e:	b90e      	cbnz	r6, 800a694 <_printf_i+0x114>
 800a690:	2d00      	cmp	r5, #0
 800a692:	d04b      	beq.n	800a72c <_printf_i+0x1ac>
 800a694:	4615      	mov	r5, r2
 800a696:	fbb6 f1f3 	udiv	r1, r6, r3
 800a69a:	fb03 6711 	mls	r7, r3, r1, r6
 800a69e:	5dc7      	ldrb	r7, [r0, r7]
 800a6a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a6a4:	4637      	mov	r7, r6
 800a6a6:	42bb      	cmp	r3, r7
 800a6a8:	460e      	mov	r6, r1
 800a6aa:	d9f4      	bls.n	800a696 <_printf_i+0x116>
 800a6ac:	2b08      	cmp	r3, #8
 800a6ae:	d10b      	bne.n	800a6c8 <_printf_i+0x148>
 800a6b0:	6823      	ldr	r3, [r4, #0]
 800a6b2:	07de      	lsls	r6, r3, #31
 800a6b4:	d508      	bpl.n	800a6c8 <_printf_i+0x148>
 800a6b6:	6923      	ldr	r3, [r4, #16]
 800a6b8:	6861      	ldr	r1, [r4, #4]
 800a6ba:	4299      	cmp	r1, r3
 800a6bc:	bfde      	ittt	le
 800a6be:	2330      	movle	r3, #48	; 0x30
 800a6c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a6c4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a6c8:	1b52      	subs	r2, r2, r5
 800a6ca:	6122      	str	r2, [r4, #16]
 800a6cc:	f8cd a000 	str.w	sl, [sp]
 800a6d0:	464b      	mov	r3, r9
 800a6d2:	aa03      	add	r2, sp, #12
 800a6d4:	4621      	mov	r1, r4
 800a6d6:	4640      	mov	r0, r8
 800a6d8:	f7ff fee4 	bl	800a4a4 <_printf_common>
 800a6dc:	3001      	adds	r0, #1
 800a6de:	d14a      	bne.n	800a776 <_printf_i+0x1f6>
 800a6e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6e4:	b004      	add	sp, #16
 800a6e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6ea:	6823      	ldr	r3, [r4, #0]
 800a6ec:	f043 0320 	orr.w	r3, r3, #32
 800a6f0:	6023      	str	r3, [r4, #0]
 800a6f2:	4833      	ldr	r0, [pc, #204]	; (800a7c0 <_printf_i+0x240>)
 800a6f4:	2778      	movs	r7, #120	; 0x78
 800a6f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a6fa:	6823      	ldr	r3, [r4, #0]
 800a6fc:	6829      	ldr	r1, [r5, #0]
 800a6fe:	061f      	lsls	r7, r3, #24
 800a700:	f851 6b04 	ldr.w	r6, [r1], #4
 800a704:	d402      	bmi.n	800a70c <_printf_i+0x18c>
 800a706:	065f      	lsls	r7, r3, #25
 800a708:	bf48      	it	mi
 800a70a:	b2b6      	uxthmi	r6, r6
 800a70c:	07df      	lsls	r7, r3, #31
 800a70e:	bf48      	it	mi
 800a710:	f043 0320 	orrmi.w	r3, r3, #32
 800a714:	6029      	str	r1, [r5, #0]
 800a716:	bf48      	it	mi
 800a718:	6023      	strmi	r3, [r4, #0]
 800a71a:	b91e      	cbnz	r6, 800a724 <_printf_i+0x1a4>
 800a71c:	6823      	ldr	r3, [r4, #0]
 800a71e:	f023 0320 	bic.w	r3, r3, #32
 800a722:	6023      	str	r3, [r4, #0]
 800a724:	2310      	movs	r3, #16
 800a726:	e7a7      	b.n	800a678 <_printf_i+0xf8>
 800a728:	4824      	ldr	r0, [pc, #144]	; (800a7bc <_printf_i+0x23c>)
 800a72a:	e7e4      	b.n	800a6f6 <_printf_i+0x176>
 800a72c:	4615      	mov	r5, r2
 800a72e:	e7bd      	b.n	800a6ac <_printf_i+0x12c>
 800a730:	682b      	ldr	r3, [r5, #0]
 800a732:	6826      	ldr	r6, [r4, #0]
 800a734:	6961      	ldr	r1, [r4, #20]
 800a736:	1d18      	adds	r0, r3, #4
 800a738:	6028      	str	r0, [r5, #0]
 800a73a:	0635      	lsls	r5, r6, #24
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	d501      	bpl.n	800a744 <_printf_i+0x1c4>
 800a740:	6019      	str	r1, [r3, #0]
 800a742:	e002      	b.n	800a74a <_printf_i+0x1ca>
 800a744:	0670      	lsls	r0, r6, #25
 800a746:	d5fb      	bpl.n	800a740 <_printf_i+0x1c0>
 800a748:	8019      	strh	r1, [r3, #0]
 800a74a:	2300      	movs	r3, #0
 800a74c:	6123      	str	r3, [r4, #16]
 800a74e:	4615      	mov	r5, r2
 800a750:	e7bc      	b.n	800a6cc <_printf_i+0x14c>
 800a752:	682b      	ldr	r3, [r5, #0]
 800a754:	1d1a      	adds	r2, r3, #4
 800a756:	602a      	str	r2, [r5, #0]
 800a758:	681d      	ldr	r5, [r3, #0]
 800a75a:	6862      	ldr	r2, [r4, #4]
 800a75c:	2100      	movs	r1, #0
 800a75e:	4628      	mov	r0, r5
 800a760:	f7f5 fd36 	bl	80001d0 <memchr>
 800a764:	b108      	cbz	r0, 800a76a <_printf_i+0x1ea>
 800a766:	1b40      	subs	r0, r0, r5
 800a768:	6060      	str	r0, [r4, #4]
 800a76a:	6863      	ldr	r3, [r4, #4]
 800a76c:	6123      	str	r3, [r4, #16]
 800a76e:	2300      	movs	r3, #0
 800a770:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a774:	e7aa      	b.n	800a6cc <_printf_i+0x14c>
 800a776:	6923      	ldr	r3, [r4, #16]
 800a778:	462a      	mov	r2, r5
 800a77a:	4649      	mov	r1, r9
 800a77c:	4640      	mov	r0, r8
 800a77e:	47d0      	blx	sl
 800a780:	3001      	adds	r0, #1
 800a782:	d0ad      	beq.n	800a6e0 <_printf_i+0x160>
 800a784:	6823      	ldr	r3, [r4, #0]
 800a786:	079b      	lsls	r3, r3, #30
 800a788:	d413      	bmi.n	800a7b2 <_printf_i+0x232>
 800a78a:	68e0      	ldr	r0, [r4, #12]
 800a78c:	9b03      	ldr	r3, [sp, #12]
 800a78e:	4298      	cmp	r0, r3
 800a790:	bfb8      	it	lt
 800a792:	4618      	movlt	r0, r3
 800a794:	e7a6      	b.n	800a6e4 <_printf_i+0x164>
 800a796:	2301      	movs	r3, #1
 800a798:	4632      	mov	r2, r6
 800a79a:	4649      	mov	r1, r9
 800a79c:	4640      	mov	r0, r8
 800a79e:	47d0      	blx	sl
 800a7a0:	3001      	adds	r0, #1
 800a7a2:	d09d      	beq.n	800a6e0 <_printf_i+0x160>
 800a7a4:	3501      	adds	r5, #1
 800a7a6:	68e3      	ldr	r3, [r4, #12]
 800a7a8:	9903      	ldr	r1, [sp, #12]
 800a7aa:	1a5b      	subs	r3, r3, r1
 800a7ac:	42ab      	cmp	r3, r5
 800a7ae:	dcf2      	bgt.n	800a796 <_printf_i+0x216>
 800a7b0:	e7eb      	b.n	800a78a <_printf_i+0x20a>
 800a7b2:	2500      	movs	r5, #0
 800a7b4:	f104 0619 	add.w	r6, r4, #25
 800a7b8:	e7f5      	b.n	800a7a6 <_printf_i+0x226>
 800a7ba:	bf00      	nop
 800a7bc:	0800acf0 	.word	0x0800acf0
 800a7c0:	0800ad01 	.word	0x0800ad01

0800a7c4 <__swbuf_r>:
 800a7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7c6:	460e      	mov	r6, r1
 800a7c8:	4614      	mov	r4, r2
 800a7ca:	4605      	mov	r5, r0
 800a7cc:	b118      	cbz	r0, 800a7d6 <__swbuf_r+0x12>
 800a7ce:	6a03      	ldr	r3, [r0, #32]
 800a7d0:	b90b      	cbnz	r3, 800a7d6 <__swbuf_r+0x12>
 800a7d2:	f7ff fab3 	bl	8009d3c <__sinit>
 800a7d6:	69a3      	ldr	r3, [r4, #24]
 800a7d8:	60a3      	str	r3, [r4, #8]
 800a7da:	89a3      	ldrh	r3, [r4, #12]
 800a7dc:	071a      	lsls	r2, r3, #28
 800a7de:	d525      	bpl.n	800a82c <__swbuf_r+0x68>
 800a7e0:	6923      	ldr	r3, [r4, #16]
 800a7e2:	b31b      	cbz	r3, 800a82c <__swbuf_r+0x68>
 800a7e4:	6823      	ldr	r3, [r4, #0]
 800a7e6:	6922      	ldr	r2, [r4, #16]
 800a7e8:	1a98      	subs	r0, r3, r2
 800a7ea:	6963      	ldr	r3, [r4, #20]
 800a7ec:	b2f6      	uxtb	r6, r6
 800a7ee:	4283      	cmp	r3, r0
 800a7f0:	4637      	mov	r7, r6
 800a7f2:	dc04      	bgt.n	800a7fe <__swbuf_r+0x3a>
 800a7f4:	4621      	mov	r1, r4
 800a7f6:	4628      	mov	r0, r5
 800a7f8:	f7ff fc46 	bl	800a088 <_fflush_r>
 800a7fc:	b9e0      	cbnz	r0, 800a838 <__swbuf_r+0x74>
 800a7fe:	68a3      	ldr	r3, [r4, #8]
 800a800:	3b01      	subs	r3, #1
 800a802:	60a3      	str	r3, [r4, #8]
 800a804:	6823      	ldr	r3, [r4, #0]
 800a806:	1c5a      	adds	r2, r3, #1
 800a808:	6022      	str	r2, [r4, #0]
 800a80a:	701e      	strb	r6, [r3, #0]
 800a80c:	6962      	ldr	r2, [r4, #20]
 800a80e:	1c43      	adds	r3, r0, #1
 800a810:	429a      	cmp	r2, r3
 800a812:	d004      	beq.n	800a81e <__swbuf_r+0x5a>
 800a814:	89a3      	ldrh	r3, [r4, #12]
 800a816:	07db      	lsls	r3, r3, #31
 800a818:	d506      	bpl.n	800a828 <__swbuf_r+0x64>
 800a81a:	2e0a      	cmp	r6, #10
 800a81c:	d104      	bne.n	800a828 <__swbuf_r+0x64>
 800a81e:	4621      	mov	r1, r4
 800a820:	4628      	mov	r0, r5
 800a822:	f7ff fc31 	bl	800a088 <_fflush_r>
 800a826:	b938      	cbnz	r0, 800a838 <__swbuf_r+0x74>
 800a828:	4638      	mov	r0, r7
 800a82a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a82c:	4621      	mov	r1, r4
 800a82e:	4628      	mov	r0, r5
 800a830:	f000 f806 	bl	800a840 <__swsetup_r>
 800a834:	2800      	cmp	r0, #0
 800a836:	d0d5      	beq.n	800a7e4 <__swbuf_r+0x20>
 800a838:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a83c:	e7f4      	b.n	800a828 <__swbuf_r+0x64>
	...

0800a840 <__swsetup_r>:
 800a840:	b538      	push	{r3, r4, r5, lr}
 800a842:	4b2a      	ldr	r3, [pc, #168]	; (800a8ec <__swsetup_r+0xac>)
 800a844:	4605      	mov	r5, r0
 800a846:	6818      	ldr	r0, [r3, #0]
 800a848:	460c      	mov	r4, r1
 800a84a:	b118      	cbz	r0, 800a854 <__swsetup_r+0x14>
 800a84c:	6a03      	ldr	r3, [r0, #32]
 800a84e:	b90b      	cbnz	r3, 800a854 <__swsetup_r+0x14>
 800a850:	f7ff fa74 	bl	8009d3c <__sinit>
 800a854:	89a3      	ldrh	r3, [r4, #12]
 800a856:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a85a:	0718      	lsls	r0, r3, #28
 800a85c:	d422      	bmi.n	800a8a4 <__swsetup_r+0x64>
 800a85e:	06d9      	lsls	r1, r3, #27
 800a860:	d407      	bmi.n	800a872 <__swsetup_r+0x32>
 800a862:	2309      	movs	r3, #9
 800a864:	602b      	str	r3, [r5, #0]
 800a866:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a86a:	81a3      	strh	r3, [r4, #12]
 800a86c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a870:	e034      	b.n	800a8dc <__swsetup_r+0x9c>
 800a872:	0758      	lsls	r0, r3, #29
 800a874:	d512      	bpl.n	800a89c <__swsetup_r+0x5c>
 800a876:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a878:	b141      	cbz	r1, 800a88c <__swsetup_r+0x4c>
 800a87a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a87e:	4299      	cmp	r1, r3
 800a880:	d002      	beq.n	800a888 <__swsetup_r+0x48>
 800a882:	4628      	mov	r0, r5
 800a884:	f7ff fb2e 	bl	8009ee4 <_free_r>
 800a888:	2300      	movs	r3, #0
 800a88a:	6363      	str	r3, [r4, #52]	; 0x34
 800a88c:	89a3      	ldrh	r3, [r4, #12]
 800a88e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a892:	81a3      	strh	r3, [r4, #12]
 800a894:	2300      	movs	r3, #0
 800a896:	6063      	str	r3, [r4, #4]
 800a898:	6923      	ldr	r3, [r4, #16]
 800a89a:	6023      	str	r3, [r4, #0]
 800a89c:	89a3      	ldrh	r3, [r4, #12]
 800a89e:	f043 0308 	orr.w	r3, r3, #8
 800a8a2:	81a3      	strh	r3, [r4, #12]
 800a8a4:	6923      	ldr	r3, [r4, #16]
 800a8a6:	b94b      	cbnz	r3, 800a8bc <__swsetup_r+0x7c>
 800a8a8:	89a3      	ldrh	r3, [r4, #12]
 800a8aa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a8ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8b2:	d003      	beq.n	800a8bc <__swsetup_r+0x7c>
 800a8b4:	4621      	mov	r1, r4
 800a8b6:	4628      	mov	r0, r5
 800a8b8:	f000 f840 	bl	800a93c <__smakebuf_r>
 800a8bc:	89a0      	ldrh	r0, [r4, #12]
 800a8be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8c2:	f010 0301 	ands.w	r3, r0, #1
 800a8c6:	d00a      	beq.n	800a8de <__swsetup_r+0x9e>
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	60a3      	str	r3, [r4, #8]
 800a8cc:	6963      	ldr	r3, [r4, #20]
 800a8ce:	425b      	negs	r3, r3
 800a8d0:	61a3      	str	r3, [r4, #24]
 800a8d2:	6923      	ldr	r3, [r4, #16]
 800a8d4:	b943      	cbnz	r3, 800a8e8 <__swsetup_r+0xa8>
 800a8d6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a8da:	d1c4      	bne.n	800a866 <__swsetup_r+0x26>
 800a8dc:	bd38      	pop	{r3, r4, r5, pc}
 800a8de:	0781      	lsls	r1, r0, #30
 800a8e0:	bf58      	it	pl
 800a8e2:	6963      	ldrpl	r3, [r4, #20]
 800a8e4:	60a3      	str	r3, [r4, #8]
 800a8e6:	e7f4      	b.n	800a8d2 <__swsetup_r+0x92>
 800a8e8:	2000      	movs	r0, #0
 800a8ea:	e7f7      	b.n	800a8dc <__swsetup_r+0x9c>
 800a8ec:	20000258 	.word	0x20000258

0800a8f0 <__swhatbuf_r>:
 800a8f0:	b570      	push	{r4, r5, r6, lr}
 800a8f2:	460c      	mov	r4, r1
 800a8f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8f8:	2900      	cmp	r1, #0
 800a8fa:	b096      	sub	sp, #88	; 0x58
 800a8fc:	4615      	mov	r5, r2
 800a8fe:	461e      	mov	r6, r3
 800a900:	da0d      	bge.n	800a91e <__swhatbuf_r+0x2e>
 800a902:	89a3      	ldrh	r3, [r4, #12]
 800a904:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a908:	f04f 0100 	mov.w	r1, #0
 800a90c:	bf0c      	ite	eq
 800a90e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a912:	2340      	movne	r3, #64	; 0x40
 800a914:	2000      	movs	r0, #0
 800a916:	6031      	str	r1, [r6, #0]
 800a918:	602b      	str	r3, [r5, #0]
 800a91a:	b016      	add	sp, #88	; 0x58
 800a91c:	bd70      	pop	{r4, r5, r6, pc}
 800a91e:	466a      	mov	r2, sp
 800a920:	f000 f848 	bl	800a9b4 <_fstat_r>
 800a924:	2800      	cmp	r0, #0
 800a926:	dbec      	blt.n	800a902 <__swhatbuf_r+0x12>
 800a928:	9901      	ldr	r1, [sp, #4]
 800a92a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a92e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a932:	4259      	negs	r1, r3
 800a934:	4159      	adcs	r1, r3
 800a936:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a93a:	e7eb      	b.n	800a914 <__swhatbuf_r+0x24>

0800a93c <__smakebuf_r>:
 800a93c:	898b      	ldrh	r3, [r1, #12]
 800a93e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a940:	079d      	lsls	r5, r3, #30
 800a942:	4606      	mov	r6, r0
 800a944:	460c      	mov	r4, r1
 800a946:	d507      	bpl.n	800a958 <__smakebuf_r+0x1c>
 800a948:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a94c:	6023      	str	r3, [r4, #0]
 800a94e:	6123      	str	r3, [r4, #16]
 800a950:	2301      	movs	r3, #1
 800a952:	6163      	str	r3, [r4, #20]
 800a954:	b002      	add	sp, #8
 800a956:	bd70      	pop	{r4, r5, r6, pc}
 800a958:	ab01      	add	r3, sp, #4
 800a95a:	466a      	mov	r2, sp
 800a95c:	f7ff ffc8 	bl	800a8f0 <__swhatbuf_r>
 800a960:	9900      	ldr	r1, [sp, #0]
 800a962:	4605      	mov	r5, r0
 800a964:	4630      	mov	r0, r6
 800a966:	f7ff f8a3 	bl	8009ab0 <_malloc_r>
 800a96a:	b948      	cbnz	r0, 800a980 <__smakebuf_r+0x44>
 800a96c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a970:	059a      	lsls	r2, r3, #22
 800a972:	d4ef      	bmi.n	800a954 <__smakebuf_r+0x18>
 800a974:	f023 0303 	bic.w	r3, r3, #3
 800a978:	f043 0302 	orr.w	r3, r3, #2
 800a97c:	81a3      	strh	r3, [r4, #12]
 800a97e:	e7e3      	b.n	800a948 <__smakebuf_r+0xc>
 800a980:	89a3      	ldrh	r3, [r4, #12]
 800a982:	6020      	str	r0, [r4, #0]
 800a984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a988:	81a3      	strh	r3, [r4, #12]
 800a98a:	9b00      	ldr	r3, [sp, #0]
 800a98c:	6163      	str	r3, [r4, #20]
 800a98e:	9b01      	ldr	r3, [sp, #4]
 800a990:	6120      	str	r0, [r4, #16]
 800a992:	b15b      	cbz	r3, 800a9ac <__smakebuf_r+0x70>
 800a994:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a998:	4630      	mov	r0, r6
 800a99a:	f000 f81d 	bl	800a9d8 <_isatty_r>
 800a99e:	b128      	cbz	r0, 800a9ac <__smakebuf_r+0x70>
 800a9a0:	89a3      	ldrh	r3, [r4, #12]
 800a9a2:	f023 0303 	bic.w	r3, r3, #3
 800a9a6:	f043 0301 	orr.w	r3, r3, #1
 800a9aa:	81a3      	strh	r3, [r4, #12]
 800a9ac:	89a3      	ldrh	r3, [r4, #12]
 800a9ae:	431d      	orrs	r5, r3
 800a9b0:	81a5      	strh	r5, [r4, #12]
 800a9b2:	e7cf      	b.n	800a954 <__smakebuf_r+0x18>

0800a9b4 <_fstat_r>:
 800a9b4:	b538      	push	{r3, r4, r5, lr}
 800a9b6:	4d07      	ldr	r5, [pc, #28]	; (800a9d4 <_fstat_r+0x20>)
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	4604      	mov	r4, r0
 800a9bc:	4608      	mov	r0, r1
 800a9be:	4611      	mov	r1, r2
 800a9c0:	602b      	str	r3, [r5, #0]
 800a9c2:	f7fe fe22 	bl	800960a <_fstat>
 800a9c6:	1c43      	adds	r3, r0, #1
 800a9c8:	d102      	bne.n	800a9d0 <_fstat_r+0x1c>
 800a9ca:	682b      	ldr	r3, [r5, #0]
 800a9cc:	b103      	cbz	r3, 800a9d0 <_fstat_r+0x1c>
 800a9ce:	6023      	str	r3, [r4, #0]
 800a9d0:	bd38      	pop	{r3, r4, r5, pc}
 800a9d2:	bf00      	nop
 800a9d4:	20003fb4 	.word	0x20003fb4

0800a9d8 <_isatty_r>:
 800a9d8:	b538      	push	{r3, r4, r5, lr}
 800a9da:	4d06      	ldr	r5, [pc, #24]	; (800a9f4 <_isatty_r+0x1c>)
 800a9dc:	2300      	movs	r3, #0
 800a9de:	4604      	mov	r4, r0
 800a9e0:	4608      	mov	r0, r1
 800a9e2:	602b      	str	r3, [r5, #0]
 800a9e4:	f7fe fe21 	bl	800962a <_isatty>
 800a9e8:	1c43      	adds	r3, r0, #1
 800a9ea:	d102      	bne.n	800a9f2 <_isatty_r+0x1a>
 800a9ec:	682b      	ldr	r3, [r5, #0]
 800a9ee:	b103      	cbz	r3, 800a9f2 <_isatty_r+0x1a>
 800a9f0:	6023      	str	r3, [r4, #0]
 800a9f2:	bd38      	pop	{r3, r4, r5, pc}
 800a9f4:	20003fb4 	.word	0x20003fb4

0800a9f8 <_raise_r>:
 800a9f8:	291f      	cmp	r1, #31
 800a9fa:	b538      	push	{r3, r4, r5, lr}
 800a9fc:	4604      	mov	r4, r0
 800a9fe:	460d      	mov	r5, r1
 800aa00:	d904      	bls.n	800aa0c <_raise_r+0x14>
 800aa02:	2316      	movs	r3, #22
 800aa04:	6003      	str	r3, [r0, #0]
 800aa06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa0a:	bd38      	pop	{r3, r4, r5, pc}
 800aa0c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800aa0e:	b112      	cbz	r2, 800aa16 <_raise_r+0x1e>
 800aa10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa14:	b94b      	cbnz	r3, 800aa2a <_raise_r+0x32>
 800aa16:	4620      	mov	r0, r4
 800aa18:	f000 f830 	bl	800aa7c <_getpid_r>
 800aa1c:	462a      	mov	r2, r5
 800aa1e:	4601      	mov	r1, r0
 800aa20:	4620      	mov	r0, r4
 800aa22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa26:	f000 b817 	b.w	800aa58 <_kill_r>
 800aa2a:	2b01      	cmp	r3, #1
 800aa2c:	d00a      	beq.n	800aa44 <_raise_r+0x4c>
 800aa2e:	1c59      	adds	r1, r3, #1
 800aa30:	d103      	bne.n	800aa3a <_raise_r+0x42>
 800aa32:	2316      	movs	r3, #22
 800aa34:	6003      	str	r3, [r0, #0]
 800aa36:	2001      	movs	r0, #1
 800aa38:	e7e7      	b.n	800aa0a <_raise_r+0x12>
 800aa3a:	2400      	movs	r4, #0
 800aa3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aa40:	4628      	mov	r0, r5
 800aa42:	4798      	blx	r3
 800aa44:	2000      	movs	r0, #0
 800aa46:	e7e0      	b.n	800aa0a <_raise_r+0x12>

0800aa48 <raise>:
 800aa48:	4b02      	ldr	r3, [pc, #8]	; (800aa54 <raise+0xc>)
 800aa4a:	4601      	mov	r1, r0
 800aa4c:	6818      	ldr	r0, [r3, #0]
 800aa4e:	f7ff bfd3 	b.w	800a9f8 <_raise_r>
 800aa52:	bf00      	nop
 800aa54:	20000258 	.word	0x20000258

0800aa58 <_kill_r>:
 800aa58:	b538      	push	{r3, r4, r5, lr}
 800aa5a:	4d07      	ldr	r5, [pc, #28]	; (800aa78 <_kill_r+0x20>)
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	4604      	mov	r4, r0
 800aa60:	4608      	mov	r0, r1
 800aa62:	4611      	mov	r1, r2
 800aa64:	602b      	str	r3, [r5, #0]
 800aa66:	f7fe fd71 	bl	800954c <_kill>
 800aa6a:	1c43      	adds	r3, r0, #1
 800aa6c:	d102      	bne.n	800aa74 <_kill_r+0x1c>
 800aa6e:	682b      	ldr	r3, [r5, #0]
 800aa70:	b103      	cbz	r3, 800aa74 <_kill_r+0x1c>
 800aa72:	6023      	str	r3, [r4, #0]
 800aa74:	bd38      	pop	{r3, r4, r5, pc}
 800aa76:	bf00      	nop
 800aa78:	20003fb4 	.word	0x20003fb4

0800aa7c <_getpid_r>:
 800aa7c:	f7fe bd5e 	b.w	800953c <_getpid>

0800aa80 <_gettimeofday>:
 800aa80:	4b02      	ldr	r3, [pc, #8]	; (800aa8c <_gettimeofday+0xc>)
 800aa82:	2258      	movs	r2, #88	; 0x58
 800aa84:	601a      	str	r2, [r3, #0]
 800aa86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa8a:	4770      	bx	lr
 800aa8c:	20003fb4 	.word	0x20003fb4

0800aa90 <_init>:
 800aa90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa92:	bf00      	nop
 800aa94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa96:	bc08      	pop	{r3}
 800aa98:	469e      	mov	lr, r3
 800aa9a:	4770      	bx	lr

0800aa9c <_fini>:
 800aa9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa9e:	bf00      	nop
 800aaa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaa2:	bc08      	pop	{r3}
 800aaa4:	469e      	mov	lr, r3
 800aaa6:	4770      	bx	lr
