
spudglo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c40c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006dc  0800c59c  0800c59c  0001c59c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc78  0800cc78  00020268  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc78  0800cc78  0001cc78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc80  0800cc80  00020268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc80  0800cc80  0001cc80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc84  0800cc84  0001cc84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000268  20000000  0800cc88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000033e0  20000268  0800cef0  00020268  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003648  0800cef0  00023648  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027f89  00000000  00000000  000202db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005e82  00000000  00000000  00048264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020e0  00000000  00000000  0004e0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001953  00000000  00000000  000501c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a87f  00000000  00000000  00051b1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002c8f5  00000000  00000000  0007c39a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f87ac  00000000  00000000  000a8c8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000091e0  00000000  00000000  001a143c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  001aa61c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000268 	.word	0x20000268
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c584 	.word	0x0800c584

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000026c 	.word	0x2000026c
 80001cc:	0800c584 	.word	0x0800c584

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ac0:	f000 b970 	b.w	8000da4 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9e08      	ldr	r6, [sp, #32]
 8000ae2:	460d      	mov	r5, r1
 8000ae4:	4604      	mov	r4, r0
 8000ae6:	460f      	mov	r7, r1
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d14a      	bne.n	8000b82 <__udivmoddi4+0xa6>
 8000aec:	428a      	cmp	r2, r1
 8000aee:	4694      	mov	ip, r2
 8000af0:	d965      	bls.n	8000bbe <__udivmoddi4+0xe2>
 8000af2:	fab2 f382 	clz	r3, r2
 8000af6:	b143      	cbz	r3, 8000b0a <__udivmoddi4+0x2e>
 8000af8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000afc:	f1c3 0220 	rsb	r2, r3, #32
 8000b00:	409f      	lsls	r7, r3
 8000b02:	fa20 f202 	lsr.w	r2, r0, r2
 8000b06:	4317      	orrs	r7, r2
 8000b08:	409c      	lsls	r4, r3
 8000b0a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b0e:	fa1f f58c 	uxth.w	r5, ip
 8000b12:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b16:	0c22      	lsrs	r2, r4, #16
 8000b18:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b1c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b20:	fb01 f005 	mul.w	r0, r1, r5
 8000b24:	4290      	cmp	r0, r2
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x62>
 8000b28:	eb1c 0202 	adds.w	r2, ip, r2
 8000b2c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000b30:	f080 811c 	bcs.w	8000d6c <__udivmoddi4+0x290>
 8000b34:	4290      	cmp	r0, r2
 8000b36:	f240 8119 	bls.w	8000d6c <__udivmoddi4+0x290>
 8000b3a:	3902      	subs	r1, #2
 8000b3c:	4462      	add	r2, ip
 8000b3e:	1a12      	subs	r2, r2, r0
 8000b40:	b2a4      	uxth	r4, r4
 8000b42:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b46:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b4a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b4e:	fb00 f505 	mul.w	r5, r0, r5
 8000b52:	42a5      	cmp	r5, r4
 8000b54:	d90a      	bls.n	8000b6c <__udivmoddi4+0x90>
 8000b56:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b5e:	f080 8107 	bcs.w	8000d70 <__udivmoddi4+0x294>
 8000b62:	42a5      	cmp	r5, r4
 8000b64:	f240 8104 	bls.w	8000d70 <__udivmoddi4+0x294>
 8000b68:	4464      	add	r4, ip
 8000b6a:	3802      	subs	r0, #2
 8000b6c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b70:	1b64      	subs	r4, r4, r5
 8000b72:	2100      	movs	r1, #0
 8000b74:	b11e      	cbz	r6, 8000b7e <__udivmoddi4+0xa2>
 8000b76:	40dc      	lsrs	r4, r3
 8000b78:	2300      	movs	r3, #0
 8000b7a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d908      	bls.n	8000b98 <__udivmoddi4+0xbc>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	f000 80ed 	beq.w	8000d66 <__udivmoddi4+0x28a>
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b92:	4608      	mov	r0, r1
 8000b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b98:	fab3 f183 	clz	r1, r3
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	d149      	bne.n	8000c34 <__udivmoddi4+0x158>
 8000ba0:	42ab      	cmp	r3, r5
 8000ba2:	d302      	bcc.n	8000baa <__udivmoddi4+0xce>
 8000ba4:	4282      	cmp	r2, r0
 8000ba6:	f200 80f8 	bhi.w	8000d9a <__udivmoddi4+0x2be>
 8000baa:	1a84      	subs	r4, r0, r2
 8000bac:	eb65 0203 	sbc.w	r2, r5, r3
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	4617      	mov	r7, r2
 8000bb4:	2e00      	cmp	r6, #0
 8000bb6:	d0e2      	beq.n	8000b7e <__udivmoddi4+0xa2>
 8000bb8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bbc:	e7df      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000bbe:	b902      	cbnz	r2, 8000bc2 <__udivmoddi4+0xe6>
 8000bc0:	deff      	udf	#255	; 0xff
 8000bc2:	fab2 f382 	clz	r3, r2
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f040 8090 	bne.w	8000cec <__udivmoddi4+0x210>
 8000bcc:	1a8a      	subs	r2, r1, r2
 8000bce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bd2:	fa1f fe8c 	uxth.w	lr, ip
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bdc:	fb07 2015 	mls	r0, r7, r5, r2
 8000be0:	0c22      	lsrs	r2, r4, #16
 8000be2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000be6:	fb0e f005 	mul.w	r0, lr, r5
 8000bea:	4290      	cmp	r0, r2
 8000bec:	d908      	bls.n	8000c00 <__udivmoddi4+0x124>
 8000bee:	eb1c 0202 	adds.w	r2, ip, r2
 8000bf2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x122>
 8000bf8:	4290      	cmp	r0, r2
 8000bfa:	f200 80cb 	bhi.w	8000d94 <__udivmoddi4+0x2b8>
 8000bfe:	4645      	mov	r5, r8
 8000c00:	1a12      	subs	r2, r2, r0
 8000c02:	b2a4      	uxth	r4, r4
 8000c04:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c08:	fb07 2210 	mls	r2, r7, r0, r2
 8000c0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c10:	fb0e fe00 	mul.w	lr, lr, r0
 8000c14:	45a6      	cmp	lr, r4
 8000c16:	d908      	bls.n	8000c2a <__udivmoddi4+0x14e>
 8000c18:	eb1c 0404 	adds.w	r4, ip, r4
 8000c1c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c20:	d202      	bcs.n	8000c28 <__udivmoddi4+0x14c>
 8000c22:	45a6      	cmp	lr, r4
 8000c24:	f200 80bb 	bhi.w	8000d9e <__udivmoddi4+0x2c2>
 8000c28:	4610      	mov	r0, r2
 8000c2a:	eba4 040e 	sub.w	r4, r4, lr
 8000c2e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c32:	e79f      	b.n	8000b74 <__udivmoddi4+0x98>
 8000c34:	f1c1 0720 	rsb	r7, r1, #32
 8000c38:	408b      	lsls	r3, r1
 8000c3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c42:	fa05 f401 	lsl.w	r4, r5, r1
 8000c46:	fa20 f307 	lsr.w	r3, r0, r7
 8000c4a:	40fd      	lsrs	r5, r7
 8000c4c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c50:	4323      	orrs	r3, r4
 8000c52:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c56:	fa1f fe8c 	uxth.w	lr, ip
 8000c5a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c5e:	0c1c      	lsrs	r4, r3, #16
 8000c60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c64:	fb08 f50e 	mul.w	r5, r8, lr
 8000c68:	42a5      	cmp	r5, r4
 8000c6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c72:	d90b      	bls.n	8000c8c <__udivmoddi4+0x1b0>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c7c:	f080 8088 	bcs.w	8000d90 <__udivmoddi4+0x2b4>
 8000c80:	42a5      	cmp	r5, r4
 8000c82:	f240 8085 	bls.w	8000d90 <__udivmoddi4+0x2b4>
 8000c86:	f1a8 0802 	sub.w	r8, r8, #2
 8000c8a:	4464      	add	r4, ip
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	b29d      	uxth	r5, r3
 8000c90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c94:	fb09 4413 	mls	r4, r9, r3, r4
 8000c98:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c9c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ca0:	45a6      	cmp	lr, r4
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x1da>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000cac:	d26c      	bcs.n	8000d88 <__udivmoddi4+0x2ac>
 8000cae:	45a6      	cmp	lr, r4
 8000cb0:	d96a      	bls.n	8000d88 <__udivmoddi4+0x2ac>
 8000cb2:	3b02      	subs	r3, #2
 8000cb4:	4464      	add	r4, ip
 8000cb6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cba:	fba3 9502 	umull	r9, r5, r3, r2
 8000cbe:	eba4 040e 	sub.w	r4, r4, lr
 8000cc2:	42ac      	cmp	r4, r5
 8000cc4:	46c8      	mov	r8, r9
 8000cc6:	46ae      	mov	lr, r5
 8000cc8:	d356      	bcc.n	8000d78 <__udivmoddi4+0x29c>
 8000cca:	d053      	beq.n	8000d74 <__udivmoddi4+0x298>
 8000ccc:	b156      	cbz	r6, 8000ce4 <__udivmoddi4+0x208>
 8000cce:	ebb0 0208 	subs.w	r2, r0, r8
 8000cd2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cd6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cda:	40ca      	lsrs	r2, r1
 8000cdc:	40cc      	lsrs	r4, r1
 8000cde:	4317      	orrs	r7, r2
 8000ce0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cec:	f1c3 0120 	rsb	r1, r3, #32
 8000cf0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cf8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cfc:	409d      	lsls	r5, r3
 8000cfe:	432a      	orrs	r2, r5
 8000d00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d04:	fa1f fe8c 	uxth.w	lr, ip
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d10:	0c11      	lsrs	r1, r2, #16
 8000d12:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d16:	fb00 f50e 	mul.w	r5, r0, lr
 8000d1a:	428d      	cmp	r5, r1
 8000d1c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x258>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d2a:	d22f      	bcs.n	8000d8c <__udivmoddi4+0x2b0>
 8000d2c:	428d      	cmp	r5, r1
 8000d2e:	d92d      	bls.n	8000d8c <__udivmoddi4+0x2b0>
 8000d30:	3802      	subs	r0, #2
 8000d32:	4461      	add	r1, ip
 8000d34:	1b49      	subs	r1, r1, r5
 8000d36:	b292      	uxth	r2, r2
 8000d38:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d3c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d44:	fb05 f10e 	mul.w	r1, r5, lr
 8000d48:	4291      	cmp	r1, r2
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x282>
 8000d4c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d50:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d54:	d216      	bcs.n	8000d84 <__udivmoddi4+0x2a8>
 8000d56:	4291      	cmp	r1, r2
 8000d58:	d914      	bls.n	8000d84 <__udivmoddi4+0x2a8>
 8000d5a:	3d02      	subs	r5, #2
 8000d5c:	4462      	add	r2, ip
 8000d5e:	1a52      	subs	r2, r2, r1
 8000d60:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d64:	e738      	b.n	8000bd8 <__udivmoddi4+0xfc>
 8000d66:	4631      	mov	r1, r6
 8000d68:	4630      	mov	r0, r6
 8000d6a:	e708      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000d6c:	4639      	mov	r1, r7
 8000d6e:	e6e6      	b.n	8000b3e <__udivmoddi4+0x62>
 8000d70:	4610      	mov	r0, r2
 8000d72:	e6fb      	b.n	8000b6c <__udivmoddi4+0x90>
 8000d74:	4548      	cmp	r0, r9
 8000d76:	d2a9      	bcs.n	8000ccc <__udivmoddi4+0x1f0>
 8000d78:	ebb9 0802 	subs.w	r8, r9, r2
 8000d7c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d80:	3b01      	subs	r3, #1
 8000d82:	e7a3      	b.n	8000ccc <__udivmoddi4+0x1f0>
 8000d84:	4645      	mov	r5, r8
 8000d86:	e7ea      	b.n	8000d5e <__udivmoddi4+0x282>
 8000d88:	462b      	mov	r3, r5
 8000d8a:	e794      	b.n	8000cb6 <__udivmoddi4+0x1da>
 8000d8c:	4640      	mov	r0, r8
 8000d8e:	e7d1      	b.n	8000d34 <__udivmoddi4+0x258>
 8000d90:	46d0      	mov	r8, sl
 8000d92:	e77b      	b.n	8000c8c <__udivmoddi4+0x1b0>
 8000d94:	3d02      	subs	r5, #2
 8000d96:	4462      	add	r2, ip
 8000d98:	e732      	b.n	8000c00 <__udivmoddi4+0x124>
 8000d9a:	4608      	mov	r0, r1
 8000d9c:	e70a      	b.n	8000bb4 <__udivmoddi4+0xd8>
 8000d9e:	4464      	add	r4, ip
 8000da0:	3802      	subs	r0, #2
 8000da2:	e742      	b.n	8000c2a <__udivmoddi4+0x14e>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <current_monitor_set>:
float g_absolute_max_current_ratio = 0.0f; // DO NOT EXCEED!
//p_current_t gp_current_monitor_strip[NUM_STRIPS];


void current_monitor_set(float value)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value < g_absolute_max_current_ratio)
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <current_monitor_set+0x3c>)
 8000db4:	edd3 7a00 	vldr	s15, [r3]
 8000db8:	ed97 7a01 	vldr	s14, [r7, #4]
 8000dbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc4:	d503      	bpl.n	8000dce <current_monitor_set+0x26>
    {
        g_max_current_ratio = value;
 8000dc6:	4a08      	ldr	r2, [pc, #32]	; (8000de8 <current_monitor_set+0x40>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6013      	str	r3, [r2, #0]
    }
    else
    {
        g_max_current_ratio = g_absolute_max_current_ratio;
    }
}
 8000dcc:	e003      	b.n	8000dd6 <current_monitor_set+0x2e>
        g_max_current_ratio = g_absolute_max_current_ratio;
 8000dce:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <current_monitor_set+0x3c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a05      	ldr	r2, [pc, #20]	; (8000de8 <current_monitor_set+0x40>)
 8000dd4:	6013      	str	r3, [r2, #0]
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000284 	.word	0x20000284
 8000de8:	20000000 	.word	0x20000000

08000dec <current_monitor_ratio>:


float current_monitor_ratio(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
    return g_max_current_ratio;
 8000df0:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <current_monitor_ratio+0x18>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	ee07 3a90 	vmov	s15, r3
}
 8000df8:	eeb0 0a67 	vmov.f32	s0, s15
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	20000000 	.word	0x20000000

08000e08 <current_monitor_init>:


void current_monitor_init(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
    while ((g_max_current_ratio * ((float)CURRENT_MONITOR_MAX_CURRENT_PER_LED_MA / 1000) * NUM_LEDS) > (float)CURRENT_MONITOR_MAX_CURRENT_DRAW_A)
 8000e0c:	e009      	b.n	8000e22 <current_monitor_init+0x1a>
    {
        g_max_current_ratio -= 0.05f;
 8000e0e:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <current_monitor_init+0x68>)
 8000e10:	edd3 7a00 	vldr	s15, [r3]
 8000e14:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8000e74 <current_monitor_init+0x6c>
 8000e18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e1c:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <current_monitor_init+0x68>)
 8000e1e:	edc3 7a00 	vstr	s15, [r3]
    while ((g_max_current_ratio * ((float)CURRENT_MONITOR_MAX_CURRENT_PER_LED_MA / 1000) * NUM_LEDS) > (float)CURRENT_MONITOR_MAX_CURRENT_DRAW_A)
 8000e22:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <current_monitor_init+0x68>)
 8000e24:	edd3 7a00 	vldr	s15, [r3]
 8000e28:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000e78 <current_monitor_init+0x70>
 8000e2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e30:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000e7c <current_monitor_init+0x74>
 8000e34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e38:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000e7c <current_monitor_init+0x74>
 8000e3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e40:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000e80 <current_monitor_init+0x78>
 8000e44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e48:	eeb2 7a03 	vmov.f32	s14, #35	; 0x41180000  9.5
 8000e4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e54:	dcdb      	bgt.n	8000e0e <current_monitor_init+0x6>
    }
    //if (g_max_current_ratio <= 0) while(1); // broken..
    g_max_current_ratio = 0.1f;
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <current_monitor_init+0x68>)
 8000e58:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <current_monitor_init+0x7c>)
 8000e5a:	601a      	str	r2, [r3, #0]
    g_absolute_max_current_ratio = g_max_current_ratio;
 8000e5c:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <current_monitor_init+0x68>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a09      	ldr	r2, [pc, #36]	; (8000e88 <current_monitor_init+0x80>)
 8000e62:	6013      	str	r3, [r2, #0]

}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	20000000 	.word	0x20000000
 8000e74:	3d4ccccd 	.word	0x3d4ccccd
 8000e78:	3d23d70a 	.word	0x3d23d70a
 8000e7c:	43960000 	.word	0x43960000
 8000e80:	00000000 	.word	0x00000000
 8000e84:	3dcccccd 	.word	0x3dcccccd
 8000e88:	20000284 	.word	0x20000284

08000e8c <animate_led_wheel>:
extern uint32_t g_max_strip_length;
extern uint16_t g_all_strip_mask;


uint8_t* animate_led_wheel(uint8_t wheel_pos)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
    // red, green, blue (3 primary colors)
    // 8 bit colors..  Max value is 255
    // make a wheel, split it into 3 primary colors (85 positions per section)
    // increment wheel position.  After 85 steps passed then move to next primary color
    // this creates a rainbow effect. Reset wheel position to the section.
    if (wheel_pos < 85)
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	2b54      	cmp	r3, #84	; 0x54
 8000e9a:	d813      	bhi.n	8000ec4 <animate_led_wheel+0x38>
    {
        c[0] = wheel_pos * 3;
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	0052      	lsls	r2, r2, #1
 8000ea2:	4413      	add	r3, r2
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	4b23      	ldr	r3, [pc, #140]	; (8000f34 <animate_led_wheel+0xa8>)
 8000ea8:	701a      	strb	r2, [r3, #0]
        c[1] = UINT8_MAX - (wheel_pos * 3);
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	461a      	mov	r2, r3
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	b2da      	uxtb	r2, r3
 8000eb8:	4b1e      	ldr	r3, [pc, #120]	; (8000f34 <animate_led_wheel+0xa8>)
 8000eba:	705a      	strb	r2, [r3, #1]
        c[2] = 0;
 8000ebc:	4b1d      	ldr	r3, [pc, #116]	; (8000f34 <animate_led_wheel+0xa8>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	709a      	strb	r2, [r3, #2]
 8000ec2:	e02f      	b.n	8000f24 <animate_led_wheel+0x98>
    }
    else if(wheel_pos < 170)
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	2ba9      	cmp	r3, #169	; 0xa9
 8000ec8:	d816      	bhi.n	8000ef8 <animate_led_wheel+0x6c>
    {
        wheel_pos -= 85;
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	3b55      	subs	r3, #85	; 0x55
 8000ece:	71fb      	strb	r3, [r7, #7]
        c[0] = UINT8_MAX - (wheel_pos * 3);
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	3b01      	subs	r3, #1
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <animate_led_wheel+0xa8>)
 8000ee0:	701a      	strb	r2, [r3, #0]
        c[1] = 0;
 8000ee2:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <animate_led_wheel+0xa8>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	705a      	strb	r2, [r3, #1]
        c[2] = wheel_pos * 3;
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	461a      	mov	r2, r3
 8000eec:	0052      	lsls	r2, r2, #1
 8000eee:	4413      	add	r3, r2
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <animate_led_wheel+0xa8>)
 8000ef4:	709a      	strb	r2, [r3, #2]
 8000ef6:	e015      	b.n	8000f24 <animate_led_wheel+0x98>
    }
    else
    {
        wheel_pos -= 170;
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	3356      	adds	r3, #86	; 0x56
 8000efc:	71fb      	strb	r3, [r7, #7]
        c[0] = 0;
 8000efe:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <animate_led_wheel+0xa8>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]
        c[1] = wheel_pos * 3;
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	461a      	mov	r2, r3
 8000f08:	0052      	lsls	r2, r2, #1
 8000f0a:	4413      	add	r3, r2
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <animate_led_wheel+0xa8>)
 8000f10:	705a      	strb	r2, [r3, #1]
        c[2] = UINT8_MAX - (wheel_pos * 3);
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	461a      	mov	r2, r3
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <animate_led_wheel+0xa8>)
 8000f22:	709a      	strb	r2, [r3, #2]
    }
    return c;
 8000f24:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <animate_led_wheel+0xa8>)
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	20000288 	.word	0x20000288

08000f38 <animate_led_show_strip>:
 * @brief   Write data stored in `gp_ws28128b_strip` array to the strip
 * @param   strip_mask - the strip to write to
 * @return  void
 */
void animate_led_show_strip(const strip_mask_t strip_mask)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	80fb      	strh	r3, [r7, #6]
    if (STRIP_NUM_1 & strip_mask)
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	f003 0301 	and.w	r3, r3, #1
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <animate_led_show_strip+0x1a>
    {
        ws2812b_show_strip_one();
 8000f4e:	f000 ff51 	bl	8001df4 <ws2812b_show_strip_one>
    }
    if (STRIP_NUM_2 & strip_mask)
 8000f52:	88fb      	ldrh	r3, [r7, #6]
 8000f54:	f003 0302 	and.w	r3, r3, #2
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <animate_led_show_strip+0x2a>
    {
        ws2812b_show_strip_two();
 8000f5e:	f000 ff50 	bl	8001e02 <ws2812b_show_strip_two>
    }
    if (STRIP_NUM_3 & strip_mask)
 8000f62:	88fb      	ldrh	r3, [r7, #6]
 8000f64:	f003 0304 	and.w	r3, r3, #4
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <animate_led_show_strip+0x3a>
    {
        ws2812b_show_strip_three();
 8000f6e:	f000 ff4f 	bl	8001e10 <ws2812b_show_strip_three>
    }
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <animate_led_set_pixel>:


void animate_led_set_pixel(const strip_mask_t mask, const uint16_t pixel, const uint8_t red, const uint8_t green,
                           const uint8_t blue)
{
 8000f7a:	b590      	push	{r4, r7, lr}
 8000f7c:	b087      	sub	sp, #28
 8000f7e:	af02      	add	r7, sp, #8
 8000f80:	4604      	mov	r4, r0
 8000f82:	4608      	mov	r0, r1
 8000f84:	4611      	mov	r1, r2
 8000f86:	461a      	mov	r2, r3
 8000f88:	4623      	mov	r3, r4
 8000f8a:	80fb      	strh	r3, [r7, #6]
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	80bb      	strh	r3, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	70fb      	strb	r3, [r7, #3]
 8000f94:	4613      	mov	r3, r2
 8000f96:	70bb      	strb	r3, [r7, #2]
	for (strip_num_e strip_num = STRIP_NUM_1; strip_num <= NUM_STRIPS; strip_num = (strip_num_e)(strip_num + 1))
 8000f98:	2301      	movs	r3, #1
 8000f9a:	73fb      	strb	r3, [r7, #15]
 8000f9c:	e01a      	b.n	8000fd4 <animate_led_set_pixel+0x5a>
	{
		if ((mask & strip_num) && (ws2812_pixel_is_in_strip_range(strip_num, pixel)))
 8000f9e:	88fa      	ldrh	r2, [r7, #6]
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d012      	beq.n	8000fce <animate_led_set_pixel+0x54>
 8000fa8:	88ba      	ldrh	r2, [r7, #4]
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	4611      	mov	r1, r2
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 fdc8 	bl	8001b44 <ws2812_pixel_is_in_strip_range>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d009      	beq.n	8000fce <animate_led_set_pixel+0x54>
		{
			 ws2812b_set_led(strip_num, pixel, red, green, blue);
 8000fba:	78bc      	ldrb	r4, [r7, #2]
 8000fbc:	78fa      	ldrb	r2, [r7, #3]
 8000fbe:	88b9      	ldrh	r1, [r7, #4]
 8000fc0:	7bf8      	ldrb	r0, [r7, #15]
 8000fc2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	4623      	mov	r3, r4
 8000fca:	f000 fdef 	bl	8001bac <ws2812b_set_led>
	for (strip_num_e strip_num = STRIP_NUM_1; strip_num <= NUM_STRIPS; strip_num = (strip_num_e)(strip_num + 1))
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	73fb      	strb	r3, [r7, #15]
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	2b03      	cmp	r3, #3
 8000fd8:	d9e1      	bls.n	8000f9e <animate_led_set_pixel+0x24>
		}
	}
}
 8000fda:	bf00      	nop
 8000fdc:	bf00      	nop
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd90      	pop	{r4, r7, pc}

08000fe4 <animate_led_set_all_pixels>:


void animate_led_set_all_pixels(const strip_mask_t mask, const uint8_t red, const uint8_t green, const uint8_t blue)
{
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b087      	sub	sp, #28
 8000fe8:	af02      	add	r7, sp, #8
 8000fea:	4604      	mov	r4, r0
 8000fec:	4608      	mov	r0, r1
 8000fee:	4611      	mov	r1, r2
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	80fb      	strh	r3, [r7, #6]
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	717b      	strb	r3, [r7, #5]
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	713b      	strb	r3, [r7, #4]
 8000ffe:	4613      	mov	r3, r2
 8001000:	70fb      	strb	r3, [r7, #3]
    uint16_t strip_size = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	817b      	strh	r3, [r7, #10]
	for (strip_num_e strip_num = STRIP_NUM_1; strip_num <= NUM_STRIPS; strip_num = (strip_num_e)(strip_num + 1))
 8001006:	2301      	movs	r3, #1
 8001008:	73fb      	strb	r3, [r7, #15]
 800100a:	e020      	b.n	800104e <animate_led_set_all_pixels+0x6a>
	{
		if (mask & strip_num)
 800100c:	88fa      	ldrh	r2, [r7, #6]
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	4013      	ands	r3, r2
 8001012:	2b00      	cmp	r3, #0
 8001014:	d018      	beq.n	8001048 <animate_led_set_all_pixels+0x64>
		{
			strip_size = ws2812_get_strip_size(strip_num);
 8001016:	7bfb      	ldrb	r3, [r7, #15]
 8001018:	4618      	mov	r0, r3
 800101a:	f000 fd15 	bl	8001a48 <ws2812_get_strip_size>
 800101e:	4603      	mov	r3, r0
 8001020:	817b      	strh	r3, [r7, #10]
			for (uint16_t yyy = 0; yyy < strip_size; yyy++) ws2812b_set_led(strip_num, yyy, red, green, blue);
 8001022:	2300      	movs	r3, #0
 8001024:	81bb      	strh	r3, [r7, #12]
 8001026:	e00b      	b.n	8001040 <animate_led_set_all_pixels+0x5c>
 8001028:	793c      	ldrb	r4, [r7, #4]
 800102a:	797a      	ldrb	r2, [r7, #5]
 800102c:	89b9      	ldrh	r1, [r7, #12]
 800102e:	7bf8      	ldrb	r0, [r7, #15]
 8001030:	78fb      	ldrb	r3, [r7, #3]
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	4623      	mov	r3, r4
 8001036:	f000 fdb9 	bl	8001bac <ws2812b_set_led>
 800103a:	89bb      	ldrh	r3, [r7, #12]
 800103c:	3301      	adds	r3, #1
 800103e:	81bb      	strh	r3, [r7, #12]
 8001040:	89ba      	ldrh	r2, [r7, #12]
 8001042:	897b      	ldrh	r3, [r7, #10]
 8001044:	429a      	cmp	r2, r3
 8001046:	d3ef      	bcc.n	8001028 <animate_led_set_all_pixels+0x44>
	for (strip_num_e strip_num = STRIP_NUM_1; strip_num <= NUM_STRIPS; strip_num = (strip_num_e)(strip_num + 1))
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	3301      	adds	r3, #1
 800104c:	73fb      	strb	r3, [r7, #15]
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	2b03      	cmp	r3, #3
 8001052:	d9db      	bls.n	800100c <animate_led_set_all_pixels+0x28>
		}
	}
    animate_led_show_strip(mask);
 8001054:	88fb      	ldrh	r3, [r7, #6]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff ff6e 	bl	8000f38 <animate_led_show_strip>
}
 800105c:	bf00      	nop
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	bd90      	pop	{r4, r7, pc}

08001064 <animate_led_solid_custom_color>:


void animate_led_solid_custom_color(const strip_mask_t mask, const color_hex_code_e color)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	6039      	str	r1, [r7, #0]
 800106e:	80fb      	strh	r3, [r7, #6]
    uint8_t color_rgb[sizeof(ws2812b_led_t)] = {0};
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <animate_led_solid_custom_color+0x40>)
 8001072:	881b      	ldrh	r3, [r3, #0]
 8001074:	81bb      	strh	r3, [r7, #12]
 8001076:	2300      	movs	r3, #0
 8001078:	73bb      	strb	r3, [r7, #14]
    color_led_hex_to_rgb(color, color_rgb);
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	4619      	mov	r1, r3
 8001080:	6838      	ldr	r0, [r7, #0]
 8001082:	f000 fca1 	bl	80019c8 <color_led_hex_to_rgb>
    animate_led_set_all_pixels(mask, color_rgb[offsetof(ws2812b_led_t, red)], \
 8001086:	7b39      	ldrb	r1, [r7, #12]
 8001088:	7b7a      	ldrb	r2, [r7, #13]
 800108a:	7bbb      	ldrb	r3, [r7, #14]
 800108c:	88f8      	ldrh	r0, [r7, #6]
 800108e:	f7ff ffa9 	bl	8000fe4 <animate_led_set_all_pixels>
    		color_rgb[offsetof(ws2812b_led_t, green)],
			color_rgb[offsetof(ws2812b_led_t, blue)]);
    animate_led_show_strip(mask);
 8001092:	88fb      	ldrh	r3, [r7, #6]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ff4f 	bl	8000f38 <animate_led_show_strip>
}
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	0800c59c 	.word	0x0800c59c

080010a8 <animate_led_turn_all_pixels_off>:
 * @param   void
 * @return  void
 * @note    This function will set `gp_ws28128b_strip` array and write it to the strip(s).
 */
void animate_led_turn_all_pixels_off(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	animate_led_set_all_pixels((strip_mask_t)STRIP_ALL_SET, 0, 0, 0);
 80010ac:	2300      	movs	r3, #0
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	2007      	movs	r0, #7
 80010b4:	f7ff ff96 	bl	8000fe4 <animate_led_set_all_pixels>
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}

080010bc <animate_led_only_spell_word>:


void animate_led_only_spell_word(const strip_mask_t mask, const color_hex_code_e color,
                                 const uint16_t time_ms)
{
 80010bc:	b590      	push	{r4, r7, lr}
 80010be:	ed2d 8b02 	vpush	{d8}
 80010c2:	b089      	sub	sp, #36	; 0x24
 80010c4:	af02      	add	r7, sp, #8
 80010c6:	4603      	mov	r3, r0
 80010c8:	6039      	str	r1, [r7, #0]
 80010ca:	80fb      	strh	r3, [r7, #6]
 80010cc:	4613      	mov	r3, r2
 80010ce:	80bb      	strh	r3, [r7, #4]
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask);
 80010d0:	88fb      	ldrh	r3, [r7, #6]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 fcfc 	bl	8001ad0 <ws2812_led_get_max_strip_size>
 80010d8:	4603      	mov	r3, r0
 80010da:	827b      	strh	r3, [r7, #18]
    uint8_t color_rgb[sizeof(ws2812b_led_t)] = {0};
 80010dc:	4b26      	ldr	r3, [pc, #152]	; (8001178 <animate_led_only_spell_word+0xbc>)
 80010de:	881b      	ldrh	r3, [r3, #0]
 80010e0:	81bb      	strh	r3, [r7, #12]
 80010e2:	2300      	movs	r3, #0
 80010e4:	73bb      	strb	r3, [r7, #14]
    color_led_hex_to_rgb(color, color_rgb);
 80010e6:	f107 030c 	add.w	r3, r7, #12
 80010ea:	4619      	mov	r1, r3
 80010ec:	6838      	ldr	r0, [r7, #0]
 80010ee:	f000 fc6b 	bl	80019c8 <color_led_hex_to_rgb>
	for (int iii = 0; iii < strip_size; iii++)
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
 80010f6:	e034      	b.n	8001162 <animate_led_only_spell_word+0xa6>
	{
        if (task_button_press_interrupt_occurred())
 80010f8:	f000 fedc 	bl	8001eb4 <task_button_press_interrupt_occurred>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d00d      	beq.n	800111e <animate_led_only_spell_word+0x62>
        {
            if (task_button_press_check_interrupts(&color_rgb[offsetof(ws2812b_led_t, red)],
 8001102:	f107 030c 	add.w	r3, r7, #12
 8001106:	1c9a      	adds	r2, r3, #2
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	1c59      	adds	r1, r3, #1
 800110e:	f107 030c 	add.w	r3, r7, #12
 8001112:	4618      	mov	r0, r3
 8001114:	f000 ff2e 	bl	8001f74 <task_button_press_check_interrupts>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d126      	bne.n	800116c <animate_led_only_spell_word+0xb0>
					&color_rgb[offsetof(ws2812b_led_t, blue)]))
            {
                return;
            }
        }
        animate_led_set_pixel(mask, iii,
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	b299      	uxth	r1, r3
 8001122:	7b3a      	ldrb	r2, [r7, #12]
 8001124:	7b7c      	ldrb	r4, [r7, #13]
 8001126:	7bbb      	ldrb	r3, [r7, #14]
 8001128:	88f8      	ldrh	r0, [r7, #6]
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	4623      	mov	r3, r4
 800112e:	f7ff ff24 	bl	8000f7a <animate_led_set_pixel>
        		color_rgb[offsetof(ws2812b_led_t, red)],
				color_rgb[offsetof(ws2812b_led_t, green)],
				color_rgb[offsetof(ws2812b_led_t, blue)]);
        animate_led_show_strip(mask);
 8001132:	88fb      	ldrh	r3, [r7, #6]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff feff 	bl	8000f38 <animate_led_show_strip>
 		task_led_ctrl_delay(time_ms / task_led_ctrl_speed());
 800113a:	88bb      	ldrh	r3, [r7, #4]
 800113c:	ee07 3a90 	vmov	s15, r3
 8001140:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001144:	f001 fb22 	bl	800278c <task_led_ctrl_speed>
 8001148:	eeb0 7a40 	vmov.f32	s14, s0
 800114c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001150:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001154:	ee17 0a90 	vmov	r0, s15
 8001158:	f001 f9b2 	bl	80024c0 <task_led_ctrl_delay>
	for (int iii = 0; iii < strip_size; iii++)
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	3301      	adds	r3, #1
 8001160:	617b      	str	r3, [r7, #20]
 8001162:	8a7b      	ldrh	r3, [r7, #18]
 8001164:	697a      	ldr	r2, [r7, #20]
 8001166:	429a      	cmp	r2, r3
 8001168:	dbc6      	blt.n	80010f8 <animate_led_only_spell_word+0x3c>
 800116a:	e000      	b.n	800116e <animate_led_only_spell_word+0xb2>
                return;
 800116c:	bf00      	nop
	}
}
 800116e:	371c      	adds	r7, #28
 8001170:	46bd      	mov	sp, r7
 8001172:	ecbd 8b02 	vpop	{d8}
 8001176:	bd90      	pop	{r4, r7, pc}
 8001178:	0800c59c 	.word	0x0800c59c

0800117c <animate_led_fade_in_fade_out>:


void animate_led_fade_in_fade_out(const strip_mask_t mask, const color_hex_code_e color)
{
 800117c:	b5b0      	push	{r4, r5, r7, lr}
 800117e:	b08a      	sub	sp, #40	; 0x28
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	81fb      	strh	r3, [r7, #14]
    float r, g, b;
    uint8_t color_rgb[sizeof(ws2812b_led_t)] = {0};
 8001188:	4b9b      	ldr	r3, [pc, #620]	; (80013f8 <animate_led_fade_in_fade_out+0x27c>)
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	823b      	strh	r3, [r7, #16]
 800118e:	2300      	movs	r3, #0
 8001190:	74bb      	strb	r3, [r7, #18]
    color_led_hex_to_rgb(color, color_rgb);
 8001192:	f107 0310 	add.w	r3, r7, #16
 8001196:	4619      	mov	r1, r3
 8001198:	68b8      	ldr	r0, [r7, #8]
 800119a:	f000 fc15 	bl	80019c8 <color_led_hex_to_rgb>
    for (int iii = 0; iii < 256; iii++)
 800119e:	2300      	movs	r3, #0
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
 80011a2:	e08b      	b.n	80012bc <animate_led_fade_in_fade_out+0x140>
    {
        if (task_button_press_interrupt_occurred())
 80011a4:	f000 fe86 	bl	8001eb4 <task_button_press_interrupt_occurred>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d00e      	beq.n	80011cc <animate_led_fade_in_fade_out+0x50>
        {
            if (task_button_press_check_interrupts(&color_rgb[offsetof(ws2812b_led_t, red)],
 80011ae:	f107 0310 	add.w	r3, r7, #16
 80011b2:	1c9a      	adds	r2, r3, #2
 80011b4:	f107 0310 	add.w	r3, r7, #16
 80011b8:	1c59      	adds	r1, r3, #1
 80011ba:	f107 0310 	add.w	r3, r7, #16
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 fed8 	bl	8001f74 <task_button_press_check_interrupts>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f040 810f 	bne.w	80013ea <animate_led_fade_in_fade_out+0x26e>
					&color_rgb[offsetof(ws2812b_led_t, blue)]))
            {
                return;
            }
        }
        r = (iii / 256.0) * color_rgb[offsetof(ws2812b_led_t, red)];
 80011cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011ce:	f7ff f9a1 	bl	8000514 <__aeabi_i2d>
 80011d2:	f04f 0200 	mov.w	r2, #0
 80011d6:	4b89      	ldr	r3, [pc, #548]	; (80013fc <animate_led_fade_in_fade_out+0x280>)
 80011d8:	f7ff fb30 	bl	800083c <__aeabi_ddiv>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4614      	mov	r4, r2
 80011e2:	461d      	mov	r5, r3
 80011e4:	7c3b      	ldrb	r3, [r7, #16]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff f994 	bl	8000514 <__aeabi_i2d>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4620      	mov	r0, r4
 80011f2:	4629      	mov	r1, r5
 80011f4:	f7ff f9f8 	bl	80005e8 <__aeabi_dmul>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	4610      	mov	r0, r2
 80011fe:	4619      	mov	r1, r3
 8001200:	f7ff fc04 	bl	8000a0c <__aeabi_d2f>
 8001204:	4603      	mov	r3, r0
 8001206:	61fb      	str	r3, [r7, #28]
        g = (iii / 256.0) * color_rgb[offsetof(ws2812b_led_t, green)];
 8001208:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800120a:	f7ff f983 	bl	8000514 <__aeabi_i2d>
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	4b7a      	ldr	r3, [pc, #488]	; (80013fc <animate_led_fade_in_fade_out+0x280>)
 8001214:	f7ff fb12 	bl	800083c <__aeabi_ddiv>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4614      	mov	r4, r2
 800121e:	461d      	mov	r5, r3
 8001220:	7c7b      	ldrb	r3, [r7, #17]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff f976 	bl	8000514 <__aeabi_i2d>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	4620      	mov	r0, r4
 800122e:	4629      	mov	r1, r5
 8001230:	f7ff f9da 	bl	80005e8 <__aeabi_dmul>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	4610      	mov	r0, r2
 800123a:	4619      	mov	r1, r3
 800123c:	f7ff fbe6 	bl	8000a0c <__aeabi_d2f>
 8001240:	4603      	mov	r3, r0
 8001242:	61bb      	str	r3, [r7, #24]
        b = (iii / 256.0) * color_rgb[offsetof(ws2812b_led_t, blue)];
 8001244:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001246:	f7ff f965 	bl	8000514 <__aeabi_i2d>
 800124a:	f04f 0200 	mov.w	r2, #0
 800124e:	4b6b      	ldr	r3, [pc, #428]	; (80013fc <animate_led_fade_in_fade_out+0x280>)
 8001250:	f7ff faf4 	bl	800083c <__aeabi_ddiv>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4614      	mov	r4, r2
 800125a:	461d      	mov	r5, r3
 800125c:	7cbb      	ldrb	r3, [r7, #18]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff f958 	bl	8000514 <__aeabi_i2d>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4620      	mov	r0, r4
 800126a:	4629      	mov	r1, r5
 800126c:	f7ff f9bc 	bl	80005e8 <__aeabi_dmul>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4610      	mov	r0, r2
 8001276:	4619      	mov	r1, r3
 8001278:	f7ff fbc8 	bl	8000a0c <__aeabi_d2f>
 800127c:	4603      	mov	r3, r0
 800127e:	617b      	str	r3, [r7, #20]
        animate_led_set_all_pixels(mask, r, g, b);
 8001280:	edd7 7a07 	vldr	s15, [r7, #28]
 8001284:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001288:	edc7 7a01 	vstr	s15, [r7, #4]
 800128c:	793b      	ldrb	r3, [r7, #4]
 800128e:	b2d9      	uxtb	r1, r3
 8001290:	edd7 7a06 	vldr	s15, [r7, #24]
 8001294:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001298:	edc7 7a01 	vstr	s15, [r7, #4]
 800129c:	793b      	ldrb	r3, [r7, #4]
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80012a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012a8:	edc7 7a01 	vstr	s15, [r7, #4]
 80012ac:	793b      	ldrb	r3, [r7, #4]
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	89f8      	ldrh	r0, [r7, #14]
 80012b2:	f7ff fe97 	bl	8000fe4 <animate_led_set_all_pixels>
    for (int iii = 0; iii < 256; iii++)
 80012b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b8:	3301      	adds	r3, #1
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
 80012bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012be:	2bff      	cmp	r3, #255	; 0xff
 80012c0:	f77f af70 	ble.w	80011a4 <animate_led_fade_in_fade_out+0x28>
    }
    for (int iii = 255; iii >= 0; iii = iii-2)
 80012c4:	23ff      	movs	r3, #255	; 0xff
 80012c6:	623b      	str	r3, [r7, #32]
 80012c8:	e08a      	b.n	80013e0 <animate_led_fade_in_fade_out+0x264>
    {
        if (task_button_press_interrupt_occurred())
 80012ca:	f000 fdf3 	bl	8001eb4 <task_button_press_interrupt_occurred>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d00d      	beq.n	80012f0 <animate_led_fade_in_fade_out+0x174>
        {
            if (task_button_press_check_interrupts(&color_rgb[offsetof(ws2812b_led_t, red)],
 80012d4:	f107 0310 	add.w	r3, r7, #16
 80012d8:	1c9a      	adds	r2, r3, #2
 80012da:	f107 0310 	add.w	r3, r7, #16
 80012de:	1c59      	adds	r1, r3, #1
 80012e0:	f107 0310 	add.w	r3, r7, #16
 80012e4:	4618      	mov	r0, r3
 80012e6:	f000 fe45 	bl	8001f74 <task_button_press_check_interrupts>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d17e      	bne.n	80013ee <animate_led_fade_in_fade_out+0x272>
					&color_rgb[offsetof(ws2812b_led_t, blue)]))
            {
                return;
            }
        }
        r = (iii / 256.0) * color_rgb[offsetof(ws2812b_led_t, red)];
 80012f0:	6a38      	ldr	r0, [r7, #32]
 80012f2:	f7ff f90f 	bl	8000514 <__aeabi_i2d>
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	4b40      	ldr	r3, [pc, #256]	; (80013fc <animate_led_fade_in_fade_out+0x280>)
 80012fc:	f7ff fa9e 	bl	800083c <__aeabi_ddiv>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4614      	mov	r4, r2
 8001306:	461d      	mov	r5, r3
 8001308:	7c3b      	ldrb	r3, [r7, #16]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff f902 	bl	8000514 <__aeabi_i2d>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4620      	mov	r0, r4
 8001316:	4629      	mov	r1, r5
 8001318:	f7ff f966 	bl	80005e8 <__aeabi_dmul>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4610      	mov	r0, r2
 8001322:	4619      	mov	r1, r3
 8001324:	f7ff fb72 	bl	8000a0c <__aeabi_d2f>
 8001328:	4603      	mov	r3, r0
 800132a:	61fb      	str	r3, [r7, #28]
        g = (iii / 256.0) * color_rgb[offsetof(ws2812b_led_t, green)];
 800132c:	6a38      	ldr	r0, [r7, #32]
 800132e:	f7ff f8f1 	bl	8000514 <__aeabi_i2d>
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	4b31      	ldr	r3, [pc, #196]	; (80013fc <animate_led_fade_in_fade_out+0x280>)
 8001338:	f7ff fa80 	bl	800083c <__aeabi_ddiv>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	4614      	mov	r4, r2
 8001342:	461d      	mov	r5, r3
 8001344:	7c7b      	ldrb	r3, [r7, #17]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f8e4 	bl	8000514 <__aeabi_i2d>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4620      	mov	r0, r4
 8001352:	4629      	mov	r1, r5
 8001354:	f7ff f948 	bl	80005e8 <__aeabi_dmul>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	4610      	mov	r0, r2
 800135e:	4619      	mov	r1, r3
 8001360:	f7ff fb54 	bl	8000a0c <__aeabi_d2f>
 8001364:	4603      	mov	r3, r0
 8001366:	61bb      	str	r3, [r7, #24]
        b = (iii / 256.0) * color_rgb[offsetof(ws2812b_led_t, blue)];
 8001368:	6a38      	ldr	r0, [r7, #32]
 800136a:	f7ff f8d3 	bl	8000514 <__aeabi_i2d>
 800136e:	f04f 0200 	mov.w	r2, #0
 8001372:	4b22      	ldr	r3, [pc, #136]	; (80013fc <animate_led_fade_in_fade_out+0x280>)
 8001374:	f7ff fa62 	bl	800083c <__aeabi_ddiv>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4614      	mov	r4, r2
 800137e:	461d      	mov	r5, r3
 8001380:	7cbb      	ldrb	r3, [r7, #18]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff f8c6 	bl	8000514 <__aeabi_i2d>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4620      	mov	r0, r4
 800138e:	4629      	mov	r1, r5
 8001390:	f7ff f92a 	bl	80005e8 <__aeabi_dmul>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4610      	mov	r0, r2
 800139a:	4619      	mov	r1, r3
 800139c:	f7ff fb36 	bl	8000a0c <__aeabi_d2f>
 80013a0:	4603      	mov	r3, r0
 80013a2:	617b      	str	r3, [r7, #20]
        animate_led_set_all_pixels(mask, r, g, b);
 80013a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80013a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013ac:	edc7 7a01 	vstr	s15, [r7, #4]
 80013b0:	793b      	ldrb	r3, [r7, #4]
 80013b2:	b2d9      	uxtb	r1, r3
 80013b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80013b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013bc:	edc7 7a01 	vstr	s15, [r7, #4]
 80013c0:	793b      	ldrb	r3, [r7, #4]
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80013c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013cc:	edc7 7a01 	vstr	s15, [r7, #4]
 80013d0:	793b      	ldrb	r3, [r7, #4]
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	89f8      	ldrh	r0, [r7, #14]
 80013d6:	f7ff fe05 	bl	8000fe4 <animate_led_set_all_pixels>
    for (int iii = 255; iii >= 0; iii = iii-2)
 80013da:	6a3b      	ldr	r3, [r7, #32]
 80013dc:	3b02      	subs	r3, #2
 80013de:	623b      	str	r3, [r7, #32]
 80013e0:	6a3b      	ldr	r3, [r7, #32]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f6bf af71 	bge.w	80012ca <animate_led_fade_in_fade_out+0x14e>
 80013e8:	e002      	b.n	80013f0 <animate_led_fade_in_fade_out+0x274>
                return;
 80013ea:	bf00      	nop
 80013ec:	e000      	b.n	80013f0 <animate_led_fade_in_fade_out+0x274>
                return;
 80013ee:	bf00      	nop
    }
}
 80013f0:	3728      	adds	r7, #40	; 0x28
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bdb0      	pop	{r4, r5, r7, pc}
 80013f6:	bf00      	nop
 80013f8:	0800c59c 	.word	0x0800c59c
 80013fc:	40700000 	.word	0x40700000

08001400 <animate_led_twinkle>:
}


void animate_led_twinkle(const strip_mask_t mask, const color_hex_code_e color, const uint16_t count,
                         const uint16_t speed_delay, const bool only_one)
{
 8001400:	b590      	push	{r4, r7, lr}
 8001402:	ed2d 8b02 	vpush	{d8}
 8001406:	b08b      	sub	sp, #44	; 0x2c
 8001408:	af02      	add	r7, sp, #8
 800140a:	60b9      	str	r1, [r7, #8]
 800140c:	4611      	mov	r1, r2
 800140e:	461a      	mov	r2, r3
 8001410:	4603      	mov	r3, r0
 8001412:	81fb      	strh	r3, [r7, #14]
 8001414:	460b      	mov	r3, r1
 8001416:	81bb      	strh	r3, [r7, #12]
 8001418:	4613      	mov	r3, r2
 800141a:	80fb      	strh	r3, [r7, #6]
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask);
 800141c:	89fb      	ldrh	r3, [r7, #14]
 800141e:	4618      	mov	r0, r3
 8001420:	f000 fb56 	bl	8001ad0 <ws2812_led_get_max_strip_size>
 8001424:	4603      	mov	r3, r0
 8001426:	837b      	strh	r3, [r7, #26]
    uint8_t color_rgb[sizeof(ws2812b_led_t)] = {0};
 8001428:	4b2e      	ldr	r3, [pc, #184]	; (80014e4 <animate_led_twinkle+0xe4>)
 800142a:	881b      	ldrh	r3, [r3, #0]
 800142c:	82bb      	strh	r3, [r7, #20]
 800142e:	2300      	movs	r3, #0
 8001430:	75bb      	strb	r3, [r7, #22]
    color_led_hex_to_rgb(color, color_rgb);
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	4619      	mov	r1, r3
 8001438:	68b8      	ldr	r0, [r7, #8]
 800143a:	f000 fac5 	bl	80019c8 <color_led_hex_to_rgb>
    for (int iii = 0; iii < count; iii++)
 800143e:	2300      	movs	r3, #0
 8001440:	61fb      	str	r3, [r7, #28]
 8001442:	e043      	b.n	80014cc <animate_led_twinkle+0xcc>
    {
        if (task_button_press_interrupt_occurred())
 8001444:	f000 fd36 	bl	8001eb4 <task_button_press_interrupt_occurred>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00d      	beq.n	800146a <animate_led_twinkle+0x6a>
        {
            if (task_button_press_check_interrupts(&color_rgb[offsetof(ws2812b_led_t, red)],
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	1c9a      	adds	r2, r3, #2
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	1c59      	adds	r1, r3, #1
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4618      	mov	r0, r3
 8001460:	f000 fd88 	bl	8001f74 <task_button_press_check_interrupts>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d135      	bne.n	80014d6 <animate_led_twinkle+0xd6>
					&color_rgb[offsetof(ws2812b_led_t, blue)]))
            {
                return;
            }
        }
        animate_led_set_pixel(mask, random_num(0, strip_size),
 800146a:	8b7b      	ldrh	r3, [r7, #26]
 800146c:	4619      	mov	r1, r3
 800146e:	2000      	movs	r0, #0
 8001470:	f009 ffbc 	bl	800b3ec <random_num>
 8001474:	4603      	mov	r3, r0
 8001476:	b299      	uxth	r1, r3
 8001478:	7d3a      	ldrb	r2, [r7, #20]
 800147a:	7d7c      	ldrb	r4, [r7, #21]
 800147c:	7dbb      	ldrb	r3, [r7, #22]
 800147e:	89f8      	ldrh	r0, [r7, #14]
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	4623      	mov	r3, r4
 8001484:	f7ff fd79 	bl	8000f7a <animate_led_set_pixel>
                              (color_rgb[offsetof(ws2812b_led_t, red)]),
                              (color_rgb[offsetof(ws2812b_led_t, green)]),
                              (color_rgb[offsetof(ws2812b_led_t, blue)]));
        animate_led_show_strip(mask);
 8001488:	89fb      	ldrh	r3, [r7, #14]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fd54 	bl	8000f38 <animate_led_show_strip>
        task_led_ctrl_delay(speed_delay / task_led_ctrl_speed());
 8001490:	88fb      	ldrh	r3, [r7, #6]
 8001492:	ee07 3a90 	vmov	s15, r3
 8001496:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800149a:	f001 f977 	bl	800278c <task_led_ctrl_speed>
 800149e:	eeb0 7a40 	vmov.f32	s14, s0
 80014a2:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80014a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014aa:	ee17 0a90 	vmov	r0, s15
 80014ae:	f001 f807 	bl	80024c0 <task_led_ctrl_delay>
        if (only_one) animate_led_set_all_pixels(mask, 0, 0, 0);
 80014b2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d005      	beq.n	80014c6 <animate_led_twinkle+0xc6>
 80014ba:	89f8      	ldrh	r0, [r7, #14]
 80014bc:	2300      	movs	r3, #0
 80014be:	2200      	movs	r2, #0
 80014c0:	2100      	movs	r1, #0
 80014c2:	f7ff fd8f 	bl	8000fe4 <animate_led_set_all_pixels>
    for (int iii = 0; iii < count; iii++)
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3301      	adds	r3, #1
 80014ca:	61fb      	str	r3, [r7, #28]
 80014cc:	89bb      	ldrh	r3, [r7, #12]
 80014ce:	69fa      	ldr	r2, [r7, #28]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	dbb7      	blt.n	8001444 <animate_led_twinkle+0x44>
 80014d4:	e000      	b.n	80014d8 <animate_led_twinkle+0xd8>
                return;
 80014d6:	bf00      	nop
    }

    //task_led_ctrl_delay(speed_delay / task_led_ctrl_speed());
}
 80014d8:	3724      	adds	r7, #36	; 0x24
 80014da:	46bd      	mov	sp, r7
 80014dc:	ecbd 8b02 	vpop	{d8}
 80014e0:	bd90      	pop	{r4, r7, pc}
 80014e2:	bf00      	nop
 80014e4:	0800c59c 	.word	0x0800c59c

080014e8 <animate_led_sparkle_only_random_color>:
}


void animate_led_sparkle_only_random_color(const strip_mask_t mask, const bool fill,
                                           const uint16_t speed_delay)
{
 80014e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ea:	ed2d 8b02 	vpush	{d8}
 80014ee:	b08b      	sub	sp, #44	; 0x2c
 80014f0:	af02      	add	r7, sp, #8
 80014f2:	4603      	mov	r3, r0
 80014f4:	80fb      	strh	r3, [r7, #6]
 80014f6:	460b      	mov	r3, r1
 80014f8:	717b      	strb	r3, [r7, #5]
 80014fa:	4613      	mov	r3, r2
 80014fc:	807b      	strh	r3, [r7, #2]
	float percent_to_fill = 0.7;
 80014fe:	4b42      	ldr	r3, [pc, #264]	; (8001608 <animate_led_sparkle_only_random_color+0x120>)
 8001500:	61bb      	str	r3, [r7, #24]
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask);
 8001502:	88fb      	ldrh	r3, [r7, #6]
 8001504:	4618      	mov	r0, r3
 8001506:	f000 fae3 	bl	8001ad0 <ws2812_led_get_max_strip_size>
 800150a:	4603      	mov	r3, r0
 800150c:	82fb      	strh	r3, [r7, #22]
	uint16_t num_active_leds = ws2812_get_num_active_animation_leds(mask);
 800150e:	88fb      	ldrh	r3, [r7, #6]
 8001510:	4618      	mov	r0, r3
 8001512:	f000 faab 	bl	8001a6c <ws2812_get_num_active_animation_leds>
 8001516:	4603      	mov	r3, r0
 8001518:	82bb      	strh	r3, [r7, #20]
    uint8_t dummy_red, dummy_green, dummy_blue; // not used but not worth creating a unique function IMO
	for (uint16_t iii = 0; iii < (percent_to_fill * (float)num_active_leds); iii++)
 800151a:	2300      	movs	r3, #0
 800151c:	83fb      	strh	r3, [r7, #30]
 800151e:	e059      	b.n	80015d4 <animate_led_sparkle_only_random_color+0xec>
	{
	    if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001520:	f000 fcc8 	bl	8001eb4 <task_button_press_interrupt_occurred>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d00b      	beq.n	8001542 <animate_led_sparkle_only_random_color+0x5a>
 800152a:	f107 020d 	add.w	r2, r7, #13
 800152e:	f107 010e 	add.w	r1, r7, #14
 8001532:	f107 030f 	add.w	r3, r7, #15
 8001536:	4618      	mov	r0, r3
 8001538:	f000 fd1c 	bl	8001f74 <task_button_press_check_interrupts>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d15c      	bne.n	80015fc <animate_led_sparkle_only_random_color+0x114>
		int pix = random_num(0, strip_size);
 8001542:	8afb      	ldrh	r3, [r7, #22]
 8001544:	4619      	mov	r1, r3
 8001546:	2000      	movs	r0, #0
 8001548:	f009 ff50 	bl	800b3ec <random_num>
 800154c:	4603      	mov	r3, r0
 800154e:	613b      	str	r3, [r7, #16]
		animate_led_set_pixel(mask, pix, random_num(0, 255), random_num(0, 255), random_num(0, 255));
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	b29c      	uxth	r4, r3
 8001554:	21ff      	movs	r1, #255	; 0xff
 8001556:	2000      	movs	r0, #0
 8001558:	f009 ff48 	bl	800b3ec <random_num>
 800155c:	4603      	mov	r3, r0
 800155e:	b2dd      	uxtb	r5, r3
 8001560:	21ff      	movs	r1, #255	; 0xff
 8001562:	2000      	movs	r0, #0
 8001564:	f009 ff42 	bl	800b3ec <random_num>
 8001568:	4603      	mov	r3, r0
 800156a:	b2de      	uxtb	r6, r3
 800156c:	21ff      	movs	r1, #255	; 0xff
 800156e:	2000      	movs	r0, #0
 8001570:	f009 ff3c 	bl	800b3ec <random_num>
 8001574:	4603      	mov	r3, r0
 8001576:	b2db      	uxtb	r3, r3
 8001578:	88f8      	ldrh	r0, [r7, #6]
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	4633      	mov	r3, r6
 800157e:	462a      	mov	r2, r5
 8001580:	4621      	mov	r1, r4
 8001582:	f7ff fcfa 	bl	8000f7a <animate_led_set_pixel>
		animate_led_show_strip(mask);
 8001586:	88fb      	ldrh	r3, [r7, #6]
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff fcd5 	bl	8000f38 <animate_led_show_strip>
        task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 800158e:	887b      	ldrh	r3, [r7, #2]
 8001590:	ee07 3a90 	vmov	s15, r3
 8001594:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001598:	f001 f8f8 	bl	800278c <task_led_ctrl_speed>
 800159c:	eeb0 7a40 	vmov.f32	s14, s0
 80015a0:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80015a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015a8:	ee17 0a90 	vmov	r0, s15
 80015ac:	f000 ff88 	bl	80024c0 <task_led_ctrl_delay>
		if (!fill) animate_led_set_pixel(mask, pix, 0, 0, 0);
 80015b0:	797b      	ldrb	r3, [r7, #5]
 80015b2:	f083 0301 	eor.w	r3, r3, #1
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d008      	beq.n	80015ce <animate_led_sparkle_only_random_color+0xe6>
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	b299      	uxth	r1, r3
 80015c0:	88f8      	ldrh	r0, [r7, #6]
 80015c2:	2300      	movs	r3, #0
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	2300      	movs	r3, #0
 80015c8:	2200      	movs	r2, #0
 80015ca:	f7ff fcd6 	bl	8000f7a <animate_led_set_pixel>
	for (uint16_t iii = 0; iii < (percent_to_fill * (float)num_active_leds); iii++)
 80015ce:	8bfb      	ldrh	r3, [r7, #30]
 80015d0:	3301      	adds	r3, #1
 80015d2:	83fb      	strh	r3, [r7, #30]
 80015d4:	8bfb      	ldrh	r3, [r7, #30]
 80015d6:	ee07 3a90 	vmov	s15, r3
 80015da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015de:	8abb      	ldrh	r3, [r7, #20]
 80015e0:	ee07 3a90 	vmov	s15, r3
 80015e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80015e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80015ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f8:	d492      	bmi.n	8001520 <animate_led_sparkle_only_random_color+0x38>
 80015fa:	e000      	b.n	80015fe <animate_led_sparkle_only_random_color+0x116>
	    if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80015fc:	bf00      	nop
	}
}
 80015fe:	3724      	adds	r7, #36	; 0x24
 8001600:	46bd      	mov	sp, r7
 8001602:	ecbd 8b02 	vpop	{d8}
 8001606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001608:	3f333333 	.word	0x3f333333

0800160c <animate_led_rainbow_cycle>:
    }
}


void animate_led_rainbow_cycle(const strip_mask_t mask, const uint16_t speed_delay)
{
 800160c:	b590      	push	{r4, r7, lr}
 800160e:	ed2d 8b02 	vpush	{d8}
 8001612:	b089      	sub	sp, #36	; 0x24
 8001614:	af02      	add	r7, sp, #8
 8001616:	4603      	mov	r3, r0
 8001618:	460a      	mov	r2, r1
 800161a:	80fb      	strh	r3, [r7, #6]
 800161c:	4613      	mov	r3, r2
 800161e:	80bb      	strh	r3, [r7, #4]
	uint8_t dummy_red, dummy_green, dummy_blue;
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask);
 8001620:	88fb      	ldrh	r3, [r7, #6]
 8001622:	4618      	mov	r0, r3
 8001624:	f000 fa54 	bl	8001ad0 <ws2812_led_get_max_strip_size>
 8001628:	4603      	mov	r3, r0
 800162a:	827b      	strh	r3, [r7, #18]
    uint8_t *c;
    uint16_t iii, jjj;
    for (jjj = 256 * 5; jjj > 0; jjj--)
 800162c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001630:	82bb      	strh	r3, [r7, #20]
 8001632:	e06c      	b.n	800170e <animate_led_rainbow_cycle+0x102>
    {
        if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001634:	f000 fc3e 	bl	8001eb4 <task_button_press_interrupt_occurred>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d00b      	beq.n	8001656 <animate_led_rainbow_cycle+0x4a>
 800163e:	f107 0209 	add.w	r2, r7, #9
 8001642:	f107 010a 	add.w	r1, r7, #10
 8001646:	f107 030b 	add.w	r3, r7, #11
 800164a:	4618      	mov	r0, r3
 800164c:	f000 fc92 	bl	8001f74 <task_button_press_check_interrupts>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d15f      	bne.n	8001716 <animate_led_rainbow_cycle+0x10a>
        for (iii = 0; iii < strip_size; iii++)
 8001656:	2300      	movs	r3, #0
 8001658:	82fb      	strh	r3, [r7, #22]
 800165a:	e02f      	b.n	80016bc <animate_led_rainbow_cycle+0xb0>
        {
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 800165c:	f000 fc2a 	bl	8001eb4 <task_button_press_interrupt_occurred>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d00b      	beq.n	800167e <animate_led_rainbow_cycle+0x72>
 8001666:	f107 0209 	add.w	r2, r7, #9
 800166a:	f107 010a 	add.w	r1, r7, #10
 800166e:	f107 030b 	add.w	r3, r7, #11
 8001672:	4618      	mov	r0, r3
 8001674:	f000 fc7e 	bl	8001f74 <task_button_press_check_interrupts>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d14d      	bne.n	800171a <animate_led_rainbow_cycle+0x10e>
            c = animate_led_wheel(((iii * 256 / strip_size) + jjj) & 255);
 800167e:	8afb      	ldrh	r3, [r7, #22]
 8001680:	021a      	lsls	r2, r3, #8
 8001682:	8a7b      	ldrh	r3, [r7, #18]
 8001684:	fb92 f3f3 	sdiv	r3, r2, r3
 8001688:	b2da      	uxtb	r2, r3
 800168a:	8abb      	ldrh	r3, [r7, #20]
 800168c:	b2db      	uxtb	r3, r3
 800168e:	4413      	add	r3, r2
 8001690:	b2db      	uxtb	r3, r3
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fbfa 	bl	8000e8c <animate_led_wheel>
 8001698:	60f8      	str	r0, [r7, #12]
            animate_led_set_pixel(mask, iii, *c, *(c + 1), *(c + 2));
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	781a      	ldrb	r2, [r3, #0]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	3301      	adds	r3, #1
 80016a2:	781c      	ldrb	r4, [r3, #0]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	3302      	adds	r3, #2
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	8af9      	ldrh	r1, [r7, #22]
 80016ac:	88f8      	ldrh	r0, [r7, #6]
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	4623      	mov	r3, r4
 80016b2:	f7ff fc62 	bl	8000f7a <animate_led_set_pixel>
        for (iii = 0; iii < strip_size; iii++)
 80016b6:	8afb      	ldrh	r3, [r7, #22]
 80016b8:	3301      	adds	r3, #1
 80016ba:	82fb      	strh	r3, [r7, #22]
 80016bc:	8afa      	ldrh	r2, [r7, #22]
 80016be:	8a7b      	ldrh	r3, [r7, #18]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d3cb      	bcc.n	800165c <animate_led_rainbow_cycle+0x50>
        }
        animate_led_show_strip(mask);
 80016c4:	88fb      	ldrh	r3, [r7, #6]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fc36 	bl	8000f38 <animate_led_show_strip>
        if (LED_SPEED_10X == task_led_ctrl_speed()) task_led_ctrl_delay(0);
 80016cc:	f001 f85e 	bl	800278c <task_led_ctrl_speed>
 80016d0:	eef0 7a40 	vmov.f32	s15, s0
 80016d4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80016d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016dc:	d103      	bne.n	80016e6 <animate_led_rainbow_cycle+0xda>
 80016de:	2000      	movs	r0, #0
 80016e0:	f000 feee 	bl	80024c0 <task_led_ctrl_delay>
 80016e4:	e010      	b.n	8001708 <animate_led_rainbow_cycle+0xfc>
        else task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 80016e6:	88bb      	ldrh	r3, [r7, #4]
 80016e8:	ee07 3a90 	vmov	s15, r3
 80016ec:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80016f0:	f001 f84c 	bl	800278c <task_led_ctrl_speed>
 80016f4:	eeb0 7a40 	vmov.f32	s14, s0
 80016f8:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80016fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001700:	ee17 0a90 	vmov	r0, s15
 8001704:	f000 fedc 	bl	80024c0 <task_led_ctrl_delay>
    for (jjj = 256 * 5; jjj > 0; jjj--)
 8001708:	8abb      	ldrh	r3, [r7, #20]
 800170a:	3b01      	subs	r3, #1
 800170c:	82bb      	strh	r3, [r7, #20]
 800170e:	8abb      	ldrh	r3, [r7, #20]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d18f      	bne.n	8001634 <animate_led_rainbow_cycle+0x28>
 8001714:	e002      	b.n	800171c <animate_led_rainbow_cycle+0x110>
        if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001716:	bf00      	nop
 8001718:	e000      	b.n	800171c <animate_led_rainbow_cycle+0x110>
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 800171a:	bf00      	nop
    }
}
 800171c:	371c      	adds	r7, #28
 800171e:	46bd      	mov	sp, r7
 8001720:	ecbd 8b02 	vpop	{d8}
 8001724:	bd90      	pop	{r4, r7, pc}
	...

08001728 <animate_led_theater_chase>:


void animate_led_theater_chase(const strip_mask_t mask, const color_hex_code_e color,
                               const uint16_t speed_delay)
{
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	ed2d 8b02 	vpush	{d8}
 800172e:	b08b      	sub	sp, #44	; 0x2c
 8001730:	af02      	add	r7, sp, #8
 8001732:	4603      	mov	r3, r0
 8001734:	6039      	str	r1, [r7, #0]
 8001736:	80fb      	strh	r3, [r7, #6]
 8001738:	4613      	mov	r3, r2
 800173a:	80bb      	strh	r3, [r7, #4]
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask);
 800173c:	88fb      	ldrh	r3, [r7, #6]
 800173e:	4618      	mov	r0, r3
 8001740:	f000 f9c6 	bl	8001ad0 <ws2812_led_get_max_strip_size>
 8001744:	4603      	mov	r3, r0
 8001746:	81fb      	strh	r3, [r7, #14]
    uint8_t color_theater_chase_rgb[sizeof(ws2812b_led_t)] = {0};
 8001748:	4b47      	ldr	r3, [pc, #284]	; (8001868 <animate_led_theater_chase+0x140>)
 800174a:	881b      	ldrh	r3, [r3, #0]
 800174c:	813b      	strh	r3, [r7, #8]
 800174e:	2300      	movs	r3, #0
 8001750:	72bb      	strb	r3, [r7, #10]
    color_led_hex_to_rgb(color, color_theater_chase_rgb);
 8001752:	f107 0308 	add.w	r3, r7, #8
 8001756:	4619      	mov	r1, r3
 8001758:	6838      	ldr	r0, [r7, #0]
 800175a:	f000 f935 	bl	80019c8 <color_led_hex_to_rgb>
    for (int jjj = 0; jjj < 10; jjj++)
 800175e:	2300      	movs	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
 8001762:	e075      	b.n	8001850 <animate_led_theater_chase+0x128>
    {
        for (int qqq = 0; qqq < 3; qqq++)
 8001764:	2300      	movs	r3, #0
 8001766:	61bb      	str	r3, [r7, #24]
 8001768:	e06c      	b.n	8001844 <animate_led_theater_chase+0x11c>
        {
            if (task_button_press_interrupt_occurred())
 800176a:	f000 fba3 	bl	8001eb4 <task_button_press_interrupt_occurred>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d00d      	beq.n	8001790 <animate_led_theater_chase+0x68>
            {
                if (task_button_press_check_interrupts(&color_theater_chase_rgb[offsetof(ws2812b_led_t, red)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, green)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]))
 8001774:	f107 0308 	add.w	r3, r7, #8
 8001778:	1c9a      	adds	r2, r3, #2
 800177a:	f107 0308 	add.w	r3, r7, #8
 800177e:	1c59      	adds	r1, r3, #1
 8001780:	f107 0308 	add.w	r3, r7, #8
 8001784:	4618      	mov	r0, r3
 8001786:	f000 fbf5 	bl	8001f74 <task_button_press_check_interrupts>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d163      	bne.n	8001858 <animate_led_theater_chase+0x130>
                {
                    return;
                }
            }
            for (int iii = 0; iii < strip_size; iii += 3)
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	e010      	b.n	80017b8 <animate_led_theater_chase+0x90>
            {
                animate_led_set_pixel(mask, iii + qqq,
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	b29a      	uxth	r2, r3
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	b29b      	uxth	r3, r3
 800179e:	4413      	add	r3, r2
 80017a0:	b299      	uxth	r1, r3
 80017a2:	7a3a      	ldrb	r2, [r7, #8]
 80017a4:	7a7c      	ldrb	r4, [r7, #9]
 80017a6:	7abb      	ldrb	r3, [r7, #10]
 80017a8:	88f8      	ldrh	r0, [r7, #6]
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	4623      	mov	r3, r4
 80017ae:	f7ff fbe4 	bl	8000f7a <animate_led_set_pixel>
            for (int iii = 0; iii < strip_size; iii += 3)
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	3303      	adds	r3, #3
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	89fb      	ldrh	r3, [r7, #14]
 80017ba:	697a      	ldr	r2, [r7, #20]
 80017bc:	429a      	cmp	r2, r3
 80017be:	dbea      	blt.n	8001796 <animate_led_theater_chase+0x6e>
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, red)]),
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, green)]),
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]));
            }
            animate_led_show_strip(mask);
 80017c0:	88fb      	ldrh	r3, [r7, #6]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fbb8 	bl	8000f38 <animate_led_show_strip>
            if (task_button_press_interrupt_occurred())
 80017c8:	f000 fb74 	bl	8001eb4 <task_button_press_interrupt_occurred>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00d      	beq.n	80017ee <animate_led_theater_chase+0xc6>
            {
                if (task_button_press_check_interrupts(&color_theater_chase_rgb[offsetof(ws2812b_led_t, red)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, green)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]))
 80017d2:	f107 0308 	add.w	r3, r7, #8
 80017d6:	1c9a      	adds	r2, r3, #2
 80017d8:	f107 0308 	add.w	r3, r7, #8
 80017dc:	1c59      	adds	r1, r3, #1
 80017de:	f107 0308 	add.w	r3, r7, #8
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 fbc6 	bl	8001f74 <task_button_press_check_interrupts>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d136      	bne.n	800185c <animate_led_theater_chase+0x134>
                {
                    return;
                }
            }
            task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 80017ee:	88bb      	ldrh	r3, [r7, #4]
 80017f0:	ee07 3a90 	vmov	s15, r3
 80017f4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80017f8:	f000 ffc8 	bl	800278c <task_led_ctrl_speed>
 80017fc:	eeb0 7a40 	vmov.f32	s14, s0
 8001800:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001804:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001808:	ee17 0a90 	vmov	r0, s15
 800180c:	f000 fe58 	bl	80024c0 <task_led_ctrl_delay>
            for (int iii = 0; iii < strip_size; iii += 3) animate_led_set_pixel(mask, iii + qqq, 0, 0, 0); // turn every third pixel off
 8001810:	2300      	movs	r3, #0
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	e00f      	b.n	8001836 <animate_led_theater_chase+0x10e>
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	b29a      	uxth	r2, r3
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	b29b      	uxth	r3, r3
 800181e:	4413      	add	r3, r2
 8001820:	b299      	uxth	r1, r3
 8001822:	88f8      	ldrh	r0, [r7, #6]
 8001824:	2300      	movs	r3, #0
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	2300      	movs	r3, #0
 800182a:	2200      	movs	r2, #0
 800182c:	f7ff fba5 	bl	8000f7a <animate_led_set_pixel>
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	3303      	adds	r3, #3
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	89fb      	ldrh	r3, [r7, #14]
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	429a      	cmp	r2, r3
 800183c:	dbeb      	blt.n	8001816 <animate_led_theater_chase+0xee>
        for (int qqq = 0; qqq < 3; qqq++)
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	3301      	adds	r3, #1
 8001842:	61bb      	str	r3, [r7, #24]
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	2b02      	cmp	r3, #2
 8001848:	dd8f      	ble.n	800176a <animate_led_theater_chase+0x42>
    for (int jjj = 0; jjj < 10; jjj++)
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	3301      	adds	r3, #1
 800184e:	61fb      	str	r3, [r7, #28]
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	2b09      	cmp	r3, #9
 8001854:	dd86      	ble.n	8001764 <animate_led_theater_chase+0x3c>
 8001856:	e002      	b.n	800185e <animate_led_theater_chase+0x136>
                    return;
 8001858:	bf00      	nop
 800185a:	e000      	b.n	800185e <animate_led_theater_chase+0x136>
                    return;
 800185c:	bf00      	nop
        }
    }
}
 800185e:	3724      	adds	r7, #36	; 0x24
 8001860:	46bd      	mov	sp, r7
 8001862:	ecbd 8b02 	vpop	{d8}
 8001866:	bd90      	pop	{r4, r7, pc}
 8001868:	0800c59c 	.word	0x0800c59c

0800186c <animate_led_theater_chase_rainbow>:


void animate_led_theater_chase_rainbow(const strip_mask_t mask, const uint16_t speed_delay)
{
 800186c:	b590      	push	{r4, r7, lr}
 800186e:	ed2d 8b02 	vpush	{d8}
 8001872:	b08d      	sub	sp, #52	; 0x34
 8001874:	af02      	add	r7, sp, #8
 8001876:	4603      	mov	r3, r0
 8001878:	460a      	mov	r2, r1
 800187a:	80fb      	strh	r3, [r7, #6]
 800187c:	4613      	mov	r3, r2
 800187e:	80bb      	strh	r3, [r7, #4]
	uint8_t dummy_red, dummy_green, dummy_blue;
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask);
 8001880:	88fb      	ldrh	r3, [r7, #6]
 8001882:	4618      	mov	r0, r3
 8001884:	f000 f924 	bl	8001ad0 <ws2812_led_get_max_strip_size>
 8001888:	4603      	mov	r3, r0
 800188a:	82fb      	strh	r3, [r7, #22]
    uint8_t *c;
    for (int jjj = 0; jjj < 256; jjj++) // cycel all 256 colors in the animate_led_wheel
 800188c:	2300      	movs	r3, #0
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
 8001890:	e08a      	b.n	80019a8 <animate_led_theater_chase_rainbow+0x13c>
    {
        for (int qqq = 0; qqq < 3; qqq++)
 8001892:	2300      	movs	r3, #0
 8001894:	623b      	str	r3, [r7, #32]
 8001896:	e080      	b.n	800199a <animate_led_theater_chase_rainbow+0x12e>
        {
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001898:	f000 fb0c 	bl	8001eb4 <task_button_press_interrupt_occurred>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d00b      	beq.n	80018ba <animate_led_theater_chase_rainbow+0x4e>
 80018a2:	f107 020d 	add.w	r2, r7, #13
 80018a6:	f107 010e 	add.w	r1, r7, #14
 80018aa:	f107 030f 	add.w	r3, r7, #15
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 fb60 	bl	8001f74 <task_button_press_check_interrupts>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d17b      	bne.n	80019b2 <animate_led_theater_chase_rainbow+0x146>
            for (int iii = 0; iii < strip_size; iii += 3)
 80018ba:	2300      	movs	r3, #0
 80018bc:	61fb      	str	r3, [r7, #28]
 80018be:	e039      	b.n	8001934 <animate_led_theater_chase_rainbow+0xc8>
            {
                if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80018c0:	f000 faf8 	bl	8001eb4 <task_button_press_interrupt_occurred>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d00b      	beq.n	80018e2 <animate_led_theater_chase_rainbow+0x76>
 80018ca:	f107 020d 	add.w	r2, r7, #13
 80018ce:	f107 010e 	add.w	r1, r7, #14
 80018d2:	f107 030f 	add.w	r3, r7, #15
 80018d6:	4618      	mov	r0, r3
 80018d8:	f000 fb4c 	bl	8001f74 <task_button_press_check_interrupts>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d169      	bne.n	80019b6 <animate_led_theater_chase_rainbow+0x14a>
                c = animate_led_wheel((iii + jjj) % 255);
 80018e2:	69fa      	ldr	r2, [r7, #28]
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	441a      	add	r2, r3
 80018e8:	4b36      	ldr	r3, [pc, #216]	; (80019c4 <animate_led_theater_chase_rainbow+0x158>)
 80018ea:	fb83 1302 	smull	r1, r3, r3, r2
 80018ee:	4413      	add	r3, r2
 80018f0:	11d9      	asrs	r1, r3, #7
 80018f2:	17d3      	asrs	r3, r2, #31
 80018f4:	1ac9      	subs	r1, r1, r3
 80018f6:	460b      	mov	r3, r1
 80018f8:	021b      	lsls	r3, r3, #8
 80018fa:	1a5b      	subs	r3, r3, r1
 80018fc:	1ad1      	subs	r1, r2, r3
 80018fe:	b2cb      	uxtb	r3, r1
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff fac3 	bl	8000e8c <animate_led_wheel>
 8001906:	6138      	str	r0, [r7, #16]
                animate_led_set_pixel(mask, iii + qqq, *c, *(c + 1), *(c + 2)); // turn every third pixel on
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	b29a      	uxth	r2, r3
 800190c:	6a3b      	ldr	r3, [r7, #32]
 800190e:	b29b      	uxth	r3, r3
 8001910:	4413      	add	r3, r2
 8001912:	b299      	uxth	r1, r3
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	781a      	ldrb	r2, [r3, #0]
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	3301      	adds	r3, #1
 800191c:	781c      	ldrb	r4, [r3, #0]
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	3302      	adds	r3, #2
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	88f8      	ldrh	r0, [r7, #6]
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	4623      	mov	r3, r4
 800192a:	f7ff fb26 	bl	8000f7a <animate_led_set_pixel>
            for (int iii = 0; iii < strip_size; iii += 3)
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3303      	adds	r3, #3
 8001932:	61fb      	str	r3, [r7, #28]
 8001934:	8afb      	ldrh	r3, [r7, #22]
 8001936:	69fa      	ldr	r2, [r7, #28]
 8001938:	429a      	cmp	r2, r3
 800193a:	dbc1      	blt.n	80018c0 <animate_led_theater_chase_rainbow+0x54>
            }
            animate_led_show_strip(mask);
 800193c:	88fb      	ldrh	r3, [r7, #6]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fafa 	bl	8000f38 <animate_led_show_strip>
            task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 8001944:	88bb      	ldrh	r3, [r7, #4]
 8001946:	ee07 3a90 	vmov	s15, r3
 800194a:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800194e:	f000 ff1d 	bl	800278c <task_led_ctrl_speed>
 8001952:	eeb0 7a40 	vmov.f32	s14, s0
 8001956:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800195a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800195e:	ee17 0a90 	vmov	r0, s15
 8001962:	f000 fdad 	bl	80024c0 <task_led_ctrl_delay>
            for (int iii = 0; iii < strip_size; iii += 3) animate_led_set_pixel(mask, iii + qqq, 0, 0, 0); // turn every third pixel off
 8001966:	2300      	movs	r3, #0
 8001968:	61bb      	str	r3, [r7, #24]
 800196a:	e00f      	b.n	800198c <animate_led_theater_chase_rainbow+0x120>
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	b29a      	uxth	r2, r3
 8001970:	6a3b      	ldr	r3, [r7, #32]
 8001972:	b29b      	uxth	r3, r3
 8001974:	4413      	add	r3, r2
 8001976:	b299      	uxth	r1, r3
 8001978:	88f8      	ldrh	r0, [r7, #6]
 800197a:	2300      	movs	r3, #0
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	2300      	movs	r3, #0
 8001980:	2200      	movs	r2, #0
 8001982:	f7ff fafa 	bl	8000f7a <animate_led_set_pixel>
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	3303      	adds	r3, #3
 800198a:	61bb      	str	r3, [r7, #24]
 800198c:	8afb      	ldrh	r3, [r7, #22]
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	429a      	cmp	r2, r3
 8001992:	dbeb      	blt.n	800196c <animate_led_theater_chase_rainbow+0x100>
        for (int qqq = 0; qqq < 3; qqq++)
 8001994:	6a3b      	ldr	r3, [r7, #32]
 8001996:	3301      	adds	r3, #1
 8001998:	623b      	str	r3, [r7, #32]
 800199a:	6a3b      	ldr	r3, [r7, #32]
 800199c:	2b02      	cmp	r3, #2
 800199e:	f77f af7b 	ble.w	8001898 <animate_led_theater_chase_rainbow+0x2c>
    for (int jjj = 0; jjj < 256; jjj++) // cycel all 256 colors in the animate_led_wheel
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	3301      	adds	r3, #1
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	2bff      	cmp	r3, #255	; 0xff
 80019ac:	f77f af71 	ble.w	8001892 <animate_led_theater_chase_rainbow+0x26>
 80019b0:	e002      	b.n	80019b8 <animate_led_theater_chase_rainbow+0x14c>
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80019b2:	bf00      	nop
 80019b4:	e000      	b.n	80019b8 <animate_led_theater_chase_rainbow+0x14c>
                if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80019b6:	bf00      	nop
        }
    }
}
 80019b8:	372c      	adds	r7, #44	; 0x2c
 80019ba:	46bd      	mov	sp, r7
 80019bc:	ecbd 8b02 	vpop	{d8}
 80019c0:	bd90      	pop	{r4, r7, pc}
 80019c2:	bf00      	nop
 80019c4:	80808081 	.word	0x80808081

080019c8 <color_led_hex_to_rgb>:
    [COLORS_BROWN] = COLOR_HEX_BROWN
};


void color_led_hex_to_rgb(const color_hex_code_e color, uint8_t *color_array)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
    color_array[offsetof(ws2812b_led_t, red)] = ((color & 0xFF0000) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, red))));
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	0c1b      	lsrs	r3, r3, #16
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	701a      	strb	r2, [r3, #0]
    color_array[offsetof(ws2812b_led_t, green)] = ((color & 0x00FF00) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, green))));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	0a1a      	lsrs	r2, r3, #8
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	3301      	adds	r3, #1
 80019e4:	b2d2      	uxtb	r2, r2
 80019e6:	701a      	strb	r2, [r3, #0]
    color_array[offsetof(ws2812b_led_t, blue)] = ((color & 0x0000FF) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, blue))));
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	3302      	adds	r3, #2
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	701a      	strb	r2, [r3, #0]
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
	...

08001a00 <reset_ws2812b>:
 * @brief   Reset LED strip >= 50 microseconds of 0
 * @param   void
 * @return  void
 */
void reset_ws2812b(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08e      	sub	sp, #56	; 0x38
 8001a04:	af00      	add	r7, sp, #0
	// something needs to change here... This should be 3000
	uint8_t g_pwm_reset[50] = {0}; // 50 bytes on stack...
 8001a06:	2300      	movs	r3, #0
 8001a08:	607b      	str	r3, [r7, #4]
 8001a0a:	f107 0308 	add.w	r3, r7, #8
 8001a0e:	222e      	movs	r2, #46	; 0x2e
 8001a10:	2100      	movs	r1, #0
 8001a12:	4618      	mov	r0, r3
 8001a14:	f009 ff42 	bl	800b89c <memset>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_1, (uint32_t *)g_pwm_reset, sizeof(g_pwm_reset));
 8001a18:	1d3a      	adds	r2, r7, #4
 8001a1a:	2332      	movs	r3, #50	; 0x32
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4809      	ldr	r0, [pc, #36]	; (8001a44 <reset_ws2812b+0x44>)
 8001a20:	f006 f954 	bl	8007ccc <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_2, (uint32_t *)g_pwm_reset, sizeof(g_pwm_reset));
 8001a24:	1d3a      	adds	r2, r7, #4
 8001a26:	2332      	movs	r3, #50	; 0x32
 8001a28:	2104      	movs	r1, #4
 8001a2a:	4806      	ldr	r0, [pc, #24]	; (8001a44 <reset_ws2812b+0x44>)
 8001a2c:	f006 f94e 	bl	8007ccc <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_3, (uint32_t *)g_pwm_reset, sizeof(g_pwm_reset));
 8001a30:	1d3a      	adds	r2, r7, #4
 8001a32:	2332      	movs	r3, #50	; 0x32
 8001a34:	2108      	movs	r1, #8
 8001a36:	4803      	ldr	r0, [pc, #12]	; (8001a44 <reset_ws2812b+0x44>)
 8001a38:	f006 f948 	bl	8007ccc <HAL_TIM_PWM_Start_DMA>
}
 8001a3c:	bf00      	nop
 8001a3e:	3738      	adds	r7, #56	; 0x38
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	200023e0 	.word	0x200023e0

08001a48 <ws2812_get_strip_size>:
 * @brief   Return the size of the current strip
 * @param   void
 * @return  void
 */
uint16_t ws2812_get_strip_size(const strip_num_e strip_num)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71fb      	strb	r3, [r7, #7]
	return g_ws2812b_info[strip_num].led_strip_length;
 8001a52:	79fb      	ldrb	r3, [r7, #7]
 8001a54:	4a04      	ldr	r2, [pc, #16]	; (8001a68 <ws2812_get_strip_size+0x20>)
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	4413      	add	r3, r2
 8001a5a:	889b      	ldrh	r3, [r3, #4]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	2000005c 	.word	0x2000005c

08001a6c <ws2812_get_num_active_animation_leds>:
 * @brief   Get the number of active LEDs in the active strips
 * @param   strip_mask: active strips to find max of
 * @return  Number of active LEDs
 */
uint16_t ws2812_get_num_active_animation_leds(const strip_mask_t strip_mask)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	80fb      	strh	r3, [r7, #6]
	uint16_t strip_size = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	81fb      	strh	r3, [r7, #14]
	if (STRIP_NUM_1 & strip_mask) strip_size += g_ws2812b_info[STRIP_NUM_1].led_strip_length;
 8001a7a:	88fb      	ldrh	r3, [r7, #6]
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d004      	beq.n	8001a90 <ws2812_get_num_active_animation_leds+0x24>
 8001a86:	4b11      	ldr	r3, [pc, #68]	; (8001acc <ws2812_get_num_active_animation_leds+0x60>)
 8001a88:	899a      	ldrh	r2, [r3, #12]
 8001a8a:	89fb      	ldrh	r3, [r7, #14]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	81fb      	strh	r3, [r7, #14]
	if (STRIP_NUM_2 & strip_mask) strip_size += g_ws2812b_info[STRIP_NUM_2].led_strip_length;
 8001a90:	88fb      	ldrh	r3, [r7, #6]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d004      	beq.n	8001aa6 <ws2812_get_num_active_animation_leds+0x3a>
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <ws2812_get_num_active_animation_leds+0x60>)
 8001a9e:	8a9a      	ldrh	r2, [r3, #20]
 8001aa0:	89fb      	ldrh	r3, [r7, #14]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	81fb      	strh	r3, [r7, #14]
	if (STRIP_NUM_3 & strip_mask) strip_size += g_ws2812b_info[STRIP_NUM_3].led_strip_length;
 8001aa6:	88fb      	ldrh	r3, [r7, #6]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d004      	beq.n	8001abc <ws2812_get_num_active_animation_leds+0x50>
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <ws2812_get_num_active_animation_leds+0x60>)
 8001ab4:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8001ab6:	89fb      	ldrh	r3, [r7, #14]
 8001ab8:	4413      	add	r3, r2
 8001aba:	81fb      	strh	r3, [r7, #14]
	return strip_size;
 8001abc:	89fb      	ldrh	r3, [r7, #14]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	2000005c 	.word	0x2000005c

08001ad0 <ws2812_led_get_max_strip_size>:
 * @brief   Return max strip size in the active strips
 * @param   strip_mask: active strips to find max of
 * @return  The max strip size
 */
uint16_t ws2812_led_get_max_strip_size(const strip_mask_t strip_mask)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	80fb      	strh	r3, [r7, #6]
	uint16_t max_strip_size = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	81fb      	strh	r3, [r7, #14]
	if ((STRIP_NUM_1 & strip_mask) && \
 8001ade:	88fb      	ldrh	r3, [r7, #6]
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d007      	beq.n	8001afa <ws2812_led_get_max_strip_size+0x2a>
			(max_strip_size < g_ws2812b_info[STRIP_NUM_1].led_strip_length)) \
 8001aea:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <ws2812_led_get_max_strip_size+0x70>)
 8001aec:	899b      	ldrh	r3, [r3, #12]
	if ((STRIP_NUM_1 & strip_mask) && \
 8001aee:	89fa      	ldrh	r2, [r7, #14]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d202      	bcs.n	8001afa <ws2812_led_get_max_strip_size+0x2a>
					max_strip_size = g_ws2812b_info[STRIP_NUM_1].led_strip_length;
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <ws2812_led_get_max_strip_size+0x70>)
 8001af6:	899b      	ldrh	r3, [r3, #12]
 8001af8:	81fb      	strh	r3, [r7, #14]
	if ((STRIP_NUM_2 & strip_mask) && \
 8001afa:	88fb      	ldrh	r3, [r7, #6]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d007      	beq.n	8001b16 <ws2812_led_get_max_strip_size+0x46>
			(max_strip_size < g_ws2812b_info[STRIP_NUM_2].led_strip_length)) \
 8001b06:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <ws2812_led_get_max_strip_size+0x70>)
 8001b08:	8a9b      	ldrh	r3, [r3, #20]
	if ((STRIP_NUM_2 & strip_mask) && \
 8001b0a:	89fa      	ldrh	r2, [r7, #14]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d202      	bcs.n	8001b16 <ws2812_led_get_max_strip_size+0x46>
					max_strip_size = g_ws2812b_info[STRIP_NUM_2].led_strip_length;
 8001b10:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <ws2812_led_get_max_strip_size+0x70>)
 8001b12:	8a9b      	ldrh	r3, [r3, #20]
 8001b14:	81fb      	strh	r3, [r7, #14]
	if ((STRIP_NUM_3 & strip_mask) && \
 8001b16:	88fb      	ldrh	r3, [r7, #6]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d007      	beq.n	8001b32 <ws2812_led_get_max_strip_size+0x62>
			(max_strip_size < g_ws2812b_info[STRIP_NUM_3].led_strip_length)) \
 8001b22:	4b07      	ldr	r3, [pc, #28]	; (8001b40 <ws2812_led_get_max_strip_size+0x70>)
 8001b24:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	if ((STRIP_NUM_3 & strip_mask) && \
 8001b26:	89fa      	ldrh	r2, [r7, #14]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d202      	bcs.n	8001b32 <ws2812_led_get_max_strip_size+0x62>
					max_strip_size = g_ws2812b_info[STRIP_NUM_3].led_strip_length;
 8001b2c:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <ws2812_led_get_max_strip_size+0x70>)
 8001b2e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001b30:	81fb      	strh	r3, [r7, #14]
	return max_strip_size;
 8001b32:	89fb      	ldrh	r3, [r7, #14]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	2000005c 	.word	0x2000005c

08001b44 <ws2812_pixel_is_in_strip_range>:
 * @param   strip_bit: strip to check if pixel is in range
 * @param	pixel: LED # to check
 * @return  true if in range, else false
 */
bool ws2812_pixel_is_in_strip_range(const strip_num_e strip_num, const uint16_t pixel)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	460a      	mov	r2, r1
 8001b4e:	71fb      	strb	r3, [r7, #7]
 8001b50:	4613      	mov	r3, r2
 8001b52:	80bb      	strh	r3, [r7, #4]
	bool return_val = false;
 8001b54:	2300      	movs	r3, #0
 8001b56:	73fb      	strb	r3, [r7, #15]
	if ((STRIP_NUM_1 == strip_num) && (pixel < g_ws2812b_info[STRIP_NUM_1].led_strip_length)) return_val = true;
 8001b58:	79fb      	ldrb	r3, [r7, #7]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d107      	bne.n	8001b6e <ws2812_pixel_is_in_strip_range+0x2a>
 8001b5e:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <ws2812_pixel_is_in_strip_range+0x64>)
 8001b60:	899b      	ldrh	r3, [r3, #12]
 8001b62:	88ba      	ldrh	r2, [r7, #4]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d202      	bcs.n	8001b6e <ws2812_pixel_is_in_strip_range+0x2a>
 8001b68:	2301      	movs	r3, #1
 8001b6a:	73fb      	strb	r3, [r7, #15]
 8001b6c:	e014      	b.n	8001b98 <ws2812_pixel_is_in_strip_range+0x54>
	else if ((STRIP_NUM_2 == strip_num) && (pixel < g_ws2812b_info[STRIP_NUM_2].led_strip_length)) return_val = true;
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d107      	bne.n	8001b84 <ws2812_pixel_is_in_strip_range+0x40>
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <ws2812_pixel_is_in_strip_range+0x64>)
 8001b76:	8a9b      	ldrh	r3, [r3, #20]
 8001b78:	88ba      	ldrh	r2, [r7, #4]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d202      	bcs.n	8001b84 <ws2812_pixel_is_in_strip_range+0x40>
 8001b7e:	2301      	movs	r3, #1
 8001b80:	73fb      	strb	r3, [r7, #15]
 8001b82:	e009      	b.n	8001b98 <ws2812_pixel_is_in_strip_range+0x54>
	else if ((STRIP_NUM_3 == strip_num) && (pixel < g_ws2812b_info[STRIP_NUM_3].led_strip_length)) return_val = true;
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	d106      	bne.n	8001b98 <ws2812_pixel_is_in_strip_range+0x54>
 8001b8a:	4b07      	ldr	r3, [pc, #28]	; (8001ba8 <ws2812_pixel_is_in_strip_range+0x64>)
 8001b8c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001b8e:	88ba      	ldrh	r2, [r7, #4]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d201      	bcs.n	8001b98 <ws2812_pixel_is_in_strip_range+0x54>
 8001b94:	2301      	movs	r3, #1
 8001b96:	73fb      	strb	r3, [r7, #15]
	return return_val;
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	2000005c 	.word	0x2000005c

08001bac <ws2812b_set_led>:
 * @param 	blue: 8 bit blue
 * @return  void
 */
void ws2812b_set_led(const strip_num_e strip_num, const uint16_t led_num, const color_t red, const color_t green,
                     const color_t blue)
{
 8001bac:	b490      	push	{r4, r7}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4604      	mov	r4, r0
 8001bb4:	4608      	mov	r0, r1
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4623      	mov	r3, r4
 8001bbc:	73fb      	strb	r3, [r7, #15]
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	81bb      	strh	r3, [r7, #12]
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	73bb      	strb	r3, [r7, #14]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	72fb      	strb	r3, [r7, #11]
	(g_ws2812b_info[strip_num].led_strip + led_num)->red = red * g_max_current_ratio;
 8001bca:	7bbb      	ldrb	r3, [r7, #14]
 8001bcc:	ee07 3a90 	vmov	s15, r3
 8001bd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bd4:	4b26      	ldr	r3, [pc, #152]	; (8001c70 <ws2812b_set_led+0xc4>)
 8001bd6:	edd3 7a00 	vldr	s15, [r3]
 8001bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	4a24      	ldr	r2, [pc, #144]	; (8001c74 <ws2812b_set_led+0xc8>)
 8001be2:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8001be6:	89ba      	ldrh	r2, [r7, #12]
 8001be8:	4613      	mov	r3, r2
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	4413      	add	r3, r2
 8001bee:	440b      	add	r3, r1
 8001bf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bf4:	edc7 7a01 	vstr	s15, [r7, #4]
 8001bf8:	793a      	ldrb	r2, [r7, #4]
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	701a      	strb	r2, [r3, #0]
	(g_ws2812b_info[strip_num].led_strip + led_num)->green = green * g_max_current_ratio;
 8001bfe:	7afb      	ldrb	r3, [r7, #11]
 8001c00:	ee07 3a90 	vmov	s15, r3
 8001c04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c08:	4b19      	ldr	r3, [pc, #100]	; (8001c70 <ws2812b_set_led+0xc4>)
 8001c0a:	edd3 7a00 	vldr	s15, [r3]
 8001c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
 8001c14:	4a17      	ldr	r2, [pc, #92]	; (8001c74 <ws2812b_set_led+0xc8>)
 8001c16:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8001c1a:	89ba      	ldrh	r2, [r7, #12]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	4413      	add	r3, r2
 8001c22:	440b      	add	r3, r1
 8001c24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c28:	edc7 7a01 	vstr	s15, [r7, #4]
 8001c2c:	793a      	ldrb	r2, [r7, #4]
 8001c2e:	b2d2      	uxtb	r2, r2
 8001c30:	705a      	strb	r2, [r3, #1]
	(g_ws2812b_info[strip_num].led_strip + led_num)->blue = blue * g_max_current_ratio;
 8001c32:	7e3b      	ldrb	r3, [r7, #24]
 8001c34:	ee07 3a90 	vmov	s15, r3
 8001c38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <ws2812b_set_led+0xc4>)
 8001c3e:	edd3 7a00 	vldr	s15, [r3]
 8001c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
 8001c48:	4a0a      	ldr	r2, [pc, #40]	; (8001c74 <ws2812b_set_led+0xc8>)
 8001c4a:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8001c4e:	89ba      	ldrh	r2, [r7, #12]
 8001c50:	4613      	mov	r3, r2
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	4413      	add	r3, r2
 8001c56:	440b      	add	r3, r1
 8001c58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c5c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001c60:	793a      	ldrb	r2, [r7, #4]
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	709a      	strb	r2, [r3, #2]
}
 8001c66:	bf00      	nop
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc90      	pop	{r4, r7}
 8001c6e:	4770      	bx	lr
 8001c70:	20000000 	.word	0x20000000
 8001c74:	2000005c 	.word	0x2000005c

08001c78 <ws2812b_fill_pwm_buffer_strip>:
 * @brief   Fill the PWM buffer for the strip num
 * @param   strip_num: PWM buffer pertaining to strip
 * @return  void
 */
void ws2812b_fill_pwm_buffer_strip(strip_num_e strip_num)
{
 8001c78:	b590      	push	{r4, r7, lr}
 8001c7a:	b087      	sub	sp, #28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	71fb      	strb	r3, [r7, #7]
    uint32_t color = 0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
    for (uint16_t iii = 0; iii < g_ws2812b_info[strip_num].led_strip_length; iii++)
 8001c86:	2300      	movs	r3, #0
 8001c88:	82fb      	strh	r3, [r7, #22]
 8001c8a:	e050      	b.n	8001d2e <ws2812b_fill_pwm_buffer_strip+0xb6>
    {
    	// reconstruct 24 bit color...
        color = (((g_ws2812b_info[strip_num].led_strip + iii)->green) << 16) | \
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	4a55      	ldr	r2, [pc, #340]	; (8001de4 <ws2812b_fill_pwm_buffer_strip+0x16c>)
 8001c90:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8001c94:	8afa      	ldrh	r2, [r7, #22]
 8001c96:	4613      	mov	r3, r2
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	4413      	add	r3, r2
 8001c9c:	440b      	add	r3, r1
 8001c9e:	785b      	ldrb	r3, [r3, #1]
 8001ca0:	0419      	lsls	r1, r3, #16
        		(((g_ws2812b_info[strip_num].led_strip + iii)->red) << 8) | \
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	4a4f      	ldr	r2, [pc, #316]	; (8001de4 <ws2812b_fill_pwm_buffer_strip+0x16c>)
 8001ca6:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001caa:	8afa      	ldrh	r2, [r7, #22]
 8001cac:	4613      	mov	r3, r2
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	4413      	add	r3, r2
 8001cb2:	4403      	add	r3, r0
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	021b      	lsls	r3, r3, #8
        color = (((g_ws2812b_info[strip_num].led_strip + iii)->green) << 16) | \
 8001cb8:	4319      	orrs	r1, r3
				(((g_ws2812b_info[strip_num].led_strip + iii)->blue));
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	4a49      	ldr	r2, [pc, #292]	; (8001de4 <ws2812b_fill_pwm_buffer_strip+0x16c>)
 8001cbe:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001cc2:	8afa      	ldrh	r2, [r7, #22]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	4413      	add	r3, r2
 8001cca:	4403      	add	r3, r0
 8001ccc:	789b      	ldrb	r3, [r3, #2]
        		(((g_ws2812b_info[strip_num].led_strip + iii)->red) << 8) | \
 8001cce:	430b      	orrs	r3, r1
        color = (((g_ws2812b_info[strip_num].led_strip + iii)->green) << 16) | \
 8001cd0:	60fb      	str	r3, [r7, #12]
        // walk over each bit.. starting at msb
        for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	757b      	strb	r3, [r7, #21]
 8001cd6:	e024      	b.n	8001d22 <ws2812b_fill_pwm_buffer_strip+0xaa>
        {
        	// if bit in color is set then fill w/ WS2812B_BIT_SET_CYCLES else WS2812B_BIT_RESET_CYCLES
            gp_pwm_data_fill[g_ws2812b_info[strip_num].pwm_dma_buffer_index_start + (iii * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + yyy] = \
            		(color & (1 << ((sizeof(ws2812b_led_t) * BITS_PER_BYTE) - 1 - yyy))) ? \
 8001cd8:	7d7b      	ldrb	r3, [r7, #21]
 8001cda:	f1c3 0317 	rsb	r3, r3, #23
 8001cde:	2201      	movs	r2, #1
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	4013      	ands	r3, r2
            gp_pwm_data_fill[g_ws2812b_info[strip_num].pwm_dma_buffer_index_start + (iii * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + yyy] = \
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <ws2812b_fill_pwm_buffer_strip+0x7a>
 8001cee:	2028      	movs	r0, #40	; 0x28
 8001cf0:	e000      	b.n	8001cf4 <ws2812b_fill_pwm_buffer_strip+0x7c>
 8001cf2:	2014      	movs	r0, #20
 8001cf4:	4b3c      	ldr	r3, [pc, #240]	; (8001de8 <ws2812b_fill_pwm_buffer_strip+0x170>)
 8001cf6:	6819      	ldr	r1, [r3, #0]
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	4a3a      	ldr	r2, [pc, #232]	; (8001de4 <ws2812b_fill_pwm_buffer_strip+0x16c>)
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	4413      	add	r3, r2
 8001d00:	88db      	ldrh	r3, [r3, #6]
 8001d02:	461c      	mov	r4, r3
 8001d04:	8afa      	ldrh	r2, [r7, #22]
 8001d06:	4613      	mov	r3, r2
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	4413      	add	r3, r2
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	18e2      	adds	r2, r4, r3
 8001d10:	7d7b      	ldrb	r3, [r7, #21]
 8001d12:	4413      	add	r3, r2
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	440b      	add	r3, r1
 8001d18:	4602      	mov	r2, r0
 8001d1a:	801a      	strh	r2, [r3, #0]
        for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 8001d1c:	7d7b      	ldrb	r3, [r7, #21]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	757b      	strb	r3, [r7, #21]
 8001d22:	7d7b      	ldrb	r3, [r7, #21]
 8001d24:	2b17      	cmp	r3, #23
 8001d26:	d9d7      	bls.n	8001cd8 <ws2812b_fill_pwm_buffer_strip+0x60>
    for (uint16_t iii = 0; iii < g_ws2812b_info[strip_num].led_strip_length; iii++)
 8001d28:	8afb      	ldrh	r3, [r7, #22]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	82fb      	strh	r3, [r7, #22]
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	4a2c      	ldr	r2, [pc, #176]	; (8001de4 <ws2812b_fill_pwm_buffer_strip+0x16c>)
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	4413      	add	r3, r2
 8001d36:	889b      	ldrh	r3, [r3, #4]
 8001d38:	8afa      	ldrh	r2, [r7, #22]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d3a6      	bcc.n	8001c8c <ws2812b_fill_pwm_buffer_strip+0x14>
            				(uint16_t)(WS2812B_BIT_SET_CYCLES + 1) : (uint16_t)WS2812B_BIT_RESET_CYCLES;
        }
    }
    for (uint16_t iii = 0; iii < WS2812B_RESET_TIME_CYCLES; iii++)
 8001d3e:	2300      	movs	r3, #0
 8001d40:	827b      	strh	r3, [r7, #18]
 8001d42:	e01b      	b.n	8001d7c <ws2812b_fill_pwm_buffer_strip+0x104>
    {
        gp_pwm_data_fill[(g_ws2812b_info[strip_num].pwm_dma_buffer_index_start + (g_ws2812b_info[strip_num].led_strip_length * BITS_PER_BYTE * sizeof(ws2812b_led_t))) + iii] = 0;
 8001d44:	4b28      	ldr	r3, [pc, #160]	; (8001de8 <ws2812b_fill_pwm_buffer_strip+0x170>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	4926      	ldr	r1, [pc, #152]	; (8001de4 <ws2812b_fill_pwm_buffer_strip+0x16c>)
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	440b      	add	r3, r1
 8001d50:	88db      	ldrh	r3, [r3, #6]
 8001d52:	4618      	mov	r0, r3
 8001d54:	79fb      	ldrb	r3, [r7, #7]
 8001d56:	4923      	ldr	r1, [pc, #140]	; (8001de4 <ws2812b_fill_pwm_buffer_strip+0x16c>)
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	440b      	add	r3, r1
 8001d5c:	889b      	ldrh	r3, [r3, #4]
 8001d5e:	4619      	mov	r1, r3
 8001d60:	460b      	mov	r3, r1
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	440b      	add	r3, r1
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	18c1      	adds	r1, r0, r3
 8001d6a:	8a7b      	ldrh	r3, [r7, #18]
 8001d6c:	440b      	add	r3, r1
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	4413      	add	r3, r2
 8001d72:	2200      	movs	r2, #0
 8001d74:	801a      	strh	r2, [r3, #0]
    for (uint16_t iii = 0; iii < WS2812B_RESET_TIME_CYCLES; iii++)
 8001d76:	8a7b      	ldrh	r3, [r7, #18]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	827b      	strh	r3, [r7, #18]
 8001d7c:	8a7b      	ldrh	r3, [r7, #18]
 8001d7e:	ee07 3a90 	vmov	s15, r3
 8001d82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d86:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001dec <ws2812b_fill_pwm_buffer_strip+0x174>
 8001d8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d92:	d4d7      	bmi.n	8001d44 <ws2812b_fill_pwm_buffer_strip+0xcc>
    }
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_1, (uint32_t *)(gp_pwm_data_fill + g_ws2812b_info[strip_num].pwm_dma_buffer_index_start), (g_ws2812b_info[strip_num].led_strip_length * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + WS2812B_RESET_TIME_CYCLES);
 8001d94:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <ws2812b_fill_pwm_buffer_strip+0x170>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	4912      	ldr	r1, [pc, #72]	; (8001de4 <ws2812b_fill_pwm_buffer_strip+0x16c>)
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	440b      	add	r3, r1
 8001da0:	88db      	ldrh	r3, [r3, #6]
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	441a      	add	r2, r3
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	490e      	ldr	r1, [pc, #56]	; (8001de4 <ws2812b_fill_pwm_buffer_strip+0x16c>)
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	440b      	add	r3, r1
 8001dae:	889b      	ldrh	r3, [r3, #4]
 8001db0:	4619      	mov	r1, r3
 8001db2:	460b      	mov	r3, r1
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	440b      	add	r3, r1
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	ee07 3a90 	vmov	s15, r3
 8001dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dc2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001dec <ws2812b_fill_pwm_buffer_strip+0x174>
 8001dc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001dca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dce:	ee17 3a90 	vmov	r3, s15
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	4806      	ldr	r0, [pc, #24]	; (8001df0 <ws2812b_fill_pwm_buffer_strip+0x178>)
 8001dd8:	f005 ff78 	bl	8007ccc <HAL_TIM_PWM_Start_DMA>
}
 8001ddc:	bf00      	nop
 8001dde:	371c      	adds	r7, #28
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd90      	pop	{r4, r7, pc}
 8001de4:	2000005c 	.word	0x2000005c
 8001de8:	2000028c 	.word	0x2000028c
 8001dec:	453b8000 	.word	0x453b8000
 8001df0:	200023e0 	.word	0x200023e0

08001df4 <ws2812b_show_strip_one>:
	// call TIM PWM DMA to reset.
}


void ws2812b_show_strip_one(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
	ws2812b_show(STRIP_NUM_1);
 8001df8:	2001      	movs	r0, #1
 8001dfa:	f000 f810 	bl	8001e1e <ws2812b_show>
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <ws2812b_show_strip_two>:


void ws2812b_show_strip_two(void)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	af00      	add	r7, sp, #0
	ws2812b_show(STRIP_NUM_2);
 8001e06:	2002      	movs	r0, #2
 8001e08:	f000 f809 	bl	8001e1e <ws2812b_show>
}
 8001e0c:	bf00      	nop
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <ws2812b_show_strip_three>:


void ws2812b_show_strip_three(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
	ws2812b_show(STRIP_NUM_3);
 8001e14:	2004      	movs	r0, #4
 8001e16:	f000 f802 	bl	8001e1e <ws2812b_show>
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <ws2812b_show>:
 * @brief   Show the strip(s)
 * @param   strip_mask: bit vector. 1 = show, 0 = don't
 * @return  void
 */
void ws2812b_show(const strip_mask_t strip_mask)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	4603      	mov	r3, r0
 8001e26:	80fb      	strh	r3, [r7, #6]
	if (STRIP_NUM_1 & strip_mask)
 8001e28:	88fb      	ldrh	r3, [r7, #6]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d002      	beq.n	8001e3a <ws2812b_show+0x1c>
	{
		ws2812b_fill_pwm_buffer_strip((STRIP_NUM_1));
 8001e34:	2001      	movs	r0, #1
 8001e36:	f7ff ff1f 	bl	8001c78 <ws2812b_fill_pwm_buffer_strip>
	}
	if (STRIP_NUM_2 & strip_mask)
 8001e3a:	88fb      	ldrh	r3, [r7, #6]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d002      	beq.n	8001e4c <ws2812b_show+0x2e>
	{
		ws2812b_fill_pwm_buffer_strip((STRIP_NUM_2));
 8001e46:	2002      	movs	r0, #2
 8001e48:	f7ff ff16 	bl	8001c78 <ws2812b_fill_pwm_buffer_strip>
	}
	if (STRIP_NUM_3 & strip_mask)
 8001e4c:	88fb      	ldrh	r3, [r7, #6]
 8001e4e:	f003 0304 	and.w	r3, r3, #4
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d002      	beq.n	8001e5e <ws2812b_show+0x40>
	{
		ws2812b_fill_pwm_buffer_strip((STRIP_NUM_3));
 8001e58:	2004      	movs	r0, #4
 8001e5a:	f7ff ff0d 	bl	8001c78 <ws2812b_fill_pwm_buffer_strip>
	}
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
	...

08001e68 <ws2812b_init>:


void ws2812b_init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
	uint32_t total_led_bits_in_all_strips = (sizeof(ws2812b_led_t) * BITS_PER_BYTE * NUM_LEDS);
 8001e6e:	f641 534c 	movw	r3, #7500	; 0x1d4c
 8001e72:	607b      	str	r3, [r7, #4]

	uint8_t num_strips = NUM_STRIPS;
 8001e74:	2303      	movs	r3, #3
 8001e76:	70fb      	strb	r3, [r7, #3]
	//g_all_strip_mask = STRIP_ALL_SET;
    gp_pwm_data_fill = malloc(total_led_bits_in_all_strips + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	ee07 3a90 	vmov	s15, r3
 8001e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e82:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001eac <ws2812b_init+0x44>
 8001e86:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e8e:	ee17 0a90 	vmov	r0, s15
 8001e92:	f009 fb21 	bl	800b4d8 <malloc>
 8001e96:	4603      	mov	r3, r0
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <ws2812b_init+0x48>)
 8001e9c:	601a      	str	r2, [r3, #0]
	current_monitor_init();
 8001e9e:	f7fe ffb3 	bl	8000e08 <current_monitor_init>
}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	460ca000 	.word	0x460ca000
 8001eb0:	2000028c 	.word	0x2000028c

08001eb4 <task_button_press_interrupt_occurred>:
uint32_t 	g_c_ok_count = 0;
uint32_t 	g_d_ok_count = 0;


bool task_button_press_interrupt_occurred(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
    return g_animate_led_interrupt;
 8001eb8:	4b03      	ldr	r3, [pc, #12]	; (8001ec8 <task_button_press_interrupt_occurred+0x14>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	200009ba 	.word	0x200009ba

08001ecc <task_led_ctrl_button_to_isr>:
 * @brief   Return the ISR pertaining to the button
 * @param   button: the button of interest
 * @return  isr_e: enumerated type for the interrupt pertaining to the button
 */
isr_e task_led_ctrl_button_to_isr(const board_init_push_buttons_e button)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	71fb      	strb	r3, [r7, #7]
    switch (button)
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	2b03      	cmp	r3, #3
 8001eda:	d813      	bhi.n	8001f04 <task_led_ctrl_button_to_isr+0x38>
 8001edc:	a201      	add	r2, pc, #4	; (adr r2, 8001ee4 <task_led_ctrl_button_to_isr+0x18>)
 8001ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee2:	bf00      	nop
 8001ee4:	08001ef5 	.word	0x08001ef5
 8001ee8:	08001ef9 	.word	0x08001ef9
 8001eec:	08001efd 	.word	0x08001efd
 8001ef0:	08001f01 	.word	0x08001f01
    {
        case PUSH_BUTTON_A: return ISR_SPEED;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	e006      	b.n	8001f06 <task_led_ctrl_button_to_isr+0x3a>
        case PUSH_BUTTON_B: return ISR_STATE;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e004      	b.n	8001f06 <task_led_ctrl_button_to_isr+0x3a>
        case PUSH_BUTTON_C: return ISR_COLOR;
 8001efc:	2302      	movs	r3, #2
 8001efe:	e002      	b.n	8001f06 <task_led_ctrl_button_to_isr+0x3a>
        case PUSH_BUTTON_D: return ISR_PAUSE;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e000      	b.n	8001f06 <task_led_ctrl_button_to_isr+0x3a>
        default: return ISR_INVALID;
 8001f04:	2305      	movs	r3, #5
    }
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop

08001f14 <task_button_press_ctrl_set_interrupt_flag>:
 * @brief   Set global flag denoting that src interrupt has occurred
 * @param   src: source of interrupt
 * @return  void
 */
void task_button_press_ctrl_set_interrupt_flag(const isr_e src)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	71fb      	strb	r3, [r7, #7]
    g_animate_led_interrupt = true;
 8001f1e:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <task_button_press_ctrl_set_interrupt_flag+0x24>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	701a      	strb	r2, [r3, #0]
    g_interrupt_flag[src] = true;
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	4a05      	ldr	r2, [pc, #20]	; (8001f3c <task_button_press_ctrl_set_interrupt_flag+0x28>)
 8001f28:	2101      	movs	r1, #1
 8001f2a:	54d1      	strb	r1, [r2, r3]
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	200009ba 	.word	0x200009ba
 8001f3c:	200009bc 	.word	0x200009bc

08001f40 <task_button_press_ctrl_interrupt_flag>:
 * @return  bool: true if occurred else false
 * @note	This function auto clears the flag.  If set it will
 *  		return true and clear the tracked flag.
 */
bool task_button_press_ctrl_interrupt_flag(const isr_e src)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	71fb      	strb	r3, [r7, #7]
    bool return_val = g_interrupt_flag[src];
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	4a08      	ldr	r2, [pc, #32]	; (8001f70 <task_button_press_ctrl_interrupt_flag+0x30>)
 8001f4e:	5cd3      	ldrb	r3, [r2, r3]
 8001f50:	73fb      	strb	r3, [r7, #15]
    if (return_val) g_interrupt_flag[src] = false; // auto clear
 8001f52:	7bfb      	ldrb	r3, [r7, #15]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <task_button_press_ctrl_interrupt_flag+0x20>
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	4a05      	ldr	r2, [pc, #20]	; (8001f70 <task_button_press_ctrl_interrupt_flag+0x30>)
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	54d1      	strb	r1, [r2, r3]
    return return_val;
 8001f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	200009bc 	.word	0x200009bc

08001f74 <task_button_press_check_interrupts>:
 * @param   *green: pointer to current animation green color (8 bit)
 * @param  	*blue: pointer to current animation blue color (8 bit)
 * @return  bool: true if interrupt occurred since last check, else false
 */
bool task_button_press_check_interrupts(uint8_t *red, uint8_t *green, uint8_t *blue)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
    bool return_val = false;
 8001f80:	2300      	movs	r3, #0
 8001f82:	75fb      	strb	r3, [r7, #23]
    if (task_button_press_major_state_change())
 8001f84:	f000 f85a 	bl	800203c <task_button_press_major_state_change>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d008      	beq.n	8001fa0 <task_button_press_check_interrupts+0x2c>
    {
        task_button_press_interrupt_flag_clear();
 8001f8e:	f000 f849 	bl	8002024 <task_button_press_interrupt_flag_clear>
        return_val = true;
 8001f92:	2301      	movs	r3, #1
 8001f94:	75fb      	strb	r3, [r7, #23]
        animate_led_solid_custom_color((uint16_t)STRIP_ALL_SET, COLOR_HEX_BLACK);
 8001f96:	2100      	movs	r1, #0
 8001f98:	2007      	movs	r0, #7
 8001f9a:	f7ff f863 	bl	8001064 <animate_led_solid_custom_color>
 8001f9e:	e039      	b.n	8002014 <task_button_press_check_interrupts+0xa0>
    }
    else if (task_button_press_ctrl_interrupt_flag(ISR_STATE))
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	f7ff ffcd 	bl	8001f40 <task_button_press_ctrl_interrupt_flag>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d008      	beq.n	8001fbe <task_button_press_check_interrupts+0x4a>
    {
        task_button_press_interrupt_flag_clear();
 8001fac:	f000 f83a 	bl	8002024 <task_button_press_interrupt_flag_clear>
        return_val = true;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	75fb      	strb	r3, [r7, #23]
        animate_led_solid_custom_color((uint16_t)STRIP_ALL_SET, COLOR_HEX_BLACK);
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	2007      	movs	r0, #7
 8001fb8:	f7ff f854 	bl	8001064 <animate_led_solid_custom_color>
 8001fbc:	e02a      	b.n	8002014 <task_button_press_check_interrupts+0xa0>
    }
    else if (task_button_press_ctrl_interrupt_flag(ISR_PAUSE))
 8001fbe:	2003      	movs	r0, #3
 8001fc0:	f7ff ffbe 	bl	8001f40 <task_button_press_ctrl_interrupt_flag>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00a      	beq.n	8001fe0 <task_button_press_check_interrupts+0x6c>
    {
        task_button_press_interrupt_flag_clear();
 8001fca:	f000 f82b 	bl	8002024 <task_button_press_interrupt_flag_clear>
        while (g_animate_led_pause_flag)
 8001fce:	e002      	b.n	8001fd6 <task_button_press_check_interrupts+0x62>
        {
            osDelay(10);
 8001fd0:	200a      	movs	r0, #10
 8001fd2:	f000 fdb9 	bl	8002b48 <osDelay>
        while (g_animate_led_pause_flag)
 8001fd6:	4b12      	ldr	r3, [pc, #72]	; (8002020 <task_button_press_check_interrupts+0xac>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f8      	bne.n	8001fd0 <task_button_press_check_interrupts+0x5c>
 8001fde:	e019      	b.n	8002014 <task_button_press_check_interrupts+0xa0>
        }
    }
    else if (task_button_press_ctrl_interrupt_flag(ISR_COLOR))
 8001fe0:	2002      	movs	r0, #2
 8001fe2:	f7ff ffad 	bl	8001f40 <task_button_press_ctrl_interrupt_flag>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d013      	beq.n	8002014 <task_button_press_check_interrupts+0xa0>
    {
        task_button_press_interrupt_flag_clear();
 8001fec:	f000 f81a 	bl	8002024 <task_button_press_interrupt_flag_clear>
        // interrupt modifies the current color... apply it to the animation!
        *red = task_led_ctrl_color_red_hex();
 8001ff0:	f000 fb30 	bl	8002654 <task_led_ctrl_color_red_hex>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	701a      	strb	r2, [r3, #0]
        *green = task_led_ctrl_color_green_hex();
 8001ffc:	f000 fb52 	bl	80026a4 <task_led_ctrl_color_green_hex>
 8002000:	4603      	mov	r3, r0
 8002002:	461a      	mov	r2, r3
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	701a      	strb	r2, [r3, #0]
        *blue = task_led_ctrl_color_blue_hex();
 8002008:	f000 fb74 	bl	80026f4 <task_led_ctrl_color_blue_hex>
 800200c:	4603      	mov	r3, r0
 800200e:	461a      	mov	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	701a      	strb	r2, [r3, #0]
    }
    return return_val;
 8002014:	7dfb      	ldrb	r3, [r7, #23]
}
 8002016:	4618      	mov	r0, r3
 8002018:	3718      	adds	r7, #24
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	200009b9 	.word	0x200009b9

08002024 <task_button_press_interrupt_flag_clear>:
 * @brief  	Clear global flag indicating that an interrupt occurred.
 * @param   void
 * @return  void
 */
void task_button_press_interrupt_flag_clear(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
    g_animate_led_interrupt = false;
 8002028:	4b03      	ldr	r3, [pc, #12]	; (8002038 <task_button_press_interrupt_flag_clear+0x14>)
 800202a:	2200      	movs	r2, #0
 800202c:	701a      	strb	r2, [r3, #0]
}
 800202e:	bf00      	nop
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	200009ba 	.word	0x200009ba

0800203c <task_button_press_major_state_change>:
 * @brief  	Check if a major state change was intiated
 * @param   void
 * @return  bool: true if major state change, else false
 */
bool task_button_press_major_state_change(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
    return task_button_press_major_change;
 8002040:	4b03      	ldr	r3, [pc, #12]	; (8002050 <task_button_press_major_state_change+0x14>)
 8002042:	781b      	ldrb	r3, [r3, #0]
}
 8002044:	4618      	mov	r0, r3
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	200009b8 	.word	0x200009b8

08002054 <task_button_press>:
 * @brief   Task to control all button press action
 * @param   *arguments: UNUSED!!
 * @return  void
 */
void task_button_press(void *argument)
{
 8002054:	b590      	push	{r4, r7, lr}
 8002056:	b087      	sub	sp, #28
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
	gpio_specific_pin_e button_pin;
    uint32_t button_pressed_bit = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	60bb      	str	r3, [r7, #8]
    color_hex_code_e color = COLOR_HEX_BLACK;
 8002060:	2300      	movs	r3, #0
 8002062:	613b      	str	r3, [r7, #16]
    IRQn_Type irq_type = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	73fb      	strb	r3, [r7, #15]
    board_init_push_buttons_e pushed_button = NUM_PUSH_BUTTONS;
 8002068:	2304      	movs	r3, #4
 800206a:	737b      	strb	r3, [r7, #13]
    while (1)
    {
    	// wait for task notification from button interrupt.
        xTaskNotifyWait(0, button_pressed_bit, &button_pressed_bit, portMAX_DELAY);
 800206c:	68b9      	ldr	r1, [r7, #8]
 800206e:	f107 0208 	add.w	r2, r7, #8
 8002072:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002076:	2000      	movs	r0, #0
 8002078:	f002 fa12 	bl	80044a0 <xTaskNotifyWait>
        // button_pressed_bit is passed through notification.  Convert to the button pressed enum.
        pushed_button = (board_init_push_buttons_e) button_pressed_bit;
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	737b      	strb	r3, [r7, #13]
        HAL_GPIO_WritePin(PIN_PORT_B, PIN_INT_LVL_EN, GPIO_PIN_RESET);
        osDelay(700);
        HAL_GPIO_WritePin(PIN_PORT_B, PIN_INT_LVL_EN, GPIO_PIN_SET);
#endif
        // get the pin for button pressed
        switch (pushed_button)
 8002080:	7b7b      	ldrb	r3, [r7, #13]
 8002082:	2b03      	cmp	r3, #3
 8002084:	d816      	bhi.n	80020b4 <task_button_press+0x60>
 8002086:	a201      	add	r2, pc, #4	; (adr r2, 800208c <task_button_press+0x38>)
 8002088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800208c:	0800209d 	.word	0x0800209d
 8002090:	080020a3 	.word	0x080020a3
 8002094:	080020a9 	.word	0x080020a9
 8002098:	080020af 	.word	0x080020af
        {
        	case PUSH_BUTTON_A: button_pin = GPIO_PIN_PUSH_BUTTON_A; break;
 800209c:	2325      	movs	r3, #37	; 0x25
 800209e:	75fb      	strb	r3, [r7, #23]
 80020a0:	e009      	b.n	80020b6 <task_button_press+0x62>
        	case PUSH_BUTTON_B: button_pin = GPIO_PIN_PUSH_BUTTON_B; break;
 80020a2:	232d      	movs	r3, #45	; 0x2d
 80020a4:	75fb      	strb	r3, [r7, #23]
 80020a6:	e006      	b.n	80020b6 <task_button_press+0x62>
        	case PUSH_BUTTON_C: button_pin = GPIO_PIN_PUSH_BUTTON_C; break;
 80020a8:	2300      	movs	r3, #0
 80020aa:	75fb      	strb	r3, [r7, #23]
 80020ac:	e003      	b.n	80020b6 <task_button_press+0x62>
			case PUSH_BUTTON_D: button_pin = GPIO_PIN_PUSH_BUTTON_D; break;
 80020ae:	2302      	movs	r3, #2
 80020b0:	75fb      	strb	r3, [r7, #23]
 80020b2:	e000      	b.n	80020b6 <task_button_press+0x62>
			default: break;
 80020b4:	bf00      	nop
        }
        // wait for push button to be released
		while (gpio_access_hal_input_is_low(button_pin))
 80020b6:	e009      	b.n	80020cc <task_button_press+0x78>
		{
			// record the current timestamp every 100 ms while waiting for this bitch to go high
    		g_button_press_timestamp[pushed_button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 80020b8:	7b7c      	ldrb	r4, [r7, #13]
 80020ba:	f001 fe2d 	bl	8003d18 <xTaskGetTickCountFromISR>
 80020be:	4603      	mov	r3, r0
 80020c0:	4a7c      	ldr	r2, [pc, #496]	; (80022b4 <task_button_press+0x260>)
 80020c2:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    		osDelay(100);
 80020c6:	2064      	movs	r0, #100	; 0x64
 80020c8:	f000 fd3e 	bl	8002b48 <osDelay>
		while (gpio_access_hal_input_is_low(button_pin))
 80020cc:	7dfb      	ldrb	r3, [r7, #23]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f008 fa48 	bl	800a564 <gpio_access_hal_input_is_low>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1ee      	bne.n	80020b8 <task_button_press+0x64>
		}
        // set flag to signal that a button interrupt was received!
        task_button_press_ctrl_set_interrupt_flag(task_led_ctrl_button_to_isr(pushed_button));
 80020da:	7b7b      	ldrb	r3, [r7, #13]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff fef5 	bl	8001ecc <task_led_ctrl_button_to_isr>
 80020e2:	4603      	mov	r3, r0
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff ff15 	bl	8001f14 <task_button_press_ctrl_set_interrupt_flag>
        // check if the button was held down longer than SWITCH_MAJOR_STATE_CHANGE_TIME_MILLISECONDS
        if (SWITCH_MAJOR_STATE_CHANGE_TIME_MILLISECONDS < \
        		(g_button_press_timestamp[(board_init_push_buttons_e) button_pressed_bit][TIMESTAMP_CURRENT] - \
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	461a      	mov	r2, r3
 80020f0:	4b70      	ldr	r3, [pc, #448]	; (80022b4 <task_button_press+0x260>)
 80020f2:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
        				g_button_press_timestamp[pushed_button][TIMESTAMP_PREVIOUS]))
 80020f6:	7b7b      	ldrb	r3, [r7, #13]
 80020f8:	496e      	ldr	r1, [pc, #440]	; (80022b4 <task_button_press+0x260>)
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	440b      	add	r3, r1
 80020fe:	685b      	ldr	r3, [r3, #4]
        		(g_button_press_timestamp[(board_init_push_buttons_e) button_pressed_bit][TIMESTAMP_CURRENT] - \
 8002100:	1ad3      	subs	r3, r2, r3
        if (SWITCH_MAJOR_STATE_CHANGE_TIME_MILLISECONDS < \
 8002102:	f241 3288 	movw	r2, #5000	; 0x1388
 8002106:	4293      	cmp	r3, r2
 8002108:	d971      	bls.n	80021ee <task_button_press+0x19a>
        {
        	// major state change initiated. Special action occurs below.
            task_button_press_major_change = true;
 800210a:	4b6b      	ldr	r3, [pc, #428]	; (80022b8 <task_button_press+0x264>)
 800210c:	2201      	movs	r2, #1
 800210e:	701a      	strb	r2, [r3, #0]
            switch (pushed_button)
 8002110:	7b7b      	ldrb	r3, [r7, #13]
 8002112:	2b03      	cmp	r3, #3
 8002114:	d841      	bhi.n	800219a <task_button_press+0x146>
 8002116:	a201      	add	r2, pc, #4	; (adr r2, 800211c <task_button_press+0xc8>)
 8002118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800211c:	0800212d 	.word	0x0800212d
 8002120:	08002147 	.word	0x08002147
 8002124:	08002163 	.word	0x08002163
 8002128:	0800217d 	.word	0x0800217d
            {
                case PUSH_BUTTON_A:
                	// `A` button is speed.  Reset the speed to the default value.
                    g_a_ok_count++;
 800212c:	4b63      	ldr	r3, [pc, #396]	; (80022bc <task_button_press+0x268>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	3301      	adds	r3, #1
 8002132:	4a62      	ldr	r2, [pc, #392]	; (80022bc <task_button_press+0x268>)
 8002134:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_GREEN;
 8002136:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800213a:	613b      	str	r3, [r7, #16]
                    irq_type = PUSH_BUTTON_A_IRQ;
 800213c:	2317      	movs	r3, #23
 800213e:	73fb      	strb	r3, [r7, #15]
                    task_led_ctrl_speed_reset();
 8002140:	f000 fb78 	bl	8002834 <task_led_ctrl_speed_reset>
                break;
 8002144:	e02a      	b.n	800219c <task_button_press+0x148>
                case PUSH_BUTTON_B:
                	// `B` button is animation.  Reset the iteration count and also reset the master state to demo!
                    g_b_ok_count++;
 8002146:	4b5e      	ldr	r3, [pc, #376]	; (80022c0 <task_button_press+0x26c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	3301      	adds	r3, #1
 800214c:	4a5c      	ldr	r2, [pc, #368]	; (80022c0 <task_button_press+0x26c>)
 800214e:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_BLUE;
 8002150:	23ff      	movs	r3, #255	; 0xff
 8002152:	613b      	str	r3, [r7, #16]
                    irq_type = PUSH_BUTTON_B_IRQ;
 8002154:	2328      	movs	r3, #40	; 0x28
 8002156:	73fb      	strb	r3, [r7, #15]
                    task_led_ctrl_animate_iteration_reset();
 8002158:	f000 fb78 	bl	800284c <task_led_ctrl_animate_iteration_reset>
                    task_led_ctrl_animate_state_demo(); // enter demo state
 800215c:	f000 fba0 	bl	80028a0 <task_led_ctrl_animate_state_demo>
                break;
 8002160:	e01c      	b.n	800219c <task_button_press+0x148>
                case PUSH_BUTTON_C:
                	// `C` button is color.  Reset the color master state back to demo mode.
                    g_c_ok_count++;
 8002162:	4b58      	ldr	r3, [pc, #352]	; (80022c4 <task_button_press+0x270>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	3301      	adds	r3, #1
 8002168:	4a56      	ldr	r2, [pc, #344]	; (80022c4 <task_button_press+0x270>)
 800216a:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_RED;
 800216c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8002170:	613b      	str	r3, [r7, #16]
                    irq_type = PUSH_BUTTON_C_IRQ;
 8002172:	2306      	movs	r3, #6
 8002174:	73fb      	strb	r3, [r7, #15]
                    // don't change iteration count.  Simply go to color demo mode.
                    task_led_ctrl_color_state_demo();
 8002176:	f000 fa1f 	bl	80025b8 <task_led_ctrl_color_state_demo>
                break;
 800217a:	e00f      	b.n	800219c <task_button_press+0x148>
                case PUSH_BUTTON_D:
                	// `D` button is brightness.  Adjust the brightness and also clear pause if for some reason we are paused.
                    task_led_ctrl_brightness_adjust();
 800217c:	f000 f9b6 	bl	80024ec <task_led_ctrl_brightness_adjust>
                    task_led_ctrl_clear_pause();
 8002180:	f000 f9e4 	bl	800254c <task_led_ctrl_clear_pause>
                    g_d_ok_count++;
 8002184:	4b50      	ldr	r3, [pc, #320]	; (80022c8 <task_button_press+0x274>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	3301      	adds	r3, #1
 800218a:	4a4f      	ldr	r2, [pc, #316]	; (80022c8 <task_button_press+0x274>)
 800218c:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_WHITE;
 800218e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002192:	613b      	str	r3, [r7, #16]
                    irq_type = PUSH_BUTTON_D_IRQ;
 8002194:	2308      	movs	r3, #8
 8002196:	73fb      	strb	r3, [r7, #15]
                break;
 8002198:	e000      	b.n	800219c <task_button_press+0x148>
                default:
                break;
 800219a:	bf00      	nop
            }
            for (uint8_t iii = 0; iii < 3; iii++)
 800219c:	2300      	movs	r3, #0
 800219e:	73bb      	strb	r3, [r7, #14]
 80021a0:	e012      	b.n	80021c8 <task_button_press+0x174>
            {
            	// flash the LEDs on the sign signalling that a master state change was made!
                animate_led_solid_custom_color((uint16_t)STRIP_ALL_SET, color);
 80021a2:	6939      	ldr	r1, [r7, #16]
 80021a4:	2007      	movs	r0, #7
 80021a6:	f7fe ff5d 	bl	8001064 <animate_led_solid_custom_color>
                osDelay(500);
 80021aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021ae:	f000 fccb 	bl	8002b48 <osDelay>
                animate_led_solid_custom_color((uint16_t)STRIP_ALL_SET, COLOR_HEX_BLACK);
 80021b2:	2100      	movs	r1, #0
 80021b4:	2007      	movs	r0, #7
 80021b6:	f7fe ff55 	bl	8001064 <animate_led_solid_custom_color>
                osDelay(500);
 80021ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021be:	f000 fcc3 	bl	8002b48 <osDelay>
            for (uint8_t iii = 0; iii < 3; iii++)
 80021c2:	7bbb      	ldrb	r3, [r7, #14]
 80021c4:	3301      	adds	r3, #1
 80021c6:	73bb      	strb	r3, [r7, #14]
 80021c8:	7bbb      	ldrb	r3, [r7, #14]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d9e9      	bls.n	80021a2 <task_button_press+0x14e>
            }
            HAL_NVIC_SetPriority(irq_type, 24, 0);
 80021ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021d2:	2200      	movs	r2, #0
 80021d4:	2118      	movs	r1, #24
 80021d6:	4618      	mov	r0, r3
 80021d8:	f003 fc11 	bl	80059fe <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(irq_type);
 80021dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f003 fc28 	bl	8005a36 <HAL_NVIC_EnableIRQ>
            task_button_press_major_change = false;
 80021e6:	4b34      	ldr	r3, [pc, #208]	; (80022b8 <task_button_press+0x264>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	701a      	strb	r2, [r3, #0]
 80021ec:	e73e      	b.n	800206c <task_button_press+0x18>
        }
        else
        {
        	// simple button press.  No master state change here!
            switch (pushed_button)
 80021ee:	7b7b      	ldrb	r3, [r7, #13]
 80021f0:	2b03      	cmp	r3, #3
 80021f2:	d85d      	bhi.n	80022b0 <task_button_press+0x25c>
 80021f4:	a201      	add	r2, pc, #4	; (adr r2, 80021fc <task_button_press+0x1a8>)
 80021f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021fa:	bf00      	nop
 80021fc:	0800220d 	.word	0x0800220d
 8002200:	0800222d 	.word	0x0800222d
 8002204:	08002261 	.word	0x08002261
 8002208:	08002291 	.word	0x08002291
            {
                case PUSH_BUTTON_A:
                	// A is speed.  Adjust it!
                    g_a_ok_count++;
 800220c:	4b2b      	ldr	r3, [pc, #172]	; (80022bc <task_button_press+0x268>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	3301      	adds	r3, #1
 8002212:	4a2a      	ldr	r2, [pc, #168]	; (80022bc <task_button_press+0x268>)
 8002214:	6013      	str	r3, [r2, #0]
                    task_led_ctrl_speed_adjust();
 8002216:	f000 faf5 	bl	8002804 <task_led_ctrl_speed_adjust>
                    HAL_NVIC_SetPriority(PUSH_BUTTON_A_IRQ, 24, 0);
 800221a:	2200      	movs	r2, #0
 800221c:	2118      	movs	r1, #24
 800221e:	2017      	movs	r0, #23
 8002220:	f003 fbed 	bl	80059fe <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_A_IRQ);
 8002224:	2017      	movs	r0, #23
 8002226:	f003 fc06 	bl	8005a36 <HAL_NVIC_EnableIRQ>
                break;
 800222a:	e042      	b.n	80022b2 <task_button_press+0x25e>
                case PUSH_BUTTON_B:
                	// B is state.  Adjust it!
                    g_b_ok_count++;
 800222c:	4b24      	ldr	r3, [pc, #144]	; (80022c0 <task_button_press+0x26c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	3301      	adds	r3, #1
 8002232:	4a23      	ldr	r2, [pc, #140]	; (80022c0 <task_button_press+0x26c>)
 8002234:	6013      	str	r3, [r2, #0]
                    if (MASTER_LED_STATE_DEMO == task_led_ctrl_animate_state())
 8002236:	f000 fb5b 	bl	80028f0 <task_led_ctrl_animate_state>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d102      	bne.n	8002246 <task_button_press+0x1f2>
                    {
                    	// if master state is demo then change to fixed master state!
                        task_led_ctrl_animate_state_fixed(); // animation count is auto cleared here.
 8002240:	f000 fb40 	bl	80028c4 <task_led_ctrl_animate_state_fixed>
 8002244:	e003      	b.n	800224e <task_button_press+0x1fa>
                    }
                    else
                    {
                    	// reset animation state count and adjust the state
                        task_led_ctrl_animate_iteration_reset();
 8002246:	f000 fb01 	bl	800284c <task_led_ctrl_animate_iteration_reset>
                        task_led_ctrl_animate_adjust_state();
 800224a:	f000 fb0b 	bl	8002864 <task_led_ctrl_animate_adjust_state>
                    }
                    HAL_NVIC_SetPriority(PUSH_BUTTON_B_IRQ, 24, 0);
 800224e:	2200      	movs	r2, #0
 8002250:	2118      	movs	r1, #24
 8002252:	2028      	movs	r0, #40	; 0x28
 8002254:	f003 fbd3 	bl	80059fe <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_B_IRQ);
 8002258:	2028      	movs	r0, #40	; 0x28
 800225a:	f003 fbec 	bl	8005a36 <HAL_NVIC_EnableIRQ>
                break;
 800225e:	e028      	b.n	80022b2 <task_button_press+0x25e>
                case PUSH_BUTTON_C:
                	// C is color.  Adjust it!
                    g_c_ok_count++;
 8002260:	4b18      	ldr	r3, [pc, #96]	; (80022c4 <task_button_press+0x270>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	3301      	adds	r3, #1
 8002266:	4a17      	ldr	r2, [pc, #92]	; (80022c4 <task_button_press+0x270>)
 8002268:	6013      	str	r3, [r2, #0]
                    if (MASTER_COLOR_STATE_DEMO == task_led_ctrl_color_state())
 800226a:	f000 f999 	bl	80025a0 <task_led_ctrl_color_state>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d102      	bne.n	800227a <task_button_press+0x226>
                    {
                    	// if master color state is demo then change to fixed master state!
                        task_led_ctrl_color_state_fixed();
 8002274:	f000 f9ac 	bl	80025d0 <task_led_ctrl_color_state_fixed>
 8002278:	e001      	b.n	800227e <task_button_press+0x22a>
                    }
                    else
                    {
                        task_led_ctrl_color_adjust();
 800227a:	f000 f9bb 	bl	80025f4 <task_led_ctrl_color_adjust>
                    }
                    HAL_NVIC_SetPriority(PUSH_BUTTON_C_IRQ, 24, 0);
 800227e:	2200      	movs	r2, #0
 8002280:	2118      	movs	r1, #24
 8002282:	2006      	movs	r0, #6
 8002284:	f003 fbbb 	bl	80059fe <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_C_IRQ);
 8002288:	2006      	movs	r0, #6
 800228a:	f003 fbd4 	bl	8005a36 <HAL_NVIC_EnableIRQ>
                break;
 800228e:	e010      	b.n	80022b2 <task_button_press+0x25e>
                case PUSH_BUTTON_D:
                	// D is pause.
                    g_d_ok_count++;
 8002290:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <task_button_press+0x274>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	3301      	adds	r3, #1
 8002296:	4a0c      	ldr	r2, [pc, #48]	; (80022c8 <task_button_press+0x274>)
 8002298:	6013      	str	r3, [r2, #0]
                    task_led_ctrl_pause();
 800229a:	f000 f963 	bl	8002564 <task_led_ctrl_pause>
                    HAL_NVIC_SetPriority(PUSH_BUTTON_D_IRQ, 24, 0);
 800229e:	2200      	movs	r2, #0
 80022a0:	2118      	movs	r1, #24
 80022a2:	2008      	movs	r0, #8
 80022a4:	f003 fbab 	bl	80059fe <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_D_IRQ);
 80022a8:	2008      	movs	r0, #8
 80022aa:	f003 fbc4 	bl	8005a36 <HAL_NVIC_EnableIRQ>
                break;
 80022ae:	e000      	b.n	80022b2 <task_button_press+0x25e>
                default:
                break;
 80022b0:	bf00      	nop
        xTaskNotifyWait(0, button_pressed_bit, &button_pressed_bit, portMAX_DELAY);
 80022b2:	e6db      	b.n	800206c <task_button_press+0x18>
 80022b4:	20000998 	.word	0x20000998
 80022b8:	200009b8 	.word	0x200009b8
 80022bc:	200009c0 	.word	0x200009c0
 80022c0:	200009c4 	.word	0x200009c4
 80022c4:	200009c8 	.word	0x200009c8
 80022c8:	200009cc 	.word	0x200009cc

080022cc <task_led_ctrl_adjust_parameters>:
uint16_t                g_delay_in_animation_ms = 100; // where applicable of course


static void task_led_ctrl_adjust_parameters(const task_led_ctrl_loop_iterations_e max_iterations,
                                            const task_led_ctrl_delay_ms_e animation_delay_ms)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	460a      	mov	r2, r1
 80022d6:	71fb      	strb	r3, [r7, #7]
 80022d8:	4613      	mov	r3, r2
 80022da:	80bb      	strh	r3, [r7, #4]
    g_animation_iterations++;
 80022dc:	4b18      	ldr	r3, [pc, #96]	; (8002340 <task_led_ctrl_adjust_parameters+0x74>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	3301      	adds	r3, #1
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	4b16      	ldr	r3, [pc, #88]	; (8002340 <task_led_ctrl_adjust_parameters+0x74>)
 80022e6:	701a      	strb	r2, [r3, #0]
    if (MASTER_LED_STATE_DEMO == g_master_led_state)
 80022e8:	4b16      	ldr	r3, [pc, #88]	; (8002344 <task_led_ctrl_adjust_parameters+0x78>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d11b      	bne.n	8002328 <task_led_ctrl_adjust_parameters+0x5c>
    {
        if (TASK_LED_CTRL_DELAY_MS_0 != animation_delay_ms) task_led_ctrl_delay(animation_delay_ms);
 80022f0:	88bb      	ldrh	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <task_led_ctrl_adjust_parameters+0x32>
 80022f6:	88bb      	ldrh	r3, [r7, #4]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f000 f8e1 	bl	80024c0 <task_led_ctrl_delay>
        if (max_iterations == g_animation_iterations)
 80022fe:	4b10      	ldr	r3, [pc, #64]	; (8002340 <task_led_ctrl_adjust_parameters+0x74>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	79fa      	ldrb	r2, [r7, #7]
 8002304:	429a      	cmp	r2, r3
 8002306:	d10f      	bne.n	8002328 <task_led_ctrl_adjust_parameters+0x5c>
        {
            g_led_state = (led_state_e) (g_led_state + 1);
 8002308:	4b0f      	ldr	r3, [pc, #60]	; (8002348 <task_led_ctrl_adjust_parameters+0x7c>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	3301      	adds	r3, #1
 800230e:	b2da      	uxtb	r2, r3
 8002310:	4b0d      	ldr	r3, [pc, #52]	; (8002348 <task_led_ctrl_adjust_parameters+0x7c>)
 8002312:	701a      	strb	r2, [r3, #0]
            if (NUM_LED_STATES == g_led_state) g_led_state = LED_STATE_FIRST;
 8002314:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <task_led_ctrl_adjust_parameters+0x7c>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b0a      	cmp	r3, #10
 800231a:	d102      	bne.n	8002322 <task_led_ctrl_adjust_parameters+0x56>
 800231c:	4b0a      	ldr	r3, [pc, #40]	; (8002348 <task_led_ctrl_adjust_parameters+0x7c>)
 800231e:	2200      	movs	r2, #0
 8002320:	701a      	strb	r2, [r3, #0]
            g_animation_iterations = 0;
 8002322:	4b07      	ldr	r3, [pc, #28]	; (8002340 <task_led_ctrl_adjust_parameters+0x74>)
 8002324:	2200      	movs	r2, #0
 8002326:	701a      	strb	r2, [r3, #0]
        }
    }
    if (MASTER_COLOR_STATE_DEMO == task_led_ctrl_color_state()) task_led_ctrl_color_random();
 8002328:	f000 f93a 	bl	80025a0 <task_led_ctrl_color_state>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <task_led_ctrl_adjust_parameters+0x6a>
 8002332:	f000 fa05 	bl	8002740 <task_led_ctrl_color_random>
}
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	200009d4 	.word	0x200009d4
 8002344:	200009d0 	.word	0x200009d0
 8002348:	20000084 	.word	0x20000084

0800234c <task_led_ctrl_strip_one>:
char binary_start[25] = "application/macbinary\r\n\r\n";
extern uint8_t* g_uart_sector_full_buffer;
uint64_t flash_address = 0x8020000;
uint64_t flash_index = 0;
void task_led_ctrl_strip_one(void *argument)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af02      	add	r7, sp, #8
 8002352:	6078      	str	r0, [r7, #4]
//	}
//
//    osDelay(10);
    while (1)
    {
        while(task_button_press_major_state_change()) osDelay(100);
 8002354:	e002      	b.n	800235c <task_led_ctrl_strip_one+0x10>
 8002356:	2064      	movs	r0, #100	; 0x64
 8002358:	f000 fbf6 	bl	8002b48 <osDelay>
 800235c:	f7ff fe6e 	bl	800203c <task_button_press_major_state_change>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f7      	bne.n	8002356 <task_led_ctrl_strip_one+0xa>

        if (1)//(flash_info_animation_enabled(g_led_state))
        {
            switch(g_led_state)
 8002366:	4b54      	ldr	r3, [pc, #336]	; (80024b8 <task_led_ctrl_strip_one+0x16c>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b09      	cmp	r3, #9
 800236c:	f200 80a2 	bhi.w	80024b4 <task_led_ctrl_strip_one+0x168>
 8002370:	a201      	add	r2, pc, #4	; (adr r2, 8002378 <task_led_ctrl_strip_one+0x2c>)
 8002372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002376:	bf00      	nop
 8002378:	0800249b 	.word	0x0800249b
 800237c:	080023a1 	.word	0x080023a1
 8002380:	080023bf 	.word	0x080023bf
 8002384:	080023f5 	.word	0x080023f5
 8002388:	0800240d 	.word	0x0800240d
 800238c:	08002421 	.word	0x08002421
 8002390:	08002433 	.word	0x08002433
 8002394:	0800244d 	.word	0x0800244d
 8002398:	0800245f 	.word	0x0800245f
 800239c:	08002477 	.word	0x08002477
            {
                case LED_STATE_WHITE_COLOR:
                    animate_led_solid_custom_color((uint16_t)STRIP_NUM_1, COLOR_HEX_BLUE);
 80023a0:	21ff      	movs	r1, #255	; 0xff
 80023a2:	2001      	movs	r0, #1
 80023a4:	f7fe fe5e 	bl	8001064 <animate_led_solid_custom_color>
                    animate_led_solid_custom_color((uint16_t)STRIP_NUM_2, COLOR_HEX_WHITE);
 80023a8:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80023ac:	2002      	movs	r0, #2
 80023ae:	f7fe fe59 	bl	8001064 <animate_led_solid_custom_color>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_1, TASK_LED_CTRL_DELAY_MS_5000);
 80023b2:	f241 3188 	movw	r1, #5000	; 0x1388
 80023b6:	2001      	movs	r0, #1
 80023b8:	f7ff ff88 	bl	80022cc <task_led_ctrl_adjust_parameters>
                break;
 80023bc:	e07b      	b.n	80024b6 <task_led_ctrl_strip_one+0x16a>
                case LED_STATE_SOLID_COLOR:
                    animate_led_solid_custom_color((uint16_t)STRIP_NUM_1, task_led_ctrl_color_hex());
 80023be:	f000 f937 	bl	8002630 <task_led_ctrl_color_hex>
 80023c2:	4603      	mov	r3, r0
 80023c4:	4619      	mov	r1, r3
 80023c6:	2001      	movs	r0, #1
 80023c8:	f7fe fe4c 	bl	8001064 <animate_led_solid_custom_color>
                    if (MASTER_LED_STATE_FIXED == g_master_led_state)
 80023cc:	4b3b      	ldr	r3, [pc, #236]	; (80024bc <task_led_ctrl_strip_one+0x170>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d109      	bne.n	80023e8 <task_led_ctrl_strip_one+0x9c>
                    {
                        task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_1000);
 80023d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80023d8:	2005      	movs	r0, #5
 80023da:	f7ff ff77 	bl	80022cc <task_led_ctrl_adjust_parameters>
                        task_led_ctrl_delay(1000);
 80023de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023e2:	f000 f86d 	bl	80024c0 <task_led_ctrl_delay>
                    }
                    else task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_5000);
                break;
 80023e6:	e066      	b.n	80024b6 <task_led_ctrl_strip_one+0x16a>
                    else task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_5000);
 80023e8:	f241 3188 	movw	r1, #5000	; 0x1388
 80023ec:	2005      	movs	r0, #5
 80023ee:	f7ff ff6d 	bl	80022cc <task_led_ctrl_adjust_parameters>
                break;
 80023f2:	e060      	b.n	80024b6 <task_led_ctrl_strip_one+0x16a>
                case LED_STATE_SPARKLE_NO_FILL:
                    animate_led_turn_all_pixels_off();
 80023f4:	f7fe fe58 	bl	80010a8 <animate_led_turn_all_pixels_off>
                    animate_led_sparkle_only_random_color(STRIP_NUM_1, false, 100);//random(0, 50));
 80023f8:	2264      	movs	r2, #100	; 0x64
 80023fa:	2100      	movs	r1, #0
 80023fc:	2001      	movs	r0, #1
 80023fe:	f7ff f873 	bl	80014e8 <animate_led_sparkle_only_random_color>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_0);
 8002402:	2100      	movs	r1, #0
 8002404:	2005      	movs	r0, #5
 8002406:	f7ff ff61 	bl	80022cc <task_led_ctrl_adjust_parameters>
                break;
 800240a:	e054      	b.n	80024b6 <task_led_ctrl_strip_one+0x16a>
                case LED_STATE_SPARKLE_FILL:
                    animate_led_sparkle_only_random_color(STRIP_NUM_1, true, 100);
 800240c:	2264      	movs	r2, #100	; 0x64
 800240e:	2101      	movs	r1, #1
 8002410:	2001      	movs	r0, #1
 8002412:	f7ff f869 	bl	80014e8 <animate_led_sparkle_only_random_color>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 8002416:	2100      	movs	r1, #0
 8002418:	200a      	movs	r0, #10
 800241a:	f7ff ff57 	bl	80022cc <task_led_ctrl_adjust_parameters>
                break;
 800241e:	e04a      	b.n	80024b6 <task_led_ctrl_strip_one+0x16a>
                case LED_STATE_RAINBOW_CYCLE:
                    animate_led_rainbow_cycle(STRIP_NUM_1, 10);
 8002420:	210a      	movs	r1, #10
 8002422:	2001      	movs	r0, #1
 8002424:	f7ff f8f2 	bl	800160c <animate_led_rainbow_cycle>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_0);
 8002428:	2100      	movs	r1, #0
 800242a:	2005      	movs	r0, #5
 800242c:	f7ff ff4e 	bl	80022cc <task_led_ctrl_adjust_parameters>
                break;
 8002430:	e041      	b.n	80024b6 <task_led_ctrl_strip_one+0x16a>
                case LED_STATE_THEATER_CHASE:
                    animate_led_theater_chase(STRIP_NUM_1, task_led_ctrl_color_hex(), 20);
 8002432:	f000 f8fd 	bl	8002630 <task_led_ctrl_color_hex>
 8002436:	4603      	mov	r3, r0
 8002438:	2214      	movs	r2, #20
 800243a:	4619      	mov	r1, r3
 800243c:	2001      	movs	r0, #1
 800243e:	f7ff f973 	bl	8001728 <animate_led_theater_chase>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 8002442:	2100      	movs	r1, #0
 8002444:	200a      	movs	r0, #10
 8002446:	f7ff ff41 	bl	80022cc <task_led_ctrl_adjust_parameters>
                break;
 800244a:	e034      	b.n	80024b6 <task_led_ctrl_strip_one+0x16a>
                case LED_STATE_THEATER_CHASE_RAINBOW:\
                    animate_led_theater_chase_rainbow(STRIP_NUM_1, 20);
 800244c:	2114      	movs	r1, #20
 800244e:	2001      	movs	r0, #1
 8002450:	f7ff fa0c 	bl	800186c <animate_led_theater_chase_rainbow>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_2, TASK_LED_CTRL_DELAY_MS_0);
 8002454:	2100      	movs	r1, #0
 8002456:	2002      	movs	r0, #2
 8002458:	f7ff ff38 	bl	80022cc <task_led_ctrl_adjust_parameters>
                break;
 800245c:	e02b      	b.n	80024b6 <task_led_ctrl_strip_one+0x16a>
                case LED_STATE_FADE_IN_AND_OUT:
                    animate_led_fade_in_fade_out((uint16_t)STRIP_NUM_1, task_led_ctrl_color_hex());
 800245e:	f000 f8e7 	bl	8002630 <task_led_ctrl_color_hex>
 8002462:	4603      	mov	r3, r0
 8002464:	4619      	mov	r1, r3
 8002466:	2001      	movs	r0, #1
 8002468:	f7fe fe88 	bl	800117c <animate_led_fade_in_fade_out>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 800246c:	2100      	movs	r1, #0
 800246e:	200a      	movs	r0, #10
 8002470:	f7ff ff2c 	bl	80022cc <task_led_ctrl_adjust_parameters>
                break;
 8002474:	e01f      	b.n	80024b6 <task_led_ctrl_strip_one+0x16a>
                case LED_STATE_TWINKLE:
                    animate_led_turn_all_pixels_off();
 8002476:	f7fe fe17 	bl	80010a8 <animate_led_turn_all_pixels_off>
                    animate_led_twinkle(STRIP_NUM_1, task_led_ctrl_color_hex(), (uint32_t)((float)NUM_LEDS * (float)0.9), 20, false);
 800247a:	f000 f8d9 	bl	8002630 <task_led_ctrl_color_hex>
 800247e:	4601      	mov	r1, r0
 8002480:	2300      	movs	r3, #0
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	2314      	movs	r3, #20
 8002486:	f44f 7216 	mov.w	r2, #600	; 0x258
 800248a:	2001      	movs	r0, #1
 800248c:	f7fe ffb8 	bl	8001400 <animate_led_twinkle>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_0);
 8002490:	2100      	movs	r1, #0
 8002492:	2005      	movs	r0, #5
 8002494:	f7ff ff1a 	bl	80022cc <task_led_ctrl_adjust_parameters>
                break;
 8002498:	e00d      	b.n	80024b6 <task_led_ctrl_strip_one+0x16a>
                case LED_STATE_SPELL:
                    animate_led_only_spell_word(STRIP_NUM_1, task_led_ctrl_color_hex(), 20);
 800249a:	f000 f8c9 	bl	8002630 <task_led_ctrl_color_hex>
 800249e:	4603      	mov	r3, r0
 80024a0:	2214      	movs	r2, #20
 80024a2:	4619      	mov	r1, r3
 80024a4:	2001      	movs	r0, #1
 80024a6:	f7fe fe09 	bl	80010bc <animate_led_only_spell_word>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 80024aa:	2100      	movs	r1, #0
 80024ac:	200a      	movs	r0, #10
 80024ae:	f7ff ff0d 	bl	80022cc <task_led_ctrl_adjust_parameters>
                break;
 80024b2:	e000      	b.n	80024b6 <task_led_ctrl_strip_one+0x16a>
                default:
                break;
 80024b4:	bf00      	nop
        while(task_button_press_major_state_change()) osDelay(100);
 80024b6:	e751      	b.n	800235c <task_led_ctrl_strip_one+0x10>
 80024b8:	20000084 	.word	0x20000084
 80024bc:	200009d0 	.word	0x200009d0

080024c0 <task_led_ctrl_delay>:
    }
}


void task_led_ctrl_delay(const uint32_t time_ms)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
    uint32_t ms_count = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	60fb      	str	r3, [r7, #12]
    while (ms_count++ < time_ms)
 80024cc:	e002      	b.n	80024d4 <task_led_ctrl_delay+0x14>
    {
        osDelay(portTICK_PERIOD_MS);
 80024ce:	2001      	movs	r0, #1
 80024d0:	f000 fb3a 	bl	8002b48 <osDelay>
    while (ms_count++ < time_ms)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	1c5a      	adds	r2, r3, #1
 80024d8:	60fa      	str	r2, [r7, #12]
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d8f6      	bhi.n	80024ce <task_led_ctrl_delay+0xe>
    }
}
 80024e0:	bf00      	nop
 80024e2:	bf00      	nop
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <task_led_ctrl_brightness_adjust>:


void task_led_ctrl_brightness_adjust(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
    if (LED_BRIGHTNESS_FIRST == g_led_brightness) g_led_brightness = LED_BRIGHTNESS_LAST;
 80024f0:	4b14      	ldr	r3, [pc, #80]	; (8002544 <task_led_ctrl_brightness_adjust+0x58>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d103      	bne.n	8002500 <task_led_ctrl_brightness_adjust+0x14>
 80024f8:	4b12      	ldr	r3, [pc, #72]	; (8002544 <task_led_ctrl_brightness_adjust+0x58>)
 80024fa:	2202      	movs	r2, #2
 80024fc:	701a      	strb	r2, [r3, #0]
 80024fe:	e005      	b.n	800250c <task_led_ctrl_brightness_adjust+0x20>
    else g_led_brightness = (led_brightness_e) (g_led_brightness - 1);
 8002500:	4b10      	ldr	r3, [pc, #64]	; (8002544 <task_led_ctrl_brightness_adjust+0x58>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	3b01      	subs	r3, #1
 8002506:	b2da      	uxtb	r2, r3
 8002508:	4b0e      	ldr	r3, [pc, #56]	; (8002544 <task_led_ctrl_brightness_adjust+0x58>)
 800250a:	701a      	strb	r2, [r3, #0]
    switch (g_led_brightness)
 800250c:	4b0d      	ldr	r3, [pc, #52]	; (8002544 <task_led_ctrl_brightness_adjust+0x58>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b02      	cmp	r3, #2
 8002512:	d010      	beq.n	8002536 <task_led_ctrl_brightness_adjust+0x4a>
 8002514:	2b02      	cmp	r3, #2
 8002516:	dc13      	bgt.n	8002540 <task_led_ctrl_brightness_adjust+0x54>
 8002518:	2b00      	cmp	r3, #0
 800251a:	d002      	beq.n	8002522 <task_led_ctrl_brightness_adjust+0x36>
 800251c:	2b01      	cmp	r3, #1
 800251e:	d005      	beq.n	800252c <task_led_ctrl_brightness_adjust+0x40>
        break;
        case LED_BRIGHTNESS_1_PERCENT:
            current_monitor_set(0.01f);
        break;
    }
}
 8002520:	e00e      	b.n	8002540 <task_led_ctrl_brightness_adjust+0x54>
            current_monitor_set(1.0f);
 8002522:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002526:	f7fe fc3f 	bl	8000da8 <current_monitor_set>
        break;
 800252a:	e009      	b.n	8002540 <task_led_ctrl_brightness_adjust+0x54>
            current_monitor_set(0.25f);
 800252c:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8002530:	f7fe fc3a 	bl	8000da8 <current_monitor_set>
        break;
 8002534:	e004      	b.n	8002540 <task_led_ctrl_brightness_adjust+0x54>
            current_monitor_set(0.01f);
 8002536:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8002548 <task_led_ctrl_brightness_adjust+0x5c>
 800253a:	f7fe fc35 	bl	8000da8 <current_monitor_set>
        break;
 800253e:	bf00      	nop
}
 8002540:	bf00      	nop
 8002542:	bd80      	pop	{r7, pc}
 8002544:	200009d2 	.word	0x200009d2
 8002548:	3c23d70a 	.word	0x3c23d70a

0800254c <task_led_ctrl_clear_pause>:


void task_led_ctrl_clear_pause(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
    g_animate_led_pause_flag = false;
 8002550:	4b03      	ldr	r3, [pc, #12]	; (8002560 <task_led_ctrl_clear_pause+0x14>)
 8002552:	2200      	movs	r2, #0
 8002554:	701a      	strb	r2, [r3, #0]
}
 8002556:	bf00      	nop
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	200009b9 	.word	0x200009b9

08002564 <task_led_ctrl_pause>:


void task_led_ctrl_pause(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
    static uint8_t flip_or_flop = 1;
    if (flip_or_flop) g_animate_led_pause_flag = true;
 8002568:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <task_led_ctrl_pause+0x34>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <task_led_ctrl_pause+0x14>
 8002570:	4b0a      	ldr	r3, [pc, #40]	; (800259c <task_led_ctrl_pause+0x38>)
 8002572:	2201      	movs	r2, #1
 8002574:	701a      	strb	r2, [r3, #0]
 8002576:	e002      	b.n	800257e <task_led_ctrl_pause+0x1a>
    else g_animate_led_pause_flag = false;
 8002578:	4b08      	ldr	r3, [pc, #32]	; (800259c <task_led_ctrl_pause+0x38>)
 800257a:	2200      	movs	r2, #0
 800257c:	701a      	strb	r2, [r3, #0]
    flip_or_flop ^= 1;
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <task_led_ctrl_pause+0x34>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	f083 0301 	eor.w	r3, r3, #1
 8002586:	b2da      	uxtb	r2, r3
 8002588:	4b03      	ldr	r3, [pc, #12]	; (8002598 <task_led_ctrl_pause+0x34>)
 800258a:	701a      	strb	r2, [r3, #0]
}
 800258c:	bf00      	nop
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	20000086 	.word	0x20000086
 800259c:	200009b9 	.word	0x200009b9

080025a0 <task_led_ctrl_color_state>:


master_color_state_e task_led_ctrl_color_state(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
    return g_master_color_state;
 80025a4:	4b03      	ldr	r3, [pc, #12]	; (80025b4 <task_led_ctrl_color_state+0x14>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	200009d3 	.word	0x200009d3

080025b8 <task_led_ctrl_color_state_demo>:


void task_led_ctrl_color_state_demo(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
    g_master_color_state = MASTER_COLOR_STATE_DEMO;
 80025bc:	4b03      	ldr	r3, [pc, #12]	; (80025cc <task_led_ctrl_color_state_demo+0x14>)
 80025be:	2200      	movs	r2, #0
 80025c0:	701a      	strb	r2, [r3, #0]
}
 80025c2:	bf00      	nop
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	200009d3 	.word	0x200009d3

080025d0 <task_led_ctrl_color_state_fixed>:


void task_led_ctrl_color_state_fixed(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
    g_master_color_state = MASTER_COLOR_STATE_FIXED;
 80025d4:	4b05      	ldr	r3, [pc, #20]	; (80025ec <task_led_ctrl_color_state_fixed+0x1c>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	701a      	strb	r2, [r3, #0]
    g_led_color = COLORS_FIRST;
 80025da:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <task_led_ctrl_color_state_fixed+0x20>)
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	200009d3 	.word	0x200009d3
 80025f0:	20000085 	.word	0x20000085

080025f4 <task_led_ctrl_color_adjust>:
    g_led_color = COLORS_RED;
}


bool task_led_ctrl_color_adjust(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
    bool return_val = false;
 80025fa:	2300      	movs	r3, #0
 80025fc:	71fb      	strb	r3, [r7, #7]
    if (COLORS_LAST == g_led_color)
 80025fe:	4b0b      	ldr	r3, [pc, #44]	; (800262c <task_led_ctrl_color_adjust+0x38>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	2b15      	cmp	r3, #21
 8002604:	d105      	bne.n	8002612 <task_led_ctrl_color_adjust+0x1e>
    {
        g_led_color = COLORS_FIRST;
 8002606:	4b09      	ldr	r3, [pc, #36]	; (800262c <task_led_ctrl_color_adjust+0x38>)
 8002608:	2200      	movs	r2, #0
 800260a:	701a      	strb	r2, [r3, #0]
        return_val = true;
 800260c:	2301      	movs	r3, #1
 800260e:	71fb      	strb	r3, [r7, #7]
 8002610:	e005      	b.n	800261e <task_led_ctrl_color_adjust+0x2a>
    }
    else g_led_color = (all_colors_e) (g_led_color + 1);
 8002612:	4b06      	ldr	r3, [pc, #24]	; (800262c <task_led_ctrl_color_adjust+0x38>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	3301      	adds	r3, #1
 8002618:	b2da      	uxtb	r2, r3
 800261a:	4b04      	ldr	r3, [pc, #16]	; (800262c <task_led_ctrl_color_adjust+0x38>)
 800261c:	701a      	strb	r2, [r3, #0]
    return return_val;
 800261e:	79fb      	ldrb	r3, [r7, #7]
}
 8002620:	4618      	mov	r0, r3
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	20000085 	.word	0x20000085

08002630 <task_led_ctrl_color_hex>:
    return g_led_color;
}


color_hex_code_e task_led_ctrl_color_hex(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
    return g_color_hex_codes[g_led_color];
 8002634:	4b05      	ldr	r3, [pc, #20]	; (800264c <task_led_ctrl_color_hex+0x1c>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	461a      	mov	r2, r3
 800263a:	4b05      	ldr	r3, [pc, #20]	; (8002650 <task_led_ctrl_color_hex+0x20>)
 800263c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8002640:	4618      	mov	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	20000085 	.word	0x20000085
 8002650:	20000004 	.word	0x20000004

08002654 <task_led_ctrl_color_red_hex>:


uint8_t task_led_ctrl_color_red_hex(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	ed2d 8b02 	vpush	{d8}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
    return (((g_color_hex_codes[g_led_color] & 0xFF0000) >> 16) / current_monitor_ratio());
 800265e:	4b0f      	ldr	r3, [pc, #60]	; (800269c <task_led_ctrl_color_red_hex+0x48>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	461a      	mov	r2, r3
 8002664:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <task_led_ctrl_color_red_hex+0x4c>)
 8002666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800266a:	0c1b      	lsrs	r3, r3, #16
 800266c:	b2db      	uxtb	r3, r3
 800266e:	ee07 3a90 	vmov	s15, r3
 8002672:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8002676:	f7fe fbb9 	bl	8000dec <current_monitor_ratio>
 800267a:	eeb0 7a40 	vmov.f32	s14, s0
 800267e:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8002682:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002686:	edc7 7a01 	vstr	s15, [r7, #4]
 800268a:	793b      	ldrb	r3, [r7, #4]
 800268c:	b2db      	uxtb	r3, r3
}
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	ecbd 8b02 	vpop	{d8}
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000085 	.word	0x20000085
 80026a0:	20000004 	.word	0x20000004

080026a4 <task_led_ctrl_color_green_hex>:


uint8_t task_led_ctrl_color_green_hex(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	ed2d 8b02 	vpush	{d8}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
    return (((g_color_hex_codes[g_led_color] & 0x00FF00) >> 8) / current_monitor_ratio());
 80026ae:	4b0f      	ldr	r3, [pc, #60]	; (80026ec <task_led_ctrl_color_green_hex+0x48>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	461a      	mov	r2, r3
 80026b4:	4b0e      	ldr	r3, [pc, #56]	; (80026f0 <task_led_ctrl_color_green_hex+0x4c>)
 80026b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ba:	0a1b      	lsrs	r3, r3, #8
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	ee07 3a90 	vmov	s15, r3
 80026c2:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80026c6:	f7fe fb91 	bl	8000dec <current_monitor_ratio>
 80026ca:	eeb0 7a40 	vmov.f32	s14, s0
 80026ce:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80026d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026d6:	edc7 7a01 	vstr	s15, [r7, #4]
 80026da:	793b      	ldrb	r3, [r7, #4]
 80026dc:	b2db      	uxtb	r3, r3
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	ecbd 8b02 	vpop	{d8}
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	20000085 	.word	0x20000085
 80026f0:	20000004 	.word	0x20000004

080026f4 <task_led_ctrl_color_blue_hex>:


uint8_t task_led_ctrl_color_blue_hex(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	ed2d 8b02 	vpush	{d8}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
    return ((g_color_hex_codes[g_led_color] & 0x0000FF) / current_monitor_ratio());
 80026fe:	4b0e      	ldr	r3, [pc, #56]	; (8002738 <task_led_ctrl_color_blue_hex+0x44>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	4b0d      	ldr	r3, [pc, #52]	; (800273c <task_led_ctrl_color_blue_hex+0x48>)
 8002706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800270a:	b2db      	uxtb	r3, r3
 800270c:	ee07 3a90 	vmov	s15, r3
 8002710:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8002714:	f7fe fb6a 	bl	8000dec <current_monitor_ratio>
 8002718:	eeb0 7a40 	vmov.f32	s14, s0
 800271c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8002720:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002724:	edc7 7a01 	vstr	s15, [r7, #4]
 8002728:	793b      	ldrb	r3, [r7, #4]
 800272a:	b2db      	uxtb	r3, r3
}
 800272c:	4618      	mov	r0, r3
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	ecbd 8b02 	vpop	{d8}
 8002736:	bd80      	pop	{r7, pc}
 8002738:	20000085 	.word	0x20000085
 800273c:	20000004 	.word	0x20000004

08002740 <task_led_ctrl_color_random>:
    return g_color_hex_codes[color];
}


void task_led_ctrl_color_random(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
    all_colors_e color = (all_colors_e)(random_num(0, NUM_COLORS));
 8002746:	2116      	movs	r1, #22
 8002748:	2000      	movs	r0, #0
 800274a:	f008 fe4f 	bl	800b3ec <random_num>
 800274e:	4603      	mov	r3, r0
 8002750:	71fb      	strb	r3, [r7, #7]
    if (g_led_color == color)
 8002752:	4b0d      	ldr	r3, [pc, #52]	; (8002788 <task_led_ctrl_color_random+0x48>)
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	79fa      	ldrb	r2, [r7, #7]
 8002758:	429a      	cmp	r2, r3
 800275a:	d10e      	bne.n	800277a <task_led_ctrl_color_random+0x3a>
    {
        if ((COLORS_LAST) == color) g_led_color = (all_colors_e)(color - 1);
 800275c:	79fb      	ldrb	r3, [r7, #7]
 800275e:	2b15      	cmp	r3, #21
 8002760:	d105      	bne.n	800276e <task_led_ctrl_color_random+0x2e>
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	3b01      	subs	r3, #1
 8002766:	b2da      	uxtb	r2, r3
 8002768:	4b07      	ldr	r3, [pc, #28]	; (8002788 <task_led_ctrl_color_random+0x48>)
 800276a:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        g_led_color = color;
    }
}
 800276c:	e008      	b.n	8002780 <task_led_ctrl_color_random+0x40>
        else g_led_color = (all_colors_e)(color + 1);
 800276e:	79fb      	ldrb	r3, [r7, #7]
 8002770:	3301      	adds	r3, #1
 8002772:	b2da      	uxtb	r2, r3
 8002774:	4b04      	ldr	r3, [pc, #16]	; (8002788 <task_led_ctrl_color_random+0x48>)
 8002776:	701a      	strb	r2, [r3, #0]
}
 8002778:	e002      	b.n	8002780 <task_led_ctrl_color_random+0x40>
        g_led_color = color;
 800277a:	4a03      	ldr	r2, [pc, #12]	; (8002788 <task_led_ctrl_color_random+0x48>)
 800277c:	79fb      	ldrb	r3, [r7, #7]
 800277e:	7013      	strb	r3, [r2, #0]
}
 8002780:	bf00      	nop
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	20000085 	.word	0x20000085

0800278c <task_led_ctrl_speed>:
    g_led_state = LED_STATE_FIRST;
}


float task_led_ctrl_speed(void)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
    float speed_factor = 0.0;
 8002792:	f04f 0300 	mov.w	r3, #0
 8002796:	607b      	str	r3, [r7, #4]
    switch(g_led_speed)
 8002798:	4b17      	ldr	r3, [pc, #92]	; (80027f8 <task_led_ctrl_speed+0x6c>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b04      	cmp	r3, #4
 800279e:	d81f      	bhi.n	80027e0 <task_led_ctrl_speed+0x54>
 80027a0:	a201      	add	r2, pc, #4	; (adr r2, 80027a8 <task_led_ctrl_speed+0x1c>)
 80027a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a6:	bf00      	nop
 80027a8:	080027bd 	.word	0x080027bd
 80027ac:	080027c3 	.word	0x080027c3
 80027b0:	080027c9 	.word	0x080027c9
 80027b4:	080027d1 	.word	0x080027d1
 80027b8:	080027d9 	.word	0x080027d9
    {
        case LED_SPEED_10X:
            speed_factor = 10;
 80027bc:	4b0f      	ldr	r3, [pc, #60]	; (80027fc <task_led_ctrl_speed+0x70>)
 80027be:	607b      	str	r3, [r7, #4]
        break;
 80027c0:	e00f      	b.n	80027e2 <task_led_ctrl_speed+0x56>
        case LED_SPEED_5X:
            speed_factor = 5;
 80027c2:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <task_led_ctrl_speed+0x74>)
 80027c4:	607b      	str	r3, [r7, #4]
        break;
 80027c6:	e00c      	b.n	80027e2 <task_led_ctrl_speed+0x56>
//        case LED_SPEED_2X:
//            speed_factor = 2;
//        break;
        case LED_SPEED_1X:
            speed_factor = 1;
 80027c8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80027cc:	607b      	str	r3, [r7, #4]
        break;
 80027ce:	e008      	b.n	80027e2 <task_led_ctrl_speed+0x56>
        case LED_SPEED_0P5X:
            speed_factor = 0.5;
 80027d0:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80027d4:	607b      	str	r3, [r7, #4]
        break;
 80027d6:	e004      	b.n	80027e2 <task_led_ctrl_speed+0x56>
        case LED_SPEED_0P25X:
            speed_factor = 0.25;
 80027d8:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 80027dc:	607b      	str	r3, [r7, #4]
        break;
 80027de:	e000      	b.n	80027e2 <task_led_ctrl_speed+0x56>
        default:
        break;
 80027e0:	bf00      	nop
        case LED_SPEED_0P1X:
            speed_factor = 0.1;
        break;
        */
    }
    return speed_factor;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	ee07 3a90 	vmov	s15, r3
}
 80027e8:	eeb0 0a67 	vmov.f32	s0, s15
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	200009d1 	.word	0x200009d1
 80027fc:	41200000 	.word	0x41200000
 8002800:	40a00000 	.word	0x40a00000

08002804 <task_led_ctrl_speed_adjust>:


void task_led_ctrl_speed_adjust(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
    if (LED_SPEED_FIRST == g_led_speed) g_led_speed = LED_SPEED_LAST;
 8002808:	4b09      	ldr	r3, [pc, #36]	; (8002830 <task_led_ctrl_speed_adjust+0x2c>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d103      	bne.n	8002818 <task_led_ctrl_speed_adjust+0x14>
 8002810:	4b07      	ldr	r3, [pc, #28]	; (8002830 <task_led_ctrl_speed_adjust+0x2c>)
 8002812:	2204      	movs	r2, #4
 8002814:	701a      	strb	r2, [r3, #0]
    else g_led_speed = (led_speed_e) (g_led_speed - 1);
}
 8002816:	e005      	b.n	8002824 <task_led_ctrl_speed_adjust+0x20>
    else g_led_speed = (led_speed_e) (g_led_speed - 1);
 8002818:	4b05      	ldr	r3, [pc, #20]	; (8002830 <task_led_ctrl_speed_adjust+0x2c>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	3b01      	subs	r3, #1
 800281e:	b2da      	uxtb	r2, r3
 8002820:	4b03      	ldr	r3, [pc, #12]	; (8002830 <task_led_ctrl_speed_adjust+0x2c>)
 8002822:	701a      	strb	r2, [r3, #0]
}
 8002824:	bf00      	nop
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	200009d1 	.word	0x200009d1

08002834 <task_led_ctrl_speed_reset>:


void task_led_ctrl_speed_reset(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
    g_led_speed = LED_SPEED_1X;
 8002838:	4b03      	ldr	r3, [pc, #12]	; (8002848 <task_led_ctrl_speed_reset+0x14>)
 800283a:	2202      	movs	r2, #2
 800283c:	701a      	strb	r2, [r3, #0]
}
 800283e:	bf00      	nop
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	200009d1 	.word	0x200009d1

0800284c <task_led_ctrl_animate_iteration_reset>:
    return ((float)g_delay_in_animation_ms / task_led_ctrl_speed());
}


void task_led_ctrl_animate_iteration_reset(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
    g_animation_iterations = 0;
 8002850:	4b03      	ldr	r3, [pc, #12]	; (8002860 <task_led_ctrl_animate_iteration_reset+0x14>)
 8002852:	2200      	movs	r2, #0
 8002854:	701a      	strb	r2, [r3, #0]
}
 8002856:	bf00      	nop
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	200009d4 	.word	0x200009d4

08002864 <task_led_ctrl_animate_adjust_state>:


bool task_led_ctrl_animate_adjust_state(void)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
    bool return_val = false;
 800286a:	2300      	movs	r3, #0
 800286c:	71fb      	strb	r3, [r7, #7]
    if (LED_STATE_LAST == g_led_state)
 800286e:	4b0b      	ldr	r3, [pc, #44]	; (800289c <task_led_ctrl_animate_adjust_state+0x38>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b09      	cmp	r3, #9
 8002874:	d105      	bne.n	8002882 <task_led_ctrl_animate_adjust_state+0x1e>
    {
        g_led_state = LED_STATE_FIRST;
 8002876:	4b09      	ldr	r3, [pc, #36]	; (800289c <task_led_ctrl_animate_adjust_state+0x38>)
 8002878:	2200      	movs	r2, #0
 800287a:	701a      	strb	r2, [r3, #0]
        return_val = true;
 800287c:	2301      	movs	r3, #1
 800287e:	71fb      	strb	r3, [r7, #7]
 8002880:	e005      	b.n	800288e <task_led_ctrl_animate_adjust_state+0x2a>
    }
    else g_led_state = (led_state_e) (g_led_state + 1);
 8002882:	4b06      	ldr	r3, [pc, #24]	; (800289c <task_led_ctrl_animate_adjust_state+0x38>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	3301      	adds	r3, #1
 8002888:	b2da      	uxtb	r2, r3
 800288a:	4b04      	ldr	r3, [pc, #16]	; (800289c <task_led_ctrl_animate_adjust_state+0x38>)
 800288c:	701a      	strb	r2, [r3, #0]
    return return_val;
 800288e:	79fb      	ldrb	r3, [r7, #7]
}
 8002890:	4618      	mov	r0, r3
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	20000084 	.word	0x20000084

080028a0 <task_led_ctrl_animate_state_demo>:


void task_led_ctrl_animate_state_demo(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
    g_master_led_state = MASTER_LED_STATE_DEMO;
 80028a4:	4b05      	ldr	r3, [pc, #20]	; (80028bc <task_led_ctrl_animate_state_demo+0x1c>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	701a      	strb	r2, [r3, #0]
    g_animation_iterations = 0;
 80028aa:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <task_led_ctrl_animate_state_demo+0x20>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	701a      	strb	r2, [r3, #0]
}
 80028b0:	bf00      	nop
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	200009d0 	.word	0x200009d0
 80028c0:	200009d4 	.word	0x200009d4

080028c4 <task_led_ctrl_animate_state_fixed>:


void task_led_ctrl_animate_state_fixed(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
    g_master_led_state = MASTER_LED_STATE_FIXED;
 80028c8:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <task_led_ctrl_animate_state_fixed+0x20>)
 80028ca:	2201      	movs	r2, #1
 80028cc:	701a      	strb	r2, [r3, #0]
    g_led_state = LED_STATE_FIRST; // set first state
 80028ce:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <task_led_ctrl_animate_state_fixed+0x24>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	701a      	strb	r2, [r3, #0]
    g_animation_iterations = 0;
 80028d4:	4b05      	ldr	r3, [pc, #20]	; (80028ec <task_led_ctrl_animate_state_fixed+0x28>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	701a      	strb	r2, [r3, #0]
}
 80028da:	bf00      	nop
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	200009d0 	.word	0x200009d0
 80028e8:	20000084 	.word	0x20000084
 80028ec:	200009d4 	.word	0x200009d4

080028f0 <task_led_ctrl_animate_state>:


master_led_state_e task_led_ctrl_animate_state(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
    return g_master_led_state;
 80028f4:	4b03      	ldr	r3, [pc, #12]	; (8002904 <task_led_ctrl_animate_state+0x14>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	200009d0 	.word	0x200009d0

08002908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	6039      	str	r1, [r7, #0]
 8002912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002918:	2b00      	cmp	r3, #0
 800291a:	db0a      	blt.n	8002932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	b2da      	uxtb	r2, r3
 8002920:	490c      	ldr	r1, [pc, #48]	; (8002954 <__NVIC_SetPriority+0x4c>)
 8002922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002926:	0112      	lsls	r2, r2, #4
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	440b      	add	r3, r1
 800292c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002930:	e00a      	b.n	8002948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	b2da      	uxtb	r2, r3
 8002936:	4908      	ldr	r1, [pc, #32]	; (8002958 <__NVIC_SetPriority+0x50>)
 8002938:	79fb      	ldrb	r3, [r7, #7]
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	3b04      	subs	r3, #4
 8002940:	0112      	lsls	r2, r2, #4
 8002942:	b2d2      	uxtb	r2, r2
 8002944:	440b      	add	r3, r1
 8002946:	761a      	strb	r2, [r3, #24]
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	e000e100 	.word	0xe000e100
 8002958:	e000ed00 	.word	0xe000ed00

0800295c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002960:	4b05      	ldr	r3, [pc, #20]	; (8002978 <SysTick_Handler+0x1c>)
 8002962:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002964:	f001 fd10 	bl	8004388 <xTaskGetSchedulerState>
 8002968:	4603      	mov	r3, r0
 800296a:	2b01      	cmp	r3, #1
 800296c:	d001      	beq.n	8002972 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800296e:	f002 fc2b 	bl	80051c8 <xPortSysTickHandler>
  }
}
 8002972:	bf00      	nop
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	e000e010 	.word	0xe000e010

0800297c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002980:	2100      	movs	r1, #0
 8002982:	f06f 0004 	mvn.w	r0, #4
 8002986:	f7ff ffbf 	bl	8002908 <__NVIC_SetPriority>
#endif
}
 800298a:	bf00      	nop
 800298c:	bd80      	pop	{r7, pc}
	...

08002990 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002996:	f3ef 8305 	mrs	r3, IPSR
 800299a:	603b      	str	r3, [r7, #0]
  return(result);
 800299c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80029a2:	f06f 0305 	mvn.w	r3, #5
 80029a6:	607b      	str	r3, [r7, #4]
 80029a8:	e00c      	b.n	80029c4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80029aa:	4b0a      	ldr	r3, [pc, #40]	; (80029d4 <osKernelInitialize+0x44>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d105      	bne.n	80029be <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80029b2:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <osKernelInitialize+0x44>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80029b8:	2300      	movs	r3, #0
 80029ba:	607b      	str	r3, [r7, #4]
 80029bc:	e002      	b.n	80029c4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80029be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80029c4:	687b      	ldr	r3, [r7, #4]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	200009d8 	.word	0x200009d8

080029d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029de:	f3ef 8305 	mrs	r3, IPSR
 80029e2:	603b      	str	r3, [r7, #0]
  return(result);
 80029e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80029ea:	f06f 0305 	mvn.w	r3, #5
 80029ee:	607b      	str	r3, [r7, #4]
 80029f0:	e010      	b.n	8002a14 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80029f2:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <osKernelStart+0x48>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d109      	bne.n	8002a0e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80029fa:	f7ff ffbf 	bl	800297c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80029fe:	4b08      	ldr	r3, [pc, #32]	; (8002a20 <osKernelStart+0x48>)
 8002a00:	2202      	movs	r2, #2
 8002a02:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002a04:	f001 f866 	bl	8003ad4 <vTaskStartScheduler>
      stat = osOK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	607b      	str	r3, [r7, #4]
 8002a0c:	e002      	b.n	8002a14 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002a0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002a14:	687b      	ldr	r3, [r7, #4]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	200009d8 	.word	0x200009d8

08002a24 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08e      	sub	sp, #56	; 0x38
 8002a28:	af04      	add	r7, sp, #16
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002a30:	2300      	movs	r3, #0
 8002a32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a34:	f3ef 8305 	mrs	r3, IPSR
 8002a38:	617b      	str	r3, [r7, #20]
  return(result);
 8002a3a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d17e      	bne.n	8002b3e <osThreadNew+0x11a>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d07b      	beq.n	8002b3e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002a46:	2380      	movs	r3, #128	; 0x80
 8002a48:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002a4a:	2318      	movs	r3, #24
 8002a4c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002a52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a56:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d045      	beq.n	8002aea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <osThreadNew+0x48>
        name = attr->name;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d002      	beq.n	8002a7a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d008      	beq.n	8002a92 <osThreadNew+0x6e>
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	2b38      	cmp	r3, #56	; 0x38
 8002a84:	d805      	bhi.n	8002a92 <osThreadNew+0x6e>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <osThreadNew+0x72>
        return (NULL);
 8002a92:	2300      	movs	r3, #0
 8002a94:	e054      	b.n	8002b40 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	089b      	lsrs	r3, r3, #2
 8002aa4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00e      	beq.n	8002acc <osThreadNew+0xa8>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	2b5b      	cmp	r3, #91	; 0x5b
 8002ab4:	d90a      	bls.n	8002acc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d006      	beq.n	8002acc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d002      	beq.n	8002acc <osThreadNew+0xa8>
        mem = 1;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	61bb      	str	r3, [r7, #24]
 8002aca:	e010      	b.n	8002aee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10c      	bne.n	8002aee <osThreadNew+0xca>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d108      	bne.n	8002aee <osThreadNew+0xca>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d104      	bne.n	8002aee <osThreadNew+0xca>
          mem = 0;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	61bb      	str	r3, [r7, #24]
 8002ae8:	e001      	b.n	8002aee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002aea:	2300      	movs	r3, #0
 8002aec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d110      	bne.n	8002b16 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002afc:	9202      	str	r2, [sp, #8]
 8002afe:	9301      	str	r3, [sp, #4]
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	6a3a      	ldr	r2, [r7, #32]
 8002b08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 fe0c 	bl	8003728 <xTaskCreateStatic>
 8002b10:	4603      	mov	r3, r0
 8002b12:	613b      	str	r3, [r7, #16]
 8002b14:	e013      	b.n	8002b3e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d110      	bne.n	8002b3e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002b1c:	6a3b      	ldr	r3, [r7, #32]
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	f107 0310 	add.w	r3, r7, #16
 8002b24:	9301      	str	r3, [sp, #4]
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 fe57 	bl	80037e2 <xTaskCreate>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d001      	beq.n	8002b3e <osThreadNew+0x11a>
            hTask = NULL;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002b3e:	693b      	ldr	r3, [r7, #16]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3728      	adds	r7, #40	; 0x28
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b50:	f3ef 8305 	mrs	r3, IPSR
 8002b54:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b56:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <osDelay+0x1c>
    stat = osErrorISR;
 8002b5c:	f06f 0305 	mvn.w	r3, #5
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	e007      	b.n	8002b74 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002b64:	2300      	movs	r3, #0
 8002b66:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d002      	beq.n	8002b74 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 ff7c 	bl	8003a6c <vTaskDelay>
    }
  }

  return (stat);
 8002b74:	68fb      	ldr	r3, [r7, #12]
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
	...

08002b80 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	4a07      	ldr	r2, [pc, #28]	; (8002bac <vApplicationGetIdleTaskMemory+0x2c>)
 8002b90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	4a06      	ldr	r2, [pc, #24]	; (8002bb0 <vApplicationGetIdleTaskMemory+0x30>)
 8002b96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2280      	movs	r2, #128	; 0x80
 8002b9c:	601a      	str	r2, [r3, #0]
}
 8002b9e:	bf00      	nop
 8002ba0:	3714      	adds	r7, #20
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	200009dc 	.word	0x200009dc
 8002bb0:	20000a38 	.word	0x20000a38

08002bb4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4a07      	ldr	r2, [pc, #28]	; (8002be0 <vApplicationGetTimerTaskMemory+0x2c>)
 8002bc4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	4a06      	ldr	r2, [pc, #24]	; (8002be4 <vApplicationGetTimerTaskMemory+0x30>)
 8002bca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bd2:	601a      	str	r2, [r3, #0]
}
 8002bd4:	bf00      	nop
 8002bd6:	3714      	adds	r7, #20
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	20000c38 	.word	0x20000c38
 8002be4:	20000c94 	.word	0x20000c94

08002be8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f103 0208 	add.w	r2, r3, #8
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f103 0208 	add.w	r2, r3, #8
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f103 0208 	add.w	r2, r3, #8
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c42:	b480      	push	{r7}
 8002c44:	b085      	sub	sp, #20
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
 8002c4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	1c5a      	adds	r2, r3, #1
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	601a      	str	r2, [r3, #0]
}
 8002c7e:	bf00      	nop
 8002c80:	3714      	adds	r7, #20
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b085      	sub	sp, #20
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ca0:	d103      	bne.n	8002caa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	e00c      	b.n	8002cc4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3308      	adds	r3, #8
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	e002      	b.n	8002cb8 <vListInsert+0x2e>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68ba      	ldr	r2, [r7, #8]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d2f6      	bcs.n	8002cb2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	1c5a      	adds	r2, r3, #1
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	601a      	str	r2, [r3, #0]
}
 8002cf0:	bf00      	nop
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	6892      	ldr	r2, [r2, #8]
 8002d12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6852      	ldr	r2, [r2, #4]
 8002d1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d103      	bne.n	8002d30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	1e5a      	subs	r2, r3, #1
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3714      	adds	r7, #20
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10a      	bne.n	8002d7a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d68:	f383 8811 	msr	BASEPRI, r3
 8002d6c:	f3bf 8f6f 	isb	sy
 8002d70:	f3bf 8f4f 	dsb	sy
 8002d74:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002d76:	bf00      	nop
 8002d78:	e7fe      	b.n	8002d78 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002d7a:	f002 f993 	bl	80050a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d86:	68f9      	ldr	r1, [r7, #12]
 8002d88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d8a:	fb01 f303 	mul.w	r3, r1, r3
 8002d8e:	441a      	add	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002daa:	3b01      	subs	r3, #1
 8002dac:	68f9      	ldr	r1, [r7, #12]
 8002dae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002db0:	fb01 f303 	mul.w	r3, r1, r3
 8002db4:	441a      	add	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	22ff      	movs	r2, #255	; 0xff
 8002dbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	22ff      	movs	r2, #255	; 0xff
 8002dc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d114      	bne.n	8002dfa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d01a      	beq.n	8002e0e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	3310      	adds	r3, #16
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f001 f915 	bl	800400c <xTaskRemoveFromEventList>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d012      	beq.n	8002e0e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002de8:	4b0c      	ldr	r3, [pc, #48]	; (8002e1c <xQueueGenericReset+0xcc>)
 8002dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	f3bf 8f4f 	dsb	sy
 8002df4:	f3bf 8f6f 	isb	sy
 8002df8:	e009      	b.n	8002e0e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	3310      	adds	r3, #16
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff fef2 	bl	8002be8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	3324      	adds	r3, #36	; 0x24
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff feed 	bl	8002be8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002e0e:	f002 f979 	bl	8005104 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002e12:	2301      	movs	r3, #1
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	e000ed04 	.word	0xe000ed04

08002e20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08e      	sub	sp, #56	; 0x38
 8002e24:	af02      	add	r7, sp, #8
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
 8002e2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d10a      	bne.n	8002e4a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e38:	f383 8811 	msr	BASEPRI, r3
 8002e3c:	f3bf 8f6f 	isb	sy
 8002e40:	f3bf 8f4f 	dsb	sy
 8002e44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e46:	bf00      	nop
 8002e48:	e7fe      	b.n	8002e48 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10a      	bne.n	8002e66 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e54:	f383 8811 	msr	BASEPRI, r3
 8002e58:	f3bf 8f6f 	isb	sy
 8002e5c:	f3bf 8f4f 	dsb	sy
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e62:	bf00      	nop
 8002e64:	e7fe      	b.n	8002e64 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d002      	beq.n	8002e72 <xQueueGenericCreateStatic+0x52>
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <xQueueGenericCreateStatic+0x56>
 8002e72:	2301      	movs	r3, #1
 8002e74:	e000      	b.n	8002e78 <xQueueGenericCreateStatic+0x58>
 8002e76:	2300      	movs	r3, #0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10a      	bne.n	8002e92 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e80:	f383 8811 	msr	BASEPRI, r3
 8002e84:	f3bf 8f6f 	isb	sy
 8002e88:	f3bf 8f4f 	dsb	sy
 8002e8c:	623b      	str	r3, [r7, #32]
}
 8002e8e:	bf00      	nop
 8002e90:	e7fe      	b.n	8002e90 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d102      	bne.n	8002e9e <xQueueGenericCreateStatic+0x7e>
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <xQueueGenericCreateStatic+0x82>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e000      	b.n	8002ea4 <xQueueGenericCreateStatic+0x84>
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10a      	bne.n	8002ebe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eac:	f383 8811 	msr	BASEPRI, r3
 8002eb0:	f3bf 8f6f 	isb	sy
 8002eb4:	f3bf 8f4f 	dsb	sy
 8002eb8:	61fb      	str	r3, [r7, #28]
}
 8002eba:	bf00      	nop
 8002ebc:	e7fe      	b.n	8002ebc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002ebe:	2350      	movs	r3, #80	; 0x50
 8002ec0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2b50      	cmp	r3, #80	; 0x50
 8002ec6:	d00a      	beq.n	8002ede <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ecc:	f383 8811 	msr	BASEPRI, r3
 8002ed0:	f3bf 8f6f 	isb	sy
 8002ed4:	f3bf 8f4f 	dsb	sy
 8002ed8:	61bb      	str	r3, [r7, #24]
}
 8002eda:	bf00      	nop
 8002edc:	e7fe      	b.n	8002edc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002ede:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00d      	beq.n	8002f06 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ef2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef8:	9300      	str	r3, [sp, #0]
 8002efa:	4613      	mov	r3, r2
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	68b9      	ldr	r1, [r7, #8]
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 f805 	bl	8002f10 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3730      	adds	r7, #48	; 0x30
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
 8002f1c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d103      	bne.n	8002f2c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	e002      	b.n	8002f32 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f3e:	2101      	movs	r1, #1
 8002f40:	69b8      	ldr	r0, [r7, #24]
 8002f42:	f7ff ff05 	bl	8002d50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	78fa      	ldrb	r2, [r7, #3]
 8002f4a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002f4e:	bf00      	nop
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
	...

08002f58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b08e      	sub	sp, #56	; 0x38
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
 8002f64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002f66:	2300      	movs	r3, #0
 8002f68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d10a      	bne.n	8002f8a <xQueueGenericSend+0x32>
	__asm volatile
 8002f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f78:	f383 8811 	msr	BASEPRI, r3
 8002f7c:	f3bf 8f6f 	isb	sy
 8002f80:	f3bf 8f4f 	dsb	sy
 8002f84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002f86:	bf00      	nop
 8002f88:	e7fe      	b.n	8002f88 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d103      	bne.n	8002f98 <xQueueGenericSend+0x40>
 8002f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <xQueueGenericSend+0x44>
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e000      	b.n	8002f9e <xQueueGenericSend+0x46>
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10a      	bne.n	8002fb8 <xQueueGenericSend+0x60>
	__asm volatile
 8002fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa6:	f383 8811 	msr	BASEPRI, r3
 8002faa:	f3bf 8f6f 	isb	sy
 8002fae:	f3bf 8f4f 	dsb	sy
 8002fb2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002fb4:	bf00      	nop
 8002fb6:	e7fe      	b.n	8002fb6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d103      	bne.n	8002fc6 <xQueueGenericSend+0x6e>
 8002fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d101      	bne.n	8002fca <xQueueGenericSend+0x72>
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e000      	b.n	8002fcc <xQueueGenericSend+0x74>
 8002fca:	2300      	movs	r3, #0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10a      	bne.n	8002fe6 <xQueueGenericSend+0x8e>
	__asm volatile
 8002fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd4:	f383 8811 	msr	BASEPRI, r3
 8002fd8:	f3bf 8f6f 	isb	sy
 8002fdc:	f3bf 8f4f 	dsb	sy
 8002fe0:	623b      	str	r3, [r7, #32]
}
 8002fe2:	bf00      	nop
 8002fe4:	e7fe      	b.n	8002fe4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002fe6:	f001 f9cf 	bl	8004388 <xTaskGetSchedulerState>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d102      	bne.n	8002ff6 <xQueueGenericSend+0x9e>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <xQueueGenericSend+0xa2>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <xQueueGenericSend+0xa4>
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10a      	bne.n	8003016 <xQueueGenericSend+0xbe>
	__asm volatile
 8003000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003004:	f383 8811 	msr	BASEPRI, r3
 8003008:	f3bf 8f6f 	isb	sy
 800300c:	f3bf 8f4f 	dsb	sy
 8003010:	61fb      	str	r3, [r7, #28]
}
 8003012:	bf00      	nop
 8003014:	e7fe      	b.n	8003014 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003016:	f002 f845 	bl	80050a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800301a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800301e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003022:	429a      	cmp	r2, r3
 8003024:	d302      	bcc.n	800302c <xQueueGenericSend+0xd4>
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	2b02      	cmp	r3, #2
 800302a:	d129      	bne.n	8003080 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	68b9      	ldr	r1, [r7, #8]
 8003030:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003032:	f000 fa0b 	bl	800344c <prvCopyDataToQueue>
 8003036:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	2b00      	cmp	r3, #0
 800303e:	d010      	beq.n	8003062 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003042:	3324      	adds	r3, #36	; 0x24
 8003044:	4618      	mov	r0, r3
 8003046:	f000 ffe1 	bl	800400c <xTaskRemoveFromEventList>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d013      	beq.n	8003078 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003050:	4b3f      	ldr	r3, [pc, #252]	; (8003150 <xQueueGenericSend+0x1f8>)
 8003052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	f3bf 8f4f 	dsb	sy
 800305c:	f3bf 8f6f 	isb	sy
 8003060:	e00a      	b.n	8003078 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003064:	2b00      	cmp	r3, #0
 8003066:	d007      	beq.n	8003078 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003068:	4b39      	ldr	r3, [pc, #228]	; (8003150 <xQueueGenericSend+0x1f8>)
 800306a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	f3bf 8f4f 	dsb	sy
 8003074:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003078:	f002 f844 	bl	8005104 <vPortExitCritical>
				return pdPASS;
 800307c:	2301      	movs	r3, #1
 800307e:	e063      	b.n	8003148 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d103      	bne.n	800308e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003086:	f002 f83d 	bl	8005104 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800308a:	2300      	movs	r3, #0
 800308c:	e05c      	b.n	8003148 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800308e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003090:	2b00      	cmp	r3, #0
 8003092:	d106      	bne.n	80030a2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003094:	f107 0314 	add.w	r3, r7, #20
 8003098:	4618      	mov	r0, r3
 800309a:	f001 f81b 	bl	80040d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800309e:	2301      	movs	r3, #1
 80030a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030a2:	f002 f82f 	bl	8005104 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030a6:	f000 fd7b 	bl	8003ba0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030aa:	f001 fffb 	bl	80050a4 <vPortEnterCritical>
 80030ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030b4:	b25b      	sxtb	r3, r3
 80030b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030ba:	d103      	bne.n	80030c4 <xQueueGenericSend+0x16c>
 80030bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030ca:	b25b      	sxtb	r3, r3
 80030cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030d0:	d103      	bne.n	80030da <xQueueGenericSend+0x182>
 80030d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030da:	f002 f813 	bl	8005104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030de:	1d3a      	adds	r2, r7, #4
 80030e0:	f107 0314 	add.w	r3, r7, #20
 80030e4:	4611      	mov	r1, r2
 80030e6:	4618      	mov	r0, r3
 80030e8:	f001 f80a 	bl	8004100 <xTaskCheckForTimeOut>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d124      	bne.n	800313c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80030f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030f4:	f000 faa2 	bl	800363c <prvIsQueueFull>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d018      	beq.n	8003130 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80030fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003100:	3310      	adds	r3, #16
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	4611      	mov	r1, r2
 8003106:	4618      	mov	r0, r3
 8003108:	f000 ff30 	bl	8003f6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800310c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800310e:	f000 fa2d 	bl	800356c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003112:	f000 fd53 	bl	8003bbc <xTaskResumeAll>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	f47f af7c 	bne.w	8003016 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800311e:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <xQueueGenericSend+0x1f8>)
 8003120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	f3bf 8f4f 	dsb	sy
 800312a:	f3bf 8f6f 	isb	sy
 800312e:	e772      	b.n	8003016 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003130:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003132:	f000 fa1b 	bl	800356c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003136:	f000 fd41 	bl	8003bbc <xTaskResumeAll>
 800313a:	e76c      	b.n	8003016 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800313c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800313e:	f000 fa15 	bl	800356c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003142:	f000 fd3b 	bl	8003bbc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003146:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003148:	4618      	mov	r0, r3
 800314a:	3738      	adds	r7, #56	; 0x38
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	e000ed04 	.word	0xe000ed04

08003154 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b090      	sub	sp, #64	; 0x40
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
 8003160:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10a      	bne.n	8003182 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800316c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003170:	f383 8811 	msr	BASEPRI, r3
 8003174:	f3bf 8f6f 	isb	sy
 8003178:	f3bf 8f4f 	dsb	sy
 800317c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800317e:	bf00      	nop
 8003180:	e7fe      	b.n	8003180 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d103      	bne.n	8003190 <xQueueGenericSendFromISR+0x3c>
 8003188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800318a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <xQueueGenericSendFromISR+0x40>
 8003190:	2301      	movs	r3, #1
 8003192:	e000      	b.n	8003196 <xQueueGenericSendFromISR+0x42>
 8003194:	2300      	movs	r3, #0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10a      	bne.n	80031b0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800319a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800319e:	f383 8811 	msr	BASEPRI, r3
 80031a2:	f3bf 8f6f 	isb	sy
 80031a6:	f3bf 8f4f 	dsb	sy
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80031ac:	bf00      	nop
 80031ae:	e7fe      	b.n	80031ae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d103      	bne.n	80031be <xQueueGenericSendFromISR+0x6a>
 80031b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <xQueueGenericSendFromISR+0x6e>
 80031be:	2301      	movs	r3, #1
 80031c0:	e000      	b.n	80031c4 <xQueueGenericSendFromISR+0x70>
 80031c2:	2300      	movs	r3, #0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10a      	bne.n	80031de <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80031c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031cc:	f383 8811 	msr	BASEPRI, r3
 80031d0:	f3bf 8f6f 	isb	sy
 80031d4:	f3bf 8f4f 	dsb	sy
 80031d8:	623b      	str	r3, [r7, #32]
}
 80031da:	bf00      	nop
 80031dc:	e7fe      	b.n	80031dc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031de:	f002 f843 	bl	8005268 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80031e2:	f3ef 8211 	mrs	r2, BASEPRI
 80031e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ea:	f383 8811 	msr	BASEPRI, r3
 80031ee:	f3bf 8f6f 	isb	sy
 80031f2:	f3bf 8f4f 	dsb	sy
 80031f6:	61fa      	str	r2, [r7, #28]
 80031f8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80031fa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80031fc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80031fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003206:	429a      	cmp	r2, r3
 8003208:	d302      	bcc.n	8003210 <xQueueGenericSendFromISR+0xbc>
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	2b02      	cmp	r3, #2
 800320e:	d12f      	bne.n	8003270 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003212:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800321a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	68b9      	ldr	r1, [r7, #8]
 8003224:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003226:	f000 f911 	bl	800344c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800322a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800322e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003232:	d112      	bne.n	800325a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	2b00      	cmp	r3, #0
 800323a:	d016      	beq.n	800326a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800323c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800323e:	3324      	adds	r3, #36	; 0x24
 8003240:	4618      	mov	r0, r3
 8003242:	f000 fee3 	bl	800400c <xTaskRemoveFromEventList>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00e      	beq.n	800326a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00b      	beq.n	800326a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2201      	movs	r2, #1
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	e007      	b.n	800326a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800325a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800325e:	3301      	adds	r3, #1
 8003260:	b2db      	uxtb	r3, r3
 8003262:	b25a      	sxtb	r2, r3
 8003264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003266:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800326a:	2301      	movs	r3, #1
 800326c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800326e:	e001      	b.n	8003274 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003270:	2300      	movs	r3, #0
 8003272:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003276:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800327e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003282:	4618      	mov	r0, r3
 8003284:	3740      	adds	r7, #64	; 0x40
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
	...

0800328c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b08c      	sub	sp, #48	; 0x30
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003298:	2300      	movs	r3, #0
 800329a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80032a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10a      	bne.n	80032bc <xQueueReceive+0x30>
	__asm volatile
 80032a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032aa:	f383 8811 	msr	BASEPRI, r3
 80032ae:	f3bf 8f6f 	isb	sy
 80032b2:	f3bf 8f4f 	dsb	sy
 80032b6:	623b      	str	r3, [r7, #32]
}
 80032b8:	bf00      	nop
 80032ba:	e7fe      	b.n	80032ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d103      	bne.n	80032ca <xQueueReceive+0x3e>
 80032c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <xQueueReceive+0x42>
 80032ca:	2301      	movs	r3, #1
 80032cc:	e000      	b.n	80032d0 <xQueueReceive+0x44>
 80032ce:	2300      	movs	r3, #0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10a      	bne.n	80032ea <xQueueReceive+0x5e>
	__asm volatile
 80032d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d8:	f383 8811 	msr	BASEPRI, r3
 80032dc:	f3bf 8f6f 	isb	sy
 80032e0:	f3bf 8f4f 	dsb	sy
 80032e4:	61fb      	str	r3, [r7, #28]
}
 80032e6:	bf00      	nop
 80032e8:	e7fe      	b.n	80032e8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032ea:	f001 f84d 	bl	8004388 <xTaskGetSchedulerState>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d102      	bne.n	80032fa <xQueueReceive+0x6e>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <xQueueReceive+0x72>
 80032fa:	2301      	movs	r3, #1
 80032fc:	e000      	b.n	8003300 <xQueueReceive+0x74>
 80032fe:	2300      	movs	r3, #0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10a      	bne.n	800331a <xQueueReceive+0x8e>
	__asm volatile
 8003304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003308:	f383 8811 	msr	BASEPRI, r3
 800330c:	f3bf 8f6f 	isb	sy
 8003310:	f3bf 8f4f 	dsb	sy
 8003314:	61bb      	str	r3, [r7, #24]
}
 8003316:	bf00      	nop
 8003318:	e7fe      	b.n	8003318 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800331a:	f001 fec3 	bl	80050a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800331e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003322:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	2b00      	cmp	r3, #0
 8003328:	d01f      	beq.n	800336a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800332a:	68b9      	ldr	r1, [r7, #8]
 800332c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800332e:	f000 f8f7 	bl	8003520 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003334:	1e5a      	subs	r2, r3, #1
 8003336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003338:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800333a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00f      	beq.n	8003362 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003344:	3310      	adds	r3, #16
 8003346:	4618      	mov	r0, r3
 8003348:	f000 fe60 	bl	800400c <xTaskRemoveFromEventList>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d007      	beq.n	8003362 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003352:	4b3d      	ldr	r3, [pc, #244]	; (8003448 <xQueueReceive+0x1bc>)
 8003354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	f3bf 8f4f 	dsb	sy
 800335e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003362:	f001 fecf 	bl	8005104 <vPortExitCritical>
				return pdPASS;
 8003366:	2301      	movs	r3, #1
 8003368:	e069      	b.n	800343e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d103      	bne.n	8003378 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003370:	f001 fec8 	bl	8005104 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003374:	2300      	movs	r3, #0
 8003376:	e062      	b.n	800343e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337a:	2b00      	cmp	r3, #0
 800337c:	d106      	bne.n	800338c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800337e:	f107 0310 	add.w	r3, r7, #16
 8003382:	4618      	mov	r0, r3
 8003384:	f000 fea6 	bl	80040d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003388:	2301      	movs	r3, #1
 800338a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800338c:	f001 feba 	bl	8005104 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003390:	f000 fc06 	bl	8003ba0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003394:	f001 fe86 	bl	80050a4 <vPortEnterCritical>
 8003398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800339e:	b25b      	sxtb	r3, r3
 80033a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033a4:	d103      	bne.n	80033ae <xQueueReceive+0x122>
 80033a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033b4:	b25b      	sxtb	r3, r3
 80033b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033ba:	d103      	bne.n	80033c4 <xQueueReceive+0x138>
 80033bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033c4:	f001 fe9e 	bl	8005104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033c8:	1d3a      	adds	r2, r7, #4
 80033ca:	f107 0310 	add.w	r3, r7, #16
 80033ce:	4611      	mov	r1, r2
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 fe95 	bl	8004100 <xTaskCheckForTimeOut>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d123      	bne.n	8003424 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033de:	f000 f917 	bl	8003610 <prvIsQueueEmpty>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d017      	beq.n	8003418 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80033e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ea:	3324      	adds	r3, #36	; 0x24
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	4611      	mov	r1, r2
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 fdbb 	bl	8003f6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80033f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033f8:	f000 f8b8 	bl	800356c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80033fc:	f000 fbde 	bl	8003bbc <xTaskResumeAll>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d189      	bne.n	800331a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003406:	4b10      	ldr	r3, [pc, #64]	; (8003448 <xQueueReceive+0x1bc>)
 8003408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	f3bf 8f4f 	dsb	sy
 8003412:	f3bf 8f6f 	isb	sy
 8003416:	e780      	b.n	800331a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003418:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800341a:	f000 f8a7 	bl	800356c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800341e:	f000 fbcd 	bl	8003bbc <xTaskResumeAll>
 8003422:	e77a      	b.n	800331a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003424:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003426:	f000 f8a1 	bl	800356c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800342a:	f000 fbc7 	bl	8003bbc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800342e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003430:	f000 f8ee 	bl	8003610 <prvIsQueueEmpty>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	f43f af6f 	beq.w	800331a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800343c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800343e:	4618      	mov	r0, r3
 8003440:	3730      	adds	r7, #48	; 0x30
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	e000ed04 	.word	0xe000ed04

0800344c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003458:	2300      	movs	r3, #0
 800345a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003460:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10d      	bne.n	8003486 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d14d      	bne.n	800350e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	4618      	mov	r0, r3
 8003478:	f000 ffa4 	bl	80043c4 <xTaskPriorityDisinherit>
 800347c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	e043      	b.n	800350e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d119      	bne.n	80034c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6858      	ldr	r0, [r3, #4]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	461a      	mov	r2, r3
 8003496:	68b9      	ldr	r1, [r7, #8]
 8003498:	f008 fa71 	bl	800b97e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	441a      	add	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d32b      	bcc.n	800350e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	605a      	str	r2, [r3, #4]
 80034be:	e026      	b.n	800350e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	68d8      	ldr	r0, [r3, #12]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c8:	461a      	mov	r2, r3
 80034ca:	68b9      	ldr	r1, [r7, #8]
 80034cc:	f008 fa57 	bl	800b97e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	68da      	ldr	r2, [r3, #12]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	425b      	negs	r3, r3
 80034da:	441a      	add	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	68da      	ldr	r2, [r3, #12]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d207      	bcs.n	80034fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f4:	425b      	negs	r3, r3
 80034f6:	441a      	add	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d105      	bne.n	800350e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d002      	beq.n	800350e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	3b01      	subs	r3, #1
 800350c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1c5a      	adds	r2, r3, #1
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003516:	697b      	ldr	r3, [r7, #20]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3718      	adds	r7, #24
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	2b00      	cmp	r3, #0
 8003530:	d018      	beq.n	8003564 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	441a      	add	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	68da      	ldr	r2, [r3, #12]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	429a      	cmp	r2, r3
 800354a:	d303      	bcc.n	8003554 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68d9      	ldr	r1, [r3, #12]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	461a      	mov	r2, r3
 800355e:	6838      	ldr	r0, [r7, #0]
 8003560:	f008 fa0d 	bl	800b97e <memcpy>
	}
}
 8003564:	bf00      	nop
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003574:	f001 fd96 	bl	80050a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800357e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003580:	e011      	b.n	80035a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003586:	2b00      	cmp	r3, #0
 8003588:	d012      	beq.n	80035b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	3324      	adds	r3, #36	; 0x24
 800358e:	4618      	mov	r0, r3
 8003590:	f000 fd3c 	bl	800400c <xTaskRemoveFromEventList>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800359a:	f000 fe13 	bl	80041c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800359e:	7bfb      	ldrb	r3, [r7, #15]
 80035a0:	3b01      	subs	r3, #1
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80035a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	dce9      	bgt.n	8003582 <prvUnlockQueue+0x16>
 80035ae:	e000      	b.n	80035b2 <prvUnlockQueue+0x46>
					break;
 80035b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	22ff      	movs	r2, #255	; 0xff
 80035b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80035ba:	f001 fda3 	bl	8005104 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80035be:	f001 fd71 	bl	80050a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80035ca:	e011      	b.n	80035f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d012      	beq.n	80035fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3310      	adds	r3, #16
 80035d8:	4618      	mov	r0, r3
 80035da:	f000 fd17 	bl	800400c <xTaskRemoveFromEventList>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80035e4:	f000 fdee 	bl	80041c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80035e8:	7bbb      	ldrb	r3, [r7, #14]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80035f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	dce9      	bgt.n	80035cc <prvUnlockQueue+0x60>
 80035f8:	e000      	b.n	80035fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80035fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	22ff      	movs	r2, #255	; 0xff
 8003600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003604:	f001 fd7e 	bl	8005104 <vPortExitCritical>
}
 8003608:	bf00      	nop
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003618:	f001 fd44 	bl	80050a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003620:	2b00      	cmp	r3, #0
 8003622:	d102      	bne.n	800362a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003624:	2301      	movs	r3, #1
 8003626:	60fb      	str	r3, [r7, #12]
 8003628:	e001      	b.n	800362e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800362a:	2300      	movs	r3, #0
 800362c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800362e:	f001 fd69 	bl	8005104 <vPortExitCritical>

	return xReturn;
 8003632:	68fb      	ldr	r3, [r7, #12]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003644:	f001 fd2e 	bl	80050a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003650:	429a      	cmp	r2, r3
 8003652:	d102      	bne.n	800365a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003654:	2301      	movs	r3, #1
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	e001      	b.n	800365e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800365a:	2300      	movs	r3, #0
 800365c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800365e:	f001 fd51 	bl	8005104 <vPortExitCritical>

	return xReturn;
 8003662:	68fb      	ldr	r3, [r7, #12]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003676:	2300      	movs	r3, #0
 8003678:	60fb      	str	r3, [r7, #12]
 800367a:	e014      	b.n	80036a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800367c:	4a0f      	ldr	r2, [pc, #60]	; (80036bc <vQueueAddToRegistry+0x50>)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10b      	bne.n	80036a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003688:	490c      	ldr	r1, [pc, #48]	; (80036bc <vQueueAddToRegistry+0x50>)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003692:	4a0a      	ldr	r2, [pc, #40]	; (80036bc <vQueueAddToRegistry+0x50>)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	4413      	add	r3, r2
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800369e:	e006      	b.n	80036ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	3301      	adds	r3, #1
 80036a4:	60fb      	str	r3, [r7, #12]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2b07      	cmp	r3, #7
 80036aa:	d9e7      	bls.n	800367c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80036ac:	bf00      	nop
 80036ae:	bf00      	nop
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	20001094 	.word	0x20001094

080036c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80036d0:	f001 fce8 	bl	80050a4 <vPortEnterCritical>
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036da:	b25b      	sxtb	r3, r3
 80036dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036e0:	d103      	bne.n	80036ea <vQueueWaitForMessageRestricted+0x2a>
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036f0:	b25b      	sxtb	r3, r3
 80036f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036f6:	d103      	bne.n	8003700 <vQueueWaitForMessageRestricted+0x40>
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003700:	f001 fd00 	bl	8005104 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003708:	2b00      	cmp	r3, #0
 800370a:	d106      	bne.n	800371a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	3324      	adds	r3, #36	; 0x24
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	68b9      	ldr	r1, [r7, #8]
 8003714:	4618      	mov	r0, r3
 8003716:	f000 fc4d 	bl	8003fb4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800371a:	6978      	ldr	r0, [r7, #20]
 800371c:	f7ff ff26 	bl	800356c <prvUnlockQueue>
	}
 8003720:	bf00      	nop
 8003722:	3718      	adds	r7, #24
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003728:	b580      	push	{r7, lr}
 800372a:	b08e      	sub	sp, #56	; 0x38
 800372c:	af04      	add	r7, sp, #16
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
 8003734:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003738:	2b00      	cmp	r3, #0
 800373a:	d10a      	bne.n	8003752 <xTaskCreateStatic+0x2a>
	__asm volatile
 800373c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003740:	f383 8811 	msr	BASEPRI, r3
 8003744:	f3bf 8f6f 	isb	sy
 8003748:	f3bf 8f4f 	dsb	sy
 800374c:	623b      	str	r3, [r7, #32]
}
 800374e:	bf00      	nop
 8003750:	e7fe      	b.n	8003750 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10a      	bne.n	800376e <xTaskCreateStatic+0x46>
	__asm volatile
 8003758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375c:	f383 8811 	msr	BASEPRI, r3
 8003760:	f3bf 8f6f 	isb	sy
 8003764:	f3bf 8f4f 	dsb	sy
 8003768:	61fb      	str	r3, [r7, #28]
}
 800376a:	bf00      	nop
 800376c:	e7fe      	b.n	800376c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800376e:	235c      	movs	r3, #92	; 0x5c
 8003770:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	2b5c      	cmp	r3, #92	; 0x5c
 8003776:	d00a      	beq.n	800378e <xTaskCreateStatic+0x66>
	__asm volatile
 8003778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377c:	f383 8811 	msr	BASEPRI, r3
 8003780:	f3bf 8f6f 	isb	sy
 8003784:	f3bf 8f4f 	dsb	sy
 8003788:	61bb      	str	r3, [r7, #24]
}
 800378a:	bf00      	nop
 800378c:	e7fe      	b.n	800378c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800378e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003792:	2b00      	cmp	r3, #0
 8003794:	d01e      	beq.n	80037d4 <xTaskCreateStatic+0xac>
 8003796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003798:	2b00      	cmp	r3, #0
 800379a:	d01b      	beq.n	80037d4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800379c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800379e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a8:	2202      	movs	r2, #2
 80037aa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80037ae:	2300      	movs	r3, #0
 80037b0:	9303      	str	r3, [sp, #12]
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	9302      	str	r3, [sp, #8]
 80037b6:	f107 0314 	add.w	r3, r7, #20
 80037ba:	9301      	str	r3, [sp, #4]
 80037bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	68b9      	ldr	r1, [r7, #8]
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 f850 	bl	800386c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037ce:	f000 f8dd 	bl	800398c <prvAddNewTaskToReadyList>
 80037d2:	e001      	b.n	80037d8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80037d4:	2300      	movs	r3, #0
 80037d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80037d8:	697b      	ldr	r3, [r7, #20]
	}
 80037da:	4618      	mov	r0, r3
 80037dc:	3728      	adds	r7, #40	; 0x28
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b08c      	sub	sp, #48	; 0x30
 80037e6:	af04      	add	r7, sp, #16
 80037e8:	60f8      	str	r0, [r7, #12]
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	603b      	str	r3, [r7, #0]
 80037ee:	4613      	mov	r3, r2
 80037f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80037f2:	88fb      	ldrh	r3, [r7, #6]
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4618      	mov	r0, r3
 80037f8:	f001 fd76 	bl	80052e8 <pvPortMalloc>
 80037fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00e      	beq.n	8003822 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003804:	205c      	movs	r0, #92	; 0x5c
 8003806:	f001 fd6f 	bl	80052e8 <pvPortMalloc>
 800380a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	631a      	str	r2, [r3, #48]	; 0x30
 8003818:	e005      	b.n	8003826 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800381a:	6978      	ldr	r0, [r7, #20]
 800381c:	f001 fe30 	bl	8005480 <vPortFree>
 8003820:	e001      	b.n	8003826 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003822:	2300      	movs	r3, #0
 8003824:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d017      	beq.n	800385c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003834:	88fa      	ldrh	r2, [r7, #6]
 8003836:	2300      	movs	r3, #0
 8003838:	9303      	str	r3, [sp, #12]
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	9302      	str	r3, [sp, #8]
 800383e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003840:	9301      	str	r3, [sp, #4]
 8003842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	68b9      	ldr	r1, [r7, #8]
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 f80e 	bl	800386c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003850:	69f8      	ldr	r0, [r7, #28]
 8003852:	f000 f89b 	bl	800398c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003856:	2301      	movs	r3, #1
 8003858:	61bb      	str	r3, [r7, #24]
 800385a:	e002      	b.n	8003862 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800385c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003860:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003862:	69bb      	ldr	r3, [r7, #24]
	}
 8003864:	4618      	mov	r0, r3
 8003866:	3720      	adds	r7, #32
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b088      	sub	sp, #32
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
 8003878:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800387a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	461a      	mov	r2, r3
 8003884:	21a5      	movs	r1, #165	; 0xa5
 8003886:	f008 f809 	bl	800b89c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800388a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003894:	3b01      	subs	r3, #1
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	4413      	add	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	f023 0307 	bic.w	r3, r3, #7
 80038a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80038ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b2:	f383 8811 	msr	BASEPRI, r3
 80038b6:	f3bf 8f6f 	isb	sy
 80038ba:	f3bf 8f4f 	dsb	sy
 80038be:	617b      	str	r3, [r7, #20]
}
 80038c0:	bf00      	nop
 80038c2:	e7fe      	b.n	80038c2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d01f      	beq.n	800390a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038ca:	2300      	movs	r3, #0
 80038cc:	61fb      	str	r3, [r7, #28]
 80038ce:	e012      	b.n	80038f6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	4413      	add	r3, r2
 80038d6:	7819      	ldrb	r1, [r3, #0]
 80038d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	4413      	add	r3, r2
 80038de:	3334      	adds	r3, #52	; 0x34
 80038e0:	460a      	mov	r2, r1
 80038e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	4413      	add	r3, r2
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d006      	beq.n	80038fe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	3301      	adds	r3, #1
 80038f4:	61fb      	str	r3, [r7, #28]
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	2b0f      	cmp	r3, #15
 80038fa:	d9e9      	bls.n	80038d0 <prvInitialiseNewTask+0x64>
 80038fc:	e000      	b.n	8003900 <prvInitialiseNewTask+0x94>
			{
				break;
 80038fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003908:	e003      	b.n	8003912 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800390a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003914:	2b37      	cmp	r3, #55	; 0x37
 8003916:	d901      	bls.n	800391c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003918:	2337      	movs	r3, #55	; 0x37
 800391a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800391c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003920:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003924:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003926:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392a:	2200      	movs	r2, #0
 800392c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800392e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003930:	3304      	adds	r3, #4
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff f978 	bl	8002c28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393a:	3318      	adds	r3, #24
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff f973 	bl	8002c28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003946:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800394e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003950:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003956:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395a:	2200      	movs	r2, #0
 800395c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800395e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	68f9      	ldr	r1, [r7, #12]
 800396a:	69b8      	ldr	r0, [r7, #24]
 800396c:	f001 fa70 	bl	8004e50 <pxPortInitialiseStack>
 8003970:	4602      	mov	r2, r0
 8003972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003974:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003978:	2b00      	cmp	r3, #0
 800397a:	d002      	beq.n	8003982 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800397c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800397e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003980:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003982:	bf00      	nop
 8003984:	3720      	adds	r7, #32
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
	...

0800398c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003994:	f001 fb86 	bl	80050a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003998:	4b2d      	ldr	r3, [pc, #180]	; (8003a50 <prvAddNewTaskToReadyList+0xc4>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	3301      	adds	r3, #1
 800399e:	4a2c      	ldr	r2, [pc, #176]	; (8003a50 <prvAddNewTaskToReadyList+0xc4>)
 80039a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80039a2:	4b2c      	ldr	r3, [pc, #176]	; (8003a54 <prvAddNewTaskToReadyList+0xc8>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d109      	bne.n	80039be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80039aa:	4a2a      	ldr	r2, [pc, #168]	; (8003a54 <prvAddNewTaskToReadyList+0xc8>)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80039b0:	4b27      	ldr	r3, [pc, #156]	; (8003a50 <prvAddNewTaskToReadyList+0xc4>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d110      	bne.n	80039da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80039b8:	f000 fc28 	bl	800420c <prvInitialiseTaskLists>
 80039bc:	e00d      	b.n	80039da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80039be:	4b26      	ldr	r3, [pc, #152]	; (8003a58 <prvAddNewTaskToReadyList+0xcc>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d109      	bne.n	80039da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80039c6:	4b23      	ldr	r3, [pc, #140]	; (8003a54 <prvAddNewTaskToReadyList+0xc8>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d802      	bhi.n	80039da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80039d4:	4a1f      	ldr	r2, [pc, #124]	; (8003a54 <prvAddNewTaskToReadyList+0xc8>)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80039da:	4b20      	ldr	r3, [pc, #128]	; (8003a5c <prvAddNewTaskToReadyList+0xd0>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	3301      	adds	r3, #1
 80039e0:	4a1e      	ldr	r2, [pc, #120]	; (8003a5c <prvAddNewTaskToReadyList+0xd0>)
 80039e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80039e4:	4b1d      	ldr	r3, [pc, #116]	; (8003a5c <prvAddNewTaskToReadyList+0xd0>)
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f0:	4b1b      	ldr	r3, [pc, #108]	; (8003a60 <prvAddNewTaskToReadyList+0xd4>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d903      	bls.n	8003a00 <prvAddNewTaskToReadyList+0x74>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fc:	4a18      	ldr	r2, [pc, #96]	; (8003a60 <prvAddNewTaskToReadyList+0xd4>)
 80039fe:	6013      	str	r3, [r2, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a04:	4613      	mov	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4a15      	ldr	r2, [pc, #84]	; (8003a64 <prvAddNewTaskToReadyList+0xd8>)
 8003a0e:	441a      	add	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	3304      	adds	r3, #4
 8003a14:	4619      	mov	r1, r3
 8003a16:	4610      	mov	r0, r2
 8003a18:	f7ff f913 	bl	8002c42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003a1c:	f001 fb72 	bl	8005104 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003a20:	4b0d      	ldr	r3, [pc, #52]	; (8003a58 <prvAddNewTaskToReadyList+0xcc>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00e      	beq.n	8003a46 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a28:	4b0a      	ldr	r3, [pc, #40]	; (8003a54 <prvAddNewTaskToReadyList+0xc8>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d207      	bcs.n	8003a46 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003a36:	4b0c      	ldr	r3, [pc, #48]	; (8003a68 <prvAddNewTaskToReadyList+0xdc>)
 8003a38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	f3bf 8f4f 	dsb	sy
 8003a42:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a46:	bf00      	nop
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	200015a8 	.word	0x200015a8
 8003a54:	200010d4 	.word	0x200010d4
 8003a58:	200015b4 	.word	0x200015b4
 8003a5c:	200015c4 	.word	0x200015c4
 8003a60:	200015b0 	.word	0x200015b0
 8003a64:	200010d8 	.word	0x200010d8
 8003a68:	e000ed04 	.word	0xe000ed04

08003a6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003a74:	2300      	movs	r3, #0
 8003a76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d017      	beq.n	8003aae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003a7e:	4b13      	ldr	r3, [pc, #76]	; (8003acc <vTaskDelay+0x60>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00a      	beq.n	8003a9c <vTaskDelay+0x30>
	__asm volatile
 8003a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8a:	f383 8811 	msr	BASEPRI, r3
 8003a8e:	f3bf 8f6f 	isb	sy
 8003a92:	f3bf 8f4f 	dsb	sy
 8003a96:	60bb      	str	r3, [r7, #8]
}
 8003a98:	bf00      	nop
 8003a9a:	e7fe      	b.n	8003a9a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003a9c:	f000 f880 	bl	8003ba0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 fe32 	bl	800470c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003aa8:	f000 f888 	bl	8003bbc <xTaskResumeAll>
 8003aac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d107      	bne.n	8003ac4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003ab4:	4b06      	ldr	r3, [pc, #24]	; (8003ad0 <vTaskDelay+0x64>)
 8003ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	f3bf 8f4f 	dsb	sy
 8003ac0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ac4:	bf00      	nop
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	200015d0 	.word	0x200015d0
 8003ad0:	e000ed04 	.word	0xe000ed04

08003ad4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b08a      	sub	sp, #40	; 0x28
 8003ad8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003ada:	2300      	movs	r3, #0
 8003adc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003ae2:	463a      	mov	r2, r7
 8003ae4:	1d39      	adds	r1, r7, #4
 8003ae6:	f107 0308 	add.w	r3, r7, #8
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff f848 	bl	8002b80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003af0:	6839      	ldr	r1, [r7, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	9202      	str	r2, [sp, #8]
 8003af8:	9301      	str	r3, [sp, #4]
 8003afa:	2300      	movs	r3, #0
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	2300      	movs	r3, #0
 8003b00:	460a      	mov	r2, r1
 8003b02:	4921      	ldr	r1, [pc, #132]	; (8003b88 <vTaskStartScheduler+0xb4>)
 8003b04:	4821      	ldr	r0, [pc, #132]	; (8003b8c <vTaskStartScheduler+0xb8>)
 8003b06:	f7ff fe0f 	bl	8003728 <xTaskCreateStatic>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	4a20      	ldr	r2, [pc, #128]	; (8003b90 <vTaskStartScheduler+0xbc>)
 8003b0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b10:	4b1f      	ldr	r3, [pc, #124]	; (8003b90 <vTaskStartScheduler+0xbc>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d002      	beq.n	8003b1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	617b      	str	r3, [r7, #20]
 8003b1c:	e001      	b.n	8003b22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d102      	bne.n	8003b2e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003b28:	f000 fe44 	bl	80047b4 <xTimerCreateTimerTask>
 8003b2c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d116      	bne.n	8003b62 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b38:	f383 8811 	msr	BASEPRI, r3
 8003b3c:	f3bf 8f6f 	isb	sy
 8003b40:	f3bf 8f4f 	dsb	sy
 8003b44:	613b      	str	r3, [r7, #16]
}
 8003b46:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003b48:	4b12      	ldr	r3, [pc, #72]	; (8003b94 <vTaskStartScheduler+0xc0>)
 8003b4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b4e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b50:	4b11      	ldr	r3, [pc, #68]	; (8003b98 <vTaskStartScheduler+0xc4>)
 8003b52:	2201      	movs	r2, #1
 8003b54:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003b56:	4b11      	ldr	r3, [pc, #68]	; (8003b9c <vTaskStartScheduler+0xc8>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003b5c:	f001 fa00 	bl	8004f60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003b60:	e00e      	b.n	8003b80 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b68:	d10a      	bne.n	8003b80 <vTaskStartScheduler+0xac>
	__asm volatile
 8003b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6e:	f383 8811 	msr	BASEPRI, r3
 8003b72:	f3bf 8f6f 	isb	sy
 8003b76:	f3bf 8f4f 	dsb	sy
 8003b7a:	60fb      	str	r3, [r7, #12]
}
 8003b7c:	bf00      	nop
 8003b7e:	e7fe      	b.n	8003b7e <vTaskStartScheduler+0xaa>
}
 8003b80:	bf00      	nop
 8003b82:	3718      	adds	r7, #24
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	0800c5a0 	.word	0x0800c5a0
 8003b8c:	080041dd 	.word	0x080041dd
 8003b90:	200015cc 	.word	0x200015cc
 8003b94:	200015c8 	.word	0x200015c8
 8003b98:	200015b4 	.word	0x200015b4
 8003b9c:	200015ac 	.word	0x200015ac

08003ba0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003ba4:	4b04      	ldr	r3, [pc, #16]	; (8003bb8 <vTaskSuspendAll+0x18>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	4a03      	ldr	r2, [pc, #12]	; (8003bb8 <vTaskSuspendAll+0x18>)
 8003bac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003bae:	bf00      	nop
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	200015d0 	.word	0x200015d0

08003bbc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003bca:	4b42      	ldr	r3, [pc, #264]	; (8003cd4 <xTaskResumeAll+0x118>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10a      	bne.n	8003be8 <xTaskResumeAll+0x2c>
	__asm volatile
 8003bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd6:	f383 8811 	msr	BASEPRI, r3
 8003bda:	f3bf 8f6f 	isb	sy
 8003bde:	f3bf 8f4f 	dsb	sy
 8003be2:	603b      	str	r3, [r7, #0]
}
 8003be4:	bf00      	nop
 8003be6:	e7fe      	b.n	8003be6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003be8:	f001 fa5c 	bl	80050a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003bec:	4b39      	ldr	r3, [pc, #228]	; (8003cd4 <xTaskResumeAll+0x118>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	4a38      	ldr	r2, [pc, #224]	; (8003cd4 <xTaskResumeAll+0x118>)
 8003bf4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bf6:	4b37      	ldr	r3, [pc, #220]	; (8003cd4 <xTaskResumeAll+0x118>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d162      	bne.n	8003cc4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003bfe:	4b36      	ldr	r3, [pc, #216]	; (8003cd8 <xTaskResumeAll+0x11c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d05e      	beq.n	8003cc4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c06:	e02f      	b.n	8003c68 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c08:	4b34      	ldr	r3, [pc, #208]	; (8003cdc <xTaskResumeAll+0x120>)
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	3318      	adds	r3, #24
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff f871 	bl	8002cfc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7ff f86c 	bl	8002cfc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c28:	4b2d      	ldr	r3, [pc, #180]	; (8003ce0 <xTaskResumeAll+0x124>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d903      	bls.n	8003c38 <xTaskResumeAll+0x7c>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c34:	4a2a      	ldr	r2, [pc, #168]	; (8003ce0 <xTaskResumeAll+0x124>)
 8003c36:	6013      	str	r3, [r2, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4413      	add	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4a27      	ldr	r2, [pc, #156]	; (8003ce4 <xTaskResumeAll+0x128>)
 8003c46:	441a      	add	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	4610      	mov	r0, r2
 8003c50:	f7fe fff7 	bl	8002c42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c58:	4b23      	ldr	r3, [pc, #140]	; (8003ce8 <xTaskResumeAll+0x12c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d302      	bcc.n	8003c68 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003c62:	4b22      	ldr	r3, [pc, #136]	; (8003cec <xTaskResumeAll+0x130>)
 8003c64:	2201      	movs	r2, #1
 8003c66:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c68:	4b1c      	ldr	r3, [pc, #112]	; (8003cdc <xTaskResumeAll+0x120>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1cb      	bne.n	8003c08 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003c76:	f000 fb67 	bl	8004348 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003c7a:	4b1d      	ldr	r3, [pc, #116]	; (8003cf0 <xTaskResumeAll+0x134>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d010      	beq.n	8003ca8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003c86:	f000 f859 	bl	8003d3c <xTaskIncrementTick>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d002      	beq.n	8003c96 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003c90:	4b16      	ldr	r3, [pc, #88]	; (8003cec <xTaskResumeAll+0x130>)
 8003c92:	2201      	movs	r2, #1
 8003c94:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f1      	bne.n	8003c86 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003ca2:	4b13      	ldr	r3, [pc, #76]	; (8003cf0 <xTaskResumeAll+0x134>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ca8:	4b10      	ldr	r3, [pc, #64]	; (8003cec <xTaskResumeAll+0x130>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d009      	beq.n	8003cc4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003cb4:	4b0f      	ldr	r3, [pc, #60]	; (8003cf4 <xTaskResumeAll+0x138>)
 8003cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	f3bf 8f4f 	dsb	sy
 8003cc0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003cc4:	f001 fa1e 	bl	8005104 <vPortExitCritical>

	return xAlreadyYielded;
 8003cc8:	68bb      	ldr	r3, [r7, #8]
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	200015d0 	.word	0x200015d0
 8003cd8:	200015a8 	.word	0x200015a8
 8003cdc:	20001568 	.word	0x20001568
 8003ce0:	200015b0 	.word	0x200015b0
 8003ce4:	200010d8 	.word	0x200010d8
 8003ce8:	200010d4 	.word	0x200010d4
 8003cec:	200015bc 	.word	0x200015bc
 8003cf0:	200015b8 	.word	0x200015b8
 8003cf4:	e000ed04 	.word	0xe000ed04

08003cf8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003cfe:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <xTaskGetTickCount+0x1c>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003d04:	687b      	ldr	r3, [r7, #4]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	200015ac 	.word	0x200015ac

08003d18 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d1e:	f001 faa3 	bl	8005268 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003d22:	2300      	movs	r3, #0
 8003d24:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8003d26:	4b04      	ldr	r3, [pc, #16]	; (8003d38 <xTaskGetTickCountFromISR+0x20>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d2c:	683b      	ldr	r3, [r7, #0]
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	200015ac 	.word	0x200015ac

08003d3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d42:	2300      	movs	r3, #0
 8003d44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d46:	4b4f      	ldr	r3, [pc, #316]	; (8003e84 <xTaskIncrementTick+0x148>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f040 808f 	bne.w	8003e6e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d50:	4b4d      	ldr	r3, [pc, #308]	; (8003e88 <xTaskIncrementTick+0x14c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	3301      	adds	r3, #1
 8003d56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d58:	4a4b      	ldr	r2, [pc, #300]	; (8003e88 <xTaskIncrementTick+0x14c>)
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d120      	bne.n	8003da6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d64:	4b49      	ldr	r3, [pc, #292]	; (8003e8c <xTaskIncrementTick+0x150>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00a      	beq.n	8003d84 <xTaskIncrementTick+0x48>
	__asm volatile
 8003d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d72:	f383 8811 	msr	BASEPRI, r3
 8003d76:	f3bf 8f6f 	isb	sy
 8003d7a:	f3bf 8f4f 	dsb	sy
 8003d7e:	603b      	str	r3, [r7, #0]
}
 8003d80:	bf00      	nop
 8003d82:	e7fe      	b.n	8003d82 <xTaskIncrementTick+0x46>
 8003d84:	4b41      	ldr	r3, [pc, #260]	; (8003e8c <xTaskIncrementTick+0x150>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	60fb      	str	r3, [r7, #12]
 8003d8a:	4b41      	ldr	r3, [pc, #260]	; (8003e90 <xTaskIncrementTick+0x154>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a3f      	ldr	r2, [pc, #252]	; (8003e8c <xTaskIncrementTick+0x150>)
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	4a3f      	ldr	r2, [pc, #252]	; (8003e90 <xTaskIncrementTick+0x154>)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6013      	str	r3, [r2, #0]
 8003d98:	4b3e      	ldr	r3, [pc, #248]	; (8003e94 <xTaskIncrementTick+0x158>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	4a3d      	ldr	r2, [pc, #244]	; (8003e94 <xTaskIncrementTick+0x158>)
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	f000 fad1 	bl	8004348 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003da6:	4b3c      	ldr	r3, [pc, #240]	; (8003e98 <xTaskIncrementTick+0x15c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d349      	bcc.n	8003e44 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003db0:	4b36      	ldr	r3, [pc, #216]	; (8003e8c <xTaskIncrementTick+0x150>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d104      	bne.n	8003dc4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dba:	4b37      	ldr	r3, [pc, #220]	; (8003e98 <xTaskIncrementTick+0x15c>)
 8003dbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003dc0:	601a      	str	r2, [r3, #0]
					break;
 8003dc2:	e03f      	b.n	8003e44 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dc4:	4b31      	ldr	r3, [pc, #196]	; (8003e8c <xTaskIncrementTick+0x150>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d203      	bcs.n	8003de4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ddc:	4a2e      	ldr	r2, [pc, #184]	; (8003e98 <xTaskIncrementTick+0x15c>)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003de2:	e02f      	b.n	8003e44 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	3304      	adds	r3, #4
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7fe ff87 	bl	8002cfc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d004      	beq.n	8003e00 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	3318      	adds	r3, #24
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7fe ff7e 	bl	8002cfc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e04:	4b25      	ldr	r3, [pc, #148]	; (8003e9c <xTaskIncrementTick+0x160>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d903      	bls.n	8003e14 <xTaskIncrementTick+0xd8>
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e10:	4a22      	ldr	r2, [pc, #136]	; (8003e9c <xTaskIncrementTick+0x160>)
 8003e12:	6013      	str	r3, [r2, #0]
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e18:	4613      	mov	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4a1f      	ldr	r2, [pc, #124]	; (8003ea0 <xTaskIncrementTick+0x164>)
 8003e22:	441a      	add	r2, r3
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	3304      	adds	r3, #4
 8003e28:	4619      	mov	r1, r3
 8003e2a:	4610      	mov	r0, r2
 8003e2c:	f7fe ff09 	bl	8002c42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e34:	4b1b      	ldr	r3, [pc, #108]	; (8003ea4 <xTaskIncrementTick+0x168>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d3b8      	bcc.n	8003db0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e42:	e7b5      	b.n	8003db0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e44:	4b17      	ldr	r3, [pc, #92]	; (8003ea4 <xTaskIncrementTick+0x168>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e4a:	4915      	ldr	r1, [pc, #84]	; (8003ea0 <xTaskIncrementTick+0x164>)
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4413      	add	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	440b      	add	r3, r1
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d901      	bls.n	8003e60 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003e60:	4b11      	ldr	r3, [pc, #68]	; (8003ea8 <xTaskIncrementTick+0x16c>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d007      	beq.n	8003e78 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	617b      	str	r3, [r7, #20]
 8003e6c:	e004      	b.n	8003e78 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003e6e:	4b0f      	ldr	r3, [pc, #60]	; (8003eac <xTaskIncrementTick+0x170>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	3301      	adds	r3, #1
 8003e74:	4a0d      	ldr	r2, [pc, #52]	; (8003eac <xTaskIncrementTick+0x170>)
 8003e76:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003e78:	697b      	ldr	r3, [r7, #20]
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	200015d0 	.word	0x200015d0
 8003e88:	200015ac 	.word	0x200015ac
 8003e8c:	20001560 	.word	0x20001560
 8003e90:	20001564 	.word	0x20001564
 8003e94:	200015c0 	.word	0x200015c0
 8003e98:	200015c8 	.word	0x200015c8
 8003e9c:	200015b0 	.word	0x200015b0
 8003ea0:	200010d8 	.word	0x200010d8
 8003ea4:	200010d4 	.word	0x200010d4
 8003ea8:	200015bc 	.word	0x200015bc
 8003eac:	200015b8 	.word	0x200015b8

08003eb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003eb6:	4b28      	ldr	r3, [pc, #160]	; (8003f58 <vTaskSwitchContext+0xa8>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ebe:	4b27      	ldr	r3, [pc, #156]	; (8003f5c <vTaskSwitchContext+0xac>)
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ec4:	e041      	b.n	8003f4a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003ec6:	4b25      	ldr	r3, [pc, #148]	; (8003f5c <vTaskSwitchContext+0xac>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ecc:	4b24      	ldr	r3, [pc, #144]	; (8003f60 <vTaskSwitchContext+0xb0>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	60fb      	str	r3, [r7, #12]
 8003ed2:	e010      	b.n	8003ef6 <vTaskSwitchContext+0x46>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10a      	bne.n	8003ef0 <vTaskSwitchContext+0x40>
	__asm volatile
 8003eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ede:	f383 8811 	msr	BASEPRI, r3
 8003ee2:	f3bf 8f6f 	isb	sy
 8003ee6:	f3bf 8f4f 	dsb	sy
 8003eea:	607b      	str	r3, [r7, #4]
}
 8003eec:	bf00      	nop
 8003eee:	e7fe      	b.n	8003eee <vTaskSwitchContext+0x3e>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	60fb      	str	r3, [r7, #12]
 8003ef6:	491b      	ldr	r1, [pc, #108]	; (8003f64 <vTaskSwitchContext+0xb4>)
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	4613      	mov	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4413      	add	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	440b      	add	r3, r1
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d0e4      	beq.n	8003ed4 <vTaskSwitchContext+0x24>
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	4a13      	ldr	r2, [pc, #76]	; (8003f64 <vTaskSwitchContext+0xb4>)
 8003f16:	4413      	add	r3, r2
 8003f18:	60bb      	str	r3, [r7, #8]
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	605a      	str	r2, [r3, #4]
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	3308      	adds	r3, #8
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d104      	bne.n	8003f3a <vTaskSwitchContext+0x8a>
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	605a      	str	r2, [r3, #4]
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	4a09      	ldr	r2, [pc, #36]	; (8003f68 <vTaskSwitchContext+0xb8>)
 8003f42:	6013      	str	r3, [r2, #0]
 8003f44:	4a06      	ldr	r2, [pc, #24]	; (8003f60 <vTaskSwitchContext+0xb0>)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6013      	str	r3, [r2, #0]
}
 8003f4a:	bf00      	nop
 8003f4c:	3714      	adds	r7, #20
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	200015d0 	.word	0x200015d0
 8003f5c:	200015bc 	.word	0x200015bc
 8003f60:	200015b0 	.word	0x200015b0
 8003f64:	200010d8 	.word	0x200010d8
 8003f68:	200010d4 	.word	0x200010d4

08003f6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10a      	bne.n	8003f92 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f80:	f383 8811 	msr	BASEPRI, r3
 8003f84:	f3bf 8f6f 	isb	sy
 8003f88:	f3bf 8f4f 	dsb	sy
 8003f8c:	60fb      	str	r3, [r7, #12]
}
 8003f8e:	bf00      	nop
 8003f90:	e7fe      	b.n	8003f90 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f92:	4b07      	ldr	r3, [pc, #28]	; (8003fb0 <vTaskPlaceOnEventList+0x44>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	3318      	adds	r3, #24
 8003f98:	4619      	mov	r1, r3
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f7fe fe75 	bl	8002c8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	6838      	ldr	r0, [r7, #0]
 8003fa4:	f000 fbb2 	bl	800470c <prvAddCurrentTaskToDelayedList>
}
 8003fa8:	bf00      	nop
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	200010d4 	.word	0x200010d4

08003fb4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10a      	bne.n	8003fdc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fca:	f383 8811 	msr	BASEPRI, r3
 8003fce:	f3bf 8f6f 	isb	sy
 8003fd2:	f3bf 8f4f 	dsb	sy
 8003fd6:	617b      	str	r3, [r7, #20]
}
 8003fd8:	bf00      	nop
 8003fda:	e7fe      	b.n	8003fda <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003fdc:	4b0a      	ldr	r3, [pc, #40]	; (8004008 <vTaskPlaceOnEventListRestricted+0x54>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	3318      	adds	r3, #24
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f7fe fe2c 	bl	8002c42 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d002      	beq.n	8003ff6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003ff0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ff4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003ff6:	6879      	ldr	r1, [r7, #4]
 8003ff8:	68b8      	ldr	r0, [r7, #8]
 8003ffa:	f000 fb87 	bl	800470c <prvAddCurrentTaskToDelayedList>
	}
 8003ffe:	bf00      	nop
 8004000:	3718      	adds	r7, #24
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	200010d4 	.word	0x200010d4

0800400c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10a      	bne.n	8004038 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004026:	f383 8811 	msr	BASEPRI, r3
 800402a:	f3bf 8f6f 	isb	sy
 800402e:	f3bf 8f4f 	dsb	sy
 8004032:	60fb      	str	r3, [r7, #12]
}
 8004034:	bf00      	nop
 8004036:	e7fe      	b.n	8004036 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	3318      	adds	r3, #24
 800403c:	4618      	mov	r0, r3
 800403e:	f7fe fe5d 	bl	8002cfc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004042:	4b1e      	ldr	r3, [pc, #120]	; (80040bc <xTaskRemoveFromEventList+0xb0>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d11d      	bne.n	8004086 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	3304      	adds	r3, #4
 800404e:	4618      	mov	r0, r3
 8004050:	f7fe fe54 	bl	8002cfc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004058:	4b19      	ldr	r3, [pc, #100]	; (80040c0 <xTaskRemoveFromEventList+0xb4>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d903      	bls.n	8004068 <xTaskRemoveFromEventList+0x5c>
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004064:	4a16      	ldr	r2, [pc, #88]	; (80040c0 <xTaskRemoveFromEventList+0xb4>)
 8004066:	6013      	str	r3, [r2, #0]
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800406c:	4613      	mov	r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	4413      	add	r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	4a13      	ldr	r2, [pc, #76]	; (80040c4 <xTaskRemoveFromEventList+0xb8>)
 8004076:	441a      	add	r2, r3
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	3304      	adds	r3, #4
 800407c:	4619      	mov	r1, r3
 800407e:	4610      	mov	r0, r2
 8004080:	f7fe fddf 	bl	8002c42 <vListInsertEnd>
 8004084:	e005      	b.n	8004092 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	3318      	adds	r3, #24
 800408a:	4619      	mov	r1, r3
 800408c:	480e      	ldr	r0, [pc, #56]	; (80040c8 <xTaskRemoveFromEventList+0xbc>)
 800408e:	f7fe fdd8 	bl	8002c42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004096:	4b0d      	ldr	r3, [pc, #52]	; (80040cc <xTaskRemoveFromEventList+0xc0>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409c:	429a      	cmp	r2, r3
 800409e:	d905      	bls.n	80040ac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80040a0:	2301      	movs	r3, #1
 80040a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80040a4:	4b0a      	ldr	r3, [pc, #40]	; (80040d0 <xTaskRemoveFromEventList+0xc4>)
 80040a6:	2201      	movs	r2, #1
 80040a8:	601a      	str	r2, [r3, #0]
 80040aa:	e001      	b.n	80040b0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80040ac:	2300      	movs	r3, #0
 80040ae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80040b0:	697b      	ldr	r3, [r7, #20]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3718      	adds	r7, #24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	200015d0 	.word	0x200015d0
 80040c0:	200015b0 	.word	0x200015b0
 80040c4:	200010d8 	.word	0x200010d8
 80040c8:	20001568 	.word	0x20001568
 80040cc:	200010d4 	.word	0x200010d4
 80040d0:	200015bc 	.word	0x200015bc

080040d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80040dc:	4b06      	ldr	r3, [pc, #24]	; (80040f8 <vTaskInternalSetTimeOutState+0x24>)
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80040e4:	4b05      	ldr	r3, [pc, #20]	; (80040fc <vTaskInternalSetTimeOutState+0x28>)
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	605a      	str	r2, [r3, #4]
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	200015c0 	.word	0x200015c0
 80040fc:	200015ac 	.word	0x200015ac

08004100 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b088      	sub	sp, #32
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10a      	bne.n	8004126 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004114:	f383 8811 	msr	BASEPRI, r3
 8004118:	f3bf 8f6f 	isb	sy
 800411c:	f3bf 8f4f 	dsb	sy
 8004120:	613b      	str	r3, [r7, #16]
}
 8004122:	bf00      	nop
 8004124:	e7fe      	b.n	8004124 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10a      	bne.n	8004142 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800412c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004130:	f383 8811 	msr	BASEPRI, r3
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	60fb      	str	r3, [r7, #12]
}
 800413e:	bf00      	nop
 8004140:	e7fe      	b.n	8004140 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004142:	f000 ffaf 	bl	80050a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004146:	4b1d      	ldr	r3, [pc, #116]	; (80041bc <xTaskCheckForTimeOut+0xbc>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800415e:	d102      	bne.n	8004166 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004160:	2300      	movs	r3, #0
 8004162:	61fb      	str	r3, [r7, #28]
 8004164:	e023      	b.n	80041ae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	4b15      	ldr	r3, [pc, #84]	; (80041c0 <xTaskCheckForTimeOut+0xc0>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	429a      	cmp	r2, r3
 8004170:	d007      	beq.n	8004182 <xTaskCheckForTimeOut+0x82>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	429a      	cmp	r2, r3
 800417a:	d302      	bcc.n	8004182 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800417c:	2301      	movs	r3, #1
 800417e:	61fb      	str	r3, [r7, #28]
 8004180:	e015      	b.n	80041ae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	429a      	cmp	r2, r3
 800418a:	d20b      	bcs.n	80041a4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	1ad2      	subs	r2, r2, r3
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f7ff ff9b 	bl	80040d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800419e:	2300      	movs	r3, #0
 80041a0:	61fb      	str	r3, [r7, #28]
 80041a2:	e004      	b.n	80041ae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	2200      	movs	r2, #0
 80041a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80041aa:	2301      	movs	r3, #1
 80041ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80041ae:	f000 ffa9 	bl	8005104 <vPortExitCritical>

	return xReturn;
 80041b2:	69fb      	ldr	r3, [r7, #28]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3720      	adds	r7, #32
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	200015ac 	.word	0x200015ac
 80041c0:	200015c0 	.word	0x200015c0

080041c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80041c8:	4b03      	ldr	r3, [pc, #12]	; (80041d8 <vTaskMissedYield+0x14>)
 80041ca:	2201      	movs	r2, #1
 80041cc:	601a      	str	r2, [r3, #0]
}
 80041ce:	bf00      	nop
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	200015bc 	.word	0x200015bc

080041dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80041e4:	f000 f852 	bl	800428c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80041e8:	4b06      	ldr	r3, [pc, #24]	; (8004204 <prvIdleTask+0x28>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d9f9      	bls.n	80041e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80041f0:	4b05      	ldr	r3, [pc, #20]	; (8004208 <prvIdleTask+0x2c>)
 80041f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	f3bf 8f4f 	dsb	sy
 80041fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004200:	e7f0      	b.n	80041e4 <prvIdleTask+0x8>
 8004202:	bf00      	nop
 8004204:	200010d8 	.word	0x200010d8
 8004208:	e000ed04 	.word	0xe000ed04

0800420c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004212:	2300      	movs	r3, #0
 8004214:	607b      	str	r3, [r7, #4]
 8004216:	e00c      	b.n	8004232 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	4613      	mov	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4413      	add	r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4a12      	ldr	r2, [pc, #72]	; (800426c <prvInitialiseTaskLists+0x60>)
 8004224:	4413      	add	r3, r2
 8004226:	4618      	mov	r0, r3
 8004228:	f7fe fcde 	bl	8002be8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3301      	adds	r3, #1
 8004230:	607b      	str	r3, [r7, #4]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2b37      	cmp	r3, #55	; 0x37
 8004236:	d9ef      	bls.n	8004218 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004238:	480d      	ldr	r0, [pc, #52]	; (8004270 <prvInitialiseTaskLists+0x64>)
 800423a:	f7fe fcd5 	bl	8002be8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800423e:	480d      	ldr	r0, [pc, #52]	; (8004274 <prvInitialiseTaskLists+0x68>)
 8004240:	f7fe fcd2 	bl	8002be8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004244:	480c      	ldr	r0, [pc, #48]	; (8004278 <prvInitialiseTaskLists+0x6c>)
 8004246:	f7fe fccf 	bl	8002be8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800424a:	480c      	ldr	r0, [pc, #48]	; (800427c <prvInitialiseTaskLists+0x70>)
 800424c:	f7fe fccc 	bl	8002be8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004250:	480b      	ldr	r0, [pc, #44]	; (8004280 <prvInitialiseTaskLists+0x74>)
 8004252:	f7fe fcc9 	bl	8002be8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004256:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <prvInitialiseTaskLists+0x78>)
 8004258:	4a05      	ldr	r2, [pc, #20]	; (8004270 <prvInitialiseTaskLists+0x64>)
 800425a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800425c:	4b0a      	ldr	r3, [pc, #40]	; (8004288 <prvInitialiseTaskLists+0x7c>)
 800425e:	4a05      	ldr	r2, [pc, #20]	; (8004274 <prvInitialiseTaskLists+0x68>)
 8004260:	601a      	str	r2, [r3, #0]
}
 8004262:	bf00      	nop
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	200010d8 	.word	0x200010d8
 8004270:	20001538 	.word	0x20001538
 8004274:	2000154c 	.word	0x2000154c
 8004278:	20001568 	.word	0x20001568
 800427c:	2000157c 	.word	0x2000157c
 8004280:	20001594 	.word	0x20001594
 8004284:	20001560 	.word	0x20001560
 8004288:	20001564 	.word	0x20001564

0800428c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004292:	e019      	b.n	80042c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004294:	f000 ff06 	bl	80050a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004298:	4b10      	ldr	r3, [pc, #64]	; (80042dc <prvCheckTasksWaitingTermination+0x50>)
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	3304      	adds	r3, #4
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7fe fd29 	bl	8002cfc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80042aa:	4b0d      	ldr	r3, [pc, #52]	; (80042e0 <prvCheckTasksWaitingTermination+0x54>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	3b01      	subs	r3, #1
 80042b0:	4a0b      	ldr	r2, [pc, #44]	; (80042e0 <prvCheckTasksWaitingTermination+0x54>)
 80042b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80042b4:	4b0b      	ldr	r3, [pc, #44]	; (80042e4 <prvCheckTasksWaitingTermination+0x58>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	3b01      	subs	r3, #1
 80042ba:	4a0a      	ldr	r2, [pc, #40]	; (80042e4 <prvCheckTasksWaitingTermination+0x58>)
 80042bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80042be:	f000 ff21 	bl	8005104 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f810 	bl	80042e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042c8:	4b06      	ldr	r3, [pc, #24]	; (80042e4 <prvCheckTasksWaitingTermination+0x58>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1e1      	bne.n	8004294 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80042d0:	bf00      	nop
 80042d2:	bf00      	nop
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	2000157c 	.word	0x2000157c
 80042e0:	200015a8 	.word	0x200015a8
 80042e4:	20001590 	.word	0x20001590

080042e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d108      	bne.n	800430c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fe:	4618      	mov	r0, r3
 8004300:	f001 f8be 	bl	8005480 <vPortFree>
				vPortFree( pxTCB );
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f001 f8bb 	bl	8005480 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800430a:	e018      	b.n	800433e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004312:	2b01      	cmp	r3, #1
 8004314:	d103      	bne.n	800431e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f001 f8b2 	bl	8005480 <vPortFree>
	}
 800431c:	e00f      	b.n	800433e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004324:	2b02      	cmp	r3, #2
 8004326:	d00a      	beq.n	800433e <prvDeleteTCB+0x56>
	__asm volatile
 8004328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432c:	f383 8811 	msr	BASEPRI, r3
 8004330:	f3bf 8f6f 	isb	sy
 8004334:	f3bf 8f4f 	dsb	sy
 8004338:	60fb      	str	r3, [r7, #12]
}
 800433a:	bf00      	nop
 800433c:	e7fe      	b.n	800433c <prvDeleteTCB+0x54>
	}
 800433e:	bf00      	nop
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
	...

08004348 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800434e:	4b0c      	ldr	r3, [pc, #48]	; (8004380 <prvResetNextTaskUnblockTime+0x38>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d104      	bne.n	8004362 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004358:	4b0a      	ldr	r3, [pc, #40]	; (8004384 <prvResetNextTaskUnblockTime+0x3c>)
 800435a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800435e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004360:	e008      	b.n	8004374 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004362:	4b07      	ldr	r3, [pc, #28]	; (8004380 <prvResetNextTaskUnblockTime+0x38>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	4a04      	ldr	r2, [pc, #16]	; (8004384 <prvResetNextTaskUnblockTime+0x3c>)
 8004372:	6013      	str	r3, [r2, #0]
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr
 8004380:	20001560 	.word	0x20001560
 8004384:	200015c8 	.word	0x200015c8

08004388 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800438e:	4b0b      	ldr	r3, [pc, #44]	; (80043bc <xTaskGetSchedulerState+0x34>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d102      	bne.n	800439c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004396:	2301      	movs	r3, #1
 8004398:	607b      	str	r3, [r7, #4]
 800439a:	e008      	b.n	80043ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800439c:	4b08      	ldr	r3, [pc, #32]	; (80043c0 <xTaskGetSchedulerState+0x38>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d102      	bne.n	80043aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80043a4:	2302      	movs	r3, #2
 80043a6:	607b      	str	r3, [r7, #4]
 80043a8:	e001      	b.n	80043ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80043aa:	2300      	movs	r3, #0
 80043ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80043ae:	687b      	ldr	r3, [r7, #4]
	}
 80043b0:	4618      	mov	r0, r3
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	200015b4 	.word	0x200015b4
 80043c0:	200015d0 	.word	0x200015d0

080043c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80043d0:	2300      	movs	r3, #0
 80043d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d056      	beq.n	8004488 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80043da:	4b2e      	ldr	r3, [pc, #184]	; (8004494 <xTaskPriorityDisinherit+0xd0>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d00a      	beq.n	80043fa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80043e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e8:	f383 8811 	msr	BASEPRI, r3
 80043ec:	f3bf 8f6f 	isb	sy
 80043f0:	f3bf 8f4f 	dsb	sy
 80043f4:	60fb      	str	r3, [r7, #12]
}
 80043f6:	bf00      	nop
 80043f8:	e7fe      	b.n	80043f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10a      	bne.n	8004418 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004406:	f383 8811 	msr	BASEPRI, r3
 800440a:	f3bf 8f6f 	isb	sy
 800440e:	f3bf 8f4f 	dsb	sy
 8004412:	60bb      	str	r3, [r7, #8]
}
 8004414:	bf00      	nop
 8004416:	e7fe      	b.n	8004416 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800441c:	1e5a      	subs	r2, r3, #1
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800442a:	429a      	cmp	r2, r3
 800442c:	d02c      	beq.n	8004488 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004432:	2b00      	cmp	r3, #0
 8004434:	d128      	bne.n	8004488 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	3304      	adds	r3, #4
 800443a:	4618      	mov	r0, r3
 800443c:	f7fe fc5e 	bl	8002cfc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004458:	4b0f      	ldr	r3, [pc, #60]	; (8004498 <xTaskPriorityDisinherit+0xd4>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	429a      	cmp	r2, r3
 800445e:	d903      	bls.n	8004468 <xTaskPriorityDisinherit+0xa4>
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004464:	4a0c      	ldr	r2, [pc, #48]	; (8004498 <xTaskPriorityDisinherit+0xd4>)
 8004466:	6013      	str	r3, [r2, #0]
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800446c:	4613      	mov	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4a09      	ldr	r2, [pc, #36]	; (800449c <xTaskPriorityDisinherit+0xd8>)
 8004476:	441a      	add	r2, r3
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	3304      	adds	r3, #4
 800447c:	4619      	mov	r1, r3
 800447e:	4610      	mov	r0, r2
 8004480:	f7fe fbdf 	bl	8002c42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004484:	2301      	movs	r3, #1
 8004486:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004488:	697b      	ldr	r3, [r7, #20]
	}
 800448a:	4618      	mov	r0, r3
 800448c:	3718      	adds	r7, #24
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	200010d4 	.word	0x200010d4
 8004498:	200015b0 	.word	0x200015b0
 800449c:	200010d8 	.word	0x200010d8

080044a0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
 80044ac:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80044ae:	f000 fdf9 	bl	80050a4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80044b2:	4b26      	ldr	r3, [pc, #152]	; (800454c <xTaskNotifyWait+0xac>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d01a      	beq.n	80044f6 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80044c0:	4b22      	ldr	r3, [pc, #136]	; (800454c <xTaskNotifyWait+0xac>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	43d2      	mvns	r2, r2
 80044ca:	400a      	ands	r2, r1
 80044cc:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80044ce:	4b1f      	ldr	r3, [pc, #124]	; (800454c <xTaskNotifyWait+0xac>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00b      	beq.n	80044f6 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80044de:	2101      	movs	r1, #1
 80044e0:	6838      	ldr	r0, [r7, #0]
 80044e2:	f000 f913 	bl	800470c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80044e6:	4b1a      	ldr	r3, [pc, #104]	; (8004550 <xTaskNotifyWait+0xb0>)
 80044e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044ec:	601a      	str	r2, [r3, #0]
 80044ee:	f3bf 8f4f 	dsb	sy
 80044f2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80044f6:	f000 fe05 	bl	8005104 <vPortExitCritical>

		taskENTER_CRITICAL();
 80044fa:	f000 fdd3 	bl	80050a4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d004      	beq.n	800450e <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8004504:	4b11      	ldr	r3, [pc, #68]	; (800454c <xTaskNotifyWait+0xac>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800450e:	4b0f      	ldr	r3, [pc, #60]	; (800454c <xTaskNotifyWait+0xac>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d002      	beq.n	8004522 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800451c:	2300      	movs	r3, #0
 800451e:	617b      	str	r3, [r7, #20]
 8004520:	e008      	b.n	8004534 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8004522:	4b0a      	ldr	r3, [pc, #40]	; (800454c <xTaskNotifyWait+0xac>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004528:	68ba      	ldr	r2, [r7, #8]
 800452a:	43d2      	mvns	r2, r2
 800452c:	400a      	ands	r2, r1
 800452e:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 8004530:	2301      	movs	r3, #1
 8004532:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004534:	4b05      	ldr	r3, [pc, #20]	; (800454c <xTaskNotifyWait+0xac>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800453e:	f000 fde1 	bl	8005104 <vPortExitCritical>

		return xReturn;
 8004542:	697b      	ldr	r3, [r7, #20]
	}
 8004544:	4618      	mov	r0, r3
 8004546:	3718      	adds	r7, #24
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	200010d4 	.word	0x200010d4
 8004550:	e000ed04 	.word	0xe000ed04

08004554 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004554:	b580      	push	{r7, lr}
 8004556:	b08e      	sub	sp, #56	; 0x38
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	603b      	str	r3, [r7, #0]
 8004560:	4613      	mov	r3, r2
 8004562:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8004564:	2301      	movs	r3, #1
 8004566:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10a      	bne.n	8004584 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800456e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004572:	f383 8811 	msr	BASEPRI, r3
 8004576:	f3bf 8f6f 	isb	sy
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004580:	bf00      	nop
 8004582:	e7fe      	b.n	8004582 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004584:	f000 fe70 	bl	8005268 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800458c:	f3ef 8211 	mrs	r2, BASEPRI
 8004590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004594:	f383 8811 	msr	BASEPRI, r3
 8004598:	f3bf 8f6f 	isb	sy
 800459c:	f3bf 8f4f 	dsb	sy
 80045a0:	623a      	str	r2, [r7, #32]
 80045a2:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80045a4:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80045a6:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80045ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80045b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80045bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80045c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 80045c8:	79fb      	ldrb	r3, [r7, #7]
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	d828      	bhi.n	8004620 <xTaskGenericNotifyFromISR+0xcc>
 80045ce:	a201      	add	r2, pc, #4	; (adr r2, 80045d4 <xTaskGenericNotifyFromISR+0x80>)
 80045d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d4:	08004641 	.word	0x08004641
 80045d8:	080045e9 	.word	0x080045e9
 80045dc:	080045f7 	.word	0x080045f7
 80045e0:	08004603 	.word	0x08004603
 80045e4:	0800460b 	.word	0x0800460b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80045e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	431a      	orrs	r2, r3
 80045f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80045f4:	e027      	b.n	8004646 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80045f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045fa:	1c5a      	adds	r2, r3, #1
 80045fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fe:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8004600:	e021      	b.n	8004646 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8004602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8004608:	e01d      	b.n	8004646 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800460a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800460e:	2b02      	cmp	r3, #2
 8004610:	d003      	beq.n	800461a <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8004612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8004618:	e015      	b.n	8004646 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800461a:	2300      	movs	r3, #0
 800461c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800461e:	e012      	b.n	8004646 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8004620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004624:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004628:	d00c      	beq.n	8004644 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800462a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462e:	f383 8811 	msr	BASEPRI, r3
 8004632:	f3bf 8f6f 	isb	sy
 8004636:	f3bf 8f4f 	dsb	sy
 800463a:	61bb      	str	r3, [r7, #24]
}
 800463c:	bf00      	nop
 800463e:	e7fe      	b.n	800463e <xTaskGenericNotifyFromISR+0xea>
					break;
 8004640:	bf00      	nop
 8004642:	e000      	b.n	8004646 <xTaskGenericNotifyFromISR+0xf2>
					break;
 8004644:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004646:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800464a:	2b01      	cmp	r3, #1
 800464c:	d146      	bne.n	80046dc <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800464e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00a      	beq.n	800466c <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8004656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465a:	f383 8811 	msr	BASEPRI, r3
 800465e:	f3bf 8f6f 	isb	sy
 8004662:	f3bf 8f4f 	dsb	sy
 8004666:	617b      	str	r3, [r7, #20]
}
 8004668:	bf00      	nop
 800466a:	e7fe      	b.n	800466a <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800466c:	4b21      	ldr	r3, [pc, #132]	; (80046f4 <xTaskGenericNotifyFromISR+0x1a0>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d11d      	bne.n	80046b0 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004676:	3304      	adds	r3, #4
 8004678:	4618      	mov	r0, r3
 800467a:	f7fe fb3f 	bl	8002cfc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800467e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004682:	4b1d      	ldr	r3, [pc, #116]	; (80046f8 <xTaskGenericNotifyFromISR+0x1a4>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	429a      	cmp	r2, r3
 8004688:	d903      	bls.n	8004692 <xTaskGenericNotifyFromISR+0x13e>
 800468a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468e:	4a1a      	ldr	r2, [pc, #104]	; (80046f8 <xTaskGenericNotifyFromISR+0x1a4>)
 8004690:	6013      	str	r3, [r2, #0]
 8004692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004696:	4613      	mov	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4413      	add	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4a17      	ldr	r2, [pc, #92]	; (80046fc <xTaskGenericNotifyFromISR+0x1a8>)
 80046a0:	441a      	add	r2, r3
 80046a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a4:	3304      	adds	r3, #4
 80046a6:	4619      	mov	r1, r3
 80046a8:	4610      	mov	r0, r2
 80046aa:	f7fe faca 	bl	8002c42 <vListInsertEnd>
 80046ae:	e005      	b.n	80046bc <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80046b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b2:	3318      	adds	r3, #24
 80046b4:	4619      	mov	r1, r3
 80046b6:	4812      	ldr	r0, [pc, #72]	; (8004700 <xTaskGenericNotifyFromISR+0x1ac>)
 80046b8:	f7fe fac3 	bl	8002c42 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80046bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046c0:	4b10      	ldr	r3, [pc, #64]	; (8004704 <xTaskGenericNotifyFromISR+0x1b0>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d908      	bls.n	80046dc <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80046ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d002      	beq.n	80046d6 <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80046d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046d2:	2201      	movs	r2, #1
 80046d4:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80046d6:	4b0c      	ldr	r3, [pc, #48]	; (8004708 <xTaskGenericNotifyFromISR+0x1b4>)
 80046d8:	2201      	movs	r2, #1
 80046da:	601a      	str	r2, [r3, #0]
 80046dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046de:	613b      	str	r3, [r7, #16]
	__asm volatile
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	f383 8811 	msr	BASEPRI, r3
}
 80046e6:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80046e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3738      	adds	r7, #56	; 0x38
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	200015d0 	.word	0x200015d0
 80046f8:	200015b0 	.word	0x200015b0
 80046fc:	200010d8 	.word	0x200010d8
 8004700:	20001568 	.word	0x20001568
 8004704:	200010d4 	.word	0x200010d4
 8004708:	200015bc 	.word	0x200015bc

0800470c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004716:	4b21      	ldr	r3, [pc, #132]	; (800479c <prvAddCurrentTaskToDelayedList+0x90>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800471c:	4b20      	ldr	r3, [pc, #128]	; (80047a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	3304      	adds	r3, #4
 8004722:	4618      	mov	r0, r3
 8004724:	f7fe faea 	bl	8002cfc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800472e:	d10a      	bne.n	8004746 <prvAddCurrentTaskToDelayedList+0x3a>
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d007      	beq.n	8004746 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004736:	4b1a      	ldr	r3, [pc, #104]	; (80047a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	3304      	adds	r3, #4
 800473c:	4619      	mov	r1, r3
 800473e:	4819      	ldr	r0, [pc, #100]	; (80047a4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004740:	f7fe fa7f 	bl	8002c42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004744:	e026      	b.n	8004794 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4413      	add	r3, r2
 800474c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800474e:	4b14      	ldr	r3, [pc, #80]	; (80047a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	429a      	cmp	r2, r3
 800475c:	d209      	bcs.n	8004772 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800475e:	4b12      	ldr	r3, [pc, #72]	; (80047a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	4b0f      	ldr	r3, [pc, #60]	; (80047a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	3304      	adds	r3, #4
 8004768:	4619      	mov	r1, r3
 800476a:	4610      	mov	r0, r2
 800476c:	f7fe fa8d 	bl	8002c8a <vListInsert>
}
 8004770:	e010      	b.n	8004794 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004772:	4b0e      	ldr	r3, [pc, #56]	; (80047ac <prvAddCurrentTaskToDelayedList+0xa0>)
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	4b0a      	ldr	r3, [pc, #40]	; (80047a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	3304      	adds	r3, #4
 800477c:	4619      	mov	r1, r3
 800477e:	4610      	mov	r0, r2
 8004780:	f7fe fa83 	bl	8002c8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004784:	4b0a      	ldr	r3, [pc, #40]	; (80047b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	429a      	cmp	r2, r3
 800478c:	d202      	bcs.n	8004794 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800478e:	4a08      	ldr	r2, [pc, #32]	; (80047b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	6013      	str	r3, [r2, #0]
}
 8004794:	bf00      	nop
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	200015ac 	.word	0x200015ac
 80047a0:	200010d4 	.word	0x200010d4
 80047a4:	20001594 	.word	0x20001594
 80047a8:	20001564 	.word	0x20001564
 80047ac:	20001560 	.word	0x20001560
 80047b0:	200015c8 	.word	0x200015c8

080047b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b08a      	sub	sp, #40	; 0x28
 80047b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80047ba:	2300      	movs	r3, #0
 80047bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80047be:	f000 fb07 	bl	8004dd0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80047c2:	4b1c      	ldr	r3, [pc, #112]	; (8004834 <xTimerCreateTimerTask+0x80>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d021      	beq.n	800480e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80047ca:	2300      	movs	r3, #0
 80047cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80047ce:	2300      	movs	r3, #0
 80047d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80047d2:	1d3a      	adds	r2, r7, #4
 80047d4:	f107 0108 	add.w	r1, r7, #8
 80047d8:	f107 030c 	add.w	r3, r7, #12
 80047dc:	4618      	mov	r0, r3
 80047de:	f7fe f9e9 	bl	8002bb4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80047e2:	6879      	ldr	r1, [r7, #4]
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	9202      	str	r2, [sp, #8]
 80047ea:	9301      	str	r3, [sp, #4]
 80047ec:	2302      	movs	r3, #2
 80047ee:	9300      	str	r3, [sp, #0]
 80047f0:	2300      	movs	r3, #0
 80047f2:	460a      	mov	r2, r1
 80047f4:	4910      	ldr	r1, [pc, #64]	; (8004838 <xTimerCreateTimerTask+0x84>)
 80047f6:	4811      	ldr	r0, [pc, #68]	; (800483c <xTimerCreateTimerTask+0x88>)
 80047f8:	f7fe ff96 	bl	8003728 <xTaskCreateStatic>
 80047fc:	4603      	mov	r3, r0
 80047fe:	4a10      	ldr	r2, [pc, #64]	; (8004840 <xTimerCreateTimerTask+0x8c>)
 8004800:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004802:	4b0f      	ldr	r3, [pc, #60]	; (8004840 <xTimerCreateTimerTask+0x8c>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800480a:	2301      	movs	r3, #1
 800480c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10a      	bne.n	800482a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004818:	f383 8811 	msr	BASEPRI, r3
 800481c:	f3bf 8f6f 	isb	sy
 8004820:	f3bf 8f4f 	dsb	sy
 8004824:	613b      	str	r3, [r7, #16]
}
 8004826:	bf00      	nop
 8004828:	e7fe      	b.n	8004828 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800482a:	697b      	ldr	r3, [r7, #20]
}
 800482c:	4618      	mov	r0, r3
 800482e:	3718      	adds	r7, #24
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	20001604 	.word	0x20001604
 8004838:	0800c5a8 	.word	0x0800c5a8
 800483c:	08004979 	.word	0x08004979
 8004840:	20001608 	.word	0x20001608

08004844 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b08a      	sub	sp, #40	; 0x28
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
 8004850:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004852:	2300      	movs	r3, #0
 8004854:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10a      	bne.n	8004872 <xTimerGenericCommand+0x2e>
	__asm volatile
 800485c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004860:	f383 8811 	msr	BASEPRI, r3
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	623b      	str	r3, [r7, #32]
}
 800486e:	bf00      	nop
 8004870:	e7fe      	b.n	8004870 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004872:	4b1a      	ldr	r3, [pc, #104]	; (80048dc <xTimerGenericCommand+0x98>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d02a      	beq.n	80048d0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	2b05      	cmp	r3, #5
 800488a:	dc18      	bgt.n	80048be <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800488c:	f7ff fd7c 	bl	8004388 <xTaskGetSchedulerState>
 8004890:	4603      	mov	r3, r0
 8004892:	2b02      	cmp	r3, #2
 8004894:	d109      	bne.n	80048aa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004896:	4b11      	ldr	r3, [pc, #68]	; (80048dc <xTimerGenericCommand+0x98>)
 8004898:	6818      	ldr	r0, [r3, #0]
 800489a:	f107 0110 	add.w	r1, r7, #16
 800489e:	2300      	movs	r3, #0
 80048a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048a2:	f7fe fb59 	bl	8002f58 <xQueueGenericSend>
 80048a6:	6278      	str	r0, [r7, #36]	; 0x24
 80048a8:	e012      	b.n	80048d0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80048aa:	4b0c      	ldr	r3, [pc, #48]	; (80048dc <xTimerGenericCommand+0x98>)
 80048ac:	6818      	ldr	r0, [r3, #0]
 80048ae:	f107 0110 	add.w	r1, r7, #16
 80048b2:	2300      	movs	r3, #0
 80048b4:	2200      	movs	r2, #0
 80048b6:	f7fe fb4f 	bl	8002f58 <xQueueGenericSend>
 80048ba:	6278      	str	r0, [r7, #36]	; 0x24
 80048bc:	e008      	b.n	80048d0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80048be:	4b07      	ldr	r3, [pc, #28]	; (80048dc <xTimerGenericCommand+0x98>)
 80048c0:	6818      	ldr	r0, [r3, #0]
 80048c2:	f107 0110 	add.w	r1, r7, #16
 80048c6:	2300      	movs	r3, #0
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	f7fe fc43 	bl	8003154 <xQueueGenericSendFromISR>
 80048ce:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3728      	adds	r7, #40	; 0x28
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	20001604 	.word	0x20001604

080048e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b088      	sub	sp, #32
 80048e4:	af02      	add	r7, sp, #8
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048ea:	4b22      	ldr	r3, [pc, #136]	; (8004974 <prvProcessExpiredTimer+0x94>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	3304      	adds	r3, #4
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7fe f9ff 	bl	8002cfc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004904:	f003 0304 	and.w	r3, r3, #4
 8004908:	2b00      	cmp	r3, #0
 800490a:	d022      	beq.n	8004952 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	699a      	ldr	r2, [r3, #24]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	18d1      	adds	r1, r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	6978      	ldr	r0, [r7, #20]
 800491a:	f000 f8d1 	bl	8004ac0 <prvInsertTimerInActiveList>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d01f      	beq.n	8004964 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004924:	2300      	movs	r3, #0
 8004926:	9300      	str	r3, [sp, #0]
 8004928:	2300      	movs	r3, #0
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	2100      	movs	r1, #0
 800492e:	6978      	ldr	r0, [r7, #20]
 8004930:	f7ff ff88 	bl	8004844 <xTimerGenericCommand>
 8004934:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d113      	bne.n	8004964 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800493c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004940:	f383 8811 	msr	BASEPRI, r3
 8004944:	f3bf 8f6f 	isb	sy
 8004948:	f3bf 8f4f 	dsb	sy
 800494c:	60fb      	str	r3, [r7, #12]
}
 800494e:	bf00      	nop
 8004950:	e7fe      	b.n	8004950 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004958:	f023 0301 	bic.w	r3, r3, #1
 800495c:	b2da      	uxtb	r2, r3
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	6a1b      	ldr	r3, [r3, #32]
 8004968:	6978      	ldr	r0, [r7, #20]
 800496a:	4798      	blx	r3
}
 800496c:	bf00      	nop
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	200015fc 	.word	0x200015fc

08004978 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004980:	f107 0308 	add.w	r3, r7, #8
 8004984:	4618      	mov	r0, r3
 8004986:	f000 f857 	bl	8004a38 <prvGetNextExpireTime>
 800498a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	4619      	mov	r1, r3
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f000 f803 	bl	800499c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004996:	f000 f8d5 	bl	8004b44 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800499a:	e7f1      	b.n	8004980 <prvTimerTask+0x8>

0800499c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80049a6:	f7ff f8fb 	bl	8003ba0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80049aa:	f107 0308 	add.w	r3, r7, #8
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 f866 	bl	8004a80 <prvSampleTimeNow>
 80049b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d130      	bne.n	8004a1e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10a      	bne.n	80049d8 <prvProcessTimerOrBlockTask+0x3c>
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d806      	bhi.n	80049d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80049ca:	f7ff f8f7 	bl	8003bbc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80049ce:	68f9      	ldr	r1, [r7, #12]
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f7ff ff85 	bl	80048e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80049d6:	e024      	b.n	8004a22 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d008      	beq.n	80049f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80049de:	4b13      	ldr	r3, [pc, #76]	; (8004a2c <prvProcessTimerOrBlockTask+0x90>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d101      	bne.n	80049ec <prvProcessTimerOrBlockTask+0x50>
 80049e8:	2301      	movs	r3, #1
 80049ea:	e000      	b.n	80049ee <prvProcessTimerOrBlockTask+0x52>
 80049ec:	2300      	movs	r3, #0
 80049ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80049f0:	4b0f      	ldr	r3, [pc, #60]	; (8004a30 <prvProcessTimerOrBlockTask+0x94>)
 80049f2:	6818      	ldr	r0, [r3, #0]
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	4619      	mov	r1, r3
 80049fe:	f7fe fe5f 	bl	80036c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004a02:	f7ff f8db 	bl	8003bbc <xTaskResumeAll>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d10a      	bne.n	8004a22 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004a0c:	4b09      	ldr	r3, [pc, #36]	; (8004a34 <prvProcessTimerOrBlockTask+0x98>)
 8004a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a12:	601a      	str	r2, [r3, #0]
 8004a14:	f3bf 8f4f 	dsb	sy
 8004a18:	f3bf 8f6f 	isb	sy
}
 8004a1c:	e001      	b.n	8004a22 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004a1e:	f7ff f8cd 	bl	8003bbc <xTaskResumeAll>
}
 8004a22:	bf00      	nop
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	20001600 	.word	0x20001600
 8004a30:	20001604 	.word	0x20001604
 8004a34:	e000ed04 	.word	0xe000ed04

08004a38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004a40:	4b0e      	ldr	r3, [pc, #56]	; (8004a7c <prvGetNextExpireTime+0x44>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <prvGetNextExpireTime+0x16>
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	e000      	b.n	8004a50 <prvGetNextExpireTime+0x18>
 8004a4e:	2200      	movs	r2, #0
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d105      	bne.n	8004a68 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a5c:	4b07      	ldr	r3, [pc, #28]	; (8004a7c <prvGetNextExpireTime+0x44>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	60fb      	str	r3, [r7, #12]
 8004a66:	e001      	b.n	8004a6c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3714      	adds	r7, #20
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	200015fc 	.word	0x200015fc

08004a80 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004a88:	f7ff f936 	bl	8003cf8 <xTaskGetTickCount>
 8004a8c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004a8e:	4b0b      	ldr	r3, [pc, #44]	; (8004abc <prvSampleTimeNow+0x3c>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d205      	bcs.n	8004aa4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004a98:	f000 f936 	bl	8004d08 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]
 8004aa2:	e002      	b.n	8004aaa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004aaa:	4a04      	ldr	r2, [pc, #16]	; (8004abc <prvSampleTimeNow+0x3c>)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	2000160c 	.word	0x2000160c

08004ac0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
 8004acc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d812      	bhi.n	8004b0c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	1ad2      	subs	r2, r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d302      	bcc.n	8004afa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004af4:	2301      	movs	r3, #1
 8004af6:	617b      	str	r3, [r7, #20]
 8004af8:	e01b      	b.n	8004b32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004afa:	4b10      	ldr	r3, [pc, #64]	; (8004b3c <prvInsertTimerInActiveList+0x7c>)
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	3304      	adds	r3, #4
 8004b02:	4619      	mov	r1, r3
 8004b04:	4610      	mov	r0, r2
 8004b06:	f7fe f8c0 	bl	8002c8a <vListInsert>
 8004b0a:	e012      	b.n	8004b32 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d206      	bcs.n	8004b22 <prvInsertTimerInActiveList+0x62>
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d302      	bcc.n	8004b22 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	617b      	str	r3, [r7, #20]
 8004b20:	e007      	b.n	8004b32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b22:	4b07      	ldr	r3, [pc, #28]	; (8004b40 <prvInsertTimerInActiveList+0x80>)
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	3304      	adds	r3, #4
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	4610      	mov	r0, r2
 8004b2e:	f7fe f8ac 	bl	8002c8a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004b32:	697b      	ldr	r3, [r7, #20]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3718      	adds	r7, #24
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	20001600 	.word	0x20001600
 8004b40:	200015fc 	.word	0x200015fc

08004b44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b08e      	sub	sp, #56	; 0x38
 8004b48:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b4a:	e0ca      	b.n	8004ce2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	da18      	bge.n	8004b84 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004b52:	1d3b      	adds	r3, r7, #4
 8004b54:	3304      	adds	r3, #4
 8004b56:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10a      	bne.n	8004b74 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b62:	f383 8811 	msr	BASEPRI, r3
 8004b66:	f3bf 8f6f 	isb	sy
 8004b6a:	f3bf 8f4f 	dsb	sy
 8004b6e:	61fb      	str	r3, [r7, #28]
}
 8004b70:	bf00      	nop
 8004b72:	e7fe      	b.n	8004b72 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b7a:	6850      	ldr	r0, [r2, #4]
 8004b7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b7e:	6892      	ldr	r2, [r2, #8]
 8004b80:	4611      	mov	r1, r2
 8004b82:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f2c0 80ab 	blt.w	8004ce2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d004      	beq.n	8004ba2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9a:	3304      	adds	r3, #4
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7fe f8ad 	bl	8002cfc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ba2:	463b      	mov	r3, r7
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7ff ff6b 	bl	8004a80 <prvSampleTimeNow>
 8004baa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b09      	cmp	r3, #9
 8004bb0:	f200 8096 	bhi.w	8004ce0 <prvProcessReceivedCommands+0x19c>
 8004bb4:	a201      	add	r2, pc, #4	; (adr r2, 8004bbc <prvProcessReceivedCommands+0x78>)
 8004bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bba:	bf00      	nop
 8004bbc:	08004be5 	.word	0x08004be5
 8004bc0:	08004be5 	.word	0x08004be5
 8004bc4:	08004be5 	.word	0x08004be5
 8004bc8:	08004c59 	.word	0x08004c59
 8004bcc:	08004c6d 	.word	0x08004c6d
 8004bd0:	08004cb7 	.word	0x08004cb7
 8004bd4:	08004be5 	.word	0x08004be5
 8004bd8:	08004be5 	.word	0x08004be5
 8004bdc:	08004c59 	.word	0x08004c59
 8004be0:	08004c6d 	.word	0x08004c6d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bea:	f043 0301 	orr.w	r3, r3, #1
 8004bee:	b2da      	uxtb	r2, r3
 8004bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	18d1      	adds	r1, r2, r3
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c04:	f7ff ff5c 	bl	8004ac0 <prvInsertTimerInActiveList>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d069      	beq.n	8004ce2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c14:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c1c:	f003 0304 	and.w	r3, r3, #4
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d05e      	beq.n	8004ce2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	441a      	add	r2, r3
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	2300      	movs	r3, #0
 8004c32:	2100      	movs	r1, #0
 8004c34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c36:	f7ff fe05 	bl	8004844 <xTimerGenericCommand>
 8004c3a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004c3c:	6a3b      	ldr	r3, [r7, #32]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d14f      	bne.n	8004ce2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c46:	f383 8811 	msr	BASEPRI, r3
 8004c4a:	f3bf 8f6f 	isb	sy
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	61bb      	str	r3, [r7, #24]
}
 8004c54:	bf00      	nop
 8004c56:	e7fe      	b.n	8004c56 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c5e:	f023 0301 	bic.w	r3, r3, #1
 8004c62:	b2da      	uxtb	r2, r3
 8004c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004c6a:	e03a      	b.n	8004ce2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c72:	f043 0301 	orr.w	r3, r3, #1
 8004c76:	b2da      	uxtb	r2, r3
 8004c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004c7e:	68ba      	ldr	r2, [r7, #8]
 8004c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c82:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10a      	bne.n	8004ca2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c90:	f383 8811 	msr	BASEPRI, r3
 8004c94:	f3bf 8f6f 	isb	sy
 8004c98:	f3bf 8f4f 	dsb	sy
 8004c9c:	617b      	str	r3, [r7, #20]
}
 8004c9e:	bf00      	nop
 8004ca0:	e7fe      	b.n	8004ca0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca4:	699a      	ldr	r2, [r3, #24]
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	18d1      	adds	r1, r2, r3
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cb0:	f7ff ff06 	bl	8004ac0 <prvInsertTimerInActiveList>
					break;
 8004cb4:	e015      	b.n	8004ce2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d103      	bne.n	8004ccc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004cc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cc6:	f000 fbdb 	bl	8005480 <vPortFree>
 8004cca:	e00a      	b.n	8004ce2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cd2:	f023 0301 	bic.w	r3, r3, #1
 8004cd6:	b2da      	uxtb	r2, r3
 8004cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004cde:	e000      	b.n	8004ce2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004ce0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ce2:	4b08      	ldr	r3, [pc, #32]	; (8004d04 <prvProcessReceivedCommands+0x1c0>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	1d39      	adds	r1, r7, #4
 8004ce8:	2200      	movs	r2, #0
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7fe face 	bl	800328c <xQueueReceive>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f47f af2a 	bne.w	8004b4c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004cf8:	bf00      	nop
 8004cfa:	bf00      	nop
 8004cfc:	3730      	adds	r7, #48	; 0x30
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	20001604 	.word	0x20001604

08004d08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b088      	sub	sp, #32
 8004d0c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d0e:	e048      	b.n	8004da2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d10:	4b2d      	ldr	r3, [pc, #180]	; (8004dc8 <prvSwitchTimerLists+0xc0>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d1a:	4b2b      	ldr	r3, [pc, #172]	; (8004dc8 <prvSwitchTimerLists+0xc0>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	3304      	adds	r3, #4
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7fd ffe7 	bl	8002cfc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d3c:	f003 0304 	and.w	r3, r3, #4
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d02e      	beq.n	8004da2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d90e      	bls.n	8004d74 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	68ba      	ldr	r2, [r7, #8]
 8004d5a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d62:	4b19      	ldr	r3, [pc, #100]	; (8004dc8 <prvSwitchTimerLists+0xc0>)
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	3304      	adds	r3, #4
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	4610      	mov	r0, r2
 8004d6e:	f7fd ff8c 	bl	8002c8a <vListInsert>
 8004d72:	e016      	b.n	8004da2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d74:	2300      	movs	r3, #0
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	2300      	movs	r3, #0
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f7ff fd60 	bl	8004844 <xTimerGenericCommand>
 8004d84:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10a      	bne.n	8004da2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d90:	f383 8811 	msr	BASEPRI, r3
 8004d94:	f3bf 8f6f 	isb	sy
 8004d98:	f3bf 8f4f 	dsb	sy
 8004d9c:	603b      	str	r3, [r7, #0]
}
 8004d9e:	bf00      	nop
 8004da0:	e7fe      	b.n	8004da0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004da2:	4b09      	ldr	r3, [pc, #36]	; (8004dc8 <prvSwitchTimerLists+0xc0>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1b1      	bne.n	8004d10 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004dac:	4b06      	ldr	r3, [pc, #24]	; (8004dc8 <prvSwitchTimerLists+0xc0>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004db2:	4b06      	ldr	r3, [pc, #24]	; (8004dcc <prvSwitchTimerLists+0xc4>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a04      	ldr	r2, [pc, #16]	; (8004dc8 <prvSwitchTimerLists+0xc0>)
 8004db8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004dba:	4a04      	ldr	r2, [pc, #16]	; (8004dcc <prvSwitchTimerLists+0xc4>)
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	6013      	str	r3, [r2, #0]
}
 8004dc0:	bf00      	nop
 8004dc2:	3718      	adds	r7, #24
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	200015fc 	.word	0x200015fc
 8004dcc:	20001600 	.word	0x20001600

08004dd0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004dd6:	f000 f965 	bl	80050a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004dda:	4b15      	ldr	r3, [pc, #84]	; (8004e30 <prvCheckForValidListAndQueue+0x60>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d120      	bne.n	8004e24 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004de2:	4814      	ldr	r0, [pc, #80]	; (8004e34 <prvCheckForValidListAndQueue+0x64>)
 8004de4:	f7fd ff00 	bl	8002be8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004de8:	4813      	ldr	r0, [pc, #76]	; (8004e38 <prvCheckForValidListAndQueue+0x68>)
 8004dea:	f7fd fefd 	bl	8002be8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004dee:	4b13      	ldr	r3, [pc, #76]	; (8004e3c <prvCheckForValidListAndQueue+0x6c>)
 8004df0:	4a10      	ldr	r2, [pc, #64]	; (8004e34 <prvCheckForValidListAndQueue+0x64>)
 8004df2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004df4:	4b12      	ldr	r3, [pc, #72]	; (8004e40 <prvCheckForValidListAndQueue+0x70>)
 8004df6:	4a10      	ldr	r2, [pc, #64]	; (8004e38 <prvCheckForValidListAndQueue+0x68>)
 8004df8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	4b11      	ldr	r3, [pc, #68]	; (8004e44 <prvCheckForValidListAndQueue+0x74>)
 8004e00:	4a11      	ldr	r2, [pc, #68]	; (8004e48 <prvCheckForValidListAndQueue+0x78>)
 8004e02:	2110      	movs	r1, #16
 8004e04:	200a      	movs	r0, #10
 8004e06:	f7fe f80b 	bl	8002e20 <xQueueGenericCreateStatic>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	4a08      	ldr	r2, [pc, #32]	; (8004e30 <prvCheckForValidListAndQueue+0x60>)
 8004e0e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004e10:	4b07      	ldr	r3, [pc, #28]	; (8004e30 <prvCheckForValidListAndQueue+0x60>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d005      	beq.n	8004e24 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004e18:	4b05      	ldr	r3, [pc, #20]	; (8004e30 <prvCheckForValidListAndQueue+0x60>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	490b      	ldr	r1, [pc, #44]	; (8004e4c <prvCheckForValidListAndQueue+0x7c>)
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7fe fc24 	bl	800366c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e24:	f000 f96e 	bl	8005104 <vPortExitCritical>
}
 8004e28:	bf00      	nop
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	20001604 	.word	0x20001604
 8004e34:	200015d4 	.word	0x200015d4
 8004e38:	200015e8 	.word	0x200015e8
 8004e3c:	200015fc 	.word	0x200015fc
 8004e40:	20001600 	.word	0x20001600
 8004e44:	200016b0 	.word	0x200016b0
 8004e48:	20001610 	.word	0x20001610
 8004e4c:	0800c5b0 	.word	0x0800c5b0

08004e50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	3b04      	subs	r3, #4
 8004e60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	3b04      	subs	r3, #4
 8004e6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	f023 0201 	bic.w	r2, r3, #1
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	3b04      	subs	r3, #4
 8004e7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e80:	4a0c      	ldr	r2, [pc, #48]	; (8004eb4 <pxPortInitialiseStack+0x64>)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	3b14      	subs	r3, #20
 8004e8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	3b04      	subs	r3, #4
 8004e96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f06f 0202 	mvn.w	r2, #2
 8004e9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	3b20      	subs	r3, #32
 8004ea4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3714      	adds	r7, #20
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	08004eb9 	.word	0x08004eb9

08004eb8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004ec2:	4b12      	ldr	r3, [pc, #72]	; (8004f0c <prvTaskExitError+0x54>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004eca:	d00a      	beq.n	8004ee2 <prvTaskExitError+0x2a>
	__asm volatile
 8004ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed0:	f383 8811 	msr	BASEPRI, r3
 8004ed4:	f3bf 8f6f 	isb	sy
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	60fb      	str	r3, [r7, #12]
}
 8004ede:	bf00      	nop
 8004ee0:	e7fe      	b.n	8004ee0 <prvTaskExitError+0x28>
	__asm volatile
 8004ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee6:	f383 8811 	msr	BASEPRI, r3
 8004eea:	f3bf 8f6f 	isb	sy
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	60bb      	str	r3, [r7, #8]
}
 8004ef4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004ef6:	bf00      	nop
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d0fc      	beq.n	8004ef8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004efe:	bf00      	nop
 8004f00:	bf00      	nop
 8004f02:	3714      	adds	r7, #20
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr
 8004f0c:	20000088 	.word	0x20000088

08004f10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004f10:	4b07      	ldr	r3, [pc, #28]	; (8004f30 <pxCurrentTCBConst2>)
 8004f12:	6819      	ldr	r1, [r3, #0]
 8004f14:	6808      	ldr	r0, [r1, #0]
 8004f16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f1a:	f380 8809 	msr	PSP, r0
 8004f1e:	f3bf 8f6f 	isb	sy
 8004f22:	f04f 0000 	mov.w	r0, #0
 8004f26:	f380 8811 	msr	BASEPRI, r0
 8004f2a:	4770      	bx	lr
 8004f2c:	f3af 8000 	nop.w

08004f30 <pxCurrentTCBConst2>:
 8004f30:	200010d4 	.word	0x200010d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004f34:	bf00      	nop
 8004f36:	bf00      	nop

08004f38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004f38:	4808      	ldr	r0, [pc, #32]	; (8004f5c <prvPortStartFirstTask+0x24>)
 8004f3a:	6800      	ldr	r0, [r0, #0]
 8004f3c:	6800      	ldr	r0, [r0, #0]
 8004f3e:	f380 8808 	msr	MSP, r0
 8004f42:	f04f 0000 	mov.w	r0, #0
 8004f46:	f380 8814 	msr	CONTROL, r0
 8004f4a:	b662      	cpsie	i
 8004f4c:	b661      	cpsie	f
 8004f4e:	f3bf 8f4f 	dsb	sy
 8004f52:	f3bf 8f6f 	isb	sy
 8004f56:	df00      	svc	0
 8004f58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004f5a:	bf00      	nop
 8004f5c:	e000ed08 	.word	0xe000ed08

08004f60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004f66:	4b46      	ldr	r3, [pc, #280]	; (8005080 <xPortStartScheduler+0x120>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a46      	ldr	r2, [pc, #280]	; (8005084 <xPortStartScheduler+0x124>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d10a      	bne.n	8004f86 <xPortStartScheduler+0x26>
	__asm volatile
 8004f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f74:	f383 8811 	msr	BASEPRI, r3
 8004f78:	f3bf 8f6f 	isb	sy
 8004f7c:	f3bf 8f4f 	dsb	sy
 8004f80:	613b      	str	r3, [r7, #16]
}
 8004f82:	bf00      	nop
 8004f84:	e7fe      	b.n	8004f84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f86:	4b3e      	ldr	r3, [pc, #248]	; (8005080 <xPortStartScheduler+0x120>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a3f      	ldr	r2, [pc, #252]	; (8005088 <xPortStartScheduler+0x128>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d10a      	bne.n	8004fa6 <xPortStartScheduler+0x46>
	__asm volatile
 8004f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f94:	f383 8811 	msr	BASEPRI, r3
 8004f98:	f3bf 8f6f 	isb	sy
 8004f9c:	f3bf 8f4f 	dsb	sy
 8004fa0:	60fb      	str	r3, [r7, #12]
}
 8004fa2:	bf00      	nop
 8004fa4:	e7fe      	b.n	8004fa4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004fa6:	4b39      	ldr	r3, [pc, #228]	; (800508c <xPortStartScheduler+0x12c>)
 8004fa8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	22ff      	movs	r2, #255	; 0xff
 8004fb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004fc0:	78fb      	ldrb	r3, [r7, #3]
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004fc8:	b2da      	uxtb	r2, r3
 8004fca:	4b31      	ldr	r3, [pc, #196]	; (8005090 <xPortStartScheduler+0x130>)
 8004fcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004fce:	4b31      	ldr	r3, [pc, #196]	; (8005094 <xPortStartScheduler+0x134>)
 8004fd0:	2207      	movs	r2, #7
 8004fd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fd4:	e009      	b.n	8004fea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004fd6:	4b2f      	ldr	r3, [pc, #188]	; (8005094 <xPortStartScheduler+0x134>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	4a2d      	ldr	r2, [pc, #180]	; (8005094 <xPortStartScheduler+0x134>)
 8004fde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004fe0:	78fb      	ldrb	r3, [r7, #3]
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	005b      	lsls	r3, r3, #1
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fea:	78fb      	ldrb	r3, [r7, #3]
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff2:	2b80      	cmp	r3, #128	; 0x80
 8004ff4:	d0ef      	beq.n	8004fd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ff6:	4b27      	ldr	r3, [pc, #156]	; (8005094 <xPortStartScheduler+0x134>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f1c3 0307 	rsb	r3, r3, #7
 8004ffe:	2b04      	cmp	r3, #4
 8005000:	d00a      	beq.n	8005018 <xPortStartScheduler+0xb8>
	__asm volatile
 8005002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005006:	f383 8811 	msr	BASEPRI, r3
 800500a:	f3bf 8f6f 	isb	sy
 800500e:	f3bf 8f4f 	dsb	sy
 8005012:	60bb      	str	r3, [r7, #8]
}
 8005014:	bf00      	nop
 8005016:	e7fe      	b.n	8005016 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005018:	4b1e      	ldr	r3, [pc, #120]	; (8005094 <xPortStartScheduler+0x134>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	021b      	lsls	r3, r3, #8
 800501e:	4a1d      	ldr	r2, [pc, #116]	; (8005094 <xPortStartScheduler+0x134>)
 8005020:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005022:	4b1c      	ldr	r3, [pc, #112]	; (8005094 <xPortStartScheduler+0x134>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800502a:	4a1a      	ldr	r2, [pc, #104]	; (8005094 <xPortStartScheduler+0x134>)
 800502c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	b2da      	uxtb	r2, r3
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005036:	4b18      	ldr	r3, [pc, #96]	; (8005098 <xPortStartScheduler+0x138>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a17      	ldr	r2, [pc, #92]	; (8005098 <xPortStartScheduler+0x138>)
 800503c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005040:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005042:	4b15      	ldr	r3, [pc, #84]	; (8005098 <xPortStartScheduler+0x138>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a14      	ldr	r2, [pc, #80]	; (8005098 <xPortStartScheduler+0x138>)
 8005048:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800504c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800504e:	f000 f8dd 	bl	800520c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005052:	4b12      	ldr	r3, [pc, #72]	; (800509c <xPortStartScheduler+0x13c>)
 8005054:	2200      	movs	r2, #0
 8005056:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005058:	f000 f8fc 	bl	8005254 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800505c:	4b10      	ldr	r3, [pc, #64]	; (80050a0 <xPortStartScheduler+0x140>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a0f      	ldr	r2, [pc, #60]	; (80050a0 <xPortStartScheduler+0x140>)
 8005062:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005066:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005068:	f7ff ff66 	bl	8004f38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800506c:	f7fe ff20 	bl	8003eb0 <vTaskSwitchContext>
	prvTaskExitError();
 8005070:	f7ff ff22 	bl	8004eb8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3718      	adds	r7, #24
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	e000ed00 	.word	0xe000ed00
 8005084:	410fc271 	.word	0x410fc271
 8005088:	410fc270 	.word	0x410fc270
 800508c:	e000e400 	.word	0xe000e400
 8005090:	20001700 	.word	0x20001700
 8005094:	20001704 	.word	0x20001704
 8005098:	e000ed20 	.word	0xe000ed20
 800509c:	20000088 	.word	0x20000088
 80050a0:	e000ef34 	.word	0xe000ef34

080050a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
	__asm volatile
 80050aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ae:	f383 8811 	msr	BASEPRI, r3
 80050b2:	f3bf 8f6f 	isb	sy
 80050b6:	f3bf 8f4f 	dsb	sy
 80050ba:	607b      	str	r3, [r7, #4]
}
 80050bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80050be:	4b0f      	ldr	r3, [pc, #60]	; (80050fc <vPortEnterCritical+0x58>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	3301      	adds	r3, #1
 80050c4:	4a0d      	ldr	r2, [pc, #52]	; (80050fc <vPortEnterCritical+0x58>)
 80050c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80050c8:	4b0c      	ldr	r3, [pc, #48]	; (80050fc <vPortEnterCritical+0x58>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d10f      	bne.n	80050f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80050d0:	4b0b      	ldr	r3, [pc, #44]	; (8005100 <vPortEnterCritical+0x5c>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00a      	beq.n	80050f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80050da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050de:	f383 8811 	msr	BASEPRI, r3
 80050e2:	f3bf 8f6f 	isb	sy
 80050e6:	f3bf 8f4f 	dsb	sy
 80050ea:	603b      	str	r3, [r7, #0]
}
 80050ec:	bf00      	nop
 80050ee:	e7fe      	b.n	80050ee <vPortEnterCritical+0x4a>
	}
}
 80050f0:	bf00      	nop
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	20000088 	.word	0x20000088
 8005100:	e000ed04 	.word	0xe000ed04

08005104 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800510a:	4b12      	ldr	r3, [pc, #72]	; (8005154 <vPortExitCritical+0x50>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10a      	bne.n	8005128 <vPortExitCritical+0x24>
	__asm volatile
 8005112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005116:	f383 8811 	msr	BASEPRI, r3
 800511a:	f3bf 8f6f 	isb	sy
 800511e:	f3bf 8f4f 	dsb	sy
 8005122:	607b      	str	r3, [r7, #4]
}
 8005124:	bf00      	nop
 8005126:	e7fe      	b.n	8005126 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005128:	4b0a      	ldr	r3, [pc, #40]	; (8005154 <vPortExitCritical+0x50>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	3b01      	subs	r3, #1
 800512e:	4a09      	ldr	r2, [pc, #36]	; (8005154 <vPortExitCritical+0x50>)
 8005130:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005132:	4b08      	ldr	r3, [pc, #32]	; (8005154 <vPortExitCritical+0x50>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d105      	bne.n	8005146 <vPortExitCritical+0x42>
 800513a:	2300      	movs	r3, #0
 800513c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	f383 8811 	msr	BASEPRI, r3
}
 8005144:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005146:	bf00      	nop
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	20000088 	.word	0x20000088
	...

08005160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005160:	f3ef 8009 	mrs	r0, PSP
 8005164:	f3bf 8f6f 	isb	sy
 8005168:	4b15      	ldr	r3, [pc, #84]	; (80051c0 <pxCurrentTCBConst>)
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	f01e 0f10 	tst.w	lr, #16
 8005170:	bf08      	it	eq
 8005172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800517a:	6010      	str	r0, [r2, #0]
 800517c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005180:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005184:	f380 8811 	msr	BASEPRI, r0
 8005188:	f3bf 8f4f 	dsb	sy
 800518c:	f3bf 8f6f 	isb	sy
 8005190:	f7fe fe8e 	bl	8003eb0 <vTaskSwitchContext>
 8005194:	f04f 0000 	mov.w	r0, #0
 8005198:	f380 8811 	msr	BASEPRI, r0
 800519c:	bc09      	pop	{r0, r3}
 800519e:	6819      	ldr	r1, [r3, #0]
 80051a0:	6808      	ldr	r0, [r1, #0]
 80051a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a6:	f01e 0f10 	tst.w	lr, #16
 80051aa:	bf08      	it	eq
 80051ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80051b0:	f380 8809 	msr	PSP, r0
 80051b4:	f3bf 8f6f 	isb	sy
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	f3af 8000 	nop.w

080051c0 <pxCurrentTCBConst>:
 80051c0:	200010d4 	.word	0x200010d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80051c4:	bf00      	nop
 80051c6:	bf00      	nop

080051c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
	__asm volatile
 80051ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d2:	f383 8811 	msr	BASEPRI, r3
 80051d6:	f3bf 8f6f 	isb	sy
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	607b      	str	r3, [r7, #4]
}
 80051e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80051e2:	f7fe fdab 	bl	8003d3c <xTaskIncrementTick>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d003      	beq.n	80051f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80051ec:	4b06      	ldr	r3, [pc, #24]	; (8005208 <xPortSysTickHandler+0x40>)
 80051ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051f2:	601a      	str	r2, [r3, #0]
 80051f4:	2300      	movs	r3, #0
 80051f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	f383 8811 	msr	BASEPRI, r3
}
 80051fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005200:	bf00      	nop
 8005202:	3708      	adds	r7, #8
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	e000ed04 	.word	0xe000ed04

0800520c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800520c:	b480      	push	{r7}
 800520e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005210:	4b0b      	ldr	r3, [pc, #44]	; (8005240 <vPortSetupTimerInterrupt+0x34>)
 8005212:	2200      	movs	r2, #0
 8005214:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005216:	4b0b      	ldr	r3, [pc, #44]	; (8005244 <vPortSetupTimerInterrupt+0x38>)
 8005218:	2200      	movs	r2, #0
 800521a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800521c:	4b0a      	ldr	r3, [pc, #40]	; (8005248 <vPortSetupTimerInterrupt+0x3c>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a0a      	ldr	r2, [pc, #40]	; (800524c <vPortSetupTimerInterrupt+0x40>)
 8005222:	fba2 2303 	umull	r2, r3, r2, r3
 8005226:	099b      	lsrs	r3, r3, #6
 8005228:	4a09      	ldr	r2, [pc, #36]	; (8005250 <vPortSetupTimerInterrupt+0x44>)
 800522a:	3b01      	subs	r3, #1
 800522c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800522e:	4b04      	ldr	r3, [pc, #16]	; (8005240 <vPortSetupTimerInterrupt+0x34>)
 8005230:	2207      	movs	r2, #7
 8005232:	601a      	str	r2, [r3, #0]
}
 8005234:	bf00      	nop
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	e000e010 	.word	0xe000e010
 8005244:	e000e018 	.word	0xe000e018
 8005248:	20000094 	.word	0x20000094
 800524c:	10624dd3 	.word	0x10624dd3
 8005250:	e000e014 	.word	0xe000e014

08005254 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005254:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005264 <vPortEnableVFP+0x10>
 8005258:	6801      	ldr	r1, [r0, #0]
 800525a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800525e:	6001      	str	r1, [r0, #0]
 8005260:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005262:	bf00      	nop
 8005264:	e000ed88 	.word	0xe000ed88

08005268 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800526e:	f3ef 8305 	mrs	r3, IPSR
 8005272:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2b0f      	cmp	r3, #15
 8005278:	d914      	bls.n	80052a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800527a:	4a17      	ldr	r2, [pc, #92]	; (80052d8 <vPortValidateInterruptPriority+0x70>)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4413      	add	r3, r2
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005284:	4b15      	ldr	r3, [pc, #84]	; (80052dc <vPortValidateInterruptPriority+0x74>)
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	7afa      	ldrb	r2, [r7, #11]
 800528a:	429a      	cmp	r2, r3
 800528c:	d20a      	bcs.n	80052a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800528e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005292:	f383 8811 	msr	BASEPRI, r3
 8005296:	f3bf 8f6f 	isb	sy
 800529a:	f3bf 8f4f 	dsb	sy
 800529e:	607b      	str	r3, [r7, #4]
}
 80052a0:	bf00      	nop
 80052a2:	e7fe      	b.n	80052a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80052a4:	4b0e      	ldr	r3, [pc, #56]	; (80052e0 <vPortValidateInterruptPriority+0x78>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80052ac:	4b0d      	ldr	r3, [pc, #52]	; (80052e4 <vPortValidateInterruptPriority+0x7c>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d90a      	bls.n	80052ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80052b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b8:	f383 8811 	msr	BASEPRI, r3
 80052bc:	f3bf 8f6f 	isb	sy
 80052c0:	f3bf 8f4f 	dsb	sy
 80052c4:	603b      	str	r3, [r7, #0]
}
 80052c6:	bf00      	nop
 80052c8:	e7fe      	b.n	80052c8 <vPortValidateInterruptPriority+0x60>
	}
 80052ca:	bf00      	nop
 80052cc:	3714      	adds	r7, #20
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	e000e3f0 	.word	0xe000e3f0
 80052dc:	20001700 	.word	0x20001700
 80052e0:	e000ed0c 	.word	0xe000ed0c
 80052e4:	20001704 	.word	0x20001704

080052e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b08a      	sub	sp, #40	; 0x28
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80052f0:	2300      	movs	r3, #0
 80052f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80052f4:	f7fe fc54 	bl	8003ba0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80052f8:	4b5b      	ldr	r3, [pc, #364]	; (8005468 <pvPortMalloc+0x180>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d101      	bne.n	8005304 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005300:	f000 f920 	bl	8005544 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005304:	4b59      	ldr	r3, [pc, #356]	; (800546c <pvPortMalloc+0x184>)
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4013      	ands	r3, r2
 800530c:	2b00      	cmp	r3, #0
 800530e:	f040 8093 	bne.w	8005438 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d01d      	beq.n	8005354 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005318:	2208      	movs	r2, #8
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4413      	add	r3, r2
 800531e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f003 0307 	and.w	r3, r3, #7
 8005326:	2b00      	cmp	r3, #0
 8005328:	d014      	beq.n	8005354 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f023 0307 	bic.w	r3, r3, #7
 8005330:	3308      	adds	r3, #8
 8005332:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f003 0307 	and.w	r3, r3, #7
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00a      	beq.n	8005354 <pvPortMalloc+0x6c>
	__asm volatile
 800533e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005342:	f383 8811 	msr	BASEPRI, r3
 8005346:	f3bf 8f6f 	isb	sy
 800534a:	f3bf 8f4f 	dsb	sy
 800534e:	617b      	str	r3, [r7, #20]
}
 8005350:	bf00      	nop
 8005352:	e7fe      	b.n	8005352 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d06e      	beq.n	8005438 <pvPortMalloc+0x150>
 800535a:	4b45      	ldr	r3, [pc, #276]	; (8005470 <pvPortMalloc+0x188>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	429a      	cmp	r2, r3
 8005362:	d869      	bhi.n	8005438 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005364:	4b43      	ldr	r3, [pc, #268]	; (8005474 <pvPortMalloc+0x18c>)
 8005366:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005368:	4b42      	ldr	r3, [pc, #264]	; (8005474 <pvPortMalloc+0x18c>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800536e:	e004      	b.n	800537a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005372:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800537a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	429a      	cmp	r2, r3
 8005382:	d903      	bls.n	800538c <pvPortMalloc+0xa4>
 8005384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1f1      	bne.n	8005370 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800538c:	4b36      	ldr	r3, [pc, #216]	; (8005468 <pvPortMalloc+0x180>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005392:	429a      	cmp	r2, r3
 8005394:	d050      	beq.n	8005438 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005396:	6a3b      	ldr	r3, [r7, #32]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2208      	movs	r2, #8
 800539c:	4413      	add	r3, r2
 800539e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80053a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80053a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053aa:	685a      	ldr	r2, [r3, #4]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	1ad2      	subs	r2, r2, r3
 80053b0:	2308      	movs	r3, #8
 80053b2:	005b      	lsls	r3, r3, #1
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d91f      	bls.n	80053f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80053b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4413      	add	r3, r2
 80053be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	f003 0307 	and.w	r3, r3, #7
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00a      	beq.n	80053e0 <pvPortMalloc+0xf8>
	__asm volatile
 80053ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ce:	f383 8811 	msr	BASEPRI, r3
 80053d2:	f3bf 8f6f 	isb	sy
 80053d6:	f3bf 8f4f 	dsb	sy
 80053da:	613b      	str	r3, [r7, #16]
}
 80053dc:	bf00      	nop
 80053de:	e7fe      	b.n	80053de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80053e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	1ad2      	subs	r2, r2, r3
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80053ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80053f2:	69b8      	ldr	r0, [r7, #24]
 80053f4:	f000 f908 	bl	8005608 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80053f8:	4b1d      	ldr	r3, [pc, #116]	; (8005470 <pvPortMalloc+0x188>)
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	4a1b      	ldr	r2, [pc, #108]	; (8005470 <pvPortMalloc+0x188>)
 8005404:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005406:	4b1a      	ldr	r3, [pc, #104]	; (8005470 <pvPortMalloc+0x188>)
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	4b1b      	ldr	r3, [pc, #108]	; (8005478 <pvPortMalloc+0x190>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	429a      	cmp	r2, r3
 8005410:	d203      	bcs.n	800541a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005412:	4b17      	ldr	r3, [pc, #92]	; (8005470 <pvPortMalloc+0x188>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a18      	ldr	r2, [pc, #96]	; (8005478 <pvPortMalloc+0x190>)
 8005418:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	685a      	ldr	r2, [r3, #4]
 800541e:	4b13      	ldr	r3, [pc, #76]	; (800546c <pvPortMalloc+0x184>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	431a      	orrs	r2, r3
 8005424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005426:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542a:	2200      	movs	r2, #0
 800542c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800542e:	4b13      	ldr	r3, [pc, #76]	; (800547c <pvPortMalloc+0x194>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	3301      	adds	r3, #1
 8005434:	4a11      	ldr	r2, [pc, #68]	; (800547c <pvPortMalloc+0x194>)
 8005436:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005438:	f7fe fbc0 	bl	8003bbc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	f003 0307 	and.w	r3, r3, #7
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00a      	beq.n	800545c <pvPortMalloc+0x174>
	__asm volatile
 8005446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544a:	f383 8811 	msr	BASEPRI, r3
 800544e:	f3bf 8f6f 	isb	sy
 8005452:	f3bf 8f4f 	dsb	sy
 8005456:	60fb      	str	r3, [r7, #12]
}
 8005458:	bf00      	nop
 800545a:	e7fe      	b.n	800545a <pvPortMalloc+0x172>
	return pvReturn;
 800545c:	69fb      	ldr	r3, [r7, #28]
}
 800545e:	4618      	mov	r0, r3
 8005460:	3728      	adds	r7, #40	; 0x28
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	200022c8 	.word	0x200022c8
 800546c:	200022dc 	.word	0x200022dc
 8005470:	200022cc 	.word	0x200022cc
 8005474:	200022c0 	.word	0x200022c0
 8005478:	200022d0 	.word	0x200022d0
 800547c:	200022d4 	.word	0x200022d4

08005480 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d04d      	beq.n	800552e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005492:	2308      	movs	r3, #8
 8005494:	425b      	negs	r3, r3
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	4413      	add	r3, r2
 800549a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	685a      	ldr	r2, [r3, #4]
 80054a4:	4b24      	ldr	r3, [pc, #144]	; (8005538 <vPortFree+0xb8>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4013      	ands	r3, r2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10a      	bne.n	80054c4 <vPortFree+0x44>
	__asm volatile
 80054ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b2:	f383 8811 	msr	BASEPRI, r3
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	60fb      	str	r3, [r7, #12]
}
 80054c0:	bf00      	nop
 80054c2:	e7fe      	b.n	80054c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00a      	beq.n	80054e2 <vPortFree+0x62>
	__asm volatile
 80054cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d0:	f383 8811 	msr	BASEPRI, r3
 80054d4:	f3bf 8f6f 	isb	sy
 80054d8:	f3bf 8f4f 	dsb	sy
 80054dc:	60bb      	str	r3, [r7, #8]
}
 80054de:	bf00      	nop
 80054e0:	e7fe      	b.n	80054e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	685a      	ldr	r2, [r3, #4]
 80054e6:	4b14      	ldr	r3, [pc, #80]	; (8005538 <vPortFree+0xb8>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4013      	ands	r3, r2
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d01e      	beq.n	800552e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d11a      	bne.n	800552e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	4b0e      	ldr	r3, [pc, #56]	; (8005538 <vPortFree+0xb8>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	43db      	mvns	r3, r3
 8005502:	401a      	ands	r2, r3
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005508:	f7fe fb4a 	bl	8003ba0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	4b0a      	ldr	r3, [pc, #40]	; (800553c <vPortFree+0xbc>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4413      	add	r3, r2
 8005516:	4a09      	ldr	r2, [pc, #36]	; (800553c <vPortFree+0xbc>)
 8005518:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800551a:	6938      	ldr	r0, [r7, #16]
 800551c:	f000 f874 	bl	8005608 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005520:	4b07      	ldr	r3, [pc, #28]	; (8005540 <vPortFree+0xc0>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	3301      	adds	r3, #1
 8005526:	4a06      	ldr	r2, [pc, #24]	; (8005540 <vPortFree+0xc0>)
 8005528:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800552a:	f7fe fb47 	bl	8003bbc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800552e:	bf00      	nop
 8005530:	3718      	adds	r7, #24
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	200022dc 	.word	0x200022dc
 800553c:	200022cc 	.word	0x200022cc
 8005540:	200022d8 	.word	0x200022d8

08005544 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800554a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800554e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005550:	4b27      	ldr	r3, [pc, #156]	; (80055f0 <prvHeapInit+0xac>)
 8005552:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f003 0307 	and.w	r3, r3, #7
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00c      	beq.n	8005578 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	3307      	adds	r3, #7
 8005562:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f023 0307 	bic.w	r3, r3, #7
 800556a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	4a1f      	ldr	r2, [pc, #124]	; (80055f0 <prvHeapInit+0xac>)
 8005574:	4413      	add	r3, r2
 8005576:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800557c:	4a1d      	ldr	r2, [pc, #116]	; (80055f4 <prvHeapInit+0xb0>)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005582:	4b1c      	ldr	r3, [pc, #112]	; (80055f4 <prvHeapInit+0xb0>)
 8005584:	2200      	movs	r2, #0
 8005586:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	68ba      	ldr	r2, [r7, #8]
 800558c:	4413      	add	r3, r2
 800558e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005590:	2208      	movs	r2, #8
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	1a9b      	subs	r3, r3, r2
 8005596:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f023 0307 	bic.w	r3, r3, #7
 800559e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	4a15      	ldr	r2, [pc, #84]	; (80055f8 <prvHeapInit+0xb4>)
 80055a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80055a6:	4b14      	ldr	r3, [pc, #80]	; (80055f8 <prvHeapInit+0xb4>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2200      	movs	r2, #0
 80055ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80055ae:	4b12      	ldr	r3, [pc, #72]	; (80055f8 <prvHeapInit+0xb4>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	1ad2      	subs	r2, r2, r3
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80055c4:	4b0c      	ldr	r3, [pc, #48]	; (80055f8 <prvHeapInit+0xb4>)
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	4a0a      	ldr	r2, [pc, #40]	; (80055fc <prvHeapInit+0xb8>)
 80055d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	4a09      	ldr	r2, [pc, #36]	; (8005600 <prvHeapInit+0xbc>)
 80055da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80055dc:	4b09      	ldr	r3, [pc, #36]	; (8005604 <prvHeapInit+0xc0>)
 80055de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80055e2:	601a      	str	r2, [r3, #0]
}
 80055e4:	bf00      	nop
 80055e6:	3714      	adds	r7, #20
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr
 80055f0:	20001708 	.word	0x20001708
 80055f4:	200022c0 	.word	0x200022c0
 80055f8:	200022c8 	.word	0x200022c8
 80055fc:	200022d0 	.word	0x200022d0
 8005600:	200022cc 	.word	0x200022cc
 8005604:	200022dc 	.word	0x200022dc

08005608 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005610:	4b28      	ldr	r3, [pc, #160]	; (80056b4 <prvInsertBlockIntoFreeList+0xac>)
 8005612:	60fb      	str	r3, [r7, #12]
 8005614:	e002      	b.n	800561c <prvInsertBlockIntoFreeList+0x14>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	60fb      	str	r3, [r7, #12]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	429a      	cmp	r2, r3
 8005624:	d8f7      	bhi.n	8005616 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	4413      	add	r3, r2
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	429a      	cmp	r2, r3
 8005636:	d108      	bne.n	800564a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	441a      	add	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	441a      	add	r2, r3
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	429a      	cmp	r2, r3
 800565c:	d118      	bne.n	8005690 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	4b15      	ldr	r3, [pc, #84]	; (80056b8 <prvInsertBlockIntoFreeList+0xb0>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	429a      	cmp	r2, r3
 8005668:	d00d      	beq.n	8005686 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	441a      	add	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	601a      	str	r2, [r3, #0]
 8005684:	e008      	b.n	8005698 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005686:	4b0c      	ldr	r3, [pc, #48]	; (80056b8 <prvInsertBlockIntoFreeList+0xb0>)
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	601a      	str	r2, [r3, #0]
 800568e:	e003      	b.n	8005698 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	429a      	cmp	r2, r3
 800569e:	d002      	beq.n	80056a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056a6:	bf00      	nop
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	200022c0 	.word	0x200022c0
 80056b8:	200022c8 	.word	0x200022c8

080056bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80056c2:	2300      	movs	r3, #0
 80056c4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set In terrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80056c6:	2003      	movs	r0, #3
 80056c8:	f000 f98e 	bl	80059e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80056cc:	2000      	movs	r0, #0
 80056ce:	f000 f80d 	bl	80056ec <HAL_InitTick>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d002      	beq.n	80056de <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	71fb      	strb	r3, [r7, #7]
 80056dc:	e001      	b.n	80056e2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80056de:	f005 fadf 	bl	800aca0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80056e2:	79fb      	ldrb	r3, [r7, #7]
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3708      	adds	r7, #8
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80056f4:	2300      	movs	r3, #0
 80056f6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80056f8:	4b17      	ldr	r3, [pc, #92]	; (8005758 <HAL_InitTick+0x6c>)
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d023      	beq.n	8005748 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005700:	4b16      	ldr	r3, [pc, #88]	; (800575c <HAL_InitTick+0x70>)
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	4b14      	ldr	r3, [pc, #80]	; (8005758 <HAL_InitTick+0x6c>)
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	4619      	mov	r1, r3
 800570a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800570e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005712:	fbb2 f3f3 	udiv	r3, r2, r3
 8005716:	4618      	mov	r0, r3
 8005718:	f000 f9a9 	bl	8005a6e <HAL_SYSTICK_Config>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10f      	bne.n	8005742 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b0f      	cmp	r3, #15
 8005726:	d809      	bhi.n	800573c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005728:	2200      	movs	r2, #0
 800572a:	6879      	ldr	r1, [r7, #4]
 800572c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005730:	f000 f965 	bl	80059fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005734:	4a0a      	ldr	r2, [pc, #40]	; (8005760 <HAL_InitTick+0x74>)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6013      	str	r3, [r2, #0]
 800573a:	e007      	b.n	800574c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	73fb      	strb	r3, [r7, #15]
 8005740:	e004      	b.n	800574c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	73fb      	strb	r3, [r7, #15]
 8005746:	e001      	b.n	800574c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800574c:	7bfb      	ldrb	r3, [r7, #15]
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	20000090 	.word	0x20000090
 800575c:	20000094 	.word	0x20000094
 8005760:	2000008c 	.word	0x2000008c

08005764 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005764:	b480      	push	{r7}
 8005766:	af00      	add	r7, sp, #0
    //return xTaskGetTickCount();
    return uwTick;
 8005768:	4b03      	ldr	r3, [pc, #12]	; (8005778 <HAL_GetTick+0x14>)
 800576a:	681b      	ldr	r3, [r3, #0]
}
 800576c:	4618      	mov	r0, r3
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	200022e0 	.word	0x200022e0

0800577c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005784:	f7ff ffee 	bl	8005764 <HAL_GetTick>
 8005788:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005794:	d005      	beq.n	80057a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005796:	4b0a      	ldr	r3, [pc, #40]	; (80057c0 <HAL_Delay+0x44>)
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	461a      	mov	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	4413      	add	r3, r2
 80057a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80057a2:	bf00      	nop
 80057a4:	f7ff ffde 	bl	8005764 <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d8f7      	bhi.n	80057a4 <HAL_Delay+0x28>
  {
  }
}
 80057b4:	bf00      	nop
 80057b6:	bf00      	nop
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	20000090 	.word	0x20000090

080057c4 <__NVIC_SetPriorityGrouping>:
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f003 0307 	and.w	r3, r3, #7
 80057d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80057d4:	4b0c      	ldr	r3, [pc, #48]	; (8005808 <__NVIC_SetPriorityGrouping+0x44>)
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80057e0:	4013      	ands	r3, r2
 80057e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80057ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80057f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80057f6:	4a04      	ldr	r2, [pc, #16]	; (8005808 <__NVIC_SetPriorityGrouping+0x44>)
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	60d3      	str	r3, [r2, #12]
}
 80057fc:	bf00      	nop
 80057fe:	3714      	adds	r7, #20
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr
 8005808:	e000ed00 	.word	0xe000ed00

0800580c <__NVIC_GetPriorityGrouping>:
{
 800580c:	b480      	push	{r7}
 800580e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005810:	4b04      	ldr	r3, [pc, #16]	; (8005824 <__NVIC_GetPriorityGrouping+0x18>)
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	0a1b      	lsrs	r3, r3, #8
 8005816:	f003 0307 	and.w	r3, r3, #7
}
 800581a:	4618      	mov	r0, r3
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	e000ed00 	.word	0xe000ed00

08005828 <__NVIC_EnableIRQ>:
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	4603      	mov	r3, r0
 8005830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005836:	2b00      	cmp	r3, #0
 8005838:	db0b      	blt.n	8005852 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800583a:	79fb      	ldrb	r3, [r7, #7]
 800583c:	f003 021f 	and.w	r2, r3, #31
 8005840:	4907      	ldr	r1, [pc, #28]	; (8005860 <__NVIC_EnableIRQ+0x38>)
 8005842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005846:	095b      	lsrs	r3, r3, #5
 8005848:	2001      	movs	r0, #1
 800584a:	fa00 f202 	lsl.w	r2, r0, r2
 800584e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005852:	bf00      	nop
 8005854:	370c      	adds	r7, #12
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	e000e100 	.word	0xe000e100

08005864 <__NVIC_DisableIRQ>:
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	4603      	mov	r3, r0
 800586c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800586e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005872:	2b00      	cmp	r3, #0
 8005874:	db12      	blt.n	800589c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005876:	79fb      	ldrb	r3, [r7, #7]
 8005878:	f003 021f 	and.w	r2, r3, #31
 800587c:	490a      	ldr	r1, [pc, #40]	; (80058a8 <__NVIC_DisableIRQ+0x44>)
 800587e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005882:	095b      	lsrs	r3, r3, #5
 8005884:	2001      	movs	r0, #1
 8005886:	fa00 f202 	lsl.w	r2, r0, r2
 800588a:	3320      	adds	r3, #32
 800588c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005890:	f3bf 8f4f 	dsb	sy
}
 8005894:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005896:	f3bf 8f6f 	isb	sy
}
 800589a:	bf00      	nop
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr
 80058a8:	e000e100 	.word	0xe000e100

080058ac <__NVIC_ClearPendingIRQ>:
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	4603      	mov	r3, r0
 80058b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	db0c      	blt.n	80058d8 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058be:	79fb      	ldrb	r3, [r7, #7]
 80058c0:	f003 021f 	and.w	r2, r3, #31
 80058c4:	4907      	ldr	r1, [pc, #28]	; (80058e4 <__NVIC_ClearPendingIRQ+0x38>)
 80058c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058ca:	095b      	lsrs	r3, r3, #5
 80058cc:	2001      	movs	r0, #1
 80058ce:	fa00 f202 	lsl.w	r2, r0, r2
 80058d2:	3360      	adds	r3, #96	; 0x60
 80058d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr
 80058e4:	e000e100 	.word	0xe000e100

080058e8 <__NVIC_SetPriority>:
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	4603      	mov	r3, r0
 80058f0:	6039      	str	r1, [r7, #0]
 80058f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	db0a      	blt.n	8005912 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	b2da      	uxtb	r2, r3
 8005900:	490c      	ldr	r1, [pc, #48]	; (8005934 <__NVIC_SetPriority+0x4c>)
 8005902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005906:	0112      	lsls	r2, r2, #4
 8005908:	b2d2      	uxtb	r2, r2
 800590a:	440b      	add	r3, r1
 800590c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005910:	e00a      	b.n	8005928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	b2da      	uxtb	r2, r3
 8005916:	4908      	ldr	r1, [pc, #32]	; (8005938 <__NVIC_SetPriority+0x50>)
 8005918:	79fb      	ldrb	r3, [r7, #7]
 800591a:	f003 030f 	and.w	r3, r3, #15
 800591e:	3b04      	subs	r3, #4
 8005920:	0112      	lsls	r2, r2, #4
 8005922:	b2d2      	uxtb	r2, r2
 8005924:	440b      	add	r3, r1
 8005926:	761a      	strb	r2, [r3, #24]
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr
 8005934:	e000e100 	.word	0xe000e100
 8005938:	e000ed00 	.word	0xe000ed00

0800593c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800593c:	b480      	push	{r7}
 800593e:	b089      	sub	sp, #36	; 0x24
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f003 0307 	and.w	r3, r3, #7
 800594e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	f1c3 0307 	rsb	r3, r3, #7
 8005956:	2b04      	cmp	r3, #4
 8005958:	bf28      	it	cs
 800595a:	2304      	movcs	r3, #4
 800595c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	3304      	adds	r3, #4
 8005962:	2b06      	cmp	r3, #6
 8005964:	d902      	bls.n	800596c <NVIC_EncodePriority+0x30>
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	3b03      	subs	r3, #3
 800596a:	e000      	b.n	800596e <NVIC_EncodePriority+0x32>
 800596c:	2300      	movs	r3, #0
 800596e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005970:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	fa02 f303 	lsl.w	r3, r2, r3
 800597a:	43da      	mvns	r2, r3
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	401a      	ands	r2, r3
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005984:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	fa01 f303 	lsl.w	r3, r1, r3
 800598e:	43d9      	mvns	r1, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005994:	4313      	orrs	r3, r2
         );
}
 8005996:	4618      	mov	r0, r3
 8005998:	3724      	adds	r7, #36	; 0x24
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
	...

080059a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	3b01      	subs	r3, #1
 80059b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80059b4:	d301      	bcc.n	80059ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80059b6:	2301      	movs	r3, #1
 80059b8:	e00f      	b.n	80059da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80059ba:	4a0a      	ldr	r2, [pc, #40]	; (80059e4 <SysTick_Config+0x40>)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	3b01      	subs	r3, #1
 80059c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80059c2:	210f      	movs	r1, #15
 80059c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059c8:	f7ff ff8e 	bl	80058e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80059cc:	4b05      	ldr	r3, [pc, #20]	; (80059e4 <SysTick_Config+0x40>)
 80059ce:	2200      	movs	r2, #0
 80059d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80059d2:	4b04      	ldr	r3, [pc, #16]	; (80059e4 <SysTick_Config+0x40>)
 80059d4:	2207      	movs	r2, #7
 80059d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3708      	adds	r7, #8
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	e000e010 	.word	0xe000e010

080059e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f7ff fee7 	bl	80057c4 <__NVIC_SetPriorityGrouping>
}
 80059f6:	bf00      	nop
 80059f8:	3708      	adds	r7, #8
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b086      	sub	sp, #24
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	4603      	mov	r3, r0
 8005a06:	60b9      	str	r1, [r7, #8]
 8005a08:	607a      	str	r2, [r7, #4]
 8005a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005a10:	f7ff fefc 	bl	800580c <__NVIC_GetPriorityGrouping>
 8005a14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	68b9      	ldr	r1, [r7, #8]
 8005a1a:	6978      	ldr	r0, [r7, #20]
 8005a1c:	f7ff ff8e 	bl	800593c <NVIC_EncodePriority>
 8005a20:	4602      	mov	r2, r0
 8005a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a26:	4611      	mov	r1, r2
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7ff ff5d 	bl	80058e8 <__NVIC_SetPriority>
}
 8005a2e:	bf00      	nop
 8005a30:	3718      	adds	r7, #24
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b082      	sub	sp, #8
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7ff feef 	bl	8005828 <__NVIC_EnableIRQ>
}
 8005a4a:	bf00      	nop
 8005a4c:	3708      	adds	r7, #8
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b082      	sub	sp, #8
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	4603      	mov	r3, r0
 8005a5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7ff feff 	bl	8005864 <__NVIC_DisableIRQ>
}
 8005a66:	bf00      	nop
 8005a68:	3708      	adds	r7, #8
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b082      	sub	sp, #8
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f7ff ff94 	bl	80059a4 <SysTick_Config>
 8005a7c:	4603      	mov	r3, r0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b082      	sub	sp, #8
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8005a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a94:	4618      	mov	r0, r3
 8005a96:	f7ff ff09 	bl	80058ac <__NVIC_ClearPendingIRQ>
}
 8005a9a:	bf00      	nop
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
	...

08005aa4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e098      	b.n	8005be8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	461a      	mov	r2, r3
 8005abc:	4b4d      	ldr	r3, [pc, #308]	; (8005bf4 <HAL_DMA_Init+0x150>)
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d80f      	bhi.n	8005ae2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	4b4b      	ldr	r3, [pc, #300]	; (8005bf8 <HAL_DMA_Init+0x154>)
 8005aca:	4413      	add	r3, r2
 8005acc:	4a4b      	ldr	r2, [pc, #300]	; (8005bfc <HAL_DMA_Init+0x158>)
 8005ace:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad2:	091b      	lsrs	r3, r3, #4
 8005ad4:	009a      	lsls	r2, r3, #2
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a48      	ldr	r2, [pc, #288]	; (8005c00 <HAL_DMA_Init+0x15c>)
 8005ade:	641a      	str	r2, [r3, #64]	; 0x40
 8005ae0:	e00e      	b.n	8005b00 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	4b46      	ldr	r3, [pc, #280]	; (8005c04 <HAL_DMA_Init+0x160>)
 8005aea:	4413      	add	r3, r2
 8005aec:	4a43      	ldr	r2, [pc, #268]	; (8005bfc <HAL_DMA_Init+0x158>)
 8005aee:	fba2 2303 	umull	r2, r3, r2, r3
 8005af2:	091b      	lsrs	r3, r3, #4
 8005af4:	009a      	lsls	r2, r3, #2
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a42      	ldr	r2, [pc, #264]	; (8005c08 <HAL_DMA_Init+0x164>)
 8005afe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2202      	movs	r2, #2
 8005b04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b1a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005b24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b5a:	d039      	beq.n	8005bd0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b60:	4a27      	ldr	r2, [pc, #156]	; (8005c00 <HAL_DMA_Init+0x15c>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d11a      	bne.n	8005b9c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005b66:	4b29      	ldr	r3, [pc, #164]	; (8005c0c <HAL_DMA_Init+0x168>)
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b6e:	f003 031c 	and.w	r3, r3, #28
 8005b72:	210f      	movs	r1, #15
 8005b74:	fa01 f303 	lsl.w	r3, r1, r3
 8005b78:	43db      	mvns	r3, r3
 8005b7a:	4924      	ldr	r1, [pc, #144]	; (8005c0c <HAL_DMA_Init+0x168>)
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005b80:	4b22      	ldr	r3, [pc, #136]	; (8005c0c <HAL_DMA_Init+0x168>)
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6859      	ldr	r1, [r3, #4]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b8c:	f003 031c 	and.w	r3, r3, #28
 8005b90:	fa01 f303 	lsl.w	r3, r1, r3
 8005b94:	491d      	ldr	r1, [pc, #116]	; (8005c0c <HAL_DMA_Init+0x168>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	600b      	str	r3, [r1, #0]
 8005b9a:	e019      	b.n	8005bd0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005b9c:	4b1c      	ldr	r3, [pc, #112]	; (8005c10 <HAL_DMA_Init+0x16c>)
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ba4:	f003 031c 	and.w	r3, r3, #28
 8005ba8:	210f      	movs	r1, #15
 8005baa:	fa01 f303 	lsl.w	r3, r1, r3
 8005bae:	43db      	mvns	r3, r3
 8005bb0:	4917      	ldr	r1, [pc, #92]	; (8005c10 <HAL_DMA_Init+0x16c>)
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005bb6:	4b16      	ldr	r3, [pc, #88]	; (8005c10 <HAL_DMA_Init+0x16c>)
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6859      	ldr	r1, [r3, #4]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc2:	f003 031c 	and.w	r3, r3, #28
 8005bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8005bca:	4911      	ldr	r1, [pc, #68]	; (8005c10 <HAL_DMA_Init+0x16c>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3714      	adds	r7, #20
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr
 8005bf4:	40020407 	.word	0x40020407
 8005bf8:	bffdfff8 	.word	0xbffdfff8
 8005bfc:	cccccccd 	.word	0xcccccccd
 8005c00:	40020000 	.word	0x40020000
 8005c04:	bffdfbf8 	.word	0xbffdfbf8
 8005c08:	40020400 	.word	0x40020400
 8005c0c:	400200a8 	.word	0x400200a8
 8005c10:	400204a8 	.word	0x400204a8

08005c14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
 8005c20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c22:	2300      	movs	r3, #0
 8005c24:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d101      	bne.n	8005c34 <HAL_DMA_Start_IT+0x20>
 8005c30:	2302      	movs	r3, #2
 8005c32:	e04b      	b.n	8005ccc <HAL_DMA_Start_IT+0xb8>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d13a      	bne.n	8005cbe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f022 0201 	bic.w	r2, r2, #1
 8005c64:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	68b9      	ldr	r1, [r7, #8]
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 f9a7 	bl	8005fc0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d008      	beq.n	8005c8c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f042 020e 	orr.w	r2, r2, #14
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	e00f      	b.n	8005cac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f022 0204 	bic.w	r2, r2, #4
 8005c9a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f042 020a 	orr.w	r2, r2, #10
 8005caa:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f042 0201 	orr.w	r2, r2, #1
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	e005      	b.n	8005cca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005cc6:	2302      	movs	r3, #2
 8005cc8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3718      	adds	r7, #24
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d008      	beq.n	8005cfe <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2204      	movs	r2, #4
 8005cf0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e022      	b.n	8005d44 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f022 020e 	bic.w	r2, r2, #14
 8005d0c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f022 0201 	bic.w	r2, r2, #1
 8005d1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d22:	f003 021c 	and.w	r2, r3, #28
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2a:	2101      	movs	r1, #1
 8005d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8005d30:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005d42:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3714      	adds	r7, #20
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d005      	beq.n	8005d74 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2204      	movs	r2, #4
 8005d6c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	73fb      	strb	r3, [r7, #15]
 8005d72:	e029      	b.n	8005dc8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f022 020e 	bic.w	r2, r2, #14
 8005d82:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f022 0201 	bic.w	r2, r2, #1
 8005d92:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d98:	f003 021c 	and.w	r2, r3, #28
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da0:	2101      	movs	r1, #1
 8005da2:	fa01 f202 	lsl.w	r2, r1, r2
 8005da6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d003      	beq.n	8005dc8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	4798      	blx	r3
    }
  }
  return status;
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b084      	sub	sp, #16
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dee:	f003 031c 	and.w	r3, r3, #28
 8005df2:	2204      	movs	r2, #4
 8005df4:	409a      	lsls	r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	4013      	ands	r3, r2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d026      	beq.n	8005e4c <HAL_DMA_IRQHandler+0x7a>
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	f003 0304 	and.w	r3, r3, #4
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d021      	beq.n	8005e4c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0320 	and.w	r3, r3, #32
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d107      	bne.n	8005e26 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f022 0204 	bic.w	r2, r2, #4
 8005e24:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e2a:	f003 021c 	and.w	r2, r3, #28
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e32:	2104      	movs	r1, #4
 8005e34:	fa01 f202 	lsl.w	r2, r1, r2
 8005e38:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d071      	beq.n	8005f26 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005e4a:	e06c      	b.n	8005f26 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e50:	f003 031c 	and.w	r3, r3, #28
 8005e54:	2202      	movs	r2, #2
 8005e56:	409a      	lsls	r2, r3
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d02e      	beq.n	8005ebe <HAL_DMA_IRQHandler+0xec>
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	f003 0302 	and.w	r3, r3, #2
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d029      	beq.n	8005ebe <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0320 	and.w	r3, r3, #32
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10b      	bne.n	8005e90 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f022 020a 	bic.w	r2, r2, #10
 8005e86:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e94:	f003 021c 	and.w	r2, r3, #28
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9c:	2102      	movs	r1, #2
 8005e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8005ea2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d038      	beq.n	8005f26 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005ebc:	e033      	b.n	8005f26 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ec2:	f003 031c 	and.w	r3, r3, #28
 8005ec6:	2208      	movs	r2, #8
 8005ec8:	409a      	lsls	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	4013      	ands	r3, r2
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d02a      	beq.n	8005f28 <HAL_DMA_IRQHandler+0x156>
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	f003 0308 	and.w	r3, r3, #8
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d025      	beq.n	8005f28 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f022 020e 	bic.w	r2, r2, #14
 8005eea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef0:	f003 021c 	and.w	r2, r3, #28
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef8:	2101      	movs	r1, #1
 8005efa:	fa01 f202 	lsl.w	r2, r1, r2
 8005efe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d004      	beq.n	8005f28 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005f26:	bf00      	nop
 8005f28:	bf00      	nop
}
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 8005f30:	b480      	push	{r7}
 8005f32:	b087      	sub	sp, #28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	460b      	mov	r3, r1
 8005f3a:	607a      	str	r2, [r7, #4]
 8005f3c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d101      	bne.n	8005f50 <HAL_DMA_RegisterCallback+0x20>
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	e031      	b.n	8005fb4 <HAL_DMA_RegisterCallback+0x84>
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d120      	bne.n	8005fa6 <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8005f64:	7afb      	ldrb	r3, [r7, #11]
 8005f66:	2b03      	cmp	r3, #3
 8005f68:	d81a      	bhi.n	8005fa0 <HAL_DMA_RegisterCallback+0x70>
 8005f6a:	a201      	add	r2, pc, #4	; (adr r2, 8005f70 <HAL_DMA_RegisterCallback+0x40>)
 8005f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f70:	08005f81 	.word	0x08005f81
 8005f74:	08005f89 	.word	0x08005f89
 8005f78:	08005f91 	.word	0x08005f91
 8005f7c:	08005f99 	.word	0x08005f99
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = pCallback;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	62da      	str	r2, [r3, #44]	; 0x2c
           break;
 8005f86:	e010      	b.n	8005faa <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = pCallback;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	631a      	str	r2, [r3, #48]	; 0x30
           break;
 8005f8e:	e00c      	b.n	8005faa <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = pCallback;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	635a      	str	r2, [r3, #52]	; 0x34
           break;
 8005f96:	e008      	b.n	8005faa <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = pCallback;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 8005f9e:	e004      	b.n	8005faa <HAL_DMA_RegisterCallback+0x7a>

     default:
           status = HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	75fb      	strb	r3, [r7, #23]
           break;
 8005fa4:	e001      	b.n	8005faa <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8005fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	371c      	adds	r7, #28
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
 8005fcc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd2:	f003 021c 	and.w	r2, r3, #28
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fda:	2101      	movs	r1, #1
 8005fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8005fe0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	683a      	ldr	r2, [r7, #0]
 8005fe8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	2b10      	cmp	r3, #16
 8005ff0:	d108      	bne.n	8006004 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006002:	e007      	b.n	8006014 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68ba      	ldr	r2, [r7, #8]
 800600a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	60da      	str	r2, [r3, #12]
}
 8006014:	bf00      	nop
 8006016:	3714      	adds	r7, #20
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006020:	b480      	push	{r7}
 8006022:	b087      	sub	sp, #28
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800602a:	2300      	movs	r3, #0
 800602c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800602e:	e154      	b.n	80062da <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	2101      	movs	r1, #1
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	fa01 f303 	lsl.w	r3, r1, r3
 800603c:	4013      	ands	r3, r2
 800603e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2b00      	cmp	r3, #0
 8006044:	f000 8146 	beq.w	80062d4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f003 0303 	and.w	r3, r3, #3
 8006050:	2b01      	cmp	r3, #1
 8006052:	d005      	beq.n	8006060 <HAL_GPIO_Init+0x40>
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	f003 0303 	and.w	r3, r3, #3
 800605c:	2b02      	cmp	r3, #2
 800605e:	d130      	bne.n	80060c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	005b      	lsls	r3, r3, #1
 800606a:	2203      	movs	r2, #3
 800606c:	fa02 f303 	lsl.w	r3, r2, r3
 8006070:	43db      	mvns	r3, r3
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	4013      	ands	r3, r2
 8006076:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	68da      	ldr	r2, [r3, #12]
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	005b      	lsls	r3, r3, #1
 8006080:	fa02 f303 	lsl.w	r3, r2, r3
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	4313      	orrs	r3, r2
 8006088:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	693a      	ldr	r2, [r7, #16]
 800608e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006096:	2201      	movs	r2, #1
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	fa02 f303 	lsl.w	r3, r2, r3
 800609e:	43db      	mvns	r3, r3
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	4013      	ands	r3, r2
 80060a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	091b      	lsrs	r3, r3, #4
 80060ac:	f003 0201 	and.w	r2, r3, #1
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	fa02 f303 	lsl.w	r3, r2, r3
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f003 0303 	and.w	r3, r3, #3
 80060ca:	2b03      	cmp	r3, #3
 80060cc:	d017      	beq.n	80060fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	005b      	lsls	r3, r3, #1
 80060d8:	2203      	movs	r2, #3
 80060da:	fa02 f303 	lsl.w	r3, r2, r3
 80060de:	43db      	mvns	r3, r3
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	4013      	ands	r3, r2
 80060e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	689a      	ldr	r2, [r3, #8]
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	005b      	lsls	r3, r3, #1
 80060ee:	fa02 f303 	lsl.w	r3, r2, r3
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	693a      	ldr	r2, [r7, #16]
 80060fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f003 0303 	and.w	r3, r3, #3
 8006106:	2b02      	cmp	r3, #2
 8006108:	d123      	bne.n	8006152 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	08da      	lsrs	r2, r3, #3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	3208      	adds	r2, #8
 8006112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006116:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	f003 0307 	and.w	r3, r3, #7
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	220f      	movs	r2, #15
 8006122:	fa02 f303 	lsl.w	r3, r2, r3
 8006126:	43db      	mvns	r3, r3
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	4013      	ands	r3, r2
 800612c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	691a      	ldr	r2, [r3, #16]
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	f003 0307 	and.w	r3, r3, #7
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	fa02 f303 	lsl.w	r3, r2, r3
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	4313      	orrs	r3, r2
 8006142:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	08da      	lsrs	r2, r3, #3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	3208      	adds	r2, #8
 800614c:	6939      	ldr	r1, [r7, #16]
 800614e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	005b      	lsls	r3, r3, #1
 800615c:	2203      	movs	r2, #3
 800615e:	fa02 f303 	lsl.w	r3, r2, r3
 8006162:	43db      	mvns	r3, r3
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	4013      	ands	r3, r2
 8006168:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f003 0203 	and.w	r2, r3, #3
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	005b      	lsls	r3, r3, #1
 8006176:	fa02 f303 	lsl.w	r3, r2, r3
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	4313      	orrs	r3, r2
 800617e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800618e:	2b00      	cmp	r3, #0
 8006190:	f000 80a0 	beq.w	80062d4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006194:	4b58      	ldr	r3, [pc, #352]	; (80062f8 <HAL_GPIO_Init+0x2d8>)
 8006196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006198:	4a57      	ldr	r2, [pc, #348]	; (80062f8 <HAL_GPIO_Init+0x2d8>)
 800619a:	f043 0301 	orr.w	r3, r3, #1
 800619e:	6613      	str	r3, [r2, #96]	; 0x60
 80061a0:	4b55      	ldr	r3, [pc, #340]	; (80062f8 <HAL_GPIO_Init+0x2d8>)
 80061a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061a4:	f003 0301 	and.w	r3, r3, #1
 80061a8:	60bb      	str	r3, [r7, #8]
 80061aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80061ac:	4a53      	ldr	r2, [pc, #332]	; (80062fc <HAL_GPIO_Init+0x2dc>)
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	089b      	lsrs	r3, r3, #2
 80061b2:	3302      	adds	r3, #2
 80061b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f003 0303 	and.w	r3, r3, #3
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	220f      	movs	r2, #15
 80061c4:	fa02 f303 	lsl.w	r3, r2, r3
 80061c8:	43db      	mvns	r3, r3
 80061ca:	693a      	ldr	r2, [r7, #16]
 80061cc:	4013      	ands	r3, r2
 80061ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80061d6:	d019      	beq.n	800620c <HAL_GPIO_Init+0x1ec>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a49      	ldr	r2, [pc, #292]	; (8006300 <HAL_GPIO_Init+0x2e0>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d013      	beq.n	8006208 <HAL_GPIO_Init+0x1e8>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a48      	ldr	r2, [pc, #288]	; (8006304 <HAL_GPIO_Init+0x2e4>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d00d      	beq.n	8006204 <HAL_GPIO_Init+0x1e4>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a47      	ldr	r2, [pc, #284]	; (8006308 <HAL_GPIO_Init+0x2e8>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d007      	beq.n	8006200 <HAL_GPIO_Init+0x1e0>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a46      	ldr	r2, [pc, #280]	; (800630c <HAL_GPIO_Init+0x2ec>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d101      	bne.n	80061fc <HAL_GPIO_Init+0x1dc>
 80061f8:	2304      	movs	r3, #4
 80061fa:	e008      	b.n	800620e <HAL_GPIO_Init+0x1ee>
 80061fc:	2307      	movs	r3, #7
 80061fe:	e006      	b.n	800620e <HAL_GPIO_Init+0x1ee>
 8006200:	2303      	movs	r3, #3
 8006202:	e004      	b.n	800620e <HAL_GPIO_Init+0x1ee>
 8006204:	2302      	movs	r3, #2
 8006206:	e002      	b.n	800620e <HAL_GPIO_Init+0x1ee>
 8006208:	2301      	movs	r3, #1
 800620a:	e000      	b.n	800620e <HAL_GPIO_Init+0x1ee>
 800620c:	2300      	movs	r3, #0
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	f002 0203 	and.w	r2, r2, #3
 8006214:	0092      	lsls	r2, r2, #2
 8006216:	4093      	lsls	r3, r2
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	4313      	orrs	r3, r2
 800621c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800621e:	4937      	ldr	r1, [pc, #220]	; (80062fc <HAL_GPIO_Init+0x2dc>)
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	089b      	lsrs	r3, r3, #2
 8006224:	3302      	adds	r3, #2
 8006226:	693a      	ldr	r2, [r7, #16]
 8006228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800622c:	4b38      	ldr	r3, [pc, #224]	; (8006310 <HAL_GPIO_Init+0x2f0>)
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	43db      	mvns	r3, r3
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	4013      	ands	r3, r2
 800623a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d003      	beq.n	8006250 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	4313      	orrs	r3, r2
 800624e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006250:	4a2f      	ldr	r2, [pc, #188]	; (8006310 <HAL_GPIO_Init+0x2f0>)
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006256:	4b2e      	ldr	r3, [pc, #184]	; (8006310 <HAL_GPIO_Init+0x2f0>)
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	43db      	mvns	r3, r3
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	4013      	ands	r3, r2
 8006264:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800626e:	2b00      	cmp	r3, #0
 8006270:	d003      	beq.n	800627a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	4313      	orrs	r3, r2
 8006278:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800627a:	4a25      	ldr	r2, [pc, #148]	; (8006310 <HAL_GPIO_Init+0x2f0>)
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006280:	4b23      	ldr	r3, [pc, #140]	; (8006310 <HAL_GPIO_Init+0x2f0>)
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	43db      	mvns	r3, r3
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	4013      	ands	r3, r2
 800628e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d003      	beq.n	80062a4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80062a4:	4a1a      	ldr	r2, [pc, #104]	; (8006310 <HAL_GPIO_Init+0x2f0>)
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80062aa:	4b19      	ldr	r3, [pc, #100]	; (8006310 <HAL_GPIO_Init+0x2f0>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	43db      	mvns	r3, r3
 80062b4:	693a      	ldr	r2, [r7, #16]
 80062b6:	4013      	ands	r3, r2
 80062b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d003      	beq.n	80062ce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80062ce:	4a10      	ldr	r2, [pc, #64]	; (8006310 <HAL_GPIO_Init+0x2f0>)
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	3301      	adds	r3, #1
 80062d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	fa22 f303 	lsr.w	r3, r2, r3
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f47f aea3 	bne.w	8006030 <HAL_GPIO_Init+0x10>
  }
}
 80062ea:	bf00      	nop
 80062ec:	bf00      	nop
 80062ee:	371c      	adds	r7, #28
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr
 80062f8:	40021000 	.word	0x40021000
 80062fc:	40010000 	.word	0x40010000
 8006300:	48000400 	.word	0x48000400
 8006304:	48000800 	.word	0x48000800
 8006308:	48000c00 	.word	0x48000c00
 800630c:	48001000 	.word	0x48001000
 8006310:	40010400 	.word	0x40010400

08006314 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	460b      	mov	r3, r1
 800631e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	691a      	ldr	r2, [r3, #16]
 8006324:	887b      	ldrh	r3, [r7, #2]
 8006326:	4013      	ands	r3, r2
 8006328:	2b00      	cmp	r3, #0
 800632a:	d002      	beq.n	8006332 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800632c:	2301      	movs	r3, #1
 800632e:	73fb      	strb	r3, [r7, #15]
 8006330:	e001      	b.n	8006336 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006332:	2300      	movs	r3, #0
 8006334:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006336:	7bfb      	ldrb	r3, [r7, #15]
}
 8006338:	4618      	mov	r0, r3
 800633a:	3714      	adds	r7, #20
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	460b      	mov	r3, r1
 800634e:	807b      	strh	r3, [r7, #2]
 8006350:	4613      	mov	r3, r2
 8006352:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006354:	787b      	ldrb	r3, [r7, #1]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d003      	beq.n	8006362 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800635a:	887a      	ldrh	r2, [r7, #2]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006360:	e002      	b.n	8006368 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006362:	887a      	ldrh	r2, [r7, #2]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	4603      	mov	r3, r0
 800637c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800637e:	4b08      	ldr	r3, [pc, #32]	; (80063a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006380:	695a      	ldr	r2, [r3, #20]
 8006382:	88fb      	ldrh	r3, [r7, #6]
 8006384:	4013      	ands	r3, r2
 8006386:	2b00      	cmp	r3, #0
 8006388:	d006      	beq.n	8006398 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800638a:	4a05      	ldr	r2, [pc, #20]	; (80063a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800638c:	88fb      	ldrh	r3, [r7, #6]
 800638e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006390:	88fb      	ldrh	r3, [r7, #6]
 8006392:	4618      	mov	r0, r3
 8006394:	f004 fedc 	bl	800b150 <HAL_GPIO_EXTI_Callback>
  }
}
 8006398:	bf00      	nop
 800639a:	3708      	adds	r7, #8
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	40010400 	.word	0x40010400

080063a4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80063a4:	b480      	push	{r7}
 80063a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80063a8:	4b05      	ldr	r3, [pc, #20]	; (80063c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a04      	ldr	r2, [pc, #16]	; (80063c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80063ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063b2:	6013      	str	r3, [r2, #0]
}
 80063b4:	bf00      	nop
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	40007000 	.word	0x40007000

080063c4 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 80063cc:	4b2b      	ldr	r3, [pc, #172]	; (800647c <HAL_PWR_ConfigPVD+0xb8>)
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f023 020e 	bic.w	r2, r3, #14
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4928      	ldr	r1, [pc, #160]	; (800647c <HAL_PWR_ConfigPVD+0xb8>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 80063de:	4b28      	ldr	r3, [pc, #160]	; (8006480 <HAL_PWR_ConfigPVD+0xbc>)
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	4a27      	ldr	r2, [pc, #156]	; (8006480 <HAL_PWR_ConfigPVD+0xbc>)
 80063e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063e8:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 80063ea:	4b25      	ldr	r3, [pc, #148]	; (8006480 <HAL_PWR_ConfigPVD+0xbc>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a24      	ldr	r2, [pc, #144]	; (8006480 <HAL_PWR_ConfigPVD+0xbc>)
 80063f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063f4:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 80063f6:	4b22      	ldr	r3, [pc, #136]	; (8006480 <HAL_PWR_ConfigPVD+0xbc>)
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	4a21      	ldr	r2, [pc, #132]	; (8006480 <HAL_PWR_ConfigPVD+0xbc>)
 80063fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006400:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8006402:	4b1f      	ldr	r3, [pc, #124]	; (8006480 <HAL_PWR_ConfigPVD+0xbc>)
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	4a1e      	ldr	r2, [pc, #120]	; (8006480 <HAL_PWR_ConfigPVD+0xbc>)
 8006408:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800640c:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006416:	2b00      	cmp	r3, #0
 8006418:	d005      	beq.n	8006426 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 800641a:	4b19      	ldr	r3, [pc, #100]	; (8006480 <HAL_PWR_ConfigPVD+0xbc>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a18      	ldr	r2, [pc, #96]	; (8006480 <HAL_PWR_ConfigPVD+0xbc>)
 8006420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006424:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d005      	beq.n	800643e <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8006432:	4b13      	ldr	r3, [pc, #76]	; (8006480 <HAL_PWR_ConfigPVD+0xbc>)
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	4a12      	ldr	r2, [pc, #72]	; (8006480 <HAL_PWR_ConfigPVD+0xbc>)
 8006438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800643c:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	2b00      	cmp	r3, #0
 8006448:	d005      	beq.n	8006456 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800644a:	4b0d      	ldr	r3, [pc, #52]	; (8006480 <HAL_PWR_ConfigPVD+0xbc>)
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	4a0c      	ldr	r2, [pc, #48]	; (8006480 <HAL_PWR_ConfigPVD+0xbc>)
 8006450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006454:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	f003 0302 	and.w	r3, r3, #2
 800645e:	2b00      	cmp	r3, #0
 8006460:	d005      	beq.n	800646e <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8006462:	4b07      	ldr	r3, [pc, #28]	; (8006480 <HAL_PWR_ConfigPVD+0xbc>)
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	4a06      	ldr	r2, [pc, #24]	; (8006480 <HAL_PWR_ConfigPVD+0xbc>)
 8006468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800646c:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr
 800647c:	40007000 	.word	0x40007000
 8006480:	40010400 	.word	0x40010400

08006484 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8006484:	b480      	push	{r7}
 8006486:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8006488:	4b05      	ldr	r3, [pc, #20]	; (80064a0 <HAL_PWR_EnablePVD+0x1c>)
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	4a04      	ldr	r2, [pc, #16]	; (80064a0 <HAL_PWR_EnablePVD+0x1c>)
 800648e:	f043 0301 	orr.w	r3, r3, #1
 8006492:	6053      	str	r3, [r2, #4]
}
 8006494:	bf00      	nop
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	40007000 	.word	0x40007000

080064a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80064a4:	b480      	push	{r7}
 80064a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80064a8:	4b04      	ldr	r3, [pc, #16]	; (80064bc <HAL_PWREx_GetVoltageRange+0x18>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	40007000 	.word	0x40007000

080064c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064ce:	d130      	bne.n	8006532 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80064d0:	4b23      	ldr	r3, [pc, #140]	; (8006560 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80064d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064dc:	d038      	beq.n	8006550 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80064de:	4b20      	ldr	r3, [pc, #128]	; (8006560 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80064e6:	4a1e      	ldr	r2, [pc, #120]	; (8006560 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80064e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80064ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80064ee:	4b1d      	ldr	r3, [pc, #116]	; (8006564 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2232      	movs	r2, #50	; 0x32
 80064f4:	fb02 f303 	mul.w	r3, r2, r3
 80064f8:	4a1b      	ldr	r2, [pc, #108]	; (8006568 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80064fa:	fba2 2303 	umull	r2, r3, r2, r3
 80064fe:	0c9b      	lsrs	r3, r3, #18
 8006500:	3301      	adds	r3, #1
 8006502:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006504:	e002      	b.n	800650c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	3b01      	subs	r3, #1
 800650a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800650c:	4b14      	ldr	r3, [pc, #80]	; (8006560 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800650e:	695b      	ldr	r3, [r3, #20]
 8006510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006518:	d102      	bne.n	8006520 <HAL_PWREx_ControlVoltageScaling+0x60>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1f2      	bne.n	8006506 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006520:	4b0f      	ldr	r3, [pc, #60]	; (8006560 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006522:	695b      	ldr	r3, [r3, #20]
 8006524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800652c:	d110      	bne.n	8006550 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800652e:	2303      	movs	r3, #3
 8006530:	e00f      	b.n	8006552 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006532:	4b0b      	ldr	r3, [pc, #44]	; (8006560 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800653a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800653e:	d007      	beq.n	8006550 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006540:	4b07      	ldr	r3, [pc, #28]	; (8006560 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006548:	4a05      	ldr	r2, [pc, #20]	; (8006560 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800654a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800654e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3714      	adds	r7, #20
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	40007000 	.word	0x40007000
 8006564:	20000094 	.word	0x20000094
 8006568:	431bde83 	.word	0x431bde83

0800656c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b088      	sub	sp, #32
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d102      	bne.n	8006580 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	f000 bc02 	b.w	8006d84 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006580:	4b96      	ldr	r3, [pc, #600]	; (80067dc <HAL_RCC_OscConfig+0x270>)
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	f003 030c 	and.w	r3, r3, #12
 8006588:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800658a:	4b94      	ldr	r3, [pc, #592]	; (80067dc <HAL_RCC_OscConfig+0x270>)
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	f003 0303 	and.w	r3, r3, #3
 8006592:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 0310 	and.w	r3, r3, #16
 800659c:	2b00      	cmp	r3, #0
 800659e:	f000 80e4 	beq.w	800676a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d007      	beq.n	80065b8 <HAL_RCC_OscConfig+0x4c>
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	2b0c      	cmp	r3, #12
 80065ac:	f040 808b 	bne.w	80066c6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	f040 8087 	bne.w	80066c6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80065b8:	4b88      	ldr	r3, [pc, #544]	; (80067dc <HAL_RCC_OscConfig+0x270>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0302 	and.w	r3, r3, #2
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d005      	beq.n	80065d0 <HAL_RCC_OscConfig+0x64>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d101      	bne.n	80065d0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e3d9      	b.n	8006d84 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a1a      	ldr	r2, [r3, #32]
 80065d4:	4b81      	ldr	r3, [pc, #516]	; (80067dc <HAL_RCC_OscConfig+0x270>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0308 	and.w	r3, r3, #8
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d004      	beq.n	80065ea <HAL_RCC_OscConfig+0x7e>
 80065e0:	4b7e      	ldr	r3, [pc, #504]	; (80067dc <HAL_RCC_OscConfig+0x270>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065e8:	e005      	b.n	80065f6 <HAL_RCC_OscConfig+0x8a>
 80065ea:	4b7c      	ldr	r3, [pc, #496]	; (80067dc <HAL_RCC_OscConfig+0x270>)
 80065ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065f0:	091b      	lsrs	r3, r3, #4
 80065f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d223      	bcs.n	8006642 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 fd8c 	bl	800711c <RCC_SetFlashLatencyFromMSIRange>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d001      	beq.n	800660e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e3ba      	b.n	8006d84 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800660e:	4b73      	ldr	r3, [pc, #460]	; (80067dc <HAL_RCC_OscConfig+0x270>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a72      	ldr	r2, [pc, #456]	; (80067dc <HAL_RCC_OscConfig+0x270>)
 8006614:	f043 0308 	orr.w	r3, r3, #8
 8006618:	6013      	str	r3, [r2, #0]
 800661a:	4b70      	ldr	r3, [pc, #448]	; (80067dc <HAL_RCC_OscConfig+0x270>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a1b      	ldr	r3, [r3, #32]
 8006626:	496d      	ldr	r1, [pc, #436]	; (80067dc <HAL_RCC_OscConfig+0x270>)
 8006628:	4313      	orrs	r3, r2
 800662a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800662c:	4b6b      	ldr	r3, [pc, #428]	; (80067dc <HAL_RCC_OscConfig+0x270>)
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	69db      	ldr	r3, [r3, #28]
 8006638:	021b      	lsls	r3, r3, #8
 800663a:	4968      	ldr	r1, [pc, #416]	; (80067dc <HAL_RCC_OscConfig+0x270>)
 800663c:	4313      	orrs	r3, r2
 800663e:	604b      	str	r3, [r1, #4]
 8006640:	e025      	b.n	800668e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006642:	4b66      	ldr	r3, [pc, #408]	; (80067dc <HAL_RCC_OscConfig+0x270>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a65      	ldr	r2, [pc, #404]	; (80067dc <HAL_RCC_OscConfig+0x270>)
 8006648:	f043 0308 	orr.w	r3, r3, #8
 800664c:	6013      	str	r3, [r2, #0]
 800664e:	4b63      	ldr	r3, [pc, #396]	; (80067dc <HAL_RCC_OscConfig+0x270>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	4960      	ldr	r1, [pc, #384]	; (80067dc <HAL_RCC_OscConfig+0x270>)
 800665c:	4313      	orrs	r3, r2
 800665e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006660:	4b5e      	ldr	r3, [pc, #376]	; (80067dc <HAL_RCC_OscConfig+0x270>)
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	69db      	ldr	r3, [r3, #28]
 800666c:	021b      	lsls	r3, r3, #8
 800666e:	495b      	ldr	r1, [pc, #364]	; (80067dc <HAL_RCC_OscConfig+0x270>)
 8006670:	4313      	orrs	r3, r2
 8006672:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d109      	bne.n	800668e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	4618      	mov	r0, r3
 8006680:	f000 fd4c 	bl	800711c <RCC_SetFlashLatencyFromMSIRange>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d001      	beq.n	800668e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e37a      	b.n	8006d84 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800668e:	f000 fc81 	bl	8006f94 <HAL_RCC_GetSysClockFreq>
 8006692:	4602      	mov	r2, r0
 8006694:	4b51      	ldr	r3, [pc, #324]	; (80067dc <HAL_RCC_OscConfig+0x270>)
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	091b      	lsrs	r3, r3, #4
 800669a:	f003 030f 	and.w	r3, r3, #15
 800669e:	4950      	ldr	r1, [pc, #320]	; (80067e0 <HAL_RCC_OscConfig+0x274>)
 80066a0:	5ccb      	ldrb	r3, [r1, r3]
 80066a2:	f003 031f 	and.w	r3, r3, #31
 80066a6:	fa22 f303 	lsr.w	r3, r2, r3
 80066aa:	4a4e      	ldr	r2, [pc, #312]	; (80067e4 <HAL_RCC_OscConfig+0x278>)
 80066ac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80066ae:	4b4e      	ldr	r3, [pc, #312]	; (80067e8 <HAL_RCC_OscConfig+0x27c>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4618      	mov	r0, r3
 80066b4:	f7ff f81a 	bl	80056ec <HAL_InitTick>
 80066b8:	4603      	mov	r3, r0
 80066ba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d052      	beq.n	8006768 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80066c2:	7bfb      	ldrb	r3, [r7, #15]
 80066c4:	e35e      	b.n	8006d84 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d032      	beq.n	8006734 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80066ce:	4b43      	ldr	r3, [pc, #268]	; (80067dc <HAL_RCC_OscConfig+0x270>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a42      	ldr	r2, [pc, #264]	; (80067dc <HAL_RCC_OscConfig+0x270>)
 80066d4:	f043 0301 	orr.w	r3, r3, #1
 80066d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80066da:	f7ff f843 	bl	8005764 <HAL_GetTick>
 80066de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80066e0:	e008      	b.n	80066f4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80066e2:	f7ff f83f 	bl	8005764 <HAL_GetTick>
 80066e6:	4602      	mov	r2, r0
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d901      	bls.n	80066f4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e347      	b.n	8006d84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80066f4:	4b39      	ldr	r3, [pc, #228]	; (80067dc <HAL_RCC_OscConfig+0x270>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0302 	and.w	r3, r3, #2
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d0f0      	beq.n	80066e2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006700:	4b36      	ldr	r3, [pc, #216]	; (80067dc <HAL_RCC_OscConfig+0x270>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a35      	ldr	r2, [pc, #212]	; (80067dc <HAL_RCC_OscConfig+0x270>)
 8006706:	f043 0308 	orr.w	r3, r3, #8
 800670a:	6013      	str	r3, [r2, #0]
 800670c:	4b33      	ldr	r3, [pc, #204]	; (80067dc <HAL_RCC_OscConfig+0x270>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6a1b      	ldr	r3, [r3, #32]
 8006718:	4930      	ldr	r1, [pc, #192]	; (80067dc <HAL_RCC_OscConfig+0x270>)
 800671a:	4313      	orrs	r3, r2
 800671c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800671e:	4b2f      	ldr	r3, [pc, #188]	; (80067dc <HAL_RCC_OscConfig+0x270>)
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	69db      	ldr	r3, [r3, #28]
 800672a:	021b      	lsls	r3, r3, #8
 800672c:	492b      	ldr	r1, [pc, #172]	; (80067dc <HAL_RCC_OscConfig+0x270>)
 800672e:	4313      	orrs	r3, r2
 8006730:	604b      	str	r3, [r1, #4]
 8006732:	e01a      	b.n	800676a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006734:	4b29      	ldr	r3, [pc, #164]	; (80067dc <HAL_RCC_OscConfig+0x270>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a28      	ldr	r2, [pc, #160]	; (80067dc <HAL_RCC_OscConfig+0x270>)
 800673a:	f023 0301 	bic.w	r3, r3, #1
 800673e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006740:	f7ff f810 	bl	8005764 <HAL_GetTick>
 8006744:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006746:	e008      	b.n	800675a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006748:	f7ff f80c 	bl	8005764 <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	2b02      	cmp	r3, #2
 8006754:	d901      	bls.n	800675a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e314      	b.n	8006d84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800675a:	4b20      	ldr	r3, [pc, #128]	; (80067dc <HAL_RCC_OscConfig+0x270>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1f0      	bne.n	8006748 <HAL_RCC_OscConfig+0x1dc>
 8006766:	e000      	b.n	800676a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006768:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	2b00      	cmp	r3, #0
 8006774:	d073      	beq.n	800685e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	2b08      	cmp	r3, #8
 800677a:	d005      	beq.n	8006788 <HAL_RCC_OscConfig+0x21c>
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	2b0c      	cmp	r3, #12
 8006780:	d10e      	bne.n	80067a0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	2b03      	cmp	r3, #3
 8006786:	d10b      	bne.n	80067a0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006788:	4b14      	ldr	r3, [pc, #80]	; (80067dc <HAL_RCC_OscConfig+0x270>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d063      	beq.n	800685c <HAL_RCC_OscConfig+0x2f0>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d15f      	bne.n	800685c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	e2f1      	b.n	8006d84 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067a8:	d106      	bne.n	80067b8 <HAL_RCC_OscConfig+0x24c>
 80067aa:	4b0c      	ldr	r3, [pc, #48]	; (80067dc <HAL_RCC_OscConfig+0x270>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a0b      	ldr	r2, [pc, #44]	; (80067dc <HAL_RCC_OscConfig+0x270>)
 80067b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067b4:	6013      	str	r3, [r2, #0]
 80067b6:	e025      	b.n	8006804 <HAL_RCC_OscConfig+0x298>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067c0:	d114      	bne.n	80067ec <HAL_RCC_OscConfig+0x280>
 80067c2:	4b06      	ldr	r3, [pc, #24]	; (80067dc <HAL_RCC_OscConfig+0x270>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a05      	ldr	r2, [pc, #20]	; (80067dc <HAL_RCC_OscConfig+0x270>)
 80067c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067cc:	6013      	str	r3, [r2, #0]
 80067ce:	4b03      	ldr	r3, [pc, #12]	; (80067dc <HAL_RCC_OscConfig+0x270>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a02      	ldr	r2, [pc, #8]	; (80067dc <HAL_RCC_OscConfig+0x270>)
 80067d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067d8:	6013      	str	r3, [r2, #0]
 80067da:	e013      	b.n	8006804 <HAL_RCC_OscConfig+0x298>
 80067dc:	40021000 	.word	0x40021000
 80067e0:	0800c770 	.word	0x0800c770
 80067e4:	20000094 	.word	0x20000094
 80067e8:	2000008c 	.word	0x2000008c
 80067ec:	4ba0      	ldr	r3, [pc, #640]	; (8006a70 <HAL_RCC_OscConfig+0x504>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a9f      	ldr	r2, [pc, #636]	; (8006a70 <HAL_RCC_OscConfig+0x504>)
 80067f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067f6:	6013      	str	r3, [r2, #0]
 80067f8:	4b9d      	ldr	r3, [pc, #628]	; (8006a70 <HAL_RCC_OscConfig+0x504>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a9c      	ldr	r2, [pc, #624]	; (8006a70 <HAL_RCC_OscConfig+0x504>)
 80067fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006802:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d013      	beq.n	8006834 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800680c:	f7fe ffaa 	bl	8005764 <HAL_GetTick>
 8006810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006812:	e008      	b.n	8006826 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006814:	f7fe ffa6 	bl	8005764 <HAL_GetTick>
 8006818:	4602      	mov	r2, r0
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	2b64      	cmp	r3, #100	; 0x64
 8006820:	d901      	bls.n	8006826 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e2ae      	b.n	8006d84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006826:	4b92      	ldr	r3, [pc, #584]	; (8006a70 <HAL_RCC_OscConfig+0x504>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d0f0      	beq.n	8006814 <HAL_RCC_OscConfig+0x2a8>
 8006832:	e014      	b.n	800685e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006834:	f7fe ff96 	bl	8005764 <HAL_GetTick>
 8006838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800683a:	e008      	b.n	800684e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800683c:	f7fe ff92 	bl	8005764 <HAL_GetTick>
 8006840:	4602      	mov	r2, r0
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	2b64      	cmp	r3, #100	; 0x64
 8006848:	d901      	bls.n	800684e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e29a      	b.n	8006d84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800684e:	4b88      	ldr	r3, [pc, #544]	; (8006a70 <HAL_RCC_OscConfig+0x504>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1f0      	bne.n	800683c <HAL_RCC_OscConfig+0x2d0>
 800685a:	e000      	b.n	800685e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800685c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 0302 	and.w	r3, r3, #2
 8006866:	2b00      	cmp	r3, #0
 8006868:	d060      	beq.n	800692c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	2b04      	cmp	r3, #4
 800686e:	d005      	beq.n	800687c <HAL_RCC_OscConfig+0x310>
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	2b0c      	cmp	r3, #12
 8006874:	d119      	bne.n	80068aa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	2b02      	cmp	r3, #2
 800687a:	d116      	bne.n	80068aa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800687c:	4b7c      	ldr	r3, [pc, #496]	; (8006a70 <HAL_RCC_OscConfig+0x504>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006884:	2b00      	cmp	r3, #0
 8006886:	d005      	beq.n	8006894 <HAL_RCC_OscConfig+0x328>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d101      	bne.n	8006894 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e277      	b.n	8006d84 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006894:	4b76      	ldr	r3, [pc, #472]	; (8006a70 <HAL_RCC_OscConfig+0x504>)
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	061b      	lsls	r3, r3, #24
 80068a2:	4973      	ldr	r1, [pc, #460]	; (8006a70 <HAL_RCC_OscConfig+0x504>)
 80068a4:	4313      	orrs	r3, r2
 80068a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068a8:	e040      	b.n	800692c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d023      	beq.n	80068fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068b2:	4b6f      	ldr	r3, [pc, #444]	; (8006a70 <HAL_RCC_OscConfig+0x504>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a6e      	ldr	r2, [pc, #440]	; (8006a70 <HAL_RCC_OscConfig+0x504>)
 80068b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068be:	f7fe ff51 	bl	8005764 <HAL_GetTick>
 80068c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068c4:	e008      	b.n	80068d8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068c6:	f7fe ff4d 	bl	8005764 <HAL_GetTick>
 80068ca:	4602      	mov	r2, r0
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d901      	bls.n	80068d8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80068d4:	2303      	movs	r3, #3
 80068d6:	e255      	b.n	8006d84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068d8:	4b65      	ldr	r3, [pc, #404]	; (8006a70 <HAL_RCC_OscConfig+0x504>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d0f0      	beq.n	80068c6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068e4:	4b62      	ldr	r3, [pc, #392]	; (8006a70 <HAL_RCC_OscConfig+0x504>)
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	061b      	lsls	r3, r3, #24
 80068f2:	495f      	ldr	r1, [pc, #380]	; (8006a70 <HAL_RCC_OscConfig+0x504>)
 80068f4:	4313      	orrs	r3, r2
 80068f6:	604b      	str	r3, [r1, #4]
 80068f8:	e018      	b.n	800692c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068fa:	4b5d      	ldr	r3, [pc, #372]	; (8006a70 <HAL_RCC_OscConfig+0x504>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a5c      	ldr	r2, [pc, #368]	; (8006a70 <HAL_RCC_OscConfig+0x504>)
 8006900:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006904:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006906:	f7fe ff2d 	bl	8005764 <HAL_GetTick>
 800690a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800690c:	e008      	b.n	8006920 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800690e:	f7fe ff29 	bl	8005764 <HAL_GetTick>
 8006912:	4602      	mov	r2, r0
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	2b02      	cmp	r3, #2
 800691a:	d901      	bls.n	8006920 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800691c:	2303      	movs	r3, #3
 800691e:	e231      	b.n	8006d84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006920:	4b53      	ldr	r3, [pc, #332]	; (8006a70 <HAL_RCC_OscConfig+0x504>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1f0      	bne.n	800690e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0308 	and.w	r3, r3, #8
 8006934:	2b00      	cmp	r3, #0
 8006936:	d03c      	beq.n	80069b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	695b      	ldr	r3, [r3, #20]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d01c      	beq.n	800697a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006940:	4b4b      	ldr	r3, [pc, #300]	; (8006a70 <HAL_RCC_OscConfig+0x504>)
 8006942:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006946:	4a4a      	ldr	r2, [pc, #296]	; (8006a70 <HAL_RCC_OscConfig+0x504>)
 8006948:	f043 0301 	orr.w	r3, r3, #1
 800694c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006950:	f7fe ff08 	bl	8005764 <HAL_GetTick>
 8006954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006956:	e008      	b.n	800696a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006958:	f7fe ff04 	bl	8005764 <HAL_GetTick>
 800695c:	4602      	mov	r2, r0
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	2b02      	cmp	r3, #2
 8006964:	d901      	bls.n	800696a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006966:	2303      	movs	r3, #3
 8006968:	e20c      	b.n	8006d84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800696a:	4b41      	ldr	r3, [pc, #260]	; (8006a70 <HAL_RCC_OscConfig+0x504>)
 800696c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006970:	f003 0302 	and.w	r3, r3, #2
 8006974:	2b00      	cmp	r3, #0
 8006976:	d0ef      	beq.n	8006958 <HAL_RCC_OscConfig+0x3ec>
 8006978:	e01b      	b.n	80069b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800697a:	4b3d      	ldr	r3, [pc, #244]	; (8006a70 <HAL_RCC_OscConfig+0x504>)
 800697c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006980:	4a3b      	ldr	r2, [pc, #236]	; (8006a70 <HAL_RCC_OscConfig+0x504>)
 8006982:	f023 0301 	bic.w	r3, r3, #1
 8006986:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800698a:	f7fe feeb 	bl	8005764 <HAL_GetTick>
 800698e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006990:	e008      	b.n	80069a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006992:	f7fe fee7 	bl	8005764 <HAL_GetTick>
 8006996:	4602      	mov	r2, r0
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	1ad3      	subs	r3, r2, r3
 800699c:	2b02      	cmp	r3, #2
 800699e:	d901      	bls.n	80069a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80069a0:	2303      	movs	r3, #3
 80069a2:	e1ef      	b.n	8006d84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80069a4:	4b32      	ldr	r3, [pc, #200]	; (8006a70 <HAL_RCC_OscConfig+0x504>)
 80069a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1ef      	bne.n	8006992 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0304 	and.w	r3, r3, #4
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f000 80a6 	beq.w	8006b0c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069c0:	2300      	movs	r3, #0
 80069c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80069c4:	4b2a      	ldr	r3, [pc, #168]	; (8006a70 <HAL_RCC_OscConfig+0x504>)
 80069c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10d      	bne.n	80069ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069d0:	4b27      	ldr	r3, [pc, #156]	; (8006a70 <HAL_RCC_OscConfig+0x504>)
 80069d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069d4:	4a26      	ldr	r2, [pc, #152]	; (8006a70 <HAL_RCC_OscConfig+0x504>)
 80069d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069da:	6593      	str	r3, [r2, #88]	; 0x58
 80069dc:	4b24      	ldr	r3, [pc, #144]	; (8006a70 <HAL_RCC_OscConfig+0x504>)
 80069de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069e4:	60bb      	str	r3, [r7, #8]
 80069e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069e8:	2301      	movs	r3, #1
 80069ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069ec:	4b21      	ldr	r3, [pc, #132]	; (8006a74 <HAL_RCC_OscConfig+0x508>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d118      	bne.n	8006a2a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069f8:	4b1e      	ldr	r3, [pc, #120]	; (8006a74 <HAL_RCC_OscConfig+0x508>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a1d      	ldr	r2, [pc, #116]	; (8006a74 <HAL_RCC_OscConfig+0x508>)
 80069fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a04:	f7fe feae 	bl	8005764 <HAL_GetTick>
 8006a08:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a0a:	e008      	b.n	8006a1e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a0c:	f7fe feaa 	bl	8005764 <HAL_GetTick>
 8006a10:	4602      	mov	r2, r0
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d901      	bls.n	8006a1e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e1b2      	b.n	8006d84 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a1e:	4b15      	ldr	r3, [pc, #84]	; (8006a74 <HAL_RCC_OscConfig+0x508>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d0f0      	beq.n	8006a0c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d108      	bne.n	8006a44 <HAL_RCC_OscConfig+0x4d8>
 8006a32:	4b0f      	ldr	r3, [pc, #60]	; (8006a70 <HAL_RCC_OscConfig+0x504>)
 8006a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a38:	4a0d      	ldr	r2, [pc, #52]	; (8006a70 <HAL_RCC_OscConfig+0x504>)
 8006a3a:	f043 0301 	orr.w	r3, r3, #1
 8006a3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a42:	e029      	b.n	8006a98 <HAL_RCC_OscConfig+0x52c>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	2b05      	cmp	r3, #5
 8006a4a:	d115      	bne.n	8006a78 <HAL_RCC_OscConfig+0x50c>
 8006a4c:	4b08      	ldr	r3, [pc, #32]	; (8006a70 <HAL_RCC_OscConfig+0x504>)
 8006a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a52:	4a07      	ldr	r2, [pc, #28]	; (8006a70 <HAL_RCC_OscConfig+0x504>)
 8006a54:	f043 0304 	orr.w	r3, r3, #4
 8006a58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a5c:	4b04      	ldr	r3, [pc, #16]	; (8006a70 <HAL_RCC_OscConfig+0x504>)
 8006a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a62:	4a03      	ldr	r2, [pc, #12]	; (8006a70 <HAL_RCC_OscConfig+0x504>)
 8006a64:	f043 0301 	orr.w	r3, r3, #1
 8006a68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a6c:	e014      	b.n	8006a98 <HAL_RCC_OscConfig+0x52c>
 8006a6e:	bf00      	nop
 8006a70:	40021000 	.word	0x40021000
 8006a74:	40007000 	.word	0x40007000
 8006a78:	4b9a      	ldr	r3, [pc, #616]	; (8006ce4 <HAL_RCC_OscConfig+0x778>)
 8006a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a7e:	4a99      	ldr	r2, [pc, #612]	; (8006ce4 <HAL_RCC_OscConfig+0x778>)
 8006a80:	f023 0301 	bic.w	r3, r3, #1
 8006a84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a88:	4b96      	ldr	r3, [pc, #600]	; (8006ce4 <HAL_RCC_OscConfig+0x778>)
 8006a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a8e:	4a95      	ldr	r2, [pc, #596]	; (8006ce4 <HAL_RCC_OscConfig+0x778>)
 8006a90:	f023 0304 	bic.w	r3, r3, #4
 8006a94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d016      	beq.n	8006ace <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aa0:	f7fe fe60 	bl	8005764 <HAL_GetTick>
 8006aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006aa6:	e00a      	b.n	8006abe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006aa8:	f7fe fe5c 	bl	8005764 <HAL_GetTick>
 8006aac:	4602      	mov	r2, r0
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d901      	bls.n	8006abe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e162      	b.n	8006d84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006abe:	4b89      	ldr	r3, [pc, #548]	; (8006ce4 <HAL_RCC_OscConfig+0x778>)
 8006ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ac4:	f003 0302 	and.w	r3, r3, #2
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d0ed      	beq.n	8006aa8 <HAL_RCC_OscConfig+0x53c>
 8006acc:	e015      	b.n	8006afa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ace:	f7fe fe49 	bl	8005764 <HAL_GetTick>
 8006ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ad4:	e00a      	b.n	8006aec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ad6:	f7fe fe45 	bl	8005764 <HAL_GetTick>
 8006ada:	4602      	mov	r2, r0
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	1ad3      	subs	r3, r2, r3
 8006ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d901      	bls.n	8006aec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	e14b      	b.n	8006d84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006aec:	4b7d      	ldr	r3, [pc, #500]	; (8006ce4 <HAL_RCC_OscConfig+0x778>)
 8006aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006af2:	f003 0302 	and.w	r3, r3, #2
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d1ed      	bne.n	8006ad6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006afa:	7ffb      	ldrb	r3, [r7, #31]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d105      	bne.n	8006b0c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b00:	4b78      	ldr	r3, [pc, #480]	; (8006ce4 <HAL_RCC_OscConfig+0x778>)
 8006b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b04:	4a77      	ldr	r2, [pc, #476]	; (8006ce4 <HAL_RCC_OscConfig+0x778>)
 8006b06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b0a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0320 	and.w	r3, r3, #32
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d03c      	beq.n	8006b92 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d01c      	beq.n	8006b5a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006b20:	4b70      	ldr	r3, [pc, #448]	; (8006ce4 <HAL_RCC_OscConfig+0x778>)
 8006b22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b26:	4a6f      	ldr	r2, [pc, #444]	; (8006ce4 <HAL_RCC_OscConfig+0x778>)
 8006b28:	f043 0301 	orr.w	r3, r3, #1
 8006b2c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b30:	f7fe fe18 	bl	8005764 <HAL_GetTick>
 8006b34:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006b36:	e008      	b.n	8006b4a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b38:	f7fe fe14 	bl	8005764 <HAL_GetTick>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	d901      	bls.n	8006b4a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e11c      	b.n	8006d84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006b4a:	4b66      	ldr	r3, [pc, #408]	; (8006ce4 <HAL_RCC_OscConfig+0x778>)
 8006b4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b50:	f003 0302 	and.w	r3, r3, #2
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d0ef      	beq.n	8006b38 <HAL_RCC_OscConfig+0x5cc>
 8006b58:	e01b      	b.n	8006b92 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006b5a:	4b62      	ldr	r3, [pc, #392]	; (8006ce4 <HAL_RCC_OscConfig+0x778>)
 8006b5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b60:	4a60      	ldr	r2, [pc, #384]	; (8006ce4 <HAL_RCC_OscConfig+0x778>)
 8006b62:	f023 0301 	bic.w	r3, r3, #1
 8006b66:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b6a:	f7fe fdfb 	bl	8005764 <HAL_GetTick>
 8006b6e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006b70:	e008      	b.n	8006b84 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b72:	f7fe fdf7 	bl	8005764 <HAL_GetTick>
 8006b76:	4602      	mov	r2, r0
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	1ad3      	subs	r3, r2, r3
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	d901      	bls.n	8006b84 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006b80:	2303      	movs	r3, #3
 8006b82:	e0ff      	b.n	8006d84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006b84:	4b57      	ldr	r3, [pc, #348]	; (8006ce4 <HAL_RCC_OscConfig+0x778>)
 8006b86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b8a:	f003 0302 	and.w	r3, r3, #2
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1ef      	bne.n	8006b72 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	f000 80f3 	beq.w	8006d82 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	f040 80c9 	bne.w	8006d38 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006ba6:	4b4f      	ldr	r3, [pc, #316]	; (8006ce4 <HAL_RCC_OscConfig+0x778>)
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	f003 0203 	and.w	r2, r3, #3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d12c      	bne.n	8006c14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d123      	bne.n	8006c14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bd6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d11b      	bne.n	8006c14 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d113      	bne.n	8006c14 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bf6:	085b      	lsrs	r3, r3, #1
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d109      	bne.n	8006c14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0a:	085b      	lsrs	r3, r3, #1
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d06b      	beq.n	8006cec <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	2b0c      	cmp	r3, #12
 8006c18:	d062      	beq.n	8006ce0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006c1a:	4b32      	ldr	r3, [pc, #200]	; (8006ce4 <HAL_RCC_OscConfig+0x778>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d001      	beq.n	8006c2a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e0ac      	b.n	8006d84 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006c2a:	4b2e      	ldr	r3, [pc, #184]	; (8006ce4 <HAL_RCC_OscConfig+0x778>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a2d      	ldr	r2, [pc, #180]	; (8006ce4 <HAL_RCC_OscConfig+0x778>)
 8006c30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c34:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006c36:	f7fe fd95 	bl	8005764 <HAL_GetTick>
 8006c3a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c3c:	e008      	b.n	8006c50 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c3e:	f7fe fd91 	bl	8005764 <HAL_GetTick>
 8006c42:	4602      	mov	r2, r0
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	1ad3      	subs	r3, r2, r3
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d901      	bls.n	8006c50 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	e099      	b.n	8006d84 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c50:	4b24      	ldr	r3, [pc, #144]	; (8006ce4 <HAL_RCC_OscConfig+0x778>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d1f0      	bne.n	8006c3e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c5c:	4b21      	ldr	r3, [pc, #132]	; (8006ce4 <HAL_RCC_OscConfig+0x778>)
 8006c5e:	68da      	ldr	r2, [r3, #12]
 8006c60:	4b21      	ldr	r3, [pc, #132]	; (8006ce8 <HAL_RCC_OscConfig+0x77c>)
 8006c62:	4013      	ands	r3, r2
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006c6c:	3a01      	subs	r2, #1
 8006c6e:	0112      	lsls	r2, r2, #4
 8006c70:	4311      	orrs	r1, r2
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006c76:	0212      	lsls	r2, r2, #8
 8006c78:	4311      	orrs	r1, r2
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006c7e:	0852      	lsrs	r2, r2, #1
 8006c80:	3a01      	subs	r2, #1
 8006c82:	0552      	lsls	r2, r2, #21
 8006c84:	4311      	orrs	r1, r2
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006c8a:	0852      	lsrs	r2, r2, #1
 8006c8c:	3a01      	subs	r2, #1
 8006c8e:	0652      	lsls	r2, r2, #25
 8006c90:	4311      	orrs	r1, r2
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006c96:	06d2      	lsls	r2, r2, #27
 8006c98:	430a      	orrs	r2, r1
 8006c9a:	4912      	ldr	r1, [pc, #72]	; (8006ce4 <HAL_RCC_OscConfig+0x778>)
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006ca0:	4b10      	ldr	r3, [pc, #64]	; (8006ce4 <HAL_RCC_OscConfig+0x778>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a0f      	ldr	r2, [pc, #60]	; (8006ce4 <HAL_RCC_OscConfig+0x778>)
 8006ca6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006caa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006cac:	4b0d      	ldr	r3, [pc, #52]	; (8006ce4 <HAL_RCC_OscConfig+0x778>)
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	4a0c      	ldr	r2, [pc, #48]	; (8006ce4 <HAL_RCC_OscConfig+0x778>)
 8006cb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cb6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006cb8:	f7fe fd54 	bl	8005764 <HAL_GetTick>
 8006cbc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cbe:	e008      	b.n	8006cd2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cc0:	f7fe fd50 	bl	8005764 <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d901      	bls.n	8006cd2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e058      	b.n	8006d84 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cd2:	4b04      	ldr	r3, [pc, #16]	; (8006ce4 <HAL_RCC_OscConfig+0x778>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d0f0      	beq.n	8006cc0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006cde:	e050      	b.n	8006d82 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e04f      	b.n	8006d84 <HAL_RCC_OscConfig+0x818>
 8006ce4:	40021000 	.word	0x40021000
 8006ce8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cec:	4b27      	ldr	r3, [pc, #156]	; (8006d8c <HAL_RCC_OscConfig+0x820>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d144      	bne.n	8006d82 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006cf8:	4b24      	ldr	r3, [pc, #144]	; (8006d8c <HAL_RCC_OscConfig+0x820>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a23      	ldr	r2, [pc, #140]	; (8006d8c <HAL_RCC_OscConfig+0x820>)
 8006cfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d02:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006d04:	4b21      	ldr	r3, [pc, #132]	; (8006d8c <HAL_RCC_OscConfig+0x820>)
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	4a20      	ldr	r2, [pc, #128]	; (8006d8c <HAL_RCC_OscConfig+0x820>)
 8006d0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d0e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006d10:	f7fe fd28 	bl	8005764 <HAL_GetTick>
 8006d14:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d16:	e008      	b.n	8006d2a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d18:	f7fe fd24 	bl	8005764 <HAL_GetTick>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d901      	bls.n	8006d2a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8006d26:	2303      	movs	r3, #3
 8006d28:	e02c      	b.n	8006d84 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d2a:	4b18      	ldr	r3, [pc, #96]	; (8006d8c <HAL_RCC_OscConfig+0x820>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d0f0      	beq.n	8006d18 <HAL_RCC_OscConfig+0x7ac>
 8006d36:	e024      	b.n	8006d82 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	2b0c      	cmp	r3, #12
 8006d3c:	d01f      	beq.n	8006d7e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d3e:	4b13      	ldr	r3, [pc, #76]	; (8006d8c <HAL_RCC_OscConfig+0x820>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a12      	ldr	r2, [pc, #72]	; (8006d8c <HAL_RCC_OscConfig+0x820>)
 8006d44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d4a:	f7fe fd0b 	bl	8005764 <HAL_GetTick>
 8006d4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d50:	e008      	b.n	8006d64 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d52:	f7fe fd07 	bl	8005764 <HAL_GetTick>
 8006d56:	4602      	mov	r2, r0
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d901      	bls.n	8006d64 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e00f      	b.n	8006d84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d64:	4b09      	ldr	r3, [pc, #36]	; (8006d8c <HAL_RCC_OscConfig+0x820>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d1f0      	bne.n	8006d52 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006d70:	4b06      	ldr	r3, [pc, #24]	; (8006d8c <HAL_RCC_OscConfig+0x820>)
 8006d72:	68da      	ldr	r2, [r3, #12]
 8006d74:	4905      	ldr	r1, [pc, #20]	; (8006d8c <HAL_RCC_OscConfig+0x820>)
 8006d76:	4b06      	ldr	r3, [pc, #24]	; (8006d90 <HAL_RCC_OscConfig+0x824>)
 8006d78:	4013      	ands	r3, r2
 8006d7a:	60cb      	str	r3, [r1, #12]
 8006d7c:	e001      	b.n	8006d82 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e000      	b.n	8006d84 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3720      	adds	r7, #32
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	40021000 	.word	0x40021000
 8006d90:	feeefffc 	.word	0xfeeefffc

08006d94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d101      	bne.n	8006da8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e0e7      	b.n	8006f78 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006da8:	4b75      	ldr	r3, [pc, #468]	; (8006f80 <HAL_RCC_ClockConfig+0x1ec>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 0307 	and.w	r3, r3, #7
 8006db0:	683a      	ldr	r2, [r7, #0]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d910      	bls.n	8006dd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006db6:	4b72      	ldr	r3, [pc, #456]	; (8006f80 <HAL_RCC_ClockConfig+0x1ec>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f023 0207 	bic.w	r2, r3, #7
 8006dbe:	4970      	ldr	r1, [pc, #448]	; (8006f80 <HAL_RCC_ClockConfig+0x1ec>)
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dc6:	4b6e      	ldr	r3, [pc, #440]	; (8006f80 <HAL_RCC_ClockConfig+0x1ec>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 0307 	and.w	r3, r3, #7
 8006dce:	683a      	ldr	r2, [r7, #0]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d001      	beq.n	8006dd8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e0cf      	b.n	8006f78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 0302 	and.w	r3, r3, #2
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d010      	beq.n	8006e06 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	689a      	ldr	r2, [r3, #8]
 8006de8:	4b66      	ldr	r3, [pc, #408]	; (8006f84 <HAL_RCC_ClockConfig+0x1f0>)
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d908      	bls.n	8006e06 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006df4:	4b63      	ldr	r3, [pc, #396]	; (8006f84 <HAL_RCC_ClockConfig+0x1f0>)
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	4960      	ldr	r1, [pc, #384]	; (8006f84 <HAL_RCC_ClockConfig+0x1f0>)
 8006e02:	4313      	orrs	r3, r2
 8006e04:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d04c      	beq.n	8006eac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	2b03      	cmp	r3, #3
 8006e18:	d107      	bne.n	8006e2a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e1a:	4b5a      	ldr	r3, [pc, #360]	; (8006f84 <HAL_RCC_ClockConfig+0x1f0>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d121      	bne.n	8006e6a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e0a6      	b.n	8006f78 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d107      	bne.n	8006e42 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e32:	4b54      	ldr	r3, [pc, #336]	; (8006f84 <HAL_RCC_ClockConfig+0x1f0>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d115      	bne.n	8006e6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e09a      	b.n	8006f78 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d107      	bne.n	8006e5a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006e4a:	4b4e      	ldr	r3, [pc, #312]	; (8006f84 <HAL_RCC_ClockConfig+0x1f0>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 0302 	and.w	r3, r3, #2
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d109      	bne.n	8006e6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e08e      	b.n	8006f78 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e5a:	4b4a      	ldr	r3, [pc, #296]	; (8006f84 <HAL_RCC_ClockConfig+0x1f0>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d101      	bne.n	8006e6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e086      	b.n	8006f78 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006e6a:	4b46      	ldr	r3, [pc, #280]	; (8006f84 <HAL_RCC_ClockConfig+0x1f0>)
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	f023 0203 	bic.w	r2, r3, #3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	4943      	ldr	r1, [pc, #268]	; (8006f84 <HAL_RCC_ClockConfig+0x1f0>)
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e7c:	f7fe fc72 	bl	8005764 <HAL_GetTick>
 8006e80:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e82:	e00a      	b.n	8006e9a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e84:	f7fe fc6e 	bl	8005764 <HAL_GetTick>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d901      	bls.n	8006e9a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e06e      	b.n	8006f78 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e9a:	4b3a      	ldr	r3, [pc, #232]	; (8006f84 <HAL_RCC_ClockConfig+0x1f0>)
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	f003 020c 	and.w	r2, r3, #12
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d1eb      	bne.n	8006e84 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 0302 	and.w	r3, r3, #2
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d010      	beq.n	8006eda <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	689a      	ldr	r2, [r3, #8]
 8006ebc:	4b31      	ldr	r3, [pc, #196]	; (8006f84 <HAL_RCC_ClockConfig+0x1f0>)
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d208      	bcs.n	8006eda <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ec8:	4b2e      	ldr	r3, [pc, #184]	; (8006f84 <HAL_RCC_ClockConfig+0x1f0>)
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	492b      	ldr	r1, [pc, #172]	; (8006f84 <HAL_RCC_ClockConfig+0x1f0>)
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006eda:	4b29      	ldr	r3, [pc, #164]	; (8006f80 <HAL_RCC_ClockConfig+0x1ec>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 0307 	and.w	r3, r3, #7
 8006ee2:	683a      	ldr	r2, [r7, #0]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d210      	bcs.n	8006f0a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ee8:	4b25      	ldr	r3, [pc, #148]	; (8006f80 <HAL_RCC_ClockConfig+0x1ec>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f023 0207 	bic.w	r2, r3, #7
 8006ef0:	4923      	ldr	r1, [pc, #140]	; (8006f80 <HAL_RCC_ClockConfig+0x1ec>)
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ef8:	4b21      	ldr	r3, [pc, #132]	; (8006f80 <HAL_RCC_ClockConfig+0x1ec>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 0307 	and.w	r3, r3, #7
 8006f00:	683a      	ldr	r2, [r7, #0]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d001      	beq.n	8006f0a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e036      	b.n	8006f78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 0304 	and.w	r3, r3, #4
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d008      	beq.n	8006f28 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f16:	4b1b      	ldr	r3, [pc, #108]	; (8006f84 <HAL_RCC_ClockConfig+0x1f0>)
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	4918      	ldr	r1, [pc, #96]	; (8006f84 <HAL_RCC_ClockConfig+0x1f0>)
 8006f24:	4313      	orrs	r3, r2
 8006f26:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0308 	and.w	r3, r3, #8
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d009      	beq.n	8006f48 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f34:	4b13      	ldr	r3, [pc, #76]	; (8006f84 <HAL_RCC_ClockConfig+0x1f0>)
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	00db      	lsls	r3, r3, #3
 8006f42:	4910      	ldr	r1, [pc, #64]	; (8006f84 <HAL_RCC_ClockConfig+0x1f0>)
 8006f44:	4313      	orrs	r3, r2
 8006f46:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006f48:	f000 f824 	bl	8006f94 <HAL_RCC_GetSysClockFreq>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	4b0d      	ldr	r3, [pc, #52]	; (8006f84 <HAL_RCC_ClockConfig+0x1f0>)
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	091b      	lsrs	r3, r3, #4
 8006f54:	f003 030f 	and.w	r3, r3, #15
 8006f58:	490b      	ldr	r1, [pc, #44]	; (8006f88 <HAL_RCC_ClockConfig+0x1f4>)
 8006f5a:	5ccb      	ldrb	r3, [r1, r3]
 8006f5c:	f003 031f 	and.w	r3, r3, #31
 8006f60:	fa22 f303 	lsr.w	r3, r2, r3
 8006f64:	4a09      	ldr	r2, [pc, #36]	; (8006f8c <HAL_RCC_ClockConfig+0x1f8>)
 8006f66:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006f68:	4b09      	ldr	r3, [pc, #36]	; (8006f90 <HAL_RCC_ClockConfig+0x1fc>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f7fe fbbd 	bl	80056ec <HAL_InitTick>
 8006f72:	4603      	mov	r3, r0
 8006f74:	72fb      	strb	r3, [r7, #11]

  return status;
 8006f76:	7afb      	ldrb	r3, [r7, #11]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3710      	adds	r7, #16
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	40022000 	.word	0x40022000
 8006f84:	40021000 	.word	0x40021000
 8006f88:	0800c770 	.word	0x0800c770
 8006f8c:	20000094 	.word	0x20000094
 8006f90:	2000008c 	.word	0x2000008c

08006f94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b089      	sub	sp, #36	; 0x24
 8006f98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	61fb      	str	r3, [r7, #28]
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fa2:	4b3e      	ldr	r3, [pc, #248]	; (800709c <HAL_RCC_GetSysClockFreq+0x108>)
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	f003 030c 	and.w	r3, r3, #12
 8006faa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006fac:	4b3b      	ldr	r3, [pc, #236]	; (800709c <HAL_RCC_GetSysClockFreq+0x108>)
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	f003 0303 	and.w	r3, r3, #3
 8006fb4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d005      	beq.n	8006fc8 <HAL_RCC_GetSysClockFreq+0x34>
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	2b0c      	cmp	r3, #12
 8006fc0:	d121      	bne.n	8007006 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d11e      	bne.n	8007006 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006fc8:	4b34      	ldr	r3, [pc, #208]	; (800709c <HAL_RCC_GetSysClockFreq+0x108>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0308 	and.w	r3, r3, #8
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d107      	bne.n	8006fe4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006fd4:	4b31      	ldr	r3, [pc, #196]	; (800709c <HAL_RCC_GetSysClockFreq+0x108>)
 8006fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fda:	0a1b      	lsrs	r3, r3, #8
 8006fdc:	f003 030f 	and.w	r3, r3, #15
 8006fe0:	61fb      	str	r3, [r7, #28]
 8006fe2:	e005      	b.n	8006ff0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006fe4:	4b2d      	ldr	r3, [pc, #180]	; (800709c <HAL_RCC_GetSysClockFreq+0x108>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	091b      	lsrs	r3, r3, #4
 8006fea:	f003 030f 	and.w	r3, r3, #15
 8006fee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006ff0:	4a2b      	ldr	r2, [pc, #172]	; (80070a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ff8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d10d      	bne.n	800701c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007004:	e00a      	b.n	800701c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	2b04      	cmp	r3, #4
 800700a:	d102      	bne.n	8007012 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800700c:	4b25      	ldr	r3, [pc, #148]	; (80070a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800700e:	61bb      	str	r3, [r7, #24]
 8007010:	e004      	b.n	800701c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	2b08      	cmp	r3, #8
 8007016:	d101      	bne.n	800701c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007018:	4b23      	ldr	r3, [pc, #140]	; (80070a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800701a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	2b0c      	cmp	r3, #12
 8007020:	d134      	bne.n	800708c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007022:	4b1e      	ldr	r3, [pc, #120]	; (800709c <HAL_RCC_GetSysClockFreq+0x108>)
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	f003 0303 	and.w	r3, r3, #3
 800702a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	2b02      	cmp	r3, #2
 8007030:	d003      	beq.n	800703a <HAL_RCC_GetSysClockFreq+0xa6>
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	2b03      	cmp	r3, #3
 8007036:	d003      	beq.n	8007040 <HAL_RCC_GetSysClockFreq+0xac>
 8007038:	e005      	b.n	8007046 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800703a:	4b1a      	ldr	r3, [pc, #104]	; (80070a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800703c:	617b      	str	r3, [r7, #20]
      break;
 800703e:	e005      	b.n	800704c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007040:	4b19      	ldr	r3, [pc, #100]	; (80070a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8007042:	617b      	str	r3, [r7, #20]
      break;
 8007044:	e002      	b.n	800704c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	617b      	str	r3, [r7, #20]
      break;
 800704a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800704c:	4b13      	ldr	r3, [pc, #76]	; (800709c <HAL_RCC_GetSysClockFreq+0x108>)
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	091b      	lsrs	r3, r3, #4
 8007052:	f003 0307 	and.w	r3, r3, #7
 8007056:	3301      	adds	r3, #1
 8007058:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800705a:	4b10      	ldr	r3, [pc, #64]	; (800709c <HAL_RCC_GetSysClockFreq+0x108>)
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	0a1b      	lsrs	r3, r3, #8
 8007060:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007064:	697a      	ldr	r2, [r7, #20]
 8007066:	fb03 f202 	mul.w	r2, r3, r2
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007070:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007072:	4b0a      	ldr	r3, [pc, #40]	; (800709c <HAL_RCC_GetSysClockFreq+0x108>)
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	0e5b      	lsrs	r3, r3, #25
 8007078:	f003 0303 	and.w	r3, r3, #3
 800707c:	3301      	adds	r3, #1
 800707e:	005b      	lsls	r3, r3, #1
 8007080:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007082:	697a      	ldr	r2, [r7, #20]
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	fbb2 f3f3 	udiv	r3, r2, r3
 800708a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800708c:	69bb      	ldr	r3, [r7, #24]
}
 800708e:	4618      	mov	r0, r3
 8007090:	3724      	adds	r7, #36	; 0x24
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	40021000 	.word	0x40021000
 80070a0:	0800c788 	.word	0x0800c788
 80070a4:	00f42400 	.word	0x00f42400
 80070a8:	02dc6c00 	.word	0x02dc6c00

080070ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070ac:	b480      	push	{r7}
 80070ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070b0:	4b03      	ldr	r3, [pc, #12]	; (80070c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80070b2:	681b      	ldr	r3, [r3, #0]
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop
 80070c0:	20000094 	.word	0x20000094

080070c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80070c8:	f7ff fff0 	bl	80070ac <HAL_RCC_GetHCLKFreq>
 80070cc:	4602      	mov	r2, r0
 80070ce:	4b06      	ldr	r3, [pc, #24]	; (80070e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	0a1b      	lsrs	r3, r3, #8
 80070d4:	f003 0307 	and.w	r3, r3, #7
 80070d8:	4904      	ldr	r1, [pc, #16]	; (80070ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80070da:	5ccb      	ldrb	r3, [r1, r3]
 80070dc:	f003 031f 	and.w	r3, r3, #31
 80070e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	40021000 	.word	0x40021000
 80070ec:	0800c780 	.word	0x0800c780

080070f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80070f4:	f7ff ffda 	bl	80070ac <HAL_RCC_GetHCLKFreq>
 80070f8:	4602      	mov	r2, r0
 80070fa:	4b06      	ldr	r3, [pc, #24]	; (8007114 <HAL_RCC_GetPCLK2Freq+0x24>)
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	0adb      	lsrs	r3, r3, #11
 8007100:	f003 0307 	and.w	r3, r3, #7
 8007104:	4904      	ldr	r1, [pc, #16]	; (8007118 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007106:	5ccb      	ldrb	r3, [r1, r3]
 8007108:	f003 031f 	and.w	r3, r3, #31
 800710c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007110:	4618      	mov	r0, r3
 8007112:	bd80      	pop	{r7, pc}
 8007114:	40021000 	.word	0x40021000
 8007118:	0800c780 	.word	0x0800c780

0800711c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b086      	sub	sp, #24
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007124:	2300      	movs	r3, #0
 8007126:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007128:	4b2a      	ldr	r3, [pc, #168]	; (80071d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800712a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800712c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007130:	2b00      	cmp	r3, #0
 8007132:	d003      	beq.n	800713c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007134:	f7ff f9b6 	bl	80064a4 <HAL_PWREx_GetVoltageRange>
 8007138:	6178      	str	r0, [r7, #20]
 800713a:	e014      	b.n	8007166 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800713c:	4b25      	ldr	r3, [pc, #148]	; (80071d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800713e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007140:	4a24      	ldr	r2, [pc, #144]	; (80071d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007146:	6593      	str	r3, [r2, #88]	; 0x58
 8007148:	4b22      	ldr	r3, [pc, #136]	; (80071d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800714a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800714c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007150:	60fb      	str	r3, [r7, #12]
 8007152:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007154:	f7ff f9a6 	bl	80064a4 <HAL_PWREx_GetVoltageRange>
 8007158:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800715a:	4b1e      	ldr	r3, [pc, #120]	; (80071d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800715c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800715e:	4a1d      	ldr	r2, [pc, #116]	; (80071d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007164:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800716c:	d10b      	bne.n	8007186 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2b80      	cmp	r3, #128	; 0x80
 8007172:	d919      	bls.n	80071a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2ba0      	cmp	r3, #160	; 0xa0
 8007178:	d902      	bls.n	8007180 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800717a:	2302      	movs	r3, #2
 800717c:	613b      	str	r3, [r7, #16]
 800717e:	e013      	b.n	80071a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007180:	2301      	movs	r3, #1
 8007182:	613b      	str	r3, [r7, #16]
 8007184:	e010      	b.n	80071a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2b80      	cmp	r3, #128	; 0x80
 800718a:	d902      	bls.n	8007192 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800718c:	2303      	movs	r3, #3
 800718e:	613b      	str	r3, [r7, #16]
 8007190:	e00a      	b.n	80071a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2b80      	cmp	r3, #128	; 0x80
 8007196:	d102      	bne.n	800719e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007198:	2302      	movs	r3, #2
 800719a:	613b      	str	r3, [r7, #16]
 800719c:	e004      	b.n	80071a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2b70      	cmp	r3, #112	; 0x70
 80071a2:	d101      	bne.n	80071a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80071a4:	2301      	movs	r3, #1
 80071a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80071a8:	4b0b      	ldr	r3, [pc, #44]	; (80071d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f023 0207 	bic.w	r2, r3, #7
 80071b0:	4909      	ldr	r1, [pc, #36]	; (80071d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80071b8:	4b07      	ldr	r3, [pc, #28]	; (80071d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 0307 	and.w	r3, r3, #7
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d001      	beq.n	80071ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e000      	b.n	80071cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3718      	adds	r7, #24
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	40021000 	.word	0x40021000
 80071d8:	40022000 	.word	0x40022000

080071dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b086      	sub	sp, #24
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80071e4:	2300      	movs	r3, #0
 80071e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80071e8:	2300      	movs	r3, #0
 80071ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d031      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007200:	d01a      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8007202:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007206:	d814      	bhi.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007208:	2b00      	cmp	r3, #0
 800720a:	d009      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800720c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007210:	d10f      	bne.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8007212:	4b5d      	ldr	r3, [pc, #372]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	4a5c      	ldr	r2, [pc, #368]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800721c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800721e:	e00c      	b.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	3304      	adds	r3, #4
 8007224:	2100      	movs	r1, #0
 8007226:	4618      	mov	r0, r3
 8007228:	f000 f9f0 	bl	800760c <RCCEx_PLLSAI1_Config>
 800722c:	4603      	mov	r3, r0
 800722e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007230:	e003      	b.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	74fb      	strb	r3, [r7, #19]
      break;
 8007236:	e000      	b.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8007238:	bf00      	nop
    }

    if(ret == HAL_OK)
 800723a:	7cfb      	ldrb	r3, [r7, #19]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d10b      	bne.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007240:	4b51      	ldr	r3, [pc, #324]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007246:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800724e:	494e      	ldr	r1, [pc, #312]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007250:	4313      	orrs	r3, r2
 8007252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007256:	e001      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007258:	7cfb      	ldrb	r3, [r7, #19]
 800725a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007264:	2b00      	cmp	r3, #0
 8007266:	f000 809e 	beq.w	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800726a:	2300      	movs	r3, #0
 800726c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800726e:	4b46      	ldr	r3, [pc, #280]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d101      	bne.n	800727e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800727a:	2301      	movs	r3, #1
 800727c:	e000      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800727e:	2300      	movs	r3, #0
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00d      	beq.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007284:	4b40      	ldr	r3, [pc, #256]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007288:	4a3f      	ldr	r2, [pc, #252]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800728a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800728e:	6593      	str	r3, [r2, #88]	; 0x58
 8007290:	4b3d      	ldr	r3, [pc, #244]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007298:	60bb      	str	r3, [r7, #8]
 800729a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800729c:	2301      	movs	r3, #1
 800729e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80072a0:	4b3a      	ldr	r3, [pc, #232]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a39      	ldr	r2, [pc, #228]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80072a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80072ac:	f7fe fa5a 	bl	8005764 <HAL_GetTick>
 80072b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80072b2:	e009      	b.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072b4:	f7fe fa56 	bl	8005764 <HAL_GetTick>
 80072b8:	4602      	mov	r2, r0
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	1ad3      	subs	r3, r2, r3
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d902      	bls.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80072c2:	2303      	movs	r3, #3
 80072c4:	74fb      	strb	r3, [r7, #19]
        break;
 80072c6:	e005      	b.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80072c8:	4b30      	ldr	r3, [pc, #192]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d0ef      	beq.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80072d4:	7cfb      	ldrb	r3, [r7, #19]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d15a      	bne.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80072da:	4b2b      	ldr	r3, [pc, #172]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80072dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d01e      	beq.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072f0:	697a      	ldr	r2, [r7, #20]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d019      	beq.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80072f6:	4b24      	ldr	r3, [pc, #144]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80072f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007300:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007302:	4b21      	ldr	r3, [pc, #132]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007308:	4a1f      	ldr	r2, [pc, #124]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800730a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800730e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007312:	4b1d      	ldr	r3, [pc, #116]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007318:	4a1b      	ldr	r2, [pc, #108]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800731a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800731e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007322:	4a19      	ldr	r2, [pc, #100]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	f003 0301 	and.w	r3, r3, #1
 8007330:	2b00      	cmp	r3, #0
 8007332:	d016      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007334:	f7fe fa16 	bl	8005764 <HAL_GetTick>
 8007338:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800733a:	e00b      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800733c:	f7fe fa12 	bl	8005764 <HAL_GetTick>
 8007340:	4602      	mov	r2, r0
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	1ad3      	subs	r3, r2, r3
 8007346:	f241 3288 	movw	r2, #5000	; 0x1388
 800734a:	4293      	cmp	r3, r2
 800734c:	d902      	bls.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800734e:	2303      	movs	r3, #3
 8007350:	74fb      	strb	r3, [r7, #19]
            break;
 8007352:	e006      	b.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007354:	4b0c      	ldr	r3, [pc, #48]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800735a:	f003 0302 	and.w	r3, r3, #2
 800735e:	2b00      	cmp	r3, #0
 8007360:	d0ec      	beq.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8007362:	7cfb      	ldrb	r3, [r7, #19]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10b      	bne.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007368:	4b07      	ldr	r3, [pc, #28]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800736a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800736e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007376:	4904      	ldr	r1, [pc, #16]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007378:	4313      	orrs	r3, r2
 800737a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800737e:	e009      	b.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007380:	7cfb      	ldrb	r3, [r7, #19]
 8007382:	74bb      	strb	r3, [r7, #18]
 8007384:	e006      	b.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8007386:	bf00      	nop
 8007388:	40021000 	.word	0x40021000
 800738c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007390:	7cfb      	ldrb	r3, [r7, #19]
 8007392:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007394:	7c7b      	ldrb	r3, [r7, #17]
 8007396:	2b01      	cmp	r3, #1
 8007398:	d105      	bne.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800739a:	4b9b      	ldr	r3, [pc, #620]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800739c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800739e:	4a9a      	ldr	r2, [pc, #616]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80073a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f003 0301 	and.w	r3, r3, #1
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00a      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80073b2:	4b95      	ldr	r3, [pc, #596]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80073b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073b8:	f023 0203 	bic.w	r2, r3, #3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a1b      	ldr	r3, [r3, #32]
 80073c0:	4991      	ldr	r1, [pc, #580]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80073c2:	4313      	orrs	r3, r2
 80073c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0302 	and.w	r3, r3, #2
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00a      	beq.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80073d4:	4b8c      	ldr	r3, [pc, #560]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80073d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073da:	f023 020c 	bic.w	r2, r3, #12
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e2:	4989      	ldr	r1, [pc, #548]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80073e4:	4313      	orrs	r3, r2
 80073e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 0304 	and.w	r3, r3, #4
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00a      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80073f6:	4b84      	ldr	r3, [pc, #528]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80073f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007404:	4980      	ldr	r1, [pc, #512]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007406:	4313      	orrs	r3, r2
 8007408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 0320 	and.w	r3, r3, #32
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00a      	beq.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007418:	4b7b      	ldr	r3, [pc, #492]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800741a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800741e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007426:	4978      	ldr	r1, [pc, #480]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007428:	4313      	orrs	r3, r2
 800742a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00a      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800743a:	4b73      	ldr	r3, [pc, #460]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800743c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007440:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007448:	496f      	ldr	r1, [pc, #444]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800744a:	4313      	orrs	r3, r2
 800744c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00a      	beq.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800745c:	4b6a      	ldr	r3, [pc, #424]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800745e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007462:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746a:	4967      	ldr	r1, [pc, #412]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800746c:	4313      	orrs	r3, r2
 800746e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00a      	beq.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800747e:	4b62      	ldr	r3, [pc, #392]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007484:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800748c:	495e      	ldr	r1, [pc, #376]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800748e:	4313      	orrs	r3, r2
 8007490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00a      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80074a0:	4b59      	ldr	r3, [pc, #356]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80074a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ae:	4956      	ldr	r1, [pc, #344]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80074b0:	4313      	orrs	r3, r2
 80074b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00a      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80074c2:	4b51      	ldr	r3, [pc, #324]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80074c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d0:	494d      	ldr	r1, [pc, #308]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80074d2:	4313      	orrs	r3, r2
 80074d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d028      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80074e4:	4b48      	ldr	r3, [pc, #288]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80074e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074f2:	4945      	ldr	r1, [pc, #276]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80074f4:	4313      	orrs	r3, r2
 80074f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007502:	d106      	bne.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007504:	4b40      	ldr	r3, [pc, #256]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	4a3f      	ldr	r2, [pc, #252]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800750a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800750e:	60d3      	str	r3, [r2, #12]
 8007510:	e011      	b.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007516:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800751a:	d10c      	bne.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	3304      	adds	r3, #4
 8007520:	2101      	movs	r1, #1
 8007522:	4618      	mov	r0, r3
 8007524:	f000 f872 	bl	800760c <RCCEx_PLLSAI1_Config>
 8007528:	4603      	mov	r3, r0
 800752a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800752c:	7cfb      	ldrb	r3, [r7, #19]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d001      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8007532:	7cfb      	ldrb	r3, [r7, #19]
 8007534:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800753e:	2b00      	cmp	r3, #0
 8007540:	d028      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007542:	4b31      	ldr	r3, [pc, #196]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007548:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007550:	492d      	ldr	r1, [pc, #180]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007552:	4313      	orrs	r3, r2
 8007554:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800755c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007560:	d106      	bne.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007562:	4b29      	ldr	r3, [pc, #164]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	4a28      	ldr	r2, [pc, #160]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007568:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800756c:	60d3      	str	r3, [r2, #12]
 800756e:	e011      	b.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007574:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007578:	d10c      	bne.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	3304      	adds	r3, #4
 800757e:	2101      	movs	r1, #1
 8007580:	4618      	mov	r0, r3
 8007582:	f000 f843 	bl	800760c <RCCEx_PLLSAI1_Config>
 8007586:	4603      	mov	r3, r0
 8007588:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800758a:	7cfb      	ldrb	r3, [r7, #19]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d001      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8007590:	7cfb      	ldrb	r3, [r7, #19]
 8007592:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800759c:	2b00      	cmp	r3, #0
 800759e:	d01c      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80075a0:	4b19      	ldr	r3, [pc, #100]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80075a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ae:	4916      	ldr	r1, [pc, #88]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80075b0:	4313      	orrs	r3, r2
 80075b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075be:	d10c      	bne.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	3304      	adds	r3, #4
 80075c4:	2102      	movs	r1, #2
 80075c6:	4618      	mov	r0, r3
 80075c8:	f000 f820 	bl	800760c <RCCEx_PLLSAI1_Config>
 80075cc:	4603      	mov	r3, r0
 80075ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80075d0:	7cfb      	ldrb	r3, [r7, #19]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d001      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 80075d6:	7cfb      	ldrb	r3, [r7, #19]
 80075d8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00a      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80075e6:	4b08      	ldr	r3, [pc, #32]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80075e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ec:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075f4:	4904      	ldr	r1, [pc, #16]	; (8007608 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80075f6:	4313      	orrs	r3, r2
 80075f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80075fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3718      	adds	r7, #24
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	40021000 	.word	0x40021000

0800760c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007616:	2300      	movs	r3, #0
 8007618:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800761a:	4b74      	ldr	r3, [pc, #464]	; (80077ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	f003 0303 	and.w	r3, r3, #3
 8007622:	2b00      	cmp	r3, #0
 8007624:	d018      	beq.n	8007658 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007626:	4b71      	ldr	r3, [pc, #452]	; (80077ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	f003 0203 	and.w	r2, r3, #3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	429a      	cmp	r2, r3
 8007634:	d10d      	bne.n	8007652 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
       ||
 800763a:	2b00      	cmp	r3, #0
 800763c:	d009      	beq.n	8007652 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800763e:	4b6b      	ldr	r3, [pc, #428]	; (80077ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	091b      	lsrs	r3, r3, #4
 8007644:	f003 0307 	and.w	r3, r3, #7
 8007648:	1c5a      	adds	r2, r3, #1
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	685b      	ldr	r3, [r3, #4]
       ||
 800764e:	429a      	cmp	r2, r3
 8007650:	d047      	beq.n	80076e2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	73fb      	strb	r3, [r7, #15]
 8007656:	e044      	b.n	80076e2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2b03      	cmp	r3, #3
 800765e:	d018      	beq.n	8007692 <RCCEx_PLLSAI1_Config+0x86>
 8007660:	2b03      	cmp	r3, #3
 8007662:	d825      	bhi.n	80076b0 <RCCEx_PLLSAI1_Config+0xa4>
 8007664:	2b01      	cmp	r3, #1
 8007666:	d002      	beq.n	800766e <RCCEx_PLLSAI1_Config+0x62>
 8007668:	2b02      	cmp	r3, #2
 800766a:	d009      	beq.n	8007680 <RCCEx_PLLSAI1_Config+0x74>
 800766c:	e020      	b.n	80076b0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800766e:	4b5f      	ldr	r3, [pc, #380]	; (80077ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 0302 	and.w	r3, r3, #2
 8007676:	2b00      	cmp	r3, #0
 8007678:	d11d      	bne.n	80076b6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800767e:	e01a      	b.n	80076b6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007680:	4b5a      	ldr	r3, [pc, #360]	; (80077ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007688:	2b00      	cmp	r3, #0
 800768a:	d116      	bne.n	80076ba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007690:	e013      	b.n	80076ba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007692:	4b56      	ldr	r3, [pc, #344]	; (80077ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800769a:	2b00      	cmp	r3, #0
 800769c:	d10f      	bne.n	80076be <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800769e:	4b53      	ldr	r3, [pc, #332]	; (80077ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d109      	bne.n	80076be <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80076ae:	e006      	b.n	80076be <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	73fb      	strb	r3, [r7, #15]
      break;
 80076b4:	e004      	b.n	80076c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80076b6:	bf00      	nop
 80076b8:	e002      	b.n	80076c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80076ba:	bf00      	nop
 80076bc:	e000      	b.n	80076c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80076be:	bf00      	nop
    }

    if(status == HAL_OK)
 80076c0:	7bfb      	ldrb	r3, [r7, #15]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d10d      	bne.n	80076e2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80076c6:	4b49      	ldr	r3, [pc, #292]	; (80077ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6819      	ldr	r1, [r3, #0]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	3b01      	subs	r3, #1
 80076d8:	011b      	lsls	r3, r3, #4
 80076da:	430b      	orrs	r3, r1
 80076dc:	4943      	ldr	r1, [pc, #268]	; (80077ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80076de:	4313      	orrs	r3, r2
 80076e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80076e2:	7bfb      	ldrb	r3, [r7, #15]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d17c      	bne.n	80077e2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80076e8:	4b40      	ldr	r3, [pc, #256]	; (80077ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a3f      	ldr	r2, [pc, #252]	; (80077ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80076ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80076f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076f4:	f7fe f836 	bl	8005764 <HAL_GetTick>
 80076f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80076fa:	e009      	b.n	8007710 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80076fc:	f7fe f832 	bl	8005764 <HAL_GetTick>
 8007700:	4602      	mov	r2, r0
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	1ad3      	subs	r3, r2, r3
 8007706:	2b02      	cmp	r3, #2
 8007708:	d902      	bls.n	8007710 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800770a:	2303      	movs	r3, #3
 800770c:	73fb      	strb	r3, [r7, #15]
        break;
 800770e:	e005      	b.n	800771c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007710:	4b36      	ldr	r3, [pc, #216]	; (80077ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1ef      	bne.n	80076fc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800771c:	7bfb      	ldrb	r3, [r7, #15]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d15f      	bne.n	80077e2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d110      	bne.n	800774a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007728:	4b30      	ldr	r3, [pc, #192]	; (80077ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007730:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	6892      	ldr	r2, [r2, #8]
 8007738:	0211      	lsls	r1, r2, #8
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	68d2      	ldr	r2, [r2, #12]
 800773e:	06d2      	lsls	r2, r2, #27
 8007740:	430a      	orrs	r2, r1
 8007742:	492a      	ldr	r1, [pc, #168]	; (80077ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8007744:	4313      	orrs	r3, r2
 8007746:	610b      	str	r3, [r1, #16]
 8007748:	e027      	b.n	800779a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	2b01      	cmp	r3, #1
 800774e:	d112      	bne.n	8007776 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007750:	4b26      	ldr	r3, [pc, #152]	; (80077ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8007752:	691b      	ldr	r3, [r3, #16]
 8007754:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007758:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	6892      	ldr	r2, [r2, #8]
 8007760:	0211      	lsls	r1, r2, #8
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	6912      	ldr	r2, [r2, #16]
 8007766:	0852      	lsrs	r2, r2, #1
 8007768:	3a01      	subs	r2, #1
 800776a:	0552      	lsls	r2, r2, #21
 800776c:	430a      	orrs	r2, r1
 800776e:	491f      	ldr	r1, [pc, #124]	; (80077ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8007770:	4313      	orrs	r3, r2
 8007772:	610b      	str	r3, [r1, #16]
 8007774:	e011      	b.n	800779a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007776:	4b1d      	ldr	r3, [pc, #116]	; (80077ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800777e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	6892      	ldr	r2, [r2, #8]
 8007786:	0211      	lsls	r1, r2, #8
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	6952      	ldr	r2, [r2, #20]
 800778c:	0852      	lsrs	r2, r2, #1
 800778e:	3a01      	subs	r2, #1
 8007790:	0652      	lsls	r2, r2, #25
 8007792:	430a      	orrs	r2, r1
 8007794:	4915      	ldr	r1, [pc, #84]	; (80077ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8007796:	4313      	orrs	r3, r2
 8007798:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800779a:	4b14      	ldr	r3, [pc, #80]	; (80077ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a13      	ldr	r2, [pc, #76]	; (80077ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80077a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80077a4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077a6:	f7fd ffdd 	bl	8005764 <HAL_GetTick>
 80077aa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80077ac:	e009      	b.n	80077c2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80077ae:	f7fd ffd9 	bl	8005764 <HAL_GetTick>
 80077b2:	4602      	mov	r2, r0
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	1ad3      	subs	r3, r2, r3
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	d902      	bls.n	80077c2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80077bc:	2303      	movs	r3, #3
 80077be:	73fb      	strb	r3, [r7, #15]
          break;
 80077c0:	e005      	b.n	80077ce <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80077c2:	4b0a      	ldr	r3, [pc, #40]	; (80077ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d0ef      	beq.n	80077ae <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80077ce:	7bfb      	ldrb	r3, [r7, #15]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d106      	bne.n	80077e2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80077d4:	4b05      	ldr	r3, [pc, #20]	; (80077ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80077d6:	691a      	ldr	r2, [r3, #16]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	699b      	ldr	r3, [r3, #24]
 80077dc:	4903      	ldr	r1, [pc, #12]	; (80077ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80077de:	4313      	orrs	r3, r2
 80077e0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80077e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3710      	adds	r7, #16
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}
 80077ec:	40021000 	.word	0x40021000

080077f0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d06c      	beq.n	80078dc <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b00      	cmp	r3, #0
 800780c:	d106      	bne.n	800781c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f003 fa74 	bl	800ad04 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2202      	movs	r2, #2
 8007820:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	22ca      	movs	r2, #202	; 0xca
 800782a:	625a      	str	r2, [r3, #36]	; 0x24
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2253      	movs	r2, #83	; 0x53
 8007832:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 f87c 	bl	8007932 <RTC_EnterInitMode>
 800783a:	4603      	mov	r3, r0
 800783c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800783e:	7bfb      	ldrb	r3, [r7, #15]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d14b      	bne.n	80078dc <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	6812      	ldr	r2, [r2, #0]
 800784e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007852:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007856:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	6899      	ldr	r1, [r3, #8]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	685a      	ldr	r2, [r3, #4]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	431a      	orrs	r2, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	699b      	ldr	r3, [r3, #24]
 800786c:	431a      	orrs	r2, r3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	430a      	orrs	r2, r1
 8007874:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	68d2      	ldr	r2, [r2, #12]
 800787e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	6919      	ldr	r1, [r3, #16]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	041a      	lsls	r2, r3, #16
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	430a      	orrs	r2, r1
 8007892:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 f87f 	bl	8007998 <RTC_ExitInitMode>
 800789a:	4603      	mov	r3, r0
 800789c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800789e:	7bfb      	ldrb	r3, [r7, #15]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d11b      	bne.n	80078dc <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f022 0203 	bic.w	r2, r2, #3
 80078b2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	69da      	ldr	r2, [r3, #28]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	695b      	ldr	r3, [r3, #20]
 80078c2:	431a      	orrs	r2, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	430a      	orrs	r2, r1
 80078ca:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	22ff      	movs	r2, #255	; 0xff
 80078d2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80078dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3710      	adds	r7, #16
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}

080078e6 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b084      	sub	sp, #16
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	68da      	ldr	r2, [r3, #12]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80078fc:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80078fe:	f7fd ff31 	bl	8005764 <HAL_GetTick>
 8007902:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007904:	e009      	b.n	800791a <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007906:	f7fd ff2d 	bl	8005764 <HAL_GetTick>
 800790a:	4602      	mov	r2, r0
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	1ad3      	subs	r3, r2, r3
 8007910:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007914:	d901      	bls.n	800791a <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007916:	2303      	movs	r3, #3
 8007918:	e007      	b.n	800792a <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	f003 0320 	and.w	r3, r3, #32
 8007924:	2b00      	cmp	r3, #0
 8007926:	d0ee      	beq.n	8007906 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b084      	sub	sp, #16
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800793a:	2300      	movs	r3, #0
 800793c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007948:	2b00      	cmp	r3, #0
 800794a:	d120      	bne.n	800798e <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007954:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007956:	f7fd ff05 	bl	8005764 <HAL_GetTick>
 800795a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800795c:	e00d      	b.n	800797a <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800795e:	f7fd ff01 	bl	8005764 <HAL_GetTick>
 8007962:	4602      	mov	r2, r0
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	1ad3      	subs	r3, r2, r3
 8007968:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800796c:	d905      	bls.n	800797a <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800796e:	2303      	movs	r3, #3
 8007970:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2203      	movs	r2, #3
 8007976:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007984:	2b00      	cmp	r3, #0
 8007986:	d102      	bne.n	800798e <RTC_EnterInitMode+0x5c>
 8007988:	7bfb      	ldrb	r3, [r7, #15]
 800798a:	2b03      	cmp	r3, #3
 800798c:	d1e7      	bne.n	800795e <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800798e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007990:	4618      	mov	r0, r3
 8007992:	3710      	adds	r7, #16
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079a0:	2300      	movs	r3, #0
 80079a2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80079a4:	4b1a      	ldr	r3, [pc, #104]	; (8007a10 <RTC_ExitInitMode+0x78>)
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	4a19      	ldr	r2, [pc, #100]	; (8007a10 <RTC_ExitInitMode+0x78>)
 80079aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079ae:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80079b0:	4b17      	ldr	r3, [pc, #92]	; (8007a10 <RTC_ExitInitMode+0x78>)
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f003 0320 	and.w	r3, r3, #32
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d10c      	bne.n	80079d6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f7ff ff92 	bl	80078e6 <HAL_RTC_WaitForSynchro>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d01e      	beq.n	8007a06 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2203      	movs	r2, #3
 80079cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80079d0:	2303      	movs	r3, #3
 80079d2:	73fb      	strb	r3, [r7, #15]
 80079d4:	e017      	b.n	8007a06 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80079d6:	4b0e      	ldr	r3, [pc, #56]	; (8007a10 <RTC_ExitInitMode+0x78>)
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	4a0d      	ldr	r2, [pc, #52]	; (8007a10 <RTC_ExitInitMode+0x78>)
 80079dc:	f023 0320 	bic.w	r3, r3, #32
 80079e0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f7ff ff7f 	bl	80078e6 <HAL_RTC_WaitForSynchro>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d005      	beq.n	80079fa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2203      	movs	r2, #3
 80079f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80079f6:	2303      	movs	r3, #3
 80079f8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80079fa:	4b05      	ldr	r3, [pc, #20]	; (8007a10 <RTC_ExitInitMode+0x78>)
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	4a04      	ldr	r2, [pc, #16]	; (8007a10 <RTC_ExitInitMode+0x78>)
 8007a00:	f043 0320 	orr.w	r3, r3, #32
 8007a04:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3710      	adds	r7, #16
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	40002800 	.word	0x40002800

08007a14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d101      	bne.n	8007a26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	e095      	b.n	8007b52 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d108      	bne.n	8007a40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a36:	d009      	beq.n	8007a4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	61da      	str	r2, [r3, #28]
 8007a3e:	e005      	b.n	8007a4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d106      	bne.n	8007a6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 f877 	bl	8007b5a <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2202      	movs	r2, #2
 8007a70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a82:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007a8c:	d902      	bls.n	8007a94 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	60fb      	str	r3, [r7, #12]
 8007a92:	e002      	b.n	8007a9a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007a94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a98:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007aa2:	d007      	beq.n	8007ab4 <HAL_SPI_Init+0xa0>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007aac:	d002      	beq.n	8007ab4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007ac4:	431a      	orrs	r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	f003 0302 	and.w	r3, r3, #2
 8007ace:	431a      	orrs	r2, r3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	695b      	ldr	r3, [r3, #20]
 8007ad4:	f003 0301 	and.w	r3, r3, #1
 8007ad8:	431a      	orrs	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ae2:	431a      	orrs	r2, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	69db      	ldr	r3, [r3, #28]
 8007ae8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007aec:	431a      	orrs	r2, r3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a1b      	ldr	r3, [r3, #32]
 8007af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007af6:	ea42 0103 	orr.w	r1, r2, r3
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007afe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	430a      	orrs	r2, r1
 8007b08:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	699b      	ldr	r3, [r3, #24]
 8007b0e:	0c1b      	lsrs	r3, r3, #16
 8007b10:	f003 0204 	and.w	r2, r3, #4
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b18:	f003 0310 	and.w	r3, r3, #16
 8007b1c:	431a      	orrs	r2, r3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b22:	f003 0308 	and.w	r3, r3, #8
 8007b26:	431a      	orrs	r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007b30:	ea42 0103 	orr.w	r1, r2, r3
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	430a      	orrs	r2, r1
 8007b40:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8007b5a:	b480      	push	{r7}
 8007b5c:	b083      	sub	sp, #12
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8007b62:	bf00      	nop
 8007b64:	370c      	adds	r7, #12
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr

08007b6e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b082      	sub	sp, #8
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d101      	bne.n	8007b80 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e049      	b.n	8007c14 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d106      	bne.n	8007b9a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f003 f8d1 	bl	800ad3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2202      	movs	r2, #2
 8007b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	3304      	adds	r3, #4
 8007baa:	4619      	mov	r1, r3
 8007bac:	4610      	mov	r0, r2
 8007bae:	f000 fe2f 	bl	8008810 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2201      	movs	r2, #1
 8007be6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2201      	movs	r2, #1
 8007bee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2201      	movs	r2, #1
 8007c06:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3708      	adds	r7, #8
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d101      	bne.n	8007c2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e049      	b.n	8007cc2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d106      	bne.n	8007c48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f003 f92a 	bl	800ae9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2202      	movs	r2, #2
 8007c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	3304      	adds	r3, #4
 8007c58:	4619      	mov	r1, r3
 8007c5a:	4610      	mov	r0, r2
 8007c5c:	f000 fdd8 	bl	8008810 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3708      	adds	r7, #8
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
	...

08007ccc <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b086      	sub	sp, #24
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	607a      	str	r2, [r7, #4]
 8007cd8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d109      	bne.n	8007cf8 <HAL_TIM_PWM_Start_DMA+0x2c>
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	bf0c      	ite	eq
 8007cf0:	2301      	moveq	r3, #1
 8007cf2:	2300      	movne	r3, #0
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	e03c      	b.n	8007d72 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	2b04      	cmp	r3, #4
 8007cfc:	d109      	bne.n	8007d12 <HAL_TIM_PWM_Start_DMA+0x46>
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	2b02      	cmp	r3, #2
 8007d08:	bf0c      	ite	eq
 8007d0a:	2301      	moveq	r3, #1
 8007d0c:	2300      	movne	r3, #0
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	e02f      	b.n	8007d72 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	2b08      	cmp	r3, #8
 8007d16:	d109      	bne.n	8007d2c <HAL_TIM_PWM_Start_DMA+0x60>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	2b02      	cmp	r3, #2
 8007d22:	bf0c      	ite	eq
 8007d24:	2301      	moveq	r3, #1
 8007d26:	2300      	movne	r3, #0
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	e022      	b.n	8007d72 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	2b0c      	cmp	r3, #12
 8007d30:	d109      	bne.n	8007d46 <HAL_TIM_PWM_Start_DMA+0x7a>
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	bf0c      	ite	eq
 8007d3e:	2301      	moveq	r3, #1
 8007d40:	2300      	movne	r3, #0
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	e015      	b.n	8007d72 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	2b10      	cmp	r3, #16
 8007d4a:	d109      	bne.n	8007d60 <HAL_TIM_PWM_Start_DMA+0x94>
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	2b02      	cmp	r3, #2
 8007d56:	bf0c      	ite	eq
 8007d58:	2301      	moveq	r3, #1
 8007d5a:	2300      	movne	r3, #0
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	e008      	b.n	8007d72 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	bf0c      	ite	eq
 8007d6c:	2301      	moveq	r3, #1
 8007d6e:	2300      	movne	r3, #0
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d001      	beq.n	8007d7a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8007d76:	2302      	movs	r3, #2
 8007d78:	e18d      	b.n	8008096 <HAL_TIM_PWM_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d109      	bne.n	8007d94 <HAL_TIM_PWM_Start_DMA+0xc8>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	bf0c      	ite	eq
 8007d8c:	2301      	moveq	r3, #1
 8007d8e:	2300      	movne	r3, #0
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	e03c      	b.n	8007e0e <HAL_TIM_PWM_Start_DMA+0x142>
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	2b04      	cmp	r3, #4
 8007d98:	d109      	bne.n	8007dae <HAL_TIM_PWM_Start_DMA+0xe2>
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	bf0c      	ite	eq
 8007da6:	2301      	moveq	r3, #1
 8007da8:	2300      	movne	r3, #0
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	e02f      	b.n	8007e0e <HAL_TIM_PWM_Start_DMA+0x142>
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	2b08      	cmp	r3, #8
 8007db2:	d109      	bne.n	8007dc8 <HAL_TIM_PWM_Start_DMA+0xfc>
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	bf0c      	ite	eq
 8007dc0:	2301      	moveq	r3, #1
 8007dc2:	2300      	movne	r3, #0
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	e022      	b.n	8007e0e <HAL_TIM_PWM_Start_DMA+0x142>
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	2b0c      	cmp	r3, #12
 8007dcc:	d109      	bne.n	8007de2 <HAL_TIM_PWM_Start_DMA+0x116>
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	bf0c      	ite	eq
 8007dda:	2301      	moveq	r3, #1
 8007ddc:	2300      	movne	r3, #0
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	e015      	b.n	8007e0e <HAL_TIM_PWM_Start_DMA+0x142>
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	2b10      	cmp	r3, #16
 8007de6:	d109      	bne.n	8007dfc <HAL_TIM_PWM_Start_DMA+0x130>
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	bf0c      	ite	eq
 8007df4:	2301      	moveq	r3, #1
 8007df6:	2300      	movne	r3, #0
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	e008      	b.n	8007e0e <HAL_TIM_PWM_Start_DMA+0x142>
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	bf0c      	ite	eq
 8007e08:	2301      	moveq	r3, #1
 8007e0a:	2300      	movne	r3, #0
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d034      	beq.n	8007e7c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d002      	beq.n	8007e1e <HAL_TIM_PWM_Start_DMA+0x152>
 8007e18:	887b      	ldrh	r3, [r7, #2]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d101      	bne.n	8007e22 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e139      	b.n	8008096 <HAL_TIM_PWM_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d104      	bne.n	8007e32 <HAL_TIM_PWM_Start_DMA+0x166>
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2202      	movs	r2, #2
 8007e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e30:	e026      	b.n	8007e80 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	2b04      	cmp	r3, #4
 8007e36:	d104      	bne.n	8007e42 <HAL_TIM_PWM_Start_DMA+0x176>
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2202      	movs	r2, #2
 8007e3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e40:	e01e      	b.n	8007e80 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	2b08      	cmp	r3, #8
 8007e46:	d104      	bne.n	8007e52 <HAL_TIM_PWM_Start_DMA+0x186>
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2202      	movs	r2, #2
 8007e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e50:	e016      	b.n	8007e80 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	2b0c      	cmp	r3, #12
 8007e56:	d104      	bne.n	8007e62 <HAL_TIM_PWM_Start_DMA+0x196>
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2202      	movs	r2, #2
 8007e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e60:	e00e      	b.n	8007e80 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	2b10      	cmp	r3, #16
 8007e66:	d104      	bne.n	8007e72 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2202      	movs	r2, #2
 8007e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e70:	e006      	b.n	8007e80 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2202      	movs	r2, #2
 8007e76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e7a:	e001      	b.n	8007e80 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e10a      	b.n	8008096 <HAL_TIM_PWM_Start_DMA+0x3ca>
  }

  switch (Channel)
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	2b0c      	cmp	r3, #12
 8007e84:	f200 80ae 	bhi.w	8007fe4 <HAL_TIM_PWM_Start_DMA+0x318>
 8007e88:	a201      	add	r2, pc, #4	; (adr r2, 8007e90 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8007e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8e:	bf00      	nop
 8007e90:	08007ec5 	.word	0x08007ec5
 8007e94:	08007fe5 	.word	0x08007fe5
 8007e98:	08007fe5 	.word	0x08007fe5
 8007e9c:	08007fe5 	.word	0x08007fe5
 8007ea0:	08007f0d 	.word	0x08007f0d
 8007ea4:	08007fe5 	.word	0x08007fe5
 8007ea8:	08007fe5 	.word	0x08007fe5
 8007eac:	08007fe5 	.word	0x08007fe5
 8007eb0:	08007f55 	.word	0x08007f55
 8007eb4:	08007fe5 	.word	0x08007fe5
 8007eb8:	08007fe5 	.word	0x08007fe5
 8007ebc:	08007fe5 	.word	0x08007fe5
 8007ec0:	08007f9d 	.word	0x08007f9d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec8:	4a75      	ldr	r2, [pc, #468]	; (80080a0 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8007eca:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed0:	4a74      	ldr	r2, [pc, #464]	; (80080a4 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8007ed2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed8:	4a73      	ldr	r2, [pc, #460]	; (80080a8 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8007eda:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007ee0:	6879      	ldr	r1, [r7, #4]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	3334      	adds	r3, #52	; 0x34
 8007ee8:	461a      	mov	r2, r3
 8007eea:	887b      	ldrh	r3, [r7, #2]
 8007eec:	f7fd fe92 	bl	8005c14 <HAL_DMA_Start_IT>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d001      	beq.n	8007efa <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e0cd      	b.n	8008096 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	68da      	ldr	r2, [r3, #12]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f08:	60da      	str	r2, [r3, #12]
      break;
 8007f0a:	e06e      	b.n	8007fea <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f10:	4a63      	ldr	r2, [pc, #396]	; (80080a0 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8007f12:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f18:	4a62      	ldr	r2, [pc, #392]	; (80080a4 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8007f1a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f20:	4a61      	ldr	r2, [pc, #388]	; (80080a8 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8007f22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007f28:	6879      	ldr	r1, [r7, #4]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	3338      	adds	r3, #56	; 0x38
 8007f30:	461a      	mov	r2, r3
 8007f32:	887b      	ldrh	r3, [r7, #2]
 8007f34:	f7fd fe6e 	bl	8005c14 <HAL_DMA_Start_IT>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d001      	beq.n	8007f42 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e0a9      	b.n	8008096 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	68da      	ldr	r2, [r3, #12]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007f50:	60da      	str	r2, [r3, #12]
      break;
 8007f52:	e04a      	b.n	8007fea <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f58:	4a51      	ldr	r2, [pc, #324]	; (80080a0 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8007f5a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f60:	4a50      	ldr	r2, [pc, #320]	; (80080a4 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8007f62:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f68:	4a4f      	ldr	r2, [pc, #316]	; (80080a8 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8007f6a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007f70:	6879      	ldr	r1, [r7, #4]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	333c      	adds	r3, #60	; 0x3c
 8007f78:	461a      	mov	r2, r3
 8007f7a:	887b      	ldrh	r3, [r7, #2]
 8007f7c:	f7fd fe4a 	bl	8005c14 <HAL_DMA_Start_IT>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d001      	beq.n	8007f8a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	e085      	b.n	8008096 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68da      	ldr	r2, [r3, #12]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f98:	60da      	str	r2, [r3, #12]
      break;
 8007f9a:	e026      	b.n	8007fea <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fa0:	4a3f      	ldr	r2, [pc, #252]	; (80080a0 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8007fa2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fa8:	4a3e      	ldr	r2, [pc, #248]	; (80080a4 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8007faa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fb0:	4a3d      	ldr	r2, [pc, #244]	; (80080a8 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8007fb2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007fb8:	6879      	ldr	r1, [r7, #4]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	3340      	adds	r3, #64	; 0x40
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	887b      	ldrh	r3, [r7, #2]
 8007fc4:	f7fd fe26 	bl	8005c14 <HAL_DMA_Start_IT>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d001      	beq.n	8007fd2 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e061      	b.n	8008096 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68da      	ldr	r2, [r3, #12]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007fe0:	60da      	str	r2, [r3, #12]
      break;
 8007fe2:	e002      	b.n	8007fea <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	75fb      	strb	r3, [r7, #23]
      break;
 8007fe8:	bf00      	nop
  }

  if (status == HAL_OK)
 8007fea:	7dfb      	ldrb	r3, [r7, #23]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d151      	bne.n	8008094 <HAL_TIM_PWM_Start_DMA+0x3c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	68b9      	ldr	r1, [r7, #8]
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f000 ff85 	bl	8008f08 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a2a      	ldr	r2, [pc, #168]	; (80080ac <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d009      	beq.n	800801c <HAL_TIM_PWM_Start_DMA+0x350>
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a28      	ldr	r2, [pc, #160]	; (80080b0 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d004      	beq.n	800801c <HAL_TIM_PWM_Start_DMA+0x350>
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a27      	ldr	r2, [pc, #156]	; (80080b4 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d101      	bne.n	8008020 <HAL_TIM_PWM_Start_DMA+0x354>
 800801c:	2301      	movs	r3, #1
 800801e:	e000      	b.n	8008022 <HAL_TIM_PWM_Start_DMA+0x356>
 8008020:	2300      	movs	r3, #0
 8008022:	2b00      	cmp	r3, #0
 8008024:	d007      	beq.n	8008036 <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008034:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a1c      	ldr	r2, [pc, #112]	; (80080ac <HAL_TIM_PWM_Start_DMA+0x3e0>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d009      	beq.n	8008054 <HAL_TIM_PWM_Start_DMA+0x388>
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008048:	d004      	beq.n	8008054 <HAL_TIM_PWM_Start_DMA+0x388>
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a18      	ldr	r2, [pc, #96]	; (80080b0 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d115      	bne.n	8008080 <HAL_TIM_PWM_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	689a      	ldr	r2, [r3, #8]
 800805a:	4b17      	ldr	r3, [pc, #92]	; (80080b8 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 800805c:	4013      	ands	r3, r2
 800805e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	2b06      	cmp	r3, #6
 8008064:	d015      	beq.n	8008092 <HAL_TIM_PWM_Start_DMA+0x3c6>
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800806c:	d011      	beq.n	8008092 <HAL_TIM_PWM_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f042 0201 	orr.w	r2, r2, #1
 800807c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800807e:	e008      	b.n	8008092 <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f042 0201 	orr.w	r2, r2, #1
 800808e:	601a      	str	r2, [r3, #0]
 8008090:	e000      	b.n	8008094 <HAL_TIM_PWM_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008092:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008094:	7dfb      	ldrb	r3, [r7, #23]
}
 8008096:	4618      	mov	r0, r3
 8008098:	3718      	adds	r7, #24
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	08008701 	.word	0x08008701
 80080a4:	080087a9 	.word	0x080087a9
 80080a8:	0800866f 	.word	0x0800866f
 80080ac:	40012c00 	.word	0x40012c00
 80080b0:	40014000 	.word	0x40014000
 80080b4:	40014400 	.word	0x40014400
 80080b8:	00010007 	.word	0x00010007

080080bc <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80080c6:	2300      	movs	r3, #0
 80080c8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	2b0c      	cmp	r3, #12
 80080ce:	d855      	bhi.n	800817c <HAL_TIM_PWM_Stop_DMA+0xc0>
 80080d0:	a201      	add	r2, pc, #4	; (adr r2, 80080d8 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80080d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d6:	bf00      	nop
 80080d8:	0800810d 	.word	0x0800810d
 80080dc:	0800817d 	.word	0x0800817d
 80080e0:	0800817d 	.word	0x0800817d
 80080e4:	0800817d 	.word	0x0800817d
 80080e8:	08008129 	.word	0x08008129
 80080ec:	0800817d 	.word	0x0800817d
 80080f0:	0800817d 	.word	0x0800817d
 80080f4:	0800817d 	.word	0x0800817d
 80080f8:	08008145 	.word	0x08008145
 80080fc:	0800817d 	.word	0x0800817d
 8008100:	0800817d 	.word	0x0800817d
 8008104:	0800817d 	.word	0x0800817d
 8008108:	08008161 	.word	0x08008161
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	68da      	ldr	r2, [r3, #12]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800811a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008120:	4618      	mov	r0, r3
 8008122:	f7fd fe15 	bl	8005d50 <HAL_DMA_Abort_IT>
      break;
 8008126:	e02c      	b.n	8008182 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	68da      	ldr	r2, [r3, #12]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008136:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800813c:	4618      	mov	r0, r3
 800813e:	f7fd fe07 	bl	8005d50 <HAL_DMA_Abort_IT>
      break;
 8008142:	e01e      	b.n	8008182 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	68da      	ldr	r2, [r3, #12]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008152:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008158:	4618      	mov	r0, r3
 800815a:	f7fd fdf9 	bl	8005d50 <HAL_DMA_Abort_IT>
      break;
 800815e:	e010      	b.n	8008182 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68da      	ldr	r2, [r3, #12]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800816e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008174:	4618      	mov	r0, r3
 8008176:	f7fd fdeb 	bl	8005d50 <HAL_DMA_Abort_IT>
      break;
 800817a:	e002      	b.n	8008182 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	73fb      	strb	r3, [r7, #15]
      break;
 8008180:	bf00      	nop
  }

  if (status == HAL_OK)
 8008182:	7bfb      	ldrb	r3, [r7, #15]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d176      	bne.n	8008276 <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	2200      	movs	r2, #0
 800818e:	6839      	ldr	r1, [r7, #0]
 8008190:	4618      	mov	r0, r3
 8008192:	f000 feb9 	bl	8008f08 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a39      	ldr	r2, [pc, #228]	; (8008280 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d009      	beq.n	80081b4 <HAL_TIM_PWM_Stop_DMA+0xf8>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a37      	ldr	r2, [pc, #220]	; (8008284 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d004      	beq.n	80081b4 <HAL_TIM_PWM_Stop_DMA+0xf8>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a36      	ldr	r2, [pc, #216]	; (8008288 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d101      	bne.n	80081b8 <HAL_TIM_PWM_Stop_DMA+0xfc>
 80081b4:	2301      	movs	r3, #1
 80081b6:	e000      	b.n	80081ba <HAL_TIM_PWM_Stop_DMA+0xfe>
 80081b8:	2300      	movs	r3, #0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d017      	beq.n	80081ee <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	6a1a      	ldr	r2, [r3, #32]
 80081c4:	f241 1311 	movw	r3, #4369	; 0x1111
 80081c8:	4013      	ands	r3, r2
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d10f      	bne.n	80081ee <HAL_TIM_PWM_Stop_DMA+0x132>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	6a1a      	ldr	r2, [r3, #32]
 80081d4:	f240 4344 	movw	r3, #1092	; 0x444
 80081d8:	4013      	ands	r3, r2
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d107      	bne.n	80081ee <HAL_TIM_PWM_Stop_DMA+0x132>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80081ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	6a1a      	ldr	r2, [r3, #32]
 80081f4:	f241 1311 	movw	r3, #4369	; 0x1111
 80081f8:	4013      	ands	r3, r2
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d10f      	bne.n	800821e <HAL_TIM_PWM_Stop_DMA+0x162>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	6a1a      	ldr	r2, [r3, #32]
 8008204:	f240 4344 	movw	r3, #1092	; 0x444
 8008208:	4013      	ands	r3, r2
 800820a:	2b00      	cmp	r3, #0
 800820c:	d107      	bne.n	800821e <HAL_TIM_PWM_Stop_DMA+0x162>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f022 0201 	bic.w	r2, r2, #1
 800821c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d104      	bne.n	800822e <HAL_TIM_PWM_Stop_DMA+0x172>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800822c:	e023      	b.n	8008276 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	2b04      	cmp	r3, #4
 8008232:	d104      	bne.n	800823e <HAL_TIM_PWM_Stop_DMA+0x182>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2201      	movs	r2, #1
 8008238:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800823c:	e01b      	b.n	8008276 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	2b08      	cmp	r3, #8
 8008242:	d104      	bne.n	800824e <HAL_TIM_PWM_Stop_DMA+0x192>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2201      	movs	r2, #1
 8008248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800824c:	e013      	b.n	8008276 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	2b0c      	cmp	r3, #12
 8008252:	d104      	bne.n	800825e <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2201      	movs	r2, #1
 8008258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800825c:	e00b      	b.n	8008276 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	2b10      	cmp	r3, #16
 8008262:	d104      	bne.n	800826e <HAL_TIM_PWM_Stop_DMA+0x1b2>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800826c:	e003      	b.n	8008276 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8008276:	7bfb      	ldrb	r3, [r7, #15]
}
 8008278:	4618      	mov	r0, r3
 800827a:	3710      	adds	r7, #16
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	40012c00 	.word	0x40012c00
 8008284:	40014000 	.word	0x40014000
 8008288:	40014400 	.word	0x40014400

0800828c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b086      	sub	sp, #24
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008298:	2300      	movs	r3, #0
 800829a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d101      	bne.n	80082aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80082a6:	2302      	movs	r3, #2
 80082a8:	e0ff      	b.n	80084aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2201      	movs	r2, #1
 80082ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2b14      	cmp	r3, #20
 80082b6:	f200 80f0 	bhi.w	800849a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80082ba:	a201      	add	r2, pc, #4	; (adr r2, 80082c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80082bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c0:	08008315 	.word	0x08008315
 80082c4:	0800849b 	.word	0x0800849b
 80082c8:	0800849b 	.word	0x0800849b
 80082cc:	0800849b 	.word	0x0800849b
 80082d0:	08008355 	.word	0x08008355
 80082d4:	0800849b 	.word	0x0800849b
 80082d8:	0800849b 	.word	0x0800849b
 80082dc:	0800849b 	.word	0x0800849b
 80082e0:	08008397 	.word	0x08008397
 80082e4:	0800849b 	.word	0x0800849b
 80082e8:	0800849b 	.word	0x0800849b
 80082ec:	0800849b 	.word	0x0800849b
 80082f0:	080083d7 	.word	0x080083d7
 80082f4:	0800849b 	.word	0x0800849b
 80082f8:	0800849b 	.word	0x0800849b
 80082fc:	0800849b 	.word	0x0800849b
 8008300:	08008419 	.word	0x08008419
 8008304:	0800849b 	.word	0x0800849b
 8008308:	0800849b 	.word	0x0800849b
 800830c:	0800849b 	.word	0x0800849b
 8008310:	08008459 	.word	0x08008459
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	68b9      	ldr	r1, [r7, #8]
 800831a:	4618      	mov	r0, r3
 800831c:	f000 fadc 	bl	80088d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	699a      	ldr	r2, [r3, #24]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f042 0208 	orr.w	r2, r2, #8
 800832e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	699a      	ldr	r2, [r3, #24]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f022 0204 	bic.w	r2, r2, #4
 800833e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	6999      	ldr	r1, [r3, #24]
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	691a      	ldr	r2, [r3, #16]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	430a      	orrs	r2, r1
 8008350:	619a      	str	r2, [r3, #24]
      break;
 8008352:	e0a5      	b.n	80084a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	68b9      	ldr	r1, [r7, #8]
 800835a:	4618      	mov	r0, r3
 800835c:	f000 fb38 	bl	80089d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	699a      	ldr	r2, [r3, #24]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800836e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	699a      	ldr	r2, [r3, #24]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800837e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	6999      	ldr	r1, [r3, #24]
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	021a      	lsls	r2, r3, #8
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	430a      	orrs	r2, r1
 8008392:	619a      	str	r2, [r3, #24]
      break;
 8008394:	e084      	b.n	80084a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	68b9      	ldr	r1, [r7, #8]
 800839c:	4618      	mov	r0, r3
 800839e:	f000 fb91 	bl	8008ac4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	69da      	ldr	r2, [r3, #28]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f042 0208 	orr.w	r2, r2, #8
 80083b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	69da      	ldr	r2, [r3, #28]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f022 0204 	bic.w	r2, r2, #4
 80083c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	69d9      	ldr	r1, [r3, #28]
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	691a      	ldr	r2, [r3, #16]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	430a      	orrs	r2, r1
 80083d2:	61da      	str	r2, [r3, #28]
      break;
 80083d4:	e064      	b.n	80084a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	68b9      	ldr	r1, [r7, #8]
 80083dc:	4618      	mov	r0, r3
 80083de:	f000 fbe9 	bl	8008bb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	69da      	ldr	r2, [r3, #28]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	69da      	ldr	r2, [r3, #28]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008400:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	69d9      	ldr	r1, [r3, #28]
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	691b      	ldr	r3, [r3, #16]
 800840c:	021a      	lsls	r2, r3, #8
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	430a      	orrs	r2, r1
 8008414:	61da      	str	r2, [r3, #28]
      break;
 8008416:	e043      	b.n	80084a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	68b9      	ldr	r1, [r7, #8]
 800841e:	4618      	mov	r0, r3
 8008420:	f000 fc26 	bl	8008c70 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f042 0208 	orr.w	r2, r2, #8
 8008432:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f022 0204 	bic.w	r2, r2, #4
 8008442:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	691a      	ldr	r2, [r3, #16]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	430a      	orrs	r2, r1
 8008454:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008456:	e023      	b.n	80084a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	68b9      	ldr	r1, [r7, #8]
 800845e:	4618      	mov	r0, r3
 8008460:	f000 fc5e 	bl	8008d20 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008472:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008482:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	691b      	ldr	r3, [r3, #16]
 800848e:	021a      	lsls	r2, r3, #8
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	430a      	orrs	r2, r1
 8008496:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008498:	e002      	b.n	80084a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800849a:	2301      	movs	r3, #1
 800849c:	75fb      	strb	r3, [r7, #23]
      break;
 800849e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80084a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3718      	adds	r7, #24
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop

080084b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80084be:	2300      	movs	r3, #0
 80084c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d101      	bne.n	80084d0 <HAL_TIM_ConfigClockSource+0x1c>
 80084cc:	2302      	movs	r3, #2
 80084ce:	e0b6      	b.n	800863e <HAL_TIM_ConfigClockSource+0x18a>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2202      	movs	r2, #2
 80084dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80084f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80084fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	68ba      	ldr	r2, [r7, #8]
 8008502:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800850c:	d03e      	beq.n	800858c <HAL_TIM_ConfigClockSource+0xd8>
 800850e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008512:	f200 8087 	bhi.w	8008624 <HAL_TIM_ConfigClockSource+0x170>
 8008516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800851a:	f000 8086 	beq.w	800862a <HAL_TIM_ConfigClockSource+0x176>
 800851e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008522:	d87f      	bhi.n	8008624 <HAL_TIM_ConfigClockSource+0x170>
 8008524:	2b70      	cmp	r3, #112	; 0x70
 8008526:	d01a      	beq.n	800855e <HAL_TIM_ConfigClockSource+0xaa>
 8008528:	2b70      	cmp	r3, #112	; 0x70
 800852a:	d87b      	bhi.n	8008624 <HAL_TIM_ConfigClockSource+0x170>
 800852c:	2b60      	cmp	r3, #96	; 0x60
 800852e:	d050      	beq.n	80085d2 <HAL_TIM_ConfigClockSource+0x11e>
 8008530:	2b60      	cmp	r3, #96	; 0x60
 8008532:	d877      	bhi.n	8008624 <HAL_TIM_ConfigClockSource+0x170>
 8008534:	2b50      	cmp	r3, #80	; 0x50
 8008536:	d03c      	beq.n	80085b2 <HAL_TIM_ConfigClockSource+0xfe>
 8008538:	2b50      	cmp	r3, #80	; 0x50
 800853a:	d873      	bhi.n	8008624 <HAL_TIM_ConfigClockSource+0x170>
 800853c:	2b40      	cmp	r3, #64	; 0x40
 800853e:	d058      	beq.n	80085f2 <HAL_TIM_ConfigClockSource+0x13e>
 8008540:	2b40      	cmp	r3, #64	; 0x40
 8008542:	d86f      	bhi.n	8008624 <HAL_TIM_ConfigClockSource+0x170>
 8008544:	2b30      	cmp	r3, #48	; 0x30
 8008546:	d064      	beq.n	8008612 <HAL_TIM_ConfigClockSource+0x15e>
 8008548:	2b30      	cmp	r3, #48	; 0x30
 800854a:	d86b      	bhi.n	8008624 <HAL_TIM_ConfigClockSource+0x170>
 800854c:	2b20      	cmp	r3, #32
 800854e:	d060      	beq.n	8008612 <HAL_TIM_ConfigClockSource+0x15e>
 8008550:	2b20      	cmp	r3, #32
 8008552:	d867      	bhi.n	8008624 <HAL_TIM_ConfigClockSource+0x170>
 8008554:	2b00      	cmp	r3, #0
 8008556:	d05c      	beq.n	8008612 <HAL_TIM_ConfigClockSource+0x15e>
 8008558:	2b10      	cmp	r3, #16
 800855a:	d05a      	beq.n	8008612 <HAL_TIM_ConfigClockSource+0x15e>
 800855c:	e062      	b.n	8008624 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800856e:	f000 fcab 	bl	8008ec8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008580:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	68ba      	ldr	r2, [r7, #8]
 8008588:	609a      	str	r2, [r3, #8]
      break;
 800858a:	e04f      	b.n	800862c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800859c:	f000 fc94 	bl	8008ec8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	689a      	ldr	r2, [r3, #8]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80085ae:	609a      	str	r2, [r3, #8]
      break;
 80085b0:	e03c      	b.n	800862c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80085be:	461a      	mov	r2, r3
 80085c0:	f000 fc08 	bl	8008dd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2150      	movs	r1, #80	; 0x50
 80085ca:	4618      	mov	r0, r3
 80085cc:	f000 fc61 	bl	8008e92 <TIM_ITRx_SetConfig>
      break;
 80085d0:	e02c      	b.n	800862c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80085de:	461a      	mov	r2, r3
 80085e0:	f000 fc27 	bl	8008e32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	2160      	movs	r1, #96	; 0x60
 80085ea:	4618      	mov	r0, r3
 80085ec:	f000 fc51 	bl	8008e92 <TIM_ITRx_SetConfig>
      break;
 80085f0:	e01c      	b.n	800862c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80085fe:	461a      	mov	r2, r3
 8008600:	f000 fbe8 	bl	8008dd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2140      	movs	r1, #64	; 0x40
 800860a:	4618      	mov	r0, r3
 800860c:	f000 fc41 	bl	8008e92 <TIM_ITRx_SetConfig>
      break;
 8008610:	e00c      	b.n	800862c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4619      	mov	r1, r3
 800861c:	4610      	mov	r0, r2
 800861e:	f000 fc38 	bl	8008e92 <TIM_ITRx_SetConfig>
      break;
 8008622:	e003      	b.n	800862c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	73fb      	strb	r3, [r7, #15]
      break;
 8008628:	e000      	b.n	800862c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800862a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2201      	movs	r2, #1
 8008630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800863c:	7bfb      	ldrb	r3, [r7, #15]
}
 800863e:	4618      	mov	r0, r3
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008646:	b480      	push	{r7}
 8008648:	b083      	sub	sp, #12
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800864e:	bf00      	nop
 8008650:	370c      	adds	r7, #12
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr

0800865a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800865a:	b480      	push	{r7}
 800865c:	b083      	sub	sp, #12
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008662:	bf00      	nop
 8008664:	370c      	adds	r7, #12
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr

0800866e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800866e:	b580      	push	{r7, lr}
 8008670:	b084      	sub	sp, #16
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800867a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	429a      	cmp	r2, r3
 8008684:	d107      	bne.n	8008696 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2201      	movs	r2, #1
 800868a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2201      	movs	r2, #1
 8008690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008694:	e02a      	b.n	80086ec <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	429a      	cmp	r2, r3
 800869e:	d107      	bne.n	80086b0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2202      	movs	r2, #2
 80086a4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2201      	movs	r2, #1
 80086aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086ae:	e01d      	b.n	80086ec <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d107      	bne.n	80086ca <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2204      	movs	r2, #4
 80086be:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086c8:	e010      	b.n	80086ec <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d107      	bne.n	80086e4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2208      	movs	r2, #8
 80086d8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2201      	movs	r2, #1
 80086de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80086e2:	e003      	b.n	80086ec <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80086ec:	68f8      	ldr	r0, [r7, #12]
 80086ee:	f7ff ffb4 	bl	800865a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2200      	movs	r2, #0
 80086f6:	771a      	strb	r2, [r3, #28]
}
 80086f8:	bf00      	nop
 80086fa:	3710      	adds	r7, #16
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800870c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	429a      	cmp	r2, r3
 8008716:	d10b      	bne.n	8008730 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2201      	movs	r2, #1
 800871c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	69db      	ldr	r3, [r3, #28]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d136      	bne.n	8008794 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2201      	movs	r2, #1
 800872a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800872e:	e031      	b.n	8008794 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	429a      	cmp	r2, r3
 8008738:	d10b      	bne.n	8008752 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2202      	movs	r2, #2
 800873e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	69db      	ldr	r3, [r3, #28]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d125      	bne.n	8008794 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2201      	movs	r2, #1
 800874c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008750:	e020      	b.n	8008794 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	429a      	cmp	r2, r3
 800875a:	d10b      	bne.n	8008774 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2204      	movs	r2, #4
 8008760:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	69db      	ldr	r3, [r3, #28]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d114      	bne.n	8008794 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2201      	movs	r2, #1
 800876e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008772:	e00f      	b.n	8008794 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	429a      	cmp	r2, r3
 800877c:	d10a      	bne.n	8008794 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2208      	movs	r2, #8
 8008782:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	69db      	ldr	r3, [r3, #28]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d103      	bne.n	8008794 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008794:	68f8      	ldr	r0, [r7, #12]
 8008796:	f002 fceb 	bl	800b170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2200      	movs	r2, #0
 800879e:	771a      	strb	r2, [r3, #28]
  //g_tim_pwm_transfer_cmplt = true;

}
 80087a0:	bf00      	nop
 80087a2:	3710      	adds	r7, #16
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087b4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ba:	687a      	ldr	r2, [r7, #4]
 80087bc:	429a      	cmp	r2, r3
 80087be:	d103      	bne.n	80087c8 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2201      	movs	r2, #1
 80087c4:	771a      	strb	r2, [r3, #28]
 80087c6:	e019      	b.n	80087fc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d103      	bne.n	80087da <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2202      	movs	r2, #2
 80087d6:	771a      	strb	r2, [r3, #28]
 80087d8:	e010      	b.n	80087fc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d103      	bne.n	80087ec <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2204      	movs	r2, #4
 80087e8:	771a      	strb	r2, [r3, #28]
 80087ea:	e007      	b.n	80087fc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d102      	bne.n	80087fc <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2208      	movs	r2, #8
 80087fa:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80087fc:	68f8      	ldr	r0, [r7, #12]
 80087fe:	f7ff ff22 	bl	8008646 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2200      	movs	r2, #0
 8008806:	771a      	strb	r2, [r3, #28]
}
 8008808:	bf00      	nop
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008810:	b480      	push	{r7}
 8008812:	b085      	sub	sp, #20
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a2a      	ldr	r2, [pc, #168]	; (80088cc <TIM_Base_SetConfig+0xbc>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d003      	beq.n	8008830 <TIM_Base_SetConfig+0x20>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800882e:	d108      	bne.n	8008842 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008836:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	68fa      	ldr	r2, [r7, #12]
 800883e:	4313      	orrs	r3, r2
 8008840:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4a21      	ldr	r2, [pc, #132]	; (80088cc <TIM_Base_SetConfig+0xbc>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d00b      	beq.n	8008862 <TIM_Base_SetConfig+0x52>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008850:	d007      	beq.n	8008862 <TIM_Base_SetConfig+0x52>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	4a1e      	ldr	r2, [pc, #120]	; (80088d0 <TIM_Base_SetConfig+0xc0>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d003      	beq.n	8008862 <TIM_Base_SetConfig+0x52>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4a1d      	ldr	r2, [pc, #116]	; (80088d4 <TIM_Base_SetConfig+0xc4>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d108      	bne.n	8008874 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008868:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	68db      	ldr	r3, [r3, #12]
 800886e:	68fa      	ldr	r2, [r7, #12]
 8008870:	4313      	orrs	r3, r2
 8008872:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	695b      	ldr	r3, [r3, #20]
 800887e:	4313      	orrs	r3, r2
 8008880:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	68fa      	ldr	r2, [r7, #12]
 8008886:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	689a      	ldr	r2, [r3, #8]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	4a0c      	ldr	r2, [pc, #48]	; (80088cc <TIM_Base_SetConfig+0xbc>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d007      	beq.n	80088b0 <TIM_Base_SetConfig+0xa0>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	4a0b      	ldr	r2, [pc, #44]	; (80088d0 <TIM_Base_SetConfig+0xc0>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d003      	beq.n	80088b0 <TIM_Base_SetConfig+0xa0>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	4a0a      	ldr	r2, [pc, #40]	; (80088d4 <TIM_Base_SetConfig+0xc4>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d103      	bne.n	80088b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	691a      	ldr	r2, [r3, #16]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	615a      	str	r2, [r3, #20]
}
 80088be:	bf00      	nop
 80088c0:	3714      	adds	r7, #20
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop
 80088cc:	40012c00 	.word	0x40012c00
 80088d0:	40014000 	.word	0x40014000
 80088d4:	40014400 	.word	0x40014400

080088d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088d8:	b480      	push	{r7}
 80088da:	b087      	sub	sp, #28
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6a1b      	ldr	r3, [r3, #32]
 80088e6:	f023 0201 	bic.w	r2, r3, #1
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a1b      	ldr	r3, [r3, #32]
 80088f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	699b      	ldr	r3, [r3, #24]
 80088fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800890a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f023 0303 	bic.w	r3, r3, #3
 8008912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	68fa      	ldr	r2, [r7, #12]
 800891a:	4313      	orrs	r3, r2
 800891c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	f023 0302 	bic.w	r3, r3, #2
 8008924:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	697a      	ldr	r2, [r7, #20]
 800892c:	4313      	orrs	r3, r2
 800892e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	4a24      	ldr	r2, [pc, #144]	; (80089c4 <TIM_OC1_SetConfig+0xec>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d007      	beq.n	8008948 <TIM_OC1_SetConfig+0x70>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4a23      	ldr	r2, [pc, #140]	; (80089c8 <TIM_OC1_SetConfig+0xf0>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d003      	beq.n	8008948 <TIM_OC1_SetConfig+0x70>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4a22      	ldr	r2, [pc, #136]	; (80089cc <TIM_OC1_SetConfig+0xf4>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d10c      	bne.n	8008962 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	f023 0308 	bic.w	r3, r3, #8
 800894e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	697a      	ldr	r2, [r7, #20]
 8008956:	4313      	orrs	r3, r2
 8008958:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	f023 0304 	bic.w	r3, r3, #4
 8008960:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	4a17      	ldr	r2, [pc, #92]	; (80089c4 <TIM_OC1_SetConfig+0xec>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d007      	beq.n	800897a <TIM_OC1_SetConfig+0xa2>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4a16      	ldr	r2, [pc, #88]	; (80089c8 <TIM_OC1_SetConfig+0xf0>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d003      	beq.n	800897a <TIM_OC1_SetConfig+0xa2>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	4a15      	ldr	r2, [pc, #84]	; (80089cc <TIM_OC1_SetConfig+0xf4>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d111      	bne.n	800899e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008980:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008988:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	695b      	ldr	r3, [r3, #20]
 800898e:	693a      	ldr	r2, [r7, #16]
 8008990:	4313      	orrs	r3, r2
 8008992:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	699b      	ldr	r3, [r3, #24]
 8008998:	693a      	ldr	r2, [r7, #16]
 800899a:	4313      	orrs	r3, r2
 800899c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	693a      	ldr	r2, [r7, #16]
 80089a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	68fa      	ldr	r2, [r7, #12]
 80089a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	685a      	ldr	r2, [r3, #4]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	697a      	ldr	r2, [r7, #20]
 80089b6:	621a      	str	r2, [r3, #32]
}
 80089b8:	bf00      	nop
 80089ba:	371c      	adds	r7, #28
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr
 80089c4:	40012c00 	.word	0x40012c00
 80089c8:	40014000 	.word	0x40014000
 80089cc:	40014400 	.word	0x40014400

080089d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b087      	sub	sp, #28
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6a1b      	ldr	r3, [r3, #32]
 80089de:	f023 0210 	bic.w	r2, r3, #16
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a1b      	ldr	r3, [r3, #32]
 80089ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	699b      	ldr	r3, [r3, #24]
 80089f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80089fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	021b      	lsls	r3, r3, #8
 8008a12:	68fa      	ldr	r2, [r7, #12]
 8008a14:	4313      	orrs	r3, r2
 8008a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	f023 0320 	bic.w	r3, r3, #32
 8008a1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	011b      	lsls	r3, r3, #4
 8008a26:	697a      	ldr	r2, [r7, #20]
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	4a22      	ldr	r2, [pc, #136]	; (8008ab8 <TIM_OC2_SetConfig+0xe8>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d10d      	bne.n	8008a50 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	011b      	lsls	r3, r3, #4
 8008a42:	697a      	ldr	r2, [r7, #20]
 8008a44:	4313      	orrs	r3, r2
 8008a46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	4a19      	ldr	r2, [pc, #100]	; (8008ab8 <TIM_OC2_SetConfig+0xe8>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d007      	beq.n	8008a68 <TIM_OC2_SetConfig+0x98>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	4a18      	ldr	r2, [pc, #96]	; (8008abc <TIM_OC2_SetConfig+0xec>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d003      	beq.n	8008a68 <TIM_OC2_SetConfig+0x98>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	4a17      	ldr	r2, [pc, #92]	; (8008ac0 <TIM_OC2_SetConfig+0xf0>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d113      	bne.n	8008a90 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	695b      	ldr	r3, [r3, #20]
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	693a      	ldr	r2, [r7, #16]
 8008a80:	4313      	orrs	r3, r2
 8008a82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	699b      	ldr	r3, [r3, #24]
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	693a      	ldr	r2, [r7, #16]
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	693a      	ldr	r2, [r7, #16]
 8008a94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	68fa      	ldr	r2, [r7, #12]
 8008a9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	685a      	ldr	r2, [r3, #4]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	697a      	ldr	r2, [r7, #20]
 8008aa8:	621a      	str	r2, [r3, #32]
}
 8008aaa:	bf00      	nop
 8008aac:	371c      	adds	r7, #28
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop
 8008ab8:	40012c00 	.word	0x40012c00
 8008abc:	40014000 	.word	0x40014000
 8008ac0:	40014400 	.word	0x40014400

08008ac4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b087      	sub	sp, #28
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6a1b      	ldr	r3, [r3, #32]
 8008ad2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a1b      	ldr	r3, [r3, #32]
 8008ade:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	69db      	ldr	r3, [r3, #28]
 8008aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f023 0303 	bic.w	r3, r3, #3
 8008afe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	68fa      	ldr	r2, [r7, #12]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	689b      	ldr	r3, [r3, #8]
 8008b16:	021b      	lsls	r3, r3, #8
 8008b18:	697a      	ldr	r2, [r7, #20]
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	4a21      	ldr	r2, [pc, #132]	; (8008ba8 <TIM_OC3_SetConfig+0xe4>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d10d      	bne.n	8008b42 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	68db      	ldr	r3, [r3, #12]
 8008b32:	021b      	lsls	r3, r3, #8
 8008b34:	697a      	ldr	r2, [r7, #20]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	4a18      	ldr	r2, [pc, #96]	; (8008ba8 <TIM_OC3_SetConfig+0xe4>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d007      	beq.n	8008b5a <TIM_OC3_SetConfig+0x96>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	4a17      	ldr	r2, [pc, #92]	; (8008bac <TIM_OC3_SetConfig+0xe8>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d003      	beq.n	8008b5a <TIM_OC3_SetConfig+0x96>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	4a16      	ldr	r2, [pc, #88]	; (8008bb0 <TIM_OC3_SetConfig+0xec>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d113      	bne.n	8008b82 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	695b      	ldr	r3, [r3, #20]
 8008b6e:	011b      	lsls	r3, r3, #4
 8008b70:	693a      	ldr	r2, [r7, #16]
 8008b72:	4313      	orrs	r3, r2
 8008b74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	699b      	ldr	r3, [r3, #24]
 8008b7a:	011b      	lsls	r3, r3, #4
 8008b7c:	693a      	ldr	r2, [r7, #16]
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	693a      	ldr	r2, [r7, #16]
 8008b86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	68fa      	ldr	r2, [r7, #12]
 8008b8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	685a      	ldr	r2, [r3, #4]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	697a      	ldr	r2, [r7, #20]
 8008b9a:	621a      	str	r2, [r3, #32]
}
 8008b9c:	bf00      	nop
 8008b9e:	371c      	adds	r7, #28
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr
 8008ba8:	40012c00 	.word	0x40012c00
 8008bac:	40014000 	.word	0x40014000
 8008bb0:	40014400 	.word	0x40014400

08008bb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b087      	sub	sp, #28
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a1b      	ldr	r3, [r3, #32]
 8008bc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6a1b      	ldr	r3, [r3, #32]
 8008bce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	69db      	ldr	r3, [r3, #28]
 8008bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	021b      	lsls	r3, r3, #8
 8008bf6:	68fa      	ldr	r2, [r7, #12]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	031b      	lsls	r3, r3, #12
 8008c0a:	693a      	ldr	r2, [r7, #16]
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4a14      	ldr	r2, [pc, #80]	; (8008c64 <TIM_OC4_SetConfig+0xb0>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d007      	beq.n	8008c28 <TIM_OC4_SetConfig+0x74>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	4a13      	ldr	r2, [pc, #76]	; (8008c68 <TIM_OC4_SetConfig+0xb4>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d003      	beq.n	8008c28 <TIM_OC4_SetConfig+0x74>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	4a12      	ldr	r2, [pc, #72]	; (8008c6c <TIM_OC4_SetConfig+0xb8>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d109      	bne.n	8008c3c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	695b      	ldr	r3, [r3, #20]
 8008c34:	019b      	lsls	r3, r3, #6
 8008c36:	697a      	ldr	r2, [r7, #20]
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	697a      	ldr	r2, [r7, #20]
 8008c40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	68fa      	ldr	r2, [r7, #12]
 8008c46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	685a      	ldr	r2, [r3, #4]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	693a      	ldr	r2, [r7, #16]
 8008c54:	621a      	str	r2, [r3, #32]
}
 8008c56:	bf00      	nop
 8008c58:	371c      	adds	r7, #28
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr
 8008c62:	bf00      	nop
 8008c64:	40012c00 	.word	0x40012c00
 8008c68:	40014000 	.word	0x40014000
 8008c6c:	40014400 	.word	0x40014400

08008c70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b087      	sub	sp, #28
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a1b      	ldr	r3, [r3, #32]
 8008c7e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6a1b      	ldr	r3, [r3, #32]
 8008c8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ca2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	68fa      	ldr	r2, [r7, #12]
 8008caa:	4313      	orrs	r3, r2
 8008cac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008cb4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	041b      	lsls	r3, r3, #16
 8008cbc:	693a      	ldr	r2, [r7, #16]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	4a13      	ldr	r2, [pc, #76]	; (8008d14 <TIM_OC5_SetConfig+0xa4>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d007      	beq.n	8008cda <TIM_OC5_SetConfig+0x6a>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	4a12      	ldr	r2, [pc, #72]	; (8008d18 <TIM_OC5_SetConfig+0xa8>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d003      	beq.n	8008cda <TIM_OC5_SetConfig+0x6a>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	4a11      	ldr	r2, [pc, #68]	; (8008d1c <TIM_OC5_SetConfig+0xac>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d109      	bne.n	8008cee <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ce0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	695b      	ldr	r3, [r3, #20]
 8008ce6:	021b      	lsls	r3, r3, #8
 8008ce8:	697a      	ldr	r2, [r7, #20]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	697a      	ldr	r2, [r7, #20]
 8008cf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	68fa      	ldr	r2, [r7, #12]
 8008cf8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	685a      	ldr	r2, [r3, #4]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	693a      	ldr	r2, [r7, #16]
 8008d06:	621a      	str	r2, [r3, #32]
}
 8008d08:	bf00      	nop
 8008d0a:	371c      	adds	r7, #28
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr
 8008d14:	40012c00 	.word	0x40012c00
 8008d18:	40014000 	.word	0x40014000
 8008d1c:	40014400 	.word	0x40014400

08008d20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b087      	sub	sp, #28
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6a1b      	ldr	r3, [r3, #32]
 8008d2e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6a1b      	ldr	r3, [r3, #32]
 8008d3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	021b      	lsls	r3, r3, #8
 8008d5a:	68fa      	ldr	r2, [r7, #12]
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008d66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	051b      	lsls	r3, r3, #20
 8008d6e:	693a      	ldr	r2, [r7, #16]
 8008d70:	4313      	orrs	r3, r2
 8008d72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	4a14      	ldr	r2, [pc, #80]	; (8008dc8 <TIM_OC6_SetConfig+0xa8>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d007      	beq.n	8008d8c <TIM_OC6_SetConfig+0x6c>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	4a13      	ldr	r2, [pc, #76]	; (8008dcc <TIM_OC6_SetConfig+0xac>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d003      	beq.n	8008d8c <TIM_OC6_SetConfig+0x6c>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	4a12      	ldr	r2, [pc, #72]	; (8008dd0 <TIM_OC6_SetConfig+0xb0>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d109      	bne.n	8008da0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d92:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	695b      	ldr	r3, [r3, #20]
 8008d98:	029b      	lsls	r3, r3, #10
 8008d9a:	697a      	ldr	r2, [r7, #20]
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	697a      	ldr	r2, [r7, #20]
 8008da4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	68fa      	ldr	r2, [r7, #12]
 8008daa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	685a      	ldr	r2, [r3, #4]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	693a      	ldr	r2, [r7, #16]
 8008db8:	621a      	str	r2, [r3, #32]
}
 8008dba:	bf00      	nop
 8008dbc:	371c      	adds	r7, #28
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr
 8008dc6:	bf00      	nop
 8008dc8:	40012c00 	.word	0x40012c00
 8008dcc:	40014000 	.word	0x40014000
 8008dd0:	40014400 	.word	0x40014400

08008dd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b087      	sub	sp, #28
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	60b9      	str	r1, [r7, #8]
 8008dde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6a1b      	ldr	r3, [r3, #32]
 8008de4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6a1b      	ldr	r3, [r3, #32]
 8008dea:	f023 0201 	bic.w	r2, r3, #1
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	699b      	ldr	r3, [r3, #24]
 8008df6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008dfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	011b      	lsls	r3, r3, #4
 8008e04:	693a      	ldr	r2, [r7, #16]
 8008e06:	4313      	orrs	r3, r2
 8008e08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	f023 030a 	bic.w	r3, r3, #10
 8008e10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008e12:	697a      	ldr	r2, [r7, #20]
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	693a      	ldr	r2, [r7, #16]
 8008e1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	697a      	ldr	r2, [r7, #20]
 8008e24:	621a      	str	r2, [r3, #32]
}
 8008e26:	bf00      	nop
 8008e28:	371c      	adds	r7, #28
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr

08008e32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e32:	b480      	push	{r7}
 8008e34:	b087      	sub	sp, #28
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	60f8      	str	r0, [r7, #12]
 8008e3a:	60b9      	str	r1, [r7, #8]
 8008e3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6a1b      	ldr	r3, [r3, #32]
 8008e42:	f023 0210 	bic.w	r2, r3, #16
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	699b      	ldr	r3, [r3, #24]
 8008e4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6a1b      	ldr	r3, [r3, #32]
 8008e54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008e5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	031b      	lsls	r3, r3, #12
 8008e62:	697a      	ldr	r2, [r7, #20]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008e6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	011b      	lsls	r3, r3, #4
 8008e74:	693a      	ldr	r2, [r7, #16]
 8008e76:	4313      	orrs	r3, r2
 8008e78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	697a      	ldr	r2, [r7, #20]
 8008e7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	693a      	ldr	r2, [r7, #16]
 8008e84:	621a      	str	r2, [r3, #32]
}
 8008e86:	bf00      	nop
 8008e88:	371c      	adds	r7, #28
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr

08008e92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e92:	b480      	push	{r7}
 8008e94:	b085      	sub	sp, #20
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
 8008e9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ea8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008eaa:	683a      	ldr	r2, [r7, #0]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	f043 0307 	orr.w	r3, r3, #7
 8008eb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	609a      	str	r2, [r3, #8]
}
 8008ebc:	bf00      	nop
 8008ebe:	3714      	adds	r7, #20
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b087      	sub	sp, #28
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	60b9      	str	r1, [r7, #8]
 8008ed2:	607a      	str	r2, [r7, #4]
 8008ed4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ee2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	021a      	lsls	r2, r3, #8
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	431a      	orrs	r2, r3
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	697a      	ldr	r2, [r7, #20]
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	697a      	ldr	r2, [r7, #20]
 8008efa:	609a      	str	r2, [r3, #8]
}
 8008efc:	bf00      	nop
 8008efe:	371c      	adds	r7, #28
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr

08008f08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b087      	sub	sp, #28
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	f003 031f 	and.w	r3, r3, #31
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	6a1a      	ldr	r2, [r3, #32]
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	43db      	mvns	r3, r3
 8008f2a:	401a      	ands	r2, r3
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	6a1a      	ldr	r2, [r3, #32]
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	f003 031f 	and.w	r3, r3, #31
 8008f3a:	6879      	ldr	r1, [r7, #4]
 8008f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8008f40:	431a      	orrs	r2, r3
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	621a      	str	r2, [r3, #32]
}
 8008f46:	bf00      	nop
 8008f48:	371c      	adds	r7, #28
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr
	...

08008f54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b085      	sub	sp, #20
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d101      	bne.n	8008f6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f68:	2302      	movs	r3, #2
 8008f6a:	e04f      	b.n	800900c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2202      	movs	r2, #2
 8008f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a21      	ldr	r2, [pc, #132]	; (8009018 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d108      	bne.n	8008fa8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008f9c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	68fa      	ldr	r2, [r7, #12]
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	68fa      	ldr	r2, [r7, #12]
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	68fa      	ldr	r2, [r7, #12]
 8008fc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4a14      	ldr	r2, [pc, #80]	; (8009018 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d009      	beq.n	8008fe0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fd4:	d004      	beq.n	8008fe0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a10      	ldr	r2, [pc, #64]	; (800901c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d10c      	bne.n	8008ffa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fe6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	68ba      	ldr	r2, [r7, #8]
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68ba      	ldr	r2, [r7, #8]
 8008ff8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800900a:	2300      	movs	r3, #0
}
 800900c:	4618      	mov	r0, r3
 800900e:	3714      	adds	r7, #20
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr
 8009018:	40012c00 	.word	0x40012c00
 800901c:	40014000 	.word	0x40014000

08009020 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009020:	b480      	push	{r7}
 8009022:	b085      	sub	sp, #20
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800902a:	2300      	movs	r3, #0
 800902c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009034:	2b01      	cmp	r3, #1
 8009036:	d101      	bne.n	800903c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009038:	2302      	movs	r3, #2
 800903a:	e060      	b.n	80090fe <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2201      	movs	r2, #1
 8009040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	4313      	orrs	r3, r2
 8009050:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	4313      	orrs	r3, r2
 800905e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	4313      	orrs	r3, r2
 800906c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4313      	orrs	r3, r2
 800907a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	691b      	ldr	r3, [r3, #16]
 8009086:	4313      	orrs	r3, r2
 8009088:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	695b      	ldr	r3, [r3, #20]
 8009094:	4313      	orrs	r3, r2
 8009096:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090a2:	4313      	orrs	r3, r2
 80090a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	699b      	ldr	r3, [r3, #24]
 80090b0:	041b      	lsls	r3, r3, #16
 80090b2:	4313      	orrs	r3, r2
 80090b4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4a14      	ldr	r2, [pc, #80]	; (800910c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d115      	bne.n	80090ec <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ca:	051b      	lsls	r3, r3, #20
 80090cc:	4313      	orrs	r3, r2
 80090ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	69db      	ldr	r3, [r3, #28]
 80090da:	4313      	orrs	r3, r2
 80090dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	6a1b      	ldr	r3, [r3, #32]
 80090e8:	4313      	orrs	r3, r2
 80090ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	68fa      	ldr	r2, [r7, #12]
 80090f2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2200      	movs	r2, #0
 80090f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090fc:	2300      	movs	r3, #0
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3714      	adds	r7, #20
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr
 800910a:	bf00      	nop
 800910c:	40012c00 	.word	0x40012c00

08009110 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b082      	sub	sp, #8
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d101      	bne.n	8009122 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800911e:	2301      	movs	r3, #1
 8009120:	e040      	b.n	80091a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009126:	2b00      	cmp	r3, #0
 8009128:	d106      	bne.n	8009138 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 f873 	bl	800921e <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2224      	movs	r2, #36	; 0x24
 800913c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f022 0201 	bic.w	r2, r2, #1
 800914c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 fb72 	bl	8009838 <UART_SetConfig>
 8009154:	4603      	mov	r3, r0
 8009156:	2b01      	cmp	r3, #1
 8009158:	d101      	bne.n	800915e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800915a:	2301      	movs	r3, #1
 800915c:	e022      	b.n	80091a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009162:	2b00      	cmp	r3, #0
 8009164:	d002      	beq.n	800916c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 fdc0 	bl	8009cec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	685a      	ldr	r2, [r3, #4]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800917a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	689a      	ldr	r2, [r3, #8]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800918a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f042 0201 	orr.w	r2, r2, #1
 800919a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 fe47 	bl	8009e30 <UART_CheckIdleState>
 80091a2:	4603      	mov	r3, r0
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3708      	adds	r7, #8
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b082      	sub	sp, #8
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d101      	bne.n	80091be <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80091ba:	2301      	movs	r3, #1
 80091bc:	e02b      	b.n	8009216 <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2224      	movs	r2, #36	; 0x24
 80091c2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f022 0201 	bic.w	r2, r2, #1
 80091d2:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	2200      	movs	r2, #0
 80091da:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	2200      	movs	r2, #0
 80091e2:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	2200      	movs	r2, #0
 80091ea:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 f820 	bl	8009232 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2200      	movs	r2, #0
 8009204:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009214:	2300      	movs	r3, #0
}
 8009216:	4618      	mov	r0, r3
 8009218:	3708      	adds	r7, #8
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}

0800921e <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800921e:	b480      	push	{r7}
 8009220:	b083      	sub	sp, #12
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8009226:	bf00      	nop
 8009228:	370c      	adds	r7, #12
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr

08009232 <HAL_UART_MspDeInit>:
  * @brief DeInitialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8009232:	b480      	push	{r7}
 8009234:	b083      	sub	sp, #12
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 800923a:	bf00      	nop
 800923c:	370c      	adds	r7, #12
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr
	...

08009248 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b0ba      	sub	sp, #232	; 0xe8
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	69db      	ldr	r3, [r3, #28]
 8009256:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800926e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009272:	f640 030f 	movw	r3, #2063	; 0x80f
 8009276:	4013      	ands	r3, r2
 8009278:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800927c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009280:	2b00      	cmp	r3, #0
 8009282:	d115      	bne.n	80092b0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009288:	f003 0320 	and.w	r3, r3, #32
 800928c:	2b00      	cmp	r3, #0
 800928e:	d00f      	beq.n	80092b0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009294:	f003 0320 	and.w	r3, r3, #32
 8009298:	2b00      	cmp	r3, #0
 800929a:	d009      	beq.n	80092b0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	f000 82a6 	beq.w	80097f2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	4798      	blx	r3
      }
      return;
 80092ae:	e2a0      	b.n	80097f2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80092b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	f000 8117 	beq.w	80094e8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80092ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092be:	f003 0301 	and.w	r3, r3, #1
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d106      	bne.n	80092d4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80092c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80092ca:	4b85      	ldr	r3, [pc, #532]	; (80094e0 <HAL_UART_IRQHandler+0x298>)
 80092cc:	4013      	ands	r3, r2
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	f000 810a 	beq.w	80094e8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80092d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092d8:	f003 0301 	and.w	r3, r3, #1
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d011      	beq.n	8009304 <HAL_UART_IRQHandler+0xbc>
 80092e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d00b      	beq.n	8009304 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	2201      	movs	r2, #1
 80092f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092fa:	f043 0201 	orr.w	r2, r3, #1
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009308:	f003 0302 	and.w	r3, r3, #2
 800930c:	2b00      	cmp	r3, #0
 800930e:	d011      	beq.n	8009334 <HAL_UART_IRQHandler+0xec>
 8009310:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009314:	f003 0301 	and.w	r3, r3, #1
 8009318:	2b00      	cmp	r3, #0
 800931a:	d00b      	beq.n	8009334 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2202      	movs	r2, #2
 8009322:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800932a:	f043 0204 	orr.w	r2, r3, #4
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009338:	f003 0304 	and.w	r3, r3, #4
 800933c:	2b00      	cmp	r3, #0
 800933e:	d011      	beq.n	8009364 <HAL_UART_IRQHandler+0x11c>
 8009340:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009344:	f003 0301 	and.w	r3, r3, #1
 8009348:	2b00      	cmp	r3, #0
 800934a:	d00b      	beq.n	8009364 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	2204      	movs	r2, #4
 8009352:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800935a:	f043 0202 	orr.w	r2, r3, #2
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009368:	f003 0308 	and.w	r3, r3, #8
 800936c:	2b00      	cmp	r3, #0
 800936e:	d017      	beq.n	80093a0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009374:	f003 0320 	and.w	r3, r3, #32
 8009378:	2b00      	cmp	r3, #0
 800937a:	d105      	bne.n	8009388 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800937c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009380:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009384:	2b00      	cmp	r3, #0
 8009386:	d00b      	beq.n	80093a0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2208      	movs	r2, #8
 800938e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009396:	f043 0208 	orr.w	r2, r3, #8
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80093a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d012      	beq.n	80093d2 <HAL_UART_IRQHandler+0x18a>
 80093ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d00c      	beq.n	80093d2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80093c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093c8:	f043 0220 	orr.w	r2, r3, #32
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093d8:	2b00      	cmp	r3, #0
 80093da:	f000 820c 	beq.w	80097f6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80093de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093e2:	f003 0320 	and.w	r3, r3, #32
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d00d      	beq.n	8009406 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80093ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093ee:	f003 0320 	and.w	r3, r3, #32
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d007      	beq.n	8009406 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d003      	beq.n	8009406 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800940c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800941a:	2b40      	cmp	r3, #64	; 0x40
 800941c:	d005      	beq.n	800942a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800941e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009422:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009426:	2b00      	cmp	r3, #0
 8009428:	d04f      	beq.n	80094ca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 fe0d 	bl	800a04a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	689b      	ldr	r3, [r3, #8]
 8009436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800943a:	2b40      	cmp	r3, #64	; 0x40
 800943c:	d141      	bne.n	80094c2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	3308      	adds	r3, #8
 8009444:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009448:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800944c:	e853 3f00 	ldrex	r3, [r3]
 8009450:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009454:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009458:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800945c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	3308      	adds	r3, #8
 8009466:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800946a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800946e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009472:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009476:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800947a:	e841 2300 	strex	r3, r2, [r1]
 800947e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009482:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009486:	2b00      	cmp	r3, #0
 8009488:	d1d9      	bne.n	800943e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800948e:	2b00      	cmp	r3, #0
 8009490:	d013      	beq.n	80094ba <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009496:	4a13      	ldr	r2, [pc, #76]	; (80094e4 <HAL_UART_IRQHandler+0x29c>)
 8009498:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800949e:	4618      	mov	r0, r3
 80094a0:	f7fc fc56 	bl	8005d50 <HAL_DMA_Abort_IT>
 80094a4:	4603      	mov	r3, r0
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d017      	beq.n	80094da <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80094b4:	4610      	mov	r0, r2
 80094b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094b8:	e00f      	b.n	80094da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 f9a6 	bl	800980c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094c0:	e00b      	b.n	80094da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 f9a2 	bl	800980c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094c8:	e007      	b.n	80094da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 f99e 	bl	800980c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2200      	movs	r2, #0
 80094d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80094d8:	e18d      	b.n	80097f6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094da:	bf00      	nop
    return;
 80094dc:	e18b      	b.n	80097f6 <HAL_UART_IRQHandler+0x5ae>
 80094de:	bf00      	nop
 80094e0:	04000120 	.word	0x04000120
 80094e4:	0800a111 	.word	0x0800a111

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094ec:	2b01      	cmp	r3, #1
 80094ee:	f040 8146 	bne.w	800977e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80094f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094f6:	f003 0310 	and.w	r3, r3, #16
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	f000 813f 	beq.w	800977e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009504:	f003 0310 	and.w	r3, r3, #16
 8009508:	2b00      	cmp	r3, #0
 800950a:	f000 8138 	beq.w	800977e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	2210      	movs	r2, #16
 8009514:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009520:	2b40      	cmp	r3, #64	; 0x40
 8009522:	f040 80b4 	bne.w	800968e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009532:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009536:	2b00      	cmp	r3, #0
 8009538:	f000 815f 	beq.w	80097fa <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009542:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009546:	429a      	cmp	r2, r3
 8009548:	f080 8157 	bcs.w	80097fa <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009552:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f003 0320 	and.w	r3, r3, #32
 8009562:	2b00      	cmp	r3, #0
 8009564:	f040 8085 	bne.w	8009672 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009570:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009574:	e853 3f00 	ldrex	r3, [r3]
 8009578:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800957c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009580:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009584:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	461a      	mov	r2, r3
 800958e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009592:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009596:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800959a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800959e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80095a2:	e841 2300 	strex	r3, r2, [r1]
 80095a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80095aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d1da      	bne.n	8009568 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	3308      	adds	r3, #8
 80095b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095bc:	e853 3f00 	ldrex	r3, [r3]
 80095c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80095c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80095c4:	f023 0301 	bic.w	r3, r3, #1
 80095c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	3308      	adds	r3, #8
 80095d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80095d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80095da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80095de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80095e2:	e841 2300 	strex	r3, r2, [r1]
 80095e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80095e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d1e1      	bne.n	80095b2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	3308      	adds	r3, #8
 80095f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095f8:	e853 3f00 	ldrex	r3, [r3]
 80095fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80095fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009600:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009604:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	3308      	adds	r3, #8
 800960e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009612:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009614:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009616:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009618:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800961a:	e841 2300 	strex	r3, r2, [r1]
 800961e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009620:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009622:	2b00      	cmp	r3, #0
 8009624:	d1e3      	bne.n	80095ee <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2220      	movs	r2, #32
 800962a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2200      	movs	r2, #0
 8009630:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800963a:	e853 3f00 	ldrex	r3, [r3]
 800963e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009640:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009642:	f023 0310 	bic.w	r3, r3, #16
 8009646:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	461a      	mov	r2, r3
 8009650:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009654:	65bb      	str	r3, [r7, #88]	; 0x58
 8009656:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009658:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800965a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800965c:	e841 2300 	strex	r3, r2, [r1]
 8009660:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009664:	2b00      	cmp	r3, #0
 8009666:	d1e4      	bne.n	8009632 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800966c:	4618      	mov	r0, r3
 800966e:	f7fc fb31 	bl	8005cd4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800967e:	b29b      	uxth	r3, r3
 8009680:	1ad3      	subs	r3, r2, r3
 8009682:	b29b      	uxth	r3, r3
 8009684:	4619      	mov	r1, r3
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 f8ca 	bl	8009820 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800968c:	e0b5      	b.n	80097fa <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800969a:	b29b      	uxth	r3, r3
 800969c:	1ad3      	subs	r3, r2, r3
 800969e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	f000 80a7 	beq.w	80097fe <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80096b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	f000 80a2 	beq.w	80097fe <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c2:	e853 3f00 	ldrex	r3, [r3]
 80096c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80096c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80096ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	461a      	mov	r2, r3
 80096d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80096dc:	647b      	str	r3, [r7, #68]	; 0x44
 80096de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80096e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096e4:	e841 2300 	strex	r3, r2, [r1]
 80096e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80096ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d1e4      	bne.n	80096ba <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	3308      	adds	r3, #8
 80096f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fa:	e853 3f00 	ldrex	r3, [r3]
 80096fe:	623b      	str	r3, [r7, #32]
   return(result);
 8009700:	6a3b      	ldr	r3, [r7, #32]
 8009702:	f023 0301 	bic.w	r3, r3, #1
 8009706:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	3308      	adds	r3, #8
 8009710:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009714:	633a      	str	r2, [r7, #48]	; 0x30
 8009716:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009718:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800971a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800971c:	e841 2300 	strex	r3, r2, [r1]
 8009720:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009724:	2b00      	cmp	r3, #0
 8009726:	d1e3      	bne.n	80096f0 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2220      	movs	r2, #32
 800972c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2200      	movs	r2, #0
 8009732:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2200      	movs	r2, #0
 8009738:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	e853 3f00 	ldrex	r3, [r3]
 8009746:	60fb      	str	r3, [r7, #12]
   return(result);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f023 0310 	bic.w	r3, r3, #16
 800974e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	461a      	mov	r2, r3
 8009758:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800975c:	61fb      	str	r3, [r7, #28]
 800975e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009760:	69b9      	ldr	r1, [r7, #24]
 8009762:	69fa      	ldr	r2, [r7, #28]
 8009764:	e841 2300 	strex	r3, r2, [r1]
 8009768:	617b      	str	r3, [r7, #20]
   return(result);
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d1e4      	bne.n	800973a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009770:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009774:	4619      	mov	r1, r3
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 f852 	bl	8009820 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800977c:	e03f      	b.n	80097fe <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800977e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009782:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009786:	2b00      	cmp	r3, #0
 8009788:	d00e      	beq.n	80097a8 <HAL_UART_IRQHandler+0x560>
 800978a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800978e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009792:	2b00      	cmp	r3, #0
 8009794:	d008      	beq.n	80097a8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800979e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f000 fcf5 	bl	800a190 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80097a6:	e02d      	b.n	8009804 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80097a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d00e      	beq.n	80097d2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80097b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d008      	beq.n	80097d2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d01c      	beq.n	8009802 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	4798      	blx	r3
    }
    return;
 80097d0:	e017      	b.n	8009802 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80097d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d012      	beq.n	8009804 <HAL_UART_IRQHandler+0x5bc>
 80097de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d00c      	beq.n	8009804 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 fca6 	bl	800a13c <UART_EndTransmit_IT>
    return;
 80097f0:	e008      	b.n	8009804 <HAL_UART_IRQHandler+0x5bc>
      return;
 80097f2:	bf00      	nop
 80097f4:	e006      	b.n	8009804 <HAL_UART_IRQHandler+0x5bc>
    return;
 80097f6:	bf00      	nop
 80097f8:	e004      	b.n	8009804 <HAL_UART_IRQHandler+0x5bc>
      return;
 80097fa:	bf00      	nop
 80097fc:	e002      	b.n	8009804 <HAL_UART_IRQHandler+0x5bc>
      return;
 80097fe:	bf00      	nop
 8009800:	e000      	b.n	8009804 <HAL_UART_IRQHandler+0x5bc>
    return;
 8009802:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8009804:	37e8      	adds	r7, #232	; 0xe8
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop

0800980c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009814:	bf00      	nop
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009820:	b480      	push	{r7}
 8009822:	b083      	sub	sp, #12
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	460b      	mov	r3, r1
 800982a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800982c:	bf00      	nop
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800983c:	b08a      	sub	sp, #40	; 0x28
 800983e:	af00      	add	r7, sp, #0
 8009840:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009842:	2300      	movs	r3, #0
 8009844:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	689a      	ldr	r2, [r3, #8]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	691b      	ldr	r3, [r3, #16]
 8009850:	431a      	orrs	r2, r3
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	695b      	ldr	r3, [r3, #20]
 8009856:	431a      	orrs	r2, r3
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	69db      	ldr	r3, [r3, #28]
 800985c:	4313      	orrs	r3, r2
 800985e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	4b9e      	ldr	r3, [pc, #632]	; (8009ae0 <UART_SetConfig+0x2a8>)
 8009868:	4013      	ands	r3, r2
 800986a:	68fa      	ldr	r2, [r7, #12]
 800986c:	6812      	ldr	r2, [r2, #0]
 800986e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009870:	430b      	orrs	r3, r1
 8009872:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	685b      	ldr	r3, [r3, #4]
 800987a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	68da      	ldr	r2, [r3, #12]
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	430a      	orrs	r2, r1
 8009888:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	699b      	ldr	r3, [r3, #24]
 800988e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4a93      	ldr	r2, [pc, #588]	; (8009ae4 <UART_SetConfig+0x2ac>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d004      	beq.n	80098a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	6a1b      	ldr	r3, [r3, #32]
 800989e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098a0:	4313      	orrs	r3, r2
 80098a2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	689b      	ldr	r3, [r3, #8]
 80098aa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098b4:	430a      	orrs	r2, r1
 80098b6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a8a      	ldr	r2, [pc, #552]	; (8009ae8 <UART_SetConfig+0x2b0>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d126      	bne.n	8009910 <UART_SetConfig+0xd8>
 80098c2:	4b8a      	ldr	r3, [pc, #552]	; (8009aec <UART_SetConfig+0x2b4>)
 80098c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098c8:	f003 0303 	and.w	r3, r3, #3
 80098cc:	2b03      	cmp	r3, #3
 80098ce:	d81b      	bhi.n	8009908 <UART_SetConfig+0xd0>
 80098d0:	a201      	add	r2, pc, #4	; (adr r2, 80098d8 <UART_SetConfig+0xa0>)
 80098d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d6:	bf00      	nop
 80098d8:	080098e9 	.word	0x080098e9
 80098dc:	080098f9 	.word	0x080098f9
 80098e0:	080098f1 	.word	0x080098f1
 80098e4:	08009901 	.word	0x08009901
 80098e8:	2301      	movs	r3, #1
 80098ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80098ee:	e0ab      	b.n	8009a48 <UART_SetConfig+0x210>
 80098f0:	2302      	movs	r3, #2
 80098f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80098f6:	e0a7      	b.n	8009a48 <UART_SetConfig+0x210>
 80098f8:	2304      	movs	r3, #4
 80098fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80098fe:	e0a3      	b.n	8009a48 <UART_SetConfig+0x210>
 8009900:	2308      	movs	r3, #8
 8009902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009906:	e09f      	b.n	8009a48 <UART_SetConfig+0x210>
 8009908:	2310      	movs	r3, #16
 800990a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800990e:	e09b      	b.n	8009a48 <UART_SetConfig+0x210>
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a76      	ldr	r2, [pc, #472]	; (8009af0 <UART_SetConfig+0x2b8>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d138      	bne.n	800998c <UART_SetConfig+0x154>
 800991a:	4b74      	ldr	r3, [pc, #464]	; (8009aec <UART_SetConfig+0x2b4>)
 800991c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009920:	f003 030c 	and.w	r3, r3, #12
 8009924:	2b0c      	cmp	r3, #12
 8009926:	d82d      	bhi.n	8009984 <UART_SetConfig+0x14c>
 8009928:	a201      	add	r2, pc, #4	; (adr r2, 8009930 <UART_SetConfig+0xf8>)
 800992a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800992e:	bf00      	nop
 8009930:	08009965 	.word	0x08009965
 8009934:	08009985 	.word	0x08009985
 8009938:	08009985 	.word	0x08009985
 800993c:	08009985 	.word	0x08009985
 8009940:	08009975 	.word	0x08009975
 8009944:	08009985 	.word	0x08009985
 8009948:	08009985 	.word	0x08009985
 800994c:	08009985 	.word	0x08009985
 8009950:	0800996d 	.word	0x0800996d
 8009954:	08009985 	.word	0x08009985
 8009958:	08009985 	.word	0x08009985
 800995c:	08009985 	.word	0x08009985
 8009960:	0800997d 	.word	0x0800997d
 8009964:	2300      	movs	r3, #0
 8009966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800996a:	e06d      	b.n	8009a48 <UART_SetConfig+0x210>
 800996c:	2302      	movs	r3, #2
 800996e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009972:	e069      	b.n	8009a48 <UART_SetConfig+0x210>
 8009974:	2304      	movs	r3, #4
 8009976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800997a:	e065      	b.n	8009a48 <UART_SetConfig+0x210>
 800997c:	2308      	movs	r3, #8
 800997e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009982:	e061      	b.n	8009a48 <UART_SetConfig+0x210>
 8009984:	2310      	movs	r3, #16
 8009986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800998a:	e05d      	b.n	8009a48 <UART_SetConfig+0x210>
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a58      	ldr	r2, [pc, #352]	; (8009af4 <UART_SetConfig+0x2bc>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d125      	bne.n	80099e2 <UART_SetConfig+0x1aa>
 8009996:	4b55      	ldr	r3, [pc, #340]	; (8009aec <UART_SetConfig+0x2b4>)
 8009998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800999c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80099a0:	2b30      	cmp	r3, #48	; 0x30
 80099a2:	d016      	beq.n	80099d2 <UART_SetConfig+0x19a>
 80099a4:	2b30      	cmp	r3, #48	; 0x30
 80099a6:	d818      	bhi.n	80099da <UART_SetConfig+0x1a2>
 80099a8:	2b20      	cmp	r3, #32
 80099aa:	d00a      	beq.n	80099c2 <UART_SetConfig+0x18a>
 80099ac:	2b20      	cmp	r3, #32
 80099ae:	d814      	bhi.n	80099da <UART_SetConfig+0x1a2>
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d002      	beq.n	80099ba <UART_SetConfig+0x182>
 80099b4:	2b10      	cmp	r3, #16
 80099b6:	d008      	beq.n	80099ca <UART_SetConfig+0x192>
 80099b8:	e00f      	b.n	80099da <UART_SetConfig+0x1a2>
 80099ba:	2300      	movs	r3, #0
 80099bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099c0:	e042      	b.n	8009a48 <UART_SetConfig+0x210>
 80099c2:	2302      	movs	r3, #2
 80099c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099c8:	e03e      	b.n	8009a48 <UART_SetConfig+0x210>
 80099ca:	2304      	movs	r3, #4
 80099cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099d0:	e03a      	b.n	8009a48 <UART_SetConfig+0x210>
 80099d2:	2308      	movs	r3, #8
 80099d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099d8:	e036      	b.n	8009a48 <UART_SetConfig+0x210>
 80099da:	2310      	movs	r3, #16
 80099dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099e0:	e032      	b.n	8009a48 <UART_SetConfig+0x210>
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a3f      	ldr	r2, [pc, #252]	; (8009ae4 <UART_SetConfig+0x2ac>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d12a      	bne.n	8009a42 <UART_SetConfig+0x20a>
 80099ec:	4b3f      	ldr	r3, [pc, #252]	; (8009aec <UART_SetConfig+0x2b4>)
 80099ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099f2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80099f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80099fa:	d01a      	beq.n	8009a32 <UART_SetConfig+0x1fa>
 80099fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a00:	d81b      	bhi.n	8009a3a <UART_SetConfig+0x202>
 8009a02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a06:	d00c      	beq.n	8009a22 <UART_SetConfig+0x1ea>
 8009a08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a0c:	d815      	bhi.n	8009a3a <UART_SetConfig+0x202>
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d003      	beq.n	8009a1a <UART_SetConfig+0x1e2>
 8009a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a16:	d008      	beq.n	8009a2a <UART_SetConfig+0x1f2>
 8009a18:	e00f      	b.n	8009a3a <UART_SetConfig+0x202>
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a20:	e012      	b.n	8009a48 <UART_SetConfig+0x210>
 8009a22:	2302      	movs	r3, #2
 8009a24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a28:	e00e      	b.n	8009a48 <UART_SetConfig+0x210>
 8009a2a:	2304      	movs	r3, #4
 8009a2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a30:	e00a      	b.n	8009a48 <UART_SetConfig+0x210>
 8009a32:	2308      	movs	r3, #8
 8009a34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a38:	e006      	b.n	8009a48 <UART_SetConfig+0x210>
 8009a3a:	2310      	movs	r3, #16
 8009a3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a40:	e002      	b.n	8009a48 <UART_SetConfig+0x210>
 8009a42:	2310      	movs	r3, #16
 8009a44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a25      	ldr	r2, [pc, #148]	; (8009ae4 <UART_SetConfig+0x2ac>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	f040 808a 	bne.w	8009b68 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009a54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009a58:	2b08      	cmp	r3, #8
 8009a5a:	d824      	bhi.n	8009aa6 <UART_SetConfig+0x26e>
 8009a5c:	a201      	add	r2, pc, #4	; (adr r2, 8009a64 <UART_SetConfig+0x22c>)
 8009a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a62:	bf00      	nop
 8009a64:	08009a89 	.word	0x08009a89
 8009a68:	08009aa7 	.word	0x08009aa7
 8009a6c:	08009a91 	.word	0x08009a91
 8009a70:	08009aa7 	.word	0x08009aa7
 8009a74:	08009a97 	.word	0x08009a97
 8009a78:	08009aa7 	.word	0x08009aa7
 8009a7c:	08009aa7 	.word	0x08009aa7
 8009a80:	08009aa7 	.word	0x08009aa7
 8009a84:	08009a9f 	.word	0x08009a9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a88:	f7fd fb1c 	bl	80070c4 <HAL_RCC_GetPCLK1Freq>
 8009a8c:	61f8      	str	r0, [r7, #28]
        break;
 8009a8e:	e010      	b.n	8009ab2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a90:	4b19      	ldr	r3, [pc, #100]	; (8009af8 <UART_SetConfig+0x2c0>)
 8009a92:	61fb      	str	r3, [r7, #28]
        break;
 8009a94:	e00d      	b.n	8009ab2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a96:	f7fd fa7d 	bl	8006f94 <HAL_RCC_GetSysClockFreq>
 8009a9a:	61f8      	str	r0, [r7, #28]
        break;
 8009a9c:	e009      	b.n	8009ab2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009aa2:	61fb      	str	r3, [r7, #28]
        break;
 8009aa4:	e005      	b.n	8009ab2 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009ab0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009ab2:	69fb      	ldr	r3, [r7, #28]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	f000 8109 	beq.w	8009ccc <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	685a      	ldr	r2, [r3, #4]
 8009abe:	4613      	mov	r3, r2
 8009ac0:	005b      	lsls	r3, r3, #1
 8009ac2:	4413      	add	r3, r2
 8009ac4:	69fa      	ldr	r2, [r7, #28]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d305      	bcc.n	8009ad6 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009ad0:	69fa      	ldr	r2, [r7, #28]
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d912      	bls.n	8009afc <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009adc:	e0f6      	b.n	8009ccc <UART_SetConfig+0x494>
 8009ade:	bf00      	nop
 8009ae0:	efff69f3 	.word	0xefff69f3
 8009ae4:	40008000 	.word	0x40008000
 8009ae8:	40013800 	.word	0x40013800
 8009aec:	40021000 	.word	0x40021000
 8009af0:	40004400 	.word	0x40004400
 8009af4:	40004800 	.word	0x40004800
 8009af8:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009afc:	69fb      	ldr	r3, [r7, #28]
 8009afe:	2200      	movs	r2, #0
 8009b00:	461c      	mov	r4, r3
 8009b02:	4615      	mov	r5, r2
 8009b04:	f04f 0200 	mov.w	r2, #0
 8009b08:	f04f 0300 	mov.w	r3, #0
 8009b0c:	022b      	lsls	r3, r5, #8
 8009b0e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009b12:	0222      	lsls	r2, r4, #8
 8009b14:	68f9      	ldr	r1, [r7, #12]
 8009b16:	6849      	ldr	r1, [r1, #4]
 8009b18:	0849      	lsrs	r1, r1, #1
 8009b1a:	2000      	movs	r0, #0
 8009b1c:	4688      	mov	r8, r1
 8009b1e:	4681      	mov	r9, r0
 8009b20:	eb12 0a08 	adds.w	sl, r2, r8
 8009b24:	eb43 0b09 	adc.w	fp, r3, r9
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	603b      	str	r3, [r7, #0]
 8009b30:	607a      	str	r2, [r7, #4]
 8009b32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b36:	4650      	mov	r0, sl
 8009b38:	4659      	mov	r1, fp
 8009b3a:	f7f6 ffb7 	bl	8000aac <__aeabi_uldivmod>
 8009b3e:	4602      	mov	r2, r0
 8009b40:	460b      	mov	r3, r1
 8009b42:	4613      	mov	r3, r2
 8009b44:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009b46:	69bb      	ldr	r3, [r7, #24]
 8009b48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b4c:	d308      	bcc.n	8009b60 <UART_SetConfig+0x328>
 8009b4e:	69bb      	ldr	r3, [r7, #24]
 8009b50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b54:	d204      	bcs.n	8009b60 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	69ba      	ldr	r2, [r7, #24]
 8009b5c:	60da      	str	r2, [r3, #12]
 8009b5e:	e0b5      	b.n	8009ccc <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8009b60:	2301      	movs	r3, #1
 8009b62:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009b66:	e0b1      	b.n	8009ccc <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	69db      	ldr	r3, [r3, #28]
 8009b6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b70:	d15d      	bne.n	8009c2e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8009b72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009b76:	2b08      	cmp	r3, #8
 8009b78:	d827      	bhi.n	8009bca <UART_SetConfig+0x392>
 8009b7a:	a201      	add	r2, pc, #4	; (adr r2, 8009b80 <UART_SetConfig+0x348>)
 8009b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b80:	08009ba5 	.word	0x08009ba5
 8009b84:	08009bad 	.word	0x08009bad
 8009b88:	08009bb5 	.word	0x08009bb5
 8009b8c:	08009bcb 	.word	0x08009bcb
 8009b90:	08009bbb 	.word	0x08009bbb
 8009b94:	08009bcb 	.word	0x08009bcb
 8009b98:	08009bcb 	.word	0x08009bcb
 8009b9c:	08009bcb 	.word	0x08009bcb
 8009ba0:	08009bc3 	.word	0x08009bc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ba4:	f7fd fa8e 	bl	80070c4 <HAL_RCC_GetPCLK1Freq>
 8009ba8:	61f8      	str	r0, [r7, #28]
        break;
 8009baa:	e014      	b.n	8009bd6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009bac:	f7fd faa0 	bl	80070f0 <HAL_RCC_GetPCLK2Freq>
 8009bb0:	61f8      	str	r0, [r7, #28]
        break;
 8009bb2:	e010      	b.n	8009bd6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009bb4:	4b4c      	ldr	r3, [pc, #304]	; (8009ce8 <UART_SetConfig+0x4b0>)
 8009bb6:	61fb      	str	r3, [r7, #28]
        break;
 8009bb8:	e00d      	b.n	8009bd6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bba:	f7fd f9eb 	bl	8006f94 <HAL_RCC_GetSysClockFreq>
 8009bbe:	61f8      	str	r0, [r7, #28]
        break;
 8009bc0:	e009      	b.n	8009bd6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bc6:	61fb      	str	r3, [r7, #28]
        break;
 8009bc8:	e005      	b.n	8009bd6 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009bd4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009bd6:	69fb      	ldr	r3, [r7, #28]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d077      	beq.n	8009ccc <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009bdc:	69fb      	ldr	r3, [r7, #28]
 8009bde:	005a      	lsls	r2, r3, #1
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	085b      	lsrs	r3, r3, #1
 8009be6:	441a      	add	r2, r3
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bf0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009bf2:	69bb      	ldr	r3, [r7, #24]
 8009bf4:	2b0f      	cmp	r3, #15
 8009bf6:	d916      	bls.n	8009c26 <UART_SetConfig+0x3ee>
 8009bf8:	69bb      	ldr	r3, [r7, #24]
 8009bfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bfe:	d212      	bcs.n	8009c26 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c00:	69bb      	ldr	r3, [r7, #24]
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	f023 030f 	bic.w	r3, r3, #15
 8009c08:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	085b      	lsrs	r3, r3, #1
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	f003 0307 	and.w	r3, r3, #7
 8009c14:	b29a      	uxth	r2, r3
 8009c16:	8afb      	ldrh	r3, [r7, #22]
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	8afa      	ldrh	r2, [r7, #22]
 8009c22:	60da      	str	r2, [r3, #12]
 8009c24:	e052      	b.n	8009ccc <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8009c26:	2301      	movs	r3, #1
 8009c28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009c2c:	e04e      	b.n	8009ccc <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009c2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c32:	2b08      	cmp	r3, #8
 8009c34:	d827      	bhi.n	8009c86 <UART_SetConfig+0x44e>
 8009c36:	a201      	add	r2, pc, #4	; (adr r2, 8009c3c <UART_SetConfig+0x404>)
 8009c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c3c:	08009c61 	.word	0x08009c61
 8009c40:	08009c69 	.word	0x08009c69
 8009c44:	08009c71 	.word	0x08009c71
 8009c48:	08009c87 	.word	0x08009c87
 8009c4c:	08009c77 	.word	0x08009c77
 8009c50:	08009c87 	.word	0x08009c87
 8009c54:	08009c87 	.word	0x08009c87
 8009c58:	08009c87 	.word	0x08009c87
 8009c5c:	08009c7f 	.word	0x08009c7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c60:	f7fd fa30 	bl	80070c4 <HAL_RCC_GetPCLK1Freq>
 8009c64:	61f8      	str	r0, [r7, #28]
        break;
 8009c66:	e014      	b.n	8009c92 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c68:	f7fd fa42 	bl	80070f0 <HAL_RCC_GetPCLK2Freq>
 8009c6c:	61f8      	str	r0, [r7, #28]
        break;
 8009c6e:	e010      	b.n	8009c92 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c70:	4b1d      	ldr	r3, [pc, #116]	; (8009ce8 <UART_SetConfig+0x4b0>)
 8009c72:	61fb      	str	r3, [r7, #28]
        break;
 8009c74:	e00d      	b.n	8009c92 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c76:	f7fd f98d 	bl	8006f94 <HAL_RCC_GetSysClockFreq>
 8009c7a:	61f8      	str	r0, [r7, #28]
        break;
 8009c7c:	e009      	b.n	8009c92 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c82:	61fb      	str	r3, [r7, #28]
        break;
 8009c84:	e005      	b.n	8009c92 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8009c86:	2300      	movs	r3, #0
 8009c88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009c90:	bf00      	nop
    }

    if (pclk != 0U)
 8009c92:	69fb      	ldr	r3, [r7, #28]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d019      	beq.n	8009ccc <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	085a      	lsrs	r2, r3, #1
 8009c9e:	69fb      	ldr	r3, [r7, #28]
 8009ca0:	441a      	add	r2, r3
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009caa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cac:	69bb      	ldr	r3, [r7, #24]
 8009cae:	2b0f      	cmp	r3, #15
 8009cb0:	d909      	bls.n	8009cc6 <UART_SetConfig+0x48e>
 8009cb2:	69bb      	ldr	r3, [r7, #24]
 8009cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cb8:	d205      	bcs.n	8009cc6 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009cba:	69bb      	ldr	r3, [r7, #24]
 8009cbc:	b29a      	uxth	r2, r3
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	60da      	str	r2, [r3, #12]
 8009cc4:	e002      	b.n	8009ccc <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009cd8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3728      	adds	r7, #40	; 0x28
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ce6:	bf00      	nop
 8009ce8:	00f42400 	.word	0x00f42400

08009cec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b083      	sub	sp, #12
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf8:	f003 0301 	and.w	r3, r3, #1
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d00a      	beq.n	8009d16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	430a      	orrs	r2, r1
 8009d14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d1a:	f003 0302 	and.w	r3, r3, #2
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d00a      	beq.n	8009d38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	430a      	orrs	r2, r1
 8009d36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d3c:	f003 0304 	and.w	r3, r3, #4
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d00a      	beq.n	8009d5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	430a      	orrs	r2, r1
 8009d58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d5e:	f003 0308 	and.w	r3, r3, #8
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d00a      	beq.n	8009d7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	430a      	orrs	r2, r1
 8009d7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d80:	f003 0310 	and.w	r3, r3, #16
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d00a      	beq.n	8009d9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	689b      	ldr	r3, [r3, #8]
 8009d8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	430a      	orrs	r2, r1
 8009d9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da2:	f003 0320 	and.w	r3, r3, #32
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d00a      	beq.n	8009dc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	689b      	ldr	r3, [r3, #8]
 8009db0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	430a      	orrs	r2, r1
 8009dbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d01a      	beq.n	8009e02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	430a      	orrs	r2, r1
 8009de0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009de6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009dea:	d10a      	bne.n	8009e02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	685b      	ldr	r3, [r3, #4]
 8009df2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	430a      	orrs	r2, r1
 8009e00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d00a      	beq.n	8009e24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	430a      	orrs	r2, r1
 8009e22:	605a      	str	r2, [r3, #4]
  }
}
 8009e24:	bf00      	nop
 8009e26:	370c      	adds	r7, #12
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr

08009e30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b086      	sub	sp, #24
 8009e34:	af02      	add	r7, sp, #8
 8009e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e40:	f7fb fc90 	bl	8005764 <HAL_GetTick>
 8009e44:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f003 0308 	and.w	r3, r3, #8
 8009e50:	2b08      	cmp	r3, #8
 8009e52:	d10e      	bne.n	8009e72 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e58:	9300      	str	r3, [sp, #0]
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 f82d 	bl	8009ec2 <UART_WaitOnFlagUntilTimeout>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d001      	beq.n	8009e72 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e6e:	2303      	movs	r3, #3
 8009e70:	e023      	b.n	8009eba <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f003 0304 	and.w	r3, r3, #4
 8009e7c:	2b04      	cmp	r3, #4
 8009e7e:	d10e      	bne.n	8009e9e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e84:	9300      	str	r3, [sp, #0]
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 f817 	bl	8009ec2 <UART_WaitOnFlagUntilTimeout>
 8009e94:	4603      	mov	r3, r0
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d001      	beq.n	8009e9e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e9a:	2303      	movs	r3, #3
 8009e9c:	e00d      	b.n	8009eba <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2220      	movs	r2, #32
 8009ea2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2220      	movs	r2, #32
 8009ea8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2200      	movs	r2, #0
 8009eae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009eb8:	2300      	movs	r3, #0
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3710      	adds	r7, #16
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b09c      	sub	sp, #112	; 0x70
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	60f8      	str	r0, [r7, #12]
 8009eca:	60b9      	str	r1, [r7, #8]
 8009ecc:	603b      	str	r3, [r7, #0]
 8009ece:	4613      	mov	r3, r2
 8009ed0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ed2:	e0a5      	b.n	800a020 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ed4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ed6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009eda:	f000 80a1 	beq.w	800a020 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ede:	f7fb fc41 	bl	8005764 <HAL_GetTick>
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	1ad3      	subs	r3, r2, r3
 8009ee8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d302      	bcc.n	8009ef4 <UART_WaitOnFlagUntilTimeout+0x32>
 8009eee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d13e      	bne.n	8009f72 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009efa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009efc:	e853 3f00 	ldrex	r3, [r3]
 8009f00:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009f08:	667b      	str	r3, [r7, #100]	; 0x64
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	461a      	mov	r2, r3
 8009f10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f14:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009f18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009f1a:	e841 2300 	strex	r3, r2, [r1]
 8009f1e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009f20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d1e6      	bne.n	8009ef4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	3308      	adds	r3, #8
 8009f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f30:	e853 3f00 	ldrex	r3, [r3]
 8009f34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f38:	f023 0301 	bic.w	r3, r3, #1
 8009f3c:	663b      	str	r3, [r7, #96]	; 0x60
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	3308      	adds	r3, #8
 8009f44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009f46:	64ba      	str	r2, [r7, #72]	; 0x48
 8009f48:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009f4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f4e:	e841 2300 	strex	r3, r2, [r1]
 8009f52:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d1e5      	bne.n	8009f26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2220      	movs	r2, #32
 8009f5e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	2220      	movs	r2, #32
 8009f64:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009f6e:	2303      	movs	r3, #3
 8009f70:	e067      	b.n	800a042 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f003 0304 	and.w	r3, r3, #4
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d04f      	beq.n	800a020 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	69db      	ldr	r3, [r3, #28]
 8009f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f8e:	d147      	bne.n	800a020 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009f98:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa2:	e853 3f00 	ldrex	r3, [r3]
 8009fa6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009faa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009fae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8009fba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009fbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009fc0:	e841 2300 	strex	r3, r2, [r1]
 8009fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d1e6      	bne.n	8009f9a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	3308      	adds	r3, #8
 8009fd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	e853 3f00 	ldrex	r3, [r3]
 8009fda:	613b      	str	r3, [r7, #16]
   return(result);
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	f023 0301 	bic.w	r3, r3, #1
 8009fe2:	66bb      	str	r3, [r7, #104]	; 0x68
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	3308      	adds	r3, #8
 8009fea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009fec:	623a      	str	r2, [r7, #32]
 8009fee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff0:	69f9      	ldr	r1, [r7, #28]
 8009ff2:	6a3a      	ldr	r2, [r7, #32]
 8009ff4:	e841 2300 	strex	r3, r2, [r1]
 8009ff8:	61bb      	str	r3, [r7, #24]
   return(result);
 8009ffa:	69bb      	ldr	r3, [r7, #24]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d1e5      	bne.n	8009fcc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2220      	movs	r2, #32
 800a004:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2220      	movs	r2, #32
 800a00a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2220      	movs	r2, #32
 800a010:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2200      	movs	r2, #0
 800a018:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a01c:	2303      	movs	r3, #3
 800a01e:	e010      	b.n	800a042 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	69da      	ldr	r2, [r3, #28]
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	4013      	ands	r3, r2
 800a02a:	68ba      	ldr	r2, [r7, #8]
 800a02c:	429a      	cmp	r2, r3
 800a02e:	bf0c      	ite	eq
 800a030:	2301      	moveq	r3, #1
 800a032:	2300      	movne	r3, #0
 800a034:	b2db      	uxtb	r3, r3
 800a036:	461a      	mov	r2, r3
 800a038:	79fb      	ldrb	r3, [r7, #7]
 800a03a:	429a      	cmp	r2, r3
 800a03c:	f43f af4a 	beq.w	8009ed4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a040:	2300      	movs	r3, #0
}
 800a042:	4618      	mov	r0, r3
 800a044:	3770      	adds	r7, #112	; 0x70
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}

0800a04a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a04a:	b480      	push	{r7}
 800a04c:	b095      	sub	sp, #84	; 0x54
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a05a:	e853 3f00 	ldrex	r3, [r3]
 800a05e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a062:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a066:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	461a      	mov	r2, r3
 800a06e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a070:	643b      	str	r3, [r7, #64]	; 0x40
 800a072:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a074:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a076:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a078:	e841 2300 	strex	r3, r2, [r1]
 800a07c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a080:	2b00      	cmp	r3, #0
 800a082:	d1e6      	bne.n	800a052 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	3308      	adds	r3, #8
 800a08a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a08c:	6a3b      	ldr	r3, [r7, #32]
 800a08e:	e853 3f00 	ldrex	r3, [r3]
 800a092:	61fb      	str	r3, [r7, #28]
   return(result);
 800a094:	69fb      	ldr	r3, [r7, #28]
 800a096:	f023 0301 	bic.w	r3, r3, #1
 800a09a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	3308      	adds	r3, #8
 800a0a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a0a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a0a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a0aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0ac:	e841 2300 	strex	r3, r2, [r1]
 800a0b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d1e5      	bne.n	800a084 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d118      	bne.n	800a0f2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	e853 3f00 	ldrex	r3, [r3]
 800a0cc:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	f023 0310 	bic.w	r3, r3, #16
 800a0d4:	647b      	str	r3, [r7, #68]	; 0x44
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	461a      	mov	r2, r3
 800a0dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0de:	61bb      	str	r3, [r7, #24]
 800a0e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e2:	6979      	ldr	r1, [r7, #20]
 800a0e4:	69ba      	ldr	r2, [r7, #24]
 800a0e6:	e841 2300 	strex	r3, r2, [r1]
 800a0ea:	613b      	str	r3, [r7, #16]
   return(result);
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d1e6      	bne.n	800a0c0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2220      	movs	r2, #32
 800a0f6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2200      	movs	r2, #0
 800a102:	665a      	str	r2, [r3, #100]	; 0x64
}
 800a104:	bf00      	nop
 800a106:	3754      	adds	r7, #84	; 0x54
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a11c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2200      	movs	r2, #0
 800a122:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2200      	movs	r2, #0
 800a12a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a12e:	68f8      	ldr	r0, [r7, #12]
 800a130:	f7ff fb6c 	bl	800980c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a134:	bf00      	nop
 800a136:	3710      	adds	r7, #16
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b088      	sub	sp, #32
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	e853 3f00 	ldrex	r3, [r3]
 800a150:	60bb      	str	r3, [r7, #8]
   return(result);
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a158:	61fb      	str	r3, [r7, #28]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	461a      	mov	r2, r3
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	61bb      	str	r3, [r7, #24]
 800a164:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a166:	6979      	ldr	r1, [r7, #20]
 800a168:	69ba      	ldr	r2, [r7, #24]
 800a16a:	e841 2300 	strex	r3, r2, [r1]
 800a16e:	613b      	str	r3, [r7, #16]
   return(result);
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d1e6      	bne.n	800a144 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2220      	movs	r2, #32
 800a17a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 fc52 	bl	800aa2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a188:	bf00      	nop
 800a18a:	3720      	adds	r7, #32
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a190:	b480      	push	{r7}
 800a192:	b083      	sub	sp, #12
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a198:	bf00      	nop
 800a19a:	370c      	adds	r7, #12
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr

0800a1a4 <board_init_common_rtc_init>:
bool 				g_button_press_state[NUM_PUSH_BUTTONS] 	= {false};

extern UART_HandleTypeDef      gh_host_usart;

static void board_init_common_rtc_init(void)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	af00      	add	r7, sp, #0
    g_rtc_handle.Instance = RTC;
 800a1a8:	4b10      	ldr	r3, [pc, #64]	; (800a1ec <board_init_common_rtc_init+0x48>)
 800a1aa:	4a11      	ldr	r2, [pc, #68]	; (800a1f0 <board_init_common_rtc_init+0x4c>)
 800a1ac:	601a      	str	r2, [r3, #0]
    g_rtc_handle.Init.HourFormat = RTC_HOURFORMAT_24;
 800a1ae:	4b0f      	ldr	r3, [pc, #60]	; (800a1ec <board_init_common_rtc_init+0x48>)
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	605a      	str	r2, [r3, #4]
    g_rtc_handle.Init.AsynchPrediv = 127;
 800a1b4:	4b0d      	ldr	r3, [pc, #52]	; (800a1ec <board_init_common_rtc_init+0x48>)
 800a1b6:	227f      	movs	r2, #127	; 0x7f
 800a1b8:	609a      	str	r2, [r3, #8]
    g_rtc_handle.Init.SynchPrediv = 255;
 800a1ba:	4b0c      	ldr	r3, [pc, #48]	; (800a1ec <board_init_common_rtc_init+0x48>)
 800a1bc:	22ff      	movs	r2, #255	; 0xff
 800a1be:	60da      	str	r2, [r3, #12]
    g_rtc_handle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800a1c0:	4b0a      	ldr	r3, [pc, #40]	; (800a1ec <board_init_common_rtc_init+0x48>)
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	611a      	str	r2, [r3, #16]
    g_rtc_handle.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800a1c6:	4b09      	ldr	r3, [pc, #36]	; (800a1ec <board_init_common_rtc_init+0x48>)
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	615a      	str	r2, [r3, #20]
    g_rtc_handle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800a1cc:	4b07      	ldr	r3, [pc, #28]	; (800a1ec <board_init_common_rtc_init+0x48>)
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	619a      	str	r2, [r3, #24]
    g_rtc_handle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800a1d2:	4b06      	ldr	r3, [pc, #24]	; (800a1ec <board_init_common_rtc_init+0x48>)
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	61da      	str	r2, [r3, #28]
    if (HAL_RTC_Init(&g_rtc_handle) != HAL_OK) Error_Handler();
 800a1d8:	4804      	ldr	r0, [pc, #16]	; (800a1ec <board_init_common_rtc_init+0x48>)
 800a1da:	f7fd fb09 	bl	80077f0 <HAL_RTC_Init>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d001      	beq.n	800a1e8 <board_init_common_rtc_init+0x44>
 800a1e4:	f000 f9b9 	bl	800a55a <Error_Handler>
}
 800a1e8:	bf00      	nop
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	200023bc 	.word	0x200023bc
 800a1f0:	40002800 	.word	0x40002800

0800a1f4 <SystemClock_Config>:

static void SystemClock_Config(void)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b0ae      	sub	sp, #184	; 0xb8
 800a1f8:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a1fa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a1fe:	2244      	movs	r2, #68	; 0x44
 800a200:	2100      	movs	r1, #0
 800a202:	4618      	mov	r0, r3
 800a204:	f001 fb4a 	bl	800b89c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a208:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a20c:	2200      	movs	r2, #0
 800a20e:	601a      	str	r2, [r3, #0]
 800a210:	605a      	str	r2, [r3, #4]
 800a212:	609a      	str	r2, [r3, #8]
 800a214:	60da      	str	r2, [r3, #12]
 800a216:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a218:	1d3b      	adds	r3, r7, #4
 800a21a:	225c      	movs	r2, #92	; 0x5c
 800a21c:	2100      	movs	r1, #0
 800a21e:	4618      	mov	r0, r3
 800a220:	f001 fb3c 	bl	800b89c <memset>

    HAL_PWR_EnableBkUpAccess();
 800a224:	f7fc f8be 	bl	80063a4 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800a228:	4b25      	ldr	r3, [pc, #148]	; (800a2c0 <SystemClock_Config+0xcc>)
 800a22a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a22e:	4a24      	ldr	r2, [pc, #144]	; (800a2c0 <SystemClock_Config+0xcc>)
 800a230:	f023 0318 	bic.w	r3, r3, #24
 800a234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800a238:	2305      	movs	r3, #5
 800a23a:	677b      	str	r3, [r7, #116]	; 0x74
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a23c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a240:	67bb      	str	r3, [r7, #120]	; 0x78
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800a242:	2301      	movs	r3, #1
 800a244:	67fb      	str	r3, [r7, #124]	; 0x7c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800a246:	2300      	movs	r3, #0
 800a248:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) while(1);
 800a24c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800a250:	4618      	mov	r0, r3
 800a252:	f7fc f98b 	bl	800656c <HAL_RCC_OscConfig>
 800a256:	4603      	mov	r3, r0
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d000      	beq.n	800a25e <SystemClock_Config+0x6a>
 800a25c:	e7fe      	b.n	800a25c <SystemClock_Config+0x68>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a25e:	230f      	movs	r3, #15
 800a260:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800a262:	2302      	movs	r3, #2
 800a264:	667b      	str	r3, [r7, #100]	; 0x64
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a266:	2300      	movs	r3, #0
 800a268:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a26a:	2300      	movs	r3, #0
 800a26c:	66fb      	str	r3, [r7, #108]	; 0x6c
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a26e:	2300      	movs	r3, #0
 800a270:	673b      	str	r3, [r7, #112]	; 0x70

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) while(1);
 800a272:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a276:	2102      	movs	r1, #2
 800a278:	4618      	mov	r0, r3
 800a27a:	f7fc fd8b 	bl	8006d94 <HAL_RCC_ClockConfig>
 800a27e:	4603      	mov	r3, r0
 800a280:	2b00      	cmp	r3, #0
 800a282:	d000      	beq.n	800a286 <SystemClock_Config+0x92>
 800a284:	e7fe      	b.n	800a284 <SystemClock_Config+0x90>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a286:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a28a:	607b      	str	r3, [r7, #4]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800a28c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a290:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) Error_Handler();
 800a292:	1d3b      	adds	r3, r7, #4
 800a294:	4618      	mov	r0, r3
 800a296:	f7fc ffa1 	bl	80071dc <HAL_RCCEx_PeriphCLKConfig>
 800a29a:	4603      	mov	r3, r0
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d001      	beq.n	800a2a4 <SystemClock_Config+0xb0>
 800a2a0:	f000 f95b 	bl	800a55a <Error_Handler>
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) Error_Handler();
 800a2a4:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a2a8:	f7fc f90a 	bl	80064c0 <HAL_PWREx_ControlVoltageScaling>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d001      	beq.n	800a2b6 <SystemClock_Config+0xc2>
 800a2b2:	f000 f952 	bl	800a55a <Error_Handler>
}
 800a2b6:	bf00      	nop
 800a2b8:	37b8      	adds	r7, #184	; 0xb8
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	40021000 	.word	0x40021000

0800a2c4 <board_init_common_timer_init>:


static void board_init_common_timer_init(void)
{
 800a2c4:	b590      	push	{r4, r7, lr}
 800a2c6:	b0a1      	sub	sp, #132	; 0x84
 800a2c8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a2ca:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	601a      	str	r2, [r3, #0]
 800a2d2:	605a      	str	r2, [r3, #4]
 800a2d4:	609a      	str	r2, [r3, #8]
 800a2d6:	60da      	str	r2, [r3, #12]
 800a2d8:	611a      	str	r2, [r3, #16]
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a2da:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a2de:	2200      	movs	r2, #0
 800a2e0:	601a      	str	r2, [r3, #0]
 800a2e2:	605a      	str	r2, [r3, #4]
 800a2e4:	609a      	str	r2, [r3, #8]
 800a2e6:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a2e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	601a      	str	r2, [r3, #0]
 800a2f0:	605a      	str	r2, [r3, #4]
 800a2f2:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 800a2f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	601a      	str	r2, [r3, #0]
 800a2fc:	605a      	str	r2, [r3, #4]
 800a2fe:	609a      	str	r2, [r3, #8]
 800a300:	60da      	str	r2, [r3, #12]
 800a302:	611a      	str	r2, [r3, #16]
 800a304:	615a      	str	r2, [r3, #20]
 800a306:	619a      	str	r2, [r3, #24]
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800a308:	f107 0308 	add.w	r3, r7, #8
 800a30c:	222c      	movs	r2, #44	; 0x2c
 800a30e:	2100      	movs	r1, #0
 800a310:	4618      	mov	r0, r3
 800a312:	f001 fac3 	bl	800b89c <memset>
    g_tim1_handle.Instance = TIM1;
 800a316:	4b80      	ldr	r3, [pc, #512]	; (800a518 <board_init_common_timer_init+0x254>)
 800a318:	4a80      	ldr	r2, [pc, #512]	; (800a51c <board_init_common_timer_init+0x258>)
 800a31a:	601a      	str	r2, [r3, #0]
    g_tim1_handle.Init.Prescaler = 0;
 800a31c:	4b7e      	ldr	r3, [pc, #504]	; (800a518 <board_init_common_timer_init+0x254>)
 800a31e:	2200      	movs	r2, #0
 800a320:	605a      	str	r2, [r3, #4]
    g_tim1_handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a322:	4b7d      	ldr	r3, [pc, #500]	; (800a518 <board_init_common_timer_init+0x254>)
 800a324:	2200      	movs	r2, #0
 800a326:	609a      	str	r2, [r3, #8]
    g_tim1_handle.Init.Period = 60-1;
 800a328:	4b7b      	ldr	r3, [pc, #492]	; (800a518 <board_init_common_timer_init+0x254>)
 800a32a:	223b      	movs	r2, #59	; 0x3b
 800a32c:	60da      	str	r2, [r3, #12]
    g_tim1_handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a32e:	4b7a      	ldr	r3, [pc, #488]	; (800a518 <board_init_common_timer_init+0x254>)
 800a330:	2200      	movs	r2, #0
 800a332:	611a      	str	r2, [r3, #16]
    g_tim1_handle.Init.RepetitionCounter = 0;
 800a334:	4b78      	ldr	r3, [pc, #480]	; (800a518 <board_init_common_timer_init+0x254>)
 800a336:	2200      	movs	r2, #0
 800a338:	615a      	str	r2, [r3, #20]
    g_tim1_handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a33a:	4b77      	ldr	r3, [pc, #476]	; (800a518 <board_init_common_timer_init+0x254>)
 800a33c:	2200      	movs	r2, #0
 800a33e:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&g_tim1_handle) != HAL_OK) Error_Handler();
 800a340:	4875      	ldr	r0, [pc, #468]	; (800a518 <board_init_common_timer_init+0x254>)
 800a342:	f7fd fc14 	bl	8007b6e <HAL_TIM_Base_Init>
 800a346:	4603      	mov	r3, r0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d001      	beq.n	800a350 <board_init_common_timer_init+0x8c>
 800a34c:	f000 f905 	bl	800a55a <Error_Handler>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a354:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_TIM_ConfigClockSource(&g_tim1_handle, &sClockSourceConfig) != HAL_OK) Error_Handler();
 800a356:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a35a:	4619      	mov	r1, r3
 800a35c:	486e      	ldr	r0, [pc, #440]	; (800a518 <board_init_common_timer_init+0x254>)
 800a35e:	f7fe f8a9 	bl	80084b4 <HAL_TIM_ConfigClockSource>
 800a362:	4603      	mov	r3, r0
 800a364:	2b00      	cmp	r3, #0
 800a366:	d001      	beq.n	800a36c <board_init_common_timer_init+0xa8>
 800a368:	f000 f8f7 	bl	800a55a <Error_Handler>
    if (HAL_TIM_PWM_Init(&g_tim1_handle) != HAL_OK) Error_Handler();
 800a36c:	486a      	ldr	r0, [pc, #424]	; (800a518 <board_init_common_timer_init+0x254>)
 800a36e:	f7fd fc55 	bl	8007c1c <HAL_TIM_PWM_Init>
 800a372:	4603      	mov	r3, r0
 800a374:	2b00      	cmp	r3, #0
 800a376:	d001      	beq.n	800a37c <board_init_common_timer_init+0xb8>
 800a378:	f000 f8ef 	bl	800a55a <Error_Handler>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a37c:	2300      	movs	r3, #0
 800a37e:	653b      	str	r3, [r7, #80]	; 0x50
    sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800a380:	2300      	movs	r3, #0
 800a382:	657b      	str	r3, [r7, #84]	; 0x54
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a384:	2300      	movs	r3, #0
 800a386:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_TIMEx_MasterConfigSynchronization(&g_tim1_handle, &sMasterConfig) != HAL_OK) Error_Handler();
 800a388:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a38c:	4619      	mov	r1, r3
 800a38e:	4862      	ldr	r0, [pc, #392]	; (800a518 <board_init_common_timer_init+0x254>)
 800a390:	f7fe fde0 	bl	8008f54 <HAL_TIMEx_MasterConfigSynchronization>
 800a394:	4603      	mov	r3, r0
 800a396:	2b00      	cmp	r3, #0
 800a398:	d001      	beq.n	800a39e <board_init_common_timer_init+0xda>
 800a39a:	f000 f8de 	bl	800a55a <Error_Handler>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a39e:	2360      	movs	r3, #96	; 0x60
 800a3a0:	637b      	str	r3, [r7, #52]	; 0x34
    sConfigOC.Pulse = 0;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	63bb      	str	r3, [r7, #56]	; 0x38
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	643b      	str	r3, [r7, #64]	; 0x40
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	647b      	str	r3, [r7, #68]	; 0x44
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	64bb      	str	r3, [r7, #72]	; 0x48
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 800a3ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a3be:	2200      	movs	r2, #0
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	4855      	ldr	r0, [pc, #340]	; (800a518 <board_init_common_timer_init+0x254>)
 800a3c4:	f7fd ff62 	bl	800828c <HAL_TIM_PWM_ConfigChannel>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d001      	beq.n	800a3d2 <board_init_common_timer_init+0x10e>
 800a3ce:	f000 f8c4 	bl	800a55a <Error_Handler>
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) Error_Handler();
 800a3d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a3d6:	2204      	movs	r2, #4
 800a3d8:	4619      	mov	r1, r3
 800a3da:	484f      	ldr	r0, [pc, #316]	; (800a518 <board_init_common_timer_init+0x254>)
 800a3dc:	f7fd ff56 	bl	800828c <HAL_TIM_PWM_ConfigChannel>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d001      	beq.n	800a3ea <board_init_common_timer_init+0x126>
 800a3e6:	f000 f8b8 	bl	800a55a <Error_Handler>
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) Error_Handler();
 800a3ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a3ee:	2208      	movs	r2, #8
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	4849      	ldr	r0, [pc, #292]	; (800a518 <board_init_common_timer_init+0x254>)
 800a3f4:	f7fd ff4a 	bl	800828c <HAL_TIM_PWM_ConfigChannel>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d001      	beq.n	800a402 <board_init_common_timer_init+0x13e>
 800a3fe:	f000 f8ac 	bl	800a55a <Error_Handler>
    sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a402:	2300      	movs	r3, #0
 800a404:	60bb      	str	r3, [r7, #8]
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a406:	2300      	movs	r3, #0
 800a408:	60fb      	str	r3, [r7, #12]
    sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a40a:	2300      	movs	r3, #0
 800a40c:	613b      	str	r3, [r7, #16]
    sBreakDeadTimeConfig.DeadTime = 0;
 800a40e:	2300      	movs	r3, #0
 800a410:	617b      	str	r3, [r7, #20]
    sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a412:	2300      	movs	r3, #0
 800a414:	61bb      	str	r3, [r7, #24]
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a416:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a41a:	61fb      	str	r3, [r7, #28]
    sBreakDeadTimeConfig.BreakFilter = 0;
 800a41c:	2300      	movs	r3, #0
 800a41e:	623b      	str	r3, [r7, #32]
    sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800a420:	2300      	movs	r3, #0
 800a422:	627b      	str	r3, [r7, #36]	; 0x24
    sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800a424:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a428:	62bb      	str	r3, [r7, #40]	; 0x28
    sBreakDeadTimeConfig.Break2Filter = 0;
 800a42a:	2300      	movs	r3, #0
 800a42c:	62fb      	str	r3, [r7, #44]	; 0x2c
    sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a42e:	2300      	movs	r3, #0
 800a430:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_TIMEx_ConfigBreakDeadTime(&g_tim1_handle, &sBreakDeadTimeConfig) != HAL_OK) Error_Handler();
 800a432:	f107 0308 	add.w	r3, r7, #8
 800a436:	4619      	mov	r1, r3
 800a438:	4837      	ldr	r0, [pc, #220]	; (800a518 <board_init_common_timer_init+0x254>)
 800a43a:	f7fe fdf1 	bl	8009020 <HAL_TIMEx_ConfigBreakDeadTime>
 800a43e:	4603      	mov	r3, r0
 800a440:	2b00      	cmp	r3, #0
 800a442:	d001      	beq.n	800a448 <board_init_common_timer_init+0x184>
 800a444:	f000 f889 	bl	800a55a <Error_Handler>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_1);
 800a448:	2100      	movs	r1, #0
 800a44a:	4833      	ldr	r0, [pc, #204]	; (800a518 <board_init_common_timer_init+0x254>)
 800a44c:	f7fd fe36 	bl	80080bc <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_2);
 800a450:	2104      	movs	r1, #4
 800a452:	4831      	ldr	r0, [pc, #196]	; (800a518 <board_init_common_timer_init+0x254>)
 800a454:	f7fd fe32 	bl	80080bc <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_3);
 800a458:	2108      	movs	r1, #8
 800a45a:	482f      	ldr	r0, [pc, #188]	; (800a518 <board_init_common_timer_init+0x254>)
 800a45c:	f7fd fe2e 	bl	80080bc <HAL_TIM_PWM_Stop_DMA>
    GPIO_InitStruct.Pin = gpio_config_pin_lookup(GPIO_PIN_TIM1_CH1) | gpio_config_pin_lookup(GPIO_PIN_TIM1_CH2) | gpio_config_pin_lookup(GPIO_PIN_TIM1_CH3);
 800a460:	2008      	movs	r0, #8
 800a462:	f000 f8d7 	bl	800a614 <gpio_config_pin_lookup>
 800a466:	4603      	mov	r3, r0
 800a468:	461c      	mov	r4, r3
 800a46a:	2009      	movs	r0, #9
 800a46c:	f000 f8d2 	bl	800a614 <gpio_config_pin_lookup>
 800a470:	4603      	mov	r3, r0
 800a472:	4323      	orrs	r3, r4
 800a474:	b29c      	uxth	r4, r3
 800a476:	200a      	movs	r0, #10
 800a478:	f000 f8cc 	bl	800a614 <gpio_config_pin_lookup>
 800a47c:	4603      	mov	r3, r0
 800a47e:	4323      	orrs	r3, r4
 800a480:	b29b      	uxth	r3, r3
 800a482:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a484:	2302      	movs	r3, #2
 800a486:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a488:	2300      	movs	r3, #0
 800a48a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a48c:	2300      	movs	r3, #0
 800a48e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800a490:	2301      	movs	r3, #1
 800a492:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(gpio_config_port_lookup(GPIO_PIN_TIM1_CH1), &GPIO_InitStruct); // all timer pins are on the same port!
 800a494:	2008      	movs	r0, #8
 800a496:	f000 f8ab 	bl	800a5f0 <gpio_config_port_lookup>
 800a49a:	4602      	mov	r2, r0
 800a49c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800a4a0:	4619      	mov	r1, r3
 800a4a2:	4610      	mov	r0, r2
 800a4a4:	f7fb fdbc 	bl	8006020 <HAL_GPIO_Init>
    __HAL_RCC_DMA1_CLK_ENABLE(); // TODO determine a better place for this clock enable call.
 800a4a8:	4b1d      	ldr	r3, [pc, #116]	; (800a520 <board_init_common_timer_init+0x25c>)
 800a4aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4ac:	4a1c      	ldr	r2, [pc, #112]	; (800a520 <board_init_common_timer_init+0x25c>)
 800a4ae:	f043 0301 	orr.w	r3, r3, #1
 800a4b2:	6493      	str	r3, [r2, #72]	; 0x48
 800a4b4:	4b1a      	ldr	r3, [pc, #104]	; (800a520 <board_init_common_timer_init+0x25c>)
 800a4b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4b8:	f003 0301 	and.w	r3, r3, #1
 800a4bc:	607b      	str	r3, [r7, #4]
 800a4be:	687b      	ldr	r3, [r7, #4]

    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	2100      	movs	r1, #0
 800a4c4:	200c      	movs	r0, #12
 800a4c6:	f7fb fa9a 	bl	80059fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800a4ca:	200c      	movs	r0, #12
 800a4cc:	f7fb fab3 	bl	8005a36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	2100      	movs	r1, #0
 800a4d4:	200d      	movs	r0, #13
 800a4d6:	f7fb fa92 	bl	80059fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800a4da:	200d      	movs	r0, #13
 800a4dc:	f7fb faab 	bl	8005a36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	2100      	movs	r1, #0
 800a4e4:	200f      	movs	r0, #15
 800a4e6:	f7fb fa8a 	bl	80059fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800a4ea:	200f      	movs	r0, #15
 800a4ec:	f7fb faa3 	bl	8005a36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	2100      	movs	r1, #0
 800a4f4:	2010      	movs	r0, #16
 800a4f6:	f7fb fa82 	bl	80059fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800a4fa:	2010      	movs	r0, #16
 800a4fc:	f7fb fa9b 	bl	8005a36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800a500:	2200      	movs	r2, #0
 800a502:	2100      	movs	r1, #0
 800a504:	2011      	movs	r0, #17
 800a506:	f7fb fa7a 	bl	80059fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800a50a:	2011      	movs	r0, #17
 800a50c:	f7fb fa93 	bl	8005a36 <HAL_NVIC_EnableIRQ>
}
 800a510:	bf00      	nop
 800a512:	3784      	adds	r7, #132	; 0x84
 800a514:	46bd      	mov	sp, r7
 800a516:	bd90      	pop	{r4, r7, pc}
 800a518:	200023e0 	.word	0x200023e0
 800a51c:	40012c00 	.word	0x40012c00
 800a520:	40021000 	.word	0x40021000

0800a524 <board_init_common_board_init>:
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_3);
}


void board_init_common_board_init(void)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	af00      	add	r7, sp, #0
    srand(time(0)); // TODO determine a better seed.  Analog input noise would be superb!
 800a528:	2000      	movs	r0, #0
 800a52a:	f001 f9bf 	bl	800b8ac <time>
 800a52e:	4602      	mov	r2, r0
 800a530:	460b      	mov	r3, r1
 800a532:	4613      	mov	r3, r2
 800a534:	4618      	mov	r0, r3
 800a536:	f001 f883 	bl	800b640 <srand>

    HAL_Init();
 800a53a:	f7fb f8bf 	bl	80056bc <HAL_Init>
    SystemClock_Config(); // 32.768 kHz LSE, 48 MHz HSE enabled by default.
 800a53e:	f7ff fe59 	bl	800a1f4 <SystemClock_Config>
    board_init_common_rtc_init();
 800a542:	f7ff fe2f 	bl	800a1a4 <board_init_common_rtc_init>

    gpio_config_hal_setup();
 800a546:	f000 f877 	bl	800a638 <gpio_config_hal_setup>
    board_init_peripheral_setup(); // TODO determine whether to continue supporting boards that don't have peripheral access or not...
 800a54a:	f000 ff47 	bl	800b3dc <board_init_peripheral_setup>

    board_init_common_timer_init(); // TODO determine if timer should be part of a separate config file??
 800a54e:	f7ff feb9 	bl	800a2c4 <board_init_common_timer_init>
    ws2812b_init();
 800a552:	f7f7 fc89 	bl	8001e68 <ws2812b_init>
}
 800a556:	bf00      	nop
 800a558:	bd80      	pop	{r7, pc}

0800a55a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a55a:	b480      	push	{r7}
 800a55c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800a55e:	b672      	cpsid	i
}
 800a560:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a562:	e7fe      	b.n	800a562 <Error_Handler+0x8>

0800a564 <gpio_access_hal_input_is_low>:
    HAL_GPIO_Init(g_gpio_config[pin].port, &GPIO_InitStruct);
}


bool gpio_access_hal_input_is_low(gpio_pin_e pin)
{
 800a564:	b590      	push	{r4, r7, lr}
 800a566:	b083      	sub	sp, #12
 800a568:	af00      	add	r7, sp, #0
 800a56a:	4603      	mov	r3, r0
 800a56c:	71fb      	strb	r3, [r7, #7]
	return ((GPIO_PIN_RESET == HAL_GPIO_ReadPin(g_gpio_config[pin].port, gpio_config_pin_lookup(g_gpio_config[pin].pin))) ? true : false);
 800a56e:	79fb      	ldrb	r3, [r7, #7]
 800a570:	4a0e      	ldr	r2, [pc, #56]	; (800a5ac <gpio_access_hal_input_is_low+0x48>)
 800a572:	011b      	lsls	r3, r3, #4
 800a574:	4413      	add	r3, r2
 800a576:	3304      	adds	r3, #4
 800a578:	681c      	ldr	r4, [r3, #0]
 800a57a:	79fb      	ldrb	r3, [r7, #7]
 800a57c:	4a0b      	ldr	r2, [pc, #44]	; (800a5ac <gpio_access_hal_input_is_low+0x48>)
 800a57e:	011b      	lsls	r3, r3, #4
 800a580:	4413      	add	r3, r2
 800a582:	881b      	ldrh	r3, [r3, #0]
 800a584:	b2db      	uxtb	r3, r3
 800a586:	4618      	mov	r0, r3
 800a588:	f000 f844 	bl	800a614 <gpio_config_pin_lookup>
 800a58c:	4603      	mov	r3, r0
 800a58e:	4619      	mov	r1, r3
 800a590:	4620      	mov	r0, r4
 800a592:	f7fb febf 	bl	8006314 <HAL_GPIO_ReadPin>
 800a596:	4603      	mov	r3, r0
 800a598:	2b00      	cmp	r3, #0
 800a59a:	bf0c      	ite	eq
 800a59c:	2301      	moveq	r3, #1
 800a59e:	2300      	movne	r3, #0
 800a5a0:	b2db      	uxtb	r3, r3
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	370c      	adds	r7, #12
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd90      	pop	{r4, r7, pc}
 800a5aa:	bf00      	nop
 800a5ac:	0800c7b8 	.word	0x0800c7b8

0800a5b0 <gpio_config_irqn_lookup>:
	[GPIO_PIOH_PIN_3] = GPIO_PIN_3
};


IRQn_Type gpio_config_irqn_lookup(gpio_pin_e pin)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b083      	sub	sp, #12
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	71fb      	strb	r3, [r7, #7]
	if (GPIO_CONFIG_INTERRUPT_MODE_ENABLE == g_gpio_config[pin].interrupt_mode)
 800a5ba:	79fb      	ldrb	r3, [r7, #7]
 800a5bc:	4a0b      	ldr	r2, [pc, #44]	; (800a5ec <gpio_config_irqn_lookup+0x3c>)
 800a5be:	011b      	lsls	r3, r3, #4
 800a5c0:	4413      	add	r3, r2
 800a5c2:	330a      	adds	r3, #10
 800a5c4:	781b      	ldrb	r3, [r3, #0]
 800a5c6:	2b01      	cmp	r3, #1
 800a5c8:	d107      	bne.n	800a5da <gpio_config_irqn_lookup+0x2a>
	{
		return g_gpio_config[pin].irqn;
 800a5ca:	79fb      	ldrb	r3, [r7, #7]
 800a5cc:	4a07      	ldr	r2, [pc, #28]	; (800a5ec <gpio_config_irqn_lookup+0x3c>)
 800a5ce:	011b      	lsls	r3, r3, #4
 800a5d0:	4413      	add	r3, r2
 800a5d2:	330c      	adds	r3, #12
 800a5d4:	f993 3000 	ldrsb.w	r3, [r3]
 800a5d8:	e001      	b.n	800a5de <gpio_config_irqn_lookup+0x2e>
	}
	else
	{
		return HardFault_IRQn; // lmfao
 800a5da:	f06f 030c 	mvn.w	r3, #12
	}
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	370c      	adds	r7, #12
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e8:	4770      	bx	lr
 800a5ea:	bf00      	nop
 800a5ec:	0800c7b8 	.word	0x0800c7b8

0800a5f0 <gpio_config_port_lookup>:


port_t gpio_config_port_lookup(gpio_pin_e pin)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b083      	sub	sp, #12
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	71fb      	strb	r3, [r7, #7]
	return g_gpio_port_lookup_table[pin];
 800a5fa:	79fb      	ldrb	r3, [r7, #7]
 800a5fc:	4a04      	ldr	r2, [pc, #16]	; (800a610 <gpio_config_port_lookup+0x20>)
 800a5fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800a602:	4618      	mov	r0, r3
 800a604:	370c      	adds	r7, #12
 800a606:	46bd      	mov	sp, r7
 800a608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60c:	4770      	bx	lr
 800a60e:	bf00      	nop
 800a610:	0800c638 	.word	0x0800c638

0800a614 <gpio_config_pin_lookup>:


uint16_t gpio_config_pin_lookup(gpio_pin_e pin)
{
 800a614:	b480      	push	{r7}
 800a616:	b083      	sub	sp, #12
 800a618:	af00      	add	r7, sp, #0
 800a61a:	4603      	mov	r3, r0
 800a61c:	71fb      	strb	r3, [r7, #7]
	return g_gpio_lookup_table[pin];
 800a61e:	79fb      	ldrb	r3, [r7, #7]
 800a620:	4a04      	ldr	r2, [pc, #16]	; (800a634 <gpio_config_pin_lookup+0x20>)
 800a622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 800a626:	4618      	mov	r0, r3
 800a628:	370c      	adds	r7, #12
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr
 800a632:	bf00      	nop
 800a634:	0800c708 	.word	0x0800c708

0800a638 <gpio_config_hal_setup>:


void gpio_config_hal_setup(void)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b08a      	sub	sp, #40	; 0x28
 800a63c:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a63e:	4b95      	ldr	r3, [pc, #596]	; (800a894 <gpio_config_hal_setup+0x25c>)
 800a640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a642:	4a94      	ldr	r2, [pc, #592]	; (800a894 <gpio_config_hal_setup+0x25c>)
 800a644:	f043 0301 	orr.w	r3, r3, #1
 800a648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a64a:	4b92      	ldr	r3, [pc, #584]	; (800a894 <gpio_config_hal_setup+0x25c>)
 800a64c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a64e:	f003 0301 	and.w	r3, r3, #1
 800a652:	60fb      	str	r3, [r7, #12]
 800a654:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a656:	4b8f      	ldr	r3, [pc, #572]	; (800a894 <gpio_config_hal_setup+0x25c>)
 800a658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a65a:	4a8e      	ldr	r2, [pc, #568]	; (800a894 <gpio_config_hal_setup+0x25c>)
 800a65c:	f043 0302 	orr.w	r3, r3, #2
 800a660:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a662:	4b8c      	ldr	r3, [pc, #560]	; (800a894 <gpio_config_hal_setup+0x25c>)
 800a664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a666:	f003 0302 	and.w	r3, r3, #2
 800a66a:	60bb      	str	r3, [r7, #8]
 800a66c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a66e:	4b89      	ldr	r3, [pc, #548]	; (800a894 <gpio_config_hal_setup+0x25c>)
 800a670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a672:	4a88      	ldr	r2, [pc, #544]	; (800a894 <gpio_config_hal_setup+0x25c>)
 800a674:	f043 0304 	orr.w	r3, r3, #4
 800a678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a67a:	4b86      	ldr	r3, [pc, #536]	; (800a894 <gpio_config_hal_setup+0x25c>)
 800a67c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a67e:	f003 0304 	and.w	r3, r3, #4
 800a682:	607b      	str	r3, [r7, #4]
 800a684:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800a686:	4b83      	ldr	r3, [pc, #524]	; (800a894 <gpio_config_hal_setup+0x25c>)
 800a688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a68a:	4a82      	ldr	r2, [pc, #520]	; (800a894 <gpio_config_hal_setup+0x25c>)
 800a68c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a690:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a692:	4b80      	ldr	r3, [pc, #512]	; (800a894 <gpio_config_hal_setup+0x25c>)
 800a694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a69a:	603b      	str	r3, [r7, #0]
 800a69c:	683b      	ldr	r3, [r7, #0]

	bool enable_interrupt = false;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	bool gpio_setup = false;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    //RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
    GPIO_InitTypeDef  GPIO_InitStruct;
    for (gpio_pin_e pin = GPIO_PIN_FIRST; pin < NUM_GPIO_PINS; pin++)
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800a6b0:	e0e6      	b.n	800a880 <gpio_config_hal_setup+0x248>
    {
    	gpio_setup = true;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    	GPIO_InitStruct.Pin = g_gpio_lookup_table[pin];
 800a6b8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a6bc:	4a76      	ldr	r2, [pc, #472]	; (800a898 <gpio_config_hal_setup+0x260>)
 800a6be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6c2:	613b      	str	r3, [r7, #16]
    	GPIO_InitStruct.Pull = GPIO_NOPULL; // initially set no pullup here..
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	61bb      	str	r3, [r7, #24]
    	if (GPIO_CONFIG_INTERRUPT_MODE_ENABLE == g_gpio_config[pin].interrupt_mode)
 800a6c8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a6cc:	4a73      	ldr	r2, [pc, #460]	; (800a89c <gpio_config_hal_setup+0x264>)
 800a6ce:	011b      	lsls	r3, r3, #4
 800a6d0:	4413      	add	r3, r2
 800a6d2:	330a      	adds	r3, #10
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d103      	bne.n	800a6e2 <gpio_config_hal_setup+0xaa>
    	{
    		enable_interrupt = true;
 800a6da:	2301      	movs	r3, #1
 800a6dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a6e0:	e002      	b.n	800a6e8 <gpio_config_hal_setup+0xb0>
    	}
    	else
    	{
    		enable_interrupt = false;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    	}
		switch (g_gpio_config[pin].mode)
 800a6e8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a6ec:	4a6b      	ldr	r2, [pc, #428]	; (800a89c <gpio_config_hal_setup+0x264>)
 800a6ee:	011b      	lsls	r3, r3, #4
 800a6f0:	4413      	add	r3, r2
 800a6f2:	3308      	adds	r3, #8
 800a6f4:	781b      	ldrb	r3, [r3, #0]
 800a6f6:	2b06      	cmp	r3, #6
 800a6f8:	d829      	bhi.n	800a74e <gpio_config_hal_setup+0x116>
 800a6fa:	a201      	add	r2, pc, #4	; (adr r2, 800a700 <gpio_config_hal_setup+0xc8>)
 800a6fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a700:	0800a71d 	.word	0x0800a71d
 800a704:	0800a725 	.word	0x0800a725
 800a708:	0800a72f 	.word	0x0800a72f
 800a70c:	0800a739 	.word	0x0800a739
 800a710:	0800a743 	.word	0x0800a743
 800a714:	0800a749 	.word	0x0800a749
 800a718:	0800a71d 	.word	0x0800a71d
    	{
			case GPIO_CONFIG_MODE_ALTERNATE_FUNCTION: // fall through intentionally!!
    		case GPIO_CONFIG_MODE_NO_SETTING: // do nothing!
    			gpio_setup = false;
 800a71c:	2300      	movs	r3, #0
 800a71e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    		break;
 800a722:	e015      	b.n	800a750 <gpio_config_hal_setup+0x118>
    		case GPIO_CONFIG_MODE_INPUT_FLOAT:
    			GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 800a724:	2300      	movs	r3, #0
 800a726:	617b      	str	r3, [r7, #20]
    		    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800a728:	2300      	movs	r3, #0
 800a72a:	61bb      	str	r3, [r7, #24]
    		break;
 800a72c:	e010      	b.n	800a750 <gpio_config_hal_setup+0x118>
    		case GPIO_CONFIG_MODE_INPUT_PULLDOWN:
				GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 800a72e:	2300      	movs	r3, #0
 800a730:	617b      	str	r3, [r7, #20]
				GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
 800a732:	2302      	movs	r3, #2
 800a734:	61bb      	str	r3, [r7, #24]
			break;
 800a736:	e00b      	b.n	800a750 <gpio_config_hal_setup+0x118>
    		case GPIO_CONFIG_MODE_INPUT_PULLUP:
				GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 800a738:	2300      	movs	r3, #0
 800a73a:	617b      	str	r3, [r7, #20]
				GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800a73c:	2301      	movs	r3, #1
 800a73e:	61bb      	str	r3, [r7, #24]
			break;
 800a740:	e006      	b.n	800a750 <gpio_config_hal_setup+0x118>
    		case GPIO_CONFIG_MODE_OUTPUT_PUSHPULL:
    			GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_PP;
 800a742:	2301      	movs	r3, #1
 800a744:	617b      	str	r3, [r7, #20]
    		break;
 800a746:	e003      	b.n	800a750 <gpio_config_hal_setup+0x118>
			case GPIO_CONFIG_MODE_OUTPUT_OPEN_DRAIN:
				GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_OD;
 800a748:	2311      	movs	r3, #17
 800a74a:	617b      	str	r3, [r7, #20]
			break;
 800a74c:	e000      	b.n	800a750 <gpio_config_hal_setup+0x118>
				// these alternate function settings are expected to be made in the peripheral setup files
			default:
			break;
 800a74e:	bf00      	nop
    	}
		if (enable_interrupt)
 800a750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a754:	2b00      	cmp	r3, #0
 800a756:	d048      	beq.n	800a7ea <gpio_config_hal_setup+0x1b2>
		{
			switch (g_gpio_config[pin].interrupt_edge)
 800a758:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a75c:	4a4f      	ldr	r2, [pc, #316]	; (800a89c <gpio_config_hal_setup+0x264>)
 800a75e:	011b      	lsls	r3, r3, #4
 800a760:	4413      	add	r3, r2
 800a762:	330b      	adds	r3, #11
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	2b02      	cmp	r3, #2
 800a768:	d00e      	beq.n	800a788 <gpio_config_hal_setup+0x150>
 800a76a:	2b02      	cmp	r3, #2
 800a76c:	dc10      	bgt.n	800a790 <gpio_config_hal_setup+0x158>
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d002      	beq.n	800a778 <gpio_config_hal_setup+0x140>
 800a772:	2b01      	cmp	r3, #1
 800a774:	d004      	beq.n	800a780 <gpio_config_hal_setup+0x148>
				break;
				case GPIO_CONFIG_INTERRUPT_EDGE_RISING_FALLING:
					GPIO_InitStruct.Mode 		= GPIO_MODE_IT_RISING_FALLING;
				break;
				default:
				break;
 800a776:	e00b      	b.n	800a790 <gpio_config_hal_setup+0x158>
					GPIO_InitStruct.Mode      	= GPIO_MODE_IT_FALLING;
 800a778:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800a77c:	617b      	str	r3, [r7, #20]
				break;
 800a77e:	e008      	b.n	800a792 <gpio_config_hal_setup+0x15a>
					GPIO_InitStruct.Mode      	= GPIO_MODE_IT_RISING;
 800a780:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800a784:	617b      	str	r3, [r7, #20]
				break;
 800a786:	e004      	b.n	800a792 <gpio_config_hal_setup+0x15a>
					GPIO_InitStruct.Mode 		= GPIO_MODE_IT_RISING_FALLING;
 800a788:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800a78c:	617b      	str	r3, [r7, #20]
				break;
 800a78e:	e000      	b.n	800a792 <gpio_config_hal_setup+0x15a>
				break;
 800a790:	bf00      	nop
			}
			__HAL_GPIO_EXTI_CLEAR_IT(g_gpio_config[pin].irqn);
 800a792:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a796:	4a41      	ldr	r2, [pc, #260]	; (800a89c <gpio_config_hal_setup+0x264>)
 800a798:	011b      	lsls	r3, r3, #4
 800a79a:	4413      	add	r3, r2
 800a79c:	330c      	adds	r3, #12
 800a79e:	f993 2000 	ldrsb.w	r2, [r3]
 800a7a2:	4b3f      	ldr	r3, [pc, #252]	; (800a8a0 <gpio_config_hal_setup+0x268>)
 800a7a4:	615a      	str	r2, [r3, #20]
		    HAL_NVIC_SetPriority(g_gpio_config[pin].irqn, 24, 0);
 800a7a6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a7aa:	4a3c      	ldr	r2, [pc, #240]	; (800a89c <gpio_config_hal_setup+0x264>)
 800a7ac:	011b      	lsls	r3, r3, #4
 800a7ae:	4413      	add	r3, r2
 800a7b0:	330c      	adds	r3, #12
 800a7b2:	f993 3000 	ldrsb.w	r3, [r3]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	2118      	movs	r1, #24
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f7fb f91f 	bl	80059fe <HAL_NVIC_SetPriority>
		    HAL_NVIC_EnableIRQ(g_gpio_config[pin].irqn);
 800a7c0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a7c4:	4a35      	ldr	r2, [pc, #212]	; (800a89c <gpio_config_hal_setup+0x264>)
 800a7c6:	011b      	lsls	r3, r3, #4
 800a7c8:	4413      	add	r3, r2
 800a7ca:	330c      	adds	r3, #12
 800a7cc:	f993 3000 	ldrsb.w	r3, [r3]
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f7fb f930 	bl	8005a36 <HAL_NVIC_EnableIRQ>
		    __HAL_GPIO_EXTI_CLEAR_IT(g_gpio_config[pin].irqn);
 800a7d6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a7da:	4a30      	ldr	r2, [pc, #192]	; (800a89c <gpio_config_hal_setup+0x264>)
 800a7dc:	011b      	lsls	r3, r3, #4
 800a7de:	4413      	add	r3, r2
 800a7e0:	330c      	adds	r3, #12
 800a7e2:	f993 2000 	ldrsb.w	r2, [r3]
 800a7e6:	4b2e      	ldr	r3, [pc, #184]	; (800a8a0 <gpio_config_hal_setup+0x268>)
 800a7e8:	615a      	str	r2, [r3, #20]
		}
		if (gpio_setup)
 800a7ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d041      	beq.n	800a876 <gpio_config_hal_setup+0x23e>
		{
		    HAL_GPIO_Init(g_gpio_config[pin].port, &GPIO_InitStruct);
 800a7f2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a7f6:	4a29      	ldr	r2, [pc, #164]	; (800a89c <gpio_config_hal_setup+0x264>)
 800a7f8:	011b      	lsls	r3, r3, #4
 800a7fa:	4413      	add	r3, r2
 800a7fc:	3304      	adds	r3, #4
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f107 0210 	add.w	r2, r7, #16
 800a804:	4611      	mov	r1, r2
 800a806:	4618      	mov	r0, r3
 800a808:	f7fb fc0a 	bl	8006020 <HAL_GPIO_Init>
		    if (GPIO_CONFIG_MODE_OUTPUT_PUSHPULL == g_gpio_config[pin].mode)
 800a80c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a810:	4a22      	ldr	r2, [pc, #136]	; (800a89c <gpio_config_hal_setup+0x264>)
 800a812:	011b      	lsls	r3, r3, #4
 800a814:	4413      	add	r3, r2
 800a816:	3308      	adds	r3, #8
 800a818:	781b      	ldrb	r3, [r3, #0]
 800a81a:	2b04      	cmp	r3, #4
 800a81c:	d12b      	bne.n	800a876 <gpio_config_hal_setup+0x23e>
		    {
		    	if (GPIO_CONFIG_OUTPUT_LVL_RESET == g_gpio_config[pin].lvl)
 800a81e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a822:	4a1e      	ldr	r2, [pc, #120]	; (800a89c <gpio_config_hal_setup+0x264>)
 800a824:	011b      	lsls	r3, r3, #4
 800a826:	4413      	add	r3, r2
 800a828:	3309      	adds	r3, #9
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d111      	bne.n	800a854 <gpio_config_hal_setup+0x21c>
				{
					HAL_GPIO_WritePin(g_gpio_config[pin].port, g_gpio_config[pin].pin, GPIO_PIN_RESET);
 800a830:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a834:	4a19      	ldr	r2, [pc, #100]	; (800a89c <gpio_config_hal_setup+0x264>)
 800a836:	011b      	lsls	r3, r3, #4
 800a838:	4413      	add	r3, r2
 800a83a:	3304      	adds	r3, #4
 800a83c:	6818      	ldr	r0, [r3, #0]
 800a83e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a842:	4a16      	ldr	r2, [pc, #88]	; (800a89c <gpio_config_hal_setup+0x264>)
 800a844:	011b      	lsls	r3, r3, #4
 800a846:	4413      	add	r3, r2
 800a848:	881b      	ldrh	r3, [r3, #0]
 800a84a:	2200      	movs	r2, #0
 800a84c:	4619      	mov	r1, r3
 800a84e:	f7fb fd79 	bl	8006344 <HAL_GPIO_WritePin>
 800a852:	e010      	b.n	800a876 <gpio_config_hal_setup+0x23e>
				}
				else
				{
					HAL_GPIO_WritePin(g_gpio_config[pin].port, g_gpio_config[pin].pin, GPIO_PIN_SET);
 800a854:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a858:	4a10      	ldr	r2, [pc, #64]	; (800a89c <gpio_config_hal_setup+0x264>)
 800a85a:	011b      	lsls	r3, r3, #4
 800a85c:	4413      	add	r3, r2
 800a85e:	3304      	adds	r3, #4
 800a860:	6818      	ldr	r0, [r3, #0]
 800a862:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a866:	4a0d      	ldr	r2, [pc, #52]	; (800a89c <gpio_config_hal_setup+0x264>)
 800a868:	011b      	lsls	r3, r3, #4
 800a86a:	4413      	add	r3, r2
 800a86c:	881b      	ldrh	r3, [r3, #0]
 800a86e:	2201      	movs	r2, #1
 800a870:	4619      	mov	r1, r3
 800a872:	f7fb fd67 	bl	8006344 <HAL_GPIO_WritePin>
    for (gpio_pin_e pin = GPIO_PIN_FIRST; pin < NUM_GPIO_PINS; pin++)
 800a876:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a87a:	3301      	adds	r3, #1
 800a87c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800a880:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a884:	2b33      	cmp	r3, #51	; 0x33
 800a886:	f67f af14 	bls.w	800a6b2 <gpio_config_hal_setup+0x7a>
				}
		    }
		}
    }
}
 800a88a:	bf00      	nop
 800a88c:	bf00      	nop
 800a88e:	3728      	adds	r7, #40	; 0x28
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}
 800a894:	40021000 	.word	0x40021000
 800a898:	0800c708 	.word	0x0800c708
 800a89c:	0800c7b8 	.word	0x0800c7b8
 800a8a0:	40010400 	.word	0x40010400

0800a8a4 <spi_config_hal_setup>:
}



void spi_config_hal_setup(void)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b088      	sub	sp, #32
 800a8a8:	af00      	add	r7, sp, #0
    //RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
    GPIO_InitTypeDef  GPIO_InitStruct;

    for (spi_config_bus_e bus = SPI_CONFIG_BUS_FIRST; bus < NUM_SPI_CONFIG_BUSES; bus++)
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	77fb      	strb	r3, [r7, #31]
 800a8ae:	e0a3      	b.n	800a9f8 <spi_config_hal_setup+0x154>
    {
    	if (g_spi_num_chips_per_bus[bus])
 800a8b0:	7ffb      	ldrb	r3, [r7, #31]
 800a8b2:	4a56      	ldr	r2, [pc, #344]	; (800aa0c <spi_config_hal_setup+0x168>)
 800a8b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	f000 809a 	beq.w	800a9f2 <spi_config_hal_setup+0x14e>
    	{
    	    GPIO_InitStruct.Pin       = g_spi_config[bus].pin.mosi;
 800a8be:	7ffa      	ldrb	r2, [r7, #31]
 800a8c0:	4953      	ldr	r1, [pc, #332]	; (800aa10 <spi_config_hal_setup+0x16c>)
 800a8c2:	4613      	mov	r3, r2
 800a8c4:	009b      	lsls	r3, r3, #2
 800a8c6:	4413      	add	r3, r2
 800a8c8:	00db      	lsls	r3, r3, #3
 800a8ca:	440b      	add	r3, r1
 800a8cc:	881b      	ldrh	r3, [r3, #0]
 800a8ce:	60bb      	str	r3, [r7, #8]
    	    GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	60fb      	str	r3, [r7, #12]
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	613b      	str	r3, [r7, #16]
    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	617b      	str	r3, [r7, #20]
//    	    GPIO_InitStruct.Alternate = g_spi_config[bus].pin.mosi_alt_func;
    	    HAL_GPIO_Init(g_spi_config[bus].pin.mosi_port, &GPIO_InitStruct);
 800a8dc:	7ffa      	ldrb	r2, [r7, #31]
 800a8de:	494c      	ldr	r1, [pc, #304]	; (800aa10 <spi_config_hal_setup+0x16c>)
 800a8e0:	4613      	mov	r3, r2
 800a8e2:	009b      	lsls	r3, r3, #2
 800a8e4:	4413      	add	r3, r2
 800a8e6:	00db      	lsls	r3, r3, #3
 800a8e8:	440b      	add	r3, r1
 800a8ea:	3304      	adds	r3, #4
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f107 0208 	add.w	r2, r7, #8
 800a8f2:	4611      	mov	r1, r2
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f7fb fb93 	bl	8006020 <HAL_GPIO_Init>

    	    GPIO_InitStruct.Pin       = g_spi_config[bus].pin.miso;
 800a8fa:	7ffa      	ldrb	r2, [r7, #31]
 800a8fc:	4944      	ldr	r1, [pc, #272]	; (800aa10 <spi_config_hal_setup+0x16c>)
 800a8fe:	4613      	mov	r3, r2
 800a900:	009b      	lsls	r3, r3, #2
 800a902:	4413      	add	r3, r2
 800a904:	00db      	lsls	r3, r3, #3
 800a906:	440b      	add	r3, r1
 800a908:	330a      	adds	r3, #10
 800a90a:	881b      	ldrh	r3, [r3, #0]
 800a90c:	60bb      	str	r3, [r7, #8]
    	    GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 800a90e:	2300      	movs	r3, #0
 800a910:	60fb      	str	r3, [r7, #12]
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800a912:	2300      	movs	r3, #0
 800a914:	613b      	str	r3, [r7, #16]
    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 800a916:	2300      	movs	r3, #0
 800a918:	617b      	str	r3, [r7, #20]
//    	    GPIO_InitStruct.Alternate = g_spi_config[bus].pin.miso_alt_func;
    	    HAL_GPIO_Init(g_spi_config[bus].pin.miso_port, &GPIO_InitStruct);
 800a91a:	7ffa      	ldrb	r2, [r7, #31]
 800a91c:	493c      	ldr	r1, [pc, #240]	; (800aa10 <spi_config_hal_setup+0x16c>)
 800a91e:	4613      	mov	r3, r2
 800a920:	009b      	lsls	r3, r3, #2
 800a922:	4413      	add	r3, r2
 800a924:	00db      	lsls	r3, r3, #3
 800a926:	440b      	add	r3, r1
 800a928:	330c      	adds	r3, #12
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f107 0208 	add.w	r2, r7, #8
 800a930:	4611      	mov	r1, r2
 800a932:	4618      	mov	r0, r3
 800a934:	f7fb fb74 	bl	8006020 <HAL_GPIO_Init>

    	    GPIO_InitStruct.Pin       = g_spi_config[bus].pin.sck;
 800a938:	7ffa      	ldrb	r2, [r7, #31]
 800a93a:	4935      	ldr	r1, [pc, #212]	; (800aa10 <spi_config_hal_setup+0x16c>)
 800a93c:	4613      	mov	r3, r2
 800a93e:	009b      	lsls	r3, r3, #2
 800a940:	4413      	add	r3, r2
 800a942:	00db      	lsls	r3, r3, #3
 800a944:	440b      	add	r3, r1
 800a946:	3312      	adds	r3, #18
 800a948:	881b      	ldrh	r3, [r3, #0]
 800a94a:	60bb      	str	r3, [r7, #8]
    	    GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 800a94c:	2300      	movs	r3, #0
 800a94e:	60fb      	str	r3, [r7, #12]
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800a950:	2300      	movs	r3, #0
 800a952:	613b      	str	r3, [r7, #16]
    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 800a954:	2300      	movs	r3, #0
 800a956:	617b      	str	r3, [r7, #20]
//    	    GPIO_InitStruct.Alternate = g_spi_config[bus].pin.sck_alt_func;
    	    HAL_GPIO_Init(g_spi_config[bus].pin.sck_port, &GPIO_InitStruct);
 800a958:	7ffa      	ldrb	r2, [r7, #31]
 800a95a:	492d      	ldr	r1, [pc, #180]	; (800aa10 <spi_config_hal_setup+0x16c>)
 800a95c:	4613      	mov	r3, r2
 800a95e:	009b      	lsls	r3, r3, #2
 800a960:	4413      	add	r3, r2
 800a962:	00db      	lsls	r3, r3, #3
 800a964:	440b      	add	r3, r1
 800a966:	3314      	adds	r3, #20
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f107 0208 	add.w	r2, r7, #8
 800a96e:	4611      	mov	r1, r2
 800a970:	4618      	mov	r0, r3
 800a972:	f7fb fb55 	bl	8006020 <HAL_GPIO_Init>

    	    GPIO_InitStruct.Pin       = g_spi_config[bus].pin.csn;
 800a976:	7ffa      	ldrb	r2, [r7, #31]
 800a978:	4925      	ldr	r1, [pc, #148]	; (800aa10 <spi_config_hal_setup+0x16c>)
 800a97a:	4613      	mov	r3, r2
 800a97c:	009b      	lsls	r3, r3, #2
 800a97e:	4413      	add	r3, r2
 800a980:	00db      	lsls	r3, r3, #3
 800a982:	440b      	add	r3, r1
 800a984:	331a      	adds	r3, #26
 800a986:	881b      	ldrh	r3, [r3, #0]
 800a988:	60bb      	str	r3, [r7, #8]
    	    GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 800a98a:	2300      	movs	r3, #0
 800a98c:	60fb      	str	r3, [r7, #12]
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800a98e:	2300      	movs	r3, #0
 800a990:	613b      	str	r3, [r7, #16]
//    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
    	    HAL_GPIO_Init(g_spi_config[bus].pin.csn_port, &GPIO_InitStruct);
 800a992:	7ffa      	ldrb	r2, [r7, #31]
 800a994:	491e      	ldr	r1, [pc, #120]	; (800aa10 <spi_config_hal_setup+0x16c>)
 800a996:	4613      	mov	r3, r2
 800a998:	009b      	lsls	r3, r3, #2
 800a99a:	4413      	add	r3, r2
 800a99c:	00db      	lsls	r3, r3, #3
 800a99e:	440b      	add	r3, r1
 800a9a0:	331c      	adds	r3, #28
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f107 0208 	add.w	r2, r7, #8
 800a9a8:	4611      	mov	r1, r2
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f7fb fb38 	bl	8006020 <HAL_GPIO_Init>

        	switch (bus)
 800a9b0:	7ffb      	ldrb	r3, [r7, #31]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d10c      	bne.n	800a9d0 <spi_config_hal_setup+0x12c>
        	{
        		case SPI_CONFIG_BUS_WIFI:
        		    __HAL_RCC_SPI1_CLK_ENABLE();
 800a9b6:	4b17      	ldr	r3, [pc, #92]	; (800aa14 <spi_config_hal_setup+0x170>)
 800a9b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9ba:	4a16      	ldr	r2, [pc, #88]	; (800aa14 <spi_config_hal_setup+0x170>)
 800a9bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a9c0:	6613      	str	r3, [r2, #96]	; 0x60
 800a9c2:	4b14      	ldr	r3, [pc, #80]	; (800aa14 <spi_config_hal_setup+0x170>)
 800a9c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a9ca:	607b      	str	r3, [r7, #4]
 800a9cc:	687b      	ldr	r3, [r7, #4]
        		break;
 800a9ce:	e000      	b.n	800a9d2 <spi_config_hal_setup+0x12e>
        		default:
				break;
 800a9d0:	bf00      	nop
        	}
    	    if(HAL_SPI_Init(g_spi_config[bus].handle) != HAL_OK)
 800a9d2:	7ffa      	ldrb	r2, [r7, #31]
 800a9d4:	490e      	ldr	r1, [pc, #56]	; (800aa10 <spi_config_hal_setup+0x16c>)
 800a9d6:	4613      	mov	r3, r2
 800a9d8:	009b      	lsls	r3, r3, #2
 800a9da:	4413      	add	r3, r2
 800a9dc:	00db      	lsls	r3, r3, #3
 800a9de:	440b      	add	r3, r1
 800a9e0:	3324      	adds	r3, #36	; 0x24
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f7fd f815 	bl	8007a14 <HAL_SPI_Init>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d000      	beq.n	800a9f2 <spi_config_hal_setup+0x14e>
    	    {
    	        /* Initialization Error */
    	        while(1);
 800a9f0:	e7fe      	b.n	800a9f0 <spi_config_hal_setup+0x14c>
    for (spi_config_bus_e bus = SPI_CONFIG_BUS_FIRST; bus < NUM_SPI_CONFIG_BUSES; bus++)
 800a9f2:	7ffb      	ldrb	r3, [r7, #31]
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	77fb      	strb	r3, [r7, #31]
 800a9f8:	7ffb      	ldrb	r3, [r7, #31]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	f43f af58 	beq.w	800a8b0 <spi_config_hal_setup+0xc>
    // TODO make this an array that gets populated so you don't need to lookup everytime..
//    for (spi_access_chip_id_e chip_id = SPI_ACCESS_CHIP_ID_FIRST; chip_id < NUM_SPI_ACCESS_CHIP_IDS; chip_id++)
//    {
//    	g_spi_chip_id_handle[chip_id] = spi_config_bus_lookup_from_chip_id(chip_id);
//    }
}
 800aa00:	bf00      	nop
 800aa02:	bf00      	nop
 800aa04:	3720      	adds	r7, #32
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
 800aa0a:	bf00      	nop
 800aa0c:	200000fc 	.word	0x200000fc
 800aa10:	0800caf8 	.word	0x0800caf8
 800aa14:	40021000 	.word	0x40021000

0800aa18 <USART1_IRQHandler>:
uint8_t *gh_uart_rx_buffer;
uint16_t g_uart_rx_buffer_index = 0;


void USART1_IRQHandler(void)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(uart_config_esp8266_handle());
 800aa1c:	f000 f91a 	bl	800ac54 <uart_config_esp8266_handle>
 800aa20:	4603      	mov	r3, r0
 800aa22:	4618      	mov	r0, r3
 800aa24:	f7fe fc10 	bl	8009248 <HAL_UART_IRQHandler>
}
 800aa28:	bf00      	nop
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
	// do something in future
}
 800aa34:	bf00      	nop
 800aa36:	370c      	adds	r7, #12
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr

0800aa40 <uart_config_hal_setup>:
extern const uart_access_id_e* g_uart_chip_bus_lookup[NUM_UART_CONFIG_BUSES];
extern uint16_t g_uart_num_chips_per_bus[NUM_UART_CONFIG_BUSES];


void uart_config_hal_setup(void)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b0a0      	sub	sp, #128	; 0x80
 800aa44:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStruct;

    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800aa46:	f107 030c 	add.w	r3, r7, #12
 800aa4a:	225c      	movs	r2, #92	; 0x5c
 800aa4c:	2100      	movs	r1, #0
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f000 ff24 	bl	800b89c <memset>

    for (uart_config_bus_e bus = UART_CONFIG_BUS_FIRST; bus < NUM_UART_CONFIG_BUSES; bus++)
 800aa54:	2300      	movs	r3, #0
 800aa56:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800aa5a:	e0e9      	b.n	800ac30 <uart_config_hal_setup+0x1f0>
    {
    	if (g_uart_num_chips_per_bus[bus])
 800aa5c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800aa60:	4a78      	ldr	r2, [pc, #480]	; (800ac44 <uart_config_hal_setup+0x204>)
 800aa62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	f000 80dd 	beq.w	800ac26 <uart_config_hal_setup+0x1e6>
    	{
    	    GPIO_InitStruct.Pin       = g_uart_config[bus].pin.rx;
 800aa6c:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800aa70:	4975      	ldr	r1, [pc, #468]	; (800ac48 <uart_config_hal_setup+0x208>)
 800aa72:	4613      	mov	r3, r2
 800aa74:	005b      	lsls	r3, r3, #1
 800aa76:	4413      	add	r3, r2
 800aa78:	00db      	lsls	r3, r3, #3
 800aa7a:	440b      	add	r3, r1
 800aa7c:	881b      	ldrh	r3, [r3, #0]
 800aa7e:	66bb      	str	r3, [r7, #104]	; 0x68
    	    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800aa80:	2302      	movs	r3, #2
 800aa82:	66fb      	str	r3, [r7, #108]	; 0x6c
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800aa84:	2300      	movs	r3, #0
 800aa86:	673b      	str	r3, [r7, #112]	; 0x70
    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa88:	2303      	movs	r3, #3
 800aa8a:	677b      	str	r3, [r7, #116]	; 0x74
    	    GPIO_InitStruct.Alternate = g_uart_config[bus].pin.rx_alt_func;
 800aa8c:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800aa90:	496d      	ldr	r1, [pc, #436]	; (800ac48 <uart_config_hal_setup+0x208>)
 800aa92:	4613      	mov	r3, r2
 800aa94:	005b      	lsls	r3, r3, #1
 800aa96:	4413      	add	r3, r2
 800aa98:	00db      	lsls	r3, r3, #3
 800aa9a:	440b      	add	r3, r1
 800aa9c:	3308      	adds	r3, #8
 800aa9e:	781b      	ldrb	r3, [r3, #0]
 800aaa0:	67bb      	str	r3, [r7, #120]	; 0x78
    	    HAL_GPIO_Init(g_uart_config[bus].pin.rx_port, &GPIO_InitStruct);
 800aaa2:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800aaa6:	4968      	ldr	r1, [pc, #416]	; (800ac48 <uart_config_hal_setup+0x208>)
 800aaa8:	4613      	mov	r3, r2
 800aaaa:	005b      	lsls	r3, r3, #1
 800aaac:	4413      	add	r3, r2
 800aaae:	00db      	lsls	r3, r3, #3
 800aab0:	440b      	add	r3, r1
 800aab2:	3304      	adds	r3, #4
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800aaba:	4611      	mov	r1, r2
 800aabc:	4618      	mov	r0, r3
 800aabe:	f7fb faaf 	bl	8006020 <HAL_GPIO_Init>

    	    GPIO_InitStruct.Pin       = g_uart_config[bus].pin.tx;
 800aac2:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800aac6:	4960      	ldr	r1, [pc, #384]	; (800ac48 <uart_config_hal_setup+0x208>)
 800aac8:	4613      	mov	r3, r2
 800aaca:	005b      	lsls	r3, r3, #1
 800aacc:	4413      	add	r3, r2
 800aace:	00db      	lsls	r3, r3, #3
 800aad0:	440b      	add	r3, r1
 800aad2:	330a      	adds	r3, #10
 800aad4:	881b      	ldrh	r3, [r3, #0]
 800aad6:	66bb      	str	r3, [r7, #104]	; 0x68
    	    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800aad8:	2302      	movs	r3, #2
 800aada:	66fb      	str	r3, [r7, #108]	; 0x6c
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800aadc:	2300      	movs	r3, #0
 800aade:	673b      	str	r3, [r7, #112]	; 0x70
    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800aae0:	2303      	movs	r3, #3
 800aae2:	677b      	str	r3, [r7, #116]	; 0x74
    	    GPIO_InitStruct.Alternate = g_uart_config[bus].pin.tx_alt_func;
 800aae4:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800aae8:	4957      	ldr	r1, [pc, #348]	; (800ac48 <uart_config_hal_setup+0x208>)
 800aaea:	4613      	mov	r3, r2
 800aaec:	005b      	lsls	r3, r3, #1
 800aaee:	4413      	add	r3, r2
 800aaf0:	00db      	lsls	r3, r3, #3
 800aaf2:	440b      	add	r3, r1
 800aaf4:	3310      	adds	r3, #16
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	67bb      	str	r3, [r7, #120]	; 0x78
    	    HAL_GPIO_Init(g_uart_config[bus].pin.tx_port, &GPIO_InitStruct);
 800aafa:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800aafe:	4952      	ldr	r1, [pc, #328]	; (800ac48 <uart_config_hal_setup+0x208>)
 800ab00:	4613      	mov	r3, r2
 800ab02:	005b      	lsls	r3, r3, #1
 800ab04:	4413      	add	r3, r2
 800ab06:	00db      	lsls	r3, r3, #3
 800ab08:	440b      	add	r3, r1
 800ab0a:	330c      	adds	r3, #12
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800ab12:	4611      	mov	r1, r2
 800ab14:	4618      	mov	r0, r3
 800ab16:	f7fb fa83 	bl	8006020 <HAL_GPIO_Init>

    	    switch (bus)
 800ab1a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d002      	beq.n	800ab28 <uart_config_hal_setup+0xe8>
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	d01b      	beq.n	800ab5e <uart_config_hal_setup+0x11e>
    	    	       //Error_Handler();
    	    	     }
    	    	    __HAL_RCC_USART1_CLK_ENABLE();
				break;
    	    	default:
    	    	break;
 800ab26:	e034      	b.n	800ab92 <uart_config_hal_setup+0x152>
    	    	    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800ab28:	2320      	movs	r3, #32
 800ab2a:	60fb      	str	r3, [r7, #12]
    	    	    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_LSE;
 800ab2c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800ab30:	63bb      	str	r3, [r7, #56]	; 0x38
    	    	    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ab32:	f107 030c 	add.w	r3, r7, #12
 800ab36:	4618      	mov	r0, r3
 800ab38:	f7fc fb50 	bl	80071dc <HAL_RCCEx_PeriphCLKConfig>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d000      	beq.n	800ab44 <uart_config_hal_setup+0x104>
    	    	         while(1);
 800ab42:	e7fe      	b.n	800ab42 <uart_config_hal_setup+0x102>
    	    	    __HAL_RCC_LPUART1_CLK_ENABLE();
 800ab44:	4b41      	ldr	r3, [pc, #260]	; (800ac4c <uart_config_hal_setup+0x20c>)
 800ab46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab48:	4a40      	ldr	r2, [pc, #256]	; (800ac4c <uart_config_hal_setup+0x20c>)
 800ab4a:	f043 0301 	orr.w	r3, r3, #1
 800ab4e:	65d3      	str	r3, [r2, #92]	; 0x5c
 800ab50:	4b3e      	ldr	r3, [pc, #248]	; (800ac4c <uart_config_hal_setup+0x20c>)
 800ab52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab54:	f003 0301 	and.w	r3, r3, #1
 800ab58:	60bb      	str	r3, [r7, #8]
 800ab5a:	68bb      	ldr	r3, [r7, #8]
    	    	break;
 800ab5c:	e019      	b.n	800ab92 <uart_config_hal_setup+0x152>
    	    	    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	60fb      	str	r3, [r7, #12]
    	    	    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800ab62:	2300      	movs	r3, #0
 800ab64:	62fb      	str	r3, [r7, #44]	; 0x2c
    	    	    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ab66:	f107 030c 	add.w	r3, r7, #12
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7fc fb36 	bl	80071dc <HAL_RCCEx_PeriphCLKConfig>
 800ab70:	4603      	mov	r3, r0
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d000      	beq.n	800ab78 <uart_config_hal_setup+0x138>
    	    	         while(1);
 800ab76:	e7fe      	b.n	800ab76 <uart_config_hal_setup+0x136>
    	    	    __HAL_RCC_USART1_CLK_ENABLE();
 800ab78:	4b34      	ldr	r3, [pc, #208]	; (800ac4c <uart_config_hal_setup+0x20c>)
 800ab7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab7c:	4a33      	ldr	r2, [pc, #204]	; (800ac4c <uart_config_hal_setup+0x20c>)
 800ab7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ab82:	6613      	str	r3, [r2, #96]	; 0x60
 800ab84:	4b31      	ldr	r3, [pc, #196]	; (800ac4c <uart_config_hal_setup+0x20c>)
 800ab86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab8c:	607b      	str	r3, [r7, #4]
 800ab8e:	687b      	ldr	r3, [r7, #4]
				break;
 800ab90:	bf00      	nop
    	    }
    	    //UART_ITConfig(USART1, UART_IT_TXE, ENABLE);
    	    //UART_ITConfig(USART1, UART_IT_RXNE, ENABLE);
    	    if(HAL_UART_DeInit(&g_uart_handle_config[bus]) != HAL_OK)
 800ab92:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800ab96:	4613      	mov	r3, r2
 800ab98:	015b      	lsls	r3, r3, #5
 800ab9a:	4413      	add	r3, r2
 800ab9c:	009b      	lsls	r3, r3, #2
 800ab9e:	4a2c      	ldr	r2, [pc, #176]	; (800ac50 <uart_config_hal_setup+0x210>)
 800aba0:	4413      	add	r3, r2
 800aba2:	4618      	mov	r0, r3
 800aba4:	f7fe fb02 	bl	80091ac <HAL_UART_DeInit>
 800aba8:	4603      	mov	r3, r0
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d000      	beq.n	800abb0 <uart_config_hal_setup+0x170>
    	    {
    	        while(1);//Error_Handler();
 800abae:	e7fe      	b.n	800abae <uart_config_hal_setup+0x16e>
    	    }
    	    if(HAL_UART_Init(&g_uart_handle_config[bus]) != HAL_OK)
 800abb0:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800abb4:	4613      	mov	r3, r2
 800abb6:	015b      	lsls	r3, r3, #5
 800abb8:	4413      	add	r3, r2
 800abba:	009b      	lsls	r3, r3, #2
 800abbc:	4a24      	ldr	r2, [pc, #144]	; (800ac50 <uart_config_hal_setup+0x210>)
 800abbe:	4413      	add	r3, r2
 800abc0:	4618      	mov	r0, r3
 800abc2:	f7fe faa5 	bl	8009110 <HAL_UART_Init>
 800abc6:	4603      	mov	r3, r0
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d000      	beq.n	800abce <uart_config_hal_setup+0x18e>
    	    {
    	        while(1);//Error_Handler();
 800abcc:	e7fe      	b.n	800abcc <uart_config_hal_setup+0x18c>
    	    }
    	    HAL_NVIC_SetPriority(g_uart_config[bus].irqn, 0, 1);
 800abce:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800abd2:	491d      	ldr	r1, [pc, #116]	; (800ac48 <uart_config_hal_setup+0x208>)
 800abd4:	4613      	mov	r3, r2
 800abd6:	005b      	lsls	r3, r3, #1
 800abd8:	4413      	add	r3, r2
 800abda:	00db      	lsls	r3, r3, #3
 800abdc:	440b      	add	r3, r1
 800abde:	3314      	adds	r3, #20
 800abe0:	f993 3000 	ldrsb.w	r3, [r3]
 800abe4:	2201      	movs	r2, #1
 800abe6:	2100      	movs	r1, #0
 800abe8:	4618      	mov	r0, r3
 800abea:	f7fa ff08 	bl	80059fe <HAL_NVIC_SetPriority>
    	    HAL_NVIC_EnableIRQ(g_uart_config[bus].irqn);
 800abee:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800abf2:	4915      	ldr	r1, [pc, #84]	; (800ac48 <uart_config_hal_setup+0x208>)
 800abf4:	4613      	mov	r3, r2
 800abf6:	005b      	lsls	r3, r3, #1
 800abf8:	4413      	add	r3, r2
 800abfa:	00db      	lsls	r3, r3, #3
 800abfc:	440b      	add	r3, r1
 800abfe:	3314      	adds	r3, #20
 800ac00:	f993 3000 	ldrsb.w	r3, [r3]
 800ac04:	4618      	mov	r0, r3
 800ac06:	f7fa ff16 	bl	8005a36 <HAL_NVIC_EnableIRQ>
    	    HAL_NVIC_ClearPendingIRQ(g_uart_config[bus].irqn);
 800ac0a:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800ac0e:	490e      	ldr	r1, [pc, #56]	; (800ac48 <uart_config_hal_setup+0x208>)
 800ac10:	4613      	mov	r3, r2
 800ac12:	005b      	lsls	r3, r3, #1
 800ac14:	4413      	add	r3, r2
 800ac16:	00db      	lsls	r3, r3, #3
 800ac18:	440b      	add	r3, r1
 800ac1a:	3314      	adds	r3, #20
 800ac1c:	f993 3000 	ldrsb.w	r3, [r3]
 800ac20:	4618      	mov	r0, r3
 800ac22:	f7fa ff30 	bl	8005a86 <HAL_NVIC_ClearPendingIRQ>
    for (uart_config_bus_e bus = UART_CONFIG_BUS_FIRST; bus < NUM_UART_CONFIG_BUSES; bus++)
 800ac26:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800ac30:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	f67f af11 	bls.w	800aa5c <uart_config_hal_setup+0x1c>
    	}
    }

}
 800ac3a:	bf00      	nop
 800ac3c:	bf00      	nop
 800ac3e:	3780      	adds	r7, #128	; 0x80
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}
 800ac44:	20000208 	.word	0x20000208
 800ac48:	0800cb20 	.word	0x0800cb20
 800ac4c:	40021000 	.word	0x40021000
 800ac50:	20000100 	.word	0x20000100

0800ac54 <uart_config_esp8266_handle>:
	return &g_uart_handle_config[UART_CONFIG_BUS_HOST];
}


uart_handle_t uart_config_esp8266_handle(void)
{
 800ac54:	b480      	push	{r7}
 800ac56:	af00      	add	r7, sp, #0
	return &g_uart_handle_config[UART_CONFIG_BUS_ESP8266];
 800ac58:	4b02      	ldr	r3, [pc, #8]	; (800ac64 <uart_config_esp8266_handle+0x10>)
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr
 800ac64:	20000184 	.word	0x20000184

0800ac68 <HAL_Set_DMA_Callbacks>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);


// Function below added by SRW
static void HAL_Set_DMA_Callbacks(void)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	af00      	add	r7, sp, #0
    HAL_DMA_RegisterCallback(&g_hdma_tim1_ch1, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 800ac6c:	4a08      	ldr	r2, [pc, #32]	; (800ac90 <HAL_Set_DMA_Callbacks+0x28>)
 800ac6e:	2100      	movs	r1, #0
 800ac70:	4808      	ldr	r0, [pc, #32]	; (800ac94 <HAL_Set_DMA_Callbacks+0x2c>)
 800ac72:	f7fb f95d 	bl	8005f30 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&g_hdma_tim1_ch2, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 800ac76:	4a06      	ldr	r2, [pc, #24]	; (800ac90 <HAL_Set_DMA_Callbacks+0x28>)
 800ac78:	2100      	movs	r1, #0
 800ac7a:	4807      	ldr	r0, [pc, #28]	; (800ac98 <HAL_Set_DMA_Callbacks+0x30>)
 800ac7c:	f7fb f958 	bl	8005f30 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&g_hdma_tim1_ch3, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 800ac80:	4a03      	ldr	r2, [pc, #12]	; (800ac90 <HAL_Set_DMA_Callbacks+0x28>)
 800ac82:	2100      	movs	r1, #0
 800ac84:	4805      	ldr	r0, [pc, #20]	; (800ac9c <HAL_Set_DMA_Callbacks+0x34>)
 800ac86:	f7fb f953 	bl	8005f30 <HAL_DMA_RegisterCallback>
}
 800ac8a:	bf00      	nop
 800ac8c:	bd80      	pop	{r7, pc}
 800ac8e:	bf00      	nop
 800ac90:	0800b167 	.word	0x0800b167
 800ac94:	200022e4 	.word	0x200022e4
 800ac98:	2000232c 	.word	0x2000232c
 800ac9c:	20002374 	.word	0x20002374

0800aca0 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b084      	sub	sp, #16
 800aca4:	af00      	add	r7, sp, #0
  PWR_PVDTypeDef sConfigPVD = {0};
 800aca6:	f107 0308 	add.w	r3, r7, #8
 800acaa:	2200      	movs	r2, #0
 800acac:	601a      	str	r2, [r3, #0]
 800acae:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800acb0:	4b13      	ldr	r3, [pc, #76]	; (800ad00 <HAL_MspInit+0x60>)
 800acb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acb4:	4a12      	ldr	r2, [pc, #72]	; (800ad00 <HAL_MspInit+0x60>)
 800acb6:	f043 0301 	orr.w	r3, r3, #1
 800acba:	6613      	str	r3, [r2, #96]	; 0x60
 800acbc:	4b10      	ldr	r3, [pc, #64]	; (800ad00 <HAL_MspInit+0x60>)
 800acbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acc0:	f003 0301 	and.w	r3, r3, #1
 800acc4:	607b      	str	r3, [r7, #4]
 800acc6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800acc8:	4b0d      	ldr	r3, [pc, #52]	; (800ad00 <HAL_MspInit+0x60>)
 800acca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800accc:	4a0c      	ldr	r2, [pc, #48]	; (800ad00 <HAL_MspInit+0x60>)
 800acce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800acd2:	6593      	str	r3, [r2, #88]	; 0x58
 800acd4:	4b0a      	ldr	r3, [pc, #40]	; (800ad00 <HAL_MspInit+0x60>)
 800acd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800acdc:	603b      	str	r3, [r7, #0]
 800acde:	683b      	ldr	r3, [r7, #0]

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 800ace0:	2300      	movs	r3, #0
 800ace2:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 800ace4:	2300      	movs	r3, #0
 800ace6:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 800ace8:	f107 0308 	add.w	r3, r7, #8
 800acec:	4618      	mov	r0, r3
 800acee:	f7fb fb69 	bl	80063c4 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 800acf2:	f7fb fbc7 	bl	8006484 <HAL_PWR_EnablePVD>
}
 800acf6:	bf00      	nop
 800acf8:	3710      	adds	r7, #16
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop
 800ad00:	40021000 	.word	0x40021000

0800ad04 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b083      	sub	sp, #12
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4a08      	ldr	r2, [pc, #32]	; (800ad34 <HAL_RTC_MspInit+0x30>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d107      	bne.n	800ad26 <HAL_RTC_MspInit+0x22>
  {
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800ad16:	4b08      	ldr	r3, [pc, #32]	; (800ad38 <HAL_RTC_MspInit+0x34>)
 800ad18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad1c:	4a06      	ldr	r2, [pc, #24]	; (800ad38 <HAL_RTC_MspInit+0x34>)
 800ad1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

}
 800ad26:	bf00      	nop
 800ad28:	370c      	adds	r7, #12
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad30:	4770      	bx	lr
 800ad32:	bf00      	nop
 800ad34:	40002800 	.word	0x40002800
 800ad38:	40021000 	.word	0x40021000

0800ad3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b084      	sub	sp, #16
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4a4c      	ldr	r2, [pc, #304]	; (800ae7c <HAL_TIM_Base_MspInit+0x140>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	f040 8090 	bne.w	800ae70 <HAL_TIM_Base_MspInit+0x134>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800ad50:	4b4b      	ldr	r3, [pc, #300]	; (800ae80 <HAL_TIM_Base_MspInit+0x144>)
 800ad52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad54:	4a4a      	ldr	r2, [pc, #296]	; (800ae80 <HAL_TIM_Base_MspInit+0x144>)
 800ad56:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ad5a:	6613      	str	r3, [r2, #96]	; 0x60
 800ad5c:	4b48      	ldr	r3, [pc, #288]	; (800ae80 <HAL_TIM_Base_MspInit+0x144>)
 800ad5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad64:	60fb      	str	r3, [r7, #12]
 800ad66:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    g_hdma_tim1_ch1.Instance = DMA1_Channel2;
 800ad68:	4b46      	ldr	r3, [pc, #280]	; (800ae84 <HAL_TIM_Base_MspInit+0x148>)
 800ad6a:	4a47      	ldr	r2, [pc, #284]	; (800ae88 <HAL_TIM_Base_MspInit+0x14c>)
 800ad6c:	601a      	str	r2, [r3, #0]
    g_hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 800ad6e:	4b45      	ldr	r3, [pc, #276]	; (800ae84 <HAL_TIM_Base_MspInit+0x148>)
 800ad70:	2207      	movs	r2, #7
 800ad72:	605a      	str	r2, [r3, #4]
    g_hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ad74:	4b43      	ldr	r3, [pc, #268]	; (800ae84 <HAL_TIM_Base_MspInit+0x148>)
 800ad76:	2210      	movs	r2, #16
 800ad78:	609a      	str	r2, [r3, #8]
    g_hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800ad7a:	4b42      	ldr	r3, [pc, #264]	; (800ae84 <HAL_TIM_Base_MspInit+0x148>)
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	60da      	str	r2, [r3, #12]
    g_hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800ad80:	4b40      	ldr	r3, [pc, #256]	; (800ae84 <HAL_TIM_Base_MspInit+0x148>)
 800ad82:	2280      	movs	r2, #128	; 0x80
 800ad84:	611a      	str	r2, [r3, #16]
    g_hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ad86:	4b3f      	ldr	r3, [pc, #252]	; (800ae84 <HAL_TIM_Base_MspInit+0x148>)
 800ad88:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ad8c:	615a      	str	r2, [r3, #20]
    g_hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ad8e:	4b3d      	ldr	r3, [pc, #244]	; (800ae84 <HAL_TIM_Base_MspInit+0x148>)
 800ad90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ad94:	619a      	str	r2, [r3, #24]
    g_hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800ad96:	4b3b      	ldr	r3, [pc, #236]	; (800ae84 <HAL_TIM_Base_MspInit+0x148>)
 800ad98:	2200      	movs	r2, #0
 800ad9a:	61da      	str	r2, [r3, #28]
    g_hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800ad9c:	4b39      	ldr	r3, [pc, #228]	; (800ae84 <HAL_TIM_Base_MspInit+0x148>)
 800ad9e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800ada2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&g_hdma_tim1_ch1) != HAL_OK)
 800ada4:	4837      	ldr	r0, [pc, #220]	; (800ae84 <HAL_TIM_Base_MspInit+0x148>)
 800ada6:	f7fa fe7d 	bl	8005aa4 <HAL_DMA_Init>
 800adaa:	4603      	mov	r3, r0
 800adac:	2b00      	cmp	r3, #0
 800adae:	d001      	beq.n	800adb4 <HAL_TIM_Base_MspInit+0x78>
    {
      Error_Handler();
 800adb0:	f7ff fbd3 	bl	800a55a <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],g_hdma_tim1_ch1);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	4a33      	ldr	r2, [pc, #204]	; (800ae84 <HAL_TIM_Base_MspInit+0x148>)
 800adb8:	625a      	str	r2, [r3, #36]	; 0x24
 800adba:	4a32      	ldr	r2, [pc, #200]	; (800ae84 <HAL_TIM_Base_MspInit+0x148>)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH2 Init */
    g_hdma_tim1_ch2.Instance = DMA1_Channel3;
 800adc0:	4b32      	ldr	r3, [pc, #200]	; (800ae8c <HAL_TIM_Base_MspInit+0x150>)
 800adc2:	4a33      	ldr	r2, [pc, #204]	; (800ae90 <HAL_TIM_Base_MspInit+0x154>)
 800adc4:	601a      	str	r2, [r3, #0]
    g_hdma_tim1_ch2.Init.Request = DMA_REQUEST_7;
 800adc6:	4b31      	ldr	r3, [pc, #196]	; (800ae8c <HAL_TIM_Base_MspInit+0x150>)
 800adc8:	2207      	movs	r2, #7
 800adca:	605a      	str	r2, [r3, #4]
    g_hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800adcc:	4b2f      	ldr	r3, [pc, #188]	; (800ae8c <HAL_TIM_Base_MspInit+0x150>)
 800adce:	2210      	movs	r2, #16
 800add0:	609a      	str	r2, [r3, #8]
    g_hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800add2:	4b2e      	ldr	r3, [pc, #184]	; (800ae8c <HAL_TIM_Base_MspInit+0x150>)
 800add4:	2200      	movs	r2, #0
 800add6:	60da      	str	r2, [r3, #12]
    g_hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800add8:	4b2c      	ldr	r3, [pc, #176]	; (800ae8c <HAL_TIM_Base_MspInit+0x150>)
 800adda:	2280      	movs	r2, #128	; 0x80
 800addc:	611a      	str	r2, [r3, #16]
    g_hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800adde:	4b2b      	ldr	r3, [pc, #172]	; (800ae8c <HAL_TIM_Base_MspInit+0x150>)
 800ade0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ade4:	615a      	str	r2, [r3, #20]
    g_hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ade6:	4b29      	ldr	r3, [pc, #164]	; (800ae8c <HAL_TIM_Base_MspInit+0x150>)
 800ade8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800adec:	619a      	str	r2, [r3, #24]
    g_hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 800adee:	4b27      	ldr	r3, [pc, #156]	; (800ae8c <HAL_TIM_Base_MspInit+0x150>)
 800adf0:	2200      	movs	r2, #0
 800adf2:	61da      	str	r2, [r3, #28]
    g_hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800adf4:	4b25      	ldr	r3, [pc, #148]	; (800ae8c <HAL_TIM_Base_MspInit+0x150>)
 800adf6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800adfa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&g_hdma_tim1_ch2) != HAL_OK)
 800adfc:	4823      	ldr	r0, [pc, #140]	; (800ae8c <HAL_TIM_Base_MspInit+0x150>)
 800adfe:	f7fa fe51 	bl	8005aa4 <HAL_DMA_Init>
 800ae02:	4603      	mov	r3, r0
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d001      	beq.n	800ae0c <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 800ae08:	f7ff fba7 	bl	800a55a <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],g_hdma_tim1_ch2);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	4a1f      	ldr	r2, [pc, #124]	; (800ae8c <HAL_TIM_Base_MspInit+0x150>)
 800ae10:	629a      	str	r2, [r3, #40]	; 0x28
 800ae12:	4a1e      	ldr	r2, [pc, #120]	; (800ae8c <HAL_TIM_Base_MspInit+0x150>)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH3 Init */
    g_hdma_tim1_ch3.Instance = DMA1_Channel7;
 800ae18:	4b1e      	ldr	r3, [pc, #120]	; (800ae94 <HAL_TIM_Base_MspInit+0x158>)
 800ae1a:	4a1f      	ldr	r2, [pc, #124]	; (800ae98 <HAL_TIM_Base_MspInit+0x15c>)
 800ae1c:	601a      	str	r2, [r3, #0]
    g_hdma_tim1_ch3.Init.Request = DMA_REQUEST_7;
 800ae1e:	4b1d      	ldr	r3, [pc, #116]	; (800ae94 <HAL_TIM_Base_MspInit+0x158>)
 800ae20:	2207      	movs	r2, #7
 800ae22:	605a      	str	r2, [r3, #4]
    g_hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ae24:	4b1b      	ldr	r3, [pc, #108]	; (800ae94 <HAL_TIM_Base_MspInit+0x158>)
 800ae26:	2210      	movs	r2, #16
 800ae28:	609a      	str	r2, [r3, #8]
    g_hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800ae2a:	4b1a      	ldr	r3, [pc, #104]	; (800ae94 <HAL_TIM_Base_MspInit+0x158>)
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	60da      	str	r2, [r3, #12]
    g_hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800ae30:	4b18      	ldr	r3, [pc, #96]	; (800ae94 <HAL_TIM_Base_MspInit+0x158>)
 800ae32:	2280      	movs	r2, #128	; 0x80
 800ae34:	611a      	str	r2, [r3, #16]
    g_hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ae36:	4b17      	ldr	r3, [pc, #92]	; (800ae94 <HAL_TIM_Base_MspInit+0x158>)
 800ae38:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ae3c:	615a      	str	r2, [r3, #20]
    g_hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ae3e:	4b15      	ldr	r3, [pc, #84]	; (800ae94 <HAL_TIM_Base_MspInit+0x158>)
 800ae40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ae44:	619a      	str	r2, [r3, #24]
    g_hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 800ae46:	4b13      	ldr	r3, [pc, #76]	; (800ae94 <HAL_TIM_Base_MspInit+0x158>)
 800ae48:	2200      	movs	r2, #0
 800ae4a:	61da      	str	r2, [r3, #28]
    g_hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800ae4c:	4b11      	ldr	r3, [pc, #68]	; (800ae94 <HAL_TIM_Base_MspInit+0x158>)
 800ae4e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800ae52:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&g_hdma_tim1_ch3) != HAL_OK)
 800ae54:	480f      	ldr	r0, [pc, #60]	; (800ae94 <HAL_TIM_Base_MspInit+0x158>)
 800ae56:	f7fa fe25 	bl	8005aa4 <HAL_DMA_Init>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d001      	beq.n	800ae64 <HAL_TIM_Base_MspInit+0x128>
    {
      Error_Handler();
 800ae60:	f7ff fb7b 	bl	800a55a <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],g_hdma_tim1_ch3);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	4a0b      	ldr	r2, [pc, #44]	; (800ae94 <HAL_TIM_Base_MspInit+0x158>)
 800ae68:	62da      	str	r2, [r3, #44]	; 0x2c
 800ae6a:	4a0a      	ldr	r2, [pc, #40]	; (800ae94 <HAL_TIM_Base_MspInit+0x158>)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6293      	str	r3, [r2, #40]	; 0x28
  }
  HAL_Set_DMA_Callbacks();
 800ae70:	f7ff fefa 	bl	800ac68 <HAL_Set_DMA_Callbacks>
}
 800ae74:	bf00      	nop
 800ae76:	3710      	adds	r7, #16
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}
 800ae7c:	40012c00 	.word	0x40012c00
 800ae80:	40021000 	.word	0x40021000
 800ae84:	200022e4 	.word	0x200022e4
 800ae88:	4002001c 	.word	0x4002001c
 800ae8c:	2000232c 	.word	0x2000232c
 800ae90:	40020030 	.word	0x40020030
 800ae94:	20002374 	.word	0x20002374
 800ae98:	40020080 	.word	0x40020080

0800ae9c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b083      	sub	sp, #12
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]

}
 800aea4:	bf00      	nop
 800aea6:	370c      	adds	r7, #12
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr

0800aeb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b082      	sub	sp, #8
 800aeb4:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 1; iii++)
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	71fb      	strb	r3, [r7, #7]
 800aeba:	e005      	b.n	800aec8 <NMI_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800aebc:	2064      	movs	r0, #100	; 0x64
 800aebe:	f7fa fc5d 	bl	800577c <HAL_Delay>
        for (uint8_t iii = 0; iii < 1; iii++)
 800aec2:	79fb      	ldrb	r3, [r7, #7]
 800aec4:	3301      	adds	r3, #1
 800aec6:	71fb      	strb	r3, [r7, #7]
 800aec8:	79fb      	ldrb	r3, [r7, #7]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d0f6      	beq.n	800aebc <NMI_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800aece:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800aed2:	f7fa fc53 	bl	800577c <HAL_Delay>
        for (uint8_t iii = 0; iii < 1; iii++)
 800aed6:	e7ee      	b.n	800aeb6 <NMI_Handler+0x6>

0800aed8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b082      	sub	sp, #8
 800aedc:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 2; iii++)
 800aede:	2300      	movs	r3, #0
 800aee0:	71fb      	strb	r3, [r7, #7]
 800aee2:	e005      	b.n	800aef0 <HardFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800aee4:	2064      	movs	r0, #100	; 0x64
 800aee6:	f7fa fc49 	bl	800577c <HAL_Delay>
        for (uint8_t iii = 0; iii < 2; iii++)
 800aeea:	79fb      	ldrb	r3, [r7, #7]
 800aeec:	3301      	adds	r3, #1
 800aeee:	71fb      	strb	r3, [r7, #7]
 800aef0:	79fb      	ldrb	r3, [r7, #7]
 800aef2:	2b01      	cmp	r3, #1
 800aef4:	d9f6      	bls.n	800aee4 <HardFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800aef6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800aefa:	f7fa fc3f 	bl	800577c <HAL_Delay>
        for (uint8_t iii = 0; iii < 2; iii++)
 800aefe:	e7ee      	b.n	800aede <HardFault_Handler+0x6>

0800af00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b082      	sub	sp, #8
 800af04:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 3; iii++)
 800af06:	2300      	movs	r3, #0
 800af08:	71fb      	strb	r3, [r7, #7]
 800af0a:	e005      	b.n	800af18 <MemManage_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800af0c:	2064      	movs	r0, #100	; 0x64
 800af0e:	f7fa fc35 	bl	800577c <HAL_Delay>
        for (uint8_t iii = 0; iii < 3; iii++)
 800af12:	79fb      	ldrb	r3, [r7, #7]
 800af14:	3301      	adds	r3, #1
 800af16:	71fb      	strb	r3, [r7, #7]
 800af18:	79fb      	ldrb	r3, [r7, #7]
 800af1a:	2b02      	cmp	r3, #2
 800af1c:	d9f6      	bls.n	800af0c <MemManage_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800af1e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800af22:	f7fa fc2b 	bl	800577c <HAL_Delay>
        for (uint8_t iii = 0; iii < 3; iii++)
 800af26:	e7ee      	b.n	800af06 <MemManage_Handler+0x6>

0800af28 <BusFault_Handler>:
}
/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b082      	sub	sp, #8
 800af2c:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 4; iii++)
 800af2e:	2300      	movs	r3, #0
 800af30:	71fb      	strb	r3, [r7, #7]
 800af32:	e005      	b.n	800af40 <BusFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800af34:	2064      	movs	r0, #100	; 0x64
 800af36:	f7fa fc21 	bl	800577c <HAL_Delay>
        for (uint8_t iii = 0; iii < 4; iii++)
 800af3a:	79fb      	ldrb	r3, [r7, #7]
 800af3c:	3301      	adds	r3, #1
 800af3e:	71fb      	strb	r3, [r7, #7]
 800af40:	79fb      	ldrb	r3, [r7, #7]
 800af42:	2b03      	cmp	r3, #3
 800af44:	d9f6      	bls.n	800af34 <BusFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800af46:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800af4a:	f7fa fc17 	bl	800577c <HAL_Delay>
        for (uint8_t iii = 0; iii < 4; iii++)
 800af4e:	e7ee      	b.n	800af2e <BusFault_Handler+0x6>

0800af50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b082      	sub	sp, #8
 800af54:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 5; iii++)
 800af56:	2300      	movs	r3, #0
 800af58:	71fb      	strb	r3, [r7, #7]
 800af5a:	e005      	b.n	800af68 <UsageFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800af5c:	2064      	movs	r0, #100	; 0x64
 800af5e:	f7fa fc0d 	bl	800577c <HAL_Delay>
        for (uint8_t iii = 0; iii < 5; iii++)
 800af62:	79fb      	ldrb	r3, [r7, #7]
 800af64:	3301      	adds	r3, #1
 800af66:	71fb      	strb	r3, [r7, #7]
 800af68:	79fb      	ldrb	r3, [r7, #7]
 800af6a:	2b04      	cmp	r3, #4
 800af6c:	d9f6      	bls.n	800af5c <UsageFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800af6e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800af72:	f7fa fc03 	bl	800577c <HAL_Delay>
        for (uint8_t iii = 0; iii < 5; iii++)
 800af76:	e7ee      	b.n	800af56 <UsageFault_Handler+0x6>

0800af78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800af78:	b480      	push	{r7}
 800af7a:	af00      	add	r7, sp, #0
}
 800af7c:	bf00      	nop
 800af7e:	46bd      	mov	sp, r7
 800af80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af84:	4770      	bx	lr
	...

0800af88 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800af88:	b590      	push	{r4, r7, lr}
 800af8a:	b085      	sub	sp, #20
 800af8c:	af02      	add	r7, sp, #8
    BaseType_t xHigherPriorityTaskWoken;
#if defined(BOARD_SPUDGLO_V5)
	// C is color
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_C_PIN;
 800af8e:	2320      	movs	r3, #32
 800af90:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_C;
 800af92:	2302      	movs	r3, #2
 800af94:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_C_IRQ;
 800af96:	2306      	movs	r3, #6
 800af98:	713b      	strb	r3, [r7, #4]
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_D_PIN;
    board_init_push_buttons_e button = PUSH_BUTTON_D;
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_D_IRQ;
    //d_passes++;
#endif
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800af9a:	88fb      	ldrh	r3, [r7, #6]
 800af9c:	4618      	mov	r0, r3
 800af9e:	f7fb f9e9 	bl	8006374 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800afa2:	797a      	ldrb	r2, [r7, #5]
 800afa4:	797b      	ldrb	r3, [r7, #5]
 800afa6:	4910      	ldr	r1, [pc, #64]	; (800afe8 <EXTI0_IRQHandler+0x60>)
 800afa8:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800afac:	490e      	ldr	r1, [pc, #56]	; (800afe8 <EXTI0_IRQHandler+0x60>)
 800afae:	00db      	lsls	r3, r3, #3
 800afb0:	440b      	add	r3, r1
 800afb2:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800afb4:	797c      	ldrb	r4, [r7, #5]
 800afb6:	f7f8 feaf 	bl	8003d18 <xTaskGetTickCountFromISR>
 800afba:	4603      	mov	r3, r0
 800afbc:	4a0a      	ldr	r2, [pc, #40]	; (800afe8 <EXTI0_IRQHandler+0x60>)
 800afbe:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800afc2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800afc6:	4618      	mov	r0, r3
 800afc8:	f7fa fd43 	bl	8005a52 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800afcc:	4b07      	ldr	r3, [pc, #28]	; (800afec <EXTI0_IRQHandler+0x64>)
 800afce:	6818      	ldr	r0, [r3, #0]
 800afd0:	7979      	ldrb	r1, [r7, #5]
 800afd2:	463b      	mov	r3, r7
 800afd4:	9300      	str	r3, [sp, #0]
 800afd6:	2300      	movs	r3, #0
 800afd8:	2203      	movs	r2, #3
 800afda:	f7f9 fabb 	bl	8004554 <xTaskGenericNotifyFromISR>
}
 800afde:	bf00      	nop
 800afe0:	370c      	adds	r7, #12
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd90      	pop	{r4, r7, pc}
 800afe6:	bf00      	nop
 800afe8:	20000998 	.word	0x20000998
 800afec:	2000243c 	.word	0x2000243c

0800aff0 <EXTI2_IRQHandler>:
uint32_t g_dbg_b_interrupt_count = 0;
/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800aff0:	b590      	push	{r4, r7, lr}
 800aff2:	b085      	sub	sp, #20
 800aff4:	af02      	add	r7, sp, #8
    // A is speed
    BaseType_t xHigherPriorityTaskWoken;
#if defined(BOARD_SPUDGLO_V5)
	// D is speed!
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_D_PIN;
 800aff6:	2301      	movs	r3, #1
 800aff8:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_D;
 800affa:	2303      	movs	r3, #3
 800affc:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_D_IRQ;
 800affe:	2308      	movs	r3, #8
 800b000:	713b      	strb	r3, [r7, #4]
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_A_PIN;
    board_init_push_buttons_e button = PUSH_BUTTON_A;
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_A_IRQ;
    a_passes++;
#endif
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800b002:	88fb      	ldrh	r3, [r7, #6]
 800b004:	4618      	mov	r0, r3
 800b006:	f7fb f9b5 	bl	8006374 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800b00a:	797a      	ldrb	r2, [r7, #5]
 800b00c:	797b      	ldrb	r3, [r7, #5]
 800b00e:	4910      	ldr	r1, [pc, #64]	; (800b050 <EXTI2_IRQHandler+0x60>)
 800b010:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800b014:	490e      	ldr	r1, [pc, #56]	; (800b050 <EXTI2_IRQHandler+0x60>)
 800b016:	00db      	lsls	r3, r3, #3
 800b018:	440b      	add	r3, r1
 800b01a:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800b01c:	797c      	ldrb	r4, [r7, #5]
 800b01e:	f7f8 fe7b 	bl	8003d18 <xTaskGetTickCountFromISR>
 800b022:	4603      	mov	r3, r0
 800b024:	4a0a      	ldr	r2, [pc, #40]	; (800b050 <EXTI2_IRQHandler+0x60>)
 800b026:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800b02a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800b02e:	4618      	mov	r0, r3
 800b030:	f7fa fd0f 	bl	8005a52 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800b034:	4b07      	ldr	r3, [pc, #28]	; (800b054 <EXTI2_IRQHandler+0x64>)
 800b036:	6818      	ldr	r0, [r3, #0]
 800b038:	7979      	ldrb	r1, [r7, #5]
 800b03a:	463b      	mov	r3, r7
 800b03c:	9300      	str	r3, [sp, #0]
 800b03e:	2300      	movs	r3, #0
 800b040:	2203      	movs	r2, #3
 800b042:	f7f9 fa87 	bl	8004554 <xTaskGenericNotifyFromISR>
}
 800b046:	bf00      	nop
 800b048:	370c      	adds	r7, #12
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd90      	pop	{r4, r7, pc}
 800b04e:	bf00      	nop
 800b050:	20000998 	.word	0x20000998
 800b054:	2000243c 	.word	0x2000243c

0800b058 <EXTI15_10_IRQHandler>:
volatile uint32_t b_passes = 0;
/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800b058:	b590      	push	{r4, r7, lr}
 800b05a:	b085      	sub	sp, #20
 800b05c:	af02      	add	r7, sp, #8
	// B is animation
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_B_PIN;
 800b05e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b062:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_B;
 800b064:	2301      	movs	r3, #1
 800b066:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_B_IRQ;
 800b068:	2328      	movs	r3, #40	; 0x28
 800b06a:	713b      	strb	r3, [r7, #4]
    b_passes++;
 800b06c:	4b15      	ldr	r3, [pc, #84]	; (800b0c4 <EXTI15_10_IRQHandler+0x6c>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	3301      	adds	r3, #1
 800b072:	4a14      	ldr	r2, [pc, #80]	; (800b0c4 <EXTI15_10_IRQHandler+0x6c>)
 800b074:	6013      	str	r3, [r2, #0]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800b076:	88fb      	ldrh	r3, [r7, #6]
 800b078:	4618      	mov	r0, r3
 800b07a:	f7fb f97b 	bl	8006374 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800b07e:	797a      	ldrb	r2, [r7, #5]
 800b080:	797b      	ldrb	r3, [r7, #5]
 800b082:	4911      	ldr	r1, [pc, #68]	; (800b0c8 <EXTI15_10_IRQHandler+0x70>)
 800b084:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800b088:	490f      	ldr	r1, [pc, #60]	; (800b0c8 <EXTI15_10_IRQHandler+0x70>)
 800b08a:	00db      	lsls	r3, r3, #3
 800b08c:	440b      	add	r3, r1
 800b08e:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800b090:	797c      	ldrb	r4, [r7, #5]
 800b092:	f7f8 fe41 	bl	8003d18 <xTaskGetTickCountFromISR>
 800b096:	4603      	mov	r3, r0
 800b098:	4a0b      	ldr	r2, [pc, #44]	; (800b0c8 <EXTI15_10_IRQHandler+0x70>)
 800b09a:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800b09e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f7fa fcd5 	bl	8005a52 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800b0a8:	4b08      	ldr	r3, [pc, #32]	; (800b0cc <EXTI15_10_IRQHandler+0x74>)
 800b0aa:	6818      	ldr	r0, [r3, #0]
 800b0ac:	7979      	ldrb	r1, [r7, #5]
 800b0ae:	463b      	mov	r3, r7
 800b0b0:	9300      	str	r3, [sp, #0]
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	2203      	movs	r2, #3
 800b0b6:	f7f9 fa4d 	bl	8004554 <xTaskGenericNotifyFromISR>
}
 800b0ba:	bf00      	nop
 800b0bc:	370c      	adds	r7, #12
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd90      	pop	{r4, r7, pc}
 800b0c2:	bf00      	nop
 800b0c4:	20002430 	.word	0x20002430
 800b0c8:	20000998 	.word	0x20000998
 800b0cc:	2000243c 	.word	0x2000243c

0800b0d0 <EXTI9_5_IRQHandler>:
volatile uint32_t c_passes = 0;
/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800b0d0:	b590      	push	{r4, r7, lr}
 800b0d2:	b085      	sub	sp, #20
 800b0d4:	af02      	add	r7, sp, #8
    BaseType_t xHigherPriorityTaskWoken;
#if defined(BOARD_SPUDGLO_V5)
	// A is speed!
    board_init_push_button_pin_e button_pin = gpio_config_pin_lookup(GPIO_PIN_PUSH_BUTTON_A);
 800b0d6:	2025      	movs	r0, #37	; 0x25
 800b0d8:	f7ff fa9c 	bl	800a614 <gpio_config_pin_lookup>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_A;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = gpio_config_irqn_lookup(GPIO_PIN_PUSH_BUTTON_A);
 800b0e4:	2025      	movs	r0, #37	; 0x25
 800b0e6:	f7ff fa63 	bl	800a5b0 <gpio_config_irqn_lookup>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	713b      	strb	r3, [r7, #4]
    a_passes++;
 800b0ee:	4b15      	ldr	r3, [pc, #84]	; (800b144 <EXTI9_5_IRQHandler+0x74>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	3301      	adds	r3, #1
 800b0f4:	4a13      	ldr	r2, [pc, #76]	; (800b144 <EXTI9_5_IRQHandler+0x74>)
 800b0f6:	6013      	str	r3, [r2, #0]
    board_init_push_buttons_e button = PUSH_BUTTON_C;
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_C_IRQ;
    c_passes++;
#endif
    // add button irq here..
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800b0f8:	88fb      	ldrh	r3, [r7, #6]
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f7fb f93a 	bl	8006374 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800b100:	797a      	ldrb	r2, [r7, #5]
 800b102:	797b      	ldrb	r3, [r7, #5]
 800b104:	4910      	ldr	r1, [pc, #64]	; (800b148 <EXTI9_5_IRQHandler+0x78>)
 800b106:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800b10a:	490f      	ldr	r1, [pc, #60]	; (800b148 <EXTI9_5_IRQHandler+0x78>)
 800b10c:	00db      	lsls	r3, r3, #3
 800b10e:	440b      	add	r3, r1
 800b110:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800b112:	797c      	ldrb	r4, [r7, #5]
 800b114:	f7f8 fe00 	bl	8003d18 <xTaskGetTickCountFromISR>
 800b118:	4603      	mov	r3, r0
 800b11a:	4a0b      	ldr	r2, [pc, #44]	; (800b148 <EXTI9_5_IRQHandler+0x78>)
 800b11c:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800b120:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800b124:	4618      	mov	r0, r3
 800b126:	f7fa fc94 	bl	8005a52 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800b12a:	4b08      	ldr	r3, [pc, #32]	; (800b14c <EXTI9_5_IRQHandler+0x7c>)
 800b12c:	6818      	ldr	r0, [r3, #0]
 800b12e:	7979      	ldrb	r1, [r7, #5]
 800b130:	463b      	mov	r3, r7
 800b132:	9300      	str	r3, [sp, #0]
 800b134:	2300      	movs	r3, #0
 800b136:	2203      	movs	r2, #3
 800b138:	f7f9 fa0c 	bl	8004554 <xTaskGenericNotifyFromISR>
}
 800b13c:	bf00      	nop
 800b13e:	370c      	adds	r7, #12
 800b140:	46bd      	mov	sp, r7
 800b142:	bd90      	pop	{r4, r7, pc}
 800b144:	2000242c 	.word	0x2000242c
 800b148:	20000998 	.word	0x20000998
 800b14c:	2000243c 	.word	0x2000243c

0800b150 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800b150:	b480      	push	{r7}
 800b152:	b083      	sub	sp, #12
 800b154:	af00      	add	r7, sp, #0
 800b156:	4603      	mov	r3, r0
 800b158:	80fb      	strh	r3, [r7, #6]

}
 800b15a:	bf00      	nop
 800b15c:	370c      	adds	r7, #12
 800b15e:	46bd      	mov	sp, r7
 800b160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b164:	4770      	bx	lr

0800b166 <HAL_DMA_CMPLT_CALLBACK>:


void HAL_DMA_CMPLT_CALLBACK(DMA_HandleTypeDef *hdma)
{
 800b166:	b480      	push	{r7}
 800b168:	b083      	sub	sp, #12
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
    while(1);
 800b16e:	e7fe      	b.n	800b16e <HAL_DMA_CMPLT_CALLBACK+0x8>

0800b170 <HAL_TIM_PWM_PulseFinishedCallback>:
bool gb_dma_cmplt_strip_1 = true;
bool gb_dma_cmplt_strip_2 = true;
bool gb_dma_cmplt_strip_3 = true;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b082      	sub	sp, #8
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
    switch (htim->Channel)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	7f1b      	ldrb	r3, [r3, #28]
 800b17c:	2b04      	cmp	r3, #4
 800b17e:	d016      	beq.n	800b1ae <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
 800b180:	2b04      	cmp	r3, #4
 800b182:	dc1c      	bgt.n	800b1be <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
 800b184:	2b01      	cmp	r3, #1
 800b186:	d002      	beq.n	800b18e <HAL_TIM_PWM_PulseFinishedCallback+0x1e>
 800b188:	2b02      	cmp	r3, #2
 800b18a:	d008      	beq.n	800b19e <HAL_TIM_PWM_PulseFinishedCallback+0x2e>
        case HAL_TIM_ACTIVE_CHANNEL_3:
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
            gb_dma_cmplt_strip_3 = true;
        break;
        default:
        break;
 800b18c:	e017      	b.n	800b1be <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 800b18e:	2100      	movs	r1, #0
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f7fc ff93 	bl	80080bc <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_1 = true;
 800b196:	4b0c      	ldr	r3, [pc, #48]	; (800b1c8 <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 800b198:	2201      	movs	r2, #1
 800b19a:	701a      	strb	r2, [r3, #0]
        break;
 800b19c:	e010      	b.n	800b1c0 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_2);
 800b19e:	2104      	movs	r1, #4
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f7fc ff8b 	bl	80080bc <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_2 = true;
 800b1a6:	4b09      	ldr	r3, [pc, #36]	; (800b1cc <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	701a      	strb	r2, [r3, #0]
        break;
 800b1ac:	e008      	b.n	800b1c0 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
 800b1ae:	2108      	movs	r1, #8
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f7fc ff83 	bl	80080bc <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_3 = true;
 800b1b6:	4b06      	ldr	r3, [pc, #24]	; (800b1d0 <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 800b1b8:	2201      	movs	r2, #1
 800b1ba:	701a      	strb	r2, [r3, #0]
        break;
 800b1bc:	e000      	b.n	800b1c0 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
        break;
 800b1be:	bf00      	nop
    }
}
 800b1c0:	bf00      	nop
 800b1c2:	3708      	adds	r7, #8
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}
 800b1c8:	20000091 	.word	0x20000091
 800b1cc:	20000092 	.word	0x20000092
 800b1d0:	20000093 	.word	0x20000093

0800b1d4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&g_hdma_tim1_ch1);
 800b1d8:	4802      	ldr	r0, [pc, #8]	; (800b1e4 <DMA1_Channel2_IRQHandler+0x10>)
 800b1da:	f7fa fdfa 	bl	8005dd2 <HAL_DMA_IRQHandler>
}
 800b1de:	bf00      	nop
 800b1e0:	bd80      	pop	{r7, pc}
 800b1e2:	bf00      	nop
 800b1e4:	200022e4 	.word	0x200022e4

0800b1e8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&g_hdma_tim1_ch2);
 800b1ec:	4802      	ldr	r0, [pc, #8]	; (800b1f8 <DMA1_Channel3_IRQHandler+0x10>)
 800b1ee:	f7fa fdf0 	bl	8005dd2 <HAL_DMA_IRQHandler>
}
 800b1f2:	bf00      	nop
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	bf00      	nop
 800b1f8:	2000232c 	.word	0x2000232c

0800b1fc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	af00      	add	r7, sp, #0
    //HAL_DMA_IRQHandler(&hdma_tim15_ch1_up_trig_com);
}
 800b200:	bf00      	nop
 800b202:	46bd      	mov	sp, r7
 800b204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b208:	4770      	bx	lr

0800b20a <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800b20a:	b480      	push	{r7}
 800b20c:	af00      	add	r7, sp, #0
    //HAL_DMA_IRQHandler(&hdma_tim16_ch1_up);
}
 800b20e:	bf00      	nop
 800b210:	46bd      	mov	sp, r7
 800b212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b216:	4770      	bx	lr

0800b218 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&g_hdma_tim1_ch3);
 800b21c:	4802      	ldr	r0, [pc, #8]	; (800b228 <DMA1_Channel7_IRQHandler+0x10>)
 800b21e:	f7fa fdd8 	bl	8005dd2 <HAL_DMA_IRQHandler>
}
 800b222:	bf00      	nop
 800b224:	bd80      	pop	{r7, pc}
 800b226:	bf00      	nop
 800b228:	20002374 	.word	0x20002374

0800b22c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b22c:	b480      	push	{r7}
 800b22e:	af00      	add	r7, sp, #0
	return 1;
 800b230:	2301      	movs	r3, #1
}
 800b232:	4618      	mov	r0, r3
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr

0800b23c <_kill>:

int _kill(int pid, int sig)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800b246:	f000 fb6d 	bl	800b924 <__errno>
 800b24a:	4603      	mov	r3, r0
 800b24c:	2216      	movs	r2, #22
 800b24e:	601a      	str	r2, [r3, #0]
	return -1;
 800b250:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b254:	4618      	mov	r0, r3
 800b256:	3708      	adds	r7, #8
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}

0800b25c <_exit>:

void _exit (int status)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b082      	sub	sp, #8
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800b264:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f7ff ffe7 	bl	800b23c <_kill>
	while (1) {}		/* Make sure we hang here */
 800b26e:	e7fe      	b.n	800b26e <_exit+0x12>

0800b270 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b086      	sub	sp, #24
 800b274:	af00      	add	r7, sp, #0
 800b276:	60f8      	str	r0, [r7, #12]
 800b278:	60b9      	str	r1, [r7, #8]
 800b27a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b27c:	2300      	movs	r3, #0
 800b27e:	617b      	str	r3, [r7, #20]
 800b280:	e00a      	b.n	800b298 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800b282:	f3af 8000 	nop.w
 800b286:	4601      	mov	r1, r0
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	1c5a      	adds	r2, r3, #1
 800b28c:	60ba      	str	r2, [r7, #8]
 800b28e:	b2ca      	uxtb	r2, r1
 800b290:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	3301      	adds	r3, #1
 800b296:	617b      	str	r3, [r7, #20]
 800b298:	697a      	ldr	r2, [r7, #20]
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	429a      	cmp	r2, r3
 800b29e:	dbf0      	blt.n	800b282 <_read+0x12>
	}

return len;
 800b2a0:	687b      	ldr	r3, [r7, #4]
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3718      	adds	r7, #24
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}

0800b2aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b2aa:	b580      	push	{r7, lr}
 800b2ac:	b086      	sub	sp, #24
 800b2ae:	af00      	add	r7, sp, #0
 800b2b0:	60f8      	str	r0, [r7, #12]
 800b2b2:	60b9      	str	r1, [r7, #8]
 800b2b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	617b      	str	r3, [r7, #20]
 800b2ba:	e009      	b.n	800b2d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	1c5a      	adds	r2, r3, #1
 800b2c0:	60ba      	str	r2, [r7, #8]
 800b2c2:	781b      	ldrb	r3, [r3, #0]
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	3301      	adds	r3, #1
 800b2ce:	617b      	str	r3, [r7, #20]
 800b2d0:	697a      	ldr	r2, [r7, #20]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	429a      	cmp	r2, r3
 800b2d6:	dbf1      	blt.n	800b2bc <_write+0x12>
	}
	return len;
 800b2d8:	687b      	ldr	r3, [r7, #4]
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3718      	adds	r7, #24
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}

0800b2e2 <_close>:

int _close(int file)
{
 800b2e2:	b480      	push	{r7}
 800b2e4:	b083      	sub	sp, #12
 800b2e6:	af00      	add	r7, sp, #0
 800b2e8:	6078      	str	r0, [r7, #4]
	return -1;
 800b2ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	370c      	adds	r7, #12
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f8:	4770      	bx	lr

0800b2fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b2fa:	b480      	push	{r7}
 800b2fc:	b083      	sub	sp, #12
 800b2fe:	af00      	add	r7, sp, #0
 800b300:	6078      	str	r0, [r7, #4]
 800b302:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b30a:	605a      	str	r2, [r3, #4]
	return 0;
 800b30c:	2300      	movs	r3, #0
}
 800b30e:	4618      	mov	r0, r3
 800b310:	370c      	adds	r7, #12
 800b312:	46bd      	mov	sp, r7
 800b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b318:	4770      	bx	lr

0800b31a <_isatty>:

int _isatty(int file)
{
 800b31a:	b480      	push	{r7}
 800b31c:	b083      	sub	sp, #12
 800b31e:	af00      	add	r7, sp, #0
 800b320:	6078      	str	r0, [r7, #4]
	return 1;
 800b322:	2301      	movs	r3, #1
}
 800b324:	4618      	mov	r0, r3
 800b326:	370c      	adds	r7, #12
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr

0800b330 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b330:	b480      	push	{r7}
 800b332:	b085      	sub	sp, #20
 800b334:	af00      	add	r7, sp, #0
 800b336:	60f8      	str	r0, [r7, #12]
 800b338:	60b9      	str	r1, [r7, #8]
 800b33a:	607a      	str	r2, [r7, #4]
	return 0;
 800b33c:	2300      	movs	r3, #0
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3714      	adds	r7, #20
 800b342:	46bd      	mov	sp, r7
 800b344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b348:	4770      	bx	lr
	...

0800b34c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b086      	sub	sp, #24
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b354:	4a14      	ldr	r2, [pc, #80]	; (800b3a8 <_sbrk+0x5c>)
 800b356:	4b15      	ldr	r3, [pc, #84]	; (800b3ac <_sbrk+0x60>)
 800b358:	1ad3      	subs	r3, r2, r3
 800b35a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b360:	4b13      	ldr	r3, [pc, #76]	; (800b3b0 <_sbrk+0x64>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d102      	bne.n	800b36e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b368:	4b11      	ldr	r3, [pc, #68]	; (800b3b0 <_sbrk+0x64>)
 800b36a:	4a12      	ldr	r2, [pc, #72]	; (800b3b4 <_sbrk+0x68>)
 800b36c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b36e:	4b10      	ldr	r3, [pc, #64]	; (800b3b0 <_sbrk+0x64>)
 800b370:	681a      	ldr	r2, [r3, #0]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	4413      	add	r3, r2
 800b376:	693a      	ldr	r2, [r7, #16]
 800b378:	429a      	cmp	r2, r3
 800b37a:	d207      	bcs.n	800b38c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b37c:	f000 fad2 	bl	800b924 <__errno>
 800b380:	4603      	mov	r3, r0
 800b382:	220c      	movs	r2, #12
 800b384:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b386:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b38a:	e009      	b.n	800b3a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b38c:	4b08      	ldr	r3, [pc, #32]	; (800b3b0 <_sbrk+0x64>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b392:	4b07      	ldr	r3, [pc, #28]	; (800b3b0 <_sbrk+0x64>)
 800b394:	681a      	ldr	r2, [r3, #0]
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	4413      	add	r3, r2
 800b39a:	4a05      	ldr	r2, [pc, #20]	; (800b3b0 <_sbrk+0x64>)
 800b39c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b39e:	68fb      	ldr	r3, [r7, #12]
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3718      	adds	r7, #24
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}
 800b3a8:	20010000 	.word	0x20010000
 800b3ac:	00000400 	.word	0x00000400
 800b3b0:	20002434 	.word	0x20002434
 800b3b4:	20003648 	.word	0x20003648

0800b3b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800b3bc:	4b06      	ldr	r3, [pc, #24]	; (800b3d8 <SystemInit+0x20>)
 800b3be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3c2:	4a05      	ldr	r2, [pc, #20]	; (800b3d8 <SystemInit+0x20>)
 800b3c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b3c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800b3cc:	bf00      	nop
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr
 800b3d6:	bf00      	nop
 800b3d8:	e000ed00 	.word	0xe000ed00

0800b3dc <board_init_peripheral_setup>:

#if defined(BOARD_SPUDGLO_V5)


void board_init_peripheral_setup(void)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	af00      	add	r7, sp, #0
	uart_config_hal_setup();
 800b3e0:	f7ff fb2e 	bl	800aa40 <uart_config_hal_setup>
	spi_config_hal_setup();
 800b3e4:	f7ff fa5e 	bl	800a8a4 <spi_config_hal_setup>
}
 800b3e8:	bf00      	nop
 800b3ea:	bd80      	pop	{r7, pc}

0800b3ec <random_num>:
#include <stdint.h>
#include <stdlib.h>
#include "numbers.h"

uint32_t random_num(uint32_t min, uint32_t max)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b082      	sub	sp, #8
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	6039      	str	r1, [r7, #0]
   return min + rand() % (max - min);
 800b3f6:	f000 f951 	bl	800b69c <rand>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	461a      	mov	r2, r3
 800b3fe:	6839      	ldr	r1, [r7, #0]
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	1acb      	subs	r3, r1, r3
 800b404:	fbb2 f1f3 	udiv	r1, r2, r3
 800b408:	fb01 f303 	mul.w	r3, r1, r3
 800b40c:	1ad2      	subs	r2, r2, r3
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	4413      	add	r3, r2
}
 800b412:	4618      	mov	r0, r3
 800b414:	3708      	adds	r7, #8
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}

0800b41a <main>:
#include "task_create.h"
#include "animate_led.h"
#include "flash_info.h"

int main(void)
{
 800b41a:	b580      	push	{r7, lr}
 800b41c:	af00      	add	r7, sp, #0

    board_init_common_board_init();
 800b41e:	f7ff f881 	bl	800a524 <board_init_common_board_init>
    //flash_info_init();
    task_create();
 800b422:	f000 f807 	bl	800b434 <task_create>
	//semaphore_create();
    reset_ws2812b();
 800b426:	f7f6 faeb 	bl	8001a00 <reset_ws2812b>
	osKernelStart();
 800b42a:	f7f7 fad5 	bl	80029d8 <osKernelStart>
 800b42e:	2300      	movs	r3, #0
}
 800b430:	4618      	mov	r0, r3
 800b432:	bd80      	pop	{r7, pc}

0800b434 <task_create>:
	.cb_size = sizeof(g_dma_transfer_control_block),
	.priority = (osPriority_t) osPriorityNormal,
};

void task_create(void)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	af00      	add	r7, sp, #0
    osKernelInitialize();
 800b438:	f7f7 faaa 	bl	8002990 <osKernelInitialize>
	g_button_press_handle = osThreadNew(task_button_press, NULL, &g_task_button_press_attributes);
 800b43c:	4a0a      	ldr	r2, [pc, #40]	; (800b468 <task_create+0x34>)
 800b43e:	2100      	movs	r1, #0
 800b440:	480a      	ldr	r0, [pc, #40]	; (800b46c <task_create+0x38>)
 800b442:	f7f7 faef 	bl	8002a24 <osThreadNew>
 800b446:	4603      	mov	r3, r0
 800b448:	4a09      	ldr	r2, [pc, #36]	; (800b470 <task_create+0x3c>)
 800b44a:	6013      	str	r3, [r2, #0]
    //g_dma_transfer_handle = osThreadNew(task_dma_transfer, NULL, &g_task_dma_transfer_attributes);
    g_led_strip_1_ctrl_handle = osThreadNew(task_led_ctrl_strip_one, NULL, &g_task_strip_1_led_ctrl_attributes);
 800b44c:	4a09      	ldr	r2, [pc, #36]	; (800b474 <task_create+0x40>)
 800b44e:	2100      	movs	r1, #0
 800b450:	4809      	ldr	r0, [pc, #36]	; (800b478 <task_create+0x44>)
 800b452:	f7f7 fae7 	bl	8002a24 <osThreadNew>
 800b456:	4603      	mov	r3, r0
 800b458:	4a08      	ldr	r2, [pc, #32]	; (800b47c <task_create+0x48>)
 800b45a:	6013      	str	r3, [r2, #0]
    g_tasks_running = true; // technically will be running after task scheduler started
 800b45c:	4b08      	ldr	r3, [pc, #32]	; (800b480 <task_create+0x4c>)
 800b45e:	2201      	movs	r2, #1
 800b460:	701a      	strb	r2, [r3, #0]



}
 800b462:	bf00      	nop
 800b464:	bd80      	pop	{r7, pc}
 800b466:	bf00      	nop
 800b468:	0800cb50 	.word	0x0800cb50
 800b46c:	08002055 	.word	0x08002055
 800b470:	2000243c 	.word	0x2000243c
 800b474:	0800cb74 	.word	0x0800cb74
 800b478:	0800234d 	.word	0x0800234d
 800b47c:	20002438 	.word	0x20002438
 800b480:	200034f8 	.word	0x200034f8

0800b484 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800b484:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b4bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800b488:	f7ff ff96 	bl	800b3b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800b48c:	480c      	ldr	r0, [pc, #48]	; (800b4c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800b48e:	490d      	ldr	r1, [pc, #52]	; (800b4c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800b490:	4a0d      	ldr	r2, [pc, #52]	; (800b4c8 <LoopForever+0xe>)
  movs r3, #0
 800b492:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b494:	e002      	b.n	800b49c <LoopCopyDataInit>

0800b496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b49a:	3304      	adds	r3, #4

0800b49c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b49c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b49e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b4a0:	d3f9      	bcc.n	800b496 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b4a2:	4a0a      	ldr	r2, [pc, #40]	; (800b4cc <LoopForever+0x12>)
  ldr r4, =_ebss
 800b4a4:	4c0a      	ldr	r4, [pc, #40]	; (800b4d0 <LoopForever+0x16>)
  movs r3, #0
 800b4a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b4a8:	e001      	b.n	800b4ae <LoopFillZerobss>

0800b4aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b4aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b4ac:	3204      	adds	r2, #4

0800b4ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b4ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b4b0:	d3fb      	bcc.n	800b4aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800b4b2:	f000 fa3d 	bl	800b930 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800b4b6:	f7ff ffb0 	bl	800b41a <main>

0800b4ba <LoopForever>:

LoopForever:
    b LoopForever
 800b4ba:	e7fe      	b.n	800b4ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800b4bc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800b4c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b4c4:	20000268 	.word	0x20000268
  ldr r2, =_sidata
 800b4c8:	0800cc88 	.word	0x0800cc88
  ldr r2, =_sbss
 800b4cc:	20000268 	.word	0x20000268
  ldr r4, =_ebss
 800b4d0:	20003648 	.word	0x20003648

0800b4d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800b4d4:	e7fe      	b.n	800b4d4 <ADC1_IRQHandler>
	...

0800b4d8 <malloc>:
 800b4d8:	4b02      	ldr	r3, [pc, #8]	; (800b4e4 <malloc+0xc>)
 800b4da:	4601      	mov	r1, r0
 800b4dc:	6818      	ldr	r0, [r3, #0]
 800b4de:	f000 b823 	b.w	800b528 <_malloc_r>
 800b4e2:	bf00      	nop
 800b4e4:	20000264 	.word	0x20000264

0800b4e8 <sbrk_aligned>:
 800b4e8:	b570      	push	{r4, r5, r6, lr}
 800b4ea:	4e0e      	ldr	r6, [pc, #56]	; (800b524 <sbrk_aligned+0x3c>)
 800b4ec:	460c      	mov	r4, r1
 800b4ee:	6831      	ldr	r1, [r6, #0]
 800b4f0:	4605      	mov	r5, r0
 800b4f2:	b911      	cbnz	r1, 800b4fa <sbrk_aligned+0x12>
 800b4f4:	f000 fa06 	bl	800b904 <_sbrk_r>
 800b4f8:	6030      	str	r0, [r6, #0]
 800b4fa:	4621      	mov	r1, r4
 800b4fc:	4628      	mov	r0, r5
 800b4fe:	f000 fa01 	bl	800b904 <_sbrk_r>
 800b502:	1c43      	adds	r3, r0, #1
 800b504:	d00a      	beq.n	800b51c <sbrk_aligned+0x34>
 800b506:	1cc4      	adds	r4, r0, #3
 800b508:	f024 0403 	bic.w	r4, r4, #3
 800b50c:	42a0      	cmp	r0, r4
 800b50e:	d007      	beq.n	800b520 <sbrk_aligned+0x38>
 800b510:	1a21      	subs	r1, r4, r0
 800b512:	4628      	mov	r0, r5
 800b514:	f000 f9f6 	bl	800b904 <_sbrk_r>
 800b518:	3001      	adds	r0, #1
 800b51a:	d101      	bne.n	800b520 <sbrk_aligned+0x38>
 800b51c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b520:	4620      	mov	r0, r4
 800b522:	bd70      	pop	{r4, r5, r6, pc}
 800b524:	20003500 	.word	0x20003500

0800b528 <_malloc_r>:
 800b528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b52c:	1ccd      	adds	r5, r1, #3
 800b52e:	f025 0503 	bic.w	r5, r5, #3
 800b532:	3508      	adds	r5, #8
 800b534:	2d0c      	cmp	r5, #12
 800b536:	bf38      	it	cc
 800b538:	250c      	movcc	r5, #12
 800b53a:	2d00      	cmp	r5, #0
 800b53c:	4607      	mov	r7, r0
 800b53e:	db01      	blt.n	800b544 <_malloc_r+0x1c>
 800b540:	42a9      	cmp	r1, r5
 800b542:	d905      	bls.n	800b550 <_malloc_r+0x28>
 800b544:	230c      	movs	r3, #12
 800b546:	603b      	str	r3, [r7, #0]
 800b548:	2600      	movs	r6, #0
 800b54a:	4630      	mov	r0, r6
 800b54c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b550:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b624 <_malloc_r+0xfc>
 800b554:	f000 f868 	bl	800b628 <__malloc_lock>
 800b558:	f8d8 3000 	ldr.w	r3, [r8]
 800b55c:	461c      	mov	r4, r3
 800b55e:	bb5c      	cbnz	r4, 800b5b8 <_malloc_r+0x90>
 800b560:	4629      	mov	r1, r5
 800b562:	4638      	mov	r0, r7
 800b564:	f7ff ffc0 	bl	800b4e8 <sbrk_aligned>
 800b568:	1c43      	adds	r3, r0, #1
 800b56a:	4604      	mov	r4, r0
 800b56c:	d155      	bne.n	800b61a <_malloc_r+0xf2>
 800b56e:	f8d8 4000 	ldr.w	r4, [r8]
 800b572:	4626      	mov	r6, r4
 800b574:	2e00      	cmp	r6, #0
 800b576:	d145      	bne.n	800b604 <_malloc_r+0xdc>
 800b578:	2c00      	cmp	r4, #0
 800b57a:	d048      	beq.n	800b60e <_malloc_r+0xe6>
 800b57c:	6823      	ldr	r3, [r4, #0]
 800b57e:	4631      	mov	r1, r6
 800b580:	4638      	mov	r0, r7
 800b582:	eb04 0903 	add.w	r9, r4, r3
 800b586:	f000 f9bd 	bl	800b904 <_sbrk_r>
 800b58a:	4581      	cmp	r9, r0
 800b58c:	d13f      	bne.n	800b60e <_malloc_r+0xe6>
 800b58e:	6821      	ldr	r1, [r4, #0]
 800b590:	1a6d      	subs	r5, r5, r1
 800b592:	4629      	mov	r1, r5
 800b594:	4638      	mov	r0, r7
 800b596:	f7ff ffa7 	bl	800b4e8 <sbrk_aligned>
 800b59a:	3001      	adds	r0, #1
 800b59c:	d037      	beq.n	800b60e <_malloc_r+0xe6>
 800b59e:	6823      	ldr	r3, [r4, #0]
 800b5a0:	442b      	add	r3, r5
 800b5a2:	6023      	str	r3, [r4, #0]
 800b5a4:	f8d8 3000 	ldr.w	r3, [r8]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d038      	beq.n	800b61e <_malloc_r+0xf6>
 800b5ac:	685a      	ldr	r2, [r3, #4]
 800b5ae:	42a2      	cmp	r2, r4
 800b5b0:	d12b      	bne.n	800b60a <_malloc_r+0xe2>
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	605a      	str	r2, [r3, #4]
 800b5b6:	e00f      	b.n	800b5d8 <_malloc_r+0xb0>
 800b5b8:	6822      	ldr	r2, [r4, #0]
 800b5ba:	1b52      	subs	r2, r2, r5
 800b5bc:	d41f      	bmi.n	800b5fe <_malloc_r+0xd6>
 800b5be:	2a0b      	cmp	r2, #11
 800b5c0:	d917      	bls.n	800b5f2 <_malloc_r+0xca>
 800b5c2:	1961      	adds	r1, r4, r5
 800b5c4:	42a3      	cmp	r3, r4
 800b5c6:	6025      	str	r5, [r4, #0]
 800b5c8:	bf18      	it	ne
 800b5ca:	6059      	strne	r1, [r3, #4]
 800b5cc:	6863      	ldr	r3, [r4, #4]
 800b5ce:	bf08      	it	eq
 800b5d0:	f8c8 1000 	streq.w	r1, [r8]
 800b5d4:	5162      	str	r2, [r4, r5]
 800b5d6:	604b      	str	r3, [r1, #4]
 800b5d8:	4638      	mov	r0, r7
 800b5da:	f104 060b 	add.w	r6, r4, #11
 800b5de:	f000 f829 	bl	800b634 <__malloc_unlock>
 800b5e2:	f026 0607 	bic.w	r6, r6, #7
 800b5e6:	1d23      	adds	r3, r4, #4
 800b5e8:	1af2      	subs	r2, r6, r3
 800b5ea:	d0ae      	beq.n	800b54a <_malloc_r+0x22>
 800b5ec:	1b9b      	subs	r3, r3, r6
 800b5ee:	50a3      	str	r3, [r4, r2]
 800b5f0:	e7ab      	b.n	800b54a <_malloc_r+0x22>
 800b5f2:	42a3      	cmp	r3, r4
 800b5f4:	6862      	ldr	r2, [r4, #4]
 800b5f6:	d1dd      	bne.n	800b5b4 <_malloc_r+0x8c>
 800b5f8:	f8c8 2000 	str.w	r2, [r8]
 800b5fc:	e7ec      	b.n	800b5d8 <_malloc_r+0xb0>
 800b5fe:	4623      	mov	r3, r4
 800b600:	6864      	ldr	r4, [r4, #4]
 800b602:	e7ac      	b.n	800b55e <_malloc_r+0x36>
 800b604:	4634      	mov	r4, r6
 800b606:	6876      	ldr	r6, [r6, #4]
 800b608:	e7b4      	b.n	800b574 <_malloc_r+0x4c>
 800b60a:	4613      	mov	r3, r2
 800b60c:	e7cc      	b.n	800b5a8 <_malloc_r+0x80>
 800b60e:	230c      	movs	r3, #12
 800b610:	603b      	str	r3, [r7, #0]
 800b612:	4638      	mov	r0, r7
 800b614:	f000 f80e 	bl	800b634 <__malloc_unlock>
 800b618:	e797      	b.n	800b54a <_malloc_r+0x22>
 800b61a:	6025      	str	r5, [r4, #0]
 800b61c:	e7dc      	b.n	800b5d8 <_malloc_r+0xb0>
 800b61e:	605b      	str	r3, [r3, #4]
 800b620:	deff      	udf	#255	; 0xff
 800b622:	bf00      	nop
 800b624:	200034fc 	.word	0x200034fc

0800b628 <__malloc_lock>:
 800b628:	4801      	ldr	r0, [pc, #4]	; (800b630 <__malloc_lock+0x8>)
 800b62a:	f000 b9a6 	b.w	800b97a <__retarget_lock_acquire_recursive>
 800b62e:	bf00      	nop
 800b630:	20003640 	.word	0x20003640

0800b634 <__malloc_unlock>:
 800b634:	4801      	ldr	r0, [pc, #4]	; (800b63c <__malloc_unlock+0x8>)
 800b636:	f000 b9a1 	b.w	800b97c <__retarget_lock_release_recursive>
 800b63a:	bf00      	nop
 800b63c:	20003640 	.word	0x20003640

0800b640 <srand>:
 800b640:	b538      	push	{r3, r4, r5, lr}
 800b642:	4b10      	ldr	r3, [pc, #64]	; (800b684 <srand+0x44>)
 800b644:	681d      	ldr	r5, [r3, #0]
 800b646:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b648:	4604      	mov	r4, r0
 800b64a:	b9b3      	cbnz	r3, 800b67a <srand+0x3a>
 800b64c:	2018      	movs	r0, #24
 800b64e:	f7ff ff43 	bl	800b4d8 <malloc>
 800b652:	4602      	mov	r2, r0
 800b654:	6328      	str	r0, [r5, #48]	; 0x30
 800b656:	b920      	cbnz	r0, 800b662 <srand+0x22>
 800b658:	4b0b      	ldr	r3, [pc, #44]	; (800b688 <srand+0x48>)
 800b65a:	480c      	ldr	r0, [pc, #48]	; (800b68c <srand+0x4c>)
 800b65c:	2146      	movs	r1, #70	; 0x46
 800b65e:	f000 f99d 	bl	800b99c <__assert_func>
 800b662:	490b      	ldr	r1, [pc, #44]	; (800b690 <srand+0x50>)
 800b664:	4b0b      	ldr	r3, [pc, #44]	; (800b694 <srand+0x54>)
 800b666:	e9c0 1300 	strd	r1, r3, [r0]
 800b66a:	4b0b      	ldr	r3, [pc, #44]	; (800b698 <srand+0x58>)
 800b66c:	6083      	str	r3, [r0, #8]
 800b66e:	230b      	movs	r3, #11
 800b670:	8183      	strh	r3, [r0, #12]
 800b672:	2100      	movs	r1, #0
 800b674:	2001      	movs	r0, #1
 800b676:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b67a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b67c:	2200      	movs	r2, #0
 800b67e:	611c      	str	r4, [r3, #16]
 800b680:	615a      	str	r2, [r3, #20]
 800b682:	bd38      	pop	{r3, r4, r5, pc}
 800b684:	20000264 	.word	0x20000264
 800b688:	0800cb98 	.word	0x0800cb98
 800b68c:	0800cbaf 	.word	0x0800cbaf
 800b690:	abcd330e 	.word	0xabcd330e
 800b694:	e66d1234 	.word	0xe66d1234
 800b698:	0005deec 	.word	0x0005deec

0800b69c <rand>:
 800b69c:	4b16      	ldr	r3, [pc, #88]	; (800b6f8 <rand+0x5c>)
 800b69e:	b510      	push	{r4, lr}
 800b6a0:	681c      	ldr	r4, [r3, #0]
 800b6a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b6a4:	b9b3      	cbnz	r3, 800b6d4 <rand+0x38>
 800b6a6:	2018      	movs	r0, #24
 800b6a8:	f7ff ff16 	bl	800b4d8 <malloc>
 800b6ac:	4602      	mov	r2, r0
 800b6ae:	6320      	str	r0, [r4, #48]	; 0x30
 800b6b0:	b920      	cbnz	r0, 800b6bc <rand+0x20>
 800b6b2:	4b12      	ldr	r3, [pc, #72]	; (800b6fc <rand+0x60>)
 800b6b4:	4812      	ldr	r0, [pc, #72]	; (800b700 <rand+0x64>)
 800b6b6:	2152      	movs	r1, #82	; 0x52
 800b6b8:	f000 f970 	bl	800b99c <__assert_func>
 800b6bc:	4911      	ldr	r1, [pc, #68]	; (800b704 <rand+0x68>)
 800b6be:	4b12      	ldr	r3, [pc, #72]	; (800b708 <rand+0x6c>)
 800b6c0:	e9c0 1300 	strd	r1, r3, [r0]
 800b6c4:	4b11      	ldr	r3, [pc, #68]	; (800b70c <rand+0x70>)
 800b6c6:	6083      	str	r3, [r0, #8]
 800b6c8:	230b      	movs	r3, #11
 800b6ca:	8183      	strh	r3, [r0, #12]
 800b6cc:	2100      	movs	r1, #0
 800b6ce:	2001      	movs	r0, #1
 800b6d0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b6d4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b6d6:	480e      	ldr	r0, [pc, #56]	; (800b710 <rand+0x74>)
 800b6d8:	690b      	ldr	r3, [r1, #16]
 800b6da:	694c      	ldr	r4, [r1, #20]
 800b6dc:	4a0d      	ldr	r2, [pc, #52]	; (800b714 <rand+0x78>)
 800b6de:	4358      	muls	r0, r3
 800b6e0:	fb02 0004 	mla	r0, r2, r4, r0
 800b6e4:	fba3 3202 	umull	r3, r2, r3, r2
 800b6e8:	3301      	adds	r3, #1
 800b6ea:	eb40 0002 	adc.w	r0, r0, r2
 800b6ee:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800b6f2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b6f6:	bd10      	pop	{r4, pc}
 800b6f8:	20000264 	.word	0x20000264
 800b6fc:	0800cb98 	.word	0x0800cb98
 800b700:	0800cbaf 	.word	0x0800cbaf
 800b704:	abcd330e 	.word	0xabcd330e
 800b708:	e66d1234 	.word	0xe66d1234
 800b70c:	0005deec 	.word	0x0005deec
 800b710:	5851f42d 	.word	0x5851f42d
 800b714:	4c957f2d 	.word	0x4c957f2d

0800b718 <std>:
 800b718:	2300      	movs	r3, #0
 800b71a:	b510      	push	{r4, lr}
 800b71c:	4604      	mov	r4, r0
 800b71e:	e9c0 3300 	strd	r3, r3, [r0]
 800b722:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b726:	6083      	str	r3, [r0, #8]
 800b728:	8181      	strh	r1, [r0, #12]
 800b72a:	6643      	str	r3, [r0, #100]	; 0x64
 800b72c:	81c2      	strh	r2, [r0, #14]
 800b72e:	6183      	str	r3, [r0, #24]
 800b730:	4619      	mov	r1, r3
 800b732:	2208      	movs	r2, #8
 800b734:	305c      	adds	r0, #92	; 0x5c
 800b736:	f000 f8b1 	bl	800b89c <memset>
 800b73a:	4b0d      	ldr	r3, [pc, #52]	; (800b770 <std+0x58>)
 800b73c:	6263      	str	r3, [r4, #36]	; 0x24
 800b73e:	4b0d      	ldr	r3, [pc, #52]	; (800b774 <std+0x5c>)
 800b740:	62a3      	str	r3, [r4, #40]	; 0x28
 800b742:	4b0d      	ldr	r3, [pc, #52]	; (800b778 <std+0x60>)
 800b744:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b746:	4b0d      	ldr	r3, [pc, #52]	; (800b77c <std+0x64>)
 800b748:	6323      	str	r3, [r4, #48]	; 0x30
 800b74a:	4b0d      	ldr	r3, [pc, #52]	; (800b780 <std+0x68>)
 800b74c:	6224      	str	r4, [r4, #32]
 800b74e:	429c      	cmp	r4, r3
 800b750:	d006      	beq.n	800b760 <std+0x48>
 800b752:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b756:	4294      	cmp	r4, r2
 800b758:	d002      	beq.n	800b760 <std+0x48>
 800b75a:	33d0      	adds	r3, #208	; 0xd0
 800b75c:	429c      	cmp	r4, r3
 800b75e:	d105      	bne.n	800b76c <std+0x54>
 800b760:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b768:	f000 b906 	b.w	800b978 <__retarget_lock_init_recursive>
 800b76c:	bd10      	pop	{r4, pc}
 800b76e:	bf00      	nop
 800b770:	0800bbcd 	.word	0x0800bbcd
 800b774:	0800bbef 	.word	0x0800bbef
 800b778:	0800bc27 	.word	0x0800bc27
 800b77c:	0800bc4b 	.word	0x0800bc4b
 800b780:	20003504 	.word	0x20003504

0800b784 <stdio_exit_handler>:
 800b784:	4a02      	ldr	r2, [pc, #8]	; (800b790 <stdio_exit_handler+0xc>)
 800b786:	4903      	ldr	r1, [pc, #12]	; (800b794 <stdio_exit_handler+0x10>)
 800b788:	4803      	ldr	r0, [pc, #12]	; (800b798 <stdio_exit_handler+0x14>)
 800b78a:	f000 b869 	b.w	800b860 <_fwalk_sglue>
 800b78e:	bf00      	nop
 800b790:	2000020c 	.word	0x2000020c
 800b794:	0800bb7d 	.word	0x0800bb7d
 800b798:	20000218 	.word	0x20000218

0800b79c <cleanup_stdio>:
 800b79c:	6841      	ldr	r1, [r0, #4]
 800b79e:	4b0c      	ldr	r3, [pc, #48]	; (800b7d0 <cleanup_stdio+0x34>)
 800b7a0:	4299      	cmp	r1, r3
 800b7a2:	b510      	push	{r4, lr}
 800b7a4:	4604      	mov	r4, r0
 800b7a6:	d001      	beq.n	800b7ac <cleanup_stdio+0x10>
 800b7a8:	f000 f9e8 	bl	800bb7c <_fflush_r>
 800b7ac:	68a1      	ldr	r1, [r4, #8]
 800b7ae:	4b09      	ldr	r3, [pc, #36]	; (800b7d4 <cleanup_stdio+0x38>)
 800b7b0:	4299      	cmp	r1, r3
 800b7b2:	d002      	beq.n	800b7ba <cleanup_stdio+0x1e>
 800b7b4:	4620      	mov	r0, r4
 800b7b6:	f000 f9e1 	bl	800bb7c <_fflush_r>
 800b7ba:	68e1      	ldr	r1, [r4, #12]
 800b7bc:	4b06      	ldr	r3, [pc, #24]	; (800b7d8 <cleanup_stdio+0x3c>)
 800b7be:	4299      	cmp	r1, r3
 800b7c0:	d004      	beq.n	800b7cc <cleanup_stdio+0x30>
 800b7c2:	4620      	mov	r0, r4
 800b7c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7c8:	f000 b9d8 	b.w	800bb7c <_fflush_r>
 800b7cc:	bd10      	pop	{r4, pc}
 800b7ce:	bf00      	nop
 800b7d0:	20003504 	.word	0x20003504
 800b7d4:	2000356c 	.word	0x2000356c
 800b7d8:	200035d4 	.word	0x200035d4

0800b7dc <global_stdio_init.part.0>:
 800b7dc:	b510      	push	{r4, lr}
 800b7de:	4b0b      	ldr	r3, [pc, #44]	; (800b80c <global_stdio_init.part.0+0x30>)
 800b7e0:	4c0b      	ldr	r4, [pc, #44]	; (800b810 <global_stdio_init.part.0+0x34>)
 800b7e2:	4a0c      	ldr	r2, [pc, #48]	; (800b814 <global_stdio_init.part.0+0x38>)
 800b7e4:	601a      	str	r2, [r3, #0]
 800b7e6:	4620      	mov	r0, r4
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	2104      	movs	r1, #4
 800b7ec:	f7ff ff94 	bl	800b718 <std>
 800b7f0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b7f4:	2201      	movs	r2, #1
 800b7f6:	2109      	movs	r1, #9
 800b7f8:	f7ff ff8e 	bl	800b718 <std>
 800b7fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b800:	2202      	movs	r2, #2
 800b802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b806:	2112      	movs	r1, #18
 800b808:	f7ff bf86 	b.w	800b718 <std>
 800b80c:	2000363c 	.word	0x2000363c
 800b810:	20003504 	.word	0x20003504
 800b814:	0800b785 	.word	0x0800b785

0800b818 <__sfp_lock_acquire>:
 800b818:	4801      	ldr	r0, [pc, #4]	; (800b820 <__sfp_lock_acquire+0x8>)
 800b81a:	f000 b8ae 	b.w	800b97a <__retarget_lock_acquire_recursive>
 800b81e:	bf00      	nop
 800b820:	20003641 	.word	0x20003641

0800b824 <__sfp_lock_release>:
 800b824:	4801      	ldr	r0, [pc, #4]	; (800b82c <__sfp_lock_release+0x8>)
 800b826:	f000 b8a9 	b.w	800b97c <__retarget_lock_release_recursive>
 800b82a:	bf00      	nop
 800b82c:	20003641 	.word	0x20003641

0800b830 <__sinit>:
 800b830:	b510      	push	{r4, lr}
 800b832:	4604      	mov	r4, r0
 800b834:	f7ff fff0 	bl	800b818 <__sfp_lock_acquire>
 800b838:	6a23      	ldr	r3, [r4, #32]
 800b83a:	b11b      	cbz	r3, 800b844 <__sinit+0x14>
 800b83c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b840:	f7ff bff0 	b.w	800b824 <__sfp_lock_release>
 800b844:	4b04      	ldr	r3, [pc, #16]	; (800b858 <__sinit+0x28>)
 800b846:	6223      	str	r3, [r4, #32]
 800b848:	4b04      	ldr	r3, [pc, #16]	; (800b85c <__sinit+0x2c>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d1f5      	bne.n	800b83c <__sinit+0xc>
 800b850:	f7ff ffc4 	bl	800b7dc <global_stdio_init.part.0>
 800b854:	e7f2      	b.n	800b83c <__sinit+0xc>
 800b856:	bf00      	nop
 800b858:	0800b79d 	.word	0x0800b79d
 800b85c:	2000363c 	.word	0x2000363c

0800b860 <_fwalk_sglue>:
 800b860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b864:	4607      	mov	r7, r0
 800b866:	4688      	mov	r8, r1
 800b868:	4614      	mov	r4, r2
 800b86a:	2600      	movs	r6, #0
 800b86c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b870:	f1b9 0901 	subs.w	r9, r9, #1
 800b874:	d505      	bpl.n	800b882 <_fwalk_sglue+0x22>
 800b876:	6824      	ldr	r4, [r4, #0]
 800b878:	2c00      	cmp	r4, #0
 800b87a:	d1f7      	bne.n	800b86c <_fwalk_sglue+0xc>
 800b87c:	4630      	mov	r0, r6
 800b87e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b882:	89ab      	ldrh	r3, [r5, #12]
 800b884:	2b01      	cmp	r3, #1
 800b886:	d907      	bls.n	800b898 <_fwalk_sglue+0x38>
 800b888:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b88c:	3301      	adds	r3, #1
 800b88e:	d003      	beq.n	800b898 <_fwalk_sglue+0x38>
 800b890:	4629      	mov	r1, r5
 800b892:	4638      	mov	r0, r7
 800b894:	47c0      	blx	r8
 800b896:	4306      	orrs	r6, r0
 800b898:	3568      	adds	r5, #104	; 0x68
 800b89a:	e7e9      	b.n	800b870 <_fwalk_sglue+0x10>

0800b89c <memset>:
 800b89c:	4402      	add	r2, r0
 800b89e:	4603      	mov	r3, r0
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d100      	bne.n	800b8a6 <memset+0xa>
 800b8a4:	4770      	bx	lr
 800b8a6:	f803 1b01 	strb.w	r1, [r3], #1
 800b8aa:	e7f9      	b.n	800b8a0 <memset+0x4>

0800b8ac <time>:
 800b8ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b8ae:	4b0b      	ldr	r3, [pc, #44]	; (800b8dc <time+0x30>)
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	4669      	mov	r1, sp
 800b8b4:	4604      	mov	r4, r0
 800b8b6:	6818      	ldr	r0, [r3, #0]
 800b8b8:	f000 f812 	bl	800b8e0 <_gettimeofday_r>
 800b8bc:	2800      	cmp	r0, #0
 800b8be:	bfbe      	ittt	lt
 800b8c0:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 800b8c4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b8c8:	e9cd 2300 	strdlt	r2, r3, [sp]
 800b8cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b8d0:	b10c      	cbz	r4, 800b8d6 <time+0x2a>
 800b8d2:	e9c4 0100 	strd	r0, r1, [r4]
 800b8d6:	b004      	add	sp, #16
 800b8d8:	bd10      	pop	{r4, pc}
 800b8da:	bf00      	nop
 800b8dc:	20000264 	.word	0x20000264

0800b8e0 <_gettimeofday_r>:
 800b8e0:	b538      	push	{r3, r4, r5, lr}
 800b8e2:	4d07      	ldr	r5, [pc, #28]	; (800b900 <_gettimeofday_r+0x20>)
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	4604      	mov	r4, r0
 800b8e8:	4608      	mov	r0, r1
 800b8ea:	4611      	mov	r1, r2
 800b8ec:	602b      	str	r3, [r5, #0]
 800b8ee:	f000 fe41 	bl	800c574 <_gettimeofday>
 800b8f2:	1c43      	adds	r3, r0, #1
 800b8f4:	d102      	bne.n	800b8fc <_gettimeofday_r+0x1c>
 800b8f6:	682b      	ldr	r3, [r5, #0]
 800b8f8:	b103      	cbz	r3, 800b8fc <_gettimeofday_r+0x1c>
 800b8fa:	6023      	str	r3, [r4, #0]
 800b8fc:	bd38      	pop	{r3, r4, r5, pc}
 800b8fe:	bf00      	nop
 800b900:	20003644 	.word	0x20003644

0800b904 <_sbrk_r>:
 800b904:	b538      	push	{r3, r4, r5, lr}
 800b906:	4d06      	ldr	r5, [pc, #24]	; (800b920 <_sbrk_r+0x1c>)
 800b908:	2300      	movs	r3, #0
 800b90a:	4604      	mov	r4, r0
 800b90c:	4608      	mov	r0, r1
 800b90e:	602b      	str	r3, [r5, #0]
 800b910:	f7ff fd1c 	bl	800b34c <_sbrk>
 800b914:	1c43      	adds	r3, r0, #1
 800b916:	d102      	bne.n	800b91e <_sbrk_r+0x1a>
 800b918:	682b      	ldr	r3, [r5, #0]
 800b91a:	b103      	cbz	r3, 800b91e <_sbrk_r+0x1a>
 800b91c:	6023      	str	r3, [r4, #0]
 800b91e:	bd38      	pop	{r3, r4, r5, pc}
 800b920:	20003644 	.word	0x20003644

0800b924 <__errno>:
 800b924:	4b01      	ldr	r3, [pc, #4]	; (800b92c <__errno+0x8>)
 800b926:	6818      	ldr	r0, [r3, #0]
 800b928:	4770      	bx	lr
 800b92a:	bf00      	nop
 800b92c:	20000264 	.word	0x20000264

0800b930 <__libc_init_array>:
 800b930:	b570      	push	{r4, r5, r6, lr}
 800b932:	4d0d      	ldr	r5, [pc, #52]	; (800b968 <__libc_init_array+0x38>)
 800b934:	4c0d      	ldr	r4, [pc, #52]	; (800b96c <__libc_init_array+0x3c>)
 800b936:	1b64      	subs	r4, r4, r5
 800b938:	10a4      	asrs	r4, r4, #2
 800b93a:	2600      	movs	r6, #0
 800b93c:	42a6      	cmp	r6, r4
 800b93e:	d109      	bne.n	800b954 <__libc_init_array+0x24>
 800b940:	4d0b      	ldr	r5, [pc, #44]	; (800b970 <__libc_init_array+0x40>)
 800b942:	4c0c      	ldr	r4, [pc, #48]	; (800b974 <__libc_init_array+0x44>)
 800b944:	f000 fe1e 	bl	800c584 <_init>
 800b948:	1b64      	subs	r4, r4, r5
 800b94a:	10a4      	asrs	r4, r4, #2
 800b94c:	2600      	movs	r6, #0
 800b94e:	42a6      	cmp	r6, r4
 800b950:	d105      	bne.n	800b95e <__libc_init_array+0x2e>
 800b952:	bd70      	pop	{r4, r5, r6, pc}
 800b954:	f855 3b04 	ldr.w	r3, [r5], #4
 800b958:	4798      	blx	r3
 800b95a:	3601      	adds	r6, #1
 800b95c:	e7ee      	b.n	800b93c <__libc_init_array+0xc>
 800b95e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b962:	4798      	blx	r3
 800b964:	3601      	adds	r6, #1
 800b966:	e7f2      	b.n	800b94e <__libc_init_array+0x1e>
 800b968:	0800cc80 	.word	0x0800cc80
 800b96c:	0800cc80 	.word	0x0800cc80
 800b970:	0800cc80 	.word	0x0800cc80
 800b974:	0800cc84 	.word	0x0800cc84

0800b978 <__retarget_lock_init_recursive>:
 800b978:	4770      	bx	lr

0800b97a <__retarget_lock_acquire_recursive>:
 800b97a:	4770      	bx	lr

0800b97c <__retarget_lock_release_recursive>:
 800b97c:	4770      	bx	lr

0800b97e <memcpy>:
 800b97e:	440a      	add	r2, r1
 800b980:	4291      	cmp	r1, r2
 800b982:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b986:	d100      	bne.n	800b98a <memcpy+0xc>
 800b988:	4770      	bx	lr
 800b98a:	b510      	push	{r4, lr}
 800b98c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b990:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b994:	4291      	cmp	r1, r2
 800b996:	d1f9      	bne.n	800b98c <memcpy+0xe>
 800b998:	bd10      	pop	{r4, pc}
	...

0800b99c <__assert_func>:
 800b99c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b99e:	4614      	mov	r4, r2
 800b9a0:	461a      	mov	r2, r3
 800b9a2:	4b09      	ldr	r3, [pc, #36]	; (800b9c8 <__assert_func+0x2c>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	4605      	mov	r5, r0
 800b9a8:	68d8      	ldr	r0, [r3, #12]
 800b9aa:	b14c      	cbz	r4, 800b9c0 <__assert_func+0x24>
 800b9ac:	4b07      	ldr	r3, [pc, #28]	; (800b9cc <__assert_func+0x30>)
 800b9ae:	9100      	str	r1, [sp, #0]
 800b9b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b9b4:	4906      	ldr	r1, [pc, #24]	; (800b9d0 <__assert_func+0x34>)
 800b9b6:	462b      	mov	r3, r5
 800b9b8:	f000 f94c 	bl	800bc54 <fiprintf>
 800b9bc:	f000 f9a2 	bl	800bd04 <abort>
 800b9c0:	4b04      	ldr	r3, [pc, #16]	; (800b9d4 <__assert_func+0x38>)
 800b9c2:	461c      	mov	r4, r3
 800b9c4:	e7f3      	b.n	800b9ae <__assert_func+0x12>
 800b9c6:	bf00      	nop
 800b9c8:	20000264 	.word	0x20000264
 800b9cc:	0800cc07 	.word	0x0800cc07
 800b9d0:	0800cc14 	.word	0x0800cc14
 800b9d4:	0800cc42 	.word	0x0800cc42

0800b9d8 <_free_r>:
 800b9d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9da:	2900      	cmp	r1, #0
 800b9dc:	d044      	beq.n	800ba68 <_free_r+0x90>
 800b9de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9e2:	9001      	str	r0, [sp, #4]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	f1a1 0404 	sub.w	r4, r1, #4
 800b9ea:	bfb8      	it	lt
 800b9ec:	18e4      	addlt	r4, r4, r3
 800b9ee:	f7ff fe1b 	bl	800b628 <__malloc_lock>
 800b9f2:	4a1e      	ldr	r2, [pc, #120]	; (800ba6c <_free_r+0x94>)
 800b9f4:	9801      	ldr	r0, [sp, #4]
 800b9f6:	6813      	ldr	r3, [r2, #0]
 800b9f8:	b933      	cbnz	r3, 800ba08 <_free_r+0x30>
 800b9fa:	6063      	str	r3, [r4, #4]
 800b9fc:	6014      	str	r4, [r2, #0]
 800b9fe:	b003      	add	sp, #12
 800ba00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba04:	f7ff be16 	b.w	800b634 <__malloc_unlock>
 800ba08:	42a3      	cmp	r3, r4
 800ba0a:	d908      	bls.n	800ba1e <_free_r+0x46>
 800ba0c:	6825      	ldr	r5, [r4, #0]
 800ba0e:	1961      	adds	r1, r4, r5
 800ba10:	428b      	cmp	r3, r1
 800ba12:	bf01      	itttt	eq
 800ba14:	6819      	ldreq	r1, [r3, #0]
 800ba16:	685b      	ldreq	r3, [r3, #4]
 800ba18:	1949      	addeq	r1, r1, r5
 800ba1a:	6021      	streq	r1, [r4, #0]
 800ba1c:	e7ed      	b.n	800b9fa <_free_r+0x22>
 800ba1e:	461a      	mov	r2, r3
 800ba20:	685b      	ldr	r3, [r3, #4]
 800ba22:	b10b      	cbz	r3, 800ba28 <_free_r+0x50>
 800ba24:	42a3      	cmp	r3, r4
 800ba26:	d9fa      	bls.n	800ba1e <_free_r+0x46>
 800ba28:	6811      	ldr	r1, [r2, #0]
 800ba2a:	1855      	adds	r5, r2, r1
 800ba2c:	42a5      	cmp	r5, r4
 800ba2e:	d10b      	bne.n	800ba48 <_free_r+0x70>
 800ba30:	6824      	ldr	r4, [r4, #0]
 800ba32:	4421      	add	r1, r4
 800ba34:	1854      	adds	r4, r2, r1
 800ba36:	42a3      	cmp	r3, r4
 800ba38:	6011      	str	r1, [r2, #0]
 800ba3a:	d1e0      	bne.n	800b9fe <_free_r+0x26>
 800ba3c:	681c      	ldr	r4, [r3, #0]
 800ba3e:	685b      	ldr	r3, [r3, #4]
 800ba40:	6053      	str	r3, [r2, #4]
 800ba42:	440c      	add	r4, r1
 800ba44:	6014      	str	r4, [r2, #0]
 800ba46:	e7da      	b.n	800b9fe <_free_r+0x26>
 800ba48:	d902      	bls.n	800ba50 <_free_r+0x78>
 800ba4a:	230c      	movs	r3, #12
 800ba4c:	6003      	str	r3, [r0, #0]
 800ba4e:	e7d6      	b.n	800b9fe <_free_r+0x26>
 800ba50:	6825      	ldr	r5, [r4, #0]
 800ba52:	1961      	adds	r1, r4, r5
 800ba54:	428b      	cmp	r3, r1
 800ba56:	bf04      	itt	eq
 800ba58:	6819      	ldreq	r1, [r3, #0]
 800ba5a:	685b      	ldreq	r3, [r3, #4]
 800ba5c:	6063      	str	r3, [r4, #4]
 800ba5e:	bf04      	itt	eq
 800ba60:	1949      	addeq	r1, r1, r5
 800ba62:	6021      	streq	r1, [r4, #0]
 800ba64:	6054      	str	r4, [r2, #4]
 800ba66:	e7ca      	b.n	800b9fe <_free_r+0x26>
 800ba68:	b003      	add	sp, #12
 800ba6a:	bd30      	pop	{r4, r5, pc}
 800ba6c:	200034fc 	.word	0x200034fc

0800ba70 <__sflush_r>:
 800ba70:	898a      	ldrh	r2, [r1, #12]
 800ba72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba76:	4605      	mov	r5, r0
 800ba78:	0710      	lsls	r0, r2, #28
 800ba7a:	460c      	mov	r4, r1
 800ba7c:	d458      	bmi.n	800bb30 <__sflush_r+0xc0>
 800ba7e:	684b      	ldr	r3, [r1, #4]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	dc05      	bgt.n	800ba90 <__sflush_r+0x20>
 800ba84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	dc02      	bgt.n	800ba90 <__sflush_r+0x20>
 800ba8a:	2000      	movs	r0, #0
 800ba8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba92:	2e00      	cmp	r6, #0
 800ba94:	d0f9      	beq.n	800ba8a <__sflush_r+0x1a>
 800ba96:	2300      	movs	r3, #0
 800ba98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ba9c:	682f      	ldr	r7, [r5, #0]
 800ba9e:	6a21      	ldr	r1, [r4, #32]
 800baa0:	602b      	str	r3, [r5, #0]
 800baa2:	d032      	beq.n	800bb0a <__sflush_r+0x9a>
 800baa4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800baa6:	89a3      	ldrh	r3, [r4, #12]
 800baa8:	075a      	lsls	r2, r3, #29
 800baaa:	d505      	bpl.n	800bab8 <__sflush_r+0x48>
 800baac:	6863      	ldr	r3, [r4, #4]
 800baae:	1ac0      	subs	r0, r0, r3
 800bab0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bab2:	b10b      	cbz	r3, 800bab8 <__sflush_r+0x48>
 800bab4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bab6:	1ac0      	subs	r0, r0, r3
 800bab8:	2300      	movs	r3, #0
 800baba:	4602      	mov	r2, r0
 800babc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800babe:	6a21      	ldr	r1, [r4, #32]
 800bac0:	4628      	mov	r0, r5
 800bac2:	47b0      	blx	r6
 800bac4:	1c43      	adds	r3, r0, #1
 800bac6:	89a3      	ldrh	r3, [r4, #12]
 800bac8:	d106      	bne.n	800bad8 <__sflush_r+0x68>
 800baca:	6829      	ldr	r1, [r5, #0]
 800bacc:	291d      	cmp	r1, #29
 800bace:	d82b      	bhi.n	800bb28 <__sflush_r+0xb8>
 800bad0:	4a29      	ldr	r2, [pc, #164]	; (800bb78 <__sflush_r+0x108>)
 800bad2:	410a      	asrs	r2, r1
 800bad4:	07d6      	lsls	r6, r2, #31
 800bad6:	d427      	bmi.n	800bb28 <__sflush_r+0xb8>
 800bad8:	2200      	movs	r2, #0
 800bada:	6062      	str	r2, [r4, #4]
 800badc:	04d9      	lsls	r1, r3, #19
 800bade:	6922      	ldr	r2, [r4, #16]
 800bae0:	6022      	str	r2, [r4, #0]
 800bae2:	d504      	bpl.n	800baee <__sflush_r+0x7e>
 800bae4:	1c42      	adds	r2, r0, #1
 800bae6:	d101      	bne.n	800baec <__sflush_r+0x7c>
 800bae8:	682b      	ldr	r3, [r5, #0]
 800baea:	b903      	cbnz	r3, 800baee <__sflush_r+0x7e>
 800baec:	6560      	str	r0, [r4, #84]	; 0x54
 800baee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800baf0:	602f      	str	r7, [r5, #0]
 800baf2:	2900      	cmp	r1, #0
 800baf4:	d0c9      	beq.n	800ba8a <__sflush_r+0x1a>
 800baf6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bafa:	4299      	cmp	r1, r3
 800bafc:	d002      	beq.n	800bb04 <__sflush_r+0x94>
 800bafe:	4628      	mov	r0, r5
 800bb00:	f7ff ff6a 	bl	800b9d8 <_free_r>
 800bb04:	2000      	movs	r0, #0
 800bb06:	6360      	str	r0, [r4, #52]	; 0x34
 800bb08:	e7c0      	b.n	800ba8c <__sflush_r+0x1c>
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	4628      	mov	r0, r5
 800bb0e:	47b0      	blx	r6
 800bb10:	1c41      	adds	r1, r0, #1
 800bb12:	d1c8      	bne.n	800baa6 <__sflush_r+0x36>
 800bb14:	682b      	ldr	r3, [r5, #0]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d0c5      	beq.n	800baa6 <__sflush_r+0x36>
 800bb1a:	2b1d      	cmp	r3, #29
 800bb1c:	d001      	beq.n	800bb22 <__sflush_r+0xb2>
 800bb1e:	2b16      	cmp	r3, #22
 800bb20:	d101      	bne.n	800bb26 <__sflush_r+0xb6>
 800bb22:	602f      	str	r7, [r5, #0]
 800bb24:	e7b1      	b.n	800ba8a <__sflush_r+0x1a>
 800bb26:	89a3      	ldrh	r3, [r4, #12]
 800bb28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb2c:	81a3      	strh	r3, [r4, #12]
 800bb2e:	e7ad      	b.n	800ba8c <__sflush_r+0x1c>
 800bb30:	690f      	ldr	r7, [r1, #16]
 800bb32:	2f00      	cmp	r7, #0
 800bb34:	d0a9      	beq.n	800ba8a <__sflush_r+0x1a>
 800bb36:	0793      	lsls	r3, r2, #30
 800bb38:	680e      	ldr	r6, [r1, #0]
 800bb3a:	bf08      	it	eq
 800bb3c:	694b      	ldreq	r3, [r1, #20]
 800bb3e:	600f      	str	r7, [r1, #0]
 800bb40:	bf18      	it	ne
 800bb42:	2300      	movne	r3, #0
 800bb44:	eba6 0807 	sub.w	r8, r6, r7
 800bb48:	608b      	str	r3, [r1, #8]
 800bb4a:	f1b8 0f00 	cmp.w	r8, #0
 800bb4e:	dd9c      	ble.n	800ba8a <__sflush_r+0x1a>
 800bb50:	6a21      	ldr	r1, [r4, #32]
 800bb52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bb54:	4643      	mov	r3, r8
 800bb56:	463a      	mov	r2, r7
 800bb58:	4628      	mov	r0, r5
 800bb5a:	47b0      	blx	r6
 800bb5c:	2800      	cmp	r0, #0
 800bb5e:	dc06      	bgt.n	800bb6e <__sflush_r+0xfe>
 800bb60:	89a3      	ldrh	r3, [r4, #12]
 800bb62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb66:	81a3      	strh	r3, [r4, #12]
 800bb68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb6c:	e78e      	b.n	800ba8c <__sflush_r+0x1c>
 800bb6e:	4407      	add	r7, r0
 800bb70:	eba8 0800 	sub.w	r8, r8, r0
 800bb74:	e7e9      	b.n	800bb4a <__sflush_r+0xda>
 800bb76:	bf00      	nop
 800bb78:	dfbffffe 	.word	0xdfbffffe

0800bb7c <_fflush_r>:
 800bb7c:	b538      	push	{r3, r4, r5, lr}
 800bb7e:	690b      	ldr	r3, [r1, #16]
 800bb80:	4605      	mov	r5, r0
 800bb82:	460c      	mov	r4, r1
 800bb84:	b913      	cbnz	r3, 800bb8c <_fflush_r+0x10>
 800bb86:	2500      	movs	r5, #0
 800bb88:	4628      	mov	r0, r5
 800bb8a:	bd38      	pop	{r3, r4, r5, pc}
 800bb8c:	b118      	cbz	r0, 800bb96 <_fflush_r+0x1a>
 800bb8e:	6a03      	ldr	r3, [r0, #32]
 800bb90:	b90b      	cbnz	r3, 800bb96 <_fflush_r+0x1a>
 800bb92:	f7ff fe4d 	bl	800b830 <__sinit>
 800bb96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d0f3      	beq.n	800bb86 <_fflush_r+0xa>
 800bb9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bba0:	07d0      	lsls	r0, r2, #31
 800bba2:	d404      	bmi.n	800bbae <_fflush_r+0x32>
 800bba4:	0599      	lsls	r1, r3, #22
 800bba6:	d402      	bmi.n	800bbae <_fflush_r+0x32>
 800bba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bbaa:	f7ff fee6 	bl	800b97a <__retarget_lock_acquire_recursive>
 800bbae:	4628      	mov	r0, r5
 800bbb0:	4621      	mov	r1, r4
 800bbb2:	f7ff ff5d 	bl	800ba70 <__sflush_r>
 800bbb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bbb8:	07da      	lsls	r2, r3, #31
 800bbba:	4605      	mov	r5, r0
 800bbbc:	d4e4      	bmi.n	800bb88 <_fflush_r+0xc>
 800bbbe:	89a3      	ldrh	r3, [r4, #12]
 800bbc0:	059b      	lsls	r3, r3, #22
 800bbc2:	d4e1      	bmi.n	800bb88 <_fflush_r+0xc>
 800bbc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bbc6:	f7ff fed9 	bl	800b97c <__retarget_lock_release_recursive>
 800bbca:	e7dd      	b.n	800bb88 <_fflush_r+0xc>

0800bbcc <__sread>:
 800bbcc:	b510      	push	{r4, lr}
 800bbce:	460c      	mov	r4, r1
 800bbd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbd4:	f000 f872 	bl	800bcbc <_read_r>
 800bbd8:	2800      	cmp	r0, #0
 800bbda:	bfab      	itete	ge
 800bbdc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bbde:	89a3      	ldrhlt	r3, [r4, #12]
 800bbe0:	181b      	addge	r3, r3, r0
 800bbe2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bbe6:	bfac      	ite	ge
 800bbe8:	6563      	strge	r3, [r4, #84]	; 0x54
 800bbea:	81a3      	strhlt	r3, [r4, #12]
 800bbec:	bd10      	pop	{r4, pc}

0800bbee <__swrite>:
 800bbee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbf2:	461f      	mov	r7, r3
 800bbf4:	898b      	ldrh	r3, [r1, #12]
 800bbf6:	05db      	lsls	r3, r3, #23
 800bbf8:	4605      	mov	r5, r0
 800bbfa:	460c      	mov	r4, r1
 800bbfc:	4616      	mov	r6, r2
 800bbfe:	d505      	bpl.n	800bc0c <__swrite+0x1e>
 800bc00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc04:	2302      	movs	r3, #2
 800bc06:	2200      	movs	r2, #0
 800bc08:	f000 f846 	bl	800bc98 <_lseek_r>
 800bc0c:	89a3      	ldrh	r3, [r4, #12]
 800bc0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc16:	81a3      	strh	r3, [r4, #12]
 800bc18:	4632      	mov	r2, r6
 800bc1a:	463b      	mov	r3, r7
 800bc1c:	4628      	mov	r0, r5
 800bc1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc22:	f000 b85d 	b.w	800bce0 <_write_r>

0800bc26 <__sseek>:
 800bc26:	b510      	push	{r4, lr}
 800bc28:	460c      	mov	r4, r1
 800bc2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc2e:	f000 f833 	bl	800bc98 <_lseek_r>
 800bc32:	1c43      	adds	r3, r0, #1
 800bc34:	89a3      	ldrh	r3, [r4, #12]
 800bc36:	bf15      	itete	ne
 800bc38:	6560      	strne	r0, [r4, #84]	; 0x54
 800bc3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bc3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bc42:	81a3      	strheq	r3, [r4, #12]
 800bc44:	bf18      	it	ne
 800bc46:	81a3      	strhne	r3, [r4, #12]
 800bc48:	bd10      	pop	{r4, pc}

0800bc4a <__sclose>:
 800bc4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc4e:	f000 b813 	b.w	800bc78 <_close_r>
	...

0800bc54 <fiprintf>:
 800bc54:	b40e      	push	{r1, r2, r3}
 800bc56:	b503      	push	{r0, r1, lr}
 800bc58:	4601      	mov	r1, r0
 800bc5a:	ab03      	add	r3, sp, #12
 800bc5c:	4805      	ldr	r0, [pc, #20]	; (800bc74 <fiprintf+0x20>)
 800bc5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc62:	6800      	ldr	r0, [r0, #0]
 800bc64:	9301      	str	r3, [sp, #4]
 800bc66:	f000 f87d 	bl	800bd64 <_vfiprintf_r>
 800bc6a:	b002      	add	sp, #8
 800bc6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc70:	b003      	add	sp, #12
 800bc72:	4770      	bx	lr
 800bc74:	20000264 	.word	0x20000264

0800bc78 <_close_r>:
 800bc78:	b538      	push	{r3, r4, r5, lr}
 800bc7a:	4d06      	ldr	r5, [pc, #24]	; (800bc94 <_close_r+0x1c>)
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	4604      	mov	r4, r0
 800bc80:	4608      	mov	r0, r1
 800bc82:	602b      	str	r3, [r5, #0]
 800bc84:	f7ff fb2d 	bl	800b2e2 <_close>
 800bc88:	1c43      	adds	r3, r0, #1
 800bc8a:	d102      	bne.n	800bc92 <_close_r+0x1a>
 800bc8c:	682b      	ldr	r3, [r5, #0]
 800bc8e:	b103      	cbz	r3, 800bc92 <_close_r+0x1a>
 800bc90:	6023      	str	r3, [r4, #0]
 800bc92:	bd38      	pop	{r3, r4, r5, pc}
 800bc94:	20003644 	.word	0x20003644

0800bc98 <_lseek_r>:
 800bc98:	b538      	push	{r3, r4, r5, lr}
 800bc9a:	4d07      	ldr	r5, [pc, #28]	; (800bcb8 <_lseek_r+0x20>)
 800bc9c:	4604      	mov	r4, r0
 800bc9e:	4608      	mov	r0, r1
 800bca0:	4611      	mov	r1, r2
 800bca2:	2200      	movs	r2, #0
 800bca4:	602a      	str	r2, [r5, #0]
 800bca6:	461a      	mov	r2, r3
 800bca8:	f7ff fb42 	bl	800b330 <_lseek>
 800bcac:	1c43      	adds	r3, r0, #1
 800bcae:	d102      	bne.n	800bcb6 <_lseek_r+0x1e>
 800bcb0:	682b      	ldr	r3, [r5, #0]
 800bcb2:	b103      	cbz	r3, 800bcb6 <_lseek_r+0x1e>
 800bcb4:	6023      	str	r3, [r4, #0]
 800bcb6:	bd38      	pop	{r3, r4, r5, pc}
 800bcb8:	20003644 	.word	0x20003644

0800bcbc <_read_r>:
 800bcbc:	b538      	push	{r3, r4, r5, lr}
 800bcbe:	4d07      	ldr	r5, [pc, #28]	; (800bcdc <_read_r+0x20>)
 800bcc0:	4604      	mov	r4, r0
 800bcc2:	4608      	mov	r0, r1
 800bcc4:	4611      	mov	r1, r2
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	602a      	str	r2, [r5, #0]
 800bcca:	461a      	mov	r2, r3
 800bccc:	f7ff fad0 	bl	800b270 <_read>
 800bcd0:	1c43      	adds	r3, r0, #1
 800bcd2:	d102      	bne.n	800bcda <_read_r+0x1e>
 800bcd4:	682b      	ldr	r3, [r5, #0]
 800bcd6:	b103      	cbz	r3, 800bcda <_read_r+0x1e>
 800bcd8:	6023      	str	r3, [r4, #0]
 800bcda:	bd38      	pop	{r3, r4, r5, pc}
 800bcdc:	20003644 	.word	0x20003644

0800bce0 <_write_r>:
 800bce0:	b538      	push	{r3, r4, r5, lr}
 800bce2:	4d07      	ldr	r5, [pc, #28]	; (800bd00 <_write_r+0x20>)
 800bce4:	4604      	mov	r4, r0
 800bce6:	4608      	mov	r0, r1
 800bce8:	4611      	mov	r1, r2
 800bcea:	2200      	movs	r2, #0
 800bcec:	602a      	str	r2, [r5, #0]
 800bcee:	461a      	mov	r2, r3
 800bcf0:	f7ff fadb 	bl	800b2aa <_write>
 800bcf4:	1c43      	adds	r3, r0, #1
 800bcf6:	d102      	bne.n	800bcfe <_write_r+0x1e>
 800bcf8:	682b      	ldr	r3, [r5, #0]
 800bcfa:	b103      	cbz	r3, 800bcfe <_write_r+0x1e>
 800bcfc:	6023      	str	r3, [r4, #0]
 800bcfe:	bd38      	pop	{r3, r4, r5, pc}
 800bd00:	20003644 	.word	0x20003644

0800bd04 <abort>:
 800bd04:	b508      	push	{r3, lr}
 800bd06:	2006      	movs	r0, #6
 800bd08:	f000 fc18 	bl	800c53c <raise>
 800bd0c:	2001      	movs	r0, #1
 800bd0e:	f7ff faa5 	bl	800b25c <_exit>

0800bd12 <__sfputc_r>:
 800bd12:	6893      	ldr	r3, [r2, #8]
 800bd14:	3b01      	subs	r3, #1
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	b410      	push	{r4}
 800bd1a:	6093      	str	r3, [r2, #8]
 800bd1c:	da08      	bge.n	800bd30 <__sfputc_r+0x1e>
 800bd1e:	6994      	ldr	r4, [r2, #24]
 800bd20:	42a3      	cmp	r3, r4
 800bd22:	db01      	blt.n	800bd28 <__sfputc_r+0x16>
 800bd24:	290a      	cmp	r1, #10
 800bd26:	d103      	bne.n	800bd30 <__sfputc_r+0x1e>
 800bd28:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd2c:	f000 bac4 	b.w	800c2b8 <__swbuf_r>
 800bd30:	6813      	ldr	r3, [r2, #0]
 800bd32:	1c58      	adds	r0, r3, #1
 800bd34:	6010      	str	r0, [r2, #0]
 800bd36:	7019      	strb	r1, [r3, #0]
 800bd38:	4608      	mov	r0, r1
 800bd3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd3e:	4770      	bx	lr

0800bd40 <__sfputs_r>:
 800bd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd42:	4606      	mov	r6, r0
 800bd44:	460f      	mov	r7, r1
 800bd46:	4614      	mov	r4, r2
 800bd48:	18d5      	adds	r5, r2, r3
 800bd4a:	42ac      	cmp	r4, r5
 800bd4c:	d101      	bne.n	800bd52 <__sfputs_r+0x12>
 800bd4e:	2000      	movs	r0, #0
 800bd50:	e007      	b.n	800bd62 <__sfputs_r+0x22>
 800bd52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd56:	463a      	mov	r2, r7
 800bd58:	4630      	mov	r0, r6
 800bd5a:	f7ff ffda 	bl	800bd12 <__sfputc_r>
 800bd5e:	1c43      	adds	r3, r0, #1
 800bd60:	d1f3      	bne.n	800bd4a <__sfputs_r+0xa>
 800bd62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bd64 <_vfiprintf_r>:
 800bd64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd68:	460d      	mov	r5, r1
 800bd6a:	b09d      	sub	sp, #116	; 0x74
 800bd6c:	4614      	mov	r4, r2
 800bd6e:	4698      	mov	r8, r3
 800bd70:	4606      	mov	r6, r0
 800bd72:	b118      	cbz	r0, 800bd7c <_vfiprintf_r+0x18>
 800bd74:	6a03      	ldr	r3, [r0, #32]
 800bd76:	b90b      	cbnz	r3, 800bd7c <_vfiprintf_r+0x18>
 800bd78:	f7ff fd5a 	bl	800b830 <__sinit>
 800bd7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd7e:	07d9      	lsls	r1, r3, #31
 800bd80:	d405      	bmi.n	800bd8e <_vfiprintf_r+0x2a>
 800bd82:	89ab      	ldrh	r3, [r5, #12]
 800bd84:	059a      	lsls	r2, r3, #22
 800bd86:	d402      	bmi.n	800bd8e <_vfiprintf_r+0x2a>
 800bd88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd8a:	f7ff fdf6 	bl	800b97a <__retarget_lock_acquire_recursive>
 800bd8e:	89ab      	ldrh	r3, [r5, #12]
 800bd90:	071b      	lsls	r3, r3, #28
 800bd92:	d501      	bpl.n	800bd98 <_vfiprintf_r+0x34>
 800bd94:	692b      	ldr	r3, [r5, #16]
 800bd96:	b99b      	cbnz	r3, 800bdc0 <_vfiprintf_r+0x5c>
 800bd98:	4629      	mov	r1, r5
 800bd9a:	4630      	mov	r0, r6
 800bd9c:	f000 faca 	bl	800c334 <__swsetup_r>
 800bda0:	b170      	cbz	r0, 800bdc0 <_vfiprintf_r+0x5c>
 800bda2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bda4:	07dc      	lsls	r4, r3, #31
 800bda6:	d504      	bpl.n	800bdb2 <_vfiprintf_r+0x4e>
 800bda8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bdac:	b01d      	add	sp, #116	; 0x74
 800bdae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdb2:	89ab      	ldrh	r3, [r5, #12]
 800bdb4:	0598      	lsls	r0, r3, #22
 800bdb6:	d4f7      	bmi.n	800bda8 <_vfiprintf_r+0x44>
 800bdb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bdba:	f7ff fddf 	bl	800b97c <__retarget_lock_release_recursive>
 800bdbe:	e7f3      	b.n	800bda8 <_vfiprintf_r+0x44>
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	9309      	str	r3, [sp, #36]	; 0x24
 800bdc4:	2320      	movs	r3, #32
 800bdc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bdca:	f8cd 800c 	str.w	r8, [sp, #12]
 800bdce:	2330      	movs	r3, #48	; 0x30
 800bdd0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bf84 <_vfiprintf_r+0x220>
 800bdd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bdd8:	f04f 0901 	mov.w	r9, #1
 800bddc:	4623      	mov	r3, r4
 800bdde:	469a      	mov	sl, r3
 800bde0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bde4:	b10a      	cbz	r2, 800bdea <_vfiprintf_r+0x86>
 800bde6:	2a25      	cmp	r2, #37	; 0x25
 800bde8:	d1f9      	bne.n	800bdde <_vfiprintf_r+0x7a>
 800bdea:	ebba 0b04 	subs.w	fp, sl, r4
 800bdee:	d00b      	beq.n	800be08 <_vfiprintf_r+0xa4>
 800bdf0:	465b      	mov	r3, fp
 800bdf2:	4622      	mov	r2, r4
 800bdf4:	4629      	mov	r1, r5
 800bdf6:	4630      	mov	r0, r6
 800bdf8:	f7ff ffa2 	bl	800bd40 <__sfputs_r>
 800bdfc:	3001      	adds	r0, #1
 800bdfe:	f000 80a9 	beq.w	800bf54 <_vfiprintf_r+0x1f0>
 800be02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be04:	445a      	add	r2, fp
 800be06:	9209      	str	r2, [sp, #36]	; 0x24
 800be08:	f89a 3000 	ldrb.w	r3, [sl]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	f000 80a1 	beq.w	800bf54 <_vfiprintf_r+0x1f0>
 800be12:	2300      	movs	r3, #0
 800be14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be1c:	f10a 0a01 	add.w	sl, sl, #1
 800be20:	9304      	str	r3, [sp, #16]
 800be22:	9307      	str	r3, [sp, #28]
 800be24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be28:	931a      	str	r3, [sp, #104]	; 0x68
 800be2a:	4654      	mov	r4, sl
 800be2c:	2205      	movs	r2, #5
 800be2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be32:	4854      	ldr	r0, [pc, #336]	; (800bf84 <_vfiprintf_r+0x220>)
 800be34:	f7f4 f9cc 	bl	80001d0 <memchr>
 800be38:	9a04      	ldr	r2, [sp, #16]
 800be3a:	b9d8      	cbnz	r0, 800be74 <_vfiprintf_r+0x110>
 800be3c:	06d1      	lsls	r1, r2, #27
 800be3e:	bf44      	itt	mi
 800be40:	2320      	movmi	r3, #32
 800be42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be46:	0713      	lsls	r3, r2, #28
 800be48:	bf44      	itt	mi
 800be4a:	232b      	movmi	r3, #43	; 0x2b
 800be4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be50:	f89a 3000 	ldrb.w	r3, [sl]
 800be54:	2b2a      	cmp	r3, #42	; 0x2a
 800be56:	d015      	beq.n	800be84 <_vfiprintf_r+0x120>
 800be58:	9a07      	ldr	r2, [sp, #28]
 800be5a:	4654      	mov	r4, sl
 800be5c:	2000      	movs	r0, #0
 800be5e:	f04f 0c0a 	mov.w	ip, #10
 800be62:	4621      	mov	r1, r4
 800be64:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be68:	3b30      	subs	r3, #48	; 0x30
 800be6a:	2b09      	cmp	r3, #9
 800be6c:	d94d      	bls.n	800bf0a <_vfiprintf_r+0x1a6>
 800be6e:	b1b0      	cbz	r0, 800be9e <_vfiprintf_r+0x13a>
 800be70:	9207      	str	r2, [sp, #28]
 800be72:	e014      	b.n	800be9e <_vfiprintf_r+0x13a>
 800be74:	eba0 0308 	sub.w	r3, r0, r8
 800be78:	fa09 f303 	lsl.w	r3, r9, r3
 800be7c:	4313      	orrs	r3, r2
 800be7e:	9304      	str	r3, [sp, #16]
 800be80:	46a2      	mov	sl, r4
 800be82:	e7d2      	b.n	800be2a <_vfiprintf_r+0xc6>
 800be84:	9b03      	ldr	r3, [sp, #12]
 800be86:	1d19      	adds	r1, r3, #4
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	9103      	str	r1, [sp, #12]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	bfbb      	ittet	lt
 800be90:	425b      	neglt	r3, r3
 800be92:	f042 0202 	orrlt.w	r2, r2, #2
 800be96:	9307      	strge	r3, [sp, #28]
 800be98:	9307      	strlt	r3, [sp, #28]
 800be9a:	bfb8      	it	lt
 800be9c:	9204      	strlt	r2, [sp, #16]
 800be9e:	7823      	ldrb	r3, [r4, #0]
 800bea0:	2b2e      	cmp	r3, #46	; 0x2e
 800bea2:	d10c      	bne.n	800bebe <_vfiprintf_r+0x15a>
 800bea4:	7863      	ldrb	r3, [r4, #1]
 800bea6:	2b2a      	cmp	r3, #42	; 0x2a
 800bea8:	d134      	bne.n	800bf14 <_vfiprintf_r+0x1b0>
 800beaa:	9b03      	ldr	r3, [sp, #12]
 800beac:	1d1a      	adds	r2, r3, #4
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	9203      	str	r2, [sp, #12]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	bfb8      	it	lt
 800beb6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800beba:	3402      	adds	r4, #2
 800bebc:	9305      	str	r3, [sp, #20]
 800bebe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bf94 <_vfiprintf_r+0x230>
 800bec2:	7821      	ldrb	r1, [r4, #0]
 800bec4:	2203      	movs	r2, #3
 800bec6:	4650      	mov	r0, sl
 800bec8:	f7f4 f982 	bl	80001d0 <memchr>
 800becc:	b138      	cbz	r0, 800bede <_vfiprintf_r+0x17a>
 800bece:	9b04      	ldr	r3, [sp, #16]
 800bed0:	eba0 000a 	sub.w	r0, r0, sl
 800bed4:	2240      	movs	r2, #64	; 0x40
 800bed6:	4082      	lsls	r2, r0
 800bed8:	4313      	orrs	r3, r2
 800beda:	3401      	adds	r4, #1
 800bedc:	9304      	str	r3, [sp, #16]
 800bede:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bee2:	4829      	ldr	r0, [pc, #164]	; (800bf88 <_vfiprintf_r+0x224>)
 800bee4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bee8:	2206      	movs	r2, #6
 800beea:	f7f4 f971 	bl	80001d0 <memchr>
 800beee:	2800      	cmp	r0, #0
 800bef0:	d03f      	beq.n	800bf72 <_vfiprintf_r+0x20e>
 800bef2:	4b26      	ldr	r3, [pc, #152]	; (800bf8c <_vfiprintf_r+0x228>)
 800bef4:	bb1b      	cbnz	r3, 800bf3e <_vfiprintf_r+0x1da>
 800bef6:	9b03      	ldr	r3, [sp, #12]
 800bef8:	3307      	adds	r3, #7
 800befa:	f023 0307 	bic.w	r3, r3, #7
 800befe:	3308      	adds	r3, #8
 800bf00:	9303      	str	r3, [sp, #12]
 800bf02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf04:	443b      	add	r3, r7
 800bf06:	9309      	str	r3, [sp, #36]	; 0x24
 800bf08:	e768      	b.n	800bddc <_vfiprintf_r+0x78>
 800bf0a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf0e:	460c      	mov	r4, r1
 800bf10:	2001      	movs	r0, #1
 800bf12:	e7a6      	b.n	800be62 <_vfiprintf_r+0xfe>
 800bf14:	2300      	movs	r3, #0
 800bf16:	3401      	adds	r4, #1
 800bf18:	9305      	str	r3, [sp, #20]
 800bf1a:	4619      	mov	r1, r3
 800bf1c:	f04f 0c0a 	mov.w	ip, #10
 800bf20:	4620      	mov	r0, r4
 800bf22:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf26:	3a30      	subs	r2, #48	; 0x30
 800bf28:	2a09      	cmp	r2, #9
 800bf2a:	d903      	bls.n	800bf34 <_vfiprintf_r+0x1d0>
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d0c6      	beq.n	800bebe <_vfiprintf_r+0x15a>
 800bf30:	9105      	str	r1, [sp, #20]
 800bf32:	e7c4      	b.n	800bebe <_vfiprintf_r+0x15a>
 800bf34:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf38:	4604      	mov	r4, r0
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	e7f0      	b.n	800bf20 <_vfiprintf_r+0x1bc>
 800bf3e:	ab03      	add	r3, sp, #12
 800bf40:	9300      	str	r3, [sp, #0]
 800bf42:	462a      	mov	r2, r5
 800bf44:	4b12      	ldr	r3, [pc, #72]	; (800bf90 <_vfiprintf_r+0x22c>)
 800bf46:	a904      	add	r1, sp, #16
 800bf48:	4630      	mov	r0, r6
 800bf4a:	f3af 8000 	nop.w
 800bf4e:	4607      	mov	r7, r0
 800bf50:	1c78      	adds	r0, r7, #1
 800bf52:	d1d6      	bne.n	800bf02 <_vfiprintf_r+0x19e>
 800bf54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf56:	07d9      	lsls	r1, r3, #31
 800bf58:	d405      	bmi.n	800bf66 <_vfiprintf_r+0x202>
 800bf5a:	89ab      	ldrh	r3, [r5, #12]
 800bf5c:	059a      	lsls	r2, r3, #22
 800bf5e:	d402      	bmi.n	800bf66 <_vfiprintf_r+0x202>
 800bf60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf62:	f7ff fd0b 	bl	800b97c <__retarget_lock_release_recursive>
 800bf66:	89ab      	ldrh	r3, [r5, #12]
 800bf68:	065b      	lsls	r3, r3, #25
 800bf6a:	f53f af1d 	bmi.w	800bda8 <_vfiprintf_r+0x44>
 800bf6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf70:	e71c      	b.n	800bdac <_vfiprintf_r+0x48>
 800bf72:	ab03      	add	r3, sp, #12
 800bf74:	9300      	str	r3, [sp, #0]
 800bf76:	462a      	mov	r2, r5
 800bf78:	4b05      	ldr	r3, [pc, #20]	; (800bf90 <_vfiprintf_r+0x22c>)
 800bf7a:	a904      	add	r1, sp, #16
 800bf7c:	4630      	mov	r0, r6
 800bf7e:	f000 f879 	bl	800c074 <_printf_i>
 800bf82:	e7e4      	b.n	800bf4e <_vfiprintf_r+0x1ea>
 800bf84:	0800cc43 	.word	0x0800cc43
 800bf88:	0800cc4d 	.word	0x0800cc4d
 800bf8c:	00000000 	.word	0x00000000
 800bf90:	0800bd41 	.word	0x0800bd41
 800bf94:	0800cc49 	.word	0x0800cc49

0800bf98 <_printf_common>:
 800bf98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf9c:	4616      	mov	r6, r2
 800bf9e:	4699      	mov	r9, r3
 800bfa0:	688a      	ldr	r2, [r1, #8]
 800bfa2:	690b      	ldr	r3, [r1, #16]
 800bfa4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bfa8:	4293      	cmp	r3, r2
 800bfaa:	bfb8      	it	lt
 800bfac:	4613      	movlt	r3, r2
 800bfae:	6033      	str	r3, [r6, #0]
 800bfb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bfb4:	4607      	mov	r7, r0
 800bfb6:	460c      	mov	r4, r1
 800bfb8:	b10a      	cbz	r2, 800bfbe <_printf_common+0x26>
 800bfba:	3301      	adds	r3, #1
 800bfbc:	6033      	str	r3, [r6, #0]
 800bfbe:	6823      	ldr	r3, [r4, #0]
 800bfc0:	0699      	lsls	r1, r3, #26
 800bfc2:	bf42      	ittt	mi
 800bfc4:	6833      	ldrmi	r3, [r6, #0]
 800bfc6:	3302      	addmi	r3, #2
 800bfc8:	6033      	strmi	r3, [r6, #0]
 800bfca:	6825      	ldr	r5, [r4, #0]
 800bfcc:	f015 0506 	ands.w	r5, r5, #6
 800bfd0:	d106      	bne.n	800bfe0 <_printf_common+0x48>
 800bfd2:	f104 0a19 	add.w	sl, r4, #25
 800bfd6:	68e3      	ldr	r3, [r4, #12]
 800bfd8:	6832      	ldr	r2, [r6, #0]
 800bfda:	1a9b      	subs	r3, r3, r2
 800bfdc:	42ab      	cmp	r3, r5
 800bfde:	dc26      	bgt.n	800c02e <_printf_common+0x96>
 800bfe0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bfe4:	1e13      	subs	r3, r2, #0
 800bfe6:	6822      	ldr	r2, [r4, #0]
 800bfe8:	bf18      	it	ne
 800bfea:	2301      	movne	r3, #1
 800bfec:	0692      	lsls	r2, r2, #26
 800bfee:	d42b      	bmi.n	800c048 <_printf_common+0xb0>
 800bff0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bff4:	4649      	mov	r1, r9
 800bff6:	4638      	mov	r0, r7
 800bff8:	47c0      	blx	r8
 800bffa:	3001      	adds	r0, #1
 800bffc:	d01e      	beq.n	800c03c <_printf_common+0xa4>
 800bffe:	6823      	ldr	r3, [r4, #0]
 800c000:	6922      	ldr	r2, [r4, #16]
 800c002:	f003 0306 	and.w	r3, r3, #6
 800c006:	2b04      	cmp	r3, #4
 800c008:	bf02      	ittt	eq
 800c00a:	68e5      	ldreq	r5, [r4, #12]
 800c00c:	6833      	ldreq	r3, [r6, #0]
 800c00e:	1aed      	subeq	r5, r5, r3
 800c010:	68a3      	ldr	r3, [r4, #8]
 800c012:	bf0c      	ite	eq
 800c014:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c018:	2500      	movne	r5, #0
 800c01a:	4293      	cmp	r3, r2
 800c01c:	bfc4      	itt	gt
 800c01e:	1a9b      	subgt	r3, r3, r2
 800c020:	18ed      	addgt	r5, r5, r3
 800c022:	2600      	movs	r6, #0
 800c024:	341a      	adds	r4, #26
 800c026:	42b5      	cmp	r5, r6
 800c028:	d11a      	bne.n	800c060 <_printf_common+0xc8>
 800c02a:	2000      	movs	r0, #0
 800c02c:	e008      	b.n	800c040 <_printf_common+0xa8>
 800c02e:	2301      	movs	r3, #1
 800c030:	4652      	mov	r2, sl
 800c032:	4649      	mov	r1, r9
 800c034:	4638      	mov	r0, r7
 800c036:	47c0      	blx	r8
 800c038:	3001      	adds	r0, #1
 800c03a:	d103      	bne.n	800c044 <_printf_common+0xac>
 800c03c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c044:	3501      	adds	r5, #1
 800c046:	e7c6      	b.n	800bfd6 <_printf_common+0x3e>
 800c048:	18e1      	adds	r1, r4, r3
 800c04a:	1c5a      	adds	r2, r3, #1
 800c04c:	2030      	movs	r0, #48	; 0x30
 800c04e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c052:	4422      	add	r2, r4
 800c054:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c058:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c05c:	3302      	adds	r3, #2
 800c05e:	e7c7      	b.n	800bff0 <_printf_common+0x58>
 800c060:	2301      	movs	r3, #1
 800c062:	4622      	mov	r2, r4
 800c064:	4649      	mov	r1, r9
 800c066:	4638      	mov	r0, r7
 800c068:	47c0      	blx	r8
 800c06a:	3001      	adds	r0, #1
 800c06c:	d0e6      	beq.n	800c03c <_printf_common+0xa4>
 800c06e:	3601      	adds	r6, #1
 800c070:	e7d9      	b.n	800c026 <_printf_common+0x8e>
	...

0800c074 <_printf_i>:
 800c074:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c078:	7e0f      	ldrb	r7, [r1, #24]
 800c07a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c07c:	2f78      	cmp	r7, #120	; 0x78
 800c07e:	4691      	mov	r9, r2
 800c080:	4680      	mov	r8, r0
 800c082:	460c      	mov	r4, r1
 800c084:	469a      	mov	sl, r3
 800c086:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c08a:	d807      	bhi.n	800c09c <_printf_i+0x28>
 800c08c:	2f62      	cmp	r7, #98	; 0x62
 800c08e:	d80a      	bhi.n	800c0a6 <_printf_i+0x32>
 800c090:	2f00      	cmp	r7, #0
 800c092:	f000 80d4 	beq.w	800c23e <_printf_i+0x1ca>
 800c096:	2f58      	cmp	r7, #88	; 0x58
 800c098:	f000 80c0 	beq.w	800c21c <_printf_i+0x1a8>
 800c09c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c0a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c0a4:	e03a      	b.n	800c11c <_printf_i+0xa8>
 800c0a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c0aa:	2b15      	cmp	r3, #21
 800c0ac:	d8f6      	bhi.n	800c09c <_printf_i+0x28>
 800c0ae:	a101      	add	r1, pc, #4	; (adr r1, 800c0b4 <_printf_i+0x40>)
 800c0b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c0b4:	0800c10d 	.word	0x0800c10d
 800c0b8:	0800c121 	.word	0x0800c121
 800c0bc:	0800c09d 	.word	0x0800c09d
 800c0c0:	0800c09d 	.word	0x0800c09d
 800c0c4:	0800c09d 	.word	0x0800c09d
 800c0c8:	0800c09d 	.word	0x0800c09d
 800c0cc:	0800c121 	.word	0x0800c121
 800c0d0:	0800c09d 	.word	0x0800c09d
 800c0d4:	0800c09d 	.word	0x0800c09d
 800c0d8:	0800c09d 	.word	0x0800c09d
 800c0dc:	0800c09d 	.word	0x0800c09d
 800c0e0:	0800c225 	.word	0x0800c225
 800c0e4:	0800c14d 	.word	0x0800c14d
 800c0e8:	0800c1df 	.word	0x0800c1df
 800c0ec:	0800c09d 	.word	0x0800c09d
 800c0f0:	0800c09d 	.word	0x0800c09d
 800c0f4:	0800c247 	.word	0x0800c247
 800c0f8:	0800c09d 	.word	0x0800c09d
 800c0fc:	0800c14d 	.word	0x0800c14d
 800c100:	0800c09d 	.word	0x0800c09d
 800c104:	0800c09d 	.word	0x0800c09d
 800c108:	0800c1e7 	.word	0x0800c1e7
 800c10c:	682b      	ldr	r3, [r5, #0]
 800c10e:	1d1a      	adds	r2, r3, #4
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	602a      	str	r2, [r5, #0]
 800c114:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c118:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c11c:	2301      	movs	r3, #1
 800c11e:	e09f      	b.n	800c260 <_printf_i+0x1ec>
 800c120:	6820      	ldr	r0, [r4, #0]
 800c122:	682b      	ldr	r3, [r5, #0]
 800c124:	0607      	lsls	r7, r0, #24
 800c126:	f103 0104 	add.w	r1, r3, #4
 800c12a:	6029      	str	r1, [r5, #0]
 800c12c:	d501      	bpl.n	800c132 <_printf_i+0xbe>
 800c12e:	681e      	ldr	r6, [r3, #0]
 800c130:	e003      	b.n	800c13a <_printf_i+0xc6>
 800c132:	0646      	lsls	r6, r0, #25
 800c134:	d5fb      	bpl.n	800c12e <_printf_i+0xba>
 800c136:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c13a:	2e00      	cmp	r6, #0
 800c13c:	da03      	bge.n	800c146 <_printf_i+0xd2>
 800c13e:	232d      	movs	r3, #45	; 0x2d
 800c140:	4276      	negs	r6, r6
 800c142:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c146:	485a      	ldr	r0, [pc, #360]	; (800c2b0 <_printf_i+0x23c>)
 800c148:	230a      	movs	r3, #10
 800c14a:	e012      	b.n	800c172 <_printf_i+0xfe>
 800c14c:	682b      	ldr	r3, [r5, #0]
 800c14e:	6820      	ldr	r0, [r4, #0]
 800c150:	1d19      	adds	r1, r3, #4
 800c152:	6029      	str	r1, [r5, #0]
 800c154:	0605      	lsls	r5, r0, #24
 800c156:	d501      	bpl.n	800c15c <_printf_i+0xe8>
 800c158:	681e      	ldr	r6, [r3, #0]
 800c15a:	e002      	b.n	800c162 <_printf_i+0xee>
 800c15c:	0641      	lsls	r1, r0, #25
 800c15e:	d5fb      	bpl.n	800c158 <_printf_i+0xe4>
 800c160:	881e      	ldrh	r6, [r3, #0]
 800c162:	4853      	ldr	r0, [pc, #332]	; (800c2b0 <_printf_i+0x23c>)
 800c164:	2f6f      	cmp	r7, #111	; 0x6f
 800c166:	bf0c      	ite	eq
 800c168:	2308      	moveq	r3, #8
 800c16a:	230a      	movne	r3, #10
 800c16c:	2100      	movs	r1, #0
 800c16e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c172:	6865      	ldr	r5, [r4, #4]
 800c174:	60a5      	str	r5, [r4, #8]
 800c176:	2d00      	cmp	r5, #0
 800c178:	bfa2      	ittt	ge
 800c17a:	6821      	ldrge	r1, [r4, #0]
 800c17c:	f021 0104 	bicge.w	r1, r1, #4
 800c180:	6021      	strge	r1, [r4, #0]
 800c182:	b90e      	cbnz	r6, 800c188 <_printf_i+0x114>
 800c184:	2d00      	cmp	r5, #0
 800c186:	d04b      	beq.n	800c220 <_printf_i+0x1ac>
 800c188:	4615      	mov	r5, r2
 800c18a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c18e:	fb03 6711 	mls	r7, r3, r1, r6
 800c192:	5dc7      	ldrb	r7, [r0, r7]
 800c194:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c198:	4637      	mov	r7, r6
 800c19a:	42bb      	cmp	r3, r7
 800c19c:	460e      	mov	r6, r1
 800c19e:	d9f4      	bls.n	800c18a <_printf_i+0x116>
 800c1a0:	2b08      	cmp	r3, #8
 800c1a2:	d10b      	bne.n	800c1bc <_printf_i+0x148>
 800c1a4:	6823      	ldr	r3, [r4, #0]
 800c1a6:	07de      	lsls	r6, r3, #31
 800c1a8:	d508      	bpl.n	800c1bc <_printf_i+0x148>
 800c1aa:	6923      	ldr	r3, [r4, #16]
 800c1ac:	6861      	ldr	r1, [r4, #4]
 800c1ae:	4299      	cmp	r1, r3
 800c1b0:	bfde      	ittt	le
 800c1b2:	2330      	movle	r3, #48	; 0x30
 800c1b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c1b8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c1bc:	1b52      	subs	r2, r2, r5
 800c1be:	6122      	str	r2, [r4, #16]
 800c1c0:	f8cd a000 	str.w	sl, [sp]
 800c1c4:	464b      	mov	r3, r9
 800c1c6:	aa03      	add	r2, sp, #12
 800c1c8:	4621      	mov	r1, r4
 800c1ca:	4640      	mov	r0, r8
 800c1cc:	f7ff fee4 	bl	800bf98 <_printf_common>
 800c1d0:	3001      	adds	r0, #1
 800c1d2:	d14a      	bne.n	800c26a <_printf_i+0x1f6>
 800c1d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c1d8:	b004      	add	sp, #16
 800c1da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1de:	6823      	ldr	r3, [r4, #0]
 800c1e0:	f043 0320 	orr.w	r3, r3, #32
 800c1e4:	6023      	str	r3, [r4, #0]
 800c1e6:	4833      	ldr	r0, [pc, #204]	; (800c2b4 <_printf_i+0x240>)
 800c1e8:	2778      	movs	r7, #120	; 0x78
 800c1ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c1ee:	6823      	ldr	r3, [r4, #0]
 800c1f0:	6829      	ldr	r1, [r5, #0]
 800c1f2:	061f      	lsls	r7, r3, #24
 800c1f4:	f851 6b04 	ldr.w	r6, [r1], #4
 800c1f8:	d402      	bmi.n	800c200 <_printf_i+0x18c>
 800c1fa:	065f      	lsls	r7, r3, #25
 800c1fc:	bf48      	it	mi
 800c1fe:	b2b6      	uxthmi	r6, r6
 800c200:	07df      	lsls	r7, r3, #31
 800c202:	bf48      	it	mi
 800c204:	f043 0320 	orrmi.w	r3, r3, #32
 800c208:	6029      	str	r1, [r5, #0]
 800c20a:	bf48      	it	mi
 800c20c:	6023      	strmi	r3, [r4, #0]
 800c20e:	b91e      	cbnz	r6, 800c218 <_printf_i+0x1a4>
 800c210:	6823      	ldr	r3, [r4, #0]
 800c212:	f023 0320 	bic.w	r3, r3, #32
 800c216:	6023      	str	r3, [r4, #0]
 800c218:	2310      	movs	r3, #16
 800c21a:	e7a7      	b.n	800c16c <_printf_i+0xf8>
 800c21c:	4824      	ldr	r0, [pc, #144]	; (800c2b0 <_printf_i+0x23c>)
 800c21e:	e7e4      	b.n	800c1ea <_printf_i+0x176>
 800c220:	4615      	mov	r5, r2
 800c222:	e7bd      	b.n	800c1a0 <_printf_i+0x12c>
 800c224:	682b      	ldr	r3, [r5, #0]
 800c226:	6826      	ldr	r6, [r4, #0]
 800c228:	6961      	ldr	r1, [r4, #20]
 800c22a:	1d18      	adds	r0, r3, #4
 800c22c:	6028      	str	r0, [r5, #0]
 800c22e:	0635      	lsls	r5, r6, #24
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	d501      	bpl.n	800c238 <_printf_i+0x1c4>
 800c234:	6019      	str	r1, [r3, #0]
 800c236:	e002      	b.n	800c23e <_printf_i+0x1ca>
 800c238:	0670      	lsls	r0, r6, #25
 800c23a:	d5fb      	bpl.n	800c234 <_printf_i+0x1c0>
 800c23c:	8019      	strh	r1, [r3, #0]
 800c23e:	2300      	movs	r3, #0
 800c240:	6123      	str	r3, [r4, #16]
 800c242:	4615      	mov	r5, r2
 800c244:	e7bc      	b.n	800c1c0 <_printf_i+0x14c>
 800c246:	682b      	ldr	r3, [r5, #0]
 800c248:	1d1a      	adds	r2, r3, #4
 800c24a:	602a      	str	r2, [r5, #0]
 800c24c:	681d      	ldr	r5, [r3, #0]
 800c24e:	6862      	ldr	r2, [r4, #4]
 800c250:	2100      	movs	r1, #0
 800c252:	4628      	mov	r0, r5
 800c254:	f7f3 ffbc 	bl	80001d0 <memchr>
 800c258:	b108      	cbz	r0, 800c25e <_printf_i+0x1ea>
 800c25a:	1b40      	subs	r0, r0, r5
 800c25c:	6060      	str	r0, [r4, #4]
 800c25e:	6863      	ldr	r3, [r4, #4]
 800c260:	6123      	str	r3, [r4, #16]
 800c262:	2300      	movs	r3, #0
 800c264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c268:	e7aa      	b.n	800c1c0 <_printf_i+0x14c>
 800c26a:	6923      	ldr	r3, [r4, #16]
 800c26c:	462a      	mov	r2, r5
 800c26e:	4649      	mov	r1, r9
 800c270:	4640      	mov	r0, r8
 800c272:	47d0      	blx	sl
 800c274:	3001      	adds	r0, #1
 800c276:	d0ad      	beq.n	800c1d4 <_printf_i+0x160>
 800c278:	6823      	ldr	r3, [r4, #0]
 800c27a:	079b      	lsls	r3, r3, #30
 800c27c:	d413      	bmi.n	800c2a6 <_printf_i+0x232>
 800c27e:	68e0      	ldr	r0, [r4, #12]
 800c280:	9b03      	ldr	r3, [sp, #12]
 800c282:	4298      	cmp	r0, r3
 800c284:	bfb8      	it	lt
 800c286:	4618      	movlt	r0, r3
 800c288:	e7a6      	b.n	800c1d8 <_printf_i+0x164>
 800c28a:	2301      	movs	r3, #1
 800c28c:	4632      	mov	r2, r6
 800c28e:	4649      	mov	r1, r9
 800c290:	4640      	mov	r0, r8
 800c292:	47d0      	blx	sl
 800c294:	3001      	adds	r0, #1
 800c296:	d09d      	beq.n	800c1d4 <_printf_i+0x160>
 800c298:	3501      	adds	r5, #1
 800c29a:	68e3      	ldr	r3, [r4, #12]
 800c29c:	9903      	ldr	r1, [sp, #12]
 800c29e:	1a5b      	subs	r3, r3, r1
 800c2a0:	42ab      	cmp	r3, r5
 800c2a2:	dcf2      	bgt.n	800c28a <_printf_i+0x216>
 800c2a4:	e7eb      	b.n	800c27e <_printf_i+0x20a>
 800c2a6:	2500      	movs	r5, #0
 800c2a8:	f104 0619 	add.w	r6, r4, #25
 800c2ac:	e7f5      	b.n	800c29a <_printf_i+0x226>
 800c2ae:	bf00      	nop
 800c2b0:	0800cc54 	.word	0x0800cc54
 800c2b4:	0800cc65 	.word	0x0800cc65

0800c2b8 <__swbuf_r>:
 800c2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ba:	460e      	mov	r6, r1
 800c2bc:	4614      	mov	r4, r2
 800c2be:	4605      	mov	r5, r0
 800c2c0:	b118      	cbz	r0, 800c2ca <__swbuf_r+0x12>
 800c2c2:	6a03      	ldr	r3, [r0, #32]
 800c2c4:	b90b      	cbnz	r3, 800c2ca <__swbuf_r+0x12>
 800c2c6:	f7ff fab3 	bl	800b830 <__sinit>
 800c2ca:	69a3      	ldr	r3, [r4, #24]
 800c2cc:	60a3      	str	r3, [r4, #8]
 800c2ce:	89a3      	ldrh	r3, [r4, #12]
 800c2d0:	071a      	lsls	r2, r3, #28
 800c2d2:	d525      	bpl.n	800c320 <__swbuf_r+0x68>
 800c2d4:	6923      	ldr	r3, [r4, #16]
 800c2d6:	b31b      	cbz	r3, 800c320 <__swbuf_r+0x68>
 800c2d8:	6823      	ldr	r3, [r4, #0]
 800c2da:	6922      	ldr	r2, [r4, #16]
 800c2dc:	1a98      	subs	r0, r3, r2
 800c2de:	6963      	ldr	r3, [r4, #20]
 800c2e0:	b2f6      	uxtb	r6, r6
 800c2e2:	4283      	cmp	r3, r0
 800c2e4:	4637      	mov	r7, r6
 800c2e6:	dc04      	bgt.n	800c2f2 <__swbuf_r+0x3a>
 800c2e8:	4621      	mov	r1, r4
 800c2ea:	4628      	mov	r0, r5
 800c2ec:	f7ff fc46 	bl	800bb7c <_fflush_r>
 800c2f0:	b9e0      	cbnz	r0, 800c32c <__swbuf_r+0x74>
 800c2f2:	68a3      	ldr	r3, [r4, #8]
 800c2f4:	3b01      	subs	r3, #1
 800c2f6:	60a3      	str	r3, [r4, #8]
 800c2f8:	6823      	ldr	r3, [r4, #0]
 800c2fa:	1c5a      	adds	r2, r3, #1
 800c2fc:	6022      	str	r2, [r4, #0]
 800c2fe:	701e      	strb	r6, [r3, #0]
 800c300:	6962      	ldr	r2, [r4, #20]
 800c302:	1c43      	adds	r3, r0, #1
 800c304:	429a      	cmp	r2, r3
 800c306:	d004      	beq.n	800c312 <__swbuf_r+0x5a>
 800c308:	89a3      	ldrh	r3, [r4, #12]
 800c30a:	07db      	lsls	r3, r3, #31
 800c30c:	d506      	bpl.n	800c31c <__swbuf_r+0x64>
 800c30e:	2e0a      	cmp	r6, #10
 800c310:	d104      	bne.n	800c31c <__swbuf_r+0x64>
 800c312:	4621      	mov	r1, r4
 800c314:	4628      	mov	r0, r5
 800c316:	f7ff fc31 	bl	800bb7c <_fflush_r>
 800c31a:	b938      	cbnz	r0, 800c32c <__swbuf_r+0x74>
 800c31c:	4638      	mov	r0, r7
 800c31e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c320:	4621      	mov	r1, r4
 800c322:	4628      	mov	r0, r5
 800c324:	f000 f806 	bl	800c334 <__swsetup_r>
 800c328:	2800      	cmp	r0, #0
 800c32a:	d0d5      	beq.n	800c2d8 <__swbuf_r+0x20>
 800c32c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c330:	e7f4      	b.n	800c31c <__swbuf_r+0x64>
	...

0800c334 <__swsetup_r>:
 800c334:	b538      	push	{r3, r4, r5, lr}
 800c336:	4b2a      	ldr	r3, [pc, #168]	; (800c3e0 <__swsetup_r+0xac>)
 800c338:	4605      	mov	r5, r0
 800c33a:	6818      	ldr	r0, [r3, #0]
 800c33c:	460c      	mov	r4, r1
 800c33e:	b118      	cbz	r0, 800c348 <__swsetup_r+0x14>
 800c340:	6a03      	ldr	r3, [r0, #32]
 800c342:	b90b      	cbnz	r3, 800c348 <__swsetup_r+0x14>
 800c344:	f7ff fa74 	bl	800b830 <__sinit>
 800c348:	89a3      	ldrh	r3, [r4, #12]
 800c34a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c34e:	0718      	lsls	r0, r3, #28
 800c350:	d422      	bmi.n	800c398 <__swsetup_r+0x64>
 800c352:	06d9      	lsls	r1, r3, #27
 800c354:	d407      	bmi.n	800c366 <__swsetup_r+0x32>
 800c356:	2309      	movs	r3, #9
 800c358:	602b      	str	r3, [r5, #0]
 800c35a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c35e:	81a3      	strh	r3, [r4, #12]
 800c360:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c364:	e034      	b.n	800c3d0 <__swsetup_r+0x9c>
 800c366:	0758      	lsls	r0, r3, #29
 800c368:	d512      	bpl.n	800c390 <__swsetup_r+0x5c>
 800c36a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c36c:	b141      	cbz	r1, 800c380 <__swsetup_r+0x4c>
 800c36e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c372:	4299      	cmp	r1, r3
 800c374:	d002      	beq.n	800c37c <__swsetup_r+0x48>
 800c376:	4628      	mov	r0, r5
 800c378:	f7ff fb2e 	bl	800b9d8 <_free_r>
 800c37c:	2300      	movs	r3, #0
 800c37e:	6363      	str	r3, [r4, #52]	; 0x34
 800c380:	89a3      	ldrh	r3, [r4, #12]
 800c382:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c386:	81a3      	strh	r3, [r4, #12]
 800c388:	2300      	movs	r3, #0
 800c38a:	6063      	str	r3, [r4, #4]
 800c38c:	6923      	ldr	r3, [r4, #16]
 800c38e:	6023      	str	r3, [r4, #0]
 800c390:	89a3      	ldrh	r3, [r4, #12]
 800c392:	f043 0308 	orr.w	r3, r3, #8
 800c396:	81a3      	strh	r3, [r4, #12]
 800c398:	6923      	ldr	r3, [r4, #16]
 800c39a:	b94b      	cbnz	r3, 800c3b0 <__swsetup_r+0x7c>
 800c39c:	89a3      	ldrh	r3, [r4, #12]
 800c39e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c3a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3a6:	d003      	beq.n	800c3b0 <__swsetup_r+0x7c>
 800c3a8:	4621      	mov	r1, r4
 800c3aa:	4628      	mov	r0, r5
 800c3ac:	f000 f840 	bl	800c430 <__smakebuf_r>
 800c3b0:	89a0      	ldrh	r0, [r4, #12]
 800c3b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c3b6:	f010 0301 	ands.w	r3, r0, #1
 800c3ba:	d00a      	beq.n	800c3d2 <__swsetup_r+0x9e>
 800c3bc:	2300      	movs	r3, #0
 800c3be:	60a3      	str	r3, [r4, #8]
 800c3c0:	6963      	ldr	r3, [r4, #20]
 800c3c2:	425b      	negs	r3, r3
 800c3c4:	61a3      	str	r3, [r4, #24]
 800c3c6:	6923      	ldr	r3, [r4, #16]
 800c3c8:	b943      	cbnz	r3, 800c3dc <__swsetup_r+0xa8>
 800c3ca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c3ce:	d1c4      	bne.n	800c35a <__swsetup_r+0x26>
 800c3d0:	bd38      	pop	{r3, r4, r5, pc}
 800c3d2:	0781      	lsls	r1, r0, #30
 800c3d4:	bf58      	it	pl
 800c3d6:	6963      	ldrpl	r3, [r4, #20]
 800c3d8:	60a3      	str	r3, [r4, #8]
 800c3da:	e7f4      	b.n	800c3c6 <__swsetup_r+0x92>
 800c3dc:	2000      	movs	r0, #0
 800c3de:	e7f7      	b.n	800c3d0 <__swsetup_r+0x9c>
 800c3e0:	20000264 	.word	0x20000264

0800c3e4 <__swhatbuf_r>:
 800c3e4:	b570      	push	{r4, r5, r6, lr}
 800c3e6:	460c      	mov	r4, r1
 800c3e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3ec:	2900      	cmp	r1, #0
 800c3ee:	b096      	sub	sp, #88	; 0x58
 800c3f0:	4615      	mov	r5, r2
 800c3f2:	461e      	mov	r6, r3
 800c3f4:	da0d      	bge.n	800c412 <__swhatbuf_r+0x2e>
 800c3f6:	89a3      	ldrh	r3, [r4, #12]
 800c3f8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c3fc:	f04f 0100 	mov.w	r1, #0
 800c400:	bf0c      	ite	eq
 800c402:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c406:	2340      	movne	r3, #64	; 0x40
 800c408:	2000      	movs	r0, #0
 800c40a:	6031      	str	r1, [r6, #0]
 800c40c:	602b      	str	r3, [r5, #0]
 800c40e:	b016      	add	sp, #88	; 0x58
 800c410:	bd70      	pop	{r4, r5, r6, pc}
 800c412:	466a      	mov	r2, sp
 800c414:	f000 f848 	bl	800c4a8 <_fstat_r>
 800c418:	2800      	cmp	r0, #0
 800c41a:	dbec      	blt.n	800c3f6 <__swhatbuf_r+0x12>
 800c41c:	9901      	ldr	r1, [sp, #4]
 800c41e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c422:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c426:	4259      	negs	r1, r3
 800c428:	4159      	adcs	r1, r3
 800c42a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c42e:	e7eb      	b.n	800c408 <__swhatbuf_r+0x24>

0800c430 <__smakebuf_r>:
 800c430:	898b      	ldrh	r3, [r1, #12]
 800c432:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c434:	079d      	lsls	r5, r3, #30
 800c436:	4606      	mov	r6, r0
 800c438:	460c      	mov	r4, r1
 800c43a:	d507      	bpl.n	800c44c <__smakebuf_r+0x1c>
 800c43c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c440:	6023      	str	r3, [r4, #0]
 800c442:	6123      	str	r3, [r4, #16]
 800c444:	2301      	movs	r3, #1
 800c446:	6163      	str	r3, [r4, #20]
 800c448:	b002      	add	sp, #8
 800c44a:	bd70      	pop	{r4, r5, r6, pc}
 800c44c:	ab01      	add	r3, sp, #4
 800c44e:	466a      	mov	r2, sp
 800c450:	f7ff ffc8 	bl	800c3e4 <__swhatbuf_r>
 800c454:	9900      	ldr	r1, [sp, #0]
 800c456:	4605      	mov	r5, r0
 800c458:	4630      	mov	r0, r6
 800c45a:	f7ff f865 	bl	800b528 <_malloc_r>
 800c45e:	b948      	cbnz	r0, 800c474 <__smakebuf_r+0x44>
 800c460:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c464:	059a      	lsls	r2, r3, #22
 800c466:	d4ef      	bmi.n	800c448 <__smakebuf_r+0x18>
 800c468:	f023 0303 	bic.w	r3, r3, #3
 800c46c:	f043 0302 	orr.w	r3, r3, #2
 800c470:	81a3      	strh	r3, [r4, #12]
 800c472:	e7e3      	b.n	800c43c <__smakebuf_r+0xc>
 800c474:	89a3      	ldrh	r3, [r4, #12]
 800c476:	6020      	str	r0, [r4, #0]
 800c478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c47c:	81a3      	strh	r3, [r4, #12]
 800c47e:	9b00      	ldr	r3, [sp, #0]
 800c480:	6163      	str	r3, [r4, #20]
 800c482:	9b01      	ldr	r3, [sp, #4]
 800c484:	6120      	str	r0, [r4, #16]
 800c486:	b15b      	cbz	r3, 800c4a0 <__smakebuf_r+0x70>
 800c488:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c48c:	4630      	mov	r0, r6
 800c48e:	f000 f81d 	bl	800c4cc <_isatty_r>
 800c492:	b128      	cbz	r0, 800c4a0 <__smakebuf_r+0x70>
 800c494:	89a3      	ldrh	r3, [r4, #12]
 800c496:	f023 0303 	bic.w	r3, r3, #3
 800c49a:	f043 0301 	orr.w	r3, r3, #1
 800c49e:	81a3      	strh	r3, [r4, #12]
 800c4a0:	89a3      	ldrh	r3, [r4, #12]
 800c4a2:	431d      	orrs	r5, r3
 800c4a4:	81a5      	strh	r5, [r4, #12]
 800c4a6:	e7cf      	b.n	800c448 <__smakebuf_r+0x18>

0800c4a8 <_fstat_r>:
 800c4a8:	b538      	push	{r3, r4, r5, lr}
 800c4aa:	4d07      	ldr	r5, [pc, #28]	; (800c4c8 <_fstat_r+0x20>)
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	4604      	mov	r4, r0
 800c4b0:	4608      	mov	r0, r1
 800c4b2:	4611      	mov	r1, r2
 800c4b4:	602b      	str	r3, [r5, #0]
 800c4b6:	f7fe ff20 	bl	800b2fa <_fstat>
 800c4ba:	1c43      	adds	r3, r0, #1
 800c4bc:	d102      	bne.n	800c4c4 <_fstat_r+0x1c>
 800c4be:	682b      	ldr	r3, [r5, #0]
 800c4c0:	b103      	cbz	r3, 800c4c4 <_fstat_r+0x1c>
 800c4c2:	6023      	str	r3, [r4, #0]
 800c4c4:	bd38      	pop	{r3, r4, r5, pc}
 800c4c6:	bf00      	nop
 800c4c8:	20003644 	.word	0x20003644

0800c4cc <_isatty_r>:
 800c4cc:	b538      	push	{r3, r4, r5, lr}
 800c4ce:	4d06      	ldr	r5, [pc, #24]	; (800c4e8 <_isatty_r+0x1c>)
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	4604      	mov	r4, r0
 800c4d4:	4608      	mov	r0, r1
 800c4d6:	602b      	str	r3, [r5, #0]
 800c4d8:	f7fe ff1f 	bl	800b31a <_isatty>
 800c4dc:	1c43      	adds	r3, r0, #1
 800c4de:	d102      	bne.n	800c4e6 <_isatty_r+0x1a>
 800c4e0:	682b      	ldr	r3, [r5, #0]
 800c4e2:	b103      	cbz	r3, 800c4e6 <_isatty_r+0x1a>
 800c4e4:	6023      	str	r3, [r4, #0]
 800c4e6:	bd38      	pop	{r3, r4, r5, pc}
 800c4e8:	20003644 	.word	0x20003644

0800c4ec <_raise_r>:
 800c4ec:	291f      	cmp	r1, #31
 800c4ee:	b538      	push	{r3, r4, r5, lr}
 800c4f0:	4604      	mov	r4, r0
 800c4f2:	460d      	mov	r5, r1
 800c4f4:	d904      	bls.n	800c500 <_raise_r+0x14>
 800c4f6:	2316      	movs	r3, #22
 800c4f8:	6003      	str	r3, [r0, #0]
 800c4fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c4fe:	bd38      	pop	{r3, r4, r5, pc}
 800c500:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c502:	b112      	cbz	r2, 800c50a <_raise_r+0x1e>
 800c504:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c508:	b94b      	cbnz	r3, 800c51e <_raise_r+0x32>
 800c50a:	4620      	mov	r0, r4
 800c50c:	f000 f830 	bl	800c570 <_getpid_r>
 800c510:	462a      	mov	r2, r5
 800c512:	4601      	mov	r1, r0
 800c514:	4620      	mov	r0, r4
 800c516:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c51a:	f000 b817 	b.w	800c54c <_kill_r>
 800c51e:	2b01      	cmp	r3, #1
 800c520:	d00a      	beq.n	800c538 <_raise_r+0x4c>
 800c522:	1c59      	adds	r1, r3, #1
 800c524:	d103      	bne.n	800c52e <_raise_r+0x42>
 800c526:	2316      	movs	r3, #22
 800c528:	6003      	str	r3, [r0, #0]
 800c52a:	2001      	movs	r0, #1
 800c52c:	e7e7      	b.n	800c4fe <_raise_r+0x12>
 800c52e:	2400      	movs	r4, #0
 800c530:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c534:	4628      	mov	r0, r5
 800c536:	4798      	blx	r3
 800c538:	2000      	movs	r0, #0
 800c53a:	e7e0      	b.n	800c4fe <_raise_r+0x12>

0800c53c <raise>:
 800c53c:	4b02      	ldr	r3, [pc, #8]	; (800c548 <raise+0xc>)
 800c53e:	4601      	mov	r1, r0
 800c540:	6818      	ldr	r0, [r3, #0]
 800c542:	f7ff bfd3 	b.w	800c4ec <_raise_r>
 800c546:	bf00      	nop
 800c548:	20000264 	.word	0x20000264

0800c54c <_kill_r>:
 800c54c:	b538      	push	{r3, r4, r5, lr}
 800c54e:	4d07      	ldr	r5, [pc, #28]	; (800c56c <_kill_r+0x20>)
 800c550:	2300      	movs	r3, #0
 800c552:	4604      	mov	r4, r0
 800c554:	4608      	mov	r0, r1
 800c556:	4611      	mov	r1, r2
 800c558:	602b      	str	r3, [r5, #0]
 800c55a:	f7fe fe6f 	bl	800b23c <_kill>
 800c55e:	1c43      	adds	r3, r0, #1
 800c560:	d102      	bne.n	800c568 <_kill_r+0x1c>
 800c562:	682b      	ldr	r3, [r5, #0]
 800c564:	b103      	cbz	r3, 800c568 <_kill_r+0x1c>
 800c566:	6023      	str	r3, [r4, #0]
 800c568:	bd38      	pop	{r3, r4, r5, pc}
 800c56a:	bf00      	nop
 800c56c:	20003644 	.word	0x20003644

0800c570 <_getpid_r>:
 800c570:	f7fe be5c 	b.w	800b22c <_getpid>

0800c574 <_gettimeofday>:
 800c574:	4b02      	ldr	r3, [pc, #8]	; (800c580 <_gettimeofday+0xc>)
 800c576:	2258      	movs	r2, #88	; 0x58
 800c578:	601a      	str	r2, [r3, #0]
 800c57a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c57e:	4770      	bx	lr
 800c580:	20003644 	.word	0x20003644

0800c584 <_init>:
 800c584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c586:	bf00      	nop
 800c588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c58a:	bc08      	pop	{r3}
 800c58c:	469e      	mov	lr, r3
 800c58e:	4770      	bx	lr

0800c590 <_fini>:
 800c590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c592:	bf00      	nop
 800c594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c596:	bc08      	pop	{r3}
 800c598:	469e      	mov	lr, r3
 800c59a:	4770      	bx	lr
