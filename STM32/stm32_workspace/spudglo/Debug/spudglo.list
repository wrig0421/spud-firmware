
spudglo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf24  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  0800c0b4  0800c0b4  0001c0b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c318  0800c318  00020240  2**0
                  CONTENTS
  4 .ARM          00000008  0800c318  0800c318  0001c318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c320  0800c320  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c320  0800c320  0001c320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c324  0800c324  0001c324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800c328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003d5c  20000240  0800c568  00020240  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003f9c  0800c568  00023f9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002584e  00000000  00000000  000202b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000058b8  00000000  00000000  00045b01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001fe8  00000000  00000000  0004b3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000018e0  00000000  00000000  0004d3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a5b6  00000000  00000000  0004ec88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a525  00000000  00000000  0007923e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f961d  00000000  00000000  000a3763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008f50  00000000  00000000  0019cd80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  001a5cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000240 	.word	0x20000240
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c09c 	.word	0x0800c09c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000244 	.word	0x20000244
 80001cc:	0800c09c 	.word	0x0800c09c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ac0:	f000 b970 	b.w	8000da4 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9e08      	ldr	r6, [sp, #32]
 8000ae2:	460d      	mov	r5, r1
 8000ae4:	4604      	mov	r4, r0
 8000ae6:	460f      	mov	r7, r1
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d14a      	bne.n	8000b82 <__udivmoddi4+0xa6>
 8000aec:	428a      	cmp	r2, r1
 8000aee:	4694      	mov	ip, r2
 8000af0:	d965      	bls.n	8000bbe <__udivmoddi4+0xe2>
 8000af2:	fab2 f382 	clz	r3, r2
 8000af6:	b143      	cbz	r3, 8000b0a <__udivmoddi4+0x2e>
 8000af8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000afc:	f1c3 0220 	rsb	r2, r3, #32
 8000b00:	409f      	lsls	r7, r3
 8000b02:	fa20 f202 	lsr.w	r2, r0, r2
 8000b06:	4317      	orrs	r7, r2
 8000b08:	409c      	lsls	r4, r3
 8000b0a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b0e:	fa1f f58c 	uxth.w	r5, ip
 8000b12:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b16:	0c22      	lsrs	r2, r4, #16
 8000b18:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b1c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b20:	fb01 f005 	mul.w	r0, r1, r5
 8000b24:	4290      	cmp	r0, r2
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x62>
 8000b28:	eb1c 0202 	adds.w	r2, ip, r2
 8000b2c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000b30:	f080 811c 	bcs.w	8000d6c <__udivmoddi4+0x290>
 8000b34:	4290      	cmp	r0, r2
 8000b36:	f240 8119 	bls.w	8000d6c <__udivmoddi4+0x290>
 8000b3a:	3902      	subs	r1, #2
 8000b3c:	4462      	add	r2, ip
 8000b3e:	1a12      	subs	r2, r2, r0
 8000b40:	b2a4      	uxth	r4, r4
 8000b42:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b46:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b4a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b4e:	fb00 f505 	mul.w	r5, r0, r5
 8000b52:	42a5      	cmp	r5, r4
 8000b54:	d90a      	bls.n	8000b6c <__udivmoddi4+0x90>
 8000b56:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b5e:	f080 8107 	bcs.w	8000d70 <__udivmoddi4+0x294>
 8000b62:	42a5      	cmp	r5, r4
 8000b64:	f240 8104 	bls.w	8000d70 <__udivmoddi4+0x294>
 8000b68:	4464      	add	r4, ip
 8000b6a:	3802      	subs	r0, #2
 8000b6c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b70:	1b64      	subs	r4, r4, r5
 8000b72:	2100      	movs	r1, #0
 8000b74:	b11e      	cbz	r6, 8000b7e <__udivmoddi4+0xa2>
 8000b76:	40dc      	lsrs	r4, r3
 8000b78:	2300      	movs	r3, #0
 8000b7a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d908      	bls.n	8000b98 <__udivmoddi4+0xbc>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	f000 80ed 	beq.w	8000d66 <__udivmoddi4+0x28a>
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b92:	4608      	mov	r0, r1
 8000b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b98:	fab3 f183 	clz	r1, r3
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	d149      	bne.n	8000c34 <__udivmoddi4+0x158>
 8000ba0:	42ab      	cmp	r3, r5
 8000ba2:	d302      	bcc.n	8000baa <__udivmoddi4+0xce>
 8000ba4:	4282      	cmp	r2, r0
 8000ba6:	f200 80f8 	bhi.w	8000d9a <__udivmoddi4+0x2be>
 8000baa:	1a84      	subs	r4, r0, r2
 8000bac:	eb65 0203 	sbc.w	r2, r5, r3
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	4617      	mov	r7, r2
 8000bb4:	2e00      	cmp	r6, #0
 8000bb6:	d0e2      	beq.n	8000b7e <__udivmoddi4+0xa2>
 8000bb8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bbc:	e7df      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000bbe:	b902      	cbnz	r2, 8000bc2 <__udivmoddi4+0xe6>
 8000bc0:	deff      	udf	#255	; 0xff
 8000bc2:	fab2 f382 	clz	r3, r2
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f040 8090 	bne.w	8000cec <__udivmoddi4+0x210>
 8000bcc:	1a8a      	subs	r2, r1, r2
 8000bce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bd2:	fa1f fe8c 	uxth.w	lr, ip
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bdc:	fb07 2015 	mls	r0, r7, r5, r2
 8000be0:	0c22      	lsrs	r2, r4, #16
 8000be2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000be6:	fb0e f005 	mul.w	r0, lr, r5
 8000bea:	4290      	cmp	r0, r2
 8000bec:	d908      	bls.n	8000c00 <__udivmoddi4+0x124>
 8000bee:	eb1c 0202 	adds.w	r2, ip, r2
 8000bf2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x122>
 8000bf8:	4290      	cmp	r0, r2
 8000bfa:	f200 80cb 	bhi.w	8000d94 <__udivmoddi4+0x2b8>
 8000bfe:	4645      	mov	r5, r8
 8000c00:	1a12      	subs	r2, r2, r0
 8000c02:	b2a4      	uxth	r4, r4
 8000c04:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c08:	fb07 2210 	mls	r2, r7, r0, r2
 8000c0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c10:	fb0e fe00 	mul.w	lr, lr, r0
 8000c14:	45a6      	cmp	lr, r4
 8000c16:	d908      	bls.n	8000c2a <__udivmoddi4+0x14e>
 8000c18:	eb1c 0404 	adds.w	r4, ip, r4
 8000c1c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c20:	d202      	bcs.n	8000c28 <__udivmoddi4+0x14c>
 8000c22:	45a6      	cmp	lr, r4
 8000c24:	f200 80bb 	bhi.w	8000d9e <__udivmoddi4+0x2c2>
 8000c28:	4610      	mov	r0, r2
 8000c2a:	eba4 040e 	sub.w	r4, r4, lr
 8000c2e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c32:	e79f      	b.n	8000b74 <__udivmoddi4+0x98>
 8000c34:	f1c1 0720 	rsb	r7, r1, #32
 8000c38:	408b      	lsls	r3, r1
 8000c3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c42:	fa05 f401 	lsl.w	r4, r5, r1
 8000c46:	fa20 f307 	lsr.w	r3, r0, r7
 8000c4a:	40fd      	lsrs	r5, r7
 8000c4c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c50:	4323      	orrs	r3, r4
 8000c52:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c56:	fa1f fe8c 	uxth.w	lr, ip
 8000c5a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c5e:	0c1c      	lsrs	r4, r3, #16
 8000c60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c64:	fb08 f50e 	mul.w	r5, r8, lr
 8000c68:	42a5      	cmp	r5, r4
 8000c6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c72:	d90b      	bls.n	8000c8c <__udivmoddi4+0x1b0>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c7c:	f080 8088 	bcs.w	8000d90 <__udivmoddi4+0x2b4>
 8000c80:	42a5      	cmp	r5, r4
 8000c82:	f240 8085 	bls.w	8000d90 <__udivmoddi4+0x2b4>
 8000c86:	f1a8 0802 	sub.w	r8, r8, #2
 8000c8a:	4464      	add	r4, ip
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	b29d      	uxth	r5, r3
 8000c90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c94:	fb09 4413 	mls	r4, r9, r3, r4
 8000c98:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c9c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ca0:	45a6      	cmp	lr, r4
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x1da>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000cac:	d26c      	bcs.n	8000d88 <__udivmoddi4+0x2ac>
 8000cae:	45a6      	cmp	lr, r4
 8000cb0:	d96a      	bls.n	8000d88 <__udivmoddi4+0x2ac>
 8000cb2:	3b02      	subs	r3, #2
 8000cb4:	4464      	add	r4, ip
 8000cb6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cba:	fba3 9502 	umull	r9, r5, r3, r2
 8000cbe:	eba4 040e 	sub.w	r4, r4, lr
 8000cc2:	42ac      	cmp	r4, r5
 8000cc4:	46c8      	mov	r8, r9
 8000cc6:	46ae      	mov	lr, r5
 8000cc8:	d356      	bcc.n	8000d78 <__udivmoddi4+0x29c>
 8000cca:	d053      	beq.n	8000d74 <__udivmoddi4+0x298>
 8000ccc:	b156      	cbz	r6, 8000ce4 <__udivmoddi4+0x208>
 8000cce:	ebb0 0208 	subs.w	r2, r0, r8
 8000cd2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cd6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cda:	40ca      	lsrs	r2, r1
 8000cdc:	40cc      	lsrs	r4, r1
 8000cde:	4317      	orrs	r7, r2
 8000ce0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cec:	f1c3 0120 	rsb	r1, r3, #32
 8000cf0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cf8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cfc:	409d      	lsls	r5, r3
 8000cfe:	432a      	orrs	r2, r5
 8000d00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d04:	fa1f fe8c 	uxth.w	lr, ip
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d10:	0c11      	lsrs	r1, r2, #16
 8000d12:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d16:	fb00 f50e 	mul.w	r5, r0, lr
 8000d1a:	428d      	cmp	r5, r1
 8000d1c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x258>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d2a:	d22f      	bcs.n	8000d8c <__udivmoddi4+0x2b0>
 8000d2c:	428d      	cmp	r5, r1
 8000d2e:	d92d      	bls.n	8000d8c <__udivmoddi4+0x2b0>
 8000d30:	3802      	subs	r0, #2
 8000d32:	4461      	add	r1, ip
 8000d34:	1b49      	subs	r1, r1, r5
 8000d36:	b292      	uxth	r2, r2
 8000d38:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d3c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d44:	fb05 f10e 	mul.w	r1, r5, lr
 8000d48:	4291      	cmp	r1, r2
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x282>
 8000d4c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d50:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d54:	d216      	bcs.n	8000d84 <__udivmoddi4+0x2a8>
 8000d56:	4291      	cmp	r1, r2
 8000d58:	d914      	bls.n	8000d84 <__udivmoddi4+0x2a8>
 8000d5a:	3d02      	subs	r5, #2
 8000d5c:	4462      	add	r2, ip
 8000d5e:	1a52      	subs	r2, r2, r1
 8000d60:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d64:	e738      	b.n	8000bd8 <__udivmoddi4+0xfc>
 8000d66:	4631      	mov	r1, r6
 8000d68:	4630      	mov	r0, r6
 8000d6a:	e708      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000d6c:	4639      	mov	r1, r7
 8000d6e:	e6e6      	b.n	8000b3e <__udivmoddi4+0x62>
 8000d70:	4610      	mov	r0, r2
 8000d72:	e6fb      	b.n	8000b6c <__udivmoddi4+0x90>
 8000d74:	4548      	cmp	r0, r9
 8000d76:	d2a9      	bcs.n	8000ccc <__udivmoddi4+0x1f0>
 8000d78:	ebb9 0802 	subs.w	r8, r9, r2
 8000d7c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d80:	3b01      	subs	r3, #1
 8000d82:	e7a3      	b.n	8000ccc <__udivmoddi4+0x1f0>
 8000d84:	4645      	mov	r5, r8
 8000d86:	e7ea      	b.n	8000d5e <__udivmoddi4+0x282>
 8000d88:	462b      	mov	r3, r5
 8000d8a:	e794      	b.n	8000cb6 <__udivmoddi4+0x1da>
 8000d8c:	4640      	mov	r0, r8
 8000d8e:	e7d1      	b.n	8000d34 <__udivmoddi4+0x258>
 8000d90:	46d0      	mov	r8, sl
 8000d92:	e77b      	b.n	8000c8c <__udivmoddi4+0x1b0>
 8000d94:	3d02      	subs	r5, #2
 8000d96:	4462      	add	r2, ip
 8000d98:	e732      	b.n	8000c00 <__udivmoddi4+0x124>
 8000d9a:	4608      	mov	r0, r1
 8000d9c:	e70a      	b.n	8000bb4 <__udivmoddi4+0xd8>
 8000d9e:	4464      	add	r4, ip
 8000da0:	3802      	subs	r0, #2
 8000da2:	e742      	b.n	8000c2a <__udivmoddi4+0x14e>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <current_monitor_set>:
float g_absolute_max_current_ratio = 0.0f; // DO NOT EXCEED!
p_current_t gp_current_monitor_strip[NUM_STRIPS];


void current_monitor_set(float value)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value < g_absolute_max_current_ratio)
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <current_monitor_set+0x3c>)
 8000db4:	edd3 7a00 	vldr	s15, [r3]
 8000db8:	ed97 7a01 	vldr	s14, [r7, #4]
 8000dbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc4:	d503      	bpl.n	8000dce <current_monitor_set+0x26>
    {
        g_max_current_ratio = value;
 8000dc6:	4a08      	ldr	r2, [pc, #32]	; (8000de8 <current_monitor_set+0x40>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6013      	str	r3, [r2, #0]
    }
    else
    {
        g_max_current_ratio = g_absolute_max_current_ratio;
    }
}
 8000dcc:	e003      	b.n	8000dd6 <current_monitor_set+0x2e>
        g_max_current_ratio = g_absolute_max_current_ratio;
 8000dce:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <current_monitor_set+0x3c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a05      	ldr	r2, [pc, #20]	; (8000de8 <current_monitor_set+0x40>)
 8000dd4:	6013      	str	r3, [r2, #0]
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	2000025c 	.word	0x2000025c
 8000de8:	20000000 	.word	0x20000000

08000dec <current_monitor_ratio>:


float current_monitor_ratio(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
    return g_max_current_ratio;
 8000df0:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <current_monitor_ratio+0x18>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	ee07 3a90 	vmov	s15, r3
}
 8000df8:	eeb0 0a67 	vmov.f32	s0, s15
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	20000000 	.word	0x20000000

08000e08 <current_monitor_init>:


void current_monitor_init(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
    while ((g_max_current_ratio * ((float)CURRENT_MONITOR_MAX_CURRENT_PER_LED_MA / 1000) * NUM_LEDS) > (float)CURRENT_MONITOR_MAX_CURRENT_DRAW_A)
 8000e0c:	e009      	b.n	8000e22 <current_monitor_init+0x1a>
    {
        g_max_current_ratio -= 0.05f;
 8000e0e:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <current_monitor_init+0x64>)
 8000e10:	edd3 7a00 	vldr	s15, [r3]
 8000e14:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000e70 <current_monitor_init+0x68>
 8000e18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e1c:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <current_monitor_init+0x64>)
 8000e1e:	edc3 7a00 	vstr	s15, [r3]
    while ((g_max_current_ratio * ((float)CURRENT_MONITOR_MAX_CURRENT_PER_LED_MA / 1000) * NUM_LEDS) > (float)CURRENT_MONITOR_MAX_CURRENT_DRAW_A)
 8000e22:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <current_monitor_init+0x64>)
 8000e24:	edd3 7a00 	vldr	s15, [r3]
 8000e28:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000e74 <current_monitor_init+0x6c>
 8000e2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e30:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000e78 <current_monitor_init+0x70>
 8000e34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e38:	eeb2 7a03 	vmov.f32	s14, #35	; 0x41180000  9.5
 8000e3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e44:	dce3      	bgt.n	8000e0e <current_monitor_init+0x6>
    }
    if (g_max_current_ratio <= 0) while(1); // broken..
 8000e46:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <current_monitor_init+0x64>)
 8000e48:	edd3 7a00 	vldr	s15, [r3]
 8000e4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e54:	d800      	bhi.n	8000e58 <current_monitor_init+0x50>
 8000e56:	e7fe      	b.n	8000e56 <current_monitor_init+0x4e>
    g_absolute_max_current_ratio = g_max_current_ratio;
 8000e58:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <current_monitor_init+0x64>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a07      	ldr	r2, [pc, #28]	; (8000e7c <current_monitor_init+0x74>)
 8000e5e:	6013      	str	r3, [r2, #0]
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	20000000 	.word	0x20000000
 8000e70:	3d4ccccd 	.word	0x3d4ccccd
 8000e74:	3d23d70a 	.word	0x3d23d70a
 8000e78:	441f0000 	.word	0x441f0000
 8000e7c:	2000025c 	.word	0x2000025c

08000e80 <animate_led_show_strip>:
 * @brief   Write data stored in `gp_ws28128b_strip` array to the strip
 * @param   strip_mask - the strip to write to
 * @return  void
 */
void animate_led_show_strip(const strip_mask_t strip_mask)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	80fb      	strh	r3, [r7, #6]
    if (strip_mask & STRIP_BIT_1)
 8000e8a:	88fb      	ldrh	r3, [r7, #6]
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <animate_led_show_strip+0x18>
    {
        ws2812b_show_strip_one();
 8000e94:	f001 f85a 	bl	8001f4c <ws2812b_show_strip_one>
    {
        // STRIP_BIT_3
        ws2812b_show_strip_three();
    }
#endif
}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <animate_led_set_pixel>:


void animate_led_set_pixel(const strip_mask_t mask, const uint16_t pixel, const uint8_t red, const uint8_t green,
                           const uint8_t blue)
{
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b087      	sub	sp, #28
 8000ea4:	af02      	add	r7, sp, #8
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	4611      	mov	r1, r2
 8000eac:	461a      	mov	r2, r3
 8000eae:	4623      	mov	r3, r4
 8000eb0:	80fb      	strh	r3, [r7, #6]
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	80bb      	strh	r3, [r7, #4]
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	70fb      	strb	r3, [r7, #3]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	70bb      	strb	r3, [r7, #2]
    if (STRIP_BIT_ALL_SET == mask)
 8000ebe:	88fb      	ldrh	r3, [r7, #6]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d11c      	bne.n	8000efe <animate_led_set_pixel+0x5e>
    {
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	73fb      	strb	r3, [r7, #15]
 8000ec8:	e015      	b.n	8000ef6 <animate_led_set_pixel+0x56>
        {
            //offset = animate_led_get_strip_offset(strip_bit);
            if (ws2812_pixel_is_in_strip_range(strip_bit, pixel)) ws2812b_set_led(strip_bit, pixel, red, green, blue);
 8000eca:	88ba      	ldrh	r2, [r7, #4]
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	4611      	mov	r1, r2
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f000 fe99 	bl	8001c08 <ws2812_pixel_is_in_strip_range>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d009      	beq.n	8000ef0 <animate_led_set_pixel+0x50>
 8000edc:	78bc      	ldrb	r4, [r7, #2]
 8000ede:	78fa      	ldrb	r2, [r7, #3]
 8000ee0:	88b9      	ldrh	r1, [r7, #4]
 8000ee2:	7bf8      	ldrb	r0, [r7, #15]
 8000ee4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	4623      	mov	r3, r4
 8000eec:	f000 fea6 	bl	8001c3c <ws2812b_set_led>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	73fb      	strb	r3, [r7, #15]
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d9e6      	bls.n	8000eca <animate_led_set_pixel+0x2a>
                if (ws2812_pixel_is_in_strip_range(strip_bit, pixel)) ws2812b_set_led(strip_bit, pixel, red, green, blue);
            }
        }
    }
    //animate_led_show_strip(mask);
}
 8000efc:	e020      	b.n	8000f40 <animate_led_set_pixel+0xa0>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000efe:	2301      	movs	r3, #1
 8000f00:	73bb      	strb	r3, [r7, #14]
 8000f02:	e01a      	b.n	8000f3a <animate_led_set_pixel+0x9a>
            if (mask & strip_bit)
 8000f04:	88fa      	ldrh	r2, [r7, #6]
 8000f06:	7bbb      	ldrb	r3, [r7, #14]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d012      	beq.n	8000f34 <animate_led_set_pixel+0x94>
                if (ws2812_pixel_is_in_strip_range(strip_bit, pixel)) ws2812b_set_led(strip_bit, pixel, red, green, blue);
 8000f0e:	88ba      	ldrh	r2, [r7, #4]
 8000f10:	7bbb      	ldrb	r3, [r7, #14]
 8000f12:	4611      	mov	r1, r2
 8000f14:	4618      	mov	r0, r3
 8000f16:	f000 fe77 	bl	8001c08 <ws2812_pixel_is_in_strip_range>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d009      	beq.n	8000f34 <animate_led_set_pixel+0x94>
 8000f20:	78bc      	ldrb	r4, [r7, #2]
 8000f22:	78fa      	ldrb	r2, [r7, #3]
 8000f24:	88b9      	ldrh	r1, [r7, #4]
 8000f26:	7bb8      	ldrb	r0, [r7, #14]
 8000f28:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	4623      	mov	r3, r4
 8000f30:	f000 fe84 	bl	8001c3c <ws2812b_set_led>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000f34:	7bbb      	ldrb	r3, [r7, #14]
 8000f36:	3301      	adds	r3, #1
 8000f38:	73bb      	strb	r3, [r7, #14]
 8000f3a:	7bbb      	ldrb	r3, [r7, #14]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d9e1      	bls.n	8000f04 <animate_led_set_pixel+0x64>
}
 8000f40:	bf00      	nop
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd90      	pop	{r4, r7, pc}

08000f48 <animate_led_set_all_pixels>:


void animate_led_set_all_pixels(const strip_mask_t mask, const uint8_t red, const uint8_t green, const uint8_t blue)
{
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b089      	sub	sp, #36	; 0x24
 8000f4c:	af02      	add	r7, sp, #8
 8000f4e:	4604      	mov	r4, r0
 8000f50:	4608      	mov	r0, r1
 8000f52:	4611      	mov	r1, r2
 8000f54:	461a      	mov	r2, r3
 8000f56:	4623      	mov	r3, r4
 8000f58:	80fb      	strh	r3, [r7, #6]
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	717b      	strb	r3, [r7, #5]
 8000f5e:	460b      	mov	r3, r1
 8000f60:	713b      	strb	r3, [r7, #4]
 8000f62:	4613      	mov	r3, r2
 8000f64:	70fb      	strb	r3, [r7, #3]
    uint16_t strip_size = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	81fb      	strh	r3, [r7, #14]
    if (mask == g_all_strip_mask)
 8000f6a:	4b2b      	ldr	r3, [pc, #172]	; (8001018 <animate_led_set_all_pixels+0xd0>)
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	88fa      	ldrh	r2, [r7, #6]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d122      	bne.n	8000fba <animate_led_set_all_pixels+0x72>
    {
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000f74:	2301      	movs	r3, #1
 8000f76:	75fb      	strb	r3, [r7, #23]
 8000f78:	e01b      	b.n	8000fb2 <animate_led_set_all_pixels+0x6a>
        {
            strip_size = ws2812_get_strip_size(strip_bit);
 8000f7a:	7dfb      	ldrb	r3, [r7, #23]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 fddb 	bl	8001b38 <ws2812_get_strip_size>
 8000f82:	4603      	mov	r3, r0
 8000f84:	81fb      	strh	r3, [r7, #14]
            //offset = animate_led_get_strip_offset(strip_bit);
            for (uint16_t iii = 0; iii < strip_size; iii++) ws2812b_set_led(strip_bit, iii, red, green, blue);
 8000f86:	2300      	movs	r3, #0
 8000f88:	82bb      	strh	r3, [r7, #20]
 8000f8a:	e00b      	b.n	8000fa4 <animate_led_set_all_pixels+0x5c>
 8000f8c:	793c      	ldrb	r4, [r7, #4]
 8000f8e:	797a      	ldrb	r2, [r7, #5]
 8000f90:	8ab9      	ldrh	r1, [r7, #20]
 8000f92:	7df8      	ldrb	r0, [r7, #23]
 8000f94:	78fb      	ldrb	r3, [r7, #3]
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	4623      	mov	r3, r4
 8000f9a:	f000 fe4f 	bl	8001c3c <ws2812b_set_led>
 8000f9e:	8abb      	ldrh	r3, [r7, #20]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	82bb      	strh	r3, [r7, #20]
 8000fa4:	8aba      	ldrh	r2, [r7, #20]
 8000fa6:	89fb      	ldrh	r3, [r7, #14]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d3ef      	bcc.n	8000f8c <animate_led_set_all_pixels+0x44>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000fac:	7dfb      	ldrb	r3, [r7, #23]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	75fb      	strb	r3, [r7, #23]
 8000fb2:	7dfb      	ldrb	r3, [r7, #23]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d9e0      	bls.n	8000f7a <animate_led_set_all_pixels+0x32>
 8000fb8:	e026      	b.n	8001008 <animate_led_set_all_pixels+0xc0>
        }
    }
    else
    {
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000fba:	2301      	movs	r3, #1
 8000fbc:	74fb      	strb	r3, [r7, #19]
 8000fbe:	e020      	b.n	8001002 <animate_led_set_all_pixels+0xba>
        {
            if (mask & strip_bit)
 8000fc0:	88fa      	ldrh	r2, [r7, #6]
 8000fc2:	7cfb      	ldrb	r3, [r7, #19]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d018      	beq.n	8000ffc <animate_led_set_all_pixels+0xb4>
            {
                strip_size = ws2812_get_strip_size(strip_bit);
 8000fca:	7cfb      	ldrb	r3, [r7, #19]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f000 fdb3 	bl	8001b38 <ws2812_get_strip_size>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	81fb      	strh	r3, [r7, #14]
                for (uint16_t yyy = 0; yyy < strip_size; yyy++) ws2812b_set_led(strip_bit, yyy, red, green, blue);
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	823b      	strh	r3, [r7, #16]
 8000fda:	e00b      	b.n	8000ff4 <animate_led_set_all_pixels+0xac>
 8000fdc:	793c      	ldrb	r4, [r7, #4]
 8000fde:	797a      	ldrb	r2, [r7, #5]
 8000fe0:	8a39      	ldrh	r1, [r7, #16]
 8000fe2:	7cf8      	ldrb	r0, [r7, #19]
 8000fe4:	78fb      	ldrb	r3, [r7, #3]
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	4623      	mov	r3, r4
 8000fea:	f000 fe27 	bl	8001c3c <ws2812b_set_led>
 8000fee:	8a3b      	ldrh	r3, [r7, #16]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	823b      	strh	r3, [r7, #16]
 8000ff4:	8a3a      	ldrh	r2, [r7, #16]
 8000ff6:	89fb      	ldrh	r3, [r7, #14]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d3ef      	bcc.n	8000fdc <animate_led_set_all_pixels+0x94>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000ffc:	7cfb      	ldrb	r3, [r7, #19]
 8000ffe:	3301      	adds	r3, #1
 8001000:	74fb      	strb	r3, [r7, #19]
 8001002:	7cfb      	ldrb	r3, [r7, #19]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d9db      	bls.n	8000fc0 <animate_led_set_all_pixels+0x78>
            }
        }
    }
    animate_led_show_strip(mask);
 8001008:	88fb      	ldrh	r3, [r7, #6]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff ff38 	bl	8000e80 <animate_led_show_strip>
}
 8001010:	bf00      	nop
 8001012:	371c      	adds	r7, #28
 8001014:	46bd      	mov	sp, r7
 8001016:	bd90      	pop	{r4, r7, pc}
 8001018:	200009da 	.word	0x200009da

0800101c <animate_led_solid_custom_color>:
	}
}


void animate_led_solid_custom_color(const strip_mask_t mask_solid, const color_hex_code_e color_solid)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	80fb      	strh	r3, [r7, #6]
    uint8_t color_solid_rgb[sizeof(ws2812b_led_t)] = {0};
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <animate_led_solid_custom_color+0x40>)
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	81bb      	strh	r3, [r7, #12]
 800102e:	2300      	movs	r3, #0
 8001030:	73bb      	strb	r3, [r7, #14]
    color_led_hex_to_rgb(color_solid, color_solid_rgb);
 8001032:	f107 030c 	add.w	r3, r7, #12
 8001036:	4619      	mov	r1, r3
 8001038:	6838      	ldr	r0, [r7, #0]
 800103a:	f000 fcf7 	bl	8001a2c <color_led_hex_to_rgb>
    animate_led_set_all_pixels(mask_solid, color_solid_rgb[offsetof(ws2812b_led_t, red)],
 800103e:	7b39      	ldrb	r1, [r7, #12]
 8001040:	7b7a      	ldrb	r2, [r7, #13]
 8001042:	7bbb      	ldrb	r3, [r7, #14]
 8001044:	88f8      	ldrh	r0, [r7, #6]
 8001046:	f7ff ff7f 	bl	8000f48 <animate_led_set_all_pixels>
                               color_solid_rgb[offsetof(ws2812b_led_t, green)],
                               color_solid_rgb[offsetof(ws2812b_led_t, blue)]);
    animate_led_show_strip(mask_solid);
 800104a:	88fb      	ldrh	r3, [r7, #6]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff17 	bl	8000e80 <animate_led_show_strip>
}
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	0800c0b4 	.word	0x0800c0b4

08001060 <animate_led_turn_all_pixels_off>:
 * @param   void
 * @return  void
 * @note    This function will set `gp_ws28128b_strip` array and write it to the strip(s).
 */
void animate_led_turn_all_pixels_off(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	animate_led_set_all_pixels((strip_mask_t)STRIP_BIT_ALL_SET, 0, 0, 0);
 8001064:	2300      	movs	r3, #0
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	2001      	movs	r0, #1
 800106c:	f7ff ff6c 	bl	8000f48 <animate_led_set_all_pixels>
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}

08001074 <animate_led_only_spell_word>:
}


void animate_led_only_spell_word(const strip_mask_t mask_spell, const color_hex_code_e color_spell,
                                 const uint16_t time_ms)
{
 8001074:	b590      	push	{r4, r7, lr}
 8001076:	ed2d 8b02 	vpush	{d8}
 800107a:	b089      	sub	sp, #36	; 0x24
 800107c:	af02      	add	r7, sp, #8
 800107e:	4603      	mov	r3, r0
 8001080:	6039      	str	r1, [r7, #0]
 8001082:	80fb      	strh	r3, [r7, #6]
 8001084:	4613      	mov	r3, r2
 8001086:	80bb      	strh	r3, [r7, #4]
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_spell);
 8001088:	88fb      	ldrh	r3, [r7, #6]
 800108a:	4618      	mov	r0, r3
 800108c:	f000 fd98 	bl	8001bc0 <ws2812_led_get_max_strip_size>
 8001090:	4603      	mov	r3, r0
 8001092:	827b      	strh	r3, [r7, #18]
    uint8_t color_spell_rgb[sizeof(ws2812b_led_t)] = {0};
 8001094:	4b26      	ldr	r3, [pc, #152]	; (8001130 <animate_led_only_spell_word+0xbc>)
 8001096:	881b      	ldrh	r3, [r3, #0]
 8001098:	81bb      	strh	r3, [r7, #12]
 800109a:	2300      	movs	r3, #0
 800109c:	73bb      	strb	r3, [r7, #14]
    color_led_hex_to_rgb(color_spell, color_spell_rgb);
 800109e:	f107 030c 	add.w	r3, r7, #12
 80010a2:	4619      	mov	r1, r3
 80010a4:	6838      	ldr	r0, [r7, #0]
 80010a6:	f000 fcc1 	bl	8001a2c <color_led_hex_to_rgb>
	for (int i = 0; i < strip_size; i++)
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	e034      	b.n	800111a <animate_led_only_spell_word+0xa6>
	{
        if (task_button_press_interrupt_occurred())
 80010b0:	f000 ff52 	bl	8001f58 <task_button_press_interrupt_occurred>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d00d      	beq.n	80010d6 <animate_led_only_spell_word+0x62>
        {
            if (task_button_press_check_interrupts(&color_spell_rgb[offsetof(ws2812b_led_t, red)], &color_spell_rgb[offsetof(ws2812b_led_t, green)], &color_spell_rgb[offsetof(ws2812b_led_t, blue)]))
 80010ba:	f107 030c 	add.w	r3, r7, #12
 80010be:	1c9a      	adds	r2, r3, #2
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	1c59      	adds	r1, r3, #1
 80010c6:	f107 030c 	add.w	r3, r7, #12
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 ffa8 	bl	8002020 <task_button_press_check_interrupts>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d126      	bne.n	8001124 <animate_led_only_spell_word+0xb0>
            {
                return;
            }
        }
        animate_led_set_pixel(mask_spell, i,
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	b299      	uxth	r1, r3
 80010da:	7b3a      	ldrb	r2, [r7, #12]
 80010dc:	7b7c      	ldrb	r4, [r7, #13]
 80010de:	7bbb      	ldrb	r3, [r7, #14]
 80010e0:	88f8      	ldrh	r0, [r7, #6]
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	4623      	mov	r3, r4
 80010e6:	f7ff fedb 	bl	8000ea0 <animate_led_set_pixel>
                              color_spell_rgb[offsetof(ws2812b_led_t, red)],
                              color_spell_rgb[offsetof(ws2812b_led_t, green)],
                              color_spell_rgb[offsetof(ws2812b_led_t, blue)]);
        animate_led_show_strip(mask_spell);
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fec7 	bl	8000e80 <animate_led_show_strip>
 		task_led_ctrl_delay(time_ms / task_led_ctrl_speed());
 80010f2:	88bb      	ldrh	r3, [r7, #4]
 80010f4:	ee07 3a90 	vmov	s15, r3
 80010f8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80010fc:	f001 fb94 	bl	8002828 <task_led_ctrl_speed>
 8001100:	eeb0 7a40 	vmov.f32	s14, s0
 8001104:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001108:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800110c:	ee17 0a90 	vmov	r0, s15
 8001110:	f001 fa24 	bl	800255c <task_led_ctrl_delay>
	for (int i = 0; i < strip_size; i++)
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	3301      	adds	r3, #1
 8001118:	617b      	str	r3, [r7, #20]
 800111a:	8a7b      	ldrh	r3, [r7, #18]
 800111c:	697a      	ldr	r2, [r7, #20]
 800111e:	429a      	cmp	r2, r3
 8001120:	dbc6      	blt.n	80010b0 <animate_led_only_spell_word+0x3c>
 8001122:	e000      	b.n	8001126 <animate_led_only_spell_word+0xb2>
                return;
 8001124:	bf00      	nop
	}
}
 8001126:	371c      	adds	r7, #28
 8001128:	46bd      	mov	sp, r7
 800112a:	ecbd 8b02 	vpop	{d8}
 800112e:	bd90      	pop	{r4, r7, pc}
 8001130:	0800c0b4 	.word	0x0800c0b4

08001134 <animate_led_fade_in_fade_out>:
    }
}


void animate_led_fade_in_fade_out(const strip_mask_t mask_fade, const color_hex_code_e color_fade)
{
 8001134:	b5b0      	push	{r4, r5, r7, lr}
 8001136:	b08a      	sub	sp, #40	; 0x28
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	81fb      	strh	r3, [r7, #14]
    float r, g, b;
    uint8_t color_fade_rgb[sizeof(ws2812b_led_t)] = {0};
 8001140:	4b9b      	ldr	r3, [pc, #620]	; (80013b0 <animate_led_fade_in_fade_out+0x27c>)
 8001142:	881b      	ldrh	r3, [r3, #0]
 8001144:	823b      	strh	r3, [r7, #16]
 8001146:	2300      	movs	r3, #0
 8001148:	74bb      	strb	r3, [r7, #18]
    color_led_hex_to_rgb(color_fade, color_fade_rgb);
 800114a:	f107 0310 	add.w	r3, r7, #16
 800114e:	4619      	mov	r1, r3
 8001150:	68b8      	ldr	r0, [r7, #8]
 8001152:	f000 fc6b 	bl	8001a2c <color_led_hex_to_rgb>
    for (int iii = 0; iii < 256; iii++)
 8001156:	2300      	movs	r3, #0
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
 800115a:	e08b      	b.n	8001274 <animate_led_fade_in_fade_out+0x140>
    {
        if (task_button_press_interrupt_occurred())
 800115c:	f000 fefc 	bl	8001f58 <task_button_press_interrupt_occurred>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d00e      	beq.n	8001184 <animate_led_fade_in_fade_out+0x50>
        {
            if (task_button_press_check_interrupts(&color_fade_rgb[offsetof(ws2812b_led_t, red)], &color_fade_rgb[offsetof(ws2812b_led_t, green)], &color_fade_rgb[offsetof(ws2812b_led_t, blue)]))
 8001166:	f107 0310 	add.w	r3, r7, #16
 800116a:	1c9a      	adds	r2, r3, #2
 800116c:	f107 0310 	add.w	r3, r7, #16
 8001170:	1c59      	adds	r1, r3, #1
 8001172:	f107 0310 	add.w	r3, r7, #16
 8001176:	4618      	mov	r0, r3
 8001178:	f000 ff52 	bl	8002020 <task_button_press_check_interrupts>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	f040 810f 	bne.w	80013a2 <animate_led_fade_in_fade_out+0x26e>
            {
                return;
            }
        }
        r = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, red)];
 8001184:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001186:	f7ff f9c5 	bl	8000514 <__aeabi_i2d>
 800118a:	f04f 0200 	mov.w	r2, #0
 800118e:	4b89      	ldr	r3, [pc, #548]	; (80013b4 <animate_led_fade_in_fade_out+0x280>)
 8001190:	f7ff fb54 	bl	800083c <__aeabi_ddiv>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	4614      	mov	r4, r2
 800119a:	461d      	mov	r5, r3
 800119c:	7c3b      	ldrb	r3, [r7, #16]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f9b8 	bl	8000514 <__aeabi_i2d>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4620      	mov	r0, r4
 80011aa:	4629      	mov	r1, r5
 80011ac:	f7ff fa1c 	bl	80005e8 <__aeabi_dmul>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4610      	mov	r0, r2
 80011b6:	4619      	mov	r1, r3
 80011b8:	f7ff fc28 	bl	8000a0c <__aeabi_d2f>
 80011bc:	4603      	mov	r3, r0
 80011be:	61fb      	str	r3, [r7, #28]
        g = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, green)];
 80011c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011c2:	f7ff f9a7 	bl	8000514 <__aeabi_i2d>
 80011c6:	f04f 0200 	mov.w	r2, #0
 80011ca:	4b7a      	ldr	r3, [pc, #488]	; (80013b4 <animate_led_fade_in_fade_out+0x280>)
 80011cc:	f7ff fb36 	bl	800083c <__aeabi_ddiv>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4614      	mov	r4, r2
 80011d6:	461d      	mov	r5, r3
 80011d8:	7c7b      	ldrb	r3, [r7, #17]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f99a 	bl	8000514 <__aeabi_i2d>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	4620      	mov	r0, r4
 80011e6:	4629      	mov	r1, r5
 80011e8:	f7ff f9fe 	bl	80005e8 <__aeabi_dmul>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4610      	mov	r0, r2
 80011f2:	4619      	mov	r1, r3
 80011f4:	f7ff fc0a 	bl	8000a0c <__aeabi_d2f>
 80011f8:	4603      	mov	r3, r0
 80011fa:	61bb      	str	r3, [r7, #24]
        b = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, blue)];
 80011fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011fe:	f7ff f989 	bl	8000514 <__aeabi_i2d>
 8001202:	f04f 0200 	mov.w	r2, #0
 8001206:	4b6b      	ldr	r3, [pc, #428]	; (80013b4 <animate_led_fade_in_fade_out+0x280>)
 8001208:	f7ff fb18 	bl	800083c <__aeabi_ddiv>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4614      	mov	r4, r2
 8001212:	461d      	mov	r5, r3
 8001214:	7cbb      	ldrb	r3, [r7, #18]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff f97c 	bl	8000514 <__aeabi_i2d>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4620      	mov	r0, r4
 8001222:	4629      	mov	r1, r5
 8001224:	f7ff f9e0 	bl	80005e8 <__aeabi_dmul>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	4610      	mov	r0, r2
 800122e:	4619      	mov	r1, r3
 8001230:	f7ff fbec 	bl	8000a0c <__aeabi_d2f>
 8001234:	4603      	mov	r3, r0
 8001236:	617b      	str	r3, [r7, #20]
        animate_led_set_all_pixels(mask_fade, r, g, b);
 8001238:	edd7 7a07 	vldr	s15, [r7, #28]
 800123c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001240:	edc7 7a01 	vstr	s15, [r7, #4]
 8001244:	793b      	ldrb	r3, [r7, #4]
 8001246:	b2d9      	uxtb	r1, r3
 8001248:	edd7 7a06 	vldr	s15, [r7, #24]
 800124c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001250:	edc7 7a01 	vstr	s15, [r7, #4]
 8001254:	793b      	ldrb	r3, [r7, #4]
 8001256:	b2da      	uxtb	r2, r3
 8001258:	edd7 7a05 	vldr	s15, [r7, #20]
 800125c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001260:	edc7 7a01 	vstr	s15, [r7, #4]
 8001264:	793b      	ldrb	r3, [r7, #4]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	89f8      	ldrh	r0, [r7, #14]
 800126a:	f7ff fe6d 	bl	8000f48 <animate_led_set_all_pixels>
    for (int iii = 0; iii < 256; iii++)
 800126e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001270:	3301      	adds	r3, #1
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
 8001274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001276:	2bff      	cmp	r3, #255	; 0xff
 8001278:	f77f af70 	ble.w	800115c <animate_led_fade_in_fade_out+0x28>
    }
    for (int iii = 255; iii >= 0; iii = iii-2)
 800127c:	23ff      	movs	r3, #255	; 0xff
 800127e:	623b      	str	r3, [r7, #32]
 8001280:	e08a      	b.n	8001398 <animate_led_fade_in_fade_out+0x264>
    {
        if (task_button_press_interrupt_occurred())
 8001282:	f000 fe69 	bl	8001f58 <task_button_press_interrupt_occurred>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d00d      	beq.n	80012a8 <animate_led_fade_in_fade_out+0x174>
        {
            if (task_button_press_check_interrupts(&color_fade_rgb[offsetof(ws2812b_led_t, red)], &color_fade_rgb[offsetof(ws2812b_led_t, green)], &color_fade_rgb[offsetof(ws2812b_led_t, blue)]))
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	1c9a      	adds	r2, r3, #2
 8001292:	f107 0310 	add.w	r3, r7, #16
 8001296:	1c59      	adds	r1, r3, #1
 8001298:	f107 0310 	add.w	r3, r7, #16
 800129c:	4618      	mov	r0, r3
 800129e:	f000 febf 	bl	8002020 <task_button_press_check_interrupts>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d17e      	bne.n	80013a6 <animate_led_fade_in_fade_out+0x272>
            {
                return;
            }
        }
        r = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, red)];
 80012a8:	6a38      	ldr	r0, [r7, #32]
 80012aa:	f7ff f933 	bl	8000514 <__aeabi_i2d>
 80012ae:	f04f 0200 	mov.w	r2, #0
 80012b2:	4b40      	ldr	r3, [pc, #256]	; (80013b4 <animate_led_fade_in_fade_out+0x280>)
 80012b4:	f7ff fac2 	bl	800083c <__aeabi_ddiv>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4614      	mov	r4, r2
 80012be:	461d      	mov	r5, r3
 80012c0:	7c3b      	ldrb	r3, [r7, #16]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff f926 	bl	8000514 <__aeabi_i2d>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4620      	mov	r0, r4
 80012ce:	4629      	mov	r1, r5
 80012d0:	f7ff f98a 	bl	80005e8 <__aeabi_dmul>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4610      	mov	r0, r2
 80012da:	4619      	mov	r1, r3
 80012dc:	f7ff fb96 	bl	8000a0c <__aeabi_d2f>
 80012e0:	4603      	mov	r3, r0
 80012e2:	61fb      	str	r3, [r7, #28]
        g = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, green)];
 80012e4:	6a38      	ldr	r0, [r7, #32]
 80012e6:	f7ff f915 	bl	8000514 <__aeabi_i2d>
 80012ea:	f04f 0200 	mov.w	r2, #0
 80012ee:	4b31      	ldr	r3, [pc, #196]	; (80013b4 <animate_led_fade_in_fade_out+0x280>)
 80012f0:	f7ff faa4 	bl	800083c <__aeabi_ddiv>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4614      	mov	r4, r2
 80012fa:	461d      	mov	r5, r3
 80012fc:	7c7b      	ldrb	r3, [r7, #17]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff f908 	bl	8000514 <__aeabi_i2d>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4620      	mov	r0, r4
 800130a:	4629      	mov	r1, r5
 800130c:	f7ff f96c 	bl	80005e8 <__aeabi_dmul>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4610      	mov	r0, r2
 8001316:	4619      	mov	r1, r3
 8001318:	f7ff fb78 	bl	8000a0c <__aeabi_d2f>
 800131c:	4603      	mov	r3, r0
 800131e:	61bb      	str	r3, [r7, #24]
        b = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, blue)];
 8001320:	6a38      	ldr	r0, [r7, #32]
 8001322:	f7ff f8f7 	bl	8000514 <__aeabi_i2d>
 8001326:	f04f 0200 	mov.w	r2, #0
 800132a:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <animate_led_fade_in_fade_out+0x280>)
 800132c:	f7ff fa86 	bl	800083c <__aeabi_ddiv>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	4614      	mov	r4, r2
 8001336:	461d      	mov	r5, r3
 8001338:	7cbb      	ldrb	r3, [r7, #18]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff f8ea 	bl	8000514 <__aeabi_i2d>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4620      	mov	r0, r4
 8001346:	4629      	mov	r1, r5
 8001348:	f7ff f94e 	bl	80005e8 <__aeabi_dmul>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f7ff fb5a 	bl	8000a0c <__aeabi_d2f>
 8001358:	4603      	mov	r3, r0
 800135a:	617b      	str	r3, [r7, #20]
        animate_led_set_all_pixels(mask_fade, r, g, b);
 800135c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001360:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001364:	edc7 7a01 	vstr	s15, [r7, #4]
 8001368:	793b      	ldrb	r3, [r7, #4]
 800136a:	b2d9      	uxtb	r1, r3
 800136c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001370:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001374:	edc7 7a01 	vstr	s15, [r7, #4]
 8001378:	793b      	ldrb	r3, [r7, #4]
 800137a:	b2da      	uxtb	r2, r3
 800137c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001380:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001384:	edc7 7a01 	vstr	s15, [r7, #4]
 8001388:	793b      	ldrb	r3, [r7, #4]
 800138a:	b2db      	uxtb	r3, r3
 800138c:	89f8      	ldrh	r0, [r7, #14]
 800138e:	f7ff fddb 	bl	8000f48 <animate_led_set_all_pixels>
    for (int iii = 255; iii >= 0; iii = iii-2)
 8001392:	6a3b      	ldr	r3, [r7, #32]
 8001394:	3b02      	subs	r3, #2
 8001396:	623b      	str	r3, [r7, #32]
 8001398:	6a3b      	ldr	r3, [r7, #32]
 800139a:	2b00      	cmp	r3, #0
 800139c:	f6bf af71 	bge.w	8001282 <animate_led_fade_in_fade_out+0x14e>
 80013a0:	e002      	b.n	80013a8 <animate_led_fade_in_fade_out+0x274>
                return;
 80013a2:	bf00      	nop
 80013a4:	e000      	b.n	80013a8 <animate_led_fade_in_fade_out+0x274>
                return;
 80013a6:	bf00      	nop
    }
}
 80013a8:	3728      	adds	r7, #40	; 0x28
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bdb0      	pop	{r4, r5, r7, pc}
 80013ae:	bf00      	nop
 80013b0:	0800c0b4 	.word	0x0800c0b4
 80013b4:	40700000 	.word	0x40700000

080013b8 <animate_led_twinkle>:
}


void animate_led_twinkle(const strip_mask_t twinkle_mask, const color_hex_code_e color_twinkle, const uint16_t count,
                         const uint16_t speed_delay, const bool only_one)
{
 80013b8:	b590      	push	{r4, r7, lr}
 80013ba:	ed2d 8b02 	vpush	{d8}
 80013be:	b08b      	sub	sp, #44	; 0x2c
 80013c0:	af02      	add	r7, sp, #8
 80013c2:	60b9      	str	r1, [r7, #8]
 80013c4:	4611      	mov	r1, r2
 80013c6:	461a      	mov	r2, r3
 80013c8:	4603      	mov	r3, r0
 80013ca:	81fb      	strh	r3, [r7, #14]
 80013cc:	460b      	mov	r3, r1
 80013ce:	81bb      	strh	r3, [r7, #12]
 80013d0:	4613      	mov	r3, r2
 80013d2:	80fb      	strh	r3, [r7, #6]
	uint16_t strip_size = ws2812_led_get_max_strip_size(twinkle_mask);
 80013d4:	89fb      	ldrh	r3, [r7, #14]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f000 fbf2 	bl	8001bc0 <ws2812_led_get_max_strip_size>
 80013dc:	4603      	mov	r3, r0
 80013de:	837b      	strh	r3, [r7, #26]
    uint8_t color_twinkle_rgb[sizeof(ws2812b_led_t)] = {0};
 80013e0:	4b2e      	ldr	r3, [pc, #184]	; (800149c <animate_led_twinkle+0xe4>)
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	82bb      	strh	r3, [r7, #20]
 80013e6:	2300      	movs	r3, #0
 80013e8:	75bb      	strb	r3, [r7, #22]
    color_led_hex_to_rgb(color_twinkle, color_twinkle_rgb);
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	4619      	mov	r1, r3
 80013f0:	68b8      	ldr	r0, [r7, #8]
 80013f2:	f000 fb1b 	bl	8001a2c <color_led_hex_to_rgb>
    for (int iii = 0; iii < count; iii++)
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
 80013fa:	e043      	b.n	8001484 <animate_led_twinkle+0xcc>
    {
        if (task_button_press_interrupt_occurred())
 80013fc:	f000 fdac 	bl	8001f58 <task_button_press_interrupt_occurred>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d00d      	beq.n	8001422 <animate_led_twinkle+0x6a>
        {
            if (task_button_press_check_interrupts(&color_twinkle_rgb[offsetof(ws2812b_led_t, red)], &color_twinkle_rgb[offsetof(ws2812b_led_t, green)], &color_twinkle_rgb[offsetof(ws2812b_led_t, blue)]))
 8001406:	f107 0314 	add.w	r3, r7, #20
 800140a:	1c9a      	adds	r2, r3, #2
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	1c59      	adds	r1, r3, #1
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	4618      	mov	r0, r3
 8001418:	f000 fe02 	bl	8002020 <task_button_press_check_interrupts>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d135      	bne.n	800148e <animate_led_twinkle+0xd6>
            {
                return;
            }
        }
        animate_led_set_pixel(twinkle_mask, random_num(0, strip_size),
 8001422:	8b7b      	ldrh	r3, [r7, #26]
 8001424:	4619      	mov	r1, r3
 8001426:	2000      	movs	r0, #0
 8001428:	f009 fd6a 	bl	800af00 <random_num>
 800142c:	4603      	mov	r3, r0
 800142e:	b299      	uxth	r1, r3
 8001430:	7d3a      	ldrb	r2, [r7, #20]
 8001432:	7d7c      	ldrb	r4, [r7, #21]
 8001434:	7dbb      	ldrb	r3, [r7, #22]
 8001436:	89f8      	ldrh	r0, [r7, #14]
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	4623      	mov	r3, r4
 800143c:	f7ff fd30 	bl	8000ea0 <animate_led_set_pixel>
                              (color_twinkle_rgb[offsetof(ws2812b_led_t, red)]),
                              (color_twinkle_rgb[offsetof(ws2812b_led_t, green)]),
                              (color_twinkle_rgb[offsetof(ws2812b_led_t, blue)]));
        animate_led_show_strip(twinkle_mask);
 8001440:	89fb      	ldrh	r3, [r7, #14]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fd1c 	bl	8000e80 <animate_led_show_strip>
        task_led_ctrl_delay(speed_delay / task_led_ctrl_speed());
 8001448:	88fb      	ldrh	r3, [r7, #6]
 800144a:	ee07 3a90 	vmov	s15, r3
 800144e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001452:	f001 f9e9 	bl	8002828 <task_led_ctrl_speed>
 8001456:	eeb0 7a40 	vmov.f32	s14, s0
 800145a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800145e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001462:	ee17 0a90 	vmov	r0, s15
 8001466:	f001 f879 	bl	800255c <task_led_ctrl_delay>
        if (only_one) animate_led_set_all_pixels(twinkle_mask, 0, 0, 0);
 800146a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800146e:	2b00      	cmp	r3, #0
 8001470:	d005      	beq.n	800147e <animate_led_twinkle+0xc6>
 8001472:	89f8      	ldrh	r0, [r7, #14]
 8001474:	2300      	movs	r3, #0
 8001476:	2200      	movs	r2, #0
 8001478:	2100      	movs	r1, #0
 800147a:	f7ff fd65 	bl	8000f48 <animate_led_set_all_pixels>
    for (int iii = 0; iii < count; iii++)
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3301      	adds	r3, #1
 8001482:	61fb      	str	r3, [r7, #28]
 8001484:	89bb      	ldrh	r3, [r7, #12]
 8001486:	69fa      	ldr	r2, [r7, #28]
 8001488:	429a      	cmp	r2, r3
 800148a:	dbb7      	blt.n	80013fc <animate_led_twinkle+0x44>
 800148c:	e000      	b.n	8001490 <animate_led_twinkle+0xd8>
                return;
 800148e:	bf00      	nop
    }

    //task_led_ctrl_delay(speed_delay / task_led_ctrl_speed());
}
 8001490:	3724      	adds	r7, #36	; 0x24
 8001492:	46bd      	mov	sp, r7
 8001494:	ecbd 8b02 	vpop	{d8}
 8001498:	bd90      	pop	{r4, r7, pc}
 800149a:	bf00      	nop
 800149c:	0800c0b4 	.word	0x0800c0b4

080014a0 <animate_led_sparkle_only_random_color>:
}


void animate_led_sparkle_only_random_color(const strip_mask_t mask_sparkle_random, const bool fill,
                                           const uint16_t speed_delay)
{
 80014a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014a2:	ed2d 8b02 	vpush	{d8}
 80014a6:	b08b      	sub	sp, #44	; 0x2c
 80014a8:	af02      	add	r7, sp, #8
 80014aa:	4603      	mov	r3, r0
 80014ac:	80fb      	strh	r3, [r7, #6]
 80014ae:	460b      	mov	r3, r1
 80014b0:	717b      	strb	r3, [r7, #5]
 80014b2:	4613      	mov	r3, r2
 80014b4:	807b      	strh	r3, [r7, #2]
	float percent_to_fill = 0.7;
 80014b6:	4b42      	ldr	r3, [pc, #264]	; (80015c0 <animate_led_sparkle_only_random_color+0x120>)
 80014b8:	61bb      	str	r3, [r7, #24]
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_sparkle_random);
 80014ba:	88fb      	ldrh	r3, [r7, #6]
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 fb7f 	bl	8001bc0 <ws2812_led_get_max_strip_size>
 80014c2:	4603      	mov	r3, r0
 80014c4:	82fb      	strh	r3, [r7, #22]
	uint16_t num_active_leds = ws2812_get_num_active_animation_leds(mask_sparkle_random);
 80014c6:	88fb      	ldrh	r3, [r7, #6]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 fb57 	bl	8001b7c <ws2812_get_num_active_animation_leds>
 80014ce:	4603      	mov	r3, r0
 80014d0:	82bb      	strh	r3, [r7, #20]
    uint8_t dummy_red, dummy_green, dummy_blue; // not used but not worth creating a unique function IMO
	for (uint16_t iii = 0; iii < (percent_to_fill * (float)num_active_leds); iii++)
 80014d2:	2300      	movs	r3, #0
 80014d4:	83fb      	strh	r3, [r7, #30]
 80014d6:	e059      	b.n	800158c <animate_led_sparkle_only_random_color+0xec>
	{
	    if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80014d8:	f000 fd3e 	bl	8001f58 <task_button_press_interrupt_occurred>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d00b      	beq.n	80014fa <animate_led_sparkle_only_random_color+0x5a>
 80014e2:	f107 020d 	add.w	r2, r7, #13
 80014e6:	f107 010e 	add.w	r1, r7, #14
 80014ea:	f107 030f 	add.w	r3, r7, #15
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 fd96 	bl	8002020 <task_button_press_check_interrupts>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d15c      	bne.n	80015b4 <animate_led_sparkle_only_random_color+0x114>
		int pix = random_num(0, strip_size);
 80014fa:	8afb      	ldrh	r3, [r7, #22]
 80014fc:	4619      	mov	r1, r3
 80014fe:	2000      	movs	r0, #0
 8001500:	f009 fcfe 	bl	800af00 <random_num>
 8001504:	4603      	mov	r3, r0
 8001506:	613b      	str	r3, [r7, #16]
		animate_led_set_pixel(mask_sparkle_random, pix, random_num(0, 255), random_num(0, 255), random_num(0, 255));
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	b29c      	uxth	r4, r3
 800150c:	21ff      	movs	r1, #255	; 0xff
 800150e:	2000      	movs	r0, #0
 8001510:	f009 fcf6 	bl	800af00 <random_num>
 8001514:	4603      	mov	r3, r0
 8001516:	b2dd      	uxtb	r5, r3
 8001518:	21ff      	movs	r1, #255	; 0xff
 800151a:	2000      	movs	r0, #0
 800151c:	f009 fcf0 	bl	800af00 <random_num>
 8001520:	4603      	mov	r3, r0
 8001522:	b2de      	uxtb	r6, r3
 8001524:	21ff      	movs	r1, #255	; 0xff
 8001526:	2000      	movs	r0, #0
 8001528:	f009 fcea 	bl	800af00 <random_num>
 800152c:	4603      	mov	r3, r0
 800152e:	b2db      	uxtb	r3, r3
 8001530:	88f8      	ldrh	r0, [r7, #6]
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	4633      	mov	r3, r6
 8001536:	462a      	mov	r2, r5
 8001538:	4621      	mov	r1, r4
 800153a:	f7ff fcb1 	bl	8000ea0 <animate_led_set_pixel>
		animate_led_show_strip(mask_sparkle_random);
 800153e:	88fb      	ldrh	r3, [r7, #6]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fc9d 	bl	8000e80 <animate_led_show_strip>
        task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 8001546:	887b      	ldrh	r3, [r7, #2]
 8001548:	ee07 3a90 	vmov	s15, r3
 800154c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001550:	f001 f96a 	bl	8002828 <task_led_ctrl_speed>
 8001554:	eeb0 7a40 	vmov.f32	s14, s0
 8001558:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800155c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001560:	ee17 0a90 	vmov	r0, s15
 8001564:	f000 fffa 	bl	800255c <task_led_ctrl_delay>
		if (!fill) animate_led_set_pixel(mask_sparkle_random, pix, 0, 0, 0);
 8001568:	797b      	ldrb	r3, [r7, #5]
 800156a:	f083 0301 	eor.w	r3, r3, #1
 800156e:	b2db      	uxtb	r3, r3
 8001570:	2b00      	cmp	r3, #0
 8001572:	d008      	beq.n	8001586 <animate_led_sparkle_only_random_color+0xe6>
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	b299      	uxth	r1, r3
 8001578:	88f8      	ldrh	r0, [r7, #6]
 800157a:	2300      	movs	r3, #0
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	2300      	movs	r3, #0
 8001580:	2200      	movs	r2, #0
 8001582:	f7ff fc8d 	bl	8000ea0 <animate_led_set_pixel>
	for (uint16_t iii = 0; iii < (percent_to_fill * (float)num_active_leds); iii++)
 8001586:	8bfb      	ldrh	r3, [r7, #30]
 8001588:	3301      	adds	r3, #1
 800158a:	83fb      	strh	r3, [r7, #30]
 800158c:	8bfb      	ldrh	r3, [r7, #30]
 800158e:	ee07 3a90 	vmov	s15, r3
 8001592:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001596:	8abb      	ldrh	r3, [r7, #20]
 8001598:	ee07 3a90 	vmov	s15, r3
 800159c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80015a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80015a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b0:	d492      	bmi.n	80014d8 <animate_led_sparkle_only_random_color+0x38>
 80015b2:	e000      	b.n	80015b6 <animate_led_sparkle_only_random_color+0x116>
	    if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80015b4:	bf00      	nop
	}
}
 80015b6:	3724      	adds	r7, #36	; 0x24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	ecbd 8b02 	vpop	{d8}
 80015be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015c0:	3f333333 	.word	0x3f333333

080015c4 <animate_led_rainbow_cycle>:
    }
}


void animate_led_rainbow_cycle(const strip_mask_t mask_rainbow_cycle, const uint16_t speed_delay)
{
 80015c4:	b590      	push	{r4, r7, lr}
 80015c6:	ed2d 8b02 	vpush	{d8}
 80015ca:	b089      	sub	sp, #36	; 0x24
 80015cc:	af02      	add	r7, sp, #8
 80015ce:	4603      	mov	r3, r0
 80015d0:	460a      	mov	r2, r1
 80015d2:	80fb      	strh	r3, [r7, #6]
 80015d4:	4613      	mov	r3, r2
 80015d6:	80bb      	strh	r3, [r7, #4]
	uint8_t dummy_red, dummy_green, dummy_blue;
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_rainbow_cycle);
 80015d8:	88fb      	ldrh	r3, [r7, #6]
 80015da:	4618      	mov	r0, r3
 80015dc:	f000 faf0 	bl	8001bc0 <ws2812_led_get_max_strip_size>
 80015e0:	4603      	mov	r3, r0
 80015e2:	827b      	strh	r3, [r7, #18]
    uint8_t *c;
    uint16_t iii, jjj;
    for (jjj = 256 * 5; jjj > 0; jjj--)
 80015e4:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80015e8:	82bb      	strh	r3, [r7, #20]
 80015ea:	e06c      	b.n	80016c6 <animate_led_rainbow_cycle+0x102>
    {
        if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80015ec:	f000 fcb4 	bl	8001f58 <task_button_press_interrupt_occurred>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d00b      	beq.n	800160e <animate_led_rainbow_cycle+0x4a>
 80015f6:	f107 0209 	add.w	r2, r7, #9
 80015fa:	f107 010a 	add.w	r1, r7, #10
 80015fe:	f107 030b 	add.w	r3, r7, #11
 8001602:	4618      	mov	r0, r3
 8001604:	f000 fd0c 	bl	8002020 <task_button_press_check_interrupts>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d15f      	bne.n	80016ce <animate_led_rainbow_cycle+0x10a>
        for (iii = 0; iii < strip_size; iii++)
 800160e:	2300      	movs	r3, #0
 8001610:	82fb      	strh	r3, [r7, #22]
 8001612:	e02f      	b.n	8001674 <animate_led_rainbow_cycle+0xb0>
        {
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001614:	f000 fca0 	bl	8001f58 <task_button_press_interrupt_occurred>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d00b      	beq.n	8001636 <animate_led_rainbow_cycle+0x72>
 800161e:	f107 0209 	add.w	r2, r7, #9
 8001622:	f107 010a 	add.w	r1, r7, #10
 8001626:	f107 030b 	add.w	r3, r7, #11
 800162a:	4618      	mov	r0, r3
 800162c:	f000 fcf8 	bl	8002020 <task_button_press_check_interrupts>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d14d      	bne.n	80016d2 <animate_led_rainbow_cycle+0x10e>
            c = animate_led_wheel(((iii * 256 / strip_size) + jjj) & 255);
 8001636:	8afb      	ldrh	r3, [r7, #22]
 8001638:	021a      	lsls	r2, r3, #8
 800163a:	8a7b      	ldrh	r3, [r7, #18]
 800163c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001640:	b2da      	uxtb	r2, r3
 8001642:	8abb      	ldrh	r3, [r7, #20]
 8001644:	b2db      	uxtb	r3, r3
 8001646:	4413      	add	r3, r2
 8001648:	b2db      	uxtb	r3, r3
 800164a:	4618      	mov	r0, r3
 800164c:	f000 f848 	bl	80016e0 <animate_led_wheel>
 8001650:	60f8      	str	r0, [r7, #12]
            animate_led_set_pixel(mask_rainbow_cycle, iii, *c, *(c + 1), *(c + 2));
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	781a      	ldrb	r2, [r3, #0]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	3301      	adds	r3, #1
 800165a:	781c      	ldrb	r4, [r3, #0]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	3302      	adds	r3, #2
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	8af9      	ldrh	r1, [r7, #22]
 8001664:	88f8      	ldrh	r0, [r7, #6]
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	4623      	mov	r3, r4
 800166a:	f7ff fc19 	bl	8000ea0 <animate_led_set_pixel>
        for (iii = 0; iii < strip_size; iii++)
 800166e:	8afb      	ldrh	r3, [r7, #22]
 8001670:	3301      	adds	r3, #1
 8001672:	82fb      	strh	r3, [r7, #22]
 8001674:	8afa      	ldrh	r2, [r7, #22]
 8001676:	8a7b      	ldrh	r3, [r7, #18]
 8001678:	429a      	cmp	r2, r3
 800167a:	d3cb      	bcc.n	8001614 <animate_led_rainbow_cycle+0x50>
        }
        animate_led_show_strip(mask_rainbow_cycle);
 800167c:	88fb      	ldrh	r3, [r7, #6]
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fbfe 	bl	8000e80 <animate_led_show_strip>
        if (LED_SPEED_10X == task_led_ctrl_speed()) task_led_ctrl_delay(0);
 8001684:	f001 f8d0 	bl	8002828 <task_led_ctrl_speed>
 8001688:	eef0 7a40 	vmov.f32	s15, s0
 800168c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001694:	d103      	bne.n	800169e <animate_led_rainbow_cycle+0xda>
 8001696:	2000      	movs	r0, #0
 8001698:	f000 ff60 	bl	800255c <task_led_ctrl_delay>
 800169c:	e010      	b.n	80016c0 <animate_led_rainbow_cycle+0xfc>
        else task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 800169e:	88bb      	ldrh	r3, [r7, #4]
 80016a0:	ee07 3a90 	vmov	s15, r3
 80016a4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80016a8:	f001 f8be 	bl	8002828 <task_led_ctrl_speed>
 80016ac:	eeb0 7a40 	vmov.f32	s14, s0
 80016b0:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80016b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016b8:	ee17 0a90 	vmov	r0, s15
 80016bc:	f000 ff4e 	bl	800255c <task_led_ctrl_delay>
    for (jjj = 256 * 5; jjj > 0; jjj--)
 80016c0:	8abb      	ldrh	r3, [r7, #20]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	82bb      	strh	r3, [r7, #20]
 80016c6:	8abb      	ldrh	r3, [r7, #20]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d18f      	bne.n	80015ec <animate_led_rainbow_cycle+0x28>
 80016cc:	e002      	b.n	80016d4 <animate_led_rainbow_cycle+0x110>
        if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80016ce:	bf00      	nop
 80016d0:	e000      	b.n	80016d4 <animate_led_rainbow_cycle+0x110>
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80016d2:	bf00      	nop
    }
}
 80016d4:	371c      	adds	r7, #28
 80016d6:	46bd      	mov	sp, r7
 80016d8:	ecbd 8b02 	vpop	{d8}
 80016dc:	bd90      	pop	{r4, r7, pc}
	...

080016e0 <animate_led_wheel>:


uint8_t* animate_led_wheel(uint8_t wheel_pos)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	71fb      	strb	r3, [r7, #7]
    static uint8_t c[3];
    if (wheel_pos < 85)
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	2b54      	cmp	r3, #84	; 0x54
 80016ee:	d813      	bhi.n	8001718 <animate_led_wheel+0x38>
    {
        c[0] = wheel_pos * 3;
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	461a      	mov	r2, r3
 80016f4:	0052      	lsls	r2, r2, #1
 80016f6:	4413      	add	r3, r2
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	4b23      	ldr	r3, [pc, #140]	; (8001788 <animate_led_wheel+0xa8>)
 80016fc:	701a      	strb	r2, [r3, #0]
        c[1] = 255 - wheel_pos * 3; 
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	461a      	mov	r2, r3
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	b2db      	uxtb	r3, r3
 8001708:	3b01      	subs	r3, #1
 800170a:	b2da      	uxtb	r2, r3
 800170c:	4b1e      	ldr	r3, [pc, #120]	; (8001788 <animate_led_wheel+0xa8>)
 800170e:	705a      	strb	r2, [r3, #1]
        c[2] = 0;
 8001710:	4b1d      	ldr	r3, [pc, #116]	; (8001788 <animate_led_wheel+0xa8>)
 8001712:	2200      	movs	r2, #0
 8001714:	709a      	strb	r2, [r3, #2]
 8001716:	e02f      	b.n	8001778 <animate_led_wheel+0x98>
    }
    else if(wheel_pos < 170)
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	2ba9      	cmp	r3, #169	; 0xa9
 800171c:	d816      	bhi.n	800174c <animate_led_wheel+0x6c>
    {
        wheel_pos -= 85;
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	3b55      	subs	r3, #85	; 0x55
 8001722:	71fb      	strb	r3, [r7, #7]
        c[0] = 255 - wheel_pos * 3;
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	461a      	mov	r2, r3
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	b2db      	uxtb	r3, r3
 800172e:	3b01      	subs	r3, #1
 8001730:	b2da      	uxtb	r2, r3
 8001732:	4b15      	ldr	r3, [pc, #84]	; (8001788 <animate_led_wheel+0xa8>)
 8001734:	701a      	strb	r2, [r3, #0]
        c[1] = 0;
 8001736:	4b14      	ldr	r3, [pc, #80]	; (8001788 <animate_led_wheel+0xa8>)
 8001738:	2200      	movs	r2, #0
 800173a:	705a      	strb	r2, [r3, #1]
        c[2] = wheel_pos * 3;
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	461a      	mov	r2, r3
 8001740:	0052      	lsls	r2, r2, #1
 8001742:	4413      	add	r3, r2
 8001744:	b2da      	uxtb	r2, r3
 8001746:	4b10      	ldr	r3, [pc, #64]	; (8001788 <animate_led_wheel+0xa8>)
 8001748:	709a      	strb	r2, [r3, #2]
 800174a:	e015      	b.n	8001778 <animate_led_wheel+0x98>
    }
    else
    {
        wheel_pos -= 170;
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	3356      	adds	r3, #86	; 0x56
 8001750:	71fb      	strb	r3, [r7, #7]
        c[0] = 0;
 8001752:	4b0d      	ldr	r3, [pc, #52]	; (8001788 <animate_led_wheel+0xa8>)
 8001754:	2200      	movs	r2, #0
 8001756:	701a      	strb	r2, [r3, #0]
        c[1] = wheel_pos * 3; 
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	461a      	mov	r2, r3
 800175c:	0052      	lsls	r2, r2, #1
 800175e:	4413      	add	r3, r2
 8001760:	b2da      	uxtb	r2, r3
 8001762:	4b09      	ldr	r3, [pc, #36]	; (8001788 <animate_led_wheel+0xa8>)
 8001764:	705a      	strb	r2, [r3, #1]
        c[2] = 255 - wheel_pos * 3;
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	461a      	mov	r2, r3
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	b2db      	uxtb	r3, r3
 8001770:	3b01      	subs	r3, #1
 8001772:	b2da      	uxtb	r2, r3
 8001774:	4b04      	ldr	r3, [pc, #16]	; (8001788 <animate_led_wheel+0xa8>)
 8001776:	709a      	strb	r2, [r3, #2]
    }
    return c;
 8001778:	4b03      	ldr	r3, [pc, #12]	; (8001788 <animate_led_wheel+0xa8>)
}
 800177a:	4618      	mov	r0, r3
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	20000260 	.word	0x20000260

0800178c <animate_led_theater_chase>:
}


void animate_led_theater_chase(const strip_mask_t mask_theater_chase, const color_hex_code_e color_theater_chase,
                               const uint16_t speed_delay)
{
 800178c:	b590      	push	{r4, r7, lr}
 800178e:	ed2d 8b02 	vpush	{d8}
 8001792:	b08b      	sub	sp, #44	; 0x2c
 8001794:	af02      	add	r7, sp, #8
 8001796:	4603      	mov	r3, r0
 8001798:	6039      	str	r1, [r7, #0]
 800179a:	80fb      	strh	r3, [r7, #6]
 800179c:	4613      	mov	r3, r2
 800179e:	80bb      	strh	r3, [r7, #4]
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_theater_chase);
 80017a0:	88fb      	ldrh	r3, [r7, #6]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 fa0c 	bl	8001bc0 <ws2812_led_get_max_strip_size>
 80017a8:	4603      	mov	r3, r0
 80017aa:	81fb      	strh	r3, [r7, #14]
    uint8_t color_theater_chase_rgb[sizeof(ws2812b_led_t)] = {0};
 80017ac:	4b47      	ldr	r3, [pc, #284]	; (80018cc <animate_led_theater_chase+0x140>)
 80017ae:	881b      	ldrh	r3, [r3, #0]
 80017b0:	813b      	strh	r3, [r7, #8]
 80017b2:	2300      	movs	r3, #0
 80017b4:	72bb      	strb	r3, [r7, #10]
    color_led_hex_to_rgb(color_theater_chase, color_theater_chase_rgb);
 80017b6:	f107 0308 	add.w	r3, r7, #8
 80017ba:	4619      	mov	r1, r3
 80017bc:	6838      	ldr	r0, [r7, #0]
 80017be:	f000 f935 	bl	8001a2c <color_led_hex_to_rgb>
    for (int jjj = 0; jjj < 10; jjj++)
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
 80017c6:	e075      	b.n	80018b4 <animate_led_theater_chase+0x128>
    {
        for (int qqq = 0; qqq < 3; qqq++)
 80017c8:	2300      	movs	r3, #0
 80017ca:	61bb      	str	r3, [r7, #24]
 80017cc:	e06c      	b.n	80018a8 <animate_led_theater_chase+0x11c>
        {
            if (task_button_press_interrupt_occurred())
 80017ce:	f000 fbc3 	bl	8001f58 <task_button_press_interrupt_occurred>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d00d      	beq.n	80017f4 <animate_led_theater_chase+0x68>
            {
                if (task_button_press_check_interrupts(&color_theater_chase_rgb[offsetof(ws2812b_led_t, red)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, green)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]))
 80017d8:	f107 0308 	add.w	r3, r7, #8
 80017dc:	1c9a      	adds	r2, r3, #2
 80017de:	f107 0308 	add.w	r3, r7, #8
 80017e2:	1c59      	adds	r1, r3, #1
 80017e4:	f107 0308 	add.w	r3, r7, #8
 80017e8:	4618      	mov	r0, r3
 80017ea:	f000 fc19 	bl	8002020 <task_button_press_check_interrupts>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d163      	bne.n	80018bc <animate_led_theater_chase+0x130>
                {
                    return;
                }
            }
            for (int iii = 0; iii < strip_size; iii += 3)
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	e010      	b.n	800181c <animate_led_theater_chase+0x90>
            {
                animate_led_set_pixel(mask_theater_chase, iii + qqq,
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	b29b      	uxth	r3, r3
 8001802:	4413      	add	r3, r2
 8001804:	b299      	uxth	r1, r3
 8001806:	7a3a      	ldrb	r2, [r7, #8]
 8001808:	7a7c      	ldrb	r4, [r7, #9]
 800180a:	7abb      	ldrb	r3, [r7, #10]
 800180c:	88f8      	ldrh	r0, [r7, #6]
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	4623      	mov	r3, r4
 8001812:	f7ff fb45 	bl	8000ea0 <animate_led_set_pixel>
            for (int iii = 0; iii < strip_size; iii += 3)
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	3303      	adds	r3, #3
 800181a:	617b      	str	r3, [r7, #20]
 800181c:	89fb      	ldrh	r3, [r7, #14]
 800181e:	697a      	ldr	r2, [r7, #20]
 8001820:	429a      	cmp	r2, r3
 8001822:	dbea      	blt.n	80017fa <animate_led_theater_chase+0x6e>
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, red)]),
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, green)]),
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]));
            }
            animate_led_show_strip(mask_theater_chase);
 8001824:	88fb      	ldrh	r3, [r7, #6]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fb2a 	bl	8000e80 <animate_led_show_strip>
            if (task_button_press_interrupt_occurred())
 800182c:	f000 fb94 	bl	8001f58 <task_button_press_interrupt_occurred>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d00d      	beq.n	8001852 <animate_led_theater_chase+0xc6>
            {
                if (task_button_press_check_interrupts(&color_theater_chase_rgb[offsetof(ws2812b_led_t, red)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, green)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]))
 8001836:	f107 0308 	add.w	r3, r7, #8
 800183a:	1c9a      	adds	r2, r3, #2
 800183c:	f107 0308 	add.w	r3, r7, #8
 8001840:	1c59      	adds	r1, r3, #1
 8001842:	f107 0308 	add.w	r3, r7, #8
 8001846:	4618      	mov	r0, r3
 8001848:	f000 fbea 	bl	8002020 <task_button_press_check_interrupts>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d136      	bne.n	80018c0 <animate_led_theater_chase+0x134>
                {
                    return;
                }
            }
            task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 8001852:	88bb      	ldrh	r3, [r7, #4]
 8001854:	ee07 3a90 	vmov	s15, r3
 8001858:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800185c:	f000 ffe4 	bl	8002828 <task_led_ctrl_speed>
 8001860:	eeb0 7a40 	vmov.f32	s14, s0
 8001864:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001868:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800186c:	ee17 0a90 	vmov	r0, s15
 8001870:	f000 fe74 	bl	800255c <task_led_ctrl_delay>
            for (int iii = 0; iii < strip_size; iii += 3) animate_led_set_pixel(mask_theater_chase, iii + qqq, 0, 0, 0); // turn every third pixel off
 8001874:	2300      	movs	r3, #0
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	e00f      	b.n	800189a <animate_led_theater_chase+0x10e>
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	b29a      	uxth	r2, r3
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	b29b      	uxth	r3, r3
 8001882:	4413      	add	r3, r2
 8001884:	b299      	uxth	r1, r3
 8001886:	88f8      	ldrh	r0, [r7, #6]
 8001888:	2300      	movs	r3, #0
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	2300      	movs	r3, #0
 800188e:	2200      	movs	r2, #0
 8001890:	f7ff fb06 	bl	8000ea0 <animate_led_set_pixel>
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	3303      	adds	r3, #3
 8001898:	613b      	str	r3, [r7, #16]
 800189a:	89fb      	ldrh	r3, [r7, #14]
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	429a      	cmp	r2, r3
 80018a0:	dbeb      	blt.n	800187a <animate_led_theater_chase+0xee>
        for (int qqq = 0; qqq < 3; qqq++)
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	3301      	adds	r3, #1
 80018a6:	61bb      	str	r3, [r7, #24]
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	dd8f      	ble.n	80017ce <animate_led_theater_chase+0x42>
    for (int jjj = 0; jjj < 10; jjj++)
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3301      	adds	r3, #1
 80018b2:	61fb      	str	r3, [r7, #28]
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	2b09      	cmp	r3, #9
 80018b8:	dd86      	ble.n	80017c8 <animate_led_theater_chase+0x3c>
 80018ba:	e002      	b.n	80018c2 <animate_led_theater_chase+0x136>
                    return;
 80018bc:	bf00      	nop
 80018be:	e000      	b.n	80018c2 <animate_led_theater_chase+0x136>
                    return;
 80018c0:	bf00      	nop
        }
    }
}
 80018c2:	3724      	adds	r7, #36	; 0x24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	ecbd 8b02 	vpop	{d8}
 80018ca:	bd90      	pop	{r4, r7, pc}
 80018cc:	0800c0b4 	.word	0x0800c0b4

080018d0 <animate_led_theater_chase_rainbow>:


void animate_led_theater_chase_rainbow(const strip_mask_t mask_theater_chase, const uint16_t speed_delay)
{
 80018d0:	b590      	push	{r4, r7, lr}
 80018d2:	ed2d 8b02 	vpush	{d8}
 80018d6:	b08d      	sub	sp, #52	; 0x34
 80018d8:	af02      	add	r7, sp, #8
 80018da:	4603      	mov	r3, r0
 80018dc:	460a      	mov	r2, r1
 80018de:	80fb      	strh	r3, [r7, #6]
 80018e0:	4613      	mov	r3, r2
 80018e2:	80bb      	strh	r3, [r7, #4]
	uint8_t dummy_red, dummy_green, dummy_blue;
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_theater_chase);
 80018e4:	88fb      	ldrh	r3, [r7, #6]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 f96a 	bl	8001bc0 <ws2812_led_get_max_strip_size>
 80018ec:	4603      	mov	r3, r0
 80018ee:	82fb      	strh	r3, [r7, #22]
    uint8_t *c;
    for (int jjj = 0; jjj < 256; jjj++) // cycel all 256 colors in the animate_led_wheel
 80018f0:	2300      	movs	r3, #0
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
 80018f4:	e08a      	b.n	8001a0c <animate_led_theater_chase_rainbow+0x13c>
    {
        for (int qqq = 0; qqq < 3; qqq++)
 80018f6:	2300      	movs	r3, #0
 80018f8:	623b      	str	r3, [r7, #32]
 80018fa:	e080      	b.n	80019fe <animate_led_theater_chase_rainbow+0x12e>
        {
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80018fc:	f000 fb2c 	bl	8001f58 <task_button_press_interrupt_occurred>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d00b      	beq.n	800191e <animate_led_theater_chase_rainbow+0x4e>
 8001906:	f107 020d 	add.w	r2, r7, #13
 800190a:	f107 010e 	add.w	r1, r7, #14
 800190e:	f107 030f 	add.w	r3, r7, #15
 8001912:	4618      	mov	r0, r3
 8001914:	f000 fb84 	bl	8002020 <task_button_press_check_interrupts>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d17b      	bne.n	8001a16 <animate_led_theater_chase_rainbow+0x146>
            for (int iii = 0; iii < strip_size; iii += 3)
 800191e:	2300      	movs	r3, #0
 8001920:	61fb      	str	r3, [r7, #28]
 8001922:	e039      	b.n	8001998 <animate_led_theater_chase_rainbow+0xc8>
            {
                if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001924:	f000 fb18 	bl	8001f58 <task_button_press_interrupt_occurred>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00b      	beq.n	8001946 <animate_led_theater_chase_rainbow+0x76>
 800192e:	f107 020d 	add.w	r2, r7, #13
 8001932:	f107 010e 	add.w	r1, r7, #14
 8001936:	f107 030f 	add.w	r3, r7, #15
 800193a:	4618      	mov	r0, r3
 800193c:	f000 fb70 	bl	8002020 <task_button_press_check_interrupts>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d169      	bne.n	8001a1a <animate_led_theater_chase_rainbow+0x14a>
                c = animate_led_wheel((iii + jjj) % 255);
 8001946:	69fa      	ldr	r2, [r7, #28]
 8001948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194a:	441a      	add	r2, r3
 800194c:	4b36      	ldr	r3, [pc, #216]	; (8001a28 <animate_led_theater_chase_rainbow+0x158>)
 800194e:	fb83 1302 	smull	r1, r3, r3, r2
 8001952:	4413      	add	r3, r2
 8001954:	11d9      	asrs	r1, r3, #7
 8001956:	17d3      	asrs	r3, r2, #31
 8001958:	1ac9      	subs	r1, r1, r3
 800195a:	460b      	mov	r3, r1
 800195c:	021b      	lsls	r3, r3, #8
 800195e:	1a5b      	subs	r3, r3, r1
 8001960:	1ad1      	subs	r1, r2, r3
 8001962:	b2cb      	uxtb	r3, r1
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff febb 	bl	80016e0 <animate_led_wheel>
 800196a:	6138      	str	r0, [r7, #16]
                animate_led_set_pixel(mask_theater_chase, iii + qqq, *c, *(c + 1), *(c + 2)); // turn every third pixel on
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	b29a      	uxth	r2, r3
 8001970:	6a3b      	ldr	r3, [r7, #32]
 8001972:	b29b      	uxth	r3, r3
 8001974:	4413      	add	r3, r2
 8001976:	b299      	uxth	r1, r3
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	781a      	ldrb	r2, [r3, #0]
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	3301      	adds	r3, #1
 8001980:	781c      	ldrb	r4, [r3, #0]
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	3302      	adds	r3, #2
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	88f8      	ldrh	r0, [r7, #6]
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	4623      	mov	r3, r4
 800198e:	f7ff fa87 	bl	8000ea0 <animate_led_set_pixel>
            for (int iii = 0; iii < strip_size; iii += 3)
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	3303      	adds	r3, #3
 8001996:	61fb      	str	r3, [r7, #28]
 8001998:	8afb      	ldrh	r3, [r7, #22]
 800199a:	69fa      	ldr	r2, [r7, #28]
 800199c:	429a      	cmp	r2, r3
 800199e:	dbc1      	blt.n	8001924 <animate_led_theater_chase_rainbow+0x54>
            }
            animate_led_show_strip(mask_theater_chase);
 80019a0:	88fb      	ldrh	r3, [r7, #6]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fa6c 	bl	8000e80 <animate_led_show_strip>
            task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 80019a8:	88bb      	ldrh	r3, [r7, #4]
 80019aa:	ee07 3a90 	vmov	s15, r3
 80019ae:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80019b2:	f000 ff39 	bl	8002828 <task_led_ctrl_speed>
 80019b6:	eeb0 7a40 	vmov.f32	s14, s0
 80019ba:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80019be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019c2:	ee17 0a90 	vmov	r0, s15
 80019c6:	f000 fdc9 	bl	800255c <task_led_ctrl_delay>
            for (int iii = 0; iii < strip_size; iii += 3) animate_led_set_pixel(mask_theater_chase, iii + qqq, 0, 0, 0); // turn every third pixel off
 80019ca:	2300      	movs	r3, #0
 80019cc:	61bb      	str	r3, [r7, #24]
 80019ce:	e00f      	b.n	80019f0 <animate_led_theater_chase_rainbow+0x120>
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	6a3b      	ldr	r3, [r7, #32]
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	4413      	add	r3, r2
 80019da:	b299      	uxth	r1, r3
 80019dc:	88f8      	ldrh	r0, [r7, #6]
 80019de:	2300      	movs	r3, #0
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	2300      	movs	r3, #0
 80019e4:	2200      	movs	r2, #0
 80019e6:	f7ff fa5b 	bl	8000ea0 <animate_led_set_pixel>
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	3303      	adds	r3, #3
 80019ee:	61bb      	str	r3, [r7, #24]
 80019f0:	8afb      	ldrh	r3, [r7, #22]
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	dbeb      	blt.n	80019d0 <animate_led_theater_chase_rainbow+0x100>
        for (int qqq = 0; qqq < 3; qqq++)
 80019f8:	6a3b      	ldr	r3, [r7, #32]
 80019fa:	3301      	adds	r3, #1
 80019fc:	623b      	str	r3, [r7, #32]
 80019fe:	6a3b      	ldr	r3, [r7, #32]
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	f77f af7b 	ble.w	80018fc <animate_led_theater_chase_rainbow+0x2c>
    for (int jjj = 0; jjj < 256; jjj++) // cycel all 256 colors in the animate_led_wheel
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	3301      	adds	r3, #1
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0e:	2bff      	cmp	r3, #255	; 0xff
 8001a10:	f77f af71 	ble.w	80018f6 <animate_led_theater_chase_rainbow+0x26>
 8001a14:	e002      	b.n	8001a1c <animate_led_theater_chase_rainbow+0x14c>
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001a16:	bf00      	nop
 8001a18:	e000      	b.n	8001a1c <animate_led_theater_chase_rainbow+0x14c>
                if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001a1a:	bf00      	nop
        }
    }
}
 8001a1c:	372c      	adds	r7, #44	; 0x2c
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	ecbd 8b02 	vpop	{d8}
 8001a24:	bd90      	pop	{r4, r7, pc}
 8001a26:	bf00      	nop
 8001a28:	80808081 	.word	0x80808081

08001a2c <color_led_hex_to_rgb>:
    [COLORS_BROWN] = COLOR_HEX_BROWN
};


void color_led_hex_to_rgb(const color_hex_code_e color, uint8_t *color_array)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
    color_array[offsetof(ws2812b_led_t, red)] = ((color & 0xFF0000) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, red))));
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	0c1b      	lsrs	r3, r3, #16
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	701a      	strb	r2, [r3, #0]
    color_array[offsetof(ws2812b_led_t, green)] = ((color & 0x00FF00) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, green))));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	0a1a      	lsrs	r2, r3, #8
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	3301      	adds	r3, #1
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	701a      	strb	r2, [r3, #0]
    color_array[offsetof(ws2812b_led_t, blue)] = ((color & 0x0000FF) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, blue))));
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	3302      	adds	r3, #2
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	701a      	strb	r2, [r3, #0]
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
	...

08001a64 <reset_ws2812b>:

extern volatile int datasentflag;

uint16_t pwm_reset[50] = {0};
void reset_ws2812b(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
    //xSemaphoreTake(g_dma_transfer_semaphore, portMAX_DELAY);
    //xTaskNotify(g_dma_transfer_handle, 0, eSetValueWithOverwrite);
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_1, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 8001a68:	2364      	movs	r3, #100	; 0x64
 8001a6a:	4a09      	ldr	r2, [pc, #36]	; (8001a90 <reset_ws2812b+0x2c>)
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4809      	ldr	r0, [pc, #36]	; (8001a94 <reset_ws2812b+0x30>)
 8001a70:	f006 f91e 	bl	8007cb0 <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_2, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 8001a74:	2364      	movs	r3, #100	; 0x64
 8001a76:	4a06      	ldr	r2, [pc, #24]	; (8001a90 <reset_ws2812b+0x2c>)
 8001a78:	2104      	movs	r1, #4
 8001a7a:	4806      	ldr	r0, [pc, #24]	; (8001a94 <reset_ws2812b+0x30>)
 8001a7c:	f006 f918 	bl	8007cb0 <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_3, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 8001a80:	2364      	movs	r3, #100	; 0x64
 8001a82:	4a03      	ldr	r2, [pc, #12]	; (8001a90 <reset_ws2812b+0x2c>)
 8001a84:	2108      	movs	r1, #8
 8001a86:	4803      	ldr	r0, [pc, #12]	; (8001a94 <reset_ws2812b+0x30>)
 8001a88:	f006 f912 	bl	8007cb0 <HAL_TIM_PWM_Start_DMA>
}
 8001a8c:	bf00      	nop
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	200009e8 	.word	0x200009e8
 8001a94:	20002528 	.word	0x20002528

08001a98 <ws2812_convert_strip_num_to_strip_bit>:

static strip_bit_e ws2812_convert_strip_num_to_strip_bit(const strip_num_e strip_num)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	71fb      	strb	r3, [r7, #7]
	return (strip_bit_e)(strip_num + 1);
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	b2db      	uxtb	r3, r3
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <ws2812_convert_strip_bit_to_strip_num>:


static strip_num_e ws2812_convert_strip_bit_to_strip_num(const strip_bit_e strip_bit)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	71fb      	strb	r3, [r7, #7]
	return (strip_num_e)(strip_bit - 1);
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	b2db      	uxtb	r3, r3
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <ws2812_get_pwm_strip_offset>:


uint16_t ws2812_get_pwm_strip_offset(const strip_bit_e strip_bit)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	71fb      	strb	r3, [r7, #7]
    uint16_t offset = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	81fb      	strh	r3, [r7, #14]
    uint8_t strip_num = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	737b      	strb	r3, [r7, #13]
    switch (strip_bit)
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d104      	bne.n	8001af2 <ws2812_get_pwm_strip_offset+0x22>
    {
#if defined(STRIP_1_LENGTH)
        case STRIP_BIT_1:
            offset = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	81fb      	strh	r3, [r7, #14]
            strip_num = 1;
 8001aec:	2301      	movs	r3, #1
 8001aee:	737b      	strb	r3, [r7, #13]
        break;
 8001af0:	e000      	b.n	8001af4 <ws2812_get_pwm_strip_offset+0x24>
        case STRIP_BIT_5:
            offset = STRIP_1_LENGTH + STRIP_2_LENGTH + STRIP_3_LENGTH + STRIP_4_LENGTH;
        break;
#endif
        default:
        break;
 8001af2:	bf00      	nop
    }
    return ((offset * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + (strip_num * WS2812B_RESET_TIME_CYCLES));
 8001af4:	89fa      	ldrh	r2, [r7, #14]
 8001af6:	4613      	mov	r3, r2
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	4413      	add	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	ee07 3a90 	vmov	s15, r3
 8001b02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b06:	7b7b      	ldrb	r3, [r7, #13]
 8001b08:	ee07 3a90 	vmov	s15, r3
 8001b0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b10:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001b34 <ws2812_get_pwm_strip_offset+0x64>
 8001b14:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001b18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b20:	ee17 3a90 	vmov	r3, s15
 8001b24:	b29b      	uxth	r3, r3
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	453b8000 	.word	0x453b8000

08001b38 <ws2812_get_strip_size>:


uint16_t ws2812_get_strip_size(const strip_bit_e strip_bit)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]
	uint16_t strip_size = 0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_ALL_SET == strip_bit) strip_size = g_max_strip_length;
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d103      	bne.n	8001b54 <ws2812_get_strip_size+0x1c>
 8001b4c:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <ws2812_get_strip_size+0x3c>)
 8001b4e:	881b      	ldrh	r3, [r3, #0]
 8001b50:	81fb      	strh	r3, [r7, #14]
 8001b52:	e009      	b.n	8001b68 <ws2812_get_strip_size+0x30>
	else strip_size = strip_length[ws2812_convert_strip_num_to_strip_bit(strip_bit)];
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff ff9e 	bl	8001a98 <ws2812_convert_strip_num_to_strip_bit>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	461a      	mov	r2, r3
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <ws2812_get_strip_size+0x40>)
 8001b62:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001b66:	81fb      	strh	r3, [r7, #14]
	return strip_size;
 8001b68:	89fb      	ldrh	r3, [r7, #14]
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	200009dc 	.word	0x200009dc
 8001b78:	2000005c 	.word	0x2000005c

08001b7c <ws2812_get_num_active_animation_leds>:
	return STRIP_BIT_NO_MORE_SET;  // if this is returned
}


uint16_t ws2812_get_num_active_animation_leds(const strip_mask_t strip_mask)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	80fb      	strh	r3, [r7, #6]
	uint16_t strip_size = 0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_ALL_SET == strip_mask) strip_size = g_num_leds;
 8001b8a:	88fb      	ldrh	r3, [r7, #6]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d103      	bne.n	8001b98 <ws2812_get_num_active_animation_leds+0x1c>
 8001b90:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <ws2812_get_num_active_animation_leds+0x40>)
 8001b92:	881b      	ldrh	r3, [r3, #0]
 8001b94:	81fb      	strh	r3, [r7, #14]
 8001b96:	e009      	b.n	8001bac <ws2812_get_num_active_animation_leds+0x30>
	else
	{
#if defined(STRIP_1_LENGTH)
		if (STRIP_BIT_1 & strip_mask) strip_size += STRIP_1_LENGTH;
 8001b98:	88fb      	ldrh	r3, [r7, #6]
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <ws2812_get_num_active_animation_leds+0x30>
 8001ba4:	89fb      	ldrh	r3, [r7, #14]
 8001ba6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001baa:	81fb      	strh	r3, [r7, #14]
#endif
#if defined(STRIP_9_LENGTH)
		if (STRIP_BIT_9 & strip_mask) strip_size += STRIP_9_LENGTH;
#endif
	}
	return strip_size;
 8001bac:	89fb      	ldrh	r3, [r7, #14]
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	200009d8 	.word	0x200009d8

08001bc0 <ws2812_led_get_max_strip_size>:


uint16_t ws2812_led_get_max_strip_size(const strip_mask_t strip_mask)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	80fb      	strh	r3, [r7, #6]
	uint16_t strip_size = 0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_ALL_SET == strip_mask) strip_size = g_max_strip_length;
 8001bce:	88fb      	ldrh	r3, [r7, #6]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d103      	bne.n	8001bdc <ws2812_led_get_max_strip_size+0x1c>
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <ws2812_led_get_max_strip_size+0x44>)
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	81fb      	strh	r3, [r7, #14]
 8001bda:	e00c      	b.n	8001bf6 <ws2812_led_get_max_strip_size+0x36>
	else
	{
#if defined(STRIP_1_LENGTH)
		if ((STRIP_BIT_1 & strip_mask) && (strip_size < STRIP_1_LENGTH)) strip_size = STRIP_1_LENGTH;
 8001bdc:	88fb      	ldrh	r3, [r7, #6]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d006      	beq.n	8001bf6 <ws2812_led_get_max_strip_size+0x36>
 8001be8:	89fb      	ldrh	r3, [r7, #14]
 8001bea:	f5b3 7f1f 	cmp.w	r3, #636	; 0x27c
 8001bee:	d202      	bcs.n	8001bf6 <ws2812_led_get_max_strip_size+0x36>
 8001bf0:	f44f 731f 	mov.w	r3, #636	; 0x27c
 8001bf4:	81fb      	strh	r3, [r7, #14]
#endif
#if defined(STRIP_9_LENGTH)
		if ((STRIP_BIT_9 & strip_mask) && (strip_size < STRIP_9_LENGTH)) strip_size = STRIP_9_LENGTH;
#endif
	}
	return strip_size;
 8001bf6:	89fb      	ldrh	r3, [r7, #14]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	200009dc 	.word	0x200009dc

08001c08 <ws2812_pixel_is_in_strip_range>:


bool ws2812_pixel_is_in_strip_range(const strip_bit_e strip_bit, const uint16_t pixel)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	460a      	mov	r2, r1
 8001c12:	71fb      	strb	r3, [r7, #7]
 8001c14:	4613      	mov	r3, r2
 8001c16:	80bb      	strh	r3, [r7, #4]
	bool return_val = false;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	73fb      	strb	r3, [r7, #15]
#if defined(STRIP_1_LENGTH)
	if ((STRIP_BIT_1 == strip_bit) && (pixel < STRIP_1_LENGTH)) return_val = true;
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d105      	bne.n	8001c2e <ws2812_pixel_is_in_strip_range+0x26>
 8001c22:	88bb      	ldrh	r3, [r7, #4]
 8001c24:	f5b3 7f1f 	cmp.w	r3, #636	; 0x27c
 8001c28:	d201      	bcs.n	8001c2e <ws2812_pixel_is_in_strip_range+0x26>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	73fb      	strb	r3, [r7, #15]
	else if ((STRIP_BIT_8 == strip_bit) && (pixel < STRIP_8_LENGTH)) return_val = true;
#endif
#if defined(STRIP_9_LENGTH)
	else if ((STRIP_BIT_9 == strip_bit) && (pixel < STRIP_9_LENGTH)) return_val = true;
#endif
	return return_val;
 8001c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <ws2812b_set_led>:


void ws2812b_set_led(const strip_bit_e strip_bit, const uint16_t led_num, const color_t red, const color_t green,
                     const color_t blue)
{
 8001c3c:	b590      	push	{r4, r7, lr}
 8001c3e:	b087      	sub	sp, #28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4604      	mov	r4, r0
 8001c44:	4608      	mov	r0, r1
 8001c46:	4611      	mov	r1, r2
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4623      	mov	r3, r4
 8001c4c:	73fb      	strb	r3, [r7, #15]
 8001c4e:	4603      	mov	r3, r0
 8001c50:	81bb      	strh	r3, [r7, #12]
 8001c52:	460b      	mov	r3, r1
 8001c54:	73bb      	strb	r3, [r7, #14]
 8001c56:	4613      	mov	r3, r2
 8001c58:	72fb      	strb	r3, [r7, #11]
	strip_num_e strip_num = ws2812_convert_strip_bit_to_strip_num(strip_bit);
 8001c5a:	7bfb      	ldrb	r3, [r7, #15]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff ff29 	bl	8001ab4 <ws2812_convert_strip_bit_to_strip_num>
 8001c62:	4603      	mov	r3, r0
 8001c64:	75fb      	strb	r3, [r7, #23]
    (gp_ws28128b_strip[strip_num] + led_num)->red = red * g_max_current_ratio;
 8001c66:	7bbb      	ldrb	r3, [r7, #14]
 8001c68:	ee07 3a90 	vmov	s15, r3
 8001c6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c70:	4b26      	ldr	r3, [pc, #152]	; (8001d0c <ws2812b_set_led+0xd0>)
 8001c72:	edd3 7a00 	vldr	s15, [r3]
 8001c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c7a:	7dfb      	ldrb	r3, [r7, #23]
 8001c7c:	4a24      	ldr	r2, [pc, #144]	; (8001d10 <ws2812b_set_led+0xd4>)
 8001c7e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001c82:	89ba      	ldrh	r2, [r7, #12]
 8001c84:	4613      	mov	r3, r2
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	4413      	add	r3, r2
 8001c8a:	440b      	add	r3, r1
 8001c8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c90:	edc7 7a01 	vstr	s15, [r7, #4]
 8001c94:	793a      	ldrb	r2, [r7, #4]
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	701a      	strb	r2, [r3, #0]
    (gp_ws28128b_strip[strip_num] + led_num)->green = green * g_max_current_ratio;
 8001c9a:	7afb      	ldrb	r3, [r7, #11]
 8001c9c:	ee07 3a90 	vmov	s15, r3
 8001ca0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ca4:	4b19      	ldr	r3, [pc, #100]	; (8001d0c <ws2812b_set_led+0xd0>)
 8001ca6:	edd3 7a00 	vldr	s15, [r3]
 8001caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cae:	7dfb      	ldrb	r3, [r7, #23]
 8001cb0:	4a17      	ldr	r2, [pc, #92]	; (8001d10 <ws2812b_set_led+0xd4>)
 8001cb2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001cb6:	89ba      	ldrh	r2, [r7, #12]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	4413      	add	r3, r2
 8001cbe:	440b      	add	r3, r1
 8001cc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cc4:	edc7 7a01 	vstr	s15, [r7, #4]
 8001cc8:	793a      	ldrb	r2, [r7, #4]
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	705a      	strb	r2, [r3, #1]
    (gp_ws28128b_strip[strip_num] + led_num)->blue = blue * g_max_current_ratio;
 8001cce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001cd2:	ee07 3a90 	vmov	s15, r3
 8001cd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cda:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <ws2812b_set_led+0xd0>)
 8001cdc:	edd3 7a00 	vldr	s15, [r3]
 8001ce0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ce4:	7dfb      	ldrb	r3, [r7, #23]
 8001ce6:	4a0a      	ldr	r2, [pc, #40]	; (8001d10 <ws2812b_set_led+0xd4>)
 8001ce8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001cec:	89ba      	ldrh	r2, [r7, #12]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	4413      	add	r3, r2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cfa:	edc7 7a01 	vstr	s15, [r7, #4]
 8001cfe:	793a      	ldrb	r2, [r7, #4]
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	709a      	strb	r2, [r3, #2]
}
 8001d04:	bf00      	nop
 8001d06:	371c      	adds	r7, #28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd90      	pop	{r4, r7, pc}
 8001d0c:	20000000 	.word	0x20000000
 8001d10:	200009e4 	.word	0x200009e4

08001d14 <ws2812b_fill_pwm_buffer_strip_one>:



#if defined(STRIP_1_LENGTH)
void ws2812b_fill_pwm_buffer_strip_one(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
    uint32_t color = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
    uint32_t strip_size = STRIP_1_LENGTH;
 8001d1e:	f44f 731f 	mov.w	r3, #636	; 0x27c
 8001d22:	60bb      	str	r3, [r7, #8]
    uint32_t strip_pwm_offset = ws2812_get_pwm_strip_offset(STRIP_BIT_1);
 8001d24:	2001      	movs	r0, #1
 8001d26:	f7ff fed3 	bl	8001ad0 <ws2812_get_pwm_strip_offset>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	607b      	str	r3, [r7, #4]
    while (!gb_dma_cmplt_strip_2)
 8001d2e:	e002      	b.n	8001d36 <ws2812b_fill_pwm_buffer_strip_one+0x22>
    {
        osDelay(1);
 8001d30:	2001      	movs	r0, #1
 8001d32:	f000 ff57 	bl	8002be4 <osDelay>
    while (!gb_dma_cmplt_strip_2)
 8001d36:	4b44      	ldr	r3, [pc, #272]	; (8001e48 <ws2812b_fill_pwm_buffer_strip_one+0x134>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	f083 0301 	eor.w	r3, r3, #1
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1f5      	bne.n	8001d30 <ws2812b_fill_pwm_buffer_strip_one+0x1c>
    }
    for (uint16_t iii = 0; iii < strip_size; iii++)
 8001d44:	2300      	movs	r3, #0
 8001d46:	82fb      	strh	r3, [r7, #22]
 8001d48:	e046      	b.n	8001dd8 <ws2812b_fill_pwm_buffer_strip_one+0xc4>
    {
        color = (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->green) << 16) | \
 8001d4a:	4b40      	ldr	r3, [pc, #256]	; (8001e4c <ws2812b_fill_pwm_buffer_strip_one+0x138>)
 8001d4c:	6819      	ldr	r1, [r3, #0]
 8001d4e:	8afa      	ldrh	r2, [r7, #22]
 8001d50:	4613      	mov	r3, r2
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	4413      	add	r3, r2
 8001d56:	440b      	add	r3, r1
 8001d58:	785b      	ldrb	r3, [r3, #1]
 8001d5a:	0419      	lsls	r1, r3, #16
                                (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->red) << 8) | \
 8001d5c:	4b3b      	ldr	r3, [pc, #236]	; (8001e4c <ws2812b_fill_pwm_buffer_strip_one+0x138>)
 8001d5e:	6818      	ldr	r0, [r3, #0]
 8001d60:	8afa      	ldrh	r2, [r7, #22]
 8001d62:	4613      	mov	r3, r2
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	4413      	add	r3, r2
 8001d68:	4403      	add	r3, r0
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	021b      	lsls	r3, r3, #8
        color = (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->green) << 16) | \
 8001d6e:	4319      	orrs	r1, r3
                                (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->blue));
 8001d70:	4b36      	ldr	r3, [pc, #216]	; (8001e4c <ws2812b_fill_pwm_buffer_strip_one+0x138>)
 8001d72:	6818      	ldr	r0, [r3, #0]
 8001d74:	8afa      	ldrh	r2, [r7, #22]
 8001d76:	4613      	mov	r3, r2
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	4413      	add	r3, r2
 8001d7c:	4403      	add	r3, r0
 8001d7e:	789b      	ldrb	r3, [r3, #2]
                                (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->red) << 8) | \
 8001d80:	430b      	orrs	r3, r1
        color = (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->green) << 16) | \
 8001d82:	60fb      	str	r3, [r7, #12]
        for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 8001d84:	2300      	movs	r3, #0
 8001d86:	757b      	strb	r3, [r7, #21]
 8001d88:	e020      	b.n	8001dcc <ws2812b_fill_pwm_buffer_strip_one+0xb8>
        {
            gp_pwm_data_fill[strip_pwm_offset + (iii * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + yyy] = (color & (1 << (23 - yyy))) ? (uint16_t)(WS2812B_BIT_SET_CYCLES + 1) : (uint16_t)WS2812B_BIT_RESET_CYCLES;
 8001d8a:	7d7b      	ldrb	r3, [r7, #21]
 8001d8c:	f1c3 0317 	rsb	r3, r3, #23
 8001d90:	2201      	movs	r2, #1
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	461a      	mov	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <ws2812b_fill_pwm_buffer_strip_one+0x90>
 8001da0:	2028      	movs	r0, #40	; 0x28
 8001da2:	e000      	b.n	8001da6 <ws2812b_fill_pwm_buffer_strip_one+0x92>
 8001da4:	2014      	movs	r0, #20
 8001da6:	4b2a      	ldr	r3, [pc, #168]	; (8001e50 <ws2812b_fill_pwm_buffer_strip_one+0x13c>)
 8001da8:	6819      	ldr	r1, [r3, #0]
 8001daa:	8afa      	ldrh	r2, [r7, #22]
 8001dac:	4613      	mov	r3, r2
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	4413      	add	r3, r2
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	461a      	mov	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	441a      	add	r2, r3
 8001dba:	7d7b      	ldrb	r3, [r7, #21]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	440b      	add	r3, r1
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	801a      	strh	r2, [r3, #0]
        for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 8001dc6:	7d7b      	ldrb	r3, [r7, #21]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	757b      	strb	r3, [r7, #21]
 8001dcc:	7d7b      	ldrb	r3, [r7, #21]
 8001dce:	2b17      	cmp	r3, #23
 8001dd0:	d9db      	bls.n	8001d8a <ws2812b_fill_pwm_buffer_strip_one+0x76>
    for (uint16_t iii = 0; iii < strip_size; iii++)
 8001dd2:	8afb      	ldrh	r3, [r7, #22]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	82fb      	strh	r3, [r7, #22]
 8001dd8:	8afb      	ldrh	r3, [r7, #22]
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d8b4      	bhi.n	8001d4a <ws2812b_fill_pwm_buffer_strip_one+0x36>
        }
    }
    for (uint16_t iii = 0; iii < WS2812B_RESET_TIME_CYCLES; iii++)
 8001de0:	2300      	movs	r3, #0
 8001de2:	827b      	strh	r3, [r7, #18]
 8001de4:	e012      	b.n	8001e0c <ws2812b_fill_pwm_buffer_strip_one+0xf8>
    {
        gp_pwm_data_fill[(strip_pwm_offset + (strip_size * BITS_PER_BYTE * sizeof(ws2812b_led_t))) + iii] = 0;
 8001de6:	4b1a      	ldr	r3, [pc, #104]	; (8001e50 <ws2812b_fill_pwm_buffer_strip_one+0x13c>)
 8001de8:	6819      	ldr	r1, [r3, #0]
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	4613      	mov	r3, r2
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	4413      	add	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	461a      	mov	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	441a      	add	r2, r3
 8001dfa:	8a7b      	ldrh	r3, [r7, #18]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	440b      	add	r3, r1
 8001e02:	2200      	movs	r2, #0
 8001e04:	801a      	strh	r2, [r3, #0]
    for (uint16_t iii = 0; iii < WS2812B_RESET_TIME_CYCLES; iii++)
 8001e06:	8a7b      	ldrh	r3, [r7, #18]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	827b      	strh	r3, [r7, #18]
 8001e0c:	8a7b      	ldrh	r3, [r7, #18]
 8001e0e:	ee07 3a90 	vmov	s15, r3
 8001e12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e16:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001e54 <ws2812b_fill_pwm_buffer_strip_one+0x140>
 8001e1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e22:	d4e0      	bmi.n	8001de6 <ws2812b_fill_pwm_buffer_strip_one+0xd2>
    }
    gb_dma_cmplt_strip_1 = false;
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <ws2812b_fill_pwm_buffer_strip_one+0x144>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_1, (uint32_t *)(gp_pwm_data_fill + strip_pwm_offset), (STRIP_1_LENGTH * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + WS2812B_RESET_TIME_CYCLES);
 8001e2a:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <ws2812b_fill_pwm_buffer_strip_one+0x13c>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	441a      	add	r2, r3
 8001e34:	f244 7358 	movw	r3, #18264	; 0x4758
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4808      	ldr	r0, [pc, #32]	; (8001e5c <ws2812b_fill_pwm_buffer_strip_one+0x148>)
 8001e3c:	f005 ff38 	bl	8007cb0 <HAL_TIM_PWM_Start_DMA>
}
 8001e40:	bf00      	nop
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	2000006a 	.word	0x2000006a
 8001e4c:	200009e4 	.word	0x200009e4
 8001e50:	200009e0 	.word	0x200009e0
 8001e54:	453b8000 	.word	0x453b8000
 8001e58:	20000069 	.word	0x20000069
 8001e5c:	20002528 	.word	0x20002528

08001e60 <ws2812b_init>:


uint32_t g_size = 0;

void ws2812b_init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0

#if defined(STRIP_1_LENGTH)
	gp_ws28128b_strip[STRIP_NUM_1] = g_strip_1;
 8001e66:	4b31      	ldr	r3, [pc, #196]	; (8001f2c <ws2812b_init+0xcc>)
 8001e68:	4a31      	ldr	r2, [pc, #196]	; (8001f30 <ws2812b_init+0xd0>)
 8001e6a:	601a      	str	r2, [r3, #0]
#endif
#if defined(STRIP_4_LENGTH)
	gp_ws28128b_strip[STRIP_NUM_4] = g_strip_4;
#endif

	uint8_t num_strips = NUM_STRIPS;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	70fb      	strb	r3, [r7, #3]
	for (int iii = 0; iii < NUM_STRIPS; iii++) g_all_strip_mask |= 1 << iii;
 8001e70:	2300      	movs	r3, #0
 8001e72:	607b      	str	r3, [r7, #4]
 8001e74:	e00f      	b.n	8001e96 <ws2812b_init+0x36>
 8001e76:	2201      	movs	r2, #1
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	b21a      	sxth	r2, r3
 8001e80:	4b2c      	ldr	r3, [pc, #176]	; (8001f34 <ws2812b_init+0xd4>)
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	b21b      	sxth	r3, r3
 8001e86:	4313      	orrs	r3, r2
 8001e88:	b21b      	sxth	r3, r3
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	4b29      	ldr	r3, [pc, #164]	; (8001f34 <ws2812b_init+0xd4>)
 8001e8e:	801a      	strh	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3301      	adds	r3, #1
 8001e94:	607b      	str	r3, [r7, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	ddec      	ble.n	8001e76 <ws2812b_init+0x16>
	switch (num_strips)
 8001e9c:	78fb      	ldrb	r3, [r7, #3]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d110      	bne.n	8001ec4 <ws2812b_init+0x64>
		case 2:
			g_num_leds += STRIP_2_LENGTH;
			if (STRIP_2_LENGTH > g_max_strip_length) g_max_strip_length = STRIP_2_LENGTH;
#endif
		case 1:
			g_num_leds += STRIP_1_LENGTH;
 8001ea2:	4b25      	ldr	r3, [pc, #148]	; (8001f38 <ws2812b_init+0xd8>)
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	4b22      	ldr	r3, [pc, #136]	; (8001f38 <ws2812b_init+0xd8>)
 8001eae:	801a      	strh	r2, [r3, #0]
			if (STRIP_1_LENGTH > g_max_strip_length) g_max_strip_length = STRIP_1_LENGTH;
 8001eb0:	4b22      	ldr	r3, [pc, #136]	; (8001f3c <ws2812b_init+0xdc>)
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	f5b3 7f1f 	cmp.w	r3, #636	; 0x27c
 8001eb8:	d203      	bcs.n	8001ec2 <ws2812b_init+0x62>
 8001eba:	4b20      	ldr	r3, [pc, #128]	; (8001f3c <ws2812b_init+0xdc>)
 8001ebc:	f44f 721f 	mov.w	r2, #636	; 0x27c
 8001ec0:	801a      	strh	r2, [r3, #0]
		break;
 8001ec2:	bf00      	nop
	}
    gp_pwm_data_fill = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
 8001ec4:	4b1c      	ldr	r3, [pc, #112]	; (8001f38 <ws2812b_init+0xd8>)
 8001ec6:	881b      	ldrh	r3, [r3, #0]
 8001ec8:	461a      	mov	r2, r3
 8001eca:	4613      	mov	r3, r2
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	4413      	add	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	ee07 3a90 	vmov	s15, r3
 8001ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eda:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001f40 <ws2812b_init+0xe0>
 8001ede:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ee2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ee6:	ee17 0a90 	vmov	r0, s15
 8001eea:	f009 f881 	bl	800aff0 <malloc>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4b14      	ldr	r3, [pc, #80]	; (8001f44 <ws2812b_init+0xe4>)
 8001ef4:	601a      	str	r2, [r3, #0]
    //gp_pwm_data_ping = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
    //gp_pwm_data_pong = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
    g_size = (sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES);
 8001ef6:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <ws2812b_init+0xd8>)
 8001ef8:	881b      	ldrh	r3, [r3, #0]
 8001efa:	461a      	mov	r2, r3
 8001efc:	4613      	mov	r3, r2
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	4413      	add	r3, r2
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	ee07 3a90 	vmov	s15, r3
 8001f08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f0c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001f40 <ws2812b_init+0xe0>
 8001f10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f18:	ee17 2a90 	vmov	r2, s15
 8001f1c:	4b0a      	ldr	r3, [pc, #40]	; (8001f48 <ws2812b_init+0xe8>)
 8001f1e:	601a      	str	r2, [r3, #0]
    //gp_pwm_data_fill = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_max_strip_length) + WS2812B_RESET_TIME_CYCLES);
	current_monitor_init();
 8001f20:	f7fe ff72 	bl	8000e08 <current_monitor_init>
}
 8001f24:	bf00      	nop
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	200009e4 	.word	0x200009e4
 8001f30:	20000264 	.word	0x20000264
 8001f34:	200009da 	.word	0x200009da
 8001f38:	200009d8 	.word	0x200009d8
 8001f3c:	200009dc 	.word	0x200009dc
 8001f40:	453b8000 	.word	0x453b8000
 8001f44:	200009e0 	.word	0x200009e0
 8001f48:	20000a4c 	.word	0x20000a4c

08001f4c <ws2812b_show_strip_one>:


void ws2812b_show_strip_one(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
    ws2812b_fill_pwm_buffer_strip_one();
 8001f50:	f7ff fee0 	bl	8001d14 <ws2812b_fill_pwm_buffer_strip_one>
}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <task_button_press_interrupt_occurred>:
bool        g_animate_led_pause_flag = false;
bool        g_animate_led_interrupt = false;
bool        g_interrupt_flag[NUM_ISR] = {false};

bool task_button_press_interrupt_occurred(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
    return g_animate_led_interrupt;
 8001f5c:	4b03      	ldr	r3, [pc, #12]	; (8001f6c <task_button_press_interrupt_occurred+0x14>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	20000a73 	.word	0x20000a73

08001f70 <task_led_ctrl_button_to_isr>:


isr_e task_led_ctrl_button_to_isr(const board_init_push_buttons_e button)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	71fb      	strb	r3, [r7, #7]
    isr_e return_val;
    switch (button)
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	2b03      	cmp	r3, #3
 8001f7e:	d817      	bhi.n	8001fb0 <task_led_ctrl_button_to_isr+0x40>
 8001f80:	a201      	add	r2, pc, #4	; (adr r2, 8001f88 <task_led_ctrl_button_to_isr+0x18>)
 8001f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f86:	bf00      	nop
 8001f88:	08001f99 	.word	0x08001f99
 8001f8c:	08001f9f 	.word	0x08001f9f
 8001f90:	08001fa5 	.word	0x08001fa5
 8001f94:	08001fab 	.word	0x08001fab
    {
        case PUSH_BUTTON_A:
            return_val = ISR_SPEED;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	73fb      	strb	r3, [r7, #15]
        break;
 8001f9c:	e009      	b.n	8001fb2 <task_led_ctrl_button_to_isr+0x42>
        case PUSH_BUTTON_B:
            return_val = ISR_STATE;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	73fb      	strb	r3, [r7, #15]
        break;
 8001fa2:	e006      	b.n	8001fb2 <task_led_ctrl_button_to_isr+0x42>
        case PUSH_BUTTON_C:
            return_val = ISR_COLOR;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	73fb      	strb	r3, [r7, #15]
        break;
 8001fa8:	e003      	b.n	8001fb2 <task_led_ctrl_button_to_isr+0x42>
        case PUSH_BUTTON_D:
            return_val = ISR_PAUSE;
 8001faa:	2303      	movs	r3, #3
 8001fac:	73fb      	strb	r3, [r7, #15]
        break;
 8001fae:	e000      	b.n	8001fb2 <task_led_ctrl_button_to_isr+0x42>
        default: // do nothing!
        break;
 8001fb0:	bf00      	nop
    }
    return return_val;
 8001fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <task_button_press_ctrl_set_interrupt_flag>:


void task_button_press_ctrl_set_interrupt_flag(const isr_e src)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	71fb      	strb	r3, [r7, #7]
    g_animate_led_interrupt = true;
 8001fca:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <task_button_press_ctrl_set_interrupt_flag+0x24>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	701a      	strb	r2, [r3, #0]
    g_interrupt_flag[src] = true;
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	4a05      	ldr	r2, [pc, #20]	; (8001fe8 <task_button_press_ctrl_set_interrupt_flag+0x28>)
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	54d1      	strb	r1, [r2, r3]
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	20000a73 	.word	0x20000a73
 8001fe8:	20000a74 	.word	0x20000a74

08001fec <task_button_press_ctrl_interrupt_flag>:


bool task_button_press_ctrl_interrupt_flag(const isr_e src)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	71fb      	strb	r3, [r7, #7]
    bool return_val = g_interrupt_flag[src];
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	4a08      	ldr	r2, [pc, #32]	; (800201c <task_button_press_ctrl_interrupt_flag+0x30>)
 8001ffa:	5cd3      	ldrb	r3, [r2, r3]
 8001ffc:	73fb      	strb	r3, [r7, #15]
    if (return_val) g_interrupt_flag[src] = false; // auto clear
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d003      	beq.n	800200c <task_button_press_ctrl_interrupt_flag+0x20>
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	4a05      	ldr	r2, [pc, #20]	; (800201c <task_button_press_ctrl_interrupt_flag+0x30>)
 8002008:	2100      	movs	r1, #0
 800200a:	54d1      	strb	r1, [r2, r3]
    return return_val;
 800200c:	7bfb      	ldrb	r3, [r7, #15]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	20000a74 	.word	0x20000a74

08002020 <task_button_press_check_interrupts>:


bool task_button_press_check_interrupts(uint8_t *red, uint8_t *green, uint8_t *blue)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
    bool return_val = false;
 800202c:	2300      	movs	r3, #0
 800202e:	75fb      	strb	r3, [r7, #23]
    if (task_button_press_major_state_change())
 8002030:	f000 f85a 	bl	80020e8 <task_button_press_major_state_change>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d008      	beq.n	800204c <task_button_press_check_interrupts+0x2c>
    {
        task_button_press_interrupt_flag_clear();
 800203a:	f000 f849 	bl	80020d0 <task_button_press_interrupt_flag_clear>
        return_val = true;
 800203e:	2301      	movs	r3, #1
 8002040:	75fb      	strb	r3, [r7, #23]
        animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLACK);
 8002042:	2100      	movs	r1, #0
 8002044:	2001      	movs	r0, #1
 8002046:	f7fe ffe9 	bl	800101c <animate_led_solid_custom_color>
 800204a:	e039      	b.n	80020c0 <task_button_press_check_interrupts+0xa0>
    }
    else if (task_button_press_ctrl_interrupt_flag(ISR_STATE))
 800204c:	2001      	movs	r0, #1
 800204e:	f7ff ffcd 	bl	8001fec <task_button_press_ctrl_interrupt_flag>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d008      	beq.n	800206a <task_button_press_check_interrupts+0x4a>
    {
        task_button_press_interrupt_flag_clear();
 8002058:	f000 f83a 	bl	80020d0 <task_button_press_interrupt_flag_clear>
        return_val = true;
 800205c:	2301      	movs	r3, #1
 800205e:	75fb      	strb	r3, [r7, #23]
        animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLACK);
 8002060:	2100      	movs	r1, #0
 8002062:	2001      	movs	r0, #1
 8002064:	f7fe ffda 	bl	800101c <animate_led_solid_custom_color>
 8002068:	e02a      	b.n	80020c0 <task_button_press_check_interrupts+0xa0>
    }
    else if (task_button_press_ctrl_interrupt_flag(ISR_PAUSE))
 800206a:	2003      	movs	r0, #3
 800206c:	f7ff ffbe 	bl	8001fec <task_button_press_ctrl_interrupt_flag>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00a      	beq.n	800208c <task_button_press_check_interrupts+0x6c>
    {
        task_button_press_interrupt_flag_clear();
 8002076:	f000 f82b 	bl	80020d0 <task_button_press_interrupt_flag_clear>
        while (g_animate_led_pause_flag)
 800207a:	e002      	b.n	8002082 <task_button_press_check_interrupts+0x62>
        {
            osDelay(10);
 800207c:	200a      	movs	r0, #10
 800207e:	f000 fdb1 	bl	8002be4 <osDelay>
        while (g_animate_led_pause_flag)
 8002082:	4b12      	ldr	r3, [pc, #72]	; (80020cc <task_button_press_check_interrupts+0xac>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f8      	bne.n	800207c <task_button_press_check_interrupts+0x5c>
 800208a:	e019      	b.n	80020c0 <task_button_press_check_interrupts+0xa0>
        }
    }
    else if (task_button_press_ctrl_interrupt_flag(ISR_COLOR))
 800208c:	2002      	movs	r0, #2
 800208e:	f7ff ffad 	bl	8001fec <task_button_press_ctrl_interrupt_flag>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d013      	beq.n	80020c0 <task_button_press_check_interrupts+0xa0>
    {
        task_button_press_interrupt_flag_clear();
 8002098:	f000 f81a 	bl	80020d0 <task_button_press_interrupt_flag_clear>
        // interrupt modifies the current color... apply it to the animation!
        *red = task_led_ctrl_color_red_hex();
 800209c:	f000 fb28 	bl	80026f0 <task_led_ctrl_color_red_hex>
 80020a0:	4603      	mov	r3, r0
 80020a2:	461a      	mov	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	701a      	strb	r2, [r3, #0]
        *green = task_led_ctrl_color_green_hex();
 80020a8:	f000 fb4a 	bl	8002740 <task_led_ctrl_color_green_hex>
 80020ac:	4603      	mov	r3, r0
 80020ae:	461a      	mov	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	701a      	strb	r2, [r3, #0]
        *blue = task_led_ctrl_color_blue_hex();
 80020b4:	f000 fb6c 	bl	8002790 <task_led_ctrl_color_blue_hex>
 80020b8:	4603      	mov	r3, r0
 80020ba:	461a      	mov	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	701a      	strb	r2, [r3, #0]
    }
    return return_val;
 80020c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000a72 	.word	0x20000a72

080020d0 <task_button_press_interrupt_flag_clear>:


void task_button_press_interrupt_flag_clear(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
    g_animate_led_interrupt = false;
 80020d4:	4b03      	ldr	r3, [pc, #12]	; (80020e4 <task_button_press_interrupt_flag_clear+0x14>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	701a      	strb	r2, [r3, #0]
}
 80020da:	bf00      	nop
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	20000a73 	.word	0x20000a73

080020e8 <task_button_press_major_state_change>:
uint32_t c_ok_count = 0;
uint32_t d_ok_count = 0;


bool task_button_press_major_state_change(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
    return task_button_press_major_change;
 80020ec:	4b03      	ldr	r3, [pc, #12]	; (80020fc <task_button_press_major_state_change+0x14>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	20000a71 	.word	0x20000a71

08002100 <task_button_press>:
    task_button_press_major_change = false;
}


void task_button_press(void *argument)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
    uint32_t button_pressed_bit = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	60bb      	str	r3, [r7, #8]
    uint32_t timestamp_diff = 0;
 800210c:	2300      	movs	r3, #0
 800210e:	60fb      	str	r3, [r7, #12]
    color_hex_code_e color = COLOR_HEX_BLACK;
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]
    IRQn_Type irq_type = 0;
 8002114:	2300      	movs	r3, #0
 8002116:	74fb      	strb	r3, [r7, #19]
    while (1)
    {
        xTaskNotifyWait(0, button_pressed_bit, &button_pressed_bit, portMAX_DELAY);
 8002118:	68b9      	ldr	r1, [r7, #8]
 800211a:	f107 0208 	add.w	r2, r7, #8
 800211e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002122:	2000      	movs	r0, #0
 8002124:	f002 fa0a 	bl	800453c <xTaskNotifyWait>
#if !defined(BOARD_SPUDGLO_V5)
        HAL_GPIO_WritePin(PIN_PORT_B, PIN_INT_LVL_EN, GPIO_PIN_RESET);
        osDelay(700);
        HAL_GPIO_WritePin(PIN_PORT_B, PIN_INT_LVL_EN, GPIO_PIN_SET);
#endif
        timestamp_diff = g_button_press_timestamp[(board_init_push_buttons_e) button_pressed_bit][TIMESTAMP_CURRENT] - \
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	b2db      	uxtb	r3, r3
 800212c:	461a      	mov	r2, r3
 800212e:	4b84      	ldr	r3, [pc, #528]	; (8002340 <task_button_press+0x240>)
 8002130:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
                        g_button_press_timestamp[(board_init_push_buttons_e)button_pressed_bit][TIMESTAMP_PREVIOUS];
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	b2db      	uxtb	r3, r3
 8002138:	4981      	ldr	r1, [pc, #516]	; (8002340 <task_button_press+0x240>)
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	440b      	add	r3, r1
 800213e:	685b      	ldr	r3, [r3, #4]
        timestamp_diff = g_button_press_timestamp[(board_init_push_buttons_e) button_pressed_bit][TIMESTAMP_CURRENT] - \
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	60fb      	str	r3, [r7, #12]
        if (timestamp_diff < SWITCH_FAST_PRESS_TIME_MILLISECONDS) fast_press_count++;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800214a:	d206      	bcs.n	800215a <task_button_press+0x5a>
 800214c:	4b7d      	ldr	r3, [pc, #500]	; (8002344 <task_button_press+0x244>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	3301      	adds	r3, #1
 8002152:	b2da      	uxtb	r2, r3
 8002154:	4b7b      	ldr	r3, [pc, #492]	; (8002344 <task_button_press+0x244>)
 8002156:	701a      	strb	r2, [r3, #0]
 8002158:	e002      	b.n	8002160 <task_button_press+0x60>
        else fast_press_count = 0;
 800215a:	4b7a      	ldr	r3, [pc, #488]	; (8002344 <task_button_press+0x244>)
 800215c:	2200      	movs	r2, #0
 800215e:	701a      	strb	r2, [r3, #0]
        task_button_press_ctrl_set_interrupt_flag(task_led_ctrl_button_to_isr((board_init_push_buttons_e) button_pressed_bit));
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	b2db      	uxtb	r3, r3
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff ff03 	bl	8001f70 <task_led_ctrl_button_to_isr>
 800216a:	4603      	mov	r3, r0
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff ff27 	bl	8001fc0 <task_button_press_ctrl_set_interrupt_flag>
        if (fast_press_count >= (SWITCH_HISTORY_DEPTH-1))
 8002172:	4b74      	ldr	r3, [pc, #464]	; (8002344 <task_button_press+0x244>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b03      	cmp	r3, #3
 8002178:	d975      	bls.n	8002266 <task_button_press+0x166>
        {
            task_button_press_major_change = true;
 800217a:	4b73      	ldr	r3, [pc, #460]	; (8002348 <task_button_press+0x248>)
 800217c:	2201      	movs	r2, #1
 800217e:	701a      	strb	r2, [r3, #0]
            fast_press_count = 0;
 8002180:	4b70      	ldr	r3, [pc, #448]	; (8002344 <task_button_press+0x244>)
 8002182:	2200      	movs	r2, #0
 8002184:	701a      	strb	r2, [r3, #0]
            switch ((board_init_push_buttons_e) button_pressed_bit)
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b03      	cmp	r3, #3
 800218c:	d841      	bhi.n	8002212 <task_button_press+0x112>
 800218e:	a201      	add	r2, pc, #4	; (adr r2, 8002194 <task_button_press+0x94>)
 8002190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002194:	080021a5 	.word	0x080021a5
 8002198:	080021bf 	.word	0x080021bf
 800219c:	080021db 	.word	0x080021db
 80021a0:	080021f5 	.word	0x080021f5
            {
                case PUSH_BUTTON_A:
                    a_ok_count++;
 80021a4:	4b69      	ldr	r3, [pc, #420]	; (800234c <task_button_press+0x24c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	3301      	adds	r3, #1
 80021aa:	4a68      	ldr	r2, [pc, #416]	; (800234c <task_button_press+0x24c>)
 80021ac:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_GREEN;
 80021ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021b2:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_A_IRQ;
 80021b4:	2308      	movs	r3, #8
 80021b6:	74fb      	strb	r3, [r7, #19]
                    task_led_ctrl_speed_reset();
 80021b8:	f000 fb8a 	bl	80028d0 <task_led_ctrl_speed_reset>

                break;
 80021bc:	e02a      	b.n	8002214 <task_button_press+0x114>
                case PUSH_BUTTON_B:
                    b_ok_count++;
 80021be:	4b64      	ldr	r3, [pc, #400]	; (8002350 <task_button_press+0x250>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	3301      	adds	r3, #1
 80021c4:	4a62      	ldr	r2, [pc, #392]	; (8002350 <task_button_press+0x250>)
 80021c6:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_BLUE;
 80021c8:	23ff      	movs	r3, #255	; 0xff
 80021ca:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_B_IRQ;
 80021cc:	2328      	movs	r3, #40	; 0x28
 80021ce:	74fb      	strb	r3, [r7, #19]
                    task_led_ctrl_animate_iteration_reset();
 80021d0:	f000 fb8a 	bl	80028e8 <task_led_ctrl_animate_iteration_reset>
                    task_led_ctrl_animate_state_demo(); // enter demo state
 80021d4:	f000 fbb2 	bl	800293c <task_led_ctrl_animate_state_demo>
                break;
 80021d8:	e01c      	b.n	8002214 <task_button_press+0x114>
                case PUSH_BUTTON_C:
                    c_ok_count++;
 80021da:	4b5e      	ldr	r3, [pc, #376]	; (8002354 <task_button_press+0x254>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	3301      	adds	r3, #1
 80021e0:	4a5c      	ldr	r2, [pc, #368]	; (8002354 <task_button_press+0x254>)
 80021e2:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_RED;
 80021e4:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80021e8:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_C_IRQ;
 80021ea:	2317      	movs	r3, #23
 80021ec:	74fb      	strb	r3, [r7, #19]
                    // don't change iteration count.  Simply go to color demo mode.
                    task_led_ctrl_color_state_demo();
 80021ee:	f000 fa31 	bl	8002654 <task_led_ctrl_color_state_demo>
                break;
 80021f2:	e00f      	b.n	8002214 <task_button_press+0x114>
                case PUSH_BUTTON_D:
                    task_led_ctrl_brightness_adjust();
 80021f4:	f000 f9c8 	bl	8002588 <task_led_ctrl_brightness_adjust>
                    task_led_ctrl_clear_pause();
 80021f8:	f000 f9f6 	bl	80025e8 <task_led_ctrl_clear_pause>
                    d_ok_count++;
 80021fc:	4b56      	ldr	r3, [pc, #344]	; (8002358 <task_button_press+0x258>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	3301      	adds	r3, #1
 8002202:	4a55      	ldr	r2, [pc, #340]	; (8002358 <task_button_press+0x258>)
 8002204:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_WHITE;
 8002206:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800220a:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_D_IRQ;
 800220c:	2306      	movs	r3, #6
 800220e:	74fb      	strb	r3, [r7, #19]
                break;
 8002210:	e000      	b.n	8002214 <task_button_press+0x114>
                default:
                break;
 8002212:	bf00      	nop
            }
            for (uint8_t iii = 0; iii < 3; iii++)
 8002214:	2300      	movs	r3, #0
 8002216:	74bb      	strb	r3, [r7, #18]
 8002218:	e012      	b.n	8002240 <task_button_press+0x140>
            {
                animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, color);
 800221a:	6979      	ldr	r1, [r7, #20]
 800221c:	2001      	movs	r0, #1
 800221e:	f7fe fefd 	bl	800101c <animate_led_solid_custom_color>
                osDelay(500);
 8002222:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002226:	f000 fcdd 	bl	8002be4 <osDelay>
                animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLACK);
 800222a:	2100      	movs	r1, #0
 800222c:	2001      	movs	r0, #1
 800222e:	f7fe fef5 	bl	800101c <animate_led_solid_custom_color>
                osDelay(500);
 8002232:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002236:	f000 fcd5 	bl	8002be4 <osDelay>
            for (uint8_t iii = 0; iii < 3; iii++)
 800223a:	7cbb      	ldrb	r3, [r7, #18]
 800223c:	3301      	adds	r3, #1
 800223e:	74bb      	strb	r3, [r7, #18]
 8002240:	7cbb      	ldrb	r3, [r7, #18]
 8002242:	2b02      	cmp	r3, #2
 8002244:	d9e9      	bls.n	800221a <task_button_press+0x11a>
            }
            HAL_NVIC_SetPriority(irq_type, 24, 0);
 8002246:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800224a:	2200      	movs	r2, #0
 800224c:	2118      	movs	r1, #24
 800224e:	4618      	mov	r0, r3
 8002250:	f003 fc2b 	bl	8005aaa <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(irq_type);
 8002254:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002258:	4618      	mov	r0, r3
 800225a:	f003 fc42 	bl	8005ae2 <HAL_NVIC_EnableIRQ>
            task_button_press_major_change = false;
 800225e:	4b3a      	ldr	r3, [pc, #232]	; (8002348 <task_button_press+0x248>)
 8002260:	2200      	movs	r2, #0
 8002262:	701a      	strb	r2, [r3, #0]
 8002264:	e758      	b.n	8002118 <task_button_press+0x18>
        }
        else
        {
            // no state change here
            task_button_press_ctrl_set_interrupt_flag(task_led_ctrl_button_to_isr((board_init_push_buttons_e) button_pressed_bit));
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	b2db      	uxtb	r3, r3
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff fe80 	bl	8001f70 <task_led_ctrl_button_to_isr>
 8002270:	4603      	mov	r3, r0
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff fea4 	bl	8001fc0 <task_button_press_ctrl_set_interrupt_flag>
            switch ((board_init_push_buttons_e) button_pressed_bit)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b03      	cmp	r3, #3
 800227e:	d85d      	bhi.n	800233c <task_button_press+0x23c>
 8002280:	a201      	add	r2, pc, #4	; (adr r2, 8002288 <task_button_press+0x188>)
 8002282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002286:	bf00      	nop
 8002288:	08002299 	.word	0x08002299
 800228c:	080022b9 	.word	0x080022b9
 8002290:	080022ed 	.word	0x080022ed
 8002294:	0800231d 	.word	0x0800231d
            {
                case PUSH_BUTTON_A:
                    a_ok_count++;
 8002298:	4b2c      	ldr	r3, [pc, #176]	; (800234c <task_button_press+0x24c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	3301      	adds	r3, #1
 800229e:	4a2b      	ldr	r2, [pc, #172]	; (800234c <task_button_press+0x24c>)
 80022a0:	6013      	str	r3, [r2, #0]
                    task_led_ctrl_speed_adjust();
 80022a2:	f000 fafd 	bl	80028a0 <task_led_ctrl_speed_adjust>
                    HAL_NVIC_SetPriority(PUSH_BUTTON_A_IRQ, 24, 0);
 80022a6:	2200      	movs	r2, #0
 80022a8:	2118      	movs	r1, #24
 80022aa:	2008      	movs	r0, #8
 80022ac:	f003 fbfd 	bl	8005aaa <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_A_IRQ);
 80022b0:	2008      	movs	r0, #8
 80022b2:	f003 fc16 	bl	8005ae2 <HAL_NVIC_EnableIRQ>
                break;
 80022b6:	e042      	b.n	800233e <task_button_press+0x23e>
                case PUSH_BUTTON_B:
                    b_ok_count++;
 80022b8:	4b25      	ldr	r3, [pc, #148]	; (8002350 <task_button_press+0x250>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	3301      	adds	r3, #1
 80022be:	4a24      	ldr	r2, [pc, #144]	; (8002350 <task_button_press+0x250>)
 80022c0:	6013      	str	r3, [r2, #0]
                    if (MASTER_LED_STATE_DEMO == task_led_ctrl_animate_state())
 80022c2:	f000 fb63 	bl	800298c <task_led_ctrl_animate_state>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d102      	bne.n	80022d2 <task_button_press+0x1d2>
                    {
                        task_led_ctrl_animate_state_fixed(); // animation count is auto cleared here.
 80022cc:	f000 fb48 	bl	8002960 <task_led_ctrl_animate_state_fixed>
 80022d0:	e003      	b.n	80022da <task_button_press+0x1da>
                    }
                    else
                    {
                        task_led_ctrl_animate_iteration_reset();
 80022d2:	f000 fb09 	bl	80028e8 <task_led_ctrl_animate_iteration_reset>
                        task_led_ctrl_animate_adjust_state();
 80022d6:	f000 fb13 	bl	8002900 <task_led_ctrl_animate_adjust_state>
                    }
                    HAL_NVIC_SetPriority(PUSH_BUTTON_B_IRQ, 24, 0);
 80022da:	2200      	movs	r2, #0
 80022dc:	2118      	movs	r1, #24
 80022de:	2028      	movs	r0, #40	; 0x28
 80022e0:	f003 fbe3 	bl	8005aaa <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_B_IRQ);
 80022e4:	2028      	movs	r0, #40	; 0x28
 80022e6:	f003 fbfc 	bl	8005ae2 <HAL_NVIC_EnableIRQ>
                break;
 80022ea:	e028      	b.n	800233e <task_button_press+0x23e>
                case PUSH_BUTTON_C:
                    c_ok_count++;
 80022ec:	4b19      	ldr	r3, [pc, #100]	; (8002354 <task_button_press+0x254>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	3301      	adds	r3, #1
 80022f2:	4a18      	ldr	r2, [pc, #96]	; (8002354 <task_button_press+0x254>)
 80022f4:	6013      	str	r3, [r2, #0]
                    if (MASTER_COLOR_STATE_DEMO == task_led_ctrl_color_state())
 80022f6:	f000 f9a1 	bl	800263c <task_led_ctrl_color_state>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d102      	bne.n	8002306 <task_button_press+0x206>
                    {
                        task_led_ctrl_color_state_fixed();
 8002300:	f000 f9b4 	bl	800266c <task_led_ctrl_color_state_fixed>
 8002304:	e001      	b.n	800230a <task_button_press+0x20a>
                    }
                    else
                    {
                        task_led_ctrl_color_adjust();
 8002306:	f000 f9c3 	bl	8002690 <task_led_ctrl_color_adjust>
                    }
                    HAL_NVIC_SetPriority(PUSH_BUTTON_C_IRQ, 24, 0);
 800230a:	2200      	movs	r2, #0
 800230c:	2118      	movs	r1, #24
 800230e:	2017      	movs	r0, #23
 8002310:	f003 fbcb 	bl	8005aaa <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_C_IRQ);
 8002314:	2017      	movs	r0, #23
 8002316:	f003 fbe4 	bl	8005ae2 <HAL_NVIC_EnableIRQ>

                break;
 800231a:	e010      	b.n	800233e <task_button_press+0x23e>
                case PUSH_BUTTON_D:
                    d_ok_count++;
 800231c:	4b0e      	ldr	r3, [pc, #56]	; (8002358 <task_button_press+0x258>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	3301      	adds	r3, #1
 8002322:	4a0d      	ldr	r2, [pc, #52]	; (8002358 <task_button_press+0x258>)
 8002324:	6013      	str	r3, [r2, #0]
                    task_led_ctrl_pause();
 8002326:	f000 f96b 	bl	8002600 <task_led_ctrl_pause>
                    HAL_NVIC_SetPriority(PUSH_BUTTON_D_IRQ, 24, 0);
 800232a:	2200      	movs	r2, #0
 800232c:	2118      	movs	r1, #24
 800232e:	2006      	movs	r0, #6
 8002330:	f003 fbbb 	bl	8005aaa <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_D_IRQ);
 8002334:	2006      	movs	r0, #6
 8002336:	f003 fbd4 	bl	8005ae2 <HAL_NVIC_EnableIRQ>
                break;
 800233a:	e000      	b.n	800233e <task_button_press+0x23e>
                default:
                break;
 800233c:	bf00      	nop
        xTaskNotifyWait(0, button_pressed_bit, &button_pressed_bit, portMAX_DELAY);
 800233e:	e6eb      	b.n	8002118 <task_button_press+0x18>
 8002340:	20000a50 	.word	0x20000a50
 8002344:	20000a70 	.word	0x20000a70
 8002348:	20000a71 	.word	0x20000a71
 800234c:	20000a78 	.word	0x20000a78
 8002350:	20000a7c 	.word	0x20000a7c
 8002354:	20000a80 	.word	0x20000a80
 8002358:	20000a84 	.word	0x20000a84

0800235c <task_led_ctrl_adjust_parameters>:
extern bool             task_button_press_major_change;


static void task_led_ctrl_adjust_parameters(const task_led_ctrl_loop_iterations_e max_iterations,
                                            const task_led_ctrl_delay_ms_e animation_delay_ms)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	460a      	mov	r2, r1
 8002366:	71fb      	strb	r3, [r7, #7]
 8002368:	4613      	mov	r3, r2
 800236a:	80bb      	strh	r3, [r7, #4]
    g_animation_iterations++;
 800236c:	4b18      	ldr	r3, [pc, #96]	; (80023d0 <task_led_ctrl_adjust_parameters+0x74>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	3301      	adds	r3, #1
 8002372:	b2da      	uxtb	r2, r3
 8002374:	4b16      	ldr	r3, [pc, #88]	; (80023d0 <task_led_ctrl_adjust_parameters+0x74>)
 8002376:	701a      	strb	r2, [r3, #0]
    if (MASTER_LED_STATE_DEMO == g_master_led_state)
 8002378:	4b16      	ldr	r3, [pc, #88]	; (80023d4 <task_led_ctrl_adjust_parameters+0x78>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d11b      	bne.n	80023b8 <task_led_ctrl_adjust_parameters+0x5c>
    {
        if (TASK_LED_CTRL_DELAY_MS_0 != animation_delay_ms) task_led_ctrl_delay(animation_delay_ms);
 8002380:	88bb      	ldrh	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <task_led_ctrl_adjust_parameters+0x32>
 8002386:	88bb      	ldrh	r3, [r7, #4]
 8002388:	4618      	mov	r0, r3
 800238a:	f000 f8e7 	bl	800255c <task_led_ctrl_delay>
        if (max_iterations == g_animation_iterations)
 800238e:	4b10      	ldr	r3, [pc, #64]	; (80023d0 <task_led_ctrl_adjust_parameters+0x74>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	79fa      	ldrb	r2, [r7, #7]
 8002394:	429a      	cmp	r2, r3
 8002396:	d10f      	bne.n	80023b8 <task_led_ctrl_adjust_parameters+0x5c>
        {
            g_led_state = (led_state_e) (g_led_state + 1);
 8002398:	4b0f      	ldr	r3, [pc, #60]	; (80023d8 <task_led_ctrl_adjust_parameters+0x7c>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	3301      	adds	r3, #1
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	4b0d      	ldr	r3, [pc, #52]	; (80023d8 <task_led_ctrl_adjust_parameters+0x7c>)
 80023a2:	701a      	strb	r2, [r3, #0]
            if (NUM_LED_STATES == g_led_state) g_led_state = LED_STATE_FIRST;
 80023a4:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <task_led_ctrl_adjust_parameters+0x7c>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b0a      	cmp	r3, #10
 80023aa:	d102      	bne.n	80023b2 <task_led_ctrl_adjust_parameters+0x56>
 80023ac:	4b0a      	ldr	r3, [pc, #40]	; (80023d8 <task_led_ctrl_adjust_parameters+0x7c>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	701a      	strb	r2, [r3, #0]
            g_animation_iterations = 0;
 80023b2:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <task_led_ctrl_adjust_parameters+0x74>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	701a      	strb	r2, [r3, #0]
        }
    }
    if (MASTER_COLOR_STATE_DEMO == task_led_ctrl_color_state()) task_led_ctrl_color_random();
 80023b8:	f000 f940 	bl	800263c <task_led_ctrl_color_state>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <task_led_ctrl_adjust_parameters+0x6a>
 80023c2:	f000 fa0b 	bl	80027dc <task_led_ctrl_color_random>
}
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20000a8d 	.word	0x20000a8d
 80023d4:	20000a88 	.word	0x20000a88
 80023d8:	20000a89 	.word	0x20000a89

080023dc <task_led_ctrl_strip_one>:


void task_led_ctrl_strip_one(void *argument)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af02      	add	r7, sp, #8
 80023e2:	6078      	str	r0, [r7, #4]
    osDelay(10);
 80023e4:	200a      	movs	r0, #10
 80023e6:	f000 fbfd 	bl	8002be4 <osDelay>
    while (1)
    {
        while(task_button_press_major_state_change()) osDelay(100);
 80023ea:	e002      	b.n	80023f2 <task_led_ctrl_strip_one+0x16>
 80023ec:	2064      	movs	r0, #100	; 0x64
 80023ee:	f000 fbf9 	bl	8002be4 <osDelay>
 80023f2:	f7ff fe79 	bl	80020e8 <task_button_press_major_state_change>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1f7      	bne.n	80023ec <task_led_ctrl_strip_one+0x10>

        if (flash_info_animation_enabled(g_led_state))
 80023fc:	4b55      	ldr	r3, [pc, #340]	; (8002554 <task_led_ctrl_strip_one+0x178>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f008 fc3b 	bl	800ac7c <flash_info_animation_enabled>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d0f2      	beq.n	80023f2 <task_led_ctrl_strip_one+0x16>
        {
            switch(g_led_state)
 800240c:	4b51      	ldr	r3, [pc, #324]	; (8002554 <task_led_ctrl_strip_one+0x178>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b09      	cmp	r3, #9
 8002412:	f200 809d 	bhi.w	8002550 <task_led_ctrl_strip_one+0x174>
 8002416:	a201      	add	r2, pc, #4	; (adr r2, 800241c <task_led_ctrl_strip_one+0x40>)
 8002418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800241c:	08002537 	.word	0x08002537
 8002420:	08002445 	.word	0x08002445
 8002424:	0800245b 	.word	0x0800245b
 8002428:	08002491 	.word	0x08002491
 800242c:	080024a9 	.word	0x080024a9
 8002430:	080024bd 	.word	0x080024bd
 8002434:	080024cf 	.word	0x080024cf
 8002438:	080024e9 	.word	0x080024e9
 800243c:	080024fb 	.word	0x080024fb
 8002440:	08002513 	.word	0x08002513
            {
                case LED_STATE_WHITE_COLOR:
                    animate_led_solid_custom_color((uint16_t)STRIP_BIT_1, COLOR_HEX_WHITE);
 8002444:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8002448:	2001      	movs	r0, #1
 800244a:	f7fe fde7 	bl	800101c <animate_led_solid_custom_color>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_1, TASK_LED_CTRL_DELAY_MS_5000);
 800244e:	f241 3188 	movw	r1, #5000	; 0x1388
 8002452:	2001      	movs	r0, #1
 8002454:	f7ff ff82 	bl	800235c <task_led_ctrl_adjust_parameters>
                break;
 8002458:	e07b      	b.n	8002552 <task_led_ctrl_strip_one+0x176>
                case LED_STATE_SOLID_COLOR:
                    animate_led_solid_custom_color((uint16_t)STRIP_BIT_1, task_led_ctrl_color_hex());
 800245a:	f000 f937 	bl	80026cc <task_led_ctrl_color_hex>
 800245e:	4603      	mov	r3, r0
 8002460:	4619      	mov	r1, r3
 8002462:	2001      	movs	r0, #1
 8002464:	f7fe fdda 	bl	800101c <animate_led_solid_custom_color>
                    if (MASTER_LED_STATE_FIXED == g_master_led_state)
 8002468:	4b3b      	ldr	r3, [pc, #236]	; (8002558 <task_led_ctrl_strip_one+0x17c>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d109      	bne.n	8002484 <task_led_ctrl_strip_one+0xa8>
                    {
                        task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_1000);
 8002470:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002474:	2005      	movs	r0, #5
 8002476:	f7ff ff71 	bl	800235c <task_led_ctrl_adjust_parameters>
                        task_led_ctrl_delay(1000);
 800247a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800247e:	f000 f86d 	bl	800255c <task_led_ctrl_delay>
                    }
                    else task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_5000);
                break;
 8002482:	e066      	b.n	8002552 <task_led_ctrl_strip_one+0x176>
                    else task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_5000);
 8002484:	f241 3188 	movw	r1, #5000	; 0x1388
 8002488:	2005      	movs	r0, #5
 800248a:	f7ff ff67 	bl	800235c <task_led_ctrl_adjust_parameters>
                break;
 800248e:	e060      	b.n	8002552 <task_led_ctrl_strip_one+0x176>
                case LED_STATE_SPARKLE_NO_FILL:
                    animate_led_turn_all_pixels_off();
 8002490:	f7fe fde6 	bl	8001060 <animate_led_turn_all_pixels_off>
                    animate_led_sparkle_only_random_color(STRIP_BIT_1, false, 100);//random(0, 50));
 8002494:	2264      	movs	r2, #100	; 0x64
 8002496:	2100      	movs	r1, #0
 8002498:	2001      	movs	r0, #1
 800249a:	f7ff f801 	bl	80014a0 <animate_led_sparkle_only_random_color>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_0);
 800249e:	2100      	movs	r1, #0
 80024a0:	2005      	movs	r0, #5
 80024a2:	f7ff ff5b 	bl	800235c <task_led_ctrl_adjust_parameters>
                break;
 80024a6:	e054      	b.n	8002552 <task_led_ctrl_strip_one+0x176>
                case LED_STATE_SPARKLE_FILL:
                    animate_led_sparkle_only_random_color(STRIP_BIT_1, true, 100);
 80024a8:	2264      	movs	r2, #100	; 0x64
 80024aa:	2101      	movs	r1, #1
 80024ac:	2001      	movs	r0, #1
 80024ae:	f7fe fff7 	bl	80014a0 <animate_led_sparkle_only_random_color>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 80024b2:	2100      	movs	r1, #0
 80024b4:	200a      	movs	r0, #10
 80024b6:	f7ff ff51 	bl	800235c <task_led_ctrl_adjust_parameters>
                break;
 80024ba:	e04a      	b.n	8002552 <task_led_ctrl_strip_one+0x176>
                case LED_STATE_RAINBOW_CYCLE:
                    animate_led_rainbow_cycle(STRIP_BIT_1, 10);
 80024bc:	210a      	movs	r1, #10
 80024be:	2001      	movs	r0, #1
 80024c0:	f7ff f880 	bl	80015c4 <animate_led_rainbow_cycle>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_0);
 80024c4:	2100      	movs	r1, #0
 80024c6:	2005      	movs	r0, #5
 80024c8:	f7ff ff48 	bl	800235c <task_led_ctrl_adjust_parameters>
                break;
 80024cc:	e041      	b.n	8002552 <task_led_ctrl_strip_one+0x176>
                case LED_STATE_THEATER_CHASE:
                    animate_led_theater_chase(STRIP_BIT_1, task_led_ctrl_color_hex(), 20);
 80024ce:	f000 f8fd 	bl	80026cc <task_led_ctrl_color_hex>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2214      	movs	r2, #20
 80024d6:	4619      	mov	r1, r3
 80024d8:	2001      	movs	r0, #1
 80024da:	f7ff f957 	bl	800178c <animate_led_theater_chase>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 80024de:	2100      	movs	r1, #0
 80024e0:	200a      	movs	r0, #10
 80024e2:	f7ff ff3b 	bl	800235c <task_led_ctrl_adjust_parameters>
                break;
 80024e6:	e034      	b.n	8002552 <task_led_ctrl_strip_one+0x176>
                case LED_STATE_THEATER_CHASE_RAINBOW:\
                    animate_led_theater_chase_rainbow(STRIP_BIT_1, 20);
 80024e8:	2114      	movs	r1, #20
 80024ea:	2001      	movs	r0, #1
 80024ec:	f7ff f9f0 	bl	80018d0 <animate_led_theater_chase_rainbow>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_2, TASK_LED_CTRL_DELAY_MS_0);
 80024f0:	2100      	movs	r1, #0
 80024f2:	2002      	movs	r0, #2
 80024f4:	f7ff ff32 	bl	800235c <task_led_ctrl_adjust_parameters>
                break;
 80024f8:	e02b      	b.n	8002552 <task_led_ctrl_strip_one+0x176>
                case LED_STATE_FADE_IN_AND_OUT:
                    animate_led_fade_in_fade_out((uint16_t)STRIP_BIT_1, task_led_ctrl_color_hex());
 80024fa:	f000 f8e7 	bl	80026cc <task_led_ctrl_color_hex>
 80024fe:	4603      	mov	r3, r0
 8002500:	4619      	mov	r1, r3
 8002502:	2001      	movs	r0, #1
 8002504:	f7fe fe16 	bl	8001134 <animate_led_fade_in_fade_out>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 8002508:	2100      	movs	r1, #0
 800250a:	200a      	movs	r0, #10
 800250c:	f7ff ff26 	bl	800235c <task_led_ctrl_adjust_parameters>
                break;
 8002510:	e01f      	b.n	8002552 <task_led_ctrl_strip_one+0x176>
                case LED_STATE_TWINKLE:
                    animate_led_turn_all_pixels_off();
 8002512:	f7fe fda5 	bl	8001060 <animate_led_turn_all_pixels_off>
                    animate_led_twinkle(STRIP_BIT_1, task_led_ctrl_color_hex(), (uint32_t)((float)NUM_LEDS * (float)0.9), 20, false);
 8002516:	f000 f8d9 	bl	80026cc <task_led_ctrl_color_hex>
 800251a:	4601      	mov	r1, r0
 800251c:	2300      	movs	r3, #0
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	2314      	movs	r3, #20
 8002522:	f44f 720f 	mov.w	r2, #572	; 0x23c
 8002526:	2001      	movs	r0, #1
 8002528:	f7fe ff46 	bl	80013b8 <animate_led_twinkle>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_0);
 800252c:	2100      	movs	r1, #0
 800252e:	2005      	movs	r0, #5
 8002530:	f7ff ff14 	bl	800235c <task_led_ctrl_adjust_parameters>
                break;
 8002534:	e00d      	b.n	8002552 <task_led_ctrl_strip_one+0x176>
                case LED_STATE_SPELL:
                    animate_led_only_spell_word(STRIP_BIT_1, task_led_ctrl_color_hex(), 20);
 8002536:	f000 f8c9 	bl	80026cc <task_led_ctrl_color_hex>
 800253a:	4603      	mov	r3, r0
 800253c:	2214      	movs	r2, #20
 800253e:	4619      	mov	r1, r3
 8002540:	2001      	movs	r0, #1
 8002542:	f7fe fd97 	bl	8001074 <animate_led_only_spell_word>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 8002546:	2100      	movs	r1, #0
 8002548:	200a      	movs	r0, #10
 800254a:	f7ff ff07 	bl	800235c <task_led_ctrl_adjust_parameters>
                break;
 800254e:	e000      	b.n	8002552 <task_led_ctrl_strip_one+0x176>
                default:
                break;
 8002550:	bf00      	nop
        while(task_button_press_major_state_change()) osDelay(100);
 8002552:	e74e      	b.n	80023f2 <task_led_ctrl_strip_one+0x16>
 8002554:	20000a89 	.word	0x20000a89
 8002558:	20000a88 	.word	0x20000a88

0800255c <task_led_ctrl_delay>:
    }
}


void task_led_ctrl_delay(const uint32_t time_ms)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
    uint32_t ms_count = 0;
 8002564:	2300      	movs	r3, #0
 8002566:	60fb      	str	r3, [r7, #12]
    while (ms_count++ < time_ms)
 8002568:	e002      	b.n	8002570 <task_led_ctrl_delay+0x14>
    {
        osDelay(portTICK_PERIOD_MS);
 800256a:	2001      	movs	r0, #1
 800256c:	f000 fb3a 	bl	8002be4 <osDelay>
    while (ms_count++ < time_ms)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	1c5a      	adds	r2, r3, #1
 8002574:	60fa      	str	r2, [r7, #12]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	429a      	cmp	r2, r3
 800257a:	d8f6      	bhi.n	800256a <task_led_ctrl_delay+0xe>
    }
}
 800257c:	bf00      	nop
 800257e:	bf00      	nop
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <task_led_ctrl_brightness_adjust>:


void task_led_ctrl_brightness_adjust(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
    if (LED_BRIGHTNESS_FIRST == g_led_brightness) g_led_brightness = LED_BRIGHTNESS_LAST;
 800258c:	4b14      	ldr	r3, [pc, #80]	; (80025e0 <task_led_ctrl_brightness_adjust+0x58>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d103      	bne.n	800259c <task_led_ctrl_brightness_adjust+0x14>
 8002594:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <task_led_ctrl_brightness_adjust+0x58>)
 8002596:	2202      	movs	r2, #2
 8002598:	701a      	strb	r2, [r3, #0]
 800259a:	e005      	b.n	80025a8 <task_led_ctrl_brightness_adjust+0x20>
    else g_led_brightness = (led_brightness_e) (g_led_brightness - 1);
 800259c:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <task_led_ctrl_brightness_adjust+0x58>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	3b01      	subs	r3, #1
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <task_led_ctrl_brightness_adjust+0x58>)
 80025a6:	701a      	strb	r2, [r3, #0]
    switch (g_led_brightness)
 80025a8:	4b0d      	ldr	r3, [pc, #52]	; (80025e0 <task_led_ctrl_brightness_adjust+0x58>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d010      	beq.n	80025d2 <task_led_ctrl_brightness_adjust+0x4a>
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	dc13      	bgt.n	80025dc <task_led_ctrl_brightness_adjust+0x54>
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d002      	beq.n	80025be <task_led_ctrl_brightness_adjust+0x36>
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d005      	beq.n	80025c8 <task_led_ctrl_brightness_adjust+0x40>
        break;
        case LED_BRIGHTNESS_1_PERCENT:
            current_monitor_set(0.01f);
        break;
    }
}
 80025bc:	e00e      	b.n	80025dc <task_led_ctrl_brightness_adjust+0x54>
            current_monitor_set(1.0f);
 80025be:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80025c2:	f7fe fbf1 	bl	8000da8 <current_monitor_set>
        break;
 80025c6:	e009      	b.n	80025dc <task_led_ctrl_brightness_adjust+0x54>
            current_monitor_set(0.25f);
 80025c8:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 80025cc:	f7fe fbec 	bl	8000da8 <current_monitor_set>
        break;
 80025d0:	e004      	b.n	80025dc <task_led_ctrl_brightness_adjust+0x54>
            current_monitor_set(0.01f);
 80025d2:	ed9f 0a04 	vldr	s0, [pc, #16]	; 80025e4 <task_led_ctrl_brightness_adjust+0x5c>
 80025d6:	f7fe fbe7 	bl	8000da8 <current_monitor_set>
        break;
 80025da:	bf00      	nop
}
 80025dc:	bf00      	nop
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20000a8b 	.word	0x20000a8b
 80025e4:	3c23d70a 	.word	0x3c23d70a

080025e8 <task_led_ctrl_clear_pause>:


void task_led_ctrl_clear_pause(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
    g_animate_led_pause_flag = false;
 80025ec:	4b03      	ldr	r3, [pc, #12]	; (80025fc <task_led_ctrl_clear_pause+0x14>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	701a      	strb	r2, [r3, #0]
}
 80025f2:	bf00      	nop
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	20000a72 	.word	0x20000a72

08002600 <task_led_ctrl_pause>:


void task_led_ctrl_pause(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
    static uint8_t flip_or_flop = 1;
    if (flip_or_flop) g_animate_led_pause_flag = true;
 8002604:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <task_led_ctrl_pause+0x34>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <task_led_ctrl_pause+0x14>
 800260c:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <task_led_ctrl_pause+0x38>)
 800260e:	2201      	movs	r2, #1
 8002610:	701a      	strb	r2, [r3, #0]
 8002612:	e002      	b.n	800261a <task_led_ctrl_pause+0x1a>
    else g_animate_led_pause_flag = false;
 8002614:	4b08      	ldr	r3, [pc, #32]	; (8002638 <task_led_ctrl_pause+0x38>)
 8002616:	2200      	movs	r2, #0
 8002618:	701a      	strb	r2, [r3, #0]
    flip_or_flop ^= 1;
 800261a:	4b06      	ldr	r3, [pc, #24]	; (8002634 <task_led_ctrl_pause+0x34>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	f083 0301 	eor.w	r3, r3, #1
 8002622:	b2da      	uxtb	r2, r3
 8002624:	4b03      	ldr	r3, [pc, #12]	; (8002634 <task_led_ctrl_pause+0x34>)
 8002626:	701a      	strb	r2, [r3, #0]
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	2000005f 	.word	0x2000005f
 8002638:	20000a72 	.word	0x20000a72

0800263c <task_led_ctrl_color_state>:


master_color_state_e task_led_ctrl_color_state(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
    return g_master_color_state;
 8002640:	4b03      	ldr	r3, [pc, #12]	; (8002650 <task_led_ctrl_color_state+0x14>)
 8002642:	781b      	ldrb	r3, [r3, #0]
}
 8002644:	4618      	mov	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	20000a8c 	.word	0x20000a8c

08002654 <task_led_ctrl_color_state_demo>:


void task_led_ctrl_color_state_demo(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
    g_master_color_state = MASTER_COLOR_STATE_DEMO;
 8002658:	4b03      	ldr	r3, [pc, #12]	; (8002668 <task_led_ctrl_color_state_demo+0x14>)
 800265a:	2200      	movs	r2, #0
 800265c:	701a      	strb	r2, [r3, #0]
}
 800265e:	bf00      	nop
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	20000a8c 	.word	0x20000a8c

0800266c <task_led_ctrl_color_state_fixed>:


void task_led_ctrl_color_state_fixed(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
    g_master_color_state = MASTER_COLOR_STATE_FIXED;
 8002670:	4b05      	ldr	r3, [pc, #20]	; (8002688 <task_led_ctrl_color_state_fixed+0x1c>)
 8002672:	2201      	movs	r2, #1
 8002674:	701a      	strb	r2, [r3, #0]
    g_led_color = COLORS_FIRST;
 8002676:	4b05      	ldr	r3, [pc, #20]	; (800268c <task_led_ctrl_color_state_fixed+0x20>)
 8002678:	2200      	movs	r2, #0
 800267a:	701a      	strb	r2, [r3, #0]
}
 800267c:	bf00      	nop
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	20000a8c 	.word	0x20000a8c
 800268c:	2000005e 	.word	0x2000005e

08002690 <task_led_ctrl_color_adjust>:
    g_led_color = COLORS_RED;
}


bool task_led_ctrl_color_adjust(void)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
    bool return_val = false;
 8002696:	2300      	movs	r3, #0
 8002698:	71fb      	strb	r3, [r7, #7]
    if (COLORS_LAST == g_led_color)
 800269a:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <task_led_ctrl_color_adjust+0x38>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b15      	cmp	r3, #21
 80026a0:	d105      	bne.n	80026ae <task_led_ctrl_color_adjust+0x1e>
    {
        g_led_color = COLORS_FIRST;
 80026a2:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <task_led_ctrl_color_adjust+0x38>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	701a      	strb	r2, [r3, #0]
        return_val = true;
 80026a8:	2301      	movs	r3, #1
 80026aa:	71fb      	strb	r3, [r7, #7]
 80026ac:	e005      	b.n	80026ba <task_led_ctrl_color_adjust+0x2a>
    }
    else g_led_color = (all_colors_e) (g_led_color + 1);
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <task_led_ctrl_color_adjust+0x38>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	3301      	adds	r3, #1
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	4b04      	ldr	r3, [pc, #16]	; (80026c8 <task_led_ctrl_color_adjust+0x38>)
 80026b8:	701a      	strb	r2, [r3, #0]
    return return_val;
 80026ba:	79fb      	ldrb	r3, [r7, #7]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	2000005e 	.word	0x2000005e

080026cc <task_led_ctrl_color_hex>:
    return g_led_color;
}


color_hex_code_e task_led_ctrl_color_hex(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
    return g_color_hex_codes[g_led_color];
 80026d0:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <task_led_ctrl_color_hex+0x1c>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	461a      	mov	r2, r3
 80026d6:	4b05      	ldr	r3, [pc, #20]	; (80026ec <task_led_ctrl_color_hex+0x20>)
 80026d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	2000005e 	.word	0x2000005e
 80026ec:	20000004 	.word	0x20000004

080026f0 <task_led_ctrl_color_red_hex>:


uint8_t task_led_ctrl_color_red_hex(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	ed2d 8b02 	vpush	{d8}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
    return (((g_color_hex_codes[g_led_color] & 0xFF0000) >> 16) / current_monitor_ratio());
 80026fa:	4b0f      	ldr	r3, [pc, #60]	; (8002738 <task_led_ctrl_color_red_hex+0x48>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	461a      	mov	r2, r3
 8002700:	4b0e      	ldr	r3, [pc, #56]	; (800273c <task_led_ctrl_color_red_hex+0x4c>)
 8002702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002706:	0c1b      	lsrs	r3, r3, #16
 8002708:	b2db      	uxtb	r3, r3
 800270a:	ee07 3a90 	vmov	s15, r3
 800270e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8002712:	f7fe fb6b 	bl	8000dec <current_monitor_ratio>
 8002716:	eeb0 7a40 	vmov.f32	s14, s0
 800271a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800271e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002722:	edc7 7a01 	vstr	s15, [r7, #4]
 8002726:	793b      	ldrb	r3, [r7, #4]
 8002728:	b2db      	uxtb	r3, r3
}
 800272a:	4618      	mov	r0, r3
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	ecbd 8b02 	vpop	{d8}
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	2000005e 	.word	0x2000005e
 800273c:	20000004 	.word	0x20000004

08002740 <task_led_ctrl_color_green_hex>:


uint8_t task_led_ctrl_color_green_hex(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	ed2d 8b02 	vpush	{d8}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
    return (((g_color_hex_codes[g_led_color] & 0x00FF00) >> 8) / current_monitor_ratio());
 800274a:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <task_led_ctrl_color_green_hex+0x48>)
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	4b0e      	ldr	r3, [pc, #56]	; (800278c <task_led_ctrl_color_green_hex+0x4c>)
 8002752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002756:	0a1b      	lsrs	r3, r3, #8
 8002758:	b2db      	uxtb	r3, r3
 800275a:	ee07 3a90 	vmov	s15, r3
 800275e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8002762:	f7fe fb43 	bl	8000dec <current_monitor_ratio>
 8002766:	eeb0 7a40 	vmov.f32	s14, s0
 800276a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800276e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002772:	edc7 7a01 	vstr	s15, [r7, #4]
 8002776:	793b      	ldrb	r3, [r7, #4]
 8002778:	b2db      	uxtb	r3, r3
}
 800277a:	4618      	mov	r0, r3
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	ecbd 8b02 	vpop	{d8}
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	2000005e 	.word	0x2000005e
 800278c:	20000004 	.word	0x20000004

08002790 <task_led_ctrl_color_blue_hex>:


uint8_t task_led_ctrl_color_blue_hex(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	ed2d 8b02 	vpush	{d8}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
    return ((g_color_hex_codes[g_led_color] & 0x0000FF) / current_monitor_ratio());
 800279a:	4b0e      	ldr	r3, [pc, #56]	; (80027d4 <task_led_ctrl_color_blue_hex+0x44>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	4b0d      	ldr	r3, [pc, #52]	; (80027d8 <task_led_ctrl_color_blue_hex+0x48>)
 80027a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	ee07 3a90 	vmov	s15, r3
 80027ac:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80027b0:	f7fe fb1c 	bl	8000dec <current_monitor_ratio>
 80027b4:	eeb0 7a40 	vmov.f32	s14, s0
 80027b8:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80027bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027c0:	edc7 7a01 	vstr	s15, [r7, #4]
 80027c4:	793b      	ldrb	r3, [r7, #4]
 80027c6:	b2db      	uxtb	r3, r3
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	ecbd 8b02 	vpop	{d8}
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	2000005e 	.word	0x2000005e
 80027d8:	20000004 	.word	0x20000004

080027dc <task_led_ctrl_color_random>:
    return g_color_hex_codes[color];
}


void task_led_ctrl_color_random(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
    all_colors_e color = (all_colors_e)(random_num(0, NUM_COLORS));
 80027e2:	2116      	movs	r1, #22
 80027e4:	2000      	movs	r0, #0
 80027e6:	f008 fb8b 	bl	800af00 <random_num>
 80027ea:	4603      	mov	r3, r0
 80027ec:	71fb      	strb	r3, [r7, #7]
    if (g_led_color == color)
 80027ee:	4b0d      	ldr	r3, [pc, #52]	; (8002824 <task_led_ctrl_color_random+0x48>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	79fa      	ldrb	r2, [r7, #7]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d10e      	bne.n	8002816 <task_led_ctrl_color_random+0x3a>
    {
        if ((COLORS_LAST) == color) g_led_color = (all_colors_e)(color - 1);
 80027f8:	79fb      	ldrb	r3, [r7, #7]
 80027fa:	2b15      	cmp	r3, #21
 80027fc:	d105      	bne.n	800280a <task_led_ctrl_color_random+0x2e>
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	3b01      	subs	r3, #1
 8002802:	b2da      	uxtb	r2, r3
 8002804:	4b07      	ldr	r3, [pc, #28]	; (8002824 <task_led_ctrl_color_random+0x48>)
 8002806:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        g_led_color = color;
    }
}
 8002808:	e008      	b.n	800281c <task_led_ctrl_color_random+0x40>
        else g_led_color = (all_colors_e)(color + 1);
 800280a:	79fb      	ldrb	r3, [r7, #7]
 800280c:	3301      	adds	r3, #1
 800280e:	b2da      	uxtb	r2, r3
 8002810:	4b04      	ldr	r3, [pc, #16]	; (8002824 <task_led_ctrl_color_random+0x48>)
 8002812:	701a      	strb	r2, [r3, #0]
}
 8002814:	e002      	b.n	800281c <task_led_ctrl_color_random+0x40>
        g_led_color = color;
 8002816:	4a03      	ldr	r2, [pc, #12]	; (8002824 <task_led_ctrl_color_random+0x48>)
 8002818:	79fb      	ldrb	r3, [r7, #7]
 800281a:	7013      	strb	r3, [r2, #0]
}
 800281c:	bf00      	nop
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	2000005e 	.word	0x2000005e

08002828 <task_led_ctrl_speed>:
    g_led_state = LED_STATE_FIRST;
}


float task_led_ctrl_speed(void)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
    float speed_factor = 0.0;
 800282e:	f04f 0300 	mov.w	r3, #0
 8002832:	607b      	str	r3, [r7, #4]
    switch(g_led_speed)
 8002834:	4b17      	ldr	r3, [pc, #92]	; (8002894 <task_led_ctrl_speed+0x6c>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b04      	cmp	r3, #4
 800283a:	d81f      	bhi.n	800287c <task_led_ctrl_speed+0x54>
 800283c:	a201      	add	r2, pc, #4	; (adr r2, 8002844 <task_led_ctrl_speed+0x1c>)
 800283e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002842:	bf00      	nop
 8002844:	08002859 	.word	0x08002859
 8002848:	0800285f 	.word	0x0800285f
 800284c:	08002865 	.word	0x08002865
 8002850:	0800286d 	.word	0x0800286d
 8002854:	08002875 	.word	0x08002875
    {
        case LED_SPEED_10X:
            speed_factor = 10;
 8002858:	4b0f      	ldr	r3, [pc, #60]	; (8002898 <task_led_ctrl_speed+0x70>)
 800285a:	607b      	str	r3, [r7, #4]
        break;
 800285c:	e00f      	b.n	800287e <task_led_ctrl_speed+0x56>
        case LED_SPEED_5X:
            speed_factor = 5;
 800285e:	4b0f      	ldr	r3, [pc, #60]	; (800289c <task_led_ctrl_speed+0x74>)
 8002860:	607b      	str	r3, [r7, #4]
        break;
 8002862:	e00c      	b.n	800287e <task_led_ctrl_speed+0x56>
//        case LED_SPEED_2X:
//            speed_factor = 2;
//        break;
        case LED_SPEED_1X:
            speed_factor = 1;
 8002864:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002868:	607b      	str	r3, [r7, #4]
        break;
 800286a:	e008      	b.n	800287e <task_led_ctrl_speed+0x56>
        case LED_SPEED_0P5X:
            speed_factor = 0.5;
 800286c:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002870:	607b      	str	r3, [r7, #4]
        break;
 8002872:	e004      	b.n	800287e <task_led_ctrl_speed+0x56>
        case LED_SPEED_0P25X:
            speed_factor = 0.25;
 8002874:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8002878:	607b      	str	r3, [r7, #4]
        break;
 800287a:	e000      	b.n	800287e <task_led_ctrl_speed+0x56>
        default:
        break;
 800287c:	bf00      	nop
        case LED_SPEED_0P1X:
            speed_factor = 0.1;
        break;
        */
    }
    return speed_factor;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	ee07 3a90 	vmov	s15, r3
}
 8002884:	eeb0 0a67 	vmov.f32	s0, s15
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	20000a8a 	.word	0x20000a8a
 8002898:	41200000 	.word	0x41200000
 800289c:	40a00000 	.word	0x40a00000

080028a0 <task_led_ctrl_speed_adjust>:


void task_led_ctrl_speed_adjust(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
    if (LED_SPEED_FIRST == g_led_speed) g_led_speed = LED_SPEED_LAST;
 80028a4:	4b09      	ldr	r3, [pc, #36]	; (80028cc <task_led_ctrl_speed_adjust+0x2c>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d103      	bne.n	80028b4 <task_led_ctrl_speed_adjust+0x14>
 80028ac:	4b07      	ldr	r3, [pc, #28]	; (80028cc <task_led_ctrl_speed_adjust+0x2c>)
 80028ae:	2204      	movs	r2, #4
 80028b0:	701a      	strb	r2, [r3, #0]
    else g_led_speed = (led_speed_e) (g_led_speed - 1);
}
 80028b2:	e005      	b.n	80028c0 <task_led_ctrl_speed_adjust+0x20>
    else g_led_speed = (led_speed_e) (g_led_speed - 1);
 80028b4:	4b05      	ldr	r3, [pc, #20]	; (80028cc <task_led_ctrl_speed_adjust+0x2c>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	3b01      	subs	r3, #1
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	4b03      	ldr	r3, [pc, #12]	; (80028cc <task_led_ctrl_speed_adjust+0x2c>)
 80028be:	701a      	strb	r2, [r3, #0]
}
 80028c0:	bf00      	nop
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	20000a8a 	.word	0x20000a8a

080028d0 <task_led_ctrl_speed_reset>:


void task_led_ctrl_speed_reset(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
    g_led_speed = LED_SPEED_1X;
 80028d4:	4b03      	ldr	r3, [pc, #12]	; (80028e4 <task_led_ctrl_speed_reset+0x14>)
 80028d6:	2202      	movs	r2, #2
 80028d8:	701a      	strb	r2, [r3, #0]
}
 80028da:	bf00      	nop
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	20000a8a 	.word	0x20000a8a

080028e8 <task_led_ctrl_animate_iteration_reset>:
    return ((float)g_delay_in_animation_ms / task_led_ctrl_speed());
}


void task_led_ctrl_animate_iteration_reset(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
    g_animation_iterations = 0;
 80028ec:	4b03      	ldr	r3, [pc, #12]	; (80028fc <task_led_ctrl_animate_iteration_reset+0x14>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	701a      	strb	r2, [r3, #0]
}
 80028f2:	bf00      	nop
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	20000a8d 	.word	0x20000a8d

08002900 <task_led_ctrl_animate_adjust_state>:


bool task_led_ctrl_animate_adjust_state(void)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
    bool return_val = false;
 8002906:	2300      	movs	r3, #0
 8002908:	71fb      	strb	r3, [r7, #7]
    if (LED_STATE_LAST == g_led_state)
 800290a:	4b0b      	ldr	r3, [pc, #44]	; (8002938 <task_led_ctrl_animate_adjust_state+0x38>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b09      	cmp	r3, #9
 8002910:	d105      	bne.n	800291e <task_led_ctrl_animate_adjust_state+0x1e>
    {
        g_led_state = LED_STATE_FIRST;
 8002912:	4b09      	ldr	r3, [pc, #36]	; (8002938 <task_led_ctrl_animate_adjust_state+0x38>)
 8002914:	2200      	movs	r2, #0
 8002916:	701a      	strb	r2, [r3, #0]
        return_val = true;
 8002918:	2301      	movs	r3, #1
 800291a:	71fb      	strb	r3, [r7, #7]
 800291c:	e005      	b.n	800292a <task_led_ctrl_animate_adjust_state+0x2a>
    }
    else g_led_state = (led_state_e) (g_led_state + 1);
 800291e:	4b06      	ldr	r3, [pc, #24]	; (8002938 <task_led_ctrl_animate_adjust_state+0x38>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	3301      	adds	r3, #1
 8002924:	b2da      	uxtb	r2, r3
 8002926:	4b04      	ldr	r3, [pc, #16]	; (8002938 <task_led_ctrl_animate_adjust_state+0x38>)
 8002928:	701a      	strb	r2, [r3, #0]
    return return_val;
 800292a:	79fb      	ldrb	r3, [r7, #7]
}
 800292c:	4618      	mov	r0, r3
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	20000a89 	.word	0x20000a89

0800293c <task_led_ctrl_animate_state_demo>:


void task_led_ctrl_animate_state_demo(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
    g_master_led_state = MASTER_LED_STATE_DEMO;
 8002940:	4b05      	ldr	r3, [pc, #20]	; (8002958 <task_led_ctrl_animate_state_demo+0x1c>)
 8002942:	2200      	movs	r2, #0
 8002944:	701a      	strb	r2, [r3, #0]
    g_animation_iterations = 0;
 8002946:	4b05      	ldr	r3, [pc, #20]	; (800295c <task_led_ctrl_animate_state_demo+0x20>)
 8002948:	2200      	movs	r2, #0
 800294a:	701a      	strb	r2, [r3, #0]
}
 800294c:	bf00      	nop
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	20000a88 	.word	0x20000a88
 800295c:	20000a8d 	.word	0x20000a8d

08002960 <task_led_ctrl_animate_state_fixed>:


void task_led_ctrl_animate_state_fixed(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
    g_master_led_state = MASTER_LED_STATE_FIXED;
 8002964:	4b06      	ldr	r3, [pc, #24]	; (8002980 <task_led_ctrl_animate_state_fixed+0x20>)
 8002966:	2201      	movs	r2, #1
 8002968:	701a      	strb	r2, [r3, #0]
    g_led_state = LED_STATE_FIRST; // set first state
 800296a:	4b06      	ldr	r3, [pc, #24]	; (8002984 <task_led_ctrl_animate_state_fixed+0x24>)
 800296c:	2200      	movs	r2, #0
 800296e:	701a      	strb	r2, [r3, #0]
    g_animation_iterations = 0;
 8002970:	4b05      	ldr	r3, [pc, #20]	; (8002988 <task_led_ctrl_animate_state_fixed+0x28>)
 8002972:	2200      	movs	r2, #0
 8002974:	701a      	strb	r2, [r3, #0]
}
 8002976:	bf00      	nop
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	20000a88 	.word	0x20000a88
 8002984:	20000a89 	.word	0x20000a89
 8002988:	20000a8d 	.word	0x20000a8d

0800298c <task_led_ctrl_animate_state>:


master_led_state_e task_led_ctrl_animate_state(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
    return g_master_led_state;
 8002990:	4b03      	ldr	r3, [pc, #12]	; (80029a0 <task_led_ctrl_animate_state+0x14>)
 8002992:	781b      	ldrb	r3, [r3, #0]
}
 8002994:	4618      	mov	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	20000a88 	.word	0x20000a88

080029a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	6039      	str	r1, [r7, #0]
 80029ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	db0a      	blt.n	80029ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	490c      	ldr	r1, [pc, #48]	; (80029f0 <__NVIC_SetPriority+0x4c>)
 80029be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c2:	0112      	lsls	r2, r2, #4
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	440b      	add	r3, r1
 80029c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029cc:	e00a      	b.n	80029e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	4908      	ldr	r1, [pc, #32]	; (80029f4 <__NVIC_SetPriority+0x50>)
 80029d4:	79fb      	ldrb	r3, [r7, #7]
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	3b04      	subs	r3, #4
 80029dc:	0112      	lsls	r2, r2, #4
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	440b      	add	r3, r1
 80029e2:	761a      	strb	r2, [r3, #24]
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	e000e100 	.word	0xe000e100
 80029f4:	e000ed00 	.word	0xe000ed00

080029f8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80029fc:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <SysTick_Handler+0x1c>)
 80029fe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002a00:	f001 fd10 	bl	8004424 <xTaskGetSchedulerState>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d001      	beq.n	8002a0e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002a0a:	f002 fc2d 	bl	8005268 <xPortSysTickHandler>
  }
}
 8002a0e:	bf00      	nop
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	e000e010 	.word	0xe000e010

08002a18 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	f06f 0004 	mvn.w	r0, #4
 8002a22:	f7ff ffbf 	bl	80029a4 <__NVIC_SetPriority>
#endif
}
 8002a26:	bf00      	nop
 8002a28:	bd80      	pop	{r7, pc}
	...

08002a2c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a32:	f3ef 8305 	mrs	r3, IPSR
 8002a36:	603b      	str	r3, [r7, #0]
  return(result);
 8002a38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002a3e:	f06f 0305 	mvn.w	r3, #5
 8002a42:	607b      	str	r3, [r7, #4]
 8002a44:	e00c      	b.n	8002a60 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002a46:	4b0a      	ldr	r3, [pc, #40]	; (8002a70 <osKernelInitialize+0x44>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d105      	bne.n	8002a5a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002a4e:	4b08      	ldr	r3, [pc, #32]	; (8002a70 <osKernelInitialize+0x44>)
 8002a50:	2201      	movs	r2, #1
 8002a52:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002a54:	2300      	movs	r3, #0
 8002a56:	607b      	str	r3, [r7, #4]
 8002a58:	e002      	b.n	8002a60 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002a5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002a60:	687b      	ldr	r3, [r7, #4]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	20000a90 	.word	0x20000a90

08002a74 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a7a:	f3ef 8305 	mrs	r3, IPSR
 8002a7e:	603b      	str	r3, [r7, #0]
  return(result);
 8002a80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <osKernelStart+0x1a>
    stat = osErrorISR;
 8002a86:	f06f 0305 	mvn.w	r3, #5
 8002a8a:	607b      	str	r3, [r7, #4]
 8002a8c:	e010      	b.n	8002ab0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002a8e:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <osKernelStart+0x48>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d109      	bne.n	8002aaa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002a96:	f7ff ffbf 	bl	8002a18 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002a9a:	4b08      	ldr	r3, [pc, #32]	; (8002abc <osKernelStart+0x48>)
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002aa0:	f001 f866 	bl	8003b70 <vTaskStartScheduler>
      stat = osOK;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	607b      	str	r3, [r7, #4]
 8002aa8:	e002      	b.n	8002ab0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002aaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002aae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002ab0:	687b      	ldr	r3, [r7, #4]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	20000a90 	.word	0x20000a90

08002ac0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b08e      	sub	sp, #56	; 0x38
 8002ac4:	af04      	add	r7, sp, #16
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ad0:	f3ef 8305 	mrs	r3, IPSR
 8002ad4:	617b      	str	r3, [r7, #20]
  return(result);
 8002ad6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d17e      	bne.n	8002bda <osThreadNew+0x11a>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d07b      	beq.n	8002bda <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002ae2:	2380      	movs	r3, #128	; 0x80
 8002ae4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002ae6:	2318      	movs	r3, #24
 8002ae8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002aea:	2300      	movs	r3, #0
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002aee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002af2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d045      	beq.n	8002b86 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d002      	beq.n	8002b08 <osThreadNew+0x48>
        name = attr->name;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d002      	beq.n	8002b16 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d008      	beq.n	8002b2e <osThreadNew+0x6e>
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	2b38      	cmp	r3, #56	; 0x38
 8002b20:	d805      	bhi.n	8002b2e <osThreadNew+0x6e>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <osThreadNew+0x72>
        return (NULL);
 8002b2e:	2300      	movs	r3, #0
 8002b30:	e054      	b.n	8002bdc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	089b      	lsrs	r3, r3, #2
 8002b40:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00e      	beq.n	8002b68 <osThreadNew+0xa8>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	2b5b      	cmp	r3, #91	; 0x5b
 8002b50:	d90a      	bls.n	8002b68 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d006      	beq.n	8002b68 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d002      	beq.n	8002b68 <osThreadNew+0xa8>
        mem = 1;
 8002b62:	2301      	movs	r3, #1
 8002b64:	61bb      	str	r3, [r7, #24]
 8002b66:	e010      	b.n	8002b8a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10c      	bne.n	8002b8a <osThreadNew+0xca>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d108      	bne.n	8002b8a <osThreadNew+0xca>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d104      	bne.n	8002b8a <osThreadNew+0xca>
          mem = 0;
 8002b80:	2300      	movs	r3, #0
 8002b82:	61bb      	str	r3, [r7, #24]
 8002b84:	e001      	b.n	8002b8a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002b86:	2300      	movs	r3, #0
 8002b88:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d110      	bne.n	8002bb2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002b98:	9202      	str	r2, [sp, #8]
 8002b9a:	9301      	str	r3, [sp, #4]
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	6a3a      	ldr	r2, [r7, #32]
 8002ba4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 fe0c 	bl	80037c4 <xTaskCreateStatic>
 8002bac:	4603      	mov	r3, r0
 8002bae:	613b      	str	r3, [r7, #16]
 8002bb0:	e013      	b.n	8002bda <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d110      	bne.n	8002bda <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002bb8:	6a3b      	ldr	r3, [r7, #32]
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	f107 0310 	add.w	r3, r7, #16
 8002bc0:	9301      	str	r3, [sp, #4]
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f000 fe57 	bl	800387e <xTaskCreate>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d001      	beq.n	8002bda <osThreadNew+0x11a>
            hTask = NULL;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002bda:	693b      	ldr	r3, [r7, #16]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3728      	adds	r7, #40	; 0x28
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002bec:	f3ef 8305 	mrs	r3, IPSR
 8002bf0:	60bb      	str	r3, [r7, #8]
  return(result);
 8002bf2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <osDelay+0x1c>
    stat = osErrorISR;
 8002bf8:	f06f 0305 	mvn.w	r3, #5
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	e007      	b.n	8002c10 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002c00:	2300      	movs	r3, #0
 8002c02:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 ff7c 	bl	8003b08 <vTaskDelay>
    }
  }

  return (stat);
 8002c10:	68fb      	ldr	r3, [r7, #12]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
	...

08002c1c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4a07      	ldr	r2, [pc, #28]	; (8002c48 <vApplicationGetIdleTaskMemory+0x2c>)
 8002c2c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	4a06      	ldr	r2, [pc, #24]	; (8002c4c <vApplicationGetIdleTaskMemory+0x30>)
 8002c32:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2280      	movs	r2, #128	; 0x80
 8002c38:	601a      	str	r2, [r3, #0]
}
 8002c3a:	bf00      	nop
 8002c3c:	3714      	adds	r7, #20
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	20000a94 	.word	0x20000a94
 8002c4c:	20000af0 	.word	0x20000af0

08002c50 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4a07      	ldr	r2, [pc, #28]	; (8002c7c <vApplicationGetTimerTaskMemory+0x2c>)
 8002c60:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	4a06      	ldr	r2, [pc, #24]	; (8002c80 <vApplicationGetTimerTaskMemory+0x30>)
 8002c66:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c6e:	601a      	str	r2, [r3, #0]
}
 8002c70:	bf00      	nop
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr
 8002c7c:	20000cf0 	.word	0x20000cf0
 8002c80:	20000d4c 	.word	0x20000d4c

08002c84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f103 0208 	add.w	r2, r3, #8
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f103 0208 	add.w	r2, r3, #8
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f103 0208 	add.w	r2, r3, #8
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b085      	sub	sp, #20
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
 8002ce6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	1c5a      	adds	r2, r3, #1
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	601a      	str	r2, [r3, #0]
}
 8002d1a:	bf00      	nop
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d26:	b480      	push	{r7}
 8002d28:	b085      	sub	sp, #20
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
 8002d2e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d3c:	d103      	bne.n	8002d46 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	e00c      	b.n	8002d60 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	3308      	adds	r3, #8
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	e002      	b.n	8002d54 <vListInsert+0x2e>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d2f6      	bcs.n	8002d4e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	1c5a      	adds	r2, r3, #1
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	601a      	str	r2, [r3, #0]
}
 8002d8c:	bf00      	nop
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6892      	ldr	r2, [r2, #8]
 8002dae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6852      	ldr	r2, [r2, #4]
 8002db8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d103      	bne.n	8002dcc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	1e5a      	subs	r2, r3, #1
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10a      	bne.n	8002e16 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e04:	f383 8811 	msr	BASEPRI, r3
 8002e08:	f3bf 8f6f 	isb	sy
 8002e0c:	f3bf 8f4f 	dsb	sy
 8002e10:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002e12:	bf00      	nop
 8002e14:	e7fe      	b.n	8002e14 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002e16:	f002 f995 	bl	8005144 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e22:	68f9      	ldr	r1, [r7, #12]
 8002e24:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e26:	fb01 f303 	mul.w	r3, r1, r3
 8002e2a:	441a      	add	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e46:	3b01      	subs	r3, #1
 8002e48:	68f9      	ldr	r1, [r7, #12]
 8002e4a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e4c:	fb01 f303 	mul.w	r3, r1, r3
 8002e50:	441a      	add	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	22ff      	movs	r2, #255	; 0xff
 8002e5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	22ff      	movs	r2, #255	; 0xff
 8002e62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d114      	bne.n	8002e96 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d01a      	beq.n	8002eaa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	3310      	adds	r3, #16
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f001 f915 	bl	80040a8 <xTaskRemoveFromEventList>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d012      	beq.n	8002eaa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002e84:	4b0c      	ldr	r3, [pc, #48]	; (8002eb8 <xQueueGenericReset+0xcc>)
 8002e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	f3bf 8f4f 	dsb	sy
 8002e90:	f3bf 8f6f 	isb	sy
 8002e94:	e009      	b.n	8002eaa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	3310      	adds	r3, #16
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff fef2 	bl	8002c84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	3324      	adds	r3, #36	; 0x24
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff feed 	bl	8002c84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002eaa:	f002 f97b 	bl	80051a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002eae:	2301      	movs	r3, #1
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	e000ed04 	.word	0xe000ed04

08002ebc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08e      	sub	sp, #56	; 0x38
 8002ec0:	af02      	add	r7, sp, #8
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
 8002ec8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10a      	bne.n	8002ee6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed4:	f383 8811 	msr	BASEPRI, r3
 8002ed8:	f3bf 8f6f 	isb	sy
 8002edc:	f3bf 8f4f 	dsb	sy
 8002ee0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002ee2:	bf00      	nop
 8002ee4:	e7fe      	b.n	8002ee4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10a      	bne.n	8002f02 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef0:	f383 8811 	msr	BASEPRI, r3
 8002ef4:	f3bf 8f6f 	isb	sy
 8002ef8:	f3bf 8f4f 	dsb	sy
 8002efc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002efe:	bf00      	nop
 8002f00:	e7fe      	b.n	8002f00 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d002      	beq.n	8002f0e <xQueueGenericCreateStatic+0x52>
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <xQueueGenericCreateStatic+0x56>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <xQueueGenericCreateStatic+0x58>
 8002f12:	2300      	movs	r3, #0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10a      	bne.n	8002f2e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1c:	f383 8811 	msr	BASEPRI, r3
 8002f20:	f3bf 8f6f 	isb	sy
 8002f24:	f3bf 8f4f 	dsb	sy
 8002f28:	623b      	str	r3, [r7, #32]
}
 8002f2a:	bf00      	nop
 8002f2c:	e7fe      	b.n	8002f2c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d102      	bne.n	8002f3a <xQueueGenericCreateStatic+0x7e>
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <xQueueGenericCreateStatic+0x82>
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e000      	b.n	8002f40 <xQueueGenericCreateStatic+0x84>
 8002f3e:	2300      	movs	r3, #0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d10a      	bne.n	8002f5a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f48:	f383 8811 	msr	BASEPRI, r3
 8002f4c:	f3bf 8f6f 	isb	sy
 8002f50:	f3bf 8f4f 	dsb	sy
 8002f54:	61fb      	str	r3, [r7, #28]
}
 8002f56:	bf00      	nop
 8002f58:	e7fe      	b.n	8002f58 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002f5a:	2350      	movs	r3, #80	; 0x50
 8002f5c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2b50      	cmp	r3, #80	; 0x50
 8002f62:	d00a      	beq.n	8002f7a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f68:	f383 8811 	msr	BASEPRI, r3
 8002f6c:	f3bf 8f6f 	isb	sy
 8002f70:	f3bf 8f4f 	dsb	sy
 8002f74:	61bb      	str	r3, [r7, #24]
}
 8002f76:	bf00      	nop
 8002f78:	e7fe      	b.n	8002f78 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002f7a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00d      	beq.n	8002fa2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f8e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	4613      	mov	r3, r2
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	68b9      	ldr	r1, [r7, #8]
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 f805 	bl	8002fac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3730      	adds	r7, #48	; 0x30
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
 8002fb8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d103      	bne.n	8002fc8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	e002      	b.n	8002fce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002fda:	2101      	movs	r1, #1
 8002fdc:	69b8      	ldr	r0, [r7, #24]
 8002fde:	f7ff ff05 	bl	8002dec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	78fa      	ldrb	r2, [r7, #3]
 8002fe6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002fea:	bf00      	nop
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
	...

08002ff4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b08e      	sub	sp, #56	; 0x38
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
 8003000:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003002:	2300      	movs	r3, #0
 8003004:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800300a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10a      	bne.n	8003026 <xQueueGenericSend+0x32>
	__asm volatile
 8003010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003014:	f383 8811 	msr	BASEPRI, r3
 8003018:	f3bf 8f6f 	isb	sy
 800301c:	f3bf 8f4f 	dsb	sy
 8003020:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003022:	bf00      	nop
 8003024:	e7fe      	b.n	8003024 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d103      	bne.n	8003034 <xQueueGenericSend+0x40>
 800302c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <xQueueGenericSend+0x44>
 8003034:	2301      	movs	r3, #1
 8003036:	e000      	b.n	800303a <xQueueGenericSend+0x46>
 8003038:	2300      	movs	r3, #0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10a      	bne.n	8003054 <xQueueGenericSend+0x60>
	__asm volatile
 800303e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003042:	f383 8811 	msr	BASEPRI, r3
 8003046:	f3bf 8f6f 	isb	sy
 800304a:	f3bf 8f4f 	dsb	sy
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003050:	bf00      	nop
 8003052:	e7fe      	b.n	8003052 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	2b02      	cmp	r3, #2
 8003058:	d103      	bne.n	8003062 <xQueueGenericSend+0x6e>
 800305a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305e:	2b01      	cmp	r3, #1
 8003060:	d101      	bne.n	8003066 <xQueueGenericSend+0x72>
 8003062:	2301      	movs	r3, #1
 8003064:	e000      	b.n	8003068 <xQueueGenericSend+0x74>
 8003066:	2300      	movs	r3, #0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10a      	bne.n	8003082 <xQueueGenericSend+0x8e>
	__asm volatile
 800306c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003070:	f383 8811 	msr	BASEPRI, r3
 8003074:	f3bf 8f6f 	isb	sy
 8003078:	f3bf 8f4f 	dsb	sy
 800307c:	623b      	str	r3, [r7, #32]
}
 800307e:	bf00      	nop
 8003080:	e7fe      	b.n	8003080 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003082:	f001 f9cf 	bl	8004424 <xTaskGetSchedulerState>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d102      	bne.n	8003092 <xQueueGenericSend+0x9e>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <xQueueGenericSend+0xa2>
 8003092:	2301      	movs	r3, #1
 8003094:	e000      	b.n	8003098 <xQueueGenericSend+0xa4>
 8003096:	2300      	movs	r3, #0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10a      	bne.n	80030b2 <xQueueGenericSend+0xbe>
	__asm volatile
 800309c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a0:	f383 8811 	msr	BASEPRI, r3
 80030a4:	f3bf 8f6f 	isb	sy
 80030a8:	f3bf 8f4f 	dsb	sy
 80030ac:	61fb      	str	r3, [r7, #28]
}
 80030ae:	bf00      	nop
 80030b0:	e7fe      	b.n	80030b0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030b2:	f002 f847 	bl	8005144 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030be:	429a      	cmp	r2, r3
 80030c0:	d302      	bcc.n	80030c8 <xQueueGenericSend+0xd4>
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d129      	bne.n	800311c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	68b9      	ldr	r1, [r7, #8]
 80030cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030ce:	f000 fa0b 	bl	80034e8 <prvCopyDataToQueue>
 80030d2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d010      	beq.n	80030fe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030de:	3324      	adds	r3, #36	; 0x24
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 ffe1 	bl	80040a8 <xTaskRemoveFromEventList>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d013      	beq.n	8003114 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80030ec:	4b3f      	ldr	r3, [pc, #252]	; (80031ec <xQueueGenericSend+0x1f8>)
 80030ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	f3bf 8f4f 	dsb	sy
 80030f8:	f3bf 8f6f 	isb	sy
 80030fc:	e00a      	b.n	8003114 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80030fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003100:	2b00      	cmp	r3, #0
 8003102:	d007      	beq.n	8003114 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003104:	4b39      	ldr	r3, [pc, #228]	; (80031ec <xQueueGenericSend+0x1f8>)
 8003106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	f3bf 8f4f 	dsb	sy
 8003110:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003114:	f002 f846 	bl	80051a4 <vPortExitCritical>
				return pdPASS;
 8003118:	2301      	movs	r3, #1
 800311a:	e063      	b.n	80031e4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d103      	bne.n	800312a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003122:	f002 f83f 	bl	80051a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003126:	2300      	movs	r3, #0
 8003128:	e05c      	b.n	80031e4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800312a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800312c:	2b00      	cmp	r3, #0
 800312e:	d106      	bne.n	800313e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003130:	f107 0314 	add.w	r3, r7, #20
 8003134:	4618      	mov	r0, r3
 8003136:	f001 f81b 	bl	8004170 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800313a:	2301      	movs	r3, #1
 800313c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800313e:	f002 f831 	bl	80051a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003142:	f000 fd7b 	bl	8003c3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003146:	f001 fffd 	bl	8005144 <vPortEnterCritical>
 800314a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003150:	b25b      	sxtb	r3, r3
 8003152:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003156:	d103      	bne.n	8003160 <xQueueGenericSend+0x16c>
 8003158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315a:	2200      	movs	r2, #0
 800315c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003162:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003166:	b25b      	sxtb	r3, r3
 8003168:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800316c:	d103      	bne.n	8003176 <xQueueGenericSend+0x182>
 800316e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003176:	f002 f815 	bl	80051a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800317a:	1d3a      	adds	r2, r7, #4
 800317c:	f107 0314 	add.w	r3, r7, #20
 8003180:	4611      	mov	r1, r2
 8003182:	4618      	mov	r0, r3
 8003184:	f001 f80a 	bl	800419c <xTaskCheckForTimeOut>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d124      	bne.n	80031d8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800318e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003190:	f000 faa2 	bl	80036d8 <prvIsQueueFull>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d018      	beq.n	80031cc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800319a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319c:	3310      	adds	r3, #16
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	4611      	mov	r1, r2
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 ff30 	bl	8004008 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80031a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031aa:	f000 fa2d 	bl	8003608 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80031ae:	f000 fd53 	bl	8003c58 <xTaskResumeAll>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f47f af7c 	bne.w	80030b2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80031ba:	4b0c      	ldr	r3, [pc, #48]	; (80031ec <xQueueGenericSend+0x1f8>)
 80031bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	f3bf 8f4f 	dsb	sy
 80031c6:	f3bf 8f6f 	isb	sy
 80031ca:	e772      	b.n	80030b2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80031cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031ce:	f000 fa1b 	bl	8003608 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031d2:	f000 fd41 	bl	8003c58 <xTaskResumeAll>
 80031d6:	e76c      	b.n	80030b2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80031d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031da:	f000 fa15 	bl	8003608 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031de:	f000 fd3b 	bl	8003c58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80031e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3738      	adds	r7, #56	; 0x38
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	e000ed04 	.word	0xe000ed04

080031f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b090      	sub	sp, #64	; 0x40
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
 80031fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10a      	bne.n	800321e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800320c:	f383 8811 	msr	BASEPRI, r3
 8003210:	f3bf 8f6f 	isb	sy
 8003214:	f3bf 8f4f 	dsb	sy
 8003218:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800321a:	bf00      	nop
 800321c:	e7fe      	b.n	800321c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d103      	bne.n	800322c <xQueueGenericSendFromISR+0x3c>
 8003224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <xQueueGenericSendFromISR+0x40>
 800322c:	2301      	movs	r3, #1
 800322e:	e000      	b.n	8003232 <xQueueGenericSendFromISR+0x42>
 8003230:	2300      	movs	r3, #0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10a      	bne.n	800324c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800323a:	f383 8811 	msr	BASEPRI, r3
 800323e:	f3bf 8f6f 	isb	sy
 8003242:	f3bf 8f4f 	dsb	sy
 8003246:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003248:	bf00      	nop
 800324a:	e7fe      	b.n	800324a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	2b02      	cmp	r3, #2
 8003250:	d103      	bne.n	800325a <xQueueGenericSendFromISR+0x6a>
 8003252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003256:	2b01      	cmp	r3, #1
 8003258:	d101      	bne.n	800325e <xQueueGenericSendFromISR+0x6e>
 800325a:	2301      	movs	r3, #1
 800325c:	e000      	b.n	8003260 <xQueueGenericSendFromISR+0x70>
 800325e:	2300      	movs	r3, #0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10a      	bne.n	800327a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003268:	f383 8811 	msr	BASEPRI, r3
 800326c:	f3bf 8f6f 	isb	sy
 8003270:	f3bf 8f4f 	dsb	sy
 8003274:	623b      	str	r3, [r7, #32]
}
 8003276:	bf00      	nop
 8003278:	e7fe      	b.n	8003278 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800327a:	f002 f845 	bl	8005308 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800327e:	f3ef 8211 	mrs	r2, BASEPRI
 8003282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003286:	f383 8811 	msr	BASEPRI, r3
 800328a:	f3bf 8f6f 	isb	sy
 800328e:	f3bf 8f4f 	dsb	sy
 8003292:	61fa      	str	r2, [r7, #28]
 8003294:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003296:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003298:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800329a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800329c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800329e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d302      	bcc.n	80032ac <xQueueGenericSendFromISR+0xbc>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d12f      	bne.n	800330c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80032ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ba:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	68b9      	ldr	r1, [r7, #8]
 80032c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80032c2:	f000 f911 	bl	80034e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80032c6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80032ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032ce:	d112      	bne.n	80032f6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d016      	beq.n	8003306 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032da:	3324      	adds	r3, #36	; 0x24
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 fee3 	bl	80040a8 <xTaskRemoveFromEventList>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00e      	beq.n	8003306 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00b      	beq.n	8003306 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	e007      	b.n	8003306 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80032f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80032fa:	3301      	adds	r3, #1
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	b25a      	sxtb	r2, r3
 8003300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003302:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003306:	2301      	movs	r3, #1
 8003308:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800330a:	e001      	b.n	8003310 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800330c:	2300      	movs	r3, #0
 800330e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003312:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800331a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800331c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800331e:	4618      	mov	r0, r3
 8003320:	3740      	adds	r7, #64	; 0x40
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
	...

08003328 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b08c      	sub	sp, #48	; 0x30
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003334:	2300      	movs	r3, #0
 8003336:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800333c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10a      	bne.n	8003358 <xQueueReceive+0x30>
	__asm volatile
 8003342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003346:	f383 8811 	msr	BASEPRI, r3
 800334a:	f3bf 8f6f 	isb	sy
 800334e:	f3bf 8f4f 	dsb	sy
 8003352:	623b      	str	r3, [r7, #32]
}
 8003354:	bf00      	nop
 8003356:	e7fe      	b.n	8003356 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d103      	bne.n	8003366 <xQueueReceive+0x3e>
 800335e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <xQueueReceive+0x42>
 8003366:	2301      	movs	r3, #1
 8003368:	e000      	b.n	800336c <xQueueReceive+0x44>
 800336a:	2300      	movs	r3, #0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d10a      	bne.n	8003386 <xQueueReceive+0x5e>
	__asm volatile
 8003370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003374:	f383 8811 	msr	BASEPRI, r3
 8003378:	f3bf 8f6f 	isb	sy
 800337c:	f3bf 8f4f 	dsb	sy
 8003380:	61fb      	str	r3, [r7, #28]
}
 8003382:	bf00      	nop
 8003384:	e7fe      	b.n	8003384 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003386:	f001 f84d 	bl	8004424 <xTaskGetSchedulerState>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d102      	bne.n	8003396 <xQueueReceive+0x6e>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <xQueueReceive+0x72>
 8003396:	2301      	movs	r3, #1
 8003398:	e000      	b.n	800339c <xQueueReceive+0x74>
 800339a:	2300      	movs	r3, #0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10a      	bne.n	80033b6 <xQueueReceive+0x8e>
	__asm volatile
 80033a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a4:	f383 8811 	msr	BASEPRI, r3
 80033a8:	f3bf 8f6f 	isb	sy
 80033ac:	f3bf 8f4f 	dsb	sy
 80033b0:	61bb      	str	r3, [r7, #24]
}
 80033b2:	bf00      	nop
 80033b4:	e7fe      	b.n	80033b4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80033b6:	f001 fec5 	bl	8005144 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033be:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d01f      	beq.n	8003406 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80033c6:	68b9      	ldr	r1, [r7, #8]
 80033c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033ca:	f000 f8f7 	bl	80035bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	1e5a      	subs	r2, r3, #1
 80033d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00f      	beq.n	80033fe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e0:	3310      	adds	r3, #16
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 fe60 	bl	80040a8 <xTaskRemoveFromEventList>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d007      	beq.n	80033fe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80033ee:	4b3d      	ldr	r3, [pc, #244]	; (80034e4 <xQueueReceive+0x1bc>)
 80033f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	f3bf 8f4f 	dsb	sy
 80033fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80033fe:	f001 fed1 	bl	80051a4 <vPortExitCritical>
				return pdPASS;
 8003402:	2301      	movs	r3, #1
 8003404:	e069      	b.n	80034da <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d103      	bne.n	8003414 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800340c:	f001 feca 	bl	80051a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003410:	2300      	movs	r3, #0
 8003412:	e062      	b.n	80034da <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003416:	2b00      	cmp	r3, #0
 8003418:	d106      	bne.n	8003428 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800341a:	f107 0310 	add.w	r3, r7, #16
 800341e:	4618      	mov	r0, r3
 8003420:	f000 fea6 	bl	8004170 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003424:	2301      	movs	r3, #1
 8003426:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003428:	f001 febc 	bl	80051a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800342c:	f000 fc06 	bl	8003c3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003430:	f001 fe88 	bl	8005144 <vPortEnterCritical>
 8003434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003436:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800343a:	b25b      	sxtb	r3, r3
 800343c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003440:	d103      	bne.n	800344a <xQueueReceive+0x122>
 8003442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800344a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003450:	b25b      	sxtb	r3, r3
 8003452:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003456:	d103      	bne.n	8003460 <xQueueReceive+0x138>
 8003458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003460:	f001 fea0 	bl	80051a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003464:	1d3a      	adds	r2, r7, #4
 8003466:	f107 0310 	add.w	r3, r7, #16
 800346a:	4611      	mov	r1, r2
 800346c:	4618      	mov	r0, r3
 800346e:	f000 fe95 	bl	800419c <xTaskCheckForTimeOut>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d123      	bne.n	80034c0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003478:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800347a:	f000 f917 	bl	80036ac <prvIsQueueEmpty>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d017      	beq.n	80034b4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003486:	3324      	adds	r3, #36	; 0x24
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	4611      	mov	r1, r2
 800348c:	4618      	mov	r0, r3
 800348e:	f000 fdbb 	bl	8004008 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003492:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003494:	f000 f8b8 	bl	8003608 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003498:	f000 fbde 	bl	8003c58 <xTaskResumeAll>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d189      	bne.n	80033b6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80034a2:	4b10      	ldr	r3, [pc, #64]	; (80034e4 <xQueueReceive+0x1bc>)
 80034a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	f3bf 8f4f 	dsb	sy
 80034ae:	f3bf 8f6f 	isb	sy
 80034b2:	e780      	b.n	80033b6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80034b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034b6:	f000 f8a7 	bl	8003608 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80034ba:	f000 fbcd 	bl	8003c58 <xTaskResumeAll>
 80034be:	e77a      	b.n	80033b6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80034c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034c2:	f000 f8a1 	bl	8003608 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80034c6:	f000 fbc7 	bl	8003c58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034cc:	f000 f8ee 	bl	80036ac <prvIsQueueEmpty>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f43f af6f 	beq.w	80033b6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80034d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3730      	adds	r7, #48	; 0x30
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	e000ed04 	.word	0xe000ed04

080034e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80034f4:	2300      	movs	r3, #0
 80034f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10d      	bne.n	8003522 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d14d      	bne.n	80035aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	4618      	mov	r0, r3
 8003514:	f000 ffa4 	bl	8004460 <xTaskPriorityDisinherit>
 8003518:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	609a      	str	r2, [r3, #8]
 8003520:	e043      	b.n	80035aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d119      	bne.n	800355c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6858      	ldr	r0, [r3, #4]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003530:	461a      	mov	r2, r3
 8003532:	68b9      	ldr	r1, [r7, #8]
 8003534:	f007 ffaf 	bl	800b496 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003540:	441a      	add	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	429a      	cmp	r2, r3
 8003550:	d32b      	bcc.n	80035aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	605a      	str	r2, [r3, #4]
 800355a:	e026      	b.n	80035aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	68d8      	ldr	r0, [r3, #12]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003564:	461a      	mov	r2, r3
 8003566:	68b9      	ldr	r1, [r7, #8]
 8003568:	f007 ff95 	bl	800b496 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	68da      	ldr	r2, [r3, #12]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003574:	425b      	negs	r3, r3
 8003576:	441a      	add	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	68da      	ldr	r2, [r3, #12]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	429a      	cmp	r2, r3
 8003586:	d207      	bcs.n	8003598 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	689a      	ldr	r2, [r3, #8]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	425b      	negs	r3, r3
 8003592:	441a      	add	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b02      	cmp	r3, #2
 800359c:	d105      	bne.n	80035aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d002      	beq.n	80035aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	3b01      	subs	r3, #1
 80035a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1c5a      	adds	r2, r3, #1
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80035b2:	697b      	ldr	r3, [r7, #20]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3718      	adds	r7, #24
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d018      	beq.n	8003600 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68da      	ldr	r2, [r3, #12]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	441a      	add	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68da      	ldr	r2, [r3, #12]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d303      	bcc.n	80035f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68d9      	ldr	r1, [r3, #12]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f8:	461a      	mov	r2, r3
 80035fa:	6838      	ldr	r0, [r7, #0]
 80035fc:	f007 ff4b 	bl	800b496 <memcpy>
	}
}
 8003600:	bf00      	nop
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003610:	f001 fd98 	bl	8005144 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800361a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800361c:	e011      	b.n	8003642 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	2b00      	cmp	r3, #0
 8003624:	d012      	beq.n	800364c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3324      	adds	r3, #36	; 0x24
 800362a:	4618      	mov	r0, r3
 800362c:	f000 fd3c 	bl	80040a8 <xTaskRemoveFromEventList>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003636:	f000 fe13 	bl	8004260 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800363a:	7bfb      	ldrb	r3, [r7, #15]
 800363c:	3b01      	subs	r3, #1
 800363e:	b2db      	uxtb	r3, r3
 8003640:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003646:	2b00      	cmp	r3, #0
 8003648:	dce9      	bgt.n	800361e <prvUnlockQueue+0x16>
 800364a:	e000      	b.n	800364e <prvUnlockQueue+0x46>
					break;
 800364c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	22ff      	movs	r2, #255	; 0xff
 8003652:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003656:	f001 fda5 	bl	80051a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800365a:	f001 fd73 	bl	8005144 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003664:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003666:	e011      	b.n	800368c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d012      	beq.n	8003696 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3310      	adds	r3, #16
 8003674:	4618      	mov	r0, r3
 8003676:	f000 fd17 	bl	80040a8 <xTaskRemoveFromEventList>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003680:	f000 fdee 	bl	8004260 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003684:	7bbb      	ldrb	r3, [r7, #14]
 8003686:	3b01      	subs	r3, #1
 8003688:	b2db      	uxtb	r3, r3
 800368a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800368c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003690:	2b00      	cmp	r3, #0
 8003692:	dce9      	bgt.n	8003668 <prvUnlockQueue+0x60>
 8003694:	e000      	b.n	8003698 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003696:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	22ff      	movs	r2, #255	; 0xff
 800369c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80036a0:	f001 fd80 	bl	80051a4 <vPortExitCritical>
}
 80036a4:	bf00      	nop
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80036b4:	f001 fd46 	bl	8005144 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d102      	bne.n	80036c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80036c0:	2301      	movs	r3, #1
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	e001      	b.n	80036ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80036c6:	2300      	movs	r3, #0
 80036c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80036ca:	f001 fd6b 	bl	80051a4 <vPortExitCritical>

	return xReturn;
 80036ce:	68fb      	ldr	r3, [r7, #12]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80036e0:	f001 fd30 	bl	8005144 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d102      	bne.n	80036f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80036f0:	2301      	movs	r3, #1
 80036f2:	60fb      	str	r3, [r7, #12]
 80036f4:	e001      	b.n	80036fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80036f6:	2300      	movs	r3, #0
 80036f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80036fa:	f001 fd53 	bl	80051a4 <vPortExitCritical>

	return xReturn;
 80036fe:	68fb      	ldr	r3, [r7, #12]
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003712:	2300      	movs	r3, #0
 8003714:	60fb      	str	r3, [r7, #12]
 8003716:	e014      	b.n	8003742 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003718:	4a0f      	ldr	r2, [pc, #60]	; (8003758 <vQueueAddToRegistry+0x50>)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10b      	bne.n	800373c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003724:	490c      	ldr	r1, [pc, #48]	; (8003758 <vQueueAddToRegistry+0x50>)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800372e:	4a0a      	ldr	r2, [pc, #40]	; (8003758 <vQueueAddToRegistry+0x50>)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	4413      	add	r3, r2
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800373a:	e006      	b.n	800374a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	3301      	adds	r3, #1
 8003740:	60fb      	str	r3, [r7, #12]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2b07      	cmp	r3, #7
 8003746:	d9e7      	bls.n	8003718 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003748:	bf00      	nop
 800374a:	bf00      	nop
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	2000114c 	.word	0x2000114c

0800375c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800376c:	f001 fcea 	bl	8005144 <vPortEnterCritical>
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003776:	b25b      	sxtb	r3, r3
 8003778:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800377c:	d103      	bne.n	8003786 <vQueueWaitForMessageRestricted+0x2a>
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800378c:	b25b      	sxtb	r3, r3
 800378e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003792:	d103      	bne.n	800379c <vQueueWaitForMessageRestricted+0x40>
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800379c:	f001 fd02 	bl	80051a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d106      	bne.n	80037b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	3324      	adds	r3, #36	; 0x24
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	68b9      	ldr	r1, [r7, #8]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f000 fc4d 	bl	8004050 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80037b6:	6978      	ldr	r0, [r7, #20]
 80037b8:	f7ff ff26 	bl	8003608 <prvUnlockQueue>
	}
 80037bc:	bf00      	nop
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b08e      	sub	sp, #56	; 0x38
 80037c8:	af04      	add	r7, sp, #16
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
 80037d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80037d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10a      	bne.n	80037ee <xTaskCreateStatic+0x2a>
	__asm volatile
 80037d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037dc:	f383 8811 	msr	BASEPRI, r3
 80037e0:	f3bf 8f6f 	isb	sy
 80037e4:	f3bf 8f4f 	dsb	sy
 80037e8:	623b      	str	r3, [r7, #32]
}
 80037ea:	bf00      	nop
 80037ec:	e7fe      	b.n	80037ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80037ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10a      	bne.n	800380a <xTaskCreateStatic+0x46>
	__asm volatile
 80037f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f8:	f383 8811 	msr	BASEPRI, r3
 80037fc:	f3bf 8f6f 	isb	sy
 8003800:	f3bf 8f4f 	dsb	sy
 8003804:	61fb      	str	r3, [r7, #28]
}
 8003806:	bf00      	nop
 8003808:	e7fe      	b.n	8003808 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800380a:	235c      	movs	r3, #92	; 0x5c
 800380c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	2b5c      	cmp	r3, #92	; 0x5c
 8003812:	d00a      	beq.n	800382a <xTaskCreateStatic+0x66>
	__asm volatile
 8003814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003818:	f383 8811 	msr	BASEPRI, r3
 800381c:	f3bf 8f6f 	isb	sy
 8003820:	f3bf 8f4f 	dsb	sy
 8003824:	61bb      	str	r3, [r7, #24]
}
 8003826:	bf00      	nop
 8003828:	e7fe      	b.n	8003828 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800382a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800382c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800382e:	2b00      	cmp	r3, #0
 8003830:	d01e      	beq.n	8003870 <xTaskCreateStatic+0xac>
 8003832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003834:	2b00      	cmp	r3, #0
 8003836:	d01b      	beq.n	8003870 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800383a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003840:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003844:	2202      	movs	r2, #2
 8003846:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800384a:	2300      	movs	r3, #0
 800384c:	9303      	str	r3, [sp, #12]
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	9302      	str	r3, [sp, #8]
 8003852:	f107 0314 	add.w	r3, r7, #20
 8003856:	9301      	str	r3, [sp, #4]
 8003858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385a:	9300      	str	r3, [sp, #0]
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	68b9      	ldr	r1, [r7, #8]
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 f850 	bl	8003908 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003868:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800386a:	f000 f8dd 	bl	8003a28 <prvAddNewTaskToReadyList>
 800386e:	e001      	b.n	8003874 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003870:	2300      	movs	r3, #0
 8003872:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003874:	697b      	ldr	r3, [r7, #20]
	}
 8003876:	4618      	mov	r0, r3
 8003878:	3728      	adds	r7, #40	; 0x28
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800387e:	b580      	push	{r7, lr}
 8003880:	b08c      	sub	sp, #48	; 0x30
 8003882:	af04      	add	r7, sp, #16
 8003884:	60f8      	str	r0, [r7, #12]
 8003886:	60b9      	str	r1, [r7, #8]
 8003888:	603b      	str	r3, [r7, #0]
 800388a:	4613      	mov	r3, r2
 800388c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800388e:	88fb      	ldrh	r3, [r7, #6]
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4618      	mov	r0, r3
 8003894:	f001 fd78 	bl	8005388 <pvPortMalloc>
 8003898:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00e      	beq.n	80038be <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80038a0:	205c      	movs	r0, #92	; 0x5c
 80038a2:	f001 fd71 	bl	8005388 <pvPortMalloc>
 80038a6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	631a      	str	r2, [r3, #48]	; 0x30
 80038b4:	e005      	b.n	80038c2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80038b6:	6978      	ldr	r0, [r7, #20]
 80038b8:	f001 fe32 	bl	8005520 <vPortFree>
 80038bc:	e001      	b.n	80038c2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80038be:	2300      	movs	r3, #0
 80038c0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d017      	beq.n	80038f8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80038d0:	88fa      	ldrh	r2, [r7, #6]
 80038d2:	2300      	movs	r3, #0
 80038d4:	9303      	str	r3, [sp, #12]
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	9302      	str	r3, [sp, #8]
 80038da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038dc:	9301      	str	r3, [sp, #4]
 80038de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	68b9      	ldr	r1, [r7, #8]
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f000 f80e 	bl	8003908 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038ec:	69f8      	ldr	r0, [r7, #28]
 80038ee:	f000 f89b 	bl	8003a28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80038f2:	2301      	movs	r3, #1
 80038f4:	61bb      	str	r3, [r7, #24]
 80038f6:	e002      	b.n	80038fe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80038f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038fc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80038fe:	69bb      	ldr	r3, [r7, #24]
	}
 8003900:	4618      	mov	r0, r3
 8003902:	3720      	adds	r7, #32
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b088      	sub	sp, #32
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003918:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	461a      	mov	r2, r3
 8003920:	21a5      	movs	r1, #165	; 0xa5
 8003922:	f007 fd47 	bl	800b3b4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003928:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003930:	3b01      	subs	r3, #1
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	f023 0307 	bic.w	r3, r3, #7
 800393e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00a      	beq.n	8003960 <prvInitialiseNewTask+0x58>
	__asm volatile
 800394a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394e:	f383 8811 	msr	BASEPRI, r3
 8003952:	f3bf 8f6f 	isb	sy
 8003956:	f3bf 8f4f 	dsb	sy
 800395a:	617b      	str	r3, [r7, #20]
}
 800395c:	bf00      	nop
 800395e:	e7fe      	b.n	800395e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d01f      	beq.n	80039a6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003966:	2300      	movs	r3, #0
 8003968:	61fb      	str	r3, [r7, #28]
 800396a:	e012      	b.n	8003992 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800396c:	68ba      	ldr	r2, [r7, #8]
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	4413      	add	r3, r2
 8003972:	7819      	ldrb	r1, [r3, #0]
 8003974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	4413      	add	r3, r2
 800397a:	3334      	adds	r3, #52	; 0x34
 800397c:	460a      	mov	r2, r1
 800397e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	4413      	add	r3, r2
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d006      	beq.n	800399a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	3301      	adds	r3, #1
 8003990:	61fb      	str	r3, [r7, #28]
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	2b0f      	cmp	r3, #15
 8003996:	d9e9      	bls.n	800396c <prvInitialiseNewTask+0x64>
 8003998:	e000      	b.n	800399c <prvInitialiseNewTask+0x94>
			{
				break;
 800399a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800399c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039a4:	e003      	b.n	80039ae <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80039a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80039ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b0:	2b37      	cmp	r3, #55	; 0x37
 80039b2:	d901      	bls.n	80039b8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80039b4:	2337      	movs	r3, #55	; 0x37
 80039b6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80039b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80039be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039c2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80039c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c6:	2200      	movs	r2, #0
 80039c8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80039ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039cc:	3304      	adds	r3, #4
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7ff f978 	bl	8002cc4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80039d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d6:	3318      	adds	r3, #24
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff f973 	bl	8002cc4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80039de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80039ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80039ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80039f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f6:	2200      	movs	r2, #0
 80039f8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80039fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	68f9      	ldr	r1, [r7, #12]
 8003a06:	69b8      	ldr	r0, [r7, #24]
 8003a08:	f001 fa70 	bl	8004eec <pxPortInitialiseStack>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a10:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d002      	beq.n	8003a1e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a1e:	bf00      	nop
 8003a20:	3720      	adds	r7, #32
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
	...

08003a28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a30:	f001 fb88 	bl	8005144 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a34:	4b2d      	ldr	r3, [pc, #180]	; (8003aec <prvAddNewTaskToReadyList+0xc4>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	4a2c      	ldr	r2, [pc, #176]	; (8003aec <prvAddNewTaskToReadyList+0xc4>)
 8003a3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a3e:	4b2c      	ldr	r3, [pc, #176]	; (8003af0 <prvAddNewTaskToReadyList+0xc8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d109      	bne.n	8003a5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a46:	4a2a      	ldr	r2, [pc, #168]	; (8003af0 <prvAddNewTaskToReadyList+0xc8>)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a4c:	4b27      	ldr	r3, [pc, #156]	; (8003aec <prvAddNewTaskToReadyList+0xc4>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d110      	bne.n	8003a76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a54:	f000 fc28 	bl	80042a8 <prvInitialiseTaskLists>
 8003a58:	e00d      	b.n	8003a76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a5a:	4b26      	ldr	r3, [pc, #152]	; (8003af4 <prvAddNewTaskToReadyList+0xcc>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d109      	bne.n	8003a76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a62:	4b23      	ldr	r3, [pc, #140]	; (8003af0 <prvAddNewTaskToReadyList+0xc8>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d802      	bhi.n	8003a76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003a70:	4a1f      	ldr	r2, [pc, #124]	; (8003af0 <prvAddNewTaskToReadyList+0xc8>)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003a76:	4b20      	ldr	r3, [pc, #128]	; (8003af8 <prvAddNewTaskToReadyList+0xd0>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	4a1e      	ldr	r2, [pc, #120]	; (8003af8 <prvAddNewTaskToReadyList+0xd0>)
 8003a7e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003a80:	4b1d      	ldr	r3, [pc, #116]	; (8003af8 <prvAddNewTaskToReadyList+0xd0>)
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a8c:	4b1b      	ldr	r3, [pc, #108]	; (8003afc <prvAddNewTaskToReadyList+0xd4>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d903      	bls.n	8003a9c <prvAddNewTaskToReadyList+0x74>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a98:	4a18      	ldr	r2, [pc, #96]	; (8003afc <prvAddNewTaskToReadyList+0xd4>)
 8003a9a:	6013      	str	r3, [r2, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4413      	add	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4a15      	ldr	r2, [pc, #84]	; (8003b00 <prvAddNewTaskToReadyList+0xd8>)
 8003aaa:	441a      	add	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	3304      	adds	r3, #4
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	4610      	mov	r0, r2
 8003ab4:	f7ff f913 	bl	8002cde <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003ab8:	f001 fb74 	bl	80051a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003abc:	4b0d      	ldr	r3, [pc, #52]	; (8003af4 <prvAddNewTaskToReadyList+0xcc>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00e      	beq.n	8003ae2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003ac4:	4b0a      	ldr	r3, [pc, #40]	; (8003af0 <prvAddNewTaskToReadyList+0xc8>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d207      	bcs.n	8003ae2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003ad2:	4b0c      	ldr	r3, [pc, #48]	; (8003b04 <prvAddNewTaskToReadyList+0xdc>)
 8003ad4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	f3bf 8f4f 	dsb	sy
 8003ade:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ae2:	bf00      	nop
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	20001660 	.word	0x20001660
 8003af0:	2000118c 	.word	0x2000118c
 8003af4:	2000166c 	.word	0x2000166c
 8003af8:	2000167c 	.word	0x2000167c
 8003afc:	20001668 	.word	0x20001668
 8003b00:	20001190 	.word	0x20001190
 8003b04:	e000ed04 	.word	0xe000ed04

08003b08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b10:	2300      	movs	r3, #0
 8003b12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d017      	beq.n	8003b4a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b1a:	4b13      	ldr	r3, [pc, #76]	; (8003b68 <vTaskDelay+0x60>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00a      	beq.n	8003b38 <vTaskDelay+0x30>
	__asm volatile
 8003b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b26:	f383 8811 	msr	BASEPRI, r3
 8003b2a:	f3bf 8f6f 	isb	sy
 8003b2e:	f3bf 8f4f 	dsb	sy
 8003b32:	60bb      	str	r3, [r7, #8]
}
 8003b34:	bf00      	nop
 8003b36:	e7fe      	b.n	8003b36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003b38:	f000 f880 	bl	8003c3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 fe32 	bl	80047a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b44:	f000 f888 	bl	8003c58 <xTaskResumeAll>
 8003b48:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d107      	bne.n	8003b60 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003b50:	4b06      	ldr	r3, [pc, #24]	; (8003b6c <vTaskDelay+0x64>)
 8003b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	f3bf 8f4f 	dsb	sy
 8003b5c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b60:	bf00      	nop
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	20001688 	.word	0x20001688
 8003b6c:	e000ed04 	.word	0xe000ed04

08003b70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b08a      	sub	sp, #40	; 0x28
 8003b74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b7e:	463a      	mov	r2, r7
 8003b80:	1d39      	adds	r1, r7, #4
 8003b82:	f107 0308 	add.w	r3, r7, #8
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7ff f848 	bl	8002c1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b8c:	6839      	ldr	r1, [r7, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	9202      	str	r2, [sp, #8]
 8003b94:	9301      	str	r3, [sp, #4]
 8003b96:	2300      	movs	r3, #0
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	460a      	mov	r2, r1
 8003b9e:	4921      	ldr	r1, [pc, #132]	; (8003c24 <vTaskStartScheduler+0xb4>)
 8003ba0:	4821      	ldr	r0, [pc, #132]	; (8003c28 <vTaskStartScheduler+0xb8>)
 8003ba2:	f7ff fe0f 	bl	80037c4 <xTaskCreateStatic>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	4a20      	ldr	r2, [pc, #128]	; (8003c2c <vTaskStartScheduler+0xbc>)
 8003baa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003bac:	4b1f      	ldr	r3, [pc, #124]	; (8003c2c <vTaskStartScheduler+0xbc>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d002      	beq.n	8003bba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	617b      	str	r3, [r7, #20]
 8003bb8:	e001      	b.n	8003bbe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d102      	bne.n	8003bca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003bc4:	f000 fe44 	bl	8004850 <xTimerCreateTimerTask>
 8003bc8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d116      	bne.n	8003bfe <vTaskStartScheduler+0x8e>
	__asm volatile
 8003bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd4:	f383 8811 	msr	BASEPRI, r3
 8003bd8:	f3bf 8f6f 	isb	sy
 8003bdc:	f3bf 8f4f 	dsb	sy
 8003be0:	613b      	str	r3, [r7, #16]
}
 8003be2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003be4:	4b12      	ldr	r3, [pc, #72]	; (8003c30 <vTaskStartScheduler+0xc0>)
 8003be6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003bec:	4b11      	ldr	r3, [pc, #68]	; (8003c34 <vTaskStartScheduler+0xc4>)
 8003bee:	2201      	movs	r2, #1
 8003bf0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003bf2:	4b11      	ldr	r3, [pc, #68]	; (8003c38 <vTaskStartScheduler+0xc8>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003bf8:	f001 fa02 	bl	8005000 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003bfc:	e00e      	b.n	8003c1c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c04:	d10a      	bne.n	8003c1c <vTaskStartScheduler+0xac>
	__asm volatile
 8003c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c0a:	f383 8811 	msr	BASEPRI, r3
 8003c0e:	f3bf 8f6f 	isb	sy
 8003c12:	f3bf 8f4f 	dsb	sy
 8003c16:	60fb      	str	r3, [r7, #12]
}
 8003c18:	bf00      	nop
 8003c1a:	e7fe      	b.n	8003c1a <vTaskStartScheduler+0xaa>
}
 8003c1c:	bf00      	nop
 8003c1e:	3718      	adds	r7, #24
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	0800c0b8 	.word	0x0800c0b8
 8003c28:	08004279 	.word	0x08004279
 8003c2c:	20001684 	.word	0x20001684
 8003c30:	20001680 	.word	0x20001680
 8003c34:	2000166c 	.word	0x2000166c
 8003c38:	20001664 	.word	0x20001664

08003c3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003c40:	4b04      	ldr	r3, [pc, #16]	; (8003c54 <vTaskSuspendAll+0x18>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	3301      	adds	r3, #1
 8003c46:	4a03      	ldr	r2, [pc, #12]	; (8003c54 <vTaskSuspendAll+0x18>)
 8003c48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003c4a:	bf00      	nop
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	20001688 	.word	0x20001688

08003c58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c62:	2300      	movs	r3, #0
 8003c64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c66:	4b42      	ldr	r3, [pc, #264]	; (8003d70 <xTaskResumeAll+0x118>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10a      	bne.n	8003c84 <xTaskResumeAll+0x2c>
	__asm volatile
 8003c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c72:	f383 8811 	msr	BASEPRI, r3
 8003c76:	f3bf 8f6f 	isb	sy
 8003c7a:	f3bf 8f4f 	dsb	sy
 8003c7e:	603b      	str	r3, [r7, #0]
}
 8003c80:	bf00      	nop
 8003c82:	e7fe      	b.n	8003c82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c84:	f001 fa5e 	bl	8005144 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c88:	4b39      	ldr	r3, [pc, #228]	; (8003d70 <xTaskResumeAll+0x118>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	4a38      	ldr	r2, [pc, #224]	; (8003d70 <xTaskResumeAll+0x118>)
 8003c90:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c92:	4b37      	ldr	r3, [pc, #220]	; (8003d70 <xTaskResumeAll+0x118>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d162      	bne.n	8003d60 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c9a:	4b36      	ldr	r3, [pc, #216]	; (8003d74 <xTaskResumeAll+0x11c>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d05e      	beq.n	8003d60 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ca2:	e02f      	b.n	8003d04 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ca4:	4b34      	ldr	r3, [pc, #208]	; (8003d78 <xTaskResumeAll+0x120>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	3318      	adds	r3, #24
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7ff f871 	bl	8002d98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	3304      	adds	r3, #4
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7ff f86c 	bl	8002d98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc4:	4b2d      	ldr	r3, [pc, #180]	; (8003d7c <xTaskResumeAll+0x124>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d903      	bls.n	8003cd4 <xTaskResumeAll+0x7c>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd0:	4a2a      	ldr	r2, [pc, #168]	; (8003d7c <xTaskResumeAll+0x124>)
 8003cd2:	6013      	str	r3, [r2, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd8:	4613      	mov	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4413      	add	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	4a27      	ldr	r2, [pc, #156]	; (8003d80 <xTaskResumeAll+0x128>)
 8003ce2:	441a      	add	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4610      	mov	r0, r2
 8003cec:	f7fe fff7 	bl	8002cde <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf4:	4b23      	ldr	r3, [pc, #140]	; (8003d84 <xTaskResumeAll+0x12c>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d302      	bcc.n	8003d04 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003cfe:	4b22      	ldr	r3, [pc, #136]	; (8003d88 <xTaskResumeAll+0x130>)
 8003d00:	2201      	movs	r2, #1
 8003d02:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d04:	4b1c      	ldr	r3, [pc, #112]	; (8003d78 <xTaskResumeAll+0x120>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1cb      	bne.n	8003ca4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d12:	f000 fb67 	bl	80043e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003d16:	4b1d      	ldr	r3, [pc, #116]	; (8003d8c <xTaskResumeAll+0x134>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d010      	beq.n	8003d44 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d22:	f000 f859 	bl	8003dd8 <xTaskIncrementTick>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d002      	beq.n	8003d32 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003d2c:	4b16      	ldr	r3, [pc, #88]	; (8003d88 <xTaskResumeAll+0x130>)
 8003d2e:	2201      	movs	r2, #1
 8003d30:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	3b01      	subs	r3, #1
 8003d36:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1f1      	bne.n	8003d22 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003d3e:	4b13      	ldr	r3, [pc, #76]	; (8003d8c <xTaskResumeAll+0x134>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d44:	4b10      	ldr	r3, [pc, #64]	; (8003d88 <xTaskResumeAll+0x130>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d009      	beq.n	8003d60 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d50:	4b0f      	ldr	r3, [pc, #60]	; (8003d90 <xTaskResumeAll+0x138>)
 8003d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	f3bf 8f4f 	dsb	sy
 8003d5c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d60:	f001 fa20 	bl	80051a4 <vPortExitCritical>

	return xAlreadyYielded;
 8003d64:	68bb      	ldr	r3, [r7, #8]
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	20001688 	.word	0x20001688
 8003d74:	20001660 	.word	0x20001660
 8003d78:	20001620 	.word	0x20001620
 8003d7c:	20001668 	.word	0x20001668
 8003d80:	20001190 	.word	0x20001190
 8003d84:	2000118c 	.word	0x2000118c
 8003d88:	20001674 	.word	0x20001674
 8003d8c:	20001670 	.word	0x20001670
 8003d90:	e000ed04 	.word	0xe000ed04

08003d94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003d9a:	4b05      	ldr	r3, [pc, #20]	; (8003db0 <xTaskGetTickCount+0x1c>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003da0:	687b      	ldr	r3, [r7, #4]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	20001664 	.word	0x20001664

08003db4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003dba:	f001 faa5 	bl	8005308 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8003dc2:	4b04      	ldr	r3, [pc, #16]	; (8003dd4 <xTaskGetTickCountFromISR+0x20>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003dc8:	683b      	ldr	r3, [r7, #0]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	20001664 	.word	0x20001664

08003dd8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003dde:	2300      	movs	r3, #0
 8003de0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003de2:	4b4f      	ldr	r3, [pc, #316]	; (8003f20 <xTaskIncrementTick+0x148>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f040 808f 	bne.w	8003f0a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003dec:	4b4d      	ldr	r3, [pc, #308]	; (8003f24 <xTaskIncrementTick+0x14c>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	3301      	adds	r3, #1
 8003df2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003df4:	4a4b      	ldr	r2, [pc, #300]	; (8003f24 <xTaskIncrementTick+0x14c>)
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d120      	bne.n	8003e42 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e00:	4b49      	ldr	r3, [pc, #292]	; (8003f28 <xTaskIncrementTick+0x150>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00a      	beq.n	8003e20 <xTaskIncrementTick+0x48>
	__asm volatile
 8003e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0e:	f383 8811 	msr	BASEPRI, r3
 8003e12:	f3bf 8f6f 	isb	sy
 8003e16:	f3bf 8f4f 	dsb	sy
 8003e1a:	603b      	str	r3, [r7, #0]
}
 8003e1c:	bf00      	nop
 8003e1e:	e7fe      	b.n	8003e1e <xTaskIncrementTick+0x46>
 8003e20:	4b41      	ldr	r3, [pc, #260]	; (8003f28 <xTaskIncrementTick+0x150>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	4b41      	ldr	r3, [pc, #260]	; (8003f2c <xTaskIncrementTick+0x154>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a3f      	ldr	r2, [pc, #252]	; (8003f28 <xTaskIncrementTick+0x150>)
 8003e2c:	6013      	str	r3, [r2, #0]
 8003e2e:	4a3f      	ldr	r2, [pc, #252]	; (8003f2c <xTaskIncrementTick+0x154>)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6013      	str	r3, [r2, #0]
 8003e34:	4b3e      	ldr	r3, [pc, #248]	; (8003f30 <xTaskIncrementTick+0x158>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	4a3d      	ldr	r2, [pc, #244]	; (8003f30 <xTaskIncrementTick+0x158>)
 8003e3c:	6013      	str	r3, [r2, #0]
 8003e3e:	f000 fad1 	bl	80043e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e42:	4b3c      	ldr	r3, [pc, #240]	; (8003f34 <xTaskIncrementTick+0x15c>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d349      	bcc.n	8003ee0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e4c:	4b36      	ldr	r3, [pc, #216]	; (8003f28 <xTaskIncrementTick+0x150>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d104      	bne.n	8003e60 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e56:	4b37      	ldr	r3, [pc, #220]	; (8003f34 <xTaskIncrementTick+0x15c>)
 8003e58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e5c:	601a      	str	r2, [r3, #0]
					break;
 8003e5e:	e03f      	b.n	8003ee0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e60:	4b31      	ldr	r3, [pc, #196]	; (8003f28 <xTaskIncrementTick+0x150>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d203      	bcs.n	8003e80 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e78:	4a2e      	ldr	r2, [pc, #184]	; (8003f34 <xTaskIncrementTick+0x15c>)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003e7e:	e02f      	b.n	8003ee0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	3304      	adds	r3, #4
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7fe ff87 	bl	8002d98 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d004      	beq.n	8003e9c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	3318      	adds	r3, #24
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fe ff7e 	bl	8002d98 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea0:	4b25      	ldr	r3, [pc, #148]	; (8003f38 <xTaskIncrementTick+0x160>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d903      	bls.n	8003eb0 <xTaskIncrementTick+0xd8>
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eac:	4a22      	ldr	r2, [pc, #136]	; (8003f38 <xTaskIncrementTick+0x160>)
 8003eae:	6013      	str	r3, [r2, #0]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4a1f      	ldr	r2, [pc, #124]	; (8003f3c <xTaskIncrementTick+0x164>)
 8003ebe:	441a      	add	r2, r3
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4610      	mov	r0, r2
 8003ec8:	f7fe ff09 	bl	8002cde <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed0:	4b1b      	ldr	r3, [pc, #108]	; (8003f40 <xTaskIncrementTick+0x168>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d3b8      	bcc.n	8003e4c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003eda:	2301      	movs	r3, #1
 8003edc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ede:	e7b5      	b.n	8003e4c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ee0:	4b17      	ldr	r3, [pc, #92]	; (8003f40 <xTaskIncrementTick+0x168>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee6:	4915      	ldr	r1, [pc, #84]	; (8003f3c <xTaskIncrementTick+0x164>)
 8003ee8:	4613      	mov	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	440b      	add	r3, r1
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d901      	bls.n	8003efc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003efc:	4b11      	ldr	r3, [pc, #68]	; (8003f44 <xTaskIncrementTick+0x16c>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d007      	beq.n	8003f14 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003f04:	2301      	movs	r3, #1
 8003f06:	617b      	str	r3, [r7, #20]
 8003f08:	e004      	b.n	8003f14 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003f0a:	4b0f      	ldr	r3, [pc, #60]	; (8003f48 <xTaskIncrementTick+0x170>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	4a0d      	ldr	r2, [pc, #52]	; (8003f48 <xTaskIncrementTick+0x170>)
 8003f12:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003f14:	697b      	ldr	r3, [r7, #20]
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	20001688 	.word	0x20001688
 8003f24:	20001664 	.word	0x20001664
 8003f28:	20001618 	.word	0x20001618
 8003f2c:	2000161c 	.word	0x2000161c
 8003f30:	20001678 	.word	0x20001678
 8003f34:	20001680 	.word	0x20001680
 8003f38:	20001668 	.word	0x20001668
 8003f3c:	20001190 	.word	0x20001190
 8003f40:	2000118c 	.word	0x2000118c
 8003f44:	20001674 	.word	0x20001674
 8003f48:	20001670 	.word	0x20001670

08003f4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f52:	4b28      	ldr	r3, [pc, #160]	; (8003ff4 <vTaskSwitchContext+0xa8>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f5a:	4b27      	ldr	r3, [pc, #156]	; (8003ff8 <vTaskSwitchContext+0xac>)
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f60:	e041      	b.n	8003fe6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003f62:	4b25      	ldr	r3, [pc, #148]	; (8003ff8 <vTaskSwitchContext+0xac>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f68:	4b24      	ldr	r3, [pc, #144]	; (8003ffc <vTaskSwitchContext+0xb0>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	60fb      	str	r3, [r7, #12]
 8003f6e:	e010      	b.n	8003f92 <vTaskSwitchContext+0x46>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10a      	bne.n	8003f8c <vTaskSwitchContext+0x40>
	__asm volatile
 8003f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7a:	f383 8811 	msr	BASEPRI, r3
 8003f7e:	f3bf 8f6f 	isb	sy
 8003f82:	f3bf 8f4f 	dsb	sy
 8003f86:	607b      	str	r3, [r7, #4]
}
 8003f88:	bf00      	nop
 8003f8a:	e7fe      	b.n	8003f8a <vTaskSwitchContext+0x3e>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	491b      	ldr	r1, [pc, #108]	; (8004000 <vTaskSwitchContext+0xb4>)
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	4613      	mov	r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	4413      	add	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	440b      	add	r3, r1
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d0e4      	beq.n	8003f70 <vTaskSwitchContext+0x24>
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4413      	add	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4a13      	ldr	r2, [pc, #76]	; (8004000 <vTaskSwitchContext+0xb4>)
 8003fb2:	4413      	add	r3, r2
 8003fb4:	60bb      	str	r3, [r7, #8]
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	605a      	str	r2, [r3, #4]
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	3308      	adds	r3, #8
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d104      	bne.n	8003fd6 <vTaskSwitchContext+0x8a>
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	605a      	str	r2, [r3, #4]
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	4a09      	ldr	r2, [pc, #36]	; (8004004 <vTaskSwitchContext+0xb8>)
 8003fde:	6013      	str	r3, [r2, #0]
 8003fe0:	4a06      	ldr	r2, [pc, #24]	; (8003ffc <vTaskSwitchContext+0xb0>)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6013      	str	r3, [r2, #0]
}
 8003fe6:	bf00      	nop
 8003fe8:	3714      	adds	r7, #20
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	20001688 	.word	0x20001688
 8003ff8:	20001674 	.word	0x20001674
 8003ffc:	20001668 	.word	0x20001668
 8004000:	20001190 	.word	0x20001190
 8004004:	2000118c 	.word	0x2000118c

08004008 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10a      	bne.n	800402e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401c:	f383 8811 	msr	BASEPRI, r3
 8004020:	f3bf 8f6f 	isb	sy
 8004024:	f3bf 8f4f 	dsb	sy
 8004028:	60fb      	str	r3, [r7, #12]
}
 800402a:	bf00      	nop
 800402c:	e7fe      	b.n	800402c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800402e:	4b07      	ldr	r3, [pc, #28]	; (800404c <vTaskPlaceOnEventList+0x44>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	3318      	adds	r3, #24
 8004034:	4619      	mov	r1, r3
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7fe fe75 	bl	8002d26 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800403c:	2101      	movs	r1, #1
 800403e:	6838      	ldr	r0, [r7, #0]
 8004040:	f000 fbb2 	bl	80047a8 <prvAddCurrentTaskToDelayedList>
}
 8004044:	bf00      	nop
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	2000118c 	.word	0x2000118c

08004050 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10a      	bne.n	8004078 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004066:	f383 8811 	msr	BASEPRI, r3
 800406a:	f3bf 8f6f 	isb	sy
 800406e:	f3bf 8f4f 	dsb	sy
 8004072:	617b      	str	r3, [r7, #20]
}
 8004074:	bf00      	nop
 8004076:	e7fe      	b.n	8004076 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004078:	4b0a      	ldr	r3, [pc, #40]	; (80040a4 <vTaskPlaceOnEventListRestricted+0x54>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	3318      	adds	r3, #24
 800407e:	4619      	mov	r1, r3
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f7fe fe2c 	bl	8002cde <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d002      	beq.n	8004092 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800408c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004090:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004092:	6879      	ldr	r1, [r7, #4]
 8004094:	68b8      	ldr	r0, [r7, #8]
 8004096:	f000 fb87 	bl	80047a8 <prvAddCurrentTaskToDelayedList>
	}
 800409a:	bf00      	nop
 800409c:	3718      	adds	r7, #24
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	2000118c 	.word	0x2000118c

080040a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10a      	bne.n	80040d4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80040be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c2:	f383 8811 	msr	BASEPRI, r3
 80040c6:	f3bf 8f6f 	isb	sy
 80040ca:	f3bf 8f4f 	dsb	sy
 80040ce:	60fb      	str	r3, [r7, #12]
}
 80040d0:	bf00      	nop
 80040d2:	e7fe      	b.n	80040d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	3318      	adds	r3, #24
 80040d8:	4618      	mov	r0, r3
 80040da:	f7fe fe5d 	bl	8002d98 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040de:	4b1e      	ldr	r3, [pc, #120]	; (8004158 <xTaskRemoveFromEventList+0xb0>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d11d      	bne.n	8004122 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	3304      	adds	r3, #4
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fe fe54 	bl	8002d98 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f4:	4b19      	ldr	r3, [pc, #100]	; (800415c <xTaskRemoveFromEventList+0xb4>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d903      	bls.n	8004104 <xTaskRemoveFromEventList+0x5c>
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004100:	4a16      	ldr	r2, [pc, #88]	; (800415c <xTaskRemoveFromEventList+0xb4>)
 8004102:	6013      	str	r3, [r2, #0]
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004108:	4613      	mov	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4a13      	ldr	r2, [pc, #76]	; (8004160 <xTaskRemoveFromEventList+0xb8>)
 8004112:	441a      	add	r2, r3
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	3304      	adds	r3, #4
 8004118:	4619      	mov	r1, r3
 800411a:	4610      	mov	r0, r2
 800411c:	f7fe fddf 	bl	8002cde <vListInsertEnd>
 8004120:	e005      	b.n	800412e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	3318      	adds	r3, #24
 8004126:	4619      	mov	r1, r3
 8004128:	480e      	ldr	r0, [pc, #56]	; (8004164 <xTaskRemoveFromEventList+0xbc>)
 800412a:	f7fe fdd8 	bl	8002cde <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004132:	4b0d      	ldr	r3, [pc, #52]	; (8004168 <xTaskRemoveFromEventList+0xc0>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004138:	429a      	cmp	r2, r3
 800413a:	d905      	bls.n	8004148 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800413c:	2301      	movs	r3, #1
 800413e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004140:	4b0a      	ldr	r3, [pc, #40]	; (800416c <xTaskRemoveFromEventList+0xc4>)
 8004142:	2201      	movs	r2, #1
 8004144:	601a      	str	r2, [r3, #0]
 8004146:	e001      	b.n	800414c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004148:	2300      	movs	r3, #0
 800414a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800414c:	697b      	ldr	r3, [r7, #20]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3718      	adds	r7, #24
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	20001688 	.word	0x20001688
 800415c:	20001668 	.word	0x20001668
 8004160:	20001190 	.word	0x20001190
 8004164:	20001620 	.word	0x20001620
 8004168:	2000118c 	.word	0x2000118c
 800416c:	20001674 	.word	0x20001674

08004170 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004178:	4b06      	ldr	r3, [pc, #24]	; (8004194 <vTaskInternalSetTimeOutState+0x24>)
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004180:	4b05      	ldr	r3, [pc, #20]	; (8004198 <vTaskInternalSetTimeOutState+0x28>)
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	605a      	str	r2, [r3, #4]
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	20001678 	.word	0x20001678
 8004198:	20001664 	.word	0x20001664

0800419c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b088      	sub	sp, #32
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10a      	bne.n	80041c2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80041ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b0:	f383 8811 	msr	BASEPRI, r3
 80041b4:	f3bf 8f6f 	isb	sy
 80041b8:	f3bf 8f4f 	dsb	sy
 80041bc:	613b      	str	r3, [r7, #16]
}
 80041be:	bf00      	nop
 80041c0:	e7fe      	b.n	80041c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10a      	bne.n	80041de <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80041c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041cc:	f383 8811 	msr	BASEPRI, r3
 80041d0:	f3bf 8f6f 	isb	sy
 80041d4:	f3bf 8f4f 	dsb	sy
 80041d8:	60fb      	str	r3, [r7, #12]
}
 80041da:	bf00      	nop
 80041dc:	e7fe      	b.n	80041dc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80041de:	f000 ffb1 	bl	8005144 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80041e2:	4b1d      	ldr	r3, [pc, #116]	; (8004258 <xTaskCheckForTimeOut+0xbc>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	69ba      	ldr	r2, [r7, #24]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041fa:	d102      	bne.n	8004202 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80041fc:	2300      	movs	r3, #0
 80041fe:	61fb      	str	r3, [r7, #28]
 8004200:	e023      	b.n	800424a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	4b15      	ldr	r3, [pc, #84]	; (800425c <xTaskCheckForTimeOut+0xc0>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	429a      	cmp	r2, r3
 800420c:	d007      	beq.n	800421e <xTaskCheckForTimeOut+0x82>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	429a      	cmp	r2, r3
 8004216:	d302      	bcc.n	800421e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004218:	2301      	movs	r3, #1
 800421a:	61fb      	str	r3, [r7, #28]
 800421c:	e015      	b.n	800424a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	429a      	cmp	r2, r3
 8004226:	d20b      	bcs.n	8004240 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	1ad2      	subs	r2, r2, r3
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f7ff ff9b 	bl	8004170 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800423a:	2300      	movs	r3, #0
 800423c:	61fb      	str	r3, [r7, #28]
 800423e:	e004      	b.n	800424a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	2200      	movs	r2, #0
 8004244:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004246:	2301      	movs	r3, #1
 8004248:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800424a:	f000 ffab 	bl	80051a4 <vPortExitCritical>

	return xReturn;
 800424e:	69fb      	ldr	r3, [r7, #28]
}
 8004250:	4618      	mov	r0, r3
 8004252:	3720      	adds	r7, #32
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	20001664 	.word	0x20001664
 800425c:	20001678 	.word	0x20001678

08004260 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004260:	b480      	push	{r7}
 8004262:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004264:	4b03      	ldr	r3, [pc, #12]	; (8004274 <vTaskMissedYield+0x14>)
 8004266:	2201      	movs	r2, #1
 8004268:	601a      	str	r2, [r3, #0]
}
 800426a:	bf00      	nop
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	20001674 	.word	0x20001674

08004278 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004280:	f000 f852 	bl	8004328 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004284:	4b06      	ldr	r3, [pc, #24]	; (80042a0 <prvIdleTask+0x28>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d9f9      	bls.n	8004280 <prvIdleTask+0x8>
			{
				taskYIELD();
 800428c:	4b05      	ldr	r3, [pc, #20]	; (80042a4 <prvIdleTask+0x2c>)
 800428e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	f3bf 8f4f 	dsb	sy
 8004298:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800429c:	e7f0      	b.n	8004280 <prvIdleTask+0x8>
 800429e:	bf00      	nop
 80042a0:	20001190 	.word	0x20001190
 80042a4:	e000ed04 	.word	0xe000ed04

080042a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042ae:	2300      	movs	r3, #0
 80042b0:	607b      	str	r3, [r7, #4]
 80042b2:	e00c      	b.n	80042ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	4613      	mov	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	4413      	add	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	4a12      	ldr	r2, [pc, #72]	; (8004308 <prvInitialiseTaskLists+0x60>)
 80042c0:	4413      	add	r3, r2
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7fe fcde 	bl	8002c84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3301      	adds	r3, #1
 80042cc:	607b      	str	r3, [r7, #4]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b37      	cmp	r3, #55	; 0x37
 80042d2:	d9ef      	bls.n	80042b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80042d4:	480d      	ldr	r0, [pc, #52]	; (800430c <prvInitialiseTaskLists+0x64>)
 80042d6:	f7fe fcd5 	bl	8002c84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80042da:	480d      	ldr	r0, [pc, #52]	; (8004310 <prvInitialiseTaskLists+0x68>)
 80042dc:	f7fe fcd2 	bl	8002c84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80042e0:	480c      	ldr	r0, [pc, #48]	; (8004314 <prvInitialiseTaskLists+0x6c>)
 80042e2:	f7fe fccf 	bl	8002c84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80042e6:	480c      	ldr	r0, [pc, #48]	; (8004318 <prvInitialiseTaskLists+0x70>)
 80042e8:	f7fe fccc 	bl	8002c84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80042ec:	480b      	ldr	r0, [pc, #44]	; (800431c <prvInitialiseTaskLists+0x74>)
 80042ee:	f7fe fcc9 	bl	8002c84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80042f2:	4b0b      	ldr	r3, [pc, #44]	; (8004320 <prvInitialiseTaskLists+0x78>)
 80042f4:	4a05      	ldr	r2, [pc, #20]	; (800430c <prvInitialiseTaskLists+0x64>)
 80042f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80042f8:	4b0a      	ldr	r3, [pc, #40]	; (8004324 <prvInitialiseTaskLists+0x7c>)
 80042fa:	4a05      	ldr	r2, [pc, #20]	; (8004310 <prvInitialiseTaskLists+0x68>)
 80042fc:	601a      	str	r2, [r3, #0]
}
 80042fe:	bf00      	nop
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	20001190 	.word	0x20001190
 800430c:	200015f0 	.word	0x200015f0
 8004310:	20001604 	.word	0x20001604
 8004314:	20001620 	.word	0x20001620
 8004318:	20001634 	.word	0x20001634
 800431c:	2000164c 	.word	0x2000164c
 8004320:	20001618 	.word	0x20001618
 8004324:	2000161c 	.word	0x2000161c

08004328 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800432e:	e019      	b.n	8004364 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004330:	f000 ff08 	bl	8005144 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004334:	4b10      	ldr	r3, [pc, #64]	; (8004378 <prvCheckTasksWaitingTermination+0x50>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3304      	adds	r3, #4
 8004340:	4618      	mov	r0, r3
 8004342:	f7fe fd29 	bl	8002d98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004346:	4b0d      	ldr	r3, [pc, #52]	; (800437c <prvCheckTasksWaitingTermination+0x54>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	3b01      	subs	r3, #1
 800434c:	4a0b      	ldr	r2, [pc, #44]	; (800437c <prvCheckTasksWaitingTermination+0x54>)
 800434e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004350:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <prvCheckTasksWaitingTermination+0x58>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	3b01      	subs	r3, #1
 8004356:	4a0a      	ldr	r2, [pc, #40]	; (8004380 <prvCheckTasksWaitingTermination+0x58>)
 8004358:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800435a:	f000 ff23 	bl	80051a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f810 	bl	8004384 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004364:	4b06      	ldr	r3, [pc, #24]	; (8004380 <prvCheckTasksWaitingTermination+0x58>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1e1      	bne.n	8004330 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800436c:	bf00      	nop
 800436e:	bf00      	nop
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	20001634 	.word	0x20001634
 800437c:	20001660 	.word	0x20001660
 8004380:	20001648 	.word	0x20001648

08004384 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004392:	2b00      	cmp	r3, #0
 8004394:	d108      	bne.n	80043a8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439a:	4618      	mov	r0, r3
 800439c:	f001 f8c0 	bl	8005520 <vPortFree>
				vPortFree( pxTCB );
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f001 f8bd 	bl	8005520 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80043a6:	e018      	b.n	80043da <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d103      	bne.n	80043ba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f001 f8b4 	bl	8005520 <vPortFree>
	}
 80043b8:	e00f      	b.n	80043da <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d00a      	beq.n	80043da <prvDeleteTCB+0x56>
	__asm volatile
 80043c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c8:	f383 8811 	msr	BASEPRI, r3
 80043cc:	f3bf 8f6f 	isb	sy
 80043d0:	f3bf 8f4f 	dsb	sy
 80043d4:	60fb      	str	r3, [r7, #12]
}
 80043d6:	bf00      	nop
 80043d8:	e7fe      	b.n	80043d8 <prvDeleteTCB+0x54>
	}
 80043da:	bf00      	nop
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
	...

080043e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043ea:	4b0c      	ldr	r3, [pc, #48]	; (800441c <prvResetNextTaskUnblockTime+0x38>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d104      	bne.n	80043fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80043f4:	4b0a      	ldr	r3, [pc, #40]	; (8004420 <prvResetNextTaskUnblockTime+0x3c>)
 80043f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80043fc:	e008      	b.n	8004410 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043fe:	4b07      	ldr	r3, [pc, #28]	; (800441c <prvResetNextTaskUnblockTime+0x38>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	4a04      	ldr	r2, [pc, #16]	; (8004420 <prvResetNextTaskUnblockTime+0x3c>)
 800440e:	6013      	str	r3, [r2, #0]
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr
 800441c:	20001618 	.word	0x20001618
 8004420:	20001680 	.word	0x20001680

08004424 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800442a:	4b0b      	ldr	r3, [pc, #44]	; (8004458 <xTaskGetSchedulerState+0x34>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d102      	bne.n	8004438 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004432:	2301      	movs	r3, #1
 8004434:	607b      	str	r3, [r7, #4]
 8004436:	e008      	b.n	800444a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004438:	4b08      	ldr	r3, [pc, #32]	; (800445c <xTaskGetSchedulerState+0x38>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d102      	bne.n	8004446 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004440:	2302      	movs	r3, #2
 8004442:	607b      	str	r3, [r7, #4]
 8004444:	e001      	b.n	800444a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004446:	2300      	movs	r3, #0
 8004448:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800444a:	687b      	ldr	r3, [r7, #4]
	}
 800444c:	4618      	mov	r0, r3
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	2000166c 	.word	0x2000166c
 800445c:	20001688 	.word	0x20001688

08004460 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800446c:	2300      	movs	r3, #0
 800446e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d056      	beq.n	8004524 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004476:	4b2e      	ldr	r3, [pc, #184]	; (8004530 <xTaskPriorityDisinherit+0xd0>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	429a      	cmp	r2, r3
 800447e:	d00a      	beq.n	8004496 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004484:	f383 8811 	msr	BASEPRI, r3
 8004488:	f3bf 8f6f 	isb	sy
 800448c:	f3bf 8f4f 	dsb	sy
 8004490:	60fb      	str	r3, [r7, #12]
}
 8004492:	bf00      	nop
 8004494:	e7fe      	b.n	8004494 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10a      	bne.n	80044b4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800449e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a2:	f383 8811 	msr	BASEPRI, r3
 80044a6:	f3bf 8f6f 	isb	sy
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	60bb      	str	r3, [r7, #8]
}
 80044b0:	bf00      	nop
 80044b2:	e7fe      	b.n	80044b2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b8:	1e5a      	subs	r2, r3, #1
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d02c      	beq.n	8004524 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d128      	bne.n	8004524 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	3304      	adds	r3, #4
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7fe fc5e 	bl	8002d98 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f4:	4b0f      	ldr	r3, [pc, #60]	; (8004534 <xTaskPriorityDisinherit+0xd4>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d903      	bls.n	8004504 <xTaskPriorityDisinherit+0xa4>
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004500:	4a0c      	ldr	r2, [pc, #48]	; (8004534 <xTaskPriorityDisinherit+0xd4>)
 8004502:	6013      	str	r3, [r2, #0]
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004508:	4613      	mov	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4413      	add	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4a09      	ldr	r2, [pc, #36]	; (8004538 <xTaskPriorityDisinherit+0xd8>)
 8004512:	441a      	add	r2, r3
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	3304      	adds	r3, #4
 8004518:	4619      	mov	r1, r3
 800451a:	4610      	mov	r0, r2
 800451c:	f7fe fbdf 	bl	8002cde <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004520:	2301      	movs	r3, #1
 8004522:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004524:	697b      	ldr	r3, [r7, #20]
	}
 8004526:	4618      	mov	r0, r3
 8004528:	3718      	adds	r7, #24
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	2000118c 	.word	0x2000118c
 8004534:	20001668 	.word	0x20001668
 8004538:	20001190 	.word	0x20001190

0800453c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
 8004548:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800454a:	f000 fdfb 	bl	8005144 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800454e:	4b26      	ldr	r3, [pc, #152]	; (80045e8 <xTaskNotifyWait+0xac>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b02      	cmp	r3, #2
 800455a:	d01a      	beq.n	8004592 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800455c:	4b22      	ldr	r3, [pc, #136]	; (80045e8 <xTaskNotifyWait+0xac>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	43d2      	mvns	r2, r2
 8004566:	400a      	ands	r2, r1
 8004568:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800456a:	4b1f      	ldr	r3, [pc, #124]	; (80045e8 <xTaskNotifyWait+0xac>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00b      	beq.n	8004592 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800457a:	2101      	movs	r1, #1
 800457c:	6838      	ldr	r0, [r7, #0]
 800457e:	f000 f913 	bl	80047a8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8004582:	4b1a      	ldr	r3, [pc, #104]	; (80045ec <xTaskNotifyWait+0xb0>)
 8004584:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	f3bf 8f4f 	dsb	sy
 800458e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004592:	f000 fe07 	bl	80051a4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8004596:	f000 fdd5 	bl	8005144 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d004      	beq.n	80045aa <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80045a0:	4b11      	ldr	r3, [pc, #68]	; (80045e8 <xTaskNotifyWait+0xac>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80045aa:	4b0f      	ldr	r3, [pc, #60]	; (80045e8 <xTaskNotifyWait+0xac>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d002      	beq.n	80045be <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80045b8:	2300      	movs	r3, #0
 80045ba:	617b      	str	r3, [r7, #20]
 80045bc:	e008      	b.n	80045d0 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80045be:	4b0a      	ldr	r3, [pc, #40]	; (80045e8 <xTaskNotifyWait+0xac>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	43d2      	mvns	r2, r2
 80045c8:	400a      	ands	r2, r1
 80045ca:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 80045cc:	2301      	movs	r3, #1
 80045ce:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80045d0:	4b05      	ldr	r3, [pc, #20]	; (80045e8 <xTaskNotifyWait+0xac>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 80045da:	f000 fde3 	bl	80051a4 <vPortExitCritical>

		return xReturn;
 80045de:	697b      	ldr	r3, [r7, #20]
	}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3718      	adds	r7, #24
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	2000118c 	.word	0x2000118c
 80045ec:	e000ed04 	.word	0xe000ed04

080045f0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b08e      	sub	sp, #56	; 0x38
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	603b      	str	r3, [r7, #0]
 80045fc:	4613      	mov	r3, r2
 80045fe:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8004600:	2301      	movs	r3, #1
 8004602:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10a      	bne.n	8004620 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800460a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460e:	f383 8811 	msr	BASEPRI, r3
 8004612:	f3bf 8f6f 	isb	sy
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800461c:	bf00      	nop
 800461e:	e7fe      	b.n	800461e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004620:	f000 fe72 	bl	8005308 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8004628:	f3ef 8211 	mrs	r2, BASEPRI
 800462c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004630:	f383 8811 	msr	BASEPRI, r3
 8004634:	f3bf 8f6f 	isb	sy
 8004638:	f3bf 8f4f 	dsb	sy
 800463c:	623a      	str	r2, [r7, #32]
 800463e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8004640:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004642:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800464a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004654:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004658:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800465c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465e:	2202      	movs	r2, #2
 8004660:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8004664:	79fb      	ldrb	r3, [r7, #7]
 8004666:	2b04      	cmp	r3, #4
 8004668:	d828      	bhi.n	80046bc <xTaskGenericNotifyFromISR+0xcc>
 800466a:	a201      	add	r2, pc, #4	; (adr r2, 8004670 <xTaskGenericNotifyFromISR+0x80>)
 800466c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004670:	080046dd 	.word	0x080046dd
 8004674:	08004685 	.word	0x08004685
 8004678:	08004693 	.word	0x08004693
 800467c:	0800469f 	.word	0x0800469f
 8004680:	080046a7 	.word	0x080046a7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004686:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	431a      	orrs	r2, r3
 800468c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8004690:	e027      	b.n	80046e2 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8004692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004696:	1c5a      	adds	r2, r3, #1
 8004698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800469c:	e021      	b.n	80046e2 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800469e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80046a4:	e01d      	b.n	80046e2 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80046a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d003      	beq.n	80046b6 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80046ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80046b4:	e015      	b.n	80046e2 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 80046b6:	2300      	movs	r3, #0
 80046b8:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80046ba:	e012      	b.n	80046e2 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80046bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046c4:	d00c      	beq.n	80046e0 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 80046c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ca:	f383 8811 	msr	BASEPRI, r3
 80046ce:	f3bf 8f6f 	isb	sy
 80046d2:	f3bf 8f4f 	dsb	sy
 80046d6:	61bb      	str	r3, [r7, #24]
}
 80046d8:	bf00      	nop
 80046da:	e7fe      	b.n	80046da <xTaskGenericNotifyFromISR+0xea>
					break;
 80046dc:	bf00      	nop
 80046de:	e000      	b.n	80046e2 <xTaskGenericNotifyFromISR+0xf2>
					break;
 80046e0:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80046e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d146      	bne.n	8004778 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80046ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00a      	beq.n	8004708 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 80046f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f6:	f383 8811 	msr	BASEPRI, r3
 80046fa:	f3bf 8f6f 	isb	sy
 80046fe:	f3bf 8f4f 	dsb	sy
 8004702:	617b      	str	r3, [r7, #20]
}
 8004704:	bf00      	nop
 8004706:	e7fe      	b.n	8004706 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004708:	4b21      	ldr	r3, [pc, #132]	; (8004790 <xTaskGenericNotifyFromISR+0x1a0>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d11d      	bne.n	800474c <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004712:	3304      	adds	r3, #4
 8004714:	4618      	mov	r0, r3
 8004716:	f7fe fb3f 	bl	8002d98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800471a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800471e:	4b1d      	ldr	r3, [pc, #116]	; (8004794 <xTaskGenericNotifyFromISR+0x1a4>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	429a      	cmp	r2, r3
 8004724:	d903      	bls.n	800472e <xTaskGenericNotifyFromISR+0x13e>
 8004726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472a:	4a1a      	ldr	r2, [pc, #104]	; (8004794 <xTaskGenericNotifyFromISR+0x1a4>)
 800472c:	6013      	str	r3, [r2, #0]
 800472e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004732:	4613      	mov	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	4413      	add	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	4a17      	ldr	r2, [pc, #92]	; (8004798 <xTaskGenericNotifyFromISR+0x1a8>)
 800473c:	441a      	add	r2, r3
 800473e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004740:	3304      	adds	r3, #4
 8004742:	4619      	mov	r1, r3
 8004744:	4610      	mov	r0, r2
 8004746:	f7fe faca 	bl	8002cde <vListInsertEnd>
 800474a:	e005      	b.n	8004758 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800474c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474e:	3318      	adds	r3, #24
 8004750:	4619      	mov	r1, r3
 8004752:	4812      	ldr	r0, [pc, #72]	; (800479c <xTaskGenericNotifyFromISR+0x1ac>)
 8004754:	f7fe fac3 	bl	8002cde <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800475c:	4b10      	ldr	r3, [pc, #64]	; (80047a0 <xTaskGenericNotifyFromISR+0x1b0>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004762:	429a      	cmp	r2, r3
 8004764:	d908      	bls.n	8004778 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8004766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004768:	2b00      	cmp	r3, #0
 800476a:	d002      	beq.n	8004772 <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800476c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800476e:	2201      	movs	r2, #1
 8004770:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8004772:	4b0c      	ldr	r3, [pc, #48]	; (80047a4 <xTaskGenericNotifyFromISR+0x1b4>)
 8004774:	2201      	movs	r2, #1
 8004776:	601a      	str	r2, [r3, #0]
 8004778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800477a:	613b      	str	r3, [r7, #16]
	__asm volatile
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	f383 8811 	msr	BASEPRI, r3
}
 8004782:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8004784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8004786:	4618      	mov	r0, r3
 8004788:	3738      	adds	r7, #56	; 0x38
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	20001688 	.word	0x20001688
 8004794:	20001668 	.word	0x20001668
 8004798:	20001190 	.word	0x20001190
 800479c:	20001620 	.word	0x20001620
 80047a0:	2000118c 	.word	0x2000118c
 80047a4:	20001674 	.word	0x20001674

080047a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80047b2:	4b21      	ldr	r3, [pc, #132]	; (8004838 <prvAddCurrentTaskToDelayedList+0x90>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047b8:	4b20      	ldr	r3, [pc, #128]	; (800483c <prvAddCurrentTaskToDelayedList+0x94>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	3304      	adds	r3, #4
 80047be:	4618      	mov	r0, r3
 80047c0:	f7fe faea 	bl	8002d98 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047ca:	d10a      	bne.n	80047e2 <prvAddCurrentTaskToDelayedList+0x3a>
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d007      	beq.n	80047e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047d2:	4b1a      	ldr	r3, [pc, #104]	; (800483c <prvAddCurrentTaskToDelayedList+0x94>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	3304      	adds	r3, #4
 80047d8:	4619      	mov	r1, r3
 80047da:	4819      	ldr	r0, [pc, #100]	; (8004840 <prvAddCurrentTaskToDelayedList+0x98>)
 80047dc:	f7fe fa7f 	bl	8002cde <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80047e0:	e026      	b.n	8004830 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4413      	add	r3, r2
 80047e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80047ea:	4b14      	ldr	r3, [pc, #80]	; (800483c <prvAddCurrentTaskToDelayedList+0x94>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d209      	bcs.n	800480e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047fa:	4b12      	ldr	r3, [pc, #72]	; (8004844 <prvAddCurrentTaskToDelayedList+0x9c>)
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	4b0f      	ldr	r3, [pc, #60]	; (800483c <prvAddCurrentTaskToDelayedList+0x94>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	3304      	adds	r3, #4
 8004804:	4619      	mov	r1, r3
 8004806:	4610      	mov	r0, r2
 8004808:	f7fe fa8d 	bl	8002d26 <vListInsert>
}
 800480c:	e010      	b.n	8004830 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800480e:	4b0e      	ldr	r3, [pc, #56]	; (8004848 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	4b0a      	ldr	r3, [pc, #40]	; (800483c <prvAddCurrentTaskToDelayedList+0x94>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	3304      	adds	r3, #4
 8004818:	4619      	mov	r1, r3
 800481a:	4610      	mov	r0, r2
 800481c:	f7fe fa83 	bl	8002d26 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004820:	4b0a      	ldr	r3, [pc, #40]	; (800484c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	429a      	cmp	r2, r3
 8004828:	d202      	bcs.n	8004830 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800482a:	4a08      	ldr	r2, [pc, #32]	; (800484c <prvAddCurrentTaskToDelayedList+0xa4>)
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	6013      	str	r3, [r2, #0]
}
 8004830:	bf00      	nop
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	20001664 	.word	0x20001664
 800483c:	2000118c 	.word	0x2000118c
 8004840:	2000164c 	.word	0x2000164c
 8004844:	2000161c 	.word	0x2000161c
 8004848:	20001618 	.word	0x20001618
 800484c:	20001680 	.word	0x20001680

08004850 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b08a      	sub	sp, #40	; 0x28
 8004854:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004856:	2300      	movs	r3, #0
 8004858:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800485a:	f000 fb07 	bl	8004e6c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800485e:	4b1c      	ldr	r3, [pc, #112]	; (80048d0 <xTimerCreateTimerTask+0x80>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d021      	beq.n	80048aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004866:	2300      	movs	r3, #0
 8004868:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800486a:	2300      	movs	r3, #0
 800486c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800486e:	1d3a      	adds	r2, r7, #4
 8004870:	f107 0108 	add.w	r1, r7, #8
 8004874:	f107 030c 	add.w	r3, r7, #12
 8004878:	4618      	mov	r0, r3
 800487a:	f7fe f9e9 	bl	8002c50 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800487e:	6879      	ldr	r1, [r7, #4]
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	9202      	str	r2, [sp, #8]
 8004886:	9301      	str	r3, [sp, #4]
 8004888:	2302      	movs	r3, #2
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	2300      	movs	r3, #0
 800488e:	460a      	mov	r2, r1
 8004890:	4910      	ldr	r1, [pc, #64]	; (80048d4 <xTimerCreateTimerTask+0x84>)
 8004892:	4811      	ldr	r0, [pc, #68]	; (80048d8 <xTimerCreateTimerTask+0x88>)
 8004894:	f7fe ff96 	bl	80037c4 <xTaskCreateStatic>
 8004898:	4603      	mov	r3, r0
 800489a:	4a10      	ldr	r2, [pc, #64]	; (80048dc <xTimerCreateTimerTask+0x8c>)
 800489c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800489e:	4b0f      	ldr	r3, [pc, #60]	; (80048dc <xTimerCreateTimerTask+0x8c>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80048a6:	2301      	movs	r3, #1
 80048a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10a      	bne.n	80048c6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80048b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b4:	f383 8811 	msr	BASEPRI, r3
 80048b8:	f3bf 8f6f 	isb	sy
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	613b      	str	r3, [r7, #16]
}
 80048c2:	bf00      	nop
 80048c4:	e7fe      	b.n	80048c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80048c6:	697b      	ldr	r3, [r7, #20]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3718      	adds	r7, #24
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	200016bc 	.word	0x200016bc
 80048d4:	0800c0c0 	.word	0x0800c0c0
 80048d8:	08004a15 	.word	0x08004a15
 80048dc:	200016c0 	.word	0x200016c0

080048e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b08a      	sub	sp, #40	; 0x28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
 80048ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80048ee:	2300      	movs	r3, #0
 80048f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10a      	bne.n	800490e <xTimerGenericCommand+0x2e>
	__asm volatile
 80048f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fc:	f383 8811 	msr	BASEPRI, r3
 8004900:	f3bf 8f6f 	isb	sy
 8004904:	f3bf 8f4f 	dsb	sy
 8004908:	623b      	str	r3, [r7, #32]
}
 800490a:	bf00      	nop
 800490c:	e7fe      	b.n	800490c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800490e:	4b1a      	ldr	r3, [pc, #104]	; (8004978 <xTimerGenericCommand+0x98>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d02a      	beq.n	800496c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	2b05      	cmp	r3, #5
 8004926:	dc18      	bgt.n	800495a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004928:	f7ff fd7c 	bl	8004424 <xTaskGetSchedulerState>
 800492c:	4603      	mov	r3, r0
 800492e:	2b02      	cmp	r3, #2
 8004930:	d109      	bne.n	8004946 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004932:	4b11      	ldr	r3, [pc, #68]	; (8004978 <xTimerGenericCommand+0x98>)
 8004934:	6818      	ldr	r0, [r3, #0]
 8004936:	f107 0110 	add.w	r1, r7, #16
 800493a:	2300      	movs	r3, #0
 800493c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800493e:	f7fe fb59 	bl	8002ff4 <xQueueGenericSend>
 8004942:	6278      	str	r0, [r7, #36]	; 0x24
 8004944:	e012      	b.n	800496c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004946:	4b0c      	ldr	r3, [pc, #48]	; (8004978 <xTimerGenericCommand+0x98>)
 8004948:	6818      	ldr	r0, [r3, #0]
 800494a:	f107 0110 	add.w	r1, r7, #16
 800494e:	2300      	movs	r3, #0
 8004950:	2200      	movs	r2, #0
 8004952:	f7fe fb4f 	bl	8002ff4 <xQueueGenericSend>
 8004956:	6278      	str	r0, [r7, #36]	; 0x24
 8004958:	e008      	b.n	800496c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800495a:	4b07      	ldr	r3, [pc, #28]	; (8004978 <xTimerGenericCommand+0x98>)
 800495c:	6818      	ldr	r0, [r3, #0]
 800495e:	f107 0110 	add.w	r1, r7, #16
 8004962:	2300      	movs	r3, #0
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	f7fe fc43 	bl	80031f0 <xQueueGenericSendFromISR>
 800496a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800496e:	4618      	mov	r0, r3
 8004970:	3728      	adds	r7, #40	; 0x28
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	200016bc 	.word	0x200016bc

0800497c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b088      	sub	sp, #32
 8004980:	af02      	add	r7, sp, #8
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004986:	4b22      	ldr	r3, [pc, #136]	; (8004a10 <prvProcessExpiredTimer+0x94>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	3304      	adds	r3, #4
 8004994:	4618      	mov	r0, r3
 8004996:	f7fe f9ff 	bl	8002d98 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049a0:	f003 0304 	and.w	r3, r3, #4
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d022      	beq.n	80049ee <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	699a      	ldr	r2, [r3, #24]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	18d1      	adds	r1, r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	6978      	ldr	r0, [r7, #20]
 80049b6:	f000 f8d1 	bl	8004b5c <prvInsertTimerInActiveList>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d01f      	beq.n	8004a00 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049c0:	2300      	movs	r3, #0
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	2300      	movs	r3, #0
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	2100      	movs	r1, #0
 80049ca:	6978      	ldr	r0, [r7, #20]
 80049cc:	f7ff ff88 	bl	80048e0 <xTimerGenericCommand>
 80049d0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d113      	bne.n	8004a00 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80049d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049dc:	f383 8811 	msr	BASEPRI, r3
 80049e0:	f3bf 8f6f 	isb	sy
 80049e4:	f3bf 8f4f 	dsb	sy
 80049e8:	60fb      	str	r3, [r7, #12]
}
 80049ea:	bf00      	nop
 80049ec:	e7fe      	b.n	80049ec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049f4:	f023 0301 	bic.w	r3, r3, #1
 80049f8:	b2da      	uxtb	r2, r3
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	6978      	ldr	r0, [r7, #20]
 8004a06:	4798      	blx	r3
}
 8004a08:	bf00      	nop
 8004a0a:	3718      	adds	r7, #24
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	200016b4 	.word	0x200016b4

08004a14 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a1c:	f107 0308 	add.w	r3, r7, #8
 8004a20:	4618      	mov	r0, r3
 8004a22:	f000 f857 	bl	8004ad4 <prvGetNextExpireTime>
 8004a26:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f000 f803 	bl	8004a38 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004a32:	f000 f8d5 	bl	8004be0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a36:	e7f1      	b.n	8004a1c <prvTimerTask+0x8>

08004a38 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004a42:	f7ff f8fb 	bl	8003c3c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a46:	f107 0308 	add.w	r3, r7, #8
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 f866 	bl	8004b1c <prvSampleTimeNow>
 8004a50:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d130      	bne.n	8004aba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10a      	bne.n	8004a74 <prvProcessTimerOrBlockTask+0x3c>
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d806      	bhi.n	8004a74 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004a66:	f7ff f8f7 	bl	8003c58 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004a6a:	68f9      	ldr	r1, [r7, #12]
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f7ff ff85 	bl	800497c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004a72:	e024      	b.n	8004abe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d008      	beq.n	8004a8c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004a7a:	4b13      	ldr	r3, [pc, #76]	; (8004ac8 <prvProcessTimerOrBlockTask+0x90>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <prvProcessTimerOrBlockTask+0x50>
 8004a84:	2301      	movs	r3, #1
 8004a86:	e000      	b.n	8004a8a <prvProcessTimerOrBlockTask+0x52>
 8004a88:	2300      	movs	r3, #0
 8004a8a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004a8c:	4b0f      	ldr	r3, [pc, #60]	; (8004acc <prvProcessTimerOrBlockTask+0x94>)
 8004a8e:	6818      	ldr	r0, [r3, #0]
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	4619      	mov	r1, r3
 8004a9a:	f7fe fe5f 	bl	800375c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004a9e:	f7ff f8db 	bl	8003c58 <xTaskResumeAll>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10a      	bne.n	8004abe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004aa8:	4b09      	ldr	r3, [pc, #36]	; (8004ad0 <prvProcessTimerOrBlockTask+0x98>)
 8004aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aae:	601a      	str	r2, [r3, #0]
 8004ab0:	f3bf 8f4f 	dsb	sy
 8004ab4:	f3bf 8f6f 	isb	sy
}
 8004ab8:	e001      	b.n	8004abe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004aba:	f7ff f8cd 	bl	8003c58 <xTaskResumeAll>
}
 8004abe:	bf00      	nop
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	200016b8 	.word	0x200016b8
 8004acc:	200016bc 	.word	0x200016bc
 8004ad0:	e000ed04 	.word	0xe000ed04

08004ad4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004adc:	4b0e      	ldr	r3, [pc, #56]	; (8004b18 <prvGetNextExpireTime+0x44>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <prvGetNextExpireTime+0x16>
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	e000      	b.n	8004aec <prvGetNextExpireTime+0x18>
 8004aea:	2200      	movs	r2, #0
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d105      	bne.n	8004b04 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004af8:	4b07      	ldr	r3, [pc, #28]	; (8004b18 <prvGetNextExpireTime+0x44>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	60fb      	str	r3, [r7, #12]
 8004b02:	e001      	b.n	8004b08 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004b04:	2300      	movs	r3, #0
 8004b06:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004b08:	68fb      	ldr	r3, [r7, #12]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	200016b4 	.word	0x200016b4

08004b1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004b24:	f7ff f936 	bl	8003d94 <xTaskGetTickCount>
 8004b28:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004b2a:	4b0b      	ldr	r3, [pc, #44]	; (8004b58 <prvSampleTimeNow+0x3c>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d205      	bcs.n	8004b40 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004b34:	f000 f936 	bl	8004da4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	e002      	b.n	8004b46 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004b46:	4a04      	ldr	r2, [pc, #16]	; (8004b58 <prvSampleTimeNow+0x3c>)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	200016c4 	.word	0x200016c4

08004b5c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
 8004b68:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d812      	bhi.n	8004ba8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	1ad2      	subs	r2, r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d302      	bcc.n	8004b96 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004b90:	2301      	movs	r3, #1
 8004b92:	617b      	str	r3, [r7, #20]
 8004b94:	e01b      	b.n	8004bce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004b96:	4b10      	ldr	r3, [pc, #64]	; (8004bd8 <prvInsertTimerInActiveList+0x7c>)
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	4610      	mov	r0, r2
 8004ba2:	f7fe f8c0 	bl	8002d26 <vListInsert>
 8004ba6:	e012      	b.n	8004bce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d206      	bcs.n	8004bbe <prvInsertTimerInActiveList+0x62>
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d302      	bcc.n	8004bbe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	617b      	str	r3, [r7, #20]
 8004bbc:	e007      	b.n	8004bce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004bbe:	4b07      	ldr	r3, [pc, #28]	; (8004bdc <prvInsertTimerInActiveList+0x80>)
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	3304      	adds	r3, #4
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	4610      	mov	r0, r2
 8004bca:	f7fe f8ac 	bl	8002d26 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004bce:	697b      	ldr	r3, [r7, #20]
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3718      	adds	r7, #24
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	200016b8 	.word	0x200016b8
 8004bdc:	200016b4 	.word	0x200016b4

08004be0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b08e      	sub	sp, #56	; 0x38
 8004be4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004be6:	e0ca      	b.n	8004d7e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	da18      	bge.n	8004c20 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004bee:	1d3b      	adds	r3, r7, #4
 8004bf0:	3304      	adds	r3, #4
 8004bf2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10a      	bne.n	8004c10 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfe:	f383 8811 	msr	BASEPRI, r3
 8004c02:	f3bf 8f6f 	isb	sy
 8004c06:	f3bf 8f4f 	dsb	sy
 8004c0a:	61fb      	str	r3, [r7, #28]
}
 8004c0c:	bf00      	nop
 8004c0e:	e7fe      	b.n	8004c0e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c16:	6850      	ldr	r0, [r2, #4]
 8004c18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c1a:	6892      	ldr	r2, [r2, #8]
 8004c1c:	4611      	mov	r1, r2
 8004c1e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f2c0 80ab 	blt.w	8004d7e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2e:	695b      	ldr	r3, [r3, #20]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d004      	beq.n	8004c3e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c36:	3304      	adds	r3, #4
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7fe f8ad 	bl	8002d98 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c3e:	463b      	mov	r3, r7
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7ff ff6b 	bl	8004b1c <prvSampleTimeNow>
 8004c46:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2b09      	cmp	r3, #9
 8004c4c:	f200 8096 	bhi.w	8004d7c <prvProcessReceivedCommands+0x19c>
 8004c50:	a201      	add	r2, pc, #4	; (adr r2, 8004c58 <prvProcessReceivedCommands+0x78>)
 8004c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c56:	bf00      	nop
 8004c58:	08004c81 	.word	0x08004c81
 8004c5c:	08004c81 	.word	0x08004c81
 8004c60:	08004c81 	.word	0x08004c81
 8004c64:	08004cf5 	.word	0x08004cf5
 8004c68:	08004d09 	.word	0x08004d09
 8004c6c:	08004d53 	.word	0x08004d53
 8004c70:	08004c81 	.word	0x08004c81
 8004c74:	08004c81 	.word	0x08004c81
 8004c78:	08004cf5 	.word	0x08004cf5
 8004c7c:	08004d09 	.word	0x08004d09
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c86:	f043 0301 	orr.w	r3, r3, #1
 8004c8a:	b2da      	uxtb	r2, r3
 8004c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	18d1      	adds	r1, r2, r3
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ca0:	f7ff ff5c 	bl	8004b5c <prvInsertTimerInActiveList>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d069      	beq.n	8004d7e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cb0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cb8:	f003 0304 	and.w	r3, r3, #4
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d05e      	beq.n	8004d7e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	441a      	add	r2, r3
 8004cc8:	2300      	movs	r3, #0
 8004cca:	9300      	str	r3, [sp, #0]
 8004ccc:	2300      	movs	r3, #0
 8004cce:	2100      	movs	r1, #0
 8004cd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cd2:	f7ff fe05 	bl	80048e0 <xTimerGenericCommand>
 8004cd6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004cd8:	6a3b      	ldr	r3, [r7, #32]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d14f      	bne.n	8004d7e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce2:	f383 8811 	msr	BASEPRI, r3
 8004ce6:	f3bf 8f6f 	isb	sy
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	61bb      	str	r3, [r7, #24]
}
 8004cf0:	bf00      	nop
 8004cf2:	e7fe      	b.n	8004cf2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cfa:	f023 0301 	bic.w	r3, r3, #1
 8004cfe:	b2da      	uxtb	r2, r3
 8004d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004d06:	e03a      	b.n	8004d7e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d0e:	f043 0301 	orr.w	r3, r3, #1
 8004d12:	b2da      	uxtb	r2, r3
 8004d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d10a      	bne.n	8004d3e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2c:	f383 8811 	msr	BASEPRI, r3
 8004d30:	f3bf 8f6f 	isb	sy
 8004d34:	f3bf 8f4f 	dsb	sy
 8004d38:	617b      	str	r3, [r7, #20]
}
 8004d3a:	bf00      	nop
 8004d3c:	e7fe      	b.n	8004d3c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d40:	699a      	ldr	r2, [r3, #24]
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d44:	18d1      	adds	r1, r2, r3
 8004d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d4c:	f7ff ff06 	bl	8004b5c <prvInsertTimerInActiveList>
					break;
 8004d50:	e015      	b.n	8004d7e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d103      	bne.n	8004d68 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004d60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d62:	f000 fbdd 	bl	8005520 <vPortFree>
 8004d66:	e00a      	b.n	8004d7e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d6e:	f023 0301 	bic.w	r3, r3, #1
 8004d72:	b2da      	uxtb	r2, r3
 8004d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004d7a:	e000      	b.n	8004d7e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004d7c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d7e:	4b08      	ldr	r3, [pc, #32]	; (8004da0 <prvProcessReceivedCommands+0x1c0>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	1d39      	adds	r1, r7, #4
 8004d84:	2200      	movs	r2, #0
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7fe face 	bl	8003328 <xQueueReceive>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	f47f af2a 	bne.w	8004be8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004d94:	bf00      	nop
 8004d96:	bf00      	nop
 8004d98:	3730      	adds	r7, #48	; 0x30
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	200016bc 	.word	0x200016bc

08004da4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b088      	sub	sp, #32
 8004da8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004daa:	e048      	b.n	8004e3e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004dac:	4b2d      	ldr	r3, [pc, #180]	; (8004e64 <prvSwitchTimerLists+0xc0>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004db6:	4b2b      	ldr	r3, [pc, #172]	; (8004e64 <prvSwitchTimerLists+0xc0>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	3304      	adds	r3, #4
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7fd ffe7 	bl	8002d98 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dd8:	f003 0304 	and.w	r3, r3, #4
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d02e      	beq.n	8004e3e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	4413      	add	r3, r2
 8004de8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d90e      	bls.n	8004e10 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	68ba      	ldr	r2, [r7, #8]
 8004df6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004dfe:	4b19      	ldr	r3, [pc, #100]	; (8004e64 <prvSwitchTimerLists+0xc0>)
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	3304      	adds	r3, #4
 8004e06:	4619      	mov	r1, r3
 8004e08:	4610      	mov	r0, r2
 8004e0a:	f7fd ff8c 	bl	8002d26 <vListInsert>
 8004e0e:	e016      	b.n	8004e3e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e10:	2300      	movs	r3, #0
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	2300      	movs	r3, #0
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	2100      	movs	r1, #0
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f7ff fd60 	bl	80048e0 <xTimerGenericCommand>
 8004e20:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10a      	bne.n	8004e3e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2c:	f383 8811 	msr	BASEPRI, r3
 8004e30:	f3bf 8f6f 	isb	sy
 8004e34:	f3bf 8f4f 	dsb	sy
 8004e38:	603b      	str	r3, [r7, #0]
}
 8004e3a:	bf00      	nop
 8004e3c:	e7fe      	b.n	8004e3c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e3e:	4b09      	ldr	r3, [pc, #36]	; (8004e64 <prvSwitchTimerLists+0xc0>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1b1      	bne.n	8004dac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004e48:	4b06      	ldr	r3, [pc, #24]	; (8004e64 <prvSwitchTimerLists+0xc0>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004e4e:	4b06      	ldr	r3, [pc, #24]	; (8004e68 <prvSwitchTimerLists+0xc4>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a04      	ldr	r2, [pc, #16]	; (8004e64 <prvSwitchTimerLists+0xc0>)
 8004e54:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004e56:	4a04      	ldr	r2, [pc, #16]	; (8004e68 <prvSwitchTimerLists+0xc4>)
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	6013      	str	r3, [r2, #0]
}
 8004e5c:	bf00      	nop
 8004e5e:	3718      	adds	r7, #24
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	200016b4 	.word	0x200016b4
 8004e68:	200016b8 	.word	0x200016b8

08004e6c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004e72:	f000 f967 	bl	8005144 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004e76:	4b15      	ldr	r3, [pc, #84]	; (8004ecc <prvCheckForValidListAndQueue+0x60>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d120      	bne.n	8004ec0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004e7e:	4814      	ldr	r0, [pc, #80]	; (8004ed0 <prvCheckForValidListAndQueue+0x64>)
 8004e80:	f7fd ff00 	bl	8002c84 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004e84:	4813      	ldr	r0, [pc, #76]	; (8004ed4 <prvCheckForValidListAndQueue+0x68>)
 8004e86:	f7fd fefd 	bl	8002c84 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004e8a:	4b13      	ldr	r3, [pc, #76]	; (8004ed8 <prvCheckForValidListAndQueue+0x6c>)
 8004e8c:	4a10      	ldr	r2, [pc, #64]	; (8004ed0 <prvCheckForValidListAndQueue+0x64>)
 8004e8e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004e90:	4b12      	ldr	r3, [pc, #72]	; (8004edc <prvCheckForValidListAndQueue+0x70>)
 8004e92:	4a10      	ldr	r2, [pc, #64]	; (8004ed4 <prvCheckForValidListAndQueue+0x68>)
 8004e94:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004e96:	2300      	movs	r3, #0
 8004e98:	9300      	str	r3, [sp, #0]
 8004e9a:	4b11      	ldr	r3, [pc, #68]	; (8004ee0 <prvCheckForValidListAndQueue+0x74>)
 8004e9c:	4a11      	ldr	r2, [pc, #68]	; (8004ee4 <prvCheckForValidListAndQueue+0x78>)
 8004e9e:	2110      	movs	r1, #16
 8004ea0:	200a      	movs	r0, #10
 8004ea2:	f7fe f80b 	bl	8002ebc <xQueueGenericCreateStatic>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	4a08      	ldr	r2, [pc, #32]	; (8004ecc <prvCheckForValidListAndQueue+0x60>)
 8004eaa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004eac:	4b07      	ldr	r3, [pc, #28]	; (8004ecc <prvCheckForValidListAndQueue+0x60>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d005      	beq.n	8004ec0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004eb4:	4b05      	ldr	r3, [pc, #20]	; (8004ecc <prvCheckForValidListAndQueue+0x60>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	490b      	ldr	r1, [pc, #44]	; (8004ee8 <prvCheckForValidListAndQueue+0x7c>)
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7fe fc24 	bl	8003708 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ec0:	f000 f970 	bl	80051a4 <vPortExitCritical>
}
 8004ec4:	bf00      	nop
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	200016bc 	.word	0x200016bc
 8004ed0:	2000168c 	.word	0x2000168c
 8004ed4:	200016a0 	.word	0x200016a0
 8004ed8:	200016b4 	.word	0x200016b4
 8004edc:	200016b8 	.word	0x200016b8
 8004ee0:	20001768 	.word	0x20001768
 8004ee4:	200016c8 	.word	0x200016c8
 8004ee8:	0800c0c8 	.word	0x0800c0c8

08004eec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	3b04      	subs	r3, #4
 8004efc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	3b04      	subs	r3, #4
 8004f0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	f023 0201 	bic.w	r2, r3, #1
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	3b04      	subs	r3, #4
 8004f1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f1c:	4a0c      	ldr	r2, [pc, #48]	; (8004f50 <pxPortInitialiseStack+0x64>)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	3b14      	subs	r3, #20
 8004f26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	3b04      	subs	r3, #4
 8004f32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f06f 0202 	mvn.w	r2, #2
 8004f3a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	3b20      	subs	r3, #32
 8004f40:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f42:	68fb      	ldr	r3, [r7, #12]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3714      	adds	r7, #20
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	08004f55 	.word	0x08004f55

08004f54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f5e:	4b12      	ldr	r3, [pc, #72]	; (8004fa8 <prvTaskExitError+0x54>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f66:	d00a      	beq.n	8004f7e <prvTaskExitError+0x2a>
	__asm volatile
 8004f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6c:	f383 8811 	msr	BASEPRI, r3
 8004f70:	f3bf 8f6f 	isb	sy
 8004f74:	f3bf 8f4f 	dsb	sy
 8004f78:	60fb      	str	r3, [r7, #12]
}
 8004f7a:	bf00      	nop
 8004f7c:	e7fe      	b.n	8004f7c <prvTaskExitError+0x28>
	__asm volatile
 8004f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f82:	f383 8811 	msr	BASEPRI, r3
 8004f86:	f3bf 8f6f 	isb	sy
 8004f8a:	f3bf 8f4f 	dsb	sy
 8004f8e:	60bb      	str	r3, [r7, #8]
}
 8004f90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004f92:	bf00      	nop
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d0fc      	beq.n	8004f94 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f9a:	bf00      	nop
 8004f9c:	bf00      	nop
 8004f9e:	3714      	adds	r7, #20
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr
 8004fa8:	20000060 	.word	0x20000060
 8004fac:	00000000 	.word	0x00000000

08004fb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004fb0:	4b07      	ldr	r3, [pc, #28]	; (8004fd0 <pxCurrentTCBConst2>)
 8004fb2:	6819      	ldr	r1, [r3, #0]
 8004fb4:	6808      	ldr	r0, [r1, #0]
 8004fb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fba:	f380 8809 	msr	PSP, r0
 8004fbe:	f3bf 8f6f 	isb	sy
 8004fc2:	f04f 0000 	mov.w	r0, #0
 8004fc6:	f380 8811 	msr	BASEPRI, r0
 8004fca:	4770      	bx	lr
 8004fcc:	f3af 8000 	nop.w

08004fd0 <pxCurrentTCBConst2>:
 8004fd0:	2000118c 	.word	0x2000118c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004fd4:	bf00      	nop
 8004fd6:	bf00      	nop

08004fd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004fd8:	4808      	ldr	r0, [pc, #32]	; (8004ffc <prvPortStartFirstTask+0x24>)
 8004fda:	6800      	ldr	r0, [r0, #0]
 8004fdc:	6800      	ldr	r0, [r0, #0]
 8004fde:	f380 8808 	msr	MSP, r0
 8004fe2:	f04f 0000 	mov.w	r0, #0
 8004fe6:	f380 8814 	msr	CONTROL, r0
 8004fea:	b662      	cpsie	i
 8004fec:	b661      	cpsie	f
 8004fee:	f3bf 8f4f 	dsb	sy
 8004ff2:	f3bf 8f6f 	isb	sy
 8004ff6:	df00      	svc	0
 8004ff8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004ffa:	bf00      	nop
 8004ffc:	e000ed08 	.word	0xe000ed08

08005000 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005006:	4b46      	ldr	r3, [pc, #280]	; (8005120 <xPortStartScheduler+0x120>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a46      	ldr	r2, [pc, #280]	; (8005124 <xPortStartScheduler+0x124>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d10a      	bne.n	8005026 <xPortStartScheduler+0x26>
	__asm volatile
 8005010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005014:	f383 8811 	msr	BASEPRI, r3
 8005018:	f3bf 8f6f 	isb	sy
 800501c:	f3bf 8f4f 	dsb	sy
 8005020:	613b      	str	r3, [r7, #16]
}
 8005022:	bf00      	nop
 8005024:	e7fe      	b.n	8005024 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005026:	4b3e      	ldr	r3, [pc, #248]	; (8005120 <xPortStartScheduler+0x120>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a3f      	ldr	r2, [pc, #252]	; (8005128 <xPortStartScheduler+0x128>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d10a      	bne.n	8005046 <xPortStartScheduler+0x46>
	__asm volatile
 8005030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005034:	f383 8811 	msr	BASEPRI, r3
 8005038:	f3bf 8f6f 	isb	sy
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	60fb      	str	r3, [r7, #12]
}
 8005042:	bf00      	nop
 8005044:	e7fe      	b.n	8005044 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005046:	4b39      	ldr	r3, [pc, #228]	; (800512c <xPortStartScheduler+0x12c>)
 8005048:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	b2db      	uxtb	r3, r3
 8005050:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	22ff      	movs	r2, #255	; 0xff
 8005056:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	b2db      	uxtb	r3, r3
 800505e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005060:	78fb      	ldrb	r3, [r7, #3]
 8005062:	b2db      	uxtb	r3, r3
 8005064:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005068:	b2da      	uxtb	r2, r3
 800506a:	4b31      	ldr	r3, [pc, #196]	; (8005130 <xPortStartScheduler+0x130>)
 800506c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800506e:	4b31      	ldr	r3, [pc, #196]	; (8005134 <xPortStartScheduler+0x134>)
 8005070:	2207      	movs	r2, #7
 8005072:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005074:	e009      	b.n	800508a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005076:	4b2f      	ldr	r3, [pc, #188]	; (8005134 <xPortStartScheduler+0x134>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	3b01      	subs	r3, #1
 800507c:	4a2d      	ldr	r2, [pc, #180]	; (8005134 <xPortStartScheduler+0x134>)
 800507e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005080:	78fb      	ldrb	r3, [r7, #3]
 8005082:	b2db      	uxtb	r3, r3
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	b2db      	uxtb	r3, r3
 8005088:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800508a:	78fb      	ldrb	r3, [r7, #3]
 800508c:	b2db      	uxtb	r3, r3
 800508e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005092:	2b80      	cmp	r3, #128	; 0x80
 8005094:	d0ef      	beq.n	8005076 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005096:	4b27      	ldr	r3, [pc, #156]	; (8005134 <xPortStartScheduler+0x134>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f1c3 0307 	rsb	r3, r3, #7
 800509e:	2b04      	cmp	r3, #4
 80050a0:	d00a      	beq.n	80050b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80050a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a6:	f383 8811 	msr	BASEPRI, r3
 80050aa:	f3bf 8f6f 	isb	sy
 80050ae:	f3bf 8f4f 	dsb	sy
 80050b2:	60bb      	str	r3, [r7, #8]
}
 80050b4:	bf00      	nop
 80050b6:	e7fe      	b.n	80050b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80050b8:	4b1e      	ldr	r3, [pc, #120]	; (8005134 <xPortStartScheduler+0x134>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	021b      	lsls	r3, r3, #8
 80050be:	4a1d      	ldr	r2, [pc, #116]	; (8005134 <xPortStartScheduler+0x134>)
 80050c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80050c2:	4b1c      	ldr	r3, [pc, #112]	; (8005134 <xPortStartScheduler+0x134>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050ca:	4a1a      	ldr	r2, [pc, #104]	; (8005134 <xPortStartScheduler+0x134>)
 80050cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	b2da      	uxtb	r2, r3
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80050d6:	4b18      	ldr	r3, [pc, #96]	; (8005138 <xPortStartScheduler+0x138>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a17      	ldr	r2, [pc, #92]	; (8005138 <xPortStartScheduler+0x138>)
 80050dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80050e2:	4b15      	ldr	r3, [pc, #84]	; (8005138 <xPortStartScheduler+0x138>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a14      	ldr	r2, [pc, #80]	; (8005138 <xPortStartScheduler+0x138>)
 80050e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80050ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80050ee:	f000 f8dd 	bl	80052ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80050f2:	4b12      	ldr	r3, [pc, #72]	; (800513c <xPortStartScheduler+0x13c>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80050f8:	f000 f8fc 	bl	80052f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80050fc:	4b10      	ldr	r3, [pc, #64]	; (8005140 <xPortStartScheduler+0x140>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a0f      	ldr	r2, [pc, #60]	; (8005140 <xPortStartScheduler+0x140>)
 8005102:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005106:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005108:	f7ff ff66 	bl	8004fd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800510c:	f7fe ff1e 	bl	8003f4c <vTaskSwitchContext>
	prvTaskExitError();
 8005110:	f7ff ff20 	bl	8004f54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3718      	adds	r7, #24
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	e000ed00 	.word	0xe000ed00
 8005124:	410fc271 	.word	0x410fc271
 8005128:	410fc270 	.word	0x410fc270
 800512c:	e000e400 	.word	0xe000e400
 8005130:	200017b8 	.word	0x200017b8
 8005134:	200017bc 	.word	0x200017bc
 8005138:	e000ed20 	.word	0xe000ed20
 800513c:	20000060 	.word	0x20000060
 8005140:	e000ef34 	.word	0xe000ef34

08005144 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
	__asm volatile
 800514a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514e:	f383 8811 	msr	BASEPRI, r3
 8005152:	f3bf 8f6f 	isb	sy
 8005156:	f3bf 8f4f 	dsb	sy
 800515a:	607b      	str	r3, [r7, #4]
}
 800515c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800515e:	4b0f      	ldr	r3, [pc, #60]	; (800519c <vPortEnterCritical+0x58>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	3301      	adds	r3, #1
 8005164:	4a0d      	ldr	r2, [pc, #52]	; (800519c <vPortEnterCritical+0x58>)
 8005166:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005168:	4b0c      	ldr	r3, [pc, #48]	; (800519c <vPortEnterCritical+0x58>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d10f      	bne.n	8005190 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005170:	4b0b      	ldr	r3, [pc, #44]	; (80051a0 <vPortEnterCritical+0x5c>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00a      	beq.n	8005190 <vPortEnterCritical+0x4c>
	__asm volatile
 800517a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517e:	f383 8811 	msr	BASEPRI, r3
 8005182:	f3bf 8f6f 	isb	sy
 8005186:	f3bf 8f4f 	dsb	sy
 800518a:	603b      	str	r3, [r7, #0]
}
 800518c:	bf00      	nop
 800518e:	e7fe      	b.n	800518e <vPortEnterCritical+0x4a>
	}
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	20000060 	.word	0x20000060
 80051a0:	e000ed04 	.word	0xe000ed04

080051a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80051aa:	4b12      	ldr	r3, [pc, #72]	; (80051f4 <vPortExitCritical+0x50>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10a      	bne.n	80051c8 <vPortExitCritical+0x24>
	__asm volatile
 80051b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b6:	f383 8811 	msr	BASEPRI, r3
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	607b      	str	r3, [r7, #4]
}
 80051c4:	bf00      	nop
 80051c6:	e7fe      	b.n	80051c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80051c8:	4b0a      	ldr	r3, [pc, #40]	; (80051f4 <vPortExitCritical+0x50>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	3b01      	subs	r3, #1
 80051ce:	4a09      	ldr	r2, [pc, #36]	; (80051f4 <vPortExitCritical+0x50>)
 80051d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80051d2:	4b08      	ldr	r3, [pc, #32]	; (80051f4 <vPortExitCritical+0x50>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d105      	bne.n	80051e6 <vPortExitCritical+0x42>
 80051da:	2300      	movs	r3, #0
 80051dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	f383 8811 	msr	BASEPRI, r3
}
 80051e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80051e6:	bf00      	nop
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	20000060 	.word	0x20000060
	...

08005200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005200:	f3ef 8009 	mrs	r0, PSP
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	4b15      	ldr	r3, [pc, #84]	; (8005260 <pxCurrentTCBConst>)
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	f01e 0f10 	tst.w	lr, #16
 8005210:	bf08      	it	eq
 8005212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800521a:	6010      	str	r0, [r2, #0]
 800521c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005220:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005224:	f380 8811 	msr	BASEPRI, r0
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f7fe fe8c 	bl	8003f4c <vTaskSwitchContext>
 8005234:	f04f 0000 	mov.w	r0, #0
 8005238:	f380 8811 	msr	BASEPRI, r0
 800523c:	bc09      	pop	{r0, r3}
 800523e:	6819      	ldr	r1, [r3, #0]
 8005240:	6808      	ldr	r0, [r1, #0]
 8005242:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005246:	f01e 0f10 	tst.w	lr, #16
 800524a:	bf08      	it	eq
 800524c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005250:	f380 8809 	msr	PSP, r0
 8005254:	f3bf 8f6f 	isb	sy
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	f3af 8000 	nop.w

08005260 <pxCurrentTCBConst>:
 8005260:	2000118c 	.word	0x2000118c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005264:	bf00      	nop
 8005266:	bf00      	nop

08005268 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
	__asm volatile
 800526e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005272:	f383 8811 	msr	BASEPRI, r3
 8005276:	f3bf 8f6f 	isb	sy
 800527a:	f3bf 8f4f 	dsb	sy
 800527e:	607b      	str	r3, [r7, #4]
}
 8005280:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005282:	f7fe fda9 	bl	8003dd8 <xTaskIncrementTick>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d003      	beq.n	8005294 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800528c:	4b06      	ldr	r3, [pc, #24]	; (80052a8 <xPortSysTickHandler+0x40>)
 800528e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	2300      	movs	r3, #0
 8005296:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	f383 8811 	msr	BASEPRI, r3
}
 800529e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80052a0:	bf00      	nop
 80052a2:	3708      	adds	r7, #8
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	e000ed04 	.word	0xe000ed04

080052ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80052ac:	b480      	push	{r7}
 80052ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80052b0:	4b0b      	ldr	r3, [pc, #44]	; (80052e0 <vPortSetupTimerInterrupt+0x34>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80052b6:	4b0b      	ldr	r3, [pc, #44]	; (80052e4 <vPortSetupTimerInterrupt+0x38>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80052bc:	4b0a      	ldr	r3, [pc, #40]	; (80052e8 <vPortSetupTimerInterrupt+0x3c>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a0a      	ldr	r2, [pc, #40]	; (80052ec <vPortSetupTimerInterrupt+0x40>)
 80052c2:	fba2 2303 	umull	r2, r3, r2, r3
 80052c6:	099b      	lsrs	r3, r3, #6
 80052c8:	4a09      	ldr	r2, [pc, #36]	; (80052f0 <vPortSetupTimerInterrupt+0x44>)
 80052ca:	3b01      	subs	r3, #1
 80052cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80052ce:	4b04      	ldr	r3, [pc, #16]	; (80052e0 <vPortSetupTimerInterrupt+0x34>)
 80052d0:	2207      	movs	r2, #7
 80052d2:	601a      	str	r2, [r3, #0]
}
 80052d4:	bf00      	nop
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	e000e010 	.word	0xe000e010
 80052e4:	e000e018 	.word	0xe000e018
 80052e8:	2000006c 	.word	0x2000006c
 80052ec:	10624dd3 	.word	0x10624dd3
 80052f0:	e000e014 	.word	0xe000e014

080052f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80052f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005304 <vPortEnableVFP+0x10>
 80052f8:	6801      	ldr	r1, [r0, #0]
 80052fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80052fe:	6001      	str	r1, [r0, #0]
 8005300:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005302:	bf00      	nop
 8005304:	e000ed88 	.word	0xe000ed88

08005308 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800530e:	f3ef 8305 	mrs	r3, IPSR
 8005312:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2b0f      	cmp	r3, #15
 8005318:	d914      	bls.n	8005344 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800531a:	4a17      	ldr	r2, [pc, #92]	; (8005378 <vPortValidateInterruptPriority+0x70>)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	4413      	add	r3, r2
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005324:	4b15      	ldr	r3, [pc, #84]	; (800537c <vPortValidateInterruptPriority+0x74>)
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	7afa      	ldrb	r2, [r7, #11]
 800532a:	429a      	cmp	r2, r3
 800532c:	d20a      	bcs.n	8005344 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800532e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005332:	f383 8811 	msr	BASEPRI, r3
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	607b      	str	r3, [r7, #4]
}
 8005340:	bf00      	nop
 8005342:	e7fe      	b.n	8005342 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005344:	4b0e      	ldr	r3, [pc, #56]	; (8005380 <vPortValidateInterruptPriority+0x78>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800534c:	4b0d      	ldr	r3, [pc, #52]	; (8005384 <vPortValidateInterruptPriority+0x7c>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	429a      	cmp	r2, r3
 8005352:	d90a      	bls.n	800536a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005358:	f383 8811 	msr	BASEPRI, r3
 800535c:	f3bf 8f6f 	isb	sy
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	603b      	str	r3, [r7, #0]
}
 8005366:	bf00      	nop
 8005368:	e7fe      	b.n	8005368 <vPortValidateInterruptPriority+0x60>
	}
 800536a:	bf00      	nop
 800536c:	3714      	adds	r7, #20
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	e000e3f0 	.word	0xe000e3f0
 800537c:	200017b8 	.word	0x200017b8
 8005380:	e000ed0c 	.word	0xe000ed0c
 8005384:	200017bc 	.word	0x200017bc

08005388 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b08a      	sub	sp, #40	; 0x28
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005390:	2300      	movs	r3, #0
 8005392:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005394:	f7fe fc52 	bl	8003c3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005398:	4b5b      	ldr	r3, [pc, #364]	; (8005508 <pvPortMalloc+0x180>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d101      	bne.n	80053a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80053a0:	f000 f920 	bl	80055e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80053a4:	4b59      	ldr	r3, [pc, #356]	; (800550c <pvPortMalloc+0x184>)
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4013      	ands	r3, r2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f040 8093 	bne.w	80054d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d01d      	beq.n	80053f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80053b8:	2208      	movs	r2, #8
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4413      	add	r3, r2
 80053be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f003 0307 	and.w	r3, r3, #7
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d014      	beq.n	80053f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f023 0307 	bic.w	r3, r3, #7
 80053d0:	3308      	adds	r3, #8
 80053d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f003 0307 	and.w	r3, r3, #7
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00a      	beq.n	80053f4 <pvPortMalloc+0x6c>
	__asm volatile
 80053de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	617b      	str	r3, [r7, #20]
}
 80053f0:	bf00      	nop
 80053f2:	e7fe      	b.n	80053f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d06e      	beq.n	80054d8 <pvPortMalloc+0x150>
 80053fa:	4b45      	ldr	r3, [pc, #276]	; (8005510 <pvPortMalloc+0x188>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	429a      	cmp	r2, r3
 8005402:	d869      	bhi.n	80054d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005404:	4b43      	ldr	r3, [pc, #268]	; (8005514 <pvPortMalloc+0x18c>)
 8005406:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005408:	4b42      	ldr	r3, [pc, #264]	; (8005514 <pvPortMalloc+0x18c>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800540e:	e004      	b.n	800541a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005412:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	429a      	cmp	r2, r3
 8005422:	d903      	bls.n	800542c <pvPortMalloc+0xa4>
 8005424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1f1      	bne.n	8005410 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800542c:	4b36      	ldr	r3, [pc, #216]	; (8005508 <pvPortMalloc+0x180>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005432:	429a      	cmp	r2, r3
 8005434:	d050      	beq.n	80054d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005436:	6a3b      	ldr	r3, [r7, #32]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2208      	movs	r2, #8
 800543c:	4413      	add	r3, r2
 800543e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	6a3b      	ldr	r3, [r7, #32]
 8005446:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544a:	685a      	ldr	r2, [r3, #4]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	1ad2      	subs	r2, r2, r3
 8005450:	2308      	movs	r3, #8
 8005452:	005b      	lsls	r3, r3, #1
 8005454:	429a      	cmp	r2, r3
 8005456:	d91f      	bls.n	8005498 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4413      	add	r3, r2
 800545e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	f003 0307 	and.w	r3, r3, #7
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00a      	beq.n	8005480 <pvPortMalloc+0xf8>
	__asm volatile
 800546a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546e:	f383 8811 	msr	BASEPRI, r3
 8005472:	f3bf 8f6f 	isb	sy
 8005476:	f3bf 8f4f 	dsb	sy
 800547a:	613b      	str	r3, [r7, #16]
}
 800547c:	bf00      	nop
 800547e:	e7fe      	b.n	800547e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	1ad2      	subs	r2, r2, r3
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800548c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005492:	69b8      	ldr	r0, [r7, #24]
 8005494:	f000 f908 	bl	80056a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005498:	4b1d      	ldr	r3, [pc, #116]	; (8005510 <pvPortMalloc+0x188>)
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	4a1b      	ldr	r2, [pc, #108]	; (8005510 <pvPortMalloc+0x188>)
 80054a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80054a6:	4b1a      	ldr	r3, [pc, #104]	; (8005510 <pvPortMalloc+0x188>)
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	4b1b      	ldr	r3, [pc, #108]	; (8005518 <pvPortMalloc+0x190>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d203      	bcs.n	80054ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80054b2:	4b17      	ldr	r3, [pc, #92]	; (8005510 <pvPortMalloc+0x188>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a18      	ldr	r2, [pc, #96]	; (8005518 <pvPortMalloc+0x190>)
 80054b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	685a      	ldr	r2, [r3, #4]
 80054be:	4b13      	ldr	r3, [pc, #76]	; (800550c <pvPortMalloc+0x184>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	431a      	orrs	r2, r3
 80054c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	2200      	movs	r2, #0
 80054cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80054ce:	4b13      	ldr	r3, [pc, #76]	; (800551c <pvPortMalloc+0x194>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	3301      	adds	r3, #1
 80054d4:	4a11      	ldr	r2, [pc, #68]	; (800551c <pvPortMalloc+0x194>)
 80054d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80054d8:	f7fe fbbe 	bl	8003c58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	f003 0307 	and.w	r3, r3, #7
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00a      	beq.n	80054fc <pvPortMalloc+0x174>
	__asm volatile
 80054e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ea:	f383 8811 	msr	BASEPRI, r3
 80054ee:	f3bf 8f6f 	isb	sy
 80054f2:	f3bf 8f4f 	dsb	sy
 80054f6:	60fb      	str	r3, [r7, #12]
}
 80054f8:	bf00      	nop
 80054fa:	e7fe      	b.n	80054fa <pvPortMalloc+0x172>
	return pvReturn;
 80054fc:	69fb      	ldr	r3, [r7, #28]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3728      	adds	r7, #40	; 0x28
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	20002380 	.word	0x20002380
 800550c:	20002394 	.word	0x20002394
 8005510:	20002384 	.word	0x20002384
 8005514:	20002378 	.word	0x20002378
 8005518:	20002388 	.word	0x20002388
 800551c:	2000238c 	.word	0x2000238c

08005520 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d04d      	beq.n	80055ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005532:	2308      	movs	r3, #8
 8005534:	425b      	negs	r3, r3
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	4413      	add	r3, r2
 800553a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	4b24      	ldr	r3, [pc, #144]	; (80055d8 <vPortFree+0xb8>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4013      	ands	r3, r2
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10a      	bne.n	8005564 <vPortFree+0x44>
	__asm volatile
 800554e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	60fb      	str	r3, [r7, #12]
}
 8005560:	bf00      	nop
 8005562:	e7fe      	b.n	8005562 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00a      	beq.n	8005582 <vPortFree+0x62>
	__asm volatile
 800556c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005570:	f383 8811 	msr	BASEPRI, r3
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	60bb      	str	r3, [r7, #8]
}
 800557e:	bf00      	nop
 8005580:	e7fe      	b.n	8005580 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	685a      	ldr	r2, [r3, #4]
 8005586:	4b14      	ldr	r3, [pc, #80]	; (80055d8 <vPortFree+0xb8>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4013      	ands	r3, r2
 800558c:	2b00      	cmp	r3, #0
 800558e:	d01e      	beq.n	80055ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d11a      	bne.n	80055ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	4b0e      	ldr	r3, [pc, #56]	; (80055d8 <vPortFree+0xb8>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	43db      	mvns	r3, r3
 80055a2:	401a      	ands	r2, r3
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80055a8:	f7fe fb48 	bl	8003c3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	685a      	ldr	r2, [r3, #4]
 80055b0:	4b0a      	ldr	r3, [pc, #40]	; (80055dc <vPortFree+0xbc>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4413      	add	r3, r2
 80055b6:	4a09      	ldr	r2, [pc, #36]	; (80055dc <vPortFree+0xbc>)
 80055b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80055ba:	6938      	ldr	r0, [r7, #16]
 80055bc:	f000 f874 	bl	80056a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80055c0:	4b07      	ldr	r3, [pc, #28]	; (80055e0 <vPortFree+0xc0>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	3301      	adds	r3, #1
 80055c6:	4a06      	ldr	r2, [pc, #24]	; (80055e0 <vPortFree+0xc0>)
 80055c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80055ca:	f7fe fb45 	bl	8003c58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80055ce:	bf00      	nop
 80055d0:	3718      	adds	r7, #24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	20002394 	.word	0x20002394
 80055dc:	20002384 	.word	0x20002384
 80055e0:	20002390 	.word	0x20002390

080055e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80055ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80055ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80055f0:	4b27      	ldr	r3, [pc, #156]	; (8005690 <prvHeapInit+0xac>)
 80055f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f003 0307 	and.w	r3, r3, #7
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00c      	beq.n	8005618 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	3307      	adds	r3, #7
 8005602:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f023 0307 	bic.w	r3, r3, #7
 800560a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	4a1f      	ldr	r2, [pc, #124]	; (8005690 <prvHeapInit+0xac>)
 8005614:	4413      	add	r3, r2
 8005616:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800561c:	4a1d      	ldr	r2, [pc, #116]	; (8005694 <prvHeapInit+0xb0>)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005622:	4b1c      	ldr	r3, [pc, #112]	; (8005694 <prvHeapInit+0xb0>)
 8005624:	2200      	movs	r2, #0
 8005626:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	4413      	add	r3, r2
 800562e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005630:	2208      	movs	r2, #8
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	1a9b      	subs	r3, r3, r2
 8005636:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f023 0307 	bic.w	r3, r3, #7
 800563e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4a15      	ldr	r2, [pc, #84]	; (8005698 <prvHeapInit+0xb4>)
 8005644:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005646:	4b14      	ldr	r3, [pc, #80]	; (8005698 <prvHeapInit+0xb4>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2200      	movs	r2, #0
 800564c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800564e:	4b12      	ldr	r3, [pc, #72]	; (8005698 <prvHeapInit+0xb4>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2200      	movs	r2, #0
 8005654:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	1ad2      	subs	r2, r2, r3
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005664:	4b0c      	ldr	r3, [pc, #48]	; (8005698 <prvHeapInit+0xb4>)
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	4a0a      	ldr	r2, [pc, #40]	; (800569c <prvHeapInit+0xb8>)
 8005672:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	4a09      	ldr	r2, [pc, #36]	; (80056a0 <prvHeapInit+0xbc>)
 800567a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800567c:	4b09      	ldr	r3, [pc, #36]	; (80056a4 <prvHeapInit+0xc0>)
 800567e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005682:	601a      	str	r2, [r3, #0]
}
 8005684:	bf00      	nop
 8005686:	3714      	adds	r7, #20
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr
 8005690:	200017c0 	.word	0x200017c0
 8005694:	20002378 	.word	0x20002378
 8005698:	20002380 	.word	0x20002380
 800569c:	20002388 	.word	0x20002388
 80056a0:	20002384 	.word	0x20002384
 80056a4:	20002394 	.word	0x20002394

080056a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80056b0:	4b28      	ldr	r3, [pc, #160]	; (8005754 <prvInsertBlockIntoFreeList+0xac>)
 80056b2:	60fb      	str	r3, [r7, #12]
 80056b4:	e002      	b.n	80056bc <prvInsertBlockIntoFreeList+0x14>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	60fb      	str	r3, [r7, #12]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d8f7      	bhi.n	80056b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	4413      	add	r3, r2
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d108      	bne.n	80056ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	441a      	add	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	441a      	add	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d118      	bne.n	8005730 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	4b15      	ldr	r3, [pc, #84]	; (8005758 <prvInsertBlockIntoFreeList+0xb0>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	429a      	cmp	r2, r3
 8005708:	d00d      	beq.n	8005726 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685a      	ldr	r2, [r3, #4]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	441a      	add	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	e008      	b.n	8005738 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005726:	4b0c      	ldr	r3, [pc, #48]	; (8005758 <prvInsertBlockIntoFreeList+0xb0>)
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	601a      	str	r2, [r3, #0]
 800572e:	e003      	b.n	8005738 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	429a      	cmp	r2, r3
 800573e:	d002      	beq.n	8005746 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005746:	bf00      	nop
 8005748:	3714      	adds	r7, #20
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	20002378 	.word	0x20002378
 8005758:	20002380 	.word	0x20002380

0800575c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005762:	2300      	movs	r3, #0
 8005764:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set In terrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005766:	2003      	movs	r0, #3
 8005768:	f000 f994 	bl	8005a94 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800576c:	2000      	movs	r0, #0
 800576e:	f000 f80d 	bl	800578c <HAL_InitTick>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d002      	beq.n	800577e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	71fb      	strb	r3, [r7, #7]
 800577c:	e001      	b.n	8005782 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800577e:	f004 fdc9 	bl	800a314 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005782:	79fb      	ldrb	r3, [r7, #7]
}
 8005784:	4618      	mov	r0, r3
 8005786:	3708      	adds	r7, #8
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005794:	2300      	movs	r3, #0
 8005796:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005798:	4b17      	ldr	r3, [pc, #92]	; (80057f8 <HAL_InitTick+0x6c>)
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d023      	beq.n	80057e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80057a0:	4b16      	ldr	r3, [pc, #88]	; (80057fc <HAL_InitTick+0x70>)
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	4b14      	ldr	r3, [pc, #80]	; (80057f8 <HAL_InitTick+0x6c>)
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	4619      	mov	r1, r3
 80057aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80057b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b6:	4618      	mov	r0, r3
 80057b8:	f000 f9af 	bl	8005b1a <HAL_SYSTICK_Config>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10f      	bne.n	80057e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2b0f      	cmp	r3, #15
 80057c6:	d809      	bhi.n	80057dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80057c8:	2200      	movs	r2, #0
 80057ca:	6879      	ldr	r1, [r7, #4]
 80057cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057d0:	f000 f96b 	bl	8005aaa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80057d4:	4a0a      	ldr	r2, [pc, #40]	; (8005800 <HAL_InitTick+0x74>)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6013      	str	r3, [r2, #0]
 80057da:	e007      	b.n	80057ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	73fb      	strb	r3, [r7, #15]
 80057e0:	e004      	b.n	80057ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	73fb      	strb	r3, [r7, #15]
 80057e6:	e001      	b.n	80057ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80057ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	20000068 	.word	0x20000068
 80057fc:	2000006c 	.word	0x2000006c
 8005800:	20000064 	.word	0x20000064

08005804 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005804:	b480      	push	{r7}
 8005806:	af00      	add	r7, sp, #0
    //return xTaskGetTickCount();
    return uwTick;
 8005808:	4b03      	ldr	r3, [pc, #12]	; (8005818 <HAL_GetTick+0x14>)
 800580a:	681b      	ldr	r3, [r3, #0]
}
 800580c:	4618      	mov	r0, r3
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	20002398 	.word	0x20002398

0800581c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005824:	f7ff ffee 	bl	8005804 <HAL_GetTick>
 8005828:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005834:	d005      	beq.n	8005842 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005836:	4b0a      	ldr	r3, [pc, #40]	; (8005860 <HAL_Delay+0x44>)
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	461a      	mov	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4413      	add	r3, r2
 8005840:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005842:	bf00      	nop
 8005844:	f7ff ffde 	bl	8005804 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	429a      	cmp	r2, r3
 8005852:	d8f7      	bhi.n	8005844 <HAL_Delay+0x28>
  {
  }
}
 8005854:	bf00      	nop
 8005856:	bf00      	nop
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	20000068 	.word	0x20000068

08005864 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8005864:	b480      	push	{r7}
 8005866:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8005868:	4b03      	ldr	r3, [pc, #12]	; (8005878 <HAL_GetUIDw0+0x14>)
 800586a:	681b      	ldr	r3, [r3, #0]
}
 800586c:	4618      	mov	r0, r3
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	1fff7590 	.word	0x1fff7590

0800587c <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800587c:	b480      	push	{r7}
 800587e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8005880:	4b03      	ldr	r3, [pc, #12]	; (8005890 <HAL_GetUIDw1+0x14>)
 8005882:	681b      	ldr	r3, [r3, #0]
}
 8005884:	4618      	mov	r0, r3
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	1fff7594 	.word	0x1fff7594

08005894 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8005894:	b480      	push	{r7}
 8005896:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8005898:	4b03      	ldr	r3, [pc, #12]	; (80058a8 <HAL_GetUIDw2+0x14>)
 800589a:	681b      	ldr	r3, [r3, #0]
}
 800589c:	4618      	mov	r0, r3
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	1fff7598 	.word	0x1fff7598

080058ac <__NVIC_SetPriorityGrouping>:
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f003 0307 	and.w	r3, r3, #7
 80058ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80058bc:	4b0c      	ldr	r3, [pc, #48]	; (80058f0 <__NVIC_SetPriorityGrouping+0x44>)
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80058c2:	68ba      	ldr	r2, [r7, #8]
 80058c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80058c8:	4013      	ands	r3, r2
 80058ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80058d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80058d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80058de:	4a04      	ldr	r2, [pc, #16]	; (80058f0 <__NVIC_SetPriorityGrouping+0x44>)
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	60d3      	str	r3, [r2, #12]
}
 80058e4:	bf00      	nop
 80058e6:	3714      	adds	r7, #20
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr
 80058f0:	e000ed00 	.word	0xe000ed00

080058f4 <__NVIC_GetPriorityGrouping>:
{
 80058f4:	b480      	push	{r7}
 80058f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80058f8:	4b04      	ldr	r3, [pc, #16]	; (800590c <__NVIC_GetPriorityGrouping+0x18>)
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	0a1b      	lsrs	r3, r3, #8
 80058fe:	f003 0307 	and.w	r3, r3, #7
}
 8005902:	4618      	mov	r0, r3
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr
 800590c:	e000ed00 	.word	0xe000ed00

08005910 <__NVIC_EnableIRQ>:
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	4603      	mov	r3, r0
 8005918:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800591a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800591e:	2b00      	cmp	r3, #0
 8005920:	db0b      	blt.n	800593a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005922:	79fb      	ldrb	r3, [r7, #7]
 8005924:	f003 021f 	and.w	r2, r3, #31
 8005928:	4907      	ldr	r1, [pc, #28]	; (8005948 <__NVIC_EnableIRQ+0x38>)
 800592a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800592e:	095b      	lsrs	r3, r3, #5
 8005930:	2001      	movs	r0, #1
 8005932:	fa00 f202 	lsl.w	r2, r0, r2
 8005936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800593a:	bf00      	nop
 800593c:	370c      	adds	r7, #12
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	e000e100 	.word	0xe000e100

0800594c <__NVIC_DisableIRQ>:
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	4603      	mov	r3, r0
 8005954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800595a:	2b00      	cmp	r3, #0
 800595c:	db12      	blt.n	8005984 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800595e:	79fb      	ldrb	r3, [r7, #7]
 8005960:	f003 021f 	and.w	r2, r3, #31
 8005964:	490a      	ldr	r1, [pc, #40]	; (8005990 <__NVIC_DisableIRQ+0x44>)
 8005966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800596a:	095b      	lsrs	r3, r3, #5
 800596c:	2001      	movs	r0, #1
 800596e:	fa00 f202 	lsl.w	r2, r0, r2
 8005972:	3320      	adds	r3, #32
 8005974:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005978:	f3bf 8f4f 	dsb	sy
}
 800597c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800597e:	f3bf 8f6f 	isb	sy
}
 8005982:	bf00      	nop
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	e000e100 	.word	0xe000e100

08005994 <__NVIC_SetPriority>:
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	4603      	mov	r3, r0
 800599c:	6039      	str	r1, [r7, #0]
 800599e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	db0a      	blt.n	80059be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	490c      	ldr	r1, [pc, #48]	; (80059e0 <__NVIC_SetPriority+0x4c>)
 80059ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059b2:	0112      	lsls	r2, r2, #4
 80059b4:	b2d2      	uxtb	r2, r2
 80059b6:	440b      	add	r3, r1
 80059b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80059bc:	e00a      	b.n	80059d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	b2da      	uxtb	r2, r3
 80059c2:	4908      	ldr	r1, [pc, #32]	; (80059e4 <__NVIC_SetPriority+0x50>)
 80059c4:	79fb      	ldrb	r3, [r7, #7]
 80059c6:	f003 030f 	and.w	r3, r3, #15
 80059ca:	3b04      	subs	r3, #4
 80059cc:	0112      	lsls	r2, r2, #4
 80059ce:	b2d2      	uxtb	r2, r2
 80059d0:	440b      	add	r3, r1
 80059d2:	761a      	strb	r2, [r3, #24]
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	e000e100 	.word	0xe000e100
 80059e4:	e000ed00 	.word	0xe000ed00

080059e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b089      	sub	sp, #36	; 0x24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f003 0307 	and.w	r3, r3, #7
 80059fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	f1c3 0307 	rsb	r3, r3, #7
 8005a02:	2b04      	cmp	r3, #4
 8005a04:	bf28      	it	cs
 8005a06:	2304      	movcs	r3, #4
 8005a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	3304      	adds	r3, #4
 8005a0e:	2b06      	cmp	r3, #6
 8005a10:	d902      	bls.n	8005a18 <NVIC_EncodePriority+0x30>
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	3b03      	subs	r3, #3
 8005a16:	e000      	b.n	8005a1a <NVIC_EncodePriority+0x32>
 8005a18:	2300      	movs	r3, #0
 8005a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	fa02 f303 	lsl.w	r3, r2, r3
 8005a26:	43da      	mvns	r2, r3
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	401a      	ands	r2, r3
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	fa01 f303 	lsl.w	r3, r1, r3
 8005a3a:	43d9      	mvns	r1, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a40:	4313      	orrs	r3, r2
         );
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3724      	adds	r7, #36	; 0x24
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
	...

08005a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a60:	d301      	bcc.n	8005a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a62:	2301      	movs	r3, #1
 8005a64:	e00f      	b.n	8005a86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a66:	4a0a      	ldr	r2, [pc, #40]	; (8005a90 <SysTick_Config+0x40>)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a6e:	210f      	movs	r1, #15
 8005a70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a74:	f7ff ff8e 	bl	8005994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a78:	4b05      	ldr	r3, [pc, #20]	; (8005a90 <SysTick_Config+0x40>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a7e:	4b04      	ldr	r3, [pc, #16]	; (8005a90 <SysTick_Config+0x40>)
 8005a80:	2207      	movs	r2, #7
 8005a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3708      	adds	r7, #8
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	e000e010 	.word	0xe000e010

08005a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f7ff ff05 	bl	80058ac <__NVIC_SetPriorityGrouping>
}
 8005aa2:	bf00      	nop
 8005aa4:	3708      	adds	r7, #8
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b086      	sub	sp, #24
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	60b9      	str	r1, [r7, #8]
 8005ab4:	607a      	str	r2, [r7, #4]
 8005ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005abc:	f7ff ff1a 	bl	80058f4 <__NVIC_GetPriorityGrouping>
 8005ac0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	68b9      	ldr	r1, [r7, #8]
 8005ac6:	6978      	ldr	r0, [r7, #20]
 8005ac8:	f7ff ff8e 	bl	80059e8 <NVIC_EncodePriority>
 8005acc:	4602      	mov	r2, r0
 8005ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ad2:	4611      	mov	r1, r2
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7ff ff5d 	bl	8005994 <__NVIC_SetPriority>
}
 8005ada:	bf00      	nop
 8005adc:	3718      	adds	r7, #24
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b082      	sub	sp, #8
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	4603      	mov	r3, r0
 8005aea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7ff ff0d 	bl	8005910 <__NVIC_EnableIRQ>
}
 8005af6:	bf00      	nop
 8005af8:	3708      	adds	r7, #8
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b082      	sub	sp, #8
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	4603      	mov	r3, r0
 8005b06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7ff ff1d 	bl	800594c <__NVIC_DisableIRQ>
}
 8005b12:	bf00      	nop
 8005b14:	3708      	adds	r7, #8
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b082      	sub	sp, #8
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f7ff ff94 	bl	8005a50 <SysTick_Config>
 8005b28:	4603      	mov	r3, r0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3708      	adds	r7, #8
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
	...

08005b34 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e098      	b.n	8005c78 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	4b4d      	ldr	r3, [pc, #308]	; (8005c84 <HAL_DMA_Init+0x150>)
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d80f      	bhi.n	8005b72 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	461a      	mov	r2, r3
 8005b58:	4b4b      	ldr	r3, [pc, #300]	; (8005c88 <HAL_DMA_Init+0x154>)
 8005b5a:	4413      	add	r3, r2
 8005b5c:	4a4b      	ldr	r2, [pc, #300]	; (8005c8c <HAL_DMA_Init+0x158>)
 8005b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b62:	091b      	lsrs	r3, r3, #4
 8005b64:	009a      	lsls	r2, r3, #2
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a48      	ldr	r2, [pc, #288]	; (8005c90 <HAL_DMA_Init+0x15c>)
 8005b6e:	641a      	str	r2, [r3, #64]	; 0x40
 8005b70:	e00e      	b.n	8005b90 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	461a      	mov	r2, r3
 8005b78:	4b46      	ldr	r3, [pc, #280]	; (8005c94 <HAL_DMA_Init+0x160>)
 8005b7a:	4413      	add	r3, r2
 8005b7c:	4a43      	ldr	r2, [pc, #268]	; (8005c8c <HAL_DMA_Init+0x158>)
 8005b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b82:	091b      	lsrs	r3, r3, #4
 8005b84:	009a      	lsls	r2, r3, #2
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a42      	ldr	r2, [pc, #264]	; (8005c98 <HAL_DMA_Init+0x164>)
 8005b8e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2202      	movs	r2, #2
 8005b94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005baa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005bb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bea:	d039      	beq.n	8005c60 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf0:	4a27      	ldr	r2, [pc, #156]	; (8005c90 <HAL_DMA_Init+0x15c>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d11a      	bne.n	8005c2c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005bf6:	4b29      	ldr	r3, [pc, #164]	; (8005c9c <HAL_DMA_Init+0x168>)
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bfe:	f003 031c 	and.w	r3, r3, #28
 8005c02:	210f      	movs	r1, #15
 8005c04:	fa01 f303 	lsl.w	r3, r1, r3
 8005c08:	43db      	mvns	r3, r3
 8005c0a:	4924      	ldr	r1, [pc, #144]	; (8005c9c <HAL_DMA_Init+0x168>)
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005c10:	4b22      	ldr	r3, [pc, #136]	; (8005c9c <HAL_DMA_Init+0x168>)
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6859      	ldr	r1, [r3, #4]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c1c:	f003 031c 	and.w	r3, r3, #28
 8005c20:	fa01 f303 	lsl.w	r3, r1, r3
 8005c24:	491d      	ldr	r1, [pc, #116]	; (8005c9c <HAL_DMA_Init+0x168>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	600b      	str	r3, [r1, #0]
 8005c2a:	e019      	b.n	8005c60 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005c2c:	4b1c      	ldr	r3, [pc, #112]	; (8005ca0 <HAL_DMA_Init+0x16c>)
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c34:	f003 031c 	and.w	r3, r3, #28
 8005c38:	210f      	movs	r1, #15
 8005c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c3e:	43db      	mvns	r3, r3
 8005c40:	4917      	ldr	r1, [pc, #92]	; (8005ca0 <HAL_DMA_Init+0x16c>)
 8005c42:	4013      	ands	r3, r2
 8005c44:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005c46:	4b16      	ldr	r3, [pc, #88]	; (8005ca0 <HAL_DMA_Init+0x16c>)
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6859      	ldr	r1, [r3, #4]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c52:	f003 031c 	and.w	r3, r3, #28
 8005c56:	fa01 f303 	lsl.w	r3, r1, r3
 8005c5a:	4911      	ldr	r1, [pc, #68]	; (8005ca0 <HAL_DMA_Init+0x16c>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3714      	adds	r7, #20
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr
 8005c84:	40020407 	.word	0x40020407
 8005c88:	bffdfff8 	.word	0xbffdfff8
 8005c8c:	cccccccd 	.word	0xcccccccd
 8005c90:	40020000 	.word	0x40020000
 8005c94:	bffdfbf8 	.word	0xbffdfbf8
 8005c98:	40020400 	.word	0x40020400
 8005c9c:	400200a8 	.word	0x400200a8
 8005ca0:	400204a8 	.word	0x400204a8

08005ca4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
 8005cb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d101      	bne.n	8005cc4 <HAL_DMA_Start_IT+0x20>
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	e04b      	b.n	8005d5c <HAL_DMA_Start_IT+0xb8>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d13a      	bne.n	8005d4e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2202      	movs	r2, #2
 8005cdc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f022 0201 	bic.w	r2, r2, #1
 8005cf4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	68b9      	ldr	r1, [r7, #8]
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f000 f969 	bl	8005fd4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d008      	beq.n	8005d1c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f042 020e 	orr.w	r2, r2, #14
 8005d18:	601a      	str	r2, [r3, #0]
 8005d1a:	e00f      	b.n	8005d3c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f022 0204 	bic.w	r2, r2, #4
 8005d2a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f042 020a 	orr.w	r2, r2, #10
 8005d3a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f042 0201 	orr.w	r2, r2, #1
 8005d4a:	601a      	str	r2, [r3, #0]
 8005d4c:	e005      	b.n	8005d5a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005d56:	2302      	movs	r3, #2
 8005d58:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3718      	adds	r7, #24
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d005      	beq.n	8005d88 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2204      	movs	r2, #4
 8005d80:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	73fb      	strb	r3, [r7, #15]
 8005d86:	e029      	b.n	8005ddc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f022 020e 	bic.w	r2, r2, #14
 8005d96:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f022 0201 	bic.w	r2, r2, #1
 8005da6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dac:	f003 021c 	and.w	r2, r3, #28
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db4:	2101      	movs	r1, #1
 8005db6:	fa01 f202 	lsl.w	r2, r1, r2
 8005dba:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d003      	beq.n	8005ddc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	4798      	blx	r3
    }
  }
  return status;
 8005ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b084      	sub	sp, #16
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e02:	f003 031c 	and.w	r3, r3, #28
 8005e06:	2204      	movs	r2, #4
 8005e08:	409a      	lsls	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d026      	beq.n	8005e60 <HAL_DMA_IRQHandler+0x7a>
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	f003 0304 	and.w	r3, r3, #4
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d021      	beq.n	8005e60 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0320 	and.w	r3, r3, #32
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d107      	bne.n	8005e3a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f022 0204 	bic.w	r2, r2, #4
 8005e38:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e3e:	f003 021c 	and.w	r2, r3, #28
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e46:	2104      	movs	r1, #4
 8005e48:	fa01 f202 	lsl.w	r2, r1, r2
 8005e4c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d071      	beq.n	8005f3a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005e5e:	e06c      	b.n	8005f3a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e64:	f003 031c 	and.w	r3, r3, #28
 8005e68:	2202      	movs	r2, #2
 8005e6a:	409a      	lsls	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	4013      	ands	r3, r2
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d02e      	beq.n	8005ed2 <HAL_DMA_IRQHandler+0xec>
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	f003 0302 	and.w	r3, r3, #2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d029      	beq.n	8005ed2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0320 	and.w	r3, r3, #32
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10b      	bne.n	8005ea4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f022 020a 	bic.w	r2, r2, #10
 8005e9a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea8:	f003 021c 	and.w	r2, r3, #28
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb0:	2102      	movs	r1, #2
 8005eb2:	fa01 f202 	lsl.w	r2, r1, r2
 8005eb6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d038      	beq.n	8005f3a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005ed0:	e033      	b.n	8005f3a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed6:	f003 031c 	and.w	r3, r3, #28
 8005eda:	2208      	movs	r2, #8
 8005edc:	409a      	lsls	r2, r3
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d02a      	beq.n	8005f3c <HAL_DMA_IRQHandler+0x156>
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	f003 0308 	and.w	r3, r3, #8
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d025      	beq.n	8005f3c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f022 020e 	bic.w	r2, r2, #14
 8005efe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f04:	f003 021c 	and.w	r2, r3, #28
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0c:	2101      	movs	r1, #1
 8005f0e:	fa01 f202 	lsl.w	r2, r1, r2
 8005f12:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d004      	beq.n	8005f3c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005f3a:	bf00      	nop
 8005f3c:	bf00      	nop
}
 8005f3e:	3710      	adds	r7, #16
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 8005f44:	b480      	push	{r7}
 8005f46:	b087      	sub	sp, #28
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	607a      	str	r2, [r7, #4]
 8005f50:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005f52:	2300      	movs	r3, #0
 8005f54:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d101      	bne.n	8005f64 <HAL_DMA_RegisterCallback+0x20>
 8005f60:	2302      	movs	r3, #2
 8005f62:	e031      	b.n	8005fc8 <HAL_DMA_RegisterCallback+0x84>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d120      	bne.n	8005fba <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8005f78:	7afb      	ldrb	r3, [r7, #11]
 8005f7a:	2b03      	cmp	r3, #3
 8005f7c:	d81a      	bhi.n	8005fb4 <HAL_DMA_RegisterCallback+0x70>
 8005f7e:	a201      	add	r2, pc, #4	; (adr r2, 8005f84 <HAL_DMA_RegisterCallback+0x40>)
 8005f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f84:	08005f95 	.word	0x08005f95
 8005f88:	08005f9d 	.word	0x08005f9d
 8005f8c:	08005fa5 	.word	0x08005fa5
 8005f90:	08005fad 	.word	0x08005fad
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = pCallback;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	62da      	str	r2, [r3, #44]	; 0x2c
           break;
 8005f9a:	e010      	b.n	8005fbe <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = pCallback;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	631a      	str	r2, [r3, #48]	; 0x30
           break;
 8005fa2:	e00c      	b.n	8005fbe <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = pCallback;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	635a      	str	r2, [r3, #52]	; 0x34
           break;
 8005faa:	e008      	b.n	8005fbe <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = pCallback;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 8005fb2:	e004      	b.n	8005fbe <HAL_DMA_RegisterCallback+0x7a>

     default:
           status = HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	75fb      	strb	r3, [r7, #23]
           break;
 8005fb8:	e001      	b.n	8005fbe <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8005fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	371c      	adds	r7, #28
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	607a      	str	r2, [r7, #4]
 8005fe0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe6:	f003 021c 	and.w	r2, r3, #28
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fee:	2101      	movs	r1, #1
 8005ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8005ff4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	683a      	ldr	r2, [r7, #0]
 8005ffc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	2b10      	cmp	r3, #16
 8006004:	d108      	bne.n	8006018 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006016:	e007      	b.n	8006028 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68ba      	ldr	r2, [r7, #8]
 800601e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	60da      	str	r2, [r3, #12]
}
 8006028:	bf00      	nop
 800602a:	3714      	adds	r7, #20
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006034:	b480      	push	{r7}
 8006036:	b087      	sub	sp, #28
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800603e:	2300      	movs	r3, #0
 8006040:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006042:	e154      	b.n	80062ee <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	2101      	movs	r1, #1
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	fa01 f303 	lsl.w	r3, r1, r3
 8006050:	4013      	ands	r3, r2
 8006052:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2b00      	cmp	r3, #0
 8006058:	f000 8146 	beq.w	80062e8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	f003 0303 	and.w	r3, r3, #3
 8006064:	2b01      	cmp	r3, #1
 8006066:	d005      	beq.n	8006074 <HAL_GPIO_Init+0x40>
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	f003 0303 	and.w	r3, r3, #3
 8006070:	2b02      	cmp	r3, #2
 8006072:	d130      	bne.n	80060d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	005b      	lsls	r3, r3, #1
 800607e:	2203      	movs	r2, #3
 8006080:	fa02 f303 	lsl.w	r3, r2, r3
 8006084:	43db      	mvns	r3, r3
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	4013      	ands	r3, r2
 800608a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	68da      	ldr	r2, [r3, #12]
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	005b      	lsls	r3, r3, #1
 8006094:	fa02 f303 	lsl.w	r3, r2, r3
 8006098:	693a      	ldr	r2, [r7, #16]
 800609a:	4313      	orrs	r3, r2
 800609c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80060aa:	2201      	movs	r2, #1
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	fa02 f303 	lsl.w	r3, r2, r3
 80060b2:	43db      	mvns	r3, r3
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	4013      	ands	r3, r2
 80060b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	091b      	lsrs	r3, r3, #4
 80060c0:	f003 0201 	and.w	r2, r3, #1
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ca:	693a      	ldr	r2, [r7, #16]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	f003 0303 	and.w	r3, r3, #3
 80060de:	2b03      	cmp	r3, #3
 80060e0:	d017      	beq.n	8006112 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	005b      	lsls	r3, r3, #1
 80060ec:	2203      	movs	r2, #3
 80060ee:	fa02 f303 	lsl.w	r3, r2, r3
 80060f2:	43db      	mvns	r3, r3
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	4013      	ands	r3, r2
 80060f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	689a      	ldr	r2, [r3, #8]
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	005b      	lsls	r3, r3, #1
 8006102:	fa02 f303 	lsl.w	r3, r2, r3
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	4313      	orrs	r3, r2
 800610a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	693a      	ldr	r2, [r7, #16]
 8006110:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	f003 0303 	and.w	r3, r3, #3
 800611a:	2b02      	cmp	r3, #2
 800611c:	d123      	bne.n	8006166 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	08da      	lsrs	r2, r3, #3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	3208      	adds	r2, #8
 8006126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800612a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	f003 0307 	and.w	r3, r3, #7
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	220f      	movs	r2, #15
 8006136:	fa02 f303 	lsl.w	r3, r2, r3
 800613a:	43db      	mvns	r3, r3
 800613c:	693a      	ldr	r2, [r7, #16]
 800613e:	4013      	ands	r3, r2
 8006140:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	691a      	ldr	r2, [r3, #16]
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	f003 0307 	and.w	r3, r3, #7
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	fa02 f303 	lsl.w	r3, r2, r3
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	4313      	orrs	r3, r2
 8006156:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	08da      	lsrs	r2, r3, #3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	3208      	adds	r2, #8
 8006160:	6939      	ldr	r1, [r7, #16]
 8006162:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	005b      	lsls	r3, r3, #1
 8006170:	2203      	movs	r2, #3
 8006172:	fa02 f303 	lsl.w	r3, r2, r3
 8006176:	43db      	mvns	r3, r3
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	4013      	ands	r3, r2
 800617c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f003 0203 	and.w	r2, r3, #3
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	005b      	lsls	r3, r3, #1
 800618a:	fa02 f303 	lsl.w	r3, r2, r3
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	4313      	orrs	r3, r2
 8006192:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f000 80a0 	beq.w	80062e8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061a8:	4b58      	ldr	r3, [pc, #352]	; (800630c <HAL_GPIO_Init+0x2d8>)
 80061aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061ac:	4a57      	ldr	r2, [pc, #348]	; (800630c <HAL_GPIO_Init+0x2d8>)
 80061ae:	f043 0301 	orr.w	r3, r3, #1
 80061b2:	6613      	str	r3, [r2, #96]	; 0x60
 80061b4:	4b55      	ldr	r3, [pc, #340]	; (800630c <HAL_GPIO_Init+0x2d8>)
 80061b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061b8:	f003 0301 	and.w	r3, r3, #1
 80061bc:	60bb      	str	r3, [r7, #8]
 80061be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80061c0:	4a53      	ldr	r2, [pc, #332]	; (8006310 <HAL_GPIO_Init+0x2dc>)
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	089b      	lsrs	r3, r3, #2
 80061c6:	3302      	adds	r3, #2
 80061c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f003 0303 	and.w	r3, r3, #3
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	220f      	movs	r2, #15
 80061d8:	fa02 f303 	lsl.w	r3, r2, r3
 80061dc:	43db      	mvns	r3, r3
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	4013      	ands	r3, r2
 80061e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80061ea:	d019      	beq.n	8006220 <HAL_GPIO_Init+0x1ec>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a49      	ldr	r2, [pc, #292]	; (8006314 <HAL_GPIO_Init+0x2e0>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d013      	beq.n	800621c <HAL_GPIO_Init+0x1e8>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a48      	ldr	r2, [pc, #288]	; (8006318 <HAL_GPIO_Init+0x2e4>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d00d      	beq.n	8006218 <HAL_GPIO_Init+0x1e4>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a47      	ldr	r2, [pc, #284]	; (800631c <HAL_GPIO_Init+0x2e8>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d007      	beq.n	8006214 <HAL_GPIO_Init+0x1e0>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a46      	ldr	r2, [pc, #280]	; (8006320 <HAL_GPIO_Init+0x2ec>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d101      	bne.n	8006210 <HAL_GPIO_Init+0x1dc>
 800620c:	2304      	movs	r3, #4
 800620e:	e008      	b.n	8006222 <HAL_GPIO_Init+0x1ee>
 8006210:	2307      	movs	r3, #7
 8006212:	e006      	b.n	8006222 <HAL_GPIO_Init+0x1ee>
 8006214:	2303      	movs	r3, #3
 8006216:	e004      	b.n	8006222 <HAL_GPIO_Init+0x1ee>
 8006218:	2302      	movs	r3, #2
 800621a:	e002      	b.n	8006222 <HAL_GPIO_Init+0x1ee>
 800621c:	2301      	movs	r3, #1
 800621e:	e000      	b.n	8006222 <HAL_GPIO_Init+0x1ee>
 8006220:	2300      	movs	r3, #0
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	f002 0203 	and.w	r2, r2, #3
 8006228:	0092      	lsls	r2, r2, #2
 800622a:	4093      	lsls	r3, r2
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	4313      	orrs	r3, r2
 8006230:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006232:	4937      	ldr	r1, [pc, #220]	; (8006310 <HAL_GPIO_Init+0x2dc>)
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	089b      	lsrs	r3, r3, #2
 8006238:	3302      	adds	r3, #2
 800623a:	693a      	ldr	r2, [r7, #16]
 800623c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006240:	4b38      	ldr	r3, [pc, #224]	; (8006324 <HAL_GPIO_Init+0x2f0>)
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	43db      	mvns	r3, r3
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	4013      	ands	r3, r2
 800624e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006258:	2b00      	cmp	r3, #0
 800625a:	d003      	beq.n	8006264 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	4313      	orrs	r3, r2
 8006262:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006264:	4a2f      	ldr	r2, [pc, #188]	; (8006324 <HAL_GPIO_Init+0x2f0>)
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800626a:	4b2e      	ldr	r3, [pc, #184]	; (8006324 <HAL_GPIO_Init+0x2f0>)
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	43db      	mvns	r3, r3
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	4013      	ands	r3, r2
 8006278:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d003      	beq.n	800628e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8006286:	693a      	ldr	r2, [r7, #16]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	4313      	orrs	r3, r2
 800628c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800628e:	4a25      	ldr	r2, [pc, #148]	; (8006324 <HAL_GPIO_Init+0x2f0>)
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006294:	4b23      	ldr	r3, [pc, #140]	; (8006324 <HAL_GPIO_Init+0x2f0>)
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	43db      	mvns	r3, r3
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	4013      	ands	r3, r2
 80062a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d003      	beq.n	80062b8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80062b8:	4a1a      	ldr	r2, [pc, #104]	; (8006324 <HAL_GPIO_Init+0x2f0>)
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80062be:	4b19      	ldr	r3, [pc, #100]	; (8006324 <HAL_GPIO_Init+0x2f0>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	43db      	mvns	r3, r3
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	4013      	ands	r3, r2
 80062cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d003      	beq.n	80062e2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	4313      	orrs	r3, r2
 80062e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80062e2:	4a10      	ldr	r2, [pc, #64]	; (8006324 <HAL_GPIO_Init+0x2f0>)
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	3301      	adds	r3, #1
 80062ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	fa22 f303 	lsr.w	r3, r2, r3
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f47f aea3 	bne.w	8006044 <HAL_GPIO_Init+0x10>
  }
}
 80062fe:	bf00      	nop
 8006300:	bf00      	nop
 8006302:	371c      	adds	r7, #28
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr
 800630c:	40021000 	.word	0x40021000
 8006310:	40010000 	.word	0x40010000
 8006314:	48000400 	.word	0x48000400
 8006318:	48000800 	.word	0x48000800
 800631c:	48000c00 	.word	0x48000c00
 8006320:	48001000 	.word	0x48001000
 8006324:	40010400 	.word	0x40010400

08006328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	460b      	mov	r3, r1
 8006332:	807b      	strh	r3, [r7, #2]
 8006334:	4613      	mov	r3, r2
 8006336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006338:	787b      	ldrb	r3, [r7, #1]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d003      	beq.n	8006346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800633e:	887a      	ldrh	r2, [r7, #2]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006344:	e002      	b.n	800634c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006346:	887a      	ldrh	r2, [r7, #2]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	4603      	mov	r3, r0
 8006360:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006362:	4b08      	ldr	r3, [pc, #32]	; (8006384 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006364:	695a      	ldr	r2, [r3, #20]
 8006366:	88fb      	ldrh	r3, [r7, #6]
 8006368:	4013      	ands	r3, r2
 800636a:	2b00      	cmp	r3, #0
 800636c:	d006      	beq.n	800637c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800636e:	4a05      	ldr	r2, [pc, #20]	; (8006384 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006370:	88fb      	ldrh	r3, [r7, #6]
 8006372:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006374:	88fb      	ldrh	r3, [r7, #6]
 8006376:	4618      	mov	r0, r3
 8006378:	f004 faca 	bl	800a910 <HAL_GPIO_EXTI_Callback>
  }
}
 800637c:	bf00      	nop
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	40010400 	.word	0x40010400

08006388 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006388:	b480      	push	{r7}
 800638a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800638c:	4b05      	ldr	r3, [pc, #20]	; (80063a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a04      	ldr	r2, [pc, #16]	; (80063a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006392:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006396:	6013      	str	r3, [r2, #0]
}
 8006398:	bf00      	nop
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	40007000 	.word	0x40007000

080063a8 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 80063b0:	4b2b      	ldr	r3, [pc, #172]	; (8006460 <HAL_PWR_ConfigPVD+0xb8>)
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	f023 020e 	bic.w	r2, r3, #14
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4928      	ldr	r1, [pc, #160]	; (8006460 <HAL_PWR_ConfigPVD+0xb8>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 80063c2:	4b28      	ldr	r3, [pc, #160]	; (8006464 <HAL_PWR_ConfigPVD+0xbc>)
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	4a27      	ldr	r2, [pc, #156]	; (8006464 <HAL_PWR_ConfigPVD+0xbc>)
 80063c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063cc:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 80063ce:	4b25      	ldr	r3, [pc, #148]	; (8006464 <HAL_PWR_ConfigPVD+0xbc>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a24      	ldr	r2, [pc, #144]	; (8006464 <HAL_PWR_ConfigPVD+0xbc>)
 80063d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063d8:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 80063da:	4b22      	ldr	r3, [pc, #136]	; (8006464 <HAL_PWR_ConfigPVD+0xbc>)
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	4a21      	ldr	r2, [pc, #132]	; (8006464 <HAL_PWR_ConfigPVD+0xbc>)
 80063e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063e4:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 80063e6:	4b1f      	ldr	r3, [pc, #124]	; (8006464 <HAL_PWR_ConfigPVD+0xbc>)
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	4a1e      	ldr	r2, [pc, #120]	; (8006464 <HAL_PWR_ConfigPVD+0xbc>)
 80063ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063f0:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d005      	beq.n	800640a <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 80063fe:	4b19      	ldr	r3, [pc, #100]	; (8006464 <HAL_PWR_ConfigPVD+0xbc>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a18      	ldr	r2, [pc, #96]	; (8006464 <HAL_PWR_ConfigPVD+0xbc>)
 8006404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006408:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d005      	beq.n	8006422 <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8006416:	4b13      	ldr	r3, [pc, #76]	; (8006464 <HAL_PWR_ConfigPVD+0xbc>)
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	4a12      	ldr	r2, [pc, #72]	; (8006464 <HAL_PWR_ConfigPVD+0xbc>)
 800641c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006420:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	f003 0301 	and.w	r3, r3, #1
 800642a:	2b00      	cmp	r3, #0
 800642c:	d005      	beq.n	800643a <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800642e:	4b0d      	ldr	r3, [pc, #52]	; (8006464 <HAL_PWR_ConfigPVD+0xbc>)
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	4a0c      	ldr	r2, [pc, #48]	; (8006464 <HAL_PWR_ConfigPVD+0xbc>)
 8006434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006438:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	f003 0302 	and.w	r3, r3, #2
 8006442:	2b00      	cmp	r3, #0
 8006444:	d005      	beq.n	8006452 <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8006446:	4b07      	ldr	r3, [pc, #28]	; (8006464 <HAL_PWR_ConfigPVD+0xbc>)
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	4a06      	ldr	r2, [pc, #24]	; (8006464 <HAL_PWR_ConfigPVD+0xbc>)
 800644c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006450:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr
 8006460:	40007000 	.word	0x40007000
 8006464:	40010400 	.word	0x40010400

08006468 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8006468:	b480      	push	{r7}
 800646a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 800646c:	4b05      	ldr	r3, [pc, #20]	; (8006484 <HAL_PWR_EnablePVD+0x1c>)
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	4a04      	ldr	r2, [pc, #16]	; (8006484 <HAL_PWR_EnablePVD+0x1c>)
 8006472:	f043 0301 	orr.w	r3, r3, #1
 8006476:	6053      	str	r3, [r2, #4]
}
 8006478:	bf00      	nop
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	40007000 	.word	0x40007000

08006488 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006488:	b480      	push	{r7}
 800648a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800648c:	4b04      	ldr	r3, [pc, #16]	; (80064a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006494:	4618      	mov	r0, r3
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	40007000 	.word	0x40007000

080064a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064b2:	d130      	bne.n	8006516 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80064b4:	4b23      	ldr	r3, [pc, #140]	; (8006544 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80064bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064c0:	d038      	beq.n	8006534 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80064c2:	4b20      	ldr	r3, [pc, #128]	; (8006544 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80064ca:	4a1e      	ldr	r2, [pc, #120]	; (8006544 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80064cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80064d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80064d2:	4b1d      	ldr	r3, [pc, #116]	; (8006548 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2232      	movs	r2, #50	; 0x32
 80064d8:	fb02 f303 	mul.w	r3, r2, r3
 80064dc:	4a1b      	ldr	r2, [pc, #108]	; (800654c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80064de:	fba2 2303 	umull	r2, r3, r2, r3
 80064e2:	0c9b      	lsrs	r3, r3, #18
 80064e4:	3301      	adds	r3, #1
 80064e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80064e8:	e002      	b.n	80064f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	3b01      	subs	r3, #1
 80064ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80064f0:	4b14      	ldr	r3, [pc, #80]	; (8006544 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80064f2:	695b      	ldr	r3, [r3, #20]
 80064f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064fc:	d102      	bne.n	8006504 <HAL_PWREx_ControlVoltageScaling+0x60>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d1f2      	bne.n	80064ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006504:	4b0f      	ldr	r3, [pc, #60]	; (8006544 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006506:	695b      	ldr	r3, [r3, #20]
 8006508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800650c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006510:	d110      	bne.n	8006534 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e00f      	b.n	8006536 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006516:	4b0b      	ldr	r3, [pc, #44]	; (8006544 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800651e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006522:	d007      	beq.n	8006534 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006524:	4b07      	ldr	r3, [pc, #28]	; (8006544 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800652c:	4a05      	ldr	r2, [pc, #20]	; (8006544 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800652e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006532:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3714      	adds	r7, #20
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	40007000 	.word	0x40007000
 8006548:	2000006c 	.word	0x2000006c
 800654c:	431bde83 	.word	0x431bde83

08006550 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b088      	sub	sp, #32
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d102      	bne.n	8006564 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	f000 bc02 	b.w	8006d68 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006564:	4b96      	ldr	r3, [pc, #600]	; (80067c0 <HAL_RCC_OscConfig+0x270>)
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	f003 030c 	and.w	r3, r3, #12
 800656c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800656e:	4b94      	ldr	r3, [pc, #592]	; (80067c0 <HAL_RCC_OscConfig+0x270>)
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	f003 0303 	and.w	r3, r3, #3
 8006576:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0310 	and.w	r3, r3, #16
 8006580:	2b00      	cmp	r3, #0
 8006582:	f000 80e4 	beq.w	800674e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d007      	beq.n	800659c <HAL_RCC_OscConfig+0x4c>
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	2b0c      	cmp	r3, #12
 8006590:	f040 808b 	bne.w	80066aa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	2b01      	cmp	r3, #1
 8006598:	f040 8087 	bne.w	80066aa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800659c:	4b88      	ldr	r3, [pc, #544]	; (80067c0 <HAL_RCC_OscConfig+0x270>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 0302 	and.w	r3, r3, #2
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d005      	beq.n	80065b4 <HAL_RCC_OscConfig+0x64>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	699b      	ldr	r3, [r3, #24]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d101      	bne.n	80065b4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e3d9      	b.n	8006d68 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a1a      	ldr	r2, [r3, #32]
 80065b8:	4b81      	ldr	r3, [pc, #516]	; (80067c0 <HAL_RCC_OscConfig+0x270>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0308 	and.w	r3, r3, #8
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d004      	beq.n	80065ce <HAL_RCC_OscConfig+0x7e>
 80065c4:	4b7e      	ldr	r3, [pc, #504]	; (80067c0 <HAL_RCC_OscConfig+0x270>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065cc:	e005      	b.n	80065da <HAL_RCC_OscConfig+0x8a>
 80065ce:	4b7c      	ldr	r3, [pc, #496]	; (80067c0 <HAL_RCC_OscConfig+0x270>)
 80065d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065d4:	091b      	lsrs	r3, r3, #4
 80065d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065da:	4293      	cmp	r3, r2
 80065dc:	d223      	bcs.n	8006626 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	4618      	mov	r0, r3
 80065e4:	f000 fd8c 	bl	8007100 <RCC_SetFlashLatencyFromMSIRange>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e3ba      	b.n	8006d68 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80065f2:	4b73      	ldr	r3, [pc, #460]	; (80067c0 <HAL_RCC_OscConfig+0x270>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a72      	ldr	r2, [pc, #456]	; (80067c0 <HAL_RCC_OscConfig+0x270>)
 80065f8:	f043 0308 	orr.w	r3, r3, #8
 80065fc:	6013      	str	r3, [r2, #0]
 80065fe:	4b70      	ldr	r3, [pc, #448]	; (80067c0 <HAL_RCC_OscConfig+0x270>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	496d      	ldr	r1, [pc, #436]	; (80067c0 <HAL_RCC_OscConfig+0x270>)
 800660c:	4313      	orrs	r3, r2
 800660e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006610:	4b6b      	ldr	r3, [pc, #428]	; (80067c0 <HAL_RCC_OscConfig+0x270>)
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	69db      	ldr	r3, [r3, #28]
 800661c:	021b      	lsls	r3, r3, #8
 800661e:	4968      	ldr	r1, [pc, #416]	; (80067c0 <HAL_RCC_OscConfig+0x270>)
 8006620:	4313      	orrs	r3, r2
 8006622:	604b      	str	r3, [r1, #4]
 8006624:	e025      	b.n	8006672 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006626:	4b66      	ldr	r3, [pc, #408]	; (80067c0 <HAL_RCC_OscConfig+0x270>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a65      	ldr	r2, [pc, #404]	; (80067c0 <HAL_RCC_OscConfig+0x270>)
 800662c:	f043 0308 	orr.w	r3, r3, #8
 8006630:	6013      	str	r3, [r2, #0]
 8006632:	4b63      	ldr	r3, [pc, #396]	; (80067c0 <HAL_RCC_OscConfig+0x270>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	4960      	ldr	r1, [pc, #384]	; (80067c0 <HAL_RCC_OscConfig+0x270>)
 8006640:	4313      	orrs	r3, r2
 8006642:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006644:	4b5e      	ldr	r3, [pc, #376]	; (80067c0 <HAL_RCC_OscConfig+0x270>)
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	69db      	ldr	r3, [r3, #28]
 8006650:	021b      	lsls	r3, r3, #8
 8006652:	495b      	ldr	r1, [pc, #364]	; (80067c0 <HAL_RCC_OscConfig+0x270>)
 8006654:	4313      	orrs	r3, r2
 8006656:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d109      	bne.n	8006672 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	4618      	mov	r0, r3
 8006664:	f000 fd4c 	bl	8007100 <RCC_SetFlashLatencyFromMSIRange>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d001      	beq.n	8006672 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e37a      	b.n	8006d68 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006672:	f000 fc81 	bl	8006f78 <HAL_RCC_GetSysClockFreq>
 8006676:	4602      	mov	r2, r0
 8006678:	4b51      	ldr	r3, [pc, #324]	; (80067c0 <HAL_RCC_OscConfig+0x270>)
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	091b      	lsrs	r3, r3, #4
 800667e:	f003 030f 	and.w	r3, r3, #15
 8006682:	4950      	ldr	r1, [pc, #320]	; (80067c4 <HAL_RCC_OscConfig+0x274>)
 8006684:	5ccb      	ldrb	r3, [r1, r3]
 8006686:	f003 031f 	and.w	r3, r3, #31
 800668a:	fa22 f303 	lsr.w	r3, r2, r3
 800668e:	4a4e      	ldr	r2, [pc, #312]	; (80067c8 <HAL_RCC_OscConfig+0x278>)
 8006690:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006692:	4b4e      	ldr	r3, [pc, #312]	; (80067cc <HAL_RCC_OscConfig+0x27c>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4618      	mov	r0, r3
 8006698:	f7ff f878 	bl	800578c <HAL_InitTick>
 800669c:	4603      	mov	r3, r0
 800669e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80066a0:	7bfb      	ldrb	r3, [r7, #15]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d052      	beq.n	800674c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80066a6:	7bfb      	ldrb	r3, [r7, #15]
 80066a8:	e35e      	b.n	8006d68 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d032      	beq.n	8006718 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80066b2:	4b43      	ldr	r3, [pc, #268]	; (80067c0 <HAL_RCC_OscConfig+0x270>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a42      	ldr	r2, [pc, #264]	; (80067c0 <HAL_RCC_OscConfig+0x270>)
 80066b8:	f043 0301 	orr.w	r3, r3, #1
 80066bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80066be:	f7ff f8a1 	bl	8005804 <HAL_GetTick>
 80066c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80066c4:	e008      	b.n	80066d8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80066c6:	f7ff f89d 	bl	8005804 <HAL_GetTick>
 80066ca:	4602      	mov	r2, r0
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d901      	bls.n	80066d8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e347      	b.n	8006d68 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80066d8:	4b39      	ldr	r3, [pc, #228]	; (80067c0 <HAL_RCC_OscConfig+0x270>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0302 	and.w	r3, r3, #2
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d0f0      	beq.n	80066c6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80066e4:	4b36      	ldr	r3, [pc, #216]	; (80067c0 <HAL_RCC_OscConfig+0x270>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a35      	ldr	r2, [pc, #212]	; (80067c0 <HAL_RCC_OscConfig+0x270>)
 80066ea:	f043 0308 	orr.w	r3, r3, #8
 80066ee:	6013      	str	r3, [r2, #0]
 80066f0:	4b33      	ldr	r3, [pc, #204]	; (80067c0 <HAL_RCC_OscConfig+0x270>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a1b      	ldr	r3, [r3, #32]
 80066fc:	4930      	ldr	r1, [pc, #192]	; (80067c0 <HAL_RCC_OscConfig+0x270>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006702:	4b2f      	ldr	r3, [pc, #188]	; (80067c0 <HAL_RCC_OscConfig+0x270>)
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	69db      	ldr	r3, [r3, #28]
 800670e:	021b      	lsls	r3, r3, #8
 8006710:	492b      	ldr	r1, [pc, #172]	; (80067c0 <HAL_RCC_OscConfig+0x270>)
 8006712:	4313      	orrs	r3, r2
 8006714:	604b      	str	r3, [r1, #4]
 8006716:	e01a      	b.n	800674e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006718:	4b29      	ldr	r3, [pc, #164]	; (80067c0 <HAL_RCC_OscConfig+0x270>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a28      	ldr	r2, [pc, #160]	; (80067c0 <HAL_RCC_OscConfig+0x270>)
 800671e:	f023 0301 	bic.w	r3, r3, #1
 8006722:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006724:	f7ff f86e 	bl	8005804 <HAL_GetTick>
 8006728:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800672a:	e008      	b.n	800673e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800672c:	f7ff f86a 	bl	8005804 <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	2b02      	cmp	r3, #2
 8006738:	d901      	bls.n	800673e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e314      	b.n	8006d68 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800673e:	4b20      	ldr	r3, [pc, #128]	; (80067c0 <HAL_RCC_OscConfig+0x270>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0302 	and.w	r3, r3, #2
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1f0      	bne.n	800672c <HAL_RCC_OscConfig+0x1dc>
 800674a:	e000      	b.n	800674e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800674c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 0301 	and.w	r3, r3, #1
 8006756:	2b00      	cmp	r3, #0
 8006758:	d073      	beq.n	8006842 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	2b08      	cmp	r3, #8
 800675e:	d005      	beq.n	800676c <HAL_RCC_OscConfig+0x21c>
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	2b0c      	cmp	r3, #12
 8006764:	d10e      	bne.n	8006784 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	2b03      	cmp	r3, #3
 800676a:	d10b      	bne.n	8006784 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800676c:	4b14      	ldr	r3, [pc, #80]	; (80067c0 <HAL_RCC_OscConfig+0x270>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d063      	beq.n	8006840 <HAL_RCC_OscConfig+0x2f0>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d15f      	bne.n	8006840 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e2f1      	b.n	8006d68 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800678c:	d106      	bne.n	800679c <HAL_RCC_OscConfig+0x24c>
 800678e:	4b0c      	ldr	r3, [pc, #48]	; (80067c0 <HAL_RCC_OscConfig+0x270>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a0b      	ldr	r2, [pc, #44]	; (80067c0 <HAL_RCC_OscConfig+0x270>)
 8006794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006798:	6013      	str	r3, [r2, #0]
 800679a:	e025      	b.n	80067e8 <HAL_RCC_OscConfig+0x298>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067a4:	d114      	bne.n	80067d0 <HAL_RCC_OscConfig+0x280>
 80067a6:	4b06      	ldr	r3, [pc, #24]	; (80067c0 <HAL_RCC_OscConfig+0x270>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a05      	ldr	r2, [pc, #20]	; (80067c0 <HAL_RCC_OscConfig+0x270>)
 80067ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067b0:	6013      	str	r3, [r2, #0]
 80067b2:	4b03      	ldr	r3, [pc, #12]	; (80067c0 <HAL_RCC_OscConfig+0x270>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a02      	ldr	r2, [pc, #8]	; (80067c0 <HAL_RCC_OscConfig+0x270>)
 80067b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067bc:	6013      	str	r3, [r2, #0]
 80067be:	e013      	b.n	80067e8 <HAL_RCC_OscConfig+0x298>
 80067c0:	40021000 	.word	0x40021000
 80067c4:	0800c150 	.word	0x0800c150
 80067c8:	2000006c 	.word	0x2000006c
 80067cc:	20000064 	.word	0x20000064
 80067d0:	4ba0      	ldr	r3, [pc, #640]	; (8006a54 <HAL_RCC_OscConfig+0x504>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a9f      	ldr	r2, [pc, #636]	; (8006a54 <HAL_RCC_OscConfig+0x504>)
 80067d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067da:	6013      	str	r3, [r2, #0]
 80067dc:	4b9d      	ldr	r3, [pc, #628]	; (8006a54 <HAL_RCC_OscConfig+0x504>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a9c      	ldr	r2, [pc, #624]	; (8006a54 <HAL_RCC_OscConfig+0x504>)
 80067e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d013      	beq.n	8006818 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067f0:	f7ff f808 	bl	8005804 <HAL_GetTick>
 80067f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067f6:	e008      	b.n	800680a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067f8:	f7ff f804 	bl	8005804 <HAL_GetTick>
 80067fc:	4602      	mov	r2, r0
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	2b64      	cmp	r3, #100	; 0x64
 8006804:	d901      	bls.n	800680a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e2ae      	b.n	8006d68 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800680a:	4b92      	ldr	r3, [pc, #584]	; (8006a54 <HAL_RCC_OscConfig+0x504>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d0f0      	beq.n	80067f8 <HAL_RCC_OscConfig+0x2a8>
 8006816:	e014      	b.n	8006842 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006818:	f7fe fff4 	bl	8005804 <HAL_GetTick>
 800681c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800681e:	e008      	b.n	8006832 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006820:	f7fe fff0 	bl	8005804 <HAL_GetTick>
 8006824:	4602      	mov	r2, r0
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	2b64      	cmp	r3, #100	; 0x64
 800682c:	d901      	bls.n	8006832 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	e29a      	b.n	8006d68 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006832:	4b88      	ldr	r3, [pc, #544]	; (8006a54 <HAL_RCC_OscConfig+0x504>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1f0      	bne.n	8006820 <HAL_RCC_OscConfig+0x2d0>
 800683e:	e000      	b.n	8006842 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006840:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0302 	and.w	r3, r3, #2
 800684a:	2b00      	cmp	r3, #0
 800684c:	d060      	beq.n	8006910 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	2b04      	cmp	r3, #4
 8006852:	d005      	beq.n	8006860 <HAL_RCC_OscConfig+0x310>
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	2b0c      	cmp	r3, #12
 8006858:	d119      	bne.n	800688e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	2b02      	cmp	r3, #2
 800685e:	d116      	bne.n	800688e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006860:	4b7c      	ldr	r3, [pc, #496]	; (8006a54 <HAL_RCC_OscConfig+0x504>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006868:	2b00      	cmp	r3, #0
 800686a:	d005      	beq.n	8006878 <HAL_RCC_OscConfig+0x328>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d101      	bne.n	8006878 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e277      	b.n	8006d68 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006878:	4b76      	ldr	r3, [pc, #472]	; (8006a54 <HAL_RCC_OscConfig+0x504>)
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	061b      	lsls	r3, r3, #24
 8006886:	4973      	ldr	r1, [pc, #460]	; (8006a54 <HAL_RCC_OscConfig+0x504>)
 8006888:	4313      	orrs	r3, r2
 800688a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800688c:	e040      	b.n	8006910 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d023      	beq.n	80068de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006896:	4b6f      	ldr	r3, [pc, #444]	; (8006a54 <HAL_RCC_OscConfig+0x504>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a6e      	ldr	r2, [pc, #440]	; (8006a54 <HAL_RCC_OscConfig+0x504>)
 800689c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068a2:	f7fe ffaf 	bl	8005804 <HAL_GetTick>
 80068a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068a8:	e008      	b.n	80068bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068aa:	f7fe ffab 	bl	8005804 <HAL_GetTick>
 80068ae:	4602      	mov	r2, r0
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d901      	bls.n	80068bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e255      	b.n	8006d68 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068bc:	4b65      	ldr	r3, [pc, #404]	; (8006a54 <HAL_RCC_OscConfig+0x504>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d0f0      	beq.n	80068aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068c8:	4b62      	ldr	r3, [pc, #392]	; (8006a54 <HAL_RCC_OscConfig+0x504>)
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	061b      	lsls	r3, r3, #24
 80068d6:	495f      	ldr	r1, [pc, #380]	; (8006a54 <HAL_RCC_OscConfig+0x504>)
 80068d8:	4313      	orrs	r3, r2
 80068da:	604b      	str	r3, [r1, #4]
 80068dc:	e018      	b.n	8006910 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068de:	4b5d      	ldr	r3, [pc, #372]	; (8006a54 <HAL_RCC_OscConfig+0x504>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a5c      	ldr	r2, [pc, #368]	; (8006a54 <HAL_RCC_OscConfig+0x504>)
 80068e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ea:	f7fe ff8b 	bl	8005804 <HAL_GetTick>
 80068ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80068f0:	e008      	b.n	8006904 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068f2:	f7fe ff87 	bl	8005804 <HAL_GetTick>
 80068f6:	4602      	mov	r2, r0
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d901      	bls.n	8006904 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	e231      	b.n	8006d68 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006904:	4b53      	ldr	r3, [pc, #332]	; (8006a54 <HAL_RCC_OscConfig+0x504>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1f0      	bne.n	80068f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0308 	and.w	r3, r3, #8
 8006918:	2b00      	cmp	r3, #0
 800691a:	d03c      	beq.n	8006996 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	695b      	ldr	r3, [r3, #20]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d01c      	beq.n	800695e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006924:	4b4b      	ldr	r3, [pc, #300]	; (8006a54 <HAL_RCC_OscConfig+0x504>)
 8006926:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800692a:	4a4a      	ldr	r2, [pc, #296]	; (8006a54 <HAL_RCC_OscConfig+0x504>)
 800692c:	f043 0301 	orr.w	r3, r3, #1
 8006930:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006934:	f7fe ff66 	bl	8005804 <HAL_GetTick>
 8006938:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800693a:	e008      	b.n	800694e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800693c:	f7fe ff62 	bl	8005804 <HAL_GetTick>
 8006940:	4602      	mov	r2, r0
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	2b02      	cmp	r3, #2
 8006948:	d901      	bls.n	800694e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	e20c      	b.n	8006d68 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800694e:	4b41      	ldr	r3, [pc, #260]	; (8006a54 <HAL_RCC_OscConfig+0x504>)
 8006950:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006954:	f003 0302 	and.w	r3, r3, #2
 8006958:	2b00      	cmp	r3, #0
 800695a:	d0ef      	beq.n	800693c <HAL_RCC_OscConfig+0x3ec>
 800695c:	e01b      	b.n	8006996 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800695e:	4b3d      	ldr	r3, [pc, #244]	; (8006a54 <HAL_RCC_OscConfig+0x504>)
 8006960:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006964:	4a3b      	ldr	r2, [pc, #236]	; (8006a54 <HAL_RCC_OscConfig+0x504>)
 8006966:	f023 0301 	bic.w	r3, r3, #1
 800696a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800696e:	f7fe ff49 	bl	8005804 <HAL_GetTick>
 8006972:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006974:	e008      	b.n	8006988 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006976:	f7fe ff45 	bl	8005804 <HAL_GetTick>
 800697a:	4602      	mov	r2, r0
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	2b02      	cmp	r3, #2
 8006982:	d901      	bls.n	8006988 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e1ef      	b.n	8006d68 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006988:	4b32      	ldr	r3, [pc, #200]	; (8006a54 <HAL_RCC_OscConfig+0x504>)
 800698a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800698e:	f003 0302 	and.w	r3, r3, #2
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1ef      	bne.n	8006976 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 0304 	and.w	r3, r3, #4
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f000 80a6 	beq.w	8006af0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069a4:	2300      	movs	r3, #0
 80069a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80069a8:	4b2a      	ldr	r3, [pc, #168]	; (8006a54 <HAL_RCC_OscConfig+0x504>)
 80069aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10d      	bne.n	80069d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069b4:	4b27      	ldr	r3, [pc, #156]	; (8006a54 <HAL_RCC_OscConfig+0x504>)
 80069b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069b8:	4a26      	ldr	r2, [pc, #152]	; (8006a54 <HAL_RCC_OscConfig+0x504>)
 80069ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069be:	6593      	str	r3, [r2, #88]	; 0x58
 80069c0:	4b24      	ldr	r3, [pc, #144]	; (8006a54 <HAL_RCC_OscConfig+0x504>)
 80069c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069c8:	60bb      	str	r3, [r7, #8]
 80069ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069cc:	2301      	movs	r3, #1
 80069ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069d0:	4b21      	ldr	r3, [pc, #132]	; (8006a58 <HAL_RCC_OscConfig+0x508>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d118      	bne.n	8006a0e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069dc:	4b1e      	ldr	r3, [pc, #120]	; (8006a58 <HAL_RCC_OscConfig+0x508>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a1d      	ldr	r2, [pc, #116]	; (8006a58 <HAL_RCC_OscConfig+0x508>)
 80069e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069e8:	f7fe ff0c 	bl	8005804 <HAL_GetTick>
 80069ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069ee:	e008      	b.n	8006a02 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069f0:	f7fe ff08 	bl	8005804 <HAL_GetTick>
 80069f4:	4602      	mov	r2, r0
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d901      	bls.n	8006a02 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e1b2      	b.n	8006d68 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a02:	4b15      	ldr	r3, [pc, #84]	; (8006a58 <HAL_RCC_OscConfig+0x508>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d0f0      	beq.n	80069f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d108      	bne.n	8006a28 <HAL_RCC_OscConfig+0x4d8>
 8006a16:	4b0f      	ldr	r3, [pc, #60]	; (8006a54 <HAL_RCC_OscConfig+0x504>)
 8006a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a1c:	4a0d      	ldr	r2, [pc, #52]	; (8006a54 <HAL_RCC_OscConfig+0x504>)
 8006a1e:	f043 0301 	orr.w	r3, r3, #1
 8006a22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a26:	e029      	b.n	8006a7c <HAL_RCC_OscConfig+0x52c>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	2b05      	cmp	r3, #5
 8006a2e:	d115      	bne.n	8006a5c <HAL_RCC_OscConfig+0x50c>
 8006a30:	4b08      	ldr	r3, [pc, #32]	; (8006a54 <HAL_RCC_OscConfig+0x504>)
 8006a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a36:	4a07      	ldr	r2, [pc, #28]	; (8006a54 <HAL_RCC_OscConfig+0x504>)
 8006a38:	f043 0304 	orr.w	r3, r3, #4
 8006a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a40:	4b04      	ldr	r3, [pc, #16]	; (8006a54 <HAL_RCC_OscConfig+0x504>)
 8006a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a46:	4a03      	ldr	r2, [pc, #12]	; (8006a54 <HAL_RCC_OscConfig+0x504>)
 8006a48:	f043 0301 	orr.w	r3, r3, #1
 8006a4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a50:	e014      	b.n	8006a7c <HAL_RCC_OscConfig+0x52c>
 8006a52:	bf00      	nop
 8006a54:	40021000 	.word	0x40021000
 8006a58:	40007000 	.word	0x40007000
 8006a5c:	4b9a      	ldr	r3, [pc, #616]	; (8006cc8 <HAL_RCC_OscConfig+0x778>)
 8006a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a62:	4a99      	ldr	r2, [pc, #612]	; (8006cc8 <HAL_RCC_OscConfig+0x778>)
 8006a64:	f023 0301 	bic.w	r3, r3, #1
 8006a68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006a6c:	4b96      	ldr	r3, [pc, #600]	; (8006cc8 <HAL_RCC_OscConfig+0x778>)
 8006a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a72:	4a95      	ldr	r2, [pc, #596]	; (8006cc8 <HAL_RCC_OscConfig+0x778>)
 8006a74:	f023 0304 	bic.w	r3, r3, #4
 8006a78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d016      	beq.n	8006ab2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a84:	f7fe febe 	bl	8005804 <HAL_GetTick>
 8006a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a8a:	e00a      	b.n	8006aa2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a8c:	f7fe feba 	bl	8005804 <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d901      	bls.n	8006aa2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e162      	b.n	8006d68 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006aa2:	4b89      	ldr	r3, [pc, #548]	; (8006cc8 <HAL_RCC_OscConfig+0x778>)
 8006aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aa8:	f003 0302 	and.w	r3, r3, #2
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d0ed      	beq.n	8006a8c <HAL_RCC_OscConfig+0x53c>
 8006ab0:	e015      	b.n	8006ade <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ab2:	f7fe fea7 	bl	8005804 <HAL_GetTick>
 8006ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ab8:	e00a      	b.n	8006ad0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006aba:	f7fe fea3 	bl	8005804 <HAL_GetTick>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d901      	bls.n	8006ad0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e14b      	b.n	8006d68 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ad0:	4b7d      	ldr	r3, [pc, #500]	; (8006cc8 <HAL_RCC_OscConfig+0x778>)
 8006ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ad6:	f003 0302 	and.w	r3, r3, #2
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1ed      	bne.n	8006aba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ade:	7ffb      	ldrb	r3, [r7, #31]
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d105      	bne.n	8006af0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ae4:	4b78      	ldr	r3, [pc, #480]	; (8006cc8 <HAL_RCC_OscConfig+0x778>)
 8006ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ae8:	4a77      	ldr	r2, [pc, #476]	; (8006cc8 <HAL_RCC_OscConfig+0x778>)
 8006aea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006aee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 0320 	and.w	r3, r3, #32
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d03c      	beq.n	8006b76 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d01c      	beq.n	8006b3e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006b04:	4b70      	ldr	r3, [pc, #448]	; (8006cc8 <HAL_RCC_OscConfig+0x778>)
 8006b06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b0a:	4a6f      	ldr	r2, [pc, #444]	; (8006cc8 <HAL_RCC_OscConfig+0x778>)
 8006b0c:	f043 0301 	orr.w	r3, r3, #1
 8006b10:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b14:	f7fe fe76 	bl	8005804 <HAL_GetTick>
 8006b18:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006b1a:	e008      	b.n	8006b2e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b1c:	f7fe fe72 	bl	8005804 <HAL_GetTick>
 8006b20:	4602      	mov	r2, r0
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	1ad3      	subs	r3, r2, r3
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d901      	bls.n	8006b2e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	e11c      	b.n	8006d68 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006b2e:	4b66      	ldr	r3, [pc, #408]	; (8006cc8 <HAL_RCC_OscConfig+0x778>)
 8006b30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b34:	f003 0302 	and.w	r3, r3, #2
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d0ef      	beq.n	8006b1c <HAL_RCC_OscConfig+0x5cc>
 8006b3c:	e01b      	b.n	8006b76 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006b3e:	4b62      	ldr	r3, [pc, #392]	; (8006cc8 <HAL_RCC_OscConfig+0x778>)
 8006b40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b44:	4a60      	ldr	r2, [pc, #384]	; (8006cc8 <HAL_RCC_OscConfig+0x778>)
 8006b46:	f023 0301 	bic.w	r3, r3, #1
 8006b4a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b4e:	f7fe fe59 	bl	8005804 <HAL_GetTick>
 8006b52:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006b54:	e008      	b.n	8006b68 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b56:	f7fe fe55 	bl	8005804 <HAL_GetTick>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	2b02      	cmp	r3, #2
 8006b62:	d901      	bls.n	8006b68 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006b64:	2303      	movs	r3, #3
 8006b66:	e0ff      	b.n	8006d68 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006b68:	4b57      	ldr	r3, [pc, #348]	; (8006cc8 <HAL_RCC_OscConfig+0x778>)
 8006b6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b6e:	f003 0302 	and.w	r3, r3, #2
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1ef      	bne.n	8006b56 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f000 80f3 	beq.w	8006d66 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b84:	2b02      	cmp	r3, #2
 8006b86:	f040 80c9 	bne.w	8006d1c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006b8a:	4b4f      	ldr	r3, [pc, #316]	; (8006cc8 <HAL_RCC_OscConfig+0x778>)
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	f003 0203 	and.w	r2, r3, #3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d12c      	bne.n	8006bf8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d123      	bne.n	8006bf8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d11b      	bne.n	8006bf8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d113      	bne.n	8006bf8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bda:	085b      	lsrs	r3, r3, #1
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d109      	bne.n	8006bf8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bee:	085b      	lsrs	r3, r3, #1
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d06b      	beq.n	8006cd0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	2b0c      	cmp	r3, #12
 8006bfc:	d062      	beq.n	8006cc4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006bfe:	4b32      	ldr	r3, [pc, #200]	; (8006cc8 <HAL_RCC_OscConfig+0x778>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d001      	beq.n	8006c0e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e0ac      	b.n	8006d68 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006c0e:	4b2e      	ldr	r3, [pc, #184]	; (8006cc8 <HAL_RCC_OscConfig+0x778>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a2d      	ldr	r2, [pc, #180]	; (8006cc8 <HAL_RCC_OscConfig+0x778>)
 8006c14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c18:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006c1a:	f7fe fdf3 	bl	8005804 <HAL_GetTick>
 8006c1e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c20:	e008      	b.n	8006c34 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c22:	f7fe fdef 	bl	8005804 <HAL_GetTick>
 8006c26:	4602      	mov	r2, r0
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	1ad3      	subs	r3, r2, r3
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	d901      	bls.n	8006c34 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006c30:	2303      	movs	r3, #3
 8006c32:	e099      	b.n	8006d68 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c34:	4b24      	ldr	r3, [pc, #144]	; (8006cc8 <HAL_RCC_OscConfig+0x778>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1f0      	bne.n	8006c22 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c40:	4b21      	ldr	r3, [pc, #132]	; (8006cc8 <HAL_RCC_OscConfig+0x778>)
 8006c42:	68da      	ldr	r2, [r3, #12]
 8006c44:	4b21      	ldr	r3, [pc, #132]	; (8006ccc <HAL_RCC_OscConfig+0x77c>)
 8006c46:	4013      	ands	r3, r2
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006c50:	3a01      	subs	r2, #1
 8006c52:	0112      	lsls	r2, r2, #4
 8006c54:	4311      	orrs	r1, r2
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006c5a:	0212      	lsls	r2, r2, #8
 8006c5c:	4311      	orrs	r1, r2
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006c62:	0852      	lsrs	r2, r2, #1
 8006c64:	3a01      	subs	r2, #1
 8006c66:	0552      	lsls	r2, r2, #21
 8006c68:	4311      	orrs	r1, r2
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006c6e:	0852      	lsrs	r2, r2, #1
 8006c70:	3a01      	subs	r2, #1
 8006c72:	0652      	lsls	r2, r2, #25
 8006c74:	4311      	orrs	r1, r2
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006c7a:	06d2      	lsls	r2, r2, #27
 8006c7c:	430a      	orrs	r2, r1
 8006c7e:	4912      	ldr	r1, [pc, #72]	; (8006cc8 <HAL_RCC_OscConfig+0x778>)
 8006c80:	4313      	orrs	r3, r2
 8006c82:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006c84:	4b10      	ldr	r3, [pc, #64]	; (8006cc8 <HAL_RCC_OscConfig+0x778>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a0f      	ldr	r2, [pc, #60]	; (8006cc8 <HAL_RCC_OscConfig+0x778>)
 8006c8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c8e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006c90:	4b0d      	ldr	r3, [pc, #52]	; (8006cc8 <HAL_RCC_OscConfig+0x778>)
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	4a0c      	ldr	r2, [pc, #48]	; (8006cc8 <HAL_RCC_OscConfig+0x778>)
 8006c96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c9a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006c9c:	f7fe fdb2 	bl	8005804 <HAL_GetTick>
 8006ca0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ca2:	e008      	b.n	8006cb6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ca4:	f7fe fdae 	bl	8005804 <HAL_GetTick>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	1ad3      	subs	r3, r2, r3
 8006cae:	2b02      	cmp	r3, #2
 8006cb0:	d901      	bls.n	8006cb6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006cb2:	2303      	movs	r3, #3
 8006cb4:	e058      	b.n	8006d68 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cb6:	4b04      	ldr	r3, [pc, #16]	; (8006cc8 <HAL_RCC_OscConfig+0x778>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d0f0      	beq.n	8006ca4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006cc2:	e050      	b.n	8006d66 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e04f      	b.n	8006d68 <HAL_RCC_OscConfig+0x818>
 8006cc8:	40021000 	.word	0x40021000
 8006ccc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cd0:	4b27      	ldr	r3, [pc, #156]	; (8006d70 <HAL_RCC_OscConfig+0x820>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d144      	bne.n	8006d66 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006cdc:	4b24      	ldr	r3, [pc, #144]	; (8006d70 <HAL_RCC_OscConfig+0x820>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a23      	ldr	r2, [pc, #140]	; (8006d70 <HAL_RCC_OscConfig+0x820>)
 8006ce2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ce6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006ce8:	4b21      	ldr	r3, [pc, #132]	; (8006d70 <HAL_RCC_OscConfig+0x820>)
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	4a20      	ldr	r2, [pc, #128]	; (8006d70 <HAL_RCC_OscConfig+0x820>)
 8006cee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cf2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006cf4:	f7fe fd86 	bl	8005804 <HAL_GetTick>
 8006cf8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cfa:	e008      	b.n	8006d0e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cfc:	f7fe fd82 	bl	8005804 <HAL_GetTick>
 8006d00:	4602      	mov	r2, r0
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d901      	bls.n	8006d0e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e02c      	b.n	8006d68 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d0e:	4b18      	ldr	r3, [pc, #96]	; (8006d70 <HAL_RCC_OscConfig+0x820>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d0f0      	beq.n	8006cfc <HAL_RCC_OscConfig+0x7ac>
 8006d1a:	e024      	b.n	8006d66 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	2b0c      	cmp	r3, #12
 8006d20:	d01f      	beq.n	8006d62 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d22:	4b13      	ldr	r3, [pc, #76]	; (8006d70 <HAL_RCC_OscConfig+0x820>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a12      	ldr	r2, [pc, #72]	; (8006d70 <HAL_RCC_OscConfig+0x820>)
 8006d28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d2e:	f7fe fd69 	bl	8005804 <HAL_GetTick>
 8006d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d34:	e008      	b.n	8006d48 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d36:	f7fe fd65 	bl	8005804 <HAL_GetTick>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	d901      	bls.n	8006d48 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006d44:	2303      	movs	r3, #3
 8006d46:	e00f      	b.n	8006d68 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d48:	4b09      	ldr	r3, [pc, #36]	; (8006d70 <HAL_RCC_OscConfig+0x820>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1f0      	bne.n	8006d36 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006d54:	4b06      	ldr	r3, [pc, #24]	; (8006d70 <HAL_RCC_OscConfig+0x820>)
 8006d56:	68da      	ldr	r2, [r3, #12]
 8006d58:	4905      	ldr	r1, [pc, #20]	; (8006d70 <HAL_RCC_OscConfig+0x820>)
 8006d5a:	4b06      	ldr	r3, [pc, #24]	; (8006d74 <HAL_RCC_OscConfig+0x824>)
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	60cb      	str	r3, [r1, #12]
 8006d60:	e001      	b.n	8006d66 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e000      	b.n	8006d68 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3720      	adds	r7, #32
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	40021000 	.word	0x40021000
 8006d74:	feeefffc 	.word	0xfeeefffc

08006d78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d101      	bne.n	8006d8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e0e7      	b.n	8006f5c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d8c:	4b75      	ldr	r3, [pc, #468]	; (8006f64 <HAL_RCC_ClockConfig+0x1ec>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 0307 	and.w	r3, r3, #7
 8006d94:	683a      	ldr	r2, [r7, #0]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d910      	bls.n	8006dbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d9a:	4b72      	ldr	r3, [pc, #456]	; (8006f64 <HAL_RCC_ClockConfig+0x1ec>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f023 0207 	bic.w	r2, r3, #7
 8006da2:	4970      	ldr	r1, [pc, #448]	; (8006f64 <HAL_RCC_ClockConfig+0x1ec>)
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006daa:	4b6e      	ldr	r3, [pc, #440]	; (8006f64 <HAL_RCC_ClockConfig+0x1ec>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 0307 	and.w	r3, r3, #7
 8006db2:	683a      	ldr	r2, [r7, #0]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d001      	beq.n	8006dbc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	e0cf      	b.n	8006f5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 0302 	and.w	r3, r3, #2
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d010      	beq.n	8006dea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	689a      	ldr	r2, [r3, #8]
 8006dcc:	4b66      	ldr	r3, [pc, #408]	; (8006f68 <HAL_RCC_ClockConfig+0x1f0>)
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d908      	bls.n	8006dea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006dd8:	4b63      	ldr	r3, [pc, #396]	; (8006f68 <HAL_RCC_ClockConfig+0x1f0>)
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	4960      	ldr	r1, [pc, #384]	; (8006f68 <HAL_RCC_ClockConfig+0x1f0>)
 8006de6:	4313      	orrs	r3, r2
 8006de8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d04c      	beq.n	8006e90 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	2b03      	cmp	r3, #3
 8006dfc:	d107      	bne.n	8006e0e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006dfe:	4b5a      	ldr	r3, [pc, #360]	; (8006f68 <HAL_RCC_ClockConfig+0x1f0>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d121      	bne.n	8006e4e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e0a6      	b.n	8006f5c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d107      	bne.n	8006e26 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e16:	4b54      	ldr	r3, [pc, #336]	; (8006f68 <HAL_RCC_ClockConfig+0x1f0>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d115      	bne.n	8006e4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e09a      	b.n	8006f5c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d107      	bne.n	8006e3e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006e2e:	4b4e      	ldr	r3, [pc, #312]	; (8006f68 <HAL_RCC_ClockConfig+0x1f0>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 0302 	and.w	r3, r3, #2
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d109      	bne.n	8006e4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e08e      	b.n	8006f5c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e3e:	4b4a      	ldr	r3, [pc, #296]	; (8006f68 <HAL_RCC_ClockConfig+0x1f0>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d101      	bne.n	8006e4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e086      	b.n	8006f5c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006e4e:	4b46      	ldr	r3, [pc, #280]	; (8006f68 <HAL_RCC_ClockConfig+0x1f0>)
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	f023 0203 	bic.w	r2, r3, #3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	4943      	ldr	r1, [pc, #268]	; (8006f68 <HAL_RCC_ClockConfig+0x1f0>)
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e60:	f7fe fcd0 	bl	8005804 <HAL_GetTick>
 8006e64:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e66:	e00a      	b.n	8006e7e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e68:	f7fe fccc 	bl	8005804 <HAL_GetTick>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d901      	bls.n	8006e7e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e06e      	b.n	8006f5c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e7e:	4b3a      	ldr	r3, [pc, #232]	; (8006f68 <HAL_RCC_ClockConfig+0x1f0>)
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	f003 020c 	and.w	r2, r3, #12
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d1eb      	bne.n	8006e68 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0302 	and.w	r3, r3, #2
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d010      	beq.n	8006ebe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	689a      	ldr	r2, [r3, #8]
 8006ea0:	4b31      	ldr	r3, [pc, #196]	; (8006f68 <HAL_RCC_ClockConfig+0x1f0>)
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d208      	bcs.n	8006ebe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006eac:	4b2e      	ldr	r3, [pc, #184]	; (8006f68 <HAL_RCC_ClockConfig+0x1f0>)
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	492b      	ldr	r1, [pc, #172]	; (8006f68 <HAL_RCC_ClockConfig+0x1f0>)
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ebe:	4b29      	ldr	r3, [pc, #164]	; (8006f64 <HAL_RCC_ClockConfig+0x1ec>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 0307 	and.w	r3, r3, #7
 8006ec6:	683a      	ldr	r2, [r7, #0]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d210      	bcs.n	8006eee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ecc:	4b25      	ldr	r3, [pc, #148]	; (8006f64 <HAL_RCC_ClockConfig+0x1ec>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f023 0207 	bic.w	r2, r3, #7
 8006ed4:	4923      	ldr	r1, [pc, #140]	; (8006f64 <HAL_RCC_ClockConfig+0x1ec>)
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006edc:	4b21      	ldr	r3, [pc, #132]	; (8006f64 <HAL_RCC_ClockConfig+0x1ec>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 0307 	and.w	r3, r3, #7
 8006ee4:	683a      	ldr	r2, [r7, #0]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d001      	beq.n	8006eee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e036      	b.n	8006f5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 0304 	and.w	r3, r3, #4
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d008      	beq.n	8006f0c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006efa:	4b1b      	ldr	r3, [pc, #108]	; (8006f68 <HAL_RCC_ClockConfig+0x1f0>)
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	4918      	ldr	r1, [pc, #96]	; (8006f68 <HAL_RCC_ClockConfig+0x1f0>)
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 0308 	and.w	r3, r3, #8
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d009      	beq.n	8006f2c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f18:	4b13      	ldr	r3, [pc, #76]	; (8006f68 <HAL_RCC_ClockConfig+0x1f0>)
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	00db      	lsls	r3, r3, #3
 8006f26:	4910      	ldr	r1, [pc, #64]	; (8006f68 <HAL_RCC_ClockConfig+0x1f0>)
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006f2c:	f000 f824 	bl	8006f78 <HAL_RCC_GetSysClockFreq>
 8006f30:	4602      	mov	r2, r0
 8006f32:	4b0d      	ldr	r3, [pc, #52]	; (8006f68 <HAL_RCC_ClockConfig+0x1f0>)
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	091b      	lsrs	r3, r3, #4
 8006f38:	f003 030f 	and.w	r3, r3, #15
 8006f3c:	490b      	ldr	r1, [pc, #44]	; (8006f6c <HAL_RCC_ClockConfig+0x1f4>)
 8006f3e:	5ccb      	ldrb	r3, [r1, r3]
 8006f40:	f003 031f 	and.w	r3, r3, #31
 8006f44:	fa22 f303 	lsr.w	r3, r2, r3
 8006f48:	4a09      	ldr	r2, [pc, #36]	; (8006f70 <HAL_RCC_ClockConfig+0x1f8>)
 8006f4a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006f4c:	4b09      	ldr	r3, [pc, #36]	; (8006f74 <HAL_RCC_ClockConfig+0x1fc>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7fe fc1b 	bl	800578c <HAL_InitTick>
 8006f56:	4603      	mov	r3, r0
 8006f58:	72fb      	strb	r3, [r7, #11]

  return status;
 8006f5a:	7afb      	ldrb	r3, [r7, #11]
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3710      	adds	r7, #16
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	40022000 	.word	0x40022000
 8006f68:	40021000 	.word	0x40021000
 8006f6c:	0800c150 	.word	0x0800c150
 8006f70:	2000006c 	.word	0x2000006c
 8006f74:	20000064 	.word	0x20000064

08006f78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b089      	sub	sp, #36	; 0x24
 8006f7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	61fb      	str	r3, [r7, #28]
 8006f82:	2300      	movs	r3, #0
 8006f84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f86:	4b3e      	ldr	r3, [pc, #248]	; (8007080 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	f003 030c 	and.w	r3, r3, #12
 8006f8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f90:	4b3b      	ldr	r3, [pc, #236]	; (8007080 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	f003 0303 	and.w	r3, r3, #3
 8006f98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d005      	beq.n	8006fac <HAL_RCC_GetSysClockFreq+0x34>
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	2b0c      	cmp	r3, #12
 8006fa4:	d121      	bne.n	8006fea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d11e      	bne.n	8006fea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006fac:	4b34      	ldr	r3, [pc, #208]	; (8007080 <HAL_RCC_GetSysClockFreq+0x108>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 0308 	and.w	r3, r3, #8
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d107      	bne.n	8006fc8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006fb8:	4b31      	ldr	r3, [pc, #196]	; (8007080 <HAL_RCC_GetSysClockFreq+0x108>)
 8006fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fbe:	0a1b      	lsrs	r3, r3, #8
 8006fc0:	f003 030f 	and.w	r3, r3, #15
 8006fc4:	61fb      	str	r3, [r7, #28]
 8006fc6:	e005      	b.n	8006fd4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006fc8:	4b2d      	ldr	r3, [pc, #180]	; (8007080 <HAL_RCC_GetSysClockFreq+0x108>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	091b      	lsrs	r3, r3, #4
 8006fce:	f003 030f 	and.w	r3, r3, #15
 8006fd2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006fd4:	4a2b      	ldr	r2, [pc, #172]	; (8007084 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fdc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d10d      	bne.n	8007000 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006fe8:	e00a      	b.n	8007000 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	2b04      	cmp	r3, #4
 8006fee:	d102      	bne.n	8006ff6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006ff0:	4b25      	ldr	r3, [pc, #148]	; (8007088 <HAL_RCC_GetSysClockFreq+0x110>)
 8006ff2:	61bb      	str	r3, [r7, #24]
 8006ff4:	e004      	b.n	8007000 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	2b08      	cmp	r3, #8
 8006ffa:	d101      	bne.n	8007000 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006ffc:	4b23      	ldr	r3, [pc, #140]	; (800708c <HAL_RCC_GetSysClockFreq+0x114>)
 8006ffe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	2b0c      	cmp	r3, #12
 8007004:	d134      	bne.n	8007070 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007006:	4b1e      	ldr	r3, [pc, #120]	; (8007080 <HAL_RCC_GetSysClockFreq+0x108>)
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	f003 0303 	and.w	r3, r3, #3
 800700e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	2b02      	cmp	r3, #2
 8007014:	d003      	beq.n	800701e <HAL_RCC_GetSysClockFreq+0xa6>
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	2b03      	cmp	r3, #3
 800701a:	d003      	beq.n	8007024 <HAL_RCC_GetSysClockFreq+0xac>
 800701c:	e005      	b.n	800702a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800701e:	4b1a      	ldr	r3, [pc, #104]	; (8007088 <HAL_RCC_GetSysClockFreq+0x110>)
 8007020:	617b      	str	r3, [r7, #20]
      break;
 8007022:	e005      	b.n	8007030 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007024:	4b19      	ldr	r3, [pc, #100]	; (800708c <HAL_RCC_GetSysClockFreq+0x114>)
 8007026:	617b      	str	r3, [r7, #20]
      break;
 8007028:	e002      	b.n	8007030 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	617b      	str	r3, [r7, #20]
      break;
 800702e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007030:	4b13      	ldr	r3, [pc, #76]	; (8007080 <HAL_RCC_GetSysClockFreq+0x108>)
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	091b      	lsrs	r3, r3, #4
 8007036:	f003 0307 	and.w	r3, r3, #7
 800703a:	3301      	adds	r3, #1
 800703c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800703e:	4b10      	ldr	r3, [pc, #64]	; (8007080 <HAL_RCC_GetSysClockFreq+0x108>)
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	0a1b      	lsrs	r3, r3, #8
 8007044:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007048:	697a      	ldr	r2, [r7, #20]
 800704a:	fb03 f202 	mul.w	r2, r3, r2
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	fbb2 f3f3 	udiv	r3, r2, r3
 8007054:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007056:	4b0a      	ldr	r3, [pc, #40]	; (8007080 <HAL_RCC_GetSysClockFreq+0x108>)
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	0e5b      	lsrs	r3, r3, #25
 800705c:	f003 0303 	and.w	r3, r3, #3
 8007060:	3301      	adds	r3, #1
 8007062:	005b      	lsls	r3, r3, #1
 8007064:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007066:	697a      	ldr	r2, [r7, #20]
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	fbb2 f3f3 	udiv	r3, r2, r3
 800706e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007070:	69bb      	ldr	r3, [r7, #24]
}
 8007072:	4618      	mov	r0, r3
 8007074:	3724      	adds	r7, #36	; 0x24
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop
 8007080:	40021000 	.word	0x40021000
 8007084:	0800c168 	.word	0x0800c168
 8007088:	00f42400 	.word	0x00f42400
 800708c:	02dc6c00 	.word	0x02dc6c00

08007090 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007090:	b480      	push	{r7}
 8007092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007094:	4b03      	ldr	r3, [pc, #12]	; (80070a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007096:	681b      	ldr	r3, [r3, #0]
}
 8007098:	4618      	mov	r0, r3
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	2000006c 	.word	0x2000006c

080070a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80070ac:	f7ff fff0 	bl	8007090 <HAL_RCC_GetHCLKFreq>
 80070b0:	4602      	mov	r2, r0
 80070b2:	4b06      	ldr	r3, [pc, #24]	; (80070cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	0a1b      	lsrs	r3, r3, #8
 80070b8:	f003 0307 	and.w	r3, r3, #7
 80070bc:	4904      	ldr	r1, [pc, #16]	; (80070d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80070be:	5ccb      	ldrb	r3, [r1, r3]
 80070c0:	f003 031f 	and.w	r3, r3, #31
 80070c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	40021000 	.word	0x40021000
 80070d0:	0800c160 	.word	0x0800c160

080070d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80070d8:	f7ff ffda 	bl	8007090 <HAL_RCC_GetHCLKFreq>
 80070dc:	4602      	mov	r2, r0
 80070de:	4b06      	ldr	r3, [pc, #24]	; (80070f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	0adb      	lsrs	r3, r3, #11
 80070e4:	f003 0307 	and.w	r3, r3, #7
 80070e8:	4904      	ldr	r1, [pc, #16]	; (80070fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80070ea:	5ccb      	ldrb	r3, [r1, r3]
 80070ec:	f003 031f 	and.w	r3, r3, #31
 80070f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	40021000 	.word	0x40021000
 80070fc:	0800c160 	.word	0x0800c160

08007100 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b086      	sub	sp, #24
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007108:	2300      	movs	r3, #0
 800710a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800710c:	4b2a      	ldr	r3, [pc, #168]	; (80071b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800710e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007114:	2b00      	cmp	r3, #0
 8007116:	d003      	beq.n	8007120 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007118:	f7ff f9b6 	bl	8006488 <HAL_PWREx_GetVoltageRange>
 800711c:	6178      	str	r0, [r7, #20]
 800711e:	e014      	b.n	800714a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007120:	4b25      	ldr	r3, [pc, #148]	; (80071b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007124:	4a24      	ldr	r2, [pc, #144]	; (80071b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800712a:	6593      	str	r3, [r2, #88]	; 0x58
 800712c:	4b22      	ldr	r3, [pc, #136]	; (80071b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800712e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007134:	60fb      	str	r3, [r7, #12]
 8007136:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007138:	f7ff f9a6 	bl	8006488 <HAL_PWREx_GetVoltageRange>
 800713c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800713e:	4b1e      	ldr	r3, [pc, #120]	; (80071b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007142:	4a1d      	ldr	r2, [pc, #116]	; (80071b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007148:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007150:	d10b      	bne.n	800716a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2b80      	cmp	r3, #128	; 0x80
 8007156:	d919      	bls.n	800718c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2ba0      	cmp	r3, #160	; 0xa0
 800715c:	d902      	bls.n	8007164 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800715e:	2302      	movs	r3, #2
 8007160:	613b      	str	r3, [r7, #16]
 8007162:	e013      	b.n	800718c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007164:	2301      	movs	r3, #1
 8007166:	613b      	str	r3, [r7, #16]
 8007168:	e010      	b.n	800718c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2b80      	cmp	r3, #128	; 0x80
 800716e:	d902      	bls.n	8007176 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007170:	2303      	movs	r3, #3
 8007172:	613b      	str	r3, [r7, #16]
 8007174:	e00a      	b.n	800718c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2b80      	cmp	r3, #128	; 0x80
 800717a:	d102      	bne.n	8007182 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800717c:	2302      	movs	r3, #2
 800717e:	613b      	str	r3, [r7, #16]
 8007180:	e004      	b.n	800718c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2b70      	cmp	r3, #112	; 0x70
 8007186:	d101      	bne.n	800718c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007188:	2301      	movs	r3, #1
 800718a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800718c:	4b0b      	ldr	r3, [pc, #44]	; (80071bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f023 0207 	bic.w	r2, r3, #7
 8007194:	4909      	ldr	r1, [pc, #36]	; (80071bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	4313      	orrs	r3, r2
 800719a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800719c:	4b07      	ldr	r3, [pc, #28]	; (80071bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0307 	and.w	r3, r3, #7
 80071a4:	693a      	ldr	r2, [r7, #16]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d001      	beq.n	80071ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e000      	b.n	80071b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3718      	adds	r7, #24
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	40021000 	.word	0x40021000
 80071bc:	40022000 	.word	0x40022000

080071c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80071c8:	2300      	movs	r3, #0
 80071ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80071cc:	2300      	movs	r3, #0
 80071ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d031      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80071e4:	d01a      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80071e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80071ea:	d814      	bhi.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d009      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80071f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80071f4:	d10f      	bne.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80071f6:	4b5d      	ldr	r3, [pc, #372]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	4a5c      	ldr	r2, [pc, #368]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80071fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007200:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007202:	e00c      	b.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	3304      	adds	r3, #4
 8007208:	2100      	movs	r1, #0
 800720a:	4618      	mov	r0, r3
 800720c:	f000 f9f0 	bl	80075f0 <RCCEx_PLLSAI1_Config>
 8007210:	4603      	mov	r3, r0
 8007212:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007214:	e003      	b.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	74fb      	strb	r3, [r7, #19]
      break;
 800721a:	e000      	b.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800721c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800721e:	7cfb      	ldrb	r3, [r7, #19]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d10b      	bne.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007224:	4b51      	ldr	r3, [pc, #324]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800722a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007232:	494e      	ldr	r1, [pc, #312]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007234:	4313      	orrs	r3, r2
 8007236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800723a:	e001      	b.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800723c:	7cfb      	ldrb	r3, [r7, #19]
 800723e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007248:	2b00      	cmp	r3, #0
 800724a:	f000 809e 	beq.w	800738a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800724e:	2300      	movs	r3, #0
 8007250:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007252:	4b46      	ldr	r3, [pc, #280]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800725a:	2b00      	cmp	r3, #0
 800725c:	d101      	bne.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800725e:	2301      	movs	r3, #1
 8007260:	e000      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8007262:	2300      	movs	r3, #0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d00d      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007268:	4b40      	ldr	r3, [pc, #256]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800726a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800726c:	4a3f      	ldr	r2, [pc, #252]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800726e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007272:	6593      	str	r3, [r2, #88]	; 0x58
 8007274:	4b3d      	ldr	r3, [pc, #244]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800727c:	60bb      	str	r3, [r7, #8]
 800727e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007280:	2301      	movs	r3, #1
 8007282:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007284:	4b3a      	ldr	r3, [pc, #232]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a39      	ldr	r2, [pc, #228]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800728a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800728e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007290:	f7fe fab8 	bl	8005804 <HAL_GetTick>
 8007294:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007296:	e009      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007298:	f7fe fab4 	bl	8005804 <HAL_GetTick>
 800729c:	4602      	mov	r2, r0
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d902      	bls.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80072a6:	2303      	movs	r3, #3
 80072a8:	74fb      	strb	r3, [r7, #19]
        break;
 80072aa:	e005      	b.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80072ac:	4b30      	ldr	r3, [pc, #192]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d0ef      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80072b8:	7cfb      	ldrb	r3, [r7, #19]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d15a      	bne.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80072be:	4b2b      	ldr	r3, [pc, #172]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80072c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d01e      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072d4:	697a      	ldr	r2, [r7, #20]
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d019      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80072da:	4b24      	ldr	r3, [pc, #144]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80072dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072e4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80072e6:	4b21      	ldr	r3, [pc, #132]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80072e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072ec:	4a1f      	ldr	r2, [pc, #124]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80072ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80072f6:	4b1d      	ldr	r3, [pc, #116]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80072f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072fc:	4a1b      	ldr	r2, [pc, #108]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80072fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007302:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007306:	4a19      	ldr	r2, [pc, #100]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	f003 0301 	and.w	r3, r3, #1
 8007314:	2b00      	cmp	r3, #0
 8007316:	d016      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007318:	f7fe fa74 	bl	8005804 <HAL_GetTick>
 800731c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800731e:	e00b      	b.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007320:	f7fe fa70 	bl	8005804 <HAL_GetTick>
 8007324:	4602      	mov	r2, r0
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	f241 3288 	movw	r2, #5000	; 0x1388
 800732e:	4293      	cmp	r3, r2
 8007330:	d902      	bls.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	74fb      	strb	r3, [r7, #19]
            break;
 8007336:	e006      	b.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007338:	4b0c      	ldr	r3, [pc, #48]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800733a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800733e:	f003 0302 	and.w	r3, r3, #2
 8007342:	2b00      	cmp	r3, #0
 8007344:	d0ec      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8007346:	7cfb      	ldrb	r3, [r7, #19]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10b      	bne.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800734c:	4b07      	ldr	r3, [pc, #28]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800734e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007352:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800735a:	4904      	ldr	r1, [pc, #16]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800735c:	4313      	orrs	r3, r2
 800735e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007362:	e009      	b.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007364:	7cfb      	ldrb	r3, [r7, #19]
 8007366:	74bb      	strb	r3, [r7, #18]
 8007368:	e006      	b.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800736a:	bf00      	nop
 800736c:	40021000 	.word	0x40021000
 8007370:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007374:	7cfb      	ldrb	r3, [r7, #19]
 8007376:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007378:	7c7b      	ldrb	r3, [r7, #17]
 800737a:	2b01      	cmp	r3, #1
 800737c:	d105      	bne.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800737e:	4b9b      	ldr	r3, [pc, #620]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007382:	4a9a      	ldr	r2, [pc, #616]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007384:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007388:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 0301 	and.w	r3, r3, #1
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00a      	beq.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007396:	4b95      	ldr	r3, [pc, #596]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800739c:	f023 0203 	bic.w	r2, r3, #3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a1b      	ldr	r3, [r3, #32]
 80073a4:	4991      	ldr	r1, [pc, #580]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80073a6:	4313      	orrs	r3, r2
 80073a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 0302 	and.w	r3, r3, #2
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d00a      	beq.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80073b8:	4b8c      	ldr	r3, [pc, #560]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80073ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073be:	f023 020c 	bic.w	r2, r3, #12
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c6:	4989      	ldr	r1, [pc, #548]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80073c8:	4313      	orrs	r3, r2
 80073ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f003 0304 	and.w	r3, r3, #4
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00a      	beq.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80073da:	4b84      	ldr	r3, [pc, #528]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80073dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e8:	4980      	ldr	r1, [pc, #512]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80073ea:	4313      	orrs	r3, r2
 80073ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 0320 	and.w	r3, r3, #32
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d00a      	beq.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80073fc:	4b7b      	ldr	r3, [pc, #492]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80073fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007402:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740a:	4978      	ldr	r1, [pc, #480]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800740c:	4313      	orrs	r3, r2
 800740e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00a      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800741e:	4b73      	ldr	r3, [pc, #460]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007424:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800742c:	496f      	ldr	r1, [pc, #444]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800742e:	4313      	orrs	r3, r2
 8007430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00a      	beq.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007440:	4b6a      	ldr	r3, [pc, #424]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007446:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744e:	4967      	ldr	r1, [pc, #412]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007450:	4313      	orrs	r3, r2
 8007452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00a      	beq.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007462:	4b62      	ldr	r3, [pc, #392]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007468:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007470:	495e      	ldr	r1, [pc, #376]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007472:	4313      	orrs	r3, r2
 8007474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00a      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007484:	4b59      	ldr	r3, [pc, #356]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800748a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007492:	4956      	ldr	r1, [pc, #344]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007494:	4313      	orrs	r3, r2
 8007496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00a      	beq.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80074a6:	4b51      	ldr	r3, [pc, #324]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80074a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b4:	494d      	ldr	r1, [pc, #308]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80074b6:	4313      	orrs	r3, r2
 80074b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d028      	beq.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80074c8:	4b48      	ldr	r3, [pc, #288]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80074ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074d6:	4945      	ldr	r1, [pc, #276]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80074d8:	4313      	orrs	r3, r2
 80074da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074e6:	d106      	bne.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80074e8:	4b40      	ldr	r3, [pc, #256]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	4a3f      	ldr	r2, [pc, #252]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80074ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074f2:	60d3      	str	r3, [r2, #12]
 80074f4:	e011      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80074fe:	d10c      	bne.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	3304      	adds	r3, #4
 8007504:	2101      	movs	r1, #1
 8007506:	4618      	mov	r0, r3
 8007508:	f000 f872 	bl	80075f0 <RCCEx_PLLSAI1_Config>
 800750c:	4603      	mov	r3, r0
 800750e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007510:	7cfb      	ldrb	r3, [r7, #19]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d001      	beq.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8007516:	7cfb      	ldrb	r3, [r7, #19]
 8007518:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007522:	2b00      	cmp	r3, #0
 8007524:	d028      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007526:	4b31      	ldr	r3, [pc, #196]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800752c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007534:	492d      	ldr	r1, [pc, #180]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007536:	4313      	orrs	r3, r2
 8007538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007540:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007544:	d106      	bne.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007546:	4b29      	ldr	r3, [pc, #164]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	4a28      	ldr	r2, [pc, #160]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800754c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007550:	60d3      	str	r3, [r2, #12]
 8007552:	e011      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007558:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800755c:	d10c      	bne.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	3304      	adds	r3, #4
 8007562:	2101      	movs	r1, #1
 8007564:	4618      	mov	r0, r3
 8007566:	f000 f843 	bl	80075f0 <RCCEx_PLLSAI1_Config>
 800756a:	4603      	mov	r3, r0
 800756c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800756e:	7cfb      	ldrb	r3, [r7, #19]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d001      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8007574:	7cfb      	ldrb	r3, [r7, #19]
 8007576:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007580:	2b00      	cmp	r3, #0
 8007582:	d01c      	beq.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007584:	4b19      	ldr	r3, [pc, #100]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800758a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007592:	4916      	ldr	r1, [pc, #88]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007594:	4313      	orrs	r3, r2
 8007596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800759e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075a2:	d10c      	bne.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	3304      	adds	r3, #4
 80075a8:	2102      	movs	r1, #2
 80075aa:	4618      	mov	r0, r3
 80075ac:	f000 f820 	bl	80075f0 <RCCEx_PLLSAI1_Config>
 80075b0:	4603      	mov	r3, r0
 80075b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80075b4:	7cfb      	ldrb	r3, [r7, #19]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d001      	beq.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 80075ba:	7cfb      	ldrb	r3, [r7, #19]
 80075bc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00a      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80075ca:	4b08      	ldr	r3, [pc, #32]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80075cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075d0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075d8:	4904      	ldr	r1, [pc, #16]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80075da:	4313      	orrs	r3, r2
 80075dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80075e0:	7cbb      	ldrb	r3, [r7, #18]
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3718      	adds	r7, #24
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	40021000 	.word	0x40021000

080075f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80075fa:	2300      	movs	r3, #0
 80075fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80075fe:	4b74      	ldr	r3, [pc, #464]	; (80077d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	f003 0303 	and.w	r3, r3, #3
 8007606:	2b00      	cmp	r3, #0
 8007608:	d018      	beq.n	800763c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800760a:	4b71      	ldr	r3, [pc, #452]	; (80077d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800760c:	68db      	ldr	r3, [r3, #12]
 800760e:	f003 0203 	and.w	r2, r3, #3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	429a      	cmp	r2, r3
 8007618:	d10d      	bne.n	8007636 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
       ||
 800761e:	2b00      	cmp	r3, #0
 8007620:	d009      	beq.n	8007636 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007622:	4b6b      	ldr	r3, [pc, #428]	; (80077d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	091b      	lsrs	r3, r3, #4
 8007628:	f003 0307 	and.w	r3, r3, #7
 800762c:	1c5a      	adds	r2, r3, #1
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	685b      	ldr	r3, [r3, #4]
       ||
 8007632:	429a      	cmp	r2, r3
 8007634:	d047      	beq.n	80076c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	73fb      	strb	r3, [r7, #15]
 800763a:	e044      	b.n	80076c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2b03      	cmp	r3, #3
 8007642:	d018      	beq.n	8007676 <RCCEx_PLLSAI1_Config+0x86>
 8007644:	2b03      	cmp	r3, #3
 8007646:	d825      	bhi.n	8007694 <RCCEx_PLLSAI1_Config+0xa4>
 8007648:	2b01      	cmp	r3, #1
 800764a:	d002      	beq.n	8007652 <RCCEx_PLLSAI1_Config+0x62>
 800764c:	2b02      	cmp	r3, #2
 800764e:	d009      	beq.n	8007664 <RCCEx_PLLSAI1_Config+0x74>
 8007650:	e020      	b.n	8007694 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007652:	4b5f      	ldr	r3, [pc, #380]	; (80077d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f003 0302 	and.w	r3, r3, #2
 800765a:	2b00      	cmp	r3, #0
 800765c:	d11d      	bne.n	800769a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007662:	e01a      	b.n	800769a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007664:	4b5a      	ldr	r3, [pc, #360]	; (80077d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800766c:	2b00      	cmp	r3, #0
 800766e:	d116      	bne.n	800769e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007674:	e013      	b.n	800769e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007676:	4b56      	ldr	r3, [pc, #344]	; (80077d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800767e:	2b00      	cmp	r3, #0
 8007680:	d10f      	bne.n	80076a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007682:	4b53      	ldr	r3, [pc, #332]	; (80077d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800768a:	2b00      	cmp	r3, #0
 800768c:	d109      	bne.n	80076a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007692:	e006      	b.n	80076a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	73fb      	strb	r3, [r7, #15]
      break;
 8007698:	e004      	b.n	80076a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800769a:	bf00      	nop
 800769c:	e002      	b.n	80076a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800769e:	bf00      	nop
 80076a0:	e000      	b.n	80076a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80076a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80076a4:	7bfb      	ldrb	r3, [r7, #15]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d10d      	bne.n	80076c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80076aa:	4b49      	ldr	r3, [pc, #292]	; (80077d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6819      	ldr	r1, [r3, #0]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	3b01      	subs	r3, #1
 80076bc:	011b      	lsls	r3, r3, #4
 80076be:	430b      	orrs	r3, r1
 80076c0:	4943      	ldr	r1, [pc, #268]	; (80077d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80076c2:	4313      	orrs	r3, r2
 80076c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80076c6:	7bfb      	ldrb	r3, [r7, #15]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d17c      	bne.n	80077c6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80076cc:	4b40      	ldr	r3, [pc, #256]	; (80077d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a3f      	ldr	r2, [pc, #252]	; (80077d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80076d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80076d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076d8:	f7fe f894 	bl	8005804 <HAL_GetTick>
 80076dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80076de:	e009      	b.n	80076f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80076e0:	f7fe f890 	bl	8005804 <HAL_GetTick>
 80076e4:	4602      	mov	r2, r0
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	1ad3      	subs	r3, r2, r3
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d902      	bls.n	80076f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80076ee:	2303      	movs	r3, #3
 80076f0:	73fb      	strb	r3, [r7, #15]
        break;
 80076f2:	e005      	b.n	8007700 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80076f4:	4b36      	ldr	r3, [pc, #216]	; (80077d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d1ef      	bne.n	80076e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007700:	7bfb      	ldrb	r3, [r7, #15]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d15f      	bne.n	80077c6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d110      	bne.n	800772e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800770c:	4b30      	ldr	r3, [pc, #192]	; (80077d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007714:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	6892      	ldr	r2, [r2, #8]
 800771c:	0211      	lsls	r1, r2, #8
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	68d2      	ldr	r2, [r2, #12]
 8007722:	06d2      	lsls	r2, r2, #27
 8007724:	430a      	orrs	r2, r1
 8007726:	492a      	ldr	r1, [pc, #168]	; (80077d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007728:	4313      	orrs	r3, r2
 800772a:	610b      	str	r3, [r1, #16]
 800772c:	e027      	b.n	800777e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d112      	bne.n	800775a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007734:	4b26      	ldr	r3, [pc, #152]	; (80077d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007736:	691b      	ldr	r3, [r3, #16]
 8007738:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800773c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	6892      	ldr	r2, [r2, #8]
 8007744:	0211      	lsls	r1, r2, #8
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	6912      	ldr	r2, [r2, #16]
 800774a:	0852      	lsrs	r2, r2, #1
 800774c:	3a01      	subs	r2, #1
 800774e:	0552      	lsls	r2, r2, #21
 8007750:	430a      	orrs	r2, r1
 8007752:	491f      	ldr	r1, [pc, #124]	; (80077d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007754:	4313      	orrs	r3, r2
 8007756:	610b      	str	r3, [r1, #16]
 8007758:	e011      	b.n	800777e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800775a:	4b1d      	ldr	r3, [pc, #116]	; (80077d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007762:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	6892      	ldr	r2, [r2, #8]
 800776a:	0211      	lsls	r1, r2, #8
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	6952      	ldr	r2, [r2, #20]
 8007770:	0852      	lsrs	r2, r2, #1
 8007772:	3a01      	subs	r2, #1
 8007774:	0652      	lsls	r2, r2, #25
 8007776:	430a      	orrs	r2, r1
 8007778:	4915      	ldr	r1, [pc, #84]	; (80077d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800777a:	4313      	orrs	r3, r2
 800777c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800777e:	4b14      	ldr	r3, [pc, #80]	; (80077d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a13      	ldr	r2, [pc, #76]	; (80077d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007784:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007788:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800778a:	f7fe f83b 	bl	8005804 <HAL_GetTick>
 800778e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007790:	e009      	b.n	80077a6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007792:	f7fe f837 	bl	8005804 <HAL_GetTick>
 8007796:	4602      	mov	r2, r0
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	1ad3      	subs	r3, r2, r3
 800779c:	2b02      	cmp	r3, #2
 800779e:	d902      	bls.n	80077a6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80077a0:	2303      	movs	r3, #3
 80077a2:	73fb      	strb	r3, [r7, #15]
          break;
 80077a4:	e005      	b.n	80077b2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80077a6:	4b0a      	ldr	r3, [pc, #40]	; (80077d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d0ef      	beq.n	8007792 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80077b2:	7bfb      	ldrb	r3, [r7, #15]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d106      	bne.n	80077c6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80077b8:	4b05      	ldr	r3, [pc, #20]	; (80077d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077ba:	691a      	ldr	r2, [r3, #16]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	699b      	ldr	r3, [r3, #24]
 80077c0:	4903      	ldr	r1, [pc, #12]	; (80077d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077c2:	4313      	orrs	r3, r2
 80077c4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80077c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	40021000 	.word	0x40021000

080077d4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d06c      	beq.n	80078c0 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d106      	bne.n	8007800 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f002 fdbc 	bl	800a378 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2202      	movs	r2, #2
 8007804:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	22ca      	movs	r2, #202	; 0xca
 800780e:	625a      	str	r2, [r3, #36]	; 0x24
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2253      	movs	r2, #83	; 0x53
 8007816:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 f87c 	bl	8007916 <RTC_EnterInitMode>
 800781e:	4603      	mov	r3, r0
 8007820:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8007822:	7bfb      	ldrb	r3, [r7, #15]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d14b      	bne.n	80078c0 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	6812      	ldr	r2, [r2, #0]
 8007832:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007836:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800783a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	6899      	ldr	r1, [r3, #8]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	685a      	ldr	r2, [r3, #4]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	431a      	orrs	r2, r3
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	699b      	ldr	r3, [r3, #24]
 8007850:	431a      	orrs	r2, r3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	430a      	orrs	r2, r1
 8007858:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	68d2      	ldr	r2, [r2, #12]
 8007862:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	6919      	ldr	r1, [r3, #16]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	041a      	lsls	r2, r3, #16
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	430a      	orrs	r2, r1
 8007876:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 f87f 	bl	800797c <RTC_ExitInitMode>
 800787e:	4603      	mov	r3, r0
 8007880:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8007882:	7bfb      	ldrb	r3, [r7, #15]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d11b      	bne.n	80078c0 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f022 0203 	bic.w	r2, r2, #3
 8007896:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	69da      	ldr	r2, [r3, #28]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	695b      	ldr	r3, [r3, #20]
 80078a6:	431a      	orrs	r2, r3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	430a      	orrs	r2, r1
 80078ae:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	22ff      	movs	r2, #255	; 0xff
 80078b6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80078c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b084      	sub	sp, #16
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	68da      	ldr	r2, [r3, #12]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80078e0:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80078e2:	f7fd ff8f 	bl	8005804 <HAL_GetTick>
 80078e6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80078e8:	e009      	b.n	80078fe <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80078ea:	f7fd ff8b 	bl	8005804 <HAL_GetTick>
 80078ee:	4602      	mov	r2, r0
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	1ad3      	subs	r3, r2, r3
 80078f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80078f8:	d901      	bls.n	80078fe <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80078fa:	2303      	movs	r3, #3
 80078fc:	e007      	b.n	800790e <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	f003 0320 	and.w	r3, r3, #32
 8007908:	2b00      	cmp	r3, #0
 800790a:	d0ee      	beq.n	80078ea <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3710      	adds	r7, #16
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b084      	sub	sp, #16
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800791e:	2300      	movs	r3, #0
 8007920:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800792c:	2b00      	cmp	r3, #0
 800792e:	d120      	bne.n	8007972 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007938:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800793a:	f7fd ff63 	bl	8005804 <HAL_GetTick>
 800793e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007940:	e00d      	b.n	800795e <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007942:	f7fd ff5f 	bl	8005804 <HAL_GetTick>
 8007946:	4602      	mov	r2, r0
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007950:	d905      	bls.n	800795e <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007952:	2303      	movs	r3, #3
 8007954:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2203      	movs	r2, #3
 800795a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007968:	2b00      	cmp	r3, #0
 800796a:	d102      	bne.n	8007972 <RTC_EnterInitMode+0x5c>
 800796c:	7bfb      	ldrb	r3, [r7, #15]
 800796e:	2b03      	cmp	r3, #3
 8007970:	d1e7      	bne.n	8007942 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8007972:	7bfb      	ldrb	r3, [r7, #15]
}
 8007974:	4618      	mov	r0, r3
 8007976:	3710      	adds	r7, #16
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007984:	2300      	movs	r3, #0
 8007986:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007988:	4b1a      	ldr	r3, [pc, #104]	; (80079f4 <RTC_ExitInitMode+0x78>)
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	4a19      	ldr	r2, [pc, #100]	; (80079f4 <RTC_ExitInitMode+0x78>)
 800798e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007992:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007994:	4b17      	ldr	r3, [pc, #92]	; (80079f4 <RTC_ExitInitMode+0x78>)
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	f003 0320 	and.w	r3, r3, #32
 800799c:	2b00      	cmp	r3, #0
 800799e:	d10c      	bne.n	80079ba <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f7ff ff92 	bl	80078ca <HAL_RTC_WaitForSynchro>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d01e      	beq.n	80079ea <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2203      	movs	r2, #3
 80079b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80079b4:	2303      	movs	r3, #3
 80079b6:	73fb      	strb	r3, [r7, #15]
 80079b8:	e017      	b.n	80079ea <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80079ba:	4b0e      	ldr	r3, [pc, #56]	; (80079f4 <RTC_ExitInitMode+0x78>)
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	4a0d      	ldr	r2, [pc, #52]	; (80079f4 <RTC_ExitInitMode+0x78>)
 80079c0:	f023 0320 	bic.w	r3, r3, #32
 80079c4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f7ff ff7f 	bl	80078ca <HAL_RTC_WaitForSynchro>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d005      	beq.n	80079de <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2203      	movs	r2, #3
 80079d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80079da:	2303      	movs	r3, #3
 80079dc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80079de:	4b05      	ldr	r3, [pc, #20]	; (80079f4 <RTC_ExitInitMode+0x78>)
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	4a04      	ldr	r2, [pc, #16]	; (80079f4 <RTC_ExitInitMode+0x78>)
 80079e4:	f043 0320 	orr.w	r3, r3, #32
 80079e8:	6093      	str	r3, [r2, #8]
  }

  return status;
 80079ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3710      	adds	r7, #16
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	40002800 	.word	0x40002800

080079f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d101      	bne.n	8007a0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	e095      	b.n	8007b36 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d108      	bne.n	8007a24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a1a:	d009      	beq.n	8007a30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	61da      	str	r2, [r3, #28]
 8007a22:	e005      	b.n	8007a30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d106      	bne.n	8007a50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 f877 	bl	8007b3e <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2202      	movs	r2, #2
 8007a54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a66:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007a70:	d902      	bls.n	8007a78 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007a72:	2300      	movs	r3, #0
 8007a74:	60fb      	str	r3, [r7, #12]
 8007a76:	e002      	b.n	8007a7e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007a78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a7c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007a86:	d007      	beq.n	8007a98 <HAL_SPI_Init+0xa0>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	68db      	ldr	r3, [r3, #12]
 8007a8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007a90:	d002      	beq.n	8007a98 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007aa8:	431a      	orrs	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	f003 0302 	and.w	r3, r3, #2
 8007ab2:	431a      	orrs	r2, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	695b      	ldr	r3, [r3, #20]
 8007ab8:	f003 0301 	and.w	r3, r3, #1
 8007abc:	431a      	orrs	r2, r3
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	699b      	ldr	r3, [r3, #24]
 8007ac2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ac6:	431a      	orrs	r2, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	69db      	ldr	r3, [r3, #28]
 8007acc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ad0:	431a      	orrs	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a1b      	ldr	r3, [r3, #32]
 8007ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ada:	ea42 0103 	orr.w	r1, r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	430a      	orrs	r2, r1
 8007aec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	699b      	ldr	r3, [r3, #24]
 8007af2:	0c1b      	lsrs	r3, r3, #16
 8007af4:	f003 0204 	and.w	r2, r3, #4
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afc:	f003 0310 	and.w	r3, r3, #16
 8007b00:	431a      	orrs	r2, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b06:	f003 0308 	and.w	r3, r3, #8
 8007b0a:	431a      	orrs	r2, r3
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007b14:	ea42 0103 	orr.w	r1, r2, r3
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	430a      	orrs	r2, r1
 8007b24:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8007b3e:	b480      	push	{r7}
 8007b40:	b083      	sub	sp, #12
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8007b46:	bf00      	nop
 8007b48:	370c      	adds	r7, #12
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr

08007b52 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b082      	sub	sp, #8
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d101      	bne.n	8007b64 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	e049      	b.n	8007bf8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d106      	bne.n	8007b7e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f002 fc19 	bl	800a3b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2202      	movs	r2, #2
 8007b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	3304      	adds	r3, #4
 8007b8e:	4619      	mov	r1, r3
 8007b90:	4610      	mov	r0, r2
 8007b92:	f000 fe2f 	bl	80087f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2201      	movs	r2, #1
 8007be2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2201      	movs	r2, #1
 8007bea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bf6:	2300      	movs	r3, #0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3708      	adds	r7, #8
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d101      	bne.n	8007c12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e049      	b.n	8007ca6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d106      	bne.n	8007c2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f002 fcbc 	bl	800a5a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2202      	movs	r2, #2
 8007c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	3304      	adds	r3, #4
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	4610      	mov	r0, r2
 8007c40:	f000 fdd8 	bl	80087f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3708      	adds	r7, #8
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
	...

08007cb0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b086      	sub	sp, #24
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	607a      	str	r2, [r7, #4]
 8007cbc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d109      	bne.n	8007cdc <HAL_TIM_PWM_Start_DMA+0x2c>
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	2b02      	cmp	r3, #2
 8007cd2:	bf0c      	ite	eq
 8007cd4:	2301      	moveq	r3, #1
 8007cd6:	2300      	movne	r3, #0
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	e03c      	b.n	8007d56 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	2b04      	cmp	r3, #4
 8007ce0:	d109      	bne.n	8007cf6 <HAL_TIM_PWM_Start_DMA+0x46>
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	2b02      	cmp	r3, #2
 8007cec:	bf0c      	ite	eq
 8007cee:	2301      	moveq	r3, #1
 8007cf0:	2300      	movne	r3, #0
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	e02f      	b.n	8007d56 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	2b08      	cmp	r3, #8
 8007cfa:	d109      	bne.n	8007d10 <HAL_TIM_PWM_Start_DMA+0x60>
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	bf0c      	ite	eq
 8007d08:	2301      	moveq	r3, #1
 8007d0a:	2300      	movne	r3, #0
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	e022      	b.n	8007d56 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	2b0c      	cmp	r3, #12
 8007d14:	d109      	bne.n	8007d2a <HAL_TIM_PWM_Start_DMA+0x7a>
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	2b02      	cmp	r3, #2
 8007d20:	bf0c      	ite	eq
 8007d22:	2301      	moveq	r3, #1
 8007d24:	2300      	movne	r3, #0
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	e015      	b.n	8007d56 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	2b10      	cmp	r3, #16
 8007d2e:	d109      	bne.n	8007d44 <HAL_TIM_PWM_Start_DMA+0x94>
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	2b02      	cmp	r3, #2
 8007d3a:	bf0c      	ite	eq
 8007d3c:	2301      	moveq	r3, #1
 8007d3e:	2300      	movne	r3, #0
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	e008      	b.n	8007d56 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	2b02      	cmp	r3, #2
 8007d4e:	bf0c      	ite	eq
 8007d50:	2301      	moveq	r3, #1
 8007d52:	2300      	movne	r3, #0
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d001      	beq.n	8007d5e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8007d5a:	2302      	movs	r3, #2
 8007d5c:	e18d      	b.n	800807a <HAL_TIM_PWM_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d109      	bne.n	8007d78 <HAL_TIM_PWM_Start_DMA+0xc8>
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	bf0c      	ite	eq
 8007d70:	2301      	moveq	r3, #1
 8007d72:	2300      	movne	r3, #0
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	e03c      	b.n	8007df2 <HAL_TIM_PWM_Start_DMA+0x142>
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	2b04      	cmp	r3, #4
 8007d7c:	d109      	bne.n	8007d92 <HAL_TIM_PWM_Start_DMA+0xe2>
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	bf0c      	ite	eq
 8007d8a:	2301      	moveq	r3, #1
 8007d8c:	2300      	movne	r3, #0
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	e02f      	b.n	8007df2 <HAL_TIM_PWM_Start_DMA+0x142>
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	2b08      	cmp	r3, #8
 8007d96:	d109      	bne.n	8007dac <HAL_TIM_PWM_Start_DMA+0xfc>
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	bf0c      	ite	eq
 8007da4:	2301      	moveq	r3, #1
 8007da6:	2300      	movne	r3, #0
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	e022      	b.n	8007df2 <HAL_TIM_PWM_Start_DMA+0x142>
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	2b0c      	cmp	r3, #12
 8007db0:	d109      	bne.n	8007dc6 <HAL_TIM_PWM_Start_DMA+0x116>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	bf0c      	ite	eq
 8007dbe:	2301      	moveq	r3, #1
 8007dc0:	2300      	movne	r3, #0
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	e015      	b.n	8007df2 <HAL_TIM_PWM_Start_DMA+0x142>
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	2b10      	cmp	r3, #16
 8007dca:	d109      	bne.n	8007de0 <HAL_TIM_PWM_Start_DMA+0x130>
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	bf0c      	ite	eq
 8007dd8:	2301      	moveq	r3, #1
 8007dda:	2300      	movne	r3, #0
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	e008      	b.n	8007df2 <HAL_TIM_PWM_Start_DMA+0x142>
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	bf0c      	ite	eq
 8007dec:	2301      	moveq	r3, #1
 8007dee:	2300      	movne	r3, #0
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d034      	beq.n	8007e60 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d002      	beq.n	8007e02 <HAL_TIM_PWM_Start_DMA+0x152>
 8007dfc:	887b      	ldrh	r3, [r7, #2]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d101      	bne.n	8007e06 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	e139      	b.n	800807a <HAL_TIM_PWM_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d104      	bne.n	8007e16 <HAL_TIM_PWM_Start_DMA+0x166>
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2202      	movs	r2, #2
 8007e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e14:	e026      	b.n	8007e64 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	2b04      	cmp	r3, #4
 8007e1a:	d104      	bne.n	8007e26 <HAL_TIM_PWM_Start_DMA+0x176>
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2202      	movs	r2, #2
 8007e20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e24:	e01e      	b.n	8007e64 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	2b08      	cmp	r3, #8
 8007e2a:	d104      	bne.n	8007e36 <HAL_TIM_PWM_Start_DMA+0x186>
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2202      	movs	r2, #2
 8007e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e34:	e016      	b.n	8007e64 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	2b0c      	cmp	r3, #12
 8007e3a:	d104      	bne.n	8007e46 <HAL_TIM_PWM_Start_DMA+0x196>
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2202      	movs	r2, #2
 8007e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e44:	e00e      	b.n	8007e64 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	2b10      	cmp	r3, #16
 8007e4a:	d104      	bne.n	8007e56 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2202      	movs	r2, #2
 8007e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e54:	e006      	b.n	8007e64 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2202      	movs	r2, #2
 8007e5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e5e:	e001      	b.n	8007e64 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	e10a      	b.n	800807a <HAL_TIM_PWM_Start_DMA+0x3ca>
  }

  switch (Channel)
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	2b0c      	cmp	r3, #12
 8007e68:	f200 80ae 	bhi.w	8007fc8 <HAL_TIM_PWM_Start_DMA+0x318>
 8007e6c:	a201      	add	r2, pc, #4	; (adr r2, 8007e74 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8007e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e72:	bf00      	nop
 8007e74:	08007ea9 	.word	0x08007ea9
 8007e78:	08007fc9 	.word	0x08007fc9
 8007e7c:	08007fc9 	.word	0x08007fc9
 8007e80:	08007fc9 	.word	0x08007fc9
 8007e84:	08007ef1 	.word	0x08007ef1
 8007e88:	08007fc9 	.word	0x08007fc9
 8007e8c:	08007fc9 	.word	0x08007fc9
 8007e90:	08007fc9 	.word	0x08007fc9
 8007e94:	08007f39 	.word	0x08007f39
 8007e98:	08007fc9 	.word	0x08007fc9
 8007e9c:	08007fc9 	.word	0x08007fc9
 8007ea0:	08007fc9 	.word	0x08007fc9
 8007ea4:	08007f81 	.word	0x08007f81
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eac:	4a75      	ldr	r2, [pc, #468]	; (8008084 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8007eae:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb4:	4a74      	ldr	r2, [pc, #464]	; (8008088 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8007eb6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ebc:	4a73      	ldr	r2, [pc, #460]	; (800808c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8007ebe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007ec4:	6879      	ldr	r1, [r7, #4]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	3334      	adds	r3, #52	; 0x34
 8007ecc:	461a      	mov	r2, r3
 8007ece:	887b      	ldrh	r3, [r7, #2]
 8007ed0:	f7fd fee8 	bl	8005ca4 <HAL_DMA_Start_IT>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d001      	beq.n	8007ede <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e0cd      	b.n	800807a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	68da      	ldr	r2, [r3, #12]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007eec:	60da      	str	r2, [r3, #12]
      break;
 8007eee:	e06e      	b.n	8007fce <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef4:	4a63      	ldr	r2, [pc, #396]	; (8008084 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8007ef6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007efc:	4a62      	ldr	r2, [pc, #392]	; (8008088 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8007efe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f04:	4a61      	ldr	r2, [pc, #388]	; (800808c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8007f06:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007f0c:	6879      	ldr	r1, [r7, #4]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	3338      	adds	r3, #56	; 0x38
 8007f14:	461a      	mov	r2, r3
 8007f16:	887b      	ldrh	r3, [r7, #2]
 8007f18:	f7fd fec4 	bl	8005ca4 <HAL_DMA_Start_IT>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d001      	beq.n	8007f26 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	e0a9      	b.n	800807a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	68da      	ldr	r2, [r3, #12]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007f34:	60da      	str	r2, [r3, #12]
      break;
 8007f36:	e04a      	b.n	8007fce <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f3c:	4a51      	ldr	r2, [pc, #324]	; (8008084 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8007f3e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f44:	4a50      	ldr	r2, [pc, #320]	; (8008088 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8007f46:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f4c:	4a4f      	ldr	r2, [pc, #316]	; (800808c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8007f4e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007f54:	6879      	ldr	r1, [r7, #4]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	333c      	adds	r3, #60	; 0x3c
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	887b      	ldrh	r3, [r7, #2]
 8007f60:	f7fd fea0 	bl	8005ca4 <HAL_DMA_Start_IT>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d001      	beq.n	8007f6e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e085      	b.n	800807a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68da      	ldr	r2, [r3, #12]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f7c:	60da      	str	r2, [r3, #12]
      break;
 8007f7e:	e026      	b.n	8007fce <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f84:	4a3f      	ldr	r2, [pc, #252]	; (8008084 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8007f86:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f8c:	4a3e      	ldr	r2, [pc, #248]	; (8008088 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8007f8e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f94:	4a3d      	ldr	r2, [pc, #244]	; (800808c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8007f96:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007f9c:	6879      	ldr	r1, [r7, #4]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	3340      	adds	r3, #64	; 0x40
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	887b      	ldrh	r3, [r7, #2]
 8007fa8:	f7fd fe7c 	bl	8005ca4 <HAL_DMA_Start_IT>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d001      	beq.n	8007fb6 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e061      	b.n	800807a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	68da      	ldr	r2, [r3, #12]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007fc4:	60da      	str	r2, [r3, #12]
      break;
 8007fc6:	e002      	b.n	8007fce <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	75fb      	strb	r3, [r7, #23]
      break;
 8007fcc:	bf00      	nop
  }

  if (status == HAL_OK)
 8007fce:	7dfb      	ldrb	r3, [r7, #23]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d151      	bne.n	8008078 <HAL_TIM_PWM_Start_DMA+0x3c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	68b9      	ldr	r1, [r7, #8]
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f000 ff85 	bl	8008eec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a2a      	ldr	r2, [pc, #168]	; (8008090 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d009      	beq.n	8008000 <HAL_TIM_PWM_Start_DMA+0x350>
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a28      	ldr	r2, [pc, #160]	; (8008094 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d004      	beq.n	8008000 <HAL_TIM_PWM_Start_DMA+0x350>
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a27      	ldr	r2, [pc, #156]	; (8008098 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d101      	bne.n	8008004 <HAL_TIM_PWM_Start_DMA+0x354>
 8008000:	2301      	movs	r3, #1
 8008002:	e000      	b.n	8008006 <HAL_TIM_PWM_Start_DMA+0x356>
 8008004:	2300      	movs	r3, #0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d007      	beq.n	800801a <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008018:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a1c      	ldr	r2, [pc, #112]	; (8008090 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d009      	beq.n	8008038 <HAL_TIM_PWM_Start_DMA+0x388>
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800802c:	d004      	beq.n	8008038 <HAL_TIM_PWM_Start_DMA+0x388>
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a18      	ldr	r2, [pc, #96]	; (8008094 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d115      	bne.n	8008064 <HAL_TIM_PWM_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	689a      	ldr	r2, [r3, #8]
 800803e:	4b17      	ldr	r3, [pc, #92]	; (800809c <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8008040:	4013      	ands	r3, r2
 8008042:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	2b06      	cmp	r3, #6
 8008048:	d015      	beq.n	8008076 <HAL_TIM_PWM_Start_DMA+0x3c6>
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008050:	d011      	beq.n	8008076 <HAL_TIM_PWM_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f042 0201 	orr.w	r2, r2, #1
 8008060:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008062:	e008      	b.n	8008076 <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f042 0201 	orr.w	r2, r2, #1
 8008072:	601a      	str	r2, [r3, #0]
 8008074:	e000      	b.n	8008078 <HAL_TIM_PWM_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008076:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008078:	7dfb      	ldrb	r3, [r7, #23]
}
 800807a:	4618      	mov	r0, r3
 800807c:	3718      	adds	r7, #24
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	080086e5 	.word	0x080086e5
 8008088:	0800878d 	.word	0x0800878d
 800808c:	08008653 	.word	0x08008653
 8008090:	40012c00 	.word	0x40012c00
 8008094:	40014000 	.word	0x40014000
 8008098:	40014400 	.word	0x40014400
 800809c:	00010007 	.word	0x00010007

080080a0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80080aa:	2300      	movs	r3, #0
 80080ac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	2b0c      	cmp	r3, #12
 80080b2:	d855      	bhi.n	8008160 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80080b4:	a201      	add	r2, pc, #4	; (adr r2, 80080bc <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80080b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ba:	bf00      	nop
 80080bc:	080080f1 	.word	0x080080f1
 80080c0:	08008161 	.word	0x08008161
 80080c4:	08008161 	.word	0x08008161
 80080c8:	08008161 	.word	0x08008161
 80080cc:	0800810d 	.word	0x0800810d
 80080d0:	08008161 	.word	0x08008161
 80080d4:	08008161 	.word	0x08008161
 80080d8:	08008161 	.word	0x08008161
 80080dc:	08008129 	.word	0x08008129
 80080e0:	08008161 	.word	0x08008161
 80080e4:	08008161 	.word	0x08008161
 80080e8:	08008161 	.word	0x08008161
 80080ec:	08008145 	.word	0x08008145
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	68da      	ldr	r2, [r3, #12]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80080fe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008104:	4618      	mov	r0, r3
 8008106:	f7fd fe2d 	bl	8005d64 <HAL_DMA_Abort_IT>
      break;
 800810a:	e02c      	b.n	8008166 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	68da      	ldr	r2, [r3, #12]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800811a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008120:	4618      	mov	r0, r3
 8008122:	f7fd fe1f 	bl	8005d64 <HAL_DMA_Abort_IT>
      break;
 8008126:	e01e      	b.n	8008166 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	68da      	ldr	r2, [r3, #12]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008136:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800813c:	4618      	mov	r0, r3
 800813e:	f7fd fe11 	bl	8005d64 <HAL_DMA_Abort_IT>
      break;
 8008142:	e010      	b.n	8008166 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	68da      	ldr	r2, [r3, #12]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008152:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008158:	4618      	mov	r0, r3
 800815a:	f7fd fe03 	bl	8005d64 <HAL_DMA_Abort_IT>
      break;
 800815e:	e002      	b.n	8008166 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	73fb      	strb	r3, [r7, #15]
      break;
 8008164:	bf00      	nop
  }

  if (status == HAL_OK)
 8008166:	7bfb      	ldrb	r3, [r7, #15]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d176      	bne.n	800825a <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2200      	movs	r2, #0
 8008172:	6839      	ldr	r1, [r7, #0]
 8008174:	4618      	mov	r0, r3
 8008176:	f000 feb9 	bl	8008eec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a39      	ldr	r2, [pc, #228]	; (8008264 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d009      	beq.n	8008198 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a37      	ldr	r2, [pc, #220]	; (8008268 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d004      	beq.n	8008198 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a36      	ldr	r2, [pc, #216]	; (800826c <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d101      	bne.n	800819c <HAL_TIM_PWM_Stop_DMA+0xfc>
 8008198:	2301      	movs	r3, #1
 800819a:	e000      	b.n	800819e <HAL_TIM_PWM_Stop_DMA+0xfe>
 800819c:	2300      	movs	r3, #0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d017      	beq.n	80081d2 <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	6a1a      	ldr	r2, [r3, #32]
 80081a8:	f241 1311 	movw	r3, #4369	; 0x1111
 80081ac:	4013      	ands	r3, r2
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d10f      	bne.n	80081d2 <HAL_TIM_PWM_Stop_DMA+0x132>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	6a1a      	ldr	r2, [r3, #32]
 80081b8:	f240 4344 	movw	r3, #1092	; 0x444
 80081bc:	4013      	ands	r3, r2
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d107      	bne.n	80081d2 <HAL_TIM_PWM_Stop_DMA+0x132>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80081d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	6a1a      	ldr	r2, [r3, #32]
 80081d8:	f241 1311 	movw	r3, #4369	; 0x1111
 80081dc:	4013      	ands	r3, r2
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d10f      	bne.n	8008202 <HAL_TIM_PWM_Stop_DMA+0x162>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	6a1a      	ldr	r2, [r3, #32]
 80081e8:	f240 4344 	movw	r3, #1092	; 0x444
 80081ec:	4013      	ands	r3, r2
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d107      	bne.n	8008202 <HAL_TIM_PWM_Stop_DMA+0x162>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f022 0201 	bic.w	r2, r2, #1
 8008200:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d104      	bne.n	8008212 <HAL_TIM_PWM_Stop_DMA+0x172>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008210:	e023      	b.n	800825a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	2b04      	cmp	r3, #4
 8008216:	d104      	bne.n	8008222 <HAL_TIM_PWM_Stop_DMA+0x182>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008220:	e01b      	b.n	800825a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	2b08      	cmp	r3, #8
 8008226:	d104      	bne.n	8008232 <HAL_TIM_PWM_Stop_DMA+0x192>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008230:	e013      	b.n	800825a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	2b0c      	cmp	r3, #12
 8008236:	d104      	bne.n	8008242 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008240:	e00b      	b.n	800825a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	2b10      	cmp	r3, #16
 8008246:	d104      	bne.n	8008252 <HAL_TIM_PWM_Stop_DMA+0x1b2>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008250:	e003      	b.n	800825a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2201      	movs	r2, #1
 8008256:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800825a:	7bfb      	ldrb	r3, [r7, #15]
}
 800825c:	4618      	mov	r0, r3
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	40012c00 	.word	0x40012c00
 8008268:	40014000 	.word	0x40014000
 800826c:	40014400 	.word	0x40014400

08008270 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b086      	sub	sp, #24
 8008274:	af00      	add	r7, sp, #0
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	60b9      	str	r1, [r7, #8]
 800827a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800827c:	2300      	movs	r3, #0
 800827e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008286:	2b01      	cmp	r3, #1
 8008288:	d101      	bne.n	800828e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800828a:	2302      	movs	r3, #2
 800828c:	e0ff      	b.n	800848e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2201      	movs	r2, #1
 8008292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2b14      	cmp	r3, #20
 800829a:	f200 80f0 	bhi.w	800847e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800829e:	a201      	add	r2, pc, #4	; (adr r2, 80082a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80082a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a4:	080082f9 	.word	0x080082f9
 80082a8:	0800847f 	.word	0x0800847f
 80082ac:	0800847f 	.word	0x0800847f
 80082b0:	0800847f 	.word	0x0800847f
 80082b4:	08008339 	.word	0x08008339
 80082b8:	0800847f 	.word	0x0800847f
 80082bc:	0800847f 	.word	0x0800847f
 80082c0:	0800847f 	.word	0x0800847f
 80082c4:	0800837b 	.word	0x0800837b
 80082c8:	0800847f 	.word	0x0800847f
 80082cc:	0800847f 	.word	0x0800847f
 80082d0:	0800847f 	.word	0x0800847f
 80082d4:	080083bb 	.word	0x080083bb
 80082d8:	0800847f 	.word	0x0800847f
 80082dc:	0800847f 	.word	0x0800847f
 80082e0:	0800847f 	.word	0x0800847f
 80082e4:	080083fd 	.word	0x080083fd
 80082e8:	0800847f 	.word	0x0800847f
 80082ec:	0800847f 	.word	0x0800847f
 80082f0:	0800847f 	.word	0x0800847f
 80082f4:	0800843d 	.word	0x0800843d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	68b9      	ldr	r1, [r7, #8]
 80082fe:	4618      	mov	r0, r3
 8008300:	f000 fadc 	bl	80088bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	699a      	ldr	r2, [r3, #24]
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f042 0208 	orr.w	r2, r2, #8
 8008312:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	699a      	ldr	r2, [r3, #24]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f022 0204 	bic.w	r2, r2, #4
 8008322:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	6999      	ldr	r1, [r3, #24]
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	691a      	ldr	r2, [r3, #16]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	430a      	orrs	r2, r1
 8008334:	619a      	str	r2, [r3, #24]
      break;
 8008336:	e0a5      	b.n	8008484 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68b9      	ldr	r1, [r7, #8]
 800833e:	4618      	mov	r0, r3
 8008340:	f000 fb38 	bl	80089b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	699a      	ldr	r2, [r3, #24]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008352:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	699a      	ldr	r2, [r3, #24]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008362:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	6999      	ldr	r1, [r3, #24]
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	021a      	lsls	r2, r3, #8
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	430a      	orrs	r2, r1
 8008376:	619a      	str	r2, [r3, #24]
      break;
 8008378:	e084      	b.n	8008484 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68b9      	ldr	r1, [r7, #8]
 8008380:	4618      	mov	r0, r3
 8008382:	f000 fb91 	bl	8008aa8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	69da      	ldr	r2, [r3, #28]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f042 0208 	orr.w	r2, r2, #8
 8008394:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	69da      	ldr	r2, [r3, #28]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f022 0204 	bic.w	r2, r2, #4
 80083a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	69d9      	ldr	r1, [r3, #28]
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	691a      	ldr	r2, [r3, #16]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	430a      	orrs	r2, r1
 80083b6:	61da      	str	r2, [r3, #28]
      break;
 80083b8:	e064      	b.n	8008484 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	68b9      	ldr	r1, [r7, #8]
 80083c0:	4618      	mov	r0, r3
 80083c2:	f000 fbe9 	bl	8008b98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	69da      	ldr	r2, [r3, #28]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	69da      	ldr	r2, [r3, #28]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	69d9      	ldr	r1, [r3, #28]
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	691b      	ldr	r3, [r3, #16]
 80083f0:	021a      	lsls	r2, r3, #8
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	430a      	orrs	r2, r1
 80083f8:	61da      	str	r2, [r3, #28]
      break;
 80083fa:	e043      	b.n	8008484 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	68b9      	ldr	r1, [r7, #8]
 8008402:	4618      	mov	r0, r3
 8008404:	f000 fc26 	bl	8008c54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f042 0208 	orr.w	r2, r2, #8
 8008416:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f022 0204 	bic.w	r2, r2, #4
 8008426:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	691a      	ldr	r2, [r3, #16]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	430a      	orrs	r2, r1
 8008438:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800843a:	e023      	b.n	8008484 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	68b9      	ldr	r1, [r7, #8]
 8008442:	4618      	mov	r0, r3
 8008444:	f000 fc5e 	bl	8008d04 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008456:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008466:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	021a      	lsls	r2, r3, #8
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	430a      	orrs	r2, r1
 800847a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800847c:	e002      	b.n	8008484 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	75fb      	strb	r3, [r7, #23]
      break;
 8008482:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2200      	movs	r2, #0
 8008488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800848c:	7dfb      	ldrb	r3, [r7, #23]
}
 800848e:	4618      	mov	r0, r3
 8008490:	3718      	adds	r7, #24
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop

08008498 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80084a2:	2300      	movs	r3, #0
 80084a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d101      	bne.n	80084b4 <HAL_TIM_ConfigClockSource+0x1c>
 80084b0:	2302      	movs	r3, #2
 80084b2:	e0b6      	b.n	8008622 <HAL_TIM_ConfigClockSource+0x18a>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2202      	movs	r2, #2
 80084c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80084d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80084de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	68ba      	ldr	r2, [r7, #8]
 80084e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084f0:	d03e      	beq.n	8008570 <HAL_TIM_ConfigClockSource+0xd8>
 80084f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084f6:	f200 8087 	bhi.w	8008608 <HAL_TIM_ConfigClockSource+0x170>
 80084fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084fe:	f000 8086 	beq.w	800860e <HAL_TIM_ConfigClockSource+0x176>
 8008502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008506:	d87f      	bhi.n	8008608 <HAL_TIM_ConfigClockSource+0x170>
 8008508:	2b70      	cmp	r3, #112	; 0x70
 800850a:	d01a      	beq.n	8008542 <HAL_TIM_ConfigClockSource+0xaa>
 800850c:	2b70      	cmp	r3, #112	; 0x70
 800850e:	d87b      	bhi.n	8008608 <HAL_TIM_ConfigClockSource+0x170>
 8008510:	2b60      	cmp	r3, #96	; 0x60
 8008512:	d050      	beq.n	80085b6 <HAL_TIM_ConfigClockSource+0x11e>
 8008514:	2b60      	cmp	r3, #96	; 0x60
 8008516:	d877      	bhi.n	8008608 <HAL_TIM_ConfigClockSource+0x170>
 8008518:	2b50      	cmp	r3, #80	; 0x50
 800851a:	d03c      	beq.n	8008596 <HAL_TIM_ConfigClockSource+0xfe>
 800851c:	2b50      	cmp	r3, #80	; 0x50
 800851e:	d873      	bhi.n	8008608 <HAL_TIM_ConfigClockSource+0x170>
 8008520:	2b40      	cmp	r3, #64	; 0x40
 8008522:	d058      	beq.n	80085d6 <HAL_TIM_ConfigClockSource+0x13e>
 8008524:	2b40      	cmp	r3, #64	; 0x40
 8008526:	d86f      	bhi.n	8008608 <HAL_TIM_ConfigClockSource+0x170>
 8008528:	2b30      	cmp	r3, #48	; 0x30
 800852a:	d064      	beq.n	80085f6 <HAL_TIM_ConfigClockSource+0x15e>
 800852c:	2b30      	cmp	r3, #48	; 0x30
 800852e:	d86b      	bhi.n	8008608 <HAL_TIM_ConfigClockSource+0x170>
 8008530:	2b20      	cmp	r3, #32
 8008532:	d060      	beq.n	80085f6 <HAL_TIM_ConfigClockSource+0x15e>
 8008534:	2b20      	cmp	r3, #32
 8008536:	d867      	bhi.n	8008608 <HAL_TIM_ConfigClockSource+0x170>
 8008538:	2b00      	cmp	r3, #0
 800853a:	d05c      	beq.n	80085f6 <HAL_TIM_ConfigClockSource+0x15e>
 800853c:	2b10      	cmp	r3, #16
 800853e:	d05a      	beq.n	80085f6 <HAL_TIM_ConfigClockSource+0x15e>
 8008540:	e062      	b.n	8008608 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008552:	f000 fcab 	bl	8008eac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008564:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	68ba      	ldr	r2, [r7, #8]
 800856c:	609a      	str	r2, [r3, #8]
      break;
 800856e:	e04f      	b.n	8008610 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008580:	f000 fc94 	bl	8008eac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	689a      	ldr	r2, [r3, #8]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008592:	609a      	str	r2, [r3, #8]
      break;
 8008594:	e03c      	b.n	8008610 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80085a2:	461a      	mov	r2, r3
 80085a4:	f000 fc08 	bl	8008db8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	2150      	movs	r1, #80	; 0x50
 80085ae:	4618      	mov	r0, r3
 80085b0:	f000 fc61 	bl	8008e76 <TIM_ITRx_SetConfig>
      break;
 80085b4:	e02c      	b.n	8008610 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80085c2:	461a      	mov	r2, r3
 80085c4:	f000 fc27 	bl	8008e16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2160      	movs	r1, #96	; 0x60
 80085ce:	4618      	mov	r0, r3
 80085d0:	f000 fc51 	bl	8008e76 <TIM_ITRx_SetConfig>
      break;
 80085d4:	e01c      	b.n	8008610 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80085e2:	461a      	mov	r2, r3
 80085e4:	f000 fbe8 	bl	8008db8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	2140      	movs	r1, #64	; 0x40
 80085ee:	4618      	mov	r0, r3
 80085f0:	f000 fc41 	bl	8008e76 <TIM_ITRx_SetConfig>
      break;
 80085f4:	e00c      	b.n	8008610 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4619      	mov	r1, r3
 8008600:	4610      	mov	r0, r2
 8008602:	f000 fc38 	bl	8008e76 <TIM_ITRx_SetConfig>
      break;
 8008606:	e003      	b.n	8008610 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	73fb      	strb	r3, [r7, #15]
      break;
 800860c:	e000      	b.n	8008610 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800860e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008620:	7bfb      	ldrb	r3, [r7, #15]
}
 8008622:	4618      	mov	r0, r3
 8008624:	3710      	adds	r7, #16
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}

0800862a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800862a:	b480      	push	{r7}
 800862c:	b083      	sub	sp, #12
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008632:	bf00      	nop
 8008634:	370c      	adds	r7, #12
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr

0800863e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800863e:	b480      	push	{r7}
 8008640:	b083      	sub	sp, #12
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008646:	bf00      	nop
 8008648:	370c      	adds	r7, #12
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr

08008652 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008652:	b580      	push	{r7, lr}
 8008654:	b084      	sub	sp, #16
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800865e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	429a      	cmp	r2, r3
 8008668:	d107      	bne.n	800867a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2201      	movs	r2, #1
 800866e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008678:	e02a      	b.n	80086d0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	429a      	cmp	r2, r3
 8008682:	d107      	bne.n	8008694 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2202      	movs	r2, #2
 8008688:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2201      	movs	r2, #1
 800868e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008692:	e01d      	b.n	80086d0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	429a      	cmp	r2, r3
 800869c:	d107      	bne.n	80086ae <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2204      	movs	r2, #4
 80086a2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2201      	movs	r2, #1
 80086a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086ac:	e010      	b.n	80086d0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d107      	bne.n	80086c8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2208      	movs	r2, #8
 80086bc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2201      	movs	r2, #1
 80086c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80086c6:	e003      	b.n	80086d0 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	f7ff ffb4 	bl	800863e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2200      	movs	r2, #0
 80086da:	771a      	strb	r2, [r3, #28]
}
 80086dc:	bf00      	nop
 80086de:	3710      	adds	r7, #16
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d10b      	bne.n	8008714 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2201      	movs	r2, #1
 8008700:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	69db      	ldr	r3, [r3, #28]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d136      	bne.n	8008778 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2201      	movs	r2, #1
 800870e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008712:	e031      	b.n	8008778 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	429a      	cmp	r2, r3
 800871c:	d10b      	bne.n	8008736 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2202      	movs	r2, #2
 8008722:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	69db      	ldr	r3, [r3, #28]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d125      	bne.n	8008778 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008734:	e020      	b.n	8008778 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	429a      	cmp	r2, r3
 800873e:	d10b      	bne.n	8008758 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2204      	movs	r2, #4
 8008744:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	69db      	ldr	r3, [r3, #28]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d114      	bne.n	8008778 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2201      	movs	r2, #1
 8008752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008756:	e00f      	b.n	8008778 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	429a      	cmp	r2, r3
 8008760:	d10a      	bne.n	8008778 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2208      	movs	r2, #8
 8008766:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	69db      	ldr	r3, [r3, #28]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d103      	bne.n	8008778 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2201      	movs	r2, #1
 8008774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008778:	68f8      	ldr	r0, [r7, #12]
 800877a:	f002 f8d9 	bl	800a930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2200      	movs	r2, #0
 8008782:	771a      	strb	r2, [r3, #28]
  //g_tim_pwm_transfer_cmplt = true;

}
 8008784:	bf00      	nop
 8008786:	3710      	adds	r7, #16
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008798:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d103      	bne.n	80087ac <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2201      	movs	r2, #1
 80087a8:	771a      	strb	r2, [r3, #28]
 80087aa:	e019      	b.n	80087e0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d103      	bne.n	80087be <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2202      	movs	r2, #2
 80087ba:	771a      	strb	r2, [r3, #28]
 80087bc:	e010      	b.n	80087e0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d103      	bne.n	80087d0 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2204      	movs	r2, #4
 80087cc:	771a      	strb	r2, [r3, #28]
 80087ce:	e007      	b.n	80087e0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d102      	bne.n	80087e0 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2208      	movs	r2, #8
 80087de:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80087e0:	68f8      	ldr	r0, [r7, #12]
 80087e2:	f7ff ff22 	bl	800862a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2200      	movs	r2, #0
 80087ea:	771a      	strb	r2, [r3, #28]
}
 80087ec:	bf00      	nop
 80087ee:	3710      	adds	r7, #16
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b085      	sub	sp, #20
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	4a2a      	ldr	r2, [pc, #168]	; (80088b0 <TIM_Base_SetConfig+0xbc>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d003      	beq.n	8008814 <TIM_Base_SetConfig+0x20>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008812:	d108      	bne.n	8008826 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800881a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	68fa      	ldr	r2, [r7, #12]
 8008822:	4313      	orrs	r3, r2
 8008824:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4a21      	ldr	r2, [pc, #132]	; (80088b0 <TIM_Base_SetConfig+0xbc>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d00b      	beq.n	8008846 <TIM_Base_SetConfig+0x52>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008834:	d007      	beq.n	8008846 <TIM_Base_SetConfig+0x52>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	4a1e      	ldr	r2, [pc, #120]	; (80088b4 <TIM_Base_SetConfig+0xc0>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d003      	beq.n	8008846 <TIM_Base_SetConfig+0x52>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4a1d      	ldr	r2, [pc, #116]	; (80088b8 <TIM_Base_SetConfig+0xc4>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d108      	bne.n	8008858 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800884c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	68fa      	ldr	r2, [r7, #12]
 8008854:	4313      	orrs	r3, r2
 8008856:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	695b      	ldr	r3, [r3, #20]
 8008862:	4313      	orrs	r3, r2
 8008864:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	689a      	ldr	r2, [r3, #8]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	4a0c      	ldr	r2, [pc, #48]	; (80088b0 <TIM_Base_SetConfig+0xbc>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d007      	beq.n	8008894 <TIM_Base_SetConfig+0xa0>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4a0b      	ldr	r2, [pc, #44]	; (80088b4 <TIM_Base_SetConfig+0xc0>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d003      	beq.n	8008894 <TIM_Base_SetConfig+0xa0>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	4a0a      	ldr	r2, [pc, #40]	; (80088b8 <TIM_Base_SetConfig+0xc4>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d103      	bne.n	800889c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	691a      	ldr	r2, [r3, #16]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2201      	movs	r2, #1
 80088a0:	615a      	str	r2, [r3, #20]
}
 80088a2:	bf00      	nop
 80088a4:	3714      	adds	r7, #20
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr
 80088ae:	bf00      	nop
 80088b0:	40012c00 	.word	0x40012c00
 80088b4:	40014000 	.word	0x40014000
 80088b8:	40014400 	.word	0x40014400

080088bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088bc:	b480      	push	{r7}
 80088be:	b087      	sub	sp, #28
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6a1b      	ldr	r3, [r3, #32]
 80088ca:	f023 0201 	bic.w	r2, r3, #1
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a1b      	ldr	r3, [r3, #32]
 80088d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	699b      	ldr	r3, [r3, #24]
 80088e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f023 0303 	bic.w	r3, r3, #3
 80088f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	4313      	orrs	r3, r2
 8008900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	f023 0302 	bic.w	r3, r3, #2
 8008908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	697a      	ldr	r2, [r7, #20]
 8008910:	4313      	orrs	r3, r2
 8008912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	4a24      	ldr	r2, [pc, #144]	; (80089a8 <TIM_OC1_SetConfig+0xec>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d007      	beq.n	800892c <TIM_OC1_SetConfig+0x70>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	4a23      	ldr	r2, [pc, #140]	; (80089ac <TIM_OC1_SetConfig+0xf0>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d003      	beq.n	800892c <TIM_OC1_SetConfig+0x70>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	4a22      	ldr	r2, [pc, #136]	; (80089b0 <TIM_OC1_SetConfig+0xf4>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d10c      	bne.n	8008946 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	f023 0308 	bic.w	r3, r3, #8
 8008932:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	697a      	ldr	r2, [r7, #20]
 800893a:	4313      	orrs	r3, r2
 800893c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	f023 0304 	bic.w	r3, r3, #4
 8008944:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4a17      	ldr	r2, [pc, #92]	; (80089a8 <TIM_OC1_SetConfig+0xec>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d007      	beq.n	800895e <TIM_OC1_SetConfig+0xa2>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	4a16      	ldr	r2, [pc, #88]	; (80089ac <TIM_OC1_SetConfig+0xf0>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d003      	beq.n	800895e <TIM_OC1_SetConfig+0xa2>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4a15      	ldr	r2, [pc, #84]	; (80089b0 <TIM_OC1_SetConfig+0xf4>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d111      	bne.n	8008982 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008964:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800896c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	695b      	ldr	r3, [r3, #20]
 8008972:	693a      	ldr	r2, [r7, #16]
 8008974:	4313      	orrs	r3, r2
 8008976:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	699b      	ldr	r3, [r3, #24]
 800897c:	693a      	ldr	r2, [r7, #16]
 800897e:	4313      	orrs	r3, r2
 8008980:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	693a      	ldr	r2, [r7, #16]
 8008986:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	68fa      	ldr	r2, [r7, #12]
 800898c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	685a      	ldr	r2, [r3, #4]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	697a      	ldr	r2, [r7, #20]
 800899a:	621a      	str	r2, [r3, #32]
}
 800899c:	bf00      	nop
 800899e:	371c      	adds	r7, #28
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr
 80089a8:	40012c00 	.word	0x40012c00
 80089ac:	40014000 	.word	0x40014000
 80089b0:	40014400 	.word	0x40014400

080089b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b087      	sub	sp, #28
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6a1b      	ldr	r3, [r3, #32]
 80089c2:	f023 0210 	bic.w	r2, r3, #16
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6a1b      	ldr	r3, [r3, #32]
 80089ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	699b      	ldr	r3, [r3, #24]
 80089da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80089e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	021b      	lsls	r3, r3, #8
 80089f6:	68fa      	ldr	r2, [r7, #12]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	f023 0320 	bic.w	r3, r3, #32
 8008a02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	011b      	lsls	r3, r3, #4
 8008a0a:	697a      	ldr	r2, [r7, #20]
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	4a22      	ldr	r2, [pc, #136]	; (8008a9c <TIM_OC2_SetConfig+0xe8>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d10d      	bne.n	8008a34 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	68db      	ldr	r3, [r3, #12]
 8008a24:	011b      	lsls	r3, r3, #4
 8008a26:	697a      	ldr	r2, [r7, #20]
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	4a19      	ldr	r2, [pc, #100]	; (8008a9c <TIM_OC2_SetConfig+0xe8>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d007      	beq.n	8008a4c <TIM_OC2_SetConfig+0x98>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4a18      	ldr	r2, [pc, #96]	; (8008aa0 <TIM_OC2_SetConfig+0xec>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d003      	beq.n	8008a4c <TIM_OC2_SetConfig+0x98>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	4a17      	ldr	r2, [pc, #92]	; (8008aa4 <TIM_OC2_SetConfig+0xf0>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d113      	bne.n	8008a74 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	695b      	ldr	r3, [r3, #20]
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	693a      	ldr	r2, [r7, #16]
 8008a64:	4313      	orrs	r3, r2
 8008a66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	699b      	ldr	r3, [r3, #24]
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	693a      	ldr	r2, [r7, #16]
 8008a70:	4313      	orrs	r3, r2
 8008a72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	693a      	ldr	r2, [r7, #16]
 8008a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	68fa      	ldr	r2, [r7, #12]
 8008a7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	685a      	ldr	r2, [r3, #4]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	697a      	ldr	r2, [r7, #20]
 8008a8c:	621a      	str	r2, [r3, #32]
}
 8008a8e:	bf00      	nop
 8008a90:	371c      	adds	r7, #28
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr
 8008a9a:	bf00      	nop
 8008a9c:	40012c00 	.word	0x40012c00
 8008aa0:	40014000 	.word	0x40014000
 8008aa4:	40014400 	.word	0x40014400

08008aa8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b087      	sub	sp, #28
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6a1b      	ldr	r3, [r3, #32]
 8008ab6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6a1b      	ldr	r3, [r3, #32]
 8008ac2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	69db      	ldr	r3, [r3, #28]
 8008ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f023 0303 	bic.w	r3, r3, #3
 8008ae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	68fa      	ldr	r2, [r7, #12]
 8008aea:	4313      	orrs	r3, r2
 8008aec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008af4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	021b      	lsls	r3, r3, #8
 8008afc:	697a      	ldr	r2, [r7, #20]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	4a21      	ldr	r2, [pc, #132]	; (8008b8c <TIM_OC3_SetConfig+0xe4>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d10d      	bne.n	8008b26 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	68db      	ldr	r3, [r3, #12]
 8008b16:	021b      	lsls	r3, r3, #8
 8008b18:	697a      	ldr	r2, [r7, #20]
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	4a18      	ldr	r2, [pc, #96]	; (8008b8c <TIM_OC3_SetConfig+0xe4>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d007      	beq.n	8008b3e <TIM_OC3_SetConfig+0x96>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	4a17      	ldr	r2, [pc, #92]	; (8008b90 <TIM_OC3_SetConfig+0xe8>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d003      	beq.n	8008b3e <TIM_OC3_SetConfig+0x96>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	4a16      	ldr	r2, [pc, #88]	; (8008b94 <TIM_OC3_SetConfig+0xec>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d113      	bne.n	8008b66 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	695b      	ldr	r3, [r3, #20]
 8008b52:	011b      	lsls	r3, r3, #4
 8008b54:	693a      	ldr	r2, [r7, #16]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	699b      	ldr	r3, [r3, #24]
 8008b5e:	011b      	lsls	r3, r3, #4
 8008b60:	693a      	ldr	r2, [r7, #16]
 8008b62:	4313      	orrs	r3, r2
 8008b64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	693a      	ldr	r2, [r7, #16]
 8008b6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	685a      	ldr	r2, [r3, #4]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	697a      	ldr	r2, [r7, #20]
 8008b7e:	621a      	str	r2, [r3, #32]
}
 8008b80:	bf00      	nop
 8008b82:	371c      	adds	r7, #28
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr
 8008b8c:	40012c00 	.word	0x40012c00
 8008b90:	40014000 	.word	0x40014000
 8008b94:	40014400 	.word	0x40014400

08008b98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b087      	sub	sp, #28
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6a1b      	ldr	r3, [r3, #32]
 8008ba6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6a1b      	ldr	r3, [r3, #32]
 8008bb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	69db      	ldr	r3, [r3, #28]
 8008bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008bc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	021b      	lsls	r3, r3, #8
 8008bda:	68fa      	ldr	r2, [r7, #12]
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008be6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	031b      	lsls	r3, r3, #12
 8008bee:	693a      	ldr	r2, [r7, #16]
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	4a14      	ldr	r2, [pc, #80]	; (8008c48 <TIM_OC4_SetConfig+0xb0>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d007      	beq.n	8008c0c <TIM_OC4_SetConfig+0x74>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4a13      	ldr	r2, [pc, #76]	; (8008c4c <TIM_OC4_SetConfig+0xb4>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d003      	beq.n	8008c0c <TIM_OC4_SetConfig+0x74>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4a12      	ldr	r2, [pc, #72]	; (8008c50 <TIM_OC4_SetConfig+0xb8>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d109      	bne.n	8008c20 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	695b      	ldr	r3, [r3, #20]
 8008c18:	019b      	lsls	r3, r3, #6
 8008c1a:	697a      	ldr	r2, [r7, #20]
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	697a      	ldr	r2, [r7, #20]
 8008c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	68fa      	ldr	r2, [r7, #12]
 8008c2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	685a      	ldr	r2, [r3, #4]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	693a      	ldr	r2, [r7, #16]
 8008c38:	621a      	str	r2, [r3, #32]
}
 8008c3a:	bf00      	nop
 8008c3c:	371c      	adds	r7, #28
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr
 8008c46:	bf00      	nop
 8008c48:	40012c00 	.word	0x40012c00
 8008c4c:	40014000 	.word	0x40014000
 8008c50:	40014400 	.word	0x40014400

08008c54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b087      	sub	sp, #28
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6a1b      	ldr	r3, [r3, #32]
 8008c62:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a1b      	ldr	r3, [r3, #32]
 8008c6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008c98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	689b      	ldr	r3, [r3, #8]
 8008c9e:	041b      	lsls	r3, r3, #16
 8008ca0:	693a      	ldr	r2, [r7, #16]
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	4a13      	ldr	r2, [pc, #76]	; (8008cf8 <TIM_OC5_SetConfig+0xa4>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d007      	beq.n	8008cbe <TIM_OC5_SetConfig+0x6a>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	4a12      	ldr	r2, [pc, #72]	; (8008cfc <TIM_OC5_SetConfig+0xa8>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d003      	beq.n	8008cbe <TIM_OC5_SetConfig+0x6a>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	4a11      	ldr	r2, [pc, #68]	; (8008d00 <TIM_OC5_SetConfig+0xac>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d109      	bne.n	8008cd2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cc4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	695b      	ldr	r3, [r3, #20]
 8008cca:	021b      	lsls	r3, r3, #8
 8008ccc:	697a      	ldr	r2, [r7, #20]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	697a      	ldr	r2, [r7, #20]
 8008cd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	68fa      	ldr	r2, [r7, #12]
 8008cdc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	685a      	ldr	r2, [r3, #4]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	693a      	ldr	r2, [r7, #16]
 8008cea:	621a      	str	r2, [r3, #32]
}
 8008cec:	bf00      	nop
 8008cee:	371c      	adds	r7, #28
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr
 8008cf8:	40012c00 	.word	0x40012c00
 8008cfc:	40014000 	.word	0x40014000
 8008d00:	40014400 	.word	0x40014400

08008d04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b087      	sub	sp, #28
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6a1b      	ldr	r3, [r3, #32]
 8008d12:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6a1b      	ldr	r3, [r3, #32]
 8008d1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	021b      	lsls	r3, r3, #8
 8008d3e:	68fa      	ldr	r2, [r7, #12]
 8008d40:	4313      	orrs	r3, r2
 8008d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008d4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	051b      	lsls	r3, r3, #20
 8008d52:	693a      	ldr	r2, [r7, #16]
 8008d54:	4313      	orrs	r3, r2
 8008d56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	4a14      	ldr	r2, [pc, #80]	; (8008dac <TIM_OC6_SetConfig+0xa8>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d007      	beq.n	8008d70 <TIM_OC6_SetConfig+0x6c>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	4a13      	ldr	r2, [pc, #76]	; (8008db0 <TIM_OC6_SetConfig+0xac>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d003      	beq.n	8008d70 <TIM_OC6_SetConfig+0x6c>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	4a12      	ldr	r2, [pc, #72]	; (8008db4 <TIM_OC6_SetConfig+0xb0>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d109      	bne.n	8008d84 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	695b      	ldr	r3, [r3, #20]
 8008d7c:	029b      	lsls	r3, r3, #10
 8008d7e:	697a      	ldr	r2, [r7, #20]
 8008d80:	4313      	orrs	r3, r2
 8008d82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	697a      	ldr	r2, [r7, #20]
 8008d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	68fa      	ldr	r2, [r7, #12]
 8008d8e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	685a      	ldr	r2, [r3, #4]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	693a      	ldr	r2, [r7, #16]
 8008d9c:	621a      	str	r2, [r3, #32]
}
 8008d9e:	bf00      	nop
 8008da0:	371c      	adds	r7, #28
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr
 8008daa:	bf00      	nop
 8008dac:	40012c00 	.word	0x40012c00
 8008db0:	40014000 	.word	0x40014000
 8008db4:	40014400 	.word	0x40014400

08008db8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b087      	sub	sp, #28
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6a1b      	ldr	r3, [r3, #32]
 8008dc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	6a1b      	ldr	r3, [r3, #32]
 8008dce:	f023 0201 	bic.w	r2, r3, #1
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	699b      	ldr	r3, [r3, #24]
 8008dda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008de2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	011b      	lsls	r3, r3, #4
 8008de8:	693a      	ldr	r2, [r7, #16]
 8008dea:	4313      	orrs	r3, r2
 8008dec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	f023 030a 	bic.w	r3, r3, #10
 8008df4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008df6:	697a      	ldr	r2, [r7, #20]
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	693a      	ldr	r2, [r7, #16]
 8008e02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	697a      	ldr	r2, [r7, #20]
 8008e08:	621a      	str	r2, [r3, #32]
}
 8008e0a:	bf00      	nop
 8008e0c:	371c      	adds	r7, #28
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr

08008e16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e16:	b480      	push	{r7}
 8008e18:	b087      	sub	sp, #28
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	60f8      	str	r0, [r7, #12]
 8008e1e:	60b9      	str	r1, [r7, #8]
 8008e20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	6a1b      	ldr	r3, [r3, #32]
 8008e26:	f023 0210 	bic.w	r2, r3, #16
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	699b      	ldr	r3, [r3, #24]
 8008e32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6a1b      	ldr	r3, [r3, #32]
 8008e38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008e40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	031b      	lsls	r3, r3, #12
 8008e46:	697a      	ldr	r2, [r7, #20]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008e52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	011b      	lsls	r3, r3, #4
 8008e58:	693a      	ldr	r2, [r7, #16]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	697a      	ldr	r2, [r7, #20]
 8008e62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	693a      	ldr	r2, [r7, #16]
 8008e68:	621a      	str	r2, [r3, #32]
}
 8008e6a:	bf00      	nop
 8008e6c:	371c      	adds	r7, #28
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr

08008e76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e76:	b480      	push	{r7}
 8008e78:	b085      	sub	sp, #20
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
 8008e7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e8e:	683a      	ldr	r2, [r7, #0]
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	4313      	orrs	r3, r2
 8008e94:	f043 0307 	orr.w	r3, r3, #7
 8008e98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	68fa      	ldr	r2, [r7, #12]
 8008e9e:	609a      	str	r2, [r3, #8]
}
 8008ea0:	bf00      	nop
 8008ea2:	3714      	adds	r7, #20
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b087      	sub	sp, #28
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	607a      	str	r2, [r7, #4]
 8008eb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	689b      	ldr	r3, [r3, #8]
 8008ebe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ec6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	021a      	lsls	r2, r3, #8
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	431a      	orrs	r2, r3
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	697a      	ldr	r2, [r7, #20]
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	697a      	ldr	r2, [r7, #20]
 8008ede:	609a      	str	r2, [r3, #8]
}
 8008ee0:	bf00      	nop
 8008ee2:	371c      	adds	r7, #28
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b087      	sub	sp, #28
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	60b9      	str	r1, [r7, #8]
 8008ef6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	f003 031f 	and.w	r3, r3, #31
 8008efe:	2201      	movs	r2, #1
 8008f00:	fa02 f303 	lsl.w	r3, r2, r3
 8008f04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	6a1a      	ldr	r2, [r3, #32]
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	43db      	mvns	r3, r3
 8008f0e:	401a      	ands	r2, r3
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	6a1a      	ldr	r2, [r3, #32]
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	f003 031f 	and.w	r3, r3, #31
 8008f1e:	6879      	ldr	r1, [r7, #4]
 8008f20:	fa01 f303 	lsl.w	r3, r1, r3
 8008f24:	431a      	orrs	r2, r3
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	621a      	str	r2, [r3, #32]
}
 8008f2a:	bf00      	nop
 8008f2c:	371c      	adds	r7, #28
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr
	...

08008f38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b085      	sub	sp, #20
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d101      	bne.n	8008f50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	e04f      	b.n	8008ff0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2202      	movs	r2, #2
 8008f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a21      	ldr	r2, [pc, #132]	; (8008ffc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d108      	bne.n	8008f8c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008f80:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	68fa      	ldr	r2, [r7, #12]
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	68fa      	ldr	r2, [r7, #12]
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	68fa      	ldr	r2, [r7, #12]
 8008fa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a14      	ldr	r2, [pc, #80]	; (8008ffc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d009      	beq.n	8008fc4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fb8:	d004      	beq.n	8008fc4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a10      	ldr	r2, [pc, #64]	; (8009000 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d10c      	bne.n	8008fde <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	68ba      	ldr	r2, [r7, #8]
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	68ba      	ldr	r2, [r7, #8]
 8008fdc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3714      	adds	r7, #20
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr
 8008ffc:	40012c00 	.word	0x40012c00
 8009000:	40014000 	.word	0x40014000

08009004 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009004:	b480      	push	{r7}
 8009006:	b085      	sub	sp, #20
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800900e:	2300      	movs	r3, #0
 8009010:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009018:	2b01      	cmp	r3, #1
 800901a:	d101      	bne.n	8009020 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800901c:	2302      	movs	r3, #2
 800901e:	e060      	b.n	80090e2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	68db      	ldr	r3, [r3, #12]
 8009032:	4313      	orrs	r3, r2
 8009034:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	4313      	orrs	r3, r2
 8009042:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	4313      	orrs	r3, r2
 8009050:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4313      	orrs	r3, r2
 800905e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	691b      	ldr	r3, [r3, #16]
 800906a:	4313      	orrs	r3, r2
 800906c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	695b      	ldr	r3, [r3, #20]
 8009078:	4313      	orrs	r3, r2
 800907a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009086:	4313      	orrs	r3, r2
 8009088:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	699b      	ldr	r3, [r3, #24]
 8009094:	041b      	lsls	r3, r3, #16
 8009096:	4313      	orrs	r3, r2
 8009098:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a14      	ldr	r2, [pc, #80]	; (80090f0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d115      	bne.n	80090d0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ae:	051b      	lsls	r3, r3, #20
 80090b0:	4313      	orrs	r3, r2
 80090b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	69db      	ldr	r3, [r3, #28]
 80090be:	4313      	orrs	r3, r2
 80090c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	6a1b      	ldr	r3, [r3, #32]
 80090cc:	4313      	orrs	r3, r2
 80090ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	68fa      	ldr	r2, [r7, #12]
 80090d6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090e0:	2300      	movs	r3, #0
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3714      	adds	r7, #20
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr
 80090ee:	bf00      	nop
 80090f0:	40012c00 	.word	0x40012c00

080090f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d101      	bne.n	8009106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009102:	2301      	movs	r3, #1
 8009104:	e040      	b.n	8009188 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800910a:	2b00      	cmp	r3, #0
 800910c:	d106      	bne.n	800911c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 f873 	bl	8009202 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2224      	movs	r2, #36	; 0x24
 8009120:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f022 0201 	bic.w	r2, r2, #1
 8009130:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 f87a 	bl	800922c <UART_SetConfig>
 8009138:	4603      	mov	r3, r0
 800913a:	2b01      	cmp	r3, #1
 800913c:	d101      	bne.n	8009142 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	e022      	b.n	8009188 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009146:	2b00      	cmp	r3, #0
 8009148:	d002      	beq.n	8009150 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 fac8 	bl	80096e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	685a      	ldr	r2, [r3, #4]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800915e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	689a      	ldr	r2, [r3, #8]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800916e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f042 0201 	orr.w	r2, r2, #1
 800917e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 fb4f 	bl	8009824 <UART_CheckIdleState>
 8009186:	4603      	mov	r3, r0
}
 8009188:	4618      	mov	r0, r3
 800918a:	3708      	adds	r7, #8
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b082      	sub	sp, #8
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d101      	bne.n	80091a2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800919e:	2301      	movs	r3, #1
 80091a0:	e02b      	b.n	80091fa <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2224      	movs	r2, #36	; 0x24
 80091a6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f022 0201 	bic.w	r2, r2, #1
 80091b6:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	2200      	movs	r2, #0
 80091be:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2200      	movs	r2, #0
 80091c6:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	2200      	movs	r2, #0
 80091ce:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 f820 	bl	8009216 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2200      	movs	r2, #0
 80091e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80091f8:	2300      	movs	r3, #0
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3708      	adds	r7, #8
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}

08009202 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8009202:	b480      	push	{r7}
 8009204:	b083      	sub	sp, #12
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800920a:	bf00      	nop
 800920c:	370c      	adds	r7, #12
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr

08009216 <HAL_UART_MspDeInit>:
  * @brief DeInitialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8009216:	b480      	push	{r7}
 8009218:	b083      	sub	sp, #12
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 800921e:	bf00      	nop
 8009220:	370c      	adds	r7, #12
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr
	...

0800922c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800922c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009230:	b08a      	sub	sp, #40	; 0x28
 8009232:	af00      	add	r7, sp, #0
 8009234:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009236:	2300      	movs	r3, #0
 8009238:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	689a      	ldr	r2, [r3, #8]
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	691b      	ldr	r3, [r3, #16]
 8009244:	431a      	orrs	r2, r3
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	695b      	ldr	r3, [r3, #20]
 800924a:	431a      	orrs	r2, r3
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	69db      	ldr	r3, [r3, #28]
 8009250:	4313      	orrs	r3, r2
 8009252:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	4b9e      	ldr	r3, [pc, #632]	; (80094d4 <UART_SetConfig+0x2a8>)
 800925c:	4013      	ands	r3, r2
 800925e:	68fa      	ldr	r2, [r7, #12]
 8009260:	6812      	ldr	r2, [r2, #0]
 8009262:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009264:	430b      	orrs	r3, r1
 8009266:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	68da      	ldr	r2, [r3, #12]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	430a      	orrs	r2, r1
 800927c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	699b      	ldr	r3, [r3, #24]
 8009282:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a93      	ldr	r2, [pc, #588]	; (80094d8 <UART_SetConfig+0x2ac>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d004      	beq.n	8009298 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	6a1b      	ldr	r3, [r3, #32]
 8009292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009294:	4313      	orrs	r3, r2
 8009296:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092a8:	430a      	orrs	r2, r1
 80092aa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a8a      	ldr	r2, [pc, #552]	; (80094dc <UART_SetConfig+0x2b0>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d126      	bne.n	8009304 <UART_SetConfig+0xd8>
 80092b6:	4b8a      	ldr	r3, [pc, #552]	; (80094e0 <UART_SetConfig+0x2b4>)
 80092b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092bc:	f003 0303 	and.w	r3, r3, #3
 80092c0:	2b03      	cmp	r3, #3
 80092c2:	d81b      	bhi.n	80092fc <UART_SetConfig+0xd0>
 80092c4:	a201      	add	r2, pc, #4	; (adr r2, 80092cc <UART_SetConfig+0xa0>)
 80092c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ca:	bf00      	nop
 80092cc:	080092dd 	.word	0x080092dd
 80092d0:	080092ed 	.word	0x080092ed
 80092d4:	080092e5 	.word	0x080092e5
 80092d8:	080092f5 	.word	0x080092f5
 80092dc:	2301      	movs	r3, #1
 80092de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80092e2:	e0ab      	b.n	800943c <UART_SetConfig+0x210>
 80092e4:	2302      	movs	r3, #2
 80092e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80092ea:	e0a7      	b.n	800943c <UART_SetConfig+0x210>
 80092ec:	2304      	movs	r3, #4
 80092ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80092f2:	e0a3      	b.n	800943c <UART_SetConfig+0x210>
 80092f4:	2308      	movs	r3, #8
 80092f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80092fa:	e09f      	b.n	800943c <UART_SetConfig+0x210>
 80092fc:	2310      	movs	r3, #16
 80092fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009302:	e09b      	b.n	800943c <UART_SetConfig+0x210>
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4a76      	ldr	r2, [pc, #472]	; (80094e4 <UART_SetConfig+0x2b8>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d138      	bne.n	8009380 <UART_SetConfig+0x154>
 800930e:	4b74      	ldr	r3, [pc, #464]	; (80094e0 <UART_SetConfig+0x2b4>)
 8009310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009314:	f003 030c 	and.w	r3, r3, #12
 8009318:	2b0c      	cmp	r3, #12
 800931a:	d82d      	bhi.n	8009378 <UART_SetConfig+0x14c>
 800931c:	a201      	add	r2, pc, #4	; (adr r2, 8009324 <UART_SetConfig+0xf8>)
 800931e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009322:	bf00      	nop
 8009324:	08009359 	.word	0x08009359
 8009328:	08009379 	.word	0x08009379
 800932c:	08009379 	.word	0x08009379
 8009330:	08009379 	.word	0x08009379
 8009334:	08009369 	.word	0x08009369
 8009338:	08009379 	.word	0x08009379
 800933c:	08009379 	.word	0x08009379
 8009340:	08009379 	.word	0x08009379
 8009344:	08009361 	.word	0x08009361
 8009348:	08009379 	.word	0x08009379
 800934c:	08009379 	.word	0x08009379
 8009350:	08009379 	.word	0x08009379
 8009354:	08009371 	.word	0x08009371
 8009358:	2300      	movs	r3, #0
 800935a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800935e:	e06d      	b.n	800943c <UART_SetConfig+0x210>
 8009360:	2302      	movs	r3, #2
 8009362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009366:	e069      	b.n	800943c <UART_SetConfig+0x210>
 8009368:	2304      	movs	r3, #4
 800936a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800936e:	e065      	b.n	800943c <UART_SetConfig+0x210>
 8009370:	2308      	movs	r3, #8
 8009372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009376:	e061      	b.n	800943c <UART_SetConfig+0x210>
 8009378:	2310      	movs	r3, #16
 800937a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800937e:	e05d      	b.n	800943c <UART_SetConfig+0x210>
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a58      	ldr	r2, [pc, #352]	; (80094e8 <UART_SetConfig+0x2bc>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d125      	bne.n	80093d6 <UART_SetConfig+0x1aa>
 800938a:	4b55      	ldr	r3, [pc, #340]	; (80094e0 <UART_SetConfig+0x2b4>)
 800938c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009390:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009394:	2b30      	cmp	r3, #48	; 0x30
 8009396:	d016      	beq.n	80093c6 <UART_SetConfig+0x19a>
 8009398:	2b30      	cmp	r3, #48	; 0x30
 800939a:	d818      	bhi.n	80093ce <UART_SetConfig+0x1a2>
 800939c:	2b20      	cmp	r3, #32
 800939e:	d00a      	beq.n	80093b6 <UART_SetConfig+0x18a>
 80093a0:	2b20      	cmp	r3, #32
 80093a2:	d814      	bhi.n	80093ce <UART_SetConfig+0x1a2>
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d002      	beq.n	80093ae <UART_SetConfig+0x182>
 80093a8:	2b10      	cmp	r3, #16
 80093aa:	d008      	beq.n	80093be <UART_SetConfig+0x192>
 80093ac:	e00f      	b.n	80093ce <UART_SetConfig+0x1a2>
 80093ae:	2300      	movs	r3, #0
 80093b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80093b4:	e042      	b.n	800943c <UART_SetConfig+0x210>
 80093b6:	2302      	movs	r3, #2
 80093b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80093bc:	e03e      	b.n	800943c <UART_SetConfig+0x210>
 80093be:	2304      	movs	r3, #4
 80093c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80093c4:	e03a      	b.n	800943c <UART_SetConfig+0x210>
 80093c6:	2308      	movs	r3, #8
 80093c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80093cc:	e036      	b.n	800943c <UART_SetConfig+0x210>
 80093ce:	2310      	movs	r3, #16
 80093d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80093d4:	e032      	b.n	800943c <UART_SetConfig+0x210>
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a3f      	ldr	r2, [pc, #252]	; (80094d8 <UART_SetConfig+0x2ac>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d12a      	bne.n	8009436 <UART_SetConfig+0x20a>
 80093e0:	4b3f      	ldr	r3, [pc, #252]	; (80094e0 <UART_SetConfig+0x2b4>)
 80093e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093e6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80093ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80093ee:	d01a      	beq.n	8009426 <UART_SetConfig+0x1fa>
 80093f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80093f4:	d81b      	bhi.n	800942e <UART_SetConfig+0x202>
 80093f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093fa:	d00c      	beq.n	8009416 <UART_SetConfig+0x1ea>
 80093fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009400:	d815      	bhi.n	800942e <UART_SetConfig+0x202>
 8009402:	2b00      	cmp	r3, #0
 8009404:	d003      	beq.n	800940e <UART_SetConfig+0x1e2>
 8009406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800940a:	d008      	beq.n	800941e <UART_SetConfig+0x1f2>
 800940c:	e00f      	b.n	800942e <UART_SetConfig+0x202>
 800940e:	2300      	movs	r3, #0
 8009410:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009414:	e012      	b.n	800943c <UART_SetConfig+0x210>
 8009416:	2302      	movs	r3, #2
 8009418:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800941c:	e00e      	b.n	800943c <UART_SetConfig+0x210>
 800941e:	2304      	movs	r3, #4
 8009420:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009424:	e00a      	b.n	800943c <UART_SetConfig+0x210>
 8009426:	2308      	movs	r3, #8
 8009428:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800942c:	e006      	b.n	800943c <UART_SetConfig+0x210>
 800942e:	2310      	movs	r3, #16
 8009430:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009434:	e002      	b.n	800943c <UART_SetConfig+0x210>
 8009436:	2310      	movs	r3, #16
 8009438:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a25      	ldr	r2, [pc, #148]	; (80094d8 <UART_SetConfig+0x2ac>)
 8009442:	4293      	cmp	r3, r2
 8009444:	f040 808a 	bne.w	800955c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009448:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800944c:	2b08      	cmp	r3, #8
 800944e:	d824      	bhi.n	800949a <UART_SetConfig+0x26e>
 8009450:	a201      	add	r2, pc, #4	; (adr r2, 8009458 <UART_SetConfig+0x22c>)
 8009452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009456:	bf00      	nop
 8009458:	0800947d 	.word	0x0800947d
 800945c:	0800949b 	.word	0x0800949b
 8009460:	08009485 	.word	0x08009485
 8009464:	0800949b 	.word	0x0800949b
 8009468:	0800948b 	.word	0x0800948b
 800946c:	0800949b 	.word	0x0800949b
 8009470:	0800949b 	.word	0x0800949b
 8009474:	0800949b 	.word	0x0800949b
 8009478:	08009493 	.word	0x08009493
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800947c:	f7fd fe14 	bl	80070a8 <HAL_RCC_GetPCLK1Freq>
 8009480:	61f8      	str	r0, [r7, #28]
        break;
 8009482:	e010      	b.n	80094a6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009484:	4b19      	ldr	r3, [pc, #100]	; (80094ec <UART_SetConfig+0x2c0>)
 8009486:	61fb      	str	r3, [r7, #28]
        break;
 8009488:	e00d      	b.n	80094a6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800948a:	f7fd fd75 	bl	8006f78 <HAL_RCC_GetSysClockFreq>
 800948e:	61f8      	str	r0, [r7, #28]
        break;
 8009490:	e009      	b.n	80094a6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009496:	61fb      	str	r3, [r7, #28]
        break;
 8009498:	e005      	b.n	80094a6 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800949a:	2300      	movs	r3, #0
 800949c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800949e:	2301      	movs	r3, #1
 80094a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80094a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80094a6:	69fb      	ldr	r3, [r7, #28]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	f000 8109 	beq.w	80096c0 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	685a      	ldr	r2, [r3, #4]
 80094b2:	4613      	mov	r3, r2
 80094b4:	005b      	lsls	r3, r3, #1
 80094b6:	4413      	add	r3, r2
 80094b8:	69fa      	ldr	r2, [r7, #28]
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d305      	bcc.n	80094ca <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80094c4:	69fa      	ldr	r2, [r7, #28]
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d912      	bls.n	80094f0 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80094ca:	2301      	movs	r3, #1
 80094cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80094d0:	e0f6      	b.n	80096c0 <UART_SetConfig+0x494>
 80094d2:	bf00      	nop
 80094d4:	efff69f3 	.word	0xefff69f3
 80094d8:	40008000 	.word	0x40008000
 80094dc:	40013800 	.word	0x40013800
 80094e0:	40021000 	.word	0x40021000
 80094e4:	40004400 	.word	0x40004400
 80094e8:	40004800 	.word	0x40004800
 80094ec:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80094f0:	69fb      	ldr	r3, [r7, #28]
 80094f2:	2200      	movs	r2, #0
 80094f4:	461c      	mov	r4, r3
 80094f6:	4615      	mov	r5, r2
 80094f8:	f04f 0200 	mov.w	r2, #0
 80094fc:	f04f 0300 	mov.w	r3, #0
 8009500:	022b      	lsls	r3, r5, #8
 8009502:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009506:	0222      	lsls	r2, r4, #8
 8009508:	68f9      	ldr	r1, [r7, #12]
 800950a:	6849      	ldr	r1, [r1, #4]
 800950c:	0849      	lsrs	r1, r1, #1
 800950e:	2000      	movs	r0, #0
 8009510:	4688      	mov	r8, r1
 8009512:	4681      	mov	r9, r0
 8009514:	eb12 0a08 	adds.w	sl, r2, r8
 8009518:	eb43 0b09 	adc.w	fp, r3, r9
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	603b      	str	r3, [r7, #0]
 8009524:	607a      	str	r2, [r7, #4]
 8009526:	e9d7 2300 	ldrd	r2, r3, [r7]
 800952a:	4650      	mov	r0, sl
 800952c:	4659      	mov	r1, fp
 800952e:	f7f7 fabd 	bl	8000aac <__aeabi_uldivmod>
 8009532:	4602      	mov	r2, r0
 8009534:	460b      	mov	r3, r1
 8009536:	4613      	mov	r3, r2
 8009538:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800953a:	69bb      	ldr	r3, [r7, #24]
 800953c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009540:	d308      	bcc.n	8009554 <UART_SetConfig+0x328>
 8009542:	69bb      	ldr	r3, [r7, #24]
 8009544:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009548:	d204      	bcs.n	8009554 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	69ba      	ldr	r2, [r7, #24]
 8009550:	60da      	str	r2, [r3, #12]
 8009552:	e0b5      	b.n	80096c0 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8009554:	2301      	movs	r3, #1
 8009556:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800955a:	e0b1      	b.n	80096c0 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	69db      	ldr	r3, [r3, #28]
 8009560:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009564:	d15d      	bne.n	8009622 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8009566:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800956a:	2b08      	cmp	r3, #8
 800956c:	d827      	bhi.n	80095be <UART_SetConfig+0x392>
 800956e:	a201      	add	r2, pc, #4	; (adr r2, 8009574 <UART_SetConfig+0x348>)
 8009570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009574:	08009599 	.word	0x08009599
 8009578:	080095a1 	.word	0x080095a1
 800957c:	080095a9 	.word	0x080095a9
 8009580:	080095bf 	.word	0x080095bf
 8009584:	080095af 	.word	0x080095af
 8009588:	080095bf 	.word	0x080095bf
 800958c:	080095bf 	.word	0x080095bf
 8009590:	080095bf 	.word	0x080095bf
 8009594:	080095b7 	.word	0x080095b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009598:	f7fd fd86 	bl	80070a8 <HAL_RCC_GetPCLK1Freq>
 800959c:	61f8      	str	r0, [r7, #28]
        break;
 800959e:	e014      	b.n	80095ca <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095a0:	f7fd fd98 	bl	80070d4 <HAL_RCC_GetPCLK2Freq>
 80095a4:	61f8      	str	r0, [r7, #28]
        break;
 80095a6:	e010      	b.n	80095ca <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80095a8:	4b4c      	ldr	r3, [pc, #304]	; (80096dc <UART_SetConfig+0x4b0>)
 80095aa:	61fb      	str	r3, [r7, #28]
        break;
 80095ac:	e00d      	b.n	80095ca <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80095ae:	f7fd fce3 	bl	8006f78 <HAL_RCC_GetSysClockFreq>
 80095b2:	61f8      	str	r0, [r7, #28]
        break;
 80095b4:	e009      	b.n	80095ca <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095ba:	61fb      	str	r3, [r7, #28]
        break;
 80095bc:	e005      	b.n	80095ca <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80095be:	2300      	movs	r3, #0
 80095c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80095c2:	2301      	movs	r3, #1
 80095c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80095c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80095ca:	69fb      	ldr	r3, [r7, #28]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d077      	beq.n	80096c0 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80095d0:	69fb      	ldr	r3, [r7, #28]
 80095d2:	005a      	lsls	r2, r3, #1
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	085b      	lsrs	r3, r3, #1
 80095da:	441a      	add	r2, r3
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80095e4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095e6:	69bb      	ldr	r3, [r7, #24]
 80095e8:	2b0f      	cmp	r3, #15
 80095ea:	d916      	bls.n	800961a <UART_SetConfig+0x3ee>
 80095ec:	69bb      	ldr	r3, [r7, #24]
 80095ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095f2:	d212      	bcs.n	800961a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80095f4:	69bb      	ldr	r3, [r7, #24]
 80095f6:	b29b      	uxth	r3, r3
 80095f8:	f023 030f 	bic.w	r3, r3, #15
 80095fc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80095fe:	69bb      	ldr	r3, [r7, #24]
 8009600:	085b      	lsrs	r3, r3, #1
 8009602:	b29b      	uxth	r3, r3
 8009604:	f003 0307 	and.w	r3, r3, #7
 8009608:	b29a      	uxth	r2, r3
 800960a:	8afb      	ldrh	r3, [r7, #22]
 800960c:	4313      	orrs	r3, r2
 800960e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	8afa      	ldrh	r2, [r7, #22]
 8009616:	60da      	str	r2, [r3, #12]
 8009618:	e052      	b.n	80096c0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800961a:	2301      	movs	r3, #1
 800961c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009620:	e04e      	b.n	80096c0 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009622:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009626:	2b08      	cmp	r3, #8
 8009628:	d827      	bhi.n	800967a <UART_SetConfig+0x44e>
 800962a:	a201      	add	r2, pc, #4	; (adr r2, 8009630 <UART_SetConfig+0x404>)
 800962c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009630:	08009655 	.word	0x08009655
 8009634:	0800965d 	.word	0x0800965d
 8009638:	08009665 	.word	0x08009665
 800963c:	0800967b 	.word	0x0800967b
 8009640:	0800966b 	.word	0x0800966b
 8009644:	0800967b 	.word	0x0800967b
 8009648:	0800967b 	.word	0x0800967b
 800964c:	0800967b 	.word	0x0800967b
 8009650:	08009673 	.word	0x08009673
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009654:	f7fd fd28 	bl	80070a8 <HAL_RCC_GetPCLK1Freq>
 8009658:	61f8      	str	r0, [r7, #28]
        break;
 800965a:	e014      	b.n	8009686 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800965c:	f7fd fd3a 	bl	80070d4 <HAL_RCC_GetPCLK2Freq>
 8009660:	61f8      	str	r0, [r7, #28]
        break;
 8009662:	e010      	b.n	8009686 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009664:	4b1d      	ldr	r3, [pc, #116]	; (80096dc <UART_SetConfig+0x4b0>)
 8009666:	61fb      	str	r3, [r7, #28]
        break;
 8009668:	e00d      	b.n	8009686 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800966a:	f7fd fc85 	bl	8006f78 <HAL_RCC_GetSysClockFreq>
 800966e:	61f8      	str	r0, [r7, #28]
        break;
 8009670:	e009      	b.n	8009686 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009676:	61fb      	str	r3, [r7, #28]
        break;
 8009678:	e005      	b.n	8009686 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800967a:	2300      	movs	r3, #0
 800967c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800967e:	2301      	movs	r3, #1
 8009680:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009684:	bf00      	nop
    }

    if (pclk != 0U)
 8009686:	69fb      	ldr	r3, [r7, #28]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d019      	beq.n	80096c0 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	085a      	lsrs	r2, r3, #1
 8009692:	69fb      	ldr	r3, [r7, #28]
 8009694:	441a      	add	r2, r3
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	fbb2 f3f3 	udiv	r3, r2, r3
 800969e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096a0:	69bb      	ldr	r3, [r7, #24]
 80096a2:	2b0f      	cmp	r3, #15
 80096a4:	d909      	bls.n	80096ba <UART_SetConfig+0x48e>
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096ac:	d205      	bcs.n	80096ba <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80096ae:	69bb      	ldr	r3, [r7, #24]
 80096b0:	b29a      	uxth	r2, r3
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	60da      	str	r2, [r3, #12]
 80096b8:	e002      	b.n	80096c0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80096ba:	2301      	movs	r3, #1
 80096bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2200      	movs	r2, #0
 80096c4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2200      	movs	r2, #0
 80096ca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80096cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3728      	adds	r7, #40	; 0x28
 80096d4:	46bd      	mov	sp, r7
 80096d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80096da:	bf00      	nop
 80096dc:	00f42400 	.word	0x00f42400

080096e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b083      	sub	sp, #12
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ec:	f003 0301 	and.w	r3, r3, #1
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d00a      	beq.n	800970a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	430a      	orrs	r2, r1
 8009708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800970e:	f003 0302 	and.w	r3, r3, #2
 8009712:	2b00      	cmp	r3, #0
 8009714:	d00a      	beq.n	800972c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	430a      	orrs	r2, r1
 800972a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009730:	f003 0304 	and.w	r3, r3, #4
 8009734:	2b00      	cmp	r3, #0
 8009736:	d00a      	beq.n	800974e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	430a      	orrs	r2, r1
 800974c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009752:	f003 0308 	and.w	r3, r3, #8
 8009756:	2b00      	cmp	r3, #0
 8009758:	d00a      	beq.n	8009770 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	430a      	orrs	r2, r1
 800976e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009774:	f003 0310 	and.w	r3, r3, #16
 8009778:	2b00      	cmp	r3, #0
 800977a:	d00a      	beq.n	8009792 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	689b      	ldr	r3, [r3, #8]
 8009782:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	430a      	orrs	r2, r1
 8009790:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009796:	f003 0320 	and.w	r3, r3, #32
 800979a:	2b00      	cmp	r3, #0
 800979c:	d00a      	beq.n	80097b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	689b      	ldr	r3, [r3, #8]
 80097a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	430a      	orrs	r2, r1
 80097b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d01a      	beq.n	80097f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	430a      	orrs	r2, r1
 80097d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80097de:	d10a      	bne.n	80097f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	430a      	orrs	r2, r1
 80097f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d00a      	beq.n	8009818 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	430a      	orrs	r2, r1
 8009816:	605a      	str	r2, [r3, #4]
  }
}
 8009818:	bf00      	nop
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr

08009824 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b086      	sub	sp, #24
 8009828:	af02      	add	r7, sp, #8
 800982a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009834:	f7fb ffe6 	bl	8005804 <HAL_GetTick>
 8009838:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f003 0308 	and.w	r3, r3, #8
 8009844:	2b08      	cmp	r3, #8
 8009846:	d10e      	bne.n	8009866 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009848:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800984c:	9300      	str	r3, [sp, #0]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2200      	movs	r2, #0
 8009852:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 f82d 	bl	80098b6 <UART_WaitOnFlagUntilTimeout>
 800985c:	4603      	mov	r3, r0
 800985e:	2b00      	cmp	r3, #0
 8009860:	d001      	beq.n	8009866 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009862:	2303      	movs	r3, #3
 8009864:	e023      	b.n	80098ae <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f003 0304 	and.w	r3, r3, #4
 8009870:	2b04      	cmp	r3, #4
 8009872:	d10e      	bne.n	8009892 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009874:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009878:	9300      	str	r3, [sp, #0]
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2200      	movs	r2, #0
 800987e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 f817 	bl	80098b6 <UART_WaitOnFlagUntilTimeout>
 8009888:	4603      	mov	r3, r0
 800988a:	2b00      	cmp	r3, #0
 800988c:	d001      	beq.n	8009892 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800988e:	2303      	movs	r3, #3
 8009890:	e00d      	b.n	80098ae <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2220      	movs	r2, #32
 8009896:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2220      	movs	r2, #32
 800989c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2200      	movs	r2, #0
 80098a2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2200      	movs	r2, #0
 80098a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80098ac:	2300      	movs	r3, #0
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3710      	adds	r7, #16
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}

080098b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80098b6:	b580      	push	{r7, lr}
 80098b8:	b09c      	sub	sp, #112	; 0x70
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	60f8      	str	r0, [r7, #12]
 80098be:	60b9      	str	r1, [r7, #8]
 80098c0:	603b      	str	r3, [r7, #0]
 80098c2:	4613      	mov	r3, r2
 80098c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098c6:	e0a5      	b.n	8009a14 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80098ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098ce:	f000 80a1 	beq.w	8009a14 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098d2:	f7fb ff97 	bl	8005804 <HAL_GetTick>
 80098d6:	4602      	mov	r2, r0
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	1ad3      	subs	r3, r2, r3
 80098dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80098de:	429a      	cmp	r2, r3
 80098e0:	d302      	bcc.n	80098e8 <UART_WaitOnFlagUntilTimeout+0x32>
 80098e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d13e      	bne.n	8009966 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098f0:	e853 3f00 	ldrex	r3, [r3]
 80098f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80098f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80098fc:	667b      	str	r3, [r7, #100]	; 0x64
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	461a      	mov	r2, r3
 8009904:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009906:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009908:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800990a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800990c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800990e:	e841 2300 	strex	r3, r2, [r1]
 8009912:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009916:	2b00      	cmp	r3, #0
 8009918:	d1e6      	bne.n	80098e8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	3308      	adds	r3, #8
 8009920:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009924:	e853 3f00 	ldrex	r3, [r3]
 8009928:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800992a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800992c:	f023 0301 	bic.w	r3, r3, #1
 8009930:	663b      	str	r3, [r7, #96]	; 0x60
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	3308      	adds	r3, #8
 8009938:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800993a:	64ba      	str	r2, [r7, #72]	; 0x48
 800993c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800993e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009940:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009942:	e841 2300 	strex	r3, r2, [r1]
 8009946:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800994a:	2b00      	cmp	r3, #0
 800994c:	d1e5      	bne.n	800991a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2220      	movs	r2, #32
 8009952:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2220      	movs	r2, #32
 8009958:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2200      	movs	r2, #0
 800995e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009962:	2303      	movs	r3, #3
 8009964:	e067      	b.n	8009a36 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f003 0304 	and.w	r3, r3, #4
 8009970:	2b00      	cmp	r3, #0
 8009972:	d04f      	beq.n	8009a14 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	69db      	ldr	r3, [r3, #28]
 800997a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800997e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009982:	d147      	bne.n	8009a14 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800998c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009996:	e853 3f00 	ldrex	r3, [r3]
 800999a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800999c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80099a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	461a      	mov	r2, r3
 80099aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099ac:	637b      	str	r3, [r7, #52]	; 0x34
 80099ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80099b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80099b4:	e841 2300 	strex	r3, r2, [r1]
 80099b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80099ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d1e6      	bne.n	800998e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	3308      	adds	r3, #8
 80099c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	e853 3f00 	ldrex	r3, [r3]
 80099ce:	613b      	str	r3, [r7, #16]
   return(result);
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	f023 0301 	bic.w	r3, r3, #1
 80099d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	3308      	adds	r3, #8
 80099de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80099e0:	623a      	str	r2, [r7, #32]
 80099e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e4:	69f9      	ldr	r1, [r7, #28]
 80099e6:	6a3a      	ldr	r2, [r7, #32]
 80099e8:	e841 2300 	strex	r3, r2, [r1]
 80099ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80099ee:	69bb      	ldr	r3, [r7, #24]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d1e5      	bne.n	80099c0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2220      	movs	r2, #32
 80099f8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2220      	movs	r2, #32
 80099fe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2220      	movs	r2, #32
 8009a04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009a10:	2303      	movs	r3, #3
 8009a12:	e010      	b.n	8009a36 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	69da      	ldr	r2, [r3, #28]
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	4013      	ands	r3, r2
 8009a1e:	68ba      	ldr	r2, [r7, #8]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	bf0c      	ite	eq
 8009a24:	2301      	moveq	r3, #1
 8009a26:	2300      	movne	r3, #0
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	79fb      	ldrb	r3, [r7, #7]
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	f43f af4a 	beq.w	80098c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a34:	2300      	movs	r3, #0
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3770      	adds	r7, #112	; 0x70
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
	...

08009a40 <board_init_common_rtc_init>:
uint32_t g_button_on_count[NUM_PUSH_BUTTONS] = {0};
bool button_press_state[NUM_PUSH_BUTTONS] = {false};
extern UART_HandleTypeDef      gh_host_usart;

static void board_init_common_rtc_init(void)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	af00      	add	r7, sp, #0
    g_rtc_handle.Instance = RTC;
 8009a44:	4b10      	ldr	r3, [pc, #64]	; (8009a88 <board_init_common_rtc_init+0x48>)
 8009a46:	4a11      	ldr	r2, [pc, #68]	; (8009a8c <board_init_common_rtc_init+0x4c>)
 8009a48:	601a      	str	r2, [r3, #0]
    g_rtc_handle.Init.HourFormat = RTC_HOURFORMAT_24;
 8009a4a:	4b0f      	ldr	r3, [pc, #60]	; (8009a88 <board_init_common_rtc_init+0x48>)
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	605a      	str	r2, [r3, #4]
    g_rtc_handle.Init.AsynchPrediv = 127;
 8009a50:	4b0d      	ldr	r3, [pc, #52]	; (8009a88 <board_init_common_rtc_init+0x48>)
 8009a52:	227f      	movs	r2, #127	; 0x7f
 8009a54:	609a      	str	r2, [r3, #8]
    g_rtc_handle.Init.SynchPrediv = 255;
 8009a56:	4b0c      	ldr	r3, [pc, #48]	; (8009a88 <board_init_common_rtc_init+0x48>)
 8009a58:	22ff      	movs	r2, #255	; 0xff
 8009a5a:	60da      	str	r2, [r3, #12]
    g_rtc_handle.Init.OutPut = RTC_OUTPUT_DISABLE;
 8009a5c:	4b0a      	ldr	r3, [pc, #40]	; (8009a88 <board_init_common_rtc_init+0x48>)
 8009a5e:	2200      	movs	r2, #0
 8009a60:	611a      	str	r2, [r3, #16]
    g_rtc_handle.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8009a62:	4b09      	ldr	r3, [pc, #36]	; (8009a88 <board_init_common_rtc_init+0x48>)
 8009a64:	2200      	movs	r2, #0
 8009a66:	615a      	str	r2, [r3, #20]
    g_rtc_handle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8009a68:	4b07      	ldr	r3, [pc, #28]	; (8009a88 <board_init_common_rtc_init+0x48>)
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	619a      	str	r2, [r3, #24]
    g_rtc_handle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8009a6e:	4b06      	ldr	r3, [pc, #24]	; (8009a88 <board_init_common_rtc_init+0x48>)
 8009a70:	2200      	movs	r2, #0
 8009a72:	61da      	str	r2, [r3, #28]
    if (HAL_RTC_Init(&g_rtc_handle) != HAL_OK) Error_Handler();
 8009a74:	4804      	ldr	r0, [pc, #16]	; (8009a88 <board_init_common_rtc_init+0x48>)
 8009a76:	f7fd fead 	bl	80077d4 <HAL_RTC_Init>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d001      	beq.n	8009a84 <board_init_common_rtc_init+0x44>
 8009a80:	f000 fa4b 	bl	8009f1a <Error_Handler>
}
 8009a84:	bf00      	nop
 8009a86:	bd80      	pop	{r7, pc}
 8009a88:	20002504 	.word	0x20002504
 8009a8c:	40002800 	.word	0x40002800

08009a90 <SystemClock_Config>:

static void SystemClock_Config(void)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b0ae      	sub	sp, #184	; 0xb8
 8009a94:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009a96:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009a9a:	2244      	movs	r2, #68	; 0x44
 8009a9c:	2100      	movs	r1, #0
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f001 fc88 	bl	800b3b4 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009aa4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	601a      	str	r2, [r3, #0]
 8009aac:	605a      	str	r2, [r3, #4]
 8009aae:	609a      	str	r2, [r3, #8]
 8009ab0:	60da      	str	r2, [r3, #12]
 8009ab2:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009ab4:	1d3b      	adds	r3, r7, #4
 8009ab6:	225c      	movs	r2, #92	; 0x5c
 8009ab8:	2100      	movs	r1, #0
 8009aba:	4618      	mov	r0, r3
 8009abc:	f001 fc7a 	bl	800b3b4 <memset>

    HAL_PWR_EnableBkUpAccess();
 8009ac0:	f7fc fc62 	bl	8006388 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8009ac4:	4b25      	ldr	r3, [pc, #148]	; (8009b5c <SystemClock_Config+0xcc>)
 8009ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009aca:	4a24      	ldr	r2, [pc, #144]	; (8009b5c <SystemClock_Config+0xcc>)
 8009acc:	f023 0318 	bic.w	r3, r3, #24
 8009ad0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8009ad4:	2305      	movs	r3, #5
 8009ad6:	677b      	str	r3, [r7, #116]	; 0x74
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009ad8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009adc:	67bb      	str	r3, [r7, #120]	; 0x78
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8009ade:	2301      	movs	r3, #1
 8009ae0:	67fb      	str	r3, [r7, #124]	; 0x7c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) while(1);
 8009ae8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009aec:	4618      	mov	r0, r3
 8009aee:	f7fc fd2f 	bl	8006550 <HAL_RCC_OscConfig>
 8009af2:	4603      	mov	r3, r0
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d000      	beq.n	8009afa <SystemClock_Config+0x6a>
 8009af8:	e7fe      	b.n	8009af8 <SystemClock_Config+0x68>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009afa:	230f      	movs	r3, #15
 8009afc:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8009afe:	2302      	movs	r3, #2
 8009b00:	667b      	str	r3, [r7, #100]	; 0x64
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009b02:	2300      	movs	r3, #0
 8009b04:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009b06:	2300      	movs	r3, #0
 8009b08:	66fb      	str	r3, [r7, #108]	; 0x6c
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	673b      	str	r3, [r7, #112]	; 0x70

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) while(1);
 8009b0e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009b12:	2102      	movs	r1, #2
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7fd f92f 	bl	8006d78 <HAL_RCC_ClockConfig>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d000      	beq.n	8009b22 <SystemClock_Config+0x92>
 8009b20:	e7fe      	b.n	8009b20 <SystemClock_Config+0x90>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8009b22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009b26:	607b      	str	r3, [r7, #4]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8009b28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b2c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) Error_Handler();
 8009b2e:	1d3b      	adds	r3, r7, #4
 8009b30:	4618      	mov	r0, r3
 8009b32:	f7fd fb45 	bl	80071c0 <HAL_RCCEx_PeriphCLKConfig>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d001      	beq.n	8009b40 <SystemClock_Config+0xb0>
 8009b3c:	f000 f9ed 	bl	8009f1a <Error_Handler>
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) Error_Handler();
 8009b40:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009b44:	f7fc fcae 	bl	80064a4 <HAL_PWREx_ControlVoltageScaling>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d001      	beq.n	8009b52 <SystemClock_Config+0xc2>
 8009b4e:	f000 f9e4 	bl	8009f1a <Error_Handler>
}
 8009b52:	bf00      	nop
 8009b54:	37b8      	adds	r7, #184	; 0xb8
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
 8009b5a:	bf00      	nop
 8009b5c:	40021000 	.word	0x40021000

08009b60 <board_init_common_timer_init>:


static void board_init_common_timer_init(void)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b09e      	sub	sp, #120	; 0x78
 8009b64:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b66:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	601a      	str	r2, [r3, #0]
 8009b6e:	605a      	str	r2, [r3, #4]
 8009b70:	609a      	str	r2, [r3, #8]
 8009b72:	60da      	str	r2, [r3, #12]
 8009b74:	611a      	str	r2, [r3, #16]
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009b76:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	601a      	str	r2, [r3, #0]
 8009b7e:	605a      	str	r2, [r3, #4]
 8009b80:	609a      	str	r2, [r3, #8]
 8009b82:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009b84:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009b88:	2200      	movs	r2, #0
 8009b8a:	601a      	str	r2, [r3, #0]
 8009b8c:	605a      	str	r2, [r3, #4]
 8009b8e:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8009b90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009b94:	2200      	movs	r2, #0
 8009b96:	601a      	str	r2, [r3, #0]
 8009b98:	605a      	str	r2, [r3, #4]
 8009b9a:	609a      	str	r2, [r3, #8]
 8009b9c:	60da      	str	r2, [r3, #12]
 8009b9e:	611a      	str	r2, [r3, #16]
 8009ba0:	615a      	str	r2, [r3, #20]
 8009ba2:	619a      	str	r2, [r3, #24]
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009ba4:	463b      	mov	r3, r7
 8009ba6:	222c      	movs	r2, #44	; 0x2c
 8009ba8:	2100      	movs	r1, #0
 8009baa:	4618      	mov	r0, r3
 8009bac:	f001 fc02 	bl	800b3b4 <memset>
    g_tim1_handle.Instance = TIM1;
 8009bb0:	4b5c      	ldr	r3, [pc, #368]	; (8009d24 <board_init_common_timer_init+0x1c4>)
 8009bb2:	4a5d      	ldr	r2, [pc, #372]	; (8009d28 <board_init_common_timer_init+0x1c8>)
 8009bb4:	601a      	str	r2, [r3, #0]
    g_tim1_handle.Init.Prescaler = 0;
 8009bb6:	4b5b      	ldr	r3, [pc, #364]	; (8009d24 <board_init_common_timer_init+0x1c4>)
 8009bb8:	2200      	movs	r2, #0
 8009bba:	605a      	str	r2, [r3, #4]
    g_tim1_handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009bbc:	4b59      	ldr	r3, [pc, #356]	; (8009d24 <board_init_common_timer_init+0x1c4>)
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	609a      	str	r2, [r3, #8]
    g_tim1_handle.Init.Period = 60-1;
 8009bc2:	4b58      	ldr	r3, [pc, #352]	; (8009d24 <board_init_common_timer_init+0x1c4>)
 8009bc4:	223b      	movs	r2, #59	; 0x3b
 8009bc6:	60da      	str	r2, [r3, #12]
    g_tim1_handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009bc8:	4b56      	ldr	r3, [pc, #344]	; (8009d24 <board_init_common_timer_init+0x1c4>)
 8009bca:	2200      	movs	r2, #0
 8009bcc:	611a      	str	r2, [r3, #16]
    g_tim1_handle.Init.RepetitionCounter = 0;
 8009bce:	4b55      	ldr	r3, [pc, #340]	; (8009d24 <board_init_common_timer_init+0x1c4>)
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	615a      	str	r2, [r3, #20]
    g_tim1_handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009bd4:	4b53      	ldr	r3, [pc, #332]	; (8009d24 <board_init_common_timer_init+0x1c4>)
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&g_tim1_handle) != HAL_OK) Error_Handler();
 8009bda:	4852      	ldr	r0, [pc, #328]	; (8009d24 <board_init_common_timer_init+0x1c4>)
 8009bdc:	f7fd ffb9 	bl	8007b52 <HAL_TIM_Base_Init>
 8009be0:	4603      	mov	r3, r0
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d001      	beq.n	8009bea <board_init_common_timer_init+0x8a>
 8009be6:	f000 f998 	bl	8009f1a <Error_Handler>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009bea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009bee:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_TIM_ConfigClockSource(&g_tim1_handle, &sClockSourceConfig) != HAL_OK) Error_Handler();
 8009bf0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	484b      	ldr	r0, [pc, #300]	; (8009d24 <board_init_common_timer_init+0x1c4>)
 8009bf8:	f7fe fc4e 	bl	8008498 <HAL_TIM_ConfigClockSource>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d001      	beq.n	8009c06 <board_init_common_timer_init+0xa6>
 8009c02:	f000 f98a 	bl	8009f1a <Error_Handler>
    if (HAL_TIM_PWM_Init(&g_tim1_handle) != HAL_OK) Error_Handler();
 8009c06:	4847      	ldr	r0, [pc, #284]	; (8009d24 <board_init_common_timer_init+0x1c4>)
 8009c08:	f7fd fffa 	bl	8007c00 <HAL_TIM_PWM_Init>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d001      	beq.n	8009c16 <board_init_common_timer_init+0xb6>
 8009c12:	f000 f982 	bl	8009f1a <Error_Handler>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009c16:	2300      	movs	r3, #0
 8009c18:	64bb      	str	r3, [r7, #72]	; 0x48
    sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	64fb      	str	r3, [r7, #76]	; 0x4c
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_TIMEx_MasterConfigSynchronization(&g_tim1_handle, &sMasterConfig) != HAL_OK) Error_Handler();
 8009c22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009c26:	4619      	mov	r1, r3
 8009c28:	483e      	ldr	r0, [pc, #248]	; (8009d24 <board_init_common_timer_init+0x1c4>)
 8009c2a:	f7ff f985 	bl	8008f38 <HAL_TIMEx_MasterConfigSynchronization>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d001      	beq.n	8009c38 <board_init_common_timer_init+0xd8>
 8009c34:	f000 f971 	bl	8009f1a <Error_Handler>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009c38:	2360      	movs	r3, #96	; 0x60
 8009c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    sConfigOC.Pulse = 0;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	633b      	str	r3, [r7, #48]	; 0x30
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009c40:	2300      	movs	r3, #0
 8009c42:	637b      	str	r3, [r7, #52]	; 0x34
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009c44:	2300      	movs	r3, #0
 8009c46:	63bb      	str	r3, [r7, #56]	; 0x38
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	643b      	str	r3, [r7, #64]	; 0x40
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009c50:	2300      	movs	r3, #0
 8009c52:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 8009c54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009c58:	2200      	movs	r2, #0
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	4831      	ldr	r0, [pc, #196]	; (8009d24 <board_init_common_timer_init+0x1c4>)
 8009c5e:	f7fe fb07 	bl	8008270 <HAL_TIM_PWM_ConfigChannel>
 8009c62:	4603      	mov	r3, r0
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d001      	beq.n	8009c6c <board_init_common_timer_init+0x10c>
 8009c68:	f000 f957 	bl	8009f1a <Error_Handler>
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) Error_Handler();
 8009c6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009c70:	2204      	movs	r2, #4
 8009c72:	4619      	mov	r1, r3
 8009c74:	482b      	ldr	r0, [pc, #172]	; (8009d24 <board_init_common_timer_init+0x1c4>)
 8009c76:	f7fe fafb 	bl	8008270 <HAL_TIM_PWM_ConfigChannel>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d001      	beq.n	8009c84 <board_init_common_timer_init+0x124>
 8009c80:	f000 f94b 	bl	8009f1a <Error_Handler>
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) Error_Handler();
 8009c84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009c88:	2208      	movs	r2, #8
 8009c8a:	4619      	mov	r1, r3
 8009c8c:	4825      	ldr	r0, [pc, #148]	; (8009d24 <board_init_common_timer_init+0x1c4>)
 8009c8e:	f7fe faef 	bl	8008270 <HAL_TIM_PWM_ConfigChannel>
 8009c92:	4603      	mov	r3, r0
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d001      	beq.n	8009c9c <board_init_common_timer_init+0x13c>
 8009c98:	f000 f93f 	bl	8009f1a <Error_Handler>
    sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	603b      	str	r3, [r7, #0]
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	607b      	str	r3, [r7, #4]
    sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	60bb      	str	r3, [r7, #8]
    sBreakDeadTimeConfig.DeadTime = 0;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	60fb      	str	r3, [r7, #12]
    sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009cac:	2300      	movs	r3, #0
 8009cae:	613b      	str	r3, [r7, #16]
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009cb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009cb4:	617b      	str	r3, [r7, #20]
    sBreakDeadTimeConfig.BreakFilter = 0;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	61bb      	str	r3, [r7, #24]
    sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	61fb      	str	r3, [r7, #28]
    sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8009cbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009cc2:	623b      	str	r3, [r7, #32]
    sBreakDeadTimeConfig.Break2Filter = 0;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	627b      	str	r3, [r7, #36]	; 0x24
    sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIMEx_ConfigBreakDeadTime(&g_tim1_handle, &sBreakDeadTimeConfig) != HAL_OK) Error_Handler();
 8009ccc:	463b      	mov	r3, r7
 8009cce:	4619      	mov	r1, r3
 8009cd0:	4814      	ldr	r0, [pc, #80]	; (8009d24 <board_init_common_timer_init+0x1c4>)
 8009cd2:	f7ff f997 	bl	8009004 <HAL_TIMEx_ConfigBreakDeadTime>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d001      	beq.n	8009ce0 <board_init_common_timer_init+0x180>
 8009cdc:	f000 f91d 	bl	8009f1a <Error_Handler>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_1);
 8009ce0:	2100      	movs	r1, #0
 8009ce2:	4810      	ldr	r0, [pc, #64]	; (8009d24 <board_init_common_timer_init+0x1c4>)
 8009ce4:	f7fe f9dc 	bl	80080a0 <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_2);
 8009ce8:	2104      	movs	r1, #4
 8009cea:	480e      	ldr	r0, [pc, #56]	; (8009d24 <board_init_common_timer_init+0x1c4>)
 8009cec:	f7fe f9d8 	bl	80080a0 <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_3);
 8009cf0:	2108      	movs	r1, #8
 8009cf2:	480c      	ldr	r0, [pc, #48]	; (8009d24 <board_init_common_timer_init+0x1c4>)
 8009cf4:	f7fe f9d4 	bl	80080a0 <HAL_TIM_PWM_Stop_DMA>
    GPIO_InitStruct.Pin = PIN_TIM1_CH1|PIN_TIM1_CH2|PIN_TIM1_CH3;
 8009cf8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8009cfc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009cfe:	2302      	movs	r3, #2
 8009d00:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d02:	2300      	movs	r3, #0
 8009d04:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009d06:	2300      	movs	r3, #0
 8009d08:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d0e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009d12:	4619      	mov	r1, r3
 8009d14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009d18:	f7fc f98c 	bl	8006034 <HAL_GPIO_Init>
}
 8009d1c:	bf00      	nop
 8009d1e:	3778      	adds	r7, #120	; 0x78
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}
 8009d24:	20002528 	.word	0x20002528
 8009d28:	40012c00 	.word	0x40012c00

08009d2c <board_init_common_nvic_setup_interrupts>:


static void board_init_common_nvic_setup_interrupts(void)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	af00      	add	r7, sp, #0
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI0_IRQn);
 8009d30:	4b30      	ldr	r3, [pc, #192]	; (8009df4 <board_init_common_nvic_setup_interrupts+0xc8>)
 8009d32:	2206      	movs	r2, #6
 8009d34:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI2_IRQn);
 8009d36:	4b2f      	ldr	r3, [pc, #188]	; (8009df4 <board_init_common_nvic_setup_interrupts+0xc8>)
 8009d38:	2208      	movs	r2, #8
 8009d3a:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI9_5_IRQn);
 8009d3c:	4b2d      	ldr	r3, [pc, #180]	; (8009df4 <board_init_common_nvic_setup_interrupts+0xc8>)
 8009d3e:	2217      	movs	r2, #23
 8009d40:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI15_10_IRQn);
 8009d42:	4b2c      	ldr	r3, [pc, #176]	; (8009df4 <board_init_common_nvic_setup_interrupts+0xc8>)
 8009d44:	2228      	movs	r2, #40	; 0x28
 8009d46:	615a      	str	r2, [r3, #20]
    HAL_NVIC_SetPriority(EXTI0_IRQn, 24, 0);
 8009d48:	2200      	movs	r2, #0
 8009d4a:	2118      	movs	r1, #24
 8009d4c:	2006      	movs	r0, #6
 8009d4e:	f7fb feac 	bl	8005aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8009d52:	2006      	movs	r0, #6
 8009d54:	f7fb fec5 	bl	8005ae2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI2_IRQn, 24, 0);
 8009d58:	2200      	movs	r2, #0
 8009d5a:	2118      	movs	r1, #24
 8009d5c:	2008      	movs	r0, #8
 8009d5e:	f7fb fea4 	bl	8005aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8009d62:	2008      	movs	r0, #8
 8009d64:	f7fb febd 	bl	8005ae2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 24, 0);
 8009d68:	2200      	movs	r2, #0
 8009d6a:	2118      	movs	r1, #24
 8009d6c:	2017      	movs	r0, #23
 8009d6e:	f7fb fe9c 	bl	8005aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8009d72:	2017      	movs	r0, #23
 8009d74:	f7fb feb5 	bl	8005ae2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 24, 0);
 8009d78:	2200      	movs	r2, #0
 8009d7a:	2118      	movs	r1, #24
 8009d7c:	2028      	movs	r0, #40	; 0x28
 8009d7e:	f7fb fe94 	bl	8005aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8009d82:	2028      	movs	r0, #40	; 0x28
 8009d84:	f7fb fead 	bl	8005ae2 <HAL_NVIC_EnableIRQ>
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI0_IRQn);
 8009d88:	4b1a      	ldr	r3, [pc, #104]	; (8009df4 <board_init_common_nvic_setup_interrupts+0xc8>)
 8009d8a:	2206      	movs	r2, #6
 8009d8c:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI2_IRQn);
 8009d8e:	4b19      	ldr	r3, [pc, #100]	; (8009df4 <board_init_common_nvic_setup_interrupts+0xc8>)
 8009d90:	2208      	movs	r2, #8
 8009d92:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI9_5_IRQn);
 8009d94:	4b17      	ldr	r3, [pc, #92]	; (8009df4 <board_init_common_nvic_setup_interrupts+0xc8>)
 8009d96:	2217      	movs	r2, #23
 8009d98:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI15_10_IRQn);
 8009d9a:	4b16      	ldr	r3, [pc, #88]	; (8009df4 <board_init_common_nvic_setup_interrupts+0xc8>)
 8009d9c:	2228      	movs	r2, #40	; 0x28
 8009d9e:	615a      	str	r2, [r3, #20]
    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8009da0:	2200      	movs	r2, #0
 8009da2:	2100      	movs	r1, #0
 8009da4:	200c      	movs	r0, #12
 8009da6:	f7fb fe80 	bl	8005aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8009daa:	200c      	movs	r0, #12
 8009dac:	f7fb fe99 	bl	8005ae2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8009db0:	2200      	movs	r2, #0
 8009db2:	2100      	movs	r1, #0
 8009db4:	200d      	movs	r0, #13
 8009db6:	f7fb fe78 	bl	8005aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8009dba:	200d      	movs	r0, #13
 8009dbc:	f7fb fe91 	bl	8005ae2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	2100      	movs	r1, #0
 8009dc4:	200f      	movs	r0, #15
 8009dc6:	f7fb fe70 	bl	8005aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8009dca:	200f      	movs	r0, #15
 8009dcc:	f7fb fe89 	bl	8005ae2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	2100      	movs	r1, #0
 8009dd4:	2010      	movs	r0, #16
 8009dd6:	f7fb fe68 	bl	8005aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8009dda:	2010      	movs	r0, #16
 8009ddc:	f7fb fe81 	bl	8005ae2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8009de0:	2200      	movs	r2, #0
 8009de2:	2100      	movs	r1, #0
 8009de4:	2011      	movs	r0, #17
 8009de6:	f7fb fe60 	bl	8005aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8009dea:	2011      	movs	r0, #17
 8009dec:	f7fb fe79 	bl	8005ae2 <HAL_NVIC_EnableIRQ>
}
 8009df0:	bf00      	nop
 8009df2:	bd80      	pop	{r7, pc}
 8009df4:	40010400 	.word	0x40010400

08009df8 <board_init_common_setup_wakeups>:


static void board_init_common_setup_wakeups(void)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b086      	sub	sp, #24
 8009dfc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009dfe:	1d3b      	adds	r3, r7, #4
 8009e00:	2200      	movs	r2, #0
 8009e02:	601a      	str	r2, [r3, #0]
 8009e04:	605a      	str	r2, [r3, #4]
 8009e06:	609a      	str	r2, [r3, #8]
 8009e08:	60da      	str	r2, [r3, #12]
 8009e0a:	611a      	str	r2, [r3, #16]

    // future setup wakeups
    GPIO_InitStruct.Pin = PIN_WKUP_1|PIN_WKUP_4;
 8009e0c:	2305      	movs	r3, #5
 8009e0e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8009e10:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8009e14:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009e16:	2301      	movs	r3, #1
 8009e18:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 8009e1a:	1d3b      	adds	r3, r7, #4
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009e22:	f7fc f907 	bl	8006034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_WKUP_2|PIN_WKUP_3;
 8009e26:	f242 0320 	movw	r3, #8224	; 0x2020
 8009e2a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8009e2c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8009e30:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009e32:	2301      	movs	r3, #1
 8009e34:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 8009e36:	1d3b      	adds	r3, r7, #4
 8009e38:	4619      	mov	r1, r3
 8009e3a:	4804      	ldr	r0, [pc, #16]	; (8009e4c <board_init_common_setup_wakeups+0x54>)
 8009e3c:	f7fc f8fa 	bl	8006034 <HAL_GPIO_Init>
    board_init_common_nvic_setup_interrupts();
 8009e40:	f7ff ff74 	bl	8009d2c <board_init_common_nvic_setup_interrupts>
}
 8009e44:	bf00      	nop
 8009e46:	3718      	adds	r7, #24
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}
 8009e4c:	48000800 	.word	0x48000800

08009e50 <board_init_port_wakeup>:

static void board_init_port_wakeup(void)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b087      	sub	sp, #28
 8009e54:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009e56:	4b21      	ldr	r3, [pc, #132]	; (8009edc <board_init_port_wakeup+0x8c>)
 8009e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e5a:	4a20      	ldr	r2, [pc, #128]	; (8009edc <board_init_port_wakeup+0x8c>)
 8009e5c:	f043 0301 	orr.w	r3, r3, #1
 8009e60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009e62:	4b1e      	ldr	r3, [pc, #120]	; (8009edc <board_init_port_wakeup+0x8c>)
 8009e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e66:	f003 0301 	and.w	r3, r3, #1
 8009e6a:	617b      	str	r3, [r7, #20]
 8009e6c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009e6e:	4b1b      	ldr	r3, [pc, #108]	; (8009edc <board_init_port_wakeup+0x8c>)
 8009e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e72:	4a1a      	ldr	r2, [pc, #104]	; (8009edc <board_init_port_wakeup+0x8c>)
 8009e74:	f043 0302 	orr.w	r3, r3, #2
 8009e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009e7a:	4b18      	ldr	r3, [pc, #96]	; (8009edc <board_init_port_wakeup+0x8c>)
 8009e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e7e:	f003 0302 	and.w	r3, r3, #2
 8009e82:	613b      	str	r3, [r7, #16]
 8009e84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009e86:	4b15      	ldr	r3, [pc, #84]	; (8009edc <board_init_port_wakeup+0x8c>)
 8009e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e8a:	4a14      	ldr	r2, [pc, #80]	; (8009edc <board_init_port_wakeup+0x8c>)
 8009e8c:	f043 0304 	orr.w	r3, r3, #4
 8009e90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009e92:	4b12      	ldr	r3, [pc, #72]	; (8009edc <board_init_port_wakeup+0x8c>)
 8009e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e96:	f003 0304 	and.w	r3, r3, #4
 8009e9a:	60fb      	str	r3, [r7, #12]
 8009e9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8009e9e:	4b0f      	ldr	r3, [pc, #60]	; (8009edc <board_init_port_wakeup+0x8c>)
 8009ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ea2:	4a0e      	ldr	r2, [pc, #56]	; (8009edc <board_init_port_wakeup+0x8c>)
 8009ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ea8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009eaa:	4b0c      	ldr	r3, [pc, #48]	; (8009edc <board_init_port_wakeup+0x8c>)
 8009eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009eb2:	60bb      	str	r3, [r7, #8]
 8009eb4:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_DMA1_CLK_ENABLE();
 8009eb6:	4b09      	ldr	r3, [pc, #36]	; (8009edc <board_init_port_wakeup+0x8c>)
 8009eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009eba:	4a08      	ldr	r2, [pc, #32]	; (8009edc <board_init_port_wakeup+0x8c>)
 8009ebc:	f043 0301 	orr.w	r3, r3, #1
 8009ec0:	6493      	str	r3, [r2, #72]	; 0x48
 8009ec2:	4b06      	ldr	r3, [pc, #24]	; (8009edc <board_init_port_wakeup+0x8c>)
 8009ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ec6:	f003 0301 	and.w	r3, r3, #1
 8009eca:	607b      	str	r3, [r7, #4]
 8009ecc:	687b      	ldr	r3, [r7, #4]
}
 8009ece:	bf00      	nop
 8009ed0:	371c      	adds	r7, #28
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr
 8009eda:	bf00      	nop
 8009edc:	40021000 	.word	0x40021000

08009ee0 <board_init_common_board_init>:


void board_init_common_board_init(void)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	af00      	add	r7, sp, #0
    srand(time(0));
 8009ee4:	2000      	movs	r0, #0
 8009ee6:	f001 fa6d 	bl	800b3c4 <time>
 8009eea:	4602      	mov	r2, r0
 8009eec:	460b      	mov	r3, r1
 8009eee:	4613      	mov	r3, r2
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f001 f931 	bl	800b158 <srand>
    HAL_Init();
 8009ef6:	f7fb fc31 	bl	800575c <HAL_Init>
    SystemClock_Config();
 8009efa:	f7ff fdc9 	bl	8009a90 <SystemClock_Config>

    board_init_port_wakeup();
 8009efe:	f7ff ffa7 	bl	8009e50 <board_init_port_wakeup>
    board_init_common_setup_wakeups();
 8009f02:	f7ff ff79 	bl	8009df8 <board_init_common_setup_wakeups>
    board_init_specific();
 8009f06:	f000 fe57 	bl	800abb8 <board_init_specific>

    board_init_common_timer_init();
 8009f0a:	f7ff fe29 	bl	8009b60 <board_init_common_timer_init>

    ws2812b_init();
 8009f0e:	f7f7 ffa7 	bl	8001e60 <ws2812b_init>

    board_init_common_rtc_init();
 8009f12:	f7ff fd95 	bl	8009a40 <board_init_common_rtc_init>
}
 8009f16:	bf00      	nop
 8009f18:	bd80      	pop	{r7, pc}

08009f1a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009f1a:	b480      	push	{r7}
 8009f1c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8009f1e:	b672      	cpsid	i
}
 8009f20:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009f22:	e7fe      	b.n	8009f22 <Error_Handler+0x8>

08009f24 <spi_config_hal_setup>:
}



void spi_config_hal_setup(void)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b088      	sub	sp, #32
 8009f28:	af00      	add	r7, sp, #0
    //RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
    GPIO_InitTypeDef  GPIO_InitStruct;

    for (spi_config_bus_e bus = SPI_CONFIG_BUS_FIRST; bus < NUM_SPI_CONFIG_BUSES; bus++)
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	77fb      	strb	r3, [r7, #31]
 8009f2e:	e0c3      	b.n	800a0b8 <spi_config_hal_setup+0x194>
    {
    	if (g_spi_num_chips_per_bus[bus])
 8009f30:	7ffb      	ldrb	r3, [r7, #31]
 8009f32:	4a66      	ldr	r2, [pc, #408]	; (800a0cc <spi_config_hal_setup+0x1a8>)
 8009f34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	f000 80ba 	beq.w	800a0b2 <spi_config_hal_setup+0x18e>
    	{
    	    GPIO_InitStruct.Pin       = g_spi_config[bus].pin.mosi;
 8009f3e:	7ffa      	ldrb	r2, [r7, #31]
 8009f40:	4963      	ldr	r1, [pc, #396]	; (800a0d0 <spi_config_hal_setup+0x1ac>)
 8009f42:	4613      	mov	r3, r2
 8009f44:	009b      	lsls	r3, r3, #2
 8009f46:	4413      	add	r3, r2
 8009f48:	00db      	lsls	r3, r3, #3
 8009f4a:	440b      	add	r3, r1
 8009f4c:	881b      	ldrh	r3, [r3, #0]
 8009f4e:	60bb      	str	r3, [r7, #8]
    	    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8009f50:	2302      	movs	r3, #2
 8009f52:	60fb      	str	r3, [r7, #12]
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8009f54:	2300      	movs	r3, #0
 8009f56:	613b      	str	r3, [r7, #16]
    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	617b      	str	r3, [r7, #20]
    	    GPIO_InitStruct.Alternate = g_spi_config[bus].pin.mosi_alt_func;
 8009f5c:	7ffa      	ldrb	r2, [r7, #31]
 8009f5e:	495c      	ldr	r1, [pc, #368]	; (800a0d0 <spi_config_hal_setup+0x1ac>)
 8009f60:	4613      	mov	r3, r2
 8009f62:	009b      	lsls	r3, r3, #2
 8009f64:	4413      	add	r3, r2
 8009f66:	00db      	lsls	r3, r3, #3
 8009f68:	440b      	add	r3, r1
 8009f6a:	3308      	adds	r3, #8
 8009f6c:	781b      	ldrb	r3, [r3, #0]
 8009f6e:	61bb      	str	r3, [r7, #24]
    	    HAL_GPIO_Init(g_spi_config[bus].pin.mosi_port, &GPIO_InitStruct);
 8009f70:	7ffa      	ldrb	r2, [r7, #31]
 8009f72:	4957      	ldr	r1, [pc, #348]	; (800a0d0 <spi_config_hal_setup+0x1ac>)
 8009f74:	4613      	mov	r3, r2
 8009f76:	009b      	lsls	r3, r3, #2
 8009f78:	4413      	add	r3, r2
 8009f7a:	00db      	lsls	r3, r3, #3
 8009f7c:	440b      	add	r3, r1
 8009f7e:	3304      	adds	r3, #4
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f107 0208 	add.w	r2, r7, #8
 8009f86:	4611      	mov	r1, r2
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f7fc f853 	bl	8006034 <HAL_GPIO_Init>

    	    GPIO_InitStruct.Pin       = g_spi_config[bus].pin.miso;
 8009f8e:	7ffa      	ldrb	r2, [r7, #31]
 8009f90:	494f      	ldr	r1, [pc, #316]	; (800a0d0 <spi_config_hal_setup+0x1ac>)
 8009f92:	4613      	mov	r3, r2
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	4413      	add	r3, r2
 8009f98:	00db      	lsls	r3, r3, #3
 8009f9a:	440b      	add	r3, r1
 8009f9c:	330a      	adds	r3, #10
 8009f9e:	881b      	ldrh	r3, [r3, #0]
 8009fa0:	60bb      	str	r3, [r7, #8]
    	    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8009fa2:	2302      	movs	r3, #2
 8009fa4:	60fb      	str	r3, [r7, #12]
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	613b      	str	r3, [r7, #16]
    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 8009faa:	2300      	movs	r3, #0
 8009fac:	617b      	str	r3, [r7, #20]
    	    GPIO_InitStruct.Alternate = g_spi_config[bus].pin.miso_alt_func;
 8009fae:	7ffa      	ldrb	r2, [r7, #31]
 8009fb0:	4947      	ldr	r1, [pc, #284]	; (800a0d0 <spi_config_hal_setup+0x1ac>)
 8009fb2:	4613      	mov	r3, r2
 8009fb4:	009b      	lsls	r3, r3, #2
 8009fb6:	4413      	add	r3, r2
 8009fb8:	00db      	lsls	r3, r3, #3
 8009fba:	440b      	add	r3, r1
 8009fbc:	3310      	adds	r3, #16
 8009fbe:	781b      	ldrb	r3, [r3, #0]
 8009fc0:	61bb      	str	r3, [r7, #24]
    	    HAL_GPIO_Init(g_spi_config[bus].pin.miso_port, &GPIO_InitStruct);
 8009fc2:	7ffa      	ldrb	r2, [r7, #31]
 8009fc4:	4942      	ldr	r1, [pc, #264]	; (800a0d0 <spi_config_hal_setup+0x1ac>)
 8009fc6:	4613      	mov	r3, r2
 8009fc8:	009b      	lsls	r3, r3, #2
 8009fca:	4413      	add	r3, r2
 8009fcc:	00db      	lsls	r3, r3, #3
 8009fce:	440b      	add	r3, r1
 8009fd0:	330c      	adds	r3, #12
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f107 0208 	add.w	r2, r7, #8
 8009fd8:	4611      	mov	r1, r2
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f7fc f82a 	bl	8006034 <HAL_GPIO_Init>

    	    GPIO_InitStruct.Pin       = g_spi_config[bus].pin.sck;
 8009fe0:	7ffa      	ldrb	r2, [r7, #31]
 8009fe2:	493b      	ldr	r1, [pc, #236]	; (800a0d0 <spi_config_hal_setup+0x1ac>)
 8009fe4:	4613      	mov	r3, r2
 8009fe6:	009b      	lsls	r3, r3, #2
 8009fe8:	4413      	add	r3, r2
 8009fea:	00db      	lsls	r3, r3, #3
 8009fec:	440b      	add	r3, r1
 8009fee:	3312      	adds	r3, #18
 8009ff0:	881b      	ldrh	r3, [r3, #0]
 8009ff2:	60bb      	str	r3, [r7, #8]
    	    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8009ff4:	2302      	movs	r3, #2
 8009ff6:	60fb      	str	r3, [r7, #12]
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	613b      	str	r3, [r7, #16]
    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	617b      	str	r3, [r7, #20]
    	    GPIO_InitStruct.Alternate = g_spi_config[bus].pin.sck_alt_func;
 800a000:	7ffa      	ldrb	r2, [r7, #31]
 800a002:	4933      	ldr	r1, [pc, #204]	; (800a0d0 <spi_config_hal_setup+0x1ac>)
 800a004:	4613      	mov	r3, r2
 800a006:	009b      	lsls	r3, r3, #2
 800a008:	4413      	add	r3, r2
 800a00a:	00db      	lsls	r3, r3, #3
 800a00c:	440b      	add	r3, r1
 800a00e:	3318      	adds	r3, #24
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	61bb      	str	r3, [r7, #24]
    	    HAL_GPIO_Init(g_spi_config[bus].pin.sck_port, &GPIO_InitStruct);
 800a014:	7ffa      	ldrb	r2, [r7, #31]
 800a016:	492e      	ldr	r1, [pc, #184]	; (800a0d0 <spi_config_hal_setup+0x1ac>)
 800a018:	4613      	mov	r3, r2
 800a01a:	009b      	lsls	r3, r3, #2
 800a01c:	4413      	add	r3, r2
 800a01e:	00db      	lsls	r3, r3, #3
 800a020:	440b      	add	r3, r1
 800a022:	3314      	adds	r3, #20
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f107 0208 	add.w	r2, r7, #8
 800a02a:	4611      	mov	r1, r2
 800a02c:	4618      	mov	r0, r3
 800a02e:	f7fc f801 	bl	8006034 <HAL_GPIO_Init>

    	    GPIO_InitStruct.Pin       = g_spi_config[bus].pin.csn;
 800a032:	7ffa      	ldrb	r2, [r7, #31]
 800a034:	4926      	ldr	r1, [pc, #152]	; (800a0d0 <spi_config_hal_setup+0x1ac>)
 800a036:	4613      	mov	r3, r2
 800a038:	009b      	lsls	r3, r3, #2
 800a03a:	4413      	add	r3, r2
 800a03c:	00db      	lsls	r3, r3, #3
 800a03e:	440b      	add	r3, r1
 800a040:	331a      	adds	r3, #26
 800a042:	881b      	ldrh	r3, [r3, #0]
 800a044:	60bb      	str	r3, [r7, #8]
    	    GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_PP;
 800a046:	2301      	movs	r3, #1
 800a048:	60fb      	str	r3, [r7, #12]
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800a04a:	2300      	movs	r3, #0
 800a04c:	613b      	str	r3, [r7, #16]
    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 800a04e:	2300      	movs	r3, #0
 800a050:	617b      	str	r3, [r7, #20]
    	    HAL_GPIO_Init(g_spi_config[bus].pin.csn_port, &GPIO_InitStruct);
 800a052:	7ffa      	ldrb	r2, [r7, #31]
 800a054:	491e      	ldr	r1, [pc, #120]	; (800a0d0 <spi_config_hal_setup+0x1ac>)
 800a056:	4613      	mov	r3, r2
 800a058:	009b      	lsls	r3, r3, #2
 800a05a:	4413      	add	r3, r2
 800a05c:	00db      	lsls	r3, r3, #3
 800a05e:	440b      	add	r3, r1
 800a060:	331c      	adds	r3, #28
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f107 0208 	add.w	r2, r7, #8
 800a068:	4611      	mov	r1, r2
 800a06a:	4618      	mov	r0, r3
 800a06c:	f7fb ffe2 	bl	8006034 <HAL_GPIO_Init>

        	switch (bus)
 800a070:	7ffb      	ldrb	r3, [r7, #31]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d10c      	bne.n	800a090 <spi_config_hal_setup+0x16c>
        	{
        		case SPI_CONFIG_BUS_WIFI:
        		    __HAL_RCC_SPI1_CLK_ENABLE();
 800a076:	4b17      	ldr	r3, [pc, #92]	; (800a0d4 <spi_config_hal_setup+0x1b0>)
 800a078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a07a:	4a16      	ldr	r2, [pc, #88]	; (800a0d4 <spi_config_hal_setup+0x1b0>)
 800a07c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a080:	6613      	str	r3, [r2, #96]	; 0x60
 800a082:	4b14      	ldr	r3, [pc, #80]	; (800a0d4 <spi_config_hal_setup+0x1b0>)
 800a084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a086:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a08a:	607b      	str	r3, [r7, #4]
 800a08c:	687b      	ldr	r3, [r7, #4]
        		break;
 800a08e:	e000      	b.n	800a092 <spi_config_hal_setup+0x16e>
        		default:
				break;
 800a090:	bf00      	nop
        	}
    	    if(HAL_SPI_Init(g_spi_config[bus].handle) != HAL_OK)
 800a092:	7ffa      	ldrb	r2, [r7, #31]
 800a094:	490e      	ldr	r1, [pc, #56]	; (800a0d0 <spi_config_hal_setup+0x1ac>)
 800a096:	4613      	mov	r3, r2
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	4413      	add	r3, r2
 800a09c:	00db      	lsls	r3, r3, #3
 800a09e:	440b      	add	r3, r1
 800a0a0:	3324      	adds	r3, #36	; 0x24
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7fd fca7 	bl	80079f8 <HAL_SPI_Init>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d000      	beq.n	800a0b2 <spi_config_hal_setup+0x18e>
    	    {
    	        /* Initialization Error */
    	        while(1);
 800a0b0:	e7fe      	b.n	800a0b0 <spi_config_hal_setup+0x18c>
    for (spi_config_bus_e bus = SPI_CONFIG_BUS_FIRST; bus < NUM_SPI_CONFIG_BUSES; bus++)
 800a0b2:	7ffb      	ldrb	r3, [r7, #31]
 800a0b4:	3301      	adds	r3, #1
 800a0b6:	77fb      	strb	r3, [r7, #31]
 800a0b8:	7ffb      	ldrb	r3, [r7, #31]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	f43f af38 	beq.w	8009f30 <spi_config_hal_setup+0xc>
    }
//    for (spi_access_chip_id_e chip_id = SPI_ACCESS_CHIP_ID_FIRST; chip_id < NUM_SPI_ACCESS_CHIP_IDS; chip_id++)
//    {
//    	g_spi_chip_id_handle[chip_id] = spi_config_bus_lookup_from_chip_id(chip_id);
//    }
}
 800a0c0:	bf00      	nop
 800a0c2:	bf00      	nop
 800a0c4:	3720      	adds	r7, #32
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
 800a0ca:	bf00      	nop
 800a0cc:	200000d4 	.word	0x200000d4
 800a0d0:	0800c198 	.word	0x0800c198
 800a0d4:	40021000 	.word	0x40021000

0800a0d8 <uart_config_hal_setup>:
extern const uart_access_id_e* g_uart_chip_bus_lookup[NUM_UART_CONFIG_BUSES];
extern uint16_t g_uart_num_chips_per_bus[NUM_UART_CONFIG_BUSES];


void uart_config_hal_setup(void)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b0a0      	sub	sp, #128	; 0x80
 800a0dc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStruct;

    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a0de:	f107 030c 	add.w	r3, r7, #12
 800a0e2:	225c      	movs	r2, #92	; 0x5c
 800a0e4:	2100      	movs	r1, #0
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f001 f964 	bl	800b3b4 <memset>

    for (uart_config_bus_e bus = UART_CONFIG_BUS_FIRST; bus < NUM_UART_CONFIG_BUSES; bus++)
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800a0f2:	e0d3      	b.n	800a29c <uart_config_hal_setup+0x1c4>
    {
    	if (g_uart_num_chips_per_bus[bus])
 800a0f4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a0f8:	4a6d      	ldr	r2, [pc, #436]	; (800a2b0 <uart_config_hal_setup+0x1d8>)
 800a0fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	f000 80c7 	beq.w	800a292 <uart_config_hal_setup+0x1ba>
    	{
    	    GPIO_InitStruct.Pin       = g_uart_config[bus].pin.rx;
 800a104:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800a108:	496a      	ldr	r1, [pc, #424]	; (800a2b4 <uart_config_hal_setup+0x1dc>)
 800a10a:	4613      	mov	r3, r2
 800a10c:	005b      	lsls	r3, r3, #1
 800a10e:	4413      	add	r3, r2
 800a110:	00db      	lsls	r3, r3, #3
 800a112:	440b      	add	r3, r1
 800a114:	881b      	ldrh	r3, [r3, #0]
 800a116:	66bb      	str	r3, [r7, #104]	; 0x68
    	    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800a118:	2302      	movs	r3, #2
 800a11a:	66fb      	str	r3, [r7, #108]	; 0x6c
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800a11c:	2300      	movs	r3, #0
 800a11e:	673b      	str	r3, [r7, #112]	; 0x70
    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 800a120:	2300      	movs	r3, #0
 800a122:	677b      	str	r3, [r7, #116]	; 0x74
    	    GPIO_InitStruct.Alternate = g_uart_config[bus].pin.rx_alt_func;
 800a124:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800a128:	4962      	ldr	r1, [pc, #392]	; (800a2b4 <uart_config_hal_setup+0x1dc>)
 800a12a:	4613      	mov	r3, r2
 800a12c:	005b      	lsls	r3, r3, #1
 800a12e:	4413      	add	r3, r2
 800a130:	00db      	lsls	r3, r3, #3
 800a132:	440b      	add	r3, r1
 800a134:	3308      	adds	r3, #8
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	67bb      	str	r3, [r7, #120]	; 0x78
    	    HAL_GPIO_Init(g_uart_config[bus].pin.rx_port, &GPIO_InitStruct);
 800a13a:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800a13e:	495d      	ldr	r1, [pc, #372]	; (800a2b4 <uart_config_hal_setup+0x1dc>)
 800a140:	4613      	mov	r3, r2
 800a142:	005b      	lsls	r3, r3, #1
 800a144:	4413      	add	r3, r2
 800a146:	00db      	lsls	r3, r3, #3
 800a148:	440b      	add	r3, r1
 800a14a:	3304      	adds	r3, #4
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800a152:	4611      	mov	r1, r2
 800a154:	4618      	mov	r0, r3
 800a156:	f7fb ff6d 	bl	8006034 <HAL_GPIO_Init>

    	    GPIO_InitStruct.Pin       = g_uart_config[bus].pin.tx;
 800a15a:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800a15e:	4955      	ldr	r1, [pc, #340]	; (800a2b4 <uart_config_hal_setup+0x1dc>)
 800a160:	4613      	mov	r3, r2
 800a162:	005b      	lsls	r3, r3, #1
 800a164:	4413      	add	r3, r2
 800a166:	00db      	lsls	r3, r3, #3
 800a168:	440b      	add	r3, r1
 800a16a:	330a      	adds	r3, #10
 800a16c:	881b      	ldrh	r3, [r3, #0]
 800a16e:	66bb      	str	r3, [r7, #104]	; 0x68
    	    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800a170:	2302      	movs	r3, #2
 800a172:	66fb      	str	r3, [r7, #108]	; 0x6c
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800a174:	2300      	movs	r3, #0
 800a176:	673b      	str	r3, [r7, #112]	; 0x70
    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 800a178:	2300      	movs	r3, #0
 800a17a:	677b      	str	r3, [r7, #116]	; 0x74
    	    GPIO_InitStruct.Alternate = g_uart_config[bus].pin.tx_alt_func;
 800a17c:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800a180:	494c      	ldr	r1, [pc, #304]	; (800a2b4 <uart_config_hal_setup+0x1dc>)
 800a182:	4613      	mov	r3, r2
 800a184:	005b      	lsls	r3, r3, #1
 800a186:	4413      	add	r3, r2
 800a188:	00db      	lsls	r3, r3, #3
 800a18a:	440b      	add	r3, r1
 800a18c:	3310      	adds	r3, #16
 800a18e:	781b      	ldrb	r3, [r3, #0]
 800a190:	67bb      	str	r3, [r7, #120]	; 0x78
    	    HAL_GPIO_Init(g_uart_config[bus].pin.tx_port, &GPIO_InitStruct);
 800a192:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800a196:	4947      	ldr	r1, [pc, #284]	; (800a2b4 <uart_config_hal_setup+0x1dc>)
 800a198:	4613      	mov	r3, r2
 800a19a:	005b      	lsls	r3, r3, #1
 800a19c:	4413      	add	r3, r2
 800a19e:	00db      	lsls	r3, r3, #3
 800a1a0:	440b      	add	r3, r1
 800a1a2:	330c      	adds	r3, #12
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800a1aa:	4611      	mov	r1, r2
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f7fb ff41 	bl	8006034 <HAL_GPIO_Init>

    	    switch (bus)
 800a1b2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d002      	beq.n	800a1c0 <uart_config_hal_setup+0xe8>
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	d01b      	beq.n	800a1f6 <uart_config_hal_setup+0x11e>
    	    	       //Error_Handler();
    	    	     }
    	    	    __HAL_RCC_USART1_CLK_ENABLE();
				break;
    	    	default:
    	    	break;
 800a1be:	e034      	b.n	800a22a <uart_config_hal_setup+0x152>
    	    	    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800a1c0:	2320      	movs	r3, #32
 800a1c2:	60fb      	str	r3, [r7, #12]
    	    	    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_LSE;
 800a1c4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a1c8:	63bb      	str	r3, [r7, #56]	; 0x38
    	    	    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a1ca:	f107 030c 	add.w	r3, r7, #12
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f7fc fff6 	bl	80071c0 <HAL_RCCEx_PeriphCLKConfig>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d000      	beq.n	800a1dc <uart_config_hal_setup+0x104>
    	    	         while(1);
 800a1da:	e7fe      	b.n	800a1da <uart_config_hal_setup+0x102>
    	    	    __HAL_RCC_LPUART1_CLK_ENABLE();
 800a1dc:	4b36      	ldr	r3, [pc, #216]	; (800a2b8 <uart_config_hal_setup+0x1e0>)
 800a1de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1e0:	4a35      	ldr	r2, [pc, #212]	; (800a2b8 <uart_config_hal_setup+0x1e0>)
 800a1e2:	f043 0301 	orr.w	r3, r3, #1
 800a1e6:	65d3      	str	r3, [r2, #92]	; 0x5c
 800a1e8:	4b33      	ldr	r3, [pc, #204]	; (800a2b8 <uart_config_hal_setup+0x1e0>)
 800a1ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1ec:	f003 0301 	and.w	r3, r3, #1
 800a1f0:	60bb      	str	r3, [r7, #8]
 800a1f2:	68bb      	ldr	r3, [r7, #8]
    	    	break;
 800a1f4:	e019      	b.n	800a22a <uart_config_hal_setup+0x152>
    	    	    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800a1f6:	2320      	movs	r3, #32
 800a1f8:	60fb      	str	r3, [r7, #12]
    	    	    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_LSE;
 800a1fa:	2303      	movs	r3, #3
 800a1fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    	    	    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a1fe:	f107 030c 	add.w	r3, r7, #12
 800a202:	4618      	mov	r0, r3
 800a204:	f7fc ffdc 	bl	80071c0 <HAL_RCCEx_PeriphCLKConfig>
 800a208:	4603      	mov	r3, r0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d000      	beq.n	800a210 <uart_config_hal_setup+0x138>
    	    	         while(1);
 800a20e:	e7fe      	b.n	800a20e <uart_config_hal_setup+0x136>
    	    	    __HAL_RCC_USART1_CLK_ENABLE();
 800a210:	4b29      	ldr	r3, [pc, #164]	; (800a2b8 <uart_config_hal_setup+0x1e0>)
 800a212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a214:	4a28      	ldr	r2, [pc, #160]	; (800a2b8 <uart_config_hal_setup+0x1e0>)
 800a216:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a21a:	6613      	str	r3, [r2, #96]	; 0x60
 800a21c:	4b26      	ldr	r3, [pc, #152]	; (800a2b8 <uart_config_hal_setup+0x1e0>)
 800a21e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a220:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a224:	607b      	str	r3, [r7, #4]
 800a226:	687b      	ldr	r3, [r7, #4]
				break;
 800a228:	bf00      	nop
    	    }

    	    HAL_NVIC_SetPriority(g_uart_config[bus].irqn, 0, 1);
 800a22a:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800a22e:	4921      	ldr	r1, [pc, #132]	; (800a2b4 <uart_config_hal_setup+0x1dc>)
 800a230:	4613      	mov	r3, r2
 800a232:	005b      	lsls	r3, r3, #1
 800a234:	4413      	add	r3, r2
 800a236:	00db      	lsls	r3, r3, #3
 800a238:	440b      	add	r3, r1
 800a23a:	3314      	adds	r3, #20
 800a23c:	f993 3000 	ldrsb.w	r3, [r3]
 800a240:	2201      	movs	r2, #1
 800a242:	2100      	movs	r1, #0
 800a244:	4618      	mov	r0, r3
 800a246:	f7fb fc30 	bl	8005aaa <HAL_NVIC_SetPriority>
    	    HAL_NVIC_EnableIRQ(g_uart_config[bus].irqn);
 800a24a:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800a24e:	4919      	ldr	r1, [pc, #100]	; (800a2b4 <uart_config_hal_setup+0x1dc>)
 800a250:	4613      	mov	r3, r2
 800a252:	005b      	lsls	r3, r3, #1
 800a254:	4413      	add	r3, r2
 800a256:	00db      	lsls	r3, r3, #3
 800a258:	440b      	add	r3, r1
 800a25a:	3314      	adds	r3, #20
 800a25c:	f993 3000 	ldrsb.w	r3, [r3]
 800a260:	4618      	mov	r0, r3
 800a262:	f7fb fc3e 	bl	8005ae2 <HAL_NVIC_EnableIRQ>

    	    if(HAL_UART_DeInit(&g_uart_handle_config[bus]) != HAL_OK)
 800a266:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800a26a:	4613      	mov	r3, r2
 800a26c:	015b      	lsls	r3, r3, #5
 800a26e:	4413      	add	r3, r2
 800a270:	009b      	lsls	r3, r3, #2
 800a272:	4a12      	ldr	r2, [pc, #72]	; (800a2bc <uart_config_hal_setup+0x1e4>)
 800a274:	4413      	add	r3, r2
 800a276:	4618      	mov	r0, r3
 800a278:	f7fe ff8a 	bl	8009190 <HAL_UART_DeInit>
    	    {
    	        //Error_Handler();
    	    }
    	    if(HAL_UART_Init(&g_uart_handle_config[bus]) != HAL_OK)
 800a27c:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800a280:	4613      	mov	r3, r2
 800a282:	015b      	lsls	r3, r3, #5
 800a284:	4413      	add	r3, r2
 800a286:	009b      	lsls	r3, r3, #2
 800a288:	4a0c      	ldr	r2, [pc, #48]	; (800a2bc <uart_config_hal_setup+0x1e4>)
 800a28a:	4413      	add	r3, r2
 800a28c:	4618      	mov	r0, r3
 800a28e:	f7fe ff31 	bl	80090f4 <HAL_UART_Init>
    for (uart_config_bus_e bus = UART_CONFIG_BUS_FIRST; bus < NUM_UART_CONFIG_BUSES; bus++)
 800a292:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a296:	3301      	adds	r3, #1
 800a298:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800a29c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	f67f af27 	bls.w	800a0f4 <uart_config_hal_setup+0x1c>
    	        //Error_Handler();
    	    }
    	}
    }

}
 800a2a6:	bf00      	nop
 800a2a8:	bf00      	nop
 800a2aa:	3780      	adds	r7, #128	; 0x80
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}
 800a2b0:	200001e0 	.word	0x200001e0
 800a2b4:	0800c1c0 	.word	0x0800c1c0
 800a2b8:	40021000 	.word	0x40021000
 800a2bc:	200000d8 	.word	0x200000d8

0800a2c0 <HAL_Set_DMA_Callbacks>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);


// Function below added by SRW
static void HAL_Set_DMA_Callbacks(void)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	af00      	add	r7, sp, #0
    HAL_DMA_RegisterCallback(&hdma_tim1_ch1, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 800a2c4:	4a0d      	ldr	r2, [pc, #52]	; (800a2fc <HAL_Set_DMA_Callbacks+0x3c>)
 800a2c6:	2100      	movs	r1, #0
 800a2c8:	480d      	ldr	r0, [pc, #52]	; (800a300 <HAL_Set_DMA_Callbacks+0x40>)
 800a2ca:	f7fb fe3b 	bl	8005f44 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim1_ch2, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 800a2ce:	4a0b      	ldr	r2, [pc, #44]	; (800a2fc <HAL_Set_DMA_Callbacks+0x3c>)
 800a2d0:	2100      	movs	r1, #0
 800a2d2:	480c      	ldr	r0, [pc, #48]	; (800a304 <HAL_Set_DMA_Callbacks+0x44>)
 800a2d4:	f7fb fe36 	bl	8005f44 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim1_ch3, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 800a2d8:	4a08      	ldr	r2, [pc, #32]	; (800a2fc <HAL_Set_DMA_Callbacks+0x3c>)
 800a2da:	2100      	movs	r1, #0
 800a2dc:	480a      	ldr	r0, [pc, #40]	; (800a308 <HAL_Set_DMA_Callbacks+0x48>)
 800a2de:	f7fb fe31 	bl	8005f44 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim15_ch1_up_trig_com, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 800a2e2:	4a06      	ldr	r2, [pc, #24]	; (800a2fc <HAL_Set_DMA_Callbacks+0x3c>)
 800a2e4:	2100      	movs	r1, #0
 800a2e6:	4809      	ldr	r0, [pc, #36]	; (800a30c <HAL_Set_DMA_Callbacks+0x4c>)
 800a2e8:	f7fb fe2c 	bl	8005f44 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim16_ch1_up, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 800a2ec:	4a03      	ldr	r2, [pc, #12]	; (800a2fc <HAL_Set_DMA_Callbacks+0x3c>)
 800a2ee:	2100      	movs	r1, #0
 800a2f0:	4807      	ldr	r0, [pc, #28]	; (800a310 <HAL_Set_DMA_Callbacks+0x50>)
 800a2f2:	f7fb fe27 	bl	8005f44 <HAL_DMA_RegisterCallback>
}
 800a2f6:	bf00      	nop
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	0800a927 	.word	0x0800a927
 800a300:	2000239c 	.word	0x2000239c
 800a304:	200023e4 	.word	0x200023e4
 800a308:	2000242c 	.word	0x2000242c
 800a30c:	20002474 	.word	0x20002474
 800a310:	200024bc 	.word	0x200024bc

0800a314 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b084      	sub	sp, #16
 800a318:	af00      	add	r7, sp, #0
  PWR_PVDTypeDef sConfigPVD = {0};
 800a31a:	f107 0308 	add.w	r3, r7, #8
 800a31e:	2200      	movs	r2, #0
 800a320:	601a      	str	r2, [r3, #0]
 800a322:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a324:	4b13      	ldr	r3, [pc, #76]	; (800a374 <HAL_MspInit+0x60>)
 800a326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a328:	4a12      	ldr	r2, [pc, #72]	; (800a374 <HAL_MspInit+0x60>)
 800a32a:	f043 0301 	orr.w	r3, r3, #1
 800a32e:	6613      	str	r3, [r2, #96]	; 0x60
 800a330:	4b10      	ldr	r3, [pc, #64]	; (800a374 <HAL_MspInit+0x60>)
 800a332:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a334:	f003 0301 	and.w	r3, r3, #1
 800a338:	607b      	str	r3, [r7, #4]
 800a33a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a33c:	4b0d      	ldr	r3, [pc, #52]	; (800a374 <HAL_MspInit+0x60>)
 800a33e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a340:	4a0c      	ldr	r2, [pc, #48]	; (800a374 <HAL_MspInit+0x60>)
 800a342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a346:	6593      	str	r3, [r2, #88]	; 0x58
 800a348:	4b0a      	ldr	r3, [pc, #40]	; (800a374 <HAL_MspInit+0x60>)
 800a34a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a34c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a350:	603b      	str	r3, [r7, #0]
 800a352:	683b      	ldr	r3, [r7, #0]

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 800a354:	2300      	movs	r3, #0
 800a356:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 800a358:	2300      	movs	r3, #0
 800a35a:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 800a35c:	f107 0308 	add.w	r3, r7, #8
 800a360:	4618      	mov	r0, r3
 800a362:	f7fc f821 	bl	80063a8 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 800a366:	f7fc f87f 	bl	8006468 <HAL_PWR_EnablePVD>
}
 800a36a:	bf00      	nop
 800a36c:	3710      	adds	r7, #16
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	40021000 	.word	0x40021000

0800a378 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a08      	ldr	r2, [pc, #32]	; (800a3a8 <HAL_RTC_MspInit+0x30>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d107      	bne.n	800a39a <HAL_RTC_MspInit+0x22>
  {
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800a38a:	4b08      	ldr	r3, [pc, #32]	; (800a3ac <HAL_RTC_MspInit+0x34>)
 800a38c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a390:	4a06      	ldr	r2, [pc, #24]	; (800a3ac <HAL_RTC_MspInit+0x34>)
 800a392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a396:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

}
 800a39a:	bf00      	nop
 800a39c:	370c      	adds	r7, #12
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr
 800a3a6:	bf00      	nop
 800a3a8:	40002800 	.word	0x40002800
 800a3ac:	40021000 	.word	0x40021000

0800a3b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b084      	sub	sp, #16
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a6e      	ldr	r2, [pc, #440]	; (800a578 <HAL_TIM_Base_MspInit+0x1c8>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	f040 8091 	bne.w	800a4e6 <HAL_TIM_Base_MspInit+0x136>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a3c4:	4b6d      	ldr	r3, [pc, #436]	; (800a57c <HAL_TIM_Base_MspInit+0x1cc>)
 800a3c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3c8:	4a6c      	ldr	r2, [pc, #432]	; (800a57c <HAL_TIM_Base_MspInit+0x1cc>)
 800a3ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a3ce:	6613      	str	r3, [r2, #96]	; 0x60
 800a3d0:	4b6a      	ldr	r3, [pc, #424]	; (800a57c <HAL_TIM_Base_MspInit+0x1cc>)
 800a3d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a3d8:	60fb      	str	r3, [r7, #12]
 800a3da:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 800a3dc:	4b68      	ldr	r3, [pc, #416]	; (800a580 <HAL_TIM_Base_MspInit+0x1d0>)
 800a3de:	4a69      	ldr	r2, [pc, #420]	; (800a584 <HAL_TIM_Base_MspInit+0x1d4>)
 800a3e0:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 800a3e2:	4b67      	ldr	r3, [pc, #412]	; (800a580 <HAL_TIM_Base_MspInit+0x1d0>)
 800a3e4:	2207      	movs	r2, #7
 800a3e6:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a3e8:	4b65      	ldr	r3, [pc, #404]	; (800a580 <HAL_TIM_Base_MspInit+0x1d0>)
 800a3ea:	2210      	movs	r2, #16
 800a3ec:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800a3ee:	4b64      	ldr	r3, [pc, #400]	; (800a580 <HAL_TIM_Base_MspInit+0x1d0>)
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800a3f4:	4b62      	ldr	r3, [pc, #392]	; (800a580 <HAL_TIM_Base_MspInit+0x1d0>)
 800a3f6:	2280      	movs	r2, #128	; 0x80
 800a3f8:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800a3fa:	4b61      	ldr	r3, [pc, #388]	; (800a580 <HAL_TIM_Base_MspInit+0x1d0>)
 800a3fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a400:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800a402:	4b5f      	ldr	r3, [pc, #380]	; (800a580 <HAL_TIM_Base_MspInit+0x1d0>)
 800a404:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a408:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800a40a:	4b5d      	ldr	r3, [pc, #372]	; (800a580 <HAL_TIM_Base_MspInit+0x1d0>)
 800a40c:	2200      	movs	r2, #0
 800a40e:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800a410:	4b5b      	ldr	r3, [pc, #364]	; (800a580 <HAL_TIM_Base_MspInit+0x1d0>)
 800a412:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a416:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800a418:	4859      	ldr	r0, [pc, #356]	; (800a580 <HAL_TIM_Base_MspInit+0x1d0>)
 800a41a:	f7fb fb8b 	bl	8005b34 <HAL_DMA_Init>
 800a41e:	4603      	mov	r3, r0
 800a420:	2b00      	cmp	r3, #0
 800a422:	d001      	beq.n	800a428 <HAL_TIM_Base_MspInit+0x78>
    {
      Error_Handler();
 800a424:	f7ff fd79 	bl	8009f1a <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	4a55      	ldr	r2, [pc, #340]	; (800a580 <HAL_TIM_Base_MspInit+0x1d0>)
 800a42c:	625a      	str	r2, [r3, #36]	; 0x24
 800a42e:	4a54      	ldr	r2, [pc, #336]	; (800a580 <HAL_TIM_Base_MspInit+0x1d0>)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel3;
 800a434:	4b54      	ldr	r3, [pc, #336]	; (800a588 <HAL_TIM_Base_MspInit+0x1d8>)
 800a436:	4a55      	ldr	r2, [pc, #340]	; (800a58c <HAL_TIM_Base_MspInit+0x1dc>)
 800a438:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_7;
 800a43a:	4b53      	ldr	r3, [pc, #332]	; (800a588 <HAL_TIM_Base_MspInit+0x1d8>)
 800a43c:	2207      	movs	r2, #7
 800a43e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a440:	4b51      	ldr	r3, [pc, #324]	; (800a588 <HAL_TIM_Base_MspInit+0x1d8>)
 800a442:	2210      	movs	r2, #16
 800a444:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800a446:	4b50      	ldr	r3, [pc, #320]	; (800a588 <HAL_TIM_Base_MspInit+0x1d8>)
 800a448:	2200      	movs	r2, #0
 800a44a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800a44c:	4b4e      	ldr	r3, [pc, #312]	; (800a588 <HAL_TIM_Base_MspInit+0x1d8>)
 800a44e:	2280      	movs	r2, #128	; 0x80
 800a450:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800a452:	4b4d      	ldr	r3, [pc, #308]	; (800a588 <HAL_TIM_Base_MspInit+0x1d8>)
 800a454:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a458:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800a45a:	4b4b      	ldr	r3, [pc, #300]	; (800a588 <HAL_TIM_Base_MspInit+0x1d8>)
 800a45c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a460:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 800a462:	4b49      	ldr	r3, [pc, #292]	; (800a588 <HAL_TIM_Base_MspInit+0x1d8>)
 800a464:	2200      	movs	r2, #0
 800a466:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800a468:	4b47      	ldr	r3, [pc, #284]	; (800a588 <HAL_TIM_Base_MspInit+0x1d8>)
 800a46a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a46e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 800a470:	4845      	ldr	r0, [pc, #276]	; (800a588 <HAL_TIM_Base_MspInit+0x1d8>)
 800a472:	f7fb fb5f 	bl	8005b34 <HAL_DMA_Init>
 800a476:	4603      	mov	r3, r0
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d001      	beq.n	800a480 <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 800a47c:	f7ff fd4d 	bl	8009f1a <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	4a41      	ldr	r2, [pc, #260]	; (800a588 <HAL_TIM_Base_MspInit+0x1d8>)
 800a484:	629a      	str	r2, [r3, #40]	; 0x28
 800a486:	4a40      	ldr	r2, [pc, #256]	; (800a588 <HAL_TIM_Base_MspInit+0x1d8>)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel7;
 800a48c:	4b40      	ldr	r3, [pc, #256]	; (800a590 <HAL_TIM_Base_MspInit+0x1e0>)
 800a48e:	4a41      	ldr	r2, [pc, #260]	; (800a594 <HAL_TIM_Base_MspInit+0x1e4>)
 800a490:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Request = DMA_REQUEST_7;
 800a492:	4b3f      	ldr	r3, [pc, #252]	; (800a590 <HAL_TIM_Base_MspInit+0x1e0>)
 800a494:	2207      	movs	r2, #7
 800a496:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a498:	4b3d      	ldr	r3, [pc, #244]	; (800a590 <HAL_TIM_Base_MspInit+0x1e0>)
 800a49a:	2210      	movs	r2, #16
 800a49c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800a49e:	4b3c      	ldr	r3, [pc, #240]	; (800a590 <HAL_TIM_Base_MspInit+0x1e0>)
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800a4a4:	4b3a      	ldr	r3, [pc, #232]	; (800a590 <HAL_TIM_Base_MspInit+0x1e0>)
 800a4a6:	2280      	movs	r2, #128	; 0x80
 800a4a8:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800a4aa:	4b39      	ldr	r3, [pc, #228]	; (800a590 <HAL_TIM_Base_MspInit+0x1e0>)
 800a4ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a4b0:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800a4b2:	4b37      	ldr	r3, [pc, #220]	; (800a590 <HAL_TIM_Base_MspInit+0x1e0>)
 800a4b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a4b8:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 800a4ba:	4b35      	ldr	r3, [pc, #212]	; (800a590 <HAL_TIM_Base_MspInit+0x1e0>)
 800a4bc:	2200      	movs	r2, #0
 800a4be:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800a4c0:	4b33      	ldr	r3, [pc, #204]	; (800a590 <HAL_TIM_Base_MspInit+0x1e0>)
 800a4c2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a4c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 800a4c8:	4831      	ldr	r0, [pc, #196]	; (800a590 <HAL_TIM_Base_MspInit+0x1e0>)
 800a4ca:	f7fb fb33 	bl	8005b34 <HAL_DMA_Init>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d001      	beq.n	800a4d8 <HAL_TIM_Base_MspInit+0x128>
    {
      Error_Handler();
 800a4d4:	f7ff fd21 	bl	8009f1a <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	4a2d      	ldr	r2, [pc, #180]	; (800a590 <HAL_TIM_Base_MspInit+0x1e0>)
 800a4dc:	62da      	str	r2, [r3, #44]	; 0x2c
 800a4de:	4a2c      	ldr	r2, [pc, #176]	; (800a590 <HAL_TIM_Base_MspInit+0x1e0>)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6293      	str	r3, [r2, #40]	; 0x28
 800a4e4:	e041      	b.n	800a56a <HAL_TIM_Base_MspInit+0x1ba>
  }
  else if(htim_base->Instance==TIM16)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4a2b      	ldr	r2, [pc, #172]	; (800a598 <HAL_TIM_Base_MspInit+0x1e8>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d13c      	bne.n	800a56a <HAL_TIM_Base_MspInit+0x1ba>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800a4f0:	4b22      	ldr	r3, [pc, #136]	; (800a57c <HAL_TIM_Base_MspInit+0x1cc>)
 800a4f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4f4:	4a21      	ldr	r2, [pc, #132]	; (800a57c <HAL_TIM_Base_MspInit+0x1cc>)
 800a4f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a4fa:	6613      	str	r3, [r2, #96]	; 0x60
 800a4fc:	4b1f      	ldr	r3, [pc, #124]	; (800a57c <HAL_TIM_Base_MspInit+0x1cc>)
 800a4fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a504:	60bb      	str	r3, [r7, #8]
 800a506:	68bb      	ldr	r3, [r7, #8]

    /* TIM16 DMA Init */
    /* TIM16_CH1_UP Init */
    hdma_tim16_ch1_up.Instance = DMA1_Channel6;
 800a508:	4b24      	ldr	r3, [pc, #144]	; (800a59c <HAL_TIM_Base_MspInit+0x1ec>)
 800a50a:	4a25      	ldr	r2, [pc, #148]	; (800a5a0 <HAL_TIM_Base_MspInit+0x1f0>)
 800a50c:	601a      	str	r2, [r3, #0]
    hdma_tim16_ch1_up.Init.Request = DMA_REQUEST_4;
 800a50e:	4b23      	ldr	r3, [pc, #140]	; (800a59c <HAL_TIM_Base_MspInit+0x1ec>)
 800a510:	2204      	movs	r2, #4
 800a512:	605a      	str	r2, [r3, #4]
    hdma_tim16_ch1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a514:	4b21      	ldr	r3, [pc, #132]	; (800a59c <HAL_TIM_Base_MspInit+0x1ec>)
 800a516:	2210      	movs	r2, #16
 800a518:	609a      	str	r2, [r3, #8]
    hdma_tim16_ch1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800a51a:	4b20      	ldr	r3, [pc, #128]	; (800a59c <HAL_TIM_Base_MspInit+0x1ec>)
 800a51c:	2200      	movs	r2, #0
 800a51e:	60da      	str	r2, [r3, #12]
    hdma_tim16_ch1_up.Init.MemInc = DMA_MINC_ENABLE;
 800a520:	4b1e      	ldr	r3, [pc, #120]	; (800a59c <HAL_TIM_Base_MspInit+0x1ec>)
 800a522:	2280      	movs	r2, #128	; 0x80
 800a524:	611a      	str	r2, [r3, #16]
    hdma_tim16_ch1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800a526:	4b1d      	ldr	r3, [pc, #116]	; (800a59c <HAL_TIM_Base_MspInit+0x1ec>)
 800a528:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a52c:	615a      	str	r2, [r3, #20]
    hdma_tim16_ch1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800a52e:	4b1b      	ldr	r3, [pc, #108]	; (800a59c <HAL_TIM_Base_MspInit+0x1ec>)
 800a530:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a534:	619a      	str	r2, [r3, #24]
    hdma_tim16_ch1_up.Init.Mode = DMA_NORMAL;
 800a536:	4b19      	ldr	r3, [pc, #100]	; (800a59c <HAL_TIM_Base_MspInit+0x1ec>)
 800a538:	2200      	movs	r2, #0
 800a53a:	61da      	str	r2, [r3, #28]
    hdma_tim16_ch1_up.Init.Priority = DMA_PRIORITY_LOW;
 800a53c:	4b17      	ldr	r3, [pc, #92]	; (800a59c <HAL_TIM_Base_MspInit+0x1ec>)
 800a53e:	2200      	movs	r2, #0
 800a540:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim16_ch1_up) != HAL_OK)
 800a542:	4816      	ldr	r0, [pc, #88]	; (800a59c <HAL_TIM_Base_MspInit+0x1ec>)
 800a544:	f7fb faf6 	bl	8005b34 <HAL_DMA_Init>
 800a548:	4603      	mov	r3, r0
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d001      	beq.n	800a552 <HAL_TIM_Base_MspInit+0x1a2>
    {
      Error_Handler();
 800a54e:	f7ff fce4 	bl	8009f1a <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim16_ch1_up);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	4a11      	ldr	r2, [pc, #68]	; (800a59c <HAL_TIM_Base_MspInit+0x1ec>)
 800a556:	625a      	str	r2, [r3, #36]	; 0x24
 800a558:	4a10      	ldr	r2, [pc, #64]	; (800a59c <HAL_TIM_Base_MspInit+0x1ec>)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim16_ch1_up);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	4a0e      	ldr	r2, [pc, #56]	; (800a59c <HAL_TIM_Base_MspInit+0x1ec>)
 800a562:	621a      	str	r2, [r3, #32]
 800a564:	4a0d      	ldr	r2, [pc, #52]	; (800a59c <HAL_TIM_Base_MspInit+0x1ec>)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6293      	str	r3, [r2, #40]	; 0x28
  }
  HAL_Set_DMA_Callbacks();
 800a56a:	f7ff fea9 	bl	800a2c0 <HAL_Set_DMA_Callbacks>
}
 800a56e:	bf00      	nop
 800a570:	3710      	adds	r7, #16
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}
 800a576:	bf00      	nop
 800a578:	40012c00 	.word	0x40012c00
 800a57c:	40021000 	.word	0x40021000
 800a580:	2000239c 	.word	0x2000239c
 800a584:	4002001c 	.word	0x4002001c
 800a588:	200023e4 	.word	0x200023e4
 800a58c:	40020030 	.word	0x40020030
 800a590:	2000242c 	.word	0x2000242c
 800a594:	40020080 	.word	0x40020080
 800a598:	40014400 	.word	0x40014400
 800a59c:	200024bc 	.word	0x200024bc
 800a5a0:	4002006c 	.word	0x4002006c

0800a5a4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b084      	sub	sp, #16
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a28      	ldr	r2, [pc, #160]	; (800a654 <HAL_TIM_PWM_MspInit+0xb0>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d149      	bne.n	800a64a <HAL_TIM_PWM_MspInit+0xa6>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800a5b6:	4b28      	ldr	r3, [pc, #160]	; (800a658 <HAL_TIM_PWM_MspInit+0xb4>)
 800a5b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5ba:	4a27      	ldr	r2, [pc, #156]	; (800a658 <HAL_TIM_PWM_MspInit+0xb4>)
 800a5bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a5c0:	6613      	str	r3, [r2, #96]	; 0x60
 800a5c2:	4b25      	ldr	r3, [pc, #148]	; (800a658 <HAL_TIM_PWM_MspInit+0xb4>)
 800a5c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a5ca:	60fb      	str	r3, [r7, #12]
 800a5cc:	68fb      	ldr	r3, [r7, #12]

    /* TIM15 DMA Init */
    /* TIM15_CH1_UP_TRIG_COM Init */
    hdma_tim15_ch1_up_trig_com.Instance = DMA1_Channel5;
 800a5ce:	4b23      	ldr	r3, [pc, #140]	; (800a65c <HAL_TIM_PWM_MspInit+0xb8>)
 800a5d0:	4a23      	ldr	r2, [pc, #140]	; (800a660 <HAL_TIM_PWM_MspInit+0xbc>)
 800a5d2:	601a      	str	r2, [r3, #0]
    hdma_tim15_ch1_up_trig_com.Init.Request = DMA_REQUEST_7;
 800a5d4:	4b21      	ldr	r3, [pc, #132]	; (800a65c <HAL_TIM_PWM_MspInit+0xb8>)
 800a5d6:	2207      	movs	r2, #7
 800a5d8:	605a      	str	r2, [r3, #4]
    hdma_tim15_ch1_up_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a5da:	4b20      	ldr	r3, [pc, #128]	; (800a65c <HAL_TIM_PWM_MspInit+0xb8>)
 800a5dc:	2210      	movs	r2, #16
 800a5de:	609a      	str	r2, [r3, #8]
    hdma_tim15_ch1_up_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 800a5e0:	4b1e      	ldr	r3, [pc, #120]	; (800a65c <HAL_TIM_PWM_MspInit+0xb8>)
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	60da      	str	r2, [r3, #12]
    hdma_tim15_ch1_up_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 800a5e6:	4b1d      	ldr	r3, [pc, #116]	; (800a65c <HAL_TIM_PWM_MspInit+0xb8>)
 800a5e8:	2280      	movs	r2, #128	; 0x80
 800a5ea:	611a      	str	r2, [r3, #16]
    hdma_tim15_ch1_up_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800a5ec:	4b1b      	ldr	r3, [pc, #108]	; (800a65c <HAL_TIM_PWM_MspInit+0xb8>)
 800a5ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a5f2:	615a      	str	r2, [r3, #20]
    hdma_tim15_ch1_up_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800a5f4:	4b19      	ldr	r3, [pc, #100]	; (800a65c <HAL_TIM_PWM_MspInit+0xb8>)
 800a5f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a5fa:	619a      	str	r2, [r3, #24]
    hdma_tim15_ch1_up_trig_com.Init.Mode = DMA_NORMAL;
 800a5fc:	4b17      	ldr	r3, [pc, #92]	; (800a65c <HAL_TIM_PWM_MspInit+0xb8>)
 800a5fe:	2200      	movs	r2, #0
 800a600:	61da      	str	r2, [r3, #28]
    hdma_tim15_ch1_up_trig_com.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800a602:	4b16      	ldr	r3, [pc, #88]	; (800a65c <HAL_TIM_PWM_MspInit+0xb8>)
 800a604:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a608:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim15_ch1_up_trig_com) != HAL_OK)
 800a60a:	4814      	ldr	r0, [pc, #80]	; (800a65c <HAL_TIM_PWM_MspInit+0xb8>)
 800a60c:	f7fb fa92 	bl	8005b34 <HAL_DMA_Init>
 800a610:	4603      	mov	r3, r0
 800a612:	2b00      	cmp	r3, #0
 800a614:	d001      	beq.n	800a61a <HAL_TIM_PWM_MspInit+0x76>
    {
      Error_Handler();
 800a616:	f7ff fc80 	bl	8009f1a <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim15_ch1_up_trig_com);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	4a0f      	ldr	r2, [pc, #60]	; (800a65c <HAL_TIM_PWM_MspInit+0xb8>)
 800a61e:	625a      	str	r2, [r3, #36]	; 0x24
 800a620:	4a0e      	ldr	r2, [pc, #56]	; (800a65c <HAL_TIM_PWM_MspInit+0xb8>)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim15_ch1_up_trig_com);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	4a0c      	ldr	r2, [pc, #48]	; (800a65c <HAL_TIM_PWM_MspInit+0xb8>)
 800a62a:	621a      	str	r2, [r3, #32]
 800a62c:	4a0b      	ldr	r2, [pc, #44]	; (800a65c <HAL_TIM_PWM_MspInit+0xb8>)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim15_ch1_up_trig_com);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	4a09      	ldr	r2, [pc, #36]	; (800a65c <HAL_TIM_PWM_MspInit+0xb8>)
 800a636:	639a      	str	r2, [r3, #56]	; 0x38
 800a638:	4a08      	ldr	r2, [pc, #32]	; (800a65c <HAL_TIM_PWM_MspInit+0xb8>)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim15_ch1_up_trig_com);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	4a06      	ldr	r2, [pc, #24]	; (800a65c <HAL_TIM_PWM_MspInit+0xb8>)
 800a642:	635a      	str	r2, [r3, #52]	; 0x34
 800a644:	4a05      	ldr	r2, [pc, #20]	; (800a65c <HAL_TIM_PWM_MspInit+0xb8>)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 800a64a:	bf00      	nop
 800a64c:	3710      	adds	r7, #16
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
 800a652:	bf00      	nop
 800a654:	40014000 	.word	0x40014000
 800a658:	40021000 	.word	0x40021000
 800a65c:	20002474 	.word	0x20002474
 800a660:	40020058 	.word	0x40020058

0800a664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b082      	sub	sp, #8
 800a668:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 1; iii++)
 800a66a:	2300      	movs	r3, #0
 800a66c:	71fb      	strb	r3, [r7, #7]
 800a66e:	e005      	b.n	800a67c <NMI_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800a670:	2064      	movs	r0, #100	; 0x64
 800a672:	f7fb f8d3 	bl	800581c <HAL_Delay>
        for (uint8_t iii = 0; iii < 1; iii++)
 800a676:	79fb      	ldrb	r3, [r7, #7]
 800a678:	3301      	adds	r3, #1
 800a67a:	71fb      	strb	r3, [r7, #7]
 800a67c:	79fb      	ldrb	r3, [r7, #7]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d0f6      	beq.n	800a670 <NMI_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800a682:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a686:	f7fb f8c9 	bl	800581c <HAL_Delay>
        for (uint8_t iii = 0; iii < 1; iii++)
 800a68a:	e7ee      	b.n	800a66a <NMI_Handler+0x6>

0800a68c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b082      	sub	sp, #8
 800a690:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 2; iii++)
 800a692:	2300      	movs	r3, #0
 800a694:	71fb      	strb	r3, [r7, #7]
 800a696:	e005      	b.n	800a6a4 <HardFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800a698:	2064      	movs	r0, #100	; 0x64
 800a69a:	f7fb f8bf 	bl	800581c <HAL_Delay>
        for (uint8_t iii = 0; iii < 2; iii++)
 800a69e:	79fb      	ldrb	r3, [r7, #7]
 800a6a0:	3301      	adds	r3, #1
 800a6a2:	71fb      	strb	r3, [r7, #7]
 800a6a4:	79fb      	ldrb	r3, [r7, #7]
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	d9f6      	bls.n	800a698 <HardFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800a6aa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a6ae:	f7fb f8b5 	bl	800581c <HAL_Delay>
        for (uint8_t iii = 0; iii < 2; iii++)
 800a6b2:	e7ee      	b.n	800a692 <HardFault_Handler+0x6>

0800a6b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b082      	sub	sp, #8
 800a6b8:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 3; iii++)
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	71fb      	strb	r3, [r7, #7]
 800a6be:	e005      	b.n	800a6cc <MemManage_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800a6c0:	2064      	movs	r0, #100	; 0x64
 800a6c2:	f7fb f8ab 	bl	800581c <HAL_Delay>
        for (uint8_t iii = 0; iii < 3; iii++)
 800a6c6:	79fb      	ldrb	r3, [r7, #7]
 800a6c8:	3301      	adds	r3, #1
 800a6ca:	71fb      	strb	r3, [r7, #7]
 800a6cc:	79fb      	ldrb	r3, [r7, #7]
 800a6ce:	2b02      	cmp	r3, #2
 800a6d0:	d9f6      	bls.n	800a6c0 <MemManage_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800a6d2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a6d6:	f7fb f8a1 	bl	800581c <HAL_Delay>
        for (uint8_t iii = 0; iii < 3; iii++)
 800a6da:	e7ee      	b.n	800a6ba <MemManage_Handler+0x6>

0800a6dc <BusFault_Handler>:
}
/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b082      	sub	sp, #8
 800a6e0:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 4; iii++)
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	71fb      	strb	r3, [r7, #7]
 800a6e6:	e005      	b.n	800a6f4 <BusFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800a6e8:	2064      	movs	r0, #100	; 0x64
 800a6ea:	f7fb f897 	bl	800581c <HAL_Delay>
        for (uint8_t iii = 0; iii < 4; iii++)
 800a6ee:	79fb      	ldrb	r3, [r7, #7]
 800a6f0:	3301      	adds	r3, #1
 800a6f2:	71fb      	strb	r3, [r7, #7]
 800a6f4:	79fb      	ldrb	r3, [r7, #7]
 800a6f6:	2b03      	cmp	r3, #3
 800a6f8:	d9f6      	bls.n	800a6e8 <BusFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800a6fa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a6fe:	f7fb f88d 	bl	800581c <HAL_Delay>
        for (uint8_t iii = 0; iii < 4; iii++)
 800a702:	e7ee      	b.n	800a6e2 <BusFault_Handler+0x6>

0800a704 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b082      	sub	sp, #8
 800a708:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 5; iii++)
 800a70a:	2300      	movs	r3, #0
 800a70c:	71fb      	strb	r3, [r7, #7]
 800a70e:	e005      	b.n	800a71c <UsageFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800a710:	2064      	movs	r0, #100	; 0x64
 800a712:	f7fb f883 	bl	800581c <HAL_Delay>
        for (uint8_t iii = 0; iii < 5; iii++)
 800a716:	79fb      	ldrb	r3, [r7, #7]
 800a718:	3301      	adds	r3, #1
 800a71a:	71fb      	strb	r3, [r7, #7]
 800a71c:	79fb      	ldrb	r3, [r7, #7]
 800a71e:	2b04      	cmp	r3, #4
 800a720:	d9f6      	bls.n	800a710 <UsageFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800a722:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a726:	f7fb f879 	bl	800581c <HAL_Delay>
        for (uint8_t iii = 0; iii < 5; iii++)
 800a72a:	e7ee      	b.n	800a70a <UsageFault_Handler+0x6>

0800a72c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a72c:	b480      	push	{r7}
 800a72e:	af00      	add	r7, sp, #0
}
 800a730:	bf00      	nop
 800a732:	46bd      	mov	sp, r7
 800a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a738:	4770      	bx	lr
	...

0800a73c <EXTI0_IRQHandler>:
volatile uint32_t d_passes = 0;
/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800a73c:	b590      	push	{r4, r7, lr}
 800a73e:	b085      	sub	sp, #20
 800a740:	af02      	add	r7, sp, #8
    // D is pause
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_D_PIN;
 800a742:	2301      	movs	r3, #1
 800a744:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_D;
 800a746:	2303      	movs	r3, #3
 800a748:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_D_IRQ;
 800a74a:	2306      	movs	r3, #6
 800a74c:	713b      	strb	r3, [r7, #4]
    d_passes++;
 800a74e:	4b15      	ldr	r3, [pc, #84]	; (800a7a4 <EXTI0_IRQHandler+0x68>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	3301      	adds	r3, #1
 800a754:	4a13      	ldr	r2, [pc, #76]	; (800a7a4 <EXTI0_IRQHandler+0x68>)
 800a756:	6013      	str	r3, [r2, #0]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800a758:	88fb      	ldrh	r3, [r7, #6]
 800a75a:	4618      	mov	r0, r3
 800a75c:	f7fb fdfc 	bl	8006358 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800a760:	797a      	ldrb	r2, [r7, #5]
 800a762:	797b      	ldrb	r3, [r7, #5]
 800a764:	4910      	ldr	r1, [pc, #64]	; (800a7a8 <EXTI0_IRQHandler+0x6c>)
 800a766:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800a76a:	490f      	ldr	r1, [pc, #60]	; (800a7a8 <EXTI0_IRQHandler+0x6c>)
 800a76c:	00db      	lsls	r3, r3, #3
 800a76e:	440b      	add	r3, r1
 800a770:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800a772:	797c      	ldrb	r4, [r7, #5]
 800a774:	f7f9 fb1e 	bl	8003db4 <xTaskGetTickCountFromISR>
 800a778:	4603      	mov	r3, r0
 800a77a:	4a0b      	ldr	r2, [pc, #44]	; (800a7a8 <EXTI0_IRQHandler+0x6c>)
 800a77c:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800a780:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800a784:	4618      	mov	r0, r3
 800a786:	f7fb f9ba 	bl	8005afe <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800a78a:	4b08      	ldr	r3, [pc, #32]	; (800a7ac <EXTI0_IRQHandler+0x70>)
 800a78c:	6818      	ldr	r0, [r3, #0]
 800a78e:	7979      	ldrb	r1, [r7, #5]
 800a790:	463b      	mov	r3, r7
 800a792:	9300      	str	r3, [sp, #0]
 800a794:	2300      	movs	r3, #0
 800a796:	2203      	movs	r2, #3
 800a798:	f7f9 ff2a 	bl	80045f0 <xTaskGenericNotifyFromISR>
}
 800a79c:	bf00      	nop
 800a79e:	370c      	adds	r7, #12
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd90      	pop	{r4, r7, pc}
 800a7a4:	20002574 	.word	0x20002574
 800a7a8:	20000a50 	.word	0x20000a50
 800a7ac:	20002d90 	.word	0x20002d90

0800a7b0 <EXTI2_IRQHandler>:
uint32_t g_dbg_b_interrupt_count = 0;
/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800a7b0:	b590      	push	{r4, r7, lr}
 800a7b2:	b085      	sub	sp, #20
 800a7b4:	af02      	add	r7, sp, #8
    // A is speed
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_A_PIN;
 800a7b6:	2304      	movs	r3, #4
 800a7b8:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_A;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_A_IRQ;
 800a7be:	2308      	movs	r3, #8
 800a7c0:	713b      	strb	r3, [r7, #4]
    a_passes++;
 800a7c2:	4b15      	ldr	r3, [pc, #84]	; (800a818 <EXTI2_IRQHandler+0x68>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	4a13      	ldr	r2, [pc, #76]	; (800a818 <EXTI2_IRQHandler+0x68>)
 800a7ca:	6013      	str	r3, [r2, #0]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800a7cc:	88fb      	ldrh	r3, [r7, #6]
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7fb fdc2 	bl	8006358 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800a7d4:	797a      	ldrb	r2, [r7, #5]
 800a7d6:	797b      	ldrb	r3, [r7, #5]
 800a7d8:	4910      	ldr	r1, [pc, #64]	; (800a81c <EXTI2_IRQHandler+0x6c>)
 800a7da:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800a7de:	490f      	ldr	r1, [pc, #60]	; (800a81c <EXTI2_IRQHandler+0x6c>)
 800a7e0:	00db      	lsls	r3, r3, #3
 800a7e2:	440b      	add	r3, r1
 800a7e4:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800a7e6:	797c      	ldrb	r4, [r7, #5]
 800a7e8:	f7f9 fae4 	bl	8003db4 <xTaskGetTickCountFromISR>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	4a0b      	ldr	r2, [pc, #44]	; (800a81c <EXTI2_IRQHandler+0x6c>)
 800a7f0:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800a7f4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f7fb f980 	bl	8005afe <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800a7fe:	4b08      	ldr	r3, [pc, #32]	; (800a820 <EXTI2_IRQHandler+0x70>)
 800a800:	6818      	ldr	r0, [r3, #0]
 800a802:	7979      	ldrb	r1, [r7, #5]
 800a804:	463b      	mov	r3, r7
 800a806:	9300      	str	r3, [sp, #0]
 800a808:	2300      	movs	r3, #0
 800a80a:	2203      	movs	r2, #3
 800a80c:	f7f9 fef0 	bl	80045f0 <xTaskGenericNotifyFromISR>
}
 800a810:	bf00      	nop
 800a812:	370c      	adds	r7, #12
 800a814:	46bd      	mov	sp, r7
 800a816:	bd90      	pop	{r4, r7, pc}
 800a818:	20002578 	.word	0x20002578
 800a81c:	20000a50 	.word	0x20000a50
 800a820:	20002d90 	.word	0x20002d90

0800a824 <EXTI15_10_IRQHandler>:
volatile uint32_t b_passes = 0;
/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800a824:	b590      	push	{r4, r7, lr}
 800a826:	b085      	sub	sp, #20
 800a828:	af02      	add	r7, sp, #8
    // B is state
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_B_PIN;
 800a82a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a82e:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_B;
 800a830:	2301      	movs	r3, #1
 800a832:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_B_IRQ;
 800a834:	2328      	movs	r3, #40	; 0x28
 800a836:	713b      	strb	r3, [r7, #4]
    b_passes++;
 800a838:	4b15      	ldr	r3, [pc, #84]	; (800a890 <EXTI15_10_IRQHandler+0x6c>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	3301      	adds	r3, #1
 800a83e:	4a14      	ldr	r2, [pc, #80]	; (800a890 <EXTI15_10_IRQHandler+0x6c>)
 800a840:	6013      	str	r3, [r2, #0]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800a842:	88fb      	ldrh	r3, [r7, #6]
 800a844:	4618      	mov	r0, r3
 800a846:	f7fb fd87 	bl	8006358 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800a84a:	797a      	ldrb	r2, [r7, #5]
 800a84c:	797b      	ldrb	r3, [r7, #5]
 800a84e:	4911      	ldr	r1, [pc, #68]	; (800a894 <EXTI15_10_IRQHandler+0x70>)
 800a850:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800a854:	490f      	ldr	r1, [pc, #60]	; (800a894 <EXTI15_10_IRQHandler+0x70>)
 800a856:	00db      	lsls	r3, r3, #3
 800a858:	440b      	add	r3, r1
 800a85a:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800a85c:	797c      	ldrb	r4, [r7, #5]
 800a85e:	f7f9 faa9 	bl	8003db4 <xTaskGetTickCountFromISR>
 800a862:	4603      	mov	r3, r0
 800a864:	4a0b      	ldr	r2, [pc, #44]	; (800a894 <EXTI15_10_IRQHandler+0x70>)
 800a866:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800a86a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800a86e:	4618      	mov	r0, r3
 800a870:	f7fb f945 	bl	8005afe <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800a874:	4b08      	ldr	r3, [pc, #32]	; (800a898 <EXTI15_10_IRQHandler+0x74>)
 800a876:	6818      	ldr	r0, [r3, #0]
 800a878:	7979      	ldrb	r1, [r7, #5]
 800a87a:	463b      	mov	r3, r7
 800a87c:	9300      	str	r3, [sp, #0]
 800a87e:	2300      	movs	r3, #0
 800a880:	2203      	movs	r2, #3
 800a882:	f7f9 feb5 	bl	80045f0 <xTaskGenericNotifyFromISR>
}
 800a886:	bf00      	nop
 800a888:	370c      	adds	r7, #12
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd90      	pop	{r4, r7, pc}
 800a88e:	bf00      	nop
 800a890:	2000257c 	.word	0x2000257c
 800a894:	20000a50 	.word	0x20000a50
 800a898:	20002d90 	.word	0x20002d90

0800a89c <EXTI9_5_IRQHandler>:
volatile uint32_t c_passes = 0;
/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800a89c:	b590      	push	{r4, r7, lr}
 800a89e:	b085      	sub	sp, #20
 800a8a0:	af02      	add	r7, sp, #8
    // C is color
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_C_PIN;
 800a8a2:	2320      	movs	r3, #32
 800a8a4:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_C;
 800a8a6:	2302      	movs	r3, #2
 800a8a8:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_C_IRQ;
 800a8aa:	2317      	movs	r3, #23
 800a8ac:	713b      	strb	r3, [r7, #4]
    c_passes++;
 800a8ae:	4b15      	ldr	r3, [pc, #84]	; (800a904 <EXTI9_5_IRQHandler+0x68>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	3301      	adds	r3, #1
 800a8b4:	4a13      	ldr	r2, [pc, #76]	; (800a904 <EXTI9_5_IRQHandler+0x68>)
 800a8b6:	6013      	str	r3, [r2, #0]
    // add button irq here..
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800a8b8:	88fb      	ldrh	r3, [r7, #6]
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f7fb fd4c 	bl	8006358 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800a8c0:	797a      	ldrb	r2, [r7, #5]
 800a8c2:	797b      	ldrb	r3, [r7, #5]
 800a8c4:	4910      	ldr	r1, [pc, #64]	; (800a908 <EXTI9_5_IRQHandler+0x6c>)
 800a8c6:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800a8ca:	490f      	ldr	r1, [pc, #60]	; (800a908 <EXTI9_5_IRQHandler+0x6c>)
 800a8cc:	00db      	lsls	r3, r3, #3
 800a8ce:	440b      	add	r3, r1
 800a8d0:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800a8d2:	797c      	ldrb	r4, [r7, #5]
 800a8d4:	f7f9 fa6e 	bl	8003db4 <xTaskGetTickCountFromISR>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	4a0b      	ldr	r2, [pc, #44]	; (800a908 <EXTI9_5_IRQHandler+0x6c>)
 800a8dc:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800a8e0:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f7fb f90a 	bl	8005afe <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800a8ea:	4b08      	ldr	r3, [pc, #32]	; (800a90c <EXTI9_5_IRQHandler+0x70>)
 800a8ec:	6818      	ldr	r0, [r3, #0]
 800a8ee:	7979      	ldrb	r1, [r7, #5]
 800a8f0:	463b      	mov	r3, r7
 800a8f2:	9300      	str	r3, [sp, #0]
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	2203      	movs	r2, #3
 800a8f8:	f7f9 fe7a 	bl	80045f0 <xTaskGenericNotifyFromISR>
}
 800a8fc:	bf00      	nop
 800a8fe:	370c      	adds	r7, #12
 800a900:	46bd      	mov	sp, r7
 800a902:	bd90      	pop	{r4, r7, pc}
 800a904:	20002580 	.word	0x20002580
 800a908:	20000a50 	.word	0x20000a50
 800a90c:	20002d90 	.word	0x20002d90

0800a910 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a910:	b480      	push	{r7}
 800a912:	b083      	sub	sp, #12
 800a914:	af00      	add	r7, sp, #0
 800a916:	4603      	mov	r3, r0
 800a918:	80fb      	strh	r3, [r7, #6]

}
 800a91a:	bf00      	nop
 800a91c:	370c      	adds	r7, #12
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr

0800a926 <HAL_DMA_CMPLT_CALLBACK>:


void HAL_DMA_CMPLT_CALLBACK(DMA_HandleTypeDef *hdma)
{
 800a926:	b480      	push	{r7}
 800a928:	b083      	sub	sp, #12
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	6078      	str	r0, [r7, #4]
    while(1);
 800a92e:	e7fe      	b.n	800a92e <HAL_DMA_CMPLT_CALLBACK+0x8>

0800a930 <HAL_TIM_PWM_PulseFinishedCallback>:
bool gb_dma_cmplt_strip_1 = true;
bool gb_dma_cmplt_strip_2 = true;
bool gb_dma_cmplt_strip_3 = true;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b082      	sub	sp, #8
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
    switch (htim->Channel)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	7f1b      	ldrb	r3, [r3, #28]
 800a93c:	2b04      	cmp	r3, #4
 800a93e:	d016      	beq.n	800a96e <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
 800a940:	2b04      	cmp	r3, #4
 800a942:	dc1c      	bgt.n	800a97e <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
 800a944:	2b01      	cmp	r3, #1
 800a946:	d002      	beq.n	800a94e <HAL_TIM_PWM_PulseFinishedCallback+0x1e>
 800a948:	2b02      	cmp	r3, #2
 800a94a:	d008      	beq.n	800a95e <HAL_TIM_PWM_PulseFinishedCallback+0x2e>
        case HAL_TIM_ACTIVE_CHANNEL_3:
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
            gb_dma_cmplt_strip_3 = true;
        break;
        default:
        break;
 800a94c:	e017      	b.n	800a97e <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 800a94e:	2100      	movs	r1, #0
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f7fd fba5 	bl	80080a0 <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_1 = true;
 800a956:	4b0c      	ldr	r3, [pc, #48]	; (800a988 <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 800a958:	2201      	movs	r2, #1
 800a95a:	701a      	strb	r2, [r3, #0]
        break;
 800a95c:	e010      	b.n	800a980 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_2);
 800a95e:	2104      	movs	r1, #4
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f7fd fb9d 	bl	80080a0 <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_2 = true;
 800a966:	4b09      	ldr	r3, [pc, #36]	; (800a98c <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 800a968:	2201      	movs	r2, #1
 800a96a:	701a      	strb	r2, [r3, #0]
        break;
 800a96c:	e008      	b.n	800a980 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
 800a96e:	2108      	movs	r1, #8
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f7fd fb95 	bl	80080a0 <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_3 = true;
 800a976:	4b06      	ldr	r3, [pc, #24]	; (800a990 <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 800a978:	2201      	movs	r2, #1
 800a97a:	701a      	strb	r2, [r3, #0]
        break;
 800a97c:	e000      	b.n	800a980 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
        break;
 800a97e:	bf00      	nop
    }
}
 800a980:	bf00      	nop
 800a982:	3708      	adds	r7, #8
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}
 800a988:	20000069 	.word	0x20000069
 800a98c:	2000006a 	.word	0x2000006a
 800a990:	2000006b 	.word	0x2000006b

0800a994 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800a998:	4802      	ldr	r0, [pc, #8]	; (800a9a4 <DMA1_Channel2_IRQHandler+0x10>)
 800a99a:	f7fb fa24 	bl	8005de6 <HAL_DMA_IRQHandler>
}
 800a99e:	bf00      	nop
 800a9a0:	bd80      	pop	{r7, pc}
 800a9a2:	bf00      	nop
 800a9a4:	2000239c 	.word	0x2000239c

0800a9a8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 800a9ac:	4802      	ldr	r0, [pc, #8]	; (800a9b8 <DMA1_Channel3_IRQHandler+0x10>)
 800a9ae:	f7fb fa1a 	bl	8005de6 <HAL_DMA_IRQHandler>
}
 800a9b2:	bf00      	nop
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	200023e4 	.word	0x200023e4

0800a9bc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim15_ch1_up_trig_com);
 800a9c0:	4802      	ldr	r0, [pc, #8]	; (800a9cc <DMA1_Channel5_IRQHandler+0x10>)
 800a9c2:	f7fb fa10 	bl	8005de6 <HAL_DMA_IRQHandler>
}
 800a9c6:	bf00      	nop
 800a9c8:	bd80      	pop	{r7, pc}
 800a9ca:	bf00      	nop
 800a9cc:	20002474 	.word	0x20002474

0800a9d0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim16_ch1_up);
 800a9d4:	4802      	ldr	r0, [pc, #8]	; (800a9e0 <DMA1_Channel6_IRQHandler+0x10>)
 800a9d6:	f7fb fa06 	bl	8005de6 <HAL_DMA_IRQHandler>
}
 800a9da:	bf00      	nop
 800a9dc:	bd80      	pop	{r7, pc}
 800a9de:	bf00      	nop
 800a9e0:	200024bc 	.word	0x200024bc

0800a9e4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 800a9e8:	4802      	ldr	r0, [pc, #8]	; (800a9f4 <DMA1_Channel7_IRQHandler+0x10>)
 800a9ea:	f7fb f9fc 	bl	8005de6 <HAL_DMA_IRQHandler>
}
 800a9ee:	bf00      	nop
 800a9f0:	bd80      	pop	{r7, pc}
 800a9f2:	bf00      	nop
 800a9f4:	2000242c 	.word	0x2000242c

0800a9f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	af00      	add	r7, sp, #0
	return 1;
 800a9fc:	2301      	movs	r3, #1
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr

0800aa08 <_kill>:

int _kill(int pid, int sig)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b082      	sub	sp, #8
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800aa12:	f000 fd13 	bl	800b43c <__errno>
 800aa16:	4603      	mov	r3, r0
 800aa18:	2216      	movs	r2, #22
 800aa1a:	601a      	str	r2, [r3, #0]
	return -1;
 800aa1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3708      	adds	r7, #8
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}

0800aa28 <_exit>:

void _exit (int status)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b082      	sub	sp, #8
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800aa30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f7ff ffe7 	bl	800aa08 <_kill>
	while (1) {}		/* Make sure we hang here */
 800aa3a:	e7fe      	b.n	800aa3a <_exit+0x12>

0800aa3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b086      	sub	sp, #24
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	60f8      	str	r0, [r7, #12]
 800aa44:	60b9      	str	r1, [r7, #8]
 800aa46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800aa48:	2300      	movs	r3, #0
 800aa4a:	617b      	str	r3, [r7, #20]
 800aa4c:	e00a      	b.n	800aa64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800aa4e:	f3af 8000 	nop.w
 800aa52:	4601      	mov	r1, r0
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	1c5a      	adds	r2, r3, #1
 800aa58:	60ba      	str	r2, [r7, #8]
 800aa5a:	b2ca      	uxtb	r2, r1
 800aa5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	3301      	adds	r3, #1
 800aa62:	617b      	str	r3, [r7, #20]
 800aa64:	697a      	ldr	r2, [r7, #20]
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	dbf0      	blt.n	800aa4e <_read+0x12>
	}

return len;
 800aa6c:	687b      	ldr	r3, [r7, #4]
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3718      	adds	r7, #24
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}

0800aa76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800aa76:	b580      	push	{r7, lr}
 800aa78:	b086      	sub	sp, #24
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	60f8      	str	r0, [r7, #12]
 800aa7e:	60b9      	str	r1, [r7, #8]
 800aa80:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800aa82:	2300      	movs	r3, #0
 800aa84:	617b      	str	r3, [r7, #20]
 800aa86:	e009      	b.n	800aa9c <_write+0x26>
	{
		__io_putchar(*ptr++);
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	1c5a      	adds	r2, r3, #1
 800aa8c:	60ba      	str	r2, [r7, #8]
 800aa8e:	781b      	ldrb	r3, [r3, #0]
 800aa90:	4618      	mov	r0, r3
 800aa92:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	3301      	adds	r3, #1
 800aa9a:	617b      	str	r3, [r7, #20]
 800aa9c:	697a      	ldr	r2, [r7, #20]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	dbf1      	blt.n	800aa88 <_write+0x12>
	}
	return len;
 800aaa4:	687b      	ldr	r3, [r7, #4]
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3718      	adds	r7, #24
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}

0800aaae <_close>:

int _close(int file)
{
 800aaae:	b480      	push	{r7}
 800aab0:	b083      	sub	sp, #12
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	6078      	str	r0, [r7, #4]
	return -1;
 800aab6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	370c      	adds	r7, #12
 800aabe:	46bd      	mov	sp, r7
 800aac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac4:	4770      	bx	lr

0800aac6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800aac6:	b480      	push	{r7}
 800aac8:	b083      	sub	sp, #12
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	6078      	str	r0, [r7, #4]
 800aace:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800aad6:	605a      	str	r2, [r3, #4]
	return 0;
 800aad8:	2300      	movs	r3, #0
}
 800aada:	4618      	mov	r0, r3
 800aadc:	370c      	adds	r7, #12
 800aade:	46bd      	mov	sp, r7
 800aae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae4:	4770      	bx	lr

0800aae6 <_isatty>:

int _isatty(int file)
{
 800aae6:	b480      	push	{r7}
 800aae8:	b083      	sub	sp, #12
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	6078      	str	r0, [r7, #4]
	return 1;
 800aaee:	2301      	movs	r3, #1
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	370c      	adds	r7, #12
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr

0800aafc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b085      	sub	sp, #20
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	60f8      	str	r0, [r7, #12]
 800ab04:	60b9      	str	r1, [r7, #8]
 800ab06:	607a      	str	r2, [r7, #4]
	return 0;
 800ab08:	2300      	movs	r3, #0
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3714      	adds	r7, #20
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr
	...

0800ab18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b086      	sub	sp, #24
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800ab20:	4a14      	ldr	r2, [pc, #80]	; (800ab74 <_sbrk+0x5c>)
 800ab22:	4b15      	ldr	r3, [pc, #84]	; (800ab78 <_sbrk+0x60>)
 800ab24:	1ad3      	subs	r3, r2, r3
 800ab26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800ab2c:	4b13      	ldr	r3, [pc, #76]	; (800ab7c <_sbrk+0x64>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d102      	bne.n	800ab3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800ab34:	4b11      	ldr	r3, [pc, #68]	; (800ab7c <_sbrk+0x64>)
 800ab36:	4a12      	ldr	r2, [pc, #72]	; (800ab80 <_sbrk+0x68>)
 800ab38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800ab3a:	4b10      	ldr	r3, [pc, #64]	; (800ab7c <_sbrk+0x64>)
 800ab3c:	681a      	ldr	r2, [r3, #0]
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	4413      	add	r3, r2
 800ab42:	693a      	ldr	r2, [r7, #16]
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d207      	bcs.n	800ab58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800ab48:	f000 fc78 	bl	800b43c <__errno>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	220c      	movs	r2, #12
 800ab50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800ab52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab56:	e009      	b.n	800ab6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800ab58:	4b08      	ldr	r3, [pc, #32]	; (800ab7c <_sbrk+0x64>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800ab5e:	4b07      	ldr	r3, [pc, #28]	; (800ab7c <_sbrk+0x64>)
 800ab60:	681a      	ldr	r2, [r3, #0]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	4413      	add	r3, r2
 800ab66:	4a05      	ldr	r2, [pc, #20]	; (800ab7c <_sbrk+0x64>)
 800ab68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3718      	adds	r7, #24
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}
 800ab74:	20010000 	.word	0x20010000
 800ab78:	00000400 	.word	0x00000400
 800ab7c:	20002584 	.word	0x20002584
 800ab80:	20003fa0 	.word	0x20003fa0

0800ab84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800ab84:	b480      	push	{r7}
 800ab86:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800ab88:	4b06      	ldr	r3, [pc, #24]	; (800aba4 <SystemInit+0x20>)
 800ab8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab8e:	4a05      	ldr	r2, [pc, #20]	; (800aba4 <SystemInit+0x20>)
 800ab90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ab94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800ab98:	bf00      	nop
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba0:	4770      	bx	lr
 800aba2:	bf00      	nop
 800aba4:	e000ed00 	.word	0xe000ed00

0800aba8 <board_init_peripheral_setup>:

#if defined(BOARD_SPUDGLO_V5)


static void board_init_peripheral_setup(void)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	af00      	add	r7, sp, #0
	uart_config_hal_setup();
 800abac:	f7ff fa94 	bl	800a0d8 <uart_config_hal_setup>
	spi_config_hal_setup();
 800abb0:	f7ff f9b8 	bl	8009f24 <spi_config_hal_setup>
}
 800abb4:	bf00      	nop
 800abb6:	bd80      	pop	{r7, pc}

0800abb8 <board_init_specific>:


void board_init_specific(void)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b086      	sub	sp, #24
 800abbc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800abbe:	1d3b      	adds	r3, r7, #4
 800abc0:	2200      	movs	r2, #0
 800abc2:	601a      	str	r2, [r3, #0]
 800abc4:	605a      	str	r2, [r3, #4]
 800abc6:	609a      	str	r2, [r3, #8]
 800abc8:	60da      	str	r2, [r3, #12]
 800abca:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = PIN_LVL_EN;
 800abcc:	2380      	movs	r3, #128	; 0x80
 800abce:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800abd0:	2301      	movs	r3, #1
 800abd2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abd4:	2300      	movs	r3, #0
 800abd6:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800abd8:	1d3b      	adds	r3, r7, #4
 800abda:	4619      	mov	r1, r3
 800abdc:	4825      	ldr	r0, [pc, #148]	; (800ac74 <board_init_specific+0xbc>)
 800abde:	f7fb fa29 	bl	8006034 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_LVL_EN, GPIO_PIN_RESET);
 800abe2:	2200      	movs	r2, #0
 800abe4:	2180      	movs	r1, #128	; 0x80
 800abe6:	4823      	ldr	r0, [pc, #140]	; (800ac74 <board_init_specific+0xbc>)
 800abe8:	f7fb fb9e 	bl	8006328 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_LVL_DIR;
 800abec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800abf0:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800abf2:	2301      	movs	r3, #1
 800abf4:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abf6:	2300      	movs	r3, #0
 800abf8:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800abfa:	1d3b      	adds	r3, r7, #4
 800abfc:	4619      	mov	r1, r3
 800abfe:	481d      	ldr	r0, [pc, #116]	; (800ac74 <board_init_specific+0xbc>)
 800ac00:	f7fb fa18 	bl	8006034 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_LVL_DIR, GPIO_PIN_SET);
 800ac04:	2201      	movs	r2, #1
 800ac06:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ac0a:	481a      	ldr	r0, [pc, #104]	; (800ac74 <board_init_specific+0xbc>)
 800ac0c:	f7fb fb8c 	bl	8006328 <HAL_GPIO_WritePin>

    // setup XR_RX and XR_TX
    GPIO_InitStruct.Pin = PIN_VBUS_PRESENT;
 800ac10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ac14:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ac16:	2300      	movs	r3, #0
 800ac18:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);
 800ac1e:	1d3b      	adds	r3, r7, #4
 800ac20:	4619      	mov	r1, r3
 800ac22:	4815      	ldr	r0, [pc, #84]	; (800ac78 <board_init_specific+0xc0>)
 800ac24:	f7fb fa06 	bl	8006034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_GREEN_LED;
 800ac28:	2304      	movs	r3, #4
 800ac2a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac30:	2300      	movs	r3, #0
 800ac32:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800ac34:	1d3b      	adds	r3, r7, #4
 800ac36:	4619      	mov	r1, r3
 800ac38:	480e      	ldr	r0, [pc, #56]	; (800ac74 <board_init_specific+0xbc>)
 800ac3a:	f7fb f9fb 	bl	8006034 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_GREEN_LED, GPIO_PIN_RESET);
 800ac3e:	2200      	movs	r2, #0
 800ac40:	2104      	movs	r1, #4
 800ac42:	480c      	ldr	r0, [pc, #48]	; (800ac74 <board_init_specific+0xbc>)
 800ac44:	f7fb fb70 	bl	8006328 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_RED_LED;
 800ac48:	2308      	movs	r3, #8
 800ac4a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac50:	2300      	movs	r3, #0
 800ac52:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800ac54:	1d3b      	adds	r3, r7, #4
 800ac56:	4619      	mov	r1, r3
 800ac58:	4806      	ldr	r0, [pc, #24]	; (800ac74 <board_init_specific+0xbc>)
 800ac5a:	f7fb f9eb 	bl	8006034 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_RED_LED, GPIO_PIN_RESET);
 800ac5e:	2200      	movs	r2, #0
 800ac60:	2108      	movs	r1, #8
 800ac62:	4804      	ldr	r0, [pc, #16]	; (800ac74 <board_init_specific+0xbc>)
 800ac64:	f7fb fb60 	bl	8006328 <HAL_GPIO_WritePin>

    board_init_peripheral_setup();
 800ac68:	f7ff ff9e 	bl	800aba8 <board_init_peripheral_setup>
}
 800ac6c:	bf00      	nop
 800ac6e:	3718      	adds	r7, #24
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}
 800ac74:	48000800 	.word	0x48000800
 800ac78:	48000400 	.word	0x48000400

0800ac7c <flash_info_animation_enabled>:

flash_info_block_t  g_flash_info_block;


bool flash_info_animation_enabled(led_state_e animation)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b085      	sub	sp, #20
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	4603      	mov	r3, r0
 800ac84:	71fb      	strb	r3, [r7, #7]
    bool return_val = false;
 800ac86:	2300      	movs	r3, #0
 800ac88:	73fb      	strb	r3, [r7, #15]
    switch (animation)
 800ac8a:	79fb      	ldrb	r3, [r7, #7]
 800ac8c:	2b0b      	cmp	r3, #11
 800ac8e:	f200 8089 	bhi.w	800ada4 <flash_info_animation_enabled+0x128>
 800ac92:	a201      	add	r2, pc, #4	; (adr r2, 800ac98 <flash_info_animation_enabled+0x1c>)
 800ac94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac98:	0800acc9 	.word	0x0800acc9
 800ac9c:	0800acdd 	.word	0x0800acdd
 800aca0:	0800acf1 	.word	0x0800acf1
 800aca4:	0800ad05 	.word	0x0800ad05
 800aca8:	0800ad19 	.word	0x0800ad19
 800acac:	0800ad2d 	.word	0x0800ad2d
 800acb0:	0800ad41 	.word	0x0800ad41
 800acb4:	0800ad55 	.word	0x0800ad55
 800acb8:	0800ad69 	.word	0x0800ad69
 800acbc:	0800ad7d 	.word	0x0800ad7d
 800acc0:	0800ada5 	.word	0x0800ada5
 800acc4:	0800ad91 	.word	0x0800ad91
    {
        case LED_STATE_SPELL:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.spell) return_val = true;
 800acc8:	4b45      	ldr	r3, [pc, #276]	; (800ade0 <flash_info_animation_enabled+0x164>)
 800acca:	7adb      	ldrb	r3, [r3, #11]
 800accc:	f003 0301 	and.w	r3, r3, #1
 800acd0:	b2db      	uxtb	r3, r3
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d068      	beq.n	800ada8 <flash_info_animation_enabled+0x12c>
 800acd6:	2301      	movs	r3, #1
 800acd8:	73fb      	strb	r3, [r7, #15]
        break;
 800acda:	e065      	b.n	800ada8 <flash_info_animation_enabled+0x12c>
        case LED_STATE_WHITE_COLOR:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.white) return_val = true;
 800acdc:	4b40      	ldr	r3, [pc, #256]	; (800ade0 <flash_info_animation_enabled+0x164>)
 800acde:	7adb      	ldrb	r3, [r3, #11]
 800ace0:	f003 0302 	and.w	r3, r3, #2
 800ace4:	b2db      	uxtb	r3, r3
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d060      	beq.n	800adac <flash_info_animation_enabled+0x130>
 800acea:	2301      	movs	r3, #1
 800acec:	73fb      	strb	r3, [r7, #15]
        break;
 800acee:	e05d      	b.n	800adac <flash_info_animation_enabled+0x130>
        case LED_STATE_SOLID_COLOR:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.solid) return_val = true;
 800acf0:	4b3b      	ldr	r3, [pc, #236]	; (800ade0 <flash_info_animation_enabled+0x164>)
 800acf2:	7adb      	ldrb	r3, [r3, #11]
 800acf4:	f003 0304 	and.w	r3, r3, #4
 800acf8:	b2db      	uxtb	r3, r3
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d058      	beq.n	800adb0 <flash_info_animation_enabled+0x134>
 800acfe:	2301      	movs	r3, #1
 800ad00:	73fb      	strb	r3, [r7, #15]
        break;
 800ad02:	e055      	b.n	800adb0 <flash_info_animation_enabled+0x134>
        case LED_STATE_SPARKLE_NO_FILL:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.sparkle_no_fill) return_val = true;
 800ad04:	4b36      	ldr	r3, [pc, #216]	; (800ade0 <flash_info_animation_enabled+0x164>)
 800ad06:	7adb      	ldrb	r3, [r3, #11]
 800ad08:	f003 0310 	and.w	r3, r3, #16
 800ad0c:	b2db      	uxtb	r3, r3
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d050      	beq.n	800adb4 <flash_info_animation_enabled+0x138>
 800ad12:	2301      	movs	r3, #1
 800ad14:	73fb      	strb	r3, [r7, #15]
        break;
 800ad16:	e04d      	b.n	800adb4 <flash_info_animation_enabled+0x138>
        case LED_STATE_SPARKLE_FILL:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.sparkle) return_val = true;
 800ad18:	4b31      	ldr	r3, [pc, #196]	; (800ade0 <flash_info_animation_enabled+0x164>)
 800ad1a:	7adb      	ldrb	r3, [r3, #11]
 800ad1c:	f003 0308 	and.w	r3, r3, #8
 800ad20:	b2db      	uxtb	r3, r3
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d048      	beq.n	800adb8 <flash_info_animation_enabled+0x13c>
 800ad26:	2301      	movs	r3, #1
 800ad28:	73fb      	strb	r3, [r7, #15]
        break;
 800ad2a:	e045      	b.n	800adb8 <flash_info_animation_enabled+0x13c>
        case LED_STATE_RAINBOW_CYCLE:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.rainbow) return_val = true;
 800ad2c:	4b2c      	ldr	r3, [pc, #176]	; (800ade0 <flash_info_animation_enabled+0x164>)
 800ad2e:	7adb      	ldrb	r3, [r3, #11]
 800ad30:	f003 0320 	and.w	r3, r3, #32
 800ad34:	b2db      	uxtb	r3, r3
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d040      	beq.n	800adbc <flash_info_animation_enabled+0x140>
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	73fb      	strb	r3, [r7, #15]
        break;
 800ad3e:	e03d      	b.n	800adbc <flash_info_animation_enabled+0x140>
        case LED_STATE_THEATER_CHASE:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.chase) return_val = true;
 800ad40:	4b27      	ldr	r3, [pc, #156]	; (800ade0 <flash_info_animation_enabled+0x164>)
 800ad42:	7adb      	ldrb	r3, [r3, #11]
 800ad44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad48:	b2db      	uxtb	r3, r3
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d038      	beq.n	800adc0 <flash_info_animation_enabled+0x144>
 800ad4e:	2301      	movs	r3, #1
 800ad50:	73fb      	strb	r3, [r7, #15]
        break;
 800ad52:	e035      	b.n	800adc0 <flash_info_animation_enabled+0x144>
        case LED_STATE_THEATER_CHASE_RAINBOW:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.chase_rainbow) return_val = true;
 800ad54:	4b22      	ldr	r3, [pc, #136]	; (800ade0 <flash_info_animation_enabled+0x164>)
 800ad56:	7adb      	ldrb	r3, [r3, #11]
 800ad58:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ad5c:	b2db      	uxtb	r3, r3
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d030      	beq.n	800adc4 <flash_info_animation_enabled+0x148>
 800ad62:	2301      	movs	r3, #1
 800ad64:	73fb      	strb	r3, [r7, #15]
        break;
 800ad66:	e02d      	b.n	800adc4 <flash_info_animation_enabled+0x148>
        case LED_STATE_FADE_IN_AND_OUT:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.fade) return_val = true;
 800ad68:	4b1d      	ldr	r3, [pc, #116]	; (800ade0 <flash_info_animation_enabled+0x164>)
 800ad6a:	7b1b      	ldrb	r3, [r3, #12]
 800ad6c:	f003 0301 	and.w	r3, r3, #1
 800ad70:	b2db      	uxtb	r3, r3
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d028      	beq.n	800adc8 <flash_info_animation_enabled+0x14c>
 800ad76:	2301      	movs	r3, #1
 800ad78:	73fb      	strb	r3, [r7, #15]
        break;
 800ad7a:	e025      	b.n	800adc8 <flash_info_animation_enabled+0x14c>
        case LED_STATE_TWINKLE:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.twinkle) return_val = true;
 800ad7c:	4b18      	ldr	r3, [pc, #96]	; (800ade0 <flash_info_animation_enabled+0x164>)
 800ad7e:	7b1b      	ldrb	r3, [r3, #12]
 800ad80:	f003 0302 	and.w	r3, r3, #2
 800ad84:	b2db      	uxtb	r3, r3
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d020      	beq.n	800adcc <flash_info_animation_enabled+0x150>
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	73fb      	strb	r3, [r7, #15]
        break;
 800ad8e:	e01d      	b.n	800adcc <flash_info_animation_enabled+0x150>
        case LED_STATE_SRW_DEBUG:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.white) return_val = true;
 800ad90:	4b13      	ldr	r3, [pc, #76]	; (800ade0 <flash_info_animation_enabled+0x164>)
 800ad92:	7adb      	ldrb	r3, [r3, #11]
 800ad94:	f003 0302 	and.w	r3, r3, #2
 800ad98:	b2db      	uxtb	r3, r3
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d018      	beq.n	800add0 <flash_info_animation_enabled+0x154>
 800ad9e:	2301      	movs	r3, #1
 800ada0:	73fb      	strb	r3, [r7, #15]
        break;
 800ada2:	e015      	b.n	800add0 <flash_info_animation_enabled+0x154>
        default:
        break;
 800ada4:	bf00      	nop
 800ada6:	e014      	b.n	800add2 <flash_info_animation_enabled+0x156>
        break;
 800ada8:	bf00      	nop
 800adaa:	e012      	b.n	800add2 <flash_info_animation_enabled+0x156>
        break;
 800adac:	bf00      	nop
 800adae:	e010      	b.n	800add2 <flash_info_animation_enabled+0x156>
        break;
 800adb0:	bf00      	nop
 800adb2:	e00e      	b.n	800add2 <flash_info_animation_enabled+0x156>
        break;
 800adb4:	bf00      	nop
 800adb6:	e00c      	b.n	800add2 <flash_info_animation_enabled+0x156>
        break;
 800adb8:	bf00      	nop
 800adba:	e00a      	b.n	800add2 <flash_info_animation_enabled+0x156>
        break;
 800adbc:	bf00      	nop
 800adbe:	e008      	b.n	800add2 <flash_info_animation_enabled+0x156>
        break;
 800adc0:	bf00      	nop
 800adc2:	e006      	b.n	800add2 <flash_info_animation_enabled+0x156>
        break;
 800adc4:	bf00      	nop
 800adc6:	e004      	b.n	800add2 <flash_info_animation_enabled+0x156>
        break;
 800adc8:	bf00      	nop
 800adca:	e002      	b.n	800add2 <flash_info_animation_enabled+0x156>
        break;
 800adcc:	bf00      	nop
 800adce:	e000      	b.n	800add2 <flash_info_animation_enabled+0x156>
        break;
 800add0:	bf00      	nop
    }
    return return_val;
 800add2:	7bfb      	ldrb	r3, [r7, #15]
}
 800add4:	4618      	mov	r0, r3
 800add6:	3714      	adds	r7, #20
 800add8:	46bd      	mov	sp, r7
 800adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adde:	4770      	bx	lr
 800ade0:	20002588 	.word	0x20002588

0800ade4 <flash_info_block_init>:


void flash_info_block_init(void)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	af00      	add	r7, sp, #0
    g_flash_info_block.flash_info_data.uuid.data[0] = HAL_GetUIDw0();
 800ade8:	f7fa fd3c 	bl	8005864 <HAL_GetUIDw0>
 800adec:	4603      	mov	r3, r0
 800adee:	4a32      	ldr	r2, [pc, #200]	; (800aeb8 <flash_info_block_init+0xd4>)
 800adf0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    g_flash_info_block.flash_info_data.uuid.data[1] = HAL_GetUIDw1();
 800adf4:	f7fa fd42 	bl	800587c <HAL_GetUIDw1>
 800adf8:	4603      	mov	r3, r0
 800adfa:	4a2f      	ldr	r2, [pc, #188]	; (800aeb8 <flash_info_block_init+0xd4>)
 800adfc:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    g_flash_info_block.flash_info_data.uuid.data[2] = HAL_GetUIDw2();
 800ae00:	f7fa fd48 	bl	8005894 <HAL_GetUIDw2>
 800ae04:	4603      	mov	r3, r0
 800ae06:	4a2c      	ldr	r2, [pc, #176]	; (800aeb8 <flash_info_block_init+0xd4>)
 800ae08:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    g_flash_info_block.flash_info_data.strip_info.num_strips = 1;
 800ae0c:	4b2a      	ldr	r3, [pc, #168]	; (800aeb8 <flash_info_block_init+0xd4>)
 800ae0e:	2201      	movs	r2, #1
 800ae10:	701a      	strb	r2, [r3, #0]
    g_flash_info_block.flash_info_data.strip_info.strip_sync_animation = 1;
 800ae12:	4b29      	ldr	r3, [pc, #164]	; (800aeb8 <flash_info_block_init+0xd4>)
 800ae14:	2201      	movs	r2, #1
 800ae16:	705a      	strb	r2, [r3, #1]
    g_flash_info_block.flash_info_data.strip_info.strip_length_one = 1;
 800ae18:	4b27      	ldr	r3, [pc, #156]	; (800aeb8 <flash_info_block_init+0xd4>)
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	805a      	strh	r2, [r3, #2]
    g_flash_info_block.flash_info_data.strip_info.strip_length_two = 1;
 800ae1e:	4b26      	ldr	r3, [pc, #152]	; (800aeb8 <flash_info_block_init+0xd4>)
 800ae20:	2201      	movs	r2, #1
 800ae22:	809a      	strh	r2, [r3, #4]
    g_flash_info_block.flash_info_data.strip_info.strip_length_three = 1;
 800ae24:	4b24      	ldr	r3, [pc, #144]	; (800aeb8 <flash_info_block_init+0xd4>)
 800ae26:	2201      	movs	r2, #1
 800ae28:	80da      	strh	r2, [r3, #6]
    g_flash_info_block.flash_info_data.strip_info.strip_one_brightness = 1;
 800ae2a:	4b23      	ldr	r3, [pc, #140]	; (800aeb8 <flash_info_block_init+0xd4>)
 800ae2c:	2201      	movs	r2, #1
 800ae2e:	721a      	strb	r2, [r3, #8]
    g_flash_info_block.flash_info_data.strip_info.strip_two_brightness = 1;
 800ae30:	4b21      	ldr	r3, [pc, #132]	; (800aeb8 <flash_info_block_init+0xd4>)
 800ae32:	2201      	movs	r2, #1
 800ae34:	725a      	strb	r2, [r3, #9]
    g_flash_info_block.flash_info_data.strip_info.strip_three_brightness = 1;
 800ae36:	4b20      	ldr	r3, [pc, #128]	; (800aeb8 <flash_info_block_init+0xd4>)
 800ae38:	2201      	movs	r2, #1
 800ae3a:	729a      	strb	r2, [r3, #10]
    g_flash_info_block.flash_info_data.strip_info.strip_one_brightness = 1;
 800ae3c:	4b1e      	ldr	r3, [pc, #120]	; (800aeb8 <flash_info_block_init+0xd4>)
 800ae3e:	2201      	movs	r2, #1
 800ae40:	721a      	strb	r2, [r3, #8]

    g_flash_info_block.flash_info_data.strip_info.strip_two_brightness = 1;
 800ae42:	4b1d      	ldr	r3, [pc, #116]	; (800aeb8 <flash_info_block_init+0xd4>)
 800ae44:	2201      	movs	r2, #1
 800ae46:	725a      	strb	r2, [r3, #9]
    g_flash_info_block.flash_info_data.strip_info.strip_three_brightness = 1;
 800ae48:	4b1b      	ldr	r3, [pc, #108]	; (800aeb8 <flash_info_block_init+0xd4>)
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	729a      	strb	r2, [r3, #10]

    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.spell = 1;
 800ae4e:	4a1a      	ldr	r2, [pc, #104]	; (800aeb8 <flash_info_block_init+0xd4>)
 800ae50:	7ad3      	ldrb	r3, [r2, #11]
 800ae52:	f043 0301 	orr.w	r3, r3, #1
 800ae56:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.white = 1;
 800ae58:	4a17      	ldr	r2, [pc, #92]	; (800aeb8 <flash_info_block_init+0xd4>)
 800ae5a:	7ad3      	ldrb	r3, [r2, #11]
 800ae5c:	f043 0302 	orr.w	r3, r3, #2
 800ae60:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.solid = 1;
 800ae62:	4a15      	ldr	r2, [pc, #84]	; (800aeb8 <flash_info_block_init+0xd4>)
 800ae64:	7ad3      	ldrb	r3, [r2, #11]
 800ae66:	f043 0304 	orr.w	r3, r3, #4
 800ae6a:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.sparkle = 1;
 800ae6c:	4a12      	ldr	r2, [pc, #72]	; (800aeb8 <flash_info_block_init+0xd4>)
 800ae6e:	7ad3      	ldrb	r3, [r2, #11]
 800ae70:	f043 0308 	orr.w	r3, r3, #8
 800ae74:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.sparkle_no_fill = 1;
 800ae76:	4a10      	ldr	r2, [pc, #64]	; (800aeb8 <flash_info_block_init+0xd4>)
 800ae78:	7ad3      	ldrb	r3, [r2, #11]
 800ae7a:	f043 0310 	orr.w	r3, r3, #16
 800ae7e:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.rainbow = 1;
 800ae80:	4a0d      	ldr	r2, [pc, #52]	; (800aeb8 <flash_info_block_init+0xd4>)
 800ae82:	7ad3      	ldrb	r3, [r2, #11]
 800ae84:	f043 0320 	orr.w	r3, r3, #32
 800ae88:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.chase = 1;
 800ae8a:	4a0b      	ldr	r2, [pc, #44]	; (800aeb8 <flash_info_block_init+0xd4>)
 800ae8c:	7ad3      	ldrb	r3, [r2, #11]
 800ae8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae92:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.chase_rainbow = 1;
 800ae94:	4a08      	ldr	r2, [pc, #32]	; (800aeb8 <flash_info_block_init+0xd4>)
 800ae96:	7ad3      	ldrb	r3, [r2, #11]
 800ae98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae9c:	72d3      	strb	r3, [r2, #11]

    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.fade = 1;
 800ae9e:	4a06      	ldr	r2, [pc, #24]	; (800aeb8 <flash_info_block_init+0xd4>)
 800aea0:	7b13      	ldrb	r3, [r2, #12]
 800aea2:	f043 0301 	orr.w	r3, r3, #1
 800aea6:	7313      	strb	r3, [r2, #12]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.twinkle = 1;
 800aea8:	4a03      	ldr	r2, [pc, #12]	; (800aeb8 <flash_info_block_init+0xd4>)
 800aeaa:	7b13      	ldrb	r3, [r2, #12]
 800aeac:	f043 0302 	orr.w	r3, r3, #2
 800aeb0:	7313      	strb	r3, [r2, #12]
    //g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.rsvd0 = 1; // future
    //g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.rsvd1 = 1; // future
    //g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.rsvd2 = 1; // future

    // need to write to flash!
}
 800aeb2:	bf00      	nop
 800aeb4:	bd80      	pop	{r7, pc}
 800aeb6:	bf00      	nop
 800aeb8:	20002588 	.word	0x20002588

0800aebc <flash_info_init>:
}


uint32_t temp = 0;
void flash_info_init(void)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	af00      	add	r7, sp, #0
    temp = sizeof(flash_info_data_t);
 800aec0:	4b0d      	ldr	r3, [pc, #52]	; (800aef8 <flash_info_init+0x3c>)
 800aec2:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800aec6:	601a      	str	r2, [r3, #0]
    flash_info_block_init();
 800aec8:	f7ff ff8c 	bl	800ade4 <flash_info_block_init>
    //flash_access_read_flash_info_sector(g_flash_info_block.flat_data_uint32);
    if ((UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[0]) &&
 800aecc:	4b0b      	ldr	r3, [pc, #44]	; (800aefc <flash_info_init+0x40>)
 800aece:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800aed2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aed6:	d10d      	bne.n	800aef4 <flash_info_init+0x38>
                    (UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[1]) &&
 800aed8:	4b08      	ldr	r3, [pc, #32]	; (800aefc <flash_info_init+0x40>)
 800aeda:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    if ((UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[0]) &&
 800aede:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aee2:	d107      	bne.n	800aef4 <flash_info_init+0x38>
                    (UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[2]))
 800aee4:	4b05      	ldr	r3, [pc, #20]	; (800aefc <flash_info_init+0x40>)
 800aee6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
                    (UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[1]) &&
 800aeea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aeee:	d101      	bne.n	800aef4 <flash_info_init+0x38>
    {
        flash_info_block_init();
 800aef0:	f7ff ff78 	bl	800ade4 <flash_info_block_init>
    }
}
 800aef4:	bf00      	nop
 800aef6:	bd80      	pop	{r7, pc}
 800aef8:	20002d88 	.word	0x20002d88
 800aefc:	20002588 	.word	0x20002588

0800af00 <random_num>:
#include <stdint.h>
#include <stdlib.h>
#include "numbers.h"

uint32_t random_num(uint32_t min, uint32_t max)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b082      	sub	sp, #8
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	6039      	str	r1, [r7, #0]
   return min + rand() % (max - min);
 800af0a:	f000 f953 	bl	800b1b4 <rand>
 800af0e:	4603      	mov	r3, r0
 800af10:	461a      	mov	r2, r3
 800af12:	6839      	ldr	r1, [r7, #0]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	1acb      	subs	r3, r1, r3
 800af18:	fbb2 f1f3 	udiv	r1, r2, r3
 800af1c:	fb01 f303 	mul.w	r3, r1, r3
 800af20:	1ad2      	subs	r2, r2, r3
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	4413      	add	r3, r2
}
 800af26:	4618      	mov	r0, r3
 800af28:	3708      	adds	r7, #8
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}

0800af2e <main>:
#include "task_create.h"
#include "animate_led.h"
#include "flash_info.h"

int main(void)
{
 800af2e:	b580      	push	{r7, lr}
 800af30:	af00      	add	r7, sp, #0
    board_init_common_board_init();
 800af32:	f7fe ffd5 	bl	8009ee0 <board_init_common_board_init>
    flash_info_init();
 800af36:	f7ff ffc1 	bl	800aebc <flash_info_init>
    task_create();
 800af3a:	f000 f807 	bl	800af4c <task_create>
	//semaphore_create();
    reset_ws2812b();
 800af3e:	f7f6 fd91 	bl	8001a64 <reset_ws2812b>
	osKernelStart();
 800af42:	f7f7 fd97 	bl	8002a74 <osKernelStart>
 800af46:	2300      	movs	r3, #0
}
 800af48:	4618      	mov	r0, r3
 800af4a:	bd80      	pop	{r7, pc}

0800af4c <task_create>:
	.priority = (osPriority_t) osPriorityNormal,
};


void task_create(void)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	af00      	add	r7, sp, #0
    osKernelInitialize();
 800af50:	f7f7 fd6c 	bl	8002a2c <osKernelInitialize>
	g_button_press_handle = osThreadNew(task_button_press, NULL, &g_task_button_press_attributes);
 800af54:	4a0a      	ldr	r2, [pc, #40]	; (800af80 <task_create+0x34>)
 800af56:	2100      	movs	r1, #0
 800af58:	480a      	ldr	r0, [pc, #40]	; (800af84 <task_create+0x38>)
 800af5a:	f7f7 fdb1 	bl	8002ac0 <osThreadNew>
 800af5e:	4603      	mov	r3, r0
 800af60:	4a09      	ldr	r2, [pc, #36]	; (800af88 <task_create+0x3c>)
 800af62:	6013      	str	r3, [r2, #0]
    //g_dma_transfer_handle = osThreadNew(task_dma_transfer, NULL, &g_task_dma_transfer_attributes);
    g_led_strip_1_ctrl_handle = osThreadNew(task_led_ctrl_strip_one, NULL, &g_task_strip_1_led_ctrl_attributes);
 800af64:	4a09      	ldr	r2, [pc, #36]	; (800af8c <task_create+0x40>)
 800af66:	2100      	movs	r1, #0
 800af68:	4809      	ldr	r0, [pc, #36]	; (800af90 <task_create+0x44>)
 800af6a:	f7f7 fda9 	bl	8002ac0 <osThreadNew>
 800af6e:	4603      	mov	r3, r0
 800af70:	4a08      	ldr	r2, [pc, #32]	; (800af94 <task_create+0x48>)
 800af72:	6013      	str	r3, [r2, #0]
    g_tasks_running = true; // technically will be running after task scheduler started
 800af74:	4b08      	ldr	r3, [pc, #32]	; (800af98 <task_create+0x4c>)
 800af76:	2201      	movs	r2, #1
 800af78:	701a      	strb	r2, [r3, #0]
}
 800af7a:	bf00      	nop
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	bf00      	nop
 800af80:	0800c1f0 	.word	0x0800c1f0
 800af84:	08002101 	.word	0x08002101
 800af88:	20002d90 	.word	0x20002d90
 800af8c:	0800c214 	.word	0x0800c214
 800af90:	080023dd 	.word	0x080023dd
 800af94:	20002d8c 	.word	0x20002d8c
 800af98:	20003e4c 	.word	0x20003e4c

0800af9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800af9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800afd4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800afa0:	f7ff fdf0 	bl	800ab84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800afa4:	480c      	ldr	r0, [pc, #48]	; (800afd8 <LoopForever+0x6>)
  ldr r1, =_edata
 800afa6:	490d      	ldr	r1, [pc, #52]	; (800afdc <LoopForever+0xa>)
  ldr r2, =_sidata
 800afa8:	4a0d      	ldr	r2, [pc, #52]	; (800afe0 <LoopForever+0xe>)
  movs r3, #0
 800afaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800afac:	e002      	b.n	800afb4 <LoopCopyDataInit>

0800afae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800afae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800afb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800afb2:	3304      	adds	r3, #4

0800afb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800afb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800afb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800afb8:	d3f9      	bcc.n	800afae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800afba:	4a0a      	ldr	r2, [pc, #40]	; (800afe4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800afbc:	4c0a      	ldr	r4, [pc, #40]	; (800afe8 <LoopForever+0x16>)
  movs r3, #0
 800afbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 800afc0:	e001      	b.n	800afc6 <LoopFillZerobss>

0800afc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800afc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800afc4:	3204      	adds	r2, #4

0800afc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800afc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800afc8:	d3fb      	bcc.n	800afc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800afca:	f000 fa3d 	bl	800b448 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800afce:	f7ff ffae 	bl	800af2e <main>

0800afd2 <LoopForever>:

LoopForever:
    b LoopForever
 800afd2:	e7fe      	b.n	800afd2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800afd4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800afd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800afdc:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 800afe0:	0800c328 	.word	0x0800c328
  ldr r2, =_sbss
 800afe4:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 800afe8:	20003f9c 	.word	0x20003f9c

0800afec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800afec:	e7fe      	b.n	800afec <ADC1_IRQHandler>
	...

0800aff0 <malloc>:
 800aff0:	4b02      	ldr	r3, [pc, #8]	; (800affc <malloc+0xc>)
 800aff2:	4601      	mov	r1, r0
 800aff4:	6818      	ldr	r0, [r3, #0]
 800aff6:	f000 b823 	b.w	800b040 <_malloc_r>
 800affa:	bf00      	nop
 800affc:	2000023c 	.word	0x2000023c

0800b000 <sbrk_aligned>:
 800b000:	b570      	push	{r4, r5, r6, lr}
 800b002:	4e0e      	ldr	r6, [pc, #56]	; (800b03c <sbrk_aligned+0x3c>)
 800b004:	460c      	mov	r4, r1
 800b006:	6831      	ldr	r1, [r6, #0]
 800b008:	4605      	mov	r5, r0
 800b00a:	b911      	cbnz	r1, 800b012 <sbrk_aligned+0x12>
 800b00c:	f000 fa06 	bl	800b41c <_sbrk_r>
 800b010:	6030      	str	r0, [r6, #0]
 800b012:	4621      	mov	r1, r4
 800b014:	4628      	mov	r0, r5
 800b016:	f000 fa01 	bl	800b41c <_sbrk_r>
 800b01a:	1c43      	adds	r3, r0, #1
 800b01c:	d00a      	beq.n	800b034 <sbrk_aligned+0x34>
 800b01e:	1cc4      	adds	r4, r0, #3
 800b020:	f024 0403 	bic.w	r4, r4, #3
 800b024:	42a0      	cmp	r0, r4
 800b026:	d007      	beq.n	800b038 <sbrk_aligned+0x38>
 800b028:	1a21      	subs	r1, r4, r0
 800b02a:	4628      	mov	r0, r5
 800b02c:	f000 f9f6 	bl	800b41c <_sbrk_r>
 800b030:	3001      	adds	r0, #1
 800b032:	d101      	bne.n	800b038 <sbrk_aligned+0x38>
 800b034:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b038:	4620      	mov	r0, r4
 800b03a:	bd70      	pop	{r4, r5, r6, pc}
 800b03c:	20003e54 	.word	0x20003e54

0800b040 <_malloc_r>:
 800b040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b044:	1ccd      	adds	r5, r1, #3
 800b046:	f025 0503 	bic.w	r5, r5, #3
 800b04a:	3508      	adds	r5, #8
 800b04c:	2d0c      	cmp	r5, #12
 800b04e:	bf38      	it	cc
 800b050:	250c      	movcc	r5, #12
 800b052:	2d00      	cmp	r5, #0
 800b054:	4607      	mov	r7, r0
 800b056:	db01      	blt.n	800b05c <_malloc_r+0x1c>
 800b058:	42a9      	cmp	r1, r5
 800b05a:	d905      	bls.n	800b068 <_malloc_r+0x28>
 800b05c:	230c      	movs	r3, #12
 800b05e:	603b      	str	r3, [r7, #0]
 800b060:	2600      	movs	r6, #0
 800b062:	4630      	mov	r0, r6
 800b064:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b068:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b13c <_malloc_r+0xfc>
 800b06c:	f000 f868 	bl	800b140 <__malloc_lock>
 800b070:	f8d8 3000 	ldr.w	r3, [r8]
 800b074:	461c      	mov	r4, r3
 800b076:	bb5c      	cbnz	r4, 800b0d0 <_malloc_r+0x90>
 800b078:	4629      	mov	r1, r5
 800b07a:	4638      	mov	r0, r7
 800b07c:	f7ff ffc0 	bl	800b000 <sbrk_aligned>
 800b080:	1c43      	adds	r3, r0, #1
 800b082:	4604      	mov	r4, r0
 800b084:	d155      	bne.n	800b132 <_malloc_r+0xf2>
 800b086:	f8d8 4000 	ldr.w	r4, [r8]
 800b08a:	4626      	mov	r6, r4
 800b08c:	2e00      	cmp	r6, #0
 800b08e:	d145      	bne.n	800b11c <_malloc_r+0xdc>
 800b090:	2c00      	cmp	r4, #0
 800b092:	d048      	beq.n	800b126 <_malloc_r+0xe6>
 800b094:	6823      	ldr	r3, [r4, #0]
 800b096:	4631      	mov	r1, r6
 800b098:	4638      	mov	r0, r7
 800b09a:	eb04 0903 	add.w	r9, r4, r3
 800b09e:	f000 f9bd 	bl	800b41c <_sbrk_r>
 800b0a2:	4581      	cmp	r9, r0
 800b0a4:	d13f      	bne.n	800b126 <_malloc_r+0xe6>
 800b0a6:	6821      	ldr	r1, [r4, #0]
 800b0a8:	1a6d      	subs	r5, r5, r1
 800b0aa:	4629      	mov	r1, r5
 800b0ac:	4638      	mov	r0, r7
 800b0ae:	f7ff ffa7 	bl	800b000 <sbrk_aligned>
 800b0b2:	3001      	adds	r0, #1
 800b0b4:	d037      	beq.n	800b126 <_malloc_r+0xe6>
 800b0b6:	6823      	ldr	r3, [r4, #0]
 800b0b8:	442b      	add	r3, r5
 800b0ba:	6023      	str	r3, [r4, #0]
 800b0bc:	f8d8 3000 	ldr.w	r3, [r8]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d038      	beq.n	800b136 <_malloc_r+0xf6>
 800b0c4:	685a      	ldr	r2, [r3, #4]
 800b0c6:	42a2      	cmp	r2, r4
 800b0c8:	d12b      	bne.n	800b122 <_malloc_r+0xe2>
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	605a      	str	r2, [r3, #4]
 800b0ce:	e00f      	b.n	800b0f0 <_malloc_r+0xb0>
 800b0d0:	6822      	ldr	r2, [r4, #0]
 800b0d2:	1b52      	subs	r2, r2, r5
 800b0d4:	d41f      	bmi.n	800b116 <_malloc_r+0xd6>
 800b0d6:	2a0b      	cmp	r2, #11
 800b0d8:	d917      	bls.n	800b10a <_malloc_r+0xca>
 800b0da:	1961      	adds	r1, r4, r5
 800b0dc:	42a3      	cmp	r3, r4
 800b0de:	6025      	str	r5, [r4, #0]
 800b0e0:	bf18      	it	ne
 800b0e2:	6059      	strne	r1, [r3, #4]
 800b0e4:	6863      	ldr	r3, [r4, #4]
 800b0e6:	bf08      	it	eq
 800b0e8:	f8c8 1000 	streq.w	r1, [r8]
 800b0ec:	5162      	str	r2, [r4, r5]
 800b0ee:	604b      	str	r3, [r1, #4]
 800b0f0:	4638      	mov	r0, r7
 800b0f2:	f104 060b 	add.w	r6, r4, #11
 800b0f6:	f000 f829 	bl	800b14c <__malloc_unlock>
 800b0fa:	f026 0607 	bic.w	r6, r6, #7
 800b0fe:	1d23      	adds	r3, r4, #4
 800b100:	1af2      	subs	r2, r6, r3
 800b102:	d0ae      	beq.n	800b062 <_malloc_r+0x22>
 800b104:	1b9b      	subs	r3, r3, r6
 800b106:	50a3      	str	r3, [r4, r2]
 800b108:	e7ab      	b.n	800b062 <_malloc_r+0x22>
 800b10a:	42a3      	cmp	r3, r4
 800b10c:	6862      	ldr	r2, [r4, #4]
 800b10e:	d1dd      	bne.n	800b0cc <_malloc_r+0x8c>
 800b110:	f8c8 2000 	str.w	r2, [r8]
 800b114:	e7ec      	b.n	800b0f0 <_malloc_r+0xb0>
 800b116:	4623      	mov	r3, r4
 800b118:	6864      	ldr	r4, [r4, #4]
 800b11a:	e7ac      	b.n	800b076 <_malloc_r+0x36>
 800b11c:	4634      	mov	r4, r6
 800b11e:	6876      	ldr	r6, [r6, #4]
 800b120:	e7b4      	b.n	800b08c <_malloc_r+0x4c>
 800b122:	4613      	mov	r3, r2
 800b124:	e7cc      	b.n	800b0c0 <_malloc_r+0x80>
 800b126:	230c      	movs	r3, #12
 800b128:	603b      	str	r3, [r7, #0]
 800b12a:	4638      	mov	r0, r7
 800b12c:	f000 f80e 	bl	800b14c <__malloc_unlock>
 800b130:	e797      	b.n	800b062 <_malloc_r+0x22>
 800b132:	6025      	str	r5, [r4, #0]
 800b134:	e7dc      	b.n	800b0f0 <_malloc_r+0xb0>
 800b136:	605b      	str	r3, [r3, #4]
 800b138:	deff      	udf	#255	; 0xff
 800b13a:	bf00      	nop
 800b13c:	20003e50 	.word	0x20003e50

0800b140 <__malloc_lock>:
 800b140:	4801      	ldr	r0, [pc, #4]	; (800b148 <__malloc_lock+0x8>)
 800b142:	f000 b9a6 	b.w	800b492 <__retarget_lock_acquire_recursive>
 800b146:	bf00      	nop
 800b148:	20003f94 	.word	0x20003f94

0800b14c <__malloc_unlock>:
 800b14c:	4801      	ldr	r0, [pc, #4]	; (800b154 <__malloc_unlock+0x8>)
 800b14e:	f000 b9a1 	b.w	800b494 <__retarget_lock_release_recursive>
 800b152:	bf00      	nop
 800b154:	20003f94 	.word	0x20003f94

0800b158 <srand>:
 800b158:	b538      	push	{r3, r4, r5, lr}
 800b15a:	4b10      	ldr	r3, [pc, #64]	; (800b19c <srand+0x44>)
 800b15c:	681d      	ldr	r5, [r3, #0]
 800b15e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b160:	4604      	mov	r4, r0
 800b162:	b9b3      	cbnz	r3, 800b192 <srand+0x3a>
 800b164:	2018      	movs	r0, #24
 800b166:	f7ff ff43 	bl	800aff0 <malloc>
 800b16a:	4602      	mov	r2, r0
 800b16c:	6328      	str	r0, [r5, #48]	; 0x30
 800b16e:	b920      	cbnz	r0, 800b17a <srand+0x22>
 800b170:	4b0b      	ldr	r3, [pc, #44]	; (800b1a0 <srand+0x48>)
 800b172:	480c      	ldr	r0, [pc, #48]	; (800b1a4 <srand+0x4c>)
 800b174:	2146      	movs	r1, #70	; 0x46
 800b176:	f000 f99d 	bl	800b4b4 <__assert_func>
 800b17a:	490b      	ldr	r1, [pc, #44]	; (800b1a8 <srand+0x50>)
 800b17c:	4b0b      	ldr	r3, [pc, #44]	; (800b1ac <srand+0x54>)
 800b17e:	e9c0 1300 	strd	r1, r3, [r0]
 800b182:	4b0b      	ldr	r3, [pc, #44]	; (800b1b0 <srand+0x58>)
 800b184:	6083      	str	r3, [r0, #8]
 800b186:	230b      	movs	r3, #11
 800b188:	8183      	strh	r3, [r0, #12]
 800b18a:	2100      	movs	r1, #0
 800b18c:	2001      	movs	r0, #1
 800b18e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b192:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b194:	2200      	movs	r2, #0
 800b196:	611c      	str	r4, [r3, #16]
 800b198:	615a      	str	r2, [r3, #20]
 800b19a:	bd38      	pop	{r3, r4, r5, pc}
 800b19c:	2000023c 	.word	0x2000023c
 800b1a0:	0800c238 	.word	0x0800c238
 800b1a4:	0800c24f 	.word	0x0800c24f
 800b1a8:	abcd330e 	.word	0xabcd330e
 800b1ac:	e66d1234 	.word	0xe66d1234
 800b1b0:	0005deec 	.word	0x0005deec

0800b1b4 <rand>:
 800b1b4:	4b16      	ldr	r3, [pc, #88]	; (800b210 <rand+0x5c>)
 800b1b6:	b510      	push	{r4, lr}
 800b1b8:	681c      	ldr	r4, [r3, #0]
 800b1ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b1bc:	b9b3      	cbnz	r3, 800b1ec <rand+0x38>
 800b1be:	2018      	movs	r0, #24
 800b1c0:	f7ff ff16 	bl	800aff0 <malloc>
 800b1c4:	4602      	mov	r2, r0
 800b1c6:	6320      	str	r0, [r4, #48]	; 0x30
 800b1c8:	b920      	cbnz	r0, 800b1d4 <rand+0x20>
 800b1ca:	4b12      	ldr	r3, [pc, #72]	; (800b214 <rand+0x60>)
 800b1cc:	4812      	ldr	r0, [pc, #72]	; (800b218 <rand+0x64>)
 800b1ce:	2152      	movs	r1, #82	; 0x52
 800b1d0:	f000 f970 	bl	800b4b4 <__assert_func>
 800b1d4:	4911      	ldr	r1, [pc, #68]	; (800b21c <rand+0x68>)
 800b1d6:	4b12      	ldr	r3, [pc, #72]	; (800b220 <rand+0x6c>)
 800b1d8:	e9c0 1300 	strd	r1, r3, [r0]
 800b1dc:	4b11      	ldr	r3, [pc, #68]	; (800b224 <rand+0x70>)
 800b1de:	6083      	str	r3, [r0, #8]
 800b1e0:	230b      	movs	r3, #11
 800b1e2:	8183      	strh	r3, [r0, #12]
 800b1e4:	2100      	movs	r1, #0
 800b1e6:	2001      	movs	r0, #1
 800b1e8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b1ec:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b1ee:	480e      	ldr	r0, [pc, #56]	; (800b228 <rand+0x74>)
 800b1f0:	690b      	ldr	r3, [r1, #16]
 800b1f2:	694c      	ldr	r4, [r1, #20]
 800b1f4:	4a0d      	ldr	r2, [pc, #52]	; (800b22c <rand+0x78>)
 800b1f6:	4358      	muls	r0, r3
 800b1f8:	fb02 0004 	mla	r0, r2, r4, r0
 800b1fc:	fba3 3202 	umull	r3, r2, r3, r2
 800b200:	3301      	adds	r3, #1
 800b202:	eb40 0002 	adc.w	r0, r0, r2
 800b206:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800b20a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b20e:	bd10      	pop	{r4, pc}
 800b210:	2000023c 	.word	0x2000023c
 800b214:	0800c238 	.word	0x0800c238
 800b218:	0800c24f 	.word	0x0800c24f
 800b21c:	abcd330e 	.word	0xabcd330e
 800b220:	e66d1234 	.word	0xe66d1234
 800b224:	0005deec 	.word	0x0005deec
 800b228:	5851f42d 	.word	0x5851f42d
 800b22c:	4c957f2d 	.word	0x4c957f2d

0800b230 <std>:
 800b230:	2300      	movs	r3, #0
 800b232:	b510      	push	{r4, lr}
 800b234:	4604      	mov	r4, r0
 800b236:	e9c0 3300 	strd	r3, r3, [r0]
 800b23a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b23e:	6083      	str	r3, [r0, #8]
 800b240:	8181      	strh	r1, [r0, #12]
 800b242:	6643      	str	r3, [r0, #100]	; 0x64
 800b244:	81c2      	strh	r2, [r0, #14]
 800b246:	6183      	str	r3, [r0, #24]
 800b248:	4619      	mov	r1, r3
 800b24a:	2208      	movs	r2, #8
 800b24c:	305c      	adds	r0, #92	; 0x5c
 800b24e:	f000 f8b1 	bl	800b3b4 <memset>
 800b252:	4b0d      	ldr	r3, [pc, #52]	; (800b288 <std+0x58>)
 800b254:	6263      	str	r3, [r4, #36]	; 0x24
 800b256:	4b0d      	ldr	r3, [pc, #52]	; (800b28c <std+0x5c>)
 800b258:	62a3      	str	r3, [r4, #40]	; 0x28
 800b25a:	4b0d      	ldr	r3, [pc, #52]	; (800b290 <std+0x60>)
 800b25c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b25e:	4b0d      	ldr	r3, [pc, #52]	; (800b294 <std+0x64>)
 800b260:	6323      	str	r3, [r4, #48]	; 0x30
 800b262:	4b0d      	ldr	r3, [pc, #52]	; (800b298 <std+0x68>)
 800b264:	6224      	str	r4, [r4, #32]
 800b266:	429c      	cmp	r4, r3
 800b268:	d006      	beq.n	800b278 <std+0x48>
 800b26a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b26e:	4294      	cmp	r4, r2
 800b270:	d002      	beq.n	800b278 <std+0x48>
 800b272:	33d0      	adds	r3, #208	; 0xd0
 800b274:	429c      	cmp	r4, r3
 800b276:	d105      	bne.n	800b284 <std+0x54>
 800b278:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b27c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b280:	f000 b906 	b.w	800b490 <__retarget_lock_init_recursive>
 800b284:	bd10      	pop	{r4, pc}
 800b286:	bf00      	nop
 800b288:	0800b6e5 	.word	0x0800b6e5
 800b28c:	0800b707 	.word	0x0800b707
 800b290:	0800b73f 	.word	0x0800b73f
 800b294:	0800b763 	.word	0x0800b763
 800b298:	20003e58 	.word	0x20003e58

0800b29c <stdio_exit_handler>:
 800b29c:	4a02      	ldr	r2, [pc, #8]	; (800b2a8 <stdio_exit_handler+0xc>)
 800b29e:	4903      	ldr	r1, [pc, #12]	; (800b2ac <stdio_exit_handler+0x10>)
 800b2a0:	4803      	ldr	r0, [pc, #12]	; (800b2b0 <stdio_exit_handler+0x14>)
 800b2a2:	f000 b869 	b.w	800b378 <_fwalk_sglue>
 800b2a6:	bf00      	nop
 800b2a8:	200001e4 	.word	0x200001e4
 800b2ac:	0800b695 	.word	0x0800b695
 800b2b0:	200001f0 	.word	0x200001f0

0800b2b4 <cleanup_stdio>:
 800b2b4:	6841      	ldr	r1, [r0, #4]
 800b2b6:	4b0c      	ldr	r3, [pc, #48]	; (800b2e8 <cleanup_stdio+0x34>)
 800b2b8:	4299      	cmp	r1, r3
 800b2ba:	b510      	push	{r4, lr}
 800b2bc:	4604      	mov	r4, r0
 800b2be:	d001      	beq.n	800b2c4 <cleanup_stdio+0x10>
 800b2c0:	f000 f9e8 	bl	800b694 <_fflush_r>
 800b2c4:	68a1      	ldr	r1, [r4, #8]
 800b2c6:	4b09      	ldr	r3, [pc, #36]	; (800b2ec <cleanup_stdio+0x38>)
 800b2c8:	4299      	cmp	r1, r3
 800b2ca:	d002      	beq.n	800b2d2 <cleanup_stdio+0x1e>
 800b2cc:	4620      	mov	r0, r4
 800b2ce:	f000 f9e1 	bl	800b694 <_fflush_r>
 800b2d2:	68e1      	ldr	r1, [r4, #12]
 800b2d4:	4b06      	ldr	r3, [pc, #24]	; (800b2f0 <cleanup_stdio+0x3c>)
 800b2d6:	4299      	cmp	r1, r3
 800b2d8:	d004      	beq.n	800b2e4 <cleanup_stdio+0x30>
 800b2da:	4620      	mov	r0, r4
 800b2dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2e0:	f000 b9d8 	b.w	800b694 <_fflush_r>
 800b2e4:	bd10      	pop	{r4, pc}
 800b2e6:	bf00      	nop
 800b2e8:	20003e58 	.word	0x20003e58
 800b2ec:	20003ec0 	.word	0x20003ec0
 800b2f0:	20003f28 	.word	0x20003f28

0800b2f4 <global_stdio_init.part.0>:
 800b2f4:	b510      	push	{r4, lr}
 800b2f6:	4b0b      	ldr	r3, [pc, #44]	; (800b324 <global_stdio_init.part.0+0x30>)
 800b2f8:	4c0b      	ldr	r4, [pc, #44]	; (800b328 <global_stdio_init.part.0+0x34>)
 800b2fa:	4a0c      	ldr	r2, [pc, #48]	; (800b32c <global_stdio_init.part.0+0x38>)
 800b2fc:	601a      	str	r2, [r3, #0]
 800b2fe:	4620      	mov	r0, r4
 800b300:	2200      	movs	r2, #0
 800b302:	2104      	movs	r1, #4
 800b304:	f7ff ff94 	bl	800b230 <std>
 800b308:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b30c:	2201      	movs	r2, #1
 800b30e:	2109      	movs	r1, #9
 800b310:	f7ff ff8e 	bl	800b230 <std>
 800b314:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b318:	2202      	movs	r2, #2
 800b31a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b31e:	2112      	movs	r1, #18
 800b320:	f7ff bf86 	b.w	800b230 <std>
 800b324:	20003f90 	.word	0x20003f90
 800b328:	20003e58 	.word	0x20003e58
 800b32c:	0800b29d 	.word	0x0800b29d

0800b330 <__sfp_lock_acquire>:
 800b330:	4801      	ldr	r0, [pc, #4]	; (800b338 <__sfp_lock_acquire+0x8>)
 800b332:	f000 b8ae 	b.w	800b492 <__retarget_lock_acquire_recursive>
 800b336:	bf00      	nop
 800b338:	20003f95 	.word	0x20003f95

0800b33c <__sfp_lock_release>:
 800b33c:	4801      	ldr	r0, [pc, #4]	; (800b344 <__sfp_lock_release+0x8>)
 800b33e:	f000 b8a9 	b.w	800b494 <__retarget_lock_release_recursive>
 800b342:	bf00      	nop
 800b344:	20003f95 	.word	0x20003f95

0800b348 <__sinit>:
 800b348:	b510      	push	{r4, lr}
 800b34a:	4604      	mov	r4, r0
 800b34c:	f7ff fff0 	bl	800b330 <__sfp_lock_acquire>
 800b350:	6a23      	ldr	r3, [r4, #32]
 800b352:	b11b      	cbz	r3, 800b35c <__sinit+0x14>
 800b354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b358:	f7ff bff0 	b.w	800b33c <__sfp_lock_release>
 800b35c:	4b04      	ldr	r3, [pc, #16]	; (800b370 <__sinit+0x28>)
 800b35e:	6223      	str	r3, [r4, #32]
 800b360:	4b04      	ldr	r3, [pc, #16]	; (800b374 <__sinit+0x2c>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d1f5      	bne.n	800b354 <__sinit+0xc>
 800b368:	f7ff ffc4 	bl	800b2f4 <global_stdio_init.part.0>
 800b36c:	e7f2      	b.n	800b354 <__sinit+0xc>
 800b36e:	bf00      	nop
 800b370:	0800b2b5 	.word	0x0800b2b5
 800b374:	20003f90 	.word	0x20003f90

0800b378 <_fwalk_sglue>:
 800b378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b37c:	4607      	mov	r7, r0
 800b37e:	4688      	mov	r8, r1
 800b380:	4614      	mov	r4, r2
 800b382:	2600      	movs	r6, #0
 800b384:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b388:	f1b9 0901 	subs.w	r9, r9, #1
 800b38c:	d505      	bpl.n	800b39a <_fwalk_sglue+0x22>
 800b38e:	6824      	ldr	r4, [r4, #0]
 800b390:	2c00      	cmp	r4, #0
 800b392:	d1f7      	bne.n	800b384 <_fwalk_sglue+0xc>
 800b394:	4630      	mov	r0, r6
 800b396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b39a:	89ab      	ldrh	r3, [r5, #12]
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d907      	bls.n	800b3b0 <_fwalk_sglue+0x38>
 800b3a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b3a4:	3301      	adds	r3, #1
 800b3a6:	d003      	beq.n	800b3b0 <_fwalk_sglue+0x38>
 800b3a8:	4629      	mov	r1, r5
 800b3aa:	4638      	mov	r0, r7
 800b3ac:	47c0      	blx	r8
 800b3ae:	4306      	orrs	r6, r0
 800b3b0:	3568      	adds	r5, #104	; 0x68
 800b3b2:	e7e9      	b.n	800b388 <_fwalk_sglue+0x10>

0800b3b4 <memset>:
 800b3b4:	4402      	add	r2, r0
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	4293      	cmp	r3, r2
 800b3ba:	d100      	bne.n	800b3be <memset+0xa>
 800b3bc:	4770      	bx	lr
 800b3be:	f803 1b01 	strb.w	r1, [r3], #1
 800b3c2:	e7f9      	b.n	800b3b8 <memset+0x4>

0800b3c4 <time>:
 800b3c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b3c6:	4b0b      	ldr	r3, [pc, #44]	; (800b3f4 <time+0x30>)
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	4669      	mov	r1, sp
 800b3cc:	4604      	mov	r4, r0
 800b3ce:	6818      	ldr	r0, [r3, #0]
 800b3d0:	f000 f812 	bl	800b3f8 <_gettimeofday_r>
 800b3d4:	2800      	cmp	r0, #0
 800b3d6:	bfbe      	ittt	lt
 800b3d8:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 800b3dc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b3e0:	e9cd 2300 	strdlt	r2, r3, [sp]
 800b3e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b3e8:	b10c      	cbz	r4, 800b3ee <time+0x2a>
 800b3ea:	e9c4 0100 	strd	r0, r1, [r4]
 800b3ee:	b004      	add	sp, #16
 800b3f0:	bd10      	pop	{r4, pc}
 800b3f2:	bf00      	nop
 800b3f4:	2000023c 	.word	0x2000023c

0800b3f8 <_gettimeofday_r>:
 800b3f8:	b538      	push	{r3, r4, r5, lr}
 800b3fa:	4d07      	ldr	r5, [pc, #28]	; (800b418 <_gettimeofday_r+0x20>)
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	4604      	mov	r4, r0
 800b400:	4608      	mov	r0, r1
 800b402:	4611      	mov	r1, r2
 800b404:	602b      	str	r3, [r5, #0]
 800b406:	f000 fe41 	bl	800c08c <_gettimeofday>
 800b40a:	1c43      	adds	r3, r0, #1
 800b40c:	d102      	bne.n	800b414 <_gettimeofday_r+0x1c>
 800b40e:	682b      	ldr	r3, [r5, #0]
 800b410:	b103      	cbz	r3, 800b414 <_gettimeofday_r+0x1c>
 800b412:	6023      	str	r3, [r4, #0]
 800b414:	bd38      	pop	{r3, r4, r5, pc}
 800b416:	bf00      	nop
 800b418:	20003f98 	.word	0x20003f98

0800b41c <_sbrk_r>:
 800b41c:	b538      	push	{r3, r4, r5, lr}
 800b41e:	4d06      	ldr	r5, [pc, #24]	; (800b438 <_sbrk_r+0x1c>)
 800b420:	2300      	movs	r3, #0
 800b422:	4604      	mov	r4, r0
 800b424:	4608      	mov	r0, r1
 800b426:	602b      	str	r3, [r5, #0]
 800b428:	f7ff fb76 	bl	800ab18 <_sbrk>
 800b42c:	1c43      	adds	r3, r0, #1
 800b42e:	d102      	bne.n	800b436 <_sbrk_r+0x1a>
 800b430:	682b      	ldr	r3, [r5, #0]
 800b432:	b103      	cbz	r3, 800b436 <_sbrk_r+0x1a>
 800b434:	6023      	str	r3, [r4, #0]
 800b436:	bd38      	pop	{r3, r4, r5, pc}
 800b438:	20003f98 	.word	0x20003f98

0800b43c <__errno>:
 800b43c:	4b01      	ldr	r3, [pc, #4]	; (800b444 <__errno+0x8>)
 800b43e:	6818      	ldr	r0, [r3, #0]
 800b440:	4770      	bx	lr
 800b442:	bf00      	nop
 800b444:	2000023c 	.word	0x2000023c

0800b448 <__libc_init_array>:
 800b448:	b570      	push	{r4, r5, r6, lr}
 800b44a:	4d0d      	ldr	r5, [pc, #52]	; (800b480 <__libc_init_array+0x38>)
 800b44c:	4c0d      	ldr	r4, [pc, #52]	; (800b484 <__libc_init_array+0x3c>)
 800b44e:	1b64      	subs	r4, r4, r5
 800b450:	10a4      	asrs	r4, r4, #2
 800b452:	2600      	movs	r6, #0
 800b454:	42a6      	cmp	r6, r4
 800b456:	d109      	bne.n	800b46c <__libc_init_array+0x24>
 800b458:	4d0b      	ldr	r5, [pc, #44]	; (800b488 <__libc_init_array+0x40>)
 800b45a:	4c0c      	ldr	r4, [pc, #48]	; (800b48c <__libc_init_array+0x44>)
 800b45c:	f000 fe1e 	bl	800c09c <_init>
 800b460:	1b64      	subs	r4, r4, r5
 800b462:	10a4      	asrs	r4, r4, #2
 800b464:	2600      	movs	r6, #0
 800b466:	42a6      	cmp	r6, r4
 800b468:	d105      	bne.n	800b476 <__libc_init_array+0x2e>
 800b46a:	bd70      	pop	{r4, r5, r6, pc}
 800b46c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b470:	4798      	blx	r3
 800b472:	3601      	adds	r6, #1
 800b474:	e7ee      	b.n	800b454 <__libc_init_array+0xc>
 800b476:	f855 3b04 	ldr.w	r3, [r5], #4
 800b47a:	4798      	blx	r3
 800b47c:	3601      	adds	r6, #1
 800b47e:	e7f2      	b.n	800b466 <__libc_init_array+0x1e>
 800b480:	0800c320 	.word	0x0800c320
 800b484:	0800c320 	.word	0x0800c320
 800b488:	0800c320 	.word	0x0800c320
 800b48c:	0800c324 	.word	0x0800c324

0800b490 <__retarget_lock_init_recursive>:
 800b490:	4770      	bx	lr

0800b492 <__retarget_lock_acquire_recursive>:
 800b492:	4770      	bx	lr

0800b494 <__retarget_lock_release_recursive>:
 800b494:	4770      	bx	lr

0800b496 <memcpy>:
 800b496:	440a      	add	r2, r1
 800b498:	4291      	cmp	r1, r2
 800b49a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b49e:	d100      	bne.n	800b4a2 <memcpy+0xc>
 800b4a0:	4770      	bx	lr
 800b4a2:	b510      	push	{r4, lr}
 800b4a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b4ac:	4291      	cmp	r1, r2
 800b4ae:	d1f9      	bne.n	800b4a4 <memcpy+0xe>
 800b4b0:	bd10      	pop	{r4, pc}
	...

0800b4b4 <__assert_func>:
 800b4b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b4b6:	4614      	mov	r4, r2
 800b4b8:	461a      	mov	r2, r3
 800b4ba:	4b09      	ldr	r3, [pc, #36]	; (800b4e0 <__assert_func+0x2c>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	4605      	mov	r5, r0
 800b4c0:	68d8      	ldr	r0, [r3, #12]
 800b4c2:	b14c      	cbz	r4, 800b4d8 <__assert_func+0x24>
 800b4c4:	4b07      	ldr	r3, [pc, #28]	; (800b4e4 <__assert_func+0x30>)
 800b4c6:	9100      	str	r1, [sp, #0]
 800b4c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b4cc:	4906      	ldr	r1, [pc, #24]	; (800b4e8 <__assert_func+0x34>)
 800b4ce:	462b      	mov	r3, r5
 800b4d0:	f000 f94c 	bl	800b76c <fiprintf>
 800b4d4:	f000 f9a2 	bl	800b81c <abort>
 800b4d8:	4b04      	ldr	r3, [pc, #16]	; (800b4ec <__assert_func+0x38>)
 800b4da:	461c      	mov	r4, r3
 800b4dc:	e7f3      	b.n	800b4c6 <__assert_func+0x12>
 800b4de:	bf00      	nop
 800b4e0:	2000023c 	.word	0x2000023c
 800b4e4:	0800c2a7 	.word	0x0800c2a7
 800b4e8:	0800c2b4 	.word	0x0800c2b4
 800b4ec:	0800c2e2 	.word	0x0800c2e2

0800b4f0 <_free_r>:
 800b4f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b4f2:	2900      	cmp	r1, #0
 800b4f4:	d044      	beq.n	800b580 <_free_r+0x90>
 800b4f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4fa:	9001      	str	r0, [sp, #4]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	f1a1 0404 	sub.w	r4, r1, #4
 800b502:	bfb8      	it	lt
 800b504:	18e4      	addlt	r4, r4, r3
 800b506:	f7ff fe1b 	bl	800b140 <__malloc_lock>
 800b50a:	4a1e      	ldr	r2, [pc, #120]	; (800b584 <_free_r+0x94>)
 800b50c:	9801      	ldr	r0, [sp, #4]
 800b50e:	6813      	ldr	r3, [r2, #0]
 800b510:	b933      	cbnz	r3, 800b520 <_free_r+0x30>
 800b512:	6063      	str	r3, [r4, #4]
 800b514:	6014      	str	r4, [r2, #0]
 800b516:	b003      	add	sp, #12
 800b518:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b51c:	f7ff be16 	b.w	800b14c <__malloc_unlock>
 800b520:	42a3      	cmp	r3, r4
 800b522:	d908      	bls.n	800b536 <_free_r+0x46>
 800b524:	6825      	ldr	r5, [r4, #0]
 800b526:	1961      	adds	r1, r4, r5
 800b528:	428b      	cmp	r3, r1
 800b52a:	bf01      	itttt	eq
 800b52c:	6819      	ldreq	r1, [r3, #0]
 800b52e:	685b      	ldreq	r3, [r3, #4]
 800b530:	1949      	addeq	r1, r1, r5
 800b532:	6021      	streq	r1, [r4, #0]
 800b534:	e7ed      	b.n	800b512 <_free_r+0x22>
 800b536:	461a      	mov	r2, r3
 800b538:	685b      	ldr	r3, [r3, #4]
 800b53a:	b10b      	cbz	r3, 800b540 <_free_r+0x50>
 800b53c:	42a3      	cmp	r3, r4
 800b53e:	d9fa      	bls.n	800b536 <_free_r+0x46>
 800b540:	6811      	ldr	r1, [r2, #0]
 800b542:	1855      	adds	r5, r2, r1
 800b544:	42a5      	cmp	r5, r4
 800b546:	d10b      	bne.n	800b560 <_free_r+0x70>
 800b548:	6824      	ldr	r4, [r4, #0]
 800b54a:	4421      	add	r1, r4
 800b54c:	1854      	adds	r4, r2, r1
 800b54e:	42a3      	cmp	r3, r4
 800b550:	6011      	str	r1, [r2, #0]
 800b552:	d1e0      	bne.n	800b516 <_free_r+0x26>
 800b554:	681c      	ldr	r4, [r3, #0]
 800b556:	685b      	ldr	r3, [r3, #4]
 800b558:	6053      	str	r3, [r2, #4]
 800b55a:	440c      	add	r4, r1
 800b55c:	6014      	str	r4, [r2, #0]
 800b55e:	e7da      	b.n	800b516 <_free_r+0x26>
 800b560:	d902      	bls.n	800b568 <_free_r+0x78>
 800b562:	230c      	movs	r3, #12
 800b564:	6003      	str	r3, [r0, #0]
 800b566:	e7d6      	b.n	800b516 <_free_r+0x26>
 800b568:	6825      	ldr	r5, [r4, #0]
 800b56a:	1961      	adds	r1, r4, r5
 800b56c:	428b      	cmp	r3, r1
 800b56e:	bf04      	itt	eq
 800b570:	6819      	ldreq	r1, [r3, #0]
 800b572:	685b      	ldreq	r3, [r3, #4]
 800b574:	6063      	str	r3, [r4, #4]
 800b576:	bf04      	itt	eq
 800b578:	1949      	addeq	r1, r1, r5
 800b57a:	6021      	streq	r1, [r4, #0]
 800b57c:	6054      	str	r4, [r2, #4]
 800b57e:	e7ca      	b.n	800b516 <_free_r+0x26>
 800b580:	b003      	add	sp, #12
 800b582:	bd30      	pop	{r4, r5, pc}
 800b584:	20003e50 	.word	0x20003e50

0800b588 <__sflush_r>:
 800b588:	898a      	ldrh	r2, [r1, #12]
 800b58a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b58e:	4605      	mov	r5, r0
 800b590:	0710      	lsls	r0, r2, #28
 800b592:	460c      	mov	r4, r1
 800b594:	d458      	bmi.n	800b648 <__sflush_r+0xc0>
 800b596:	684b      	ldr	r3, [r1, #4]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	dc05      	bgt.n	800b5a8 <__sflush_r+0x20>
 800b59c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	dc02      	bgt.n	800b5a8 <__sflush_r+0x20>
 800b5a2:	2000      	movs	r0, #0
 800b5a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5aa:	2e00      	cmp	r6, #0
 800b5ac:	d0f9      	beq.n	800b5a2 <__sflush_r+0x1a>
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b5b4:	682f      	ldr	r7, [r5, #0]
 800b5b6:	6a21      	ldr	r1, [r4, #32]
 800b5b8:	602b      	str	r3, [r5, #0]
 800b5ba:	d032      	beq.n	800b622 <__sflush_r+0x9a>
 800b5bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b5be:	89a3      	ldrh	r3, [r4, #12]
 800b5c0:	075a      	lsls	r2, r3, #29
 800b5c2:	d505      	bpl.n	800b5d0 <__sflush_r+0x48>
 800b5c4:	6863      	ldr	r3, [r4, #4]
 800b5c6:	1ac0      	subs	r0, r0, r3
 800b5c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b5ca:	b10b      	cbz	r3, 800b5d0 <__sflush_r+0x48>
 800b5cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b5ce:	1ac0      	subs	r0, r0, r3
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	4602      	mov	r2, r0
 800b5d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5d6:	6a21      	ldr	r1, [r4, #32]
 800b5d8:	4628      	mov	r0, r5
 800b5da:	47b0      	blx	r6
 800b5dc:	1c43      	adds	r3, r0, #1
 800b5de:	89a3      	ldrh	r3, [r4, #12]
 800b5e0:	d106      	bne.n	800b5f0 <__sflush_r+0x68>
 800b5e2:	6829      	ldr	r1, [r5, #0]
 800b5e4:	291d      	cmp	r1, #29
 800b5e6:	d82b      	bhi.n	800b640 <__sflush_r+0xb8>
 800b5e8:	4a29      	ldr	r2, [pc, #164]	; (800b690 <__sflush_r+0x108>)
 800b5ea:	410a      	asrs	r2, r1
 800b5ec:	07d6      	lsls	r6, r2, #31
 800b5ee:	d427      	bmi.n	800b640 <__sflush_r+0xb8>
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	6062      	str	r2, [r4, #4]
 800b5f4:	04d9      	lsls	r1, r3, #19
 800b5f6:	6922      	ldr	r2, [r4, #16]
 800b5f8:	6022      	str	r2, [r4, #0]
 800b5fa:	d504      	bpl.n	800b606 <__sflush_r+0x7e>
 800b5fc:	1c42      	adds	r2, r0, #1
 800b5fe:	d101      	bne.n	800b604 <__sflush_r+0x7c>
 800b600:	682b      	ldr	r3, [r5, #0]
 800b602:	b903      	cbnz	r3, 800b606 <__sflush_r+0x7e>
 800b604:	6560      	str	r0, [r4, #84]	; 0x54
 800b606:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b608:	602f      	str	r7, [r5, #0]
 800b60a:	2900      	cmp	r1, #0
 800b60c:	d0c9      	beq.n	800b5a2 <__sflush_r+0x1a>
 800b60e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b612:	4299      	cmp	r1, r3
 800b614:	d002      	beq.n	800b61c <__sflush_r+0x94>
 800b616:	4628      	mov	r0, r5
 800b618:	f7ff ff6a 	bl	800b4f0 <_free_r>
 800b61c:	2000      	movs	r0, #0
 800b61e:	6360      	str	r0, [r4, #52]	; 0x34
 800b620:	e7c0      	b.n	800b5a4 <__sflush_r+0x1c>
 800b622:	2301      	movs	r3, #1
 800b624:	4628      	mov	r0, r5
 800b626:	47b0      	blx	r6
 800b628:	1c41      	adds	r1, r0, #1
 800b62a:	d1c8      	bne.n	800b5be <__sflush_r+0x36>
 800b62c:	682b      	ldr	r3, [r5, #0]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d0c5      	beq.n	800b5be <__sflush_r+0x36>
 800b632:	2b1d      	cmp	r3, #29
 800b634:	d001      	beq.n	800b63a <__sflush_r+0xb2>
 800b636:	2b16      	cmp	r3, #22
 800b638:	d101      	bne.n	800b63e <__sflush_r+0xb6>
 800b63a:	602f      	str	r7, [r5, #0]
 800b63c:	e7b1      	b.n	800b5a2 <__sflush_r+0x1a>
 800b63e:	89a3      	ldrh	r3, [r4, #12]
 800b640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b644:	81a3      	strh	r3, [r4, #12]
 800b646:	e7ad      	b.n	800b5a4 <__sflush_r+0x1c>
 800b648:	690f      	ldr	r7, [r1, #16]
 800b64a:	2f00      	cmp	r7, #0
 800b64c:	d0a9      	beq.n	800b5a2 <__sflush_r+0x1a>
 800b64e:	0793      	lsls	r3, r2, #30
 800b650:	680e      	ldr	r6, [r1, #0]
 800b652:	bf08      	it	eq
 800b654:	694b      	ldreq	r3, [r1, #20]
 800b656:	600f      	str	r7, [r1, #0]
 800b658:	bf18      	it	ne
 800b65a:	2300      	movne	r3, #0
 800b65c:	eba6 0807 	sub.w	r8, r6, r7
 800b660:	608b      	str	r3, [r1, #8]
 800b662:	f1b8 0f00 	cmp.w	r8, #0
 800b666:	dd9c      	ble.n	800b5a2 <__sflush_r+0x1a>
 800b668:	6a21      	ldr	r1, [r4, #32]
 800b66a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b66c:	4643      	mov	r3, r8
 800b66e:	463a      	mov	r2, r7
 800b670:	4628      	mov	r0, r5
 800b672:	47b0      	blx	r6
 800b674:	2800      	cmp	r0, #0
 800b676:	dc06      	bgt.n	800b686 <__sflush_r+0xfe>
 800b678:	89a3      	ldrh	r3, [r4, #12]
 800b67a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b67e:	81a3      	strh	r3, [r4, #12]
 800b680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b684:	e78e      	b.n	800b5a4 <__sflush_r+0x1c>
 800b686:	4407      	add	r7, r0
 800b688:	eba8 0800 	sub.w	r8, r8, r0
 800b68c:	e7e9      	b.n	800b662 <__sflush_r+0xda>
 800b68e:	bf00      	nop
 800b690:	dfbffffe 	.word	0xdfbffffe

0800b694 <_fflush_r>:
 800b694:	b538      	push	{r3, r4, r5, lr}
 800b696:	690b      	ldr	r3, [r1, #16]
 800b698:	4605      	mov	r5, r0
 800b69a:	460c      	mov	r4, r1
 800b69c:	b913      	cbnz	r3, 800b6a4 <_fflush_r+0x10>
 800b69e:	2500      	movs	r5, #0
 800b6a0:	4628      	mov	r0, r5
 800b6a2:	bd38      	pop	{r3, r4, r5, pc}
 800b6a4:	b118      	cbz	r0, 800b6ae <_fflush_r+0x1a>
 800b6a6:	6a03      	ldr	r3, [r0, #32]
 800b6a8:	b90b      	cbnz	r3, 800b6ae <_fflush_r+0x1a>
 800b6aa:	f7ff fe4d 	bl	800b348 <__sinit>
 800b6ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d0f3      	beq.n	800b69e <_fflush_r+0xa>
 800b6b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b6b8:	07d0      	lsls	r0, r2, #31
 800b6ba:	d404      	bmi.n	800b6c6 <_fflush_r+0x32>
 800b6bc:	0599      	lsls	r1, r3, #22
 800b6be:	d402      	bmi.n	800b6c6 <_fflush_r+0x32>
 800b6c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6c2:	f7ff fee6 	bl	800b492 <__retarget_lock_acquire_recursive>
 800b6c6:	4628      	mov	r0, r5
 800b6c8:	4621      	mov	r1, r4
 800b6ca:	f7ff ff5d 	bl	800b588 <__sflush_r>
 800b6ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b6d0:	07da      	lsls	r2, r3, #31
 800b6d2:	4605      	mov	r5, r0
 800b6d4:	d4e4      	bmi.n	800b6a0 <_fflush_r+0xc>
 800b6d6:	89a3      	ldrh	r3, [r4, #12]
 800b6d8:	059b      	lsls	r3, r3, #22
 800b6da:	d4e1      	bmi.n	800b6a0 <_fflush_r+0xc>
 800b6dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6de:	f7ff fed9 	bl	800b494 <__retarget_lock_release_recursive>
 800b6e2:	e7dd      	b.n	800b6a0 <_fflush_r+0xc>

0800b6e4 <__sread>:
 800b6e4:	b510      	push	{r4, lr}
 800b6e6:	460c      	mov	r4, r1
 800b6e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6ec:	f000 f872 	bl	800b7d4 <_read_r>
 800b6f0:	2800      	cmp	r0, #0
 800b6f2:	bfab      	itete	ge
 800b6f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b6f6:	89a3      	ldrhlt	r3, [r4, #12]
 800b6f8:	181b      	addge	r3, r3, r0
 800b6fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b6fe:	bfac      	ite	ge
 800b700:	6563      	strge	r3, [r4, #84]	; 0x54
 800b702:	81a3      	strhlt	r3, [r4, #12]
 800b704:	bd10      	pop	{r4, pc}

0800b706 <__swrite>:
 800b706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b70a:	461f      	mov	r7, r3
 800b70c:	898b      	ldrh	r3, [r1, #12]
 800b70e:	05db      	lsls	r3, r3, #23
 800b710:	4605      	mov	r5, r0
 800b712:	460c      	mov	r4, r1
 800b714:	4616      	mov	r6, r2
 800b716:	d505      	bpl.n	800b724 <__swrite+0x1e>
 800b718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b71c:	2302      	movs	r3, #2
 800b71e:	2200      	movs	r2, #0
 800b720:	f000 f846 	bl	800b7b0 <_lseek_r>
 800b724:	89a3      	ldrh	r3, [r4, #12]
 800b726:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b72a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b72e:	81a3      	strh	r3, [r4, #12]
 800b730:	4632      	mov	r2, r6
 800b732:	463b      	mov	r3, r7
 800b734:	4628      	mov	r0, r5
 800b736:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b73a:	f000 b85d 	b.w	800b7f8 <_write_r>

0800b73e <__sseek>:
 800b73e:	b510      	push	{r4, lr}
 800b740:	460c      	mov	r4, r1
 800b742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b746:	f000 f833 	bl	800b7b0 <_lseek_r>
 800b74a:	1c43      	adds	r3, r0, #1
 800b74c:	89a3      	ldrh	r3, [r4, #12]
 800b74e:	bf15      	itete	ne
 800b750:	6560      	strne	r0, [r4, #84]	; 0x54
 800b752:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b756:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b75a:	81a3      	strheq	r3, [r4, #12]
 800b75c:	bf18      	it	ne
 800b75e:	81a3      	strhne	r3, [r4, #12]
 800b760:	bd10      	pop	{r4, pc}

0800b762 <__sclose>:
 800b762:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b766:	f000 b813 	b.w	800b790 <_close_r>
	...

0800b76c <fiprintf>:
 800b76c:	b40e      	push	{r1, r2, r3}
 800b76e:	b503      	push	{r0, r1, lr}
 800b770:	4601      	mov	r1, r0
 800b772:	ab03      	add	r3, sp, #12
 800b774:	4805      	ldr	r0, [pc, #20]	; (800b78c <fiprintf+0x20>)
 800b776:	f853 2b04 	ldr.w	r2, [r3], #4
 800b77a:	6800      	ldr	r0, [r0, #0]
 800b77c:	9301      	str	r3, [sp, #4]
 800b77e:	f000 f87d 	bl	800b87c <_vfiprintf_r>
 800b782:	b002      	add	sp, #8
 800b784:	f85d eb04 	ldr.w	lr, [sp], #4
 800b788:	b003      	add	sp, #12
 800b78a:	4770      	bx	lr
 800b78c:	2000023c 	.word	0x2000023c

0800b790 <_close_r>:
 800b790:	b538      	push	{r3, r4, r5, lr}
 800b792:	4d06      	ldr	r5, [pc, #24]	; (800b7ac <_close_r+0x1c>)
 800b794:	2300      	movs	r3, #0
 800b796:	4604      	mov	r4, r0
 800b798:	4608      	mov	r0, r1
 800b79a:	602b      	str	r3, [r5, #0]
 800b79c:	f7ff f987 	bl	800aaae <_close>
 800b7a0:	1c43      	adds	r3, r0, #1
 800b7a2:	d102      	bne.n	800b7aa <_close_r+0x1a>
 800b7a4:	682b      	ldr	r3, [r5, #0]
 800b7a6:	b103      	cbz	r3, 800b7aa <_close_r+0x1a>
 800b7a8:	6023      	str	r3, [r4, #0]
 800b7aa:	bd38      	pop	{r3, r4, r5, pc}
 800b7ac:	20003f98 	.word	0x20003f98

0800b7b0 <_lseek_r>:
 800b7b0:	b538      	push	{r3, r4, r5, lr}
 800b7b2:	4d07      	ldr	r5, [pc, #28]	; (800b7d0 <_lseek_r+0x20>)
 800b7b4:	4604      	mov	r4, r0
 800b7b6:	4608      	mov	r0, r1
 800b7b8:	4611      	mov	r1, r2
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	602a      	str	r2, [r5, #0]
 800b7be:	461a      	mov	r2, r3
 800b7c0:	f7ff f99c 	bl	800aafc <_lseek>
 800b7c4:	1c43      	adds	r3, r0, #1
 800b7c6:	d102      	bne.n	800b7ce <_lseek_r+0x1e>
 800b7c8:	682b      	ldr	r3, [r5, #0]
 800b7ca:	b103      	cbz	r3, 800b7ce <_lseek_r+0x1e>
 800b7cc:	6023      	str	r3, [r4, #0]
 800b7ce:	bd38      	pop	{r3, r4, r5, pc}
 800b7d0:	20003f98 	.word	0x20003f98

0800b7d4 <_read_r>:
 800b7d4:	b538      	push	{r3, r4, r5, lr}
 800b7d6:	4d07      	ldr	r5, [pc, #28]	; (800b7f4 <_read_r+0x20>)
 800b7d8:	4604      	mov	r4, r0
 800b7da:	4608      	mov	r0, r1
 800b7dc:	4611      	mov	r1, r2
 800b7de:	2200      	movs	r2, #0
 800b7e0:	602a      	str	r2, [r5, #0]
 800b7e2:	461a      	mov	r2, r3
 800b7e4:	f7ff f92a 	bl	800aa3c <_read>
 800b7e8:	1c43      	adds	r3, r0, #1
 800b7ea:	d102      	bne.n	800b7f2 <_read_r+0x1e>
 800b7ec:	682b      	ldr	r3, [r5, #0]
 800b7ee:	b103      	cbz	r3, 800b7f2 <_read_r+0x1e>
 800b7f0:	6023      	str	r3, [r4, #0]
 800b7f2:	bd38      	pop	{r3, r4, r5, pc}
 800b7f4:	20003f98 	.word	0x20003f98

0800b7f8 <_write_r>:
 800b7f8:	b538      	push	{r3, r4, r5, lr}
 800b7fa:	4d07      	ldr	r5, [pc, #28]	; (800b818 <_write_r+0x20>)
 800b7fc:	4604      	mov	r4, r0
 800b7fe:	4608      	mov	r0, r1
 800b800:	4611      	mov	r1, r2
 800b802:	2200      	movs	r2, #0
 800b804:	602a      	str	r2, [r5, #0]
 800b806:	461a      	mov	r2, r3
 800b808:	f7ff f935 	bl	800aa76 <_write>
 800b80c:	1c43      	adds	r3, r0, #1
 800b80e:	d102      	bne.n	800b816 <_write_r+0x1e>
 800b810:	682b      	ldr	r3, [r5, #0]
 800b812:	b103      	cbz	r3, 800b816 <_write_r+0x1e>
 800b814:	6023      	str	r3, [r4, #0]
 800b816:	bd38      	pop	{r3, r4, r5, pc}
 800b818:	20003f98 	.word	0x20003f98

0800b81c <abort>:
 800b81c:	b508      	push	{r3, lr}
 800b81e:	2006      	movs	r0, #6
 800b820:	f000 fc18 	bl	800c054 <raise>
 800b824:	2001      	movs	r0, #1
 800b826:	f7ff f8ff 	bl	800aa28 <_exit>

0800b82a <__sfputc_r>:
 800b82a:	6893      	ldr	r3, [r2, #8]
 800b82c:	3b01      	subs	r3, #1
 800b82e:	2b00      	cmp	r3, #0
 800b830:	b410      	push	{r4}
 800b832:	6093      	str	r3, [r2, #8]
 800b834:	da08      	bge.n	800b848 <__sfputc_r+0x1e>
 800b836:	6994      	ldr	r4, [r2, #24]
 800b838:	42a3      	cmp	r3, r4
 800b83a:	db01      	blt.n	800b840 <__sfputc_r+0x16>
 800b83c:	290a      	cmp	r1, #10
 800b83e:	d103      	bne.n	800b848 <__sfputc_r+0x1e>
 800b840:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b844:	f000 bac4 	b.w	800bdd0 <__swbuf_r>
 800b848:	6813      	ldr	r3, [r2, #0]
 800b84a:	1c58      	adds	r0, r3, #1
 800b84c:	6010      	str	r0, [r2, #0]
 800b84e:	7019      	strb	r1, [r3, #0]
 800b850:	4608      	mov	r0, r1
 800b852:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b856:	4770      	bx	lr

0800b858 <__sfputs_r>:
 800b858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b85a:	4606      	mov	r6, r0
 800b85c:	460f      	mov	r7, r1
 800b85e:	4614      	mov	r4, r2
 800b860:	18d5      	adds	r5, r2, r3
 800b862:	42ac      	cmp	r4, r5
 800b864:	d101      	bne.n	800b86a <__sfputs_r+0x12>
 800b866:	2000      	movs	r0, #0
 800b868:	e007      	b.n	800b87a <__sfputs_r+0x22>
 800b86a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b86e:	463a      	mov	r2, r7
 800b870:	4630      	mov	r0, r6
 800b872:	f7ff ffda 	bl	800b82a <__sfputc_r>
 800b876:	1c43      	adds	r3, r0, #1
 800b878:	d1f3      	bne.n	800b862 <__sfputs_r+0xa>
 800b87a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b87c <_vfiprintf_r>:
 800b87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b880:	460d      	mov	r5, r1
 800b882:	b09d      	sub	sp, #116	; 0x74
 800b884:	4614      	mov	r4, r2
 800b886:	4698      	mov	r8, r3
 800b888:	4606      	mov	r6, r0
 800b88a:	b118      	cbz	r0, 800b894 <_vfiprintf_r+0x18>
 800b88c:	6a03      	ldr	r3, [r0, #32]
 800b88e:	b90b      	cbnz	r3, 800b894 <_vfiprintf_r+0x18>
 800b890:	f7ff fd5a 	bl	800b348 <__sinit>
 800b894:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b896:	07d9      	lsls	r1, r3, #31
 800b898:	d405      	bmi.n	800b8a6 <_vfiprintf_r+0x2a>
 800b89a:	89ab      	ldrh	r3, [r5, #12]
 800b89c:	059a      	lsls	r2, r3, #22
 800b89e:	d402      	bmi.n	800b8a6 <_vfiprintf_r+0x2a>
 800b8a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8a2:	f7ff fdf6 	bl	800b492 <__retarget_lock_acquire_recursive>
 800b8a6:	89ab      	ldrh	r3, [r5, #12]
 800b8a8:	071b      	lsls	r3, r3, #28
 800b8aa:	d501      	bpl.n	800b8b0 <_vfiprintf_r+0x34>
 800b8ac:	692b      	ldr	r3, [r5, #16]
 800b8ae:	b99b      	cbnz	r3, 800b8d8 <_vfiprintf_r+0x5c>
 800b8b0:	4629      	mov	r1, r5
 800b8b2:	4630      	mov	r0, r6
 800b8b4:	f000 faca 	bl	800be4c <__swsetup_r>
 800b8b8:	b170      	cbz	r0, 800b8d8 <_vfiprintf_r+0x5c>
 800b8ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8bc:	07dc      	lsls	r4, r3, #31
 800b8be:	d504      	bpl.n	800b8ca <_vfiprintf_r+0x4e>
 800b8c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b8c4:	b01d      	add	sp, #116	; 0x74
 800b8c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ca:	89ab      	ldrh	r3, [r5, #12]
 800b8cc:	0598      	lsls	r0, r3, #22
 800b8ce:	d4f7      	bmi.n	800b8c0 <_vfiprintf_r+0x44>
 800b8d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8d2:	f7ff fddf 	bl	800b494 <__retarget_lock_release_recursive>
 800b8d6:	e7f3      	b.n	800b8c0 <_vfiprintf_r+0x44>
 800b8d8:	2300      	movs	r3, #0
 800b8da:	9309      	str	r3, [sp, #36]	; 0x24
 800b8dc:	2320      	movs	r3, #32
 800b8de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8e6:	2330      	movs	r3, #48	; 0x30
 800b8e8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ba9c <_vfiprintf_r+0x220>
 800b8ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b8f0:	f04f 0901 	mov.w	r9, #1
 800b8f4:	4623      	mov	r3, r4
 800b8f6:	469a      	mov	sl, r3
 800b8f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8fc:	b10a      	cbz	r2, 800b902 <_vfiprintf_r+0x86>
 800b8fe:	2a25      	cmp	r2, #37	; 0x25
 800b900:	d1f9      	bne.n	800b8f6 <_vfiprintf_r+0x7a>
 800b902:	ebba 0b04 	subs.w	fp, sl, r4
 800b906:	d00b      	beq.n	800b920 <_vfiprintf_r+0xa4>
 800b908:	465b      	mov	r3, fp
 800b90a:	4622      	mov	r2, r4
 800b90c:	4629      	mov	r1, r5
 800b90e:	4630      	mov	r0, r6
 800b910:	f7ff ffa2 	bl	800b858 <__sfputs_r>
 800b914:	3001      	adds	r0, #1
 800b916:	f000 80a9 	beq.w	800ba6c <_vfiprintf_r+0x1f0>
 800b91a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b91c:	445a      	add	r2, fp
 800b91e:	9209      	str	r2, [sp, #36]	; 0x24
 800b920:	f89a 3000 	ldrb.w	r3, [sl]
 800b924:	2b00      	cmp	r3, #0
 800b926:	f000 80a1 	beq.w	800ba6c <_vfiprintf_r+0x1f0>
 800b92a:	2300      	movs	r3, #0
 800b92c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b930:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b934:	f10a 0a01 	add.w	sl, sl, #1
 800b938:	9304      	str	r3, [sp, #16]
 800b93a:	9307      	str	r3, [sp, #28]
 800b93c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b940:	931a      	str	r3, [sp, #104]	; 0x68
 800b942:	4654      	mov	r4, sl
 800b944:	2205      	movs	r2, #5
 800b946:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b94a:	4854      	ldr	r0, [pc, #336]	; (800ba9c <_vfiprintf_r+0x220>)
 800b94c:	f7f4 fc40 	bl	80001d0 <memchr>
 800b950:	9a04      	ldr	r2, [sp, #16]
 800b952:	b9d8      	cbnz	r0, 800b98c <_vfiprintf_r+0x110>
 800b954:	06d1      	lsls	r1, r2, #27
 800b956:	bf44      	itt	mi
 800b958:	2320      	movmi	r3, #32
 800b95a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b95e:	0713      	lsls	r3, r2, #28
 800b960:	bf44      	itt	mi
 800b962:	232b      	movmi	r3, #43	; 0x2b
 800b964:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b968:	f89a 3000 	ldrb.w	r3, [sl]
 800b96c:	2b2a      	cmp	r3, #42	; 0x2a
 800b96e:	d015      	beq.n	800b99c <_vfiprintf_r+0x120>
 800b970:	9a07      	ldr	r2, [sp, #28]
 800b972:	4654      	mov	r4, sl
 800b974:	2000      	movs	r0, #0
 800b976:	f04f 0c0a 	mov.w	ip, #10
 800b97a:	4621      	mov	r1, r4
 800b97c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b980:	3b30      	subs	r3, #48	; 0x30
 800b982:	2b09      	cmp	r3, #9
 800b984:	d94d      	bls.n	800ba22 <_vfiprintf_r+0x1a6>
 800b986:	b1b0      	cbz	r0, 800b9b6 <_vfiprintf_r+0x13a>
 800b988:	9207      	str	r2, [sp, #28]
 800b98a:	e014      	b.n	800b9b6 <_vfiprintf_r+0x13a>
 800b98c:	eba0 0308 	sub.w	r3, r0, r8
 800b990:	fa09 f303 	lsl.w	r3, r9, r3
 800b994:	4313      	orrs	r3, r2
 800b996:	9304      	str	r3, [sp, #16]
 800b998:	46a2      	mov	sl, r4
 800b99a:	e7d2      	b.n	800b942 <_vfiprintf_r+0xc6>
 800b99c:	9b03      	ldr	r3, [sp, #12]
 800b99e:	1d19      	adds	r1, r3, #4
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	9103      	str	r1, [sp, #12]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	bfbb      	ittet	lt
 800b9a8:	425b      	neglt	r3, r3
 800b9aa:	f042 0202 	orrlt.w	r2, r2, #2
 800b9ae:	9307      	strge	r3, [sp, #28]
 800b9b0:	9307      	strlt	r3, [sp, #28]
 800b9b2:	bfb8      	it	lt
 800b9b4:	9204      	strlt	r2, [sp, #16]
 800b9b6:	7823      	ldrb	r3, [r4, #0]
 800b9b8:	2b2e      	cmp	r3, #46	; 0x2e
 800b9ba:	d10c      	bne.n	800b9d6 <_vfiprintf_r+0x15a>
 800b9bc:	7863      	ldrb	r3, [r4, #1]
 800b9be:	2b2a      	cmp	r3, #42	; 0x2a
 800b9c0:	d134      	bne.n	800ba2c <_vfiprintf_r+0x1b0>
 800b9c2:	9b03      	ldr	r3, [sp, #12]
 800b9c4:	1d1a      	adds	r2, r3, #4
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	9203      	str	r2, [sp, #12]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	bfb8      	it	lt
 800b9ce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b9d2:	3402      	adds	r4, #2
 800b9d4:	9305      	str	r3, [sp, #20]
 800b9d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800baac <_vfiprintf_r+0x230>
 800b9da:	7821      	ldrb	r1, [r4, #0]
 800b9dc:	2203      	movs	r2, #3
 800b9de:	4650      	mov	r0, sl
 800b9e0:	f7f4 fbf6 	bl	80001d0 <memchr>
 800b9e4:	b138      	cbz	r0, 800b9f6 <_vfiprintf_r+0x17a>
 800b9e6:	9b04      	ldr	r3, [sp, #16]
 800b9e8:	eba0 000a 	sub.w	r0, r0, sl
 800b9ec:	2240      	movs	r2, #64	; 0x40
 800b9ee:	4082      	lsls	r2, r0
 800b9f0:	4313      	orrs	r3, r2
 800b9f2:	3401      	adds	r4, #1
 800b9f4:	9304      	str	r3, [sp, #16]
 800b9f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9fa:	4829      	ldr	r0, [pc, #164]	; (800baa0 <_vfiprintf_r+0x224>)
 800b9fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba00:	2206      	movs	r2, #6
 800ba02:	f7f4 fbe5 	bl	80001d0 <memchr>
 800ba06:	2800      	cmp	r0, #0
 800ba08:	d03f      	beq.n	800ba8a <_vfiprintf_r+0x20e>
 800ba0a:	4b26      	ldr	r3, [pc, #152]	; (800baa4 <_vfiprintf_r+0x228>)
 800ba0c:	bb1b      	cbnz	r3, 800ba56 <_vfiprintf_r+0x1da>
 800ba0e:	9b03      	ldr	r3, [sp, #12]
 800ba10:	3307      	adds	r3, #7
 800ba12:	f023 0307 	bic.w	r3, r3, #7
 800ba16:	3308      	adds	r3, #8
 800ba18:	9303      	str	r3, [sp, #12]
 800ba1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba1c:	443b      	add	r3, r7
 800ba1e:	9309      	str	r3, [sp, #36]	; 0x24
 800ba20:	e768      	b.n	800b8f4 <_vfiprintf_r+0x78>
 800ba22:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba26:	460c      	mov	r4, r1
 800ba28:	2001      	movs	r0, #1
 800ba2a:	e7a6      	b.n	800b97a <_vfiprintf_r+0xfe>
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	3401      	adds	r4, #1
 800ba30:	9305      	str	r3, [sp, #20]
 800ba32:	4619      	mov	r1, r3
 800ba34:	f04f 0c0a 	mov.w	ip, #10
 800ba38:	4620      	mov	r0, r4
 800ba3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba3e:	3a30      	subs	r2, #48	; 0x30
 800ba40:	2a09      	cmp	r2, #9
 800ba42:	d903      	bls.n	800ba4c <_vfiprintf_r+0x1d0>
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d0c6      	beq.n	800b9d6 <_vfiprintf_r+0x15a>
 800ba48:	9105      	str	r1, [sp, #20]
 800ba4a:	e7c4      	b.n	800b9d6 <_vfiprintf_r+0x15a>
 800ba4c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba50:	4604      	mov	r4, r0
 800ba52:	2301      	movs	r3, #1
 800ba54:	e7f0      	b.n	800ba38 <_vfiprintf_r+0x1bc>
 800ba56:	ab03      	add	r3, sp, #12
 800ba58:	9300      	str	r3, [sp, #0]
 800ba5a:	462a      	mov	r2, r5
 800ba5c:	4b12      	ldr	r3, [pc, #72]	; (800baa8 <_vfiprintf_r+0x22c>)
 800ba5e:	a904      	add	r1, sp, #16
 800ba60:	4630      	mov	r0, r6
 800ba62:	f3af 8000 	nop.w
 800ba66:	4607      	mov	r7, r0
 800ba68:	1c78      	adds	r0, r7, #1
 800ba6a:	d1d6      	bne.n	800ba1a <_vfiprintf_r+0x19e>
 800ba6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba6e:	07d9      	lsls	r1, r3, #31
 800ba70:	d405      	bmi.n	800ba7e <_vfiprintf_r+0x202>
 800ba72:	89ab      	ldrh	r3, [r5, #12]
 800ba74:	059a      	lsls	r2, r3, #22
 800ba76:	d402      	bmi.n	800ba7e <_vfiprintf_r+0x202>
 800ba78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba7a:	f7ff fd0b 	bl	800b494 <__retarget_lock_release_recursive>
 800ba7e:	89ab      	ldrh	r3, [r5, #12]
 800ba80:	065b      	lsls	r3, r3, #25
 800ba82:	f53f af1d 	bmi.w	800b8c0 <_vfiprintf_r+0x44>
 800ba86:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba88:	e71c      	b.n	800b8c4 <_vfiprintf_r+0x48>
 800ba8a:	ab03      	add	r3, sp, #12
 800ba8c:	9300      	str	r3, [sp, #0]
 800ba8e:	462a      	mov	r2, r5
 800ba90:	4b05      	ldr	r3, [pc, #20]	; (800baa8 <_vfiprintf_r+0x22c>)
 800ba92:	a904      	add	r1, sp, #16
 800ba94:	4630      	mov	r0, r6
 800ba96:	f000 f879 	bl	800bb8c <_printf_i>
 800ba9a:	e7e4      	b.n	800ba66 <_vfiprintf_r+0x1ea>
 800ba9c:	0800c2e3 	.word	0x0800c2e3
 800baa0:	0800c2ed 	.word	0x0800c2ed
 800baa4:	00000000 	.word	0x00000000
 800baa8:	0800b859 	.word	0x0800b859
 800baac:	0800c2e9 	.word	0x0800c2e9

0800bab0 <_printf_common>:
 800bab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bab4:	4616      	mov	r6, r2
 800bab6:	4699      	mov	r9, r3
 800bab8:	688a      	ldr	r2, [r1, #8]
 800baba:	690b      	ldr	r3, [r1, #16]
 800babc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bac0:	4293      	cmp	r3, r2
 800bac2:	bfb8      	it	lt
 800bac4:	4613      	movlt	r3, r2
 800bac6:	6033      	str	r3, [r6, #0]
 800bac8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bacc:	4607      	mov	r7, r0
 800bace:	460c      	mov	r4, r1
 800bad0:	b10a      	cbz	r2, 800bad6 <_printf_common+0x26>
 800bad2:	3301      	adds	r3, #1
 800bad4:	6033      	str	r3, [r6, #0]
 800bad6:	6823      	ldr	r3, [r4, #0]
 800bad8:	0699      	lsls	r1, r3, #26
 800bada:	bf42      	ittt	mi
 800badc:	6833      	ldrmi	r3, [r6, #0]
 800bade:	3302      	addmi	r3, #2
 800bae0:	6033      	strmi	r3, [r6, #0]
 800bae2:	6825      	ldr	r5, [r4, #0]
 800bae4:	f015 0506 	ands.w	r5, r5, #6
 800bae8:	d106      	bne.n	800baf8 <_printf_common+0x48>
 800baea:	f104 0a19 	add.w	sl, r4, #25
 800baee:	68e3      	ldr	r3, [r4, #12]
 800baf0:	6832      	ldr	r2, [r6, #0]
 800baf2:	1a9b      	subs	r3, r3, r2
 800baf4:	42ab      	cmp	r3, r5
 800baf6:	dc26      	bgt.n	800bb46 <_printf_common+0x96>
 800baf8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bafc:	1e13      	subs	r3, r2, #0
 800bafe:	6822      	ldr	r2, [r4, #0]
 800bb00:	bf18      	it	ne
 800bb02:	2301      	movne	r3, #1
 800bb04:	0692      	lsls	r2, r2, #26
 800bb06:	d42b      	bmi.n	800bb60 <_printf_common+0xb0>
 800bb08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb0c:	4649      	mov	r1, r9
 800bb0e:	4638      	mov	r0, r7
 800bb10:	47c0      	blx	r8
 800bb12:	3001      	adds	r0, #1
 800bb14:	d01e      	beq.n	800bb54 <_printf_common+0xa4>
 800bb16:	6823      	ldr	r3, [r4, #0]
 800bb18:	6922      	ldr	r2, [r4, #16]
 800bb1a:	f003 0306 	and.w	r3, r3, #6
 800bb1e:	2b04      	cmp	r3, #4
 800bb20:	bf02      	ittt	eq
 800bb22:	68e5      	ldreq	r5, [r4, #12]
 800bb24:	6833      	ldreq	r3, [r6, #0]
 800bb26:	1aed      	subeq	r5, r5, r3
 800bb28:	68a3      	ldr	r3, [r4, #8]
 800bb2a:	bf0c      	ite	eq
 800bb2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb30:	2500      	movne	r5, #0
 800bb32:	4293      	cmp	r3, r2
 800bb34:	bfc4      	itt	gt
 800bb36:	1a9b      	subgt	r3, r3, r2
 800bb38:	18ed      	addgt	r5, r5, r3
 800bb3a:	2600      	movs	r6, #0
 800bb3c:	341a      	adds	r4, #26
 800bb3e:	42b5      	cmp	r5, r6
 800bb40:	d11a      	bne.n	800bb78 <_printf_common+0xc8>
 800bb42:	2000      	movs	r0, #0
 800bb44:	e008      	b.n	800bb58 <_printf_common+0xa8>
 800bb46:	2301      	movs	r3, #1
 800bb48:	4652      	mov	r2, sl
 800bb4a:	4649      	mov	r1, r9
 800bb4c:	4638      	mov	r0, r7
 800bb4e:	47c0      	blx	r8
 800bb50:	3001      	adds	r0, #1
 800bb52:	d103      	bne.n	800bb5c <_printf_common+0xac>
 800bb54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb5c:	3501      	adds	r5, #1
 800bb5e:	e7c6      	b.n	800baee <_printf_common+0x3e>
 800bb60:	18e1      	adds	r1, r4, r3
 800bb62:	1c5a      	adds	r2, r3, #1
 800bb64:	2030      	movs	r0, #48	; 0x30
 800bb66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb6a:	4422      	add	r2, r4
 800bb6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bb74:	3302      	adds	r3, #2
 800bb76:	e7c7      	b.n	800bb08 <_printf_common+0x58>
 800bb78:	2301      	movs	r3, #1
 800bb7a:	4622      	mov	r2, r4
 800bb7c:	4649      	mov	r1, r9
 800bb7e:	4638      	mov	r0, r7
 800bb80:	47c0      	blx	r8
 800bb82:	3001      	adds	r0, #1
 800bb84:	d0e6      	beq.n	800bb54 <_printf_common+0xa4>
 800bb86:	3601      	adds	r6, #1
 800bb88:	e7d9      	b.n	800bb3e <_printf_common+0x8e>
	...

0800bb8c <_printf_i>:
 800bb8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb90:	7e0f      	ldrb	r7, [r1, #24]
 800bb92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bb94:	2f78      	cmp	r7, #120	; 0x78
 800bb96:	4691      	mov	r9, r2
 800bb98:	4680      	mov	r8, r0
 800bb9a:	460c      	mov	r4, r1
 800bb9c:	469a      	mov	sl, r3
 800bb9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bba2:	d807      	bhi.n	800bbb4 <_printf_i+0x28>
 800bba4:	2f62      	cmp	r7, #98	; 0x62
 800bba6:	d80a      	bhi.n	800bbbe <_printf_i+0x32>
 800bba8:	2f00      	cmp	r7, #0
 800bbaa:	f000 80d4 	beq.w	800bd56 <_printf_i+0x1ca>
 800bbae:	2f58      	cmp	r7, #88	; 0x58
 800bbb0:	f000 80c0 	beq.w	800bd34 <_printf_i+0x1a8>
 800bbb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bbb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bbbc:	e03a      	b.n	800bc34 <_printf_i+0xa8>
 800bbbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bbc2:	2b15      	cmp	r3, #21
 800bbc4:	d8f6      	bhi.n	800bbb4 <_printf_i+0x28>
 800bbc6:	a101      	add	r1, pc, #4	; (adr r1, 800bbcc <_printf_i+0x40>)
 800bbc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bbcc:	0800bc25 	.word	0x0800bc25
 800bbd0:	0800bc39 	.word	0x0800bc39
 800bbd4:	0800bbb5 	.word	0x0800bbb5
 800bbd8:	0800bbb5 	.word	0x0800bbb5
 800bbdc:	0800bbb5 	.word	0x0800bbb5
 800bbe0:	0800bbb5 	.word	0x0800bbb5
 800bbe4:	0800bc39 	.word	0x0800bc39
 800bbe8:	0800bbb5 	.word	0x0800bbb5
 800bbec:	0800bbb5 	.word	0x0800bbb5
 800bbf0:	0800bbb5 	.word	0x0800bbb5
 800bbf4:	0800bbb5 	.word	0x0800bbb5
 800bbf8:	0800bd3d 	.word	0x0800bd3d
 800bbfc:	0800bc65 	.word	0x0800bc65
 800bc00:	0800bcf7 	.word	0x0800bcf7
 800bc04:	0800bbb5 	.word	0x0800bbb5
 800bc08:	0800bbb5 	.word	0x0800bbb5
 800bc0c:	0800bd5f 	.word	0x0800bd5f
 800bc10:	0800bbb5 	.word	0x0800bbb5
 800bc14:	0800bc65 	.word	0x0800bc65
 800bc18:	0800bbb5 	.word	0x0800bbb5
 800bc1c:	0800bbb5 	.word	0x0800bbb5
 800bc20:	0800bcff 	.word	0x0800bcff
 800bc24:	682b      	ldr	r3, [r5, #0]
 800bc26:	1d1a      	adds	r2, r3, #4
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	602a      	str	r2, [r5, #0]
 800bc2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc34:	2301      	movs	r3, #1
 800bc36:	e09f      	b.n	800bd78 <_printf_i+0x1ec>
 800bc38:	6820      	ldr	r0, [r4, #0]
 800bc3a:	682b      	ldr	r3, [r5, #0]
 800bc3c:	0607      	lsls	r7, r0, #24
 800bc3e:	f103 0104 	add.w	r1, r3, #4
 800bc42:	6029      	str	r1, [r5, #0]
 800bc44:	d501      	bpl.n	800bc4a <_printf_i+0xbe>
 800bc46:	681e      	ldr	r6, [r3, #0]
 800bc48:	e003      	b.n	800bc52 <_printf_i+0xc6>
 800bc4a:	0646      	lsls	r6, r0, #25
 800bc4c:	d5fb      	bpl.n	800bc46 <_printf_i+0xba>
 800bc4e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bc52:	2e00      	cmp	r6, #0
 800bc54:	da03      	bge.n	800bc5e <_printf_i+0xd2>
 800bc56:	232d      	movs	r3, #45	; 0x2d
 800bc58:	4276      	negs	r6, r6
 800bc5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc5e:	485a      	ldr	r0, [pc, #360]	; (800bdc8 <_printf_i+0x23c>)
 800bc60:	230a      	movs	r3, #10
 800bc62:	e012      	b.n	800bc8a <_printf_i+0xfe>
 800bc64:	682b      	ldr	r3, [r5, #0]
 800bc66:	6820      	ldr	r0, [r4, #0]
 800bc68:	1d19      	adds	r1, r3, #4
 800bc6a:	6029      	str	r1, [r5, #0]
 800bc6c:	0605      	lsls	r5, r0, #24
 800bc6e:	d501      	bpl.n	800bc74 <_printf_i+0xe8>
 800bc70:	681e      	ldr	r6, [r3, #0]
 800bc72:	e002      	b.n	800bc7a <_printf_i+0xee>
 800bc74:	0641      	lsls	r1, r0, #25
 800bc76:	d5fb      	bpl.n	800bc70 <_printf_i+0xe4>
 800bc78:	881e      	ldrh	r6, [r3, #0]
 800bc7a:	4853      	ldr	r0, [pc, #332]	; (800bdc8 <_printf_i+0x23c>)
 800bc7c:	2f6f      	cmp	r7, #111	; 0x6f
 800bc7e:	bf0c      	ite	eq
 800bc80:	2308      	moveq	r3, #8
 800bc82:	230a      	movne	r3, #10
 800bc84:	2100      	movs	r1, #0
 800bc86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bc8a:	6865      	ldr	r5, [r4, #4]
 800bc8c:	60a5      	str	r5, [r4, #8]
 800bc8e:	2d00      	cmp	r5, #0
 800bc90:	bfa2      	ittt	ge
 800bc92:	6821      	ldrge	r1, [r4, #0]
 800bc94:	f021 0104 	bicge.w	r1, r1, #4
 800bc98:	6021      	strge	r1, [r4, #0]
 800bc9a:	b90e      	cbnz	r6, 800bca0 <_printf_i+0x114>
 800bc9c:	2d00      	cmp	r5, #0
 800bc9e:	d04b      	beq.n	800bd38 <_printf_i+0x1ac>
 800bca0:	4615      	mov	r5, r2
 800bca2:	fbb6 f1f3 	udiv	r1, r6, r3
 800bca6:	fb03 6711 	mls	r7, r3, r1, r6
 800bcaa:	5dc7      	ldrb	r7, [r0, r7]
 800bcac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bcb0:	4637      	mov	r7, r6
 800bcb2:	42bb      	cmp	r3, r7
 800bcb4:	460e      	mov	r6, r1
 800bcb6:	d9f4      	bls.n	800bca2 <_printf_i+0x116>
 800bcb8:	2b08      	cmp	r3, #8
 800bcba:	d10b      	bne.n	800bcd4 <_printf_i+0x148>
 800bcbc:	6823      	ldr	r3, [r4, #0]
 800bcbe:	07de      	lsls	r6, r3, #31
 800bcc0:	d508      	bpl.n	800bcd4 <_printf_i+0x148>
 800bcc2:	6923      	ldr	r3, [r4, #16]
 800bcc4:	6861      	ldr	r1, [r4, #4]
 800bcc6:	4299      	cmp	r1, r3
 800bcc8:	bfde      	ittt	le
 800bcca:	2330      	movle	r3, #48	; 0x30
 800bccc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bcd0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800bcd4:	1b52      	subs	r2, r2, r5
 800bcd6:	6122      	str	r2, [r4, #16]
 800bcd8:	f8cd a000 	str.w	sl, [sp]
 800bcdc:	464b      	mov	r3, r9
 800bcde:	aa03      	add	r2, sp, #12
 800bce0:	4621      	mov	r1, r4
 800bce2:	4640      	mov	r0, r8
 800bce4:	f7ff fee4 	bl	800bab0 <_printf_common>
 800bce8:	3001      	adds	r0, #1
 800bcea:	d14a      	bne.n	800bd82 <_printf_i+0x1f6>
 800bcec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bcf0:	b004      	add	sp, #16
 800bcf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcf6:	6823      	ldr	r3, [r4, #0]
 800bcf8:	f043 0320 	orr.w	r3, r3, #32
 800bcfc:	6023      	str	r3, [r4, #0]
 800bcfe:	4833      	ldr	r0, [pc, #204]	; (800bdcc <_printf_i+0x240>)
 800bd00:	2778      	movs	r7, #120	; 0x78
 800bd02:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bd06:	6823      	ldr	r3, [r4, #0]
 800bd08:	6829      	ldr	r1, [r5, #0]
 800bd0a:	061f      	lsls	r7, r3, #24
 800bd0c:	f851 6b04 	ldr.w	r6, [r1], #4
 800bd10:	d402      	bmi.n	800bd18 <_printf_i+0x18c>
 800bd12:	065f      	lsls	r7, r3, #25
 800bd14:	bf48      	it	mi
 800bd16:	b2b6      	uxthmi	r6, r6
 800bd18:	07df      	lsls	r7, r3, #31
 800bd1a:	bf48      	it	mi
 800bd1c:	f043 0320 	orrmi.w	r3, r3, #32
 800bd20:	6029      	str	r1, [r5, #0]
 800bd22:	bf48      	it	mi
 800bd24:	6023      	strmi	r3, [r4, #0]
 800bd26:	b91e      	cbnz	r6, 800bd30 <_printf_i+0x1a4>
 800bd28:	6823      	ldr	r3, [r4, #0]
 800bd2a:	f023 0320 	bic.w	r3, r3, #32
 800bd2e:	6023      	str	r3, [r4, #0]
 800bd30:	2310      	movs	r3, #16
 800bd32:	e7a7      	b.n	800bc84 <_printf_i+0xf8>
 800bd34:	4824      	ldr	r0, [pc, #144]	; (800bdc8 <_printf_i+0x23c>)
 800bd36:	e7e4      	b.n	800bd02 <_printf_i+0x176>
 800bd38:	4615      	mov	r5, r2
 800bd3a:	e7bd      	b.n	800bcb8 <_printf_i+0x12c>
 800bd3c:	682b      	ldr	r3, [r5, #0]
 800bd3e:	6826      	ldr	r6, [r4, #0]
 800bd40:	6961      	ldr	r1, [r4, #20]
 800bd42:	1d18      	adds	r0, r3, #4
 800bd44:	6028      	str	r0, [r5, #0]
 800bd46:	0635      	lsls	r5, r6, #24
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	d501      	bpl.n	800bd50 <_printf_i+0x1c4>
 800bd4c:	6019      	str	r1, [r3, #0]
 800bd4e:	e002      	b.n	800bd56 <_printf_i+0x1ca>
 800bd50:	0670      	lsls	r0, r6, #25
 800bd52:	d5fb      	bpl.n	800bd4c <_printf_i+0x1c0>
 800bd54:	8019      	strh	r1, [r3, #0]
 800bd56:	2300      	movs	r3, #0
 800bd58:	6123      	str	r3, [r4, #16]
 800bd5a:	4615      	mov	r5, r2
 800bd5c:	e7bc      	b.n	800bcd8 <_printf_i+0x14c>
 800bd5e:	682b      	ldr	r3, [r5, #0]
 800bd60:	1d1a      	adds	r2, r3, #4
 800bd62:	602a      	str	r2, [r5, #0]
 800bd64:	681d      	ldr	r5, [r3, #0]
 800bd66:	6862      	ldr	r2, [r4, #4]
 800bd68:	2100      	movs	r1, #0
 800bd6a:	4628      	mov	r0, r5
 800bd6c:	f7f4 fa30 	bl	80001d0 <memchr>
 800bd70:	b108      	cbz	r0, 800bd76 <_printf_i+0x1ea>
 800bd72:	1b40      	subs	r0, r0, r5
 800bd74:	6060      	str	r0, [r4, #4]
 800bd76:	6863      	ldr	r3, [r4, #4]
 800bd78:	6123      	str	r3, [r4, #16]
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd80:	e7aa      	b.n	800bcd8 <_printf_i+0x14c>
 800bd82:	6923      	ldr	r3, [r4, #16]
 800bd84:	462a      	mov	r2, r5
 800bd86:	4649      	mov	r1, r9
 800bd88:	4640      	mov	r0, r8
 800bd8a:	47d0      	blx	sl
 800bd8c:	3001      	adds	r0, #1
 800bd8e:	d0ad      	beq.n	800bcec <_printf_i+0x160>
 800bd90:	6823      	ldr	r3, [r4, #0]
 800bd92:	079b      	lsls	r3, r3, #30
 800bd94:	d413      	bmi.n	800bdbe <_printf_i+0x232>
 800bd96:	68e0      	ldr	r0, [r4, #12]
 800bd98:	9b03      	ldr	r3, [sp, #12]
 800bd9a:	4298      	cmp	r0, r3
 800bd9c:	bfb8      	it	lt
 800bd9e:	4618      	movlt	r0, r3
 800bda0:	e7a6      	b.n	800bcf0 <_printf_i+0x164>
 800bda2:	2301      	movs	r3, #1
 800bda4:	4632      	mov	r2, r6
 800bda6:	4649      	mov	r1, r9
 800bda8:	4640      	mov	r0, r8
 800bdaa:	47d0      	blx	sl
 800bdac:	3001      	adds	r0, #1
 800bdae:	d09d      	beq.n	800bcec <_printf_i+0x160>
 800bdb0:	3501      	adds	r5, #1
 800bdb2:	68e3      	ldr	r3, [r4, #12]
 800bdb4:	9903      	ldr	r1, [sp, #12]
 800bdb6:	1a5b      	subs	r3, r3, r1
 800bdb8:	42ab      	cmp	r3, r5
 800bdba:	dcf2      	bgt.n	800bda2 <_printf_i+0x216>
 800bdbc:	e7eb      	b.n	800bd96 <_printf_i+0x20a>
 800bdbe:	2500      	movs	r5, #0
 800bdc0:	f104 0619 	add.w	r6, r4, #25
 800bdc4:	e7f5      	b.n	800bdb2 <_printf_i+0x226>
 800bdc6:	bf00      	nop
 800bdc8:	0800c2f4 	.word	0x0800c2f4
 800bdcc:	0800c305 	.word	0x0800c305

0800bdd0 <__swbuf_r>:
 800bdd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdd2:	460e      	mov	r6, r1
 800bdd4:	4614      	mov	r4, r2
 800bdd6:	4605      	mov	r5, r0
 800bdd8:	b118      	cbz	r0, 800bde2 <__swbuf_r+0x12>
 800bdda:	6a03      	ldr	r3, [r0, #32]
 800bddc:	b90b      	cbnz	r3, 800bde2 <__swbuf_r+0x12>
 800bdde:	f7ff fab3 	bl	800b348 <__sinit>
 800bde2:	69a3      	ldr	r3, [r4, #24]
 800bde4:	60a3      	str	r3, [r4, #8]
 800bde6:	89a3      	ldrh	r3, [r4, #12]
 800bde8:	071a      	lsls	r2, r3, #28
 800bdea:	d525      	bpl.n	800be38 <__swbuf_r+0x68>
 800bdec:	6923      	ldr	r3, [r4, #16]
 800bdee:	b31b      	cbz	r3, 800be38 <__swbuf_r+0x68>
 800bdf0:	6823      	ldr	r3, [r4, #0]
 800bdf2:	6922      	ldr	r2, [r4, #16]
 800bdf4:	1a98      	subs	r0, r3, r2
 800bdf6:	6963      	ldr	r3, [r4, #20]
 800bdf8:	b2f6      	uxtb	r6, r6
 800bdfa:	4283      	cmp	r3, r0
 800bdfc:	4637      	mov	r7, r6
 800bdfe:	dc04      	bgt.n	800be0a <__swbuf_r+0x3a>
 800be00:	4621      	mov	r1, r4
 800be02:	4628      	mov	r0, r5
 800be04:	f7ff fc46 	bl	800b694 <_fflush_r>
 800be08:	b9e0      	cbnz	r0, 800be44 <__swbuf_r+0x74>
 800be0a:	68a3      	ldr	r3, [r4, #8]
 800be0c:	3b01      	subs	r3, #1
 800be0e:	60a3      	str	r3, [r4, #8]
 800be10:	6823      	ldr	r3, [r4, #0]
 800be12:	1c5a      	adds	r2, r3, #1
 800be14:	6022      	str	r2, [r4, #0]
 800be16:	701e      	strb	r6, [r3, #0]
 800be18:	6962      	ldr	r2, [r4, #20]
 800be1a:	1c43      	adds	r3, r0, #1
 800be1c:	429a      	cmp	r2, r3
 800be1e:	d004      	beq.n	800be2a <__swbuf_r+0x5a>
 800be20:	89a3      	ldrh	r3, [r4, #12]
 800be22:	07db      	lsls	r3, r3, #31
 800be24:	d506      	bpl.n	800be34 <__swbuf_r+0x64>
 800be26:	2e0a      	cmp	r6, #10
 800be28:	d104      	bne.n	800be34 <__swbuf_r+0x64>
 800be2a:	4621      	mov	r1, r4
 800be2c:	4628      	mov	r0, r5
 800be2e:	f7ff fc31 	bl	800b694 <_fflush_r>
 800be32:	b938      	cbnz	r0, 800be44 <__swbuf_r+0x74>
 800be34:	4638      	mov	r0, r7
 800be36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be38:	4621      	mov	r1, r4
 800be3a:	4628      	mov	r0, r5
 800be3c:	f000 f806 	bl	800be4c <__swsetup_r>
 800be40:	2800      	cmp	r0, #0
 800be42:	d0d5      	beq.n	800bdf0 <__swbuf_r+0x20>
 800be44:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800be48:	e7f4      	b.n	800be34 <__swbuf_r+0x64>
	...

0800be4c <__swsetup_r>:
 800be4c:	b538      	push	{r3, r4, r5, lr}
 800be4e:	4b2a      	ldr	r3, [pc, #168]	; (800bef8 <__swsetup_r+0xac>)
 800be50:	4605      	mov	r5, r0
 800be52:	6818      	ldr	r0, [r3, #0]
 800be54:	460c      	mov	r4, r1
 800be56:	b118      	cbz	r0, 800be60 <__swsetup_r+0x14>
 800be58:	6a03      	ldr	r3, [r0, #32]
 800be5a:	b90b      	cbnz	r3, 800be60 <__swsetup_r+0x14>
 800be5c:	f7ff fa74 	bl	800b348 <__sinit>
 800be60:	89a3      	ldrh	r3, [r4, #12]
 800be62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be66:	0718      	lsls	r0, r3, #28
 800be68:	d422      	bmi.n	800beb0 <__swsetup_r+0x64>
 800be6a:	06d9      	lsls	r1, r3, #27
 800be6c:	d407      	bmi.n	800be7e <__swsetup_r+0x32>
 800be6e:	2309      	movs	r3, #9
 800be70:	602b      	str	r3, [r5, #0]
 800be72:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800be76:	81a3      	strh	r3, [r4, #12]
 800be78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be7c:	e034      	b.n	800bee8 <__swsetup_r+0x9c>
 800be7e:	0758      	lsls	r0, r3, #29
 800be80:	d512      	bpl.n	800bea8 <__swsetup_r+0x5c>
 800be82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be84:	b141      	cbz	r1, 800be98 <__swsetup_r+0x4c>
 800be86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be8a:	4299      	cmp	r1, r3
 800be8c:	d002      	beq.n	800be94 <__swsetup_r+0x48>
 800be8e:	4628      	mov	r0, r5
 800be90:	f7ff fb2e 	bl	800b4f0 <_free_r>
 800be94:	2300      	movs	r3, #0
 800be96:	6363      	str	r3, [r4, #52]	; 0x34
 800be98:	89a3      	ldrh	r3, [r4, #12]
 800be9a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800be9e:	81a3      	strh	r3, [r4, #12]
 800bea0:	2300      	movs	r3, #0
 800bea2:	6063      	str	r3, [r4, #4]
 800bea4:	6923      	ldr	r3, [r4, #16]
 800bea6:	6023      	str	r3, [r4, #0]
 800bea8:	89a3      	ldrh	r3, [r4, #12]
 800beaa:	f043 0308 	orr.w	r3, r3, #8
 800beae:	81a3      	strh	r3, [r4, #12]
 800beb0:	6923      	ldr	r3, [r4, #16]
 800beb2:	b94b      	cbnz	r3, 800bec8 <__swsetup_r+0x7c>
 800beb4:	89a3      	ldrh	r3, [r4, #12]
 800beb6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800beba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bebe:	d003      	beq.n	800bec8 <__swsetup_r+0x7c>
 800bec0:	4621      	mov	r1, r4
 800bec2:	4628      	mov	r0, r5
 800bec4:	f000 f840 	bl	800bf48 <__smakebuf_r>
 800bec8:	89a0      	ldrh	r0, [r4, #12]
 800beca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bece:	f010 0301 	ands.w	r3, r0, #1
 800bed2:	d00a      	beq.n	800beea <__swsetup_r+0x9e>
 800bed4:	2300      	movs	r3, #0
 800bed6:	60a3      	str	r3, [r4, #8]
 800bed8:	6963      	ldr	r3, [r4, #20]
 800beda:	425b      	negs	r3, r3
 800bedc:	61a3      	str	r3, [r4, #24]
 800bede:	6923      	ldr	r3, [r4, #16]
 800bee0:	b943      	cbnz	r3, 800bef4 <__swsetup_r+0xa8>
 800bee2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bee6:	d1c4      	bne.n	800be72 <__swsetup_r+0x26>
 800bee8:	bd38      	pop	{r3, r4, r5, pc}
 800beea:	0781      	lsls	r1, r0, #30
 800beec:	bf58      	it	pl
 800beee:	6963      	ldrpl	r3, [r4, #20]
 800bef0:	60a3      	str	r3, [r4, #8]
 800bef2:	e7f4      	b.n	800bede <__swsetup_r+0x92>
 800bef4:	2000      	movs	r0, #0
 800bef6:	e7f7      	b.n	800bee8 <__swsetup_r+0x9c>
 800bef8:	2000023c 	.word	0x2000023c

0800befc <__swhatbuf_r>:
 800befc:	b570      	push	{r4, r5, r6, lr}
 800befe:	460c      	mov	r4, r1
 800bf00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf04:	2900      	cmp	r1, #0
 800bf06:	b096      	sub	sp, #88	; 0x58
 800bf08:	4615      	mov	r5, r2
 800bf0a:	461e      	mov	r6, r3
 800bf0c:	da0d      	bge.n	800bf2a <__swhatbuf_r+0x2e>
 800bf0e:	89a3      	ldrh	r3, [r4, #12]
 800bf10:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bf14:	f04f 0100 	mov.w	r1, #0
 800bf18:	bf0c      	ite	eq
 800bf1a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bf1e:	2340      	movne	r3, #64	; 0x40
 800bf20:	2000      	movs	r0, #0
 800bf22:	6031      	str	r1, [r6, #0]
 800bf24:	602b      	str	r3, [r5, #0]
 800bf26:	b016      	add	sp, #88	; 0x58
 800bf28:	bd70      	pop	{r4, r5, r6, pc}
 800bf2a:	466a      	mov	r2, sp
 800bf2c:	f000 f848 	bl	800bfc0 <_fstat_r>
 800bf30:	2800      	cmp	r0, #0
 800bf32:	dbec      	blt.n	800bf0e <__swhatbuf_r+0x12>
 800bf34:	9901      	ldr	r1, [sp, #4]
 800bf36:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bf3a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bf3e:	4259      	negs	r1, r3
 800bf40:	4159      	adcs	r1, r3
 800bf42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf46:	e7eb      	b.n	800bf20 <__swhatbuf_r+0x24>

0800bf48 <__smakebuf_r>:
 800bf48:	898b      	ldrh	r3, [r1, #12]
 800bf4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bf4c:	079d      	lsls	r5, r3, #30
 800bf4e:	4606      	mov	r6, r0
 800bf50:	460c      	mov	r4, r1
 800bf52:	d507      	bpl.n	800bf64 <__smakebuf_r+0x1c>
 800bf54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bf58:	6023      	str	r3, [r4, #0]
 800bf5a:	6123      	str	r3, [r4, #16]
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	6163      	str	r3, [r4, #20]
 800bf60:	b002      	add	sp, #8
 800bf62:	bd70      	pop	{r4, r5, r6, pc}
 800bf64:	ab01      	add	r3, sp, #4
 800bf66:	466a      	mov	r2, sp
 800bf68:	f7ff ffc8 	bl	800befc <__swhatbuf_r>
 800bf6c:	9900      	ldr	r1, [sp, #0]
 800bf6e:	4605      	mov	r5, r0
 800bf70:	4630      	mov	r0, r6
 800bf72:	f7ff f865 	bl	800b040 <_malloc_r>
 800bf76:	b948      	cbnz	r0, 800bf8c <__smakebuf_r+0x44>
 800bf78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf7c:	059a      	lsls	r2, r3, #22
 800bf7e:	d4ef      	bmi.n	800bf60 <__smakebuf_r+0x18>
 800bf80:	f023 0303 	bic.w	r3, r3, #3
 800bf84:	f043 0302 	orr.w	r3, r3, #2
 800bf88:	81a3      	strh	r3, [r4, #12]
 800bf8a:	e7e3      	b.n	800bf54 <__smakebuf_r+0xc>
 800bf8c:	89a3      	ldrh	r3, [r4, #12]
 800bf8e:	6020      	str	r0, [r4, #0]
 800bf90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf94:	81a3      	strh	r3, [r4, #12]
 800bf96:	9b00      	ldr	r3, [sp, #0]
 800bf98:	6163      	str	r3, [r4, #20]
 800bf9a:	9b01      	ldr	r3, [sp, #4]
 800bf9c:	6120      	str	r0, [r4, #16]
 800bf9e:	b15b      	cbz	r3, 800bfb8 <__smakebuf_r+0x70>
 800bfa0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfa4:	4630      	mov	r0, r6
 800bfa6:	f000 f81d 	bl	800bfe4 <_isatty_r>
 800bfaa:	b128      	cbz	r0, 800bfb8 <__smakebuf_r+0x70>
 800bfac:	89a3      	ldrh	r3, [r4, #12]
 800bfae:	f023 0303 	bic.w	r3, r3, #3
 800bfb2:	f043 0301 	orr.w	r3, r3, #1
 800bfb6:	81a3      	strh	r3, [r4, #12]
 800bfb8:	89a3      	ldrh	r3, [r4, #12]
 800bfba:	431d      	orrs	r5, r3
 800bfbc:	81a5      	strh	r5, [r4, #12]
 800bfbe:	e7cf      	b.n	800bf60 <__smakebuf_r+0x18>

0800bfc0 <_fstat_r>:
 800bfc0:	b538      	push	{r3, r4, r5, lr}
 800bfc2:	4d07      	ldr	r5, [pc, #28]	; (800bfe0 <_fstat_r+0x20>)
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	4604      	mov	r4, r0
 800bfc8:	4608      	mov	r0, r1
 800bfca:	4611      	mov	r1, r2
 800bfcc:	602b      	str	r3, [r5, #0]
 800bfce:	f7fe fd7a 	bl	800aac6 <_fstat>
 800bfd2:	1c43      	adds	r3, r0, #1
 800bfd4:	d102      	bne.n	800bfdc <_fstat_r+0x1c>
 800bfd6:	682b      	ldr	r3, [r5, #0]
 800bfd8:	b103      	cbz	r3, 800bfdc <_fstat_r+0x1c>
 800bfda:	6023      	str	r3, [r4, #0]
 800bfdc:	bd38      	pop	{r3, r4, r5, pc}
 800bfde:	bf00      	nop
 800bfe0:	20003f98 	.word	0x20003f98

0800bfe4 <_isatty_r>:
 800bfe4:	b538      	push	{r3, r4, r5, lr}
 800bfe6:	4d06      	ldr	r5, [pc, #24]	; (800c000 <_isatty_r+0x1c>)
 800bfe8:	2300      	movs	r3, #0
 800bfea:	4604      	mov	r4, r0
 800bfec:	4608      	mov	r0, r1
 800bfee:	602b      	str	r3, [r5, #0]
 800bff0:	f7fe fd79 	bl	800aae6 <_isatty>
 800bff4:	1c43      	adds	r3, r0, #1
 800bff6:	d102      	bne.n	800bffe <_isatty_r+0x1a>
 800bff8:	682b      	ldr	r3, [r5, #0]
 800bffa:	b103      	cbz	r3, 800bffe <_isatty_r+0x1a>
 800bffc:	6023      	str	r3, [r4, #0]
 800bffe:	bd38      	pop	{r3, r4, r5, pc}
 800c000:	20003f98 	.word	0x20003f98

0800c004 <_raise_r>:
 800c004:	291f      	cmp	r1, #31
 800c006:	b538      	push	{r3, r4, r5, lr}
 800c008:	4604      	mov	r4, r0
 800c00a:	460d      	mov	r5, r1
 800c00c:	d904      	bls.n	800c018 <_raise_r+0x14>
 800c00e:	2316      	movs	r3, #22
 800c010:	6003      	str	r3, [r0, #0]
 800c012:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c016:	bd38      	pop	{r3, r4, r5, pc}
 800c018:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c01a:	b112      	cbz	r2, 800c022 <_raise_r+0x1e>
 800c01c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c020:	b94b      	cbnz	r3, 800c036 <_raise_r+0x32>
 800c022:	4620      	mov	r0, r4
 800c024:	f000 f830 	bl	800c088 <_getpid_r>
 800c028:	462a      	mov	r2, r5
 800c02a:	4601      	mov	r1, r0
 800c02c:	4620      	mov	r0, r4
 800c02e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c032:	f000 b817 	b.w	800c064 <_kill_r>
 800c036:	2b01      	cmp	r3, #1
 800c038:	d00a      	beq.n	800c050 <_raise_r+0x4c>
 800c03a:	1c59      	adds	r1, r3, #1
 800c03c:	d103      	bne.n	800c046 <_raise_r+0x42>
 800c03e:	2316      	movs	r3, #22
 800c040:	6003      	str	r3, [r0, #0]
 800c042:	2001      	movs	r0, #1
 800c044:	e7e7      	b.n	800c016 <_raise_r+0x12>
 800c046:	2400      	movs	r4, #0
 800c048:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c04c:	4628      	mov	r0, r5
 800c04e:	4798      	blx	r3
 800c050:	2000      	movs	r0, #0
 800c052:	e7e0      	b.n	800c016 <_raise_r+0x12>

0800c054 <raise>:
 800c054:	4b02      	ldr	r3, [pc, #8]	; (800c060 <raise+0xc>)
 800c056:	4601      	mov	r1, r0
 800c058:	6818      	ldr	r0, [r3, #0]
 800c05a:	f7ff bfd3 	b.w	800c004 <_raise_r>
 800c05e:	bf00      	nop
 800c060:	2000023c 	.word	0x2000023c

0800c064 <_kill_r>:
 800c064:	b538      	push	{r3, r4, r5, lr}
 800c066:	4d07      	ldr	r5, [pc, #28]	; (800c084 <_kill_r+0x20>)
 800c068:	2300      	movs	r3, #0
 800c06a:	4604      	mov	r4, r0
 800c06c:	4608      	mov	r0, r1
 800c06e:	4611      	mov	r1, r2
 800c070:	602b      	str	r3, [r5, #0]
 800c072:	f7fe fcc9 	bl	800aa08 <_kill>
 800c076:	1c43      	adds	r3, r0, #1
 800c078:	d102      	bne.n	800c080 <_kill_r+0x1c>
 800c07a:	682b      	ldr	r3, [r5, #0]
 800c07c:	b103      	cbz	r3, 800c080 <_kill_r+0x1c>
 800c07e:	6023      	str	r3, [r4, #0]
 800c080:	bd38      	pop	{r3, r4, r5, pc}
 800c082:	bf00      	nop
 800c084:	20003f98 	.word	0x20003f98

0800c088 <_getpid_r>:
 800c088:	f7fe bcb6 	b.w	800a9f8 <_getpid>

0800c08c <_gettimeofday>:
 800c08c:	4b02      	ldr	r3, [pc, #8]	; (800c098 <_gettimeofday+0xc>)
 800c08e:	2258      	movs	r2, #88	; 0x58
 800c090:	601a      	str	r2, [r3, #0]
 800c092:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c096:	4770      	bx	lr
 800c098:	20003f98 	.word	0x20003f98

0800c09c <_init>:
 800c09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c09e:	bf00      	nop
 800c0a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0a2:	bc08      	pop	{r3}
 800c0a4:	469e      	mov	lr, r3
 800c0a6:	4770      	bx	lr

0800c0a8 <_fini>:
 800c0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0aa:	bf00      	nop
 800c0ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0ae:	bc08      	pop	{r3}
 800c0b0:	469e      	mov	lr, r3
 800c0b2:	4770      	bx	lr
