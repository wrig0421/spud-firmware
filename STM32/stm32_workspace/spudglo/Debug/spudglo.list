
spudglo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aee4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  0800b074  0800b074  0001b074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2e0  0800b2e0  000200d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800b2e0  0800b2e0  000200d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b2e0  0800b2e0  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2e0  0800b2e0  0001b2e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2e4  0800b2e4  0001b2e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  0800b2e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003c10  200000d4  0800b3bc  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003ce4  0800b3bc  00023ce4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eb7e  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bee  00000000  00000000  0003ec82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b58  00000000  00000000  00043870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019e0  00000000  00000000  000453c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002969e  00000000  00000000  00046da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022b60  00000000  00000000  00070446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7b6b  00000000  00000000  00092fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018ab11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007bf4  00000000  00000000  0018ab64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  00192758  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  0019277c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d4 	.word	0x200000d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b05c 	.word	0x0800b05c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d8 	.word	0x200000d8
 80001cc:	0800b05c 	.word	0x0800b05c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <current_monitor_set>:
float g_absolute_max_current_ratio = 0.0f; // DO NOT EXCEED!
p_current_t gp_current_monitor_strip[NUM_STRIPS];


void current_monitor_set(float value)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value < g_absolute_max_current_ratio)
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <current_monitor_set+0x3c>)
 8000ab8:	edd3 7a00 	vldr	s15, [r3]
 8000abc:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ac0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ac8:	d503      	bpl.n	8000ad2 <current_monitor_set+0x26>
    {
        g_max_current_ratio = value;
 8000aca:	4a08      	ldr	r2, [pc, #32]	; (8000aec <current_monitor_set+0x40>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6013      	str	r3, [r2, #0]
    }
    else
    {
        g_max_current_ratio = g_absolute_max_current_ratio;
    }
}
 8000ad0:	e003      	b.n	8000ada <current_monitor_set+0x2e>
        g_max_current_ratio = g_absolute_max_current_ratio;
 8000ad2:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <current_monitor_set+0x3c>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a05      	ldr	r2, [pc, #20]	; (8000aec <current_monitor_set+0x40>)
 8000ad8:	6013      	str	r3, [r2, #0]
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	200000f0 	.word	0x200000f0
 8000aec:	20000000 	.word	0x20000000

08000af0 <current_monitor_ratio>:


float current_monitor_ratio(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
    return g_max_current_ratio;
 8000af4:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <current_monitor_ratio+0x18>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	ee07 3a90 	vmov	s15, r3
}
 8000afc:	eeb0 0a67 	vmov.f32	s0, s15
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	20000000 	.word	0x20000000

08000b0c <current_monitor_init>:


void current_monitor_init(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
    while ((g_max_current_ratio * ((float)CURRENT_MONITOR_MAX_CURRENT_PER_LED_MA / 1000) * NUM_LEDS) > (float)CURRENT_MONITOR_MAX_CURRENT_DRAW_A)
 8000b10:	e009      	b.n	8000b26 <current_monitor_init+0x1a>
    {
        g_max_current_ratio -= 0.05f;
 8000b12:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <current_monitor_init+0x64>)
 8000b14:	edd3 7a00 	vldr	s15, [r3]
 8000b18:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000b74 <current_monitor_init+0x68>
 8000b1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000b20:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <current_monitor_init+0x64>)
 8000b22:	edc3 7a00 	vstr	s15, [r3]
    while ((g_max_current_ratio * ((float)CURRENT_MONITOR_MAX_CURRENT_PER_LED_MA / 1000) * NUM_LEDS) > (float)CURRENT_MONITOR_MAX_CURRENT_DRAW_A)
 8000b26:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <current_monitor_init+0x64>)
 8000b28:	edd3 7a00 	vldr	s15, [r3]
 8000b2c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000b78 <current_monitor_init+0x6c>
 8000b30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b34:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000b7c <current_monitor_init+0x70>
 8000b38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b3c:	eeb2 7a03 	vmov.f32	s14, #35	; 0x41180000  9.5
 8000b40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b48:	dce3      	bgt.n	8000b12 <current_monitor_init+0x6>
    }
    if (g_max_current_ratio <= 0) while(1); // broken..
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <current_monitor_init+0x64>)
 8000b4c:	edd3 7a00 	vldr	s15, [r3]
 8000b50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b58:	d800      	bhi.n	8000b5c <current_monitor_init+0x50>
 8000b5a:	e7fe      	b.n	8000b5a <current_monitor_init+0x4e>
    g_absolute_max_current_ratio = g_max_current_ratio;
 8000b5c:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <current_monitor_init+0x64>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a07      	ldr	r2, [pc, #28]	; (8000b80 <current_monitor_init+0x74>)
 8000b62:	6013      	str	r3, [r2, #0]
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	20000000 	.word	0x20000000
 8000b74:	3d4ccccd 	.word	0x3d4ccccd
 8000b78:	3d23d70a 	.word	0x3d23d70a
 8000b7c:	441f0000 	.word	0x441f0000
 8000b80:	200000f0 	.word	0x200000f0

08000b84 <animate_led_show_strip>:
 * @brief   Write data stored in `gp_ws28128b_strip` array to the strip
 * @param   strip_mask - the strip to write to
 * @return  void
 */
void animate_led_show_strip(const strip_mask_t strip_mask)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	80fb      	strh	r3, [r7, #6]
    if (strip_mask & STRIP_BIT_1)
 8000b8e:	88fb      	ldrh	r3, [r7, #6]
 8000b90:	f003 0301 	and.w	r3, r3, #1
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <animate_led_show_strip+0x18>
    {
        ws2812b_show_strip_one();
 8000b98:	f001 f85a 	bl	8001c50 <ws2812b_show_strip_one>
    {
        // STRIP_BIT_3
        ws2812b_show_strip_three();
    }
#endif
}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <animate_led_set_pixel>:


void animate_led_set_pixel(const strip_mask_t mask, const uint16_t pixel, const uint8_t red, const uint8_t green,
                           const uint8_t blue)
{
 8000ba4:	b590      	push	{r4, r7, lr}
 8000ba6:	b087      	sub	sp, #28
 8000ba8:	af02      	add	r7, sp, #8
 8000baa:	4604      	mov	r4, r0
 8000bac:	4608      	mov	r0, r1
 8000bae:	4611      	mov	r1, r2
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4623      	mov	r3, r4
 8000bb4:	80fb      	strh	r3, [r7, #6]
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	80bb      	strh	r3, [r7, #4]
 8000bba:	460b      	mov	r3, r1
 8000bbc:	70fb      	strb	r3, [r7, #3]
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	70bb      	strb	r3, [r7, #2]
    if (STRIP_BIT_ALL_SET == mask)
 8000bc2:	88fb      	ldrh	r3, [r7, #6]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d11c      	bne.n	8000c02 <animate_led_set_pixel+0x5e>
    {
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000bc8:	2301      	movs	r3, #1
 8000bca:	73fb      	strb	r3, [r7, #15]
 8000bcc:	e015      	b.n	8000bfa <animate_led_set_pixel+0x56>
        {
            //offset = animate_led_get_strip_offset(strip_bit);
            if (ws2812_pixel_is_in_strip_range(strip_bit, pixel)) ws2812b_set_led(strip_bit, pixel, red, green, blue);
 8000bce:	88ba      	ldrh	r2, [r7, #4]
 8000bd0:	7bfb      	ldrb	r3, [r7, #15]
 8000bd2:	4611      	mov	r1, r2
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 fe99 	bl	800190c <ws2812_pixel_is_in_strip_range>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d009      	beq.n	8000bf4 <animate_led_set_pixel+0x50>
 8000be0:	78bc      	ldrb	r4, [r7, #2]
 8000be2:	78fa      	ldrb	r2, [r7, #3]
 8000be4:	88b9      	ldrh	r1, [r7, #4]
 8000be6:	7bf8      	ldrb	r0, [r7, #15]
 8000be8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000bec:	9300      	str	r3, [sp, #0]
 8000bee:	4623      	mov	r3, r4
 8000bf0:	f000 fea6 	bl	8001940 <ws2812b_set_led>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	73fb      	strb	r3, [r7, #15]
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d9e6      	bls.n	8000bce <animate_led_set_pixel+0x2a>
                if (ws2812_pixel_is_in_strip_range(strip_bit, pixel)) ws2812b_set_led(strip_bit, pixel, red, green, blue);
            }
        }
    }
    //animate_led_show_strip(mask);
}
 8000c00:	e020      	b.n	8000c44 <animate_led_set_pixel+0xa0>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000c02:	2301      	movs	r3, #1
 8000c04:	73bb      	strb	r3, [r7, #14]
 8000c06:	e01a      	b.n	8000c3e <animate_led_set_pixel+0x9a>
            if (mask & strip_bit)
 8000c08:	88fa      	ldrh	r2, [r7, #6]
 8000c0a:	7bbb      	ldrb	r3, [r7, #14]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d012      	beq.n	8000c38 <animate_led_set_pixel+0x94>
                if (ws2812_pixel_is_in_strip_range(strip_bit, pixel)) ws2812b_set_led(strip_bit, pixel, red, green, blue);
 8000c12:	88ba      	ldrh	r2, [r7, #4]
 8000c14:	7bbb      	ldrb	r3, [r7, #14]
 8000c16:	4611      	mov	r1, r2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f000 fe77 	bl	800190c <ws2812_pixel_is_in_strip_range>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d009      	beq.n	8000c38 <animate_led_set_pixel+0x94>
 8000c24:	78bc      	ldrb	r4, [r7, #2]
 8000c26:	78fa      	ldrb	r2, [r7, #3]
 8000c28:	88b9      	ldrh	r1, [r7, #4]
 8000c2a:	7bb8      	ldrb	r0, [r7, #14]
 8000c2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	4623      	mov	r3, r4
 8000c34:	f000 fe84 	bl	8001940 <ws2812b_set_led>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000c38:	7bbb      	ldrb	r3, [r7, #14]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	73bb      	strb	r3, [r7, #14]
 8000c3e:	7bbb      	ldrb	r3, [r7, #14]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d9e1      	bls.n	8000c08 <animate_led_set_pixel+0x64>
}
 8000c44:	bf00      	nop
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd90      	pop	{r4, r7, pc}

08000c4c <animate_led_set_all_pixels>:


void animate_led_set_all_pixels(const strip_mask_t mask, const uint8_t red, const uint8_t green, const uint8_t blue)
{
 8000c4c:	b590      	push	{r4, r7, lr}
 8000c4e:	b089      	sub	sp, #36	; 0x24
 8000c50:	af02      	add	r7, sp, #8
 8000c52:	4604      	mov	r4, r0
 8000c54:	4608      	mov	r0, r1
 8000c56:	4611      	mov	r1, r2
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4623      	mov	r3, r4
 8000c5c:	80fb      	strh	r3, [r7, #6]
 8000c5e:	4603      	mov	r3, r0
 8000c60:	717b      	strb	r3, [r7, #5]
 8000c62:	460b      	mov	r3, r1
 8000c64:	713b      	strb	r3, [r7, #4]
 8000c66:	4613      	mov	r3, r2
 8000c68:	70fb      	strb	r3, [r7, #3]
    uint16_t strip_size = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	81fb      	strh	r3, [r7, #14]
    if (mask == g_all_strip_mask)
 8000c6e:	4b2b      	ldr	r3, [pc, #172]	; (8000d1c <animate_led_set_all_pixels+0xd0>)
 8000c70:	881b      	ldrh	r3, [r3, #0]
 8000c72:	88fa      	ldrh	r2, [r7, #6]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d122      	bne.n	8000cbe <animate_led_set_all_pixels+0x72>
    {
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000c78:	2301      	movs	r3, #1
 8000c7a:	75fb      	strb	r3, [r7, #23]
 8000c7c:	e01b      	b.n	8000cb6 <animate_led_set_all_pixels+0x6a>
        {
            strip_size = ws2812_get_strip_size(strip_bit);
 8000c7e:	7dfb      	ldrb	r3, [r7, #23]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f000 fddb 	bl	800183c <ws2812_get_strip_size>
 8000c86:	4603      	mov	r3, r0
 8000c88:	81fb      	strh	r3, [r7, #14]
            //offset = animate_led_get_strip_offset(strip_bit);
            for (uint16_t iii = 0; iii < strip_size; iii++) ws2812b_set_led(strip_bit, iii, red, green, blue);
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	82bb      	strh	r3, [r7, #20]
 8000c8e:	e00b      	b.n	8000ca8 <animate_led_set_all_pixels+0x5c>
 8000c90:	793c      	ldrb	r4, [r7, #4]
 8000c92:	797a      	ldrb	r2, [r7, #5]
 8000c94:	8ab9      	ldrh	r1, [r7, #20]
 8000c96:	7df8      	ldrb	r0, [r7, #23]
 8000c98:	78fb      	ldrb	r3, [r7, #3]
 8000c9a:	9300      	str	r3, [sp, #0]
 8000c9c:	4623      	mov	r3, r4
 8000c9e:	f000 fe4f 	bl	8001940 <ws2812b_set_led>
 8000ca2:	8abb      	ldrh	r3, [r7, #20]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	82bb      	strh	r3, [r7, #20]
 8000ca8:	8aba      	ldrh	r2, [r7, #20]
 8000caa:	89fb      	ldrh	r3, [r7, #14]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d3ef      	bcc.n	8000c90 <animate_led_set_all_pixels+0x44>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000cb0:	7dfb      	ldrb	r3, [r7, #23]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	75fb      	strb	r3, [r7, #23]
 8000cb6:	7dfb      	ldrb	r3, [r7, #23]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d9e0      	bls.n	8000c7e <animate_led_set_all_pixels+0x32>
 8000cbc:	e026      	b.n	8000d0c <animate_led_set_all_pixels+0xc0>
        }
    }
    else
    {
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	74fb      	strb	r3, [r7, #19]
 8000cc2:	e020      	b.n	8000d06 <animate_led_set_all_pixels+0xba>
        {
            if (mask & strip_bit)
 8000cc4:	88fa      	ldrh	r2, [r7, #6]
 8000cc6:	7cfb      	ldrb	r3, [r7, #19]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d018      	beq.n	8000d00 <animate_led_set_all_pixels+0xb4>
            {
                strip_size = ws2812_get_strip_size(strip_bit);
 8000cce:	7cfb      	ldrb	r3, [r7, #19]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f000 fdb3 	bl	800183c <ws2812_get_strip_size>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	81fb      	strh	r3, [r7, #14]
                for (uint16_t yyy = 0; yyy < strip_size; yyy++) ws2812b_set_led(strip_bit, yyy, red, green, blue);
 8000cda:	2300      	movs	r3, #0
 8000cdc:	823b      	strh	r3, [r7, #16]
 8000cde:	e00b      	b.n	8000cf8 <animate_led_set_all_pixels+0xac>
 8000ce0:	793c      	ldrb	r4, [r7, #4]
 8000ce2:	797a      	ldrb	r2, [r7, #5]
 8000ce4:	8a39      	ldrh	r1, [r7, #16]
 8000ce6:	7cf8      	ldrb	r0, [r7, #19]
 8000ce8:	78fb      	ldrb	r3, [r7, #3]
 8000cea:	9300      	str	r3, [sp, #0]
 8000cec:	4623      	mov	r3, r4
 8000cee:	f000 fe27 	bl	8001940 <ws2812b_set_led>
 8000cf2:	8a3b      	ldrh	r3, [r7, #16]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	823b      	strh	r3, [r7, #16]
 8000cf8:	8a3a      	ldrh	r2, [r7, #16]
 8000cfa:	89fb      	ldrh	r3, [r7, #14]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d3ef      	bcc.n	8000ce0 <animate_led_set_all_pixels+0x94>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000d00:	7cfb      	ldrb	r3, [r7, #19]
 8000d02:	3301      	adds	r3, #1
 8000d04:	74fb      	strb	r3, [r7, #19]
 8000d06:	7cfb      	ldrb	r3, [r7, #19]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d9db      	bls.n	8000cc4 <animate_led_set_all_pixels+0x78>
            }
        }
    }
    animate_led_show_strip(mask);
 8000d0c:	88fb      	ldrh	r3, [r7, #6]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff ff38 	bl	8000b84 <animate_led_show_strip>
}
 8000d14:	bf00      	nop
 8000d16:	371c      	adds	r7, #28
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd90      	pop	{r4, r7, pc}
 8000d1c:	2000086e 	.word	0x2000086e

08000d20 <animate_led_solid_custom_color>:
	}
}


void animate_led_solid_custom_color(const strip_mask_t mask_solid, const color_hex_code_e color_solid)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	6039      	str	r1, [r7, #0]
 8000d2a:	80fb      	strh	r3, [r7, #6]
    uint8_t color_solid_rgb[sizeof(ws2812b_led_t)] = {0};
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <animate_led_solid_custom_color+0x40>)
 8000d2e:	881b      	ldrh	r3, [r3, #0]
 8000d30:	81bb      	strh	r3, [r7, #12]
 8000d32:	2300      	movs	r3, #0
 8000d34:	73bb      	strb	r3, [r7, #14]
    color_led_hex_to_rgb(color_solid, color_solid_rgb);
 8000d36:	f107 030c 	add.w	r3, r7, #12
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	6838      	ldr	r0, [r7, #0]
 8000d3e:	f000 fcf7 	bl	8001730 <color_led_hex_to_rgb>
    animate_led_set_all_pixels(mask_solid, color_solid_rgb[offsetof(ws2812b_led_t, red)],
 8000d42:	7b39      	ldrb	r1, [r7, #12]
 8000d44:	7b7a      	ldrb	r2, [r7, #13]
 8000d46:	7bbb      	ldrb	r3, [r7, #14]
 8000d48:	88f8      	ldrh	r0, [r7, #6]
 8000d4a:	f7ff ff7f 	bl	8000c4c <animate_led_set_all_pixels>
                               color_solid_rgb[offsetof(ws2812b_led_t, green)],
                               color_solid_rgb[offsetof(ws2812b_led_t, blue)]);
    animate_led_show_strip(mask_solid);
 8000d4e:	88fb      	ldrh	r3, [r7, #6]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff17 	bl	8000b84 <animate_led_show_strip>
}
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	0800b074 	.word	0x0800b074

08000d64 <animate_led_turn_all_pixels_off>:
 * @param   void
 * @return  void
 * @note    This function will set `gp_ws28128b_strip` array and write it to the strip(s).
 */
void animate_led_turn_all_pixels_off(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
	animate_led_set_all_pixels((strip_mask_t)STRIP_BIT_ALL_SET, 0, 0, 0);
 8000d68:	2300      	movs	r3, #0
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	2001      	movs	r0, #1
 8000d70:	f7ff ff6c 	bl	8000c4c <animate_led_set_all_pixels>
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <animate_led_only_spell_word>:
}


void animate_led_only_spell_word(const strip_mask_t mask_spell, const color_hex_code_e color_spell,
                                 const uint16_t time_ms)
{
 8000d78:	b590      	push	{r4, r7, lr}
 8000d7a:	ed2d 8b02 	vpush	{d8}
 8000d7e:	b089      	sub	sp, #36	; 0x24
 8000d80:	af02      	add	r7, sp, #8
 8000d82:	4603      	mov	r3, r0
 8000d84:	6039      	str	r1, [r7, #0]
 8000d86:	80fb      	strh	r3, [r7, #6]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	80bb      	strh	r3, [r7, #4]
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_spell);
 8000d8c:	88fb      	ldrh	r3, [r7, #6]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 fd98 	bl	80018c4 <ws2812_led_get_max_strip_size>
 8000d94:	4603      	mov	r3, r0
 8000d96:	827b      	strh	r3, [r7, #18]
    uint8_t color_spell_rgb[sizeof(ws2812b_led_t)] = {0};
 8000d98:	4b26      	ldr	r3, [pc, #152]	; (8000e34 <animate_led_only_spell_word+0xbc>)
 8000d9a:	881b      	ldrh	r3, [r3, #0]
 8000d9c:	81bb      	strh	r3, [r7, #12]
 8000d9e:	2300      	movs	r3, #0
 8000da0:	73bb      	strb	r3, [r7, #14]
    color_led_hex_to_rgb(color_spell, color_spell_rgb);
 8000da2:	f107 030c 	add.w	r3, r7, #12
 8000da6:	4619      	mov	r1, r3
 8000da8:	6838      	ldr	r0, [r7, #0]
 8000daa:	f000 fcc1 	bl	8001730 <color_led_hex_to_rgb>
	for (int i = 0; i < strip_size; i++)
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	e034      	b.n	8000e1e <animate_led_only_spell_word+0xa6>
	{
        if (task_button_press_interrupt_occurred())
 8000db4:	f000 ff52 	bl	8001c5c <task_button_press_interrupt_occurred>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d00d      	beq.n	8000dda <animate_led_only_spell_word+0x62>
        {
            if (task_button_press_check_interrupts(&color_spell_rgb[offsetof(ws2812b_led_t, red)], &color_spell_rgb[offsetof(ws2812b_led_t, green)], &color_spell_rgb[offsetof(ws2812b_led_t, blue)]))
 8000dbe:	f107 030c 	add.w	r3, r7, #12
 8000dc2:	1c9a      	adds	r2, r3, #2
 8000dc4:	f107 030c 	add.w	r3, r7, #12
 8000dc8:	1c59      	adds	r1, r3, #1
 8000dca:	f107 030c 	add.w	r3, r7, #12
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 ffa8 	bl	8001d24 <task_button_press_check_interrupts>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d126      	bne.n	8000e28 <animate_led_only_spell_word+0xb0>
            {
                return;
            }
        }
        animate_led_set_pixel(mask_spell, i,
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	b299      	uxth	r1, r3
 8000dde:	7b3a      	ldrb	r2, [r7, #12]
 8000de0:	7b7c      	ldrb	r4, [r7, #13]
 8000de2:	7bbb      	ldrb	r3, [r7, #14]
 8000de4:	88f8      	ldrh	r0, [r7, #6]
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	4623      	mov	r3, r4
 8000dea:	f7ff fedb 	bl	8000ba4 <animate_led_set_pixel>
                              color_spell_rgb[offsetof(ws2812b_led_t, red)],
                              color_spell_rgb[offsetof(ws2812b_led_t, green)],
                              color_spell_rgb[offsetof(ws2812b_led_t, blue)]);
        animate_led_show_strip(mask_spell);
 8000dee:	88fb      	ldrh	r3, [r7, #6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fec7 	bl	8000b84 <animate_led_show_strip>
 		task_led_ctrl_delay(time_ms / task_led_ctrl_speed());
 8000df6:	88bb      	ldrh	r3, [r7, #4]
 8000df8:	ee07 3a90 	vmov	s15, r3
 8000dfc:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000e00:	f001 fba8 	bl	8002554 <task_led_ctrl_speed>
 8000e04:	eeb0 7a40 	vmov.f32	s14, s0
 8000e08:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000e0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e10:	ee17 0a90 	vmov	r0, s15
 8000e14:	f001 fa38 	bl	8002288 <task_led_ctrl_delay>
	for (int i = 0; i < strip_size; i++)
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	617b      	str	r3, [r7, #20]
 8000e1e:	8a7b      	ldrh	r3, [r7, #18]
 8000e20:	697a      	ldr	r2, [r7, #20]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	dbc6      	blt.n	8000db4 <animate_led_only_spell_word+0x3c>
 8000e26:	e000      	b.n	8000e2a <animate_led_only_spell_word+0xb2>
                return;
 8000e28:	bf00      	nop
	}
}
 8000e2a:	371c      	adds	r7, #28
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	ecbd 8b02 	vpop	{d8}
 8000e32:	bd90      	pop	{r4, r7, pc}
 8000e34:	0800b074 	.word	0x0800b074

08000e38 <animate_led_fade_in_fade_out>:
    }
}


void animate_led_fade_in_fade_out(const strip_mask_t mask_fade, const color_hex_code_e color_fade)
{
 8000e38:	b5b0      	push	{r4, r5, r7, lr}
 8000e3a:	b08a      	sub	sp, #40	; 0x28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	81fb      	strh	r3, [r7, #14]
    float r, g, b;
    uint8_t color_fade_rgb[sizeof(ws2812b_led_t)] = {0};
 8000e44:	4b9b      	ldr	r3, [pc, #620]	; (80010b4 <animate_led_fade_in_fade_out+0x27c>)
 8000e46:	881b      	ldrh	r3, [r3, #0]
 8000e48:	823b      	strh	r3, [r7, #16]
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	74bb      	strb	r3, [r7, #18]
    color_led_hex_to_rgb(color_fade, color_fade_rgb);
 8000e4e:	f107 0310 	add.w	r3, r7, #16
 8000e52:	4619      	mov	r1, r3
 8000e54:	68b8      	ldr	r0, [r7, #8]
 8000e56:	f000 fc6b 	bl	8001730 <color_led_hex_to_rgb>
    for (int iii = 0; iii < 256; iii++)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e5e:	e08b      	b.n	8000f78 <animate_led_fade_in_fade_out+0x140>
    {
        if (task_button_press_interrupt_occurred())
 8000e60:	f000 fefc 	bl	8001c5c <task_button_press_interrupt_occurred>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d00e      	beq.n	8000e88 <animate_led_fade_in_fade_out+0x50>
        {
            if (task_button_press_check_interrupts(&color_fade_rgb[offsetof(ws2812b_led_t, red)], &color_fade_rgb[offsetof(ws2812b_led_t, green)], &color_fade_rgb[offsetof(ws2812b_led_t, blue)]))
 8000e6a:	f107 0310 	add.w	r3, r7, #16
 8000e6e:	1c9a      	adds	r2, r3, #2
 8000e70:	f107 0310 	add.w	r3, r7, #16
 8000e74:	1c59      	adds	r1, r3, #1
 8000e76:	f107 0310 	add.w	r3, r7, #16
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 ff52 	bl	8001d24 <task_button_press_check_interrupts>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f040 810f 	bne.w	80010a6 <animate_led_fade_in_fade_out+0x26e>
            {
                return;
            }
        }
        r = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, red)];
 8000e88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000e8a:	f7ff fb43 	bl	8000514 <__aeabi_i2d>
 8000e8e:	f04f 0200 	mov.w	r2, #0
 8000e92:	4b89      	ldr	r3, [pc, #548]	; (80010b8 <animate_led_fade_in_fade_out+0x280>)
 8000e94:	f7ff fcd2 	bl	800083c <__aeabi_ddiv>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	4614      	mov	r4, r2
 8000e9e:	461d      	mov	r5, r3
 8000ea0:	7c3b      	ldrb	r3, [r7, #16]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fb36 	bl	8000514 <__aeabi_i2d>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	460b      	mov	r3, r1
 8000eac:	4620      	mov	r0, r4
 8000eae:	4629      	mov	r1, r5
 8000eb0:	f7ff fb9a 	bl	80005e8 <__aeabi_dmul>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	4610      	mov	r0, r2
 8000eba:	4619      	mov	r1, r3
 8000ebc:	f7ff fda6 	bl	8000a0c <__aeabi_d2f>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	61fb      	str	r3, [r7, #28]
        g = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, green)];
 8000ec4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000ec6:	f7ff fb25 	bl	8000514 <__aeabi_i2d>
 8000eca:	f04f 0200 	mov.w	r2, #0
 8000ece:	4b7a      	ldr	r3, [pc, #488]	; (80010b8 <animate_led_fade_in_fade_out+0x280>)
 8000ed0:	f7ff fcb4 	bl	800083c <__aeabi_ddiv>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	4614      	mov	r4, r2
 8000eda:	461d      	mov	r5, r3
 8000edc:	7c7b      	ldrb	r3, [r7, #17]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fb18 	bl	8000514 <__aeabi_i2d>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	4620      	mov	r0, r4
 8000eea:	4629      	mov	r1, r5
 8000eec:	f7ff fb7c 	bl	80005e8 <__aeabi_dmul>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	4610      	mov	r0, r2
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f7ff fd88 	bl	8000a0c <__aeabi_d2f>
 8000efc:	4603      	mov	r3, r0
 8000efe:	61bb      	str	r3, [r7, #24]
        b = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, blue)];
 8000f00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f02:	f7ff fb07 	bl	8000514 <__aeabi_i2d>
 8000f06:	f04f 0200 	mov.w	r2, #0
 8000f0a:	4b6b      	ldr	r3, [pc, #428]	; (80010b8 <animate_led_fade_in_fade_out+0x280>)
 8000f0c:	f7ff fc96 	bl	800083c <__aeabi_ddiv>
 8000f10:	4602      	mov	r2, r0
 8000f12:	460b      	mov	r3, r1
 8000f14:	4614      	mov	r4, r2
 8000f16:	461d      	mov	r5, r3
 8000f18:	7cbb      	ldrb	r3, [r7, #18]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff fafa 	bl	8000514 <__aeabi_i2d>
 8000f20:	4602      	mov	r2, r0
 8000f22:	460b      	mov	r3, r1
 8000f24:	4620      	mov	r0, r4
 8000f26:	4629      	mov	r1, r5
 8000f28:	f7ff fb5e 	bl	80005e8 <__aeabi_dmul>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	460b      	mov	r3, r1
 8000f30:	4610      	mov	r0, r2
 8000f32:	4619      	mov	r1, r3
 8000f34:	f7ff fd6a 	bl	8000a0c <__aeabi_d2f>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	617b      	str	r3, [r7, #20]
        animate_led_set_all_pixels(mask_fade, r, g, b);
 8000f3c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f44:	edc7 7a01 	vstr	s15, [r7, #4]
 8000f48:	793b      	ldrb	r3, [r7, #4]
 8000f4a:	b2d9      	uxtb	r1, r3
 8000f4c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f54:	edc7 7a01 	vstr	s15, [r7, #4]
 8000f58:	793b      	ldrb	r3, [r7, #4]
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f64:	edc7 7a01 	vstr	s15, [r7, #4]
 8000f68:	793b      	ldrb	r3, [r7, #4]
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	89f8      	ldrh	r0, [r7, #14]
 8000f6e:	f7ff fe6d 	bl	8000c4c <animate_led_set_all_pixels>
    for (int iii = 0; iii < 256; iii++)
 8000f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f74:	3301      	adds	r3, #1
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
 8000f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7a:	2bff      	cmp	r3, #255	; 0xff
 8000f7c:	f77f af70 	ble.w	8000e60 <animate_led_fade_in_fade_out+0x28>
    }
    for (int iii = 255; iii >= 0; iii = iii-2)
 8000f80:	23ff      	movs	r3, #255	; 0xff
 8000f82:	623b      	str	r3, [r7, #32]
 8000f84:	e08a      	b.n	800109c <animate_led_fade_in_fade_out+0x264>
    {
        if (task_button_press_interrupt_occurred())
 8000f86:	f000 fe69 	bl	8001c5c <task_button_press_interrupt_occurred>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d00d      	beq.n	8000fac <animate_led_fade_in_fade_out+0x174>
        {
            if (task_button_press_check_interrupts(&color_fade_rgb[offsetof(ws2812b_led_t, red)], &color_fade_rgb[offsetof(ws2812b_led_t, green)], &color_fade_rgb[offsetof(ws2812b_led_t, blue)]))
 8000f90:	f107 0310 	add.w	r3, r7, #16
 8000f94:	1c9a      	adds	r2, r3, #2
 8000f96:	f107 0310 	add.w	r3, r7, #16
 8000f9a:	1c59      	adds	r1, r3, #1
 8000f9c:	f107 0310 	add.w	r3, r7, #16
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 febf 	bl	8001d24 <task_button_press_check_interrupts>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d17e      	bne.n	80010aa <animate_led_fade_in_fade_out+0x272>
            {
                return;
            }
        }
        r = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, red)];
 8000fac:	6a38      	ldr	r0, [r7, #32]
 8000fae:	f7ff fab1 	bl	8000514 <__aeabi_i2d>
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	4b40      	ldr	r3, [pc, #256]	; (80010b8 <animate_led_fade_in_fade_out+0x280>)
 8000fb8:	f7ff fc40 	bl	800083c <__aeabi_ddiv>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	4614      	mov	r4, r2
 8000fc2:	461d      	mov	r5, r3
 8000fc4:	7c3b      	ldrb	r3, [r7, #16]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff faa4 	bl	8000514 <__aeabi_i2d>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	4629      	mov	r1, r5
 8000fd4:	f7ff fb08 	bl	80005e8 <__aeabi_dmul>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	4610      	mov	r0, r2
 8000fde:	4619      	mov	r1, r3
 8000fe0:	f7ff fd14 	bl	8000a0c <__aeabi_d2f>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	61fb      	str	r3, [r7, #28]
        g = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, green)];
 8000fe8:	6a38      	ldr	r0, [r7, #32]
 8000fea:	f7ff fa93 	bl	8000514 <__aeabi_i2d>
 8000fee:	f04f 0200 	mov.w	r2, #0
 8000ff2:	4b31      	ldr	r3, [pc, #196]	; (80010b8 <animate_led_fade_in_fade_out+0x280>)
 8000ff4:	f7ff fc22 	bl	800083c <__aeabi_ddiv>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4614      	mov	r4, r2
 8000ffe:	461d      	mov	r5, r3
 8001000:	7c7b      	ldrb	r3, [r7, #17]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fa86 	bl	8000514 <__aeabi_i2d>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	4620      	mov	r0, r4
 800100e:	4629      	mov	r1, r5
 8001010:	f7ff faea 	bl	80005e8 <__aeabi_dmul>
 8001014:	4602      	mov	r2, r0
 8001016:	460b      	mov	r3, r1
 8001018:	4610      	mov	r0, r2
 800101a:	4619      	mov	r1, r3
 800101c:	f7ff fcf6 	bl	8000a0c <__aeabi_d2f>
 8001020:	4603      	mov	r3, r0
 8001022:	61bb      	str	r3, [r7, #24]
        b = (iii / 256.0) * color_fade_rgb[offsetof(ws2812b_led_t, blue)];
 8001024:	6a38      	ldr	r0, [r7, #32]
 8001026:	f7ff fa75 	bl	8000514 <__aeabi_i2d>
 800102a:	f04f 0200 	mov.w	r2, #0
 800102e:	4b22      	ldr	r3, [pc, #136]	; (80010b8 <animate_led_fade_in_fade_out+0x280>)
 8001030:	f7ff fc04 	bl	800083c <__aeabi_ddiv>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	4614      	mov	r4, r2
 800103a:	461d      	mov	r5, r3
 800103c:	7cbb      	ldrb	r3, [r7, #18]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fa68 	bl	8000514 <__aeabi_i2d>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	4620      	mov	r0, r4
 800104a:	4629      	mov	r1, r5
 800104c:	f7ff facc 	bl	80005e8 <__aeabi_dmul>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4610      	mov	r0, r2
 8001056:	4619      	mov	r1, r3
 8001058:	f7ff fcd8 	bl	8000a0c <__aeabi_d2f>
 800105c:	4603      	mov	r3, r0
 800105e:	617b      	str	r3, [r7, #20]
        animate_led_set_all_pixels(mask_fade, r, g, b);
 8001060:	edd7 7a07 	vldr	s15, [r7, #28]
 8001064:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001068:	edc7 7a01 	vstr	s15, [r7, #4]
 800106c:	793b      	ldrb	r3, [r7, #4]
 800106e:	b2d9      	uxtb	r1, r3
 8001070:	edd7 7a06 	vldr	s15, [r7, #24]
 8001074:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001078:	edc7 7a01 	vstr	s15, [r7, #4]
 800107c:	793b      	ldrb	r3, [r7, #4]
 800107e:	b2da      	uxtb	r2, r3
 8001080:	edd7 7a05 	vldr	s15, [r7, #20]
 8001084:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001088:	edc7 7a01 	vstr	s15, [r7, #4]
 800108c:	793b      	ldrb	r3, [r7, #4]
 800108e:	b2db      	uxtb	r3, r3
 8001090:	89f8      	ldrh	r0, [r7, #14]
 8001092:	f7ff fddb 	bl	8000c4c <animate_led_set_all_pixels>
    for (int iii = 255; iii >= 0; iii = iii-2)
 8001096:	6a3b      	ldr	r3, [r7, #32]
 8001098:	3b02      	subs	r3, #2
 800109a:	623b      	str	r3, [r7, #32]
 800109c:	6a3b      	ldr	r3, [r7, #32]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f6bf af71 	bge.w	8000f86 <animate_led_fade_in_fade_out+0x14e>
 80010a4:	e002      	b.n	80010ac <animate_led_fade_in_fade_out+0x274>
                return;
 80010a6:	bf00      	nop
 80010a8:	e000      	b.n	80010ac <animate_led_fade_in_fade_out+0x274>
                return;
 80010aa:	bf00      	nop
    }
}
 80010ac:	3728      	adds	r7, #40	; 0x28
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bdb0      	pop	{r4, r5, r7, pc}
 80010b2:	bf00      	nop
 80010b4:	0800b074 	.word	0x0800b074
 80010b8:	40700000 	.word	0x40700000

080010bc <animate_led_twinkle>:
}


void animate_led_twinkle(const strip_mask_t twinkle_mask, const color_hex_code_e color_twinkle, const uint16_t count,
                         const uint16_t speed_delay, const bool only_one)
{
 80010bc:	b590      	push	{r4, r7, lr}
 80010be:	ed2d 8b02 	vpush	{d8}
 80010c2:	b08b      	sub	sp, #44	; 0x2c
 80010c4:	af02      	add	r7, sp, #8
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	4611      	mov	r1, r2
 80010ca:	461a      	mov	r2, r3
 80010cc:	4603      	mov	r3, r0
 80010ce:	81fb      	strh	r3, [r7, #14]
 80010d0:	460b      	mov	r3, r1
 80010d2:	81bb      	strh	r3, [r7, #12]
 80010d4:	4613      	mov	r3, r2
 80010d6:	80fb      	strh	r3, [r7, #6]
	uint16_t strip_size = ws2812_led_get_max_strip_size(twinkle_mask);
 80010d8:	89fb      	ldrh	r3, [r7, #14]
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 fbf2 	bl	80018c4 <ws2812_led_get_max_strip_size>
 80010e0:	4603      	mov	r3, r0
 80010e2:	837b      	strh	r3, [r7, #26]
    uint8_t color_twinkle_rgb[sizeof(ws2812b_led_t)] = {0};
 80010e4:	4b2e      	ldr	r3, [pc, #184]	; (80011a0 <animate_led_twinkle+0xe4>)
 80010e6:	881b      	ldrh	r3, [r3, #0]
 80010e8:	82bb      	strh	r3, [r7, #20]
 80010ea:	2300      	movs	r3, #0
 80010ec:	75bb      	strb	r3, [r7, #22]
    color_led_hex_to_rgb(color_twinkle, color_twinkle_rgb);
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	4619      	mov	r1, r3
 80010f4:	68b8      	ldr	r0, [r7, #8]
 80010f6:	f000 fb1b 	bl	8001730 <color_led_hex_to_rgb>
    for (int iii = 0; iii < count; iii++)
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
 80010fe:	e043      	b.n	8001188 <animate_led_twinkle+0xcc>
    {
        if (task_button_press_interrupt_occurred())
 8001100:	f000 fdac 	bl	8001c5c <task_button_press_interrupt_occurred>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d00d      	beq.n	8001126 <animate_led_twinkle+0x6a>
        {
            if (task_button_press_check_interrupts(&color_twinkle_rgb[offsetof(ws2812b_led_t, red)], &color_twinkle_rgb[offsetof(ws2812b_led_t, green)], &color_twinkle_rgb[offsetof(ws2812b_led_t, blue)]))
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	1c9a      	adds	r2, r3, #2
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	1c59      	adds	r1, r3, #1
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4618      	mov	r0, r3
 800111c:	f000 fe02 	bl	8001d24 <task_button_press_check_interrupts>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d135      	bne.n	8001192 <animate_led_twinkle+0xd6>
            {
                return;
            }
        }
        animate_led_set_pixel(twinkle_mask, random_num(0, strip_size),
 8001126:	8b7b      	ldrh	r3, [r7, #26]
 8001128:	4619      	mov	r1, r3
 800112a:	2000      	movs	r0, #0
 800112c:	f008 fe7a 	bl	8009e24 <random_num>
 8001130:	4603      	mov	r3, r0
 8001132:	b299      	uxth	r1, r3
 8001134:	7d3a      	ldrb	r2, [r7, #20]
 8001136:	7d7c      	ldrb	r4, [r7, #21]
 8001138:	7dbb      	ldrb	r3, [r7, #22]
 800113a:	89f8      	ldrh	r0, [r7, #14]
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	4623      	mov	r3, r4
 8001140:	f7ff fd30 	bl	8000ba4 <animate_led_set_pixel>
                              (color_twinkle_rgb[offsetof(ws2812b_led_t, red)]),
                              (color_twinkle_rgb[offsetof(ws2812b_led_t, green)]),
                              (color_twinkle_rgb[offsetof(ws2812b_led_t, blue)]));
        animate_led_show_strip(twinkle_mask);
 8001144:	89fb      	ldrh	r3, [r7, #14]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fd1c 	bl	8000b84 <animate_led_show_strip>
        task_led_ctrl_delay(speed_delay / task_led_ctrl_speed());
 800114c:	88fb      	ldrh	r3, [r7, #6]
 800114e:	ee07 3a90 	vmov	s15, r3
 8001152:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001156:	f001 f9fd 	bl	8002554 <task_led_ctrl_speed>
 800115a:	eeb0 7a40 	vmov.f32	s14, s0
 800115e:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001162:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001166:	ee17 0a90 	vmov	r0, s15
 800116a:	f001 f88d 	bl	8002288 <task_led_ctrl_delay>
        if (only_one) animate_led_set_all_pixels(twinkle_mask, 0, 0, 0);
 800116e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001172:	2b00      	cmp	r3, #0
 8001174:	d005      	beq.n	8001182 <animate_led_twinkle+0xc6>
 8001176:	89f8      	ldrh	r0, [r7, #14]
 8001178:	2300      	movs	r3, #0
 800117a:	2200      	movs	r2, #0
 800117c:	2100      	movs	r1, #0
 800117e:	f7ff fd65 	bl	8000c4c <animate_led_set_all_pixels>
    for (int iii = 0; iii < count; iii++)
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3301      	adds	r3, #1
 8001186:	61fb      	str	r3, [r7, #28]
 8001188:	89bb      	ldrh	r3, [r7, #12]
 800118a:	69fa      	ldr	r2, [r7, #28]
 800118c:	429a      	cmp	r2, r3
 800118e:	dbb7      	blt.n	8001100 <animate_led_twinkle+0x44>
 8001190:	e000      	b.n	8001194 <animate_led_twinkle+0xd8>
                return;
 8001192:	bf00      	nop
    }

    //task_led_ctrl_delay(speed_delay / task_led_ctrl_speed());
}
 8001194:	3724      	adds	r7, #36	; 0x24
 8001196:	46bd      	mov	sp, r7
 8001198:	ecbd 8b02 	vpop	{d8}
 800119c:	bd90      	pop	{r4, r7, pc}
 800119e:	bf00      	nop
 80011a0:	0800b074 	.word	0x0800b074

080011a4 <animate_led_sparkle_only_random_color>:
}


void animate_led_sparkle_only_random_color(const strip_mask_t mask_sparkle_random, const bool fill,
                                           const uint16_t speed_delay)
{
 80011a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a6:	ed2d 8b02 	vpush	{d8}
 80011aa:	b08b      	sub	sp, #44	; 0x2c
 80011ac:	af02      	add	r7, sp, #8
 80011ae:	4603      	mov	r3, r0
 80011b0:	80fb      	strh	r3, [r7, #6]
 80011b2:	460b      	mov	r3, r1
 80011b4:	717b      	strb	r3, [r7, #5]
 80011b6:	4613      	mov	r3, r2
 80011b8:	807b      	strh	r3, [r7, #2]
	float percent_to_fill = 0.7;
 80011ba:	4b42      	ldr	r3, [pc, #264]	; (80012c4 <animate_led_sparkle_only_random_color+0x120>)
 80011bc:	61bb      	str	r3, [r7, #24]
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_sparkle_random);
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f000 fb7f 	bl	80018c4 <ws2812_led_get_max_strip_size>
 80011c6:	4603      	mov	r3, r0
 80011c8:	82fb      	strh	r3, [r7, #22]
	uint16_t num_active_leds = ws2812_get_num_active_animation_leds(mask_sparkle_random);
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 fb57 	bl	8001880 <ws2812_get_num_active_animation_leds>
 80011d2:	4603      	mov	r3, r0
 80011d4:	82bb      	strh	r3, [r7, #20]
    uint8_t dummy_red, dummy_green, dummy_blue; // not used but not worth creating a unique function IMO
	for (uint16_t iii = 0; iii < (percent_to_fill * (float)num_active_leds); iii++)
 80011d6:	2300      	movs	r3, #0
 80011d8:	83fb      	strh	r3, [r7, #30]
 80011da:	e059      	b.n	8001290 <animate_led_sparkle_only_random_color+0xec>
	{
	    if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80011dc:	f000 fd3e 	bl	8001c5c <task_button_press_interrupt_occurred>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d00b      	beq.n	80011fe <animate_led_sparkle_only_random_color+0x5a>
 80011e6:	f107 020d 	add.w	r2, r7, #13
 80011ea:	f107 010e 	add.w	r1, r7, #14
 80011ee:	f107 030f 	add.w	r3, r7, #15
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 fd96 	bl	8001d24 <task_button_press_check_interrupts>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d15c      	bne.n	80012b8 <animate_led_sparkle_only_random_color+0x114>
		int pix = random_num(0, strip_size);
 80011fe:	8afb      	ldrh	r3, [r7, #22]
 8001200:	4619      	mov	r1, r3
 8001202:	2000      	movs	r0, #0
 8001204:	f008 fe0e 	bl	8009e24 <random_num>
 8001208:	4603      	mov	r3, r0
 800120a:	613b      	str	r3, [r7, #16]
		animate_led_set_pixel(mask_sparkle_random, pix, random_num(0, 255), random_num(0, 255), random_num(0, 255));
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	b29c      	uxth	r4, r3
 8001210:	21ff      	movs	r1, #255	; 0xff
 8001212:	2000      	movs	r0, #0
 8001214:	f008 fe06 	bl	8009e24 <random_num>
 8001218:	4603      	mov	r3, r0
 800121a:	b2dd      	uxtb	r5, r3
 800121c:	21ff      	movs	r1, #255	; 0xff
 800121e:	2000      	movs	r0, #0
 8001220:	f008 fe00 	bl	8009e24 <random_num>
 8001224:	4603      	mov	r3, r0
 8001226:	b2de      	uxtb	r6, r3
 8001228:	21ff      	movs	r1, #255	; 0xff
 800122a:	2000      	movs	r0, #0
 800122c:	f008 fdfa 	bl	8009e24 <random_num>
 8001230:	4603      	mov	r3, r0
 8001232:	b2db      	uxtb	r3, r3
 8001234:	88f8      	ldrh	r0, [r7, #6]
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	4633      	mov	r3, r6
 800123a:	462a      	mov	r2, r5
 800123c:	4621      	mov	r1, r4
 800123e:	f7ff fcb1 	bl	8000ba4 <animate_led_set_pixel>
		animate_led_show_strip(mask_sparkle_random);
 8001242:	88fb      	ldrh	r3, [r7, #6]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff fc9d 	bl	8000b84 <animate_led_show_strip>
        task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 800124a:	887b      	ldrh	r3, [r7, #2]
 800124c:	ee07 3a90 	vmov	s15, r3
 8001250:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001254:	f001 f97e 	bl	8002554 <task_led_ctrl_speed>
 8001258:	eeb0 7a40 	vmov.f32	s14, s0
 800125c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001260:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001264:	ee17 0a90 	vmov	r0, s15
 8001268:	f001 f80e 	bl	8002288 <task_led_ctrl_delay>
		if (!fill) animate_led_set_pixel(mask_sparkle_random, pix, 0, 0, 0);
 800126c:	797b      	ldrb	r3, [r7, #5]
 800126e:	f083 0301 	eor.w	r3, r3, #1
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b00      	cmp	r3, #0
 8001276:	d008      	beq.n	800128a <animate_led_sparkle_only_random_color+0xe6>
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	b299      	uxth	r1, r3
 800127c:	88f8      	ldrh	r0, [r7, #6]
 800127e:	2300      	movs	r3, #0
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	2300      	movs	r3, #0
 8001284:	2200      	movs	r2, #0
 8001286:	f7ff fc8d 	bl	8000ba4 <animate_led_set_pixel>
	for (uint16_t iii = 0; iii < (percent_to_fill * (float)num_active_leds); iii++)
 800128a:	8bfb      	ldrh	r3, [r7, #30]
 800128c:	3301      	adds	r3, #1
 800128e:	83fb      	strh	r3, [r7, #30]
 8001290:	8bfb      	ldrh	r3, [r7, #30]
 8001292:	ee07 3a90 	vmov	s15, r3
 8001296:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800129a:	8abb      	ldrh	r3, [r7, #20]
 800129c:	ee07 3a90 	vmov	s15, r3
 80012a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80012a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80012a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b4:	d492      	bmi.n	80011dc <animate_led_sparkle_only_random_color+0x38>
 80012b6:	e000      	b.n	80012ba <animate_led_sparkle_only_random_color+0x116>
	    if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80012b8:	bf00      	nop
	}
}
 80012ba:	3724      	adds	r7, #36	; 0x24
 80012bc:	46bd      	mov	sp, r7
 80012be:	ecbd 8b02 	vpop	{d8}
 80012c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c4:	3f333333 	.word	0x3f333333

080012c8 <animate_led_rainbow_cycle>:
    }
}


void animate_led_rainbow_cycle(const strip_mask_t mask_rainbow_cycle, const uint16_t speed_delay)
{
 80012c8:	b590      	push	{r4, r7, lr}
 80012ca:	ed2d 8b02 	vpush	{d8}
 80012ce:	b089      	sub	sp, #36	; 0x24
 80012d0:	af02      	add	r7, sp, #8
 80012d2:	4603      	mov	r3, r0
 80012d4:	460a      	mov	r2, r1
 80012d6:	80fb      	strh	r3, [r7, #6]
 80012d8:	4613      	mov	r3, r2
 80012da:	80bb      	strh	r3, [r7, #4]
	uint8_t dummy_red, dummy_green, dummy_blue;
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_rainbow_cycle);
 80012dc:	88fb      	ldrh	r3, [r7, #6]
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 faf0 	bl	80018c4 <ws2812_led_get_max_strip_size>
 80012e4:	4603      	mov	r3, r0
 80012e6:	827b      	strh	r3, [r7, #18]
    uint8_t *c;
    uint16_t iii, jjj;
    for (jjj = 256 * 5; jjj > 0; jjj--)
 80012e8:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80012ec:	82bb      	strh	r3, [r7, #20]
 80012ee:	e06c      	b.n	80013ca <animate_led_rainbow_cycle+0x102>
    {
        if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80012f0:	f000 fcb4 	bl	8001c5c <task_button_press_interrupt_occurred>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d00b      	beq.n	8001312 <animate_led_rainbow_cycle+0x4a>
 80012fa:	f107 0209 	add.w	r2, r7, #9
 80012fe:	f107 010a 	add.w	r1, r7, #10
 8001302:	f107 030b 	add.w	r3, r7, #11
 8001306:	4618      	mov	r0, r3
 8001308:	f000 fd0c 	bl	8001d24 <task_button_press_check_interrupts>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d15f      	bne.n	80013d2 <animate_led_rainbow_cycle+0x10a>
        for (iii = 0; iii < strip_size; iii++)
 8001312:	2300      	movs	r3, #0
 8001314:	82fb      	strh	r3, [r7, #22]
 8001316:	e02f      	b.n	8001378 <animate_led_rainbow_cycle+0xb0>
        {
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001318:	f000 fca0 	bl	8001c5c <task_button_press_interrupt_occurred>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d00b      	beq.n	800133a <animate_led_rainbow_cycle+0x72>
 8001322:	f107 0209 	add.w	r2, r7, #9
 8001326:	f107 010a 	add.w	r1, r7, #10
 800132a:	f107 030b 	add.w	r3, r7, #11
 800132e:	4618      	mov	r0, r3
 8001330:	f000 fcf8 	bl	8001d24 <task_button_press_check_interrupts>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d14d      	bne.n	80013d6 <animate_led_rainbow_cycle+0x10e>
            c = animate_led_wheel(((iii * 256 / strip_size) + jjj) & 255);
 800133a:	8afb      	ldrh	r3, [r7, #22]
 800133c:	021a      	lsls	r2, r3, #8
 800133e:	8a7b      	ldrh	r3, [r7, #18]
 8001340:	fb92 f3f3 	sdiv	r3, r2, r3
 8001344:	b2da      	uxtb	r2, r3
 8001346:	8abb      	ldrh	r3, [r7, #20]
 8001348:	b2db      	uxtb	r3, r3
 800134a:	4413      	add	r3, r2
 800134c:	b2db      	uxtb	r3, r3
 800134e:	4618      	mov	r0, r3
 8001350:	f000 f848 	bl	80013e4 <animate_led_wheel>
 8001354:	60f8      	str	r0, [r7, #12]
            animate_led_set_pixel(mask_rainbow_cycle, iii, *c, *(c + 1), *(c + 2));
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	781a      	ldrb	r2, [r3, #0]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	3301      	adds	r3, #1
 800135e:	781c      	ldrb	r4, [r3, #0]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	3302      	adds	r3, #2
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	8af9      	ldrh	r1, [r7, #22]
 8001368:	88f8      	ldrh	r0, [r7, #6]
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	4623      	mov	r3, r4
 800136e:	f7ff fc19 	bl	8000ba4 <animate_led_set_pixel>
        for (iii = 0; iii < strip_size; iii++)
 8001372:	8afb      	ldrh	r3, [r7, #22]
 8001374:	3301      	adds	r3, #1
 8001376:	82fb      	strh	r3, [r7, #22]
 8001378:	8afa      	ldrh	r2, [r7, #22]
 800137a:	8a7b      	ldrh	r3, [r7, #18]
 800137c:	429a      	cmp	r2, r3
 800137e:	d3cb      	bcc.n	8001318 <animate_led_rainbow_cycle+0x50>
        }
        animate_led_show_strip(mask_rainbow_cycle);
 8001380:	88fb      	ldrh	r3, [r7, #6]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fbfe 	bl	8000b84 <animate_led_show_strip>
        if (LED_SPEED_10X == task_led_ctrl_speed()) task_led_ctrl_delay(0);
 8001388:	f001 f8e4 	bl	8002554 <task_led_ctrl_speed>
 800138c:	eef0 7a40 	vmov.f32	s15, s0
 8001390:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001398:	d103      	bne.n	80013a2 <animate_led_rainbow_cycle+0xda>
 800139a:	2000      	movs	r0, #0
 800139c:	f000 ff74 	bl	8002288 <task_led_ctrl_delay>
 80013a0:	e010      	b.n	80013c4 <animate_led_rainbow_cycle+0xfc>
        else task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 80013a2:	88bb      	ldrh	r3, [r7, #4]
 80013a4:	ee07 3a90 	vmov	s15, r3
 80013a8:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80013ac:	f001 f8d2 	bl	8002554 <task_led_ctrl_speed>
 80013b0:	eeb0 7a40 	vmov.f32	s14, s0
 80013b4:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80013b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013bc:	ee17 0a90 	vmov	r0, s15
 80013c0:	f000 ff62 	bl	8002288 <task_led_ctrl_delay>
    for (jjj = 256 * 5; jjj > 0; jjj--)
 80013c4:	8abb      	ldrh	r3, [r7, #20]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	82bb      	strh	r3, [r7, #20]
 80013ca:	8abb      	ldrh	r3, [r7, #20]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d18f      	bne.n	80012f0 <animate_led_rainbow_cycle+0x28>
 80013d0:	e002      	b.n	80013d8 <animate_led_rainbow_cycle+0x110>
        if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80013d2:	bf00      	nop
 80013d4:	e000      	b.n	80013d8 <animate_led_rainbow_cycle+0x110>
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 80013d6:	bf00      	nop
    }
}
 80013d8:	371c      	adds	r7, #28
 80013da:	46bd      	mov	sp, r7
 80013dc:	ecbd 8b02 	vpop	{d8}
 80013e0:	bd90      	pop	{r4, r7, pc}
	...

080013e4 <animate_led_wheel>:


uint8_t* animate_led_wheel(uint8_t wheel_pos)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
    static uint8_t c[3];
    if (wheel_pos < 85)
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	2b54      	cmp	r3, #84	; 0x54
 80013f2:	d813      	bhi.n	800141c <animate_led_wheel+0x38>
    {
        c[0] = wheel_pos * 3;
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	461a      	mov	r2, r3
 80013f8:	0052      	lsls	r2, r2, #1
 80013fa:	4413      	add	r3, r2
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	4b23      	ldr	r3, [pc, #140]	; (800148c <animate_led_wheel+0xa8>)
 8001400:	701a      	strb	r2, [r3, #0]
        c[1] = 255 - wheel_pos * 3; 
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	461a      	mov	r2, r3
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	b2db      	uxtb	r3, r3
 800140c:	3b01      	subs	r3, #1
 800140e:	b2da      	uxtb	r2, r3
 8001410:	4b1e      	ldr	r3, [pc, #120]	; (800148c <animate_led_wheel+0xa8>)
 8001412:	705a      	strb	r2, [r3, #1]
        c[2] = 0;
 8001414:	4b1d      	ldr	r3, [pc, #116]	; (800148c <animate_led_wheel+0xa8>)
 8001416:	2200      	movs	r2, #0
 8001418:	709a      	strb	r2, [r3, #2]
 800141a:	e02f      	b.n	800147c <animate_led_wheel+0x98>
    }
    else if(wheel_pos < 170)
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	2ba9      	cmp	r3, #169	; 0xa9
 8001420:	d816      	bhi.n	8001450 <animate_led_wheel+0x6c>
    {
        wheel_pos -= 85;
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	3b55      	subs	r3, #85	; 0x55
 8001426:	71fb      	strb	r3, [r7, #7]
        c[0] = 255 - wheel_pos * 3;
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	461a      	mov	r2, r3
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	b2db      	uxtb	r3, r3
 8001432:	3b01      	subs	r3, #1
 8001434:	b2da      	uxtb	r2, r3
 8001436:	4b15      	ldr	r3, [pc, #84]	; (800148c <animate_led_wheel+0xa8>)
 8001438:	701a      	strb	r2, [r3, #0]
        c[1] = 0;
 800143a:	4b14      	ldr	r3, [pc, #80]	; (800148c <animate_led_wheel+0xa8>)
 800143c:	2200      	movs	r2, #0
 800143e:	705a      	strb	r2, [r3, #1]
        c[2] = wheel_pos * 3;
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	461a      	mov	r2, r3
 8001444:	0052      	lsls	r2, r2, #1
 8001446:	4413      	add	r3, r2
 8001448:	b2da      	uxtb	r2, r3
 800144a:	4b10      	ldr	r3, [pc, #64]	; (800148c <animate_led_wheel+0xa8>)
 800144c:	709a      	strb	r2, [r3, #2]
 800144e:	e015      	b.n	800147c <animate_led_wheel+0x98>
    }
    else
    {
        wheel_pos -= 170;
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	3356      	adds	r3, #86	; 0x56
 8001454:	71fb      	strb	r3, [r7, #7]
        c[0] = 0;
 8001456:	4b0d      	ldr	r3, [pc, #52]	; (800148c <animate_led_wheel+0xa8>)
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]
        c[1] = wheel_pos * 3; 
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	461a      	mov	r2, r3
 8001460:	0052      	lsls	r2, r2, #1
 8001462:	4413      	add	r3, r2
 8001464:	b2da      	uxtb	r2, r3
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <animate_led_wheel+0xa8>)
 8001468:	705a      	strb	r2, [r3, #1]
        c[2] = 255 - wheel_pos * 3;
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	461a      	mov	r2, r3
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	b2db      	uxtb	r3, r3
 8001474:	3b01      	subs	r3, #1
 8001476:	b2da      	uxtb	r2, r3
 8001478:	4b04      	ldr	r3, [pc, #16]	; (800148c <animate_led_wheel+0xa8>)
 800147a:	709a      	strb	r2, [r3, #2]
    }
    return c;
 800147c:	4b03      	ldr	r3, [pc, #12]	; (800148c <animate_led_wheel+0xa8>)
}
 800147e:	4618      	mov	r0, r3
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	200000f4 	.word	0x200000f4

08001490 <animate_led_theater_chase>:
}


void animate_led_theater_chase(const strip_mask_t mask_theater_chase, const color_hex_code_e color_theater_chase,
                               const uint16_t speed_delay)
{
 8001490:	b590      	push	{r4, r7, lr}
 8001492:	ed2d 8b02 	vpush	{d8}
 8001496:	b08b      	sub	sp, #44	; 0x2c
 8001498:	af02      	add	r7, sp, #8
 800149a:	4603      	mov	r3, r0
 800149c:	6039      	str	r1, [r7, #0]
 800149e:	80fb      	strh	r3, [r7, #6]
 80014a0:	4613      	mov	r3, r2
 80014a2:	80bb      	strh	r3, [r7, #4]
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_theater_chase);
 80014a4:	88fb      	ldrh	r3, [r7, #6]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 fa0c 	bl	80018c4 <ws2812_led_get_max_strip_size>
 80014ac:	4603      	mov	r3, r0
 80014ae:	81fb      	strh	r3, [r7, #14]
    uint8_t color_theater_chase_rgb[sizeof(ws2812b_led_t)] = {0};
 80014b0:	4b47      	ldr	r3, [pc, #284]	; (80015d0 <animate_led_theater_chase+0x140>)
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	813b      	strh	r3, [r7, #8]
 80014b6:	2300      	movs	r3, #0
 80014b8:	72bb      	strb	r3, [r7, #10]
    color_led_hex_to_rgb(color_theater_chase, color_theater_chase_rgb);
 80014ba:	f107 0308 	add.w	r3, r7, #8
 80014be:	4619      	mov	r1, r3
 80014c0:	6838      	ldr	r0, [r7, #0]
 80014c2:	f000 f935 	bl	8001730 <color_led_hex_to_rgb>
    for (int jjj = 0; jjj < 10; jjj++)
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
 80014ca:	e075      	b.n	80015b8 <animate_led_theater_chase+0x128>
    {
        for (int qqq = 0; qqq < 3; qqq++)
 80014cc:	2300      	movs	r3, #0
 80014ce:	61bb      	str	r3, [r7, #24]
 80014d0:	e06c      	b.n	80015ac <animate_led_theater_chase+0x11c>
        {
            if (task_button_press_interrupt_occurred())
 80014d2:	f000 fbc3 	bl	8001c5c <task_button_press_interrupt_occurred>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d00d      	beq.n	80014f8 <animate_led_theater_chase+0x68>
            {
                if (task_button_press_check_interrupts(&color_theater_chase_rgb[offsetof(ws2812b_led_t, red)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, green)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]))
 80014dc:	f107 0308 	add.w	r3, r7, #8
 80014e0:	1c9a      	adds	r2, r3, #2
 80014e2:	f107 0308 	add.w	r3, r7, #8
 80014e6:	1c59      	adds	r1, r3, #1
 80014e8:	f107 0308 	add.w	r3, r7, #8
 80014ec:	4618      	mov	r0, r3
 80014ee:	f000 fc19 	bl	8001d24 <task_button_press_check_interrupts>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d163      	bne.n	80015c0 <animate_led_theater_chase+0x130>
                {
                    return;
                }
            }
            for (int iii = 0; iii < strip_size; iii += 3)
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	e010      	b.n	8001520 <animate_led_theater_chase+0x90>
            {
                animate_led_set_pixel(mask_theater_chase, iii + qqq,
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	b29a      	uxth	r2, r3
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	b29b      	uxth	r3, r3
 8001506:	4413      	add	r3, r2
 8001508:	b299      	uxth	r1, r3
 800150a:	7a3a      	ldrb	r2, [r7, #8]
 800150c:	7a7c      	ldrb	r4, [r7, #9]
 800150e:	7abb      	ldrb	r3, [r7, #10]
 8001510:	88f8      	ldrh	r0, [r7, #6]
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	4623      	mov	r3, r4
 8001516:	f7ff fb45 	bl	8000ba4 <animate_led_set_pixel>
            for (int iii = 0; iii < strip_size; iii += 3)
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	3303      	adds	r3, #3
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	89fb      	ldrh	r3, [r7, #14]
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	429a      	cmp	r2, r3
 8001526:	dbea      	blt.n	80014fe <animate_led_theater_chase+0x6e>
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, red)]),
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, green)]),
                                      (color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]));
            }
            animate_led_show_strip(mask_theater_chase);
 8001528:	88fb      	ldrh	r3, [r7, #6]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fb2a 	bl	8000b84 <animate_led_show_strip>
            if (task_button_press_interrupt_occurred())
 8001530:	f000 fb94 	bl	8001c5c <task_button_press_interrupt_occurred>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d00d      	beq.n	8001556 <animate_led_theater_chase+0xc6>
            {
                if (task_button_press_check_interrupts(&color_theater_chase_rgb[offsetof(ws2812b_led_t, red)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, green)], &color_theater_chase_rgb[offsetof(ws2812b_led_t, blue)]))
 800153a:	f107 0308 	add.w	r3, r7, #8
 800153e:	1c9a      	adds	r2, r3, #2
 8001540:	f107 0308 	add.w	r3, r7, #8
 8001544:	1c59      	adds	r1, r3, #1
 8001546:	f107 0308 	add.w	r3, r7, #8
 800154a:	4618      	mov	r0, r3
 800154c:	f000 fbea 	bl	8001d24 <task_button_press_check_interrupts>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d136      	bne.n	80015c4 <animate_led_theater_chase+0x134>
                {
                    return;
                }
            }
            task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 8001556:	88bb      	ldrh	r3, [r7, #4]
 8001558:	ee07 3a90 	vmov	s15, r3
 800155c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001560:	f000 fff8 	bl	8002554 <task_led_ctrl_speed>
 8001564:	eeb0 7a40 	vmov.f32	s14, s0
 8001568:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800156c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001570:	ee17 0a90 	vmov	r0, s15
 8001574:	f000 fe88 	bl	8002288 <task_led_ctrl_delay>
            for (int iii = 0; iii < strip_size; iii += 3) animate_led_set_pixel(mask_theater_chase, iii + qqq, 0, 0, 0); // turn every third pixel off
 8001578:	2300      	movs	r3, #0
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	e00f      	b.n	800159e <animate_led_theater_chase+0x10e>
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	b29a      	uxth	r2, r3
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	b29b      	uxth	r3, r3
 8001586:	4413      	add	r3, r2
 8001588:	b299      	uxth	r1, r3
 800158a:	88f8      	ldrh	r0, [r7, #6]
 800158c:	2300      	movs	r3, #0
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	2300      	movs	r3, #0
 8001592:	2200      	movs	r2, #0
 8001594:	f7ff fb06 	bl	8000ba4 <animate_led_set_pixel>
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	3303      	adds	r3, #3
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	89fb      	ldrh	r3, [r7, #14]
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	dbeb      	blt.n	800157e <animate_led_theater_chase+0xee>
        for (int qqq = 0; qqq < 3; qqq++)
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	3301      	adds	r3, #1
 80015aa:	61bb      	str	r3, [r7, #24]
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	dd8f      	ble.n	80014d2 <animate_led_theater_chase+0x42>
    for (int jjj = 0; jjj < 10; jjj++)
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3301      	adds	r3, #1
 80015b6:	61fb      	str	r3, [r7, #28]
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	2b09      	cmp	r3, #9
 80015bc:	dd86      	ble.n	80014cc <animate_led_theater_chase+0x3c>
 80015be:	e002      	b.n	80015c6 <animate_led_theater_chase+0x136>
                    return;
 80015c0:	bf00      	nop
 80015c2:	e000      	b.n	80015c6 <animate_led_theater_chase+0x136>
                    return;
 80015c4:	bf00      	nop
        }
    }
}
 80015c6:	3724      	adds	r7, #36	; 0x24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	ecbd 8b02 	vpop	{d8}
 80015ce:	bd90      	pop	{r4, r7, pc}
 80015d0:	0800b074 	.word	0x0800b074

080015d4 <animate_led_theater_chase_rainbow>:


void animate_led_theater_chase_rainbow(const strip_mask_t mask_theater_chase, const uint16_t speed_delay)
{
 80015d4:	b590      	push	{r4, r7, lr}
 80015d6:	ed2d 8b02 	vpush	{d8}
 80015da:	b08d      	sub	sp, #52	; 0x34
 80015dc:	af02      	add	r7, sp, #8
 80015de:	4603      	mov	r3, r0
 80015e0:	460a      	mov	r2, r1
 80015e2:	80fb      	strh	r3, [r7, #6]
 80015e4:	4613      	mov	r3, r2
 80015e6:	80bb      	strh	r3, [r7, #4]
	uint8_t dummy_red, dummy_green, dummy_blue;
	uint16_t strip_size = ws2812_led_get_max_strip_size(mask_theater_chase);
 80015e8:	88fb      	ldrh	r3, [r7, #6]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 f96a 	bl	80018c4 <ws2812_led_get_max_strip_size>
 80015f0:	4603      	mov	r3, r0
 80015f2:	82fb      	strh	r3, [r7, #22]
    uint8_t *c;
    for (int jjj = 0; jjj < 256; jjj++) // cycel all 256 colors in the animate_led_wheel
 80015f4:	2300      	movs	r3, #0
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
 80015f8:	e08a      	b.n	8001710 <animate_led_theater_chase_rainbow+0x13c>
    {
        for (int qqq = 0; qqq < 3; qqq++)
 80015fa:	2300      	movs	r3, #0
 80015fc:	623b      	str	r3, [r7, #32]
 80015fe:	e080      	b.n	8001702 <animate_led_theater_chase_rainbow+0x12e>
        {
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001600:	f000 fb2c 	bl	8001c5c <task_button_press_interrupt_occurred>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d00b      	beq.n	8001622 <animate_led_theater_chase_rainbow+0x4e>
 800160a:	f107 020d 	add.w	r2, r7, #13
 800160e:	f107 010e 	add.w	r1, r7, #14
 8001612:	f107 030f 	add.w	r3, r7, #15
 8001616:	4618      	mov	r0, r3
 8001618:	f000 fb84 	bl	8001d24 <task_button_press_check_interrupts>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d17b      	bne.n	800171a <animate_led_theater_chase_rainbow+0x146>
            for (int iii = 0; iii < strip_size; iii += 3)
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
 8001626:	e039      	b.n	800169c <animate_led_theater_chase_rainbow+0xc8>
            {
                if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 8001628:	f000 fb18 	bl	8001c5c <task_button_press_interrupt_occurred>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d00b      	beq.n	800164a <animate_led_theater_chase_rainbow+0x76>
 8001632:	f107 020d 	add.w	r2, r7, #13
 8001636:	f107 010e 	add.w	r1, r7, #14
 800163a:	f107 030f 	add.w	r3, r7, #15
 800163e:	4618      	mov	r0, r3
 8001640:	f000 fb70 	bl	8001d24 <task_button_press_check_interrupts>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d169      	bne.n	800171e <animate_led_theater_chase_rainbow+0x14a>
                c = animate_led_wheel((iii + jjj) % 255);
 800164a:	69fa      	ldr	r2, [r7, #28]
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	441a      	add	r2, r3
 8001650:	4b36      	ldr	r3, [pc, #216]	; (800172c <animate_led_theater_chase_rainbow+0x158>)
 8001652:	fb83 1302 	smull	r1, r3, r3, r2
 8001656:	4413      	add	r3, r2
 8001658:	11d9      	asrs	r1, r3, #7
 800165a:	17d3      	asrs	r3, r2, #31
 800165c:	1ac9      	subs	r1, r1, r3
 800165e:	460b      	mov	r3, r1
 8001660:	021b      	lsls	r3, r3, #8
 8001662:	1a5b      	subs	r3, r3, r1
 8001664:	1ad1      	subs	r1, r2, r3
 8001666:	b2cb      	uxtb	r3, r1
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff febb 	bl	80013e4 <animate_led_wheel>
 800166e:	6138      	str	r0, [r7, #16]
                animate_led_set_pixel(mask_theater_chase, iii + qqq, *c, *(c + 1), *(c + 2)); // turn every third pixel on
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	b29a      	uxth	r2, r3
 8001674:	6a3b      	ldr	r3, [r7, #32]
 8001676:	b29b      	uxth	r3, r3
 8001678:	4413      	add	r3, r2
 800167a:	b299      	uxth	r1, r3
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	781a      	ldrb	r2, [r3, #0]
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	3301      	adds	r3, #1
 8001684:	781c      	ldrb	r4, [r3, #0]
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	3302      	adds	r3, #2
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	88f8      	ldrh	r0, [r7, #6]
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	4623      	mov	r3, r4
 8001692:	f7ff fa87 	bl	8000ba4 <animate_led_set_pixel>
            for (int iii = 0; iii < strip_size; iii += 3)
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3303      	adds	r3, #3
 800169a:	61fb      	str	r3, [r7, #28]
 800169c:	8afb      	ldrh	r3, [r7, #22]
 800169e:	69fa      	ldr	r2, [r7, #28]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	dbc1      	blt.n	8001628 <animate_led_theater_chase_rainbow+0x54>
            }
            animate_led_show_strip(mask_theater_chase);
 80016a4:	88fb      	ldrh	r3, [r7, #6]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fa6c 	bl	8000b84 <animate_led_show_strip>
            task_led_ctrl_delay((float_t)speed_delay / task_led_ctrl_speed());
 80016ac:	88bb      	ldrh	r3, [r7, #4]
 80016ae:	ee07 3a90 	vmov	s15, r3
 80016b2:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80016b6:	f000 ff4d 	bl	8002554 <task_led_ctrl_speed>
 80016ba:	eeb0 7a40 	vmov.f32	s14, s0
 80016be:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80016c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016c6:	ee17 0a90 	vmov	r0, s15
 80016ca:	f000 fddd 	bl	8002288 <task_led_ctrl_delay>
            for (int iii = 0; iii < strip_size; iii += 3) animate_led_set_pixel(mask_theater_chase, iii + qqq, 0, 0, 0); // turn every third pixel off
 80016ce:	2300      	movs	r3, #0
 80016d0:	61bb      	str	r3, [r7, #24]
 80016d2:	e00f      	b.n	80016f4 <animate_led_theater_chase_rainbow+0x120>
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	6a3b      	ldr	r3, [r7, #32]
 80016da:	b29b      	uxth	r3, r3
 80016dc:	4413      	add	r3, r2
 80016de:	b299      	uxth	r1, r3
 80016e0:	88f8      	ldrh	r0, [r7, #6]
 80016e2:	2300      	movs	r3, #0
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	2300      	movs	r3, #0
 80016e8:	2200      	movs	r2, #0
 80016ea:	f7ff fa5b 	bl	8000ba4 <animate_led_set_pixel>
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	3303      	adds	r3, #3
 80016f2:	61bb      	str	r3, [r7, #24]
 80016f4:	8afb      	ldrh	r3, [r7, #22]
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	dbeb      	blt.n	80016d4 <animate_led_theater_chase_rainbow+0x100>
        for (int qqq = 0; qqq < 3; qqq++)
 80016fc:	6a3b      	ldr	r3, [r7, #32]
 80016fe:	3301      	adds	r3, #1
 8001700:	623b      	str	r3, [r7, #32]
 8001702:	6a3b      	ldr	r3, [r7, #32]
 8001704:	2b02      	cmp	r3, #2
 8001706:	f77f af7b 	ble.w	8001600 <animate_led_theater_chase_rainbow+0x2c>
    for (int jjj = 0; jjj < 256; jjj++) // cycel all 256 colors in the animate_led_wheel
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	3301      	adds	r3, #1
 800170e:	627b      	str	r3, [r7, #36]	; 0x24
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001712:	2bff      	cmp	r3, #255	; 0xff
 8001714:	f77f af71 	ble.w	80015fa <animate_led_theater_chase_rainbow+0x26>
 8001718:	e002      	b.n	8001720 <animate_led_theater_chase_rainbow+0x14c>
            if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 800171a:	bf00      	nop
 800171c:	e000      	b.n	8001720 <animate_led_theater_chase_rainbow+0x14c>
                if (task_button_press_interrupt_occurred()) if (task_button_press_check_interrupts(&dummy_red, &dummy_green, &dummy_blue)) return;
 800171e:	bf00      	nop
        }
    }
}
 8001720:	372c      	adds	r7, #44	; 0x2c
 8001722:	46bd      	mov	sp, r7
 8001724:	ecbd 8b02 	vpop	{d8}
 8001728:	bd90      	pop	{r4, r7, pc}
 800172a:	bf00      	nop
 800172c:	80808081 	.word	0x80808081

08001730 <color_led_hex_to_rgb>:
    [COLORS_BROWN] = COLOR_HEX_BROWN
};


void color_led_hex_to_rgb(const color_hex_code_e color, uint8_t *color_array)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
    color_array[offsetof(ws2812b_led_t, red)] = ((color & 0xFF0000) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, red))));
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	0c1b      	lsrs	r3, r3, #16
 800173e:	b2da      	uxtb	r2, r3
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	701a      	strb	r2, [r3, #0]
    color_array[offsetof(ws2812b_led_t, green)] = ((color & 0x00FF00) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, green))));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	0a1a      	lsrs	r2, r3, #8
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	3301      	adds	r3, #1
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	701a      	strb	r2, [r3, #0]
    color_array[offsetof(ws2812b_led_t, blue)] = ((color & 0x0000FF) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, blue))));
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	3302      	adds	r3, #2
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	701a      	strb	r2, [r3, #0]
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
	...

08001768 <reset_ws2812b>:

extern volatile int datasentflag;

uint16_t pwm_reset[50] = {0};
void reset_ws2812b(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
    //xSemaphoreTake(g_dma_transfer_semaphore, portMAX_DELAY);
    //xTaskNotify(g_dma_transfer_handle, 0, eSetValueWithOverwrite);
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_1, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 800176c:	2364      	movs	r3, #100	; 0x64
 800176e:	4a09      	ldr	r2, [pc, #36]	; (8001794 <reset_ws2812b+0x2c>)
 8001770:	2100      	movs	r1, #0
 8001772:	4809      	ldr	r0, [pc, #36]	; (8001798 <reset_ws2812b+0x30>)
 8001774:	f006 f84e 	bl	8007814 <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_2, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 8001778:	2364      	movs	r3, #100	; 0x64
 800177a:	4a06      	ldr	r2, [pc, #24]	; (8001794 <reset_ws2812b+0x2c>)
 800177c:	2104      	movs	r1, #4
 800177e:	4806      	ldr	r0, [pc, #24]	; (8001798 <reset_ws2812b+0x30>)
 8001780:	f006 f848 	bl	8007814 <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_3, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 8001784:	2364      	movs	r3, #100	; 0x64
 8001786:	4a03      	ldr	r2, [pc, #12]	; (8001794 <reset_ws2812b+0x2c>)
 8001788:	2108      	movs	r1, #8
 800178a:	4803      	ldr	r0, [pc, #12]	; (8001798 <reset_ws2812b+0x30>)
 800178c:	f006 f842 	bl	8007814 <HAL_TIM_PWM_Start_DMA>
}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}
 8001794:	2000087c 	.word	0x2000087c
 8001798:	200023bc 	.word	0x200023bc

0800179c <ws2812_convert_strip_num_to_strip_bit>:

static strip_bit_e ws2812_convert_strip_num_to_strip_bit(const strip_num_e strip_num)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	71fb      	strb	r3, [r7, #7]
	return (strip_bit_e)(strip_num + 1);
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	3301      	adds	r3, #1
 80017aa:	b2db      	uxtb	r3, r3
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <ws2812_convert_strip_bit_to_strip_num>:


static strip_num_e ws2812_convert_strip_bit_to_strip_num(const strip_bit_e strip_bit)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
	return (strip_num_e)(strip_bit - 1);
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	3b01      	subs	r3, #1
 80017c6:	b2db      	uxtb	r3, r3
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <ws2812_get_pwm_strip_offset>:


uint16_t ws2812_get_pwm_strip_offset(const strip_bit_e strip_bit)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
    uint16_t offset = 0;
 80017de:	2300      	movs	r3, #0
 80017e0:	81fb      	strh	r3, [r7, #14]
    uint8_t strip_num = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	737b      	strb	r3, [r7, #13]
    switch (strip_bit)
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d104      	bne.n	80017f6 <ws2812_get_pwm_strip_offset+0x22>
    {
#if defined(STRIP_1_LENGTH)
        case STRIP_BIT_1:
            offset = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	81fb      	strh	r3, [r7, #14]
            strip_num = 1;
 80017f0:	2301      	movs	r3, #1
 80017f2:	737b      	strb	r3, [r7, #13]
        break;
 80017f4:	e000      	b.n	80017f8 <ws2812_get_pwm_strip_offset+0x24>
        case STRIP_BIT_5:
            offset = STRIP_1_LENGTH + STRIP_2_LENGTH + STRIP_3_LENGTH + STRIP_4_LENGTH;
        break;
#endif
        default:
        break;
 80017f6:	bf00      	nop
    }
    return ((offset * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + (strip_num * WS2812B_RESET_TIME_CYCLES));
 80017f8:	89fa      	ldrh	r2, [r7, #14]
 80017fa:	4613      	mov	r3, r2
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	4413      	add	r3, r2
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	ee07 3a90 	vmov	s15, r3
 8001806:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800180a:	7b7b      	ldrb	r3, [r7, #13]
 800180c:	ee07 3a90 	vmov	s15, r3
 8001810:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001814:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001838 <ws2812_get_pwm_strip_offset+0x64>
 8001818:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800181c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001820:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001824:	ee17 3a90 	vmov	r3, s15
 8001828:	b29b      	uxth	r3, r3
}
 800182a:	4618      	mov	r0, r3
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	453b8000 	.word	0x453b8000

0800183c <ws2812_get_strip_size>:


uint16_t ws2812_get_strip_size(const strip_bit_e strip_bit)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
	uint16_t strip_size = 0;
 8001846:	2300      	movs	r3, #0
 8001848:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_ALL_SET == strip_bit) strip_size = g_max_strip_length;
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d103      	bne.n	8001858 <ws2812_get_strip_size+0x1c>
 8001850:	4b09      	ldr	r3, [pc, #36]	; (8001878 <ws2812_get_strip_size+0x3c>)
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	81fb      	strh	r3, [r7, #14]
 8001856:	e009      	b.n	800186c <ws2812_get_strip_size+0x30>
	else strip_size = strip_length[ws2812_convert_strip_num_to_strip_bit(strip_bit)];
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff ff9e 	bl	800179c <ws2812_convert_strip_num_to_strip_bit>
 8001860:	4603      	mov	r3, r0
 8001862:	461a      	mov	r2, r3
 8001864:	4b05      	ldr	r3, [pc, #20]	; (800187c <ws2812_get_strip_size+0x40>)
 8001866:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800186a:	81fb      	strh	r3, [r7, #14]
	return strip_size;
 800186c:	89fb      	ldrh	r3, [r7, #14]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000870 	.word	0x20000870
 800187c:	2000005c 	.word	0x2000005c

08001880 <ws2812_get_num_active_animation_leds>:
	return STRIP_BIT_NO_MORE_SET;  // if this is returned
}


uint16_t ws2812_get_num_active_animation_leds(const strip_mask_t strip_mask)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	80fb      	strh	r3, [r7, #6]
	uint16_t strip_size = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_ALL_SET == strip_mask) strip_size = g_num_leds;
 800188e:	88fb      	ldrh	r3, [r7, #6]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d103      	bne.n	800189c <ws2812_get_num_active_animation_leds+0x1c>
 8001894:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <ws2812_get_num_active_animation_leds+0x40>)
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	81fb      	strh	r3, [r7, #14]
 800189a:	e009      	b.n	80018b0 <ws2812_get_num_active_animation_leds+0x30>
	else
	{
#if defined(STRIP_1_LENGTH)
		if (STRIP_BIT_1 & strip_mask) strip_size += STRIP_1_LENGTH;
 800189c:	88fb      	ldrh	r3, [r7, #6]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d003      	beq.n	80018b0 <ws2812_get_num_active_animation_leds+0x30>
 80018a8:	89fb      	ldrh	r3, [r7, #14]
 80018aa:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80018ae:	81fb      	strh	r3, [r7, #14]
#endif
#if defined(STRIP_9_LENGTH)
		if (STRIP_BIT_9 & strip_mask) strip_size += STRIP_9_LENGTH;
#endif
	}
	return strip_size;
 80018b0:	89fb      	ldrh	r3, [r7, #14]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	2000086c 	.word	0x2000086c

080018c4 <ws2812_led_get_max_strip_size>:


uint16_t ws2812_led_get_max_strip_size(const strip_mask_t strip_mask)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	80fb      	strh	r3, [r7, #6]
	uint16_t strip_size = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_ALL_SET == strip_mask) strip_size = g_max_strip_length;
 80018d2:	88fb      	ldrh	r3, [r7, #6]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d103      	bne.n	80018e0 <ws2812_led_get_max_strip_size+0x1c>
 80018d8:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <ws2812_led_get_max_strip_size+0x44>)
 80018da:	881b      	ldrh	r3, [r3, #0]
 80018dc:	81fb      	strh	r3, [r7, #14]
 80018de:	e00c      	b.n	80018fa <ws2812_led_get_max_strip_size+0x36>
	else
	{
#if defined(STRIP_1_LENGTH)
		if ((STRIP_BIT_1 & strip_mask) && (strip_size < STRIP_1_LENGTH)) strip_size = STRIP_1_LENGTH;
 80018e0:	88fb      	ldrh	r3, [r7, #6]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d006      	beq.n	80018fa <ws2812_led_get_max_strip_size+0x36>
 80018ec:	89fb      	ldrh	r3, [r7, #14]
 80018ee:	f5b3 7f1f 	cmp.w	r3, #636	; 0x27c
 80018f2:	d202      	bcs.n	80018fa <ws2812_led_get_max_strip_size+0x36>
 80018f4:	f44f 731f 	mov.w	r3, #636	; 0x27c
 80018f8:	81fb      	strh	r3, [r7, #14]
#endif
#if defined(STRIP_9_LENGTH)
		if ((STRIP_BIT_9 & strip_mask) && (strip_size < STRIP_9_LENGTH)) strip_size = STRIP_9_LENGTH;
#endif
	}
	return strip_size;
 80018fa:	89fb      	ldrh	r3, [r7, #14]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	20000870 	.word	0x20000870

0800190c <ws2812_pixel_is_in_strip_range>:


bool ws2812_pixel_is_in_strip_range(const strip_bit_e strip_bit, const uint16_t pixel)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	460a      	mov	r2, r1
 8001916:	71fb      	strb	r3, [r7, #7]
 8001918:	4613      	mov	r3, r2
 800191a:	80bb      	strh	r3, [r7, #4]
	bool return_val = false;
 800191c:	2300      	movs	r3, #0
 800191e:	73fb      	strb	r3, [r7, #15]
#if defined(STRIP_1_LENGTH)
	if ((STRIP_BIT_1 == strip_bit) && (pixel < STRIP_1_LENGTH)) return_val = true;
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d105      	bne.n	8001932 <ws2812_pixel_is_in_strip_range+0x26>
 8001926:	88bb      	ldrh	r3, [r7, #4]
 8001928:	f5b3 7f1f 	cmp.w	r3, #636	; 0x27c
 800192c:	d201      	bcs.n	8001932 <ws2812_pixel_is_in_strip_range+0x26>
 800192e:	2301      	movs	r3, #1
 8001930:	73fb      	strb	r3, [r7, #15]
	else if ((STRIP_BIT_8 == strip_bit) && (pixel < STRIP_8_LENGTH)) return_val = true;
#endif
#if defined(STRIP_9_LENGTH)
	else if ((STRIP_BIT_9 == strip_bit) && (pixel < STRIP_9_LENGTH)) return_val = true;
#endif
	return return_val;
 8001932:	7bfb      	ldrb	r3, [r7, #15]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <ws2812b_set_led>:


void ws2812b_set_led(const strip_bit_e strip_bit, const uint16_t led_num, const color_t red, const color_t green,
                     const color_t blue)
{
 8001940:	b590      	push	{r4, r7, lr}
 8001942:	b087      	sub	sp, #28
 8001944:	af00      	add	r7, sp, #0
 8001946:	4604      	mov	r4, r0
 8001948:	4608      	mov	r0, r1
 800194a:	4611      	mov	r1, r2
 800194c:	461a      	mov	r2, r3
 800194e:	4623      	mov	r3, r4
 8001950:	73fb      	strb	r3, [r7, #15]
 8001952:	4603      	mov	r3, r0
 8001954:	81bb      	strh	r3, [r7, #12]
 8001956:	460b      	mov	r3, r1
 8001958:	73bb      	strb	r3, [r7, #14]
 800195a:	4613      	mov	r3, r2
 800195c:	72fb      	strb	r3, [r7, #11]
	strip_num_e strip_num = ws2812_convert_strip_bit_to_strip_num(strip_bit);
 800195e:	7bfb      	ldrb	r3, [r7, #15]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff29 	bl	80017b8 <ws2812_convert_strip_bit_to_strip_num>
 8001966:	4603      	mov	r3, r0
 8001968:	75fb      	strb	r3, [r7, #23]
    (gp_ws28128b_strip[strip_num] + led_num)->red = red * g_max_current_ratio;
 800196a:	7bbb      	ldrb	r3, [r7, #14]
 800196c:	ee07 3a90 	vmov	s15, r3
 8001970:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001974:	4b26      	ldr	r3, [pc, #152]	; (8001a10 <ws2812b_set_led+0xd0>)
 8001976:	edd3 7a00 	vldr	s15, [r3]
 800197a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800197e:	7dfb      	ldrb	r3, [r7, #23]
 8001980:	4a24      	ldr	r2, [pc, #144]	; (8001a14 <ws2812b_set_led+0xd4>)
 8001982:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001986:	89ba      	ldrh	r2, [r7, #12]
 8001988:	4613      	mov	r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	4413      	add	r3, r2
 800198e:	440b      	add	r3, r1
 8001990:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001994:	edc7 7a01 	vstr	s15, [r7, #4]
 8001998:	793a      	ldrb	r2, [r7, #4]
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	701a      	strb	r2, [r3, #0]
    (gp_ws28128b_strip[strip_num] + led_num)->green = green * g_max_current_ratio;
 800199e:	7afb      	ldrb	r3, [r7, #11]
 80019a0:	ee07 3a90 	vmov	s15, r3
 80019a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019a8:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <ws2812b_set_led+0xd0>)
 80019aa:	edd3 7a00 	vldr	s15, [r3]
 80019ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019b2:	7dfb      	ldrb	r3, [r7, #23]
 80019b4:	4a17      	ldr	r2, [pc, #92]	; (8001a14 <ws2812b_set_led+0xd4>)
 80019b6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80019ba:	89ba      	ldrh	r2, [r7, #12]
 80019bc:	4613      	mov	r3, r2
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	4413      	add	r3, r2
 80019c2:	440b      	add	r3, r1
 80019c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019c8:	edc7 7a01 	vstr	s15, [r7, #4]
 80019cc:	793a      	ldrb	r2, [r7, #4]
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	705a      	strb	r2, [r3, #1]
    (gp_ws28128b_strip[strip_num] + led_num)->blue = blue * g_max_current_ratio;
 80019d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80019d6:	ee07 3a90 	vmov	s15, r3
 80019da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019de:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <ws2812b_set_led+0xd0>)
 80019e0:	edd3 7a00 	vldr	s15, [r3]
 80019e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e8:	7dfb      	ldrb	r3, [r7, #23]
 80019ea:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <ws2812b_set_led+0xd4>)
 80019ec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80019f0:	89ba      	ldrh	r2, [r7, #12]
 80019f2:	4613      	mov	r3, r2
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	4413      	add	r3, r2
 80019f8:	440b      	add	r3, r1
 80019fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019fe:	edc7 7a01 	vstr	s15, [r7, #4]
 8001a02:	793a      	ldrb	r2, [r7, #4]
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	709a      	strb	r2, [r3, #2]
}
 8001a08:	bf00      	nop
 8001a0a:	371c      	adds	r7, #28
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd90      	pop	{r4, r7, pc}
 8001a10:	20000000 	.word	0x20000000
 8001a14:	20000878 	.word	0x20000878

08001a18 <ws2812b_fill_pwm_buffer_strip_one>:



#if defined(STRIP_1_LENGTH)
void ws2812b_fill_pwm_buffer_strip_one(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
    uint32_t color = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
    uint32_t strip_size = STRIP_1_LENGTH;
 8001a22:	f44f 731f 	mov.w	r3, #636	; 0x27c
 8001a26:	60bb      	str	r3, [r7, #8]
    uint32_t strip_pwm_offset = ws2812_get_pwm_strip_offset(STRIP_BIT_1);
 8001a28:	2001      	movs	r0, #1
 8001a2a:	f7ff fed3 	bl	80017d4 <ws2812_get_pwm_strip_offset>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	607b      	str	r3, [r7, #4]
    while (!gb_dma_cmplt_strip_2)
 8001a32:	e002      	b.n	8001a3a <ws2812b_fill_pwm_buffer_strip_one+0x22>
    {
        osDelay(1);
 8001a34:	2001      	movs	r0, #1
 8001a36:	f000 ff6b 	bl	8002910 <osDelay>
    while (!gb_dma_cmplt_strip_2)
 8001a3a:	4b44      	ldr	r3, [pc, #272]	; (8001b4c <ws2812b_fill_pwm_buffer_strip_one+0x134>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	f083 0301 	eor.w	r3, r3, #1
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1f5      	bne.n	8001a34 <ws2812b_fill_pwm_buffer_strip_one+0x1c>
    }
    for (uint16_t iii = 0; iii < strip_size; iii++)
 8001a48:	2300      	movs	r3, #0
 8001a4a:	82fb      	strh	r3, [r7, #22]
 8001a4c:	e046      	b.n	8001adc <ws2812b_fill_pwm_buffer_strip_one+0xc4>
    {
        color = (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->green) << 16) | \
 8001a4e:	4b40      	ldr	r3, [pc, #256]	; (8001b50 <ws2812b_fill_pwm_buffer_strip_one+0x138>)
 8001a50:	6819      	ldr	r1, [r3, #0]
 8001a52:	8afa      	ldrh	r2, [r7, #22]
 8001a54:	4613      	mov	r3, r2
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	4413      	add	r3, r2
 8001a5a:	440b      	add	r3, r1
 8001a5c:	785b      	ldrb	r3, [r3, #1]
 8001a5e:	0419      	lsls	r1, r3, #16
                                (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->red) << 8) | \
 8001a60:	4b3b      	ldr	r3, [pc, #236]	; (8001b50 <ws2812b_fill_pwm_buffer_strip_one+0x138>)
 8001a62:	6818      	ldr	r0, [r3, #0]
 8001a64:	8afa      	ldrh	r2, [r7, #22]
 8001a66:	4613      	mov	r3, r2
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	4413      	add	r3, r2
 8001a6c:	4403      	add	r3, r0
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	021b      	lsls	r3, r3, #8
        color = (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->green) << 16) | \
 8001a72:	4319      	orrs	r1, r3
                                (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->blue));
 8001a74:	4b36      	ldr	r3, [pc, #216]	; (8001b50 <ws2812b_fill_pwm_buffer_strip_one+0x138>)
 8001a76:	6818      	ldr	r0, [r3, #0]
 8001a78:	8afa      	ldrh	r2, [r7, #22]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	4413      	add	r3, r2
 8001a80:	4403      	add	r3, r0
 8001a82:	789b      	ldrb	r3, [r3, #2]
                                (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->red) << 8) | \
 8001a84:	430b      	orrs	r3, r1
        color = (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->green) << 16) | \
 8001a86:	60fb      	str	r3, [r7, #12]
        for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 8001a88:	2300      	movs	r3, #0
 8001a8a:	757b      	strb	r3, [r7, #21]
 8001a8c:	e020      	b.n	8001ad0 <ws2812b_fill_pwm_buffer_strip_one+0xb8>
        {
            gp_pwm_data_fill[strip_pwm_offset + (iii * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + yyy] = (color & (1 << (23 - yyy))) ? (uint16_t)(WS2812B_BIT_SET_CYCLES + 1) : (uint16_t)WS2812B_BIT_RESET_CYCLES;
 8001a8e:	7d7b      	ldrb	r3, [r7, #21]
 8001a90:	f1c3 0317 	rsb	r3, r3, #23
 8001a94:	2201      	movs	r2, #1
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <ws2812b_fill_pwm_buffer_strip_one+0x90>
 8001aa4:	2028      	movs	r0, #40	; 0x28
 8001aa6:	e000      	b.n	8001aaa <ws2812b_fill_pwm_buffer_strip_one+0x92>
 8001aa8:	2014      	movs	r0, #20
 8001aaa:	4b2a      	ldr	r3, [pc, #168]	; (8001b54 <ws2812b_fill_pwm_buffer_strip_one+0x13c>)
 8001aac:	6819      	ldr	r1, [r3, #0]
 8001aae:	8afa      	ldrh	r2, [r7, #22]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	4413      	add	r3, r2
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	461a      	mov	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	441a      	add	r2, r3
 8001abe:	7d7b      	ldrb	r3, [r7, #21]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	440b      	add	r3, r1
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	801a      	strh	r2, [r3, #0]
        for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 8001aca:	7d7b      	ldrb	r3, [r7, #21]
 8001acc:	3301      	adds	r3, #1
 8001ace:	757b      	strb	r3, [r7, #21]
 8001ad0:	7d7b      	ldrb	r3, [r7, #21]
 8001ad2:	2b17      	cmp	r3, #23
 8001ad4:	d9db      	bls.n	8001a8e <ws2812b_fill_pwm_buffer_strip_one+0x76>
    for (uint16_t iii = 0; iii < strip_size; iii++)
 8001ad6:	8afb      	ldrh	r3, [r7, #22]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	82fb      	strh	r3, [r7, #22]
 8001adc:	8afb      	ldrh	r3, [r7, #22]
 8001ade:	68ba      	ldr	r2, [r7, #8]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d8b4      	bhi.n	8001a4e <ws2812b_fill_pwm_buffer_strip_one+0x36>
        }
    }
    for (uint16_t iii = 0; iii < WS2812B_RESET_TIME_CYCLES; iii++)
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	827b      	strh	r3, [r7, #18]
 8001ae8:	e012      	b.n	8001b10 <ws2812b_fill_pwm_buffer_strip_one+0xf8>
    {
        gp_pwm_data_fill[(strip_pwm_offset + (strip_size * BITS_PER_BYTE * sizeof(ws2812b_led_t))) + iii] = 0;
 8001aea:	4b1a      	ldr	r3, [pc, #104]	; (8001b54 <ws2812b_fill_pwm_buffer_strip_one+0x13c>)
 8001aec:	6819      	ldr	r1, [r3, #0]
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	4613      	mov	r3, r2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	4413      	add	r3, r2
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	461a      	mov	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	441a      	add	r2, r3
 8001afe:	8a7b      	ldrh	r3, [r7, #18]
 8001b00:	4413      	add	r3, r2
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	440b      	add	r3, r1
 8001b06:	2200      	movs	r2, #0
 8001b08:	801a      	strh	r2, [r3, #0]
    for (uint16_t iii = 0; iii < WS2812B_RESET_TIME_CYCLES; iii++)
 8001b0a:	8a7b      	ldrh	r3, [r7, #18]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	827b      	strh	r3, [r7, #18]
 8001b10:	8a7b      	ldrh	r3, [r7, #18]
 8001b12:	ee07 3a90 	vmov	s15, r3
 8001b16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b1a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001b58 <ws2812b_fill_pwm_buffer_strip_one+0x140>
 8001b1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b26:	d4e0      	bmi.n	8001aea <ws2812b_fill_pwm_buffer_strip_one+0xd2>
    }
    gb_dma_cmplt_strip_1 = false;
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <ws2812b_fill_pwm_buffer_strip_one+0x144>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_1, (uint32_t *)(gp_pwm_data_fill + strip_pwm_offset), (STRIP_1_LENGTH * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + WS2812B_RESET_TIME_CYCLES);
 8001b2e:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <ws2812b_fill_pwm_buffer_strip_one+0x13c>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	441a      	add	r2, r3
 8001b38:	f244 7358 	movw	r3, #18264	; 0x4758
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4808      	ldr	r0, [pc, #32]	; (8001b60 <ws2812b_fill_pwm_buffer_strip_one+0x148>)
 8001b40:	f005 fe68 	bl	8007814 <HAL_TIM_PWM_Start_DMA>
}
 8001b44:	bf00      	nop
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	2000006a 	.word	0x2000006a
 8001b50:	20000878 	.word	0x20000878
 8001b54:	20000874 	.word	0x20000874
 8001b58:	453b8000 	.word	0x453b8000
 8001b5c:	20000069 	.word	0x20000069
 8001b60:	200023bc 	.word	0x200023bc

08001b64 <ws2812b_init>:


uint32_t g_size = 0;

void ws2812b_init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0

#if defined(STRIP_1_LENGTH)
	gp_ws28128b_strip[STRIP_NUM_1] = g_strip_1;
 8001b6a:	4b31      	ldr	r3, [pc, #196]	; (8001c30 <ws2812b_init+0xcc>)
 8001b6c:	4a31      	ldr	r2, [pc, #196]	; (8001c34 <ws2812b_init+0xd0>)
 8001b6e:	601a      	str	r2, [r3, #0]
#endif
#if defined(STRIP_4_LENGTH)
	gp_ws28128b_strip[STRIP_NUM_4] = g_strip_4;
#endif

	uint8_t num_strips = NUM_STRIPS;
 8001b70:	2301      	movs	r3, #1
 8001b72:	70fb      	strb	r3, [r7, #3]
	for (int iii = 0; iii < NUM_STRIPS; iii++) g_all_strip_mask |= 1 << iii;
 8001b74:	2300      	movs	r3, #0
 8001b76:	607b      	str	r3, [r7, #4]
 8001b78:	e00f      	b.n	8001b9a <ws2812b_init+0x36>
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	b21a      	sxth	r2, r3
 8001b84:	4b2c      	ldr	r3, [pc, #176]	; (8001c38 <ws2812b_init+0xd4>)
 8001b86:	881b      	ldrh	r3, [r3, #0]
 8001b88:	b21b      	sxth	r3, r3
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	b21b      	sxth	r3, r3
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	4b29      	ldr	r3, [pc, #164]	; (8001c38 <ws2812b_init+0xd4>)
 8001b92:	801a      	strh	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3301      	adds	r3, #1
 8001b98:	607b      	str	r3, [r7, #4]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	ddec      	ble.n	8001b7a <ws2812b_init+0x16>
	switch (num_strips)
 8001ba0:	78fb      	ldrb	r3, [r7, #3]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d110      	bne.n	8001bc8 <ws2812b_init+0x64>
		case 2:
			g_num_leds += STRIP_2_LENGTH;
			if (STRIP_2_LENGTH > g_max_strip_length) g_max_strip_length = STRIP_2_LENGTH;
#endif
		case 1:
			g_num_leds += STRIP_1_LENGTH;
 8001ba6:	4b25      	ldr	r3, [pc, #148]	; (8001c3c <ws2812b_init+0xd8>)
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	4b22      	ldr	r3, [pc, #136]	; (8001c3c <ws2812b_init+0xd8>)
 8001bb2:	801a      	strh	r2, [r3, #0]
			if (STRIP_1_LENGTH > g_max_strip_length) g_max_strip_length = STRIP_1_LENGTH;
 8001bb4:	4b22      	ldr	r3, [pc, #136]	; (8001c40 <ws2812b_init+0xdc>)
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	f5b3 7f1f 	cmp.w	r3, #636	; 0x27c
 8001bbc:	d203      	bcs.n	8001bc6 <ws2812b_init+0x62>
 8001bbe:	4b20      	ldr	r3, [pc, #128]	; (8001c40 <ws2812b_init+0xdc>)
 8001bc0:	f44f 721f 	mov.w	r2, #636	; 0x27c
 8001bc4:	801a      	strh	r2, [r3, #0]
		break;
 8001bc6:	bf00      	nop
	}
    gp_pwm_data_fill = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
 8001bc8:	4b1c      	ldr	r3, [pc, #112]	; (8001c3c <ws2812b_init+0xd8>)
 8001bca:	881b      	ldrh	r3, [r3, #0]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4613      	mov	r3, r2
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	4413      	add	r3, r2
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	ee07 3a90 	vmov	s15, r3
 8001bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bde:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001c44 <ws2812b_init+0xe0>
 8001be2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001be6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bea:	ee17 0a90 	vmov	r0, s15
 8001bee:	f008 f985 	bl	8009efc <malloc>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4b14      	ldr	r3, [pc, #80]	; (8001c48 <ws2812b_init+0xe4>)
 8001bf8:	601a      	str	r2, [r3, #0]
    //gp_pwm_data_ping = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
    //gp_pwm_data_pong = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
    g_size = (sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES);
 8001bfa:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <ws2812b_init+0xd8>)
 8001bfc:	881b      	ldrh	r3, [r3, #0]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	4613      	mov	r3, r2
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	4413      	add	r3, r2
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	ee07 3a90 	vmov	s15, r3
 8001c0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c10:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001c44 <ws2812b_init+0xe0>
 8001c14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c1c:	ee17 2a90 	vmov	r2, s15
 8001c20:	4b0a      	ldr	r3, [pc, #40]	; (8001c4c <ws2812b_init+0xe8>)
 8001c22:	601a      	str	r2, [r3, #0]
    //gp_pwm_data_fill = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_max_strip_length) + WS2812B_RESET_TIME_CYCLES);
	current_monitor_init();
 8001c24:	f7fe ff72 	bl	8000b0c <current_monitor_init>
}
 8001c28:	bf00      	nop
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20000878 	.word	0x20000878
 8001c34:	200000f8 	.word	0x200000f8
 8001c38:	2000086e 	.word	0x2000086e
 8001c3c:	2000086c 	.word	0x2000086c
 8001c40:	20000870 	.word	0x20000870
 8001c44:	453b8000 	.word	0x453b8000
 8001c48:	20000874 	.word	0x20000874
 8001c4c:	200008e0 	.word	0x200008e0

08001c50 <ws2812b_show_strip_one>:


void ws2812b_show_strip_one(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
    ws2812b_fill_pwm_buffer_strip_one();
 8001c54:	f7ff fee0 	bl	8001a18 <ws2812b_fill_pwm_buffer_strip_one>
}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <task_button_press_interrupt_occurred>:
bool        g_animate_led_pause_flag = false;
bool        g_animate_led_interrupt = false;
bool        g_interrupt_flag[NUM_ISR] = {false};

bool task_button_press_interrupt_occurred(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
    return g_animate_led_interrupt;
 8001c60:	4b03      	ldr	r3, [pc, #12]	; (8001c70 <task_button_press_interrupt_occurred+0x14>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	20000907 	.word	0x20000907

08001c74 <task_led_ctrl_button_to_isr>:


isr_e task_led_ctrl_button_to_isr(const board_init_push_buttons_e button)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	71fb      	strb	r3, [r7, #7]
    isr_e return_val;
    switch (button)
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	2b03      	cmp	r3, #3
 8001c82:	d817      	bhi.n	8001cb4 <task_led_ctrl_button_to_isr+0x40>
 8001c84:	a201      	add	r2, pc, #4	; (adr r2, 8001c8c <task_led_ctrl_button_to_isr+0x18>)
 8001c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c8a:	bf00      	nop
 8001c8c:	08001c9d 	.word	0x08001c9d
 8001c90:	08001ca3 	.word	0x08001ca3
 8001c94:	08001ca9 	.word	0x08001ca9
 8001c98:	08001caf 	.word	0x08001caf
    {
        case PUSH_BUTTON_A:
            return_val = ISR_SPEED;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	73fb      	strb	r3, [r7, #15]
        break;
 8001ca0:	e009      	b.n	8001cb6 <task_led_ctrl_button_to_isr+0x42>
        case PUSH_BUTTON_B:
            return_val = ISR_STATE;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	73fb      	strb	r3, [r7, #15]
        break;
 8001ca6:	e006      	b.n	8001cb6 <task_led_ctrl_button_to_isr+0x42>
        case PUSH_BUTTON_C:
            return_val = ISR_COLOR;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	73fb      	strb	r3, [r7, #15]
        break;
 8001cac:	e003      	b.n	8001cb6 <task_led_ctrl_button_to_isr+0x42>
        case PUSH_BUTTON_D:
            return_val = ISR_PAUSE;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	73fb      	strb	r3, [r7, #15]
        break;
 8001cb2:	e000      	b.n	8001cb6 <task_led_ctrl_button_to_isr+0x42>
        default: // do nothing!
        break;
 8001cb4:	bf00      	nop
    }
    return return_val;
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <task_button_press_ctrl_set_interrupt_flag>:


void task_button_press_ctrl_set_interrupt_flag(const isr_e src)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	71fb      	strb	r3, [r7, #7]
    g_animate_led_interrupt = true;
 8001cce:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <task_button_press_ctrl_set_interrupt_flag+0x24>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	701a      	strb	r2, [r3, #0]
    g_interrupt_flag[src] = true;
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
 8001cd6:	4a05      	ldr	r2, [pc, #20]	; (8001cec <task_button_press_ctrl_set_interrupt_flag+0x28>)
 8001cd8:	2101      	movs	r1, #1
 8001cda:	54d1      	strb	r1, [r2, r3]
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	20000907 	.word	0x20000907
 8001cec:	20000908 	.word	0x20000908

08001cf0 <task_button_press_ctrl_interrupt_flag>:


bool task_button_press_ctrl_interrupt_flag(const isr_e src)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	71fb      	strb	r3, [r7, #7]
    bool return_val = g_interrupt_flag[src];
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	4a08      	ldr	r2, [pc, #32]	; (8001d20 <task_button_press_ctrl_interrupt_flag+0x30>)
 8001cfe:	5cd3      	ldrb	r3, [r2, r3]
 8001d00:	73fb      	strb	r3, [r7, #15]
    if (return_val) g_interrupt_flag[src] = false; // auto clear
 8001d02:	7bfb      	ldrb	r3, [r7, #15]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <task_button_press_ctrl_interrupt_flag+0x20>
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	4a05      	ldr	r2, [pc, #20]	; (8001d20 <task_button_press_ctrl_interrupt_flag+0x30>)
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	54d1      	strb	r1, [r2, r3]
    return return_val;
 8001d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	20000908 	.word	0x20000908

08001d24 <task_button_press_check_interrupts>:


bool task_button_press_check_interrupts(uint8_t *red, uint8_t *green, uint8_t *blue)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
    bool return_val = false;
 8001d30:	2300      	movs	r3, #0
 8001d32:	75fb      	strb	r3, [r7, #23]
    if (task_button_press_major_state_change())
 8001d34:	f000 f85a 	bl	8001dec <task_button_press_major_state_change>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d008      	beq.n	8001d50 <task_button_press_check_interrupts+0x2c>
    {
        task_button_press_interrupt_flag_clear();
 8001d3e:	f000 f849 	bl	8001dd4 <task_button_press_interrupt_flag_clear>
        return_val = true;
 8001d42:	2301      	movs	r3, #1
 8001d44:	75fb      	strb	r3, [r7, #23]
        animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLACK);
 8001d46:	2100      	movs	r1, #0
 8001d48:	2001      	movs	r0, #1
 8001d4a:	f7fe ffe9 	bl	8000d20 <animate_led_solid_custom_color>
 8001d4e:	e039      	b.n	8001dc4 <task_button_press_check_interrupts+0xa0>
    }
    else if (task_button_press_ctrl_interrupt_flag(ISR_STATE))
 8001d50:	2001      	movs	r0, #1
 8001d52:	f7ff ffcd 	bl	8001cf0 <task_button_press_ctrl_interrupt_flag>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d008      	beq.n	8001d6e <task_button_press_check_interrupts+0x4a>
    {
        task_button_press_interrupt_flag_clear();
 8001d5c:	f000 f83a 	bl	8001dd4 <task_button_press_interrupt_flag_clear>
        return_val = true;
 8001d60:	2301      	movs	r3, #1
 8001d62:	75fb      	strb	r3, [r7, #23]
        animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLACK);
 8001d64:	2100      	movs	r1, #0
 8001d66:	2001      	movs	r0, #1
 8001d68:	f7fe ffda 	bl	8000d20 <animate_led_solid_custom_color>
 8001d6c:	e02a      	b.n	8001dc4 <task_button_press_check_interrupts+0xa0>
    }
    else if (task_button_press_ctrl_interrupt_flag(ISR_PAUSE))
 8001d6e:	2003      	movs	r0, #3
 8001d70:	f7ff ffbe 	bl	8001cf0 <task_button_press_ctrl_interrupt_flag>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00a      	beq.n	8001d90 <task_button_press_check_interrupts+0x6c>
    {
        task_button_press_interrupt_flag_clear();
 8001d7a:	f000 f82b 	bl	8001dd4 <task_button_press_interrupt_flag_clear>
        while (g_animate_led_pause_flag)
 8001d7e:	e002      	b.n	8001d86 <task_button_press_check_interrupts+0x62>
        {
            osDelay(10);
 8001d80:	200a      	movs	r0, #10
 8001d82:	f000 fdc5 	bl	8002910 <osDelay>
        while (g_animate_led_pause_flag)
 8001d86:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <task_button_press_check_interrupts+0xac>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f8      	bne.n	8001d80 <task_button_press_check_interrupts+0x5c>
 8001d8e:	e019      	b.n	8001dc4 <task_button_press_check_interrupts+0xa0>
        }
    }
    else if (task_button_press_ctrl_interrupt_flag(ISR_COLOR))
 8001d90:	2002      	movs	r0, #2
 8001d92:	f7ff ffad 	bl	8001cf0 <task_button_press_ctrl_interrupt_flag>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d013      	beq.n	8001dc4 <task_button_press_check_interrupts+0xa0>
    {
        task_button_press_interrupt_flag_clear();
 8001d9c:	f000 f81a 	bl	8001dd4 <task_button_press_interrupt_flag_clear>
        // interrupt modifies the current color... apply it to the animation!
        *red = task_led_ctrl_color_red_hex();
 8001da0:	f000 fb3c 	bl	800241c <task_led_ctrl_color_red_hex>
 8001da4:	4603      	mov	r3, r0
 8001da6:	461a      	mov	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	701a      	strb	r2, [r3, #0]
        *green = task_led_ctrl_color_green_hex();
 8001dac:	f000 fb5e 	bl	800246c <task_led_ctrl_color_green_hex>
 8001db0:	4603      	mov	r3, r0
 8001db2:	461a      	mov	r2, r3
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	701a      	strb	r2, [r3, #0]
        *blue = task_led_ctrl_color_blue_hex();
 8001db8:	f000 fb80 	bl	80024bc <task_led_ctrl_color_blue_hex>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	701a      	strb	r2, [r3, #0]
    }
    return return_val;
 8001dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000906 	.word	0x20000906

08001dd4 <task_button_press_interrupt_flag_clear>:


void task_button_press_interrupt_flag_clear(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
    g_animate_led_interrupt = false;
 8001dd8:	4b03      	ldr	r3, [pc, #12]	; (8001de8 <task_button_press_interrupt_flag_clear+0x14>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	701a      	strb	r2, [r3, #0]
}
 8001dde:	bf00      	nop
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	20000907 	.word	0x20000907

08001dec <task_button_press_major_state_change>:
uint32_t c_ok_count = 0;
uint32_t d_ok_count = 0;


bool task_button_press_major_state_change(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
    return task_button_press_major_change;
 8001df0:	4b03      	ldr	r3, [pc, #12]	; (8001e00 <task_button_press_major_state_change+0x14>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	20000905 	.word	0x20000905

08001e04 <task_button_press>:
    task_button_press_major_change = false;
}


void task_button_press(void *argument)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
    uint32_t button_pressed_bit = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60bb      	str	r3, [r7, #8]
    uint32_t timestamp_diff = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	60fb      	str	r3, [r7, #12]
    color_hex_code_e color = COLOR_HEX_BLACK;
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
    IRQn_Type irq_type = 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	74fb      	strb	r3, [r7, #19]
    while (1)
    {
        xTaskNotifyWait(0, button_pressed_bit, &button_pressed_bit, portMAX_DELAY);
 8001e1c:	68b9      	ldr	r1, [r7, #8]
 8001e1e:	f107 0208 	add.w	r2, r7, #8
 8001e22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e26:	2000      	movs	r0, #0
 8001e28:	f002 fa1e 	bl	8004268 <xTaskNotifyWait>
        HAL_GPIO_WritePin(PIN_PORT_B, PIN_INT_LVL_EN, GPIO_PIN_RESET);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	2101      	movs	r1, #1
 8001e30:	488b      	ldr	r0, [pc, #556]	; (8002060 <task_button_press+0x25c>)
 8001e32:	f004 f911 	bl	8006058 <HAL_GPIO_WritePin>
        osDelay(700);
 8001e36:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001e3a:	f000 fd69 	bl	8002910 <osDelay>
        HAL_GPIO_WritePin(PIN_PORT_B, PIN_INT_LVL_EN, GPIO_PIN_SET);
 8001e3e:	2201      	movs	r2, #1
 8001e40:	2101      	movs	r1, #1
 8001e42:	4887      	ldr	r0, [pc, #540]	; (8002060 <task_button_press+0x25c>)
 8001e44:	f004 f908 	bl	8006058 <HAL_GPIO_WritePin>

        timestamp_diff = g_button_press_timestamp[(board_init_push_buttons_e) button_pressed_bit][TIMESTAMP_CURRENT] - \
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4b85      	ldr	r3, [pc, #532]	; (8002064 <task_button_press+0x260>)
 8001e50:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
                        g_button_press_timestamp[(board_init_push_buttons_e)button_pressed_bit][TIMESTAMP_PREVIOUS];
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	4982      	ldr	r1, [pc, #520]	; (8002064 <task_button_press+0x260>)
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	440b      	add	r3, r1
 8001e5e:	685b      	ldr	r3, [r3, #4]
        timestamp_diff = g_button_press_timestamp[(board_init_push_buttons_e) button_pressed_bit][TIMESTAMP_CURRENT] - \
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	60fb      	str	r3, [r7, #12]
        if (timestamp_diff < SWITCH_FAST_PRESS_TIME_MILLISECONDS) fast_press_count++;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e6a:	d206      	bcs.n	8001e7a <task_button_press+0x76>
 8001e6c:	4b7e      	ldr	r3, [pc, #504]	; (8002068 <task_button_press+0x264>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	3301      	adds	r3, #1
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	4b7c      	ldr	r3, [pc, #496]	; (8002068 <task_button_press+0x264>)
 8001e76:	701a      	strb	r2, [r3, #0]
 8001e78:	e002      	b.n	8001e80 <task_button_press+0x7c>
        else fast_press_count = 0;
 8001e7a:	4b7b      	ldr	r3, [pc, #492]	; (8002068 <task_button_press+0x264>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	701a      	strb	r2, [r3, #0]
        task_button_press_ctrl_set_interrupt_flag(task_led_ctrl_button_to_isr((board_init_push_buttons_e) button_pressed_bit));
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff fef5 	bl	8001c74 <task_led_ctrl_button_to_isr>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff ff19 	bl	8001cc4 <task_button_press_ctrl_set_interrupt_flag>
        if (fast_press_count >= (SWITCH_HISTORY_DEPTH-1))
 8001e92:	4b75      	ldr	r3, [pc, #468]	; (8002068 <task_button_press+0x264>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2b03      	cmp	r3, #3
 8001e98:	d975      	bls.n	8001f86 <task_button_press+0x182>
        {
            task_button_press_major_change = true;
 8001e9a:	4b74      	ldr	r3, [pc, #464]	; (800206c <task_button_press+0x268>)
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	701a      	strb	r2, [r3, #0]
            fast_press_count = 0;
 8001ea0:	4b71      	ldr	r3, [pc, #452]	; (8002068 <task_button_press+0x264>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	701a      	strb	r2, [r3, #0]
            switch ((board_init_push_buttons_e) button_pressed_bit)
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b03      	cmp	r3, #3
 8001eac:	d841      	bhi.n	8001f32 <task_button_press+0x12e>
 8001eae:	a201      	add	r2, pc, #4	; (adr r2, 8001eb4 <task_button_press+0xb0>)
 8001eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb4:	08001ec5 	.word	0x08001ec5
 8001eb8:	08001edf 	.word	0x08001edf
 8001ebc:	08001efb 	.word	0x08001efb
 8001ec0:	08001f15 	.word	0x08001f15
            {
                case PUSH_BUTTON_A:
                    a_ok_count++;
 8001ec4:	4b6a      	ldr	r3, [pc, #424]	; (8002070 <task_button_press+0x26c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	4a69      	ldr	r2, [pc, #420]	; (8002070 <task_button_press+0x26c>)
 8001ecc:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_GREEN;
 8001ece:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ed2:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_A_IRQ;
 8001ed4:	2308      	movs	r3, #8
 8001ed6:	74fb      	strb	r3, [r7, #19]
                    task_led_ctrl_speed_reset();
 8001ed8:	f000 fb90 	bl	80025fc <task_led_ctrl_speed_reset>

                break;
 8001edc:	e02a      	b.n	8001f34 <task_button_press+0x130>
                case PUSH_BUTTON_B:
                    b_ok_count++;
 8001ede:	4b65      	ldr	r3, [pc, #404]	; (8002074 <task_button_press+0x270>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	4a63      	ldr	r2, [pc, #396]	; (8002074 <task_button_press+0x270>)
 8001ee6:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_BLUE;
 8001ee8:	23ff      	movs	r3, #255	; 0xff
 8001eea:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_B_IRQ;
 8001eec:	2328      	movs	r3, #40	; 0x28
 8001eee:	74fb      	strb	r3, [r7, #19]
                    task_led_ctrl_animate_iteration_reset();
 8001ef0:	f000 fb90 	bl	8002614 <task_led_ctrl_animate_iteration_reset>
                    task_led_ctrl_animate_state_demo(); // enter demo state
 8001ef4:	f000 fbb8 	bl	8002668 <task_led_ctrl_animate_state_demo>
                break;
 8001ef8:	e01c      	b.n	8001f34 <task_button_press+0x130>
                case PUSH_BUTTON_C:
                    c_ok_count++;
 8001efa:	4b5f      	ldr	r3, [pc, #380]	; (8002078 <task_button_press+0x274>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	3301      	adds	r3, #1
 8001f00:	4a5d      	ldr	r2, [pc, #372]	; (8002078 <task_button_press+0x274>)
 8001f02:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_RED;
 8001f04:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8001f08:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_C_IRQ;
 8001f0a:	2317      	movs	r3, #23
 8001f0c:	74fb      	strb	r3, [r7, #19]
                    // don't change iteration count.  Simply go to color demo mode.
                    task_led_ctrl_color_state_demo();
 8001f0e:	f000 fa37 	bl	8002380 <task_led_ctrl_color_state_demo>
                break;
 8001f12:	e00f      	b.n	8001f34 <task_button_press+0x130>
                case PUSH_BUTTON_D:
                    task_led_ctrl_brightness_adjust();
 8001f14:	f000 f9ce 	bl	80022b4 <task_led_ctrl_brightness_adjust>
                    task_led_ctrl_clear_pause();
 8001f18:	f000 f9fc 	bl	8002314 <task_led_ctrl_clear_pause>
                    d_ok_count++;
 8001f1c:	4b57      	ldr	r3, [pc, #348]	; (800207c <task_button_press+0x278>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	3301      	adds	r3, #1
 8001f22:	4a56      	ldr	r2, [pc, #344]	; (800207c <task_button_press+0x278>)
 8001f24:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_WHITE;
 8001f26:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001f2a:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_D_IRQ;
 8001f2c:	2306      	movs	r3, #6
 8001f2e:	74fb      	strb	r3, [r7, #19]
                break;
 8001f30:	e000      	b.n	8001f34 <task_button_press+0x130>
                default:
                break;
 8001f32:	bf00      	nop
            }
            for (uint8_t iii = 0; iii < 3; iii++)
 8001f34:	2300      	movs	r3, #0
 8001f36:	74bb      	strb	r3, [r7, #18]
 8001f38:	e012      	b.n	8001f60 <task_button_press+0x15c>
            {
                animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, color);
 8001f3a:	6979      	ldr	r1, [r7, #20]
 8001f3c:	2001      	movs	r0, #1
 8001f3e:	f7fe feef 	bl	8000d20 <animate_led_solid_custom_color>
                osDelay(500);
 8001f42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f46:	f000 fce3 	bl	8002910 <osDelay>
                animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLACK);
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	f7fe fee7 	bl	8000d20 <animate_led_solid_custom_color>
                osDelay(500);
 8001f52:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f56:	f000 fcdb 	bl	8002910 <osDelay>
            for (uint8_t iii = 0; iii < 3; iii++)
 8001f5a:	7cbb      	ldrb	r3, [r7, #18]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	74bb      	strb	r3, [r7, #18]
 8001f60:	7cbb      	ldrb	r3, [r7, #18]
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d9e9      	bls.n	8001f3a <task_button_press+0x136>
            }
            HAL_NVIC_SetPriority(irq_type, 24, 0);
 8001f66:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2118      	movs	r1, #24
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f003 fc33 	bl	80057da <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(irq_type);
 8001f74:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f003 fc4a 	bl	8005812 <HAL_NVIC_EnableIRQ>
            task_button_press_major_change = false;
 8001f7e:	4b3b      	ldr	r3, [pc, #236]	; (800206c <task_button_press+0x268>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	701a      	strb	r2, [r3, #0]
 8001f84:	e74a      	b.n	8001e1c <task_button_press+0x18>
        }
        else
        {
            // no state change here
            task_button_press_ctrl_set_interrupt_flag(task_led_ctrl_button_to_isr((board_init_push_buttons_e) button_pressed_bit));
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff fe72 	bl	8001c74 <task_led_ctrl_button_to_isr>
 8001f90:	4603      	mov	r3, r0
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff fe96 	bl	8001cc4 <task_button_press_ctrl_set_interrupt_flag>
            switch ((board_init_push_buttons_e) button_pressed_bit)
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b03      	cmp	r3, #3
 8001f9e:	d85d      	bhi.n	800205c <task_button_press+0x258>
 8001fa0:	a201      	add	r2, pc, #4	; (adr r2, 8001fa8 <task_button_press+0x1a4>)
 8001fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa6:	bf00      	nop
 8001fa8:	08001fb9 	.word	0x08001fb9
 8001fac:	08001fd9 	.word	0x08001fd9
 8001fb0:	0800200d 	.word	0x0800200d
 8001fb4:	0800203d 	.word	0x0800203d
            {
                case PUSH_BUTTON_A:
                    a_ok_count++;
 8001fb8:	4b2d      	ldr	r3, [pc, #180]	; (8002070 <task_button_press+0x26c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	4a2c      	ldr	r2, [pc, #176]	; (8002070 <task_button_press+0x26c>)
 8001fc0:	6013      	str	r3, [r2, #0]
                    task_led_ctrl_speed_adjust();
 8001fc2:	f000 fb03 	bl	80025cc <task_led_ctrl_speed_adjust>
                    HAL_NVIC_SetPriority(PUSH_BUTTON_A_IRQ, 24, 0);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2118      	movs	r1, #24
 8001fca:	2008      	movs	r0, #8
 8001fcc:	f003 fc05 	bl	80057da <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_A_IRQ);
 8001fd0:	2008      	movs	r0, #8
 8001fd2:	f003 fc1e 	bl	8005812 <HAL_NVIC_EnableIRQ>
                break;
 8001fd6:	e042      	b.n	800205e <task_button_press+0x25a>
                case PUSH_BUTTON_B:
                    b_ok_count++;
 8001fd8:	4b26      	ldr	r3, [pc, #152]	; (8002074 <task_button_press+0x270>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	4a25      	ldr	r2, [pc, #148]	; (8002074 <task_button_press+0x270>)
 8001fe0:	6013      	str	r3, [r2, #0]
                    if (MASTER_LED_STATE_DEMO == task_led_ctrl_animate_state())
 8001fe2:	f000 fb69 	bl	80026b8 <task_led_ctrl_animate_state>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d102      	bne.n	8001ff2 <task_button_press+0x1ee>
                    {
                        task_led_ctrl_animate_state_fixed(); // animation count is auto cleared here.
 8001fec:	f000 fb4e 	bl	800268c <task_led_ctrl_animate_state_fixed>
 8001ff0:	e003      	b.n	8001ffa <task_button_press+0x1f6>
                    }
                    else
                    {
                        task_led_ctrl_animate_iteration_reset();
 8001ff2:	f000 fb0f 	bl	8002614 <task_led_ctrl_animate_iteration_reset>
                        task_led_ctrl_animate_adjust_state();
 8001ff6:	f000 fb19 	bl	800262c <task_led_ctrl_animate_adjust_state>
                    }
                    HAL_NVIC_SetPriority(PUSH_BUTTON_B_IRQ, 24, 0);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2118      	movs	r1, #24
 8001ffe:	2028      	movs	r0, #40	; 0x28
 8002000:	f003 fbeb 	bl	80057da <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_B_IRQ);
 8002004:	2028      	movs	r0, #40	; 0x28
 8002006:	f003 fc04 	bl	8005812 <HAL_NVIC_EnableIRQ>
                break;
 800200a:	e028      	b.n	800205e <task_button_press+0x25a>
                case PUSH_BUTTON_C:
                    c_ok_count++;
 800200c:	4b1a      	ldr	r3, [pc, #104]	; (8002078 <task_button_press+0x274>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	3301      	adds	r3, #1
 8002012:	4a19      	ldr	r2, [pc, #100]	; (8002078 <task_button_press+0x274>)
 8002014:	6013      	str	r3, [r2, #0]
                    if (MASTER_COLOR_STATE_DEMO == task_led_ctrl_color_state())
 8002016:	f000 f9a7 	bl	8002368 <task_led_ctrl_color_state>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d102      	bne.n	8002026 <task_button_press+0x222>
                    {
                        task_led_ctrl_color_state_fixed();
 8002020:	f000 f9ba 	bl	8002398 <task_led_ctrl_color_state_fixed>
 8002024:	e001      	b.n	800202a <task_button_press+0x226>
                    }
                    else
                    {
                        task_led_ctrl_color_adjust();
 8002026:	f000 f9c9 	bl	80023bc <task_led_ctrl_color_adjust>
                    }
                    HAL_NVIC_SetPriority(PUSH_BUTTON_C_IRQ, 24, 0);
 800202a:	2200      	movs	r2, #0
 800202c:	2118      	movs	r1, #24
 800202e:	2017      	movs	r0, #23
 8002030:	f003 fbd3 	bl	80057da <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_C_IRQ);
 8002034:	2017      	movs	r0, #23
 8002036:	f003 fbec 	bl	8005812 <HAL_NVIC_EnableIRQ>

                break;
 800203a:	e010      	b.n	800205e <task_button_press+0x25a>
                case PUSH_BUTTON_D:
                    d_ok_count++;
 800203c:	4b0f      	ldr	r3, [pc, #60]	; (800207c <task_button_press+0x278>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	3301      	adds	r3, #1
 8002042:	4a0e      	ldr	r2, [pc, #56]	; (800207c <task_button_press+0x278>)
 8002044:	6013      	str	r3, [r2, #0]
                    task_led_ctrl_pause();
 8002046:	f000 f971 	bl	800232c <task_led_ctrl_pause>
                    HAL_NVIC_SetPriority(PUSH_BUTTON_D_IRQ, 24, 0);
 800204a:	2200      	movs	r2, #0
 800204c:	2118      	movs	r1, #24
 800204e:	2006      	movs	r0, #6
 8002050:	f003 fbc3 	bl	80057da <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_D_IRQ);
 8002054:	2006      	movs	r0, #6
 8002056:	f003 fbdc 	bl	8005812 <HAL_NVIC_EnableIRQ>
                break;
 800205a:	e000      	b.n	800205e <task_button_press+0x25a>
                default:
                break;
 800205c:	bf00      	nop
        xTaskNotifyWait(0, button_pressed_bit, &button_pressed_bit, portMAX_DELAY);
 800205e:	e6dd      	b.n	8001e1c <task_button_press+0x18>
 8002060:	48000400 	.word	0x48000400
 8002064:	200008e4 	.word	0x200008e4
 8002068:	20000904 	.word	0x20000904
 800206c:	20000905 	.word	0x20000905
 8002070:	2000090c 	.word	0x2000090c
 8002074:	20000910 	.word	0x20000910
 8002078:	20000914 	.word	0x20000914
 800207c:	20000918 	.word	0x20000918

08002080 <task_led_ctrl_adjust_parameters>:
extern bool             task_button_press_major_change;


static void task_led_ctrl_adjust_parameters(const task_led_ctrl_loop_iterations_e max_iterations,
                                            const task_led_ctrl_delay_ms_e animation_delay_ms)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	460a      	mov	r2, r1
 800208a:	71fb      	strb	r3, [r7, #7]
 800208c:	4613      	mov	r3, r2
 800208e:	80bb      	strh	r3, [r7, #4]
    g_animation_iterations++;
 8002090:	4b18      	ldr	r3, [pc, #96]	; (80020f4 <task_led_ctrl_adjust_parameters+0x74>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	3301      	adds	r3, #1
 8002096:	b2da      	uxtb	r2, r3
 8002098:	4b16      	ldr	r3, [pc, #88]	; (80020f4 <task_led_ctrl_adjust_parameters+0x74>)
 800209a:	701a      	strb	r2, [r3, #0]
    if (MASTER_LED_STATE_DEMO == g_master_led_state)
 800209c:	4b16      	ldr	r3, [pc, #88]	; (80020f8 <task_led_ctrl_adjust_parameters+0x78>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d11b      	bne.n	80020dc <task_led_ctrl_adjust_parameters+0x5c>
    {
        if (TASK_LED_CTRL_DELAY_MS_0 != animation_delay_ms) task_led_ctrl_delay(animation_delay_ms);
 80020a4:	88bb      	ldrh	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <task_led_ctrl_adjust_parameters+0x32>
 80020aa:	88bb      	ldrh	r3, [r7, #4]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f000 f8eb 	bl	8002288 <task_led_ctrl_delay>
        if (max_iterations == g_animation_iterations)
 80020b2:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <task_led_ctrl_adjust_parameters+0x74>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	79fa      	ldrb	r2, [r7, #7]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d10f      	bne.n	80020dc <task_led_ctrl_adjust_parameters+0x5c>
        {
            g_led_state = (led_state_e) (g_led_state + 1);
 80020bc:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <task_led_ctrl_adjust_parameters+0x7c>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	3301      	adds	r3, #1
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	4b0d      	ldr	r3, [pc, #52]	; (80020fc <task_led_ctrl_adjust_parameters+0x7c>)
 80020c6:	701a      	strb	r2, [r3, #0]
            if (NUM_LED_STATES == g_led_state) g_led_state = LED_STATE_FIRST;
 80020c8:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <task_led_ctrl_adjust_parameters+0x7c>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b0a      	cmp	r3, #10
 80020ce:	d102      	bne.n	80020d6 <task_led_ctrl_adjust_parameters+0x56>
 80020d0:	4b0a      	ldr	r3, [pc, #40]	; (80020fc <task_led_ctrl_adjust_parameters+0x7c>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	701a      	strb	r2, [r3, #0]
            g_animation_iterations = 0;
 80020d6:	4b07      	ldr	r3, [pc, #28]	; (80020f4 <task_led_ctrl_adjust_parameters+0x74>)
 80020d8:	2200      	movs	r2, #0
 80020da:	701a      	strb	r2, [r3, #0]
        }
    }
    if (MASTER_COLOR_STATE_DEMO == task_led_ctrl_color_state()) task_led_ctrl_color_random();
 80020dc:	f000 f944 	bl	8002368 <task_led_ctrl_color_state>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <task_led_ctrl_adjust_parameters+0x6a>
 80020e6:	f000 fa0f 	bl	8002508 <task_led_ctrl_color_random>
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000921 	.word	0x20000921
 80020f8:	2000091c 	.word	0x2000091c
 80020fc:	2000091d 	.word	0x2000091d

08002100 <task_led_ctrl_strip_one>:


void task_led_ctrl_strip_one(void *argument)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af02      	add	r7, sp, #8
 8002106:	6078      	str	r0, [r7, #4]
    osDelay(10);
 8002108:	200a      	movs	r0, #10
 800210a:	f000 fc01 	bl	8002910 <osDelay>
    while (1)
    {
        while(task_button_press_major_state_change()) osDelay(100);
 800210e:	e002      	b.n	8002116 <task_led_ctrl_strip_one+0x16>
 8002110:	2064      	movs	r0, #100	; 0x64
 8002112:	f000 fbfd 	bl	8002910 <osDelay>
 8002116:	f7ff fe69 	bl	8001dec <task_button_press_major_state_change>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1f7      	bne.n	8002110 <task_led_ctrl_strip_one+0x10>

        if (flash_info_animation_enabled(g_led_state))
 8002120:	4b57      	ldr	r3, [pc, #348]	; (8002280 <task_led_ctrl_strip_one+0x180>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f007 fd03 	bl	8009b30 <flash_info_animation_enabled>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 80a3 	beq.w	8002278 <task_led_ctrl_strip_one+0x178>
        {
            switch(g_led_state)
 8002132:	4b53      	ldr	r3, [pc, #332]	; (8002280 <task_led_ctrl_strip_one+0x180>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b09      	cmp	r3, #9
 8002138:	f200 80a0 	bhi.w	800227c <task_led_ctrl_strip_one+0x17c>
 800213c:	a201      	add	r2, pc, #4	; (adr r2, 8002144 <task_led_ctrl_strip_one+0x44>)
 800213e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002142:	bf00      	nop
 8002144:	0800225f 	.word	0x0800225f
 8002148:	0800216d 	.word	0x0800216d
 800214c:	08002183 	.word	0x08002183
 8002150:	080021b9 	.word	0x080021b9
 8002154:	080021d1 	.word	0x080021d1
 8002158:	080021e5 	.word	0x080021e5
 800215c:	080021f7 	.word	0x080021f7
 8002160:	08002211 	.word	0x08002211
 8002164:	08002223 	.word	0x08002223
 8002168:	0800223b 	.word	0x0800223b
            {
                case LED_STATE_WHITE_COLOR:
                    animate_led_solid_custom_color((uint16_t)STRIP_BIT_1, COLOR_HEX_WHITE);
 800216c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8002170:	2001      	movs	r0, #1
 8002172:	f7fe fdd5 	bl	8000d20 <animate_led_solid_custom_color>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_1, TASK_LED_CTRL_DELAY_MS_5000);
 8002176:	f241 3188 	movw	r1, #5000	; 0x1388
 800217a:	2001      	movs	r0, #1
 800217c:	f7ff ff80 	bl	8002080 <task_led_ctrl_adjust_parameters>
                break;
 8002180:	e07d      	b.n	800227e <task_led_ctrl_strip_one+0x17e>
                case LED_STATE_SOLID_COLOR:
                    animate_led_solid_custom_color((uint16_t)STRIP_BIT_1, task_led_ctrl_color_hex());
 8002182:	f000 f939 	bl	80023f8 <task_led_ctrl_color_hex>
 8002186:	4603      	mov	r3, r0
 8002188:	4619      	mov	r1, r3
 800218a:	2001      	movs	r0, #1
 800218c:	f7fe fdc8 	bl	8000d20 <animate_led_solid_custom_color>
                    if (MASTER_LED_STATE_FIXED == g_master_led_state)
 8002190:	4b3c      	ldr	r3, [pc, #240]	; (8002284 <task_led_ctrl_strip_one+0x184>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d109      	bne.n	80021ac <task_led_ctrl_strip_one+0xac>
                    {
                        task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_1000);
 8002198:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800219c:	2005      	movs	r0, #5
 800219e:	f7ff ff6f 	bl	8002080 <task_led_ctrl_adjust_parameters>
                        task_led_ctrl_delay(1000);
 80021a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021a6:	f000 f86f 	bl	8002288 <task_led_ctrl_delay>
                    }
                    else task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_5000);
                break;
 80021aa:	e068      	b.n	800227e <task_led_ctrl_strip_one+0x17e>
                    else task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_5000);
 80021ac:	f241 3188 	movw	r1, #5000	; 0x1388
 80021b0:	2005      	movs	r0, #5
 80021b2:	f7ff ff65 	bl	8002080 <task_led_ctrl_adjust_parameters>
                break;
 80021b6:	e062      	b.n	800227e <task_led_ctrl_strip_one+0x17e>
                case LED_STATE_SPARKLE_NO_FILL:
                    animate_led_turn_all_pixels_off();
 80021b8:	f7fe fdd4 	bl	8000d64 <animate_led_turn_all_pixels_off>
                    animate_led_sparkle_only_random_color(STRIP_BIT_1, false, 100);//random(0, 50));
 80021bc:	2264      	movs	r2, #100	; 0x64
 80021be:	2100      	movs	r1, #0
 80021c0:	2001      	movs	r0, #1
 80021c2:	f7fe ffef 	bl	80011a4 <animate_led_sparkle_only_random_color>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_0);
 80021c6:	2100      	movs	r1, #0
 80021c8:	2005      	movs	r0, #5
 80021ca:	f7ff ff59 	bl	8002080 <task_led_ctrl_adjust_parameters>
                break;
 80021ce:	e056      	b.n	800227e <task_led_ctrl_strip_one+0x17e>
                case LED_STATE_SPARKLE_FILL:
                    animate_led_sparkle_only_random_color(STRIP_BIT_1, true, 100);
 80021d0:	2264      	movs	r2, #100	; 0x64
 80021d2:	2101      	movs	r1, #1
 80021d4:	2001      	movs	r0, #1
 80021d6:	f7fe ffe5 	bl	80011a4 <animate_led_sparkle_only_random_color>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 80021da:	2100      	movs	r1, #0
 80021dc:	200a      	movs	r0, #10
 80021de:	f7ff ff4f 	bl	8002080 <task_led_ctrl_adjust_parameters>
                break;
 80021e2:	e04c      	b.n	800227e <task_led_ctrl_strip_one+0x17e>
                case LED_STATE_RAINBOW_CYCLE:
                    animate_led_rainbow_cycle(STRIP_BIT_1, 10);
 80021e4:	210a      	movs	r1, #10
 80021e6:	2001      	movs	r0, #1
 80021e8:	f7ff f86e 	bl	80012c8 <animate_led_rainbow_cycle>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_0);
 80021ec:	2100      	movs	r1, #0
 80021ee:	2005      	movs	r0, #5
 80021f0:	f7ff ff46 	bl	8002080 <task_led_ctrl_adjust_parameters>
                break;
 80021f4:	e043      	b.n	800227e <task_led_ctrl_strip_one+0x17e>
                case LED_STATE_THEATER_CHASE:
                    animate_led_theater_chase(STRIP_BIT_1, task_led_ctrl_color_hex(), 20);
 80021f6:	f000 f8ff 	bl	80023f8 <task_led_ctrl_color_hex>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2214      	movs	r2, #20
 80021fe:	4619      	mov	r1, r3
 8002200:	2001      	movs	r0, #1
 8002202:	f7ff f945 	bl	8001490 <animate_led_theater_chase>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 8002206:	2100      	movs	r1, #0
 8002208:	200a      	movs	r0, #10
 800220a:	f7ff ff39 	bl	8002080 <task_led_ctrl_adjust_parameters>
                break;
 800220e:	e036      	b.n	800227e <task_led_ctrl_strip_one+0x17e>
                case LED_STATE_THEATER_CHASE_RAINBOW:\
                    animate_led_theater_chase_rainbow(STRIP_BIT_1, 20);
 8002210:	2114      	movs	r1, #20
 8002212:	2001      	movs	r0, #1
 8002214:	f7ff f9de 	bl	80015d4 <animate_led_theater_chase_rainbow>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_2, TASK_LED_CTRL_DELAY_MS_0);
 8002218:	2100      	movs	r1, #0
 800221a:	2002      	movs	r0, #2
 800221c:	f7ff ff30 	bl	8002080 <task_led_ctrl_adjust_parameters>
                break;
 8002220:	e02d      	b.n	800227e <task_led_ctrl_strip_one+0x17e>
                case LED_STATE_FADE_IN_AND_OUT:
                    animate_led_fade_in_fade_out((uint16_t)STRIP_BIT_1, task_led_ctrl_color_hex());
 8002222:	f000 f8e9 	bl	80023f8 <task_led_ctrl_color_hex>
 8002226:	4603      	mov	r3, r0
 8002228:	4619      	mov	r1, r3
 800222a:	2001      	movs	r0, #1
 800222c:	f7fe fe04 	bl	8000e38 <animate_led_fade_in_fade_out>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 8002230:	2100      	movs	r1, #0
 8002232:	200a      	movs	r0, #10
 8002234:	f7ff ff24 	bl	8002080 <task_led_ctrl_adjust_parameters>
                break;
 8002238:	e021      	b.n	800227e <task_led_ctrl_strip_one+0x17e>
                case LED_STATE_TWINKLE:
                    animate_led_turn_all_pixels_off();
 800223a:	f7fe fd93 	bl	8000d64 <animate_led_turn_all_pixels_off>
                    animate_led_twinkle(STRIP_BIT_1, task_led_ctrl_color_hex(), (uint32_t)((float)NUM_LEDS * (float)0.9), 20, false);
 800223e:	f000 f8db 	bl	80023f8 <task_led_ctrl_color_hex>
 8002242:	4601      	mov	r1, r0
 8002244:	2300      	movs	r3, #0
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	2314      	movs	r3, #20
 800224a:	f44f 720f 	mov.w	r2, #572	; 0x23c
 800224e:	2001      	movs	r0, #1
 8002250:	f7fe ff34 	bl	80010bc <animate_led_twinkle>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_5, TASK_LED_CTRL_DELAY_MS_0);
 8002254:	2100      	movs	r1, #0
 8002256:	2005      	movs	r0, #5
 8002258:	f7ff ff12 	bl	8002080 <task_led_ctrl_adjust_parameters>
                break;
 800225c:	e00f      	b.n	800227e <task_led_ctrl_strip_one+0x17e>
                case LED_STATE_SPELL:
                    animate_led_only_spell_word(STRIP_BIT_1, task_led_ctrl_color_hex(), 20);
 800225e:	f000 f8cb 	bl	80023f8 <task_led_ctrl_color_hex>
 8002262:	4603      	mov	r3, r0
 8002264:	2214      	movs	r2, #20
 8002266:	4619      	mov	r1, r3
 8002268:	2001      	movs	r0, #1
 800226a:	f7fe fd85 	bl	8000d78 <animate_led_only_spell_word>
                    task_led_ctrl_adjust_parameters(TASK_LED_CTRL_LOOP_ITERATIONS_10, TASK_LED_CTRL_DELAY_MS_0);
 800226e:	2100      	movs	r1, #0
 8002270:	200a      	movs	r0, #10
 8002272:	f7ff ff05 	bl	8002080 <task_led_ctrl_adjust_parameters>
                break;
 8002276:	e002      	b.n	800227e <task_led_ctrl_strip_one+0x17e>
                default:
                break;
            }
        }
 8002278:	bf00      	nop
 800227a:	e74c      	b.n	8002116 <task_led_ctrl_strip_one+0x16>
                break;
 800227c:	bf00      	nop
        while(task_button_press_major_state_change()) osDelay(100);
 800227e:	e74a      	b.n	8002116 <task_led_ctrl_strip_one+0x16>
 8002280:	2000091d 	.word	0x2000091d
 8002284:	2000091c 	.word	0x2000091c

08002288 <task_led_ctrl_delay>:
    }
}


void task_led_ctrl_delay(const uint32_t time_ms)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
    uint32_t ms_count = 0;
 8002290:	2300      	movs	r3, #0
 8002292:	60fb      	str	r3, [r7, #12]
    while (ms_count++ < time_ms)
 8002294:	e002      	b.n	800229c <task_led_ctrl_delay+0x14>
    {
        osDelay(portTICK_PERIOD_MS);
 8002296:	2001      	movs	r0, #1
 8002298:	f000 fb3a 	bl	8002910 <osDelay>
    while (ms_count++ < time_ms)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	1c5a      	adds	r2, r3, #1
 80022a0:	60fa      	str	r2, [r7, #12]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d8f6      	bhi.n	8002296 <task_led_ctrl_delay+0xe>
    }
}
 80022a8:	bf00      	nop
 80022aa:	bf00      	nop
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <task_led_ctrl_brightness_adjust>:


void task_led_ctrl_brightness_adjust(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
    if (LED_BRIGHTNESS_FIRST == g_led_brightness) g_led_brightness = LED_BRIGHTNESS_LAST;
 80022b8:	4b14      	ldr	r3, [pc, #80]	; (800230c <task_led_ctrl_brightness_adjust+0x58>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d103      	bne.n	80022c8 <task_led_ctrl_brightness_adjust+0x14>
 80022c0:	4b12      	ldr	r3, [pc, #72]	; (800230c <task_led_ctrl_brightness_adjust+0x58>)
 80022c2:	2202      	movs	r2, #2
 80022c4:	701a      	strb	r2, [r3, #0]
 80022c6:	e005      	b.n	80022d4 <task_led_ctrl_brightness_adjust+0x20>
    else g_led_brightness = (led_brightness_e) (g_led_brightness - 1);
 80022c8:	4b10      	ldr	r3, [pc, #64]	; (800230c <task_led_ctrl_brightness_adjust+0x58>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	3b01      	subs	r3, #1
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	4b0e      	ldr	r3, [pc, #56]	; (800230c <task_led_ctrl_brightness_adjust+0x58>)
 80022d2:	701a      	strb	r2, [r3, #0]
    switch (g_led_brightness)
 80022d4:	4b0d      	ldr	r3, [pc, #52]	; (800230c <task_led_ctrl_brightness_adjust+0x58>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d010      	beq.n	80022fe <task_led_ctrl_brightness_adjust+0x4a>
 80022dc:	2b02      	cmp	r3, #2
 80022de:	dc13      	bgt.n	8002308 <task_led_ctrl_brightness_adjust+0x54>
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d002      	beq.n	80022ea <task_led_ctrl_brightness_adjust+0x36>
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d005      	beq.n	80022f4 <task_led_ctrl_brightness_adjust+0x40>
        break;
        case LED_BRIGHTNESS_1_PERCENT:
            current_monitor_set(0.01f);
        break;
    }
}
 80022e8:	e00e      	b.n	8002308 <task_led_ctrl_brightness_adjust+0x54>
            current_monitor_set(1.0f);
 80022ea:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80022ee:	f7fe fbdd 	bl	8000aac <current_monitor_set>
        break;
 80022f2:	e009      	b.n	8002308 <task_led_ctrl_brightness_adjust+0x54>
            current_monitor_set(0.25f);
 80022f4:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 80022f8:	f7fe fbd8 	bl	8000aac <current_monitor_set>
        break;
 80022fc:	e004      	b.n	8002308 <task_led_ctrl_brightness_adjust+0x54>
            current_monitor_set(0.01f);
 80022fe:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8002310 <task_led_ctrl_brightness_adjust+0x5c>
 8002302:	f7fe fbd3 	bl	8000aac <current_monitor_set>
        break;
 8002306:	bf00      	nop
}
 8002308:	bf00      	nop
 800230a:	bd80      	pop	{r7, pc}
 800230c:	2000091f 	.word	0x2000091f
 8002310:	3c23d70a 	.word	0x3c23d70a

08002314 <task_led_ctrl_clear_pause>:


void task_led_ctrl_clear_pause(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
    g_animate_led_pause_flag = false;
 8002318:	4b03      	ldr	r3, [pc, #12]	; (8002328 <task_led_ctrl_clear_pause+0x14>)
 800231a:	2200      	movs	r2, #0
 800231c:	701a      	strb	r2, [r3, #0]
}
 800231e:	bf00      	nop
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	20000906 	.word	0x20000906

0800232c <task_led_ctrl_pause>:


void task_led_ctrl_pause(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
    static uint8_t flip_or_flop = 1;
    if (flip_or_flop) g_animate_led_pause_flag = true;
 8002330:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <task_led_ctrl_pause+0x34>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <task_led_ctrl_pause+0x14>
 8002338:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <task_led_ctrl_pause+0x38>)
 800233a:	2201      	movs	r2, #1
 800233c:	701a      	strb	r2, [r3, #0]
 800233e:	e002      	b.n	8002346 <task_led_ctrl_pause+0x1a>
    else g_animate_led_pause_flag = false;
 8002340:	4b08      	ldr	r3, [pc, #32]	; (8002364 <task_led_ctrl_pause+0x38>)
 8002342:	2200      	movs	r2, #0
 8002344:	701a      	strb	r2, [r3, #0]
    flip_or_flop ^= 1;
 8002346:	4b06      	ldr	r3, [pc, #24]	; (8002360 <task_led_ctrl_pause+0x34>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	f083 0301 	eor.w	r3, r3, #1
 800234e:	b2da      	uxtb	r2, r3
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <task_led_ctrl_pause+0x34>)
 8002352:	701a      	strb	r2, [r3, #0]
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	2000005f 	.word	0x2000005f
 8002364:	20000906 	.word	0x20000906

08002368 <task_led_ctrl_color_state>:


master_color_state_e task_led_ctrl_color_state(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
    return g_master_color_state;
 800236c:	4b03      	ldr	r3, [pc, #12]	; (800237c <task_led_ctrl_color_state+0x14>)
 800236e:	781b      	ldrb	r3, [r3, #0]
}
 8002370:	4618      	mov	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	20000920 	.word	0x20000920

08002380 <task_led_ctrl_color_state_demo>:


void task_led_ctrl_color_state_demo(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
    g_master_color_state = MASTER_COLOR_STATE_DEMO;
 8002384:	4b03      	ldr	r3, [pc, #12]	; (8002394 <task_led_ctrl_color_state_demo+0x14>)
 8002386:	2200      	movs	r2, #0
 8002388:	701a      	strb	r2, [r3, #0]
}
 800238a:	bf00      	nop
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	20000920 	.word	0x20000920

08002398 <task_led_ctrl_color_state_fixed>:


void task_led_ctrl_color_state_fixed(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
    g_master_color_state = MASTER_COLOR_STATE_FIXED;
 800239c:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <task_led_ctrl_color_state_fixed+0x1c>)
 800239e:	2201      	movs	r2, #1
 80023a0:	701a      	strb	r2, [r3, #0]
    g_led_color = COLORS_FIRST;
 80023a2:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <task_led_ctrl_color_state_fixed+0x20>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	701a      	strb	r2, [r3, #0]
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	20000920 	.word	0x20000920
 80023b8:	2000005e 	.word	0x2000005e

080023bc <task_led_ctrl_color_adjust>:
    g_led_color = COLORS_RED;
}


bool task_led_ctrl_color_adjust(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
    bool return_val = false;
 80023c2:	2300      	movs	r3, #0
 80023c4:	71fb      	strb	r3, [r7, #7]
    if (COLORS_LAST == g_led_color)
 80023c6:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <task_led_ctrl_color_adjust+0x38>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b15      	cmp	r3, #21
 80023cc:	d105      	bne.n	80023da <task_led_ctrl_color_adjust+0x1e>
    {
        g_led_color = COLORS_FIRST;
 80023ce:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <task_led_ctrl_color_adjust+0x38>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	701a      	strb	r2, [r3, #0]
        return_val = true;
 80023d4:	2301      	movs	r3, #1
 80023d6:	71fb      	strb	r3, [r7, #7]
 80023d8:	e005      	b.n	80023e6 <task_led_ctrl_color_adjust+0x2a>
    }
    else g_led_color = (all_colors_e) (g_led_color + 1);
 80023da:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <task_led_ctrl_color_adjust+0x38>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	3301      	adds	r3, #1
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	4b04      	ldr	r3, [pc, #16]	; (80023f4 <task_led_ctrl_color_adjust+0x38>)
 80023e4:	701a      	strb	r2, [r3, #0]
    return return_val;
 80023e6:	79fb      	ldrb	r3, [r7, #7]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	2000005e 	.word	0x2000005e

080023f8 <task_led_ctrl_color_hex>:
    return g_led_color;
}


color_hex_code_e task_led_ctrl_color_hex(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
    return g_color_hex_codes[g_led_color];
 80023fc:	4b05      	ldr	r3, [pc, #20]	; (8002414 <task_led_ctrl_color_hex+0x1c>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	461a      	mov	r2, r3
 8002402:	4b05      	ldr	r3, [pc, #20]	; (8002418 <task_led_ctrl_color_hex+0x20>)
 8002404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8002408:	4618      	mov	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	2000005e 	.word	0x2000005e
 8002418:	20000004 	.word	0x20000004

0800241c <task_led_ctrl_color_red_hex>:


uint8_t task_led_ctrl_color_red_hex(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	ed2d 8b02 	vpush	{d8}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
    return (((g_color_hex_codes[g_led_color] & 0xFF0000) >> 16) / current_monitor_ratio());
 8002426:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <task_led_ctrl_color_red_hex+0x48>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	461a      	mov	r2, r3
 800242c:	4b0e      	ldr	r3, [pc, #56]	; (8002468 <task_led_ctrl_color_red_hex+0x4c>)
 800242e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002432:	0c1b      	lsrs	r3, r3, #16
 8002434:	b2db      	uxtb	r3, r3
 8002436:	ee07 3a90 	vmov	s15, r3
 800243a:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800243e:	f7fe fb57 	bl	8000af0 <current_monitor_ratio>
 8002442:	eeb0 7a40 	vmov.f32	s14, s0
 8002446:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800244a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800244e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002452:	793b      	ldrb	r3, [r7, #4]
 8002454:	b2db      	uxtb	r3, r3
}
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	ecbd 8b02 	vpop	{d8}
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	2000005e 	.word	0x2000005e
 8002468:	20000004 	.word	0x20000004

0800246c <task_led_ctrl_color_green_hex>:


uint8_t task_led_ctrl_color_green_hex(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	ed2d 8b02 	vpush	{d8}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
    return (((g_color_hex_codes[g_led_color] & 0x00FF00) >> 8) / current_monitor_ratio());
 8002476:	4b0f      	ldr	r3, [pc, #60]	; (80024b4 <task_led_ctrl_color_green_hex+0x48>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	461a      	mov	r2, r3
 800247c:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <task_led_ctrl_color_green_hex+0x4c>)
 800247e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002482:	0a1b      	lsrs	r3, r3, #8
 8002484:	b2db      	uxtb	r3, r3
 8002486:	ee07 3a90 	vmov	s15, r3
 800248a:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800248e:	f7fe fb2f 	bl	8000af0 <current_monitor_ratio>
 8002492:	eeb0 7a40 	vmov.f32	s14, s0
 8002496:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800249a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800249e:	edc7 7a01 	vstr	s15, [r7, #4]
 80024a2:	793b      	ldrb	r3, [r7, #4]
 80024a4:	b2db      	uxtb	r3, r3
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	ecbd 8b02 	vpop	{d8}
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	2000005e 	.word	0x2000005e
 80024b8:	20000004 	.word	0x20000004

080024bc <task_led_ctrl_color_blue_hex>:


uint8_t task_led_ctrl_color_blue_hex(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	ed2d 8b02 	vpush	{d8}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
    return ((g_color_hex_codes[g_led_color] & 0x0000FF) / current_monitor_ratio());
 80024c6:	4b0e      	ldr	r3, [pc, #56]	; (8002500 <task_led_ctrl_color_blue_hex+0x44>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	461a      	mov	r2, r3
 80024cc:	4b0d      	ldr	r3, [pc, #52]	; (8002504 <task_led_ctrl_color_blue_hex+0x48>)
 80024ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	ee07 3a90 	vmov	s15, r3
 80024d8:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80024dc:	f7fe fb08 	bl	8000af0 <current_monitor_ratio>
 80024e0:	eeb0 7a40 	vmov.f32	s14, s0
 80024e4:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80024e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024ec:	edc7 7a01 	vstr	s15, [r7, #4]
 80024f0:	793b      	ldrb	r3, [r7, #4]
 80024f2:	b2db      	uxtb	r3, r3
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	ecbd 8b02 	vpop	{d8}
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	2000005e 	.word	0x2000005e
 8002504:	20000004 	.word	0x20000004

08002508 <task_led_ctrl_color_random>:
    return g_color_hex_codes[color];
}


void task_led_ctrl_color_random(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
    all_colors_e color = (all_colors_e)(random_num(0, NUM_COLORS));
 800250e:	2116      	movs	r1, #22
 8002510:	2000      	movs	r0, #0
 8002512:	f007 fc87 	bl	8009e24 <random_num>
 8002516:	4603      	mov	r3, r0
 8002518:	71fb      	strb	r3, [r7, #7]
    if (g_led_color == color)
 800251a:	4b0d      	ldr	r3, [pc, #52]	; (8002550 <task_led_ctrl_color_random+0x48>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	79fa      	ldrb	r2, [r7, #7]
 8002520:	429a      	cmp	r2, r3
 8002522:	d10e      	bne.n	8002542 <task_led_ctrl_color_random+0x3a>
    {
        if ((COLORS_LAST) == color) g_led_color = (all_colors_e)(color - 1);
 8002524:	79fb      	ldrb	r3, [r7, #7]
 8002526:	2b15      	cmp	r3, #21
 8002528:	d105      	bne.n	8002536 <task_led_ctrl_color_random+0x2e>
 800252a:	79fb      	ldrb	r3, [r7, #7]
 800252c:	3b01      	subs	r3, #1
 800252e:	b2da      	uxtb	r2, r3
 8002530:	4b07      	ldr	r3, [pc, #28]	; (8002550 <task_led_ctrl_color_random+0x48>)
 8002532:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        g_led_color = color;
    }
}
 8002534:	e008      	b.n	8002548 <task_led_ctrl_color_random+0x40>
        else g_led_color = (all_colors_e)(color + 1);
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	3301      	adds	r3, #1
 800253a:	b2da      	uxtb	r2, r3
 800253c:	4b04      	ldr	r3, [pc, #16]	; (8002550 <task_led_ctrl_color_random+0x48>)
 800253e:	701a      	strb	r2, [r3, #0]
}
 8002540:	e002      	b.n	8002548 <task_led_ctrl_color_random+0x40>
        g_led_color = color;
 8002542:	4a03      	ldr	r2, [pc, #12]	; (8002550 <task_led_ctrl_color_random+0x48>)
 8002544:	79fb      	ldrb	r3, [r7, #7]
 8002546:	7013      	strb	r3, [r2, #0]
}
 8002548:	bf00      	nop
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	2000005e 	.word	0x2000005e

08002554 <task_led_ctrl_speed>:
    g_led_state = LED_STATE_FIRST;
}


float task_led_ctrl_speed(void)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
    float speed_factor = 0.0;
 800255a:	f04f 0300 	mov.w	r3, #0
 800255e:	607b      	str	r3, [r7, #4]
    switch(g_led_speed)
 8002560:	4b17      	ldr	r3, [pc, #92]	; (80025c0 <task_led_ctrl_speed+0x6c>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b04      	cmp	r3, #4
 8002566:	d81f      	bhi.n	80025a8 <task_led_ctrl_speed+0x54>
 8002568:	a201      	add	r2, pc, #4	; (adr r2, 8002570 <task_led_ctrl_speed+0x1c>)
 800256a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800256e:	bf00      	nop
 8002570:	08002585 	.word	0x08002585
 8002574:	0800258b 	.word	0x0800258b
 8002578:	08002591 	.word	0x08002591
 800257c:	08002599 	.word	0x08002599
 8002580:	080025a1 	.word	0x080025a1
    {
        case LED_SPEED_10X:
            speed_factor = 10;
 8002584:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <task_led_ctrl_speed+0x70>)
 8002586:	607b      	str	r3, [r7, #4]
        break;
 8002588:	e00f      	b.n	80025aa <task_led_ctrl_speed+0x56>
        case LED_SPEED_5X:
            speed_factor = 5;
 800258a:	4b0f      	ldr	r3, [pc, #60]	; (80025c8 <task_led_ctrl_speed+0x74>)
 800258c:	607b      	str	r3, [r7, #4]
        break;
 800258e:	e00c      	b.n	80025aa <task_led_ctrl_speed+0x56>
//        case LED_SPEED_2X:
//            speed_factor = 2;
//        break;
        case LED_SPEED_1X:
            speed_factor = 1;
 8002590:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002594:	607b      	str	r3, [r7, #4]
        break;
 8002596:	e008      	b.n	80025aa <task_led_ctrl_speed+0x56>
        case LED_SPEED_0P5X:
            speed_factor = 0.5;
 8002598:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800259c:	607b      	str	r3, [r7, #4]
        break;
 800259e:	e004      	b.n	80025aa <task_led_ctrl_speed+0x56>
        case LED_SPEED_0P25X:
            speed_factor = 0.25;
 80025a0:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 80025a4:	607b      	str	r3, [r7, #4]
        break;
 80025a6:	e000      	b.n	80025aa <task_led_ctrl_speed+0x56>
        default:
        break;
 80025a8:	bf00      	nop
        case LED_SPEED_0P1X:
            speed_factor = 0.1;
        break;
        */
    }
    return speed_factor;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	ee07 3a90 	vmov	s15, r3
}
 80025b0:	eeb0 0a67 	vmov.f32	s0, s15
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	2000091e 	.word	0x2000091e
 80025c4:	41200000 	.word	0x41200000
 80025c8:	40a00000 	.word	0x40a00000

080025cc <task_led_ctrl_speed_adjust>:


void task_led_ctrl_speed_adjust(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
    if (LED_SPEED_FIRST == g_led_speed) g_led_speed = LED_SPEED_LAST;
 80025d0:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <task_led_ctrl_speed_adjust+0x2c>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d103      	bne.n	80025e0 <task_led_ctrl_speed_adjust+0x14>
 80025d8:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <task_led_ctrl_speed_adjust+0x2c>)
 80025da:	2204      	movs	r2, #4
 80025dc:	701a      	strb	r2, [r3, #0]
    else g_led_speed = (led_speed_e) (g_led_speed - 1);
}
 80025de:	e005      	b.n	80025ec <task_led_ctrl_speed_adjust+0x20>
    else g_led_speed = (led_speed_e) (g_led_speed - 1);
 80025e0:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <task_led_ctrl_speed_adjust+0x2c>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	4b03      	ldr	r3, [pc, #12]	; (80025f8 <task_led_ctrl_speed_adjust+0x2c>)
 80025ea:	701a      	strb	r2, [r3, #0]
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	2000091e 	.word	0x2000091e

080025fc <task_led_ctrl_speed_reset>:


void task_led_ctrl_speed_reset(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
    g_led_speed = LED_SPEED_1X;
 8002600:	4b03      	ldr	r3, [pc, #12]	; (8002610 <task_led_ctrl_speed_reset+0x14>)
 8002602:	2202      	movs	r2, #2
 8002604:	701a      	strb	r2, [r3, #0]
}
 8002606:	bf00      	nop
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	2000091e 	.word	0x2000091e

08002614 <task_led_ctrl_animate_iteration_reset>:
    return ((float)g_delay_in_animation_ms / task_led_ctrl_speed());
}


void task_led_ctrl_animate_iteration_reset(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
    g_animation_iterations = 0;
 8002618:	4b03      	ldr	r3, [pc, #12]	; (8002628 <task_led_ctrl_animate_iteration_reset+0x14>)
 800261a:	2200      	movs	r2, #0
 800261c:	701a      	strb	r2, [r3, #0]
}
 800261e:	bf00      	nop
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	20000921 	.word	0x20000921

0800262c <task_led_ctrl_animate_adjust_state>:


bool task_led_ctrl_animate_adjust_state(void)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
    bool return_val = false;
 8002632:	2300      	movs	r3, #0
 8002634:	71fb      	strb	r3, [r7, #7]
    if (LED_STATE_LAST == g_led_state)
 8002636:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <task_led_ctrl_animate_adjust_state+0x38>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b09      	cmp	r3, #9
 800263c:	d105      	bne.n	800264a <task_led_ctrl_animate_adjust_state+0x1e>
    {
        g_led_state = LED_STATE_FIRST;
 800263e:	4b09      	ldr	r3, [pc, #36]	; (8002664 <task_led_ctrl_animate_adjust_state+0x38>)
 8002640:	2200      	movs	r2, #0
 8002642:	701a      	strb	r2, [r3, #0]
        return_val = true;
 8002644:	2301      	movs	r3, #1
 8002646:	71fb      	strb	r3, [r7, #7]
 8002648:	e005      	b.n	8002656 <task_led_ctrl_animate_adjust_state+0x2a>
    }
    else g_led_state = (led_state_e) (g_led_state + 1);
 800264a:	4b06      	ldr	r3, [pc, #24]	; (8002664 <task_led_ctrl_animate_adjust_state+0x38>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	3301      	adds	r3, #1
 8002650:	b2da      	uxtb	r2, r3
 8002652:	4b04      	ldr	r3, [pc, #16]	; (8002664 <task_led_ctrl_animate_adjust_state+0x38>)
 8002654:	701a      	strb	r2, [r3, #0]
    return return_val;
 8002656:	79fb      	ldrb	r3, [r7, #7]
}
 8002658:	4618      	mov	r0, r3
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	2000091d 	.word	0x2000091d

08002668 <task_led_ctrl_animate_state_demo>:


void task_led_ctrl_animate_state_demo(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
    g_master_led_state = MASTER_LED_STATE_DEMO;
 800266c:	4b05      	ldr	r3, [pc, #20]	; (8002684 <task_led_ctrl_animate_state_demo+0x1c>)
 800266e:	2200      	movs	r2, #0
 8002670:	701a      	strb	r2, [r3, #0]
    g_animation_iterations = 0;
 8002672:	4b05      	ldr	r3, [pc, #20]	; (8002688 <task_led_ctrl_animate_state_demo+0x20>)
 8002674:	2200      	movs	r2, #0
 8002676:	701a      	strb	r2, [r3, #0]
}
 8002678:	bf00      	nop
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	2000091c 	.word	0x2000091c
 8002688:	20000921 	.word	0x20000921

0800268c <task_led_ctrl_animate_state_fixed>:


void task_led_ctrl_animate_state_fixed(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
    g_master_led_state = MASTER_LED_STATE_FIXED;
 8002690:	4b06      	ldr	r3, [pc, #24]	; (80026ac <task_led_ctrl_animate_state_fixed+0x20>)
 8002692:	2201      	movs	r2, #1
 8002694:	701a      	strb	r2, [r3, #0]
    g_led_state = LED_STATE_FIRST; // set first state
 8002696:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <task_led_ctrl_animate_state_fixed+0x24>)
 8002698:	2200      	movs	r2, #0
 800269a:	701a      	strb	r2, [r3, #0]
    g_animation_iterations = 0;
 800269c:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <task_led_ctrl_animate_state_fixed+0x28>)
 800269e:	2200      	movs	r2, #0
 80026a0:	701a      	strb	r2, [r3, #0]
}
 80026a2:	bf00      	nop
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	2000091c 	.word	0x2000091c
 80026b0:	2000091d 	.word	0x2000091d
 80026b4:	20000921 	.word	0x20000921

080026b8 <task_led_ctrl_animate_state>:


master_led_state_e task_led_ctrl_animate_state(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
    return g_master_led_state;
 80026bc:	4b03      	ldr	r3, [pc, #12]	; (80026cc <task_led_ctrl_animate_state+0x14>)
 80026be:	781b      	ldrb	r3, [r3, #0]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	2000091c 	.word	0x2000091c

080026d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	6039      	str	r1, [r7, #0]
 80026da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	db0a      	blt.n	80026fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	490c      	ldr	r1, [pc, #48]	; (800271c <__NVIC_SetPriority+0x4c>)
 80026ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ee:	0112      	lsls	r2, r2, #4
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	440b      	add	r3, r1
 80026f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026f8:	e00a      	b.n	8002710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	4908      	ldr	r1, [pc, #32]	; (8002720 <__NVIC_SetPriority+0x50>)
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	3b04      	subs	r3, #4
 8002708:	0112      	lsls	r2, r2, #4
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	440b      	add	r3, r1
 800270e:	761a      	strb	r2, [r3, #24]
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	e000e100 	.word	0xe000e100
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002728:	4b05      	ldr	r3, [pc, #20]	; (8002740 <SysTick_Handler+0x1c>)
 800272a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800272c:	f001 fd10 	bl	8004150 <xTaskGetSchedulerState>
 8002730:	4603      	mov	r3, r0
 8002732:	2b01      	cmp	r3, #1
 8002734:	d001      	beq.n	800273a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002736:	f002 fc2f 	bl	8004f98 <xPortSysTickHandler>
  }
}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	e000e010 	.word	0xe000e010

08002744 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002748:	2100      	movs	r1, #0
 800274a:	f06f 0004 	mvn.w	r0, #4
 800274e:	f7ff ffbf 	bl	80026d0 <__NVIC_SetPriority>
#endif
}
 8002752:	bf00      	nop
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800275e:	f3ef 8305 	mrs	r3, IPSR
 8002762:	603b      	str	r3, [r7, #0]
  return(result);
 8002764:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800276a:	f06f 0305 	mvn.w	r3, #5
 800276e:	607b      	str	r3, [r7, #4]
 8002770:	e00c      	b.n	800278c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002772:	4b0a      	ldr	r3, [pc, #40]	; (800279c <osKernelInitialize+0x44>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d105      	bne.n	8002786 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800277a:	4b08      	ldr	r3, [pc, #32]	; (800279c <osKernelInitialize+0x44>)
 800277c:	2201      	movs	r2, #1
 800277e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002780:	2300      	movs	r3, #0
 8002782:	607b      	str	r3, [r7, #4]
 8002784:	e002      	b.n	800278c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002786:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800278a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800278c:	687b      	ldr	r3, [r7, #4]
}
 800278e:	4618      	mov	r0, r3
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	20000924 	.word	0x20000924

080027a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027a6:	f3ef 8305 	mrs	r3, IPSR
 80027aa:	603b      	str	r3, [r7, #0]
  return(result);
 80027ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <osKernelStart+0x1a>
    stat = osErrorISR;
 80027b2:	f06f 0305 	mvn.w	r3, #5
 80027b6:	607b      	str	r3, [r7, #4]
 80027b8:	e010      	b.n	80027dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80027ba:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <osKernelStart+0x48>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d109      	bne.n	80027d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80027c2:	f7ff ffbf 	bl	8002744 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80027c6:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <osKernelStart+0x48>)
 80027c8:	2202      	movs	r2, #2
 80027ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80027cc:	f001 f866 	bl	800389c <vTaskStartScheduler>
      stat = osOK;
 80027d0:	2300      	movs	r3, #0
 80027d2:	607b      	str	r3, [r7, #4]
 80027d4:	e002      	b.n	80027dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80027d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80027dc:	687b      	ldr	r3, [r7, #4]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20000924 	.word	0x20000924

080027ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08e      	sub	sp, #56	; 0x38
 80027f0:	af04      	add	r7, sp, #16
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027fc:	f3ef 8305 	mrs	r3, IPSR
 8002800:	617b      	str	r3, [r7, #20]
  return(result);
 8002802:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002804:	2b00      	cmp	r3, #0
 8002806:	d17e      	bne.n	8002906 <osThreadNew+0x11a>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d07b      	beq.n	8002906 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800280e:	2380      	movs	r3, #128	; 0x80
 8002810:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002812:	2318      	movs	r3, #24
 8002814:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002816:	2300      	movs	r3, #0
 8002818:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800281a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800281e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d045      	beq.n	80028b2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d002      	beq.n	8002834 <osThreadNew+0x48>
        name = attr->name;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d002      	beq.n	8002842 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d008      	beq.n	800285a <osThreadNew+0x6e>
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	2b38      	cmp	r3, #56	; 0x38
 800284c:	d805      	bhi.n	800285a <osThreadNew+0x6e>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <osThreadNew+0x72>
        return (NULL);
 800285a:	2300      	movs	r3, #0
 800285c:	e054      	b.n	8002908 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d003      	beq.n	800286e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	089b      	lsrs	r3, r3, #2
 800286c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00e      	beq.n	8002894 <osThreadNew+0xa8>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	2b5b      	cmp	r3, #91	; 0x5b
 800287c:	d90a      	bls.n	8002894 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002882:	2b00      	cmp	r3, #0
 8002884:	d006      	beq.n	8002894 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d002      	beq.n	8002894 <osThreadNew+0xa8>
        mem = 1;
 800288e:	2301      	movs	r3, #1
 8002890:	61bb      	str	r3, [r7, #24]
 8002892:	e010      	b.n	80028b6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10c      	bne.n	80028b6 <osThreadNew+0xca>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d108      	bne.n	80028b6 <osThreadNew+0xca>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d104      	bne.n	80028b6 <osThreadNew+0xca>
          mem = 0;
 80028ac:	2300      	movs	r3, #0
 80028ae:	61bb      	str	r3, [r7, #24]
 80028b0:	e001      	b.n	80028b6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80028b2:	2300      	movs	r3, #0
 80028b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d110      	bne.n	80028de <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80028c4:	9202      	str	r2, [sp, #8]
 80028c6:	9301      	str	r3, [sp, #4]
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	6a3a      	ldr	r2, [r7, #32]
 80028d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f000 fe0c 	bl	80034f0 <xTaskCreateStatic>
 80028d8:	4603      	mov	r3, r0
 80028da:	613b      	str	r3, [r7, #16]
 80028dc:	e013      	b.n	8002906 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d110      	bne.n	8002906 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80028e4:	6a3b      	ldr	r3, [r7, #32]
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	f107 0310 	add.w	r3, r7, #16
 80028ec:	9301      	str	r3, [sp, #4]
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 fe57 	bl	80035aa <xTaskCreate>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d001      	beq.n	8002906 <osThreadNew+0x11a>
            hTask = NULL;
 8002902:	2300      	movs	r3, #0
 8002904:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002906:	693b      	ldr	r3, [r7, #16]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3728      	adds	r7, #40	; 0x28
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002918:	f3ef 8305 	mrs	r3, IPSR
 800291c:	60bb      	str	r3, [r7, #8]
  return(result);
 800291e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <osDelay+0x1c>
    stat = osErrorISR;
 8002924:	f06f 0305 	mvn.w	r3, #5
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	e007      	b.n	800293c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800292c:	2300      	movs	r3, #0
 800292e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d002      	beq.n	800293c <osDelay+0x2c>
      vTaskDelay(ticks);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 ff7c 	bl	8003834 <vTaskDelay>
    }
  }

  return (stat);
 800293c:	68fb      	ldr	r3, [r7, #12]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4a07      	ldr	r2, [pc, #28]	; (8002974 <vApplicationGetIdleTaskMemory+0x2c>)
 8002958:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	4a06      	ldr	r2, [pc, #24]	; (8002978 <vApplicationGetIdleTaskMemory+0x30>)
 800295e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2280      	movs	r2, #128	; 0x80
 8002964:	601a      	str	r2, [r3, #0]
}
 8002966:	bf00      	nop
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	20000928 	.word	0x20000928
 8002978:	20000984 	.word	0x20000984

0800297c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4a07      	ldr	r2, [pc, #28]	; (80029a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800298c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	4a06      	ldr	r2, [pc, #24]	; (80029ac <vApplicationGetTimerTaskMemory+0x30>)
 8002992:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f44f 7280 	mov.w	r2, #256	; 0x100
 800299a:	601a      	str	r2, [r3, #0]
}
 800299c:	bf00      	nop
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	20000b84 	.word	0x20000b84
 80029ac:	20000be0 	.word	0x20000be0

080029b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f103 0208 	add.w	r2, r3, #8
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f103 0208 	add.w	r2, r3, #8
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f103 0208 	add.w	r2, r3, #8
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b085      	sub	sp, #20
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
 8002a12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	601a      	str	r2, [r3, #0]
}
 8002a46:	bf00      	nop
 8002a48:	3714      	adds	r7, #20
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a52:	b480      	push	{r7}
 8002a54:	b085      	sub	sp, #20
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
 8002a5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a68:	d103      	bne.n	8002a72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	e00c      	b.n	8002a8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	3308      	adds	r3, #8
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	e002      	b.n	8002a80 <vListInsert+0x2e>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d2f6      	bcs.n	8002a7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	1c5a      	adds	r2, r3, #1
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	601a      	str	r2, [r3, #0]
}
 8002ab8:	bf00      	nop
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6892      	ldr	r2, [r2, #8]
 8002ada:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	6852      	ldr	r2, [r2, #4]
 8002ae4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d103      	bne.n	8002af8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	1e5a      	subs	r2, r3, #1
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10a      	bne.n	8002b42 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b30:	f383 8811 	msr	BASEPRI, r3
 8002b34:	f3bf 8f6f 	isb	sy
 8002b38:	f3bf 8f4f 	dsb	sy
 8002b3c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002b3e:	bf00      	nop
 8002b40:	e7fe      	b.n	8002b40 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002b42:	f002 f997 	bl	8004e74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4e:	68f9      	ldr	r1, [r7, #12]
 8002b50:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b52:	fb01 f303 	mul.w	r3, r1, r3
 8002b56:	441a      	add	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b72:	3b01      	subs	r3, #1
 8002b74:	68f9      	ldr	r1, [r7, #12]
 8002b76:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b78:	fb01 f303 	mul.w	r3, r1, r3
 8002b7c:	441a      	add	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	22ff      	movs	r2, #255	; 0xff
 8002b86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	22ff      	movs	r2, #255	; 0xff
 8002b8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d114      	bne.n	8002bc2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d01a      	beq.n	8002bd6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	3310      	adds	r3, #16
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f001 f915 	bl	8003dd4 <xTaskRemoveFromEventList>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d012      	beq.n	8002bd6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002bb0:	4b0c      	ldr	r3, [pc, #48]	; (8002be4 <xQueueGenericReset+0xcc>)
 8002bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	f3bf 8f4f 	dsb	sy
 8002bbc:	f3bf 8f6f 	isb	sy
 8002bc0:	e009      	b.n	8002bd6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	3310      	adds	r3, #16
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff fef2 	bl	80029b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	3324      	adds	r3, #36	; 0x24
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff feed 	bl	80029b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002bd6:	f002 f97d 	bl	8004ed4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002bda:	2301      	movs	r3, #1
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	e000ed04 	.word	0xe000ed04

08002be8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b08e      	sub	sp, #56	; 0x38
 8002bec:	af02      	add	r7, sp, #8
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
 8002bf4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10a      	bne.n	8002c12 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c00:	f383 8811 	msr	BASEPRI, r3
 8002c04:	f3bf 8f6f 	isb	sy
 8002c08:	f3bf 8f4f 	dsb	sy
 8002c0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c0e:	bf00      	nop
 8002c10:	e7fe      	b.n	8002c10 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d10a      	bne.n	8002c2e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c1c:	f383 8811 	msr	BASEPRI, r3
 8002c20:	f3bf 8f6f 	isb	sy
 8002c24:	f3bf 8f4f 	dsb	sy
 8002c28:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c2a:	bf00      	nop
 8002c2c:	e7fe      	b.n	8002c2c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d002      	beq.n	8002c3a <xQueueGenericCreateStatic+0x52>
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <xQueueGenericCreateStatic+0x56>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <xQueueGenericCreateStatic+0x58>
 8002c3e:	2300      	movs	r3, #0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10a      	bne.n	8002c5a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c48:	f383 8811 	msr	BASEPRI, r3
 8002c4c:	f3bf 8f6f 	isb	sy
 8002c50:	f3bf 8f4f 	dsb	sy
 8002c54:	623b      	str	r3, [r7, #32]
}
 8002c56:	bf00      	nop
 8002c58:	e7fe      	b.n	8002c58 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d102      	bne.n	8002c66 <xQueueGenericCreateStatic+0x7e>
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <xQueueGenericCreateStatic+0x82>
 8002c66:	2301      	movs	r3, #1
 8002c68:	e000      	b.n	8002c6c <xQueueGenericCreateStatic+0x84>
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d10a      	bne.n	8002c86 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c74:	f383 8811 	msr	BASEPRI, r3
 8002c78:	f3bf 8f6f 	isb	sy
 8002c7c:	f3bf 8f4f 	dsb	sy
 8002c80:	61fb      	str	r3, [r7, #28]
}
 8002c82:	bf00      	nop
 8002c84:	e7fe      	b.n	8002c84 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002c86:	2350      	movs	r3, #80	; 0x50
 8002c88:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	2b50      	cmp	r3, #80	; 0x50
 8002c8e:	d00a      	beq.n	8002ca6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c94:	f383 8811 	msr	BASEPRI, r3
 8002c98:	f3bf 8f6f 	isb	sy
 8002c9c:	f3bf 8f4f 	dsb	sy
 8002ca0:	61bb      	str	r3, [r7, #24]
}
 8002ca2:	bf00      	nop
 8002ca4:	e7fe      	b.n	8002ca4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002ca6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00d      	beq.n	8002cce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002cba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	68b9      	ldr	r1, [r7, #8]
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 f805 	bl	8002cd8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3730      	adds	r7, #48	; 0x30
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
 8002ce4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d103      	bne.n	8002cf4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	e002      	b.n	8002cfa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002d06:	2101      	movs	r1, #1
 8002d08:	69b8      	ldr	r0, [r7, #24]
 8002d0a:	f7ff ff05 	bl	8002b18 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	78fa      	ldrb	r2, [r7, #3]
 8002d12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002d16:	bf00      	nop
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
	...

08002d20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08e      	sub	sp, #56	; 0x38
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
 8002d2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10a      	bne.n	8002d52 <xQueueGenericSend+0x32>
	__asm volatile
 8002d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d40:	f383 8811 	msr	BASEPRI, r3
 8002d44:	f3bf 8f6f 	isb	sy
 8002d48:	f3bf 8f4f 	dsb	sy
 8002d4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d4e:	bf00      	nop
 8002d50:	e7fe      	b.n	8002d50 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d103      	bne.n	8002d60 <xQueueGenericSend+0x40>
 8002d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <xQueueGenericSend+0x44>
 8002d60:	2301      	movs	r3, #1
 8002d62:	e000      	b.n	8002d66 <xQueueGenericSend+0x46>
 8002d64:	2300      	movs	r3, #0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10a      	bne.n	8002d80 <xQueueGenericSend+0x60>
	__asm volatile
 8002d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6e:	f383 8811 	msr	BASEPRI, r3
 8002d72:	f3bf 8f6f 	isb	sy
 8002d76:	f3bf 8f4f 	dsb	sy
 8002d7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d7c:	bf00      	nop
 8002d7e:	e7fe      	b.n	8002d7e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d103      	bne.n	8002d8e <xQueueGenericSend+0x6e>
 8002d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d101      	bne.n	8002d92 <xQueueGenericSend+0x72>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <xQueueGenericSend+0x74>
 8002d92:	2300      	movs	r3, #0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10a      	bne.n	8002dae <xQueueGenericSend+0x8e>
	__asm volatile
 8002d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9c:	f383 8811 	msr	BASEPRI, r3
 8002da0:	f3bf 8f6f 	isb	sy
 8002da4:	f3bf 8f4f 	dsb	sy
 8002da8:	623b      	str	r3, [r7, #32]
}
 8002daa:	bf00      	nop
 8002dac:	e7fe      	b.n	8002dac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002dae:	f001 f9cf 	bl	8004150 <xTaskGetSchedulerState>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d102      	bne.n	8002dbe <xQueueGenericSend+0x9e>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <xQueueGenericSend+0xa2>
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <xQueueGenericSend+0xa4>
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10a      	bne.n	8002dde <xQueueGenericSend+0xbe>
	__asm volatile
 8002dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dcc:	f383 8811 	msr	BASEPRI, r3
 8002dd0:	f3bf 8f6f 	isb	sy
 8002dd4:	f3bf 8f4f 	dsb	sy
 8002dd8:	61fb      	str	r3, [r7, #28]
}
 8002dda:	bf00      	nop
 8002ddc:	e7fe      	b.n	8002ddc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002dde:	f002 f849 	bl	8004e74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d302      	bcc.n	8002df4 <xQueueGenericSend+0xd4>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d129      	bne.n	8002e48 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	68b9      	ldr	r1, [r7, #8]
 8002df8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dfa:	f000 fa0b 	bl	8003214 <prvCopyDataToQueue>
 8002dfe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d010      	beq.n	8002e2a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0a:	3324      	adds	r3, #36	; 0x24
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f000 ffe1 	bl	8003dd4 <xTaskRemoveFromEventList>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d013      	beq.n	8002e40 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e18:	4b3f      	ldr	r3, [pc, #252]	; (8002f18 <xQueueGenericSend+0x1f8>)
 8002e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	f3bf 8f4f 	dsb	sy
 8002e24:	f3bf 8f6f 	isb	sy
 8002e28:	e00a      	b.n	8002e40 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d007      	beq.n	8002e40 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e30:	4b39      	ldr	r3, [pc, #228]	; (8002f18 <xQueueGenericSend+0x1f8>)
 8002e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	f3bf 8f4f 	dsb	sy
 8002e3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e40:	f002 f848 	bl	8004ed4 <vPortExitCritical>
				return pdPASS;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e063      	b.n	8002f10 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d103      	bne.n	8002e56 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e4e:	f002 f841 	bl	8004ed4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	e05c      	b.n	8002f10 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d106      	bne.n	8002e6a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e5c:	f107 0314 	add.w	r3, r7, #20
 8002e60:	4618      	mov	r0, r3
 8002e62:	f001 f81b 	bl	8003e9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e66:	2301      	movs	r3, #1
 8002e68:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e6a:	f002 f833 	bl	8004ed4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e6e:	f000 fd7b 	bl	8003968 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e72:	f001 ffff 	bl	8004e74 <vPortEnterCritical>
 8002e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e7c:	b25b      	sxtb	r3, r3
 8002e7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e82:	d103      	bne.n	8002e8c <xQueueGenericSend+0x16c>
 8002e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e92:	b25b      	sxtb	r3, r3
 8002e94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e98:	d103      	bne.n	8002ea2 <xQueueGenericSend+0x182>
 8002e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ea2:	f002 f817 	bl	8004ed4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ea6:	1d3a      	adds	r2, r7, #4
 8002ea8:	f107 0314 	add.w	r3, r7, #20
 8002eac:	4611      	mov	r1, r2
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f001 f80a 	bl	8003ec8 <xTaskCheckForTimeOut>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d124      	bne.n	8002f04 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002eba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ebc:	f000 faa2 	bl	8003404 <prvIsQueueFull>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d018      	beq.n	8002ef8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec8:	3310      	adds	r3, #16
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	4611      	mov	r1, r2
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 ff30 	bl	8003d34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ed4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ed6:	f000 fa2d 	bl	8003334 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002eda:	f000 fd53 	bl	8003984 <xTaskResumeAll>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f47f af7c 	bne.w	8002dde <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002ee6:	4b0c      	ldr	r3, [pc, #48]	; (8002f18 <xQueueGenericSend+0x1f8>)
 8002ee8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	f3bf 8f4f 	dsb	sy
 8002ef2:	f3bf 8f6f 	isb	sy
 8002ef6:	e772      	b.n	8002dde <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ef8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002efa:	f000 fa1b 	bl	8003334 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002efe:	f000 fd41 	bl	8003984 <xTaskResumeAll>
 8002f02:	e76c      	b.n	8002dde <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002f04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f06:	f000 fa15 	bl	8003334 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f0a:	f000 fd3b 	bl	8003984 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f0e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3738      	adds	r7, #56	; 0x38
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	e000ed04 	.word	0xe000ed04

08002f1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b090      	sub	sp, #64	; 0x40
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
 8002f28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10a      	bne.n	8002f4a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f38:	f383 8811 	msr	BASEPRI, r3
 8002f3c:	f3bf 8f6f 	isb	sy
 8002f40:	f3bf 8f4f 	dsb	sy
 8002f44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002f46:	bf00      	nop
 8002f48:	e7fe      	b.n	8002f48 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d103      	bne.n	8002f58 <xQueueGenericSendFromISR+0x3c>
 8002f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <xQueueGenericSendFromISR+0x40>
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e000      	b.n	8002f5e <xQueueGenericSendFromISR+0x42>
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10a      	bne.n	8002f78 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f66:	f383 8811 	msr	BASEPRI, r3
 8002f6a:	f3bf 8f6f 	isb	sy
 8002f6e:	f3bf 8f4f 	dsb	sy
 8002f72:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f74:	bf00      	nop
 8002f76:	e7fe      	b.n	8002f76 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d103      	bne.n	8002f86 <xQueueGenericSendFromISR+0x6a>
 8002f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d101      	bne.n	8002f8a <xQueueGenericSendFromISR+0x6e>
 8002f86:	2301      	movs	r3, #1
 8002f88:	e000      	b.n	8002f8c <xQueueGenericSendFromISR+0x70>
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10a      	bne.n	8002fa6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f94:	f383 8811 	msr	BASEPRI, r3
 8002f98:	f3bf 8f6f 	isb	sy
 8002f9c:	f3bf 8f4f 	dsb	sy
 8002fa0:	623b      	str	r3, [r7, #32]
}
 8002fa2:	bf00      	nop
 8002fa4:	e7fe      	b.n	8002fa4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002fa6:	f002 f847 	bl	8005038 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002faa:	f3ef 8211 	mrs	r2, BASEPRI
 8002fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb2:	f383 8811 	msr	BASEPRI, r3
 8002fb6:	f3bf 8f6f 	isb	sy
 8002fba:	f3bf 8f4f 	dsb	sy
 8002fbe:	61fa      	str	r2, [r7, #28]
 8002fc0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002fc2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002fc4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d302      	bcc.n	8002fd8 <xQueueGenericSendFromISR+0xbc>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d12f      	bne.n	8003038 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	68b9      	ldr	r1, [r7, #8]
 8002fec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002fee:	f000 f911 	bl	8003214 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002ff2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002ff6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ffa:	d112      	bne.n	8003022 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	2b00      	cmp	r3, #0
 8003002:	d016      	beq.n	8003032 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003006:	3324      	adds	r3, #36	; 0x24
 8003008:	4618      	mov	r0, r3
 800300a:	f000 fee3 	bl	8003dd4 <xTaskRemoveFromEventList>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00e      	beq.n	8003032 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00b      	beq.n	8003032 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	e007      	b.n	8003032 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003022:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003026:	3301      	adds	r3, #1
 8003028:	b2db      	uxtb	r3, r3
 800302a:	b25a      	sxtb	r2, r3
 800302c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800302e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003032:	2301      	movs	r3, #1
 8003034:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003036:	e001      	b.n	800303c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003038:	2300      	movs	r3, #0
 800303a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800303c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800303e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003046:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800304a:	4618      	mov	r0, r3
 800304c:	3740      	adds	r7, #64	; 0x40
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
	...

08003054 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b08c      	sub	sp, #48	; 0x30
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003060:	2300      	movs	r3, #0
 8003062:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10a      	bne.n	8003084 <xQueueReceive+0x30>
	__asm volatile
 800306e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003072:	f383 8811 	msr	BASEPRI, r3
 8003076:	f3bf 8f6f 	isb	sy
 800307a:	f3bf 8f4f 	dsb	sy
 800307e:	623b      	str	r3, [r7, #32]
}
 8003080:	bf00      	nop
 8003082:	e7fe      	b.n	8003082 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d103      	bne.n	8003092 <xQueueReceive+0x3e>
 800308a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <xQueueReceive+0x42>
 8003092:	2301      	movs	r3, #1
 8003094:	e000      	b.n	8003098 <xQueueReceive+0x44>
 8003096:	2300      	movs	r3, #0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10a      	bne.n	80030b2 <xQueueReceive+0x5e>
	__asm volatile
 800309c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a0:	f383 8811 	msr	BASEPRI, r3
 80030a4:	f3bf 8f6f 	isb	sy
 80030a8:	f3bf 8f4f 	dsb	sy
 80030ac:	61fb      	str	r3, [r7, #28]
}
 80030ae:	bf00      	nop
 80030b0:	e7fe      	b.n	80030b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030b2:	f001 f84d 	bl	8004150 <xTaskGetSchedulerState>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d102      	bne.n	80030c2 <xQueueReceive+0x6e>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <xQueueReceive+0x72>
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <xQueueReceive+0x74>
 80030c6:	2300      	movs	r3, #0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10a      	bne.n	80030e2 <xQueueReceive+0x8e>
	__asm volatile
 80030cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d0:	f383 8811 	msr	BASEPRI, r3
 80030d4:	f3bf 8f6f 	isb	sy
 80030d8:	f3bf 8f4f 	dsb	sy
 80030dc:	61bb      	str	r3, [r7, #24]
}
 80030de:	bf00      	nop
 80030e0:	e7fe      	b.n	80030e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030e2:	f001 fec7 	bl	8004e74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d01f      	beq.n	8003132 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80030f2:	68b9      	ldr	r1, [r7, #8]
 80030f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030f6:	f000 f8f7 	bl	80032e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	1e5a      	subs	r2, r3, #1
 80030fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003100:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00f      	beq.n	800312a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800310a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800310c:	3310      	adds	r3, #16
 800310e:	4618      	mov	r0, r3
 8003110:	f000 fe60 	bl	8003dd4 <xTaskRemoveFromEventList>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d007      	beq.n	800312a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800311a:	4b3d      	ldr	r3, [pc, #244]	; (8003210 <xQueueReceive+0x1bc>)
 800311c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	f3bf 8f4f 	dsb	sy
 8003126:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800312a:	f001 fed3 	bl	8004ed4 <vPortExitCritical>
				return pdPASS;
 800312e:	2301      	movs	r3, #1
 8003130:	e069      	b.n	8003206 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d103      	bne.n	8003140 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003138:	f001 fecc 	bl	8004ed4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800313c:	2300      	movs	r3, #0
 800313e:	e062      	b.n	8003206 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003142:	2b00      	cmp	r3, #0
 8003144:	d106      	bne.n	8003154 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003146:	f107 0310 	add.w	r3, r7, #16
 800314a:	4618      	mov	r0, r3
 800314c:	f000 fea6 	bl	8003e9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003150:	2301      	movs	r3, #1
 8003152:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003154:	f001 febe 	bl	8004ed4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003158:	f000 fc06 	bl	8003968 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800315c:	f001 fe8a 	bl	8004e74 <vPortEnterCritical>
 8003160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003162:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003166:	b25b      	sxtb	r3, r3
 8003168:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800316c:	d103      	bne.n	8003176 <xQueueReceive+0x122>
 800316e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003178:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800317c:	b25b      	sxtb	r3, r3
 800317e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003182:	d103      	bne.n	800318c <xQueueReceive+0x138>
 8003184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800318c:	f001 fea2 	bl	8004ed4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003190:	1d3a      	adds	r2, r7, #4
 8003192:	f107 0310 	add.w	r3, r7, #16
 8003196:	4611      	mov	r1, r2
 8003198:	4618      	mov	r0, r3
 800319a:	f000 fe95 	bl	8003ec8 <xTaskCheckForTimeOut>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d123      	bne.n	80031ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031a6:	f000 f917 	bl	80033d8 <prvIsQueueEmpty>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d017      	beq.n	80031e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80031b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b2:	3324      	adds	r3, #36	; 0x24
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	4611      	mov	r1, r2
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 fdbb 	bl	8003d34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80031be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031c0:	f000 f8b8 	bl	8003334 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80031c4:	f000 fbde 	bl	8003984 <xTaskResumeAll>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d189      	bne.n	80030e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80031ce:	4b10      	ldr	r3, [pc, #64]	; (8003210 <xQueueReceive+0x1bc>)
 80031d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	f3bf 8f4f 	dsb	sy
 80031da:	f3bf 8f6f 	isb	sy
 80031de:	e780      	b.n	80030e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80031e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031e2:	f000 f8a7 	bl	8003334 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031e6:	f000 fbcd 	bl	8003984 <xTaskResumeAll>
 80031ea:	e77a      	b.n	80030e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80031ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031ee:	f000 f8a1 	bl	8003334 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031f2:	f000 fbc7 	bl	8003984 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031f8:	f000 f8ee 	bl	80033d8 <prvIsQueueEmpty>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f43f af6f 	beq.w	80030e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003204:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003206:	4618      	mov	r0, r3
 8003208:	3730      	adds	r7, #48	; 0x30
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	e000ed04 	.word	0xe000ed04

08003214 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003220:	2300      	movs	r3, #0
 8003222:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003228:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10d      	bne.n	800324e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d14d      	bne.n	80032d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	4618      	mov	r0, r3
 8003240:	f000 ffa4 	bl	800418c <xTaskPriorityDisinherit>
 8003244:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	609a      	str	r2, [r3, #8]
 800324c:	e043      	b.n	80032d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d119      	bne.n	8003288 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6858      	ldr	r0, [r3, #4]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325c:	461a      	mov	r2, r3
 800325e:	68b9      	ldr	r1, [r7, #8]
 8003260:	f006 fe54 	bl	8009f0c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	685a      	ldr	r2, [r3, #4]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326c:	441a      	add	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	685a      	ldr	r2, [r3, #4]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	429a      	cmp	r2, r3
 800327c:	d32b      	bcc.n	80032d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	605a      	str	r2, [r3, #4]
 8003286:	e026      	b.n	80032d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	68d8      	ldr	r0, [r3, #12]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003290:	461a      	mov	r2, r3
 8003292:	68b9      	ldr	r1, [r7, #8]
 8003294:	f006 fe3a 	bl	8009f0c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a0:	425b      	negs	r3, r3
 80032a2:	441a      	add	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	68da      	ldr	r2, [r3, #12]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d207      	bcs.n	80032c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	425b      	negs	r3, r3
 80032be:	441a      	add	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d105      	bne.n	80032d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d002      	beq.n	80032d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	3b01      	subs	r3, #1
 80032d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1c5a      	adds	r2, r3, #1
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80032de:	697b      	ldr	r3, [r7, #20]
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3718      	adds	r7, #24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d018      	beq.n	800332c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68da      	ldr	r2, [r3, #12]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	441a      	add	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68da      	ldr	r2, [r3, #12]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	429a      	cmp	r2, r3
 8003312:	d303      	bcc.n	800331c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68d9      	ldr	r1, [r3, #12]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	461a      	mov	r2, r3
 8003326:	6838      	ldr	r0, [r7, #0]
 8003328:	f006 fdf0 	bl	8009f0c <memcpy>
	}
}
 800332c:	bf00      	nop
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800333c:	f001 fd9a 	bl	8004e74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003346:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003348:	e011      	b.n	800336e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	2b00      	cmp	r3, #0
 8003350:	d012      	beq.n	8003378 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	3324      	adds	r3, #36	; 0x24
 8003356:	4618      	mov	r0, r3
 8003358:	f000 fd3c 	bl	8003dd4 <xTaskRemoveFromEventList>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003362:	f000 fe13 	bl	8003f8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003366:	7bfb      	ldrb	r3, [r7, #15]
 8003368:	3b01      	subs	r3, #1
 800336a:	b2db      	uxtb	r3, r3
 800336c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800336e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003372:	2b00      	cmp	r3, #0
 8003374:	dce9      	bgt.n	800334a <prvUnlockQueue+0x16>
 8003376:	e000      	b.n	800337a <prvUnlockQueue+0x46>
					break;
 8003378:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	22ff      	movs	r2, #255	; 0xff
 800337e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003382:	f001 fda7 	bl	8004ed4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003386:	f001 fd75 	bl	8004e74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003390:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003392:	e011      	b.n	80033b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d012      	beq.n	80033c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3310      	adds	r3, #16
 80033a0:	4618      	mov	r0, r3
 80033a2:	f000 fd17 	bl	8003dd4 <xTaskRemoveFromEventList>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80033ac:	f000 fdee 	bl	8003f8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80033b0:	7bbb      	ldrb	r3, [r7, #14]
 80033b2:	3b01      	subs	r3, #1
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	dce9      	bgt.n	8003394 <prvUnlockQueue+0x60>
 80033c0:	e000      	b.n	80033c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80033c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	22ff      	movs	r2, #255	; 0xff
 80033c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80033cc:	f001 fd82 	bl	8004ed4 <vPortExitCritical>
}
 80033d0:	bf00      	nop
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033e0:	f001 fd48 	bl	8004e74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d102      	bne.n	80033f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80033ec:	2301      	movs	r3, #1
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	e001      	b.n	80033f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80033f2:	2300      	movs	r3, #0
 80033f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033f6:	f001 fd6d 	bl	8004ed4 <vPortExitCritical>

	return xReturn;
 80033fa:	68fb      	ldr	r3, [r7, #12]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800340c:	f001 fd32 	bl	8004e74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003418:	429a      	cmp	r2, r3
 800341a:	d102      	bne.n	8003422 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800341c:	2301      	movs	r3, #1
 800341e:	60fb      	str	r3, [r7, #12]
 8003420:	e001      	b.n	8003426 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003422:	2300      	movs	r3, #0
 8003424:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003426:	f001 fd55 	bl	8004ed4 <vPortExitCritical>

	return xReturn;
 800342a:	68fb      	ldr	r3, [r7, #12]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800343e:	2300      	movs	r3, #0
 8003440:	60fb      	str	r3, [r7, #12]
 8003442:	e014      	b.n	800346e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003444:	4a0f      	ldr	r2, [pc, #60]	; (8003484 <vQueueAddToRegistry+0x50>)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10b      	bne.n	8003468 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003450:	490c      	ldr	r1, [pc, #48]	; (8003484 <vQueueAddToRegistry+0x50>)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800345a:	4a0a      	ldr	r2, [pc, #40]	; (8003484 <vQueueAddToRegistry+0x50>)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	4413      	add	r3, r2
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003466:	e006      	b.n	8003476 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	3301      	adds	r3, #1
 800346c:	60fb      	str	r3, [r7, #12]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2b07      	cmp	r3, #7
 8003472:	d9e7      	bls.n	8003444 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003474:	bf00      	nop
 8003476:	bf00      	nop
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	20000fe0 	.word	0x20000fe0

08003488 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003498:	f001 fcec 	bl	8004e74 <vPortEnterCritical>
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034a2:	b25b      	sxtb	r3, r3
 80034a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034a8:	d103      	bne.n	80034b2 <vQueueWaitForMessageRestricted+0x2a>
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034b8:	b25b      	sxtb	r3, r3
 80034ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034be:	d103      	bne.n	80034c8 <vQueueWaitForMessageRestricted+0x40>
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034c8:	f001 fd04 	bl	8004ed4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d106      	bne.n	80034e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	3324      	adds	r3, #36	; 0x24
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	68b9      	ldr	r1, [r7, #8]
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 fc4d 	bl	8003d7c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80034e2:	6978      	ldr	r0, [r7, #20]
 80034e4:	f7ff ff26 	bl	8003334 <prvUnlockQueue>
	}
 80034e8:	bf00      	nop
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b08e      	sub	sp, #56	; 0x38
 80034f4:	af04      	add	r7, sp, #16
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
 80034fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80034fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10a      	bne.n	800351a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003508:	f383 8811 	msr	BASEPRI, r3
 800350c:	f3bf 8f6f 	isb	sy
 8003510:	f3bf 8f4f 	dsb	sy
 8003514:	623b      	str	r3, [r7, #32]
}
 8003516:	bf00      	nop
 8003518:	e7fe      	b.n	8003518 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800351a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10a      	bne.n	8003536 <xTaskCreateStatic+0x46>
	__asm volatile
 8003520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003524:	f383 8811 	msr	BASEPRI, r3
 8003528:	f3bf 8f6f 	isb	sy
 800352c:	f3bf 8f4f 	dsb	sy
 8003530:	61fb      	str	r3, [r7, #28]
}
 8003532:	bf00      	nop
 8003534:	e7fe      	b.n	8003534 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003536:	235c      	movs	r3, #92	; 0x5c
 8003538:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	2b5c      	cmp	r3, #92	; 0x5c
 800353e:	d00a      	beq.n	8003556 <xTaskCreateStatic+0x66>
	__asm volatile
 8003540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003544:	f383 8811 	msr	BASEPRI, r3
 8003548:	f3bf 8f6f 	isb	sy
 800354c:	f3bf 8f4f 	dsb	sy
 8003550:	61bb      	str	r3, [r7, #24]
}
 8003552:	bf00      	nop
 8003554:	e7fe      	b.n	8003554 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003556:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800355a:	2b00      	cmp	r3, #0
 800355c:	d01e      	beq.n	800359c <xTaskCreateStatic+0xac>
 800355e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003560:	2b00      	cmp	r3, #0
 8003562:	d01b      	beq.n	800359c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003566:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800356c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	2202      	movs	r2, #2
 8003572:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003576:	2300      	movs	r3, #0
 8003578:	9303      	str	r3, [sp, #12]
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	9302      	str	r3, [sp, #8]
 800357e:	f107 0314 	add.w	r3, r7, #20
 8003582:	9301      	str	r3, [sp, #4]
 8003584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	68b9      	ldr	r1, [r7, #8]
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f000 f850 	bl	8003634 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003594:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003596:	f000 f8dd 	bl	8003754 <prvAddNewTaskToReadyList>
 800359a:	e001      	b.n	80035a0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800359c:	2300      	movs	r3, #0
 800359e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80035a0:	697b      	ldr	r3, [r7, #20]
	}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3728      	adds	r7, #40	; 0x28
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b08c      	sub	sp, #48	; 0x30
 80035ae:	af04      	add	r7, sp, #16
 80035b0:	60f8      	str	r0, [r7, #12]
 80035b2:	60b9      	str	r1, [r7, #8]
 80035b4:	603b      	str	r3, [r7, #0]
 80035b6:	4613      	mov	r3, r2
 80035b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80035ba:	88fb      	ldrh	r3, [r7, #6]
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	4618      	mov	r0, r3
 80035c0:	f001 fd7a 	bl	80050b8 <pvPortMalloc>
 80035c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00e      	beq.n	80035ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80035cc:	205c      	movs	r0, #92	; 0x5c
 80035ce:	f001 fd73 	bl	80050b8 <pvPortMalloc>
 80035d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	631a      	str	r2, [r3, #48]	; 0x30
 80035e0:	e005      	b.n	80035ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80035e2:	6978      	ldr	r0, [r7, #20]
 80035e4:	f001 fe34 	bl	8005250 <vPortFree>
 80035e8:	e001      	b.n	80035ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80035ea:	2300      	movs	r3, #0
 80035ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d017      	beq.n	8003624 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80035fc:	88fa      	ldrh	r2, [r7, #6]
 80035fe:	2300      	movs	r3, #0
 8003600:	9303      	str	r3, [sp, #12]
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	9302      	str	r3, [sp, #8]
 8003606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003608:	9301      	str	r3, [sp, #4]
 800360a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	68b9      	ldr	r1, [r7, #8]
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 f80e 	bl	8003634 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003618:	69f8      	ldr	r0, [r7, #28]
 800361a:	f000 f89b 	bl	8003754 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800361e:	2301      	movs	r3, #1
 8003620:	61bb      	str	r3, [r7, #24]
 8003622:	e002      	b.n	800362a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003624:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003628:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800362a:	69bb      	ldr	r3, [r7, #24]
	}
 800362c:	4618      	mov	r0, r3
 800362e:	3720      	adds	r7, #32
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b088      	sub	sp, #32
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
 8003640:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003644:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	461a      	mov	r2, r3
 800364c:	21a5      	movs	r1, #165	; 0xa5
 800364e:	f006 fc6b 	bl	8009f28 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003654:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800365c:	3b01      	subs	r3, #1
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	f023 0307 	bic.w	r3, r3, #7
 800366a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00a      	beq.n	800368c <prvInitialiseNewTask+0x58>
	__asm volatile
 8003676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367a:	f383 8811 	msr	BASEPRI, r3
 800367e:	f3bf 8f6f 	isb	sy
 8003682:	f3bf 8f4f 	dsb	sy
 8003686:	617b      	str	r3, [r7, #20]
}
 8003688:	bf00      	nop
 800368a:	e7fe      	b.n	800368a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d01f      	beq.n	80036d2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003692:	2300      	movs	r3, #0
 8003694:	61fb      	str	r3, [r7, #28]
 8003696:	e012      	b.n	80036be <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	4413      	add	r3, r2
 800369e:	7819      	ldrb	r1, [r3, #0]
 80036a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	4413      	add	r3, r2
 80036a6:	3334      	adds	r3, #52	; 0x34
 80036a8:	460a      	mov	r2, r1
 80036aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	4413      	add	r3, r2
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d006      	beq.n	80036c6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	3301      	adds	r3, #1
 80036bc:	61fb      	str	r3, [r7, #28]
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	2b0f      	cmp	r3, #15
 80036c2:	d9e9      	bls.n	8003698 <prvInitialiseNewTask+0x64>
 80036c4:	e000      	b.n	80036c8 <prvInitialiseNewTask+0x94>
			{
				break;
 80036c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036d0:	e003      	b.n	80036da <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80036d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80036da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036dc:	2b37      	cmp	r3, #55	; 0x37
 80036de:	d901      	bls.n	80036e4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80036e0:	2337      	movs	r3, #55	; 0x37
 80036e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80036e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80036ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036ee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80036f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f2:	2200      	movs	r2, #0
 80036f4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80036f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f8:	3304      	adds	r3, #4
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff f978 	bl	80029f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003702:	3318      	adds	r3, #24
 8003704:	4618      	mov	r0, r3
 8003706:	f7ff f973 	bl	80029f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800370a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800370e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003712:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003718:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800371a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800371e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003722:	2200      	movs	r2, #0
 8003724:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	68f9      	ldr	r1, [r7, #12]
 8003732:	69b8      	ldr	r0, [r7, #24]
 8003734:	f001 fa70 	bl	8004c18 <pxPortInitialiseStack>
 8003738:	4602      	mov	r2, r0
 800373a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800373e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003740:	2b00      	cmp	r3, #0
 8003742:	d002      	beq.n	800374a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003746:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003748:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800374a:	bf00      	nop
 800374c:	3720      	adds	r7, #32
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
	...

08003754 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800375c:	f001 fb8a 	bl	8004e74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003760:	4b2d      	ldr	r3, [pc, #180]	; (8003818 <prvAddNewTaskToReadyList+0xc4>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	3301      	adds	r3, #1
 8003766:	4a2c      	ldr	r2, [pc, #176]	; (8003818 <prvAddNewTaskToReadyList+0xc4>)
 8003768:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800376a:	4b2c      	ldr	r3, [pc, #176]	; (800381c <prvAddNewTaskToReadyList+0xc8>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d109      	bne.n	8003786 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003772:	4a2a      	ldr	r2, [pc, #168]	; (800381c <prvAddNewTaskToReadyList+0xc8>)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003778:	4b27      	ldr	r3, [pc, #156]	; (8003818 <prvAddNewTaskToReadyList+0xc4>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d110      	bne.n	80037a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003780:	f000 fc28 	bl	8003fd4 <prvInitialiseTaskLists>
 8003784:	e00d      	b.n	80037a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003786:	4b26      	ldr	r3, [pc, #152]	; (8003820 <prvAddNewTaskToReadyList+0xcc>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d109      	bne.n	80037a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800378e:	4b23      	ldr	r3, [pc, #140]	; (800381c <prvAddNewTaskToReadyList+0xc8>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003798:	429a      	cmp	r2, r3
 800379a:	d802      	bhi.n	80037a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800379c:	4a1f      	ldr	r2, [pc, #124]	; (800381c <prvAddNewTaskToReadyList+0xc8>)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80037a2:	4b20      	ldr	r3, [pc, #128]	; (8003824 <prvAddNewTaskToReadyList+0xd0>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	3301      	adds	r3, #1
 80037a8:	4a1e      	ldr	r2, [pc, #120]	; (8003824 <prvAddNewTaskToReadyList+0xd0>)
 80037aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80037ac:	4b1d      	ldr	r3, [pc, #116]	; (8003824 <prvAddNewTaskToReadyList+0xd0>)
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b8:	4b1b      	ldr	r3, [pc, #108]	; (8003828 <prvAddNewTaskToReadyList+0xd4>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d903      	bls.n	80037c8 <prvAddNewTaskToReadyList+0x74>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c4:	4a18      	ldr	r2, [pc, #96]	; (8003828 <prvAddNewTaskToReadyList+0xd4>)
 80037c6:	6013      	str	r3, [r2, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037cc:	4613      	mov	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4a15      	ldr	r2, [pc, #84]	; (800382c <prvAddNewTaskToReadyList+0xd8>)
 80037d6:	441a      	add	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3304      	adds	r3, #4
 80037dc:	4619      	mov	r1, r3
 80037de:	4610      	mov	r0, r2
 80037e0:	f7ff f913 	bl	8002a0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80037e4:	f001 fb76 	bl	8004ed4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80037e8:	4b0d      	ldr	r3, [pc, #52]	; (8003820 <prvAddNewTaskToReadyList+0xcc>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00e      	beq.n	800380e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80037f0:	4b0a      	ldr	r3, [pc, #40]	; (800381c <prvAddNewTaskToReadyList+0xc8>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d207      	bcs.n	800380e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80037fe:	4b0c      	ldr	r3, [pc, #48]	; (8003830 <prvAddNewTaskToReadyList+0xdc>)
 8003800:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	f3bf 8f4f 	dsb	sy
 800380a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800380e:	bf00      	nop
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	200014f4 	.word	0x200014f4
 800381c:	20001020 	.word	0x20001020
 8003820:	20001500 	.word	0x20001500
 8003824:	20001510 	.word	0x20001510
 8003828:	200014fc 	.word	0x200014fc
 800382c:	20001024 	.word	0x20001024
 8003830:	e000ed04 	.word	0xe000ed04

08003834 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800383c:	2300      	movs	r3, #0
 800383e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d017      	beq.n	8003876 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003846:	4b13      	ldr	r3, [pc, #76]	; (8003894 <vTaskDelay+0x60>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00a      	beq.n	8003864 <vTaskDelay+0x30>
	__asm volatile
 800384e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003852:	f383 8811 	msr	BASEPRI, r3
 8003856:	f3bf 8f6f 	isb	sy
 800385a:	f3bf 8f4f 	dsb	sy
 800385e:	60bb      	str	r3, [r7, #8]
}
 8003860:	bf00      	nop
 8003862:	e7fe      	b.n	8003862 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003864:	f000 f880 	bl	8003968 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003868:	2100      	movs	r1, #0
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 fe32 	bl	80044d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003870:	f000 f888 	bl	8003984 <xTaskResumeAll>
 8003874:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d107      	bne.n	800388c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800387c:	4b06      	ldr	r3, [pc, #24]	; (8003898 <vTaskDelay+0x64>)
 800387e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	f3bf 8f4f 	dsb	sy
 8003888:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800388c:	bf00      	nop
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	2000151c 	.word	0x2000151c
 8003898:	e000ed04 	.word	0xe000ed04

0800389c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b08a      	sub	sp, #40	; 0x28
 80038a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80038a2:	2300      	movs	r3, #0
 80038a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80038a6:	2300      	movs	r3, #0
 80038a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80038aa:	463a      	mov	r2, r7
 80038ac:	1d39      	adds	r1, r7, #4
 80038ae:	f107 0308 	add.w	r3, r7, #8
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7ff f848 	bl	8002948 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80038b8:	6839      	ldr	r1, [r7, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	9202      	str	r2, [sp, #8]
 80038c0:	9301      	str	r3, [sp, #4]
 80038c2:	2300      	movs	r3, #0
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	2300      	movs	r3, #0
 80038c8:	460a      	mov	r2, r1
 80038ca:	4921      	ldr	r1, [pc, #132]	; (8003950 <vTaskStartScheduler+0xb4>)
 80038cc:	4821      	ldr	r0, [pc, #132]	; (8003954 <vTaskStartScheduler+0xb8>)
 80038ce:	f7ff fe0f 	bl	80034f0 <xTaskCreateStatic>
 80038d2:	4603      	mov	r3, r0
 80038d4:	4a20      	ldr	r2, [pc, #128]	; (8003958 <vTaskStartScheduler+0xbc>)
 80038d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80038d8:	4b1f      	ldr	r3, [pc, #124]	; (8003958 <vTaskStartScheduler+0xbc>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d002      	beq.n	80038e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80038e0:	2301      	movs	r3, #1
 80038e2:	617b      	str	r3, [r7, #20]
 80038e4:	e001      	b.n	80038ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80038e6:	2300      	movs	r3, #0
 80038e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d102      	bne.n	80038f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80038f0:	f000 fe44 	bl	800457c <xTimerCreateTimerTask>
 80038f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d116      	bne.n	800392a <vTaskStartScheduler+0x8e>
	__asm volatile
 80038fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003900:	f383 8811 	msr	BASEPRI, r3
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	f3bf 8f4f 	dsb	sy
 800390c:	613b      	str	r3, [r7, #16]
}
 800390e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003910:	4b12      	ldr	r3, [pc, #72]	; (800395c <vTaskStartScheduler+0xc0>)
 8003912:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003916:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003918:	4b11      	ldr	r3, [pc, #68]	; (8003960 <vTaskStartScheduler+0xc4>)
 800391a:	2201      	movs	r2, #1
 800391c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800391e:	4b11      	ldr	r3, [pc, #68]	; (8003964 <vTaskStartScheduler+0xc8>)
 8003920:	2200      	movs	r2, #0
 8003922:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003924:	f001 fa04 	bl	8004d30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003928:	e00e      	b.n	8003948 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003930:	d10a      	bne.n	8003948 <vTaskStartScheduler+0xac>
	__asm volatile
 8003932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003936:	f383 8811 	msr	BASEPRI, r3
 800393a:	f3bf 8f6f 	isb	sy
 800393e:	f3bf 8f4f 	dsb	sy
 8003942:	60fb      	str	r3, [r7, #12]
}
 8003944:	bf00      	nop
 8003946:	e7fe      	b.n	8003946 <vTaskStartScheduler+0xaa>
}
 8003948:	bf00      	nop
 800394a:	3718      	adds	r7, #24
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	0800b078 	.word	0x0800b078
 8003954:	08003fa5 	.word	0x08003fa5
 8003958:	20001518 	.word	0x20001518
 800395c:	20001514 	.word	0x20001514
 8003960:	20001500 	.word	0x20001500
 8003964:	200014f8 	.word	0x200014f8

08003968 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800396c:	4b04      	ldr	r3, [pc, #16]	; (8003980 <vTaskSuspendAll+0x18>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	3301      	adds	r3, #1
 8003972:	4a03      	ldr	r2, [pc, #12]	; (8003980 <vTaskSuspendAll+0x18>)
 8003974:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003976:	bf00      	nop
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	2000151c 	.word	0x2000151c

08003984 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800398a:	2300      	movs	r3, #0
 800398c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800398e:	2300      	movs	r3, #0
 8003990:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003992:	4b42      	ldr	r3, [pc, #264]	; (8003a9c <xTaskResumeAll+0x118>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10a      	bne.n	80039b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800399a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399e:	f383 8811 	msr	BASEPRI, r3
 80039a2:	f3bf 8f6f 	isb	sy
 80039a6:	f3bf 8f4f 	dsb	sy
 80039aa:	603b      	str	r3, [r7, #0]
}
 80039ac:	bf00      	nop
 80039ae:	e7fe      	b.n	80039ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80039b0:	f001 fa60 	bl	8004e74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80039b4:	4b39      	ldr	r3, [pc, #228]	; (8003a9c <xTaskResumeAll+0x118>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	3b01      	subs	r3, #1
 80039ba:	4a38      	ldr	r2, [pc, #224]	; (8003a9c <xTaskResumeAll+0x118>)
 80039bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039be:	4b37      	ldr	r3, [pc, #220]	; (8003a9c <xTaskResumeAll+0x118>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d162      	bne.n	8003a8c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80039c6:	4b36      	ldr	r3, [pc, #216]	; (8003aa0 <xTaskResumeAll+0x11c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d05e      	beq.n	8003a8c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039ce:	e02f      	b.n	8003a30 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039d0:	4b34      	ldr	r3, [pc, #208]	; (8003aa4 <xTaskResumeAll+0x120>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	3318      	adds	r3, #24
 80039dc:	4618      	mov	r0, r3
 80039de:	f7ff f871 	bl	8002ac4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	3304      	adds	r3, #4
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7ff f86c 	bl	8002ac4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f0:	4b2d      	ldr	r3, [pc, #180]	; (8003aa8 <xTaskResumeAll+0x124>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d903      	bls.n	8003a00 <xTaskResumeAll+0x7c>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fc:	4a2a      	ldr	r2, [pc, #168]	; (8003aa8 <xTaskResumeAll+0x124>)
 80039fe:	6013      	str	r3, [r2, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a04:	4613      	mov	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4a27      	ldr	r2, [pc, #156]	; (8003aac <xTaskResumeAll+0x128>)
 8003a0e:	441a      	add	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	3304      	adds	r3, #4
 8003a14:	4619      	mov	r1, r3
 8003a16:	4610      	mov	r0, r2
 8003a18:	f7fe fff7 	bl	8002a0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a20:	4b23      	ldr	r3, [pc, #140]	; (8003ab0 <xTaskResumeAll+0x12c>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d302      	bcc.n	8003a30 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003a2a:	4b22      	ldr	r3, [pc, #136]	; (8003ab4 <xTaskResumeAll+0x130>)
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a30:	4b1c      	ldr	r3, [pc, #112]	; (8003aa4 <xTaskResumeAll+0x120>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1cb      	bne.n	80039d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003a3e:	f000 fb67 	bl	8004110 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003a42:	4b1d      	ldr	r3, [pc, #116]	; (8003ab8 <xTaskResumeAll+0x134>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d010      	beq.n	8003a70 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003a4e:	f000 f859 	bl	8003b04 <xTaskIncrementTick>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d002      	beq.n	8003a5e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003a58:	4b16      	ldr	r3, [pc, #88]	; (8003ab4 <xTaskResumeAll+0x130>)
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	3b01      	subs	r3, #1
 8003a62:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1f1      	bne.n	8003a4e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003a6a:	4b13      	ldr	r3, [pc, #76]	; (8003ab8 <xTaskResumeAll+0x134>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003a70:	4b10      	ldr	r3, [pc, #64]	; (8003ab4 <xTaskResumeAll+0x130>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d009      	beq.n	8003a8c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a7c:	4b0f      	ldr	r3, [pc, #60]	; (8003abc <xTaskResumeAll+0x138>)
 8003a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	f3bf 8f4f 	dsb	sy
 8003a88:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a8c:	f001 fa22 	bl	8004ed4 <vPortExitCritical>

	return xAlreadyYielded;
 8003a90:	68bb      	ldr	r3, [r7, #8]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	2000151c 	.word	0x2000151c
 8003aa0:	200014f4 	.word	0x200014f4
 8003aa4:	200014b4 	.word	0x200014b4
 8003aa8:	200014fc 	.word	0x200014fc
 8003aac:	20001024 	.word	0x20001024
 8003ab0:	20001020 	.word	0x20001020
 8003ab4:	20001508 	.word	0x20001508
 8003ab8:	20001504 	.word	0x20001504
 8003abc:	e000ed04 	.word	0xe000ed04

08003ac0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003ac6:	4b05      	ldr	r3, [pc, #20]	; (8003adc <xTaskGetTickCount+0x1c>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003acc:	687b      	ldr	r3, [r7, #4]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	200014f8 	.word	0x200014f8

08003ae0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ae6:	f001 faa7 	bl	8005038 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003aea:	2300      	movs	r3, #0
 8003aec:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8003aee:	4b04      	ldr	r3, [pc, #16]	; (8003b00 <xTaskGetTickCountFromISR+0x20>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003af4:	683b      	ldr	r3, [r7, #0]
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	200014f8 	.word	0x200014f8

08003b04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b0e:	4b4f      	ldr	r3, [pc, #316]	; (8003c4c <xTaskIncrementTick+0x148>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f040 808f 	bne.w	8003c36 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b18:	4b4d      	ldr	r3, [pc, #308]	; (8003c50 <xTaskIncrementTick+0x14c>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b20:	4a4b      	ldr	r2, [pc, #300]	; (8003c50 <xTaskIncrementTick+0x14c>)
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d120      	bne.n	8003b6e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b2c:	4b49      	ldr	r3, [pc, #292]	; (8003c54 <xTaskIncrementTick+0x150>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00a      	beq.n	8003b4c <xTaskIncrementTick+0x48>
	__asm volatile
 8003b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b3a:	f383 8811 	msr	BASEPRI, r3
 8003b3e:	f3bf 8f6f 	isb	sy
 8003b42:	f3bf 8f4f 	dsb	sy
 8003b46:	603b      	str	r3, [r7, #0]
}
 8003b48:	bf00      	nop
 8003b4a:	e7fe      	b.n	8003b4a <xTaskIncrementTick+0x46>
 8003b4c:	4b41      	ldr	r3, [pc, #260]	; (8003c54 <xTaskIncrementTick+0x150>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	4b41      	ldr	r3, [pc, #260]	; (8003c58 <xTaskIncrementTick+0x154>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a3f      	ldr	r2, [pc, #252]	; (8003c54 <xTaskIncrementTick+0x150>)
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	4a3f      	ldr	r2, [pc, #252]	; (8003c58 <xTaskIncrementTick+0x154>)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6013      	str	r3, [r2, #0]
 8003b60:	4b3e      	ldr	r3, [pc, #248]	; (8003c5c <xTaskIncrementTick+0x158>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	3301      	adds	r3, #1
 8003b66:	4a3d      	ldr	r2, [pc, #244]	; (8003c5c <xTaskIncrementTick+0x158>)
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	f000 fad1 	bl	8004110 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b6e:	4b3c      	ldr	r3, [pc, #240]	; (8003c60 <xTaskIncrementTick+0x15c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d349      	bcc.n	8003c0c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b78:	4b36      	ldr	r3, [pc, #216]	; (8003c54 <xTaskIncrementTick+0x150>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d104      	bne.n	8003b8c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b82:	4b37      	ldr	r3, [pc, #220]	; (8003c60 <xTaskIncrementTick+0x15c>)
 8003b84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b88:	601a      	str	r2, [r3, #0]
					break;
 8003b8a:	e03f      	b.n	8003c0c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b8c:	4b31      	ldr	r3, [pc, #196]	; (8003c54 <xTaskIncrementTick+0x150>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d203      	bcs.n	8003bac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ba4:	4a2e      	ldr	r2, [pc, #184]	; (8003c60 <xTaskIncrementTick+0x15c>)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003baa:	e02f      	b.n	8003c0c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	3304      	adds	r3, #4
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7fe ff87 	bl	8002ac4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d004      	beq.n	8003bc8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	3318      	adds	r3, #24
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fe ff7e 	bl	8002ac4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bcc:	4b25      	ldr	r3, [pc, #148]	; (8003c64 <xTaskIncrementTick+0x160>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d903      	bls.n	8003bdc <xTaskIncrementTick+0xd8>
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd8:	4a22      	ldr	r2, [pc, #136]	; (8003c64 <xTaskIncrementTick+0x160>)
 8003bda:	6013      	str	r3, [r2, #0]
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be0:	4613      	mov	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	4a1f      	ldr	r2, [pc, #124]	; (8003c68 <xTaskIncrementTick+0x164>)
 8003bea:	441a      	add	r2, r3
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	3304      	adds	r3, #4
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	4610      	mov	r0, r2
 8003bf4:	f7fe ff09 	bl	8002a0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bfc:	4b1b      	ldr	r3, [pc, #108]	; (8003c6c <xTaskIncrementTick+0x168>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d3b8      	bcc.n	8003b78 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003c06:	2301      	movs	r3, #1
 8003c08:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c0a:	e7b5      	b.n	8003b78 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c0c:	4b17      	ldr	r3, [pc, #92]	; (8003c6c <xTaskIncrementTick+0x168>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c12:	4915      	ldr	r1, [pc, #84]	; (8003c68 <xTaskIncrementTick+0x164>)
 8003c14:	4613      	mov	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4413      	add	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d901      	bls.n	8003c28 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003c24:	2301      	movs	r3, #1
 8003c26:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003c28:	4b11      	ldr	r3, [pc, #68]	; (8003c70 <xTaskIncrementTick+0x16c>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d007      	beq.n	8003c40 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003c30:	2301      	movs	r3, #1
 8003c32:	617b      	str	r3, [r7, #20]
 8003c34:	e004      	b.n	8003c40 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003c36:	4b0f      	ldr	r3, [pc, #60]	; (8003c74 <xTaskIncrementTick+0x170>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	4a0d      	ldr	r2, [pc, #52]	; (8003c74 <xTaskIncrementTick+0x170>)
 8003c3e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003c40:	697b      	ldr	r3, [r7, #20]
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3718      	adds	r7, #24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	2000151c 	.word	0x2000151c
 8003c50:	200014f8 	.word	0x200014f8
 8003c54:	200014ac 	.word	0x200014ac
 8003c58:	200014b0 	.word	0x200014b0
 8003c5c:	2000150c 	.word	0x2000150c
 8003c60:	20001514 	.word	0x20001514
 8003c64:	200014fc 	.word	0x200014fc
 8003c68:	20001024 	.word	0x20001024
 8003c6c:	20001020 	.word	0x20001020
 8003c70:	20001508 	.word	0x20001508
 8003c74:	20001504 	.word	0x20001504

08003c78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c7e:	4b28      	ldr	r3, [pc, #160]	; (8003d20 <vTaskSwitchContext+0xa8>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003c86:	4b27      	ldr	r3, [pc, #156]	; (8003d24 <vTaskSwitchContext+0xac>)
 8003c88:	2201      	movs	r2, #1
 8003c8a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003c8c:	e041      	b.n	8003d12 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003c8e:	4b25      	ldr	r3, [pc, #148]	; (8003d24 <vTaskSwitchContext+0xac>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c94:	4b24      	ldr	r3, [pc, #144]	; (8003d28 <vTaskSwitchContext+0xb0>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	e010      	b.n	8003cbe <vTaskSwitchContext+0x46>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10a      	bne.n	8003cb8 <vTaskSwitchContext+0x40>
	__asm volatile
 8003ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca6:	f383 8811 	msr	BASEPRI, r3
 8003caa:	f3bf 8f6f 	isb	sy
 8003cae:	f3bf 8f4f 	dsb	sy
 8003cb2:	607b      	str	r3, [r7, #4]
}
 8003cb4:	bf00      	nop
 8003cb6:	e7fe      	b.n	8003cb6 <vTaskSwitchContext+0x3e>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	60fb      	str	r3, [r7, #12]
 8003cbe:	491b      	ldr	r1, [pc, #108]	; (8003d2c <vTaskSwitchContext+0xb4>)
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	4413      	add	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	440b      	add	r3, r1
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0e4      	beq.n	8003c9c <vTaskSwitchContext+0x24>
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4413      	add	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4a13      	ldr	r2, [pc, #76]	; (8003d2c <vTaskSwitchContext+0xb4>)
 8003cde:	4413      	add	r3, r2
 8003ce0:	60bb      	str	r3, [r7, #8]
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	605a      	str	r2, [r3, #4]
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	3308      	adds	r3, #8
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d104      	bne.n	8003d02 <vTaskSwitchContext+0x8a>
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	605a      	str	r2, [r3, #4]
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	4a09      	ldr	r2, [pc, #36]	; (8003d30 <vTaskSwitchContext+0xb8>)
 8003d0a:	6013      	str	r3, [r2, #0]
 8003d0c:	4a06      	ldr	r2, [pc, #24]	; (8003d28 <vTaskSwitchContext+0xb0>)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6013      	str	r3, [r2, #0]
}
 8003d12:	bf00      	nop
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	2000151c 	.word	0x2000151c
 8003d24:	20001508 	.word	0x20001508
 8003d28:	200014fc 	.word	0x200014fc
 8003d2c:	20001024 	.word	0x20001024
 8003d30:	20001020 	.word	0x20001020

08003d34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10a      	bne.n	8003d5a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d48:	f383 8811 	msr	BASEPRI, r3
 8003d4c:	f3bf 8f6f 	isb	sy
 8003d50:	f3bf 8f4f 	dsb	sy
 8003d54:	60fb      	str	r3, [r7, #12]
}
 8003d56:	bf00      	nop
 8003d58:	e7fe      	b.n	8003d58 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d5a:	4b07      	ldr	r3, [pc, #28]	; (8003d78 <vTaskPlaceOnEventList+0x44>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	3318      	adds	r3, #24
 8003d60:	4619      	mov	r1, r3
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7fe fe75 	bl	8002a52 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003d68:	2101      	movs	r1, #1
 8003d6a:	6838      	ldr	r0, [r7, #0]
 8003d6c:	f000 fbb2 	bl	80044d4 <prvAddCurrentTaskToDelayedList>
}
 8003d70:	bf00      	nop
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	20001020 	.word	0x20001020

08003d7c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10a      	bne.n	8003da4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d92:	f383 8811 	msr	BASEPRI, r3
 8003d96:	f3bf 8f6f 	isb	sy
 8003d9a:	f3bf 8f4f 	dsb	sy
 8003d9e:	617b      	str	r3, [r7, #20]
}
 8003da0:	bf00      	nop
 8003da2:	e7fe      	b.n	8003da2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003da4:	4b0a      	ldr	r3, [pc, #40]	; (8003dd0 <vTaskPlaceOnEventListRestricted+0x54>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	3318      	adds	r3, #24
 8003daa:	4619      	mov	r1, r3
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f7fe fe2c 	bl	8002a0a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d002      	beq.n	8003dbe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003db8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003dbc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	68b8      	ldr	r0, [r7, #8]
 8003dc2:	f000 fb87 	bl	80044d4 <prvAddCurrentTaskToDelayedList>
	}
 8003dc6:	bf00      	nop
 8003dc8:	3718      	adds	r7, #24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	20001020 	.word	0x20001020

08003dd4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10a      	bne.n	8003e00 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dee:	f383 8811 	msr	BASEPRI, r3
 8003df2:	f3bf 8f6f 	isb	sy
 8003df6:	f3bf 8f4f 	dsb	sy
 8003dfa:	60fb      	str	r3, [r7, #12]
}
 8003dfc:	bf00      	nop
 8003dfe:	e7fe      	b.n	8003dfe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	3318      	adds	r3, #24
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7fe fe5d 	bl	8002ac4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e0a:	4b1e      	ldr	r3, [pc, #120]	; (8003e84 <xTaskRemoveFromEventList+0xb0>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d11d      	bne.n	8003e4e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	3304      	adds	r3, #4
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fe fe54 	bl	8002ac4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e20:	4b19      	ldr	r3, [pc, #100]	; (8003e88 <xTaskRemoveFromEventList+0xb4>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d903      	bls.n	8003e30 <xTaskRemoveFromEventList+0x5c>
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2c:	4a16      	ldr	r2, [pc, #88]	; (8003e88 <xTaskRemoveFromEventList+0xb4>)
 8003e2e:	6013      	str	r3, [r2, #0]
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e34:	4613      	mov	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	4413      	add	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	4a13      	ldr	r2, [pc, #76]	; (8003e8c <xTaskRemoveFromEventList+0xb8>)
 8003e3e:	441a      	add	r2, r3
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	3304      	adds	r3, #4
 8003e44:	4619      	mov	r1, r3
 8003e46:	4610      	mov	r0, r2
 8003e48:	f7fe fddf 	bl	8002a0a <vListInsertEnd>
 8003e4c:	e005      	b.n	8003e5a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	3318      	adds	r3, #24
 8003e52:	4619      	mov	r1, r3
 8003e54:	480e      	ldr	r0, [pc, #56]	; (8003e90 <xTaskRemoveFromEventList+0xbc>)
 8003e56:	f7fe fdd8 	bl	8002a0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e5e:	4b0d      	ldr	r3, [pc, #52]	; (8003e94 <xTaskRemoveFromEventList+0xc0>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d905      	bls.n	8003e74 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003e6c:	4b0a      	ldr	r3, [pc, #40]	; (8003e98 <xTaskRemoveFromEventList+0xc4>)
 8003e6e:	2201      	movs	r2, #1
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	e001      	b.n	8003e78 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003e74:	2300      	movs	r3, #0
 8003e76:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003e78:	697b      	ldr	r3, [r7, #20]
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	2000151c 	.word	0x2000151c
 8003e88:	200014fc 	.word	0x200014fc
 8003e8c:	20001024 	.word	0x20001024
 8003e90:	200014b4 	.word	0x200014b4
 8003e94:	20001020 	.word	0x20001020
 8003e98:	20001508 	.word	0x20001508

08003e9c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ea4:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <vTaskInternalSetTimeOutState+0x24>)
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003eac:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <vTaskInternalSetTimeOutState+0x28>)
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	605a      	str	r2, [r3, #4]
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	2000150c 	.word	0x2000150c
 8003ec4:	200014f8 	.word	0x200014f8

08003ec8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b088      	sub	sp, #32
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10a      	bne.n	8003eee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003edc:	f383 8811 	msr	BASEPRI, r3
 8003ee0:	f3bf 8f6f 	isb	sy
 8003ee4:	f3bf 8f4f 	dsb	sy
 8003ee8:	613b      	str	r3, [r7, #16]
}
 8003eea:	bf00      	nop
 8003eec:	e7fe      	b.n	8003eec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d10a      	bne.n	8003f0a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef8:	f383 8811 	msr	BASEPRI, r3
 8003efc:	f3bf 8f6f 	isb	sy
 8003f00:	f3bf 8f4f 	dsb	sy
 8003f04:	60fb      	str	r3, [r7, #12]
}
 8003f06:	bf00      	nop
 8003f08:	e7fe      	b.n	8003f08 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003f0a:	f000 ffb3 	bl	8004e74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003f0e:	4b1d      	ldr	r3, [pc, #116]	; (8003f84 <xTaskCheckForTimeOut+0xbc>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f26:	d102      	bne.n	8003f2e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	61fb      	str	r3, [r7, #28]
 8003f2c:	e023      	b.n	8003f76 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	4b15      	ldr	r3, [pc, #84]	; (8003f88 <xTaskCheckForTimeOut+0xc0>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d007      	beq.n	8003f4a <xTaskCheckForTimeOut+0x82>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d302      	bcc.n	8003f4a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003f44:	2301      	movs	r3, #1
 8003f46:	61fb      	str	r3, [r7, #28]
 8003f48:	e015      	b.n	8003f76 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d20b      	bcs.n	8003f6c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	1ad2      	subs	r2, r2, r3
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f7ff ff9b 	bl	8003e9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003f66:	2300      	movs	r3, #0
 8003f68:	61fb      	str	r3, [r7, #28]
 8003f6a:	e004      	b.n	8003f76 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003f72:	2301      	movs	r3, #1
 8003f74:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003f76:	f000 ffad 	bl	8004ed4 <vPortExitCritical>

	return xReturn;
 8003f7a:	69fb      	ldr	r3, [r7, #28]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3720      	adds	r7, #32
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	200014f8 	.word	0x200014f8
 8003f88:	2000150c 	.word	0x2000150c

08003f8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003f90:	4b03      	ldr	r3, [pc, #12]	; (8003fa0 <vTaskMissedYield+0x14>)
 8003f92:	2201      	movs	r2, #1
 8003f94:	601a      	str	r2, [r3, #0]
}
 8003f96:	bf00      	nop
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr
 8003fa0:	20001508 	.word	0x20001508

08003fa4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003fac:	f000 f852 	bl	8004054 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003fb0:	4b06      	ldr	r3, [pc, #24]	; (8003fcc <prvIdleTask+0x28>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d9f9      	bls.n	8003fac <prvIdleTask+0x8>
			{
				taskYIELD();
 8003fb8:	4b05      	ldr	r3, [pc, #20]	; (8003fd0 <prvIdleTask+0x2c>)
 8003fba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fbe:	601a      	str	r2, [r3, #0]
 8003fc0:	f3bf 8f4f 	dsb	sy
 8003fc4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003fc8:	e7f0      	b.n	8003fac <prvIdleTask+0x8>
 8003fca:	bf00      	nop
 8003fcc:	20001024 	.word	0x20001024
 8003fd0:	e000ed04 	.word	0xe000ed04

08003fd4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fda:	2300      	movs	r3, #0
 8003fdc:	607b      	str	r3, [r7, #4]
 8003fde:	e00c      	b.n	8003ffa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	4a12      	ldr	r2, [pc, #72]	; (8004034 <prvInitialiseTaskLists+0x60>)
 8003fec:	4413      	add	r3, r2
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fe fcde 	bl	80029b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	607b      	str	r3, [r7, #4]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2b37      	cmp	r3, #55	; 0x37
 8003ffe:	d9ef      	bls.n	8003fe0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004000:	480d      	ldr	r0, [pc, #52]	; (8004038 <prvInitialiseTaskLists+0x64>)
 8004002:	f7fe fcd5 	bl	80029b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004006:	480d      	ldr	r0, [pc, #52]	; (800403c <prvInitialiseTaskLists+0x68>)
 8004008:	f7fe fcd2 	bl	80029b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800400c:	480c      	ldr	r0, [pc, #48]	; (8004040 <prvInitialiseTaskLists+0x6c>)
 800400e:	f7fe fccf 	bl	80029b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004012:	480c      	ldr	r0, [pc, #48]	; (8004044 <prvInitialiseTaskLists+0x70>)
 8004014:	f7fe fccc 	bl	80029b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004018:	480b      	ldr	r0, [pc, #44]	; (8004048 <prvInitialiseTaskLists+0x74>)
 800401a:	f7fe fcc9 	bl	80029b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800401e:	4b0b      	ldr	r3, [pc, #44]	; (800404c <prvInitialiseTaskLists+0x78>)
 8004020:	4a05      	ldr	r2, [pc, #20]	; (8004038 <prvInitialiseTaskLists+0x64>)
 8004022:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004024:	4b0a      	ldr	r3, [pc, #40]	; (8004050 <prvInitialiseTaskLists+0x7c>)
 8004026:	4a05      	ldr	r2, [pc, #20]	; (800403c <prvInitialiseTaskLists+0x68>)
 8004028:	601a      	str	r2, [r3, #0]
}
 800402a:	bf00      	nop
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	20001024 	.word	0x20001024
 8004038:	20001484 	.word	0x20001484
 800403c:	20001498 	.word	0x20001498
 8004040:	200014b4 	.word	0x200014b4
 8004044:	200014c8 	.word	0x200014c8
 8004048:	200014e0 	.word	0x200014e0
 800404c:	200014ac 	.word	0x200014ac
 8004050:	200014b0 	.word	0x200014b0

08004054 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800405a:	e019      	b.n	8004090 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800405c:	f000 ff0a 	bl	8004e74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004060:	4b10      	ldr	r3, [pc, #64]	; (80040a4 <prvCheckTasksWaitingTermination+0x50>)
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3304      	adds	r3, #4
 800406c:	4618      	mov	r0, r3
 800406e:	f7fe fd29 	bl	8002ac4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004072:	4b0d      	ldr	r3, [pc, #52]	; (80040a8 <prvCheckTasksWaitingTermination+0x54>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	3b01      	subs	r3, #1
 8004078:	4a0b      	ldr	r2, [pc, #44]	; (80040a8 <prvCheckTasksWaitingTermination+0x54>)
 800407a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800407c:	4b0b      	ldr	r3, [pc, #44]	; (80040ac <prvCheckTasksWaitingTermination+0x58>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	3b01      	subs	r3, #1
 8004082:	4a0a      	ldr	r2, [pc, #40]	; (80040ac <prvCheckTasksWaitingTermination+0x58>)
 8004084:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004086:	f000 ff25 	bl	8004ed4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f810 	bl	80040b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004090:	4b06      	ldr	r3, [pc, #24]	; (80040ac <prvCheckTasksWaitingTermination+0x58>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1e1      	bne.n	800405c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004098:	bf00      	nop
 800409a:	bf00      	nop
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	200014c8 	.word	0x200014c8
 80040a8:	200014f4 	.word	0x200014f4
 80040ac:	200014dc 	.word	0x200014dc

080040b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d108      	bne.n	80040d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c6:	4618      	mov	r0, r3
 80040c8:	f001 f8c2 	bl	8005250 <vPortFree>
				vPortFree( pxTCB );
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f001 f8bf 	bl	8005250 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80040d2:	e018      	b.n	8004106 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d103      	bne.n	80040e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f001 f8b6 	bl	8005250 <vPortFree>
	}
 80040e4:	e00f      	b.n	8004106 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d00a      	beq.n	8004106 <prvDeleteTCB+0x56>
	__asm volatile
 80040f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f4:	f383 8811 	msr	BASEPRI, r3
 80040f8:	f3bf 8f6f 	isb	sy
 80040fc:	f3bf 8f4f 	dsb	sy
 8004100:	60fb      	str	r3, [r7, #12]
}
 8004102:	bf00      	nop
 8004104:	e7fe      	b.n	8004104 <prvDeleteTCB+0x54>
	}
 8004106:	bf00      	nop
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
	...

08004110 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004116:	4b0c      	ldr	r3, [pc, #48]	; (8004148 <prvResetNextTaskUnblockTime+0x38>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d104      	bne.n	800412a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004120:	4b0a      	ldr	r3, [pc, #40]	; (800414c <prvResetNextTaskUnblockTime+0x3c>)
 8004122:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004126:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004128:	e008      	b.n	800413c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800412a:	4b07      	ldr	r3, [pc, #28]	; (8004148 <prvResetNextTaskUnblockTime+0x38>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	4a04      	ldr	r2, [pc, #16]	; (800414c <prvResetNextTaskUnblockTime+0x3c>)
 800413a:	6013      	str	r3, [r2, #0]
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr
 8004148:	200014ac 	.word	0x200014ac
 800414c:	20001514 	.word	0x20001514

08004150 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004156:	4b0b      	ldr	r3, [pc, #44]	; (8004184 <xTaskGetSchedulerState+0x34>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d102      	bne.n	8004164 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800415e:	2301      	movs	r3, #1
 8004160:	607b      	str	r3, [r7, #4]
 8004162:	e008      	b.n	8004176 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004164:	4b08      	ldr	r3, [pc, #32]	; (8004188 <xTaskGetSchedulerState+0x38>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d102      	bne.n	8004172 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800416c:	2302      	movs	r3, #2
 800416e:	607b      	str	r3, [r7, #4]
 8004170:	e001      	b.n	8004176 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004172:	2300      	movs	r3, #0
 8004174:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004176:	687b      	ldr	r3, [r7, #4]
	}
 8004178:	4618      	mov	r0, r3
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr
 8004184:	20001500 	.word	0x20001500
 8004188:	2000151c 	.word	0x2000151c

0800418c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004198:	2300      	movs	r3, #0
 800419a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d056      	beq.n	8004250 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80041a2:	4b2e      	ldr	r3, [pc, #184]	; (800425c <xTaskPriorityDisinherit+0xd0>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d00a      	beq.n	80041c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80041ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b0:	f383 8811 	msr	BASEPRI, r3
 80041b4:	f3bf 8f6f 	isb	sy
 80041b8:	f3bf 8f4f 	dsb	sy
 80041bc:	60fb      	str	r3, [r7, #12]
}
 80041be:	bf00      	nop
 80041c0:	e7fe      	b.n	80041c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10a      	bne.n	80041e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80041ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ce:	f383 8811 	msr	BASEPRI, r3
 80041d2:	f3bf 8f6f 	isb	sy
 80041d6:	f3bf 8f4f 	dsb	sy
 80041da:	60bb      	str	r3, [r7, #8]
}
 80041dc:	bf00      	nop
 80041de:	e7fe      	b.n	80041de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e4:	1e5a      	subs	r2, r3, #1
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d02c      	beq.n	8004250 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d128      	bne.n	8004250 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	3304      	adds	r3, #4
 8004202:	4618      	mov	r0, r3
 8004204:	f7fe fc5e 	bl	8002ac4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004214:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004220:	4b0f      	ldr	r3, [pc, #60]	; (8004260 <xTaskPriorityDisinherit+0xd4>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	429a      	cmp	r2, r3
 8004226:	d903      	bls.n	8004230 <xTaskPriorityDisinherit+0xa4>
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422c:	4a0c      	ldr	r2, [pc, #48]	; (8004260 <xTaskPriorityDisinherit+0xd4>)
 800422e:	6013      	str	r3, [r2, #0]
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004234:	4613      	mov	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4a09      	ldr	r2, [pc, #36]	; (8004264 <xTaskPriorityDisinherit+0xd8>)
 800423e:	441a      	add	r2, r3
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	3304      	adds	r3, #4
 8004244:	4619      	mov	r1, r3
 8004246:	4610      	mov	r0, r2
 8004248:	f7fe fbdf 	bl	8002a0a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800424c:	2301      	movs	r3, #1
 800424e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004250:	697b      	ldr	r3, [r7, #20]
	}
 8004252:	4618      	mov	r0, r3
 8004254:	3718      	adds	r7, #24
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	20001020 	.word	0x20001020
 8004260:	200014fc 	.word	0x200014fc
 8004264:	20001024 	.word	0x20001024

08004268 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
 8004274:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8004276:	f000 fdfd 	bl	8004e74 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800427a:	4b26      	ldr	r3, [pc, #152]	; (8004314 <xTaskNotifyWait+0xac>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d01a      	beq.n	80042be <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8004288:	4b22      	ldr	r3, [pc, #136]	; (8004314 <xTaskNotifyWait+0xac>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	43d2      	mvns	r2, r2
 8004292:	400a      	ands	r2, r1
 8004294:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8004296:	4b1f      	ldr	r3, [pc, #124]	; (8004314 <xTaskNotifyWait+0xac>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00b      	beq.n	80042be <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80042a6:	2101      	movs	r1, #1
 80042a8:	6838      	ldr	r0, [r7, #0]
 80042aa:	f000 f913 	bl	80044d4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80042ae:	4b1a      	ldr	r3, [pc, #104]	; (8004318 <xTaskNotifyWait+0xb0>)
 80042b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042b4:	601a      	str	r2, [r3, #0]
 80042b6:	f3bf 8f4f 	dsb	sy
 80042ba:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80042be:	f000 fe09 	bl	8004ed4 <vPortExitCritical>

		taskENTER_CRITICAL();
 80042c2:	f000 fdd7 	bl	8004e74 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d004      	beq.n	80042d6 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80042cc:	4b11      	ldr	r3, [pc, #68]	; (8004314 <xTaskNotifyWait+0xac>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80042d6:	4b0f      	ldr	r3, [pc, #60]	; (8004314 <xTaskNotifyWait+0xac>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d002      	beq.n	80042ea <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80042e4:	2300      	movs	r3, #0
 80042e6:	617b      	str	r3, [r7, #20]
 80042e8:	e008      	b.n	80042fc <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80042ea:	4b0a      	ldr	r3, [pc, #40]	; (8004314 <xTaskNotifyWait+0xac>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	43d2      	mvns	r2, r2
 80042f4:	400a      	ands	r2, r1
 80042f6:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 80042f8:	2301      	movs	r3, #1
 80042fa:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80042fc:	4b05      	ldr	r3, [pc, #20]	; (8004314 <xTaskNotifyWait+0xac>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8004306:	f000 fde5 	bl	8004ed4 <vPortExitCritical>

		return xReturn;
 800430a:	697b      	ldr	r3, [r7, #20]
	}
 800430c:	4618      	mov	r0, r3
 800430e:	3718      	adds	r7, #24
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	20001020 	.word	0x20001020
 8004318:	e000ed04 	.word	0xe000ed04

0800431c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800431c:	b580      	push	{r7, lr}
 800431e:	b08e      	sub	sp, #56	; 0x38
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	603b      	str	r3, [r7, #0]
 8004328:	4613      	mov	r3, r2
 800432a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800432c:	2301      	movs	r3, #1
 800432e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10a      	bne.n	800434c <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8004336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433a:	f383 8811 	msr	BASEPRI, r3
 800433e:	f3bf 8f6f 	isb	sy
 8004342:	f3bf 8f4f 	dsb	sy
 8004346:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004348:	bf00      	nop
 800434a:	e7fe      	b.n	800434a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800434c:	f000 fe74 	bl	8005038 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8004354:	f3ef 8211 	mrs	r2, BASEPRI
 8004358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435c:	f383 8811 	msr	BASEPRI, r3
 8004360:	f3bf 8f6f 	isb	sy
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	623a      	str	r2, [r7, #32]
 800436a:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800436c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800436e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004378:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800437e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004380:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004384:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438a:	2202      	movs	r2, #2
 800438c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8004390:	79fb      	ldrb	r3, [r7, #7]
 8004392:	2b04      	cmp	r3, #4
 8004394:	d828      	bhi.n	80043e8 <xTaskGenericNotifyFromISR+0xcc>
 8004396:	a201      	add	r2, pc, #4	; (adr r2, 800439c <xTaskGenericNotifyFromISR+0x80>)
 8004398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800439c:	08004409 	.word	0x08004409
 80043a0:	080043b1 	.word	0x080043b1
 80043a4:	080043bf 	.word	0x080043bf
 80043a8:	080043cb 	.word	0x080043cb
 80043ac:	080043d3 	.word	0x080043d3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80043b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	431a      	orrs	r2, r3
 80043b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ba:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80043bc:	e027      	b.n	800440e <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80043be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c2:	1c5a      	adds	r2, r3, #1
 80043c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80043c8:	e021      	b.n	800440e <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80043ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80043d0:	e01d      	b.n	800440e <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80043d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d003      	beq.n	80043e2 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80043da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80043e0:	e015      	b.n	800440e <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 80043e2:	2300      	movs	r3, #0
 80043e4:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80043e6:	e012      	b.n	800440e <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80043e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043f0:	d00c      	beq.n	800440c <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 80043f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f6:	f383 8811 	msr	BASEPRI, r3
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	f3bf 8f4f 	dsb	sy
 8004402:	61bb      	str	r3, [r7, #24]
}
 8004404:	bf00      	nop
 8004406:	e7fe      	b.n	8004406 <xTaskGenericNotifyFromISR+0xea>
					break;
 8004408:	bf00      	nop
 800440a:	e000      	b.n	800440e <xTaskGenericNotifyFromISR+0xf2>
					break;
 800440c:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800440e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004412:	2b01      	cmp	r3, #1
 8004414:	d146      	bne.n	80044a4 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00a      	beq.n	8004434 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800441e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004422:	f383 8811 	msr	BASEPRI, r3
 8004426:	f3bf 8f6f 	isb	sy
 800442a:	f3bf 8f4f 	dsb	sy
 800442e:	617b      	str	r3, [r7, #20]
}
 8004430:	bf00      	nop
 8004432:	e7fe      	b.n	8004432 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004434:	4b21      	ldr	r3, [pc, #132]	; (80044bc <xTaskGenericNotifyFromISR+0x1a0>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d11d      	bne.n	8004478 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800443c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443e:	3304      	adds	r3, #4
 8004440:	4618      	mov	r0, r3
 8004442:	f7fe fb3f 	bl	8002ac4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800444a:	4b1d      	ldr	r3, [pc, #116]	; (80044c0 <xTaskGenericNotifyFromISR+0x1a4>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	429a      	cmp	r2, r3
 8004450:	d903      	bls.n	800445a <xTaskGenericNotifyFromISR+0x13e>
 8004452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004456:	4a1a      	ldr	r2, [pc, #104]	; (80044c0 <xTaskGenericNotifyFromISR+0x1a4>)
 8004458:	6013      	str	r3, [r2, #0]
 800445a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800445e:	4613      	mov	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4a17      	ldr	r2, [pc, #92]	; (80044c4 <xTaskGenericNotifyFromISR+0x1a8>)
 8004468:	441a      	add	r2, r3
 800446a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446c:	3304      	adds	r3, #4
 800446e:	4619      	mov	r1, r3
 8004470:	4610      	mov	r0, r2
 8004472:	f7fe faca 	bl	8002a0a <vListInsertEnd>
 8004476:	e005      	b.n	8004484 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447a:	3318      	adds	r3, #24
 800447c:	4619      	mov	r1, r3
 800447e:	4812      	ldr	r0, [pc, #72]	; (80044c8 <xTaskGenericNotifyFromISR+0x1ac>)
 8004480:	f7fe fac3 	bl	8002a0a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004488:	4b10      	ldr	r3, [pc, #64]	; (80044cc <xTaskGenericNotifyFromISR+0x1b0>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448e:	429a      	cmp	r2, r3
 8004490:	d908      	bls.n	80044a4 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8004492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004494:	2b00      	cmp	r3, #0
 8004496:	d002      	beq.n	800449e <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8004498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800449a:	2201      	movs	r2, #1
 800449c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800449e:	4b0c      	ldr	r3, [pc, #48]	; (80044d0 <xTaskGenericNotifyFromISR+0x1b4>)
 80044a0:	2201      	movs	r2, #1
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a6:	613b      	str	r3, [r7, #16]
	__asm volatile
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	f383 8811 	msr	BASEPRI, r3
}
 80044ae:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80044b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3738      	adds	r7, #56	; 0x38
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	2000151c 	.word	0x2000151c
 80044c0:	200014fc 	.word	0x200014fc
 80044c4:	20001024 	.word	0x20001024
 80044c8:	200014b4 	.word	0x200014b4
 80044cc:	20001020 	.word	0x20001020
 80044d0:	20001508 	.word	0x20001508

080044d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80044de:	4b21      	ldr	r3, [pc, #132]	; (8004564 <prvAddCurrentTaskToDelayedList+0x90>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044e4:	4b20      	ldr	r3, [pc, #128]	; (8004568 <prvAddCurrentTaskToDelayedList+0x94>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	3304      	adds	r3, #4
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7fe faea 	bl	8002ac4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044f6:	d10a      	bne.n	800450e <prvAddCurrentTaskToDelayedList+0x3a>
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d007      	beq.n	800450e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044fe:	4b1a      	ldr	r3, [pc, #104]	; (8004568 <prvAddCurrentTaskToDelayedList+0x94>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	3304      	adds	r3, #4
 8004504:	4619      	mov	r1, r3
 8004506:	4819      	ldr	r0, [pc, #100]	; (800456c <prvAddCurrentTaskToDelayedList+0x98>)
 8004508:	f7fe fa7f 	bl	8002a0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800450c:	e026      	b.n	800455c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4413      	add	r3, r2
 8004514:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004516:	4b14      	ldr	r3, [pc, #80]	; (8004568 <prvAddCurrentTaskToDelayedList+0x94>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	429a      	cmp	r2, r3
 8004524:	d209      	bcs.n	800453a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004526:	4b12      	ldr	r3, [pc, #72]	; (8004570 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	4b0f      	ldr	r3, [pc, #60]	; (8004568 <prvAddCurrentTaskToDelayedList+0x94>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	3304      	adds	r3, #4
 8004530:	4619      	mov	r1, r3
 8004532:	4610      	mov	r0, r2
 8004534:	f7fe fa8d 	bl	8002a52 <vListInsert>
}
 8004538:	e010      	b.n	800455c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800453a:	4b0e      	ldr	r3, [pc, #56]	; (8004574 <prvAddCurrentTaskToDelayedList+0xa0>)
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	4b0a      	ldr	r3, [pc, #40]	; (8004568 <prvAddCurrentTaskToDelayedList+0x94>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	3304      	adds	r3, #4
 8004544:	4619      	mov	r1, r3
 8004546:	4610      	mov	r0, r2
 8004548:	f7fe fa83 	bl	8002a52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800454c:	4b0a      	ldr	r3, [pc, #40]	; (8004578 <prvAddCurrentTaskToDelayedList+0xa4>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	429a      	cmp	r2, r3
 8004554:	d202      	bcs.n	800455c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004556:	4a08      	ldr	r2, [pc, #32]	; (8004578 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	6013      	str	r3, [r2, #0]
}
 800455c:	bf00      	nop
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	200014f8 	.word	0x200014f8
 8004568:	20001020 	.word	0x20001020
 800456c:	200014e0 	.word	0x200014e0
 8004570:	200014b0 	.word	0x200014b0
 8004574:	200014ac 	.word	0x200014ac
 8004578:	20001514 	.word	0x20001514

0800457c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b08a      	sub	sp, #40	; 0x28
 8004580:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004582:	2300      	movs	r3, #0
 8004584:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004586:	f000 fb07 	bl	8004b98 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800458a:	4b1c      	ldr	r3, [pc, #112]	; (80045fc <xTimerCreateTimerTask+0x80>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d021      	beq.n	80045d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004592:	2300      	movs	r3, #0
 8004594:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004596:	2300      	movs	r3, #0
 8004598:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800459a:	1d3a      	adds	r2, r7, #4
 800459c:	f107 0108 	add.w	r1, r7, #8
 80045a0:	f107 030c 	add.w	r3, r7, #12
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7fe f9e9 	bl	800297c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80045aa:	6879      	ldr	r1, [r7, #4]
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	9202      	str	r2, [sp, #8]
 80045b2:	9301      	str	r3, [sp, #4]
 80045b4:	2302      	movs	r3, #2
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	2300      	movs	r3, #0
 80045ba:	460a      	mov	r2, r1
 80045bc:	4910      	ldr	r1, [pc, #64]	; (8004600 <xTimerCreateTimerTask+0x84>)
 80045be:	4811      	ldr	r0, [pc, #68]	; (8004604 <xTimerCreateTimerTask+0x88>)
 80045c0:	f7fe ff96 	bl	80034f0 <xTaskCreateStatic>
 80045c4:	4603      	mov	r3, r0
 80045c6:	4a10      	ldr	r2, [pc, #64]	; (8004608 <xTimerCreateTimerTask+0x8c>)
 80045c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80045ca:	4b0f      	ldr	r3, [pc, #60]	; (8004608 <xTimerCreateTimerTask+0x8c>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80045d2:	2301      	movs	r3, #1
 80045d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d10a      	bne.n	80045f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80045dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e0:	f383 8811 	msr	BASEPRI, r3
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	613b      	str	r3, [r7, #16]
}
 80045ee:	bf00      	nop
 80045f0:	e7fe      	b.n	80045f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80045f2:	697b      	ldr	r3, [r7, #20]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3718      	adds	r7, #24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	20001550 	.word	0x20001550
 8004600:	0800b080 	.word	0x0800b080
 8004604:	08004741 	.word	0x08004741
 8004608:	20001554 	.word	0x20001554

0800460c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b08a      	sub	sp, #40	; 0x28
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
 8004618:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800461a:	2300      	movs	r3, #0
 800461c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10a      	bne.n	800463a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004628:	f383 8811 	msr	BASEPRI, r3
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	623b      	str	r3, [r7, #32]
}
 8004636:	bf00      	nop
 8004638:	e7fe      	b.n	8004638 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800463a:	4b1a      	ldr	r3, [pc, #104]	; (80046a4 <xTimerGenericCommand+0x98>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d02a      	beq.n	8004698 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	2b05      	cmp	r3, #5
 8004652:	dc18      	bgt.n	8004686 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004654:	f7ff fd7c 	bl	8004150 <xTaskGetSchedulerState>
 8004658:	4603      	mov	r3, r0
 800465a:	2b02      	cmp	r3, #2
 800465c:	d109      	bne.n	8004672 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800465e:	4b11      	ldr	r3, [pc, #68]	; (80046a4 <xTimerGenericCommand+0x98>)
 8004660:	6818      	ldr	r0, [r3, #0]
 8004662:	f107 0110 	add.w	r1, r7, #16
 8004666:	2300      	movs	r3, #0
 8004668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800466a:	f7fe fb59 	bl	8002d20 <xQueueGenericSend>
 800466e:	6278      	str	r0, [r7, #36]	; 0x24
 8004670:	e012      	b.n	8004698 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004672:	4b0c      	ldr	r3, [pc, #48]	; (80046a4 <xTimerGenericCommand+0x98>)
 8004674:	6818      	ldr	r0, [r3, #0]
 8004676:	f107 0110 	add.w	r1, r7, #16
 800467a:	2300      	movs	r3, #0
 800467c:	2200      	movs	r2, #0
 800467e:	f7fe fb4f 	bl	8002d20 <xQueueGenericSend>
 8004682:	6278      	str	r0, [r7, #36]	; 0x24
 8004684:	e008      	b.n	8004698 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004686:	4b07      	ldr	r3, [pc, #28]	; (80046a4 <xTimerGenericCommand+0x98>)
 8004688:	6818      	ldr	r0, [r3, #0]
 800468a:	f107 0110 	add.w	r1, r7, #16
 800468e:	2300      	movs	r3, #0
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	f7fe fc43 	bl	8002f1c <xQueueGenericSendFromISR>
 8004696:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800469a:	4618      	mov	r0, r3
 800469c:	3728      	adds	r7, #40	; 0x28
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	20001550 	.word	0x20001550

080046a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b088      	sub	sp, #32
 80046ac:	af02      	add	r7, sp, #8
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046b2:	4b22      	ldr	r3, [pc, #136]	; (800473c <prvProcessExpiredTimer+0x94>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	3304      	adds	r3, #4
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7fe f9ff 	bl	8002ac4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046cc:	f003 0304 	and.w	r3, r3, #4
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d022      	beq.n	800471a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	699a      	ldr	r2, [r3, #24]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	18d1      	adds	r1, r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	6978      	ldr	r0, [r7, #20]
 80046e2:	f000 f8d1 	bl	8004888 <prvInsertTimerInActiveList>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d01f      	beq.n	800472c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80046ec:	2300      	movs	r3, #0
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	2300      	movs	r3, #0
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	2100      	movs	r1, #0
 80046f6:	6978      	ldr	r0, [r7, #20]
 80046f8:	f7ff ff88 	bl	800460c <xTimerGenericCommand>
 80046fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d113      	bne.n	800472c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004708:	f383 8811 	msr	BASEPRI, r3
 800470c:	f3bf 8f6f 	isb	sy
 8004710:	f3bf 8f4f 	dsb	sy
 8004714:	60fb      	str	r3, [r7, #12]
}
 8004716:	bf00      	nop
 8004718:	e7fe      	b.n	8004718 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004720:	f023 0301 	bic.w	r3, r3, #1
 8004724:	b2da      	uxtb	r2, r3
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	6a1b      	ldr	r3, [r3, #32]
 8004730:	6978      	ldr	r0, [r7, #20]
 8004732:	4798      	blx	r3
}
 8004734:	bf00      	nop
 8004736:	3718      	adds	r7, #24
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	20001548 	.word	0x20001548

08004740 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004748:	f107 0308 	add.w	r3, r7, #8
 800474c:	4618      	mov	r0, r3
 800474e:	f000 f857 	bl	8004800 <prvGetNextExpireTime>
 8004752:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	4619      	mov	r1, r3
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f000 f803 	bl	8004764 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800475e:	f000 f8d5 	bl	800490c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004762:	e7f1      	b.n	8004748 <prvTimerTask+0x8>

08004764 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800476e:	f7ff f8fb 	bl	8003968 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004772:	f107 0308 	add.w	r3, r7, #8
 8004776:	4618      	mov	r0, r3
 8004778:	f000 f866 	bl	8004848 <prvSampleTimeNow>
 800477c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d130      	bne.n	80047e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10a      	bne.n	80047a0 <prvProcessTimerOrBlockTask+0x3c>
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	429a      	cmp	r2, r3
 8004790:	d806      	bhi.n	80047a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004792:	f7ff f8f7 	bl	8003984 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004796:	68f9      	ldr	r1, [r7, #12]
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7ff ff85 	bl	80046a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800479e:	e024      	b.n	80047ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d008      	beq.n	80047b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80047a6:	4b13      	ldr	r3, [pc, #76]	; (80047f4 <prvProcessTimerOrBlockTask+0x90>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <prvProcessTimerOrBlockTask+0x50>
 80047b0:	2301      	movs	r3, #1
 80047b2:	e000      	b.n	80047b6 <prvProcessTimerOrBlockTask+0x52>
 80047b4:	2300      	movs	r3, #0
 80047b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80047b8:	4b0f      	ldr	r3, [pc, #60]	; (80047f8 <prvProcessTimerOrBlockTask+0x94>)
 80047ba:	6818      	ldr	r0, [r3, #0]
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	4619      	mov	r1, r3
 80047c6:	f7fe fe5f 	bl	8003488 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80047ca:	f7ff f8db 	bl	8003984 <xTaskResumeAll>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10a      	bne.n	80047ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80047d4:	4b09      	ldr	r3, [pc, #36]	; (80047fc <prvProcessTimerOrBlockTask+0x98>)
 80047d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047da:	601a      	str	r2, [r3, #0]
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	f3bf 8f6f 	isb	sy
}
 80047e4:	e001      	b.n	80047ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80047e6:	f7ff f8cd 	bl	8003984 <xTaskResumeAll>
}
 80047ea:	bf00      	nop
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	2000154c 	.word	0x2000154c
 80047f8:	20001550 	.word	0x20001550
 80047fc:	e000ed04 	.word	0xe000ed04

08004800 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004808:	4b0e      	ldr	r3, [pc, #56]	; (8004844 <prvGetNextExpireTime+0x44>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <prvGetNextExpireTime+0x16>
 8004812:	2201      	movs	r2, #1
 8004814:	e000      	b.n	8004818 <prvGetNextExpireTime+0x18>
 8004816:	2200      	movs	r2, #0
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d105      	bne.n	8004830 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004824:	4b07      	ldr	r3, [pc, #28]	; (8004844 <prvGetNextExpireTime+0x44>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	60fb      	str	r3, [r7, #12]
 800482e:	e001      	b.n	8004834 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004830:	2300      	movs	r3, #0
 8004832:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004834:	68fb      	ldr	r3, [r7, #12]
}
 8004836:	4618      	mov	r0, r3
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	20001548 	.word	0x20001548

08004848 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004850:	f7ff f936 	bl	8003ac0 <xTaskGetTickCount>
 8004854:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004856:	4b0b      	ldr	r3, [pc, #44]	; (8004884 <prvSampleTimeNow+0x3c>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	429a      	cmp	r2, r3
 800485e:	d205      	bcs.n	800486c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004860:	f000 f936 	bl	8004ad0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	601a      	str	r2, [r3, #0]
 800486a:	e002      	b.n	8004872 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004872:	4a04      	ldr	r2, [pc, #16]	; (8004884 <prvSampleTimeNow+0x3c>)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004878:	68fb      	ldr	r3, [r7, #12]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	20001558 	.word	0x20001558

08004888 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
 8004894:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004896:	2300      	movs	r3, #0
 8004898:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d812      	bhi.n	80048d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	1ad2      	subs	r2, r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d302      	bcc.n	80048c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80048bc:	2301      	movs	r3, #1
 80048be:	617b      	str	r3, [r7, #20]
 80048c0:	e01b      	b.n	80048fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80048c2:	4b10      	ldr	r3, [pc, #64]	; (8004904 <prvInsertTimerInActiveList+0x7c>)
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	3304      	adds	r3, #4
 80048ca:	4619      	mov	r1, r3
 80048cc:	4610      	mov	r0, r2
 80048ce:	f7fe f8c0 	bl	8002a52 <vListInsert>
 80048d2:	e012      	b.n	80048fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d206      	bcs.n	80048ea <prvInsertTimerInActiveList+0x62>
 80048dc:	68ba      	ldr	r2, [r7, #8]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d302      	bcc.n	80048ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80048e4:	2301      	movs	r3, #1
 80048e6:	617b      	str	r3, [r7, #20]
 80048e8:	e007      	b.n	80048fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80048ea:	4b07      	ldr	r3, [pc, #28]	; (8004908 <prvInsertTimerInActiveList+0x80>)
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	3304      	adds	r3, #4
 80048f2:	4619      	mov	r1, r3
 80048f4:	4610      	mov	r0, r2
 80048f6:	f7fe f8ac 	bl	8002a52 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80048fa:	697b      	ldr	r3, [r7, #20]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3718      	adds	r7, #24
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	2000154c 	.word	0x2000154c
 8004908:	20001548 	.word	0x20001548

0800490c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b08e      	sub	sp, #56	; 0x38
 8004910:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004912:	e0ca      	b.n	8004aaa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	da18      	bge.n	800494c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800491a:	1d3b      	adds	r3, r7, #4
 800491c:	3304      	adds	r3, #4
 800491e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10a      	bne.n	800493c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492a:	f383 8811 	msr	BASEPRI, r3
 800492e:	f3bf 8f6f 	isb	sy
 8004932:	f3bf 8f4f 	dsb	sy
 8004936:	61fb      	str	r3, [r7, #28]
}
 8004938:	bf00      	nop
 800493a:	e7fe      	b.n	800493a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800493c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004942:	6850      	ldr	r0, [r2, #4]
 8004944:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004946:	6892      	ldr	r2, [r2, #8]
 8004948:	4611      	mov	r1, r2
 800494a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	f2c0 80aa 	blt.w	8004aa8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d004      	beq.n	800496a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004962:	3304      	adds	r3, #4
 8004964:	4618      	mov	r0, r3
 8004966:	f7fe f8ad 	bl	8002ac4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800496a:	463b      	mov	r3, r7
 800496c:	4618      	mov	r0, r3
 800496e:	f7ff ff6b 	bl	8004848 <prvSampleTimeNow>
 8004972:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b09      	cmp	r3, #9
 8004978:	f200 8097 	bhi.w	8004aaa <prvProcessReceivedCommands+0x19e>
 800497c:	a201      	add	r2, pc, #4	; (adr r2, 8004984 <prvProcessReceivedCommands+0x78>)
 800497e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004982:	bf00      	nop
 8004984:	080049ad 	.word	0x080049ad
 8004988:	080049ad 	.word	0x080049ad
 800498c:	080049ad 	.word	0x080049ad
 8004990:	08004a21 	.word	0x08004a21
 8004994:	08004a35 	.word	0x08004a35
 8004998:	08004a7f 	.word	0x08004a7f
 800499c:	080049ad 	.word	0x080049ad
 80049a0:	080049ad 	.word	0x080049ad
 80049a4:	08004a21 	.word	0x08004a21
 80049a8:	08004a35 	.word	0x08004a35
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80049ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049b2:	f043 0301 	orr.w	r3, r3, #1
 80049b6:	b2da      	uxtb	r2, r3
 80049b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	18d1      	adds	r1, r2, r3
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049cc:	f7ff ff5c 	bl	8004888 <prvInsertTimerInActiveList>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d069      	beq.n	8004aaa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80049de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d05e      	beq.n	8004aaa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	441a      	add	r2, r3
 80049f4:	2300      	movs	r3, #0
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	2300      	movs	r3, #0
 80049fa:	2100      	movs	r1, #0
 80049fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049fe:	f7ff fe05 	bl	800460c <xTimerGenericCommand>
 8004a02:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004a04:	6a3b      	ldr	r3, [r7, #32]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d14f      	bne.n	8004aaa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0e:	f383 8811 	msr	BASEPRI, r3
 8004a12:	f3bf 8f6f 	isb	sy
 8004a16:	f3bf 8f4f 	dsb	sy
 8004a1a:	61bb      	str	r3, [r7, #24]
}
 8004a1c:	bf00      	nop
 8004a1e:	e7fe      	b.n	8004a1e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a26:	f023 0301 	bic.w	r3, r3, #1
 8004a2a:	b2da      	uxtb	r2, r3
 8004a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004a32:	e03a      	b.n	8004aaa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a3a:	f043 0301 	orr.w	r3, r3, #1
 8004a3e:	b2da      	uxtb	r2, r3
 8004a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d10a      	bne.n	8004a6a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a58:	f383 8811 	msr	BASEPRI, r3
 8004a5c:	f3bf 8f6f 	isb	sy
 8004a60:	f3bf 8f4f 	dsb	sy
 8004a64:	617b      	str	r3, [r7, #20]
}
 8004a66:	bf00      	nop
 8004a68:	e7fe      	b.n	8004a68 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6c:	699a      	ldr	r2, [r3, #24]
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	18d1      	adds	r1, r2, r3
 8004a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a78:	f7ff ff06 	bl	8004888 <prvInsertTimerInActiveList>
					break;
 8004a7c:	e015      	b.n	8004aaa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d103      	bne.n	8004a94 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004a8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a8e:	f000 fbdf 	bl	8005250 <vPortFree>
 8004a92:	e00a      	b.n	8004aaa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a9a:	f023 0301 	bic.w	r3, r3, #1
 8004a9e:	b2da      	uxtb	r2, r3
 8004aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004aa6:	e000      	b.n	8004aaa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004aa8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004aaa:	4b08      	ldr	r3, [pc, #32]	; (8004acc <prvProcessReceivedCommands+0x1c0>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	1d39      	adds	r1, r7, #4
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fe face 	bl	8003054 <xQueueReceive>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f47f af2a 	bne.w	8004914 <prvProcessReceivedCommands+0x8>
	}
}
 8004ac0:	bf00      	nop
 8004ac2:	bf00      	nop
 8004ac4:	3730      	adds	r7, #48	; 0x30
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	20001550 	.word	0x20001550

08004ad0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b088      	sub	sp, #32
 8004ad4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ad6:	e048      	b.n	8004b6a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ad8:	4b2d      	ldr	r3, [pc, #180]	; (8004b90 <prvSwitchTimerLists+0xc0>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ae2:	4b2b      	ldr	r3, [pc, #172]	; (8004b90 <prvSwitchTimerLists+0xc0>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	3304      	adds	r3, #4
 8004af0:	4618      	mov	r0, r3
 8004af2:	f7fd ffe7 	bl	8002ac4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d02e      	beq.n	8004b6a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	4413      	add	r3, r2
 8004b14:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d90e      	bls.n	8004b3c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b2a:	4b19      	ldr	r3, [pc, #100]	; (8004b90 <prvSwitchTimerLists+0xc0>)
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	3304      	adds	r3, #4
 8004b32:	4619      	mov	r1, r3
 8004b34:	4610      	mov	r0, r2
 8004b36:	f7fd ff8c 	bl	8002a52 <vListInsert>
 8004b3a:	e016      	b.n	8004b6a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	9300      	str	r3, [sp, #0]
 8004b40:	2300      	movs	r3, #0
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	2100      	movs	r1, #0
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f7ff fd60 	bl	800460c <xTimerGenericCommand>
 8004b4c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10a      	bne.n	8004b6a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b58:	f383 8811 	msr	BASEPRI, r3
 8004b5c:	f3bf 8f6f 	isb	sy
 8004b60:	f3bf 8f4f 	dsb	sy
 8004b64:	603b      	str	r3, [r7, #0]
}
 8004b66:	bf00      	nop
 8004b68:	e7fe      	b.n	8004b68 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b6a:	4b09      	ldr	r3, [pc, #36]	; (8004b90 <prvSwitchTimerLists+0xc0>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1b1      	bne.n	8004ad8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004b74:	4b06      	ldr	r3, [pc, #24]	; (8004b90 <prvSwitchTimerLists+0xc0>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004b7a:	4b06      	ldr	r3, [pc, #24]	; (8004b94 <prvSwitchTimerLists+0xc4>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a04      	ldr	r2, [pc, #16]	; (8004b90 <prvSwitchTimerLists+0xc0>)
 8004b80:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004b82:	4a04      	ldr	r2, [pc, #16]	; (8004b94 <prvSwitchTimerLists+0xc4>)
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	6013      	str	r3, [r2, #0]
}
 8004b88:	bf00      	nop
 8004b8a:	3718      	adds	r7, #24
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	20001548 	.word	0x20001548
 8004b94:	2000154c 	.word	0x2000154c

08004b98 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004b9e:	f000 f969 	bl	8004e74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004ba2:	4b15      	ldr	r3, [pc, #84]	; (8004bf8 <prvCheckForValidListAndQueue+0x60>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d120      	bne.n	8004bec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004baa:	4814      	ldr	r0, [pc, #80]	; (8004bfc <prvCheckForValidListAndQueue+0x64>)
 8004bac:	f7fd ff00 	bl	80029b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004bb0:	4813      	ldr	r0, [pc, #76]	; (8004c00 <prvCheckForValidListAndQueue+0x68>)
 8004bb2:	f7fd fefd 	bl	80029b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004bb6:	4b13      	ldr	r3, [pc, #76]	; (8004c04 <prvCheckForValidListAndQueue+0x6c>)
 8004bb8:	4a10      	ldr	r2, [pc, #64]	; (8004bfc <prvCheckForValidListAndQueue+0x64>)
 8004bba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004bbc:	4b12      	ldr	r3, [pc, #72]	; (8004c08 <prvCheckForValidListAndQueue+0x70>)
 8004bbe:	4a10      	ldr	r2, [pc, #64]	; (8004c00 <prvCheckForValidListAndQueue+0x68>)
 8004bc0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	9300      	str	r3, [sp, #0]
 8004bc6:	4b11      	ldr	r3, [pc, #68]	; (8004c0c <prvCheckForValidListAndQueue+0x74>)
 8004bc8:	4a11      	ldr	r2, [pc, #68]	; (8004c10 <prvCheckForValidListAndQueue+0x78>)
 8004bca:	2110      	movs	r1, #16
 8004bcc:	200a      	movs	r0, #10
 8004bce:	f7fe f80b 	bl	8002be8 <xQueueGenericCreateStatic>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	4a08      	ldr	r2, [pc, #32]	; (8004bf8 <prvCheckForValidListAndQueue+0x60>)
 8004bd6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004bd8:	4b07      	ldr	r3, [pc, #28]	; (8004bf8 <prvCheckForValidListAndQueue+0x60>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d005      	beq.n	8004bec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004be0:	4b05      	ldr	r3, [pc, #20]	; (8004bf8 <prvCheckForValidListAndQueue+0x60>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	490b      	ldr	r1, [pc, #44]	; (8004c14 <prvCheckForValidListAndQueue+0x7c>)
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7fe fc24 	bl	8003434 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004bec:	f000 f972 	bl	8004ed4 <vPortExitCritical>
}
 8004bf0:	bf00      	nop
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	20001550 	.word	0x20001550
 8004bfc:	20001520 	.word	0x20001520
 8004c00:	20001534 	.word	0x20001534
 8004c04:	20001548 	.word	0x20001548
 8004c08:	2000154c 	.word	0x2000154c
 8004c0c:	200015fc 	.word	0x200015fc
 8004c10:	2000155c 	.word	0x2000155c
 8004c14:	0800b088 	.word	0x0800b088

08004c18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	3b04      	subs	r3, #4
 8004c28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	3b04      	subs	r3, #4
 8004c36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f023 0201 	bic.w	r2, r3, #1
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	3b04      	subs	r3, #4
 8004c46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004c48:	4a0c      	ldr	r2, [pc, #48]	; (8004c7c <pxPortInitialiseStack+0x64>)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	3b14      	subs	r3, #20
 8004c52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	3b04      	subs	r3, #4
 8004c5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f06f 0202 	mvn.w	r2, #2
 8004c66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	3b20      	subs	r3, #32
 8004c6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3714      	adds	r7, #20
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr
 8004c7c:	08004c81 	.word	0x08004c81

08004c80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004c86:	2300      	movs	r3, #0
 8004c88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004c8a:	4b12      	ldr	r3, [pc, #72]	; (8004cd4 <prvTaskExitError+0x54>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c92:	d00a      	beq.n	8004caa <prvTaskExitError+0x2a>
	__asm volatile
 8004c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c98:	f383 8811 	msr	BASEPRI, r3
 8004c9c:	f3bf 8f6f 	isb	sy
 8004ca0:	f3bf 8f4f 	dsb	sy
 8004ca4:	60fb      	str	r3, [r7, #12]
}
 8004ca6:	bf00      	nop
 8004ca8:	e7fe      	b.n	8004ca8 <prvTaskExitError+0x28>
	__asm volatile
 8004caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cae:	f383 8811 	msr	BASEPRI, r3
 8004cb2:	f3bf 8f6f 	isb	sy
 8004cb6:	f3bf 8f4f 	dsb	sy
 8004cba:	60bb      	str	r3, [r7, #8]
}
 8004cbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004cbe:	bf00      	nop
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d0fc      	beq.n	8004cc0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004cc6:	bf00      	nop
 8004cc8:	bf00      	nop
 8004cca:	3714      	adds	r7, #20
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	20000060 	.word	0x20000060
	...

08004ce0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ce0:	4b07      	ldr	r3, [pc, #28]	; (8004d00 <pxCurrentTCBConst2>)
 8004ce2:	6819      	ldr	r1, [r3, #0]
 8004ce4:	6808      	ldr	r0, [r1, #0]
 8004ce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cea:	f380 8809 	msr	PSP, r0
 8004cee:	f3bf 8f6f 	isb	sy
 8004cf2:	f04f 0000 	mov.w	r0, #0
 8004cf6:	f380 8811 	msr	BASEPRI, r0
 8004cfa:	4770      	bx	lr
 8004cfc:	f3af 8000 	nop.w

08004d00 <pxCurrentTCBConst2>:
 8004d00:	20001020 	.word	0x20001020
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d04:	bf00      	nop
 8004d06:	bf00      	nop

08004d08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004d08:	4808      	ldr	r0, [pc, #32]	; (8004d2c <prvPortStartFirstTask+0x24>)
 8004d0a:	6800      	ldr	r0, [r0, #0]
 8004d0c:	6800      	ldr	r0, [r0, #0]
 8004d0e:	f380 8808 	msr	MSP, r0
 8004d12:	f04f 0000 	mov.w	r0, #0
 8004d16:	f380 8814 	msr	CONTROL, r0
 8004d1a:	b662      	cpsie	i
 8004d1c:	b661      	cpsie	f
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	df00      	svc	0
 8004d28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004d2a:	bf00      	nop
 8004d2c:	e000ed08 	.word	0xe000ed08

08004d30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004d36:	4b46      	ldr	r3, [pc, #280]	; (8004e50 <xPortStartScheduler+0x120>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a46      	ldr	r2, [pc, #280]	; (8004e54 <xPortStartScheduler+0x124>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d10a      	bne.n	8004d56 <xPortStartScheduler+0x26>
	__asm volatile
 8004d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d44:	f383 8811 	msr	BASEPRI, r3
 8004d48:	f3bf 8f6f 	isb	sy
 8004d4c:	f3bf 8f4f 	dsb	sy
 8004d50:	613b      	str	r3, [r7, #16]
}
 8004d52:	bf00      	nop
 8004d54:	e7fe      	b.n	8004d54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004d56:	4b3e      	ldr	r3, [pc, #248]	; (8004e50 <xPortStartScheduler+0x120>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a3f      	ldr	r2, [pc, #252]	; (8004e58 <xPortStartScheduler+0x128>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d10a      	bne.n	8004d76 <xPortStartScheduler+0x46>
	__asm volatile
 8004d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d64:	f383 8811 	msr	BASEPRI, r3
 8004d68:	f3bf 8f6f 	isb	sy
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	60fb      	str	r3, [r7, #12]
}
 8004d72:	bf00      	nop
 8004d74:	e7fe      	b.n	8004d74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004d76:	4b39      	ldr	r3, [pc, #228]	; (8004e5c <xPortStartScheduler+0x12c>)
 8004d78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	22ff      	movs	r2, #255	; 0xff
 8004d86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004d90:	78fb      	ldrb	r3, [r7, #3]
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	4b31      	ldr	r3, [pc, #196]	; (8004e60 <xPortStartScheduler+0x130>)
 8004d9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004d9e:	4b31      	ldr	r3, [pc, #196]	; (8004e64 <xPortStartScheduler+0x134>)
 8004da0:	2207      	movs	r2, #7
 8004da2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004da4:	e009      	b.n	8004dba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004da6:	4b2f      	ldr	r3, [pc, #188]	; (8004e64 <xPortStartScheduler+0x134>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	3b01      	subs	r3, #1
 8004dac:	4a2d      	ldr	r2, [pc, #180]	; (8004e64 <xPortStartScheduler+0x134>)
 8004dae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004db0:	78fb      	ldrb	r3, [r7, #3]
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	005b      	lsls	r3, r3, #1
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004dba:	78fb      	ldrb	r3, [r7, #3]
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc2:	2b80      	cmp	r3, #128	; 0x80
 8004dc4:	d0ef      	beq.n	8004da6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004dc6:	4b27      	ldr	r3, [pc, #156]	; (8004e64 <xPortStartScheduler+0x134>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f1c3 0307 	rsb	r3, r3, #7
 8004dce:	2b04      	cmp	r3, #4
 8004dd0:	d00a      	beq.n	8004de8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd6:	f383 8811 	msr	BASEPRI, r3
 8004dda:	f3bf 8f6f 	isb	sy
 8004dde:	f3bf 8f4f 	dsb	sy
 8004de2:	60bb      	str	r3, [r7, #8]
}
 8004de4:	bf00      	nop
 8004de6:	e7fe      	b.n	8004de6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004de8:	4b1e      	ldr	r3, [pc, #120]	; (8004e64 <xPortStartScheduler+0x134>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	021b      	lsls	r3, r3, #8
 8004dee:	4a1d      	ldr	r2, [pc, #116]	; (8004e64 <xPortStartScheduler+0x134>)
 8004df0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004df2:	4b1c      	ldr	r3, [pc, #112]	; (8004e64 <xPortStartScheduler+0x134>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004dfa:	4a1a      	ldr	r2, [pc, #104]	; (8004e64 <xPortStartScheduler+0x134>)
 8004dfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e06:	4b18      	ldr	r3, [pc, #96]	; (8004e68 <xPortStartScheduler+0x138>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a17      	ldr	r2, [pc, #92]	; (8004e68 <xPortStartScheduler+0x138>)
 8004e0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e12:	4b15      	ldr	r3, [pc, #84]	; (8004e68 <xPortStartScheduler+0x138>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a14      	ldr	r2, [pc, #80]	; (8004e68 <xPortStartScheduler+0x138>)
 8004e18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004e1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004e1e:	f000 f8dd 	bl	8004fdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e22:	4b12      	ldr	r3, [pc, #72]	; (8004e6c <xPortStartScheduler+0x13c>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004e28:	f000 f8fc 	bl	8005024 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004e2c:	4b10      	ldr	r3, [pc, #64]	; (8004e70 <xPortStartScheduler+0x140>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a0f      	ldr	r2, [pc, #60]	; (8004e70 <xPortStartScheduler+0x140>)
 8004e32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004e36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004e38:	f7ff ff66 	bl	8004d08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004e3c:	f7fe ff1c 	bl	8003c78 <vTaskSwitchContext>
	prvTaskExitError();
 8004e40:	f7ff ff1e 	bl	8004c80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3718      	adds	r7, #24
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	e000ed00 	.word	0xe000ed00
 8004e54:	410fc271 	.word	0x410fc271
 8004e58:	410fc270 	.word	0x410fc270
 8004e5c:	e000e400 	.word	0xe000e400
 8004e60:	2000164c 	.word	0x2000164c
 8004e64:	20001650 	.word	0x20001650
 8004e68:	e000ed20 	.word	0xe000ed20
 8004e6c:	20000060 	.word	0x20000060
 8004e70:	e000ef34 	.word	0xe000ef34

08004e74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
	__asm volatile
 8004e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7e:	f383 8811 	msr	BASEPRI, r3
 8004e82:	f3bf 8f6f 	isb	sy
 8004e86:	f3bf 8f4f 	dsb	sy
 8004e8a:	607b      	str	r3, [r7, #4]
}
 8004e8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004e8e:	4b0f      	ldr	r3, [pc, #60]	; (8004ecc <vPortEnterCritical+0x58>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3301      	adds	r3, #1
 8004e94:	4a0d      	ldr	r2, [pc, #52]	; (8004ecc <vPortEnterCritical+0x58>)
 8004e96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004e98:	4b0c      	ldr	r3, [pc, #48]	; (8004ecc <vPortEnterCritical+0x58>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d10f      	bne.n	8004ec0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ea0:	4b0b      	ldr	r3, [pc, #44]	; (8004ed0 <vPortEnterCritical+0x5c>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00a      	beq.n	8004ec0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eae:	f383 8811 	msr	BASEPRI, r3
 8004eb2:	f3bf 8f6f 	isb	sy
 8004eb6:	f3bf 8f4f 	dsb	sy
 8004eba:	603b      	str	r3, [r7, #0]
}
 8004ebc:	bf00      	nop
 8004ebe:	e7fe      	b.n	8004ebe <vPortEnterCritical+0x4a>
	}
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	20000060 	.word	0x20000060
 8004ed0:	e000ed04 	.word	0xe000ed04

08004ed4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004eda:	4b12      	ldr	r3, [pc, #72]	; (8004f24 <vPortExitCritical+0x50>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10a      	bne.n	8004ef8 <vPortExitCritical+0x24>
	__asm volatile
 8004ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee6:	f383 8811 	msr	BASEPRI, r3
 8004eea:	f3bf 8f6f 	isb	sy
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	607b      	str	r3, [r7, #4]
}
 8004ef4:	bf00      	nop
 8004ef6:	e7fe      	b.n	8004ef6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004ef8:	4b0a      	ldr	r3, [pc, #40]	; (8004f24 <vPortExitCritical+0x50>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	3b01      	subs	r3, #1
 8004efe:	4a09      	ldr	r2, [pc, #36]	; (8004f24 <vPortExitCritical+0x50>)
 8004f00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f02:	4b08      	ldr	r3, [pc, #32]	; (8004f24 <vPortExitCritical+0x50>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d105      	bne.n	8004f16 <vPortExitCritical+0x42>
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	f383 8811 	msr	BASEPRI, r3
}
 8004f14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004f16:	bf00      	nop
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	20000060 	.word	0x20000060
	...

08004f30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f30:	f3ef 8009 	mrs	r0, PSP
 8004f34:	f3bf 8f6f 	isb	sy
 8004f38:	4b15      	ldr	r3, [pc, #84]	; (8004f90 <pxCurrentTCBConst>)
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	f01e 0f10 	tst.w	lr, #16
 8004f40:	bf08      	it	eq
 8004f42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004f46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f4a:	6010      	str	r0, [r2, #0]
 8004f4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004f50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004f54:	f380 8811 	msr	BASEPRI, r0
 8004f58:	f3bf 8f4f 	dsb	sy
 8004f5c:	f3bf 8f6f 	isb	sy
 8004f60:	f7fe fe8a 	bl	8003c78 <vTaskSwitchContext>
 8004f64:	f04f 0000 	mov.w	r0, #0
 8004f68:	f380 8811 	msr	BASEPRI, r0
 8004f6c:	bc09      	pop	{r0, r3}
 8004f6e:	6819      	ldr	r1, [r3, #0]
 8004f70:	6808      	ldr	r0, [r1, #0]
 8004f72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f76:	f01e 0f10 	tst.w	lr, #16
 8004f7a:	bf08      	it	eq
 8004f7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004f80:	f380 8809 	msr	PSP, r0
 8004f84:	f3bf 8f6f 	isb	sy
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	f3af 8000 	nop.w

08004f90 <pxCurrentTCBConst>:
 8004f90:	20001020 	.word	0x20001020
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004f94:	bf00      	nop
 8004f96:	bf00      	nop

08004f98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa2:	f383 8811 	msr	BASEPRI, r3
 8004fa6:	f3bf 8f6f 	isb	sy
 8004faa:	f3bf 8f4f 	dsb	sy
 8004fae:	607b      	str	r3, [r7, #4]
}
 8004fb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004fb2:	f7fe fda7 	bl	8003b04 <xTaskIncrementTick>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d003      	beq.n	8004fc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004fbc:	4b06      	ldr	r3, [pc, #24]	; (8004fd8 <xPortSysTickHandler+0x40>)
 8004fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fc2:	601a      	str	r2, [r3, #0]
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	f383 8811 	msr	BASEPRI, r3
}
 8004fce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004fd0:	bf00      	nop
 8004fd2:	3708      	adds	r7, #8
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	e000ed04 	.word	0xe000ed04

08004fdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004fdc:	b480      	push	{r7}
 8004fde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004fe0:	4b0b      	ldr	r3, [pc, #44]	; (8005010 <vPortSetupTimerInterrupt+0x34>)
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004fe6:	4b0b      	ldr	r3, [pc, #44]	; (8005014 <vPortSetupTimerInterrupt+0x38>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004fec:	4b0a      	ldr	r3, [pc, #40]	; (8005018 <vPortSetupTimerInterrupt+0x3c>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a0a      	ldr	r2, [pc, #40]	; (800501c <vPortSetupTimerInterrupt+0x40>)
 8004ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff6:	099b      	lsrs	r3, r3, #6
 8004ff8:	4a09      	ldr	r2, [pc, #36]	; (8005020 <vPortSetupTimerInterrupt+0x44>)
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004ffe:	4b04      	ldr	r3, [pc, #16]	; (8005010 <vPortSetupTimerInterrupt+0x34>)
 8005000:	2207      	movs	r2, #7
 8005002:	601a      	str	r2, [r3, #0]
}
 8005004:	bf00      	nop
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	e000e010 	.word	0xe000e010
 8005014:	e000e018 	.word	0xe000e018
 8005018:	2000006c 	.word	0x2000006c
 800501c:	10624dd3 	.word	0x10624dd3
 8005020:	e000e014 	.word	0xe000e014

08005024 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005024:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005034 <vPortEnableVFP+0x10>
 8005028:	6801      	ldr	r1, [r0, #0]
 800502a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800502e:	6001      	str	r1, [r0, #0]
 8005030:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005032:	bf00      	nop
 8005034:	e000ed88 	.word	0xe000ed88

08005038 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800503e:	f3ef 8305 	mrs	r3, IPSR
 8005042:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2b0f      	cmp	r3, #15
 8005048:	d914      	bls.n	8005074 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800504a:	4a17      	ldr	r2, [pc, #92]	; (80050a8 <vPortValidateInterruptPriority+0x70>)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	4413      	add	r3, r2
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005054:	4b15      	ldr	r3, [pc, #84]	; (80050ac <vPortValidateInterruptPriority+0x74>)
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	7afa      	ldrb	r2, [r7, #11]
 800505a:	429a      	cmp	r2, r3
 800505c:	d20a      	bcs.n	8005074 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800505e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005062:	f383 8811 	msr	BASEPRI, r3
 8005066:	f3bf 8f6f 	isb	sy
 800506a:	f3bf 8f4f 	dsb	sy
 800506e:	607b      	str	r3, [r7, #4]
}
 8005070:	bf00      	nop
 8005072:	e7fe      	b.n	8005072 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005074:	4b0e      	ldr	r3, [pc, #56]	; (80050b0 <vPortValidateInterruptPriority+0x78>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800507c:	4b0d      	ldr	r3, [pc, #52]	; (80050b4 <vPortValidateInterruptPriority+0x7c>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	429a      	cmp	r2, r3
 8005082:	d90a      	bls.n	800509a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005088:	f383 8811 	msr	BASEPRI, r3
 800508c:	f3bf 8f6f 	isb	sy
 8005090:	f3bf 8f4f 	dsb	sy
 8005094:	603b      	str	r3, [r7, #0]
}
 8005096:	bf00      	nop
 8005098:	e7fe      	b.n	8005098 <vPortValidateInterruptPriority+0x60>
	}
 800509a:	bf00      	nop
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	e000e3f0 	.word	0xe000e3f0
 80050ac:	2000164c 	.word	0x2000164c
 80050b0:	e000ed0c 	.word	0xe000ed0c
 80050b4:	20001650 	.word	0x20001650

080050b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b08a      	sub	sp, #40	; 0x28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80050c0:	2300      	movs	r3, #0
 80050c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80050c4:	f7fe fc50 	bl	8003968 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80050c8:	4b5b      	ldr	r3, [pc, #364]	; (8005238 <pvPortMalloc+0x180>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d101      	bne.n	80050d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80050d0:	f000 f920 	bl	8005314 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80050d4:	4b59      	ldr	r3, [pc, #356]	; (800523c <pvPortMalloc+0x184>)
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4013      	ands	r3, r2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f040 8093 	bne.w	8005208 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d01d      	beq.n	8005124 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80050e8:	2208      	movs	r2, #8
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4413      	add	r3, r2
 80050ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f003 0307 	and.w	r3, r3, #7
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d014      	beq.n	8005124 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f023 0307 	bic.w	r3, r3, #7
 8005100:	3308      	adds	r3, #8
 8005102:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f003 0307 	and.w	r3, r3, #7
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00a      	beq.n	8005124 <pvPortMalloc+0x6c>
	__asm volatile
 800510e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005112:	f383 8811 	msr	BASEPRI, r3
 8005116:	f3bf 8f6f 	isb	sy
 800511a:	f3bf 8f4f 	dsb	sy
 800511e:	617b      	str	r3, [r7, #20]
}
 8005120:	bf00      	nop
 8005122:	e7fe      	b.n	8005122 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d06e      	beq.n	8005208 <pvPortMalloc+0x150>
 800512a:	4b45      	ldr	r3, [pc, #276]	; (8005240 <pvPortMalloc+0x188>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	429a      	cmp	r2, r3
 8005132:	d869      	bhi.n	8005208 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005134:	4b43      	ldr	r3, [pc, #268]	; (8005244 <pvPortMalloc+0x18c>)
 8005136:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005138:	4b42      	ldr	r3, [pc, #264]	; (8005244 <pvPortMalloc+0x18c>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800513e:	e004      	b.n	800514a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005142:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	429a      	cmp	r2, r3
 8005152:	d903      	bls.n	800515c <pvPortMalloc+0xa4>
 8005154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1f1      	bne.n	8005140 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800515c:	4b36      	ldr	r3, [pc, #216]	; (8005238 <pvPortMalloc+0x180>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005162:	429a      	cmp	r2, r3
 8005164:	d050      	beq.n	8005208 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005166:	6a3b      	ldr	r3, [r7, #32]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2208      	movs	r2, #8
 800516c:	4413      	add	r3, r2
 800516e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	6a3b      	ldr	r3, [r7, #32]
 8005176:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	1ad2      	subs	r2, r2, r3
 8005180:	2308      	movs	r3, #8
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	429a      	cmp	r2, r3
 8005186:	d91f      	bls.n	80051c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4413      	add	r3, r2
 800518e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	f003 0307 	and.w	r3, r3, #7
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00a      	beq.n	80051b0 <pvPortMalloc+0xf8>
	__asm volatile
 800519a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519e:	f383 8811 	msr	BASEPRI, r3
 80051a2:	f3bf 8f6f 	isb	sy
 80051a6:	f3bf 8f4f 	dsb	sy
 80051aa:	613b      	str	r3, [r7, #16]
}
 80051ac:	bf00      	nop
 80051ae:	e7fe      	b.n	80051ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80051b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b2:	685a      	ldr	r2, [r3, #4]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	1ad2      	subs	r2, r2, r3
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80051bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80051c2:	69b8      	ldr	r0, [r7, #24]
 80051c4:	f000 f908 	bl	80053d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80051c8:	4b1d      	ldr	r3, [pc, #116]	; (8005240 <pvPortMalloc+0x188>)
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	4a1b      	ldr	r2, [pc, #108]	; (8005240 <pvPortMalloc+0x188>)
 80051d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80051d6:	4b1a      	ldr	r3, [pc, #104]	; (8005240 <pvPortMalloc+0x188>)
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	4b1b      	ldr	r3, [pc, #108]	; (8005248 <pvPortMalloc+0x190>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d203      	bcs.n	80051ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80051e2:	4b17      	ldr	r3, [pc, #92]	; (8005240 <pvPortMalloc+0x188>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a18      	ldr	r2, [pc, #96]	; (8005248 <pvPortMalloc+0x190>)
 80051e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	685a      	ldr	r2, [r3, #4]
 80051ee:	4b13      	ldr	r3, [pc, #76]	; (800523c <pvPortMalloc+0x184>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	431a      	orrs	r2, r3
 80051f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80051f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fa:	2200      	movs	r2, #0
 80051fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80051fe:	4b13      	ldr	r3, [pc, #76]	; (800524c <pvPortMalloc+0x194>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	3301      	adds	r3, #1
 8005204:	4a11      	ldr	r2, [pc, #68]	; (800524c <pvPortMalloc+0x194>)
 8005206:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005208:	f7fe fbbc 	bl	8003984 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	f003 0307 	and.w	r3, r3, #7
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00a      	beq.n	800522c <pvPortMalloc+0x174>
	__asm volatile
 8005216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521a:	f383 8811 	msr	BASEPRI, r3
 800521e:	f3bf 8f6f 	isb	sy
 8005222:	f3bf 8f4f 	dsb	sy
 8005226:	60fb      	str	r3, [r7, #12]
}
 8005228:	bf00      	nop
 800522a:	e7fe      	b.n	800522a <pvPortMalloc+0x172>
	return pvReturn;
 800522c:	69fb      	ldr	r3, [r7, #28]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3728      	adds	r7, #40	; 0x28
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	20002214 	.word	0x20002214
 800523c:	20002228 	.word	0x20002228
 8005240:	20002218 	.word	0x20002218
 8005244:	2000220c 	.word	0x2000220c
 8005248:	2000221c 	.word	0x2000221c
 800524c:	20002220 	.word	0x20002220

08005250 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d04d      	beq.n	80052fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005262:	2308      	movs	r3, #8
 8005264:	425b      	negs	r3, r3
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	4413      	add	r3, r2
 800526a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	685a      	ldr	r2, [r3, #4]
 8005274:	4b24      	ldr	r3, [pc, #144]	; (8005308 <vPortFree+0xb8>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4013      	ands	r3, r2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10a      	bne.n	8005294 <vPortFree+0x44>
	__asm volatile
 800527e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	60fb      	str	r3, [r7, #12]
}
 8005290:	bf00      	nop
 8005292:	e7fe      	b.n	8005292 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00a      	beq.n	80052b2 <vPortFree+0x62>
	__asm volatile
 800529c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a0:	f383 8811 	msr	BASEPRI, r3
 80052a4:	f3bf 8f6f 	isb	sy
 80052a8:	f3bf 8f4f 	dsb	sy
 80052ac:	60bb      	str	r3, [r7, #8]
}
 80052ae:	bf00      	nop
 80052b0:	e7fe      	b.n	80052b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	685a      	ldr	r2, [r3, #4]
 80052b6:	4b14      	ldr	r3, [pc, #80]	; (8005308 <vPortFree+0xb8>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4013      	ands	r3, r2
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d01e      	beq.n	80052fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d11a      	bne.n	80052fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	4b0e      	ldr	r3, [pc, #56]	; (8005308 <vPortFree+0xb8>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	43db      	mvns	r3, r3
 80052d2:	401a      	ands	r2, r3
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80052d8:	f7fe fb46 	bl	8003968 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	685a      	ldr	r2, [r3, #4]
 80052e0:	4b0a      	ldr	r3, [pc, #40]	; (800530c <vPortFree+0xbc>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4413      	add	r3, r2
 80052e6:	4a09      	ldr	r2, [pc, #36]	; (800530c <vPortFree+0xbc>)
 80052e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80052ea:	6938      	ldr	r0, [r7, #16]
 80052ec:	f000 f874 	bl	80053d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80052f0:	4b07      	ldr	r3, [pc, #28]	; (8005310 <vPortFree+0xc0>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	3301      	adds	r3, #1
 80052f6:	4a06      	ldr	r2, [pc, #24]	; (8005310 <vPortFree+0xc0>)
 80052f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80052fa:	f7fe fb43 	bl	8003984 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80052fe:	bf00      	nop
 8005300:	3718      	adds	r7, #24
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	20002228 	.word	0x20002228
 800530c:	20002218 	.word	0x20002218
 8005310:	20002224 	.word	0x20002224

08005314 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800531a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800531e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005320:	4b27      	ldr	r3, [pc, #156]	; (80053c0 <prvHeapInit+0xac>)
 8005322:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f003 0307 	and.w	r3, r3, #7
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00c      	beq.n	8005348 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	3307      	adds	r3, #7
 8005332:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f023 0307 	bic.w	r3, r3, #7
 800533a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	4a1f      	ldr	r2, [pc, #124]	; (80053c0 <prvHeapInit+0xac>)
 8005344:	4413      	add	r3, r2
 8005346:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800534c:	4a1d      	ldr	r2, [pc, #116]	; (80053c4 <prvHeapInit+0xb0>)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005352:	4b1c      	ldr	r3, [pc, #112]	; (80053c4 <prvHeapInit+0xb0>)
 8005354:	2200      	movs	r2, #0
 8005356:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	4413      	add	r3, r2
 800535e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005360:	2208      	movs	r2, #8
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	1a9b      	subs	r3, r3, r2
 8005366:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f023 0307 	bic.w	r3, r3, #7
 800536e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	4a15      	ldr	r2, [pc, #84]	; (80053c8 <prvHeapInit+0xb4>)
 8005374:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005376:	4b14      	ldr	r3, [pc, #80]	; (80053c8 <prvHeapInit+0xb4>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2200      	movs	r2, #0
 800537c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800537e:	4b12      	ldr	r3, [pc, #72]	; (80053c8 <prvHeapInit+0xb4>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2200      	movs	r2, #0
 8005384:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	1ad2      	subs	r2, r2, r3
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005394:	4b0c      	ldr	r3, [pc, #48]	; (80053c8 <prvHeapInit+0xb4>)
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	4a0a      	ldr	r2, [pc, #40]	; (80053cc <prvHeapInit+0xb8>)
 80053a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	4a09      	ldr	r2, [pc, #36]	; (80053d0 <prvHeapInit+0xbc>)
 80053aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80053ac:	4b09      	ldr	r3, [pc, #36]	; (80053d4 <prvHeapInit+0xc0>)
 80053ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80053b2:	601a      	str	r2, [r3, #0]
}
 80053b4:	bf00      	nop
 80053b6:	3714      	adds	r7, #20
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr
 80053c0:	20001654 	.word	0x20001654
 80053c4:	2000220c 	.word	0x2000220c
 80053c8:	20002214 	.word	0x20002214
 80053cc:	2000221c 	.word	0x2000221c
 80053d0:	20002218 	.word	0x20002218
 80053d4:	20002228 	.word	0x20002228

080053d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80053e0:	4b28      	ldr	r3, [pc, #160]	; (8005484 <prvInsertBlockIntoFreeList+0xac>)
 80053e2:	60fb      	str	r3, [r7, #12]
 80053e4:	e002      	b.n	80053ec <prvInsertBlockIntoFreeList+0x14>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	60fb      	str	r3, [r7, #12]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d8f7      	bhi.n	80053e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	68ba      	ldr	r2, [r7, #8]
 8005400:	4413      	add	r3, r2
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	429a      	cmp	r2, r3
 8005406:	d108      	bne.n	800541a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	441a      	add	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	441a      	add	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	429a      	cmp	r2, r3
 800542c:	d118      	bne.n	8005460 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	4b15      	ldr	r3, [pc, #84]	; (8005488 <prvInsertBlockIntoFreeList+0xb0>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	429a      	cmp	r2, r3
 8005438:	d00d      	beq.n	8005456 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685a      	ldr	r2, [r3, #4]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	441a      	add	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	601a      	str	r2, [r3, #0]
 8005454:	e008      	b.n	8005468 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005456:	4b0c      	ldr	r3, [pc, #48]	; (8005488 <prvInsertBlockIntoFreeList+0xb0>)
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	601a      	str	r2, [r3, #0]
 800545e:	e003      	b.n	8005468 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	429a      	cmp	r2, r3
 800546e:	d002      	beq.n	8005476 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005476:	bf00      	nop
 8005478:	3714      	adds	r7, #20
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	2000220c 	.word	0x2000220c
 8005488:	20002214 	.word	0x20002214

0800548c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005492:	2300      	movs	r3, #0
 8005494:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set In terrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005496:	2003      	movs	r0, #3
 8005498:	f000 f994 	bl	80057c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800549c:	2000      	movs	r0, #0
 800549e:	f000 f80d 	bl	80054bc <HAL_InitTick>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d002      	beq.n	80054ae <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	71fb      	strb	r3, [r7, #7]
 80054ac:	e001      	b.n	80054b2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80054ae:	f003 ff0f 	bl	80092d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80054b2:	79fb      	ldrb	r3, [r7, #7]
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3708      	adds	r7, #8
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80054c4:	2300      	movs	r3, #0
 80054c6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80054c8:	4b17      	ldr	r3, [pc, #92]	; (8005528 <HAL_InitTick+0x6c>)
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d023      	beq.n	8005518 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80054d0:	4b16      	ldr	r3, [pc, #88]	; (800552c <HAL_InitTick+0x70>)
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	4b14      	ldr	r3, [pc, #80]	; (8005528 <HAL_InitTick+0x6c>)
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	4619      	mov	r1, r3
 80054da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054de:	fbb3 f3f1 	udiv	r3, r3, r1
 80054e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 f9af 	bl	800584a <HAL_SYSTICK_Config>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d10f      	bne.n	8005512 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b0f      	cmp	r3, #15
 80054f6:	d809      	bhi.n	800550c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80054f8:	2200      	movs	r2, #0
 80054fa:	6879      	ldr	r1, [r7, #4]
 80054fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005500:	f000 f96b 	bl	80057da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005504:	4a0a      	ldr	r2, [pc, #40]	; (8005530 <HAL_InitTick+0x74>)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6013      	str	r3, [r2, #0]
 800550a:	e007      	b.n	800551c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	73fb      	strb	r3, [r7, #15]
 8005510:	e004      	b.n	800551c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	73fb      	strb	r3, [r7, #15]
 8005516:	e001      	b.n	800551c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800551c:	7bfb      	ldrb	r3, [r7, #15]
}
 800551e:	4618      	mov	r0, r3
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	20000068 	.word	0x20000068
 800552c:	2000006c 	.word	0x2000006c
 8005530:	20000064 	.word	0x20000064

08005534 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005534:	b480      	push	{r7}
 8005536:	af00      	add	r7, sp, #0
    //return xTaskGetTickCount();
    return uwTick;
 8005538:	4b03      	ldr	r3, [pc, #12]	; (8005548 <HAL_GetTick+0x14>)
 800553a:	681b      	ldr	r3, [r3, #0]
}
 800553c:	4618      	mov	r0, r3
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	2000222c 	.word	0x2000222c

0800554c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005554:	f7ff ffee 	bl	8005534 <HAL_GetTick>
 8005558:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005564:	d005      	beq.n	8005572 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005566:	4b0a      	ldr	r3, [pc, #40]	; (8005590 <HAL_Delay+0x44>)
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	461a      	mov	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4413      	add	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005572:	bf00      	nop
 8005574:	f7ff ffde 	bl	8005534 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	429a      	cmp	r2, r3
 8005582:	d8f7      	bhi.n	8005574 <HAL_Delay+0x28>
  {
  }
}
 8005584:	bf00      	nop
 8005586:	bf00      	nop
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	20000068 	.word	0x20000068

08005594 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8005594:	b480      	push	{r7}
 8005596:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8005598:	4b03      	ldr	r3, [pc, #12]	; (80055a8 <HAL_GetUIDw0+0x14>)
 800559a:	681b      	ldr	r3, [r3, #0]
}
 800559c:	4618      	mov	r0, r3
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	1fff7590 	.word	0x1fff7590

080055ac <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80055ac:	b480      	push	{r7}
 80055ae:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80055b0:	4b03      	ldr	r3, [pc, #12]	; (80055c0 <HAL_GetUIDw1+0x14>)
 80055b2:	681b      	ldr	r3, [r3, #0]
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	1fff7594 	.word	0x1fff7594

080055c4 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80055c4:	b480      	push	{r7}
 80055c6:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80055c8:	4b03      	ldr	r3, [pc, #12]	; (80055d8 <HAL_GetUIDw2+0x14>)
 80055ca:	681b      	ldr	r3, [r3, #0]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop
 80055d8:	1fff7598 	.word	0x1fff7598

080055dc <__NVIC_SetPriorityGrouping>:
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f003 0307 	and.w	r3, r3, #7
 80055ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055ec:	4b0c      	ldr	r3, [pc, #48]	; (8005620 <__NVIC_SetPriorityGrouping+0x44>)
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055f2:	68ba      	ldr	r2, [r7, #8]
 80055f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80055f8:	4013      	ands	r3, r2
 80055fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800560c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800560e:	4a04      	ldr	r2, [pc, #16]	; (8005620 <__NVIC_SetPriorityGrouping+0x44>)
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	60d3      	str	r3, [r2, #12]
}
 8005614:	bf00      	nop
 8005616:	3714      	adds	r7, #20
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr
 8005620:	e000ed00 	.word	0xe000ed00

08005624 <__NVIC_GetPriorityGrouping>:
{
 8005624:	b480      	push	{r7}
 8005626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005628:	4b04      	ldr	r3, [pc, #16]	; (800563c <__NVIC_GetPriorityGrouping+0x18>)
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	0a1b      	lsrs	r3, r3, #8
 800562e:	f003 0307 	and.w	r3, r3, #7
}
 8005632:	4618      	mov	r0, r3
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	e000ed00 	.word	0xe000ed00

08005640 <__NVIC_EnableIRQ>:
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	4603      	mov	r3, r0
 8005648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800564a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800564e:	2b00      	cmp	r3, #0
 8005650:	db0b      	blt.n	800566a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005652:	79fb      	ldrb	r3, [r7, #7]
 8005654:	f003 021f 	and.w	r2, r3, #31
 8005658:	4907      	ldr	r1, [pc, #28]	; (8005678 <__NVIC_EnableIRQ+0x38>)
 800565a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800565e:	095b      	lsrs	r3, r3, #5
 8005660:	2001      	movs	r0, #1
 8005662:	fa00 f202 	lsl.w	r2, r0, r2
 8005666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800566a:	bf00      	nop
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	e000e100 	.word	0xe000e100

0800567c <__NVIC_DisableIRQ>:
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	4603      	mov	r3, r0
 8005684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800568a:	2b00      	cmp	r3, #0
 800568c:	db12      	blt.n	80056b4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800568e:	79fb      	ldrb	r3, [r7, #7]
 8005690:	f003 021f 	and.w	r2, r3, #31
 8005694:	490a      	ldr	r1, [pc, #40]	; (80056c0 <__NVIC_DisableIRQ+0x44>)
 8005696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800569a:	095b      	lsrs	r3, r3, #5
 800569c:	2001      	movs	r0, #1
 800569e:	fa00 f202 	lsl.w	r2, r0, r2
 80056a2:	3320      	adds	r3, #32
 80056a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80056a8:	f3bf 8f4f 	dsb	sy
}
 80056ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80056ae:	f3bf 8f6f 	isb	sy
}
 80056b2:	bf00      	nop
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	e000e100 	.word	0xe000e100

080056c4 <__NVIC_SetPriority>:
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	4603      	mov	r3, r0
 80056cc:	6039      	str	r1, [r7, #0]
 80056ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	db0a      	blt.n	80056ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	b2da      	uxtb	r2, r3
 80056dc:	490c      	ldr	r1, [pc, #48]	; (8005710 <__NVIC_SetPriority+0x4c>)
 80056de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056e2:	0112      	lsls	r2, r2, #4
 80056e4:	b2d2      	uxtb	r2, r2
 80056e6:	440b      	add	r3, r1
 80056e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80056ec:	e00a      	b.n	8005704 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	b2da      	uxtb	r2, r3
 80056f2:	4908      	ldr	r1, [pc, #32]	; (8005714 <__NVIC_SetPriority+0x50>)
 80056f4:	79fb      	ldrb	r3, [r7, #7]
 80056f6:	f003 030f 	and.w	r3, r3, #15
 80056fa:	3b04      	subs	r3, #4
 80056fc:	0112      	lsls	r2, r2, #4
 80056fe:	b2d2      	uxtb	r2, r2
 8005700:	440b      	add	r3, r1
 8005702:	761a      	strb	r2, [r3, #24]
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr
 8005710:	e000e100 	.word	0xe000e100
 8005714:	e000ed00 	.word	0xe000ed00

08005718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005718:	b480      	push	{r7}
 800571a:	b089      	sub	sp, #36	; 0x24
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f003 0307 	and.w	r3, r3, #7
 800572a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	f1c3 0307 	rsb	r3, r3, #7
 8005732:	2b04      	cmp	r3, #4
 8005734:	bf28      	it	cs
 8005736:	2304      	movcs	r3, #4
 8005738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	3304      	adds	r3, #4
 800573e:	2b06      	cmp	r3, #6
 8005740:	d902      	bls.n	8005748 <NVIC_EncodePriority+0x30>
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	3b03      	subs	r3, #3
 8005746:	e000      	b.n	800574a <NVIC_EncodePriority+0x32>
 8005748:	2300      	movs	r3, #0
 800574a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800574c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	fa02 f303 	lsl.w	r3, r2, r3
 8005756:	43da      	mvns	r2, r3
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	401a      	ands	r2, r3
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005760:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	fa01 f303 	lsl.w	r3, r1, r3
 800576a:	43d9      	mvns	r1, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005770:	4313      	orrs	r3, r2
         );
}
 8005772:	4618      	mov	r0, r3
 8005774:	3724      	adds	r7, #36	; 0x24
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
	...

08005780 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	3b01      	subs	r3, #1
 800578c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005790:	d301      	bcc.n	8005796 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005792:	2301      	movs	r3, #1
 8005794:	e00f      	b.n	80057b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005796:	4a0a      	ldr	r2, [pc, #40]	; (80057c0 <SysTick_Config+0x40>)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	3b01      	subs	r3, #1
 800579c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800579e:	210f      	movs	r1, #15
 80057a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057a4:	f7ff ff8e 	bl	80056c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057a8:	4b05      	ldr	r3, [pc, #20]	; (80057c0 <SysTick_Config+0x40>)
 80057aa:	2200      	movs	r2, #0
 80057ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057ae:	4b04      	ldr	r3, [pc, #16]	; (80057c0 <SysTick_Config+0x40>)
 80057b0:	2207      	movs	r2, #7
 80057b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3708      	adds	r7, #8
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	e000e010 	.word	0xe000e010

080057c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7ff ff05 	bl	80055dc <__NVIC_SetPriorityGrouping>
}
 80057d2:	bf00      	nop
 80057d4:	3708      	adds	r7, #8
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b086      	sub	sp, #24
 80057de:	af00      	add	r7, sp, #0
 80057e0:	4603      	mov	r3, r0
 80057e2:	60b9      	str	r1, [r7, #8]
 80057e4:	607a      	str	r2, [r7, #4]
 80057e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80057e8:	2300      	movs	r3, #0
 80057ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80057ec:	f7ff ff1a 	bl	8005624 <__NVIC_GetPriorityGrouping>
 80057f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	68b9      	ldr	r1, [r7, #8]
 80057f6:	6978      	ldr	r0, [r7, #20]
 80057f8:	f7ff ff8e 	bl	8005718 <NVIC_EncodePriority>
 80057fc:	4602      	mov	r2, r0
 80057fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005802:	4611      	mov	r1, r2
 8005804:	4618      	mov	r0, r3
 8005806:	f7ff ff5d 	bl	80056c4 <__NVIC_SetPriority>
}
 800580a:	bf00      	nop
 800580c:	3718      	adds	r7, #24
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b082      	sub	sp, #8
 8005816:	af00      	add	r7, sp, #0
 8005818:	4603      	mov	r3, r0
 800581a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800581c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005820:	4618      	mov	r0, r3
 8005822:	f7ff ff0d 	bl	8005640 <__NVIC_EnableIRQ>
}
 8005826:	bf00      	nop
 8005828:	3708      	adds	r7, #8
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}

0800582e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800582e:	b580      	push	{r7, lr}
 8005830:	b082      	sub	sp, #8
 8005832:	af00      	add	r7, sp, #0
 8005834:	4603      	mov	r3, r0
 8005836:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800583c:	4618      	mov	r0, r3
 800583e:	f7ff ff1d 	bl	800567c <__NVIC_DisableIRQ>
}
 8005842:	bf00      	nop
 8005844:	3708      	adds	r7, #8
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b082      	sub	sp, #8
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f7ff ff94 	bl	8005780 <SysTick_Config>
 8005858:	4603      	mov	r3, r0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3708      	adds	r7, #8
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
	...

08005864 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d101      	bne.n	8005876 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e098      	b.n	80059a8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	461a      	mov	r2, r3
 800587c:	4b4d      	ldr	r3, [pc, #308]	; (80059b4 <HAL_DMA_Init+0x150>)
 800587e:	429a      	cmp	r2, r3
 8005880:	d80f      	bhi.n	80058a2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	461a      	mov	r2, r3
 8005888:	4b4b      	ldr	r3, [pc, #300]	; (80059b8 <HAL_DMA_Init+0x154>)
 800588a:	4413      	add	r3, r2
 800588c:	4a4b      	ldr	r2, [pc, #300]	; (80059bc <HAL_DMA_Init+0x158>)
 800588e:	fba2 2303 	umull	r2, r3, r2, r3
 8005892:	091b      	lsrs	r3, r3, #4
 8005894:	009a      	lsls	r2, r3, #2
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a48      	ldr	r2, [pc, #288]	; (80059c0 <HAL_DMA_Init+0x15c>)
 800589e:	641a      	str	r2, [r3, #64]	; 0x40
 80058a0:	e00e      	b.n	80058c0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	461a      	mov	r2, r3
 80058a8:	4b46      	ldr	r3, [pc, #280]	; (80059c4 <HAL_DMA_Init+0x160>)
 80058aa:	4413      	add	r3, r2
 80058ac:	4a43      	ldr	r2, [pc, #268]	; (80059bc <HAL_DMA_Init+0x158>)
 80058ae:	fba2 2303 	umull	r2, r3, r2, r3
 80058b2:	091b      	lsrs	r3, r3, #4
 80058b4:	009a      	lsls	r2, r3, #2
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a42      	ldr	r2, [pc, #264]	; (80059c8 <HAL_DMA_Init+0x164>)
 80058be:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2202      	movs	r2, #2
 80058c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80058d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80058e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	4313      	orrs	r3, r2
 8005908:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800591a:	d039      	beq.n	8005990 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005920:	4a27      	ldr	r2, [pc, #156]	; (80059c0 <HAL_DMA_Init+0x15c>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d11a      	bne.n	800595c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005926:	4b29      	ldr	r3, [pc, #164]	; (80059cc <HAL_DMA_Init+0x168>)
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800592e:	f003 031c 	and.w	r3, r3, #28
 8005932:	210f      	movs	r1, #15
 8005934:	fa01 f303 	lsl.w	r3, r1, r3
 8005938:	43db      	mvns	r3, r3
 800593a:	4924      	ldr	r1, [pc, #144]	; (80059cc <HAL_DMA_Init+0x168>)
 800593c:	4013      	ands	r3, r2
 800593e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005940:	4b22      	ldr	r3, [pc, #136]	; (80059cc <HAL_DMA_Init+0x168>)
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6859      	ldr	r1, [r3, #4]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800594c:	f003 031c 	and.w	r3, r3, #28
 8005950:	fa01 f303 	lsl.w	r3, r1, r3
 8005954:	491d      	ldr	r1, [pc, #116]	; (80059cc <HAL_DMA_Init+0x168>)
 8005956:	4313      	orrs	r3, r2
 8005958:	600b      	str	r3, [r1, #0]
 800595a:	e019      	b.n	8005990 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800595c:	4b1c      	ldr	r3, [pc, #112]	; (80059d0 <HAL_DMA_Init+0x16c>)
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005964:	f003 031c 	and.w	r3, r3, #28
 8005968:	210f      	movs	r1, #15
 800596a:	fa01 f303 	lsl.w	r3, r1, r3
 800596e:	43db      	mvns	r3, r3
 8005970:	4917      	ldr	r1, [pc, #92]	; (80059d0 <HAL_DMA_Init+0x16c>)
 8005972:	4013      	ands	r3, r2
 8005974:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005976:	4b16      	ldr	r3, [pc, #88]	; (80059d0 <HAL_DMA_Init+0x16c>)
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6859      	ldr	r1, [r3, #4]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005982:	f003 031c 	and.w	r3, r3, #28
 8005986:	fa01 f303 	lsl.w	r3, r1, r3
 800598a:	4911      	ldr	r1, [pc, #68]	; (80059d0 <HAL_DMA_Init+0x16c>)
 800598c:	4313      	orrs	r3, r2
 800598e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3714      	adds	r7, #20
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr
 80059b4:	40020407 	.word	0x40020407
 80059b8:	bffdfff8 	.word	0xbffdfff8
 80059bc:	cccccccd 	.word	0xcccccccd
 80059c0:	40020000 	.word	0x40020000
 80059c4:	bffdfbf8 	.word	0xbffdfbf8
 80059c8:	40020400 	.word	0x40020400
 80059cc:	400200a8 	.word	0x400200a8
 80059d0:	400204a8 	.word	0x400204a8

080059d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
 80059e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059e2:	2300      	movs	r3, #0
 80059e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d101      	bne.n	80059f4 <HAL_DMA_Start_IT+0x20>
 80059f0:	2302      	movs	r3, #2
 80059f2:	e04b      	b.n	8005a8c <HAL_DMA_Start_IT+0xb8>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d13a      	bne.n	8005a7e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f022 0201 	bic.w	r2, r2, #1
 8005a24:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	68b9      	ldr	r1, [r7, #8]
 8005a2c:	68f8      	ldr	r0, [r7, #12]
 8005a2e:	f000 f969 	bl	8005d04 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d008      	beq.n	8005a4c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f042 020e 	orr.w	r2, r2, #14
 8005a48:	601a      	str	r2, [r3, #0]
 8005a4a:	e00f      	b.n	8005a6c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f022 0204 	bic.w	r2, r2, #4
 8005a5a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f042 020a 	orr.w	r2, r2, #10
 8005a6a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f042 0201 	orr.w	r2, r2, #1
 8005a7a:	601a      	str	r2, [r3, #0]
 8005a7c:	e005      	b.n	8005a8a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005a86:	2302      	movs	r3, #2
 8005a88:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3718      	adds	r7, #24
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d005      	beq.n	8005ab8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2204      	movs	r2, #4
 8005ab0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	73fb      	strb	r3, [r7, #15]
 8005ab6:	e029      	b.n	8005b0c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f022 020e 	bic.w	r2, r2, #14
 8005ac6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f022 0201 	bic.w	r2, r2, #1
 8005ad6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005adc:	f003 021c 	and.w	r2, r3, #28
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae4:	2101      	movs	r1, #1
 8005ae6:	fa01 f202 	lsl.w	r2, r1, r2
 8005aea:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d003      	beq.n	8005b0c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	4798      	blx	r3
    }
  }
  return status;
 8005b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b084      	sub	sp, #16
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b32:	f003 031c 	and.w	r3, r3, #28
 8005b36:	2204      	movs	r2, #4
 8005b38:	409a      	lsls	r2, r3
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d026      	beq.n	8005b90 <HAL_DMA_IRQHandler+0x7a>
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	f003 0304 	and.w	r3, r3, #4
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d021      	beq.n	8005b90 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0320 	and.w	r3, r3, #32
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d107      	bne.n	8005b6a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 0204 	bic.w	r2, r2, #4
 8005b68:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b6e:	f003 021c 	and.w	r2, r3, #28
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b76:	2104      	movs	r1, #4
 8005b78:	fa01 f202 	lsl.w	r2, r1, r2
 8005b7c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d071      	beq.n	8005c6a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005b8e:	e06c      	b.n	8005c6a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b94:	f003 031c 	and.w	r3, r3, #28
 8005b98:	2202      	movs	r2, #2
 8005b9a:	409a      	lsls	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d02e      	beq.n	8005c02 <HAL_DMA_IRQHandler+0xec>
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d029      	beq.n	8005c02 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0320 	and.w	r3, r3, #32
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d10b      	bne.n	8005bd4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f022 020a 	bic.w	r2, r2, #10
 8005bca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd8:	f003 021c 	and.w	r2, r3, #28
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be0:	2102      	movs	r1, #2
 8005be2:	fa01 f202 	lsl.w	r2, r1, r2
 8005be6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d038      	beq.n	8005c6a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005c00:	e033      	b.n	8005c6a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c06:	f003 031c 	and.w	r3, r3, #28
 8005c0a:	2208      	movs	r2, #8
 8005c0c:	409a      	lsls	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	4013      	ands	r3, r2
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d02a      	beq.n	8005c6c <HAL_DMA_IRQHandler+0x156>
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	f003 0308 	and.w	r3, r3, #8
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d025      	beq.n	8005c6c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f022 020e 	bic.w	r2, r2, #14
 8005c2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c34:	f003 021c 	and.w	r2, r3, #28
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3c:	2101      	movs	r1, #1
 8005c3e:	fa01 f202 	lsl.w	r2, r1, r2
 8005c42:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d004      	beq.n	8005c6c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005c6a:	bf00      	nop
 8005c6c:	bf00      	nop
}
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	607a      	str	r2, [r7, #4]
 8005c80:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005c82:	2300      	movs	r3, #0
 8005c84:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d101      	bne.n	8005c94 <HAL_DMA_RegisterCallback+0x20>
 8005c90:	2302      	movs	r3, #2
 8005c92:	e031      	b.n	8005cf8 <HAL_DMA_RegisterCallback+0x84>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d120      	bne.n	8005cea <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8005ca8:	7afb      	ldrb	r3, [r7, #11]
 8005caa:	2b03      	cmp	r3, #3
 8005cac:	d81a      	bhi.n	8005ce4 <HAL_DMA_RegisterCallback+0x70>
 8005cae:	a201      	add	r2, pc, #4	; (adr r2, 8005cb4 <HAL_DMA_RegisterCallback+0x40>)
 8005cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb4:	08005cc5 	.word	0x08005cc5
 8005cb8:	08005ccd 	.word	0x08005ccd
 8005cbc:	08005cd5 	.word	0x08005cd5
 8005cc0:	08005cdd 	.word	0x08005cdd
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = pCallback;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	62da      	str	r2, [r3, #44]	; 0x2c
           break;
 8005cca:	e010      	b.n	8005cee <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = pCallback;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	631a      	str	r2, [r3, #48]	; 0x30
           break;
 8005cd2:	e00c      	b.n	8005cee <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = pCallback;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	635a      	str	r2, [r3, #52]	; 0x34
           break;
 8005cda:	e008      	b.n	8005cee <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = pCallback;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 8005ce2:	e004      	b.n	8005cee <HAL_DMA_RegisterCallback+0x7a>

     default:
           status = HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	75fb      	strb	r3, [r7, #23]
           break;
 8005ce8:	e001      	b.n	8005cee <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8005cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	371c      	adds	r7, #28
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
 8005d10:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d16:	f003 021c 	and.w	r2, r3, #28
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1e:	2101      	movs	r1, #1
 8005d20:	fa01 f202 	lsl.w	r2, r1, r2
 8005d24:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	683a      	ldr	r2, [r7, #0]
 8005d2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	2b10      	cmp	r3, #16
 8005d34:	d108      	bne.n	8005d48 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005d46:	e007      	b.n	8005d58 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	60da      	str	r2, [r3, #12]
}
 8005d58:	bf00      	nop
 8005d5a:	3714      	adds	r7, #20
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b087      	sub	sp, #28
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d72:	e154      	b.n	800601e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	2101      	movs	r1, #1
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d80:	4013      	ands	r3, r2
 8005d82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f000 8146 	beq.w	8006018 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f003 0303 	and.w	r3, r3, #3
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d005      	beq.n	8005da4 <HAL_GPIO_Init+0x40>
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	f003 0303 	and.w	r3, r3, #3
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d130      	bne.n	8005e06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	005b      	lsls	r3, r3, #1
 8005dae:	2203      	movs	r2, #3
 8005db0:	fa02 f303 	lsl.w	r3, r2, r3
 8005db4:	43db      	mvns	r3, r3
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	4013      	ands	r3, r2
 8005dba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	68da      	ldr	r2, [r3, #12]
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	005b      	lsls	r3, r3, #1
 8005dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005dda:	2201      	movs	r2, #1
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	fa02 f303 	lsl.w	r3, r2, r3
 8005de2:	43db      	mvns	r3, r3
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	4013      	ands	r3, r2
 8005de8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	091b      	lsrs	r3, r3, #4
 8005df0:	f003 0201 	and.w	r2, r3, #1
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f003 0303 	and.w	r3, r3, #3
 8005e0e:	2b03      	cmp	r3, #3
 8005e10:	d017      	beq.n	8005e42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	005b      	lsls	r3, r3, #1
 8005e1c:	2203      	movs	r2, #3
 8005e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e22:	43db      	mvns	r3, r3
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	4013      	ands	r3, r2
 8005e28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	689a      	ldr	r2, [r3, #8]
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	005b      	lsls	r3, r3, #1
 8005e32:	fa02 f303 	lsl.w	r3, r2, r3
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f003 0303 	and.w	r3, r3, #3
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d123      	bne.n	8005e96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	08da      	lsrs	r2, r3, #3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	3208      	adds	r2, #8
 8005e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	f003 0307 	and.w	r3, r3, #7
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	220f      	movs	r2, #15
 8005e66:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6a:	43db      	mvns	r3, r3
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	4013      	ands	r3, r2
 8005e70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	691a      	ldr	r2, [r3, #16]
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f003 0307 	and.w	r3, r3, #7
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	08da      	lsrs	r2, r3, #3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	3208      	adds	r2, #8
 8005e90:	6939      	ldr	r1, [r7, #16]
 8005e92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	005b      	lsls	r3, r3, #1
 8005ea0:	2203      	movs	r2, #3
 8005ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea6:	43db      	mvns	r3, r3
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	4013      	ands	r3, r2
 8005eac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f003 0203 	and.w	r2, r3, #3
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	005b      	lsls	r3, r3, #1
 8005eba:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f000 80a0 	beq.w	8006018 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ed8:	4b58      	ldr	r3, [pc, #352]	; (800603c <HAL_GPIO_Init+0x2d8>)
 8005eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005edc:	4a57      	ldr	r2, [pc, #348]	; (800603c <HAL_GPIO_Init+0x2d8>)
 8005ede:	f043 0301 	orr.w	r3, r3, #1
 8005ee2:	6613      	str	r3, [r2, #96]	; 0x60
 8005ee4:	4b55      	ldr	r3, [pc, #340]	; (800603c <HAL_GPIO_Init+0x2d8>)
 8005ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ee8:	f003 0301 	and.w	r3, r3, #1
 8005eec:	60bb      	str	r3, [r7, #8]
 8005eee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005ef0:	4a53      	ldr	r2, [pc, #332]	; (8006040 <HAL_GPIO_Init+0x2dc>)
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	089b      	lsrs	r3, r3, #2
 8005ef6:	3302      	adds	r3, #2
 8005ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005efc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	f003 0303 	and.w	r3, r3, #3
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	220f      	movs	r2, #15
 8005f08:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0c:	43db      	mvns	r3, r3
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	4013      	ands	r3, r2
 8005f12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005f1a:	d019      	beq.n	8005f50 <HAL_GPIO_Init+0x1ec>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a49      	ldr	r2, [pc, #292]	; (8006044 <HAL_GPIO_Init+0x2e0>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d013      	beq.n	8005f4c <HAL_GPIO_Init+0x1e8>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a48      	ldr	r2, [pc, #288]	; (8006048 <HAL_GPIO_Init+0x2e4>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d00d      	beq.n	8005f48 <HAL_GPIO_Init+0x1e4>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a47      	ldr	r2, [pc, #284]	; (800604c <HAL_GPIO_Init+0x2e8>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d007      	beq.n	8005f44 <HAL_GPIO_Init+0x1e0>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a46      	ldr	r2, [pc, #280]	; (8006050 <HAL_GPIO_Init+0x2ec>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d101      	bne.n	8005f40 <HAL_GPIO_Init+0x1dc>
 8005f3c:	2304      	movs	r3, #4
 8005f3e:	e008      	b.n	8005f52 <HAL_GPIO_Init+0x1ee>
 8005f40:	2307      	movs	r3, #7
 8005f42:	e006      	b.n	8005f52 <HAL_GPIO_Init+0x1ee>
 8005f44:	2303      	movs	r3, #3
 8005f46:	e004      	b.n	8005f52 <HAL_GPIO_Init+0x1ee>
 8005f48:	2302      	movs	r3, #2
 8005f4a:	e002      	b.n	8005f52 <HAL_GPIO_Init+0x1ee>
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e000      	b.n	8005f52 <HAL_GPIO_Init+0x1ee>
 8005f50:	2300      	movs	r3, #0
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	f002 0203 	and.w	r2, r2, #3
 8005f58:	0092      	lsls	r2, r2, #2
 8005f5a:	4093      	lsls	r3, r2
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005f62:	4937      	ldr	r1, [pc, #220]	; (8006040 <HAL_GPIO_Init+0x2dc>)
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	089b      	lsrs	r3, r3, #2
 8005f68:	3302      	adds	r3, #2
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f70:	4b38      	ldr	r3, [pc, #224]	; (8006054 <HAL_GPIO_Init+0x2f0>)
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	43db      	mvns	r3, r3
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d003      	beq.n	8005f94 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005f8c:	693a      	ldr	r2, [r7, #16]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005f94:	4a2f      	ldr	r2, [pc, #188]	; (8006054 <HAL_GPIO_Init+0x2f0>)
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005f9a:	4b2e      	ldr	r3, [pc, #184]	; (8006054 <HAL_GPIO_Init+0x2f0>)
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	43db      	mvns	r3, r3
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d003      	beq.n	8005fbe <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005fbe:	4a25      	ldr	r2, [pc, #148]	; (8006054 <HAL_GPIO_Init+0x2f0>)
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005fc4:	4b23      	ldr	r3, [pc, #140]	; (8006054 <HAL_GPIO_Init+0x2f0>)
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	43db      	mvns	r3, r3
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d003      	beq.n	8005fe8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005fe8:	4a1a      	ldr	r2, [pc, #104]	; (8006054 <HAL_GPIO_Init+0x2f0>)
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005fee:	4b19      	ldr	r3, [pc, #100]	; (8006054 <HAL_GPIO_Init+0x2f0>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	43db      	mvns	r3, r3
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006006:	2b00      	cmp	r3, #0
 8006008:	d003      	beq.n	8006012 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	4313      	orrs	r3, r2
 8006010:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006012:	4a10      	ldr	r2, [pc, #64]	; (8006054 <HAL_GPIO_Init+0x2f0>)
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	3301      	adds	r3, #1
 800601c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	fa22 f303 	lsr.w	r3, r2, r3
 8006028:	2b00      	cmp	r3, #0
 800602a:	f47f aea3 	bne.w	8005d74 <HAL_GPIO_Init+0x10>
  }
}
 800602e:	bf00      	nop
 8006030:	bf00      	nop
 8006032:	371c      	adds	r7, #28
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr
 800603c:	40021000 	.word	0x40021000
 8006040:	40010000 	.word	0x40010000
 8006044:	48000400 	.word	0x48000400
 8006048:	48000800 	.word	0x48000800
 800604c:	48000c00 	.word	0x48000c00
 8006050:	48001000 	.word	0x48001000
 8006054:	40010400 	.word	0x40010400

08006058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	460b      	mov	r3, r1
 8006062:	807b      	strh	r3, [r7, #2]
 8006064:	4613      	mov	r3, r2
 8006066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006068:	787b      	ldrb	r3, [r7, #1]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d003      	beq.n	8006076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800606e:	887a      	ldrh	r2, [r7, #2]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006074:	e002      	b.n	800607c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006076:	887a      	ldrh	r2, [r7, #2]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800607c:	bf00      	nop
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	4603      	mov	r3, r0
 8006090:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006092:	4b08      	ldr	r3, [pc, #32]	; (80060b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006094:	695a      	ldr	r2, [r3, #20]
 8006096:	88fb      	ldrh	r3, [r7, #6]
 8006098:	4013      	ands	r3, r2
 800609a:	2b00      	cmp	r3, #0
 800609c:	d006      	beq.n	80060ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800609e:	4a05      	ldr	r2, [pc, #20]	; (80060b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80060a0:	88fb      	ldrh	r3, [r7, #6]
 80060a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80060a4:	88fb      	ldrh	r3, [r7, #6]
 80060a6:	4618      	mov	r0, r3
 80060a8:	f003 fbf6 	bl	8009898 <HAL_GPIO_EXTI_Callback>
  }
}
 80060ac:	bf00      	nop
 80060ae:	3708      	adds	r7, #8
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	40010400 	.word	0x40010400

080060b8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80060b8:	b480      	push	{r7}
 80060ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060bc:	4b05      	ldr	r3, [pc, #20]	; (80060d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a04      	ldr	r2, [pc, #16]	; (80060d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80060c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060c6:	6013      	str	r3, [r2, #0]
}
 80060c8:	bf00      	nop
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	40007000 	.word	0x40007000

080060d8 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 80060e0:	4b2b      	ldr	r3, [pc, #172]	; (8006190 <HAL_PWR_ConfigPVD+0xb8>)
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	f023 020e 	bic.w	r2, r3, #14
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4928      	ldr	r1, [pc, #160]	; (8006190 <HAL_PWR_ConfigPVD+0xb8>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 80060f2:	4b28      	ldr	r3, [pc, #160]	; (8006194 <HAL_PWR_ConfigPVD+0xbc>)
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	4a27      	ldr	r2, [pc, #156]	; (8006194 <HAL_PWR_ConfigPVD+0xbc>)
 80060f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060fc:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 80060fe:	4b25      	ldr	r3, [pc, #148]	; (8006194 <HAL_PWR_ConfigPVD+0xbc>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a24      	ldr	r2, [pc, #144]	; (8006194 <HAL_PWR_ConfigPVD+0xbc>)
 8006104:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006108:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 800610a:	4b22      	ldr	r3, [pc, #136]	; (8006194 <HAL_PWR_ConfigPVD+0xbc>)
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	4a21      	ldr	r2, [pc, #132]	; (8006194 <HAL_PWR_ConfigPVD+0xbc>)
 8006110:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006114:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8006116:	4b1f      	ldr	r3, [pc, #124]	; (8006194 <HAL_PWR_ConfigPVD+0xbc>)
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	4a1e      	ldr	r2, [pc, #120]	; (8006194 <HAL_PWR_ConfigPVD+0xbc>)
 800611c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006120:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d005      	beq.n	800613a <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 800612e:	4b19      	ldr	r3, [pc, #100]	; (8006194 <HAL_PWR_ConfigPVD+0xbc>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a18      	ldr	r2, [pc, #96]	; (8006194 <HAL_PWR_ConfigPVD+0xbc>)
 8006134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006138:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d005      	beq.n	8006152 <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8006146:	4b13      	ldr	r3, [pc, #76]	; (8006194 <HAL_PWR_ConfigPVD+0xbc>)
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	4a12      	ldr	r2, [pc, #72]	; (8006194 <HAL_PWR_ConfigPVD+0xbc>)
 800614c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006150:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	f003 0301 	and.w	r3, r3, #1
 800615a:	2b00      	cmp	r3, #0
 800615c:	d005      	beq.n	800616a <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800615e:	4b0d      	ldr	r3, [pc, #52]	; (8006194 <HAL_PWR_ConfigPVD+0xbc>)
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	4a0c      	ldr	r2, [pc, #48]	; (8006194 <HAL_PWR_ConfigPVD+0xbc>)
 8006164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006168:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f003 0302 	and.w	r3, r3, #2
 8006172:	2b00      	cmp	r3, #0
 8006174:	d005      	beq.n	8006182 <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8006176:	4b07      	ldr	r3, [pc, #28]	; (8006194 <HAL_PWR_ConfigPVD+0xbc>)
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	4a06      	ldr	r2, [pc, #24]	; (8006194 <HAL_PWR_ConfigPVD+0xbc>)
 800617c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006180:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr
 8006190:	40007000 	.word	0x40007000
 8006194:	40010400 	.word	0x40010400

08006198 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8006198:	b480      	push	{r7}
 800619a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 800619c:	4b05      	ldr	r3, [pc, #20]	; (80061b4 <HAL_PWR_EnablePVD+0x1c>)
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	4a04      	ldr	r2, [pc, #16]	; (80061b4 <HAL_PWR_EnablePVD+0x1c>)
 80061a2:	f043 0301 	orr.w	r3, r3, #1
 80061a6:	6053      	str	r3, [r2, #4]
}
 80061a8:	bf00      	nop
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	40007000 	.word	0x40007000

080061b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80061b8:	b480      	push	{r7}
 80061ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80061bc:	4b04      	ldr	r3, [pc, #16]	; (80061d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	40007000 	.word	0x40007000

080061d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061e2:	d130      	bne.n	8006246 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80061e4:	4b23      	ldr	r3, [pc, #140]	; (8006274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80061ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061f0:	d038      	beq.n	8006264 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80061f2:	4b20      	ldr	r3, [pc, #128]	; (8006274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80061fa:	4a1e      	ldr	r2, [pc, #120]	; (8006274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006200:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006202:	4b1d      	ldr	r3, [pc, #116]	; (8006278 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2232      	movs	r2, #50	; 0x32
 8006208:	fb02 f303 	mul.w	r3, r2, r3
 800620c:	4a1b      	ldr	r2, [pc, #108]	; (800627c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800620e:	fba2 2303 	umull	r2, r3, r2, r3
 8006212:	0c9b      	lsrs	r3, r3, #18
 8006214:	3301      	adds	r3, #1
 8006216:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006218:	e002      	b.n	8006220 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	3b01      	subs	r3, #1
 800621e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006220:	4b14      	ldr	r3, [pc, #80]	; (8006274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006222:	695b      	ldr	r3, [r3, #20]
 8006224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800622c:	d102      	bne.n	8006234 <HAL_PWREx_ControlVoltageScaling+0x60>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d1f2      	bne.n	800621a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006234:	4b0f      	ldr	r3, [pc, #60]	; (8006274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006236:	695b      	ldr	r3, [r3, #20]
 8006238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800623c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006240:	d110      	bne.n	8006264 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e00f      	b.n	8006266 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006246:	4b0b      	ldr	r3, [pc, #44]	; (8006274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800624e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006252:	d007      	beq.n	8006264 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006254:	4b07      	ldr	r3, [pc, #28]	; (8006274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800625c:	4a05      	ldr	r2, [pc, #20]	; (8006274 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800625e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006262:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3714      	adds	r7, #20
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	40007000 	.word	0x40007000
 8006278:	2000006c 	.word	0x2000006c
 800627c:	431bde83 	.word	0x431bde83

08006280 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b088      	sub	sp, #32
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d102      	bne.n	8006294 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	f000 bc02 	b.w	8006a98 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006294:	4b96      	ldr	r3, [pc, #600]	; (80064f0 <HAL_RCC_OscConfig+0x270>)
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	f003 030c 	and.w	r3, r3, #12
 800629c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800629e:	4b94      	ldr	r3, [pc, #592]	; (80064f0 <HAL_RCC_OscConfig+0x270>)
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	f003 0303 	and.w	r3, r3, #3
 80062a6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0310 	and.w	r3, r3, #16
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f000 80e4 	beq.w	800647e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d007      	beq.n	80062cc <HAL_RCC_OscConfig+0x4c>
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	2b0c      	cmp	r3, #12
 80062c0:	f040 808b 	bne.w	80063da <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	f040 8087 	bne.w	80063da <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80062cc:	4b88      	ldr	r3, [pc, #544]	; (80064f0 <HAL_RCC_OscConfig+0x270>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 0302 	and.w	r3, r3, #2
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d005      	beq.n	80062e4 <HAL_RCC_OscConfig+0x64>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	699b      	ldr	r3, [r3, #24]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d101      	bne.n	80062e4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e3d9      	b.n	8006a98 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a1a      	ldr	r2, [r3, #32]
 80062e8:	4b81      	ldr	r3, [pc, #516]	; (80064f0 <HAL_RCC_OscConfig+0x270>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0308 	and.w	r3, r3, #8
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d004      	beq.n	80062fe <HAL_RCC_OscConfig+0x7e>
 80062f4:	4b7e      	ldr	r3, [pc, #504]	; (80064f0 <HAL_RCC_OscConfig+0x270>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062fc:	e005      	b.n	800630a <HAL_RCC_OscConfig+0x8a>
 80062fe:	4b7c      	ldr	r3, [pc, #496]	; (80064f0 <HAL_RCC_OscConfig+0x270>)
 8006300:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006304:	091b      	lsrs	r3, r3, #4
 8006306:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800630a:	4293      	cmp	r3, r2
 800630c:	d223      	bcs.n	8006356 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	4618      	mov	r0, r3
 8006314:	f000 fd54 	bl	8006dc0 <RCC_SetFlashLatencyFromMSIRange>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d001      	beq.n	8006322 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e3ba      	b.n	8006a98 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006322:	4b73      	ldr	r3, [pc, #460]	; (80064f0 <HAL_RCC_OscConfig+0x270>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a72      	ldr	r2, [pc, #456]	; (80064f0 <HAL_RCC_OscConfig+0x270>)
 8006328:	f043 0308 	orr.w	r3, r3, #8
 800632c:	6013      	str	r3, [r2, #0]
 800632e:	4b70      	ldr	r3, [pc, #448]	; (80064f0 <HAL_RCC_OscConfig+0x270>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	496d      	ldr	r1, [pc, #436]	; (80064f0 <HAL_RCC_OscConfig+0x270>)
 800633c:	4313      	orrs	r3, r2
 800633e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006340:	4b6b      	ldr	r3, [pc, #428]	; (80064f0 <HAL_RCC_OscConfig+0x270>)
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	69db      	ldr	r3, [r3, #28]
 800634c:	021b      	lsls	r3, r3, #8
 800634e:	4968      	ldr	r1, [pc, #416]	; (80064f0 <HAL_RCC_OscConfig+0x270>)
 8006350:	4313      	orrs	r3, r2
 8006352:	604b      	str	r3, [r1, #4]
 8006354:	e025      	b.n	80063a2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006356:	4b66      	ldr	r3, [pc, #408]	; (80064f0 <HAL_RCC_OscConfig+0x270>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a65      	ldr	r2, [pc, #404]	; (80064f0 <HAL_RCC_OscConfig+0x270>)
 800635c:	f043 0308 	orr.w	r3, r3, #8
 8006360:	6013      	str	r3, [r2, #0]
 8006362:	4b63      	ldr	r3, [pc, #396]	; (80064f0 <HAL_RCC_OscConfig+0x270>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	4960      	ldr	r1, [pc, #384]	; (80064f0 <HAL_RCC_OscConfig+0x270>)
 8006370:	4313      	orrs	r3, r2
 8006372:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006374:	4b5e      	ldr	r3, [pc, #376]	; (80064f0 <HAL_RCC_OscConfig+0x270>)
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	69db      	ldr	r3, [r3, #28]
 8006380:	021b      	lsls	r3, r3, #8
 8006382:	495b      	ldr	r1, [pc, #364]	; (80064f0 <HAL_RCC_OscConfig+0x270>)
 8006384:	4313      	orrs	r3, r2
 8006386:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d109      	bne.n	80063a2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	4618      	mov	r0, r3
 8006394:	f000 fd14 	bl	8006dc0 <RCC_SetFlashLatencyFromMSIRange>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d001      	beq.n	80063a2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e37a      	b.n	8006a98 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80063a2:	f000 fc81 	bl	8006ca8 <HAL_RCC_GetSysClockFreq>
 80063a6:	4602      	mov	r2, r0
 80063a8:	4b51      	ldr	r3, [pc, #324]	; (80064f0 <HAL_RCC_OscConfig+0x270>)
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	091b      	lsrs	r3, r3, #4
 80063ae:	f003 030f 	and.w	r3, r3, #15
 80063b2:	4950      	ldr	r1, [pc, #320]	; (80064f4 <HAL_RCC_OscConfig+0x274>)
 80063b4:	5ccb      	ldrb	r3, [r1, r3]
 80063b6:	f003 031f 	and.w	r3, r3, #31
 80063ba:	fa22 f303 	lsr.w	r3, r2, r3
 80063be:	4a4e      	ldr	r2, [pc, #312]	; (80064f8 <HAL_RCC_OscConfig+0x278>)
 80063c0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80063c2:	4b4e      	ldr	r3, [pc, #312]	; (80064fc <HAL_RCC_OscConfig+0x27c>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7ff f878 	bl	80054bc <HAL_InitTick>
 80063cc:	4603      	mov	r3, r0
 80063ce:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80063d0:	7bfb      	ldrb	r3, [r7, #15]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d052      	beq.n	800647c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80063d6:	7bfb      	ldrb	r3, [r7, #15]
 80063d8:	e35e      	b.n	8006a98 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d032      	beq.n	8006448 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80063e2:	4b43      	ldr	r3, [pc, #268]	; (80064f0 <HAL_RCC_OscConfig+0x270>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a42      	ldr	r2, [pc, #264]	; (80064f0 <HAL_RCC_OscConfig+0x270>)
 80063e8:	f043 0301 	orr.w	r3, r3, #1
 80063ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80063ee:	f7ff f8a1 	bl	8005534 <HAL_GetTick>
 80063f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80063f4:	e008      	b.n	8006408 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80063f6:	f7ff f89d 	bl	8005534 <HAL_GetTick>
 80063fa:	4602      	mov	r2, r0
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	2b02      	cmp	r3, #2
 8006402:	d901      	bls.n	8006408 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e347      	b.n	8006a98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006408:	4b39      	ldr	r3, [pc, #228]	; (80064f0 <HAL_RCC_OscConfig+0x270>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 0302 	and.w	r3, r3, #2
 8006410:	2b00      	cmp	r3, #0
 8006412:	d0f0      	beq.n	80063f6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006414:	4b36      	ldr	r3, [pc, #216]	; (80064f0 <HAL_RCC_OscConfig+0x270>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a35      	ldr	r2, [pc, #212]	; (80064f0 <HAL_RCC_OscConfig+0x270>)
 800641a:	f043 0308 	orr.w	r3, r3, #8
 800641e:	6013      	str	r3, [r2, #0]
 8006420:	4b33      	ldr	r3, [pc, #204]	; (80064f0 <HAL_RCC_OscConfig+0x270>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a1b      	ldr	r3, [r3, #32]
 800642c:	4930      	ldr	r1, [pc, #192]	; (80064f0 <HAL_RCC_OscConfig+0x270>)
 800642e:	4313      	orrs	r3, r2
 8006430:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006432:	4b2f      	ldr	r3, [pc, #188]	; (80064f0 <HAL_RCC_OscConfig+0x270>)
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	69db      	ldr	r3, [r3, #28]
 800643e:	021b      	lsls	r3, r3, #8
 8006440:	492b      	ldr	r1, [pc, #172]	; (80064f0 <HAL_RCC_OscConfig+0x270>)
 8006442:	4313      	orrs	r3, r2
 8006444:	604b      	str	r3, [r1, #4]
 8006446:	e01a      	b.n	800647e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006448:	4b29      	ldr	r3, [pc, #164]	; (80064f0 <HAL_RCC_OscConfig+0x270>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a28      	ldr	r2, [pc, #160]	; (80064f0 <HAL_RCC_OscConfig+0x270>)
 800644e:	f023 0301 	bic.w	r3, r3, #1
 8006452:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006454:	f7ff f86e 	bl	8005534 <HAL_GetTick>
 8006458:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800645a:	e008      	b.n	800646e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800645c:	f7ff f86a 	bl	8005534 <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	2b02      	cmp	r3, #2
 8006468:	d901      	bls.n	800646e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e314      	b.n	8006a98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800646e:	4b20      	ldr	r3, [pc, #128]	; (80064f0 <HAL_RCC_OscConfig+0x270>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0302 	and.w	r3, r3, #2
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1f0      	bne.n	800645c <HAL_RCC_OscConfig+0x1dc>
 800647a:	e000      	b.n	800647e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800647c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	2b00      	cmp	r3, #0
 8006488:	d073      	beq.n	8006572 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	2b08      	cmp	r3, #8
 800648e:	d005      	beq.n	800649c <HAL_RCC_OscConfig+0x21c>
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	2b0c      	cmp	r3, #12
 8006494:	d10e      	bne.n	80064b4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	2b03      	cmp	r3, #3
 800649a:	d10b      	bne.n	80064b4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800649c:	4b14      	ldr	r3, [pc, #80]	; (80064f0 <HAL_RCC_OscConfig+0x270>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d063      	beq.n	8006570 <HAL_RCC_OscConfig+0x2f0>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d15f      	bne.n	8006570 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e2f1      	b.n	8006a98 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064bc:	d106      	bne.n	80064cc <HAL_RCC_OscConfig+0x24c>
 80064be:	4b0c      	ldr	r3, [pc, #48]	; (80064f0 <HAL_RCC_OscConfig+0x270>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a0b      	ldr	r2, [pc, #44]	; (80064f0 <HAL_RCC_OscConfig+0x270>)
 80064c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064c8:	6013      	str	r3, [r2, #0]
 80064ca:	e025      	b.n	8006518 <HAL_RCC_OscConfig+0x298>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064d4:	d114      	bne.n	8006500 <HAL_RCC_OscConfig+0x280>
 80064d6:	4b06      	ldr	r3, [pc, #24]	; (80064f0 <HAL_RCC_OscConfig+0x270>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a05      	ldr	r2, [pc, #20]	; (80064f0 <HAL_RCC_OscConfig+0x270>)
 80064dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064e0:	6013      	str	r3, [r2, #0]
 80064e2:	4b03      	ldr	r3, [pc, #12]	; (80064f0 <HAL_RCC_OscConfig+0x270>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a02      	ldr	r2, [pc, #8]	; (80064f0 <HAL_RCC_OscConfig+0x270>)
 80064e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064ec:	6013      	str	r3, [r2, #0]
 80064ee:	e013      	b.n	8006518 <HAL_RCC_OscConfig+0x298>
 80064f0:	40021000 	.word	0x40021000
 80064f4:	0800b110 	.word	0x0800b110
 80064f8:	2000006c 	.word	0x2000006c
 80064fc:	20000064 	.word	0x20000064
 8006500:	4ba0      	ldr	r3, [pc, #640]	; (8006784 <HAL_RCC_OscConfig+0x504>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a9f      	ldr	r2, [pc, #636]	; (8006784 <HAL_RCC_OscConfig+0x504>)
 8006506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800650a:	6013      	str	r3, [r2, #0]
 800650c:	4b9d      	ldr	r3, [pc, #628]	; (8006784 <HAL_RCC_OscConfig+0x504>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a9c      	ldr	r2, [pc, #624]	; (8006784 <HAL_RCC_OscConfig+0x504>)
 8006512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006516:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d013      	beq.n	8006548 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006520:	f7ff f808 	bl	8005534 <HAL_GetTick>
 8006524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006526:	e008      	b.n	800653a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006528:	f7ff f804 	bl	8005534 <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	2b64      	cmp	r3, #100	; 0x64
 8006534:	d901      	bls.n	800653a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e2ae      	b.n	8006a98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800653a:	4b92      	ldr	r3, [pc, #584]	; (8006784 <HAL_RCC_OscConfig+0x504>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d0f0      	beq.n	8006528 <HAL_RCC_OscConfig+0x2a8>
 8006546:	e014      	b.n	8006572 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006548:	f7fe fff4 	bl	8005534 <HAL_GetTick>
 800654c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800654e:	e008      	b.n	8006562 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006550:	f7fe fff0 	bl	8005534 <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	2b64      	cmp	r3, #100	; 0x64
 800655c:	d901      	bls.n	8006562 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e29a      	b.n	8006a98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006562:	4b88      	ldr	r3, [pc, #544]	; (8006784 <HAL_RCC_OscConfig+0x504>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1f0      	bne.n	8006550 <HAL_RCC_OscConfig+0x2d0>
 800656e:	e000      	b.n	8006572 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0302 	and.w	r3, r3, #2
 800657a:	2b00      	cmp	r3, #0
 800657c:	d060      	beq.n	8006640 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	2b04      	cmp	r3, #4
 8006582:	d005      	beq.n	8006590 <HAL_RCC_OscConfig+0x310>
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	2b0c      	cmp	r3, #12
 8006588:	d119      	bne.n	80065be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	2b02      	cmp	r3, #2
 800658e:	d116      	bne.n	80065be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006590:	4b7c      	ldr	r3, [pc, #496]	; (8006784 <HAL_RCC_OscConfig+0x504>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006598:	2b00      	cmp	r3, #0
 800659a:	d005      	beq.n	80065a8 <HAL_RCC_OscConfig+0x328>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d101      	bne.n	80065a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e277      	b.n	8006a98 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065a8:	4b76      	ldr	r3, [pc, #472]	; (8006784 <HAL_RCC_OscConfig+0x504>)
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	061b      	lsls	r3, r3, #24
 80065b6:	4973      	ldr	r1, [pc, #460]	; (8006784 <HAL_RCC_OscConfig+0x504>)
 80065b8:	4313      	orrs	r3, r2
 80065ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065bc:	e040      	b.n	8006640 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d023      	beq.n	800660e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065c6:	4b6f      	ldr	r3, [pc, #444]	; (8006784 <HAL_RCC_OscConfig+0x504>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a6e      	ldr	r2, [pc, #440]	; (8006784 <HAL_RCC_OscConfig+0x504>)
 80065cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065d2:	f7fe ffaf 	bl	8005534 <HAL_GetTick>
 80065d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065d8:	e008      	b.n	80065ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065da:	f7fe ffab 	bl	8005534 <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d901      	bls.n	80065ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e255      	b.n	8006a98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065ec:	4b65      	ldr	r3, [pc, #404]	; (8006784 <HAL_RCC_OscConfig+0x504>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d0f0      	beq.n	80065da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065f8:	4b62      	ldr	r3, [pc, #392]	; (8006784 <HAL_RCC_OscConfig+0x504>)
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	061b      	lsls	r3, r3, #24
 8006606:	495f      	ldr	r1, [pc, #380]	; (8006784 <HAL_RCC_OscConfig+0x504>)
 8006608:	4313      	orrs	r3, r2
 800660a:	604b      	str	r3, [r1, #4]
 800660c:	e018      	b.n	8006640 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800660e:	4b5d      	ldr	r3, [pc, #372]	; (8006784 <HAL_RCC_OscConfig+0x504>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a5c      	ldr	r2, [pc, #368]	; (8006784 <HAL_RCC_OscConfig+0x504>)
 8006614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006618:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800661a:	f7fe ff8b 	bl	8005534 <HAL_GetTick>
 800661e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006620:	e008      	b.n	8006634 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006622:	f7fe ff87 	bl	8005534 <HAL_GetTick>
 8006626:	4602      	mov	r2, r0
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	2b02      	cmp	r3, #2
 800662e:	d901      	bls.n	8006634 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	e231      	b.n	8006a98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006634:	4b53      	ldr	r3, [pc, #332]	; (8006784 <HAL_RCC_OscConfig+0x504>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1f0      	bne.n	8006622 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0308 	and.w	r3, r3, #8
 8006648:	2b00      	cmp	r3, #0
 800664a:	d03c      	beq.n	80066c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	695b      	ldr	r3, [r3, #20]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d01c      	beq.n	800668e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006654:	4b4b      	ldr	r3, [pc, #300]	; (8006784 <HAL_RCC_OscConfig+0x504>)
 8006656:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800665a:	4a4a      	ldr	r2, [pc, #296]	; (8006784 <HAL_RCC_OscConfig+0x504>)
 800665c:	f043 0301 	orr.w	r3, r3, #1
 8006660:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006664:	f7fe ff66 	bl	8005534 <HAL_GetTick>
 8006668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800666a:	e008      	b.n	800667e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800666c:	f7fe ff62 	bl	8005534 <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	2b02      	cmp	r3, #2
 8006678:	d901      	bls.n	800667e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e20c      	b.n	8006a98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800667e:	4b41      	ldr	r3, [pc, #260]	; (8006784 <HAL_RCC_OscConfig+0x504>)
 8006680:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006684:	f003 0302 	and.w	r3, r3, #2
 8006688:	2b00      	cmp	r3, #0
 800668a:	d0ef      	beq.n	800666c <HAL_RCC_OscConfig+0x3ec>
 800668c:	e01b      	b.n	80066c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800668e:	4b3d      	ldr	r3, [pc, #244]	; (8006784 <HAL_RCC_OscConfig+0x504>)
 8006690:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006694:	4a3b      	ldr	r2, [pc, #236]	; (8006784 <HAL_RCC_OscConfig+0x504>)
 8006696:	f023 0301 	bic.w	r3, r3, #1
 800669a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800669e:	f7fe ff49 	bl	8005534 <HAL_GetTick>
 80066a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80066a4:	e008      	b.n	80066b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066a6:	f7fe ff45 	bl	8005534 <HAL_GetTick>
 80066aa:	4602      	mov	r2, r0
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d901      	bls.n	80066b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e1ef      	b.n	8006a98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80066b8:	4b32      	ldr	r3, [pc, #200]	; (8006784 <HAL_RCC_OscConfig+0x504>)
 80066ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066be:	f003 0302 	and.w	r3, r3, #2
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1ef      	bne.n	80066a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0304 	and.w	r3, r3, #4
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f000 80a6 	beq.w	8006820 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066d4:	2300      	movs	r3, #0
 80066d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80066d8:	4b2a      	ldr	r3, [pc, #168]	; (8006784 <HAL_RCC_OscConfig+0x504>)
 80066da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d10d      	bne.n	8006700 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066e4:	4b27      	ldr	r3, [pc, #156]	; (8006784 <HAL_RCC_OscConfig+0x504>)
 80066e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066e8:	4a26      	ldr	r2, [pc, #152]	; (8006784 <HAL_RCC_OscConfig+0x504>)
 80066ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066ee:	6593      	str	r3, [r2, #88]	; 0x58
 80066f0:	4b24      	ldr	r3, [pc, #144]	; (8006784 <HAL_RCC_OscConfig+0x504>)
 80066f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066f8:	60bb      	str	r3, [r7, #8]
 80066fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066fc:	2301      	movs	r3, #1
 80066fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006700:	4b21      	ldr	r3, [pc, #132]	; (8006788 <HAL_RCC_OscConfig+0x508>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006708:	2b00      	cmp	r3, #0
 800670a:	d118      	bne.n	800673e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800670c:	4b1e      	ldr	r3, [pc, #120]	; (8006788 <HAL_RCC_OscConfig+0x508>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a1d      	ldr	r2, [pc, #116]	; (8006788 <HAL_RCC_OscConfig+0x508>)
 8006712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006716:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006718:	f7fe ff0c 	bl	8005534 <HAL_GetTick>
 800671c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800671e:	e008      	b.n	8006732 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006720:	f7fe ff08 	bl	8005534 <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	2b02      	cmp	r3, #2
 800672c:	d901      	bls.n	8006732 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e1b2      	b.n	8006a98 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006732:	4b15      	ldr	r3, [pc, #84]	; (8006788 <HAL_RCC_OscConfig+0x508>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800673a:	2b00      	cmp	r3, #0
 800673c:	d0f0      	beq.n	8006720 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	2b01      	cmp	r3, #1
 8006744:	d108      	bne.n	8006758 <HAL_RCC_OscConfig+0x4d8>
 8006746:	4b0f      	ldr	r3, [pc, #60]	; (8006784 <HAL_RCC_OscConfig+0x504>)
 8006748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800674c:	4a0d      	ldr	r2, [pc, #52]	; (8006784 <HAL_RCC_OscConfig+0x504>)
 800674e:	f043 0301 	orr.w	r3, r3, #1
 8006752:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006756:	e029      	b.n	80067ac <HAL_RCC_OscConfig+0x52c>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	2b05      	cmp	r3, #5
 800675e:	d115      	bne.n	800678c <HAL_RCC_OscConfig+0x50c>
 8006760:	4b08      	ldr	r3, [pc, #32]	; (8006784 <HAL_RCC_OscConfig+0x504>)
 8006762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006766:	4a07      	ldr	r2, [pc, #28]	; (8006784 <HAL_RCC_OscConfig+0x504>)
 8006768:	f043 0304 	orr.w	r3, r3, #4
 800676c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006770:	4b04      	ldr	r3, [pc, #16]	; (8006784 <HAL_RCC_OscConfig+0x504>)
 8006772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006776:	4a03      	ldr	r2, [pc, #12]	; (8006784 <HAL_RCC_OscConfig+0x504>)
 8006778:	f043 0301 	orr.w	r3, r3, #1
 800677c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006780:	e014      	b.n	80067ac <HAL_RCC_OscConfig+0x52c>
 8006782:	bf00      	nop
 8006784:	40021000 	.word	0x40021000
 8006788:	40007000 	.word	0x40007000
 800678c:	4b9a      	ldr	r3, [pc, #616]	; (80069f8 <HAL_RCC_OscConfig+0x778>)
 800678e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006792:	4a99      	ldr	r2, [pc, #612]	; (80069f8 <HAL_RCC_OscConfig+0x778>)
 8006794:	f023 0301 	bic.w	r3, r3, #1
 8006798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800679c:	4b96      	ldr	r3, [pc, #600]	; (80069f8 <HAL_RCC_OscConfig+0x778>)
 800679e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067a2:	4a95      	ldr	r2, [pc, #596]	; (80069f8 <HAL_RCC_OscConfig+0x778>)
 80067a4:	f023 0304 	bic.w	r3, r3, #4
 80067a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d016      	beq.n	80067e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067b4:	f7fe febe 	bl	8005534 <HAL_GetTick>
 80067b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067ba:	e00a      	b.n	80067d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067bc:	f7fe feba 	bl	8005534 <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d901      	bls.n	80067d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e162      	b.n	8006a98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067d2:	4b89      	ldr	r3, [pc, #548]	; (80069f8 <HAL_RCC_OscConfig+0x778>)
 80067d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067d8:	f003 0302 	and.w	r3, r3, #2
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d0ed      	beq.n	80067bc <HAL_RCC_OscConfig+0x53c>
 80067e0:	e015      	b.n	800680e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067e2:	f7fe fea7 	bl	8005534 <HAL_GetTick>
 80067e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80067e8:	e00a      	b.n	8006800 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067ea:	f7fe fea3 	bl	8005534 <HAL_GetTick>
 80067ee:	4602      	mov	r2, r0
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d901      	bls.n	8006800 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e14b      	b.n	8006a98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006800:	4b7d      	ldr	r3, [pc, #500]	; (80069f8 <HAL_RCC_OscConfig+0x778>)
 8006802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006806:	f003 0302 	and.w	r3, r3, #2
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1ed      	bne.n	80067ea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800680e:	7ffb      	ldrb	r3, [r7, #31]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d105      	bne.n	8006820 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006814:	4b78      	ldr	r3, [pc, #480]	; (80069f8 <HAL_RCC_OscConfig+0x778>)
 8006816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006818:	4a77      	ldr	r2, [pc, #476]	; (80069f8 <HAL_RCC_OscConfig+0x778>)
 800681a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800681e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 0320 	and.w	r3, r3, #32
 8006828:	2b00      	cmp	r3, #0
 800682a:	d03c      	beq.n	80068a6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006830:	2b00      	cmp	r3, #0
 8006832:	d01c      	beq.n	800686e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006834:	4b70      	ldr	r3, [pc, #448]	; (80069f8 <HAL_RCC_OscConfig+0x778>)
 8006836:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800683a:	4a6f      	ldr	r2, [pc, #444]	; (80069f8 <HAL_RCC_OscConfig+0x778>)
 800683c:	f043 0301 	orr.w	r3, r3, #1
 8006840:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006844:	f7fe fe76 	bl	8005534 <HAL_GetTick>
 8006848:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800684a:	e008      	b.n	800685e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800684c:	f7fe fe72 	bl	8005534 <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	2b02      	cmp	r3, #2
 8006858:	d901      	bls.n	800685e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e11c      	b.n	8006a98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800685e:	4b66      	ldr	r3, [pc, #408]	; (80069f8 <HAL_RCC_OscConfig+0x778>)
 8006860:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006864:	f003 0302 	and.w	r3, r3, #2
 8006868:	2b00      	cmp	r3, #0
 800686a:	d0ef      	beq.n	800684c <HAL_RCC_OscConfig+0x5cc>
 800686c:	e01b      	b.n	80068a6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800686e:	4b62      	ldr	r3, [pc, #392]	; (80069f8 <HAL_RCC_OscConfig+0x778>)
 8006870:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006874:	4a60      	ldr	r2, [pc, #384]	; (80069f8 <HAL_RCC_OscConfig+0x778>)
 8006876:	f023 0301 	bic.w	r3, r3, #1
 800687a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800687e:	f7fe fe59 	bl	8005534 <HAL_GetTick>
 8006882:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006884:	e008      	b.n	8006898 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006886:	f7fe fe55 	bl	8005534 <HAL_GetTick>
 800688a:	4602      	mov	r2, r0
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	2b02      	cmp	r3, #2
 8006892:	d901      	bls.n	8006898 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	e0ff      	b.n	8006a98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006898:	4b57      	ldr	r3, [pc, #348]	; (80069f8 <HAL_RCC_OscConfig+0x778>)
 800689a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800689e:	f003 0302 	and.w	r3, r3, #2
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1ef      	bne.n	8006886 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f000 80f3 	beq.w	8006a96 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	f040 80c9 	bne.w	8006a4c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80068ba:	4b4f      	ldr	r3, [pc, #316]	; (80069f8 <HAL_RCC_OscConfig+0x778>)
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	f003 0203 	and.w	r2, r3, #3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d12c      	bne.n	8006928 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d8:	3b01      	subs	r3, #1
 80068da:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80068dc:	429a      	cmp	r2, r3
 80068de:	d123      	bne.n	8006928 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ea:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d11b      	bne.n	8006928 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d113      	bne.n	8006928 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800690a:	085b      	lsrs	r3, r3, #1
 800690c:	3b01      	subs	r3, #1
 800690e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006910:	429a      	cmp	r2, r3
 8006912:	d109      	bne.n	8006928 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691e:	085b      	lsrs	r3, r3, #1
 8006920:	3b01      	subs	r3, #1
 8006922:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006924:	429a      	cmp	r2, r3
 8006926:	d06b      	beq.n	8006a00 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	2b0c      	cmp	r3, #12
 800692c:	d062      	beq.n	80069f4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800692e:	4b32      	ldr	r3, [pc, #200]	; (80069f8 <HAL_RCC_OscConfig+0x778>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006936:	2b00      	cmp	r3, #0
 8006938:	d001      	beq.n	800693e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e0ac      	b.n	8006a98 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800693e:	4b2e      	ldr	r3, [pc, #184]	; (80069f8 <HAL_RCC_OscConfig+0x778>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a2d      	ldr	r2, [pc, #180]	; (80069f8 <HAL_RCC_OscConfig+0x778>)
 8006944:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006948:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800694a:	f7fe fdf3 	bl	8005534 <HAL_GetTick>
 800694e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006950:	e008      	b.n	8006964 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006952:	f7fe fdef 	bl	8005534 <HAL_GetTick>
 8006956:	4602      	mov	r2, r0
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	2b02      	cmp	r3, #2
 800695e:	d901      	bls.n	8006964 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006960:	2303      	movs	r3, #3
 8006962:	e099      	b.n	8006a98 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006964:	4b24      	ldr	r3, [pc, #144]	; (80069f8 <HAL_RCC_OscConfig+0x778>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800696c:	2b00      	cmp	r3, #0
 800696e:	d1f0      	bne.n	8006952 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006970:	4b21      	ldr	r3, [pc, #132]	; (80069f8 <HAL_RCC_OscConfig+0x778>)
 8006972:	68da      	ldr	r2, [r3, #12]
 8006974:	4b21      	ldr	r3, [pc, #132]	; (80069fc <HAL_RCC_OscConfig+0x77c>)
 8006976:	4013      	ands	r3, r2
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006980:	3a01      	subs	r2, #1
 8006982:	0112      	lsls	r2, r2, #4
 8006984:	4311      	orrs	r1, r2
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800698a:	0212      	lsls	r2, r2, #8
 800698c:	4311      	orrs	r1, r2
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006992:	0852      	lsrs	r2, r2, #1
 8006994:	3a01      	subs	r2, #1
 8006996:	0552      	lsls	r2, r2, #21
 8006998:	4311      	orrs	r1, r2
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800699e:	0852      	lsrs	r2, r2, #1
 80069a0:	3a01      	subs	r2, #1
 80069a2:	0652      	lsls	r2, r2, #25
 80069a4:	4311      	orrs	r1, r2
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80069aa:	06d2      	lsls	r2, r2, #27
 80069ac:	430a      	orrs	r2, r1
 80069ae:	4912      	ldr	r1, [pc, #72]	; (80069f8 <HAL_RCC_OscConfig+0x778>)
 80069b0:	4313      	orrs	r3, r2
 80069b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80069b4:	4b10      	ldr	r3, [pc, #64]	; (80069f8 <HAL_RCC_OscConfig+0x778>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a0f      	ldr	r2, [pc, #60]	; (80069f8 <HAL_RCC_OscConfig+0x778>)
 80069ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80069c0:	4b0d      	ldr	r3, [pc, #52]	; (80069f8 <HAL_RCC_OscConfig+0x778>)
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	4a0c      	ldr	r2, [pc, #48]	; (80069f8 <HAL_RCC_OscConfig+0x778>)
 80069c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80069cc:	f7fe fdb2 	bl	8005534 <HAL_GetTick>
 80069d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069d2:	e008      	b.n	80069e6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069d4:	f7fe fdae 	bl	8005534 <HAL_GetTick>
 80069d8:	4602      	mov	r2, r0
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d901      	bls.n	80069e6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80069e2:	2303      	movs	r3, #3
 80069e4:	e058      	b.n	8006a98 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069e6:	4b04      	ldr	r3, [pc, #16]	; (80069f8 <HAL_RCC_OscConfig+0x778>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d0f0      	beq.n	80069d4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80069f2:	e050      	b.n	8006a96 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e04f      	b.n	8006a98 <HAL_RCC_OscConfig+0x818>
 80069f8:	40021000 	.word	0x40021000
 80069fc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a00:	4b27      	ldr	r3, [pc, #156]	; (8006aa0 <HAL_RCC_OscConfig+0x820>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d144      	bne.n	8006a96 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006a0c:	4b24      	ldr	r3, [pc, #144]	; (8006aa0 <HAL_RCC_OscConfig+0x820>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a23      	ldr	r2, [pc, #140]	; (8006aa0 <HAL_RCC_OscConfig+0x820>)
 8006a12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a16:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006a18:	4b21      	ldr	r3, [pc, #132]	; (8006aa0 <HAL_RCC_OscConfig+0x820>)
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	4a20      	ldr	r2, [pc, #128]	; (8006aa0 <HAL_RCC_OscConfig+0x820>)
 8006a1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a22:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006a24:	f7fe fd86 	bl	8005534 <HAL_GetTick>
 8006a28:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a2a:	e008      	b.n	8006a3e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a2c:	f7fe fd82 	bl	8005534 <HAL_GetTick>
 8006a30:	4602      	mov	r2, r0
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d901      	bls.n	8006a3e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e02c      	b.n	8006a98 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a3e:	4b18      	ldr	r3, [pc, #96]	; (8006aa0 <HAL_RCC_OscConfig+0x820>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d0f0      	beq.n	8006a2c <HAL_RCC_OscConfig+0x7ac>
 8006a4a:	e024      	b.n	8006a96 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	2b0c      	cmp	r3, #12
 8006a50:	d01f      	beq.n	8006a92 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a52:	4b13      	ldr	r3, [pc, #76]	; (8006aa0 <HAL_RCC_OscConfig+0x820>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a12      	ldr	r2, [pc, #72]	; (8006aa0 <HAL_RCC_OscConfig+0x820>)
 8006a58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a5e:	f7fe fd69 	bl	8005534 <HAL_GetTick>
 8006a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a64:	e008      	b.n	8006a78 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a66:	f7fe fd65 	bl	8005534 <HAL_GetTick>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	1ad3      	subs	r3, r2, r3
 8006a70:	2b02      	cmp	r3, #2
 8006a72:	d901      	bls.n	8006a78 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006a74:	2303      	movs	r3, #3
 8006a76:	e00f      	b.n	8006a98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a78:	4b09      	ldr	r3, [pc, #36]	; (8006aa0 <HAL_RCC_OscConfig+0x820>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1f0      	bne.n	8006a66 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006a84:	4b06      	ldr	r3, [pc, #24]	; (8006aa0 <HAL_RCC_OscConfig+0x820>)
 8006a86:	68da      	ldr	r2, [r3, #12]
 8006a88:	4905      	ldr	r1, [pc, #20]	; (8006aa0 <HAL_RCC_OscConfig+0x820>)
 8006a8a:	4b06      	ldr	r3, [pc, #24]	; (8006aa4 <HAL_RCC_OscConfig+0x824>)
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	60cb      	str	r3, [r1, #12]
 8006a90:	e001      	b.n	8006a96 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e000      	b.n	8006a98 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3720      	adds	r7, #32
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	40021000 	.word	0x40021000
 8006aa4:	feeefffc 	.word	0xfeeefffc

08006aa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d101      	bne.n	8006abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e0e7      	b.n	8006c8c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006abc:	4b75      	ldr	r3, [pc, #468]	; (8006c94 <HAL_RCC_ClockConfig+0x1ec>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0307 	and.w	r3, r3, #7
 8006ac4:	683a      	ldr	r2, [r7, #0]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d910      	bls.n	8006aec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006aca:	4b72      	ldr	r3, [pc, #456]	; (8006c94 <HAL_RCC_ClockConfig+0x1ec>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f023 0207 	bic.w	r2, r3, #7
 8006ad2:	4970      	ldr	r1, [pc, #448]	; (8006c94 <HAL_RCC_ClockConfig+0x1ec>)
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ada:	4b6e      	ldr	r3, [pc, #440]	; (8006c94 <HAL_RCC_ClockConfig+0x1ec>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 0307 	and.w	r3, r3, #7
 8006ae2:	683a      	ldr	r2, [r7, #0]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d001      	beq.n	8006aec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e0cf      	b.n	8006c8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 0302 	and.w	r3, r3, #2
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d010      	beq.n	8006b1a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	689a      	ldr	r2, [r3, #8]
 8006afc:	4b66      	ldr	r3, [pc, #408]	; (8006c98 <HAL_RCC_ClockConfig+0x1f0>)
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d908      	bls.n	8006b1a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b08:	4b63      	ldr	r3, [pc, #396]	; (8006c98 <HAL_RCC_ClockConfig+0x1f0>)
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	4960      	ldr	r1, [pc, #384]	; (8006c98 <HAL_RCC_ClockConfig+0x1f0>)
 8006b16:	4313      	orrs	r3, r2
 8006b18:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 0301 	and.w	r3, r3, #1
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d04c      	beq.n	8006bc0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	2b03      	cmp	r3, #3
 8006b2c:	d107      	bne.n	8006b3e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b2e:	4b5a      	ldr	r3, [pc, #360]	; (8006c98 <HAL_RCC_ClockConfig+0x1f0>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d121      	bne.n	8006b7e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e0a6      	b.n	8006c8c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	d107      	bne.n	8006b56 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b46:	4b54      	ldr	r3, [pc, #336]	; (8006c98 <HAL_RCC_ClockConfig+0x1f0>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d115      	bne.n	8006b7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e09a      	b.n	8006c8c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d107      	bne.n	8006b6e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006b5e:	4b4e      	ldr	r3, [pc, #312]	; (8006c98 <HAL_RCC_ClockConfig+0x1f0>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 0302 	and.w	r3, r3, #2
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d109      	bne.n	8006b7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e08e      	b.n	8006c8c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b6e:	4b4a      	ldr	r3, [pc, #296]	; (8006c98 <HAL_RCC_ClockConfig+0x1f0>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d101      	bne.n	8006b7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e086      	b.n	8006c8c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006b7e:	4b46      	ldr	r3, [pc, #280]	; (8006c98 <HAL_RCC_ClockConfig+0x1f0>)
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	f023 0203 	bic.w	r2, r3, #3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	4943      	ldr	r1, [pc, #268]	; (8006c98 <HAL_RCC_ClockConfig+0x1f0>)
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b90:	f7fe fcd0 	bl	8005534 <HAL_GetTick>
 8006b94:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b96:	e00a      	b.n	8006bae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b98:	f7fe fccc 	bl	8005534 <HAL_GetTick>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d901      	bls.n	8006bae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006baa:	2303      	movs	r3, #3
 8006bac:	e06e      	b.n	8006c8c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bae:	4b3a      	ldr	r3, [pc, #232]	; (8006c98 <HAL_RCC_ClockConfig+0x1f0>)
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f003 020c 	and.w	r2, r3, #12
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d1eb      	bne.n	8006b98 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0302 	and.w	r3, r3, #2
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d010      	beq.n	8006bee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	689a      	ldr	r2, [r3, #8]
 8006bd0:	4b31      	ldr	r3, [pc, #196]	; (8006c98 <HAL_RCC_ClockConfig+0x1f0>)
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d208      	bcs.n	8006bee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bdc:	4b2e      	ldr	r3, [pc, #184]	; (8006c98 <HAL_RCC_ClockConfig+0x1f0>)
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	492b      	ldr	r1, [pc, #172]	; (8006c98 <HAL_RCC_ClockConfig+0x1f0>)
 8006bea:	4313      	orrs	r3, r2
 8006bec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006bee:	4b29      	ldr	r3, [pc, #164]	; (8006c94 <HAL_RCC_ClockConfig+0x1ec>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 0307 	and.w	r3, r3, #7
 8006bf6:	683a      	ldr	r2, [r7, #0]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d210      	bcs.n	8006c1e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bfc:	4b25      	ldr	r3, [pc, #148]	; (8006c94 <HAL_RCC_ClockConfig+0x1ec>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f023 0207 	bic.w	r2, r3, #7
 8006c04:	4923      	ldr	r1, [pc, #140]	; (8006c94 <HAL_RCC_ClockConfig+0x1ec>)
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c0c:	4b21      	ldr	r3, [pc, #132]	; (8006c94 <HAL_RCC_ClockConfig+0x1ec>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0307 	and.w	r3, r3, #7
 8006c14:	683a      	ldr	r2, [r7, #0]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d001      	beq.n	8006c1e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e036      	b.n	8006c8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0304 	and.w	r3, r3, #4
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d008      	beq.n	8006c3c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c2a:	4b1b      	ldr	r3, [pc, #108]	; (8006c98 <HAL_RCC_ClockConfig+0x1f0>)
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	4918      	ldr	r1, [pc, #96]	; (8006c98 <HAL_RCC_ClockConfig+0x1f0>)
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 0308 	and.w	r3, r3, #8
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d009      	beq.n	8006c5c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c48:	4b13      	ldr	r3, [pc, #76]	; (8006c98 <HAL_RCC_ClockConfig+0x1f0>)
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	00db      	lsls	r3, r3, #3
 8006c56:	4910      	ldr	r1, [pc, #64]	; (8006c98 <HAL_RCC_ClockConfig+0x1f0>)
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006c5c:	f000 f824 	bl	8006ca8 <HAL_RCC_GetSysClockFreq>
 8006c60:	4602      	mov	r2, r0
 8006c62:	4b0d      	ldr	r3, [pc, #52]	; (8006c98 <HAL_RCC_ClockConfig+0x1f0>)
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	091b      	lsrs	r3, r3, #4
 8006c68:	f003 030f 	and.w	r3, r3, #15
 8006c6c:	490b      	ldr	r1, [pc, #44]	; (8006c9c <HAL_RCC_ClockConfig+0x1f4>)
 8006c6e:	5ccb      	ldrb	r3, [r1, r3]
 8006c70:	f003 031f 	and.w	r3, r3, #31
 8006c74:	fa22 f303 	lsr.w	r3, r2, r3
 8006c78:	4a09      	ldr	r2, [pc, #36]	; (8006ca0 <HAL_RCC_ClockConfig+0x1f8>)
 8006c7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006c7c:	4b09      	ldr	r3, [pc, #36]	; (8006ca4 <HAL_RCC_ClockConfig+0x1fc>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7fe fc1b 	bl	80054bc <HAL_InitTick>
 8006c86:	4603      	mov	r3, r0
 8006c88:	72fb      	strb	r3, [r7, #11]

  return status;
 8006c8a:	7afb      	ldrb	r3, [r7, #11]
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	40022000 	.word	0x40022000
 8006c98:	40021000 	.word	0x40021000
 8006c9c:	0800b110 	.word	0x0800b110
 8006ca0:	2000006c 	.word	0x2000006c
 8006ca4:	20000064 	.word	0x20000064

08006ca8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b089      	sub	sp, #36	; 0x24
 8006cac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	61fb      	str	r3, [r7, #28]
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cb6:	4b3e      	ldr	r3, [pc, #248]	; (8006db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	f003 030c 	and.w	r3, r3, #12
 8006cbe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006cc0:	4b3b      	ldr	r3, [pc, #236]	; (8006db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	f003 0303 	and.w	r3, r3, #3
 8006cc8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d005      	beq.n	8006cdc <HAL_RCC_GetSysClockFreq+0x34>
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	2b0c      	cmp	r3, #12
 8006cd4:	d121      	bne.n	8006d1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d11e      	bne.n	8006d1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006cdc:	4b34      	ldr	r3, [pc, #208]	; (8006db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 0308 	and.w	r3, r3, #8
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d107      	bne.n	8006cf8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006ce8:	4b31      	ldr	r3, [pc, #196]	; (8006db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cee:	0a1b      	lsrs	r3, r3, #8
 8006cf0:	f003 030f 	and.w	r3, r3, #15
 8006cf4:	61fb      	str	r3, [r7, #28]
 8006cf6:	e005      	b.n	8006d04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006cf8:	4b2d      	ldr	r3, [pc, #180]	; (8006db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	091b      	lsrs	r3, r3, #4
 8006cfe:	f003 030f 	and.w	r3, r3, #15
 8006d02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006d04:	4a2b      	ldr	r2, [pc, #172]	; (8006db4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d10d      	bne.n	8006d30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006d18:	e00a      	b.n	8006d30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	2b04      	cmp	r3, #4
 8006d1e:	d102      	bne.n	8006d26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006d20:	4b25      	ldr	r3, [pc, #148]	; (8006db8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006d22:	61bb      	str	r3, [r7, #24]
 8006d24:	e004      	b.n	8006d30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	2b08      	cmp	r3, #8
 8006d2a:	d101      	bne.n	8006d30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006d2c:	4b23      	ldr	r3, [pc, #140]	; (8006dbc <HAL_RCC_GetSysClockFreq+0x114>)
 8006d2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	2b0c      	cmp	r3, #12
 8006d34:	d134      	bne.n	8006da0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006d36:	4b1e      	ldr	r3, [pc, #120]	; (8006db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	f003 0303 	and.w	r3, r3, #3
 8006d3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d003      	beq.n	8006d4e <HAL_RCC_GetSysClockFreq+0xa6>
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	2b03      	cmp	r3, #3
 8006d4a:	d003      	beq.n	8006d54 <HAL_RCC_GetSysClockFreq+0xac>
 8006d4c:	e005      	b.n	8006d5a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006d4e:	4b1a      	ldr	r3, [pc, #104]	; (8006db8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006d50:	617b      	str	r3, [r7, #20]
      break;
 8006d52:	e005      	b.n	8006d60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006d54:	4b19      	ldr	r3, [pc, #100]	; (8006dbc <HAL_RCC_GetSysClockFreq+0x114>)
 8006d56:	617b      	str	r3, [r7, #20]
      break;
 8006d58:	e002      	b.n	8006d60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	617b      	str	r3, [r7, #20]
      break;
 8006d5e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d60:	4b13      	ldr	r3, [pc, #76]	; (8006db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	091b      	lsrs	r3, r3, #4
 8006d66:	f003 0307 	and.w	r3, r3, #7
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006d6e:	4b10      	ldr	r3, [pc, #64]	; (8006db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	0a1b      	lsrs	r3, r3, #8
 8006d74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d78:	697a      	ldr	r2, [r7, #20]
 8006d7a:	fb03 f202 	mul.w	r2, r3, r2
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d84:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006d86:	4b0a      	ldr	r3, [pc, #40]	; (8006db0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	0e5b      	lsrs	r3, r3, #25
 8006d8c:	f003 0303 	and.w	r3, r3, #3
 8006d90:	3301      	adds	r3, #1
 8006d92:	005b      	lsls	r3, r3, #1
 8006d94:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006d96:	697a      	ldr	r2, [r7, #20]
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d9e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006da0:	69bb      	ldr	r3, [r7, #24]
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3724      	adds	r7, #36	; 0x24
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	40021000 	.word	0x40021000
 8006db4:	0800b120 	.word	0x0800b120
 8006db8:	00f42400 	.word	0x00f42400
 8006dbc:	02dc6c00 	.word	0x02dc6c00

08006dc0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b086      	sub	sp, #24
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006dc8:	2300      	movs	r3, #0
 8006dca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006dcc:	4b2a      	ldr	r3, [pc, #168]	; (8006e78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d003      	beq.n	8006de0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006dd8:	f7ff f9ee 	bl	80061b8 <HAL_PWREx_GetVoltageRange>
 8006ddc:	6178      	str	r0, [r7, #20]
 8006dde:	e014      	b.n	8006e0a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006de0:	4b25      	ldr	r3, [pc, #148]	; (8006e78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006de4:	4a24      	ldr	r2, [pc, #144]	; (8006e78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006de6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dea:	6593      	str	r3, [r2, #88]	; 0x58
 8006dec:	4b22      	ldr	r3, [pc, #136]	; (8006e78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006df4:	60fb      	str	r3, [r7, #12]
 8006df6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006df8:	f7ff f9de 	bl	80061b8 <HAL_PWREx_GetVoltageRange>
 8006dfc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006dfe:	4b1e      	ldr	r3, [pc, #120]	; (8006e78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e02:	4a1d      	ldr	r2, [pc, #116]	; (8006e78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e08:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e10:	d10b      	bne.n	8006e2a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2b80      	cmp	r3, #128	; 0x80
 8006e16:	d919      	bls.n	8006e4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2ba0      	cmp	r3, #160	; 0xa0
 8006e1c:	d902      	bls.n	8006e24 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006e1e:	2302      	movs	r3, #2
 8006e20:	613b      	str	r3, [r7, #16]
 8006e22:	e013      	b.n	8006e4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006e24:	2301      	movs	r3, #1
 8006e26:	613b      	str	r3, [r7, #16]
 8006e28:	e010      	b.n	8006e4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2b80      	cmp	r3, #128	; 0x80
 8006e2e:	d902      	bls.n	8006e36 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006e30:	2303      	movs	r3, #3
 8006e32:	613b      	str	r3, [r7, #16]
 8006e34:	e00a      	b.n	8006e4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2b80      	cmp	r3, #128	; 0x80
 8006e3a:	d102      	bne.n	8006e42 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	613b      	str	r3, [r7, #16]
 8006e40:	e004      	b.n	8006e4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2b70      	cmp	r3, #112	; 0x70
 8006e46:	d101      	bne.n	8006e4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006e48:	2301      	movs	r3, #1
 8006e4a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006e4c:	4b0b      	ldr	r3, [pc, #44]	; (8006e7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f023 0207 	bic.w	r2, r3, #7
 8006e54:	4909      	ldr	r1, [pc, #36]	; (8006e7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006e5c:	4b07      	ldr	r3, [pc, #28]	; (8006e7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 0307 	and.w	r3, r3, #7
 8006e64:	693a      	ldr	r2, [r7, #16]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d001      	beq.n	8006e6e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e000      	b.n	8006e70 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3718      	adds	r7, #24
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	40021000 	.word	0x40021000
 8006e7c:	40022000 	.word	0x40022000

08006e80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b086      	sub	sp, #24
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006e88:	2300      	movs	r3, #0
 8006e8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d031      	beq.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ea0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006ea4:	d01a      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006ea6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006eaa:	d814      	bhi.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d009      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006eb0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006eb4:	d10f      	bne.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006eb6:	4b5d      	ldr	r3, [pc, #372]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	4a5c      	ldr	r2, [pc, #368]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ec0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006ec2:	e00c      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	3304      	adds	r3, #4
 8006ec8:	2100      	movs	r1, #0
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 f9f0 	bl	80072b0 <RCCEx_PLLSAI1_Config>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006ed4:	e003      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	74fb      	strb	r3, [r7, #19]
      break;
 8006eda:	e000      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006edc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ede:	7cfb      	ldrb	r3, [r7, #19]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d10b      	bne.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ee4:	4b51      	ldr	r3, [pc, #324]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ef2:	494e      	ldr	r1, [pc, #312]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006efa:	e001      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006efc:	7cfb      	ldrb	r3, [r7, #19]
 8006efe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	f000 809e 	beq.w	800704a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006f12:	4b46      	ldr	r3, [pc, #280]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d101      	bne.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e000      	b.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006f22:	2300      	movs	r3, #0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00d      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f28:	4b40      	ldr	r3, [pc, #256]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f2c:	4a3f      	ldr	r2, [pc, #252]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f32:	6593      	str	r3, [r2, #88]	; 0x58
 8006f34:	4b3d      	ldr	r3, [pc, #244]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f3c:	60bb      	str	r3, [r7, #8]
 8006f3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f40:	2301      	movs	r3, #1
 8006f42:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f44:	4b3a      	ldr	r3, [pc, #232]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a39      	ldr	r2, [pc, #228]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f50:	f7fe faf0 	bl	8005534 <HAL_GetTick>
 8006f54:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006f56:	e009      	b.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f58:	f7fe faec 	bl	8005534 <HAL_GetTick>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	d902      	bls.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006f66:	2303      	movs	r3, #3
 8006f68:	74fb      	strb	r3, [r7, #19]
        break;
 8006f6a:	e005      	b.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006f6c:	4b30      	ldr	r3, [pc, #192]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d0ef      	beq.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006f78:	7cfb      	ldrb	r3, [r7, #19]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d15a      	bne.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006f7e:	4b2b      	ldr	r3, [pc, #172]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f88:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d01e      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f94:	697a      	ldr	r2, [r7, #20]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d019      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006f9a:	4b24      	ldr	r3, [pc, #144]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fa4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006fa6:	4b21      	ldr	r3, [pc, #132]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fac:	4a1f      	ldr	r2, [pc, #124]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006fae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006fb6:	4b1d      	ldr	r3, [pc, #116]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fbc:	4a1b      	ldr	r2, [pc, #108]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006fc6:	4a19      	ldr	r2, [pc, #100]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	f003 0301 	and.w	r3, r3, #1
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d016      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fd8:	f7fe faac 	bl	8005534 <HAL_GetTick>
 8006fdc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006fde:	e00b      	b.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fe0:	f7fe faa8 	bl	8005534 <HAL_GetTick>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d902      	bls.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	74fb      	strb	r3, [r7, #19]
            break;
 8006ff6:	e006      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ff8:	4b0c      	ldr	r3, [pc, #48]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ffe:	f003 0302 	and.w	r3, r3, #2
 8007002:	2b00      	cmp	r3, #0
 8007004:	d0ec      	beq.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8007006:	7cfb      	ldrb	r3, [r7, #19]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d10b      	bne.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800700c:	4b07      	ldr	r3, [pc, #28]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800700e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007012:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800701a:	4904      	ldr	r1, [pc, #16]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800701c:	4313      	orrs	r3, r2
 800701e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007022:	e009      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007024:	7cfb      	ldrb	r3, [r7, #19]
 8007026:	74bb      	strb	r3, [r7, #18]
 8007028:	e006      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800702a:	bf00      	nop
 800702c:	40021000 	.word	0x40021000
 8007030:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007034:	7cfb      	ldrb	r3, [r7, #19]
 8007036:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007038:	7c7b      	ldrb	r3, [r7, #17]
 800703a:	2b01      	cmp	r3, #1
 800703c:	d105      	bne.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800703e:	4b9b      	ldr	r3, [pc, #620]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007042:	4a9a      	ldr	r2, [pc, #616]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007044:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007048:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 0301 	and.w	r3, r3, #1
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00a      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007056:	4b95      	ldr	r3, [pc, #596]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800705c:	f023 0203 	bic.w	r2, r3, #3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6a1b      	ldr	r3, [r3, #32]
 8007064:	4991      	ldr	r1, [pc, #580]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007066:	4313      	orrs	r3, r2
 8007068:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 0302 	and.w	r3, r3, #2
 8007074:	2b00      	cmp	r3, #0
 8007076:	d00a      	beq.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007078:	4b8c      	ldr	r3, [pc, #560]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800707a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800707e:	f023 020c 	bic.w	r2, r3, #12
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007086:	4989      	ldr	r1, [pc, #548]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007088:	4313      	orrs	r3, r2
 800708a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 0304 	and.w	r3, r3, #4
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00a      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800709a:	4b84      	ldr	r3, [pc, #528]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800709c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a8:	4980      	ldr	r1, [pc, #512]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80070aa:	4313      	orrs	r3, r2
 80070ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0320 	and.w	r3, r3, #32
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00a      	beq.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80070bc:	4b7b      	ldr	r3, [pc, #492]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80070be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ca:	4978      	ldr	r1, [pc, #480]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80070cc:	4313      	orrs	r3, r2
 80070ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00a      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80070de:	4b73      	ldr	r3, [pc, #460]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80070e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ec:	496f      	ldr	r1, [pc, #444]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80070ee:	4313      	orrs	r3, r2
 80070f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d00a      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007100:	4b6a      	ldr	r3, [pc, #424]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007106:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710e:	4967      	ldr	r1, [pc, #412]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007110:	4313      	orrs	r3, r2
 8007112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00a      	beq.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007122:	4b62      	ldr	r3, [pc, #392]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007128:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007130:	495e      	ldr	r1, [pc, #376]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007132:	4313      	orrs	r3, r2
 8007134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007140:	2b00      	cmp	r3, #0
 8007142:	d00a      	beq.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007144:	4b59      	ldr	r3, [pc, #356]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800714a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007152:	4956      	ldr	r1, [pc, #344]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007154:	4313      	orrs	r3, r2
 8007156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00a      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007166:	4b51      	ldr	r3, [pc, #324]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800716c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007174:	494d      	ldr	r1, [pc, #308]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007176:	4313      	orrs	r3, r2
 8007178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007184:	2b00      	cmp	r3, #0
 8007186:	d028      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007188:	4b48      	ldr	r3, [pc, #288]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800718a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800718e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007196:	4945      	ldr	r1, [pc, #276]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007198:	4313      	orrs	r3, r2
 800719a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071a6:	d106      	bne.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071a8:	4b40      	ldr	r3, [pc, #256]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	4a3f      	ldr	r2, [pc, #252]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80071ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071b2:	60d3      	str	r3, [r2, #12]
 80071b4:	e011      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071be:	d10c      	bne.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	3304      	adds	r3, #4
 80071c4:	2101      	movs	r1, #1
 80071c6:	4618      	mov	r0, r3
 80071c8:	f000 f872 	bl	80072b0 <RCCEx_PLLSAI1_Config>
 80071cc:	4603      	mov	r3, r0
 80071ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80071d0:	7cfb      	ldrb	r3, [r7, #19]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d001      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 80071d6:	7cfb      	ldrb	r3, [r7, #19]
 80071d8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d028      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80071e6:	4b31      	ldr	r3, [pc, #196]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80071e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071f4:	492d      	ldr	r1, [pc, #180]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80071f6:	4313      	orrs	r3, r2
 80071f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007200:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007204:	d106      	bne.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007206:	4b29      	ldr	r3, [pc, #164]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	4a28      	ldr	r2, [pc, #160]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800720c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007210:	60d3      	str	r3, [r2, #12]
 8007212:	e011      	b.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007218:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800721c:	d10c      	bne.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	3304      	adds	r3, #4
 8007222:	2101      	movs	r1, #1
 8007224:	4618      	mov	r0, r3
 8007226:	f000 f843 	bl	80072b0 <RCCEx_PLLSAI1_Config>
 800722a:	4603      	mov	r3, r0
 800722c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800722e:	7cfb      	ldrb	r3, [r7, #19]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d001      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8007234:	7cfb      	ldrb	r3, [r7, #19]
 8007236:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007240:	2b00      	cmp	r3, #0
 8007242:	d01c      	beq.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007244:	4b19      	ldr	r3, [pc, #100]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800724a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007252:	4916      	ldr	r1, [pc, #88]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007254:	4313      	orrs	r3, r2
 8007256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800725e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007262:	d10c      	bne.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	3304      	adds	r3, #4
 8007268:	2102      	movs	r1, #2
 800726a:	4618      	mov	r0, r3
 800726c:	f000 f820 	bl	80072b0 <RCCEx_PLLSAI1_Config>
 8007270:	4603      	mov	r3, r0
 8007272:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007274:	7cfb      	ldrb	r3, [r7, #19]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d001      	beq.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 800727a:	7cfb      	ldrb	r3, [r7, #19]
 800727c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00a      	beq.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800728a:	4b08      	ldr	r3, [pc, #32]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800728c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007290:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007298:	4904      	ldr	r1, [pc, #16]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800729a:	4313      	orrs	r3, r2
 800729c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80072a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3718      	adds	r7, #24
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	40021000 	.word	0x40021000

080072b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80072ba:	2300      	movs	r3, #0
 80072bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80072be:	4b74      	ldr	r3, [pc, #464]	; (8007490 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	f003 0303 	and.w	r3, r3, #3
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d018      	beq.n	80072fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80072ca:	4b71      	ldr	r3, [pc, #452]	; (8007490 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	f003 0203 	and.w	r2, r3, #3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d10d      	bne.n	80072f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
       ||
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d009      	beq.n	80072f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80072e2:	4b6b      	ldr	r3, [pc, #428]	; (8007490 <RCCEx_PLLSAI1_Config+0x1e0>)
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	091b      	lsrs	r3, r3, #4
 80072e8:	f003 0307 	and.w	r3, r3, #7
 80072ec:	1c5a      	adds	r2, r3, #1
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	685b      	ldr	r3, [r3, #4]
       ||
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d047      	beq.n	8007386 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	73fb      	strb	r3, [r7, #15]
 80072fa:	e044      	b.n	8007386 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2b03      	cmp	r3, #3
 8007302:	d018      	beq.n	8007336 <RCCEx_PLLSAI1_Config+0x86>
 8007304:	2b03      	cmp	r3, #3
 8007306:	d825      	bhi.n	8007354 <RCCEx_PLLSAI1_Config+0xa4>
 8007308:	2b01      	cmp	r3, #1
 800730a:	d002      	beq.n	8007312 <RCCEx_PLLSAI1_Config+0x62>
 800730c:	2b02      	cmp	r3, #2
 800730e:	d009      	beq.n	8007324 <RCCEx_PLLSAI1_Config+0x74>
 8007310:	e020      	b.n	8007354 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007312:	4b5f      	ldr	r3, [pc, #380]	; (8007490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 0302 	and.w	r3, r3, #2
 800731a:	2b00      	cmp	r3, #0
 800731c:	d11d      	bne.n	800735a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007322:	e01a      	b.n	800735a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007324:	4b5a      	ldr	r3, [pc, #360]	; (8007490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800732c:	2b00      	cmp	r3, #0
 800732e:	d116      	bne.n	800735e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007334:	e013      	b.n	800735e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007336:	4b56      	ldr	r3, [pc, #344]	; (8007490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d10f      	bne.n	8007362 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007342:	4b53      	ldr	r3, [pc, #332]	; (8007490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800734a:	2b00      	cmp	r3, #0
 800734c:	d109      	bne.n	8007362 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007352:	e006      	b.n	8007362 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	73fb      	strb	r3, [r7, #15]
      break;
 8007358:	e004      	b.n	8007364 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800735a:	bf00      	nop
 800735c:	e002      	b.n	8007364 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800735e:	bf00      	nop
 8007360:	e000      	b.n	8007364 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007362:	bf00      	nop
    }

    if(status == HAL_OK)
 8007364:	7bfb      	ldrb	r3, [r7, #15]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d10d      	bne.n	8007386 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800736a:	4b49      	ldr	r3, [pc, #292]	; (8007490 <RCCEx_PLLSAI1_Config+0x1e0>)
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6819      	ldr	r1, [r3, #0]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	3b01      	subs	r3, #1
 800737c:	011b      	lsls	r3, r3, #4
 800737e:	430b      	orrs	r3, r1
 8007380:	4943      	ldr	r1, [pc, #268]	; (8007490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007382:	4313      	orrs	r3, r2
 8007384:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007386:	7bfb      	ldrb	r3, [r7, #15]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d17c      	bne.n	8007486 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800738c:	4b40      	ldr	r3, [pc, #256]	; (8007490 <RCCEx_PLLSAI1_Config+0x1e0>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a3f      	ldr	r2, [pc, #252]	; (8007490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007392:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007396:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007398:	f7fe f8cc 	bl	8005534 <HAL_GetTick>
 800739c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800739e:	e009      	b.n	80073b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80073a0:	f7fe f8c8 	bl	8005534 <HAL_GetTick>
 80073a4:	4602      	mov	r2, r0
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	2b02      	cmp	r3, #2
 80073ac:	d902      	bls.n	80073b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	73fb      	strb	r3, [r7, #15]
        break;
 80073b2:	e005      	b.n	80073c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80073b4:	4b36      	ldr	r3, [pc, #216]	; (8007490 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1ef      	bne.n	80073a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80073c0:	7bfb      	ldrb	r3, [r7, #15]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d15f      	bne.n	8007486 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d110      	bne.n	80073ee <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80073cc:	4b30      	ldr	r3, [pc, #192]	; (8007490 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80073d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	6892      	ldr	r2, [r2, #8]
 80073dc:	0211      	lsls	r1, r2, #8
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	68d2      	ldr	r2, [r2, #12]
 80073e2:	06d2      	lsls	r2, r2, #27
 80073e4:	430a      	orrs	r2, r1
 80073e6:	492a      	ldr	r1, [pc, #168]	; (8007490 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073e8:	4313      	orrs	r3, r2
 80073ea:	610b      	str	r3, [r1, #16]
 80073ec:	e027      	b.n	800743e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d112      	bne.n	800741a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80073f4:	4b26      	ldr	r3, [pc, #152]	; (8007490 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80073fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	6892      	ldr	r2, [r2, #8]
 8007404:	0211      	lsls	r1, r2, #8
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	6912      	ldr	r2, [r2, #16]
 800740a:	0852      	lsrs	r2, r2, #1
 800740c:	3a01      	subs	r2, #1
 800740e:	0552      	lsls	r2, r2, #21
 8007410:	430a      	orrs	r2, r1
 8007412:	491f      	ldr	r1, [pc, #124]	; (8007490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007414:	4313      	orrs	r3, r2
 8007416:	610b      	str	r3, [r1, #16]
 8007418:	e011      	b.n	800743e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800741a:	4b1d      	ldr	r3, [pc, #116]	; (8007490 <RCCEx_PLLSAI1_Config+0x1e0>)
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007422:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	6892      	ldr	r2, [r2, #8]
 800742a:	0211      	lsls	r1, r2, #8
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	6952      	ldr	r2, [r2, #20]
 8007430:	0852      	lsrs	r2, r2, #1
 8007432:	3a01      	subs	r2, #1
 8007434:	0652      	lsls	r2, r2, #25
 8007436:	430a      	orrs	r2, r1
 8007438:	4915      	ldr	r1, [pc, #84]	; (8007490 <RCCEx_PLLSAI1_Config+0x1e0>)
 800743a:	4313      	orrs	r3, r2
 800743c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800743e:	4b14      	ldr	r3, [pc, #80]	; (8007490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a13      	ldr	r2, [pc, #76]	; (8007490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007444:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007448:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800744a:	f7fe f873 	bl	8005534 <HAL_GetTick>
 800744e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007450:	e009      	b.n	8007466 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007452:	f7fe f86f 	bl	8005534 <HAL_GetTick>
 8007456:	4602      	mov	r2, r0
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	1ad3      	subs	r3, r2, r3
 800745c:	2b02      	cmp	r3, #2
 800745e:	d902      	bls.n	8007466 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007460:	2303      	movs	r3, #3
 8007462:	73fb      	strb	r3, [r7, #15]
          break;
 8007464:	e005      	b.n	8007472 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007466:	4b0a      	ldr	r3, [pc, #40]	; (8007490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800746e:	2b00      	cmp	r3, #0
 8007470:	d0ef      	beq.n	8007452 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8007472:	7bfb      	ldrb	r3, [r7, #15]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d106      	bne.n	8007486 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007478:	4b05      	ldr	r3, [pc, #20]	; (8007490 <RCCEx_PLLSAI1_Config+0x1e0>)
 800747a:	691a      	ldr	r2, [r3, #16]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	699b      	ldr	r3, [r3, #24]
 8007480:	4903      	ldr	r1, [pc, #12]	; (8007490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007482:	4313      	orrs	r3, r2
 8007484:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007486:	7bfb      	ldrb	r3, [r7, #15]
}
 8007488:	4618      	mov	r0, r3
 800748a:	3710      	adds	r7, #16
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}
 8007490:	40021000 	.word	0x40021000

08007494 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d06c      	beq.n	8007580 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d106      	bne.n	80074c0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f001 ff3a 	bl	8009334 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2202      	movs	r2, #2
 80074c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	22ca      	movs	r2, #202	; 0xca
 80074ce:	625a      	str	r2, [r3, #36]	; 0x24
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2253      	movs	r2, #83	; 0x53
 80074d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 f87c 	bl	80075d6 <RTC_EnterInitMode>
 80074de:	4603      	mov	r3, r0
 80074e0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80074e2:	7bfb      	ldrb	r3, [r7, #15]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d14b      	bne.n	8007580 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	6812      	ldr	r2, [r2, #0]
 80074f2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80074f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074fa:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	6899      	ldr	r1, [r3, #8]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	685a      	ldr	r2, [r3, #4]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	431a      	orrs	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	431a      	orrs	r2, r3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	430a      	orrs	r2, r1
 8007518:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	68d2      	ldr	r2, [r2, #12]
 8007522:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	6919      	ldr	r1, [r3, #16]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	041a      	lsls	r2, r3, #16
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	430a      	orrs	r2, r1
 8007536:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 f87f 	bl	800763c <RTC_ExitInitMode>
 800753e:	4603      	mov	r3, r0
 8007540:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8007542:	7bfb      	ldrb	r3, [r7, #15]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d11b      	bne.n	8007580 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f022 0203 	bic.w	r2, r2, #3
 8007556:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	69da      	ldr	r2, [r3, #28]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	695b      	ldr	r3, [r3, #20]
 8007566:	431a      	orrs	r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	430a      	orrs	r2, r1
 800756e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	22ff      	movs	r2, #255	; 0xff
 8007576:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8007580:	7bfb      	ldrb	r3, [r7, #15]
}
 8007582:	4618      	mov	r0, r3
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b084      	sub	sp, #16
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	68da      	ldr	r2, [r3, #12]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80075a0:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80075a2:	f7fd ffc7 	bl	8005534 <HAL_GetTick>
 80075a6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80075a8:	e009      	b.n	80075be <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80075aa:	f7fd ffc3 	bl	8005534 <HAL_GetTick>
 80075ae:	4602      	mov	r2, r0
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	1ad3      	subs	r3, r2, r3
 80075b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075b8:	d901      	bls.n	80075be <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80075ba:	2303      	movs	r3, #3
 80075bc:	e007      	b.n	80075ce <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	f003 0320 	and.w	r3, r3, #32
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d0ee      	beq.n	80075aa <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b084      	sub	sp, #16
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80075de:	2300      	movs	r3, #0
 80075e0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d120      	bne.n	8007632 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075f8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80075fa:	f7fd ff9b 	bl	8005534 <HAL_GetTick>
 80075fe:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007600:	e00d      	b.n	800761e <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007602:	f7fd ff97 	bl	8005534 <HAL_GetTick>
 8007606:	4602      	mov	r2, r0
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	1ad3      	subs	r3, r2, r3
 800760c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007610:	d905      	bls.n	800761e <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2203      	movs	r2, #3
 800761a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007628:	2b00      	cmp	r3, #0
 800762a:	d102      	bne.n	8007632 <RTC_EnterInitMode+0x5c>
 800762c:	7bfb      	ldrb	r3, [r7, #15]
 800762e:	2b03      	cmp	r3, #3
 8007630:	d1e7      	bne.n	8007602 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8007632:	7bfb      	ldrb	r3, [r7, #15]
}
 8007634:	4618      	mov	r0, r3
 8007636:	3710      	adds	r7, #16
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007644:	2300      	movs	r3, #0
 8007646:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007648:	4b1a      	ldr	r3, [pc, #104]	; (80076b4 <RTC_ExitInitMode+0x78>)
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	4a19      	ldr	r2, [pc, #100]	; (80076b4 <RTC_ExitInitMode+0x78>)
 800764e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007652:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007654:	4b17      	ldr	r3, [pc, #92]	; (80076b4 <RTC_ExitInitMode+0x78>)
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	f003 0320 	and.w	r3, r3, #32
 800765c:	2b00      	cmp	r3, #0
 800765e:	d10c      	bne.n	800767a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f7ff ff92 	bl	800758a <HAL_RTC_WaitForSynchro>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d01e      	beq.n	80076aa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2203      	movs	r2, #3
 8007670:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007674:	2303      	movs	r3, #3
 8007676:	73fb      	strb	r3, [r7, #15]
 8007678:	e017      	b.n	80076aa <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800767a:	4b0e      	ldr	r3, [pc, #56]	; (80076b4 <RTC_ExitInitMode+0x78>)
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	4a0d      	ldr	r2, [pc, #52]	; (80076b4 <RTC_ExitInitMode+0x78>)
 8007680:	f023 0320 	bic.w	r3, r3, #32
 8007684:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f7ff ff7f 	bl	800758a <HAL_RTC_WaitForSynchro>
 800768c:	4603      	mov	r3, r0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d005      	beq.n	800769e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2203      	movs	r2, #3
 8007696:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800769a:	2303      	movs	r3, #3
 800769c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800769e:	4b05      	ldr	r3, [pc, #20]	; (80076b4 <RTC_ExitInitMode+0x78>)
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	4a04      	ldr	r2, [pc, #16]	; (80076b4 <RTC_ExitInitMode+0x78>)
 80076a4:	f043 0320 	orr.w	r3, r3, #32
 80076a8:	6093      	str	r3, [r2, #8]
  }

  return status;
 80076aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	40002800 	.word	0x40002800

080076b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d101      	bne.n	80076ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e049      	b.n	800775e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d106      	bne.n	80076e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f001 fe44 	bl	800936c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2202      	movs	r2, #2
 80076e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	3304      	adds	r3, #4
 80076f4:	4619      	mov	r1, r3
 80076f6:	4610      	mov	r0, r2
 80076f8:	f000 fe2e 	bl	8008358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800775c:	2300      	movs	r3, #0
}
 800775e:	4618      	mov	r0, r3
 8007760:	3708      	adds	r7, #8
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b082      	sub	sp, #8
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d101      	bne.n	8007778 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	e049      	b.n	800780c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800777e:	b2db      	uxtb	r3, r3
 8007780:	2b00      	cmp	r3, #0
 8007782:	d106      	bne.n	8007792 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f001 fee7 	bl	8009560 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2202      	movs	r2, #2
 8007796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	3304      	adds	r3, #4
 80077a2:	4619      	mov	r1, r3
 80077a4:	4610      	mov	r0, r2
 80077a6:	f000 fdd7 	bl	8008358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2201      	movs	r2, #1
 80077b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2201      	movs	r2, #1
 80077be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2201      	movs	r2, #1
 80077c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2201      	movs	r2, #1
 80077ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2201      	movs	r2, #1
 80077d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2201      	movs	r2, #1
 80077de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2201      	movs	r2, #1
 80077ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2201      	movs	r2, #1
 80077f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2201      	movs	r2, #1
 80077fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2201      	movs	r2, #1
 8007806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b086      	sub	sp, #24
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	607a      	str	r2, [r7, #4]
 8007820:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007822:	2300      	movs	r3, #0
 8007824:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d109      	bne.n	8007840 <HAL_TIM_PWM_Start_DMA+0x2c>
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007832:	b2db      	uxtb	r3, r3
 8007834:	2b02      	cmp	r3, #2
 8007836:	bf0c      	ite	eq
 8007838:	2301      	moveq	r3, #1
 800783a:	2300      	movne	r3, #0
 800783c:	b2db      	uxtb	r3, r3
 800783e:	e03c      	b.n	80078ba <HAL_TIM_PWM_Start_DMA+0xa6>
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	2b04      	cmp	r3, #4
 8007844:	d109      	bne.n	800785a <HAL_TIM_PWM_Start_DMA+0x46>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800784c:	b2db      	uxtb	r3, r3
 800784e:	2b02      	cmp	r3, #2
 8007850:	bf0c      	ite	eq
 8007852:	2301      	moveq	r3, #1
 8007854:	2300      	movne	r3, #0
 8007856:	b2db      	uxtb	r3, r3
 8007858:	e02f      	b.n	80078ba <HAL_TIM_PWM_Start_DMA+0xa6>
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	2b08      	cmp	r3, #8
 800785e:	d109      	bne.n	8007874 <HAL_TIM_PWM_Start_DMA+0x60>
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007866:	b2db      	uxtb	r3, r3
 8007868:	2b02      	cmp	r3, #2
 800786a:	bf0c      	ite	eq
 800786c:	2301      	moveq	r3, #1
 800786e:	2300      	movne	r3, #0
 8007870:	b2db      	uxtb	r3, r3
 8007872:	e022      	b.n	80078ba <HAL_TIM_PWM_Start_DMA+0xa6>
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	2b0c      	cmp	r3, #12
 8007878:	d109      	bne.n	800788e <HAL_TIM_PWM_Start_DMA+0x7a>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007880:	b2db      	uxtb	r3, r3
 8007882:	2b02      	cmp	r3, #2
 8007884:	bf0c      	ite	eq
 8007886:	2301      	moveq	r3, #1
 8007888:	2300      	movne	r3, #0
 800788a:	b2db      	uxtb	r3, r3
 800788c:	e015      	b.n	80078ba <HAL_TIM_PWM_Start_DMA+0xa6>
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	2b10      	cmp	r3, #16
 8007892:	d109      	bne.n	80078a8 <HAL_TIM_PWM_Start_DMA+0x94>
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800789a:	b2db      	uxtb	r3, r3
 800789c:	2b02      	cmp	r3, #2
 800789e:	bf0c      	ite	eq
 80078a0:	2301      	moveq	r3, #1
 80078a2:	2300      	movne	r3, #0
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	e008      	b.n	80078ba <HAL_TIM_PWM_Start_DMA+0xa6>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	2b02      	cmp	r3, #2
 80078b2:	bf0c      	ite	eq
 80078b4:	2301      	moveq	r3, #1
 80078b6:	2300      	movne	r3, #0
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d001      	beq.n	80078c2 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 80078be:	2302      	movs	r3, #2
 80078c0:	e18d      	b.n	8007bde <HAL_TIM_PWM_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d109      	bne.n	80078dc <HAL_TIM_PWM_Start_DMA+0xc8>
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	bf0c      	ite	eq
 80078d4:	2301      	moveq	r3, #1
 80078d6:	2300      	movne	r3, #0
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	e03c      	b.n	8007956 <HAL_TIM_PWM_Start_DMA+0x142>
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	2b04      	cmp	r3, #4
 80078e0:	d109      	bne.n	80078f6 <HAL_TIM_PWM_Start_DMA+0xe2>
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	bf0c      	ite	eq
 80078ee:	2301      	moveq	r3, #1
 80078f0:	2300      	movne	r3, #0
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	e02f      	b.n	8007956 <HAL_TIM_PWM_Start_DMA+0x142>
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	2b08      	cmp	r3, #8
 80078fa:	d109      	bne.n	8007910 <HAL_TIM_PWM_Start_DMA+0xfc>
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007902:	b2db      	uxtb	r3, r3
 8007904:	2b01      	cmp	r3, #1
 8007906:	bf0c      	ite	eq
 8007908:	2301      	moveq	r3, #1
 800790a:	2300      	movne	r3, #0
 800790c:	b2db      	uxtb	r3, r3
 800790e:	e022      	b.n	8007956 <HAL_TIM_PWM_Start_DMA+0x142>
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	2b0c      	cmp	r3, #12
 8007914:	d109      	bne.n	800792a <HAL_TIM_PWM_Start_DMA+0x116>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800791c:	b2db      	uxtb	r3, r3
 800791e:	2b01      	cmp	r3, #1
 8007920:	bf0c      	ite	eq
 8007922:	2301      	moveq	r3, #1
 8007924:	2300      	movne	r3, #0
 8007926:	b2db      	uxtb	r3, r3
 8007928:	e015      	b.n	8007956 <HAL_TIM_PWM_Start_DMA+0x142>
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	2b10      	cmp	r3, #16
 800792e:	d109      	bne.n	8007944 <HAL_TIM_PWM_Start_DMA+0x130>
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007936:	b2db      	uxtb	r3, r3
 8007938:	2b01      	cmp	r3, #1
 800793a:	bf0c      	ite	eq
 800793c:	2301      	moveq	r3, #1
 800793e:	2300      	movne	r3, #0
 8007940:	b2db      	uxtb	r3, r3
 8007942:	e008      	b.n	8007956 <HAL_TIM_PWM_Start_DMA+0x142>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800794a:	b2db      	uxtb	r3, r3
 800794c:	2b01      	cmp	r3, #1
 800794e:	bf0c      	ite	eq
 8007950:	2301      	moveq	r3, #1
 8007952:	2300      	movne	r3, #0
 8007954:	b2db      	uxtb	r3, r3
 8007956:	2b00      	cmp	r3, #0
 8007958:	d034      	beq.n	80079c4 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d002      	beq.n	8007966 <HAL_TIM_PWM_Start_DMA+0x152>
 8007960:	887b      	ldrh	r3, [r7, #2]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d101      	bne.n	800796a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	e139      	b.n	8007bde <HAL_TIM_PWM_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d104      	bne.n	800797a <HAL_TIM_PWM_Start_DMA+0x166>
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2202      	movs	r2, #2
 8007974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007978:	e026      	b.n	80079c8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	2b04      	cmp	r3, #4
 800797e:	d104      	bne.n	800798a <HAL_TIM_PWM_Start_DMA+0x176>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2202      	movs	r2, #2
 8007984:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007988:	e01e      	b.n	80079c8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	2b08      	cmp	r3, #8
 800798e:	d104      	bne.n	800799a <HAL_TIM_PWM_Start_DMA+0x186>
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2202      	movs	r2, #2
 8007994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007998:	e016      	b.n	80079c8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	2b0c      	cmp	r3, #12
 800799e:	d104      	bne.n	80079aa <HAL_TIM_PWM_Start_DMA+0x196>
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2202      	movs	r2, #2
 80079a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80079a8:	e00e      	b.n	80079c8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	2b10      	cmp	r3, #16
 80079ae:	d104      	bne.n	80079ba <HAL_TIM_PWM_Start_DMA+0x1a6>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2202      	movs	r2, #2
 80079b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079b8:	e006      	b.n	80079c8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2202      	movs	r2, #2
 80079be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80079c2:	e001      	b.n	80079c8 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	e10a      	b.n	8007bde <HAL_TIM_PWM_Start_DMA+0x3ca>
  }

  switch (Channel)
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	2b0c      	cmp	r3, #12
 80079cc:	f200 80ae 	bhi.w	8007b2c <HAL_TIM_PWM_Start_DMA+0x318>
 80079d0:	a201      	add	r2, pc, #4	; (adr r2, 80079d8 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80079d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d6:	bf00      	nop
 80079d8:	08007a0d 	.word	0x08007a0d
 80079dc:	08007b2d 	.word	0x08007b2d
 80079e0:	08007b2d 	.word	0x08007b2d
 80079e4:	08007b2d 	.word	0x08007b2d
 80079e8:	08007a55 	.word	0x08007a55
 80079ec:	08007b2d 	.word	0x08007b2d
 80079f0:	08007b2d 	.word	0x08007b2d
 80079f4:	08007b2d 	.word	0x08007b2d
 80079f8:	08007a9d 	.word	0x08007a9d
 80079fc:	08007b2d 	.word	0x08007b2d
 8007a00:	08007b2d 	.word	0x08007b2d
 8007a04:	08007b2d 	.word	0x08007b2d
 8007a08:	08007ae5 	.word	0x08007ae5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a10:	4a75      	ldr	r2, [pc, #468]	; (8007be8 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8007a12:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a18:	4a74      	ldr	r2, [pc, #464]	; (8007bec <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8007a1a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a20:	4a73      	ldr	r2, [pc, #460]	; (8007bf0 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8007a22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007a28:	6879      	ldr	r1, [r7, #4]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	3334      	adds	r3, #52	; 0x34
 8007a30:	461a      	mov	r2, r3
 8007a32:	887b      	ldrh	r3, [r7, #2]
 8007a34:	f7fd ffce 	bl	80059d4 <HAL_DMA_Start_IT>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d001      	beq.n	8007a42 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e0cd      	b.n	8007bde <HAL_TIM_PWM_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68da      	ldr	r2, [r3, #12]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a50:	60da      	str	r2, [r3, #12]
      break;
 8007a52:	e06e      	b.n	8007b32 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a58:	4a63      	ldr	r2, [pc, #396]	; (8007be8 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8007a5a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a60:	4a62      	ldr	r2, [pc, #392]	; (8007bec <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8007a62:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a68:	4a61      	ldr	r2, [pc, #388]	; (8007bf0 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8007a6a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007a70:	6879      	ldr	r1, [r7, #4]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	3338      	adds	r3, #56	; 0x38
 8007a78:	461a      	mov	r2, r3
 8007a7a:	887b      	ldrh	r3, [r7, #2]
 8007a7c:	f7fd ffaa 	bl	80059d4 <HAL_DMA_Start_IT>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d001      	beq.n	8007a8a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e0a9      	b.n	8007bde <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68da      	ldr	r2, [r3, #12]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a98:	60da      	str	r2, [r3, #12]
      break;
 8007a9a:	e04a      	b.n	8007b32 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa0:	4a51      	ldr	r2, [pc, #324]	; (8007be8 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8007aa2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa8:	4a50      	ldr	r2, [pc, #320]	; (8007bec <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8007aaa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab0:	4a4f      	ldr	r2, [pc, #316]	; (8007bf0 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8007ab2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007ab8:	6879      	ldr	r1, [r7, #4]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	333c      	adds	r3, #60	; 0x3c
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	887b      	ldrh	r3, [r7, #2]
 8007ac4:	f7fd ff86 	bl	80059d4 <HAL_DMA_Start_IT>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d001      	beq.n	8007ad2 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e085      	b.n	8007bde <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68da      	ldr	r2, [r3, #12]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ae0:	60da      	str	r2, [r3, #12]
      break;
 8007ae2:	e026      	b.n	8007b32 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae8:	4a3f      	ldr	r2, [pc, #252]	; (8007be8 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8007aea:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af0:	4a3e      	ldr	r2, [pc, #248]	; (8007bec <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8007af2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af8:	4a3d      	ldr	r2, [pc, #244]	; (8007bf0 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8007afa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007b00:	6879      	ldr	r1, [r7, #4]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	3340      	adds	r3, #64	; 0x40
 8007b08:	461a      	mov	r2, r3
 8007b0a:	887b      	ldrh	r3, [r7, #2]
 8007b0c:	f7fd ff62 	bl	80059d4 <HAL_DMA_Start_IT>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d001      	beq.n	8007b1a <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e061      	b.n	8007bde <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68da      	ldr	r2, [r3, #12]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b28:	60da      	str	r2, [r3, #12]
      break;
 8007b2a:	e002      	b.n	8007b32 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	75fb      	strb	r3, [r7, #23]
      break;
 8007b30:	bf00      	nop
  }

  if (status == HAL_OK)
 8007b32:	7dfb      	ldrb	r3, [r7, #23]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d151      	bne.n	8007bdc <HAL_TIM_PWM_Start_DMA+0x3c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	68b9      	ldr	r1, [r7, #8]
 8007b40:	4618      	mov	r0, r3
 8007b42:	f000 ff85 	bl	8008a50 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a2a      	ldr	r2, [pc, #168]	; (8007bf4 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d009      	beq.n	8007b64 <HAL_TIM_PWM_Start_DMA+0x350>
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a28      	ldr	r2, [pc, #160]	; (8007bf8 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d004      	beq.n	8007b64 <HAL_TIM_PWM_Start_DMA+0x350>
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a27      	ldr	r2, [pc, #156]	; (8007bfc <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d101      	bne.n	8007b68 <HAL_TIM_PWM_Start_DMA+0x354>
 8007b64:	2301      	movs	r3, #1
 8007b66:	e000      	b.n	8007b6a <HAL_TIM_PWM_Start_DMA+0x356>
 8007b68:	2300      	movs	r3, #0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d007      	beq.n	8007b7e <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a1c      	ldr	r2, [pc, #112]	; (8007bf4 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d009      	beq.n	8007b9c <HAL_TIM_PWM_Start_DMA+0x388>
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b90:	d004      	beq.n	8007b9c <HAL_TIM_PWM_Start_DMA+0x388>
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a18      	ldr	r2, [pc, #96]	; (8007bf8 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d115      	bne.n	8007bc8 <HAL_TIM_PWM_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	689a      	ldr	r2, [r3, #8]
 8007ba2:	4b17      	ldr	r3, [pc, #92]	; (8007c00 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	2b06      	cmp	r3, #6
 8007bac:	d015      	beq.n	8007bda <HAL_TIM_PWM_Start_DMA+0x3c6>
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bb4:	d011      	beq.n	8007bda <HAL_TIM_PWM_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f042 0201 	orr.w	r2, r2, #1
 8007bc4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bc6:	e008      	b.n	8007bda <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f042 0201 	orr.w	r2, r2, #1
 8007bd6:	601a      	str	r2, [r3, #0]
 8007bd8:	e000      	b.n	8007bdc <HAL_TIM_PWM_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bda:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3718      	adds	r7, #24
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	08008249 	.word	0x08008249
 8007bec:	080082f1 	.word	0x080082f1
 8007bf0:	080081b7 	.word	0x080081b7
 8007bf4:	40012c00 	.word	0x40012c00
 8007bf8:	40014000 	.word	0x40014000
 8007bfc:	40014400 	.word	0x40014400
 8007c00:	00010007 	.word	0x00010007

08007c04 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	2b0c      	cmp	r3, #12
 8007c16:	d855      	bhi.n	8007cc4 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8007c18:	a201      	add	r2, pc, #4	; (adr r2, 8007c20 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8007c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c1e:	bf00      	nop
 8007c20:	08007c55 	.word	0x08007c55
 8007c24:	08007cc5 	.word	0x08007cc5
 8007c28:	08007cc5 	.word	0x08007cc5
 8007c2c:	08007cc5 	.word	0x08007cc5
 8007c30:	08007c71 	.word	0x08007c71
 8007c34:	08007cc5 	.word	0x08007cc5
 8007c38:	08007cc5 	.word	0x08007cc5
 8007c3c:	08007cc5 	.word	0x08007cc5
 8007c40:	08007c8d 	.word	0x08007c8d
 8007c44:	08007cc5 	.word	0x08007cc5
 8007c48:	08007cc5 	.word	0x08007cc5
 8007c4c:	08007cc5 	.word	0x08007cc5
 8007c50:	08007ca9 	.word	0x08007ca9
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	68da      	ldr	r2, [r3, #12]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007c62:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f7fd ff13 	bl	8005a94 <HAL_DMA_Abort_IT>
      break;
 8007c6e:	e02c      	b.n	8007cca <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68da      	ldr	r2, [r3, #12]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c7e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7fd ff05 	bl	8005a94 <HAL_DMA_Abort_IT>
      break;
 8007c8a:	e01e      	b.n	8007cca <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	68da      	ldr	r2, [r3, #12]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c9a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f7fd fef7 	bl	8005a94 <HAL_DMA_Abort_IT>
      break;
 8007ca6:	e010      	b.n	8007cca <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	68da      	ldr	r2, [r3, #12]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007cb6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7fd fee9 	bl	8005a94 <HAL_DMA_Abort_IT>
      break;
 8007cc2:	e002      	b.n	8007cca <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	73fb      	strb	r3, [r7, #15]
      break;
 8007cc8:	bf00      	nop
  }

  if (status == HAL_OK)
 8007cca:	7bfb      	ldrb	r3, [r7, #15]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d176      	bne.n	8007dbe <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	6839      	ldr	r1, [r7, #0]
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f000 feb9 	bl	8008a50 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a39      	ldr	r2, [pc, #228]	; (8007dc8 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d009      	beq.n	8007cfc <HAL_TIM_PWM_Stop_DMA+0xf8>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a37      	ldr	r2, [pc, #220]	; (8007dcc <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d004      	beq.n	8007cfc <HAL_TIM_PWM_Stop_DMA+0xf8>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a36      	ldr	r2, [pc, #216]	; (8007dd0 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d101      	bne.n	8007d00 <HAL_TIM_PWM_Stop_DMA+0xfc>
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e000      	b.n	8007d02 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8007d00:	2300      	movs	r3, #0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d017      	beq.n	8007d36 <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	6a1a      	ldr	r2, [r3, #32]
 8007d0c:	f241 1311 	movw	r3, #4369	; 0x1111
 8007d10:	4013      	ands	r3, r2
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d10f      	bne.n	8007d36 <HAL_TIM_PWM_Stop_DMA+0x132>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	6a1a      	ldr	r2, [r3, #32]
 8007d1c:	f240 4344 	movw	r3, #1092	; 0x444
 8007d20:	4013      	ands	r3, r2
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d107      	bne.n	8007d36 <HAL_TIM_PWM_Stop_DMA+0x132>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d34:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	6a1a      	ldr	r2, [r3, #32]
 8007d3c:	f241 1311 	movw	r3, #4369	; 0x1111
 8007d40:	4013      	ands	r3, r2
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d10f      	bne.n	8007d66 <HAL_TIM_PWM_Stop_DMA+0x162>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	6a1a      	ldr	r2, [r3, #32]
 8007d4c:	f240 4344 	movw	r3, #1092	; 0x444
 8007d50:	4013      	ands	r3, r2
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d107      	bne.n	8007d66 <HAL_TIM_PWM_Stop_DMA+0x162>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f022 0201 	bic.w	r2, r2, #1
 8007d64:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d104      	bne.n	8007d76 <HAL_TIM_PWM_Stop_DMA+0x172>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d74:	e023      	b.n	8007dbe <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	2b04      	cmp	r3, #4
 8007d7a:	d104      	bne.n	8007d86 <HAL_TIM_PWM_Stop_DMA+0x182>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d84:	e01b      	b.n	8007dbe <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	2b08      	cmp	r3, #8
 8007d8a:	d104      	bne.n	8007d96 <HAL_TIM_PWM_Stop_DMA+0x192>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d94:	e013      	b.n	8007dbe <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	2b0c      	cmp	r3, #12
 8007d9a:	d104      	bne.n	8007da6 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007da4:	e00b      	b.n	8007dbe <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	2b10      	cmp	r3, #16
 8007daa:	d104      	bne.n	8007db6 <HAL_TIM_PWM_Stop_DMA+0x1b2>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007db4:	e003      	b.n	8007dbe <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2201      	movs	r2, #1
 8007dba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8007dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3710      	adds	r7, #16
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	40012c00 	.word	0x40012c00
 8007dcc:	40014000 	.word	0x40014000
 8007dd0:	40014400 	.word	0x40014400

08007dd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b086      	sub	sp, #24
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007de0:	2300      	movs	r3, #0
 8007de2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d101      	bne.n	8007df2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007dee:	2302      	movs	r3, #2
 8007df0:	e0ff      	b.n	8007ff2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2201      	movs	r2, #1
 8007df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2b14      	cmp	r3, #20
 8007dfe:	f200 80f0 	bhi.w	8007fe2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007e02:	a201      	add	r2, pc, #4	; (adr r2, 8007e08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e08:	08007e5d 	.word	0x08007e5d
 8007e0c:	08007fe3 	.word	0x08007fe3
 8007e10:	08007fe3 	.word	0x08007fe3
 8007e14:	08007fe3 	.word	0x08007fe3
 8007e18:	08007e9d 	.word	0x08007e9d
 8007e1c:	08007fe3 	.word	0x08007fe3
 8007e20:	08007fe3 	.word	0x08007fe3
 8007e24:	08007fe3 	.word	0x08007fe3
 8007e28:	08007edf 	.word	0x08007edf
 8007e2c:	08007fe3 	.word	0x08007fe3
 8007e30:	08007fe3 	.word	0x08007fe3
 8007e34:	08007fe3 	.word	0x08007fe3
 8007e38:	08007f1f 	.word	0x08007f1f
 8007e3c:	08007fe3 	.word	0x08007fe3
 8007e40:	08007fe3 	.word	0x08007fe3
 8007e44:	08007fe3 	.word	0x08007fe3
 8007e48:	08007f61 	.word	0x08007f61
 8007e4c:	08007fe3 	.word	0x08007fe3
 8007e50:	08007fe3 	.word	0x08007fe3
 8007e54:	08007fe3 	.word	0x08007fe3
 8007e58:	08007fa1 	.word	0x08007fa1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	68b9      	ldr	r1, [r7, #8]
 8007e62:	4618      	mov	r0, r3
 8007e64:	f000 fadc 	bl	8008420 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	699a      	ldr	r2, [r3, #24]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f042 0208 	orr.w	r2, r2, #8
 8007e76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	699a      	ldr	r2, [r3, #24]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f022 0204 	bic.w	r2, r2, #4
 8007e86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	6999      	ldr	r1, [r3, #24]
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	691a      	ldr	r2, [r3, #16]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	430a      	orrs	r2, r1
 8007e98:	619a      	str	r2, [r3, #24]
      break;
 8007e9a:	e0a5      	b.n	8007fe8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	68b9      	ldr	r1, [r7, #8]
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f000 fb38 	bl	8008518 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	699a      	ldr	r2, [r3, #24]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007eb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	699a      	ldr	r2, [r3, #24]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ec6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	6999      	ldr	r1, [r3, #24]
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	021a      	lsls	r2, r3, #8
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	430a      	orrs	r2, r1
 8007eda:	619a      	str	r2, [r3, #24]
      break;
 8007edc:	e084      	b.n	8007fe8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	68b9      	ldr	r1, [r7, #8]
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f000 fb91 	bl	800860c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	69da      	ldr	r2, [r3, #28]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f042 0208 	orr.w	r2, r2, #8
 8007ef8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	69da      	ldr	r2, [r3, #28]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f022 0204 	bic.w	r2, r2, #4
 8007f08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	69d9      	ldr	r1, [r3, #28]
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	691a      	ldr	r2, [r3, #16]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	430a      	orrs	r2, r1
 8007f1a:	61da      	str	r2, [r3, #28]
      break;
 8007f1c:	e064      	b.n	8007fe8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	68b9      	ldr	r1, [r7, #8]
 8007f24:	4618      	mov	r0, r3
 8007f26:	f000 fbe9 	bl	80086fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	69da      	ldr	r2, [r3, #28]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	69da      	ldr	r2, [r3, #28]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	69d9      	ldr	r1, [r3, #28]
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	691b      	ldr	r3, [r3, #16]
 8007f54:	021a      	lsls	r2, r3, #8
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	430a      	orrs	r2, r1
 8007f5c:	61da      	str	r2, [r3, #28]
      break;
 8007f5e:	e043      	b.n	8007fe8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	68b9      	ldr	r1, [r7, #8]
 8007f66:	4618      	mov	r0, r3
 8007f68:	f000 fc26 	bl	80087b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f042 0208 	orr.w	r2, r2, #8
 8007f7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f022 0204 	bic.w	r2, r2, #4
 8007f8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	691a      	ldr	r2, [r3, #16]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	430a      	orrs	r2, r1
 8007f9c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007f9e:	e023      	b.n	8007fe8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	68b9      	ldr	r1, [r7, #8]
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f000 fc5e 	bl	8008868 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	021a      	lsls	r2, r3, #8
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	430a      	orrs	r2, r1
 8007fde:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007fe0:	e002      	b.n	8007fe8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	75fb      	strb	r3, [r7, #23]
      break;
 8007fe6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3718      	adds	r7, #24
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop

08007ffc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008006:	2300      	movs	r3, #0
 8008008:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008010:	2b01      	cmp	r3, #1
 8008012:	d101      	bne.n	8008018 <HAL_TIM_ConfigClockSource+0x1c>
 8008014:	2302      	movs	r3, #2
 8008016:	e0b6      	b.n	8008186 <HAL_TIM_ConfigClockSource+0x18a>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2201      	movs	r2, #1
 800801c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2202      	movs	r2, #2
 8008024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008036:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800803a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008042:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	68ba      	ldr	r2, [r7, #8]
 800804a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008054:	d03e      	beq.n	80080d4 <HAL_TIM_ConfigClockSource+0xd8>
 8008056:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800805a:	f200 8087 	bhi.w	800816c <HAL_TIM_ConfigClockSource+0x170>
 800805e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008062:	f000 8086 	beq.w	8008172 <HAL_TIM_ConfigClockSource+0x176>
 8008066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800806a:	d87f      	bhi.n	800816c <HAL_TIM_ConfigClockSource+0x170>
 800806c:	2b70      	cmp	r3, #112	; 0x70
 800806e:	d01a      	beq.n	80080a6 <HAL_TIM_ConfigClockSource+0xaa>
 8008070:	2b70      	cmp	r3, #112	; 0x70
 8008072:	d87b      	bhi.n	800816c <HAL_TIM_ConfigClockSource+0x170>
 8008074:	2b60      	cmp	r3, #96	; 0x60
 8008076:	d050      	beq.n	800811a <HAL_TIM_ConfigClockSource+0x11e>
 8008078:	2b60      	cmp	r3, #96	; 0x60
 800807a:	d877      	bhi.n	800816c <HAL_TIM_ConfigClockSource+0x170>
 800807c:	2b50      	cmp	r3, #80	; 0x50
 800807e:	d03c      	beq.n	80080fa <HAL_TIM_ConfigClockSource+0xfe>
 8008080:	2b50      	cmp	r3, #80	; 0x50
 8008082:	d873      	bhi.n	800816c <HAL_TIM_ConfigClockSource+0x170>
 8008084:	2b40      	cmp	r3, #64	; 0x40
 8008086:	d058      	beq.n	800813a <HAL_TIM_ConfigClockSource+0x13e>
 8008088:	2b40      	cmp	r3, #64	; 0x40
 800808a:	d86f      	bhi.n	800816c <HAL_TIM_ConfigClockSource+0x170>
 800808c:	2b30      	cmp	r3, #48	; 0x30
 800808e:	d064      	beq.n	800815a <HAL_TIM_ConfigClockSource+0x15e>
 8008090:	2b30      	cmp	r3, #48	; 0x30
 8008092:	d86b      	bhi.n	800816c <HAL_TIM_ConfigClockSource+0x170>
 8008094:	2b20      	cmp	r3, #32
 8008096:	d060      	beq.n	800815a <HAL_TIM_ConfigClockSource+0x15e>
 8008098:	2b20      	cmp	r3, #32
 800809a:	d867      	bhi.n	800816c <HAL_TIM_ConfigClockSource+0x170>
 800809c:	2b00      	cmp	r3, #0
 800809e:	d05c      	beq.n	800815a <HAL_TIM_ConfigClockSource+0x15e>
 80080a0:	2b10      	cmp	r3, #16
 80080a2:	d05a      	beq.n	800815a <HAL_TIM_ConfigClockSource+0x15e>
 80080a4:	e062      	b.n	800816c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6818      	ldr	r0, [r3, #0]
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	6899      	ldr	r1, [r3, #8]
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	685a      	ldr	r2, [r3, #4]
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	f000 fcab 	bl	8008a10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80080c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	68ba      	ldr	r2, [r7, #8]
 80080d0:	609a      	str	r2, [r3, #8]
      break;
 80080d2:	e04f      	b.n	8008174 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6818      	ldr	r0, [r3, #0]
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	6899      	ldr	r1, [r3, #8]
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	685a      	ldr	r2, [r3, #4]
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	f000 fc94 	bl	8008a10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	689a      	ldr	r2, [r3, #8]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80080f6:	609a      	str	r2, [r3, #8]
      break;
 80080f8:	e03c      	b.n	8008174 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6818      	ldr	r0, [r3, #0]
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	6859      	ldr	r1, [r3, #4]
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	68db      	ldr	r3, [r3, #12]
 8008106:	461a      	mov	r2, r3
 8008108:	f000 fc08 	bl	800891c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	2150      	movs	r1, #80	; 0x50
 8008112:	4618      	mov	r0, r3
 8008114:	f000 fc61 	bl	80089da <TIM_ITRx_SetConfig>
      break;
 8008118:	e02c      	b.n	8008174 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6818      	ldr	r0, [r3, #0]
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	6859      	ldr	r1, [r3, #4]
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	68db      	ldr	r3, [r3, #12]
 8008126:	461a      	mov	r2, r3
 8008128:	f000 fc27 	bl	800897a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2160      	movs	r1, #96	; 0x60
 8008132:	4618      	mov	r0, r3
 8008134:	f000 fc51 	bl	80089da <TIM_ITRx_SetConfig>
      break;
 8008138:	e01c      	b.n	8008174 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6818      	ldr	r0, [r3, #0]
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	6859      	ldr	r1, [r3, #4]
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	461a      	mov	r2, r3
 8008148:	f000 fbe8 	bl	800891c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2140      	movs	r1, #64	; 0x40
 8008152:	4618      	mov	r0, r3
 8008154:	f000 fc41 	bl	80089da <TIM_ITRx_SetConfig>
      break;
 8008158:	e00c      	b.n	8008174 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4619      	mov	r1, r3
 8008164:	4610      	mov	r0, r2
 8008166:	f000 fc38 	bl	80089da <TIM_ITRx_SetConfig>
      break;
 800816a:	e003      	b.n	8008174 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	73fb      	strb	r3, [r7, #15]
      break;
 8008170:	e000      	b.n	8008174 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008172:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008184:	7bfb      	ldrb	r3, [r7, #15]
}
 8008186:	4618      	mov	r0, r3
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800818e:	b480      	push	{r7}
 8008190:	b083      	sub	sp, #12
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008196:	bf00      	nop
 8008198:	370c      	adds	r7, #12
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr

080081a2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80081a2:	b480      	push	{r7}
 80081a4:	b083      	sub	sp, #12
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80081aa:	bf00      	nop
 80081ac:	370c      	adds	r7, #12
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr

080081b6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b084      	sub	sp, #16
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081c2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d107      	bne.n	80081de <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2201      	movs	r2, #1
 80081d2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081dc:	e02a      	b.n	8008234 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d107      	bne.n	80081f8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2202      	movs	r2, #2
 80081ec:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2201      	movs	r2, #1
 80081f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081f6:	e01d      	b.n	8008234 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	429a      	cmp	r2, r3
 8008200:	d107      	bne.n	8008212 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2204      	movs	r2, #4
 8008206:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008210:	e010      	b.n	8008234 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	429a      	cmp	r2, r3
 800821a:	d107      	bne.n	800822c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2208      	movs	r2, #8
 8008220:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2201      	movs	r2, #1
 8008226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800822a:	e003      	b.n	8008234 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2201      	movs	r2, #1
 8008230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008234:	68f8      	ldr	r0, [r7, #12]
 8008236:	f7ff ffb4 	bl	80081a2 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2200      	movs	r2, #0
 800823e:	771a      	strb	r2, [r3, #28]
}
 8008240:	bf00      	nop
 8008242:	3710      	adds	r7, #16
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008254:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	429a      	cmp	r2, r3
 800825e:	d10b      	bne.n	8008278 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2201      	movs	r2, #1
 8008264:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	69db      	ldr	r3, [r3, #28]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d136      	bne.n	80082dc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008276:	e031      	b.n	80082dc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	429a      	cmp	r2, r3
 8008280:	d10b      	bne.n	800829a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2202      	movs	r2, #2
 8008286:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	69db      	ldr	r3, [r3, #28]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d125      	bne.n	80082dc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008298:	e020      	b.n	80082dc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d10b      	bne.n	80082bc <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2204      	movs	r2, #4
 80082a8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	69db      	ldr	r3, [r3, #28]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d114      	bne.n	80082dc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2201      	movs	r2, #1
 80082b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082ba:	e00f      	b.n	80082dc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d10a      	bne.n	80082dc <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2208      	movs	r2, #8
 80082ca:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	69db      	ldr	r3, [r3, #28]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d103      	bne.n	80082dc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082dc:	68f8      	ldr	r0, [r7, #12]
 80082de:	f001 faeb 	bl	80098b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2200      	movs	r2, #0
 80082e6:	771a      	strb	r2, [r3, #28]
  //g_tim_pwm_transfer_cmplt = true;

}
 80082e8:	bf00      	nop
 80082ea:	3710      	adds	r7, #16
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082fc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	429a      	cmp	r2, r3
 8008306:	d103      	bne.n	8008310 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2201      	movs	r2, #1
 800830c:	771a      	strb	r2, [r3, #28]
 800830e:	e019      	b.n	8008344 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	429a      	cmp	r2, r3
 8008318:	d103      	bne.n	8008322 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2202      	movs	r2, #2
 800831e:	771a      	strb	r2, [r3, #28]
 8008320:	e010      	b.n	8008344 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	429a      	cmp	r2, r3
 800832a:	d103      	bne.n	8008334 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2204      	movs	r2, #4
 8008330:	771a      	strb	r2, [r3, #28]
 8008332:	e007      	b.n	8008344 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	429a      	cmp	r2, r3
 800833c:	d102      	bne.n	8008344 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2208      	movs	r2, #8
 8008342:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8008344:	68f8      	ldr	r0, [r7, #12]
 8008346:	f7ff ff22 	bl	800818e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2200      	movs	r2, #0
 800834e:	771a      	strb	r2, [r3, #28]
}
 8008350:	bf00      	nop
 8008352:	3710      	adds	r7, #16
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008358:	b480      	push	{r7}
 800835a:	b085      	sub	sp, #20
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4a2a      	ldr	r2, [pc, #168]	; (8008414 <TIM_Base_SetConfig+0xbc>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d003      	beq.n	8008378 <TIM_Base_SetConfig+0x20>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008376:	d108      	bne.n	800838a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800837e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	68fa      	ldr	r2, [r7, #12]
 8008386:	4313      	orrs	r3, r2
 8008388:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4a21      	ldr	r2, [pc, #132]	; (8008414 <TIM_Base_SetConfig+0xbc>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d00b      	beq.n	80083aa <TIM_Base_SetConfig+0x52>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008398:	d007      	beq.n	80083aa <TIM_Base_SetConfig+0x52>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4a1e      	ldr	r2, [pc, #120]	; (8008418 <TIM_Base_SetConfig+0xc0>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d003      	beq.n	80083aa <TIM_Base_SetConfig+0x52>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4a1d      	ldr	r2, [pc, #116]	; (800841c <TIM_Base_SetConfig+0xc4>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d108      	bne.n	80083bc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	68fa      	ldr	r2, [r7, #12]
 80083b8:	4313      	orrs	r3, r2
 80083ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	695b      	ldr	r3, [r3, #20]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	689a      	ldr	r2, [r3, #8]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	4a0c      	ldr	r2, [pc, #48]	; (8008414 <TIM_Base_SetConfig+0xbc>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d007      	beq.n	80083f8 <TIM_Base_SetConfig+0xa0>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	4a0b      	ldr	r2, [pc, #44]	; (8008418 <TIM_Base_SetConfig+0xc0>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d003      	beq.n	80083f8 <TIM_Base_SetConfig+0xa0>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4a0a      	ldr	r2, [pc, #40]	; (800841c <TIM_Base_SetConfig+0xc4>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d103      	bne.n	8008400 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	691a      	ldr	r2, [r3, #16]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2201      	movs	r2, #1
 8008404:	615a      	str	r2, [r3, #20]
}
 8008406:	bf00      	nop
 8008408:	3714      	adds	r7, #20
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop
 8008414:	40012c00 	.word	0x40012c00
 8008418:	40014000 	.word	0x40014000
 800841c:	40014400 	.word	0x40014400

08008420 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008420:	b480      	push	{r7}
 8008422:	b087      	sub	sp, #28
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6a1b      	ldr	r3, [r3, #32]
 800842e:	f023 0201 	bic.w	r2, r3, #1
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6a1b      	ldr	r3, [r3, #32]
 800843a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	699b      	ldr	r3, [r3, #24]
 8008446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800844e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f023 0303 	bic.w	r3, r3, #3
 800845a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	68fa      	ldr	r2, [r7, #12]
 8008462:	4313      	orrs	r3, r2
 8008464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	f023 0302 	bic.w	r3, r3, #2
 800846c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	697a      	ldr	r2, [r7, #20]
 8008474:	4313      	orrs	r3, r2
 8008476:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4a24      	ldr	r2, [pc, #144]	; (800850c <TIM_OC1_SetConfig+0xec>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d007      	beq.n	8008490 <TIM_OC1_SetConfig+0x70>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a23      	ldr	r2, [pc, #140]	; (8008510 <TIM_OC1_SetConfig+0xf0>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d003      	beq.n	8008490 <TIM_OC1_SetConfig+0x70>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a22      	ldr	r2, [pc, #136]	; (8008514 <TIM_OC1_SetConfig+0xf4>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d10c      	bne.n	80084aa <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	f023 0308 	bic.w	r3, r3, #8
 8008496:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	697a      	ldr	r2, [r7, #20]
 800849e:	4313      	orrs	r3, r2
 80084a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	f023 0304 	bic.w	r3, r3, #4
 80084a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4a17      	ldr	r2, [pc, #92]	; (800850c <TIM_OC1_SetConfig+0xec>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d007      	beq.n	80084c2 <TIM_OC1_SetConfig+0xa2>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4a16      	ldr	r2, [pc, #88]	; (8008510 <TIM_OC1_SetConfig+0xf0>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d003      	beq.n	80084c2 <TIM_OC1_SetConfig+0xa2>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4a15      	ldr	r2, [pc, #84]	; (8008514 <TIM_OC1_SetConfig+0xf4>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d111      	bne.n	80084e6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80084d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	695b      	ldr	r3, [r3, #20]
 80084d6:	693a      	ldr	r2, [r7, #16]
 80084d8:	4313      	orrs	r3, r2
 80084da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	699b      	ldr	r3, [r3, #24]
 80084e0:	693a      	ldr	r2, [r7, #16]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	693a      	ldr	r2, [r7, #16]
 80084ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	68fa      	ldr	r2, [r7, #12]
 80084f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	685a      	ldr	r2, [r3, #4]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	697a      	ldr	r2, [r7, #20]
 80084fe:	621a      	str	r2, [r3, #32]
}
 8008500:	bf00      	nop
 8008502:	371c      	adds	r7, #28
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr
 800850c:	40012c00 	.word	0x40012c00
 8008510:	40014000 	.word	0x40014000
 8008514:	40014400 	.word	0x40014400

08008518 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008518:	b480      	push	{r7}
 800851a:	b087      	sub	sp, #28
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6a1b      	ldr	r3, [r3, #32]
 8008526:	f023 0210 	bic.w	r2, r3, #16
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6a1b      	ldr	r3, [r3, #32]
 8008532:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	699b      	ldr	r3, [r3, #24]
 800853e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800854a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008552:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	021b      	lsls	r3, r3, #8
 800855a:	68fa      	ldr	r2, [r7, #12]
 800855c:	4313      	orrs	r3, r2
 800855e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	f023 0320 	bic.w	r3, r3, #32
 8008566:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	011b      	lsls	r3, r3, #4
 800856e:	697a      	ldr	r2, [r7, #20]
 8008570:	4313      	orrs	r3, r2
 8008572:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	4a22      	ldr	r2, [pc, #136]	; (8008600 <TIM_OC2_SetConfig+0xe8>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d10d      	bne.n	8008598 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008582:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	011b      	lsls	r3, r3, #4
 800858a:	697a      	ldr	r2, [r7, #20]
 800858c:	4313      	orrs	r3, r2
 800858e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008596:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	4a19      	ldr	r2, [pc, #100]	; (8008600 <TIM_OC2_SetConfig+0xe8>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d007      	beq.n	80085b0 <TIM_OC2_SetConfig+0x98>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	4a18      	ldr	r2, [pc, #96]	; (8008604 <TIM_OC2_SetConfig+0xec>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d003      	beq.n	80085b0 <TIM_OC2_SetConfig+0x98>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4a17      	ldr	r2, [pc, #92]	; (8008608 <TIM_OC2_SetConfig+0xf0>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d113      	bne.n	80085d8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80085b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80085be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	695b      	ldr	r3, [r3, #20]
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	693a      	ldr	r2, [r7, #16]
 80085c8:	4313      	orrs	r3, r2
 80085ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	699b      	ldr	r3, [r3, #24]
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	693a      	ldr	r2, [r7, #16]
 80085d4:	4313      	orrs	r3, r2
 80085d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	693a      	ldr	r2, [r7, #16]
 80085dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	68fa      	ldr	r2, [r7, #12]
 80085e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	685a      	ldr	r2, [r3, #4]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	697a      	ldr	r2, [r7, #20]
 80085f0:	621a      	str	r2, [r3, #32]
}
 80085f2:	bf00      	nop
 80085f4:	371c      	adds	r7, #28
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr
 80085fe:	bf00      	nop
 8008600:	40012c00 	.word	0x40012c00
 8008604:	40014000 	.word	0x40014000
 8008608:	40014400 	.word	0x40014400

0800860c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800860c:	b480      	push	{r7}
 800860e:	b087      	sub	sp, #28
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6a1b      	ldr	r3, [r3, #32]
 800861a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6a1b      	ldr	r3, [r3, #32]
 8008626:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	69db      	ldr	r3, [r3, #28]
 8008632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800863a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800863e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f023 0303 	bic.w	r3, r3, #3
 8008646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	68fa      	ldr	r2, [r7, #12]
 800864e:	4313      	orrs	r3, r2
 8008650:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008658:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	021b      	lsls	r3, r3, #8
 8008660:	697a      	ldr	r2, [r7, #20]
 8008662:	4313      	orrs	r3, r2
 8008664:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4a21      	ldr	r2, [pc, #132]	; (80086f0 <TIM_OC3_SetConfig+0xe4>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d10d      	bne.n	800868a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008674:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	68db      	ldr	r3, [r3, #12]
 800867a:	021b      	lsls	r3, r3, #8
 800867c:	697a      	ldr	r2, [r7, #20]
 800867e:	4313      	orrs	r3, r2
 8008680:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008688:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a18      	ldr	r2, [pc, #96]	; (80086f0 <TIM_OC3_SetConfig+0xe4>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d007      	beq.n	80086a2 <TIM_OC3_SetConfig+0x96>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4a17      	ldr	r2, [pc, #92]	; (80086f4 <TIM_OC3_SetConfig+0xe8>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d003      	beq.n	80086a2 <TIM_OC3_SetConfig+0x96>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4a16      	ldr	r2, [pc, #88]	; (80086f8 <TIM_OC3_SetConfig+0xec>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d113      	bne.n	80086ca <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80086b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	695b      	ldr	r3, [r3, #20]
 80086b6:	011b      	lsls	r3, r3, #4
 80086b8:	693a      	ldr	r2, [r7, #16]
 80086ba:	4313      	orrs	r3, r2
 80086bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	699b      	ldr	r3, [r3, #24]
 80086c2:	011b      	lsls	r3, r3, #4
 80086c4:	693a      	ldr	r2, [r7, #16]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	693a      	ldr	r2, [r7, #16]
 80086ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	68fa      	ldr	r2, [r7, #12]
 80086d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	685a      	ldr	r2, [r3, #4]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	697a      	ldr	r2, [r7, #20]
 80086e2:	621a      	str	r2, [r3, #32]
}
 80086e4:	bf00      	nop
 80086e6:	371c      	adds	r7, #28
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr
 80086f0:	40012c00 	.word	0x40012c00
 80086f4:	40014000 	.word	0x40014000
 80086f8:	40014400 	.word	0x40014400

080086fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b087      	sub	sp, #28
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6a1b      	ldr	r3, [r3, #32]
 800870a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6a1b      	ldr	r3, [r3, #32]
 8008716:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	69db      	ldr	r3, [r3, #28]
 8008722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800872a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800872e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008736:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	021b      	lsls	r3, r3, #8
 800873e:	68fa      	ldr	r2, [r7, #12]
 8008740:	4313      	orrs	r3, r2
 8008742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800874a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	031b      	lsls	r3, r3, #12
 8008752:	693a      	ldr	r2, [r7, #16]
 8008754:	4313      	orrs	r3, r2
 8008756:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a14      	ldr	r2, [pc, #80]	; (80087ac <TIM_OC4_SetConfig+0xb0>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d007      	beq.n	8008770 <TIM_OC4_SetConfig+0x74>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a13      	ldr	r2, [pc, #76]	; (80087b0 <TIM_OC4_SetConfig+0xb4>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d003      	beq.n	8008770 <TIM_OC4_SetConfig+0x74>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	4a12      	ldr	r2, [pc, #72]	; (80087b4 <TIM_OC4_SetConfig+0xb8>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d109      	bne.n	8008784 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008776:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	695b      	ldr	r3, [r3, #20]
 800877c:	019b      	lsls	r3, r3, #6
 800877e:	697a      	ldr	r2, [r7, #20]
 8008780:	4313      	orrs	r3, r2
 8008782:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	697a      	ldr	r2, [r7, #20]
 8008788:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	685a      	ldr	r2, [r3, #4]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	693a      	ldr	r2, [r7, #16]
 800879c:	621a      	str	r2, [r3, #32]
}
 800879e:	bf00      	nop
 80087a0:	371c      	adds	r7, #28
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	40012c00 	.word	0x40012c00
 80087b0:	40014000 	.word	0x40014000
 80087b4:	40014400 	.word	0x40014400

080087b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b087      	sub	sp, #28
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a1b      	ldr	r3, [r3, #32]
 80087c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a1b      	ldr	r3, [r3, #32]
 80087d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	68fa      	ldr	r2, [r7, #12]
 80087f2:	4313      	orrs	r3, r2
 80087f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80087fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	041b      	lsls	r3, r3, #16
 8008804:	693a      	ldr	r2, [r7, #16]
 8008806:	4313      	orrs	r3, r2
 8008808:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4a13      	ldr	r2, [pc, #76]	; (800885c <TIM_OC5_SetConfig+0xa4>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d007      	beq.n	8008822 <TIM_OC5_SetConfig+0x6a>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a12      	ldr	r2, [pc, #72]	; (8008860 <TIM_OC5_SetConfig+0xa8>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d003      	beq.n	8008822 <TIM_OC5_SetConfig+0x6a>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a11      	ldr	r2, [pc, #68]	; (8008864 <TIM_OC5_SetConfig+0xac>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d109      	bne.n	8008836 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008828:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	695b      	ldr	r3, [r3, #20]
 800882e:	021b      	lsls	r3, r3, #8
 8008830:	697a      	ldr	r2, [r7, #20]
 8008832:	4313      	orrs	r3, r2
 8008834:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	697a      	ldr	r2, [r7, #20]
 800883a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	68fa      	ldr	r2, [r7, #12]
 8008840:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	685a      	ldr	r2, [r3, #4]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	693a      	ldr	r2, [r7, #16]
 800884e:	621a      	str	r2, [r3, #32]
}
 8008850:	bf00      	nop
 8008852:	371c      	adds	r7, #28
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr
 800885c:	40012c00 	.word	0x40012c00
 8008860:	40014000 	.word	0x40014000
 8008864:	40014400 	.word	0x40014400

08008868 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008868:	b480      	push	{r7}
 800886a:	b087      	sub	sp, #28
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6a1b      	ldr	r3, [r3, #32]
 8008876:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6a1b      	ldr	r3, [r3, #32]
 8008882:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800888e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800889a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	021b      	lsls	r3, r3, #8
 80088a2:	68fa      	ldr	r2, [r7, #12]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80088ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	051b      	lsls	r3, r3, #20
 80088b6:	693a      	ldr	r2, [r7, #16]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	4a14      	ldr	r2, [pc, #80]	; (8008910 <TIM_OC6_SetConfig+0xa8>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d007      	beq.n	80088d4 <TIM_OC6_SetConfig+0x6c>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	4a13      	ldr	r2, [pc, #76]	; (8008914 <TIM_OC6_SetConfig+0xac>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d003      	beq.n	80088d4 <TIM_OC6_SetConfig+0x6c>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	4a12      	ldr	r2, [pc, #72]	; (8008918 <TIM_OC6_SetConfig+0xb0>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d109      	bne.n	80088e8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	695b      	ldr	r3, [r3, #20]
 80088e0:	029b      	lsls	r3, r3, #10
 80088e2:	697a      	ldr	r2, [r7, #20]
 80088e4:	4313      	orrs	r3, r2
 80088e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	697a      	ldr	r2, [r7, #20]
 80088ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	68fa      	ldr	r2, [r7, #12]
 80088f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	685a      	ldr	r2, [r3, #4]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	693a      	ldr	r2, [r7, #16]
 8008900:	621a      	str	r2, [r3, #32]
}
 8008902:	bf00      	nop
 8008904:	371c      	adds	r7, #28
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr
 800890e:	bf00      	nop
 8008910:	40012c00 	.word	0x40012c00
 8008914:	40014000 	.word	0x40014000
 8008918:	40014400 	.word	0x40014400

0800891c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800891c:	b480      	push	{r7}
 800891e:	b087      	sub	sp, #28
 8008920:	af00      	add	r7, sp, #0
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6a1b      	ldr	r3, [r3, #32]
 800892c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6a1b      	ldr	r3, [r3, #32]
 8008932:	f023 0201 	bic.w	r2, r3, #1
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	699b      	ldr	r3, [r3, #24]
 800893e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008946:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	011b      	lsls	r3, r3, #4
 800894c:	693a      	ldr	r2, [r7, #16]
 800894e:	4313      	orrs	r3, r2
 8008950:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	f023 030a 	bic.w	r3, r3, #10
 8008958:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800895a:	697a      	ldr	r2, [r7, #20]
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	4313      	orrs	r3, r2
 8008960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	693a      	ldr	r2, [r7, #16]
 8008966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	697a      	ldr	r2, [r7, #20]
 800896c:	621a      	str	r2, [r3, #32]
}
 800896e:	bf00      	nop
 8008970:	371c      	adds	r7, #28
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr

0800897a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800897a:	b480      	push	{r7}
 800897c:	b087      	sub	sp, #28
 800897e:	af00      	add	r7, sp, #0
 8008980:	60f8      	str	r0, [r7, #12]
 8008982:	60b9      	str	r1, [r7, #8]
 8008984:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6a1b      	ldr	r3, [r3, #32]
 800898a:	f023 0210 	bic.w	r2, r3, #16
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	699b      	ldr	r3, [r3, #24]
 8008996:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6a1b      	ldr	r3, [r3, #32]
 800899c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80089a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	031b      	lsls	r3, r3, #12
 80089aa:	697a      	ldr	r2, [r7, #20]
 80089ac:	4313      	orrs	r3, r2
 80089ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80089b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	011b      	lsls	r3, r3, #4
 80089bc:	693a      	ldr	r2, [r7, #16]
 80089be:	4313      	orrs	r3, r2
 80089c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	697a      	ldr	r2, [r7, #20]
 80089c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	693a      	ldr	r2, [r7, #16]
 80089cc:	621a      	str	r2, [r3, #32]
}
 80089ce:	bf00      	nop
 80089d0:	371c      	adds	r7, #28
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr

080089da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80089da:	b480      	push	{r7}
 80089dc:	b085      	sub	sp, #20
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
 80089e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80089f2:	683a      	ldr	r2, [r7, #0]
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	4313      	orrs	r3, r2
 80089f8:	f043 0307 	orr.w	r3, r3, #7
 80089fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	68fa      	ldr	r2, [r7, #12]
 8008a02:	609a      	str	r2, [r3, #8]
}
 8008a04:	bf00      	nop
 8008a06:	3714      	adds	r7, #20
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b087      	sub	sp, #28
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	60f8      	str	r0, [r7, #12]
 8008a18:	60b9      	str	r1, [r7, #8]
 8008a1a:	607a      	str	r2, [r7, #4]
 8008a1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	689b      	ldr	r3, [r3, #8]
 8008a22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	021a      	lsls	r2, r3, #8
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	431a      	orrs	r2, r3
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	4313      	orrs	r3, r2
 8008a38:	697a      	ldr	r2, [r7, #20]
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	697a      	ldr	r2, [r7, #20]
 8008a42:	609a      	str	r2, [r3, #8]
}
 8008a44:	bf00      	nop
 8008a46:	371c      	adds	r7, #28
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b087      	sub	sp, #28
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	f003 031f 	and.w	r3, r3, #31
 8008a62:	2201      	movs	r2, #1
 8008a64:	fa02 f303 	lsl.w	r3, r2, r3
 8008a68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	6a1a      	ldr	r2, [r3, #32]
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	43db      	mvns	r3, r3
 8008a72:	401a      	ands	r2, r3
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	6a1a      	ldr	r2, [r3, #32]
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	f003 031f 	and.w	r3, r3, #31
 8008a82:	6879      	ldr	r1, [r7, #4]
 8008a84:	fa01 f303 	lsl.w	r3, r1, r3
 8008a88:	431a      	orrs	r2, r3
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	621a      	str	r2, [r3, #32]
}
 8008a8e:	bf00      	nop
 8008a90:	371c      	adds	r7, #28
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr
	...

08008a9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b085      	sub	sp, #20
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d101      	bne.n	8008ab4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ab0:	2302      	movs	r3, #2
 8008ab2:	e04f      	b.n	8008b54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2202      	movs	r2, #2
 8008ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a21      	ldr	r2, [pc, #132]	; (8008b60 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d108      	bne.n	8008af0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008ae4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	68fa      	ldr	r2, [r7, #12]
 8008aec:	4313      	orrs	r3, r2
 8008aee:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008af6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	68fa      	ldr	r2, [r7, #12]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	68fa      	ldr	r2, [r7, #12]
 8008b08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a14      	ldr	r2, [pc, #80]	; (8008b60 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d009      	beq.n	8008b28 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b1c:	d004      	beq.n	8008b28 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a10      	ldr	r2, [pc, #64]	; (8008b64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d10c      	bne.n	8008b42 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b2e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	68ba      	ldr	r2, [r7, #8]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	68ba      	ldr	r2, [r7, #8]
 8008b40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2201      	movs	r2, #1
 8008b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b52:	2300      	movs	r3, #0
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3714      	adds	r7, #20
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr
 8008b60:	40012c00 	.word	0x40012c00
 8008b64:	40014000 	.word	0x40014000

08008b68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b085      	sub	sp, #20
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008b72:	2300      	movs	r3, #0
 8008b74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d101      	bne.n	8008b84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008b80:	2302      	movs	r3, #2
 8008b82:	e060      	b.n	8008c46 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	4313      	orrs	r3, r2
 8008b98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	691b      	ldr	r3, [r3, #16]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	695b      	ldr	r3, [r3, #20]
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bea:	4313      	orrs	r3, r2
 8008bec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	699b      	ldr	r3, [r3, #24]
 8008bf8:	041b      	lsls	r3, r3, #16
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a14      	ldr	r2, [pc, #80]	; (8008c54 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d115      	bne.n	8008c34 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c12:	051b      	lsls	r3, r3, #20
 8008c14:	4313      	orrs	r3, r2
 8008c16:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	69db      	ldr	r3, [r3, #28]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	6a1b      	ldr	r3, [r3, #32]
 8008c30:	4313      	orrs	r3, r2
 8008c32:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	68fa      	ldr	r2, [r7, #12]
 8008c3a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3714      	adds	r7, #20
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	40012c00 	.word	0x40012c00

08008c58 <board_init_common_rtc_init>:
uint32_t g_button_on_count[NUM_PUSH_BUTTONS] = {0};
bool button_press_state[NUM_PUSH_BUTTONS] = {false};
extern UART_HandleTypeDef      gh_host_usart;

static void board_init_common_rtc_init(void)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	af00      	add	r7, sp, #0
    g_rtc_handle.Instance = RTC;
 8008c5c:	4b10      	ldr	r3, [pc, #64]	; (8008ca0 <board_init_common_rtc_init+0x48>)
 8008c5e:	4a11      	ldr	r2, [pc, #68]	; (8008ca4 <board_init_common_rtc_init+0x4c>)
 8008c60:	601a      	str	r2, [r3, #0]
    g_rtc_handle.Init.HourFormat = RTC_HOURFORMAT_24;
 8008c62:	4b0f      	ldr	r3, [pc, #60]	; (8008ca0 <board_init_common_rtc_init+0x48>)
 8008c64:	2200      	movs	r2, #0
 8008c66:	605a      	str	r2, [r3, #4]
    g_rtc_handle.Init.AsynchPrediv = 127;
 8008c68:	4b0d      	ldr	r3, [pc, #52]	; (8008ca0 <board_init_common_rtc_init+0x48>)
 8008c6a:	227f      	movs	r2, #127	; 0x7f
 8008c6c:	609a      	str	r2, [r3, #8]
    g_rtc_handle.Init.SynchPrediv = 255;
 8008c6e:	4b0c      	ldr	r3, [pc, #48]	; (8008ca0 <board_init_common_rtc_init+0x48>)
 8008c70:	22ff      	movs	r2, #255	; 0xff
 8008c72:	60da      	str	r2, [r3, #12]
    g_rtc_handle.Init.OutPut = RTC_OUTPUT_DISABLE;
 8008c74:	4b0a      	ldr	r3, [pc, #40]	; (8008ca0 <board_init_common_rtc_init+0x48>)
 8008c76:	2200      	movs	r2, #0
 8008c78:	611a      	str	r2, [r3, #16]
    g_rtc_handle.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8008c7a:	4b09      	ldr	r3, [pc, #36]	; (8008ca0 <board_init_common_rtc_init+0x48>)
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	615a      	str	r2, [r3, #20]
    g_rtc_handle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8008c80:	4b07      	ldr	r3, [pc, #28]	; (8008ca0 <board_init_common_rtc_init+0x48>)
 8008c82:	2200      	movs	r2, #0
 8008c84:	619a      	str	r2, [r3, #24]
    g_rtc_handle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8008c86:	4b06      	ldr	r3, [pc, #24]	; (8008ca0 <board_init_common_rtc_init+0x48>)
 8008c88:	2200      	movs	r2, #0
 8008c8a:	61da      	str	r2, [r3, #28]
    if (HAL_RTC_Init(&g_rtc_handle) != HAL_OK) Error_Handler();
 8008c8c:	4804      	ldr	r0, [pc, #16]	; (8008ca0 <board_init_common_rtc_init+0x48>)
 8008c8e:	f7fe fc01 	bl	8007494 <HAL_RTC_Init>
 8008c92:	4603      	mov	r3, r0
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d001      	beq.n	8008c9c <board_init_common_rtc_init+0x44>
 8008c98:	f000 fa4b 	bl	8009132 <Error_Handler>
}
 8008c9c:	bf00      	nop
 8008c9e:	bd80      	pop	{r7, pc}
 8008ca0:	20002398 	.word	0x20002398
 8008ca4:	40002800 	.word	0x40002800

08008ca8 <SystemClock_Config>:

static void SystemClock_Config(void)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b0ae      	sub	sp, #184	; 0xb8
 8008cac:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008cae:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008cb2:	2244      	movs	r2, #68	; 0x44
 8008cb4:	2100      	movs	r1, #0
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f001 f936 	bl	8009f28 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008cbc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	601a      	str	r2, [r3, #0]
 8008cc4:	605a      	str	r2, [r3, #4]
 8008cc6:	609a      	str	r2, [r3, #8]
 8008cc8:	60da      	str	r2, [r3, #12]
 8008cca:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008ccc:	1d3b      	adds	r3, r7, #4
 8008cce:	225c      	movs	r2, #92	; 0x5c
 8008cd0:	2100      	movs	r1, #0
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f001 f928 	bl	8009f28 <memset>

    HAL_PWR_EnableBkUpAccess();
 8008cd8:	f7fd f9ee 	bl	80060b8 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8008cdc:	4b25      	ldr	r3, [pc, #148]	; (8008d74 <SystemClock_Config+0xcc>)
 8008cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ce2:	4a24      	ldr	r2, [pc, #144]	; (8008d74 <SystemClock_Config+0xcc>)
 8008ce4:	f023 0318 	bic.w	r3, r3, #24
 8008ce8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8008cec:	2305      	movs	r3, #5
 8008cee:	677b      	str	r3, [r7, #116]	; 0x74
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008cf0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008cf4:	67bb      	str	r3, [r7, #120]	; 0x78
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	67fb      	str	r3, [r7, #124]	; 0x7c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) while(1);
 8008d00:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008d04:	4618      	mov	r0, r3
 8008d06:	f7fd fabb 	bl	8006280 <HAL_RCC_OscConfig>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d000      	beq.n	8008d12 <SystemClock_Config+0x6a>
 8008d10:	e7fe      	b.n	8008d10 <SystemClock_Config+0x68>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008d12:	230f      	movs	r3, #15
 8008d14:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8008d16:	2302      	movs	r3, #2
 8008d18:	667b      	str	r3, [r7, #100]	; 0x64
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	66fb      	str	r3, [r7, #108]	; 0x6c
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008d22:	2300      	movs	r3, #0
 8008d24:	673b      	str	r3, [r7, #112]	; 0x70

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) while(1);
 8008d26:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008d2a:	2102      	movs	r1, #2
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f7fd febb 	bl	8006aa8 <HAL_RCC_ClockConfig>
 8008d32:	4603      	mov	r3, r0
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d000      	beq.n	8008d3a <SystemClock_Config+0x92>
 8008d38:	e7fe      	b.n	8008d38 <SystemClock_Config+0x90>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8008d3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008d3e:	607b      	str	r3, [r7, #4]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8008d40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d44:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) Error_Handler();
 8008d46:	1d3b      	adds	r3, r7, #4
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f7fe f899 	bl	8006e80 <HAL_RCCEx_PeriphCLKConfig>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d001      	beq.n	8008d58 <SystemClock_Config+0xb0>
 8008d54:	f000 f9ed 	bl	8009132 <Error_Handler>
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) Error_Handler();
 8008d58:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008d5c:	f7fd fa3a 	bl	80061d4 <HAL_PWREx_ControlVoltageScaling>
 8008d60:	4603      	mov	r3, r0
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d001      	beq.n	8008d6a <SystemClock_Config+0xc2>
 8008d66:	f000 f9e4 	bl	8009132 <Error_Handler>
}
 8008d6a:	bf00      	nop
 8008d6c:	37b8      	adds	r7, #184	; 0xb8
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop
 8008d74:	40021000 	.word	0x40021000

08008d78 <board_init_common_timer_init>:


static void board_init_common_timer_init(void)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b09e      	sub	sp, #120	; 0x78
 8008d7c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d7e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008d82:	2200      	movs	r2, #0
 8008d84:	601a      	str	r2, [r3, #0]
 8008d86:	605a      	str	r2, [r3, #4]
 8008d88:	609a      	str	r2, [r3, #8]
 8008d8a:	60da      	str	r2, [r3, #12]
 8008d8c:	611a      	str	r2, [r3, #16]
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008d8e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008d92:	2200      	movs	r2, #0
 8008d94:	601a      	str	r2, [r3, #0]
 8008d96:	605a      	str	r2, [r3, #4]
 8008d98:	609a      	str	r2, [r3, #8]
 8008d9a:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008d9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008da0:	2200      	movs	r2, #0
 8008da2:	601a      	str	r2, [r3, #0]
 8008da4:	605a      	str	r2, [r3, #4]
 8008da6:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8008da8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008dac:	2200      	movs	r2, #0
 8008dae:	601a      	str	r2, [r3, #0]
 8008db0:	605a      	str	r2, [r3, #4]
 8008db2:	609a      	str	r2, [r3, #8]
 8008db4:	60da      	str	r2, [r3, #12]
 8008db6:	611a      	str	r2, [r3, #16]
 8008db8:	615a      	str	r2, [r3, #20]
 8008dba:	619a      	str	r2, [r3, #24]
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008dbc:	463b      	mov	r3, r7
 8008dbe:	222c      	movs	r2, #44	; 0x2c
 8008dc0:	2100      	movs	r1, #0
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f001 f8b0 	bl	8009f28 <memset>
    g_tim1_handle.Instance = TIM1;
 8008dc8:	4b5c      	ldr	r3, [pc, #368]	; (8008f3c <board_init_common_timer_init+0x1c4>)
 8008dca:	4a5d      	ldr	r2, [pc, #372]	; (8008f40 <board_init_common_timer_init+0x1c8>)
 8008dcc:	601a      	str	r2, [r3, #0]
    g_tim1_handle.Init.Prescaler = 0;
 8008dce:	4b5b      	ldr	r3, [pc, #364]	; (8008f3c <board_init_common_timer_init+0x1c4>)
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	605a      	str	r2, [r3, #4]
    g_tim1_handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008dd4:	4b59      	ldr	r3, [pc, #356]	; (8008f3c <board_init_common_timer_init+0x1c4>)
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	609a      	str	r2, [r3, #8]
    g_tim1_handle.Init.Period = 60-1;
 8008dda:	4b58      	ldr	r3, [pc, #352]	; (8008f3c <board_init_common_timer_init+0x1c4>)
 8008ddc:	223b      	movs	r2, #59	; 0x3b
 8008dde:	60da      	str	r2, [r3, #12]
    g_tim1_handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008de0:	4b56      	ldr	r3, [pc, #344]	; (8008f3c <board_init_common_timer_init+0x1c4>)
 8008de2:	2200      	movs	r2, #0
 8008de4:	611a      	str	r2, [r3, #16]
    g_tim1_handle.Init.RepetitionCounter = 0;
 8008de6:	4b55      	ldr	r3, [pc, #340]	; (8008f3c <board_init_common_timer_init+0x1c4>)
 8008de8:	2200      	movs	r2, #0
 8008dea:	615a      	str	r2, [r3, #20]
    g_tim1_handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008dec:	4b53      	ldr	r3, [pc, #332]	; (8008f3c <board_init_common_timer_init+0x1c4>)
 8008dee:	2200      	movs	r2, #0
 8008df0:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&g_tim1_handle) != HAL_OK) Error_Handler();
 8008df2:	4852      	ldr	r0, [pc, #328]	; (8008f3c <board_init_common_timer_init+0x1c4>)
 8008df4:	f7fe fc60 	bl	80076b8 <HAL_TIM_Base_Init>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d001      	beq.n	8008e02 <board_init_common_timer_init+0x8a>
 8008dfe:	f000 f998 	bl	8009132 <Error_Handler>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008e02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e06:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_TIM_ConfigClockSource(&g_tim1_handle, &sClockSourceConfig) != HAL_OK) Error_Handler();
 8008e08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	484b      	ldr	r0, [pc, #300]	; (8008f3c <board_init_common_timer_init+0x1c4>)
 8008e10:	f7ff f8f4 	bl	8007ffc <HAL_TIM_ConfigClockSource>
 8008e14:	4603      	mov	r3, r0
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d001      	beq.n	8008e1e <board_init_common_timer_init+0xa6>
 8008e1a:	f000 f98a 	bl	8009132 <Error_Handler>
    if (HAL_TIM_PWM_Init(&g_tim1_handle) != HAL_OK) Error_Handler();
 8008e1e:	4847      	ldr	r0, [pc, #284]	; (8008f3c <board_init_common_timer_init+0x1c4>)
 8008e20:	f7fe fca1 	bl	8007766 <HAL_TIM_PWM_Init>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d001      	beq.n	8008e2e <board_init_common_timer_init+0xb6>
 8008e2a:	f000 f982 	bl	8009132 <Error_Handler>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	64bb      	str	r3, [r7, #72]	; 0x48
    sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008e32:	2300      	movs	r3, #0
 8008e34:	64fb      	str	r3, [r7, #76]	; 0x4c
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008e36:	2300      	movs	r3, #0
 8008e38:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_TIMEx_MasterConfigSynchronization(&g_tim1_handle, &sMasterConfig) != HAL_OK) Error_Handler();
 8008e3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008e3e:	4619      	mov	r1, r3
 8008e40:	483e      	ldr	r0, [pc, #248]	; (8008f3c <board_init_common_timer_init+0x1c4>)
 8008e42:	f7ff fe2b 	bl	8008a9c <HAL_TIMEx_MasterConfigSynchronization>
 8008e46:	4603      	mov	r3, r0
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d001      	beq.n	8008e50 <board_init_common_timer_init+0xd8>
 8008e4c:	f000 f971 	bl	8009132 <Error_Handler>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008e50:	2360      	movs	r3, #96	; 0x60
 8008e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    sConfigOC.Pulse = 0;
 8008e54:	2300      	movs	r3, #0
 8008e56:	633b      	str	r3, [r7, #48]	; 0x30
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	637b      	str	r3, [r7, #52]	; 0x34
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	63bb      	str	r3, [r7, #56]	; 0x38
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008e60:	2300      	movs	r3, #0
 8008e62:	63fb      	str	r3, [r7, #60]	; 0x3c
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008e64:	2300      	movs	r3, #0
 8008e66:	643b      	str	r3, [r7, #64]	; 0x40
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 8008e6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008e70:	2200      	movs	r2, #0
 8008e72:	4619      	mov	r1, r3
 8008e74:	4831      	ldr	r0, [pc, #196]	; (8008f3c <board_init_common_timer_init+0x1c4>)
 8008e76:	f7fe ffad 	bl	8007dd4 <HAL_TIM_PWM_ConfigChannel>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d001      	beq.n	8008e84 <board_init_common_timer_init+0x10c>
 8008e80:	f000 f957 	bl	8009132 <Error_Handler>
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) Error_Handler();
 8008e84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008e88:	2204      	movs	r2, #4
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	482b      	ldr	r0, [pc, #172]	; (8008f3c <board_init_common_timer_init+0x1c4>)
 8008e8e:	f7fe ffa1 	bl	8007dd4 <HAL_TIM_PWM_ConfigChannel>
 8008e92:	4603      	mov	r3, r0
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d001      	beq.n	8008e9c <board_init_common_timer_init+0x124>
 8008e98:	f000 f94b 	bl	8009132 <Error_Handler>
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) Error_Handler();
 8008e9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008ea0:	2208      	movs	r2, #8
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	4825      	ldr	r0, [pc, #148]	; (8008f3c <board_init_common_timer_init+0x1c4>)
 8008ea6:	f7fe ff95 	bl	8007dd4 <HAL_TIM_PWM_ConfigChannel>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d001      	beq.n	8008eb4 <board_init_common_timer_init+0x13c>
 8008eb0:	f000 f93f 	bl	8009132 <Error_Handler>
    sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	603b      	str	r3, [r7, #0]
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	607b      	str	r3, [r7, #4]
    sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	60bb      	str	r3, [r7, #8]
    sBreakDeadTimeConfig.DeadTime = 0;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	60fb      	str	r3, [r7, #12]
    sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	613b      	str	r3, [r7, #16]
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008ec8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008ecc:	617b      	str	r3, [r7, #20]
    sBreakDeadTimeConfig.BreakFilter = 0;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	61bb      	str	r3, [r7, #24]
    sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	61fb      	str	r3, [r7, #28]
    sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8008ed6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008eda:	623b      	str	r3, [r7, #32]
    sBreakDeadTimeConfig.Break2Filter = 0;
 8008edc:	2300      	movs	r3, #0
 8008ede:	627b      	str	r3, [r7, #36]	; 0x24
    sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIMEx_ConfigBreakDeadTime(&g_tim1_handle, &sBreakDeadTimeConfig) != HAL_OK) Error_Handler();
 8008ee4:	463b      	mov	r3, r7
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	4814      	ldr	r0, [pc, #80]	; (8008f3c <board_init_common_timer_init+0x1c4>)
 8008eea:	f7ff fe3d 	bl	8008b68 <HAL_TIMEx_ConfigBreakDeadTime>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d001      	beq.n	8008ef8 <board_init_common_timer_init+0x180>
 8008ef4:	f000 f91d 	bl	8009132 <Error_Handler>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_1);
 8008ef8:	2100      	movs	r1, #0
 8008efa:	4810      	ldr	r0, [pc, #64]	; (8008f3c <board_init_common_timer_init+0x1c4>)
 8008efc:	f7fe fe82 	bl	8007c04 <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_2);
 8008f00:	2104      	movs	r1, #4
 8008f02:	480e      	ldr	r0, [pc, #56]	; (8008f3c <board_init_common_timer_init+0x1c4>)
 8008f04:	f7fe fe7e 	bl	8007c04 <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_3);
 8008f08:	2108      	movs	r1, #8
 8008f0a:	480c      	ldr	r0, [pc, #48]	; (8008f3c <board_init_common_timer_init+0x1c4>)
 8008f0c:	f7fe fe7a 	bl	8007c04 <HAL_TIM_PWM_Stop_DMA>
    GPIO_InitStruct.Pin = PIN_TIM1_CH1|PIN_TIM1_CH2|PIN_TIM1_CH3;
 8008f10:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8008f14:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f16:	2302      	movs	r3, #2
 8008f18:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8008f22:	2301      	movs	r3, #1
 8008f24:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f26:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008f30:	f7fc ff18 	bl	8005d64 <HAL_GPIO_Init>
}
 8008f34:	bf00      	nop
 8008f36:	3778      	adds	r7, #120	; 0x78
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	200023bc 	.word	0x200023bc
 8008f40:	40012c00 	.word	0x40012c00

08008f44 <board_init_common_nvic_setup_interrupts>:


static void board_init_common_nvic_setup_interrupts(void)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	af00      	add	r7, sp, #0
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI0_IRQn);
 8008f48:	4b30      	ldr	r3, [pc, #192]	; (800900c <board_init_common_nvic_setup_interrupts+0xc8>)
 8008f4a:	2206      	movs	r2, #6
 8008f4c:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI2_IRQn);
 8008f4e:	4b2f      	ldr	r3, [pc, #188]	; (800900c <board_init_common_nvic_setup_interrupts+0xc8>)
 8008f50:	2208      	movs	r2, #8
 8008f52:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI9_5_IRQn);
 8008f54:	4b2d      	ldr	r3, [pc, #180]	; (800900c <board_init_common_nvic_setup_interrupts+0xc8>)
 8008f56:	2217      	movs	r2, #23
 8008f58:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI15_10_IRQn);
 8008f5a:	4b2c      	ldr	r3, [pc, #176]	; (800900c <board_init_common_nvic_setup_interrupts+0xc8>)
 8008f5c:	2228      	movs	r2, #40	; 0x28
 8008f5e:	615a      	str	r2, [r3, #20]
    HAL_NVIC_SetPriority(EXTI0_IRQn, 24, 0);
 8008f60:	2200      	movs	r2, #0
 8008f62:	2118      	movs	r1, #24
 8008f64:	2006      	movs	r0, #6
 8008f66:	f7fc fc38 	bl	80057da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8008f6a:	2006      	movs	r0, #6
 8008f6c:	f7fc fc51 	bl	8005812 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI2_IRQn, 24, 0);
 8008f70:	2200      	movs	r2, #0
 8008f72:	2118      	movs	r1, #24
 8008f74:	2008      	movs	r0, #8
 8008f76:	f7fc fc30 	bl	80057da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8008f7a:	2008      	movs	r0, #8
 8008f7c:	f7fc fc49 	bl	8005812 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 24, 0);
 8008f80:	2200      	movs	r2, #0
 8008f82:	2118      	movs	r1, #24
 8008f84:	2017      	movs	r0, #23
 8008f86:	f7fc fc28 	bl	80057da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8008f8a:	2017      	movs	r0, #23
 8008f8c:	f7fc fc41 	bl	8005812 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 24, 0);
 8008f90:	2200      	movs	r2, #0
 8008f92:	2118      	movs	r1, #24
 8008f94:	2028      	movs	r0, #40	; 0x28
 8008f96:	f7fc fc20 	bl	80057da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8008f9a:	2028      	movs	r0, #40	; 0x28
 8008f9c:	f7fc fc39 	bl	8005812 <HAL_NVIC_EnableIRQ>
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI0_IRQn);
 8008fa0:	4b1a      	ldr	r3, [pc, #104]	; (800900c <board_init_common_nvic_setup_interrupts+0xc8>)
 8008fa2:	2206      	movs	r2, #6
 8008fa4:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI2_IRQn);
 8008fa6:	4b19      	ldr	r3, [pc, #100]	; (800900c <board_init_common_nvic_setup_interrupts+0xc8>)
 8008fa8:	2208      	movs	r2, #8
 8008faa:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI9_5_IRQn);
 8008fac:	4b17      	ldr	r3, [pc, #92]	; (800900c <board_init_common_nvic_setup_interrupts+0xc8>)
 8008fae:	2217      	movs	r2, #23
 8008fb0:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI15_10_IRQn);
 8008fb2:	4b16      	ldr	r3, [pc, #88]	; (800900c <board_init_common_nvic_setup_interrupts+0xc8>)
 8008fb4:	2228      	movs	r2, #40	; 0x28
 8008fb6:	615a      	str	r2, [r3, #20]
    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8008fb8:	2200      	movs	r2, #0
 8008fba:	2100      	movs	r1, #0
 8008fbc:	200c      	movs	r0, #12
 8008fbe:	f7fc fc0c 	bl	80057da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8008fc2:	200c      	movs	r0, #12
 8008fc4:	f7fc fc25 	bl	8005812 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8008fc8:	2200      	movs	r2, #0
 8008fca:	2100      	movs	r1, #0
 8008fcc:	200d      	movs	r0, #13
 8008fce:	f7fc fc04 	bl	80057da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8008fd2:	200d      	movs	r0, #13
 8008fd4:	f7fc fc1d 	bl	8005812 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8008fd8:	2200      	movs	r2, #0
 8008fda:	2100      	movs	r1, #0
 8008fdc:	200f      	movs	r0, #15
 8008fde:	f7fc fbfc 	bl	80057da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8008fe2:	200f      	movs	r0, #15
 8008fe4:	f7fc fc15 	bl	8005812 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8008fe8:	2200      	movs	r2, #0
 8008fea:	2100      	movs	r1, #0
 8008fec:	2010      	movs	r0, #16
 8008fee:	f7fc fbf4 	bl	80057da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8008ff2:	2010      	movs	r0, #16
 8008ff4:	f7fc fc0d 	bl	8005812 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	2100      	movs	r1, #0
 8008ffc:	2011      	movs	r0, #17
 8008ffe:	f7fc fbec 	bl	80057da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8009002:	2011      	movs	r0, #17
 8009004:	f7fc fc05 	bl	8005812 <HAL_NVIC_EnableIRQ>
}
 8009008:	bf00      	nop
 800900a:	bd80      	pop	{r7, pc}
 800900c:	40010400 	.word	0x40010400

08009010 <board_init_common_setup_wakeups>:


static void board_init_common_setup_wakeups(void)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b086      	sub	sp, #24
 8009014:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009016:	1d3b      	adds	r3, r7, #4
 8009018:	2200      	movs	r2, #0
 800901a:	601a      	str	r2, [r3, #0]
 800901c:	605a      	str	r2, [r3, #4]
 800901e:	609a      	str	r2, [r3, #8]
 8009020:	60da      	str	r2, [r3, #12]
 8009022:	611a      	str	r2, [r3, #16]

    // future setup wakeups
    GPIO_InitStruct.Pin = PIN_WKUP_1|PIN_WKUP_4;
 8009024:	2305      	movs	r3, #5
 8009026:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8009028:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800902c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800902e:	2301      	movs	r3, #1
 8009030:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 8009032:	1d3b      	adds	r3, r7, #4
 8009034:	4619      	mov	r1, r3
 8009036:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800903a:	f7fc fe93 	bl	8005d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_WKUP_2|PIN_WKUP_3;
 800903e:	f242 0320 	movw	r3, #8224	; 0x2020
 8009042:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8009044:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8009048:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800904a:	2301      	movs	r3, #1
 800904c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800904e:	1d3b      	adds	r3, r7, #4
 8009050:	4619      	mov	r1, r3
 8009052:	4804      	ldr	r0, [pc, #16]	; (8009064 <board_init_common_setup_wakeups+0x54>)
 8009054:	f7fc fe86 	bl	8005d64 <HAL_GPIO_Init>
    board_init_common_nvic_setup_interrupts();
 8009058:	f7ff ff74 	bl	8008f44 <board_init_common_nvic_setup_interrupts>
}
 800905c:	bf00      	nop
 800905e:	3718      	adds	r7, #24
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}
 8009064:	48000800 	.word	0x48000800

08009068 <board_init_port_wakeup>:

static void board_init_port_wakeup(void)
{
 8009068:	b480      	push	{r7}
 800906a:	b087      	sub	sp, #28
 800906c:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800906e:	4b21      	ldr	r3, [pc, #132]	; (80090f4 <board_init_port_wakeup+0x8c>)
 8009070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009072:	4a20      	ldr	r2, [pc, #128]	; (80090f4 <board_init_port_wakeup+0x8c>)
 8009074:	f043 0301 	orr.w	r3, r3, #1
 8009078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800907a:	4b1e      	ldr	r3, [pc, #120]	; (80090f4 <board_init_port_wakeup+0x8c>)
 800907c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800907e:	f003 0301 	and.w	r3, r3, #1
 8009082:	617b      	str	r3, [r7, #20]
 8009084:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009086:	4b1b      	ldr	r3, [pc, #108]	; (80090f4 <board_init_port_wakeup+0x8c>)
 8009088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800908a:	4a1a      	ldr	r2, [pc, #104]	; (80090f4 <board_init_port_wakeup+0x8c>)
 800908c:	f043 0302 	orr.w	r3, r3, #2
 8009090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009092:	4b18      	ldr	r3, [pc, #96]	; (80090f4 <board_init_port_wakeup+0x8c>)
 8009094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009096:	f003 0302 	and.w	r3, r3, #2
 800909a:	613b      	str	r3, [r7, #16]
 800909c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800909e:	4b15      	ldr	r3, [pc, #84]	; (80090f4 <board_init_port_wakeup+0x8c>)
 80090a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090a2:	4a14      	ldr	r2, [pc, #80]	; (80090f4 <board_init_port_wakeup+0x8c>)
 80090a4:	f043 0304 	orr.w	r3, r3, #4
 80090a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80090aa:	4b12      	ldr	r3, [pc, #72]	; (80090f4 <board_init_port_wakeup+0x8c>)
 80090ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090ae:	f003 0304 	and.w	r3, r3, #4
 80090b2:	60fb      	str	r3, [r7, #12]
 80090b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80090b6:	4b0f      	ldr	r3, [pc, #60]	; (80090f4 <board_init_port_wakeup+0x8c>)
 80090b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090ba:	4a0e      	ldr	r2, [pc, #56]	; (80090f4 <board_init_port_wakeup+0x8c>)
 80090bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80090c2:	4b0c      	ldr	r3, [pc, #48]	; (80090f4 <board_init_port_wakeup+0x8c>)
 80090c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090ca:	60bb      	str	r3, [r7, #8]
 80090cc:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_DMA1_CLK_ENABLE();
 80090ce:	4b09      	ldr	r3, [pc, #36]	; (80090f4 <board_init_port_wakeup+0x8c>)
 80090d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090d2:	4a08      	ldr	r2, [pc, #32]	; (80090f4 <board_init_port_wakeup+0x8c>)
 80090d4:	f043 0301 	orr.w	r3, r3, #1
 80090d8:	6493      	str	r3, [r2, #72]	; 0x48
 80090da:	4b06      	ldr	r3, [pc, #24]	; (80090f4 <board_init_port_wakeup+0x8c>)
 80090dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090de:	f003 0301 	and.w	r3, r3, #1
 80090e2:	607b      	str	r3, [r7, #4]
 80090e4:	687b      	ldr	r3, [r7, #4]
}
 80090e6:	bf00      	nop
 80090e8:	371c      	adds	r7, #28
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop
 80090f4:	40021000 	.word	0x40021000

080090f8 <board_init_common_board_init>:


void board_init_common_board_init(void)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	af00      	add	r7, sp, #0
    srand(time(0));
 80090fc:	2000      	movs	r0, #0
 80090fe:	f001 f877 	bl	800a1f0 <time>
 8009102:	4602      	mov	r2, r0
 8009104:	460b      	mov	r3, r1
 8009106:	4613      	mov	r3, r2
 8009108:	4618      	mov	r0, r3
 800910a:	f000 fff5 	bl	800a0f8 <srand>
    HAL_Init();
 800910e:	f7fc f9bd 	bl	800548c <HAL_Init>
    SystemClock_Config();
 8009112:	f7ff fdc9 	bl	8008ca8 <SystemClock_Config>

    board_init_port_wakeup();
 8009116:	f7ff ffa7 	bl	8009068 <board_init_port_wakeup>
    board_init_common_setup_wakeups();
 800911a:	f7ff ff79 	bl	8009010 <board_init_common_setup_wakeups>
    board_init_specific();
 800911e:	f000 f80d 	bl	800913c <board_init_specific>

    board_init_common_timer_init();
 8009122:	f7ff fe29 	bl	8008d78 <board_init_common_timer_init>

    ws2812b_init();
 8009126:	f7f8 fd1d 	bl	8001b64 <ws2812b_init>

    board_init_common_rtc_init();
 800912a:	f7ff fd95 	bl	8008c58 <board_init_common_rtc_init>
}
 800912e:	bf00      	nop
 8009130:	bd80      	pop	{r7, pc}

08009132 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009132:	b480      	push	{r7}
 8009134:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8009136:	b672      	cpsid	i
}
 8009138:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800913a:	e7fe      	b.n	800913a <Error_Handler+0x8>

0800913c <board_init_specific>:
}
#endif


void board_init_specific(void)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b086      	sub	sp, #24
 8009140:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009142:	1d3b      	adds	r3, r7, #4
 8009144:	2200      	movs	r2, #0
 8009146:	601a      	str	r2, [r3, #0]
 8009148:	605a      	str	r2, [r3, #4]
 800914a:	609a      	str	r2, [r3, #8]
 800914c:	60da      	str	r2, [r3, #12]
 800914e:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = PIN_INT_LVL_EN;
 8009150:	2301      	movs	r3, #1
 8009152:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009154:	2301      	movs	r3, #1
 8009156:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009158:	2300      	movs	r3, #0
 800915a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);
 800915c:	1d3b      	adds	r3, r7, #4
 800915e:	4619      	mov	r1, r3
 8009160:	4844      	ldr	r0, [pc, #272]	; (8009274 <board_init_specific+0x138>)
 8009162:	f7fc fdff 	bl	8005d64 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_B, PIN_INT_LVL_EN, GPIO_PIN_SET);
 8009166:	2201      	movs	r2, #1
 8009168:	2101      	movs	r1, #1
 800916a:	4842      	ldr	r0, [pc, #264]	; (8009274 <board_init_specific+0x138>)
 800916c:	f7fc ff74 	bl	8006058 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_LVL_EN;
 8009170:	2380      	movs	r3, #128	; 0x80
 8009172:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009174:	2301      	movs	r3, #1
 8009176:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009178:	2300      	movs	r3, #0
 800917a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800917c:	1d3b      	adds	r3, r7, #4
 800917e:	4619      	mov	r1, r3
 8009180:	483d      	ldr	r0, [pc, #244]	; (8009278 <board_init_specific+0x13c>)
 8009182:	f7fc fdef 	bl	8005d64 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_LVL_EN, GPIO_PIN_RESET);
 8009186:	2200      	movs	r2, #0
 8009188:	2180      	movs	r1, #128	; 0x80
 800918a:	483b      	ldr	r0, [pc, #236]	; (8009278 <board_init_specific+0x13c>)
 800918c:	f7fc ff64 	bl	8006058 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_LVL_DIR;
 8009190:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009194:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009196:	2301      	movs	r3, #1
 8009198:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800919a:	2300      	movs	r3, #0
 800919c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800919e:	1d3b      	adds	r3, r7, #4
 80091a0:	4619      	mov	r1, r3
 80091a2:	4835      	ldr	r0, [pc, #212]	; (8009278 <board_init_specific+0x13c>)
 80091a4:	f7fc fdde 	bl	8005d64 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_LVL_DIR, GPIO_PIN_SET);
 80091a8:	2201      	movs	r2, #1
 80091aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80091ae:	4832      	ldr	r0, [pc, #200]	; (8009278 <board_init_specific+0x13c>)
 80091b0:	f7fc ff52 	bl	8006058 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_DISP_RST | PIN_DISP_DC |PIN_DISP_BACKLIGHT;
 80091b4:	23e0      	movs	r3, #224	; 0xe0
 80091b6:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80091b8:	2301      	movs	r3, #1
 80091ba:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091bc:	2300      	movs	r3, #0
 80091be:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 80091c0:	1d3b      	adds	r3, r7, #4
 80091c2:	4619      	mov	r1, r3
 80091c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80091c8:	f7fc fdcc 	bl	8005d64 <HAL_GPIO_Init>

    // setup XR_RX and XR_TX
    GPIO_InitStruct.Pin = PIN_XR_GPIO | PIN_VBUS_PRESENT;
 80091cc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80091d0:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80091d2:	2300      	movs	r3, #0
 80091d4:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091d6:	2300      	movs	r3, #0
 80091d8:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);
 80091da:	1d3b      	adds	r3, r7, #4
 80091dc:	4619      	mov	r1, r3
 80091de:	4825      	ldr	r0, [pc, #148]	; (8009274 <board_init_specific+0x138>)
 80091e0:	f7fc fdc0 	bl	8005d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_BLUE_LED;
 80091e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091e8:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80091ea:	2301      	movs	r3, #1
 80091ec:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091ee:	2300      	movs	r3, #0
 80091f0:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);
 80091f2:	1d3b      	adds	r3, r7, #4
 80091f4:	4619      	mov	r1, r3
 80091f6:	481f      	ldr	r0, [pc, #124]	; (8009274 <board_init_specific+0x138>)
 80091f8:	f7fc fdb4 	bl	8005d64 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_B, PIN_BLUE_LED, GPIO_PIN_RESET);
 80091fc:	2200      	movs	r2, #0
 80091fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009202:	481c      	ldr	r0, [pc, #112]	; (8009274 <board_init_specific+0x138>)
 8009204:	f7fc ff28 	bl	8006058 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_ORANGE_LED;
 8009208:	f44f 7300 	mov.w	r3, #512	; 0x200
 800920c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800920e:	2301      	movs	r3, #1
 8009210:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009212:	2300      	movs	r3, #0
 8009214:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);
 8009216:	1d3b      	adds	r3, r7, #4
 8009218:	4619      	mov	r1, r3
 800921a:	4816      	ldr	r0, [pc, #88]	; (8009274 <board_init_specific+0x138>)
 800921c:	f7fc fda2 	bl	8005d64 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_B, PIN_ORANGE_LED, GPIO_PIN_RESET);
 8009220:	2200      	movs	r2, #0
 8009222:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009226:	4813      	ldr	r0, [pc, #76]	; (8009274 <board_init_specific+0x138>)
 8009228:	f7fc ff16 	bl	8006058 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_GREEN_LED;
 800922c:	2304      	movs	r3, #4
 800922e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009230:	2301      	movs	r3, #1
 8009232:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009234:	2300      	movs	r3, #0
 8009236:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 8009238:	1d3b      	adds	r3, r7, #4
 800923a:	4619      	mov	r1, r3
 800923c:	480e      	ldr	r0, [pc, #56]	; (8009278 <board_init_specific+0x13c>)
 800923e:	f7fc fd91 	bl	8005d64 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_GREEN_LED, GPIO_PIN_RESET);
 8009242:	2200      	movs	r2, #0
 8009244:	2104      	movs	r1, #4
 8009246:	480c      	ldr	r0, [pc, #48]	; (8009278 <board_init_specific+0x13c>)
 8009248:	f7fc ff06 	bl	8006058 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_RED_LED;
 800924c:	2308      	movs	r3, #8
 800924e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009250:	2301      	movs	r3, #1
 8009252:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009254:	2300      	movs	r3, #0
 8009256:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 8009258:	1d3b      	adds	r3, r7, #4
 800925a:	4619      	mov	r1, r3
 800925c:	4806      	ldr	r0, [pc, #24]	; (8009278 <board_init_specific+0x13c>)
 800925e:	f7fc fd81 	bl	8005d64 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_RED_LED, GPIO_PIN_RESET);
 8009262:	2200      	movs	r2, #0
 8009264:	2108      	movs	r1, #8
 8009266:	4804      	ldr	r0, [pc, #16]	; (8009278 <board_init_specific+0x13c>)
 8009268:	f7fc fef6 	bl	8006058 <HAL_GPIO_WritePin>

#if defined(BOARD_SPUD_GLO_V4P2)
    board_init_peripheral_setup();
#endif
}
 800926c:	bf00      	nop
 800926e:	3718      	adds	r7, #24
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}
 8009274:	48000400 	.word	0x48000400
 8009278:	48000800 	.word	0x48000800

0800927c <HAL_Set_DMA_Callbacks>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);


// Function below added by SRW
static void HAL_Set_DMA_Callbacks(void)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	af00      	add	r7, sp, #0
    HAL_DMA_RegisterCallback(&hdma_tim1_ch1, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8009280:	4a0d      	ldr	r2, [pc, #52]	; (80092b8 <HAL_Set_DMA_Callbacks+0x3c>)
 8009282:	2100      	movs	r1, #0
 8009284:	480d      	ldr	r0, [pc, #52]	; (80092bc <HAL_Set_DMA_Callbacks+0x40>)
 8009286:	f7fc fcf5 	bl	8005c74 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim1_ch2, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 800928a:	4a0b      	ldr	r2, [pc, #44]	; (80092b8 <HAL_Set_DMA_Callbacks+0x3c>)
 800928c:	2100      	movs	r1, #0
 800928e:	480c      	ldr	r0, [pc, #48]	; (80092c0 <HAL_Set_DMA_Callbacks+0x44>)
 8009290:	f7fc fcf0 	bl	8005c74 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim1_ch3, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8009294:	4a08      	ldr	r2, [pc, #32]	; (80092b8 <HAL_Set_DMA_Callbacks+0x3c>)
 8009296:	2100      	movs	r1, #0
 8009298:	480a      	ldr	r0, [pc, #40]	; (80092c4 <HAL_Set_DMA_Callbacks+0x48>)
 800929a:	f7fc fceb 	bl	8005c74 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim15_ch1_up_trig_com, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 800929e:	4a06      	ldr	r2, [pc, #24]	; (80092b8 <HAL_Set_DMA_Callbacks+0x3c>)
 80092a0:	2100      	movs	r1, #0
 80092a2:	4809      	ldr	r0, [pc, #36]	; (80092c8 <HAL_Set_DMA_Callbacks+0x4c>)
 80092a4:	f7fc fce6 	bl	8005c74 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim16_ch1_up, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 80092a8:	4a03      	ldr	r2, [pc, #12]	; (80092b8 <HAL_Set_DMA_Callbacks+0x3c>)
 80092aa:	2100      	movs	r1, #0
 80092ac:	4807      	ldr	r0, [pc, #28]	; (80092cc <HAL_Set_DMA_Callbacks+0x50>)
 80092ae:	f7fc fce1 	bl	8005c74 <HAL_DMA_RegisterCallback>
}
 80092b2:	bf00      	nop
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	bf00      	nop
 80092b8:	080098af 	.word	0x080098af
 80092bc:	20002230 	.word	0x20002230
 80092c0:	20002278 	.word	0x20002278
 80092c4:	200022c0 	.word	0x200022c0
 80092c8:	20002308 	.word	0x20002308
 80092cc:	20002350 	.word	0x20002350

080092d0 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
  PWR_PVDTypeDef sConfigPVD = {0};
 80092d6:	f107 0308 	add.w	r3, r7, #8
 80092da:	2200      	movs	r2, #0
 80092dc:	601a      	str	r2, [r3, #0]
 80092de:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80092e0:	4b13      	ldr	r3, [pc, #76]	; (8009330 <HAL_MspInit+0x60>)
 80092e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092e4:	4a12      	ldr	r2, [pc, #72]	; (8009330 <HAL_MspInit+0x60>)
 80092e6:	f043 0301 	orr.w	r3, r3, #1
 80092ea:	6613      	str	r3, [r2, #96]	; 0x60
 80092ec:	4b10      	ldr	r3, [pc, #64]	; (8009330 <HAL_MspInit+0x60>)
 80092ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092f0:	f003 0301 	and.w	r3, r3, #1
 80092f4:	607b      	str	r3, [r7, #4]
 80092f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80092f8:	4b0d      	ldr	r3, [pc, #52]	; (8009330 <HAL_MspInit+0x60>)
 80092fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092fc:	4a0c      	ldr	r2, [pc, #48]	; (8009330 <HAL_MspInit+0x60>)
 80092fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009302:	6593      	str	r3, [r2, #88]	; 0x58
 8009304:	4b0a      	ldr	r3, [pc, #40]	; (8009330 <HAL_MspInit+0x60>)
 8009306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800930c:	603b      	str	r3, [r7, #0]
 800930e:	683b      	ldr	r3, [r7, #0]

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8009310:	2300      	movs	r3, #0
 8009312:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8009314:	2300      	movs	r3, #0
 8009316:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8009318:	f107 0308 	add.w	r3, r7, #8
 800931c:	4618      	mov	r0, r3
 800931e:	f7fc fedb 	bl	80060d8 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8009322:	f7fc ff39 	bl	8006198 <HAL_PWR_EnablePVD>
}
 8009326:	bf00      	nop
 8009328:	3710      	adds	r7, #16
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	40021000 	.word	0x40021000

08009334 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4a08      	ldr	r2, [pc, #32]	; (8009364 <HAL_RTC_MspInit+0x30>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d107      	bne.n	8009356 <HAL_RTC_MspInit+0x22>
  {
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8009346:	4b08      	ldr	r3, [pc, #32]	; (8009368 <HAL_RTC_MspInit+0x34>)
 8009348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800934c:	4a06      	ldr	r2, [pc, #24]	; (8009368 <HAL_RTC_MspInit+0x34>)
 800934e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009352:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

}
 8009356:	bf00      	nop
 8009358:	370c      	adds	r7, #12
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr
 8009362:	bf00      	nop
 8009364:	40002800 	.word	0x40002800
 8009368:	40021000 	.word	0x40021000

0800936c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4a6e      	ldr	r2, [pc, #440]	; (8009534 <HAL_TIM_Base_MspInit+0x1c8>)
 800937a:	4293      	cmp	r3, r2
 800937c:	f040 8091 	bne.w	80094a2 <HAL_TIM_Base_MspInit+0x136>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009380:	4b6d      	ldr	r3, [pc, #436]	; (8009538 <HAL_TIM_Base_MspInit+0x1cc>)
 8009382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009384:	4a6c      	ldr	r2, [pc, #432]	; (8009538 <HAL_TIM_Base_MspInit+0x1cc>)
 8009386:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800938a:	6613      	str	r3, [r2, #96]	; 0x60
 800938c:	4b6a      	ldr	r3, [pc, #424]	; (8009538 <HAL_TIM_Base_MspInit+0x1cc>)
 800938e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009390:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009394:	60fb      	str	r3, [r7, #12]
 8009396:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8009398:	4b68      	ldr	r3, [pc, #416]	; (800953c <HAL_TIM_Base_MspInit+0x1d0>)
 800939a:	4a69      	ldr	r2, [pc, #420]	; (8009540 <HAL_TIM_Base_MspInit+0x1d4>)
 800939c:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 800939e:	4b67      	ldr	r3, [pc, #412]	; (800953c <HAL_TIM_Base_MspInit+0x1d0>)
 80093a0:	2207      	movs	r2, #7
 80093a2:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80093a4:	4b65      	ldr	r3, [pc, #404]	; (800953c <HAL_TIM_Base_MspInit+0x1d0>)
 80093a6:	2210      	movs	r2, #16
 80093a8:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80093aa:	4b64      	ldr	r3, [pc, #400]	; (800953c <HAL_TIM_Base_MspInit+0x1d0>)
 80093ac:	2200      	movs	r2, #0
 80093ae:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80093b0:	4b62      	ldr	r3, [pc, #392]	; (800953c <HAL_TIM_Base_MspInit+0x1d0>)
 80093b2:	2280      	movs	r2, #128	; 0x80
 80093b4:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80093b6:	4b61      	ldr	r3, [pc, #388]	; (800953c <HAL_TIM_Base_MspInit+0x1d0>)
 80093b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80093bc:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80093be:	4b5f      	ldr	r3, [pc, #380]	; (800953c <HAL_TIM_Base_MspInit+0x1d0>)
 80093c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80093c4:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80093c6:	4b5d      	ldr	r3, [pc, #372]	; (800953c <HAL_TIM_Base_MspInit+0x1d0>)
 80093c8:	2200      	movs	r2, #0
 80093ca:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80093cc:	4b5b      	ldr	r3, [pc, #364]	; (800953c <HAL_TIM_Base_MspInit+0x1d0>)
 80093ce:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80093d2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80093d4:	4859      	ldr	r0, [pc, #356]	; (800953c <HAL_TIM_Base_MspInit+0x1d0>)
 80093d6:	f7fc fa45 	bl	8005864 <HAL_DMA_Init>
 80093da:	4603      	mov	r3, r0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d001      	beq.n	80093e4 <HAL_TIM_Base_MspInit+0x78>
    {
      Error_Handler();
 80093e0:	f7ff fea7 	bl	8009132 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	4a55      	ldr	r2, [pc, #340]	; (800953c <HAL_TIM_Base_MspInit+0x1d0>)
 80093e8:	625a      	str	r2, [r3, #36]	; 0x24
 80093ea:	4a54      	ldr	r2, [pc, #336]	; (800953c <HAL_TIM_Base_MspInit+0x1d0>)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel3;
 80093f0:	4b54      	ldr	r3, [pc, #336]	; (8009544 <HAL_TIM_Base_MspInit+0x1d8>)
 80093f2:	4a55      	ldr	r2, [pc, #340]	; (8009548 <HAL_TIM_Base_MspInit+0x1dc>)
 80093f4:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_7;
 80093f6:	4b53      	ldr	r3, [pc, #332]	; (8009544 <HAL_TIM_Base_MspInit+0x1d8>)
 80093f8:	2207      	movs	r2, #7
 80093fa:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80093fc:	4b51      	ldr	r3, [pc, #324]	; (8009544 <HAL_TIM_Base_MspInit+0x1d8>)
 80093fe:	2210      	movs	r2, #16
 8009400:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8009402:	4b50      	ldr	r3, [pc, #320]	; (8009544 <HAL_TIM_Base_MspInit+0x1d8>)
 8009404:	2200      	movs	r2, #0
 8009406:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8009408:	4b4e      	ldr	r3, [pc, #312]	; (8009544 <HAL_TIM_Base_MspInit+0x1d8>)
 800940a:	2280      	movs	r2, #128	; 0x80
 800940c:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800940e:	4b4d      	ldr	r3, [pc, #308]	; (8009544 <HAL_TIM_Base_MspInit+0x1d8>)
 8009410:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009414:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009416:	4b4b      	ldr	r3, [pc, #300]	; (8009544 <HAL_TIM_Base_MspInit+0x1d8>)
 8009418:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800941c:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 800941e:	4b49      	ldr	r3, [pc, #292]	; (8009544 <HAL_TIM_Base_MspInit+0x1d8>)
 8009420:	2200      	movs	r2, #0
 8009422:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8009424:	4b47      	ldr	r3, [pc, #284]	; (8009544 <HAL_TIM_Base_MspInit+0x1d8>)
 8009426:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800942a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 800942c:	4845      	ldr	r0, [pc, #276]	; (8009544 <HAL_TIM_Base_MspInit+0x1d8>)
 800942e:	f7fc fa19 	bl	8005864 <HAL_DMA_Init>
 8009432:	4603      	mov	r3, r0
 8009434:	2b00      	cmp	r3, #0
 8009436:	d001      	beq.n	800943c <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 8009438:	f7ff fe7b 	bl	8009132 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	4a41      	ldr	r2, [pc, #260]	; (8009544 <HAL_TIM_Base_MspInit+0x1d8>)
 8009440:	629a      	str	r2, [r3, #40]	; 0x28
 8009442:	4a40      	ldr	r2, [pc, #256]	; (8009544 <HAL_TIM_Base_MspInit+0x1d8>)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel7;
 8009448:	4b40      	ldr	r3, [pc, #256]	; (800954c <HAL_TIM_Base_MspInit+0x1e0>)
 800944a:	4a41      	ldr	r2, [pc, #260]	; (8009550 <HAL_TIM_Base_MspInit+0x1e4>)
 800944c:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Request = DMA_REQUEST_7;
 800944e:	4b3f      	ldr	r3, [pc, #252]	; (800954c <HAL_TIM_Base_MspInit+0x1e0>)
 8009450:	2207      	movs	r2, #7
 8009452:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009454:	4b3d      	ldr	r3, [pc, #244]	; (800954c <HAL_TIM_Base_MspInit+0x1e0>)
 8009456:	2210      	movs	r2, #16
 8009458:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800945a:	4b3c      	ldr	r3, [pc, #240]	; (800954c <HAL_TIM_Base_MspInit+0x1e0>)
 800945c:	2200      	movs	r2, #0
 800945e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8009460:	4b3a      	ldr	r3, [pc, #232]	; (800954c <HAL_TIM_Base_MspInit+0x1e0>)
 8009462:	2280      	movs	r2, #128	; 0x80
 8009464:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009466:	4b39      	ldr	r3, [pc, #228]	; (800954c <HAL_TIM_Base_MspInit+0x1e0>)
 8009468:	f44f 7280 	mov.w	r2, #256	; 0x100
 800946c:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800946e:	4b37      	ldr	r3, [pc, #220]	; (800954c <HAL_TIM_Base_MspInit+0x1e0>)
 8009470:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009474:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 8009476:	4b35      	ldr	r3, [pc, #212]	; (800954c <HAL_TIM_Base_MspInit+0x1e0>)
 8009478:	2200      	movs	r2, #0
 800947a:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800947c:	4b33      	ldr	r3, [pc, #204]	; (800954c <HAL_TIM_Base_MspInit+0x1e0>)
 800947e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009482:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8009484:	4831      	ldr	r0, [pc, #196]	; (800954c <HAL_TIM_Base_MspInit+0x1e0>)
 8009486:	f7fc f9ed 	bl	8005864 <HAL_DMA_Init>
 800948a:	4603      	mov	r3, r0
 800948c:	2b00      	cmp	r3, #0
 800948e:	d001      	beq.n	8009494 <HAL_TIM_Base_MspInit+0x128>
    {
      Error_Handler();
 8009490:	f7ff fe4f 	bl	8009132 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4a2d      	ldr	r2, [pc, #180]	; (800954c <HAL_TIM_Base_MspInit+0x1e0>)
 8009498:	62da      	str	r2, [r3, #44]	; 0x2c
 800949a:	4a2c      	ldr	r2, [pc, #176]	; (800954c <HAL_TIM_Base_MspInit+0x1e0>)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6293      	str	r3, [r2, #40]	; 0x28
 80094a0:	e041      	b.n	8009526 <HAL_TIM_Base_MspInit+0x1ba>
  }
  else if(htim_base->Instance==TIM16)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a2b      	ldr	r2, [pc, #172]	; (8009554 <HAL_TIM_Base_MspInit+0x1e8>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d13c      	bne.n	8009526 <HAL_TIM_Base_MspInit+0x1ba>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80094ac:	4b22      	ldr	r3, [pc, #136]	; (8009538 <HAL_TIM_Base_MspInit+0x1cc>)
 80094ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094b0:	4a21      	ldr	r2, [pc, #132]	; (8009538 <HAL_TIM_Base_MspInit+0x1cc>)
 80094b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094b6:	6613      	str	r3, [r2, #96]	; 0x60
 80094b8:	4b1f      	ldr	r3, [pc, #124]	; (8009538 <HAL_TIM_Base_MspInit+0x1cc>)
 80094ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094c0:	60bb      	str	r3, [r7, #8]
 80094c2:	68bb      	ldr	r3, [r7, #8]

    /* TIM16 DMA Init */
    /* TIM16_CH1_UP Init */
    hdma_tim16_ch1_up.Instance = DMA1_Channel6;
 80094c4:	4b24      	ldr	r3, [pc, #144]	; (8009558 <HAL_TIM_Base_MspInit+0x1ec>)
 80094c6:	4a25      	ldr	r2, [pc, #148]	; (800955c <HAL_TIM_Base_MspInit+0x1f0>)
 80094c8:	601a      	str	r2, [r3, #0]
    hdma_tim16_ch1_up.Init.Request = DMA_REQUEST_4;
 80094ca:	4b23      	ldr	r3, [pc, #140]	; (8009558 <HAL_TIM_Base_MspInit+0x1ec>)
 80094cc:	2204      	movs	r2, #4
 80094ce:	605a      	str	r2, [r3, #4]
    hdma_tim16_ch1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80094d0:	4b21      	ldr	r3, [pc, #132]	; (8009558 <HAL_TIM_Base_MspInit+0x1ec>)
 80094d2:	2210      	movs	r2, #16
 80094d4:	609a      	str	r2, [r3, #8]
    hdma_tim16_ch1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80094d6:	4b20      	ldr	r3, [pc, #128]	; (8009558 <HAL_TIM_Base_MspInit+0x1ec>)
 80094d8:	2200      	movs	r2, #0
 80094da:	60da      	str	r2, [r3, #12]
    hdma_tim16_ch1_up.Init.MemInc = DMA_MINC_ENABLE;
 80094dc:	4b1e      	ldr	r3, [pc, #120]	; (8009558 <HAL_TIM_Base_MspInit+0x1ec>)
 80094de:	2280      	movs	r2, #128	; 0x80
 80094e0:	611a      	str	r2, [r3, #16]
    hdma_tim16_ch1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80094e2:	4b1d      	ldr	r3, [pc, #116]	; (8009558 <HAL_TIM_Base_MspInit+0x1ec>)
 80094e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80094e8:	615a      	str	r2, [r3, #20]
    hdma_tim16_ch1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80094ea:	4b1b      	ldr	r3, [pc, #108]	; (8009558 <HAL_TIM_Base_MspInit+0x1ec>)
 80094ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80094f0:	619a      	str	r2, [r3, #24]
    hdma_tim16_ch1_up.Init.Mode = DMA_NORMAL;
 80094f2:	4b19      	ldr	r3, [pc, #100]	; (8009558 <HAL_TIM_Base_MspInit+0x1ec>)
 80094f4:	2200      	movs	r2, #0
 80094f6:	61da      	str	r2, [r3, #28]
    hdma_tim16_ch1_up.Init.Priority = DMA_PRIORITY_LOW;
 80094f8:	4b17      	ldr	r3, [pc, #92]	; (8009558 <HAL_TIM_Base_MspInit+0x1ec>)
 80094fa:	2200      	movs	r2, #0
 80094fc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim16_ch1_up) != HAL_OK)
 80094fe:	4816      	ldr	r0, [pc, #88]	; (8009558 <HAL_TIM_Base_MspInit+0x1ec>)
 8009500:	f7fc f9b0 	bl	8005864 <HAL_DMA_Init>
 8009504:	4603      	mov	r3, r0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d001      	beq.n	800950e <HAL_TIM_Base_MspInit+0x1a2>
    {
      Error_Handler();
 800950a:	f7ff fe12 	bl	8009132 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim16_ch1_up);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	4a11      	ldr	r2, [pc, #68]	; (8009558 <HAL_TIM_Base_MspInit+0x1ec>)
 8009512:	625a      	str	r2, [r3, #36]	; 0x24
 8009514:	4a10      	ldr	r2, [pc, #64]	; (8009558 <HAL_TIM_Base_MspInit+0x1ec>)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim16_ch1_up);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	4a0e      	ldr	r2, [pc, #56]	; (8009558 <HAL_TIM_Base_MspInit+0x1ec>)
 800951e:	621a      	str	r2, [r3, #32]
 8009520:	4a0d      	ldr	r2, [pc, #52]	; (8009558 <HAL_TIM_Base_MspInit+0x1ec>)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6293      	str	r3, [r2, #40]	; 0x28
  }
  HAL_Set_DMA_Callbacks();
 8009526:	f7ff fea9 	bl	800927c <HAL_Set_DMA_Callbacks>
}
 800952a:	bf00      	nop
 800952c:	3710      	adds	r7, #16
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
 8009532:	bf00      	nop
 8009534:	40012c00 	.word	0x40012c00
 8009538:	40021000 	.word	0x40021000
 800953c:	20002230 	.word	0x20002230
 8009540:	4002001c 	.word	0x4002001c
 8009544:	20002278 	.word	0x20002278
 8009548:	40020030 	.word	0x40020030
 800954c:	200022c0 	.word	0x200022c0
 8009550:	40020080 	.word	0x40020080
 8009554:	40014400 	.word	0x40014400
 8009558:	20002350 	.word	0x20002350
 800955c:	4002006c 	.word	0x4002006c

08009560 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b084      	sub	sp, #16
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a28      	ldr	r2, [pc, #160]	; (8009610 <HAL_TIM_PWM_MspInit+0xb0>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d149      	bne.n	8009606 <HAL_TIM_PWM_MspInit+0xa6>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8009572:	4b28      	ldr	r3, [pc, #160]	; (8009614 <HAL_TIM_PWM_MspInit+0xb4>)
 8009574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009576:	4a27      	ldr	r2, [pc, #156]	; (8009614 <HAL_TIM_PWM_MspInit+0xb4>)
 8009578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800957c:	6613      	str	r3, [r2, #96]	; 0x60
 800957e:	4b25      	ldr	r3, [pc, #148]	; (8009614 <HAL_TIM_PWM_MspInit+0xb4>)
 8009580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009586:	60fb      	str	r3, [r7, #12]
 8009588:	68fb      	ldr	r3, [r7, #12]

    /* TIM15 DMA Init */
    /* TIM15_CH1_UP_TRIG_COM Init */
    hdma_tim15_ch1_up_trig_com.Instance = DMA1_Channel5;
 800958a:	4b23      	ldr	r3, [pc, #140]	; (8009618 <HAL_TIM_PWM_MspInit+0xb8>)
 800958c:	4a23      	ldr	r2, [pc, #140]	; (800961c <HAL_TIM_PWM_MspInit+0xbc>)
 800958e:	601a      	str	r2, [r3, #0]
    hdma_tim15_ch1_up_trig_com.Init.Request = DMA_REQUEST_7;
 8009590:	4b21      	ldr	r3, [pc, #132]	; (8009618 <HAL_TIM_PWM_MspInit+0xb8>)
 8009592:	2207      	movs	r2, #7
 8009594:	605a      	str	r2, [r3, #4]
    hdma_tim15_ch1_up_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009596:	4b20      	ldr	r3, [pc, #128]	; (8009618 <HAL_TIM_PWM_MspInit+0xb8>)
 8009598:	2210      	movs	r2, #16
 800959a:	609a      	str	r2, [r3, #8]
    hdma_tim15_ch1_up_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 800959c:	4b1e      	ldr	r3, [pc, #120]	; (8009618 <HAL_TIM_PWM_MspInit+0xb8>)
 800959e:	2200      	movs	r2, #0
 80095a0:	60da      	str	r2, [r3, #12]
    hdma_tim15_ch1_up_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 80095a2:	4b1d      	ldr	r3, [pc, #116]	; (8009618 <HAL_TIM_PWM_MspInit+0xb8>)
 80095a4:	2280      	movs	r2, #128	; 0x80
 80095a6:	611a      	str	r2, [r3, #16]
    hdma_tim15_ch1_up_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80095a8:	4b1b      	ldr	r3, [pc, #108]	; (8009618 <HAL_TIM_PWM_MspInit+0xb8>)
 80095aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80095ae:	615a      	str	r2, [r3, #20]
    hdma_tim15_ch1_up_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80095b0:	4b19      	ldr	r3, [pc, #100]	; (8009618 <HAL_TIM_PWM_MspInit+0xb8>)
 80095b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80095b6:	619a      	str	r2, [r3, #24]
    hdma_tim15_ch1_up_trig_com.Init.Mode = DMA_NORMAL;
 80095b8:	4b17      	ldr	r3, [pc, #92]	; (8009618 <HAL_TIM_PWM_MspInit+0xb8>)
 80095ba:	2200      	movs	r2, #0
 80095bc:	61da      	str	r2, [r3, #28]
    hdma_tim15_ch1_up_trig_com.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80095be:	4b16      	ldr	r3, [pc, #88]	; (8009618 <HAL_TIM_PWM_MspInit+0xb8>)
 80095c0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80095c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim15_ch1_up_trig_com) != HAL_OK)
 80095c6:	4814      	ldr	r0, [pc, #80]	; (8009618 <HAL_TIM_PWM_MspInit+0xb8>)
 80095c8:	f7fc f94c 	bl	8005864 <HAL_DMA_Init>
 80095cc:	4603      	mov	r3, r0
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d001      	beq.n	80095d6 <HAL_TIM_PWM_MspInit+0x76>
    {
      Error_Handler();
 80095d2:	f7ff fdae 	bl	8009132 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim15_ch1_up_trig_com);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	4a0f      	ldr	r2, [pc, #60]	; (8009618 <HAL_TIM_PWM_MspInit+0xb8>)
 80095da:	625a      	str	r2, [r3, #36]	; 0x24
 80095dc:	4a0e      	ldr	r2, [pc, #56]	; (8009618 <HAL_TIM_PWM_MspInit+0xb8>)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim15_ch1_up_trig_com);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	4a0c      	ldr	r2, [pc, #48]	; (8009618 <HAL_TIM_PWM_MspInit+0xb8>)
 80095e6:	621a      	str	r2, [r3, #32]
 80095e8:	4a0b      	ldr	r2, [pc, #44]	; (8009618 <HAL_TIM_PWM_MspInit+0xb8>)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim15_ch1_up_trig_com);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	4a09      	ldr	r2, [pc, #36]	; (8009618 <HAL_TIM_PWM_MspInit+0xb8>)
 80095f2:	639a      	str	r2, [r3, #56]	; 0x38
 80095f4:	4a08      	ldr	r2, [pc, #32]	; (8009618 <HAL_TIM_PWM_MspInit+0xb8>)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim15_ch1_up_trig_com);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	4a06      	ldr	r2, [pc, #24]	; (8009618 <HAL_TIM_PWM_MspInit+0xb8>)
 80095fe:	635a      	str	r2, [r3, #52]	; 0x34
 8009600:	4a05      	ldr	r2, [pc, #20]	; (8009618 <HAL_TIM_PWM_MspInit+0xb8>)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8009606:	bf00      	nop
 8009608:	3710      	adds	r7, #16
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop
 8009610:	40014000 	.word	0x40014000
 8009614:	40021000 	.word	0x40021000
 8009618:	20002308 	.word	0x20002308
 800961c:	40020058 	.word	0x40020058

08009620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 1; iii++)
 8009626:	2300      	movs	r3, #0
 8009628:	71fb      	strb	r3, [r7, #7]
 800962a:	e005      	b.n	8009638 <NMI_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800962c:	2064      	movs	r0, #100	; 0x64
 800962e:	f7fb ff8d 	bl	800554c <HAL_Delay>
        for (uint8_t iii = 0; iii < 1; iii++)
 8009632:	79fb      	ldrb	r3, [r7, #7]
 8009634:	3301      	adds	r3, #1
 8009636:	71fb      	strb	r3, [r7, #7]
 8009638:	79fb      	ldrb	r3, [r7, #7]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d0f6      	beq.n	800962c <NMI_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800963e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8009642:	f7fb ff83 	bl	800554c <HAL_Delay>
        for (uint8_t iii = 0; iii < 1; iii++)
 8009646:	e7ee      	b.n	8009626 <NMI_Handler+0x6>

08009648 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 2; iii++)
 800964e:	2300      	movs	r3, #0
 8009650:	71fb      	strb	r3, [r7, #7]
 8009652:	e005      	b.n	8009660 <HardFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 8009654:	2064      	movs	r0, #100	; 0x64
 8009656:	f7fb ff79 	bl	800554c <HAL_Delay>
        for (uint8_t iii = 0; iii < 2; iii++)
 800965a:	79fb      	ldrb	r3, [r7, #7]
 800965c:	3301      	adds	r3, #1
 800965e:	71fb      	strb	r3, [r7, #7]
 8009660:	79fb      	ldrb	r3, [r7, #7]
 8009662:	2b01      	cmp	r3, #1
 8009664:	d9f6      	bls.n	8009654 <HardFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 8009666:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800966a:	f7fb ff6f 	bl	800554c <HAL_Delay>
        for (uint8_t iii = 0; iii < 2; iii++)
 800966e:	e7ee      	b.n	800964e <HardFault_Handler+0x6>

08009670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 3; iii++)
 8009676:	2300      	movs	r3, #0
 8009678:	71fb      	strb	r3, [r7, #7]
 800967a:	e005      	b.n	8009688 <MemManage_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800967c:	2064      	movs	r0, #100	; 0x64
 800967e:	f7fb ff65 	bl	800554c <HAL_Delay>
        for (uint8_t iii = 0; iii < 3; iii++)
 8009682:	79fb      	ldrb	r3, [r7, #7]
 8009684:	3301      	adds	r3, #1
 8009686:	71fb      	strb	r3, [r7, #7]
 8009688:	79fb      	ldrb	r3, [r7, #7]
 800968a:	2b02      	cmp	r3, #2
 800968c:	d9f6      	bls.n	800967c <MemManage_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800968e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8009692:	f7fb ff5b 	bl	800554c <HAL_Delay>
        for (uint8_t iii = 0; iii < 3; iii++)
 8009696:	e7ee      	b.n	8009676 <MemManage_Handler+0x6>

08009698 <BusFault_Handler>:
}
/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 4; iii++)
 800969e:	2300      	movs	r3, #0
 80096a0:	71fb      	strb	r3, [r7, #7]
 80096a2:	e005      	b.n	80096b0 <BusFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 80096a4:	2064      	movs	r0, #100	; 0x64
 80096a6:	f7fb ff51 	bl	800554c <HAL_Delay>
        for (uint8_t iii = 0; iii < 4; iii++)
 80096aa:	79fb      	ldrb	r3, [r7, #7]
 80096ac:	3301      	adds	r3, #1
 80096ae:	71fb      	strb	r3, [r7, #7]
 80096b0:	79fb      	ldrb	r3, [r7, #7]
 80096b2:	2b03      	cmp	r3, #3
 80096b4:	d9f6      	bls.n	80096a4 <BusFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 80096b6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80096ba:	f7fb ff47 	bl	800554c <HAL_Delay>
        for (uint8_t iii = 0; iii < 4; iii++)
 80096be:	e7ee      	b.n	800969e <BusFault_Handler+0x6>

080096c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 5; iii++)
 80096c6:	2300      	movs	r3, #0
 80096c8:	71fb      	strb	r3, [r7, #7]
 80096ca:	e005      	b.n	80096d8 <UsageFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 80096cc:	2064      	movs	r0, #100	; 0x64
 80096ce:	f7fb ff3d 	bl	800554c <HAL_Delay>
        for (uint8_t iii = 0; iii < 5; iii++)
 80096d2:	79fb      	ldrb	r3, [r7, #7]
 80096d4:	3301      	adds	r3, #1
 80096d6:	71fb      	strb	r3, [r7, #7]
 80096d8:	79fb      	ldrb	r3, [r7, #7]
 80096da:	2b04      	cmp	r3, #4
 80096dc:	d9f6      	bls.n	80096cc <UsageFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 80096de:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80096e2:	f7fb ff33 	bl	800554c <HAL_Delay>
        for (uint8_t iii = 0; iii < 5; iii++)
 80096e6:	e7ee      	b.n	80096c6 <UsageFault_Handler+0x6>

080096e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80096e8:	b480      	push	{r7}
 80096ea:	af00      	add	r7, sp, #0
}
 80096ec:	bf00      	nop
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr
	...

080096f8 <EXTI0_IRQHandler>:
volatile uint32_t d_passes = 0;
/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80096f8:	b590      	push	{r4, r7, lr}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af02      	add	r7, sp, #8
    // D is pause
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_D_PIN;
 80096fe:	2301      	movs	r3, #1
 8009700:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_D;
 8009702:	2303      	movs	r3, #3
 8009704:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_D_IRQ;
 8009706:	2306      	movs	r3, #6
 8009708:	713b      	strb	r3, [r7, #4]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800970a:	88fb      	ldrh	r3, [r7, #6]
 800970c:	4618      	mov	r0, r3
 800970e:	f7fc fcbb 	bl	8006088 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 8009712:	797a      	ldrb	r2, [r7, #5]
 8009714:	797b      	ldrb	r3, [r7, #5]
 8009716:	4910      	ldr	r1, [pc, #64]	; (8009758 <EXTI0_IRQHandler+0x60>)
 8009718:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800971c:	490e      	ldr	r1, [pc, #56]	; (8009758 <EXTI0_IRQHandler+0x60>)
 800971e:	00db      	lsls	r3, r3, #3
 8009720:	440b      	add	r3, r1
 8009722:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 8009724:	797c      	ldrb	r4, [r7, #5]
 8009726:	f7fa f9db 	bl	8003ae0 <xTaskGetTickCountFromISR>
 800972a:	4603      	mov	r3, r0
 800972c:	4a0a      	ldr	r2, [pc, #40]	; (8009758 <EXTI0_IRQHandler+0x60>)
 800972e:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 8009732:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8009736:	4618      	mov	r0, r3
 8009738:	f7fc f879 	bl	800582e <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800973c:	4b07      	ldr	r3, [pc, #28]	; (800975c <EXTI0_IRQHandler+0x64>)
 800973e:	6818      	ldr	r0, [r3, #0]
 8009740:	7979      	ldrb	r1, [r7, #5]
 8009742:	463b      	mov	r3, r7
 8009744:	9300      	str	r3, [sp, #0]
 8009746:	2300      	movs	r3, #0
 8009748:	2203      	movs	r2, #3
 800974a:	f7fa fde7 	bl	800431c <xTaskGenericNotifyFromISR>
}
 800974e:	bf00      	nop
 8009750:	370c      	adds	r7, #12
 8009752:	46bd      	mov	sp, r7
 8009754:	bd90      	pop	{r4, r7, pc}
 8009756:	bf00      	nop
 8009758:	200008e4 	.word	0x200008e4
 800975c:	20002c14 	.word	0x20002c14

08009760 <EXTI2_IRQHandler>:
uint32_t g_dbg_b_interrupt_count = 0;
/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8009760:	b590      	push	{r4, r7, lr}
 8009762:	b085      	sub	sp, #20
 8009764:	af02      	add	r7, sp, #8
    // A is speed
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_A_PIN;
 8009766:	2304      	movs	r3, #4
 8009768:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_A;
 800976a:	2300      	movs	r3, #0
 800976c:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_A_IRQ;
 800976e:	2308      	movs	r3, #8
 8009770:	713b      	strb	r3, [r7, #4]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 8009772:	88fb      	ldrh	r3, [r7, #6]
 8009774:	4618      	mov	r0, r3
 8009776:	f7fc fc87 	bl	8006088 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800977a:	797a      	ldrb	r2, [r7, #5]
 800977c:	797b      	ldrb	r3, [r7, #5]
 800977e:	4910      	ldr	r1, [pc, #64]	; (80097c0 <EXTI2_IRQHandler+0x60>)
 8009780:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 8009784:	490e      	ldr	r1, [pc, #56]	; (80097c0 <EXTI2_IRQHandler+0x60>)
 8009786:	00db      	lsls	r3, r3, #3
 8009788:	440b      	add	r3, r1
 800978a:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800978c:	797c      	ldrb	r4, [r7, #5]
 800978e:	f7fa f9a7 	bl	8003ae0 <xTaskGetTickCountFromISR>
 8009792:	4603      	mov	r3, r0
 8009794:	4a0a      	ldr	r2, [pc, #40]	; (80097c0 <EXTI2_IRQHandler+0x60>)
 8009796:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800979a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800979e:	4618      	mov	r0, r3
 80097a0:	f7fc f845 	bl	800582e <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 80097a4:	4b07      	ldr	r3, [pc, #28]	; (80097c4 <EXTI2_IRQHandler+0x64>)
 80097a6:	6818      	ldr	r0, [r3, #0]
 80097a8:	7979      	ldrb	r1, [r7, #5]
 80097aa:	463b      	mov	r3, r7
 80097ac:	9300      	str	r3, [sp, #0]
 80097ae:	2300      	movs	r3, #0
 80097b0:	2203      	movs	r2, #3
 80097b2:	f7fa fdb3 	bl	800431c <xTaskGenericNotifyFromISR>
}
 80097b6:	bf00      	nop
 80097b8:	370c      	adds	r7, #12
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd90      	pop	{r4, r7, pc}
 80097be:	bf00      	nop
 80097c0:	200008e4 	.word	0x200008e4
 80097c4:	20002c14 	.word	0x20002c14

080097c8 <EXTI15_10_IRQHandler>:
volatile uint32_t b_passes = 0;
/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80097c8:	b590      	push	{r4, r7, lr}
 80097ca:	b085      	sub	sp, #20
 80097cc:	af02      	add	r7, sp, #8
    // B is state
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_B_PIN;
 80097ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80097d2:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_B;
 80097d4:	2301      	movs	r3, #1
 80097d6:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_B_IRQ;
 80097d8:	2328      	movs	r3, #40	; 0x28
 80097da:	713b      	strb	r3, [r7, #4]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 80097dc:	88fb      	ldrh	r3, [r7, #6]
 80097de:	4618      	mov	r0, r3
 80097e0:	f7fc fc52 	bl	8006088 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 80097e4:	797a      	ldrb	r2, [r7, #5]
 80097e6:	797b      	ldrb	r3, [r7, #5]
 80097e8:	490f      	ldr	r1, [pc, #60]	; (8009828 <EXTI15_10_IRQHandler+0x60>)
 80097ea:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 80097ee:	490e      	ldr	r1, [pc, #56]	; (8009828 <EXTI15_10_IRQHandler+0x60>)
 80097f0:	00db      	lsls	r3, r3, #3
 80097f2:	440b      	add	r3, r1
 80097f4:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 80097f6:	797c      	ldrb	r4, [r7, #5]
 80097f8:	f7fa f972 	bl	8003ae0 <xTaskGetTickCountFromISR>
 80097fc:	4603      	mov	r3, r0
 80097fe:	4a0a      	ldr	r2, [pc, #40]	; (8009828 <EXTI15_10_IRQHandler+0x60>)
 8009800:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 8009804:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8009808:	4618      	mov	r0, r3
 800980a:	f7fc f810 	bl	800582e <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800980e:	4b07      	ldr	r3, [pc, #28]	; (800982c <EXTI15_10_IRQHandler+0x64>)
 8009810:	6818      	ldr	r0, [r3, #0]
 8009812:	7979      	ldrb	r1, [r7, #5]
 8009814:	463b      	mov	r3, r7
 8009816:	9300      	str	r3, [sp, #0]
 8009818:	2300      	movs	r3, #0
 800981a:	2203      	movs	r2, #3
 800981c:	f7fa fd7e 	bl	800431c <xTaskGenericNotifyFromISR>
}
 8009820:	bf00      	nop
 8009822:	370c      	adds	r7, #12
 8009824:	46bd      	mov	sp, r7
 8009826:	bd90      	pop	{r4, r7, pc}
 8009828:	200008e4 	.word	0x200008e4
 800982c:	20002c14 	.word	0x20002c14

08009830 <EXTI9_5_IRQHandler>:
volatile uint32_t c_passes = 0;
/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8009830:	b590      	push	{r4, r7, lr}
 8009832:	b085      	sub	sp, #20
 8009834:	af02      	add	r7, sp, #8
    // C is color
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_C_PIN;
 8009836:	2320      	movs	r3, #32
 8009838:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_C;
 800983a:	2302      	movs	r3, #2
 800983c:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_C_IRQ;
 800983e:	2317      	movs	r3, #23
 8009840:	713b      	strb	r3, [r7, #4]
    // add button irq here..
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 8009842:	88fb      	ldrh	r3, [r7, #6]
 8009844:	4618      	mov	r0, r3
 8009846:	f7fc fc1f 	bl	8006088 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800984a:	797a      	ldrb	r2, [r7, #5]
 800984c:	797b      	ldrb	r3, [r7, #5]
 800984e:	4910      	ldr	r1, [pc, #64]	; (8009890 <EXTI9_5_IRQHandler+0x60>)
 8009850:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 8009854:	490e      	ldr	r1, [pc, #56]	; (8009890 <EXTI9_5_IRQHandler+0x60>)
 8009856:	00db      	lsls	r3, r3, #3
 8009858:	440b      	add	r3, r1
 800985a:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800985c:	797c      	ldrb	r4, [r7, #5]
 800985e:	f7fa f93f 	bl	8003ae0 <xTaskGetTickCountFromISR>
 8009862:	4603      	mov	r3, r0
 8009864:	4a0a      	ldr	r2, [pc, #40]	; (8009890 <EXTI9_5_IRQHandler+0x60>)
 8009866:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800986a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800986e:	4618      	mov	r0, r3
 8009870:	f7fb ffdd 	bl	800582e <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8009874:	4b07      	ldr	r3, [pc, #28]	; (8009894 <EXTI9_5_IRQHandler+0x64>)
 8009876:	6818      	ldr	r0, [r3, #0]
 8009878:	7979      	ldrb	r1, [r7, #5]
 800987a:	463b      	mov	r3, r7
 800987c:	9300      	str	r3, [sp, #0]
 800987e:	2300      	movs	r3, #0
 8009880:	2203      	movs	r2, #3
 8009882:	f7fa fd4b 	bl	800431c <xTaskGenericNotifyFromISR>
}
 8009886:	bf00      	nop
 8009888:	370c      	adds	r7, #12
 800988a:	46bd      	mov	sp, r7
 800988c:	bd90      	pop	{r4, r7, pc}
 800988e:	bf00      	nop
 8009890:	200008e4 	.word	0x200008e4
 8009894:	20002c14 	.word	0x20002c14

08009898 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009898:	b480      	push	{r7}
 800989a:	b083      	sub	sp, #12
 800989c:	af00      	add	r7, sp, #0
 800989e:	4603      	mov	r3, r0
 80098a0:	80fb      	strh	r3, [r7, #6]

}
 80098a2:	bf00      	nop
 80098a4:	370c      	adds	r7, #12
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr

080098ae <HAL_DMA_CMPLT_CALLBACK>:


void HAL_DMA_CMPLT_CALLBACK(DMA_HandleTypeDef *hdma)
{
 80098ae:	b480      	push	{r7}
 80098b0:	b083      	sub	sp, #12
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
    while(1);
 80098b6:	e7fe      	b.n	80098b6 <HAL_DMA_CMPLT_CALLBACK+0x8>

080098b8 <HAL_TIM_PWM_PulseFinishedCallback>:
bool gb_dma_cmplt_strip_1 = true;
bool gb_dma_cmplt_strip_2 = true;
bool gb_dma_cmplt_strip_3 = true;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
    switch (htim->Channel)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	7f1b      	ldrb	r3, [r3, #28]
 80098c4:	2b04      	cmp	r3, #4
 80098c6:	d016      	beq.n	80098f6 <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
 80098c8:	2b04      	cmp	r3, #4
 80098ca:	dc1c      	bgt.n	8009906 <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d002      	beq.n	80098d6 <HAL_TIM_PWM_PulseFinishedCallback+0x1e>
 80098d0:	2b02      	cmp	r3, #2
 80098d2:	d008      	beq.n	80098e6 <HAL_TIM_PWM_PulseFinishedCallback+0x2e>
        case HAL_TIM_ACTIVE_CHANNEL_3:
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
            gb_dma_cmplt_strip_3 = true;
        break;
        default:
        break;
 80098d4:	e017      	b.n	8009906 <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 80098d6:	2100      	movs	r1, #0
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f7fe f993 	bl	8007c04 <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_1 = true;
 80098de:	4b0c      	ldr	r3, [pc, #48]	; (8009910 <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 80098e0:	2201      	movs	r2, #1
 80098e2:	701a      	strb	r2, [r3, #0]
        break;
 80098e4:	e010      	b.n	8009908 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_2);
 80098e6:	2104      	movs	r1, #4
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f7fe f98b 	bl	8007c04 <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_2 = true;
 80098ee:	4b09      	ldr	r3, [pc, #36]	; (8009914 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 80098f0:	2201      	movs	r2, #1
 80098f2:	701a      	strb	r2, [r3, #0]
        break;
 80098f4:	e008      	b.n	8009908 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
 80098f6:	2108      	movs	r1, #8
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f7fe f983 	bl	8007c04 <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_3 = true;
 80098fe:	4b06      	ldr	r3, [pc, #24]	; (8009918 <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 8009900:	2201      	movs	r2, #1
 8009902:	701a      	strb	r2, [r3, #0]
        break;
 8009904:	e000      	b.n	8009908 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
        break;
 8009906:	bf00      	nop
    }
}
 8009908:	bf00      	nop
 800990a:	3708      	adds	r7, #8
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}
 8009910:	20000069 	.word	0x20000069
 8009914:	2000006a 	.word	0x2000006a
 8009918:	2000006b 	.word	0x2000006b

0800991c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8009920:	4802      	ldr	r0, [pc, #8]	; (800992c <DMA1_Channel2_IRQHandler+0x10>)
 8009922:	f7fc f8f8 	bl	8005b16 <HAL_DMA_IRQHandler>
}
 8009926:	bf00      	nop
 8009928:	bd80      	pop	{r7, pc}
 800992a:	bf00      	nop
 800992c:	20002230 	.word	0x20002230

08009930 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8009934:	4802      	ldr	r0, [pc, #8]	; (8009940 <DMA1_Channel3_IRQHandler+0x10>)
 8009936:	f7fc f8ee 	bl	8005b16 <HAL_DMA_IRQHandler>
}
 800993a:	bf00      	nop
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	20002278 	.word	0x20002278

08009944 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim15_ch1_up_trig_com);
 8009948:	4802      	ldr	r0, [pc, #8]	; (8009954 <DMA1_Channel5_IRQHandler+0x10>)
 800994a:	f7fc f8e4 	bl	8005b16 <HAL_DMA_IRQHandler>
}
 800994e:	bf00      	nop
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop
 8009954:	20002308 	.word	0x20002308

08009958 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim16_ch1_up);
 800995c:	4802      	ldr	r0, [pc, #8]	; (8009968 <DMA1_Channel6_IRQHandler+0x10>)
 800995e:	f7fc f8da 	bl	8005b16 <HAL_DMA_IRQHandler>
}
 8009962:	bf00      	nop
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	20002350 	.word	0x20002350

0800996c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8009970:	4802      	ldr	r0, [pc, #8]	; (800997c <DMA1_Channel7_IRQHandler+0x10>)
 8009972:	f7fc f8d0 	bl	8005b16 <HAL_DMA_IRQHandler>
}
 8009976:	bf00      	nop
 8009978:	bd80      	pop	{r7, pc}
 800997a:	bf00      	nop
 800997c:	200022c0 	.word	0x200022c0

08009980 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009980:	b480      	push	{r7}
 8009982:	af00      	add	r7, sp, #0
	return 1;
 8009984:	2301      	movs	r3, #1
}
 8009986:	4618      	mov	r0, r3
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <_kill>:

int _kill(int pid, int sig)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800999a:	f000 fa85 	bl	8009ea8 <__errno>
 800999e:	4603      	mov	r3, r0
 80099a0:	2216      	movs	r2, #22
 80099a2:	601a      	str	r2, [r3, #0]
	return -1;
 80099a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3708      	adds	r7, #8
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <_exit>:

void _exit (int status)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80099b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f7ff ffe7 	bl	8009990 <_kill>
	while (1) {}		/* Make sure we hang here */
 80099c2:	e7fe      	b.n	80099c2 <_exit+0x12>

080099c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b086      	sub	sp, #24
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80099d0:	2300      	movs	r3, #0
 80099d2:	617b      	str	r3, [r7, #20]
 80099d4:	e00a      	b.n	80099ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80099d6:	f3af 8000 	nop.w
 80099da:	4601      	mov	r1, r0
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	1c5a      	adds	r2, r3, #1
 80099e0:	60ba      	str	r2, [r7, #8]
 80099e2:	b2ca      	uxtb	r2, r1
 80099e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	3301      	adds	r3, #1
 80099ea:	617b      	str	r3, [r7, #20]
 80099ec:	697a      	ldr	r2, [r7, #20]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	429a      	cmp	r2, r3
 80099f2:	dbf0      	blt.n	80099d6 <_read+0x12>
	}

return len;
 80099f4:	687b      	ldr	r3, [r7, #4]
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3718      	adds	r7, #24
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}

080099fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80099fe:	b580      	push	{r7, lr}
 8009a00:	b086      	sub	sp, #24
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	60f8      	str	r0, [r7, #12]
 8009a06:	60b9      	str	r1, [r7, #8]
 8009a08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	617b      	str	r3, [r7, #20]
 8009a0e:	e009      	b.n	8009a24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	1c5a      	adds	r2, r3, #1
 8009a14:	60ba      	str	r2, [r7, #8]
 8009a16:	781b      	ldrb	r3, [r3, #0]
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	3301      	adds	r3, #1
 8009a22:	617b      	str	r3, [r7, #20]
 8009a24:	697a      	ldr	r2, [r7, #20]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	dbf1      	blt.n	8009a10 <_write+0x12>
	}
	return len;
 8009a2c:	687b      	ldr	r3, [r7, #4]
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3718      	adds	r7, #24
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}

08009a36 <_close>:

int _close(int file)
{
 8009a36:	b480      	push	{r7}
 8009a38:	b083      	sub	sp, #12
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
	return -1;
 8009a3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	370c      	adds	r7, #12
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr

08009a4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009a4e:	b480      	push	{r7}
 8009a50:	b083      	sub	sp, #12
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
 8009a56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009a5e:	605a      	str	r2, [r3, #4]
	return 0;
 8009a60:	2300      	movs	r3, #0
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	370c      	adds	r7, #12
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr

08009a6e <_isatty>:

int _isatty(int file)
{
 8009a6e:	b480      	push	{r7}
 8009a70:	b083      	sub	sp, #12
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
	return 1;
 8009a76:	2301      	movs	r3, #1
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	370c      	adds	r7, #12
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr

08009a84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b085      	sub	sp, #20
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	60f8      	str	r0, [r7, #12]
 8009a8c:	60b9      	str	r1, [r7, #8]
 8009a8e:	607a      	str	r2, [r7, #4]
	return 0;
 8009a90:	2300      	movs	r3, #0
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3714      	adds	r7, #20
 8009a96:	46bd      	mov	sp, r7
 8009a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9c:	4770      	bx	lr
	...

08009aa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b086      	sub	sp, #24
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009aa8:	4a14      	ldr	r2, [pc, #80]	; (8009afc <_sbrk+0x5c>)
 8009aaa:	4b15      	ldr	r3, [pc, #84]	; (8009b00 <_sbrk+0x60>)
 8009aac:	1ad3      	subs	r3, r2, r3
 8009aae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009ab4:	4b13      	ldr	r3, [pc, #76]	; (8009b04 <_sbrk+0x64>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d102      	bne.n	8009ac2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009abc:	4b11      	ldr	r3, [pc, #68]	; (8009b04 <_sbrk+0x64>)
 8009abe:	4a12      	ldr	r2, [pc, #72]	; (8009b08 <_sbrk+0x68>)
 8009ac0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009ac2:	4b10      	ldr	r3, [pc, #64]	; (8009b04 <_sbrk+0x64>)
 8009ac4:	681a      	ldr	r2, [r3, #0]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	4413      	add	r3, r2
 8009aca:	693a      	ldr	r2, [r7, #16]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d207      	bcs.n	8009ae0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009ad0:	f000 f9ea 	bl	8009ea8 <__errno>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	220c      	movs	r2, #12
 8009ad8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009ada:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ade:	e009      	b.n	8009af4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009ae0:	4b08      	ldr	r3, [pc, #32]	; (8009b04 <_sbrk+0x64>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009ae6:	4b07      	ldr	r3, [pc, #28]	; (8009b04 <_sbrk+0x64>)
 8009ae8:	681a      	ldr	r2, [r3, #0]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	4413      	add	r3, r2
 8009aee:	4a05      	ldr	r2, [pc, #20]	; (8009b04 <_sbrk+0x64>)
 8009af0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009af2:	68fb      	ldr	r3, [r7, #12]
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3718      	adds	r7, #24
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	20010000 	.word	0x20010000
 8009b00:	00000400 	.word	0x00000400
 8009b04:	20002408 	.word	0x20002408
 8009b08:	20003ce8 	.word	0x20003ce8

08009b0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8009b10:	4b06      	ldr	r3, [pc, #24]	; (8009b2c <SystemInit+0x20>)
 8009b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b16:	4a05      	ldr	r2, [pc, #20]	; (8009b2c <SystemInit+0x20>)
 8009b18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009b1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8009b20:	bf00      	nop
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr
 8009b2a:	bf00      	nop
 8009b2c:	e000ed00 	.word	0xe000ed00

08009b30 <flash_info_animation_enabled>:

flash_info_block_t  g_flash_info_block;


bool flash_info_animation_enabled(led_state_e animation)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b085      	sub	sp, #20
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	4603      	mov	r3, r0
 8009b38:	71fb      	strb	r3, [r7, #7]
    bool return_val = false;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	73fb      	strb	r3, [r7, #15]
    switch (animation)
 8009b3e:	79fb      	ldrb	r3, [r7, #7]
 8009b40:	2b0b      	cmp	r3, #11
 8009b42:	f200 8089 	bhi.w	8009c58 <flash_info_animation_enabled+0x128>
 8009b46:	a201      	add	r2, pc, #4	; (adr r2, 8009b4c <flash_info_animation_enabled+0x1c>)
 8009b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b4c:	08009b7d 	.word	0x08009b7d
 8009b50:	08009b91 	.word	0x08009b91
 8009b54:	08009ba5 	.word	0x08009ba5
 8009b58:	08009bb9 	.word	0x08009bb9
 8009b5c:	08009bcd 	.word	0x08009bcd
 8009b60:	08009be1 	.word	0x08009be1
 8009b64:	08009bf5 	.word	0x08009bf5
 8009b68:	08009c09 	.word	0x08009c09
 8009b6c:	08009c1d 	.word	0x08009c1d
 8009b70:	08009c31 	.word	0x08009c31
 8009b74:	08009c59 	.word	0x08009c59
 8009b78:	08009c45 	.word	0x08009c45
    {
        case LED_STATE_SPELL:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.spell) return_val = true;
 8009b7c:	4b45      	ldr	r3, [pc, #276]	; (8009c94 <flash_info_animation_enabled+0x164>)
 8009b7e:	7adb      	ldrb	r3, [r3, #11]
 8009b80:	f003 0301 	and.w	r3, r3, #1
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d068      	beq.n	8009c5c <flash_info_animation_enabled+0x12c>
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	73fb      	strb	r3, [r7, #15]
        break;
 8009b8e:	e065      	b.n	8009c5c <flash_info_animation_enabled+0x12c>
        case LED_STATE_WHITE_COLOR:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.white) return_val = true;
 8009b90:	4b40      	ldr	r3, [pc, #256]	; (8009c94 <flash_info_animation_enabled+0x164>)
 8009b92:	7adb      	ldrb	r3, [r3, #11]
 8009b94:	f003 0302 	and.w	r3, r3, #2
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d060      	beq.n	8009c60 <flash_info_animation_enabled+0x130>
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	73fb      	strb	r3, [r7, #15]
        break;
 8009ba2:	e05d      	b.n	8009c60 <flash_info_animation_enabled+0x130>
        case LED_STATE_SOLID_COLOR:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.solid) return_val = true;
 8009ba4:	4b3b      	ldr	r3, [pc, #236]	; (8009c94 <flash_info_animation_enabled+0x164>)
 8009ba6:	7adb      	ldrb	r3, [r3, #11]
 8009ba8:	f003 0304 	and.w	r3, r3, #4
 8009bac:	b2db      	uxtb	r3, r3
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d058      	beq.n	8009c64 <flash_info_animation_enabled+0x134>
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	73fb      	strb	r3, [r7, #15]
        break;
 8009bb6:	e055      	b.n	8009c64 <flash_info_animation_enabled+0x134>
        case LED_STATE_SPARKLE_NO_FILL:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.sparkle_no_fill) return_val = true;
 8009bb8:	4b36      	ldr	r3, [pc, #216]	; (8009c94 <flash_info_animation_enabled+0x164>)
 8009bba:	7adb      	ldrb	r3, [r3, #11]
 8009bbc:	f003 0310 	and.w	r3, r3, #16
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d050      	beq.n	8009c68 <flash_info_animation_enabled+0x138>
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	73fb      	strb	r3, [r7, #15]
        break;
 8009bca:	e04d      	b.n	8009c68 <flash_info_animation_enabled+0x138>
        case LED_STATE_SPARKLE_FILL:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.sparkle) return_val = true;
 8009bcc:	4b31      	ldr	r3, [pc, #196]	; (8009c94 <flash_info_animation_enabled+0x164>)
 8009bce:	7adb      	ldrb	r3, [r3, #11]
 8009bd0:	f003 0308 	and.w	r3, r3, #8
 8009bd4:	b2db      	uxtb	r3, r3
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d048      	beq.n	8009c6c <flash_info_animation_enabled+0x13c>
 8009bda:	2301      	movs	r3, #1
 8009bdc:	73fb      	strb	r3, [r7, #15]
        break;
 8009bde:	e045      	b.n	8009c6c <flash_info_animation_enabled+0x13c>
        case LED_STATE_RAINBOW_CYCLE:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.rainbow) return_val = true;
 8009be0:	4b2c      	ldr	r3, [pc, #176]	; (8009c94 <flash_info_animation_enabled+0x164>)
 8009be2:	7adb      	ldrb	r3, [r3, #11]
 8009be4:	f003 0320 	and.w	r3, r3, #32
 8009be8:	b2db      	uxtb	r3, r3
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d040      	beq.n	8009c70 <flash_info_animation_enabled+0x140>
 8009bee:	2301      	movs	r3, #1
 8009bf0:	73fb      	strb	r3, [r7, #15]
        break;
 8009bf2:	e03d      	b.n	8009c70 <flash_info_animation_enabled+0x140>
        case LED_STATE_THEATER_CHASE:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.chase) return_val = true;
 8009bf4:	4b27      	ldr	r3, [pc, #156]	; (8009c94 <flash_info_animation_enabled+0x164>)
 8009bf6:	7adb      	ldrb	r3, [r3, #11]
 8009bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bfc:	b2db      	uxtb	r3, r3
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d038      	beq.n	8009c74 <flash_info_animation_enabled+0x144>
 8009c02:	2301      	movs	r3, #1
 8009c04:	73fb      	strb	r3, [r7, #15]
        break;
 8009c06:	e035      	b.n	8009c74 <flash_info_animation_enabled+0x144>
        case LED_STATE_THEATER_CHASE_RAINBOW:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.chase_rainbow) return_val = true;
 8009c08:	4b22      	ldr	r3, [pc, #136]	; (8009c94 <flash_info_animation_enabled+0x164>)
 8009c0a:	7adb      	ldrb	r3, [r3, #11]
 8009c0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d030      	beq.n	8009c78 <flash_info_animation_enabled+0x148>
 8009c16:	2301      	movs	r3, #1
 8009c18:	73fb      	strb	r3, [r7, #15]
        break;
 8009c1a:	e02d      	b.n	8009c78 <flash_info_animation_enabled+0x148>
        case LED_STATE_FADE_IN_AND_OUT:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.fade) return_val = true;
 8009c1c:	4b1d      	ldr	r3, [pc, #116]	; (8009c94 <flash_info_animation_enabled+0x164>)
 8009c1e:	7b1b      	ldrb	r3, [r3, #12]
 8009c20:	f003 0301 	and.w	r3, r3, #1
 8009c24:	b2db      	uxtb	r3, r3
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d028      	beq.n	8009c7c <flash_info_animation_enabled+0x14c>
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	73fb      	strb	r3, [r7, #15]
        break;
 8009c2e:	e025      	b.n	8009c7c <flash_info_animation_enabled+0x14c>
        case LED_STATE_TWINKLE:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.twinkle) return_val = true;
 8009c30:	4b18      	ldr	r3, [pc, #96]	; (8009c94 <flash_info_animation_enabled+0x164>)
 8009c32:	7b1b      	ldrb	r3, [r3, #12]
 8009c34:	f003 0302 	and.w	r3, r3, #2
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d020      	beq.n	8009c80 <flash_info_animation_enabled+0x150>
 8009c3e:	2301      	movs	r3, #1
 8009c40:	73fb      	strb	r3, [r7, #15]
        break;
 8009c42:	e01d      	b.n	8009c80 <flash_info_animation_enabled+0x150>
        case LED_STATE_SRW_DEBUG:
            if (g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.white) return_val = true;
 8009c44:	4b13      	ldr	r3, [pc, #76]	; (8009c94 <flash_info_animation_enabled+0x164>)
 8009c46:	7adb      	ldrb	r3, [r3, #11]
 8009c48:	f003 0302 	and.w	r3, r3, #2
 8009c4c:	b2db      	uxtb	r3, r3
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d018      	beq.n	8009c84 <flash_info_animation_enabled+0x154>
 8009c52:	2301      	movs	r3, #1
 8009c54:	73fb      	strb	r3, [r7, #15]
        break;
 8009c56:	e015      	b.n	8009c84 <flash_info_animation_enabled+0x154>
        default:
        break;
 8009c58:	bf00      	nop
 8009c5a:	e014      	b.n	8009c86 <flash_info_animation_enabled+0x156>
        break;
 8009c5c:	bf00      	nop
 8009c5e:	e012      	b.n	8009c86 <flash_info_animation_enabled+0x156>
        break;
 8009c60:	bf00      	nop
 8009c62:	e010      	b.n	8009c86 <flash_info_animation_enabled+0x156>
        break;
 8009c64:	bf00      	nop
 8009c66:	e00e      	b.n	8009c86 <flash_info_animation_enabled+0x156>
        break;
 8009c68:	bf00      	nop
 8009c6a:	e00c      	b.n	8009c86 <flash_info_animation_enabled+0x156>
        break;
 8009c6c:	bf00      	nop
 8009c6e:	e00a      	b.n	8009c86 <flash_info_animation_enabled+0x156>
        break;
 8009c70:	bf00      	nop
 8009c72:	e008      	b.n	8009c86 <flash_info_animation_enabled+0x156>
        break;
 8009c74:	bf00      	nop
 8009c76:	e006      	b.n	8009c86 <flash_info_animation_enabled+0x156>
        break;
 8009c78:	bf00      	nop
 8009c7a:	e004      	b.n	8009c86 <flash_info_animation_enabled+0x156>
        break;
 8009c7c:	bf00      	nop
 8009c7e:	e002      	b.n	8009c86 <flash_info_animation_enabled+0x156>
        break;
 8009c80:	bf00      	nop
 8009c82:	e000      	b.n	8009c86 <flash_info_animation_enabled+0x156>
        break;
 8009c84:	bf00      	nop
    }
    return return_val;
 8009c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3714      	adds	r7, #20
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr
 8009c94:	2000240c 	.word	0x2000240c

08009c98 <flash_info_block_init>:


void flash_info_block_init(void)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	af00      	add	r7, sp, #0
    g_flash_info_block.flash_info_data.uuid.data[0] = HAL_GetUIDw0();
 8009c9c:	f7fb fc7a 	bl	8005594 <HAL_GetUIDw0>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	4a32      	ldr	r2, [pc, #200]	; (8009d6c <flash_info_block_init+0xd4>)
 8009ca4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    g_flash_info_block.flash_info_data.uuid.data[1] = HAL_GetUIDw1();
 8009ca8:	f7fb fc80 	bl	80055ac <HAL_GetUIDw1>
 8009cac:	4603      	mov	r3, r0
 8009cae:	4a2f      	ldr	r2, [pc, #188]	; (8009d6c <flash_info_block_init+0xd4>)
 8009cb0:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    g_flash_info_block.flash_info_data.uuid.data[2] = HAL_GetUIDw2();
 8009cb4:	f7fb fc86 	bl	80055c4 <HAL_GetUIDw2>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	4a2c      	ldr	r2, [pc, #176]	; (8009d6c <flash_info_block_init+0xd4>)
 8009cbc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    g_flash_info_block.flash_info_data.strip_info.num_strips = 1;
 8009cc0:	4b2a      	ldr	r3, [pc, #168]	; (8009d6c <flash_info_block_init+0xd4>)
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	701a      	strb	r2, [r3, #0]
    g_flash_info_block.flash_info_data.strip_info.strip_sync_animation = 1;
 8009cc6:	4b29      	ldr	r3, [pc, #164]	; (8009d6c <flash_info_block_init+0xd4>)
 8009cc8:	2201      	movs	r2, #1
 8009cca:	705a      	strb	r2, [r3, #1]
    g_flash_info_block.flash_info_data.strip_info.strip_length_one = 1;
 8009ccc:	4b27      	ldr	r3, [pc, #156]	; (8009d6c <flash_info_block_init+0xd4>)
 8009cce:	2201      	movs	r2, #1
 8009cd0:	805a      	strh	r2, [r3, #2]
    g_flash_info_block.flash_info_data.strip_info.strip_length_two = 1;
 8009cd2:	4b26      	ldr	r3, [pc, #152]	; (8009d6c <flash_info_block_init+0xd4>)
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	809a      	strh	r2, [r3, #4]
    g_flash_info_block.flash_info_data.strip_info.strip_length_three = 1;
 8009cd8:	4b24      	ldr	r3, [pc, #144]	; (8009d6c <flash_info_block_init+0xd4>)
 8009cda:	2201      	movs	r2, #1
 8009cdc:	80da      	strh	r2, [r3, #6]
    g_flash_info_block.flash_info_data.strip_info.strip_one_brightness = 1;
 8009cde:	4b23      	ldr	r3, [pc, #140]	; (8009d6c <flash_info_block_init+0xd4>)
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	721a      	strb	r2, [r3, #8]
    g_flash_info_block.flash_info_data.strip_info.strip_two_brightness = 1;
 8009ce4:	4b21      	ldr	r3, [pc, #132]	; (8009d6c <flash_info_block_init+0xd4>)
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	725a      	strb	r2, [r3, #9]
    g_flash_info_block.flash_info_data.strip_info.strip_three_brightness = 1;
 8009cea:	4b20      	ldr	r3, [pc, #128]	; (8009d6c <flash_info_block_init+0xd4>)
 8009cec:	2201      	movs	r2, #1
 8009cee:	729a      	strb	r2, [r3, #10]
    g_flash_info_block.flash_info_data.strip_info.strip_one_brightness = 1;
 8009cf0:	4b1e      	ldr	r3, [pc, #120]	; (8009d6c <flash_info_block_init+0xd4>)
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	721a      	strb	r2, [r3, #8]

    g_flash_info_block.flash_info_data.strip_info.strip_two_brightness = 1;
 8009cf6:	4b1d      	ldr	r3, [pc, #116]	; (8009d6c <flash_info_block_init+0xd4>)
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	725a      	strb	r2, [r3, #9]
    g_flash_info_block.flash_info_data.strip_info.strip_three_brightness = 1;
 8009cfc:	4b1b      	ldr	r3, [pc, #108]	; (8009d6c <flash_info_block_init+0xd4>)
 8009cfe:	2201      	movs	r2, #1
 8009d00:	729a      	strb	r2, [r3, #10]

    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.spell = 1;
 8009d02:	4a1a      	ldr	r2, [pc, #104]	; (8009d6c <flash_info_block_init+0xd4>)
 8009d04:	7ad3      	ldrb	r3, [r2, #11]
 8009d06:	f043 0301 	orr.w	r3, r3, #1
 8009d0a:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.white = 1;
 8009d0c:	4a17      	ldr	r2, [pc, #92]	; (8009d6c <flash_info_block_init+0xd4>)
 8009d0e:	7ad3      	ldrb	r3, [r2, #11]
 8009d10:	f043 0302 	orr.w	r3, r3, #2
 8009d14:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.solid = 1;
 8009d16:	4a15      	ldr	r2, [pc, #84]	; (8009d6c <flash_info_block_init+0xd4>)
 8009d18:	7ad3      	ldrb	r3, [r2, #11]
 8009d1a:	f043 0304 	orr.w	r3, r3, #4
 8009d1e:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.sparkle = 1;
 8009d20:	4a12      	ldr	r2, [pc, #72]	; (8009d6c <flash_info_block_init+0xd4>)
 8009d22:	7ad3      	ldrb	r3, [r2, #11]
 8009d24:	f043 0308 	orr.w	r3, r3, #8
 8009d28:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.sparkle_no_fill = 1;
 8009d2a:	4a10      	ldr	r2, [pc, #64]	; (8009d6c <flash_info_block_init+0xd4>)
 8009d2c:	7ad3      	ldrb	r3, [r2, #11]
 8009d2e:	f043 0310 	orr.w	r3, r3, #16
 8009d32:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.rainbow = 1;
 8009d34:	4a0d      	ldr	r2, [pc, #52]	; (8009d6c <flash_info_block_init+0xd4>)
 8009d36:	7ad3      	ldrb	r3, [r2, #11]
 8009d38:	f043 0320 	orr.w	r3, r3, #32
 8009d3c:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.chase = 1;
 8009d3e:	4a0b      	ldr	r2, [pc, #44]	; (8009d6c <flash_info_block_init+0xd4>)
 8009d40:	7ad3      	ldrb	r3, [r2, #11]
 8009d42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d46:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.chase_rainbow = 1;
 8009d48:	4a08      	ldr	r2, [pc, #32]	; (8009d6c <flash_info_block_init+0xd4>)
 8009d4a:	7ad3      	ldrb	r3, [r2, #11]
 8009d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d50:	72d3      	strb	r3, [r2, #11]

    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.fade = 1;
 8009d52:	4a06      	ldr	r2, [pc, #24]	; (8009d6c <flash_info_block_init+0xd4>)
 8009d54:	7b13      	ldrb	r3, [r2, #12]
 8009d56:	f043 0301 	orr.w	r3, r3, #1
 8009d5a:	7313      	strb	r3, [r2, #12]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.twinkle = 1;
 8009d5c:	4a03      	ldr	r2, [pc, #12]	; (8009d6c <flash_info_block_init+0xd4>)
 8009d5e:	7b13      	ldrb	r3, [r2, #12]
 8009d60:	f043 0302 	orr.w	r3, r3, #2
 8009d64:	7313      	strb	r3, [r2, #12]
    //g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.rsvd0 = 1; // future
    //g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.rsvd1 = 1; // future
    //g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.rsvd2 = 1; // future

    // need to write to flash!
}
 8009d66:	bf00      	nop
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	bf00      	nop
 8009d6c:	2000240c 	.word	0x2000240c

08009d70 <flash_info_init>:
}


uint32_t temp = 0;
void flash_info_init(void)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	af00      	add	r7, sp, #0
    temp = sizeof(flash_info_data_t);
 8009d74:	4b0d      	ldr	r3, [pc, #52]	; (8009dac <flash_info_init+0x3c>)
 8009d76:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8009d7a:	601a      	str	r2, [r3, #0]
    flash_info_block_init();
 8009d7c:	f7ff ff8c 	bl	8009c98 <flash_info_block_init>
    //flash_access_read_flash_info_sector(g_flash_info_block.flat_data_uint32);
    if ((UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[0]) &&
 8009d80:	4b0b      	ldr	r3, [pc, #44]	; (8009db0 <flash_info_init+0x40>)
 8009d82:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8009d86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d8a:	d10d      	bne.n	8009da8 <flash_info_init+0x38>
                    (UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[1]) &&
 8009d8c:	4b08      	ldr	r3, [pc, #32]	; (8009db0 <flash_info_init+0x40>)
 8009d8e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    if ((UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[0]) &&
 8009d92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d96:	d107      	bne.n	8009da8 <flash_info_init+0x38>
                    (UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[2]))
 8009d98:	4b05      	ldr	r3, [pc, #20]	; (8009db0 <flash_info_init+0x40>)
 8009d9a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
                    (UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[1]) &&
 8009d9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009da2:	d101      	bne.n	8009da8 <flash_info_init+0x38>
    {
        flash_info_block_init();
 8009da4:	f7ff ff78 	bl	8009c98 <flash_info_block_init>
    }
}
 8009da8:	bf00      	nop
 8009daa:	bd80      	pop	{r7, pc}
 8009dac:	20002c0c 	.word	0x20002c0c
 8009db0:	2000240c 	.word	0x2000240c

08009db4 <main>:
#include "task_create.h"
#include "animate_led.h"
#include "flash_info.h"

int main(void)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	af00      	add	r7, sp, #0
    board_init_common_board_init();
 8009db8:	f7ff f99e 	bl	80090f8 <board_init_common_board_init>
    flash_info_init();
 8009dbc:	f7ff ffd8 	bl	8009d70 <flash_info_init>
    task_create();
 8009dc0:	f000 f808 	bl	8009dd4 <task_create>
	//semaphore_create();
    reset_ws2812b();
 8009dc4:	f7f7 fcd0 	bl	8001768 <reset_ws2812b>
	osKernelStart();
 8009dc8:	f7f8 fcea 	bl	80027a0 <osKernelStart>
 8009dcc:	2300      	movs	r3, #0
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	bd80      	pop	{r7, pc}
	...

08009dd4 <task_create>:
	.priority = (osPriority_t) osPriorityNormal,
};


void task_create(void)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	af00      	add	r7, sp, #0
    osKernelInitialize();
 8009dd8:	f7f8 fcbe 	bl	8002758 <osKernelInitialize>
	g_button_press_handle = osThreadNew(task_button_press, NULL, &g_task_button_press_attributes);
 8009ddc:	4a0a      	ldr	r2, [pc, #40]	; (8009e08 <task_create+0x34>)
 8009dde:	2100      	movs	r1, #0
 8009de0:	480a      	ldr	r0, [pc, #40]	; (8009e0c <task_create+0x38>)
 8009de2:	f7f8 fd03 	bl	80027ec <osThreadNew>
 8009de6:	4603      	mov	r3, r0
 8009de8:	4a09      	ldr	r2, [pc, #36]	; (8009e10 <task_create+0x3c>)
 8009dea:	6013      	str	r3, [r2, #0]
    //g_dma_transfer_handle = osThreadNew(task_dma_transfer, NULL, &g_task_dma_transfer_attributes);
    g_led_strip_1_ctrl_handle = osThreadNew(task_led_ctrl_strip_one, NULL, &g_task_strip_1_led_ctrl_attributes);
 8009dec:	4a09      	ldr	r2, [pc, #36]	; (8009e14 <task_create+0x40>)
 8009dee:	2100      	movs	r1, #0
 8009df0:	4809      	ldr	r0, [pc, #36]	; (8009e18 <task_create+0x44>)
 8009df2:	f7f8 fcfb 	bl	80027ec <osThreadNew>
 8009df6:	4603      	mov	r3, r0
 8009df8:	4a08      	ldr	r2, [pc, #32]	; (8009e1c <task_create+0x48>)
 8009dfa:	6013      	str	r3, [r2, #0]
    g_tasks_running = true; // technically will be running after task scheduler started
 8009dfc:	4b08      	ldr	r3, [pc, #32]	; (8009e20 <task_create+0x4c>)
 8009dfe:	2201      	movs	r2, #1
 8009e00:	701a      	strb	r2, [r3, #0]
}
 8009e02:	bf00      	nop
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop
 8009e08:	0800b150 	.word	0x0800b150
 8009e0c:	08001e05 	.word	0x08001e05
 8009e10:	20002c14 	.word	0x20002c14
 8009e14:	0800b174 	.word	0x0800b174
 8009e18:	08002101 	.word	0x08002101
 8009e1c:	20002c10 	.word	0x20002c10
 8009e20:	20003cd0 	.word	0x20003cd0

08009e24 <random_num>:
#include <stdint.h>
#include <stdlib.h>
#include "numbers.h"

uint32_t random_num(uint32_t min, uint32_t max)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b082      	sub	sp, #8
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	6039      	str	r1, [r7, #0]
   return min + rand() % (max - min);
 8009e2e:	f000 f991 	bl	800a154 <rand>
 8009e32:	4603      	mov	r3, r0
 8009e34:	461a      	mov	r2, r3
 8009e36:	6839      	ldr	r1, [r7, #0]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	1acb      	subs	r3, r1, r3
 8009e3c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009e40:	fb01 f303 	mul.w	r3, r1, r3
 8009e44:	1ad2      	subs	r2, r2, r3
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	4413      	add	r3, r2
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3708      	adds	r7, #8
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
	...

08009e54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8009e54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009e8c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8009e58:	f7ff fe58 	bl	8009b0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009e5c:	480c      	ldr	r0, [pc, #48]	; (8009e90 <LoopForever+0x6>)
  ldr r1, =_edata
 8009e5e:	490d      	ldr	r1, [pc, #52]	; (8009e94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009e60:	4a0d      	ldr	r2, [pc, #52]	; (8009e98 <LoopForever+0xe>)
  movs r3, #0
 8009e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009e64:	e002      	b.n	8009e6c <LoopCopyDataInit>

08009e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009e6a:	3304      	adds	r3, #4

08009e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009e70:	d3f9      	bcc.n	8009e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009e72:	4a0a      	ldr	r2, [pc, #40]	; (8009e9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8009e74:	4c0a      	ldr	r4, [pc, #40]	; (8009ea0 <LoopForever+0x16>)
  movs r3, #0
 8009e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009e78:	e001      	b.n	8009e7e <LoopFillZerobss>

08009e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009e7c:	3204      	adds	r2, #4

08009e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009e80:	d3fb      	bcc.n	8009e7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009e82:	f000 f817 	bl	8009eb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8009e86:	f7ff ff95 	bl	8009db4 <main>

08009e8a <LoopForever>:

LoopForever:
    b LoopForever
 8009e8a:	e7fe      	b.n	8009e8a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8009e8c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8009e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009e94:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8009e98:	0800b2e8 	.word	0x0800b2e8
  ldr r2, =_sbss
 8009e9c:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 8009ea0:	20003ce4 	.word	0x20003ce4

08009ea4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009ea4:	e7fe      	b.n	8009ea4 <ADC1_IRQHandler>
	...

08009ea8 <__errno>:
 8009ea8:	4b01      	ldr	r3, [pc, #4]	; (8009eb0 <__errno+0x8>)
 8009eaa:	6818      	ldr	r0, [r3, #0]
 8009eac:	4770      	bx	lr
 8009eae:	bf00      	nop
 8009eb0:	20000070 	.word	0x20000070

08009eb4 <__libc_init_array>:
 8009eb4:	b570      	push	{r4, r5, r6, lr}
 8009eb6:	4d0d      	ldr	r5, [pc, #52]	; (8009eec <__libc_init_array+0x38>)
 8009eb8:	4c0d      	ldr	r4, [pc, #52]	; (8009ef0 <__libc_init_array+0x3c>)
 8009eba:	1b64      	subs	r4, r4, r5
 8009ebc:	10a4      	asrs	r4, r4, #2
 8009ebe:	2600      	movs	r6, #0
 8009ec0:	42a6      	cmp	r6, r4
 8009ec2:	d109      	bne.n	8009ed8 <__libc_init_array+0x24>
 8009ec4:	4d0b      	ldr	r5, [pc, #44]	; (8009ef4 <__libc_init_array+0x40>)
 8009ec6:	4c0c      	ldr	r4, [pc, #48]	; (8009ef8 <__libc_init_array+0x44>)
 8009ec8:	f001 f8c8 	bl	800b05c <_init>
 8009ecc:	1b64      	subs	r4, r4, r5
 8009ece:	10a4      	asrs	r4, r4, #2
 8009ed0:	2600      	movs	r6, #0
 8009ed2:	42a6      	cmp	r6, r4
 8009ed4:	d105      	bne.n	8009ee2 <__libc_init_array+0x2e>
 8009ed6:	bd70      	pop	{r4, r5, r6, pc}
 8009ed8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009edc:	4798      	blx	r3
 8009ede:	3601      	adds	r6, #1
 8009ee0:	e7ee      	b.n	8009ec0 <__libc_init_array+0xc>
 8009ee2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ee6:	4798      	blx	r3
 8009ee8:	3601      	adds	r6, #1
 8009eea:	e7f2      	b.n	8009ed2 <__libc_init_array+0x1e>
 8009eec:	0800b2e0 	.word	0x0800b2e0
 8009ef0:	0800b2e0 	.word	0x0800b2e0
 8009ef4:	0800b2e0 	.word	0x0800b2e0
 8009ef8:	0800b2e4 	.word	0x0800b2e4

08009efc <malloc>:
 8009efc:	4b02      	ldr	r3, [pc, #8]	; (8009f08 <malloc+0xc>)
 8009efe:	4601      	mov	r1, r0
 8009f00:	6818      	ldr	r0, [r3, #0]
 8009f02:	f000 b885 	b.w	800a010 <_malloc_r>
 8009f06:	bf00      	nop
 8009f08:	20000070 	.word	0x20000070

08009f0c <memcpy>:
 8009f0c:	440a      	add	r2, r1
 8009f0e:	4291      	cmp	r1, r2
 8009f10:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009f14:	d100      	bne.n	8009f18 <memcpy+0xc>
 8009f16:	4770      	bx	lr
 8009f18:	b510      	push	{r4, lr}
 8009f1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f22:	4291      	cmp	r1, r2
 8009f24:	d1f9      	bne.n	8009f1a <memcpy+0xe>
 8009f26:	bd10      	pop	{r4, pc}

08009f28 <memset>:
 8009f28:	4402      	add	r2, r0
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d100      	bne.n	8009f32 <memset+0xa>
 8009f30:	4770      	bx	lr
 8009f32:	f803 1b01 	strb.w	r1, [r3], #1
 8009f36:	e7f9      	b.n	8009f2c <memset+0x4>

08009f38 <_free_r>:
 8009f38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f3a:	2900      	cmp	r1, #0
 8009f3c:	d044      	beq.n	8009fc8 <_free_r+0x90>
 8009f3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f42:	9001      	str	r0, [sp, #4]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	f1a1 0404 	sub.w	r4, r1, #4
 8009f4a:	bfb8      	it	lt
 8009f4c:	18e4      	addlt	r4, r4, r3
 8009f4e:	f000 f9ab 	bl	800a2a8 <__malloc_lock>
 8009f52:	4a1e      	ldr	r2, [pc, #120]	; (8009fcc <_free_r+0x94>)
 8009f54:	9801      	ldr	r0, [sp, #4]
 8009f56:	6813      	ldr	r3, [r2, #0]
 8009f58:	b933      	cbnz	r3, 8009f68 <_free_r+0x30>
 8009f5a:	6063      	str	r3, [r4, #4]
 8009f5c:	6014      	str	r4, [r2, #0]
 8009f5e:	b003      	add	sp, #12
 8009f60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f64:	f000 b9a6 	b.w	800a2b4 <__malloc_unlock>
 8009f68:	42a3      	cmp	r3, r4
 8009f6a:	d908      	bls.n	8009f7e <_free_r+0x46>
 8009f6c:	6825      	ldr	r5, [r4, #0]
 8009f6e:	1961      	adds	r1, r4, r5
 8009f70:	428b      	cmp	r3, r1
 8009f72:	bf01      	itttt	eq
 8009f74:	6819      	ldreq	r1, [r3, #0]
 8009f76:	685b      	ldreq	r3, [r3, #4]
 8009f78:	1949      	addeq	r1, r1, r5
 8009f7a:	6021      	streq	r1, [r4, #0]
 8009f7c:	e7ed      	b.n	8009f5a <_free_r+0x22>
 8009f7e:	461a      	mov	r2, r3
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	b10b      	cbz	r3, 8009f88 <_free_r+0x50>
 8009f84:	42a3      	cmp	r3, r4
 8009f86:	d9fa      	bls.n	8009f7e <_free_r+0x46>
 8009f88:	6811      	ldr	r1, [r2, #0]
 8009f8a:	1855      	adds	r5, r2, r1
 8009f8c:	42a5      	cmp	r5, r4
 8009f8e:	d10b      	bne.n	8009fa8 <_free_r+0x70>
 8009f90:	6824      	ldr	r4, [r4, #0]
 8009f92:	4421      	add	r1, r4
 8009f94:	1854      	adds	r4, r2, r1
 8009f96:	42a3      	cmp	r3, r4
 8009f98:	6011      	str	r1, [r2, #0]
 8009f9a:	d1e0      	bne.n	8009f5e <_free_r+0x26>
 8009f9c:	681c      	ldr	r4, [r3, #0]
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	6053      	str	r3, [r2, #4]
 8009fa2:	4421      	add	r1, r4
 8009fa4:	6011      	str	r1, [r2, #0]
 8009fa6:	e7da      	b.n	8009f5e <_free_r+0x26>
 8009fa8:	d902      	bls.n	8009fb0 <_free_r+0x78>
 8009faa:	230c      	movs	r3, #12
 8009fac:	6003      	str	r3, [r0, #0]
 8009fae:	e7d6      	b.n	8009f5e <_free_r+0x26>
 8009fb0:	6825      	ldr	r5, [r4, #0]
 8009fb2:	1961      	adds	r1, r4, r5
 8009fb4:	428b      	cmp	r3, r1
 8009fb6:	bf04      	itt	eq
 8009fb8:	6819      	ldreq	r1, [r3, #0]
 8009fba:	685b      	ldreq	r3, [r3, #4]
 8009fbc:	6063      	str	r3, [r4, #4]
 8009fbe:	bf04      	itt	eq
 8009fc0:	1949      	addeq	r1, r1, r5
 8009fc2:	6021      	streq	r1, [r4, #0]
 8009fc4:	6054      	str	r4, [r2, #4]
 8009fc6:	e7ca      	b.n	8009f5e <_free_r+0x26>
 8009fc8:	b003      	add	sp, #12
 8009fca:	bd30      	pop	{r4, r5, pc}
 8009fcc:	20003cd4 	.word	0x20003cd4

08009fd0 <sbrk_aligned>:
 8009fd0:	b570      	push	{r4, r5, r6, lr}
 8009fd2:	4e0e      	ldr	r6, [pc, #56]	; (800a00c <sbrk_aligned+0x3c>)
 8009fd4:	460c      	mov	r4, r1
 8009fd6:	6831      	ldr	r1, [r6, #0]
 8009fd8:	4605      	mov	r5, r0
 8009fda:	b911      	cbnz	r1, 8009fe2 <sbrk_aligned+0x12>
 8009fdc:	f000 f8f8 	bl	800a1d0 <_sbrk_r>
 8009fe0:	6030      	str	r0, [r6, #0]
 8009fe2:	4621      	mov	r1, r4
 8009fe4:	4628      	mov	r0, r5
 8009fe6:	f000 f8f3 	bl	800a1d0 <_sbrk_r>
 8009fea:	1c43      	adds	r3, r0, #1
 8009fec:	d00a      	beq.n	800a004 <sbrk_aligned+0x34>
 8009fee:	1cc4      	adds	r4, r0, #3
 8009ff0:	f024 0403 	bic.w	r4, r4, #3
 8009ff4:	42a0      	cmp	r0, r4
 8009ff6:	d007      	beq.n	800a008 <sbrk_aligned+0x38>
 8009ff8:	1a21      	subs	r1, r4, r0
 8009ffa:	4628      	mov	r0, r5
 8009ffc:	f000 f8e8 	bl	800a1d0 <_sbrk_r>
 800a000:	3001      	adds	r0, #1
 800a002:	d101      	bne.n	800a008 <sbrk_aligned+0x38>
 800a004:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a008:	4620      	mov	r0, r4
 800a00a:	bd70      	pop	{r4, r5, r6, pc}
 800a00c:	20003cd8 	.word	0x20003cd8

0800a010 <_malloc_r>:
 800a010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a014:	1ccd      	adds	r5, r1, #3
 800a016:	f025 0503 	bic.w	r5, r5, #3
 800a01a:	3508      	adds	r5, #8
 800a01c:	2d0c      	cmp	r5, #12
 800a01e:	bf38      	it	cc
 800a020:	250c      	movcc	r5, #12
 800a022:	2d00      	cmp	r5, #0
 800a024:	4607      	mov	r7, r0
 800a026:	db01      	blt.n	800a02c <_malloc_r+0x1c>
 800a028:	42a9      	cmp	r1, r5
 800a02a:	d905      	bls.n	800a038 <_malloc_r+0x28>
 800a02c:	230c      	movs	r3, #12
 800a02e:	603b      	str	r3, [r7, #0]
 800a030:	2600      	movs	r6, #0
 800a032:	4630      	mov	r0, r6
 800a034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a038:	4e2e      	ldr	r6, [pc, #184]	; (800a0f4 <_malloc_r+0xe4>)
 800a03a:	f000 f935 	bl	800a2a8 <__malloc_lock>
 800a03e:	6833      	ldr	r3, [r6, #0]
 800a040:	461c      	mov	r4, r3
 800a042:	bb34      	cbnz	r4, 800a092 <_malloc_r+0x82>
 800a044:	4629      	mov	r1, r5
 800a046:	4638      	mov	r0, r7
 800a048:	f7ff ffc2 	bl	8009fd0 <sbrk_aligned>
 800a04c:	1c43      	adds	r3, r0, #1
 800a04e:	4604      	mov	r4, r0
 800a050:	d14d      	bne.n	800a0ee <_malloc_r+0xde>
 800a052:	6834      	ldr	r4, [r6, #0]
 800a054:	4626      	mov	r6, r4
 800a056:	2e00      	cmp	r6, #0
 800a058:	d140      	bne.n	800a0dc <_malloc_r+0xcc>
 800a05a:	6823      	ldr	r3, [r4, #0]
 800a05c:	4631      	mov	r1, r6
 800a05e:	4638      	mov	r0, r7
 800a060:	eb04 0803 	add.w	r8, r4, r3
 800a064:	f000 f8b4 	bl	800a1d0 <_sbrk_r>
 800a068:	4580      	cmp	r8, r0
 800a06a:	d13a      	bne.n	800a0e2 <_malloc_r+0xd2>
 800a06c:	6821      	ldr	r1, [r4, #0]
 800a06e:	3503      	adds	r5, #3
 800a070:	1a6d      	subs	r5, r5, r1
 800a072:	f025 0503 	bic.w	r5, r5, #3
 800a076:	3508      	adds	r5, #8
 800a078:	2d0c      	cmp	r5, #12
 800a07a:	bf38      	it	cc
 800a07c:	250c      	movcc	r5, #12
 800a07e:	4629      	mov	r1, r5
 800a080:	4638      	mov	r0, r7
 800a082:	f7ff ffa5 	bl	8009fd0 <sbrk_aligned>
 800a086:	3001      	adds	r0, #1
 800a088:	d02b      	beq.n	800a0e2 <_malloc_r+0xd2>
 800a08a:	6823      	ldr	r3, [r4, #0]
 800a08c:	442b      	add	r3, r5
 800a08e:	6023      	str	r3, [r4, #0]
 800a090:	e00e      	b.n	800a0b0 <_malloc_r+0xa0>
 800a092:	6822      	ldr	r2, [r4, #0]
 800a094:	1b52      	subs	r2, r2, r5
 800a096:	d41e      	bmi.n	800a0d6 <_malloc_r+0xc6>
 800a098:	2a0b      	cmp	r2, #11
 800a09a:	d916      	bls.n	800a0ca <_malloc_r+0xba>
 800a09c:	1961      	adds	r1, r4, r5
 800a09e:	42a3      	cmp	r3, r4
 800a0a0:	6025      	str	r5, [r4, #0]
 800a0a2:	bf18      	it	ne
 800a0a4:	6059      	strne	r1, [r3, #4]
 800a0a6:	6863      	ldr	r3, [r4, #4]
 800a0a8:	bf08      	it	eq
 800a0aa:	6031      	streq	r1, [r6, #0]
 800a0ac:	5162      	str	r2, [r4, r5]
 800a0ae:	604b      	str	r3, [r1, #4]
 800a0b0:	4638      	mov	r0, r7
 800a0b2:	f104 060b 	add.w	r6, r4, #11
 800a0b6:	f000 f8fd 	bl	800a2b4 <__malloc_unlock>
 800a0ba:	f026 0607 	bic.w	r6, r6, #7
 800a0be:	1d23      	adds	r3, r4, #4
 800a0c0:	1af2      	subs	r2, r6, r3
 800a0c2:	d0b6      	beq.n	800a032 <_malloc_r+0x22>
 800a0c4:	1b9b      	subs	r3, r3, r6
 800a0c6:	50a3      	str	r3, [r4, r2]
 800a0c8:	e7b3      	b.n	800a032 <_malloc_r+0x22>
 800a0ca:	6862      	ldr	r2, [r4, #4]
 800a0cc:	42a3      	cmp	r3, r4
 800a0ce:	bf0c      	ite	eq
 800a0d0:	6032      	streq	r2, [r6, #0]
 800a0d2:	605a      	strne	r2, [r3, #4]
 800a0d4:	e7ec      	b.n	800a0b0 <_malloc_r+0xa0>
 800a0d6:	4623      	mov	r3, r4
 800a0d8:	6864      	ldr	r4, [r4, #4]
 800a0da:	e7b2      	b.n	800a042 <_malloc_r+0x32>
 800a0dc:	4634      	mov	r4, r6
 800a0de:	6876      	ldr	r6, [r6, #4]
 800a0e0:	e7b9      	b.n	800a056 <_malloc_r+0x46>
 800a0e2:	230c      	movs	r3, #12
 800a0e4:	603b      	str	r3, [r7, #0]
 800a0e6:	4638      	mov	r0, r7
 800a0e8:	f000 f8e4 	bl	800a2b4 <__malloc_unlock>
 800a0ec:	e7a1      	b.n	800a032 <_malloc_r+0x22>
 800a0ee:	6025      	str	r5, [r4, #0]
 800a0f0:	e7de      	b.n	800a0b0 <_malloc_r+0xa0>
 800a0f2:	bf00      	nop
 800a0f4:	20003cd4 	.word	0x20003cd4

0800a0f8 <srand>:
 800a0f8:	b538      	push	{r3, r4, r5, lr}
 800a0fa:	4b10      	ldr	r3, [pc, #64]	; (800a13c <srand+0x44>)
 800a0fc:	681d      	ldr	r5, [r3, #0]
 800a0fe:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800a100:	4604      	mov	r4, r0
 800a102:	b9b3      	cbnz	r3, 800a132 <srand+0x3a>
 800a104:	2018      	movs	r0, #24
 800a106:	f7ff fef9 	bl	8009efc <malloc>
 800a10a:	4602      	mov	r2, r0
 800a10c:	63a8      	str	r0, [r5, #56]	; 0x38
 800a10e:	b920      	cbnz	r0, 800a11a <srand+0x22>
 800a110:	4b0b      	ldr	r3, [pc, #44]	; (800a140 <srand+0x48>)
 800a112:	480c      	ldr	r0, [pc, #48]	; (800a144 <srand+0x4c>)
 800a114:	2142      	movs	r1, #66	; 0x42
 800a116:	f000 f885 	bl	800a224 <__assert_func>
 800a11a:	490b      	ldr	r1, [pc, #44]	; (800a148 <srand+0x50>)
 800a11c:	4b0b      	ldr	r3, [pc, #44]	; (800a14c <srand+0x54>)
 800a11e:	e9c0 1300 	strd	r1, r3, [r0]
 800a122:	4b0b      	ldr	r3, [pc, #44]	; (800a150 <srand+0x58>)
 800a124:	6083      	str	r3, [r0, #8]
 800a126:	230b      	movs	r3, #11
 800a128:	8183      	strh	r3, [r0, #12]
 800a12a:	2100      	movs	r1, #0
 800a12c:	2001      	movs	r0, #1
 800a12e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800a132:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800a134:	2200      	movs	r2, #0
 800a136:	611c      	str	r4, [r3, #16]
 800a138:	615a      	str	r2, [r3, #20]
 800a13a:	bd38      	pop	{r3, r4, r5, pc}
 800a13c:	20000070 	.word	0x20000070
 800a140:	0800b19c 	.word	0x0800b19c
 800a144:	0800b1b3 	.word	0x0800b1b3
 800a148:	abcd330e 	.word	0xabcd330e
 800a14c:	e66d1234 	.word	0xe66d1234
 800a150:	0005deec 	.word	0x0005deec

0800a154 <rand>:
 800a154:	4b16      	ldr	r3, [pc, #88]	; (800a1b0 <rand+0x5c>)
 800a156:	b510      	push	{r4, lr}
 800a158:	681c      	ldr	r4, [r3, #0]
 800a15a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a15c:	b9b3      	cbnz	r3, 800a18c <rand+0x38>
 800a15e:	2018      	movs	r0, #24
 800a160:	f7ff fecc 	bl	8009efc <malloc>
 800a164:	63a0      	str	r0, [r4, #56]	; 0x38
 800a166:	b928      	cbnz	r0, 800a174 <rand+0x20>
 800a168:	4602      	mov	r2, r0
 800a16a:	4b12      	ldr	r3, [pc, #72]	; (800a1b4 <rand+0x60>)
 800a16c:	4812      	ldr	r0, [pc, #72]	; (800a1b8 <rand+0x64>)
 800a16e:	214e      	movs	r1, #78	; 0x4e
 800a170:	f000 f858 	bl	800a224 <__assert_func>
 800a174:	4a11      	ldr	r2, [pc, #68]	; (800a1bc <rand+0x68>)
 800a176:	4b12      	ldr	r3, [pc, #72]	; (800a1c0 <rand+0x6c>)
 800a178:	e9c0 2300 	strd	r2, r3, [r0]
 800a17c:	4b11      	ldr	r3, [pc, #68]	; (800a1c4 <rand+0x70>)
 800a17e:	6083      	str	r3, [r0, #8]
 800a180:	230b      	movs	r3, #11
 800a182:	8183      	strh	r3, [r0, #12]
 800a184:	2201      	movs	r2, #1
 800a186:	2300      	movs	r3, #0
 800a188:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800a18c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800a18e:	4a0e      	ldr	r2, [pc, #56]	; (800a1c8 <rand+0x74>)
 800a190:	6920      	ldr	r0, [r4, #16]
 800a192:	6963      	ldr	r3, [r4, #20]
 800a194:	490d      	ldr	r1, [pc, #52]	; (800a1cc <rand+0x78>)
 800a196:	4342      	muls	r2, r0
 800a198:	fb01 2203 	mla	r2, r1, r3, r2
 800a19c:	fba0 0101 	umull	r0, r1, r0, r1
 800a1a0:	1c43      	adds	r3, r0, #1
 800a1a2:	eb42 0001 	adc.w	r0, r2, r1
 800a1a6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800a1aa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a1ae:	bd10      	pop	{r4, pc}
 800a1b0:	20000070 	.word	0x20000070
 800a1b4:	0800b19c 	.word	0x0800b19c
 800a1b8:	0800b1b3 	.word	0x0800b1b3
 800a1bc:	abcd330e 	.word	0xabcd330e
 800a1c0:	e66d1234 	.word	0xe66d1234
 800a1c4:	0005deec 	.word	0x0005deec
 800a1c8:	5851f42d 	.word	0x5851f42d
 800a1cc:	4c957f2d 	.word	0x4c957f2d

0800a1d0 <_sbrk_r>:
 800a1d0:	b538      	push	{r3, r4, r5, lr}
 800a1d2:	4d06      	ldr	r5, [pc, #24]	; (800a1ec <_sbrk_r+0x1c>)
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	4604      	mov	r4, r0
 800a1d8:	4608      	mov	r0, r1
 800a1da:	602b      	str	r3, [r5, #0]
 800a1dc:	f7ff fc60 	bl	8009aa0 <_sbrk>
 800a1e0:	1c43      	adds	r3, r0, #1
 800a1e2:	d102      	bne.n	800a1ea <_sbrk_r+0x1a>
 800a1e4:	682b      	ldr	r3, [r5, #0]
 800a1e6:	b103      	cbz	r3, 800a1ea <_sbrk_r+0x1a>
 800a1e8:	6023      	str	r3, [r4, #0]
 800a1ea:	bd38      	pop	{r3, r4, r5, pc}
 800a1ec:	20003cdc 	.word	0x20003cdc

0800a1f0 <time>:
 800a1f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a1f2:	4b0b      	ldr	r3, [pc, #44]	; (800a220 <time+0x30>)
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	4669      	mov	r1, sp
 800a1f8:	4604      	mov	r4, r0
 800a1fa:	6818      	ldr	r0, [r3, #0]
 800a1fc:	f000 f842 	bl	800a284 <_gettimeofday_r>
 800a200:	2800      	cmp	r0, #0
 800a202:	bfbe      	ittt	lt
 800a204:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 800a208:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a20c:	e9cd 2300 	strdlt	r2, r3, [sp]
 800a210:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a214:	b10c      	cbz	r4, 800a21a <time+0x2a>
 800a216:	e9c4 0100 	strd	r0, r1, [r4]
 800a21a:	b004      	add	sp, #16
 800a21c:	bd10      	pop	{r4, pc}
 800a21e:	bf00      	nop
 800a220:	20000070 	.word	0x20000070

0800a224 <__assert_func>:
 800a224:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a226:	4614      	mov	r4, r2
 800a228:	461a      	mov	r2, r3
 800a22a:	4b09      	ldr	r3, [pc, #36]	; (800a250 <__assert_func+0x2c>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4605      	mov	r5, r0
 800a230:	68d8      	ldr	r0, [r3, #12]
 800a232:	b14c      	cbz	r4, 800a248 <__assert_func+0x24>
 800a234:	4b07      	ldr	r3, [pc, #28]	; (800a254 <__assert_func+0x30>)
 800a236:	9100      	str	r1, [sp, #0]
 800a238:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a23c:	4906      	ldr	r1, [pc, #24]	; (800a258 <__assert_func+0x34>)
 800a23e:	462b      	mov	r3, r5
 800a240:	f000 f80e 	bl	800a260 <fiprintf>
 800a244:	f000 fbea 	bl	800aa1c <abort>
 800a248:	4b04      	ldr	r3, [pc, #16]	; (800a25c <__assert_func+0x38>)
 800a24a:	461c      	mov	r4, r3
 800a24c:	e7f3      	b.n	800a236 <__assert_func+0x12>
 800a24e:	bf00      	nop
 800a250:	20000070 	.word	0x20000070
 800a254:	0800b20e 	.word	0x0800b20e
 800a258:	0800b21b 	.word	0x0800b21b
 800a25c:	0800b249 	.word	0x0800b249

0800a260 <fiprintf>:
 800a260:	b40e      	push	{r1, r2, r3}
 800a262:	b503      	push	{r0, r1, lr}
 800a264:	4601      	mov	r1, r0
 800a266:	ab03      	add	r3, sp, #12
 800a268:	4805      	ldr	r0, [pc, #20]	; (800a280 <fiprintf+0x20>)
 800a26a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a26e:	6800      	ldr	r0, [r0, #0]
 800a270:	9301      	str	r3, [sp, #4]
 800a272:	f000 f84f 	bl	800a314 <_vfiprintf_r>
 800a276:	b002      	add	sp, #8
 800a278:	f85d eb04 	ldr.w	lr, [sp], #4
 800a27c:	b003      	add	sp, #12
 800a27e:	4770      	bx	lr
 800a280:	20000070 	.word	0x20000070

0800a284 <_gettimeofday_r>:
 800a284:	b538      	push	{r3, r4, r5, lr}
 800a286:	4d07      	ldr	r5, [pc, #28]	; (800a2a4 <_gettimeofday_r+0x20>)
 800a288:	2300      	movs	r3, #0
 800a28a:	4604      	mov	r4, r0
 800a28c:	4608      	mov	r0, r1
 800a28e:	4611      	mov	r1, r2
 800a290:	602b      	str	r3, [r5, #0]
 800a292:	f000 fedb 	bl	800b04c <_gettimeofday>
 800a296:	1c43      	adds	r3, r0, #1
 800a298:	d102      	bne.n	800a2a0 <_gettimeofday_r+0x1c>
 800a29a:	682b      	ldr	r3, [r5, #0]
 800a29c:	b103      	cbz	r3, 800a2a0 <_gettimeofday_r+0x1c>
 800a29e:	6023      	str	r3, [r4, #0]
 800a2a0:	bd38      	pop	{r3, r4, r5, pc}
 800a2a2:	bf00      	nop
 800a2a4:	20003cdc 	.word	0x20003cdc

0800a2a8 <__malloc_lock>:
 800a2a8:	4801      	ldr	r0, [pc, #4]	; (800a2b0 <__malloc_lock+0x8>)
 800a2aa:	f000 bd77 	b.w	800ad9c <__retarget_lock_acquire_recursive>
 800a2ae:	bf00      	nop
 800a2b0:	20003ce0 	.word	0x20003ce0

0800a2b4 <__malloc_unlock>:
 800a2b4:	4801      	ldr	r0, [pc, #4]	; (800a2bc <__malloc_unlock+0x8>)
 800a2b6:	f000 bd72 	b.w	800ad9e <__retarget_lock_release_recursive>
 800a2ba:	bf00      	nop
 800a2bc:	20003ce0 	.word	0x20003ce0

0800a2c0 <__sfputc_r>:
 800a2c0:	6893      	ldr	r3, [r2, #8]
 800a2c2:	3b01      	subs	r3, #1
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	b410      	push	{r4}
 800a2c8:	6093      	str	r3, [r2, #8]
 800a2ca:	da08      	bge.n	800a2de <__sfputc_r+0x1e>
 800a2cc:	6994      	ldr	r4, [r2, #24]
 800a2ce:	42a3      	cmp	r3, r4
 800a2d0:	db01      	blt.n	800a2d6 <__sfputc_r+0x16>
 800a2d2:	290a      	cmp	r1, #10
 800a2d4:	d103      	bne.n	800a2de <__sfputc_r+0x1e>
 800a2d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2da:	f000 badf 	b.w	800a89c <__swbuf_r>
 800a2de:	6813      	ldr	r3, [r2, #0]
 800a2e0:	1c58      	adds	r0, r3, #1
 800a2e2:	6010      	str	r0, [r2, #0]
 800a2e4:	7019      	strb	r1, [r3, #0]
 800a2e6:	4608      	mov	r0, r1
 800a2e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2ec:	4770      	bx	lr

0800a2ee <__sfputs_r>:
 800a2ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2f0:	4606      	mov	r6, r0
 800a2f2:	460f      	mov	r7, r1
 800a2f4:	4614      	mov	r4, r2
 800a2f6:	18d5      	adds	r5, r2, r3
 800a2f8:	42ac      	cmp	r4, r5
 800a2fa:	d101      	bne.n	800a300 <__sfputs_r+0x12>
 800a2fc:	2000      	movs	r0, #0
 800a2fe:	e007      	b.n	800a310 <__sfputs_r+0x22>
 800a300:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a304:	463a      	mov	r2, r7
 800a306:	4630      	mov	r0, r6
 800a308:	f7ff ffda 	bl	800a2c0 <__sfputc_r>
 800a30c:	1c43      	adds	r3, r0, #1
 800a30e:	d1f3      	bne.n	800a2f8 <__sfputs_r+0xa>
 800a310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a314 <_vfiprintf_r>:
 800a314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a318:	460d      	mov	r5, r1
 800a31a:	b09d      	sub	sp, #116	; 0x74
 800a31c:	4614      	mov	r4, r2
 800a31e:	4698      	mov	r8, r3
 800a320:	4606      	mov	r6, r0
 800a322:	b118      	cbz	r0, 800a32c <_vfiprintf_r+0x18>
 800a324:	6983      	ldr	r3, [r0, #24]
 800a326:	b90b      	cbnz	r3, 800a32c <_vfiprintf_r+0x18>
 800a328:	f000 fc9a 	bl	800ac60 <__sinit>
 800a32c:	4b89      	ldr	r3, [pc, #548]	; (800a554 <_vfiprintf_r+0x240>)
 800a32e:	429d      	cmp	r5, r3
 800a330:	d11b      	bne.n	800a36a <_vfiprintf_r+0x56>
 800a332:	6875      	ldr	r5, [r6, #4]
 800a334:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a336:	07d9      	lsls	r1, r3, #31
 800a338:	d405      	bmi.n	800a346 <_vfiprintf_r+0x32>
 800a33a:	89ab      	ldrh	r3, [r5, #12]
 800a33c:	059a      	lsls	r2, r3, #22
 800a33e:	d402      	bmi.n	800a346 <_vfiprintf_r+0x32>
 800a340:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a342:	f000 fd2b 	bl	800ad9c <__retarget_lock_acquire_recursive>
 800a346:	89ab      	ldrh	r3, [r5, #12]
 800a348:	071b      	lsls	r3, r3, #28
 800a34a:	d501      	bpl.n	800a350 <_vfiprintf_r+0x3c>
 800a34c:	692b      	ldr	r3, [r5, #16]
 800a34e:	b9eb      	cbnz	r3, 800a38c <_vfiprintf_r+0x78>
 800a350:	4629      	mov	r1, r5
 800a352:	4630      	mov	r0, r6
 800a354:	f000 faf4 	bl	800a940 <__swsetup_r>
 800a358:	b1c0      	cbz	r0, 800a38c <_vfiprintf_r+0x78>
 800a35a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a35c:	07dc      	lsls	r4, r3, #31
 800a35e:	d50e      	bpl.n	800a37e <_vfiprintf_r+0x6a>
 800a360:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a364:	b01d      	add	sp, #116	; 0x74
 800a366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a36a:	4b7b      	ldr	r3, [pc, #492]	; (800a558 <_vfiprintf_r+0x244>)
 800a36c:	429d      	cmp	r5, r3
 800a36e:	d101      	bne.n	800a374 <_vfiprintf_r+0x60>
 800a370:	68b5      	ldr	r5, [r6, #8]
 800a372:	e7df      	b.n	800a334 <_vfiprintf_r+0x20>
 800a374:	4b79      	ldr	r3, [pc, #484]	; (800a55c <_vfiprintf_r+0x248>)
 800a376:	429d      	cmp	r5, r3
 800a378:	bf08      	it	eq
 800a37a:	68f5      	ldreq	r5, [r6, #12]
 800a37c:	e7da      	b.n	800a334 <_vfiprintf_r+0x20>
 800a37e:	89ab      	ldrh	r3, [r5, #12]
 800a380:	0598      	lsls	r0, r3, #22
 800a382:	d4ed      	bmi.n	800a360 <_vfiprintf_r+0x4c>
 800a384:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a386:	f000 fd0a 	bl	800ad9e <__retarget_lock_release_recursive>
 800a38a:	e7e9      	b.n	800a360 <_vfiprintf_r+0x4c>
 800a38c:	2300      	movs	r3, #0
 800a38e:	9309      	str	r3, [sp, #36]	; 0x24
 800a390:	2320      	movs	r3, #32
 800a392:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a396:	f8cd 800c 	str.w	r8, [sp, #12]
 800a39a:	2330      	movs	r3, #48	; 0x30
 800a39c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a560 <_vfiprintf_r+0x24c>
 800a3a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3a4:	f04f 0901 	mov.w	r9, #1
 800a3a8:	4623      	mov	r3, r4
 800a3aa:	469a      	mov	sl, r3
 800a3ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3b0:	b10a      	cbz	r2, 800a3b6 <_vfiprintf_r+0xa2>
 800a3b2:	2a25      	cmp	r2, #37	; 0x25
 800a3b4:	d1f9      	bne.n	800a3aa <_vfiprintf_r+0x96>
 800a3b6:	ebba 0b04 	subs.w	fp, sl, r4
 800a3ba:	d00b      	beq.n	800a3d4 <_vfiprintf_r+0xc0>
 800a3bc:	465b      	mov	r3, fp
 800a3be:	4622      	mov	r2, r4
 800a3c0:	4629      	mov	r1, r5
 800a3c2:	4630      	mov	r0, r6
 800a3c4:	f7ff ff93 	bl	800a2ee <__sfputs_r>
 800a3c8:	3001      	adds	r0, #1
 800a3ca:	f000 80aa 	beq.w	800a522 <_vfiprintf_r+0x20e>
 800a3ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3d0:	445a      	add	r2, fp
 800a3d2:	9209      	str	r2, [sp, #36]	; 0x24
 800a3d4:	f89a 3000 	ldrb.w	r3, [sl]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	f000 80a2 	beq.w	800a522 <_vfiprintf_r+0x20e>
 800a3de:	2300      	movs	r3, #0
 800a3e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a3e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3e8:	f10a 0a01 	add.w	sl, sl, #1
 800a3ec:	9304      	str	r3, [sp, #16]
 800a3ee:	9307      	str	r3, [sp, #28]
 800a3f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3f4:	931a      	str	r3, [sp, #104]	; 0x68
 800a3f6:	4654      	mov	r4, sl
 800a3f8:	2205      	movs	r2, #5
 800a3fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3fe:	4858      	ldr	r0, [pc, #352]	; (800a560 <_vfiprintf_r+0x24c>)
 800a400:	f7f5 fee6 	bl	80001d0 <memchr>
 800a404:	9a04      	ldr	r2, [sp, #16]
 800a406:	b9d8      	cbnz	r0, 800a440 <_vfiprintf_r+0x12c>
 800a408:	06d1      	lsls	r1, r2, #27
 800a40a:	bf44      	itt	mi
 800a40c:	2320      	movmi	r3, #32
 800a40e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a412:	0713      	lsls	r3, r2, #28
 800a414:	bf44      	itt	mi
 800a416:	232b      	movmi	r3, #43	; 0x2b
 800a418:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a41c:	f89a 3000 	ldrb.w	r3, [sl]
 800a420:	2b2a      	cmp	r3, #42	; 0x2a
 800a422:	d015      	beq.n	800a450 <_vfiprintf_r+0x13c>
 800a424:	9a07      	ldr	r2, [sp, #28]
 800a426:	4654      	mov	r4, sl
 800a428:	2000      	movs	r0, #0
 800a42a:	f04f 0c0a 	mov.w	ip, #10
 800a42e:	4621      	mov	r1, r4
 800a430:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a434:	3b30      	subs	r3, #48	; 0x30
 800a436:	2b09      	cmp	r3, #9
 800a438:	d94e      	bls.n	800a4d8 <_vfiprintf_r+0x1c4>
 800a43a:	b1b0      	cbz	r0, 800a46a <_vfiprintf_r+0x156>
 800a43c:	9207      	str	r2, [sp, #28]
 800a43e:	e014      	b.n	800a46a <_vfiprintf_r+0x156>
 800a440:	eba0 0308 	sub.w	r3, r0, r8
 800a444:	fa09 f303 	lsl.w	r3, r9, r3
 800a448:	4313      	orrs	r3, r2
 800a44a:	9304      	str	r3, [sp, #16]
 800a44c:	46a2      	mov	sl, r4
 800a44e:	e7d2      	b.n	800a3f6 <_vfiprintf_r+0xe2>
 800a450:	9b03      	ldr	r3, [sp, #12]
 800a452:	1d19      	adds	r1, r3, #4
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	9103      	str	r1, [sp, #12]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	bfbb      	ittet	lt
 800a45c:	425b      	neglt	r3, r3
 800a45e:	f042 0202 	orrlt.w	r2, r2, #2
 800a462:	9307      	strge	r3, [sp, #28]
 800a464:	9307      	strlt	r3, [sp, #28]
 800a466:	bfb8      	it	lt
 800a468:	9204      	strlt	r2, [sp, #16]
 800a46a:	7823      	ldrb	r3, [r4, #0]
 800a46c:	2b2e      	cmp	r3, #46	; 0x2e
 800a46e:	d10c      	bne.n	800a48a <_vfiprintf_r+0x176>
 800a470:	7863      	ldrb	r3, [r4, #1]
 800a472:	2b2a      	cmp	r3, #42	; 0x2a
 800a474:	d135      	bne.n	800a4e2 <_vfiprintf_r+0x1ce>
 800a476:	9b03      	ldr	r3, [sp, #12]
 800a478:	1d1a      	adds	r2, r3, #4
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	9203      	str	r2, [sp, #12]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	bfb8      	it	lt
 800a482:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a486:	3402      	adds	r4, #2
 800a488:	9305      	str	r3, [sp, #20]
 800a48a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a570 <_vfiprintf_r+0x25c>
 800a48e:	7821      	ldrb	r1, [r4, #0]
 800a490:	2203      	movs	r2, #3
 800a492:	4650      	mov	r0, sl
 800a494:	f7f5 fe9c 	bl	80001d0 <memchr>
 800a498:	b140      	cbz	r0, 800a4ac <_vfiprintf_r+0x198>
 800a49a:	2340      	movs	r3, #64	; 0x40
 800a49c:	eba0 000a 	sub.w	r0, r0, sl
 800a4a0:	fa03 f000 	lsl.w	r0, r3, r0
 800a4a4:	9b04      	ldr	r3, [sp, #16]
 800a4a6:	4303      	orrs	r3, r0
 800a4a8:	3401      	adds	r4, #1
 800a4aa:	9304      	str	r3, [sp, #16]
 800a4ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4b0:	482c      	ldr	r0, [pc, #176]	; (800a564 <_vfiprintf_r+0x250>)
 800a4b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4b6:	2206      	movs	r2, #6
 800a4b8:	f7f5 fe8a 	bl	80001d0 <memchr>
 800a4bc:	2800      	cmp	r0, #0
 800a4be:	d03f      	beq.n	800a540 <_vfiprintf_r+0x22c>
 800a4c0:	4b29      	ldr	r3, [pc, #164]	; (800a568 <_vfiprintf_r+0x254>)
 800a4c2:	bb1b      	cbnz	r3, 800a50c <_vfiprintf_r+0x1f8>
 800a4c4:	9b03      	ldr	r3, [sp, #12]
 800a4c6:	3307      	adds	r3, #7
 800a4c8:	f023 0307 	bic.w	r3, r3, #7
 800a4cc:	3308      	adds	r3, #8
 800a4ce:	9303      	str	r3, [sp, #12]
 800a4d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4d2:	443b      	add	r3, r7
 800a4d4:	9309      	str	r3, [sp, #36]	; 0x24
 800a4d6:	e767      	b.n	800a3a8 <_vfiprintf_r+0x94>
 800a4d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4dc:	460c      	mov	r4, r1
 800a4de:	2001      	movs	r0, #1
 800a4e0:	e7a5      	b.n	800a42e <_vfiprintf_r+0x11a>
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	3401      	adds	r4, #1
 800a4e6:	9305      	str	r3, [sp, #20]
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	f04f 0c0a 	mov.w	ip, #10
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4f4:	3a30      	subs	r2, #48	; 0x30
 800a4f6:	2a09      	cmp	r2, #9
 800a4f8:	d903      	bls.n	800a502 <_vfiprintf_r+0x1ee>
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d0c5      	beq.n	800a48a <_vfiprintf_r+0x176>
 800a4fe:	9105      	str	r1, [sp, #20]
 800a500:	e7c3      	b.n	800a48a <_vfiprintf_r+0x176>
 800a502:	fb0c 2101 	mla	r1, ip, r1, r2
 800a506:	4604      	mov	r4, r0
 800a508:	2301      	movs	r3, #1
 800a50a:	e7f0      	b.n	800a4ee <_vfiprintf_r+0x1da>
 800a50c:	ab03      	add	r3, sp, #12
 800a50e:	9300      	str	r3, [sp, #0]
 800a510:	462a      	mov	r2, r5
 800a512:	4b16      	ldr	r3, [pc, #88]	; (800a56c <_vfiprintf_r+0x258>)
 800a514:	a904      	add	r1, sp, #16
 800a516:	4630      	mov	r0, r6
 800a518:	f3af 8000 	nop.w
 800a51c:	4607      	mov	r7, r0
 800a51e:	1c78      	adds	r0, r7, #1
 800a520:	d1d6      	bne.n	800a4d0 <_vfiprintf_r+0x1bc>
 800a522:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a524:	07d9      	lsls	r1, r3, #31
 800a526:	d405      	bmi.n	800a534 <_vfiprintf_r+0x220>
 800a528:	89ab      	ldrh	r3, [r5, #12]
 800a52a:	059a      	lsls	r2, r3, #22
 800a52c:	d402      	bmi.n	800a534 <_vfiprintf_r+0x220>
 800a52e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a530:	f000 fc35 	bl	800ad9e <__retarget_lock_release_recursive>
 800a534:	89ab      	ldrh	r3, [r5, #12]
 800a536:	065b      	lsls	r3, r3, #25
 800a538:	f53f af12 	bmi.w	800a360 <_vfiprintf_r+0x4c>
 800a53c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a53e:	e711      	b.n	800a364 <_vfiprintf_r+0x50>
 800a540:	ab03      	add	r3, sp, #12
 800a542:	9300      	str	r3, [sp, #0]
 800a544:	462a      	mov	r2, r5
 800a546:	4b09      	ldr	r3, [pc, #36]	; (800a56c <_vfiprintf_r+0x258>)
 800a548:	a904      	add	r1, sp, #16
 800a54a:	4630      	mov	r0, r6
 800a54c:	f000 f880 	bl	800a650 <_printf_i>
 800a550:	e7e4      	b.n	800a51c <_vfiprintf_r+0x208>
 800a552:	bf00      	nop
 800a554:	0800b2a0 	.word	0x0800b2a0
 800a558:	0800b2c0 	.word	0x0800b2c0
 800a55c:	0800b280 	.word	0x0800b280
 800a560:	0800b24a 	.word	0x0800b24a
 800a564:	0800b254 	.word	0x0800b254
 800a568:	00000000 	.word	0x00000000
 800a56c:	0800a2ef 	.word	0x0800a2ef
 800a570:	0800b250 	.word	0x0800b250

0800a574 <_printf_common>:
 800a574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a578:	4616      	mov	r6, r2
 800a57a:	4699      	mov	r9, r3
 800a57c:	688a      	ldr	r2, [r1, #8]
 800a57e:	690b      	ldr	r3, [r1, #16]
 800a580:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a584:	4293      	cmp	r3, r2
 800a586:	bfb8      	it	lt
 800a588:	4613      	movlt	r3, r2
 800a58a:	6033      	str	r3, [r6, #0]
 800a58c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a590:	4607      	mov	r7, r0
 800a592:	460c      	mov	r4, r1
 800a594:	b10a      	cbz	r2, 800a59a <_printf_common+0x26>
 800a596:	3301      	adds	r3, #1
 800a598:	6033      	str	r3, [r6, #0]
 800a59a:	6823      	ldr	r3, [r4, #0]
 800a59c:	0699      	lsls	r1, r3, #26
 800a59e:	bf42      	ittt	mi
 800a5a0:	6833      	ldrmi	r3, [r6, #0]
 800a5a2:	3302      	addmi	r3, #2
 800a5a4:	6033      	strmi	r3, [r6, #0]
 800a5a6:	6825      	ldr	r5, [r4, #0]
 800a5a8:	f015 0506 	ands.w	r5, r5, #6
 800a5ac:	d106      	bne.n	800a5bc <_printf_common+0x48>
 800a5ae:	f104 0a19 	add.w	sl, r4, #25
 800a5b2:	68e3      	ldr	r3, [r4, #12]
 800a5b4:	6832      	ldr	r2, [r6, #0]
 800a5b6:	1a9b      	subs	r3, r3, r2
 800a5b8:	42ab      	cmp	r3, r5
 800a5ba:	dc26      	bgt.n	800a60a <_printf_common+0x96>
 800a5bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a5c0:	1e13      	subs	r3, r2, #0
 800a5c2:	6822      	ldr	r2, [r4, #0]
 800a5c4:	bf18      	it	ne
 800a5c6:	2301      	movne	r3, #1
 800a5c8:	0692      	lsls	r2, r2, #26
 800a5ca:	d42b      	bmi.n	800a624 <_printf_common+0xb0>
 800a5cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a5d0:	4649      	mov	r1, r9
 800a5d2:	4638      	mov	r0, r7
 800a5d4:	47c0      	blx	r8
 800a5d6:	3001      	adds	r0, #1
 800a5d8:	d01e      	beq.n	800a618 <_printf_common+0xa4>
 800a5da:	6823      	ldr	r3, [r4, #0]
 800a5dc:	68e5      	ldr	r5, [r4, #12]
 800a5de:	6832      	ldr	r2, [r6, #0]
 800a5e0:	f003 0306 	and.w	r3, r3, #6
 800a5e4:	2b04      	cmp	r3, #4
 800a5e6:	bf08      	it	eq
 800a5e8:	1aad      	subeq	r5, r5, r2
 800a5ea:	68a3      	ldr	r3, [r4, #8]
 800a5ec:	6922      	ldr	r2, [r4, #16]
 800a5ee:	bf0c      	ite	eq
 800a5f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5f4:	2500      	movne	r5, #0
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	bfc4      	itt	gt
 800a5fa:	1a9b      	subgt	r3, r3, r2
 800a5fc:	18ed      	addgt	r5, r5, r3
 800a5fe:	2600      	movs	r6, #0
 800a600:	341a      	adds	r4, #26
 800a602:	42b5      	cmp	r5, r6
 800a604:	d11a      	bne.n	800a63c <_printf_common+0xc8>
 800a606:	2000      	movs	r0, #0
 800a608:	e008      	b.n	800a61c <_printf_common+0xa8>
 800a60a:	2301      	movs	r3, #1
 800a60c:	4652      	mov	r2, sl
 800a60e:	4649      	mov	r1, r9
 800a610:	4638      	mov	r0, r7
 800a612:	47c0      	blx	r8
 800a614:	3001      	adds	r0, #1
 800a616:	d103      	bne.n	800a620 <_printf_common+0xac>
 800a618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a61c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a620:	3501      	adds	r5, #1
 800a622:	e7c6      	b.n	800a5b2 <_printf_common+0x3e>
 800a624:	18e1      	adds	r1, r4, r3
 800a626:	1c5a      	adds	r2, r3, #1
 800a628:	2030      	movs	r0, #48	; 0x30
 800a62a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a62e:	4422      	add	r2, r4
 800a630:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a634:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a638:	3302      	adds	r3, #2
 800a63a:	e7c7      	b.n	800a5cc <_printf_common+0x58>
 800a63c:	2301      	movs	r3, #1
 800a63e:	4622      	mov	r2, r4
 800a640:	4649      	mov	r1, r9
 800a642:	4638      	mov	r0, r7
 800a644:	47c0      	blx	r8
 800a646:	3001      	adds	r0, #1
 800a648:	d0e6      	beq.n	800a618 <_printf_common+0xa4>
 800a64a:	3601      	adds	r6, #1
 800a64c:	e7d9      	b.n	800a602 <_printf_common+0x8e>
	...

0800a650 <_printf_i>:
 800a650:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a654:	7e0f      	ldrb	r7, [r1, #24]
 800a656:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a658:	2f78      	cmp	r7, #120	; 0x78
 800a65a:	4691      	mov	r9, r2
 800a65c:	4680      	mov	r8, r0
 800a65e:	460c      	mov	r4, r1
 800a660:	469a      	mov	sl, r3
 800a662:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a666:	d807      	bhi.n	800a678 <_printf_i+0x28>
 800a668:	2f62      	cmp	r7, #98	; 0x62
 800a66a:	d80a      	bhi.n	800a682 <_printf_i+0x32>
 800a66c:	2f00      	cmp	r7, #0
 800a66e:	f000 80d8 	beq.w	800a822 <_printf_i+0x1d2>
 800a672:	2f58      	cmp	r7, #88	; 0x58
 800a674:	f000 80a3 	beq.w	800a7be <_printf_i+0x16e>
 800a678:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a67c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a680:	e03a      	b.n	800a6f8 <_printf_i+0xa8>
 800a682:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a686:	2b15      	cmp	r3, #21
 800a688:	d8f6      	bhi.n	800a678 <_printf_i+0x28>
 800a68a:	a101      	add	r1, pc, #4	; (adr r1, 800a690 <_printf_i+0x40>)
 800a68c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a690:	0800a6e9 	.word	0x0800a6e9
 800a694:	0800a6fd 	.word	0x0800a6fd
 800a698:	0800a679 	.word	0x0800a679
 800a69c:	0800a679 	.word	0x0800a679
 800a6a0:	0800a679 	.word	0x0800a679
 800a6a4:	0800a679 	.word	0x0800a679
 800a6a8:	0800a6fd 	.word	0x0800a6fd
 800a6ac:	0800a679 	.word	0x0800a679
 800a6b0:	0800a679 	.word	0x0800a679
 800a6b4:	0800a679 	.word	0x0800a679
 800a6b8:	0800a679 	.word	0x0800a679
 800a6bc:	0800a809 	.word	0x0800a809
 800a6c0:	0800a72d 	.word	0x0800a72d
 800a6c4:	0800a7eb 	.word	0x0800a7eb
 800a6c8:	0800a679 	.word	0x0800a679
 800a6cc:	0800a679 	.word	0x0800a679
 800a6d0:	0800a82b 	.word	0x0800a82b
 800a6d4:	0800a679 	.word	0x0800a679
 800a6d8:	0800a72d 	.word	0x0800a72d
 800a6dc:	0800a679 	.word	0x0800a679
 800a6e0:	0800a679 	.word	0x0800a679
 800a6e4:	0800a7f3 	.word	0x0800a7f3
 800a6e8:	682b      	ldr	r3, [r5, #0]
 800a6ea:	1d1a      	adds	r2, r3, #4
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	602a      	str	r2, [r5, #0]
 800a6f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	e0a3      	b.n	800a844 <_printf_i+0x1f4>
 800a6fc:	6820      	ldr	r0, [r4, #0]
 800a6fe:	6829      	ldr	r1, [r5, #0]
 800a700:	0606      	lsls	r6, r0, #24
 800a702:	f101 0304 	add.w	r3, r1, #4
 800a706:	d50a      	bpl.n	800a71e <_printf_i+0xce>
 800a708:	680e      	ldr	r6, [r1, #0]
 800a70a:	602b      	str	r3, [r5, #0]
 800a70c:	2e00      	cmp	r6, #0
 800a70e:	da03      	bge.n	800a718 <_printf_i+0xc8>
 800a710:	232d      	movs	r3, #45	; 0x2d
 800a712:	4276      	negs	r6, r6
 800a714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a718:	485e      	ldr	r0, [pc, #376]	; (800a894 <_printf_i+0x244>)
 800a71a:	230a      	movs	r3, #10
 800a71c:	e019      	b.n	800a752 <_printf_i+0x102>
 800a71e:	680e      	ldr	r6, [r1, #0]
 800a720:	602b      	str	r3, [r5, #0]
 800a722:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a726:	bf18      	it	ne
 800a728:	b236      	sxthne	r6, r6
 800a72a:	e7ef      	b.n	800a70c <_printf_i+0xbc>
 800a72c:	682b      	ldr	r3, [r5, #0]
 800a72e:	6820      	ldr	r0, [r4, #0]
 800a730:	1d19      	adds	r1, r3, #4
 800a732:	6029      	str	r1, [r5, #0]
 800a734:	0601      	lsls	r1, r0, #24
 800a736:	d501      	bpl.n	800a73c <_printf_i+0xec>
 800a738:	681e      	ldr	r6, [r3, #0]
 800a73a:	e002      	b.n	800a742 <_printf_i+0xf2>
 800a73c:	0646      	lsls	r6, r0, #25
 800a73e:	d5fb      	bpl.n	800a738 <_printf_i+0xe8>
 800a740:	881e      	ldrh	r6, [r3, #0]
 800a742:	4854      	ldr	r0, [pc, #336]	; (800a894 <_printf_i+0x244>)
 800a744:	2f6f      	cmp	r7, #111	; 0x6f
 800a746:	bf0c      	ite	eq
 800a748:	2308      	moveq	r3, #8
 800a74a:	230a      	movne	r3, #10
 800a74c:	2100      	movs	r1, #0
 800a74e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a752:	6865      	ldr	r5, [r4, #4]
 800a754:	60a5      	str	r5, [r4, #8]
 800a756:	2d00      	cmp	r5, #0
 800a758:	bfa2      	ittt	ge
 800a75a:	6821      	ldrge	r1, [r4, #0]
 800a75c:	f021 0104 	bicge.w	r1, r1, #4
 800a760:	6021      	strge	r1, [r4, #0]
 800a762:	b90e      	cbnz	r6, 800a768 <_printf_i+0x118>
 800a764:	2d00      	cmp	r5, #0
 800a766:	d04d      	beq.n	800a804 <_printf_i+0x1b4>
 800a768:	4615      	mov	r5, r2
 800a76a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a76e:	fb03 6711 	mls	r7, r3, r1, r6
 800a772:	5dc7      	ldrb	r7, [r0, r7]
 800a774:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a778:	4637      	mov	r7, r6
 800a77a:	42bb      	cmp	r3, r7
 800a77c:	460e      	mov	r6, r1
 800a77e:	d9f4      	bls.n	800a76a <_printf_i+0x11a>
 800a780:	2b08      	cmp	r3, #8
 800a782:	d10b      	bne.n	800a79c <_printf_i+0x14c>
 800a784:	6823      	ldr	r3, [r4, #0]
 800a786:	07de      	lsls	r6, r3, #31
 800a788:	d508      	bpl.n	800a79c <_printf_i+0x14c>
 800a78a:	6923      	ldr	r3, [r4, #16]
 800a78c:	6861      	ldr	r1, [r4, #4]
 800a78e:	4299      	cmp	r1, r3
 800a790:	bfde      	ittt	le
 800a792:	2330      	movle	r3, #48	; 0x30
 800a794:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a798:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a79c:	1b52      	subs	r2, r2, r5
 800a79e:	6122      	str	r2, [r4, #16]
 800a7a0:	f8cd a000 	str.w	sl, [sp]
 800a7a4:	464b      	mov	r3, r9
 800a7a6:	aa03      	add	r2, sp, #12
 800a7a8:	4621      	mov	r1, r4
 800a7aa:	4640      	mov	r0, r8
 800a7ac:	f7ff fee2 	bl	800a574 <_printf_common>
 800a7b0:	3001      	adds	r0, #1
 800a7b2:	d14c      	bne.n	800a84e <_printf_i+0x1fe>
 800a7b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7b8:	b004      	add	sp, #16
 800a7ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7be:	4835      	ldr	r0, [pc, #212]	; (800a894 <_printf_i+0x244>)
 800a7c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a7c4:	6829      	ldr	r1, [r5, #0]
 800a7c6:	6823      	ldr	r3, [r4, #0]
 800a7c8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a7cc:	6029      	str	r1, [r5, #0]
 800a7ce:	061d      	lsls	r5, r3, #24
 800a7d0:	d514      	bpl.n	800a7fc <_printf_i+0x1ac>
 800a7d2:	07df      	lsls	r7, r3, #31
 800a7d4:	bf44      	itt	mi
 800a7d6:	f043 0320 	orrmi.w	r3, r3, #32
 800a7da:	6023      	strmi	r3, [r4, #0]
 800a7dc:	b91e      	cbnz	r6, 800a7e6 <_printf_i+0x196>
 800a7de:	6823      	ldr	r3, [r4, #0]
 800a7e0:	f023 0320 	bic.w	r3, r3, #32
 800a7e4:	6023      	str	r3, [r4, #0]
 800a7e6:	2310      	movs	r3, #16
 800a7e8:	e7b0      	b.n	800a74c <_printf_i+0xfc>
 800a7ea:	6823      	ldr	r3, [r4, #0]
 800a7ec:	f043 0320 	orr.w	r3, r3, #32
 800a7f0:	6023      	str	r3, [r4, #0]
 800a7f2:	2378      	movs	r3, #120	; 0x78
 800a7f4:	4828      	ldr	r0, [pc, #160]	; (800a898 <_printf_i+0x248>)
 800a7f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a7fa:	e7e3      	b.n	800a7c4 <_printf_i+0x174>
 800a7fc:	0659      	lsls	r1, r3, #25
 800a7fe:	bf48      	it	mi
 800a800:	b2b6      	uxthmi	r6, r6
 800a802:	e7e6      	b.n	800a7d2 <_printf_i+0x182>
 800a804:	4615      	mov	r5, r2
 800a806:	e7bb      	b.n	800a780 <_printf_i+0x130>
 800a808:	682b      	ldr	r3, [r5, #0]
 800a80a:	6826      	ldr	r6, [r4, #0]
 800a80c:	6961      	ldr	r1, [r4, #20]
 800a80e:	1d18      	adds	r0, r3, #4
 800a810:	6028      	str	r0, [r5, #0]
 800a812:	0635      	lsls	r5, r6, #24
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	d501      	bpl.n	800a81c <_printf_i+0x1cc>
 800a818:	6019      	str	r1, [r3, #0]
 800a81a:	e002      	b.n	800a822 <_printf_i+0x1d2>
 800a81c:	0670      	lsls	r0, r6, #25
 800a81e:	d5fb      	bpl.n	800a818 <_printf_i+0x1c8>
 800a820:	8019      	strh	r1, [r3, #0]
 800a822:	2300      	movs	r3, #0
 800a824:	6123      	str	r3, [r4, #16]
 800a826:	4615      	mov	r5, r2
 800a828:	e7ba      	b.n	800a7a0 <_printf_i+0x150>
 800a82a:	682b      	ldr	r3, [r5, #0]
 800a82c:	1d1a      	adds	r2, r3, #4
 800a82e:	602a      	str	r2, [r5, #0]
 800a830:	681d      	ldr	r5, [r3, #0]
 800a832:	6862      	ldr	r2, [r4, #4]
 800a834:	2100      	movs	r1, #0
 800a836:	4628      	mov	r0, r5
 800a838:	f7f5 fcca 	bl	80001d0 <memchr>
 800a83c:	b108      	cbz	r0, 800a842 <_printf_i+0x1f2>
 800a83e:	1b40      	subs	r0, r0, r5
 800a840:	6060      	str	r0, [r4, #4]
 800a842:	6863      	ldr	r3, [r4, #4]
 800a844:	6123      	str	r3, [r4, #16]
 800a846:	2300      	movs	r3, #0
 800a848:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a84c:	e7a8      	b.n	800a7a0 <_printf_i+0x150>
 800a84e:	6923      	ldr	r3, [r4, #16]
 800a850:	462a      	mov	r2, r5
 800a852:	4649      	mov	r1, r9
 800a854:	4640      	mov	r0, r8
 800a856:	47d0      	blx	sl
 800a858:	3001      	adds	r0, #1
 800a85a:	d0ab      	beq.n	800a7b4 <_printf_i+0x164>
 800a85c:	6823      	ldr	r3, [r4, #0]
 800a85e:	079b      	lsls	r3, r3, #30
 800a860:	d413      	bmi.n	800a88a <_printf_i+0x23a>
 800a862:	68e0      	ldr	r0, [r4, #12]
 800a864:	9b03      	ldr	r3, [sp, #12]
 800a866:	4298      	cmp	r0, r3
 800a868:	bfb8      	it	lt
 800a86a:	4618      	movlt	r0, r3
 800a86c:	e7a4      	b.n	800a7b8 <_printf_i+0x168>
 800a86e:	2301      	movs	r3, #1
 800a870:	4632      	mov	r2, r6
 800a872:	4649      	mov	r1, r9
 800a874:	4640      	mov	r0, r8
 800a876:	47d0      	blx	sl
 800a878:	3001      	adds	r0, #1
 800a87a:	d09b      	beq.n	800a7b4 <_printf_i+0x164>
 800a87c:	3501      	adds	r5, #1
 800a87e:	68e3      	ldr	r3, [r4, #12]
 800a880:	9903      	ldr	r1, [sp, #12]
 800a882:	1a5b      	subs	r3, r3, r1
 800a884:	42ab      	cmp	r3, r5
 800a886:	dcf2      	bgt.n	800a86e <_printf_i+0x21e>
 800a888:	e7eb      	b.n	800a862 <_printf_i+0x212>
 800a88a:	2500      	movs	r5, #0
 800a88c:	f104 0619 	add.w	r6, r4, #25
 800a890:	e7f5      	b.n	800a87e <_printf_i+0x22e>
 800a892:	bf00      	nop
 800a894:	0800b25b 	.word	0x0800b25b
 800a898:	0800b26c 	.word	0x0800b26c

0800a89c <__swbuf_r>:
 800a89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a89e:	460e      	mov	r6, r1
 800a8a0:	4614      	mov	r4, r2
 800a8a2:	4605      	mov	r5, r0
 800a8a4:	b118      	cbz	r0, 800a8ae <__swbuf_r+0x12>
 800a8a6:	6983      	ldr	r3, [r0, #24]
 800a8a8:	b90b      	cbnz	r3, 800a8ae <__swbuf_r+0x12>
 800a8aa:	f000 f9d9 	bl	800ac60 <__sinit>
 800a8ae:	4b21      	ldr	r3, [pc, #132]	; (800a934 <__swbuf_r+0x98>)
 800a8b0:	429c      	cmp	r4, r3
 800a8b2:	d12b      	bne.n	800a90c <__swbuf_r+0x70>
 800a8b4:	686c      	ldr	r4, [r5, #4]
 800a8b6:	69a3      	ldr	r3, [r4, #24]
 800a8b8:	60a3      	str	r3, [r4, #8]
 800a8ba:	89a3      	ldrh	r3, [r4, #12]
 800a8bc:	071a      	lsls	r2, r3, #28
 800a8be:	d52f      	bpl.n	800a920 <__swbuf_r+0x84>
 800a8c0:	6923      	ldr	r3, [r4, #16]
 800a8c2:	b36b      	cbz	r3, 800a920 <__swbuf_r+0x84>
 800a8c4:	6923      	ldr	r3, [r4, #16]
 800a8c6:	6820      	ldr	r0, [r4, #0]
 800a8c8:	1ac0      	subs	r0, r0, r3
 800a8ca:	6963      	ldr	r3, [r4, #20]
 800a8cc:	b2f6      	uxtb	r6, r6
 800a8ce:	4283      	cmp	r3, r0
 800a8d0:	4637      	mov	r7, r6
 800a8d2:	dc04      	bgt.n	800a8de <__swbuf_r+0x42>
 800a8d4:	4621      	mov	r1, r4
 800a8d6:	4628      	mov	r0, r5
 800a8d8:	f000 f92e 	bl	800ab38 <_fflush_r>
 800a8dc:	bb30      	cbnz	r0, 800a92c <__swbuf_r+0x90>
 800a8de:	68a3      	ldr	r3, [r4, #8]
 800a8e0:	3b01      	subs	r3, #1
 800a8e2:	60a3      	str	r3, [r4, #8]
 800a8e4:	6823      	ldr	r3, [r4, #0]
 800a8e6:	1c5a      	adds	r2, r3, #1
 800a8e8:	6022      	str	r2, [r4, #0]
 800a8ea:	701e      	strb	r6, [r3, #0]
 800a8ec:	6963      	ldr	r3, [r4, #20]
 800a8ee:	3001      	adds	r0, #1
 800a8f0:	4283      	cmp	r3, r0
 800a8f2:	d004      	beq.n	800a8fe <__swbuf_r+0x62>
 800a8f4:	89a3      	ldrh	r3, [r4, #12]
 800a8f6:	07db      	lsls	r3, r3, #31
 800a8f8:	d506      	bpl.n	800a908 <__swbuf_r+0x6c>
 800a8fa:	2e0a      	cmp	r6, #10
 800a8fc:	d104      	bne.n	800a908 <__swbuf_r+0x6c>
 800a8fe:	4621      	mov	r1, r4
 800a900:	4628      	mov	r0, r5
 800a902:	f000 f919 	bl	800ab38 <_fflush_r>
 800a906:	b988      	cbnz	r0, 800a92c <__swbuf_r+0x90>
 800a908:	4638      	mov	r0, r7
 800a90a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a90c:	4b0a      	ldr	r3, [pc, #40]	; (800a938 <__swbuf_r+0x9c>)
 800a90e:	429c      	cmp	r4, r3
 800a910:	d101      	bne.n	800a916 <__swbuf_r+0x7a>
 800a912:	68ac      	ldr	r4, [r5, #8]
 800a914:	e7cf      	b.n	800a8b6 <__swbuf_r+0x1a>
 800a916:	4b09      	ldr	r3, [pc, #36]	; (800a93c <__swbuf_r+0xa0>)
 800a918:	429c      	cmp	r4, r3
 800a91a:	bf08      	it	eq
 800a91c:	68ec      	ldreq	r4, [r5, #12]
 800a91e:	e7ca      	b.n	800a8b6 <__swbuf_r+0x1a>
 800a920:	4621      	mov	r1, r4
 800a922:	4628      	mov	r0, r5
 800a924:	f000 f80c 	bl	800a940 <__swsetup_r>
 800a928:	2800      	cmp	r0, #0
 800a92a:	d0cb      	beq.n	800a8c4 <__swbuf_r+0x28>
 800a92c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a930:	e7ea      	b.n	800a908 <__swbuf_r+0x6c>
 800a932:	bf00      	nop
 800a934:	0800b2a0 	.word	0x0800b2a0
 800a938:	0800b2c0 	.word	0x0800b2c0
 800a93c:	0800b280 	.word	0x0800b280

0800a940 <__swsetup_r>:
 800a940:	4b32      	ldr	r3, [pc, #200]	; (800aa0c <__swsetup_r+0xcc>)
 800a942:	b570      	push	{r4, r5, r6, lr}
 800a944:	681d      	ldr	r5, [r3, #0]
 800a946:	4606      	mov	r6, r0
 800a948:	460c      	mov	r4, r1
 800a94a:	b125      	cbz	r5, 800a956 <__swsetup_r+0x16>
 800a94c:	69ab      	ldr	r3, [r5, #24]
 800a94e:	b913      	cbnz	r3, 800a956 <__swsetup_r+0x16>
 800a950:	4628      	mov	r0, r5
 800a952:	f000 f985 	bl	800ac60 <__sinit>
 800a956:	4b2e      	ldr	r3, [pc, #184]	; (800aa10 <__swsetup_r+0xd0>)
 800a958:	429c      	cmp	r4, r3
 800a95a:	d10f      	bne.n	800a97c <__swsetup_r+0x3c>
 800a95c:	686c      	ldr	r4, [r5, #4]
 800a95e:	89a3      	ldrh	r3, [r4, #12]
 800a960:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a964:	0719      	lsls	r1, r3, #28
 800a966:	d42c      	bmi.n	800a9c2 <__swsetup_r+0x82>
 800a968:	06dd      	lsls	r5, r3, #27
 800a96a:	d411      	bmi.n	800a990 <__swsetup_r+0x50>
 800a96c:	2309      	movs	r3, #9
 800a96e:	6033      	str	r3, [r6, #0]
 800a970:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a974:	81a3      	strh	r3, [r4, #12]
 800a976:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a97a:	e03e      	b.n	800a9fa <__swsetup_r+0xba>
 800a97c:	4b25      	ldr	r3, [pc, #148]	; (800aa14 <__swsetup_r+0xd4>)
 800a97e:	429c      	cmp	r4, r3
 800a980:	d101      	bne.n	800a986 <__swsetup_r+0x46>
 800a982:	68ac      	ldr	r4, [r5, #8]
 800a984:	e7eb      	b.n	800a95e <__swsetup_r+0x1e>
 800a986:	4b24      	ldr	r3, [pc, #144]	; (800aa18 <__swsetup_r+0xd8>)
 800a988:	429c      	cmp	r4, r3
 800a98a:	bf08      	it	eq
 800a98c:	68ec      	ldreq	r4, [r5, #12]
 800a98e:	e7e6      	b.n	800a95e <__swsetup_r+0x1e>
 800a990:	0758      	lsls	r0, r3, #29
 800a992:	d512      	bpl.n	800a9ba <__swsetup_r+0x7a>
 800a994:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a996:	b141      	cbz	r1, 800a9aa <__swsetup_r+0x6a>
 800a998:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a99c:	4299      	cmp	r1, r3
 800a99e:	d002      	beq.n	800a9a6 <__swsetup_r+0x66>
 800a9a0:	4630      	mov	r0, r6
 800a9a2:	f7ff fac9 	bl	8009f38 <_free_r>
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	6363      	str	r3, [r4, #52]	; 0x34
 800a9aa:	89a3      	ldrh	r3, [r4, #12]
 800a9ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a9b0:	81a3      	strh	r3, [r4, #12]
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	6063      	str	r3, [r4, #4]
 800a9b6:	6923      	ldr	r3, [r4, #16]
 800a9b8:	6023      	str	r3, [r4, #0]
 800a9ba:	89a3      	ldrh	r3, [r4, #12]
 800a9bc:	f043 0308 	orr.w	r3, r3, #8
 800a9c0:	81a3      	strh	r3, [r4, #12]
 800a9c2:	6923      	ldr	r3, [r4, #16]
 800a9c4:	b94b      	cbnz	r3, 800a9da <__swsetup_r+0x9a>
 800a9c6:	89a3      	ldrh	r3, [r4, #12]
 800a9c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a9cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9d0:	d003      	beq.n	800a9da <__swsetup_r+0x9a>
 800a9d2:	4621      	mov	r1, r4
 800a9d4:	4630      	mov	r0, r6
 800a9d6:	f000 fa09 	bl	800adec <__smakebuf_r>
 800a9da:	89a0      	ldrh	r0, [r4, #12]
 800a9dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a9e0:	f010 0301 	ands.w	r3, r0, #1
 800a9e4:	d00a      	beq.n	800a9fc <__swsetup_r+0xbc>
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	60a3      	str	r3, [r4, #8]
 800a9ea:	6963      	ldr	r3, [r4, #20]
 800a9ec:	425b      	negs	r3, r3
 800a9ee:	61a3      	str	r3, [r4, #24]
 800a9f0:	6923      	ldr	r3, [r4, #16]
 800a9f2:	b943      	cbnz	r3, 800aa06 <__swsetup_r+0xc6>
 800a9f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a9f8:	d1ba      	bne.n	800a970 <__swsetup_r+0x30>
 800a9fa:	bd70      	pop	{r4, r5, r6, pc}
 800a9fc:	0781      	lsls	r1, r0, #30
 800a9fe:	bf58      	it	pl
 800aa00:	6963      	ldrpl	r3, [r4, #20]
 800aa02:	60a3      	str	r3, [r4, #8]
 800aa04:	e7f4      	b.n	800a9f0 <__swsetup_r+0xb0>
 800aa06:	2000      	movs	r0, #0
 800aa08:	e7f7      	b.n	800a9fa <__swsetup_r+0xba>
 800aa0a:	bf00      	nop
 800aa0c:	20000070 	.word	0x20000070
 800aa10:	0800b2a0 	.word	0x0800b2a0
 800aa14:	0800b2c0 	.word	0x0800b2c0
 800aa18:	0800b280 	.word	0x0800b280

0800aa1c <abort>:
 800aa1c:	b508      	push	{r3, lr}
 800aa1e:	2006      	movs	r0, #6
 800aa20:	f000 fa4c 	bl	800aebc <raise>
 800aa24:	2001      	movs	r0, #1
 800aa26:	f7fe ffc3 	bl	80099b0 <_exit>
	...

0800aa2c <__sflush_r>:
 800aa2c:	898a      	ldrh	r2, [r1, #12]
 800aa2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa32:	4605      	mov	r5, r0
 800aa34:	0710      	lsls	r0, r2, #28
 800aa36:	460c      	mov	r4, r1
 800aa38:	d458      	bmi.n	800aaec <__sflush_r+0xc0>
 800aa3a:	684b      	ldr	r3, [r1, #4]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	dc05      	bgt.n	800aa4c <__sflush_r+0x20>
 800aa40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	dc02      	bgt.n	800aa4c <__sflush_r+0x20>
 800aa46:	2000      	movs	r0, #0
 800aa48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa4e:	2e00      	cmp	r6, #0
 800aa50:	d0f9      	beq.n	800aa46 <__sflush_r+0x1a>
 800aa52:	2300      	movs	r3, #0
 800aa54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aa58:	682f      	ldr	r7, [r5, #0]
 800aa5a:	602b      	str	r3, [r5, #0]
 800aa5c:	d032      	beq.n	800aac4 <__sflush_r+0x98>
 800aa5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aa60:	89a3      	ldrh	r3, [r4, #12]
 800aa62:	075a      	lsls	r2, r3, #29
 800aa64:	d505      	bpl.n	800aa72 <__sflush_r+0x46>
 800aa66:	6863      	ldr	r3, [r4, #4]
 800aa68:	1ac0      	subs	r0, r0, r3
 800aa6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aa6c:	b10b      	cbz	r3, 800aa72 <__sflush_r+0x46>
 800aa6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa70:	1ac0      	subs	r0, r0, r3
 800aa72:	2300      	movs	r3, #0
 800aa74:	4602      	mov	r2, r0
 800aa76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa78:	6a21      	ldr	r1, [r4, #32]
 800aa7a:	4628      	mov	r0, r5
 800aa7c:	47b0      	blx	r6
 800aa7e:	1c43      	adds	r3, r0, #1
 800aa80:	89a3      	ldrh	r3, [r4, #12]
 800aa82:	d106      	bne.n	800aa92 <__sflush_r+0x66>
 800aa84:	6829      	ldr	r1, [r5, #0]
 800aa86:	291d      	cmp	r1, #29
 800aa88:	d82c      	bhi.n	800aae4 <__sflush_r+0xb8>
 800aa8a:	4a2a      	ldr	r2, [pc, #168]	; (800ab34 <__sflush_r+0x108>)
 800aa8c:	40ca      	lsrs	r2, r1
 800aa8e:	07d6      	lsls	r6, r2, #31
 800aa90:	d528      	bpl.n	800aae4 <__sflush_r+0xb8>
 800aa92:	2200      	movs	r2, #0
 800aa94:	6062      	str	r2, [r4, #4]
 800aa96:	04d9      	lsls	r1, r3, #19
 800aa98:	6922      	ldr	r2, [r4, #16]
 800aa9a:	6022      	str	r2, [r4, #0]
 800aa9c:	d504      	bpl.n	800aaa8 <__sflush_r+0x7c>
 800aa9e:	1c42      	adds	r2, r0, #1
 800aaa0:	d101      	bne.n	800aaa6 <__sflush_r+0x7a>
 800aaa2:	682b      	ldr	r3, [r5, #0]
 800aaa4:	b903      	cbnz	r3, 800aaa8 <__sflush_r+0x7c>
 800aaa6:	6560      	str	r0, [r4, #84]	; 0x54
 800aaa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aaaa:	602f      	str	r7, [r5, #0]
 800aaac:	2900      	cmp	r1, #0
 800aaae:	d0ca      	beq.n	800aa46 <__sflush_r+0x1a>
 800aab0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aab4:	4299      	cmp	r1, r3
 800aab6:	d002      	beq.n	800aabe <__sflush_r+0x92>
 800aab8:	4628      	mov	r0, r5
 800aaba:	f7ff fa3d 	bl	8009f38 <_free_r>
 800aabe:	2000      	movs	r0, #0
 800aac0:	6360      	str	r0, [r4, #52]	; 0x34
 800aac2:	e7c1      	b.n	800aa48 <__sflush_r+0x1c>
 800aac4:	6a21      	ldr	r1, [r4, #32]
 800aac6:	2301      	movs	r3, #1
 800aac8:	4628      	mov	r0, r5
 800aaca:	47b0      	blx	r6
 800aacc:	1c41      	adds	r1, r0, #1
 800aace:	d1c7      	bne.n	800aa60 <__sflush_r+0x34>
 800aad0:	682b      	ldr	r3, [r5, #0]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d0c4      	beq.n	800aa60 <__sflush_r+0x34>
 800aad6:	2b1d      	cmp	r3, #29
 800aad8:	d001      	beq.n	800aade <__sflush_r+0xb2>
 800aada:	2b16      	cmp	r3, #22
 800aadc:	d101      	bne.n	800aae2 <__sflush_r+0xb6>
 800aade:	602f      	str	r7, [r5, #0]
 800aae0:	e7b1      	b.n	800aa46 <__sflush_r+0x1a>
 800aae2:	89a3      	ldrh	r3, [r4, #12]
 800aae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aae8:	81a3      	strh	r3, [r4, #12]
 800aaea:	e7ad      	b.n	800aa48 <__sflush_r+0x1c>
 800aaec:	690f      	ldr	r7, [r1, #16]
 800aaee:	2f00      	cmp	r7, #0
 800aaf0:	d0a9      	beq.n	800aa46 <__sflush_r+0x1a>
 800aaf2:	0793      	lsls	r3, r2, #30
 800aaf4:	680e      	ldr	r6, [r1, #0]
 800aaf6:	bf08      	it	eq
 800aaf8:	694b      	ldreq	r3, [r1, #20]
 800aafa:	600f      	str	r7, [r1, #0]
 800aafc:	bf18      	it	ne
 800aafe:	2300      	movne	r3, #0
 800ab00:	eba6 0807 	sub.w	r8, r6, r7
 800ab04:	608b      	str	r3, [r1, #8]
 800ab06:	f1b8 0f00 	cmp.w	r8, #0
 800ab0a:	dd9c      	ble.n	800aa46 <__sflush_r+0x1a>
 800ab0c:	6a21      	ldr	r1, [r4, #32]
 800ab0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ab10:	4643      	mov	r3, r8
 800ab12:	463a      	mov	r2, r7
 800ab14:	4628      	mov	r0, r5
 800ab16:	47b0      	blx	r6
 800ab18:	2800      	cmp	r0, #0
 800ab1a:	dc06      	bgt.n	800ab2a <__sflush_r+0xfe>
 800ab1c:	89a3      	ldrh	r3, [r4, #12]
 800ab1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab22:	81a3      	strh	r3, [r4, #12]
 800ab24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab28:	e78e      	b.n	800aa48 <__sflush_r+0x1c>
 800ab2a:	4407      	add	r7, r0
 800ab2c:	eba8 0800 	sub.w	r8, r8, r0
 800ab30:	e7e9      	b.n	800ab06 <__sflush_r+0xda>
 800ab32:	bf00      	nop
 800ab34:	20400001 	.word	0x20400001

0800ab38 <_fflush_r>:
 800ab38:	b538      	push	{r3, r4, r5, lr}
 800ab3a:	690b      	ldr	r3, [r1, #16]
 800ab3c:	4605      	mov	r5, r0
 800ab3e:	460c      	mov	r4, r1
 800ab40:	b913      	cbnz	r3, 800ab48 <_fflush_r+0x10>
 800ab42:	2500      	movs	r5, #0
 800ab44:	4628      	mov	r0, r5
 800ab46:	bd38      	pop	{r3, r4, r5, pc}
 800ab48:	b118      	cbz	r0, 800ab52 <_fflush_r+0x1a>
 800ab4a:	6983      	ldr	r3, [r0, #24]
 800ab4c:	b90b      	cbnz	r3, 800ab52 <_fflush_r+0x1a>
 800ab4e:	f000 f887 	bl	800ac60 <__sinit>
 800ab52:	4b14      	ldr	r3, [pc, #80]	; (800aba4 <_fflush_r+0x6c>)
 800ab54:	429c      	cmp	r4, r3
 800ab56:	d11b      	bne.n	800ab90 <_fflush_r+0x58>
 800ab58:	686c      	ldr	r4, [r5, #4]
 800ab5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d0ef      	beq.n	800ab42 <_fflush_r+0xa>
 800ab62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ab64:	07d0      	lsls	r0, r2, #31
 800ab66:	d404      	bmi.n	800ab72 <_fflush_r+0x3a>
 800ab68:	0599      	lsls	r1, r3, #22
 800ab6a:	d402      	bmi.n	800ab72 <_fflush_r+0x3a>
 800ab6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab6e:	f000 f915 	bl	800ad9c <__retarget_lock_acquire_recursive>
 800ab72:	4628      	mov	r0, r5
 800ab74:	4621      	mov	r1, r4
 800ab76:	f7ff ff59 	bl	800aa2c <__sflush_r>
 800ab7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab7c:	07da      	lsls	r2, r3, #31
 800ab7e:	4605      	mov	r5, r0
 800ab80:	d4e0      	bmi.n	800ab44 <_fflush_r+0xc>
 800ab82:	89a3      	ldrh	r3, [r4, #12]
 800ab84:	059b      	lsls	r3, r3, #22
 800ab86:	d4dd      	bmi.n	800ab44 <_fflush_r+0xc>
 800ab88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab8a:	f000 f908 	bl	800ad9e <__retarget_lock_release_recursive>
 800ab8e:	e7d9      	b.n	800ab44 <_fflush_r+0xc>
 800ab90:	4b05      	ldr	r3, [pc, #20]	; (800aba8 <_fflush_r+0x70>)
 800ab92:	429c      	cmp	r4, r3
 800ab94:	d101      	bne.n	800ab9a <_fflush_r+0x62>
 800ab96:	68ac      	ldr	r4, [r5, #8]
 800ab98:	e7df      	b.n	800ab5a <_fflush_r+0x22>
 800ab9a:	4b04      	ldr	r3, [pc, #16]	; (800abac <_fflush_r+0x74>)
 800ab9c:	429c      	cmp	r4, r3
 800ab9e:	bf08      	it	eq
 800aba0:	68ec      	ldreq	r4, [r5, #12]
 800aba2:	e7da      	b.n	800ab5a <_fflush_r+0x22>
 800aba4:	0800b2a0 	.word	0x0800b2a0
 800aba8:	0800b2c0 	.word	0x0800b2c0
 800abac:	0800b280 	.word	0x0800b280

0800abb0 <std>:
 800abb0:	2300      	movs	r3, #0
 800abb2:	b510      	push	{r4, lr}
 800abb4:	4604      	mov	r4, r0
 800abb6:	e9c0 3300 	strd	r3, r3, [r0]
 800abba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800abbe:	6083      	str	r3, [r0, #8]
 800abc0:	8181      	strh	r1, [r0, #12]
 800abc2:	6643      	str	r3, [r0, #100]	; 0x64
 800abc4:	81c2      	strh	r2, [r0, #14]
 800abc6:	6183      	str	r3, [r0, #24]
 800abc8:	4619      	mov	r1, r3
 800abca:	2208      	movs	r2, #8
 800abcc:	305c      	adds	r0, #92	; 0x5c
 800abce:	f7ff f9ab 	bl	8009f28 <memset>
 800abd2:	4b05      	ldr	r3, [pc, #20]	; (800abe8 <std+0x38>)
 800abd4:	6263      	str	r3, [r4, #36]	; 0x24
 800abd6:	4b05      	ldr	r3, [pc, #20]	; (800abec <std+0x3c>)
 800abd8:	62a3      	str	r3, [r4, #40]	; 0x28
 800abda:	4b05      	ldr	r3, [pc, #20]	; (800abf0 <std+0x40>)
 800abdc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800abde:	4b05      	ldr	r3, [pc, #20]	; (800abf4 <std+0x44>)
 800abe0:	6224      	str	r4, [r4, #32]
 800abe2:	6323      	str	r3, [r4, #48]	; 0x30
 800abe4:	bd10      	pop	{r4, pc}
 800abe6:	bf00      	nop
 800abe8:	0800aef5 	.word	0x0800aef5
 800abec:	0800af17 	.word	0x0800af17
 800abf0:	0800af4f 	.word	0x0800af4f
 800abf4:	0800af73 	.word	0x0800af73

0800abf8 <_cleanup_r>:
 800abf8:	4901      	ldr	r1, [pc, #4]	; (800ac00 <_cleanup_r+0x8>)
 800abfa:	f000 b8af 	b.w	800ad5c <_fwalk_reent>
 800abfe:	bf00      	nop
 800ac00:	0800ab39 	.word	0x0800ab39

0800ac04 <__sfmoreglue>:
 800ac04:	b570      	push	{r4, r5, r6, lr}
 800ac06:	2268      	movs	r2, #104	; 0x68
 800ac08:	1e4d      	subs	r5, r1, #1
 800ac0a:	4355      	muls	r5, r2
 800ac0c:	460e      	mov	r6, r1
 800ac0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ac12:	f7ff f9fd 	bl	800a010 <_malloc_r>
 800ac16:	4604      	mov	r4, r0
 800ac18:	b140      	cbz	r0, 800ac2c <__sfmoreglue+0x28>
 800ac1a:	2100      	movs	r1, #0
 800ac1c:	e9c0 1600 	strd	r1, r6, [r0]
 800ac20:	300c      	adds	r0, #12
 800ac22:	60a0      	str	r0, [r4, #8]
 800ac24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ac28:	f7ff f97e 	bl	8009f28 <memset>
 800ac2c:	4620      	mov	r0, r4
 800ac2e:	bd70      	pop	{r4, r5, r6, pc}

0800ac30 <__sfp_lock_acquire>:
 800ac30:	4801      	ldr	r0, [pc, #4]	; (800ac38 <__sfp_lock_acquire+0x8>)
 800ac32:	f000 b8b3 	b.w	800ad9c <__retarget_lock_acquire_recursive>
 800ac36:	bf00      	nop
 800ac38:	20003ce1 	.word	0x20003ce1

0800ac3c <__sfp_lock_release>:
 800ac3c:	4801      	ldr	r0, [pc, #4]	; (800ac44 <__sfp_lock_release+0x8>)
 800ac3e:	f000 b8ae 	b.w	800ad9e <__retarget_lock_release_recursive>
 800ac42:	bf00      	nop
 800ac44:	20003ce1 	.word	0x20003ce1

0800ac48 <__sinit_lock_acquire>:
 800ac48:	4801      	ldr	r0, [pc, #4]	; (800ac50 <__sinit_lock_acquire+0x8>)
 800ac4a:	f000 b8a7 	b.w	800ad9c <__retarget_lock_acquire_recursive>
 800ac4e:	bf00      	nop
 800ac50:	20003ce2 	.word	0x20003ce2

0800ac54 <__sinit_lock_release>:
 800ac54:	4801      	ldr	r0, [pc, #4]	; (800ac5c <__sinit_lock_release+0x8>)
 800ac56:	f000 b8a2 	b.w	800ad9e <__retarget_lock_release_recursive>
 800ac5a:	bf00      	nop
 800ac5c:	20003ce2 	.word	0x20003ce2

0800ac60 <__sinit>:
 800ac60:	b510      	push	{r4, lr}
 800ac62:	4604      	mov	r4, r0
 800ac64:	f7ff fff0 	bl	800ac48 <__sinit_lock_acquire>
 800ac68:	69a3      	ldr	r3, [r4, #24]
 800ac6a:	b11b      	cbz	r3, 800ac74 <__sinit+0x14>
 800ac6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac70:	f7ff bff0 	b.w	800ac54 <__sinit_lock_release>
 800ac74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ac78:	6523      	str	r3, [r4, #80]	; 0x50
 800ac7a:	4b13      	ldr	r3, [pc, #76]	; (800acc8 <__sinit+0x68>)
 800ac7c:	4a13      	ldr	r2, [pc, #76]	; (800accc <__sinit+0x6c>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	62a2      	str	r2, [r4, #40]	; 0x28
 800ac82:	42a3      	cmp	r3, r4
 800ac84:	bf04      	itt	eq
 800ac86:	2301      	moveq	r3, #1
 800ac88:	61a3      	streq	r3, [r4, #24]
 800ac8a:	4620      	mov	r0, r4
 800ac8c:	f000 f820 	bl	800acd0 <__sfp>
 800ac90:	6060      	str	r0, [r4, #4]
 800ac92:	4620      	mov	r0, r4
 800ac94:	f000 f81c 	bl	800acd0 <__sfp>
 800ac98:	60a0      	str	r0, [r4, #8]
 800ac9a:	4620      	mov	r0, r4
 800ac9c:	f000 f818 	bl	800acd0 <__sfp>
 800aca0:	2200      	movs	r2, #0
 800aca2:	60e0      	str	r0, [r4, #12]
 800aca4:	2104      	movs	r1, #4
 800aca6:	6860      	ldr	r0, [r4, #4]
 800aca8:	f7ff ff82 	bl	800abb0 <std>
 800acac:	68a0      	ldr	r0, [r4, #8]
 800acae:	2201      	movs	r2, #1
 800acb0:	2109      	movs	r1, #9
 800acb2:	f7ff ff7d 	bl	800abb0 <std>
 800acb6:	68e0      	ldr	r0, [r4, #12]
 800acb8:	2202      	movs	r2, #2
 800acba:	2112      	movs	r1, #18
 800acbc:	f7ff ff78 	bl	800abb0 <std>
 800acc0:	2301      	movs	r3, #1
 800acc2:	61a3      	str	r3, [r4, #24]
 800acc4:	e7d2      	b.n	800ac6c <__sinit+0xc>
 800acc6:	bf00      	nop
 800acc8:	0800b198 	.word	0x0800b198
 800accc:	0800abf9 	.word	0x0800abf9

0800acd0 <__sfp>:
 800acd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acd2:	4607      	mov	r7, r0
 800acd4:	f7ff ffac 	bl	800ac30 <__sfp_lock_acquire>
 800acd8:	4b1e      	ldr	r3, [pc, #120]	; (800ad54 <__sfp+0x84>)
 800acda:	681e      	ldr	r6, [r3, #0]
 800acdc:	69b3      	ldr	r3, [r6, #24]
 800acde:	b913      	cbnz	r3, 800ace6 <__sfp+0x16>
 800ace0:	4630      	mov	r0, r6
 800ace2:	f7ff ffbd 	bl	800ac60 <__sinit>
 800ace6:	3648      	adds	r6, #72	; 0x48
 800ace8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800acec:	3b01      	subs	r3, #1
 800acee:	d503      	bpl.n	800acf8 <__sfp+0x28>
 800acf0:	6833      	ldr	r3, [r6, #0]
 800acf2:	b30b      	cbz	r3, 800ad38 <__sfp+0x68>
 800acf4:	6836      	ldr	r6, [r6, #0]
 800acf6:	e7f7      	b.n	800ace8 <__sfp+0x18>
 800acf8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800acfc:	b9d5      	cbnz	r5, 800ad34 <__sfp+0x64>
 800acfe:	4b16      	ldr	r3, [pc, #88]	; (800ad58 <__sfp+0x88>)
 800ad00:	60e3      	str	r3, [r4, #12]
 800ad02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ad06:	6665      	str	r5, [r4, #100]	; 0x64
 800ad08:	f000 f847 	bl	800ad9a <__retarget_lock_init_recursive>
 800ad0c:	f7ff ff96 	bl	800ac3c <__sfp_lock_release>
 800ad10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ad14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ad18:	6025      	str	r5, [r4, #0]
 800ad1a:	61a5      	str	r5, [r4, #24]
 800ad1c:	2208      	movs	r2, #8
 800ad1e:	4629      	mov	r1, r5
 800ad20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ad24:	f7ff f900 	bl	8009f28 <memset>
 800ad28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ad2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ad30:	4620      	mov	r0, r4
 800ad32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad34:	3468      	adds	r4, #104	; 0x68
 800ad36:	e7d9      	b.n	800acec <__sfp+0x1c>
 800ad38:	2104      	movs	r1, #4
 800ad3a:	4638      	mov	r0, r7
 800ad3c:	f7ff ff62 	bl	800ac04 <__sfmoreglue>
 800ad40:	4604      	mov	r4, r0
 800ad42:	6030      	str	r0, [r6, #0]
 800ad44:	2800      	cmp	r0, #0
 800ad46:	d1d5      	bne.n	800acf4 <__sfp+0x24>
 800ad48:	f7ff ff78 	bl	800ac3c <__sfp_lock_release>
 800ad4c:	230c      	movs	r3, #12
 800ad4e:	603b      	str	r3, [r7, #0]
 800ad50:	e7ee      	b.n	800ad30 <__sfp+0x60>
 800ad52:	bf00      	nop
 800ad54:	0800b198 	.word	0x0800b198
 800ad58:	ffff0001 	.word	0xffff0001

0800ad5c <_fwalk_reent>:
 800ad5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad60:	4606      	mov	r6, r0
 800ad62:	4688      	mov	r8, r1
 800ad64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ad68:	2700      	movs	r7, #0
 800ad6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad6e:	f1b9 0901 	subs.w	r9, r9, #1
 800ad72:	d505      	bpl.n	800ad80 <_fwalk_reent+0x24>
 800ad74:	6824      	ldr	r4, [r4, #0]
 800ad76:	2c00      	cmp	r4, #0
 800ad78:	d1f7      	bne.n	800ad6a <_fwalk_reent+0xe>
 800ad7a:	4638      	mov	r0, r7
 800ad7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad80:	89ab      	ldrh	r3, [r5, #12]
 800ad82:	2b01      	cmp	r3, #1
 800ad84:	d907      	bls.n	800ad96 <_fwalk_reent+0x3a>
 800ad86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	d003      	beq.n	800ad96 <_fwalk_reent+0x3a>
 800ad8e:	4629      	mov	r1, r5
 800ad90:	4630      	mov	r0, r6
 800ad92:	47c0      	blx	r8
 800ad94:	4307      	orrs	r7, r0
 800ad96:	3568      	adds	r5, #104	; 0x68
 800ad98:	e7e9      	b.n	800ad6e <_fwalk_reent+0x12>

0800ad9a <__retarget_lock_init_recursive>:
 800ad9a:	4770      	bx	lr

0800ad9c <__retarget_lock_acquire_recursive>:
 800ad9c:	4770      	bx	lr

0800ad9e <__retarget_lock_release_recursive>:
 800ad9e:	4770      	bx	lr

0800ada0 <__swhatbuf_r>:
 800ada0:	b570      	push	{r4, r5, r6, lr}
 800ada2:	460e      	mov	r6, r1
 800ada4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ada8:	2900      	cmp	r1, #0
 800adaa:	b096      	sub	sp, #88	; 0x58
 800adac:	4614      	mov	r4, r2
 800adae:	461d      	mov	r5, r3
 800adb0:	da08      	bge.n	800adc4 <__swhatbuf_r+0x24>
 800adb2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800adb6:	2200      	movs	r2, #0
 800adb8:	602a      	str	r2, [r5, #0]
 800adba:	061a      	lsls	r2, r3, #24
 800adbc:	d410      	bmi.n	800ade0 <__swhatbuf_r+0x40>
 800adbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adc2:	e00e      	b.n	800ade2 <__swhatbuf_r+0x42>
 800adc4:	466a      	mov	r2, sp
 800adc6:	f000 f8fb 	bl	800afc0 <_fstat_r>
 800adca:	2800      	cmp	r0, #0
 800adcc:	dbf1      	blt.n	800adb2 <__swhatbuf_r+0x12>
 800adce:	9a01      	ldr	r2, [sp, #4]
 800add0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800add4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800add8:	425a      	negs	r2, r3
 800adda:	415a      	adcs	r2, r3
 800addc:	602a      	str	r2, [r5, #0]
 800adde:	e7ee      	b.n	800adbe <__swhatbuf_r+0x1e>
 800ade0:	2340      	movs	r3, #64	; 0x40
 800ade2:	2000      	movs	r0, #0
 800ade4:	6023      	str	r3, [r4, #0]
 800ade6:	b016      	add	sp, #88	; 0x58
 800ade8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800adec <__smakebuf_r>:
 800adec:	898b      	ldrh	r3, [r1, #12]
 800adee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800adf0:	079d      	lsls	r5, r3, #30
 800adf2:	4606      	mov	r6, r0
 800adf4:	460c      	mov	r4, r1
 800adf6:	d507      	bpl.n	800ae08 <__smakebuf_r+0x1c>
 800adf8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800adfc:	6023      	str	r3, [r4, #0]
 800adfe:	6123      	str	r3, [r4, #16]
 800ae00:	2301      	movs	r3, #1
 800ae02:	6163      	str	r3, [r4, #20]
 800ae04:	b002      	add	sp, #8
 800ae06:	bd70      	pop	{r4, r5, r6, pc}
 800ae08:	ab01      	add	r3, sp, #4
 800ae0a:	466a      	mov	r2, sp
 800ae0c:	f7ff ffc8 	bl	800ada0 <__swhatbuf_r>
 800ae10:	9900      	ldr	r1, [sp, #0]
 800ae12:	4605      	mov	r5, r0
 800ae14:	4630      	mov	r0, r6
 800ae16:	f7ff f8fb 	bl	800a010 <_malloc_r>
 800ae1a:	b948      	cbnz	r0, 800ae30 <__smakebuf_r+0x44>
 800ae1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae20:	059a      	lsls	r2, r3, #22
 800ae22:	d4ef      	bmi.n	800ae04 <__smakebuf_r+0x18>
 800ae24:	f023 0303 	bic.w	r3, r3, #3
 800ae28:	f043 0302 	orr.w	r3, r3, #2
 800ae2c:	81a3      	strh	r3, [r4, #12]
 800ae2e:	e7e3      	b.n	800adf8 <__smakebuf_r+0xc>
 800ae30:	4b0d      	ldr	r3, [pc, #52]	; (800ae68 <__smakebuf_r+0x7c>)
 800ae32:	62b3      	str	r3, [r6, #40]	; 0x28
 800ae34:	89a3      	ldrh	r3, [r4, #12]
 800ae36:	6020      	str	r0, [r4, #0]
 800ae38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae3c:	81a3      	strh	r3, [r4, #12]
 800ae3e:	9b00      	ldr	r3, [sp, #0]
 800ae40:	6163      	str	r3, [r4, #20]
 800ae42:	9b01      	ldr	r3, [sp, #4]
 800ae44:	6120      	str	r0, [r4, #16]
 800ae46:	b15b      	cbz	r3, 800ae60 <__smakebuf_r+0x74>
 800ae48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae4c:	4630      	mov	r0, r6
 800ae4e:	f000 f8c9 	bl	800afe4 <_isatty_r>
 800ae52:	b128      	cbz	r0, 800ae60 <__smakebuf_r+0x74>
 800ae54:	89a3      	ldrh	r3, [r4, #12]
 800ae56:	f023 0303 	bic.w	r3, r3, #3
 800ae5a:	f043 0301 	orr.w	r3, r3, #1
 800ae5e:	81a3      	strh	r3, [r4, #12]
 800ae60:	89a0      	ldrh	r0, [r4, #12]
 800ae62:	4305      	orrs	r5, r0
 800ae64:	81a5      	strh	r5, [r4, #12]
 800ae66:	e7cd      	b.n	800ae04 <__smakebuf_r+0x18>
 800ae68:	0800abf9 	.word	0x0800abf9

0800ae6c <_raise_r>:
 800ae6c:	291f      	cmp	r1, #31
 800ae6e:	b538      	push	{r3, r4, r5, lr}
 800ae70:	4604      	mov	r4, r0
 800ae72:	460d      	mov	r5, r1
 800ae74:	d904      	bls.n	800ae80 <_raise_r+0x14>
 800ae76:	2316      	movs	r3, #22
 800ae78:	6003      	str	r3, [r0, #0]
 800ae7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae7e:	bd38      	pop	{r3, r4, r5, pc}
 800ae80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ae82:	b112      	cbz	r2, 800ae8a <_raise_r+0x1e>
 800ae84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae88:	b94b      	cbnz	r3, 800ae9e <_raise_r+0x32>
 800ae8a:	4620      	mov	r0, r4
 800ae8c:	f000 f830 	bl	800aef0 <_getpid_r>
 800ae90:	462a      	mov	r2, r5
 800ae92:	4601      	mov	r1, r0
 800ae94:	4620      	mov	r0, r4
 800ae96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae9a:	f000 b817 	b.w	800aecc <_kill_r>
 800ae9e:	2b01      	cmp	r3, #1
 800aea0:	d00a      	beq.n	800aeb8 <_raise_r+0x4c>
 800aea2:	1c59      	adds	r1, r3, #1
 800aea4:	d103      	bne.n	800aeae <_raise_r+0x42>
 800aea6:	2316      	movs	r3, #22
 800aea8:	6003      	str	r3, [r0, #0]
 800aeaa:	2001      	movs	r0, #1
 800aeac:	e7e7      	b.n	800ae7e <_raise_r+0x12>
 800aeae:	2400      	movs	r4, #0
 800aeb0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aeb4:	4628      	mov	r0, r5
 800aeb6:	4798      	blx	r3
 800aeb8:	2000      	movs	r0, #0
 800aeba:	e7e0      	b.n	800ae7e <_raise_r+0x12>

0800aebc <raise>:
 800aebc:	4b02      	ldr	r3, [pc, #8]	; (800aec8 <raise+0xc>)
 800aebe:	4601      	mov	r1, r0
 800aec0:	6818      	ldr	r0, [r3, #0]
 800aec2:	f7ff bfd3 	b.w	800ae6c <_raise_r>
 800aec6:	bf00      	nop
 800aec8:	20000070 	.word	0x20000070

0800aecc <_kill_r>:
 800aecc:	b538      	push	{r3, r4, r5, lr}
 800aece:	4d07      	ldr	r5, [pc, #28]	; (800aeec <_kill_r+0x20>)
 800aed0:	2300      	movs	r3, #0
 800aed2:	4604      	mov	r4, r0
 800aed4:	4608      	mov	r0, r1
 800aed6:	4611      	mov	r1, r2
 800aed8:	602b      	str	r3, [r5, #0]
 800aeda:	f7fe fd59 	bl	8009990 <_kill>
 800aede:	1c43      	adds	r3, r0, #1
 800aee0:	d102      	bne.n	800aee8 <_kill_r+0x1c>
 800aee2:	682b      	ldr	r3, [r5, #0]
 800aee4:	b103      	cbz	r3, 800aee8 <_kill_r+0x1c>
 800aee6:	6023      	str	r3, [r4, #0]
 800aee8:	bd38      	pop	{r3, r4, r5, pc}
 800aeea:	bf00      	nop
 800aeec:	20003cdc 	.word	0x20003cdc

0800aef0 <_getpid_r>:
 800aef0:	f7fe bd46 	b.w	8009980 <_getpid>

0800aef4 <__sread>:
 800aef4:	b510      	push	{r4, lr}
 800aef6:	460c      	mov	r4, r1
 800aef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aefc:	f000 f894 	bl	800b028 <_read_r>
 800af00:	2800      	cmp	r0, #0
 800af02:	bfab      	itete	ge
 800af04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800af06:	89a3      	ldrhlt	r3, [r4, #12]
 800af08:	181b      	addge	r3, r3, r0
 800af0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800af0e:	bfac      	ite	ge
 800af10:	6563      	strge	r3, [r4, #84]	; 0x54
 800af12:	81a3      	strhlt	r3, [r4, #12]
 800af14:	bd10      	pop	{r4, pc}

0800af16 <__swrite>:
 800af16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af1a:	461f      	mov	r7, r3
 800af1c:	898b      	ldrh	r3, [r1, #12]
 800af1e:	05db      	lsls	r3, r3, #23
 800af20:	4605      	mov	r5, r0
 800af22:	460c      	mov	r4, r1
 800af24:	4616      	mov	r6, r2
 800af26:	d505      	bpl.n	800af34 <__swrite+0x1e>
 800af28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af2c:	2302      	movs	r3, #2
 800af2e:	2200      	movs	r2, #0
 800af30:	f000 f868 	bl	800b004 <_lseek_r>
 800af34:	89a3      	ldrh	r3, [r4, #12]
 800af36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af3e:	81a3      	strh	r3, [r4, #12]
 800af40:	4632      	mov	r2, r6
 800af42:	463b      	mov	r3, r7
 800af44:	4628      	mov	r0, r5
 800af46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af4a:	f000 b817 	b.w	800af7c <_write_r>

0800af4e <__sseek>:
 800af4e:	b510      	push	{r4, lr}
 800af50:	460c      	mov	r4, r1
 800af52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af56:	f000 f855 	bl	800b004 <_lseek_r>
 800af5a:	1c43      	adds	r3, r0, #1
 800af5c:	89a3      	ldrh	r3, [r4, #12]
 800af5e:	bf15      	itete	ne
 800af60:	6560      	strne	r0, [r4, #84]	; 0x54
 800af62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800af66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800af6a:	81a3      	strheq	r3, [r4, #12]
 800af6c:	bf18      	it	ne
 800af6e:	81a3      	strhne	r3, [r4, #12]
 800af70:	bd10      	pop	{r4, pc}

0800af72 <__sclose>:
 800af72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af76:	f000 b813 	b.w	800afa0 <_close_r>
	...

0800af7c <_write_r>:
 800af7c:	b538      	push	{r3, r4, r5, lr}
 800af7e:	4d07      	ldr	r5, [pc, #28]	; (800af9c <_write_r+0x20>)
 800af80:	4604      	mov	r4, r0
 800af82:	4608      	mov	r0, r1
 800af84:	4611      	mov	r1, r2
 800af86:	2200      	movs	r2, #0
 800af88:	602a      	str	r2, [r5, #0]
 800af8a:	461a      	mov	r2, r3
 800af8c:	f7fe fd37 	bl	80099fe <_write>
 800af90:	1c43      	adds	r3, r0, #1
 800af92:	d102      	bne.n	800af9a <_write_r+0x1e>
 800af94:	682b      	ldr	r3, [r5, #0]
 800af96:	b103      	cbz	r3, 800af9a <_write_r+0x1e>
 800af98:	6023      	str	r3, [r4, #0]
 800af9a:	bd38      	pop	{r3, r4, r5, pc}
 800af9c:	20003cdc 	.word	0x20003cdc

0800afa0 <_close_r>:
 800afa0:	b538      	push	{r3, r4, r5, lr}
 800afa2:	4d06      	ldr	r5, [pc, #24]	; (800afbc <_close_r+0x1c>)
 800afa4:	2300      	movs	r3, #0
 800afa6:	4604      	mov	r4, r0
 800afa8:	4608      	mov	r0, r1
 800afaa:	602b      	str	r3, [r5, #0]
 800afac:	f7fe fd43 	bl	8009a36 <_close>
 800afb0:	1c43      	adds	r3, r0, #1
 800afb2:	d102      	bne.n	800afba <_close_r+0x1a>
 800afb4:	682b      	ldr	r3, [r5, #0]
 800afb6:	b103      	cbz	r3, 800afba <_close_r+0x1a>
 800afb8:	6023      	str	r3, [r4, #0]
 800afba:	bd38      	pop	{r3, r4, r5, pc}
 800afbc:	20003cdc 	.word	0x20003cdc

0800afc0 <_fstat_r>:
 800afc0:	b538      	push	{r3, r4, r5, lr}
 800afc2:	4d07      	ldr	r5, [pc, #28]	; (800afe0 <_fstat_r+0x20>)
 800afc4:	2300      	movs	r3, #0
 800afc6:	4604      	mov	r4, r0
 800afc8:	4608      	mov	r0, r1
 800afca:	4611      	mov	r1, r2
 800afcc:	602b      	str	r3, [r5, #0]
 800afce:	f7fe fd3e 	bl	8009a4e <_fstat>
 800afd2:	1c43      	adds	r3, r0, #1
 800afd4:	d102      	bne.n	800afdc <_fstat_r+0x1c>
 800afd6:	682b      	ldr	r3, [r5, #0]
 800afd8:	b103      	cbz	r3, 800afdc <_fstat_r+0x1c>
 800afda:	6023      	str	r3, [r4, #0]
 800afdc:	bd38      	pop	{r3, r4, r5, pc}
 800afde:	bf00      	nop
 800afe0:	20003cdc 	.word	0x20003cdc

0800afe4 <_isatty_r>:
 800afe4:	b538      	push	{r3, r4, r5, lr}
 800afe6:	4d06      	ldr	r5, [pc, #24]	; (800b000 <_isatty_r+0x1c>)
 800afe8:	2300      	movs	r3, #0
 800afea:	4604      	mov	r4, r0
 800afec:	4608      	mov	r0, r1
 800afee:	602b      	str	r3, [r5, #0]
 800aff0:	f7fe fd3d 	bl	8009a6e <_isatty>
 800aff4:	1c43      	adds	r3, r0, #1
 800aff6:	d102      	bne.n	800affe <_isatty_r+0x1a>
 800aff8:	682b      	ldr	r3, [r5, #0]
 800affa:	b103      	cbz	r3, 800affe <_isatty_r+0x1a>
 800affc:	6023      	str	r3, [r4, #0]
 800affe:	bd38      	pop	{r3, r4, r5, pc}
 800b000:	20003cdc 	.word	0x20003cdc

0800b004 <_lseek_r>:
 800b004:	b538      	push	{r3, r4, r5, lr}
 800b006:	4d07      	ldr	r5, [pc, #28]	; (800b024 <_lseek_r+0x20>)
 800b008:	4604      	mov	r4, r0
 800b00a:	4608      	mov	r0, r1
 800b00c:	4611      	mov	r1, r2
 800b00e:	2200      	movs	r2, #0
 800b010:	602a      	str	r2, [r5, #0]
 800b012:	461a      	mov	r2, r3
 800b014:	f7fe fd36 	bl	8009a84 <_lseek>
 800b018:	1c43      	adds	r3, r0, #1
 800b01a:	d102      	bne.n	800b022 <_lseek_r+0x1e>
 800b01c:	682b      	ldr	r3, [r5, #0]
 800b01e:	b103      	cbz	r3, 800b022 <_lseek_r+0x1e>
 800b020:	6023      	str	r3, [r4, #0]
 800b022:	bd38      	pop	{r3, r4, r5, pc}
 800b024:	20003cdc 	.word	0x20003cdc

0800b028 <_read_r>:
 800b028:	b538      	push	{r3, r4, r5, lr}
 800b02a:	4d07      	ldr	r5, [pc, #28]	; (800b048 <_read_r+0x20>)
 800b02c:	4604      	mov	r4, r0
 800b02e:	4608      	mov	r0, r1
 800b030:	4611      	mov	r1, r2
 800b032:	2200      	movs	r2, #0
 800b034:	602a      	str	r2, [r5, #0]
 800b036:	461a      	mov	r2, r3
 800b038:	f7fe fcc4 	bl	80099c4 <_read>
 800b03c:	1c43      	adds	r3, r0, #1
 800b03e:	d102      	bne.n	800b046 <_read_r+0x1e>
 800b040:	682b      	ldr	r3, [r5, #0]
 800b042:	b103      	cbz	r3, 800b046 <_read_r+0x1e>
 800b044:	6023      	str	r3, [r4, #0]
 800b046:	bd38      	pop	{r3, r4, r5, pc}
 800b048:	20003cdc 	.word	0x20003cdc

0800b04c <_gettimeofday>:
 800b04c:	4b02      	ldr	r3, [pc, #8]	; (800b058 <_gettimeofday+0xc>)
 800b04e:	2258      	movs	r2, #88	; 0x58
 800b050:	601a      	str	r2, [r3, #0]
 800b052:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b056:	4770      	bx	lr
 800b058:	20003cdc 	.word	0x20003cdc

0800b05c <_init>:
 800b05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b05e:	bf00      	nop
 800b060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b062:	bc08      	pop	{r3}
 800b064:	469e      	mov	lr, r3
 800b066:	4770      	bx	lr

0800b068 <_fini>:
 800b068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b06a:	bf00      	nop
 800b06c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b06e:	bc08      	pop	{r3}
 800b070:	469e      	mov	lr, r3
 800b072:	4770      	bx	lr
