
spudglo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  0800ba5c  0800ba5c  0001ba5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd1c  0800bd1c  000202d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd1c  0800bd1c  0001bd1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd24  0800bd24  000202d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd24  0800bd24  0001bd24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd28  0800bd28  0001bd28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d0  20000000  0800bd2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003d84  200002d0  0800bffc  000202d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004054  0800bffc  00024054  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020300  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027d8a  00000000  00000000  00020343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005fd2  00000000  00000000  000480cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021a0  00000000  00000000  0004e0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a21  00000000  00000000  00050240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ad4b  00000000  00000000  00051c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002c900  00000000  00000000  0007c9ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fa06c  00000000  00000000  000a92ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000094f4  00000000  00000000  001a3318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  001ac80c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d0 	.word	0x200002d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ba44 	.word	0x0800ba44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d4 	.word	0x200002d4
 80001cc:	0800ba44 	.word	0x0800ba44

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <current_monitor_set>:
float g_absolute_max_current_ratio = 0.0f; // DO NOT EXCEED!
p_current_t gp_current_monitor_strip[NUM_STRIPS];


void current_monitor_set(float value)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value < g_absolute_max_current_ratio)
 8000586:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <current_monitor_set+0x3c>)
 8000588:	edd3 7a00 	vldr	s15, [r3]
 800058c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000590:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000598:	d503      	bpl.n	80005a2 <current_monitor_set+0x26>
    {
        g_max_current_ratio = value;
 800059a:	4a08      	ldr	r2, [pc, #32]	; (80005bc <current_monitor_set+0x40>)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	6013      	str	r3, [r2, #0]
    }
    else
    {
        g_max_current_ratio = g_absolute_max_current_ratio;
    }
}
 80005a0:	e003      	b.n	80005aa <current_monitor_set+0x2e>
        g_max_current_ratio = g_absolute_max_current_ratio;
 80005a2:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <current_monitor_set+0x3c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a05      	ldr	r2, [pc, #20]	; (80005bc <current_monitor_set+0x40>)
 80005a8:	6013      	str	r3, [r2, #0]
}
 80005aa:	bf00      	nop
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	200002ec 	.word	0x200002ec
 80005bc:	20000000 	.word	0x20000000

080005c0 <current_monitor_init>:
    return g_max_current_ratio;
}


void current_monitor_init(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
    while ((g_max_current_ratio * ((float)CURRENT_MONITOR_MAX_CURRENT_PER_LED_MA / 1000) * NUM_LEDS) > (float)CURRENT_MONITOR_MAX_CURRENT_DRAW_A)
 80005c4:	e009      	b.n	80005da <current_monitor_init+0x1a>
    {
        g_max_current_ratio -= 0.05f;
 80005c6:	4b17      	ldr	r3, [pc, #92]	; (8000624 <current_monitor_init+0x64>)
 80005c8:	edd3 7a00 	vldr	s15, [r3]
 80005cc:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000628 <current_monitor_init+0x68>
 80005d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80005d4:	4b13      	ldr	r3, [pc, #76]	; (8000624 <current_monitor_init+0x64>)
 80005d6:	edc3 7a00 	vstr	s15, [r3]
    while ((g_max_current_ratio * ((float)CURRENT_MONITOR_MAX_CURRENT_PER_LED_MA / 1000) * NUM_LEDS) > (float)CURRENT_MONITOR_MAX_CURRENT_DRAW_A)
 80005da:	4b12      	ldr	r3, [pc, #72]	; (8000624 <current_monitor_init+0x64>)
 80005dc:	edd3 7a00 	vldr	s15, [r3]
 80005e0:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800062c <current_monitor_init+0x6c>
 80005e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005e8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000630 <current_monitor_init+0x70>
 80005ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005f0:	eeb2 7a03 	vmov.f32	s14, #35	; 0x41180000  9.5
 80005f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005fc:	dce3      	bgt.n	80005c6 <current_monitor_init+0x6>
    }
    if (g_max_current_ratio <= 0) while(1); // broken..
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <current_monitor_init+0x64>)
 8000600:	edd3 7a00 	vldr	s15, [r3]
 8000604:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800060c:	d800      	bhi.n	8000610 <current_monitor_init+0x50>
 800060e:	e7fe      	b.n	800060e <current_monitor_init+0x4e>
    g_absolute_max_current_ratio = g_max_current_ratio;
 8000610:	4b04      	ldr	r3, [pc, #16]	; (8000624 <current_monitor_init+0x64>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a07      	ldr	r2, [pc, #28]	; (8000634 <current_monitor_init+0x74>)
 8000616:	6013      	str	r3, [r2, #0]
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	20000000 	.word	0x20000000
 8000628:	3d4ccccd 	.word	0x3d4ccccd
 800062c:	3d23d70a 	.word	0x3d23d70a
 8000630:	441f0000 	.word	0x441f0000
 8000634:	200002ec 	.word	0x200002ec

08000638 <animate_led_show_strip>:
 * @brief   Write data stored in `gp_ws28128b_strip` array to the strip
 * @param   strip_mask - the strip to write to
 * @return  void
 */
void animate_led_show_strip(const strip_mask_t strip_mask)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	80fb      	strh	r3, [r7, #6]
    if (strip_mask & STRIP_BIT_1)
 8000642:	88fb      	ldrh	r3, [r7, #6]
 8000644:	f003 0301 	and.w	r3, r3, #1
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <animate_led_show_strip+0x18>
    {
        ws2812b_show_strip_one();
 800064c:	f000 fac0 	bl	8000bd0 <ws2812b_show_strip_one>
    {
        // STRIP_BIT_3
        ws2812b_show_strip_three();
    }
#endif
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <animate_led_set_all_pixels>:
    //animate_led_show_strip(mask);
}


void animate_led_set_all_pixels(const strip_mask_t mask, const uint8_t red, const uint8_t green, const uint8_t blue)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b089      	sub	sp, #36	; 0x24
 800065c:	af02      	add	r7, sp, #8
 800065e:	4604      	mov	r4, r0
 8000660:	4608      	mov	r0, r1
 8000662:	4611      	mov	r1, r2
 8000664:	461a      	mov	r2, r3
 8000666:	4623      	mov	r3, r4
 8000668:	80fb      	strh	r3, [r7, #6]
 800066a:	4603      	mov	r3, r0
 800066c:	717b      	strb	r3, [r7, #5]
 800066e:	460b      	mov	r3, r1
 8000670:	713b      	strb	r3, [r7, #4]
 8000672:	4613      	mov	r3, r2
 8000674:	70fb      	strb	r3, [r7, #3]
    uint16_t strip_size = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	81fb      	strh	r3, [r7, #14]
    if (mask == g_all_strip_mask)
 800067a:	4b2b      	ldr	r3, [pc, #172]	; (8000728 <animate_led_set_all_pixels+0xd0>)
 800067c:	881b      	ldrh	r3, [r3, #0]
 800067e:	88fa      	ldrh	r2, [r7, #6]
 8000680:	429a      	cmp	r2, r3
 8000682:	d122      	bne.n	80006ca <animate_led_set_all_pixels+0x72>
    {
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000684:	2301      	movs	r3, #1
 8000686:	75fb      	strb	r3, [r7, #23]
 8000688:	e01b      	b.n	80006c2 <animate_led_set_all_pixels+0x6a>
        {
            strip_size = ws2812_get_strip_size(strip_bit);
 800068a:	7dfb      	ldrb	r3, [r7, #23]
 800068c:	4618      	mov	r0, r3
 800068e:	f000 f8f5 	bl	800087c <ws2812_get_strip_size>
 8000692:	4603      	mov	r3, r0
 8000694:	81fb      	strh	r3, [r7, #14]
            //offset = animate_led_get_strip_offset(strip_bit);
            for (uint16_t iii = 0; iii < strip_size; iii++) ws2812b_set_led(strip_bit, iii, red, green, blue);
 8000696:	2300      	movs	r3, #0
 8000698:	82bb      	strh	r3, [r7, #20]
 800069a:	e00b      	b.n	80006b4 <animate_led_set_all_pixels+0x5c>
 800069c:	793c      	ldrb	r4, [r7, #4]
 800069e:	797a      	ldrb	r2, [r7, #5]
 80006a0:	8ab9      	ldrh	r1, [r7, #20]
 80006a2:	7df8      	ldrb	r0, [r7, #23]
 80006a4:	78fb      	ldrb	r3, [r7, #3]
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	4623      	mov	r3, r4
 80006aa:	f000 f909 	bl	80008c0 <ws2812b_set_led>
 80006ae:	8abb      	ldrh	r3, [r7, #20]
 80006b0:	3301      	adds	r3, #1
 80006b2:	82bb      	strh	r3, [r7, #20]
 80006b4:	8aba      	ldrh	r2, [r7, #20]
 80006b6:	89fb      	ldrh	r3, [r7, #14]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d3ef      	bcc.n	800069c <animate_led_set_all_pixels+0x44>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 80006bc:	7dfb      	ldrb	r3, [r7, #23]
 80006be:	3301      	adds	r3, #1
 80006c0:	75fb      	strb	r3, [r7, #23]
 80006c2:	7dfb      	ldrb	r3, [r7, #23]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d9e0      	bls.n	800068a <animate_led_set_all_pixels+0x32>
 80006c8:	e026      	b.n	8000718 <animate_led_set_all_pixels+0xc0>
        }
    }
    else
    {
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 80006ca:	2301      	movs	r3, #1
 80006cc:	74fb      	strb	r3, [r7, #19]
 80006ce:	e020      	b.n	8000712 <animate_led_set_all_pixels+0xba>
        {
            if (mask & strip_bit)
 80006d0:	88fa      	ldrh	r2, [r7, #6]
 80006d2:	7cfb      	ldrb	r3, [r7, #19]
 80006d4:	4013      	ands	r3, r2
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d018      	beq.n	800070c <animate_led_set_all_pixels+0xb4>
            {
                strip_size = ws2812_get_strip_size(strip_bit);
 80006da:	7cfb      	ldrb	r3, [r7, #19]
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 f8cd 	bl	800087c <ws2812_get_strip_size>
 80006e2:	4603      	mov	r3, r0
 80006e4:	81fb      	strh	r3, [r7, #14]
                for (uint16_t yyy = 0; yyy < strip_size; yyy++) ws2812b_set_led(strip_bit, yyy, red, green, blue);
 80006e6:	2300      	movs	r3, #0
 80006e8:	823b      	strh	r3, [r7, #16]
 80006ea:	e00b      	b.n	8000704 <animate_led_set_all_pixels+0xac>
 80006ec:	793c      	ldrb	r4, [r7, #4]
 80006ee:	797a      	ldrb	r2, [r7, #5]
 80006f0:	8a39      	ldrh	r1, [r7, #16]
 80006f2:	7cf8      	ldrb	r0, [r7, #19]
 80006f4:	78fb      	ldrb	r3, [r7, #3]
 80006f6:	9300      	str	r3, [sp, #0]
 80006f8:	4623      	mov	r3, r4
 80006fa:	f000 f8e1 	bl	80008c0 <ws2812b_set_led>
 80006fe:	8a3b      	ldrh	r3, [r7, #16]
 8000700:	3301      	adds	r3, #1
 8000702:	823b      	strh	r3, [r7, #16]
 8000704:	8a3a      	ldrh	r2, [r7, #16]
 8000706:	89fb      	ldrh	r3, [r7, #14]
 8000708:	429a      	cmp	r2, r3
 800070a:	d3ef      	bcc.n	80006ec <animate_led_set_all_pixels+0x94>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 800070c:	7cfb      	ldrb	r3, [r7, #19]
 800070e:	3301      	adds	r3, #1
 8000710:	74fb      	strb	r3, [r7, #19]
 8000712:	7cfb      	ldrb	r3, [r7, #19]
 8000714:	2b01      	cmp	r3, #1
 8000716:	d9db      	bls.n	80006d0 <animate_led_set_all_pixels+0x78>
            }
        }
    }
    animate_led_show_strip(mask);
 8000718:	88fb      	ldrh	r3, [r7, #6]
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ff8c 	bl	8000638 <animate_led_show_strip>
}
 8000720:	bf00      	nop
 8000722:	371c      	adds	r7, #28
 8000724:	46bd      	mov	sp, r7
 8000726:	bd90      	pop	{r4, r7, pc}
 8000728:	20000a66 	.word	0x20000a66

0800072c <animate_led_solid_custom_color>:
	}
}


void animate_led_solid_custom_color(const strip_mask_t mask_solid, const color_hex_code_e color_solid)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	6039      	str	r1, [r7, #0]
 8000736:	80fb      	strh	r3, [r7, #6]
    uint8_t color_solid_rgb[sizeof(ws2812b_led_t)] = {0};
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <animate_led_solid_custom_color+0x40>)
 800073a:	881b      	ldrh	r3, [r3, #0]
 800073c:	81bb      	strh	r3, [r7, #12]
 800073e:	2300      	movs	r3, #0
 8000740:	73bb      	strb	r3, [r7, #14]
    color_led_hex_to_rgb(color_solid, color_solid_rgb);
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	4619      	mov	r1, r3
 8000748:	6838      	ldr	r0, [r7, #0]
 800074a:	f000 f811 	bl	8000770 <color_led_hex_to_rgb>
    animate_led_set_all_pixels(mask_solid, color_solid_rgb[offsetof(ws2812b_led_t, red)],
 800074e:	7b39      	ldrb	r1, [r7, #12]
 8000750:	7b7a      	ldrb	r2, [r7, #13]
 8000752:	7bbb      	ldrb	r3, [r7, #14]
 8000754:	88f8      	ldrh	r0, [r7, #6]
 8000756:	f7ff ff7f 	bl	8000658 <animate_led_set_all_pixels>
                               color_solid_rgb[offsetof(ws2812b_led_t, green)],
                               color_solid_rgb[offsetof(ws2812b_led_t, blue)]);
    animate_led_show_strip(mask_solid);
 800075a:	88fb      	ldrh	r3, [r7, #6]
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff ff6b 	bl	8000638 <animate_led_show_strip>
}
 8000762:	bf00      	nop
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	0800ba5c 	.word	0x0800ba5c

08000770 <color_led_hex_to_rgb>:
    [COLORS_BROWN] = COLOR_HEX_BROWN
};


void color_led_hex_to_rgb(const color_hex_code_e color, uint8_t *color_array)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
    color_array[offsetof(ws2812b_led_t, red)] = ((color & 0xFF0000) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, red))));
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	0c1b      	lsrs	r3, r3, #16
 800077e:	b2da      	uxtb	r2, r3
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	701a      	strb	r2, [r3, #0]
    color_array[offsetof(ws2812b_led_t, green)] = ((color & 0x00FF00) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, green))));
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	0a1a      	lsrs	r2, r3, #8
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	3301      	adds	r3, #1
 800078c:	b2d2      	uxtb	r2, r2
 800078e:	701a      	strb	r2, [r3, #0]
    color_array[offsetof(ws2812b_led_t, blue)] = ((color & 0x0000FF) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, blue))));
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	3302      	adds	r3, #2
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	b2d2      	uxtb	r2, r2
 8000798:	701a      	strb	r2, [r3, #0]
}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
	...

080007a8 <reset_ws2812b>:

extern volatile int datasentflag;

uint16_t pwm_reset[50] = {0};
void reset_ws2812b(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
    //xSemaphoreTake(g_dma_transfer_semaphore, portMAX_DELAY);
    //xTaskNotify(g_dma_transfer_handle, 0, eSetValueWithOverwrite);
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_1, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 80007ac:	2364      	movs	r3, #100	; 0x64
 80007ae:	4a09      	ldr	r2, [pc, #36]	; (80007d4 <reset_ws2812b+0x2c>)
 80007b0:	2100      	movs	r1, #0
 80007b2:	4809      	ldr	r0, [pc, #36]	; (80007d8 <reset_ws2812b+0x30>)
 80007b4:	f005 ff2e 	bl	8006614 <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_2, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 80007b8:	2364      	movs	r3, #100	; 0x64
 80007ba:	4a06      	ldr	r2, [pc, #24]	; (80007d4 <reset_ws2812b+0x2c>)
 80007bc:	2104      	movs	r1, #4
 80007be:	4806      	ldr	r0, [pc, #24]	; (80007d8 <reset_ws2812b+0x30>)
 80007c0:	f005 ff28 	bl	8006614 <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_3, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 80007c4:	2364      	movs	r3, #100	; 0x64
 80007c6:	4a03      	ldr	r2, [pc, #12]	; (80007d4 <reset_ws2812b+0x2c>)
 80007c8:	2108      	movs	r1, #8
 80007ca:	4803      	ldr	r0, [pc, #12]	; (80007d8 <reset_ws2812b+0x30>)
 80007cc:	f005 ff22 	bl	8006614 <HAL_TIM_PWM_Start_DMA>
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000a74 	.word	0x20000a74
 80007d8:	200025dc 	.word	0x200025dc

080007dc <ws2812_convert_strip_num_to_strip_bit>:

static strip_bit_e ws2812_convert_strip_num_to_strip_bit(const strip_num_e strip_num)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
	return (strip_bit_e)(strip_num + 1);
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	3301      	adds	r3, #1
 80007ea:	b2db      	uxtb	r3, r3
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <ws2812_convert_strip_bit_to_strip_num>:


static strip_num_e ws2812_convert_strip_bit_to_strip_num(const strip_bit_e strip_bit)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	71fb      	strb	r3, [r7, #7]
	return (strip_num_e)(strip_bit - 1);
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	3b01      	subs	r3, #1
 8000806:	b2db      	uxtb	r3, r3
}
 8000808:	4618      	mov	r0, r3
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <ws2812_get_pwm_strip_offset>:


uint16_t ws2812_get_pwm_strip_offset(const strip_bit_e strip_bit)
{
 8000814:	b480      	push	{r7}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
    uint16_t offset = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	81fb      	strh	r3, [r7, #14]
    uint8_t strip_num = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	737b      	strb	r3, [r7, #13]
    switch (strip_bit)
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d104      	bne.n	8000836 <ws2812_get_pwm_strip_offset+0x22>
    {
#if defined(STRIP_1_LENGTH)
        case STRIP_BIT_1:
            offset = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	81fb      	strh	r3, [r7, #14]
            strip_num = 1;
 8000830:	2301      	movs	r3, #1
 8000832:	737b      	strb	r3, [r7, #13]
        break;
 8000834:	e000      	b.n	8000838 <ws2812_get_pwm_strip_offset+0x24>
        case STRIP_BIT_5:
            offset = STRIP_1_LENGTH + STRIP_2_LENGTH + STRIP_3_LENGTH + STRIP_4_LENGTH;
        break;
#endif
        default:
        break;
 8000836:	bf00      	nop
    }
    return ((offset * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + (strip_num * WS2812B_RESET_TIME_CYCLES));
 8000838:	89fa      	ldrh	r2, [r7, #14]
 800083a:	4613      	mov	r3, r2
 800083c:	005b      	lsls	r3, r3, #1
 800083e:	4413      	add	r3, r2
 8000840:	00db      	lsls	r3, r3, #3
 8000842:	ee07 3a90 	vmov	s15, r3
 8000846:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800084a:	7b7b      	ldrb	r3, [r7, #13]
 800084c:	ee07 3a90 	vmov	s15, r3
 8000850:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000854:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000878 <ws2812_get_pwm_strip_offset+0x64>
 8000858:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800085c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000860:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000864:	ee17 3a90 	vmov	r3, s15
 8000868:	b29b      	uxth	r3, r3
}
 800086a:	4618      	mov	r0, r3
 800086c:	3714      	adds	r7, #20
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	453b8000 	.word	0x453b8000

0800087c <ws2812_get_strip_size>:


uint16_t ws2812_get_strip_size(const strip_bit_e strip_bit)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	71fb      	strb	r3, [r7, #7]
	uint16_t strip_size = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_ALL_SET == strip_bit) strip_size = g_max_strip_length;
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d103      	bne.n	8000898 <ws2812_get_strip_size+0x1c>
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <ws2812_get_strip_size+0x3c>)
 8000892:	881b      	ldrh	r3, [r3, #0]
 8000894:	81fb      	strh	r3, [r7, #14]
 8000896:	e009      	b.n	80008ac <ws2812_get_strip_size+0x30>
	else strip_size = strip_length[ws2812_convert_strip_num_to_strip_bit(strip_bit)];
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff ff9e 	bl	80007dc <ws2812_convert_strip_num_to_strip_bit>
 80008a0:	4603      	mov	r3, r0
 80008a2:	461a      	mov	r2, r3
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <ws2812_get_strip_size+0x40>)
 80008a6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80008aa:	81fb      	strh	r3, [r7, #14]
	return strip_size;
 80008ac:	89fb      	ldrh	r3, [r7, #14]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000a68 	.word	0x20000a68
 80008bc:	20000004 	.word	0x20000004

080008c0 <ws2812b_set_led>:
}


void ws2812b_set_led(const strip_bit_e strip_bit, const uint16_t led_num, const color_t red, const color_t green,
                     const color_t blue)
{
 80008c0:	b590      	push	{r4, r7, lr}
 80008c2:	b087      	sub	sp, #28
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4604      	mov	r4, r0
 80008c8:	4608      	mov	r0, r1
 80008ca:	4611      	mov	r1, r2
 80008cc:	461a      	mov	r2, r3
 80008ce:	4623      	mov	r3, r4
 80008d0:	73fb      	strb	r3, [r7, #15]
 80008d2:	4603      	mov	r3, r0
 80008d4:	81bb      	strh	r3, [r7, #12]
 80008d6:	460b      	mov	r3, r1
 80008d8:	73bb      	strb	r3, [r7, #14]
 80008da:	4613      	mov	r3, r2
 80008dc:	72fb      	strb	r3, [r7, #11]
	strip_num_e strip_num = ws2812_convert_strip_bit_to_strip_num(strip_bit);
 80008de:	7bfb      	ldrb	r3, [r7, #15]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff ff89 	bl	80007f8 <ws2812_convert_strip_bit_to_strip_num>
 80008e6:	4603      	mov	r3, r0
 80008e8:	75fb      	strb	r3, [r7, #23]
    (gp_ws28128b_strip[strip_num] + led_num)->red = red * g_max_current_ratio;
 80008ea:	7bbb      	ldrb	r3, [r7, #14]
 80008ec:	ee07 3a90 	vmov	s15, r3
 80008f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008f4:	4b26      	ldr	r3, [pc, #152]	; (8000990 <ws2812b_set_led+0xd0>)
 80008f6:	edd3 7a00 	vldr	s15, [r3]
 80008fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008fe:	7dfb      	ldrb	r3, [r7, #23]
 8000900:	4a24      	ldr	r2, [pc, #144]	; (8000994 <ws2812b_set_led+0xd4>)
 8000902:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000906:	89ba      	ldrh	r2, [r7, #12]
 8000908:	4613      	mov	r3, r2
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	4413      	add	r3, r2
 800090e:	440b      	add	r3, r1
 8000910:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000914:	edc7 7a01 	vstr	s15, [r7, #4]
 8000918:	793a      	ldrb	r2, [r7, #4]
 800091a:	b2d2      	uxtb	r2, r2
 800091c:	701a      	strb	r2, [r3, #0]
    (gp_ws28128b_strip[strip_num] + led_num)->green = green * g_max_current_ratio;
 800091e:	7afb      	ldrb	r3, [r7, #11]
 8000920:	ee07 3a90 	vmov	s15, r3
 8000924:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000928:	4b19      	ldr	r3, [pc, #100]	; (8000990 <ws2812b_set_led+0xd0>)
 800092a:	edd3 7a00 	vldr	s15, [r3]
 800092e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000932:	7dfb      	ldrb	r3, [r7, #23]
 8000934:	4a17      	ldr	r2, [pc, #92]	; (8000994 <ws2812b_set_led+0xd4>)
 8000936:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800093a:	89ba      	ldrh	r2, [r7, #12]
 800093c:	4613      	mov	r3, r2
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	4413      	add	r3, r2
 8000942:	440b      	add	r3, r1
 8000944:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000948:	edc7 7a01 	vstr	s15, [r7, #4]
 800094c:	793a      	ldrb	r2, [r7, #4]
 800094e:	b2d2      	uxtb	r2, r2
 8000950:	705a      	strb	r2, [r3, #1]
    (gp_ws28128b_strip[strip_num] + led_num)->blue = blue * g_max_current_ratio;
 8000952:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000956:	ee07 3a90 	vmov	s15, r3
 800095a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800095e:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <ws2812b_set_led+0xd0>)
 8000960:	edd3 7a00 	vldr	s15, [r3]
 8000964:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000968:	7dfb      	ldrb	r3, [r7, #23]
 800096a:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <ws2812b_set_led+0xd4>)
 800096c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000970:	89ba      	ldrh	r2, [r7, #12]
 8000972:	4613      	mov	r3, r2
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	4413      	add	r3, r2
 8000978:	440b      	add	r3, r1
 800097a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800097e:	edc7 7a01 	vstr	s15, [r7, #4]
 8000982:	793a      	ldrb	r2, [r7, #4]
 8000984:	b2d2      	uxtb	r2, r2
 8000986:	709a      	strb	r2, [r3, #2]
}
 8000988:	bf00      	nop
 800098a:	371c      	adds	r7, #28
 800098c:	46bd      	mov	sp, r7
 800098e:	bd90      	pop	{r4, r7, pc}
 8000990:	20000000 	.word	0x20000000
 8000994:	20000a70 	.word	0x20000a70

08000998 <ws2812b_fill_pwm_buffer_strip_one>:



#if defined(STRIP_1_LENGTH)
void ws2812b_fill_pwm_buffer_strip_one(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0
    uint32_t color = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
    uint32_t strip_size = STRIP_1_LENGTH;
 80009a2:	f44f 731f 	mov.w	r3, #636	; 0x27c
 80009a6:	60bb      	str	r3, [r7, #8]
    uint32_t strip_pwm_offset = ws2812_get_pwm_strip_offset(STRIP_BIT_1);
 80009a8:	2001      	movs	r0, #1
 80009aa:	f7ff ff33 	bl	8000814 <ws2812_get_pwm_strip_offset>
 80009ae:	4603      	mov	r3, r0
 80009b0:	607b      	str	r3, [r7, #4]
    while (!gb_dma_cmplt_strip_2)
 80009b2:	e002      	b.n	80009ba <ws2812b_fill_pwm_buffer_strip_one+0x22>
    {
        osDelay(1);
 80009b4:	2001      	movs	r0, #1
 80009b6:	f000 fd5f 	bl	8001478 <osDelay>
    while (!gb_dma_cmplt_strip_2)
 80009ba:	4b44      	ldr	r3, [pc, #272]	; (8000acc <ws2812b_fill_pwm_buffer_strip_one+0x134>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	f083 0301 	eor.w	r3, r3, #1
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d1f5      	bne.n	80009b4 <ws2812b_fill_pwm_buffer_strip_one+0x1c>
    }
    for (uint16_t iii = 0; iii < strip_size; iii++)
 80009c8:	2300      	movs	r3, #0
 80009ca:	82fb      	strh	r3, [r7, #22]
 80009cc:	e046      	b.n	8000a5c <ws2812b_fill_pwm_buffer_strip_one+0xc4>
    {
        color = (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->green) << 16) | \
 80009ce:	4b40      	ldr	r3, [pc, #256]	; (8000ad0 <ws2812b_fill_pwm_buffer_strip_one+0x138>)
 80009d0:	6819      	ldr	r1, [r3, #0]
 80009d2:	8afa      	ldrh	r2, [r7, #22]
 80009d4:	4613      	mov	r3, r2
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	4413      	add	r3, r2
 80009da:	440b      	add	r3, r1
 80009dc:	785b      	ldrb	r3, [r3, #1]
 80009de:	0419      	lsls	r1, r3, #16
                                (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->red) << 8) | \
 80009e0:	4b3b      	ldr	r3, [pc, #236]	; (8000ad0 <ws2812b_fill_pwm_buffer_strip_one+0x138>)
 80009e2:	6818      	ldr	r0, [r3, #0]
 80009e4:	8afa      	ldrh	r2, [r7, #22]
 80009e6:	4613      	mov	r3, r2
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	4413      	add	r3, r2
 80009ec:	4403      	add	r3, r0
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	021b      	lsls	r3, r3, #8
        color = (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->green) << 16) | \
 80009f2:	4319      	orrs	r1, r3
                                (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->blue));
 80009f4:	4b36      	ldr	r3, [pc, #216]	; (8000ad0 <ws2812b_fill_pwm_buffer_strip_one+0x138>)
 80009f6:	6818      	ldr	r0, [r3, #0]
 80009f8:	8afa      	ldrh	r2, [r7, #22]
 80009fa:	4613      	mov	r3, r2
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	4413      	add	r3, r2
 8000a00:	4403      	add	r3, r0
 8000a02:	789b      	ldrb	r3, [r3, #2]
                                (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->red) << 8) | \
 8000a04:	430b      	orrs	r3, r1
        color = (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->green) << 16) | \
 8000a06:	60fb      	str	r3, [r7, #12]
        for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 8000a08:	2300      	movs	r3, #0
 8000a0a:	757b      	strb	r3, [r7, #21]
 8000a0c:	e020      	b.n	8000a50 <ws2812b_fill_pwm_buffer_strip_one+0xb8>
        {
            gp_pwm_data_fill[strip_pwm_offset + (iii * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + yyy] = (color & (1 << (23 - yyy))) ? (uint16_t)(WS2812B_BIT_SET_CYCLES + 1) : (uint16_t)WS2812B_BIT_RESET_CYCLES;
 8000a0e:	7d7b      	ldrb	r3, [r7, #21]
 8000a10:	f1c3 0317 	rsb	r3, r3, #23
 8000a14:	2201      	movs	r2, #1
 8000a16:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <ws2812b_fill_pwm_buffer_strip_one+0x90>
 8000a24:	2028      	movs	r0, #40	; 0x28
 8000a26:	e000      	b.n	8000a2a <ws2812b_fill_pwm_buffer_strip_one+0x92>
 8000a28:	2014      	movs	r0, #20
 8000a2a:	4b2a      	ldr	r3, [pc, #168]	; (8000ad4 <ws2812b_fill_pwm_buffer_strip_one+0x13c>)
 8000a2c:	6819      	ldr	r1, [r3, #0]
 8000a2e:	8afa      	ldrh	r2, [r7, #22]
 8000a30:	4613      	mov	r3, r2
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	4413      	add	r3, r2
 8000a36:	00db      	lsls	r3, r3, #3
 8000a38:	461a      	mov	r2, r3
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	441a      	add	r2, r3
 8000a3e:	7d7b      	ldrb	r3, [r7, #21]
 8000a40:	4413      	add	r3, r2
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	440b      	add	r3, r1
 8000a46:	4602      	mov	r2, r0
 8000a48:	801a      	strh	r2, [r3, #0]
        for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 8000a4a:	7d7b      	ldrb	r3, [r7, #21]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	757b      	strb	r3, [r7, #21]
 8000a50:	7d7b      	ldrb	r3, [r7, #21]
 8000a52:	2b17      	cmp	r3, #23
 8000a54:	d9db      	bls.n	8000a0e <ws2812b_fill_pwm_buffer_strip_one+0x76>
    for (uint16_t iii = 0; iii < strip_size; iii++)
 8000a56:	8afb      	ldrh	r3, [r7, #22]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	82fb      	strh	r3, [r7, #22]
 8000a5c:	8afb      	ldrh	r3, [r7, #22]
 8000a5e:	68ba      	ldr	r2, [r7, #8]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d8b4      	bhi.n	80009ce <ws2812b_fill_pwm_buffer_strip_one+0x36>
        }
    }
    for (uint16_t iii = 0; iii < WS2812B_RESET_TIME_CYCLES; iii++)
 8000a64:	2300      	movs	r3, #0
 8000a66:	827b      	strh	r3, [r7, #18]
 8000a68:	e012      	b.n	8000a90 <ws2812b_fill_pwm_buffer_strip_one+0xf8>
    {
        gp_pwm_data_fill[(strip_pwm_offset + (strip_size * BITS_PER_BYTE * sizeof(ws2812b_led_t))) + iii] = 0;
 8000a6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <ws2812b_fill_pwm_buffer_strip_one+0x13c>)
 8000a6c:	6819      	ldr	r1, [r3, #0]
 8000a6e:	68ba      	ldr	r2, [r7, #8]
 8000a70:	4613      	mov	r3, r2
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	4413      	add	r3, r2
 8000a76:	00db      	lsls	r3, r3, #3
 8000a78:	461a      	mov	r2, r3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	441a      	add	r2, r3
 8000a7e:	8a7b      	ldrh	r3, [r7, #18]
 8000a80:	4413      	add	r3, r2
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	440b      	add	r3, r1
 8000a86:	2200      	movs	r2, #0
 8000a88:	801a      	strh	r2, [r3, #0]
    for (uint16_t iii = 0; iii < WS2812B_RESET_TIME_CYCLES; iii++)
 8000a8a:	8a7b      	ldrh	r3, [r7, #18]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	827b      	strh	r3, [r7, #18]
 8000a90:	8a7b      	ldrh	r3, [r7, #18]
 8000a92:	ee07 3a90 	vmov	s15, r3
 8000a96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a9a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000ad8 <ws2812b_fill_pwm_buffer_strip_one+0x140>
 8000a9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aa6:	d4e0      	bmi.n	8000a6a <ws2812b_fill_pwm_buffer_strip_one+0xd2>
    }
    gb_dma_cmplt_strip_1 = false;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <ws2812b_fill_pwm_buffer_strip_one+0x144>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_1, (uint32_t *)(gp_pwm_data_fill + strip_pwm_offset), (STRIP_1_LENGTH * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + WS2812B_RESET_TIME_CYCLES);
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <ws2812b_fill_pwm_buffer_strip_one+0x13c>)
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	441a      	add	r2, r3
 8000ab8:	f244 7358 	movw	r3, #18264	; 0x4758
 8000abc:	2100      	movs	r1, #0
 8000abe:	4808      	ldr	r0, [pc, #32]	; (8000ae0 <ws2812b_fill_pwm_buffer_strip_one+0x148>)
 8000ac0:	f005 fda8 	bl	8006614 <HAL_TIM_PWM_Start_DMA>
}
 8000ac4:	bf00      	nop
 8000ac6:	3718      	adds	r7, #24
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	200000f9 	.word	0x200000f9
 8000ad0:	20000a70 	.word	0x20000a70
 8000ad4:	20000a6c 	.word	0x20000a6c
 8000ad8:	453b8000 	.word	0x453b8000
 8000adc:	200000f8 	.word	0x200000f8
 8000ae0:	200025dc 	.word	0x200025dc

08000ae4 <ws2812b_init>:


uint32_t g_size = 0;

void ws2812b_init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0

#if defined(STRIP_1_LENGTH)
	gp_ws28128b_strip[STRIP_NUM_1] = g_strip_1;
 8000aea:	4b31      	ldr	r3, [pc, #196]	; (8000bb0 <ws2812b_init+0xcc>)
 8000aec:	4a31      	ldr	r2, [pc, #196]	; (8000bb4 <ws2812b_init+0xd0>)
 8000aee:	601a      	str	r2, [r3, #0]
#endif
#if defined(STRIP_4_LENGTH)
	gp_ws28128b_strip[STRIP_NUM_4] = g_strip_4;
#endif

	uint8_t num_strips = NUM_STRIPS;
 8000af0:	2301      	movs	r3, #1
 8000af2:	70fb      	strb	r3, [r7, #3]
	for (int iii = 0; iii < NUM_STRIPS; iii++) g_all_strip_mask |= 1 << iii;
 8000af4:	2300      	movs	r3, #0
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	e00f      	b.n	8000b1a <ws2812b_init+0x36>
 8000afa:	2201      	movs	r2, #1
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	b21a      	sxth	r2, r3
 8000b04:	4b2c      	ldr	r3, [pc, #176]	; (8000bb8 <ws2812b_init+0xd4>)
 8000b06:	881b      	ldrh	r3, [r3, #0]
 8000b08:	b21b      	sxth	r3, r3
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	b21b      	sxth	r3, r3
 8000b0e:	b29a      	uxth	r2, r3
 8000b10:	4b29      	ldr	r3, [pc, #164]	; (8000bb8 <ws2812b_init+0xd4>)
 8000b12:	801a      	strh	r2, [r3, #0]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3301      	adds	r3, #1
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	ddec      	ble.n	8000afa <ws2812b_init+0x16>
	switch (num_strips)
 8000b20:	78fb      	ldrb	r3, [r7, #3]
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d110      	bne.n	8000b48 <ws2812b_init+0x64>
		case 2:
			g_num_leds += STRIP_2_LENGTH;
			if (STRIP_2_LENGTH > g_max_strip_length) g_max_strip_length = STRIP_2_LENGTH;
#endif
		case 1:
			g_num_leds += STRIP_1_LENGTH;
 8000b26:	4b25      	ldr	r3, [pc, #148]	; (8000bbc <ws2812b_init+0xd8>)
 8000b28:	881b      	ldrh	r3, [r3, #0]
 8000b2a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8000b2e:	b29a      	uxth	r2, r3
 8000b30:	4b22      	ldr	r3, [pc, #136]	; (8000bbc <ws2812b_init+0xd8>)
 8000b32:	801a      	strh	r2, [r3, #0]
			if (STRIP_1_LENGTH > g_max_strip_length) g_max_strip_length = STRIP_1_LENGTH;
 8000b34:	4b22      	ldr	r3, [pc, #136]	; (8000bc0 <ws2812b_init+0xdc>)
 8000b36:	881b      	ldrh	r3, [r3, #0]
 8000b38:	f5b3 7f1f 	cmp.w	r3, #636	; 0x27c
 8000b3c:	d203      	bcs.n	8000b46 <ws2812b_init+0x62>
 8000b3e:	4b20      	ldr	r3, [pc, #128]	; (8000bc0 <ws2812b_init+0xdc>)
 8000b40:	f44f 721f 	mov.w	r2, #636	; 0x27c
 8000b44:	801a      	strh	r2, [r3, #0]
		break;
 8000b46:	bf00      	nop
	}
    gp_pwm_data_fill = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
 8000b48:	4b1c      	ldr	r3, [pc, #112]	; (8000bbc <ws2812b_init+0xd8>)
 8000b4a:	881b      	ldrh	r3, [r3, #0]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4613      	mov	r3, r2
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	4413      	add	r3, r2
 8000b54:	00db      	lsls	r3, r3, #3
 8000b56:	ee07 3a90 	vmov	s15, r3
 8000b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b5e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000bc4 <ws2812b_init+0xe0>
 8000b62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b6a:	ee17 0a90 	vmov	r0, s15
 8000b6e:	f009 ff51 	bl	800aa14 <malloc>
 8000b72:	4603      	mov	r3, r0
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <ws2812b_init+0xe4>)
 8000b78:	601a      	str	r2, [r3, #0]
    //gp_pwm_data_ping = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
    //gp_pwm_data_pong = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
    g_size = (sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES);
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <ws2812b_init+0xd8>)
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	461a      	mov	r2, r3
 8000b80:	4613      	mov	r3, r2
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	4413      	add	r3, r2
 8000b86:	00db      	lsls	r3, r3, #3
 8000b88:	ee07 3a90 	vmov	s15, r3
 8000b8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b90:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000bc4 <ws2812b_init+0xe0>
 8000b94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b9c:	ee17 2a90 	vmov	r2, s15
 8000ba0:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <ws2812b_init+0xe8>)
 8000ba2:	601a      	str	r2, [r3, #0]
    //gp_pwm_data_fill = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_max_strip_length) + WS2812B_RESET_TIME_CYCLES);
	current_monitor_init();
 8000ba4:	f7ff fd0c 	bl	80005c0 <current_monitor_init>
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000a70 	.word	0x20000a70
 8000bb4:	200002f0 	.word	0x200002f0
 8000bb8:	20000a66 	.word	0x20000a66
 8000bbc:	20000a64 	.word	0x20000a64
 8000bc0:	20000a68 	.word	0x20000a68
 8000bc4:	453b8000 	.word	0x453b8000
 8000bc8:	20000a6c 	.word	0x20000a6c
 8000bcc:	20000ad8 	.word	0x20000ad8

08000bd0 <ws2812b_show_strip_one>:


void ws2812b_show_strip_one(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
    ws2812b_fill_pwm_buffer_strip_one();
 8000bd4:	f7ff fee0 	bl	8000998 <ws2812b_fill_pwm_buffer_strip_one>
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <uart_access_write_and_read_block_esp8266>:
	uart_access_hal_write_byte(uart_config_esp8266_handle(), data);
}


void uart_access_write_and_read_block_esp8266(uint8_t* write_data, uint16_t write_len, uint8_t* read_buf, uint16_t read_len)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af02      	add	r7, sp, #8
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	607a      	str	r2, [r7, #4]
 8000be6:	461a      	mov	r2, r3
 8000be8:	460b      	mov	r3, r1
 8000bea:	817b      	strh	r3, [r7, #10]
 8000bec:	4613      	mov	r3, r2
 8000bee:	813b      	strh	r3, [r7, #8]
	uart_access_hal_write_and_read_block(uart_config_esp8266_handle(), write_data, write_len, read_buf, read_len);
 8000bf0:	f009 f898 	bl	8009d24 <uart_config_esp8266_handle>
 8000bf4:	897a      	ldrh	r2, [r7, #10]
 8000bf6:	893b      	ldrh	r3, [r7, #8]
 8000bf8:	9300      	str	r3, [sp, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	68f9      	ldr	r1, [r7, #12]
 8000bfe:	f008 ff4f 	bl	8009aa0 <uart_access_hal_write_and_read_block>
}
 8000c02:	bf00      	nop
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <task_led_ctrl_button_to_isr>:
    return g_animate_led_interrupt;
}


isr_e task_led_ctrl_button_to_isr(const board_init_push_buttons_e button)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
    isr_e return_val;
    switch (button)
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	2b03      	cmp	r3, #3
 8000c1a:	d817      	bhi.n	8000c4c <task_led_ctrl_button_to_isr+0x40>
 8000c1c:	a201      	add	r2, pc, #4	; (adr r2, 8000c24 <task_led_ctrl_button_to_isr+0x18>)
 8000c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c22:	bf00      	nop
 8000c24:	08000c35 	.word	0x08000c35
 8000c28:	08000c3b 	.word	0x08000c3b
 8000c2c:	08000c41 	.word	0x08000c41
 8000c30:	08000c47 	.word	0x08000c47
    {
        case PUSH_BUTTON_A:
            return_val = ISR_SPEED;
 8000c34:	2300      	movs	r3, #0
 8000c36:	73fb      	strb	r3, [r7, #15]
        break;
 8000c38:	e009      	b.n	8000c4e <task_led_ctrl_button_to_isr+0x42>
        case PUSH_BUTTON_B:
            return_val = ISR_STATE;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	73fb      	strb	r3, [r7, #15]
        break;
 8000c3e:	e006      	b.n	8000c4e <task_led_ctrl_button_to_isr+0x42>
        case PUSH_BUTTON_C:
            return_val = ISR_COLOR;
 8000c40:	2302      	movs	r3, #2
 8000c42:	73fb      	strb	r3, [r7, #15]
        break;
 8000c44:	e003      	b.n	8000c4e <task_led_ctrl_button_to_isr+0x42>
        case PUSH_BUTTON_D:
            return_val = ISR_PAUSE;
 8000c46:	2303      	movs	r3, #3
 8000c48:	73fb      	strb	r3, [r7, #15]
        break;
 8000c4a:	e000      	b.n	8000c4e <task_led_ctrl_button_to_isr+0x42>
        default: // do nothing!
        break;
 8000c4c:	bf00      	nop
    }
    return return_val;
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <task_button_press_ctrl_set_interrupt_flag>:


void task_button_press_ctrl_set_interrupt_flag(const isr_e src)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
    g_animate_led_interrupt = true;
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <task_button_press_ctrl_set_interrupt_flag+0x24>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	701a      	strb	r2, [r3, #0]
    g_interrupt_flag[src] = true;
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <task_button_press_ctrl_set_interrupt_flag+0x28>)
 8000c70:	2101      	movs	r1, #1
 8000c72:	54d1      	strb	r1, [r2, r3]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	20000aff 	.word	0x20000aff
 8000c84:	20000b00 	.word	0x20000b00

08000c88 <task_button_press>:
    task_button_press_major_change = false;
}


void task_button_press(void *argument)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
    uint32_t button_pressed_bit = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60bb      	str	r3, [r7, #8]
    uint32_t timestamp_diff = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	60fb      	str	r3, [r7, #12]
    color_hex_code_e color = COLOR_HEX_BLACK;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
    IRQn_Type irq_type = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	74fb      	strb	r3, [r7, #19]
    while (1)
    {
        xTaskNotifyWait(0, button_pressed_bit, &button_pressed_bit, portMAX_DELAY);
 8000ca0:	68b9      	ldr	r1, [r7, #8]
 8000ca2:	f107 0208 	add.w	r2, r7, #8
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000caa:	2000      	movs	r0, #0
 8000cac:	f002 f890 	bl	8002dd0 <xTaskNotifyWait>
#if !defined(BOARD_SPUDGLO_V5)
        HAL_GPIO_WritePin(PIN_PORT_B, PIN_INT_LVL_EN, GPIO_PIN_RESET);
        osDelay(700);
        HAL_GPIO_WritePin(PIN_PORT_B, PIN_INT_LVL_EN, GPIO_PIN_SET);
#endif
        timestamp_diff = g_button_press_timestamp[(board_init_push_buttons_e) button_pressed_bit][TIMESTAMP_CURRENT] - \
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b84      	ldr	r3, [pc, #528]	; (8000ec8 <task_button_press+0x240>)
 8000cb8:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
                        g_button_press_timestamp[(board_init_push_buttons_e)button_pressed_bit][TIMESTAMP_PREVIOUS];
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	4981      	ldr	r1, [pc, #516]	; (8000ec8 <task_button_press+0x240>)
 8000cc2:	00db      	lsls	r3, r3, #3
 8000cc4:	440b      	add	r3, r1
 8000cc6:	685b      	ldr	r3, [r3, #4]
        timestamp_diff = g_button_press_timestamp[(board_init_push_buttons_e) button_pressed_bit][TIMESTAMP_CURRENT] - \
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	60fb      	str	r3, [r7, #12]
        if (timestamp_diff < SWITCH_FAST_PRESS_TIME_MILLISECONDS) fast_press_count++;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cd2:	d206      	bcs.n	8000ce2 <task_button_press+0x5a>
 8000cd4:	4b7d      	ldr	r3, [pc, #500]	; (8000ecc <task_button_press+0x244>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	4b7b      	ldr	r3, [pc, #492]	; (8000ecc <task_button_press+0x244>)
 8000cde:	701a      	strb	r2, [r3, #0]
 8000ce0:	e002      	b.n	8000ce8 <task_button_press+0x60>
        else fast_press_count = 0;
 8000ce2:	4b7a      	ldr	r3, [pc, #488]	; (8000ecc <task_button_press+0x244>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	701a      	strb	r2, [r3, #0]
        task_button_press_ctrl_set_interrupt_flag(task_led_ctrl_button_to_isr((board_init_push_buttons_e) button_pressed_bit));
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ff8d 	bl	8000c0c <task_led_ctrl_button_to_isr>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ffb1 	bl	8000c5c <task_button_press_ctrl_set_interrupt_flag>
        if (fast_press_count >= (SWITCH_HISTORY_DEPTH-1))
 8000cfa:	4b74      	ldr	r3, [pc, #464]	; (8000ecc <task_button_press+0x244>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2b03      	cmp	r3, #3
 8000d00:	d975      	bls.n	8000dee <task_button_press+0x166>
        {
            task_button_press_major_change = true;
 8000d02:	4b73      	ldr	r3, [pc, #460]	; (8000ed0 <task_button_press+0x248>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	701a      	strb	r2, [r3, #0]
            fast_press_count = 0;
 8000d08:	4b70      	ldr	r3, [pc, #448]	; (8000ecc <task_button_press+0x244>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
            switch ((board_init_push_buttons_e) button_pressed_bit)
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	2b03      	cmp	r3, #3
 8000d14:	d841      	bhi.n	8000d9a <task_button_press+0x112>
 8000d16:	a201      	add	r2, pc, #4	; (adr r2, 8000d1c <task_button_press+0x94>)
 8000d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d1c:	08000d2d 	.word	0x08000d2d
 8000d20:	08000d47 	.word	0x08000d47
 8000d24:	08000d63 	.word	0x08000d63
 8000d28:	08000d7d 	.word	0x08000d7d
            {
                case PUSH_BUTTON_A:
                    a_ok_count++;
 8000d2c:	4b69      	ldr	r3, [pc, #420]	; (8000ed4 <task_button_press+0x24c>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	3301      	adds	r3, #1
 8000d32:	4a68      	ldr	r2, [pc, #416]	; (8000ed4 <task_button_press+0x24c>)
 8000d34:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_GREEN;
 8000d36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d3a:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_A_IRQ;
 8000d3c:	2308      	movs	r3, #8
 8000d3e:	74fb      	strb	r3, [r7, #19]
                    task_led_ctrl_speed_reset();
 8000d40:	f000 f9b2 	bl	80010a8 <task_led_ctrl_speed_reset>

                break;
 8000d44:	e02a      	b.n	8000d9c <task_button_press+0x114>
                case PUSH_BUTTON_B:
                    b_ok_count++;
 8000d46:	4b64      	ldr	r3, [pc, #400]	; (8000ed8 <task_button_press+0x250>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	4a62      	ldr	r2, [pc, #392]	; (8000ed8 <task_button_press+0x250>)
 8000d4e:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_BLUE;
 8000d50:	23ff      	movs	r3, #255	; 0xff
 8000d52:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_B_IRQ;
 8000d54:	2328      	movs	r3, #40	; 0x28
 8000d56:	74fb      	strb	r3, [r7, #19]
                    task_led_ctrl_animate_iteration_reset();
 8000d58:	f000 f9b2 	bl	80010c0 <task_led_ctrl_animate_iteration_reset>
                    task_led_ctrl_animate_state_demo(); // enter demo state
 8000d5c:	f000 f9da 	bl	8001114 <task_led_ctrl_animate_state_demo>
                break;
 8000d60:	e01c      	b.n	8000d9c <task_button_press+0x114>
                case PUSH_BUTTON_C:
                    c_ok_count++;
 8000d62:	4b5e      	ldr	r3, [pc, #376]	; (8000edc <task_button_press+0x254>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	3301      	adds	r3, #1
 8000d68:	4a5c      	ldr	r2, [pc, #368]	; (8000edc <task_button_press+0x254>)
 8000d6a:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_RED;
 8000d6c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8000d70:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_C_IRQ;
 8000d72:	2317      	movs	r3, #23
 8000d74:	74fb      	strb	r3, [r7, #19]
                    // don't change iteration count.  Simply go to color demo mode.
                    task_led_ctrl_color_state_demo();
 8000d76:	f000 f943 	bl	8001000 <task_led_ctrl_color_state_demo>
                break;
 8000d7a:	e00f      	b.n	8000d9c <task_button_press+0x114>
                case PUSH_BUTTON_D:
                    task_led_ctrl_brightness_adjust();
 8000d7c:	f000 f8da 	bl	8000f34 <task_led_ctrl_brightness_adjust>
                    task_led_ctrl_clear_pause();
 8000d80:	f000 f908 	bl	8000f94 <task_led_ctrl_clear_pause>
                    d_ok_count++;
 8000d84:	4b56      	ldr	r3, [pc, #344]	; (8000ee0 <task_button_press+0x258>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	4a55      	ldr	r2, [pc, #340]	; (8000ee0 <task_button_press+0x258>)
 8000d8c:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_WHITE;
 8000d8e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000d92:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_D_IRQ;
 8000d94:	2306      	movs	r3, #6
 8000d96:	74fb      	strb	r3, [r7, #19]
                break;
 8000d98:	e000      	b.n	8000d9c <task_button_press+0x114>
                default:
                break;
 8000d9a:	bf00      	nop
            }
            for (uint8_t iii = 0; iii < 3; iii++)
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	74bb      	strb	r3, [r7, #18]
 8000da0:	e012      	b.n	8000dc8 <task_button_press+0x140>
            {
                animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, color);
 8000da2:	6979      	ldr	r1, [r7, #20]
 8000da4:	2001      	movs	r0, #1
 8000da6:	f7ff fcc1 	bl	800072c <animate_led_solid_custom_color>
                osDelay(500);
 8000daa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dae:	f000 fb63 	bl	8001478 <osDelay>
                animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLACK);
 8000db2:	2100      	movs	r1, #0
 8000db4:	2001      	movs	r0, #1
 8000db6:	f7ff fcb9 	bl	800072c <animate_led_solid_custom_color>
                osDelay(500);
 8000dba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dbe:	f000 fb5b 	bl	8001478 <osDelay>
            for (uint8_t iii = 0; iii < 3; iii++)
 8000dc2:	7cbb      	ldrb	r3, [r7, #18]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	74bb      	strb	r3, [r7, #18]
 8000dc8:	7cbb      	ldrb	r3, [r7, #18]
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d9e9      	bls.n	8000da2 <task_button_press+0x11a>
            }
            HAL_NVIC_SetPriority(irq_type, 24, 0);
 8000dce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2118      	movs	r1, #24
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f003 facd 	bl	8004376 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(irq_type);
 8000ddc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f003 fae4 	bl	80043ae <HAL_NVIC_EnableIRQ>
            task_button_press_major_change = false;
 8000de6:	4b3a      	ldr	r3, [pc, #232]	; (8000ed0 <task_button_press+0x248>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	701a      	strb	r2, [r3, #0]
 8000dec:	e758      	b.n	8000ca0 <task_button_press+0x18>
        }
        else
        {
            // no state change here
            task_button_press_ctrl_set_interrupt_flag(task_led_ctrl_button_to_isr((board_init_push_buttons_e) button_pressed_bit));
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff ff0a 	bl	8000c0c <task_led_ctrl_button_to_isr>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff ff2e 	bl	8000c5c <task_button_press_ctrl_set_interrupt_flag>
            switch ((board_init_push_buttons_e) button_pressed_bit)
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	d85d      	bhi.n	8000ec4 <task_button_press+0x23c>
 8000e08:	a201      	add	r2, pc, #4	; (adr r2, 8000e10 <task_button_press+0x188>)
 8000e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e0e:	bf00      	nop
 8000e10:	08000e21 	.word	0x08000e21
 8000e14:	08000e41 	.word	0x08000e41
 8000e18:	08000e75 	.word	0x08000e75
 8000e1c:	08000ea5 	.word	0x08000ea5
            {
                case PUSH_BUTTON_A:
                    a_ok_count++;
 8000e20:	4b2c      	ldr	r3, [pc, #176]	; (8000ed4 <task_button_press+0x24c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	3301      	adds	r3, #1
 8000e26:	4a2b      	ldr	r2, [pc, #172]	; (8000ed4 <task_button_press+0x24c>)
 8000e28:	6013      	str	r3, [r2, #0]
                    task_led_ctrl_speed_adjust();
 8000e2a:	f000 f925 	bl	8001078 <task_led_ctrl_speed_adjust>
                    HAL_NVIC_SetPriority(PUSH_BUTTON_A_IRQ, 24, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2118      	movs	r1, #24
 8000e32:	2008      	movs	r0, #8
 8000e34:	f003 fa9f 	bl	8004376 <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_A_IRQ);
 8000e38:	2008      	movs	r0, #8
 8000e3a:	f003 fab8 	bl	80043ae <HAL_NVIC_EnableIRQ>
                break;
 8000e3e:	e042      	b.n	8000ec6 <task_button_press+0x23e>
                case PUSH_BUTTON_B:
                    b_ok_count++;
 8000e40:	4b25      	ldr	r3, [pc, #148]	; (8000ed8 <task_button_press+0x250>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	3301      	adds	r3, #1
 8000e46:	4a24      	ldr	r2, [pc, #144]	; (8000ed8 <task_button_press+0x250>)
 8000e48:	6013      	str	r3, [r2, #0]
                    if (MASTER_LED_STATE_DEMO == task_led_ctrl_animate_state())
 8000e4a:	f000 f98b 	bl	8001164 <task_led_ctrl_animate_state>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d102      	bne.n	8000e5a <task_button_press+0x1d2>
                    {
                        task_led_ctrl_animate_state_fixed(); // animation count is auto cleared here.
 8000e54:	f000 f970 	bl	8001138 <task_led_ctrl_animate_state_fixed>
 8000e58:	e003      	b.n	8000e62 <task_button_press+0x1da>
                    }
                    else
                    {
                        task_led_ctrl_animate_iteration_reset();
 8000e5a:	f000 f931 	bl	80010c0 <task_led_ctrl_animate_iteration_reset>
                        task_led_ctrl_animate_adjust_state();
 8000e5e:	f000 f93b 	bl	80010d8 <task_led_ctrl_animate_adjust_state>
                    }
                    HAL_NVIC_SetPriority(PUSH_BUTTON_B_IRQ, 24, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2118      	movs	r1, #24
 8000e66:	2028      	movs	r0, #40	; 0x28
 8000e68:	f003 fa85 	bl	8004376 <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_B_IRQ);
 8000e6c:	2028      	movs	r0, #40	; 0x28
 8000e6e:	f003 fa9e 	bl	80043ae <HAL_NVIC_EnableIRQ>
                break;
 8000e72:	e028      	b.n	8000ec6 <task_button_press+0x23e>
                case PUSH_BUTTON_C:
                    c_ok_count++;
 8000e74:	4b19      	ldr	r3, [pc, #100]	; (8000edc <task_button_press+0x254>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	4a18      	ldr	r2, [pc, #96]	; (8000edc <task_button_press+0x254>)
 8000e7c:	6013      	str	r3, [r2, #0]
                    if (MASTER_COLOR_STATE_DEMO == task_led_ctrl_color_state())
 8000e7e:	f000 f8b3 	bl	8000fe8 <task_led_ctrl_color_state>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d102      	bne.n	8000e8e <task_button_press+0x206>
                    {
                        task_led_ctrl_color_state_fixed();
 8000e88:	f000 f8c6 	bl	8001018 <task_led_ctrl_color_state_fixed>
 8000e8c:	e001      	b.n	8000e92 <task_button_press+0x20a>
                    }
                    else
                    {
                        task_led_ctrl_color_adjust();
 8000e8e:	f000 f8d5 	bl	800103c <task_led_ctrl_color_adjust>
                    }
                    HAL_NVIC_SetPriority(PUSH_BUTTON_C_IRQ, 24, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2118      	movs	r1, #24
 8000e96:	2017      	movs	r0, #23
 8000e98:	f003 fa6d 	bl	8004376 <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_C_IRQ);
 8000e9c:	2017      	movs	r0, #23
 8000e9e:	f003 fa86 	bl	80043ae <HAL_NVIC_EnableIRQ>

                break;
 8000ea2:	e010      	b.n	8000ec6 <task_button_press+0x23e>
                case PUSH_BUTTON_D:
                    d_ok_count++;
 8000ea4:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <task_button_press+0x258>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	4a0d      	ldr	r2, [pc, #52]	; (8000ee0 <task_button_press+0x258>)
 8000eac:	6013      	str	r3, [r2, #0]
                    task_led_ctrl_pause();
 8000eae:	f000 f87d 	bl	8000fac <task_led_ctrl_pause>
                    HAL_NVIC_SetPriority(PUSH_BUTTON_D_IRQ, 24, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2118      	movs	r1, #24
 8000eb6:	2006      	movs	r0, #6
 8000eb8:	f003 fa5d 	bl	8004376 <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_D_IRQ);
 8000ebc:	2006      	movs	r0, #6
 8000ebe:	f003 fa76 	bl	80043ae <HAL_NVIC_EnableIRQ>
                break;
 8000ec2:	e000      	b.n	8000ec6 <task_button_press+0x23e>
                default:
                break;
 8000ec4:	bf00      	nop
        xTaskNotifyWait(0, button_pressed_bit, &button_pressed_bit, portMAX_DELAY);
 8000ec6:	e6eb      	b.n	8000ca0 <task_button_press+0x18>
 8000ec8:	20000adc 	.word	0x20000adc
 8000ecc:	20000afc 	.word	0x20000afc
 8000ed0:	20000afd 	.word	0x20000afd
 8000ed4:	20000b04 	.word	0x20000b04
 8000ed8:	20000b08 	.word	0x20000b08
 8000edc:	20000b0c 	.word	0x20000b0c
 8000ee0:	20000b10 	.word	0x20000b10

08000ee4 <task_led_ctrl_strip_one>:
    if (MASTER_COLOR_STATE_DEMO == task_led_ctrl_color_state()) task_led_ctrl_color_random();
}
uint8_t g_read_buffer[20] = {0};
uint8_t g_data[2];
void task_led_ctrl_strip_one(void *argument)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af02      	add	r7, sp, #8
 8000eea:	6078      	str	r0, [r7, #4]


	board_init_specific_esp8266_power_disable();
 8000eec:	f009 fc42 	bl	800a774 <board_init_specific_esp8266_power_disable>
	osDelay(2000);
 8000ef0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ef4:	f000 fac0 	bl	8001478 <osDelay>
	board_init_specific_esp8266_power_enable();
 8000ef8:	f009 fc1c 	bl	800a734 <board_init_specific_esp8266_power_enable>

//	board_init_specific_esp8266_reset_assert();
//	board_init_specific_esp8266_uart_boot_enable();
//	osDelay(1000);
//	board_init_specific_esp8266_reset_deassert();
	board_init_specific_esp8266_uart_boot_disable();
 8000efc:	f009 fbfa 	bl	800a6f4 <board_init_specific_esp8266_uart_boot_disable>
	board_init_specific_esp8266_reset_assert();
 8000f00:	f009 fc58 	bl	800a7b4 <board_init_specific_esp8266_reset_assert>
	osDelay(2000);
 8000f04:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f08:	f000 fab6 	bl	8001478 <osDelay>
	board_init_specific_esp8266_reset_deassert();
 8000f0c:	f009 fc72 	bl	800a7f4 <board_init_specific_esp8266_reset_deassert>
	osDelay(2000);
 8000f10:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f14:	f000 fab0 	bl	8001478 <osDelay>
	uart_config_hal_setup();
 8000f18:	f008 fdfa 	bl	8009b10 <uart_config_hal_setup>
	//while(1);
	//esp8266_write_command(ESP8266_AT_STARTUP, false, 0);
	esp8266_write_command_and_read_response(ESP8266_AT_STARTUP, false, 0, (char *)g_read_buffer, 10);
 8000f1c:	230a      	movs	r3, #10
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	4b03      	ldr	r3, [pc, #12]	; (8000f30 <task_led_ctrl_strip_one+0x4c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	2100      	movs	r1, #0
 8000f26:	2000      	movs	r0, #0
 8000f28:	f000 f93c 	bl	80011a4 <esp8266_write_command_and_read_response>
	//uart_access_hal_read_block(uart_config_esp8266_handle(), g_read_buffer, 2);
	//esp8266_write_command(ESP8266_AT_STARTUP, false, 0);
	//uart_access_hal_read_block(uart_config_esp8266_handle(), g_read_buffer, 2);

	//uart_access_read_block_esp8266(g_data, 2);
	while(1);
 8000f2c:	e7fe      	b.n	8000f2c <task_led_ctrl_strip_one+0x48>
 8000f2e:	bf00      	nop
 8000f30:	20000b1c 	.word	0x20000b1c

08000f34 <task_led_ctrl_brightness_adjust>:
    }
}


void task_led_ctrl_brightness_adjust(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
    if (LED_BRIGHTNESS_FIRST == g_led_brightness) g_led_brightness = LED_BRIGHTNESS_LAST;
 8000f38:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <task_led_ctrl_brightness_adjust+0x58>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d103      	bne.n	8000f48 <task_led_ctrl_brightness_adjust+0x14>
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <task_led_ctrl_brightness_adjust+0x58>)
 8000f42:	2202      	movs	r2, #2
 8000f44:	701a      	strb	r2, [r3, #0]
 8000f46:	e005      	b.n	8000f54 <task_led_ctrl_brightness_adjust+0x20>
    else g_led_brightness = (led_brightness_e) (g_led_brightness - 1);
 8000f48:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <task_led_ctrl_brightness_adjust+0x58>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <task_led_ctrl_brightness_adjust+0x58>)
 8000f52:	701a      	strb	r2, [r3, #0]
    switch (g_led_brightness)
 8000f54:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <task_led_ctrl_brightness_adjust+0x58>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d010      	beq.n	8000f7e <task_led_ctrl_brightness_adjust+0x4a>
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	dc13      	bgt.n	8000f88 <task_led_ctrl_brightness_adjust+0x54>
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d002      	beq.n	8000f6a <task_led_ctrl_brightness_adjust+0x36>
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d005      	beq.n	8000f74 <task_led_ctrl_brightness_adjust+0x40>
        break;
        case LED_BRIGHTNESS_1_PERCENT:
            current_monitor_set(0.01f);
        break;
    }
}
 8000f68:	e00e      	b.n	8000f88 <task_led_ctrl_brightness_adjust+0x54>
            current_monitor_set(1.0f);
 8000f6a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000f6e:	f7ff fb05 	bl	800057c <current_monitor_set>
        break;
 8000f72:	e009      	b.n	8000f88 <task_led_ctrl_brightness_adjust+0x54>
            current_monitor_set(0.25f);
 8000f74:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8000f78:	f7ff fb00 	bl	800057c <current_monitor_set>
        break;
 8000f7c:	e004      	b.n	8000f88 <task_led_ctrl_brightness_adjust+0x54>
            current_monitor_set(0.01f);
 8000f7e:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8000f90 <task_led_ctrl_brightness_adjust+0x5c>
 8000f82:	f7ff fafb 	bl	800057c <current_monitor_set>
        break;
 8000f86:	bf00      	nop
}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000b17 	.word	0x20000b17
 8000f90:	3c23d70a 	.word	0x3c23d70a

08000f94 <task_led_ctrl_clear_pause>:


void task_led_ctrl_clear_pause(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
    g_animate_led_pause_flag = false;
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <task_led_ctrl_clear_pause+0x14>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	20000afe 	.word	0x20000afe

08000fac <task_led_ctrl_pause>:


void task_led_ctrl_pause(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
    static uint8_t flip_or_flop = 1;
    if (flip_or_flop) g_animate_led_pause_flag = true;
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <task_led_ctrl_pause+0x34>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <task_led_ctrl_pause+0x14>
 8000fb8:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <task_led_ctrl_pause+0x38>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	701a      	strb	r2, [r3, #0]
 8000fbe:	e002      	b.n	8000fc6 <task_led_ctrl_pause+0x1a>
    else g_animate_led_pause_flag = false;
 8000fc0:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <task_led_ctrl_pause+0x38>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
    flip_or_flop ^= 1;
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <task_led_ctrl_pause+0x34>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	f083 0301 	eor.w	r3, r3, #1
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <task_led_ctrl_pause+0x34>)
 8000fd2:	701a      	strb	r2, [r3, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20000007 	.word	0x20000007
 8000fe4:	20000afe 	.word	0x20000afe

08000fe8 <task_led_ctrl_color_state>:


master_color_state_e task_led_ctrl_color_state(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
    return g_master_color_state;
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <task_led_ctrl_color_state+0x14>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000b18 	.word	0x20000b18

08001000 <task_led_ctrl_color_state_demo>:


void task_led_ctrl_color_state_demo(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
    g_master_color_state = MASTER_COLOR_STATE_DEMO;
 8001004:	4b03      	ldr	r3, [pc, #12]	; (8001014 <task_led_ctrl_color_state_demo+0x14>)
 8001006:	2200      	movs	r2, #0
 8001008:	701a      	strb	r2, [r3, #0]
}
 800100a:	bf00      	nop
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	20000b18 	.word	0x20000b18

08001018 <task_led_ctrl_color_state_fixed>:


void task_led_ctrl_color_state_fixed(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
    g_master_color_state = MASTER_COLOR_STATE_FIXED;
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <task_led_ctrl_color_state_fixed+0x1c>)
 800101e:	2201      	movs	r2, #1
 8001020:	701a      	strb	r2, [r3, #0]
    g_led_color = COLORS_FIRST;
 8001022:	4b05      	ldr	r3, [pc, #20]	; (8001038 <task_led_ctrl_color_state_fixed+0x20>)
 8001024:	2200      	movs	r2, #0
 8001026:	701a      	strb	r2, [r3, #0]
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	20000b18 	.word	0x20000b18
 8001038:	20000006 	.word	0x20000006

0800103c <task_led_ctrl_color_adjust>:
    g_led_color = COLORS_RED;
}


bool task_led_ctrl_color_adjust(void)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
    bool return_val = false;
 8001042:	2300      	movs	r3, #0
 8001044:	71fb      	strb	r3, [r7, #7]
    if (COLORS_LAST == g_led_color)
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <task_led_ctrl_color_adjust+0x38>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b15      	cmp	r3, #21
 800104c:	d105      	bne.n	800105a <task_led_ctrl_color_adjust+0x1e>
    {
        g_led_color = COLORS_FIRST;
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <task_led_ctrl_color_adjust+0x38>)
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
        return_val = true;
 8001054:	2301      	movs	r3, #1
 8001056:	71fb      	strb	r3, [r7, #7]
 8001058:	e005      	b.n	8001066 <task_led_ctrl_color_adjust+0x2a>
    }
    else g_led_color = (all_colors_e) (g_led_color + 1);
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <task_led_ctrl_color_adjust+0x38>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	3301      	adds	r3, #1
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4b04      	ldr	r3, [pc, #16]	; (8001074 <task_led_ctrl_color_adjust+0x38>)
 8001064:	701a      	strb	r2, [r3, #0]
    return return_val;
 8001066:	79fb      	ldrb	r3, [r7, #7]
}
 8001068:	4618      	mov	r0, r3
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	20000006 	.word	0x20000006

08001078 <task_led_ctrl_speed_adjust>:
    return speed_factor;
}


void task_led_ctrl_speed_adjust(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
    if (LED_SPEED_FIRST == g_led_speed) g_led_speed = LED_SPEED_LAST;
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <task_led_ctrl_speed_adjust+0x2c>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d103      	bne.n	800108c <task_led_ctrl_speed_adjust+0x14>
 8001084:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <task_led_ctrl_speed_adjust+0x2c>)
 8001086:	2204      	movs	r2, #4
 8001088:	701a      	strb	r2, [r3, #0]
    else g_led_speed = (led_speed_e) (g_led_speed - 1);
}
 800108a:	e005      	b.n	8001098 <task_led_ctrl_speed_adjust+0x20>
    else g_led_speed = (led_speed_e) (g_led_speed - 1);
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <task_led_ctrl_speed_adjust+0x2c>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	3b01      	subs	r3, #1
 8001092:	b2da      	uxtb	r2, r3
 8001094:	4b03      	ldr	r3, [pc, #12]	; (80010a4 <task_led_ctrl_speed_adjust+0x2c>)
 8001096:	701a      	strb	r2, [r3, #0]
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	20000b16 	.word	0x20000b16

080010a8 <task_led_ctrl_speed_reset>:


void task_led_ctrl_speed_reset(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
    g_led_speed = LED_SPEED_1X;
 80010ac:	4b03      	ldr	r3, [pc, #12]	; (80010bc <task_led_ctrl_speed_reset+0x14>)
 80010ae:	2202      	movs	r2, #2
 80010b0:	701a      	strb	r2, [r3, #0]
}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	20000b16 	.word	0x20000b16

080010c0 <task_led_ctrl_animate_iteration_reset>:
    return ((float)g_delay_in_animation_ms / task_led_ctrl_speed());
}


void task_led_ctrl_animate_iteration_reset(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
    g_animation_iterations = 0;
 80010c4:	4b03      	ldr	r3, [pc, #12]	; (80010d4 <task_led_ctrl_animate_iteration_reset+0x14>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	20000b19 	.word	0x20000b19

080010d8 <task_led_ctrl_animate_adjust_state>:


bool task_led_ctrl_animate_adjust_state(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
    bool return_val = false;
 80010de:	2300      	movs	r3, #0
 80010e0:	71fb      	strb	r3, [r7, #7]
    if (LED_STATE_LAST == g_led_state)
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <task_led_ctrl_animate_adjust_state+0x38>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b09      	cmp	r3, #9
 80010e8:	d105      	bne.n	80010f6 <task_led_ctrl_animate_adjust_state+0x1e>
    {
        g_led_state = LED_STATE_FIRST;
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <task_led_ctrl_animate_adjust_state+0x38>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]
        return_val = true;
 80010f0:	2301      	movs	r3, #1
 80010f2:	71fb      	strb	r3, [r7, #7]
 80010f4:	e005      	b.n	8001102 <task_led_ctrl_animate_adjust_state+0x2a>
    }
    else g_led_state = (led_state_e) (g_led_state + 1);
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <task_led_ctrl_animate_adjust_state+0x38>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	3301      	adds	r3, #1
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4b04      	ldr	r3, [pc, #16]	; (8001110 <task_led_ctrl_animate_adjust_state+0x38>)
 8001100:	701a      	strb	r2, [r3, #0]
    return return_val;
 8001102:	79fb      	ldrb	r3, [r7, #7]
}
 8001104:	4618      	mov	r0, r3
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	20000b15 	.word	0x20000b15

08001114 <task_led_ctrl_animate_state_demo>:


void task_led_ctrl_animate_state_demo(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
    g_master_led_state = MASTER_LED_STATE_DEMO;
 8001118:	4b05      	ldr	r3, [pc, #20]	; (8001130 <task_led_ctrl_animate_state_demo+0x1c>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
    g_animation_iterations = 0;
 800111e:	4b05      	ldr	r3, [pc, #20]	; (8001134 <task_led_ctrl_animate_state_demo+0x20>)
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	20000b14 	.word	0x20000b14
 8001134:	20000b19 	.word	0x20000b19

08001138 <task_led_ctrl_animate_state_fixed>:


void task_led_ctrl_animate_state_fixed(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
    g_master_led_state = MASTER_LED_STATE_FIXED;
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <task_led_ctrl_animate_state_fixed+0x20>)
 800113e:	2201      	movs	r2, #1
 8001140:	701a      	strb	r2, [r3, #0]
    g_led_state = LED_STATE_FIRST; // set first state
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <task_led_ctrl_animate_state_fixed+0x24>)
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
    g_animation_iterations = 0;
 8001148:	4b05      	ldr	r3, [pc, #20]	; (8001160 <task_led_ctrl_animate_state_fixed+0x28>)
 800114a:	2200      	movs	r2, #0
 800114c:	701a      	strb	r2, [r3, #0]
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	20000b14 	.word	0x20000b14
 800115c:	20000b15 	.word	0x20000b15
 8001160:	20000b19 	.word	0x20000b19

08001164 <task_led_ctrl_animate_state>:


master_led_state_e task_led_ctrl_animate_state(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
    return g_master_led_state;
 8001168:	4b03      	ldr	r3, [pc, #12]	; (8001178 <task_led_ctrl_animate_state+0x14>)
 800116a:	781b      	ldrb	r3, [r3, #0]
}
 800116c:	4618      	mov	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20000b14 	.word	0x20000b14

0800117c <esp8266_write_and_read_block>:
	[ESP8266_AT_CIPSERVER] = "AT+CIPSERVER"
};


void esp8266_write_and_read_block(uint8_t* write_data, uint16_t write_len, uint8_t* read_buf, uint16_t read_len)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	607a      	str	r2, [r7, #4]
 8001186:	461a      	mov	r2, r3
 8001188:	460b      	mov	r3, r1
 800118a:	817b      	strh	r3, [r7, #10]
 800118c:	4613      	mov	r3, r2
 800118e:	813b      	strh	r3, [r7, #8]
	uart_access_write_and_read_block_esp8266(write_data, write_len, read_buf, read_len);
 8001190:	8979      	ldrh	r1, [r7, #10]
 8001192:	893b      	ldrh	r3, [r7, #8]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	68f8      	ldr	r0, [r7, #12]
 8001198:	f7ff fd20 	bl	8000bdc <uart_access_write_and_read_block_esp8266>
}
 800119c:	bf00      	nop
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <esp8266_write_command_and_read_response>:
}


uint8_t g_buffer_tx[20] = {0};
void esp8266_write_command_and_read_response(esp8266_at_commands_e cmd_tag, bool parameters, char* param, char *read_buf, uint16_t read_len)
{
 80011a4:	b590      	push	{r4, r7, lr}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60ba      	str	r2, [r7, #8]
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	4603      	mov	r3, r0
 80011b0:	73fb      	strb	r3, [r7, #15]
 80011b2:	460b      	mov	r3, r1
 80011b4:	73bb      	strb	r3, [r7, #14]
//	{
//		strncat(command, param, strlen(param));
//	}
//	strncat(command, "\r\n", 2);
//	g_length = strlen(command);
	memcpy(g_buffer_tx, esp8266_at_command_lookup[cmd_tag], strlen(esp8266_at_command_lookup[cmd_tag]));
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
 80011b8:	4a1d      	ldr	r2, [pc, #116]	; (8001230 <esp8266_write_command_and_read_response+0x8c>)
 80011ba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	4a1b      	ldr	r2, [pc, #108]	; (8001230 <esp8266_write_command_and_read_response+0x8c>)
 80011c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff f802 	bl	80001d0 <strlen>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461a      	mov	r2, r3
 80011d0:	4621      	mov	r1, r4
 80011d2:	4818      	ldr	r0, [pc, #96]	; (8001234 <esp8266_write_command_and_read_response+0x90>)
 80011d4:	f009 fe33 	bl	800ae3e <memcpy>
	g_buffer_tx[strlen(esp8266_at_command_lookup[cmd_tag])] = 13;
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	4a15      	ldr	r2, [pc, #84]	; (8001230 <esp8266_write_command_and_read_response+0x8c>)
 80011dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7fe fff5 	bl	80001d0 <strlen>
 80011e6:	4603      	mov	r3, r0
 80011e8:	4a12      	ldr	r2, [pc, #72]	; (8001234 <esp8266_write_command_and_read_response+0x90>)
 80011ea:	210d      	movs	r1, #13
 80011ec:	54d1      	strb	r1, [r2, r3]
	g_buffer_tx[strlen(esp8266_at_command_lookup[cmd_tag]) + 1 ] = 10;
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
 80011f0:	4a0f      	ldr	r2, [pc, #60]	; (8001230 <esp8266_write_command_and_read_response+0x8c>)
 80011f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7fe ffea 	bl	80001d0 <strlen>
 80011fc:	4603      	mov	r3, r0
 80011fe:	3301      	adds	r3, #1
 8001200:	4a0c      	ldr	r2, [pc, #48]	; (8001234 <esp8266_write_command_and_read_response+0x90>)
 8001202:	210a      	movs	r1, #10
 8001204:	54d1      	strb	r1, [r2, r3]

	esp8266_write_and_read_block(g_buffer_tx, strlen(esp8266_at_command_lookup[cmd_tag]) + 2, (uint8_t *)read_buf, read_len);
 8001206:	7bfb      	ldrb	r3, [r7, #15]
 8001208:	4a09      	ldr	r2, [pc, #36]	; (8001230 <esp8266_write_command_and_read_response+0x8c>)
 800120a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120e:	4618      	mov	r0, r3
 8001210:	f7fe ffde 	bl	80001d0 <strlen>
 8001214:	4603      	mov	r3, r0
 8001216:	b29b      	uxth	r3, r3
 8001218:	3302      	adds	r3, #2
 800121a:	b299      	uxth	r1, r3
 800121c:	8c3b      	ldrh	r3, [r7, #32]
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	4804      	ldr	r0, [pc, #16]	; (8001234 <esp8266_write_command_and_read_response+0x90>)
 8001222:	f7ff ffab 	bl	800117c <esp8266_write_and_read_block>
}
 8001226:	bf00      	nop
 8001228:	3714      	adds	r7, #20
 800122a:	46bd      	mov	sp, r7
 800122c:	bd90      	pop	{r4, r7, pc}
 800122e:	bf00      	nop
 8001230:	20000008 	.word	0x20000008
 8001234:	20000b30 	.word	0x20000b30

08001238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	6039      	str	r1, [r7, #0]
 8001242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001248:	2b00      	cmp	r3, #0
 800124a:	db0a      	blt.n	8001262 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	b2da      	uxtb	r2, r3
 8001250:	490c      	ldr	r1, [pc, #48]	; (8001284 <__NVIC_SetPriority+0x4c>)
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	0112      	lsls	r2, r2, #4
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	440b      	add	r3, r1
 800125c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001260:	e00a      	b.n	8001278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4908      	ldr	r1, [pc, #32]	; (8001288 <__NVIC_SetPriority+0x50>)
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	f003 030f 	and.w	r3, r3, #15
 800126e:	3b04      	subs	r3, #4
 8001270:	0112      	lsls	r2, r2, #4
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	440b      	add	r3, r1
 8001276:	761a      	strb	r2, [r3, #24]
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	e000e100 	.word	0xe000e100
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001290:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <SysTick_Handler+0x1c>)
 8001292:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001294:	f001 fd10 	bl	8002cb8 <xTaskGetSchedulerState>
 8001298:	4603      	mov	r3, r0
 800129a:	2b01      	cmp	r3, #1
 800129c:	d001      	beq.n	80012a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800129e:	f002 fc2b 	bl	8003af8 <xPortSysTickHandler>
  }
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	e000e010 	.word	0xe000e010

080012ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80012b0:	2100      	movs	r1, #0
 80012b2:	f06f 0004 	mvn.w	r0, #4
 80012b6:	f7ff ffbf 	bl	8001238 <__NVIC_SetPriority>
#endif
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80012c6:	f3ef 8305 	mrs	r3, IPSR
 80012ca:	603b      	str	r3, [r7, #0]
  return(result);
 80012cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80012d2:	f06f 0305 	mvn.w	r3, #5
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	e00c      	b.n	80012f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80012da:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <osKernelInitialize+0x44>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d105      	bne.n	80012ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <osKernelInitialize+0x44>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80012e8:	2300      	movs	r3, #0
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	e002      	b.n	80012f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80012ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80012f4:	687b      	ldr	r3, [r7, #4]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	20000b44 	.word	0x20000b44

08001308 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800130e:	f3ef 8305 	mrs	r3, IPSR
 8001312:	603b      	str	r3, [r7, #0]
  return(result);
 8001314:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <osKernelStart+0x1a>
    stat = osErrorISR;
 800131a:	f06f 0305 	mvn.w	r3, #5
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	e010      	b.n	8001344 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <osKernelStart+0x48>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d109      	bne.n	800133e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800132a:	f7ff ffbf 	bl	80012ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800132e:	4b08      	ldr	r3, [pc, #32]	; (8001350 <osKernelStart+0x48>)
 8001330:	2202      	movs	r2, #2
 8001332:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001334:	f001 f866 	bl	8002404 <vTaskStartScheduler>
      stat = osOK;
 8001338:	2300      	movs	r3, #0
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	e002      	b.n	8001344 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800133e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001342:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001344:	687b      	ldr	r3, [r7, #4]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000b44 	.word	0x20000b44

08001354 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b08e      	sub	sp, #56	; 0x38
 8001358:	af04      	add	r7, sp, #16
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001360:	2300      	movs	r3, #0
 8001362:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001364:	f3ef 8305 	mrs	r3, IPSR
 8001368:	617b      	str	r3, [r7, #20]
  return(result);
 800136a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800136c:	2b00      	cmp	r3, #0
 800136e:	d17e      	bne.n	800146e <osThreadNew+0x11a>
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d07b      	beq.n	800146e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001376:	2380      	movs	r3, #128	; 0x80
 8001378:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800137a:	2318      	movs	r3, #24
 800137c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800137e:	2300      	movs	r3, #0
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8001382:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001386:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d045      	beq.n	800141a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d002      	beq.n	800139c <osThreadNew+0x48>
        name = attr->name;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d002      	beq.n	80013aa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d008      	beq.n	80013c2 <osThreadNew+0x6e>
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	2b38      	cmp	r3, #56	; 0x38
 80013b4:	d805      	bhi.n	80013c2 <osThreadNew+0x6e>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <osThreadNew+0x72>
        return (NULL);
 80013c2:	2300      	movs	r3, #0
 80013c4:	e054      	b.n	8001470 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	089b      	lsrs	r3, r3, #2
 80013d4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00e      	beq.n	80013fc <osThreadNew+0xa8>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	2b5b      	cmp	r3, #91	; 0x5b
 80013e4:	d90a      	bls.n	80013fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d006      	beq.n	80013fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d002      	beq.n	80013fc <osThreadNew+0xa8>
        mem = 1;
 80013f6:	2301      	movs	r3, #1
 80013f8:	61bb      	str	r3, [r7, #24]
 80013fa:	e010      	b.n	800141e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d10c      	bne.n	800141e <osThreadNew+0xca>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d108      	bne.n	800141e <osThreadNew+0xca>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	691b      	ldr	r3, [r3, #16]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d104      	bne.n	800141e <osThreadNew+0xca>
          mem = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	61bb      	str	r3, [r7, #24]
 8001418:	e001      	b.n	800141e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d110      	bne.n	8001446 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800142c:	9202      	str	r2, [sp, #8]
 800142e:	9301      	str	r3, [sp, #4]
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	6a3a      	ldr	r2, [r7, #32]
 8001438:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800143a:	68f8      	ldr	r0, [r7, #12]
 800143c:	f000 fe0c 	bl	8002058 <xTaskCreateStatic>
 8001440:	4603      	mov	r3, r0
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	e013      	b.n	800146e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d110      	bne.n	800146e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800144c:	6a3b      	ldr	r3, [r7, #32]
 800144e:	b29a      	uxth	r2, r3
 8001450:	f107 0310 	add.w	r3, r7, #16
 8001454:	9301      	str	r3, [sp, #4]
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800145e:	68f8      	ldr	r0, [r7, #12]
 8001460:	f000 fe57 	bl	8002112 <xTaskCreate>
 8001464:	4603      	mov	r3, r0
 8001466:	2b01      	cmp	r3, #1
 8001468:	d001      	beq.n	800146e <osThreadNew+0x11a>
            hTask = NULL;
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800146e:	693b      	ldr	r3, [r7, #16]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3728      	adds	r7, #40	; 0x28
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001480:	f3ef 8305 	mrs	r3, IPSR
 8001484:	60bb      	str	r3, [r7, #8]
  return(result);
 8001486:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001488:	2b00      	cmp	r3, #0
 800148a:	d003      	beq.n	8001494 <osDelay+0x1c>
    stat = osErrorISR;
 800148c:	f06f 0305 	mvn.w	r3, #5
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	e007      	b.n	80014a4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d002      	beq.n	80014a4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f000 ff7c 	bl	800239c <vTaskDelay>
    }
  }

  return (stat);
 80014a4:	68fb      	ldr	r3, [r7, #12]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4a07      	ldr	r2, [pc, #28]	; (80014dc <vApplicationGetIdleTaskMemory+0x2c>)
 80014c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	4a06      	ldr	r2, [pc, #24]	; (80014e0 <vApplicationGetIdleTaskMemory+0x30>)
 80014c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2280      	movs	r2, #128	; 0x80
 80014cc:	601a      	str	r2, [r3, #0]
}
 80014ce:	bf00      	nop
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	20000b48 	.word	0x20000b48
 80014e0:	20000ba4 	.word	0x20000ba4

080014e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	4a07      	ldr	r2, [pc, #28]	; (8001510 <vApplicationGetTimerTaskMemory+0x2c>)
 80014f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	4a06      	ldr	r2, [pc, #24]	; (8001514 <vApplicationGetTimerTaskMemory+0x30>)
 80014fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001502:	601a      	str	r2, [r3, #0]
}
 8001504:	bf00      	nop
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	20000da4 	.word	0x20000da4
 8001514:	20000e00 	.word	0x20000e00

08001518 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f103 0208 	add.w	r2, r3, #8
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001530:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f103 0208 	add.w	r2, r3, #8
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f103 0208 	add.w	r2, r3, #8
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001572:	b480      	push	{r7}
 8001574:	b085      	sub	sp, #20
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
 800157a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	1c5a      	adds	r2, r3, #1
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	601a      	str	r2, [r3, #0]
}
 80015ae:	bf00      	nop
 80015b0:	3714      	adds	r7, #20
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80015ba:	b480      	push	{r7}
 80015bc:	b085      	sub	sp, #20
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
 80015c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015d0:	d103      	bne.n	80015da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	e00c      	b.n	80015f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	3308      	adds	r3, #8
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	e002      	b.n	80015e8 <vListInsert+0x2e>
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	68ba      	ldr	r2, [r7, #8]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d2f6      	bcs.n	80015e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	1c5a      	adds	r2, r3, #1
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	601a      	str	r2, [r3, #0]
}
 8001620:	bf00      	nop
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	6892      	ldr	r2, [r2, #8]
 8001642:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	6852      	ldr	r2, [r2, #4]
 800164c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	429a      	cmp	r2, r3
 8001656:	d103      	bne.n	8001660 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	1e5a      	subs	r2, r3, #1
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d10a      	bne.n	80016aa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001698:	f383 8811 	msr	BASEPRI, r3
 800169c:	f3bf 8f6f 	isb	sy
 80016a0:	f3bf 8f4f 	dsb	sy
 80016a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80016a6:	bf00      	nop
 80016a8:	e7fe      	b.n	80016a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80016aa:	f002 f993 	bl	80039d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016b6:	68f9      	ldr	r1, [r7, #12]
 80016b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80016ba:	fb01 f303 	mul.w	r3, r1, r3
 80016be:	441a      	add	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2200      	movs	r2, #0
 80016c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016da:	3b01      	subs	r3, #1
 80016dc:	68f9      	ldr	r1, [r7, #12]
 80016de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80016e0:	fb01 f303 	mul.w	r3, r1, r3
 80016e4:	441a      	add	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	22ff      	movs	r2, #255	; 0xff
 80016ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	22ff      	movs	r2, #255	; 0xff
 80016f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d114      	bne.n	800172a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d01a      	beq.n	800173e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	3310      	adds	r3, #16
 800170c:	4618      	mov	r0, r3
 800170e:	f001 f915 	bl	800293c <xTaskRemoveFromEventList>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d012      	beq.n	800173e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001718:	4b0c      	ldr	r3, [pc, #48]	; (800174c <xQueueGenericReset+0xcc>)
 800171a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	f3bf 8f4f 	dsb	sy
 8001724:	f3bf 8f6f 	isb	sy
 8001728:	e009      	b.n	800173e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	3310      	adds	r3, #16
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fef2 	bl	8001518 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	3324      	adds	r3, #36	; 0x24
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff feed 	bl	8001518 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800173e:	f002 f979 	bl	8003a34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001742:	2301      	movs	r3, #1
}
 8001744:	4618      	mov	r0, r3
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	e000ed04 	.word	0xe000ed04

08001750 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08e      	sub	sp, #56	; 0x38
 8001754:	af02      	add	r7, sp, #8
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
 800175c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d10a      	bne.n	800177a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8001764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001768:	f383 8811 	msr	BASEPRI, r3
 800176c:	f3bf 8f6f 	isb	sy
 8001770:	f3bf 8f4f 	dsb	sy
 8001774:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001776:	bf00      	nop
 8001778:	e7fe      	b.n	8001778 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d10a      	bne.n	8001796 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8001780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001784:	f383 8811 	msr	BASEPRI, r3
 8001788:	f3bf 8f6f 	isb	sy
 800178c:	f3bf 8f4f 	dsb	sy
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001792:	bf00      	nop
 8001794:	e7fe      	b.n	8001794 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d002      	beq.n	80017a2 <xQueueGenericCreateStatic+0x52>
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <xQueueGenericCreateStatic+0x56>
 80017a2:	2301      	movs	r3, #1
 80017a4:	e000      	b.n	80017a8 <xQueueGenericCreateStatic+0x58>
 80017a6:	2300      	movs	r3, #0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d10a      	bne.n	80017c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80017ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017b0:	f383 8811 	msr	BASEPRI, r3
 80017b4:	f3bf 8f6f 	isb	sy
 80017b8:	f3bf 8f4f 	dsb	sy
 80017bc:	623b      	str	r3, [r7, #32]
}
 80017be:	bf00      	nop
 80017c0:	e7fe      	b.n	80017c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d102      	bne.n	80017ce <xQueueGenericCreateStatic+0x7e>
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <xQueueGenericCreateStatic+0x82>
 80017ce:	2301      	movs	r3, #1
 80017d0:	e000      	b.n	80017d4 <xQueueGenericCreateStatic+0x84>
 80017d2:	2300      	movs	r3, #0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d10a      	bne.n	80017ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80017d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017dc:	f383 8811 	msr	BASEPRI, r3
 80017e0:	f3bf 8f6f 	isb	sy
 80017e4:	f3bf 8f4f 	dsb	sy
 80017e8:	61fb      	str	r3, [r7, #28]
}
 80017ea:	bf00      	nop
 80017ec:	e7fe      	b.n	80017ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80017ee:	2350      	movs	r3, #80	; 0x50
 80017f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	2b50      	cmp	r3, #80	; 0x50
 80017f6:	d00a      	beq.n	800180e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80017f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017fc:	f383 8811 	msr	BASEPRI, r3
 8001800:	f3bf 8f6f 	isb	sy
 8001804:	f3bf 8f4f 	dsb	sy
 8001808:	61bb      	str	r3, [r7, #24]
}
 800180a:	bf00      	nop
 800180c:	e7fe      	b.n	800180c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800180e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001816:	2b00      	cmp	r3, #0
 8001818:	d00d      	beq.n	8001836 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800181a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800181c:	2201      	movs	r2, #1
 800181e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001822:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001828:	9300      	str	r3, [sp, #0]
 800182a:	4613      	mov	r3, r2
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	68b9      	ldr	r1, [r7, #8]
 8001830:	68f8      	ldr	r0, [r7, #12]
 8001832:	f000 f805 	bl	8001840 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001838:	4618      	mov	r0, r3
 800183a:	3730      	adds	r7, #48	; 0x30
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
 800184c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d103      	bne.n	800185c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	e002      	b.n	8001862 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800186e:	2101      	movs	r1, #1
 8001870:	69b8      	ldr	r0, [r7, #24]
 8001872:	f7ff ff05 	bl	8001680 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	78fa      	ldrb	r2, [r7, #3]
 800187a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800187e:	bf00      	nop
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08e      	sub	sp, #56	; 0x38
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
 8001894:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001896:	2300      	movs	r3, #0
 8001898:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800189e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d10a      	bne.n	80018ba <xQueueGenericSend+0x32>
	__asm volatile
 80018a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018a8:	f383 8811 	msr	BASEPRI, r3
 80018ac:	f3bf 8f6f 	isb	sy
 80018b0:	f3bf 8f4f 	dsb	sy
 80018b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80018b6:	bf00      	nop
 80018b8:	e7fe      	b.n	80018b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d103      	bne.n	80018c8 <xQueueGenericSend+0x40>
 80018c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d101      	bne.n	80018cc <xQueueGenericSend+0x44>
 80018c8:	2301      	movs	r3, #1
 80018ca:	e000      	b.n	80018ce <xQueueGenericSend+0x46>
 80018cc:	2300      	movs	r3, #0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d10a      	bne.n	80018e8 <xQueueGenericSend+0x60>
	__asm volatile
 80018d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018d6:	f383 8811 	msr	BASEPRI, r3
 80018da:	f3bf 8f6f 	isb	sy
 80018de:	f3bf 8f4f 	dsb	sy
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80018e4:	bf00      	nop
 80018e6:	e7fe      	b.n	80018e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d103      	bne.n	80018f6 <xQueueGenericSend+0x6e>
 80018ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d101      	bne.n	80018fa <xQueueGenericSend+0x72>
 80018f6:	2301      	movs	r3, #1
 80018f8:	e000      	b.n	80018fc <xQueueGenericSend+0x74>
 80018fa:	2300      	movs	r3, #0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d10a      	bne.n	8001916 <xQueueGenericSend+0x8e>
	__asm volatile
 8001900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001904:	f383 8811 	msr	BASEPRI, r3
 8001908:	f3bf 8f6f 	isb	sy
 800190c:	f3bf 8f4f 	dsb	sy
 8001910:	623b      	str	r3, [r7, #32]
}
 8001912:	bf00      	nop
 8001914:	e7fe      	b.n	8001914 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001916:	f001 f9cf 	bl	8002cb8 <xTaskGetSchedulerState>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d102      	bne.n	8001926 <xQueueGenericSend+0x9e>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <xQueueGenericSend+0xa2>
 8001926:	2301      	movs	r3, #1
 8001928:	e000      	b.n	800192c <xQueueGenericSend+0xa4>
 800192a:	2300      	movs	r3, #0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d10a      	bne.n	8001946 <xQueueGenericSend+0xbe>
	__asm volatile
 8001930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001934:	f383 8811 	msr	BASEPRI, r3
 8001938:	f3bf 8f6f 	isb	sy
 800193c:	f3bf 8f4f 	dsb	sy
 8001940:	61fb      	str	r3, [r7, #28]
}
 8001942:	bf00      	nop
 8001944:	e7fe      	b.n	8001944 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001946:	f002 f845 	bl	80039d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800194a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800194c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800194e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001952:	429a      	cmp	r2, r3
 8001954:	d302      	bcc.n	800195c <xQueueGenericSend+0xd4>
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	2b02      	cmp	r3, #2
 800195a:	d129      	bne.n	80019b0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	68b9      	ldr	r1, [r7, #8]
 8001960:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001962:	f000 fa0b 	bl	8001d7c <prvCopyDataToQueue>
 8001966:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800196a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196c:	2b00      	cmp	r3, #0
 800196e:	d010      	beq.n	8001992 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001972:	3324      	adds	r3, #36	; 0x24
 8001974:	4618      	mov	r0, r3
 8001976:	f000 ffe1 	bl	800293c <xTaskRemoveFromEventList>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d013      	beq.n	80019a8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001980:	4b3f      	ldr	r3, [pc, #252]	; (8001a80 <xQueueGenericSend+0x1f8>)
 8001982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	f3bf 8f4f 	dsb	sy
 800198c:	f3bf 8f6f 	isb	sy
 8001990:	e00a      	b.n	80019a8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001994:	2b00      	cmp	r3, #0
 8001996:	d007      	beq.n	80019a8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001998:	4b39      	ldr	r3, [pc, #228]	; (8001a80 <xQueueGenericSend+0x1f8>)
 800199a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	f3bf 8f4f 	dsb	sy
 80019a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80019a8:	f002 f844 	bl	8003a34 <vPortExitCritical>
				return pdPASS;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e063      	b.n	8001a78 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d103      	bne.n	80019be <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80019b6:	f002 f83d 	bl	8003a34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	e05c      	b.n	8001a78 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80019be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d106      	bne.n	80019d2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	4618      	mov	r0, r3
 80019ca:	f001 f81b 	bl	8002a04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80019ce:	2301      	movs	r3, #1
 80019d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80019d2:	f002 f82f 	bl	8003a34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80019d6:	f000 fd7b 	bl	80024d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80019da:	f001 fffb 	bl	80039d4 <vPortEnterCritical>
 80019de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80019e4:	b25b      	sxtb	r3, r3
 80019e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019ea:	d103      	bne.n	80019f4 <xQueueGenericSend+0x16c>
 80019ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80019fa:	b25b      	sxtb	r3, r3
 80019fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a00:	d103      	bne.n	8001a0a <xQueueGenericSend+0x182>
 8001a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a0a:	f002 f813 	bl	8003a34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001a0e:	1d3a      	adds	r2, r7, #4
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	4611      	mov	r1, r2
 8001a16:	4618      	mov	r0, r3
 8001a18:	f001 f80a 	bl	8002a30 <xTaskCheckForTimeOut>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d124      	bne.n	8001a6c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001a22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001a24:	f000 faa2 	bl	8001f6c <prvIsQueueFull>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d018      	beq.n	8001a60 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a30:	3310      	adds	r3, #16
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	4611      	mov	r1, r2
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 ff30 	bl	800289c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001a3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001a3e:	f000 fa2d 	bl	8001e9c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001a42:	f000 fd53 	bl	80024ec <xTaskResumeAll>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f47f af7c 	bne.w	8001946 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8001a4e:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <xQueueGenericSend+0x1f8>)
 8001a50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	f3bf 8f4f 	dsb	sy
 8001a5a:	f3bf 8f6f 	isb	sy
 8001a5e:	e772      	b.n	8001946 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001a60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001a62:	f000 fa1b 	bl	8001e9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001a66:	f000 fd41 	bl	80024ec <xTaskResumeAll>
 8001a6a:	e76c      	b.n	8001946 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001a6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001a6e:	f000 fa15 	bl	8001e9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001a72:	f000 fd3b 	bl	80024ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001a76:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3738      	adds	r7, #56	; 0x38
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	e000ed04 	.word	0xe000ed04

08001a84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b090      	sub	sp, #64	; 0x40
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
 8001a90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8001a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d10a      	bne.n	8001ab2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8001a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aa0:	f383 8811 	msr	BASEPRI, r3
 8001aa4:	f3bf 8f6f 	isb	sy
 8001aa8:	f3bf 8f4f 	dsb	sy
 8001aac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001aae:	bf00      	nop
 8001ab0:	e7fe      	b.n	8001ab0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d103      	bne.n	8001ac0 <xQueueGenericSendFromISR+0x3c>
 8001ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <xQueueGenericSendFromISR+0x40>
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e000      	b.n	8001ac6 <xQueueGenericSendFromISR+0x42>
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10a      	bne.n	8001ae0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8001aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ace:	f383 8811 	msr	BASEPRI, r3
 8001ad2:	f3bf 8f6f 	isb	sy
 8001ad6:	f3bf 8f4f 	dsb	sy
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001adc:	bf00      	nop
 8001ade:	e7fe      	b.n	8001ade <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d103      	bne.n	8001aee <xQueueGenericSendFromISR+0x6a>
 8001ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d101      	bne.n	8001af2 <xQueueGenericSendFromISR+0x6e>
 8001aee:	2301      	movs	r3, #1
 8001af0:	e000      	b.n	8001af4 <xQueueGenericSendFromISR+0x70>
 8001af2:	2300      	movs	r3, #0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d10a      	bne.n	8001b0e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8001af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001afc:	f383 8811 	msr	BASEPRI, r3
 8001b00:	f3bf 8f6f 	isb	sy
 8001b04:	f3bf 8f4f 	dsb	sy
 8001b08:	623b      	str	r3, [r7, #32]
}
 8001b0a:	bf00      	nop
 8001b0c:	e7fe      	b.n	8001b0c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001b0e:	f002 f843 	bl	8003b98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001b12:	f3ef 8211 	mrs	r2, BASEPRI
 8001b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b1a:	f383 8811 	msr	BASEPRI, r3
 8001b1e:	f3bf 8f6f 	isb	sy
 8001b22:	f3bf 8f4f 	dsb	sy
 8001b26:	61fa      	str	r2, [r7, #28]
 8001b28:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001b2a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001b2c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d302      	bcc.n	8001b40 <xQueueGenericSendFromISR+0xbc>
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d12f      	bne.n	8001ba0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	68b9      	ldr	r1, [r7, #8]
 8001b54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001b56:	f000 f911 	bl	8001d7c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001b5a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001b5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b62:	d112      	bne.n	8001b8a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d016      	beq.n	8001b9a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b6e:	3324      	adds	r3, #36	; 0x24
 8001b70:	4618      	mov	r0, r3
 8001b72:	f000 fee3 	bl	800293c <xTaskRemoveFromEventList>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d00e      	beq.n	8001b9a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00b      	beq.n	8001b9a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	e007      	b.n	8001b9a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001b8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b8e:	3301      	adds	r3, #1
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	b25a      	sxtb	r2, r3
 8001b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8001b9e:	e001      	b.n	8001ba4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ba6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001bae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3740      	adds	r7, #64	; 0x40
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08c      	sub	sp, #48	; 0x30
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10a      	bne.n	8001bec <xQueueReceive+0x30>
	__asm volatile
 8001bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bda:	f383 8811 	msr	BASEPRI, r3
 8001bde:	f3bf 8f6f 	isb	sy
 8001be2:	f3bf 8f4f 	dsb	sy
 8001be6:	623b      	str	r3, [r7, #32]
}
 8001be8:	bf00      	nop
 8001bea:	e7fe      	b.n	8001bea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d103      	bne.n	8001bfa <xQueueReceive+0x3e>
 8001bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <xQueueReceive+0x42>
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e000      	b.n	8001c00 <xQueueReceive+0x44>
 8001bfe:	2300      	movs	r3, #0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d10a      	bne.n	8001c1a <xQueueReceive+0x5e>
	__asm volatile
 8001c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c08:	f383 8811 	msr	BASEPRI, r3
 8001c0c:	f3bf 8f6f 	isb	sy
 8001c10:	f3bf 8f4f 	dsb	sy
 8001c14:	61fb      	str	r3, [r7, #28]
}
 8001c16:	bf00      	nop
 8001c18:	e7fe      	b.n	8001c18 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001c1a:	f001 f84d 	bl	8002cb8 <xTaskGetSchedulerState>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d102      	bne.n	8001c2a <xQueueReceive+0x6e>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <xQueueReceive+0x72>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e000      	b.n	8001c30 <xQueueReceive+0x74>
 8001c2e:	2300      	movs	r3, #0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d10a      	bne.n	8001c4a <xQueueReceive+0x8e>
	__asm volatile
 8001c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c38:	f383 8811 	msr	BASEPRI, r3
 8001c3c:	f3bf 8f6f 	isb	sy
 8001c40:	f3bf 8f4f 	dsb	sy
 8001c44:	61bb      	str	r3, [r7, #24]
}
 8001c46:	bf00      	nop
 8001c48:	e7fe      	b.n	8001c48 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001c4a:	f001 fec3 	bl	80039d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d01f      	beq.n	8001c9a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001c5a:	68b9      	ldr	r1, [r7, #8]
 8001c5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c5e:	f000 f8f7 	bl	8001e50 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	1e5a      	subs	r2, r3, #1
 8001c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c68:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00f      	beq.n	8001c92 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c74:	3310      	adds	r3, #16
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 fe60 	bl	800293c <xTaskRemoveFromEventList>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d007      	beq.n	8001c92 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001c82:	4b3d      	ldr	r3, [pc, #244]	; (8001d78 <xQueueReceive+0x1bc>)
 8001c84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	f3bf 8f4f 	dsb	sy
 8001c8e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001c92:	f001 fecf 	bl	8003a34 <vPortExitCritical>
				return pdPASS;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e069      	b.n	8001d6e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d103      	bne.n	8001ca8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001ca0:	f001 fec8 	bl	8003a34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	e062      	b.n	8001d6e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d106      	bne.n	8001cbc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001cae:	f107 0310 	add.w	r3, r7, #16
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 fea6 	bl	8002a04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001cbc:	f001 feba 	bl	8003a34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001cc0:	f000 fc06 	bl	80024d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001cc4:	f001 fe86 	bl	80039d4 <vPortEnterCritical>
 8001cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001cce:	b25b      	sxtb	r3, r3
 8001cd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cd4:	d103      	bne.n	8001cde <xQueueReceive+0x122>
 8001cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ce4:	b25b      	sxtb	r3, r3
 8001ce6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cea:	d103      	bne.n	8001cf4 <xQueueReceive+0x138>
 8001cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001cf4:	f001 fe9e 	bl	8003a34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001cf8:	1d3a      	adds	r2, r7, #4
 8001cfa:	f107 0310 	add.w	r3, r7, #16
 8001cfe:	4611      	mov	r1, r2
 8001d00:	4618      	mov	r0, r3
 8001d02:	f000 fe95 	bl	8002a30 <xTaskCheckForTimeOut>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d123      	bne.n	8001d54 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001d0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d0e:	f000 f917 	bl	8001f40 <prvIsQueueEmpty>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d017      	beq.n	8001d48 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1a:	3324      	adds	r3, #36	; 0x24
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	4611      	mov	r1, r2
 8001d20:	4618      	mov	r0, r3
 8001d22:	f000 fdbb 	bl	800289c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001d26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d28:	f000 f8b8 	bl	8001e9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001d2c:	f000 fbde 	bl	80024ec <xTaskResumeAll>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d189      	bne.n	8001c4a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8001d36:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <xQueueReceive+0x1bc>)
 8001d38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	f3bf 8f4f 	dsb	sy
 8001d42:	f3bf 8f6f 	isb	sy
 8001d46:	e780      	b.n	8001c4a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001d48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d4a:	f000 f8a7 	bl	8001e9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001d4e:	f000 fbcd 	bl	80024ec <xTaskResumeAll>
 8001d52:	e77a      	b.n	8001c4a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001d54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d56:	f000 f8a1 	bl	8001e9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001d5a:	f000 fbc7 	bl	80024ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001d5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d60:	f000 f8ee 	bl	8001f40 <prvIsQueueEmpty>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f43f af6f 	beq.w	8001c4a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001d6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3730      	adds	r7, #48	; 0x30
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	e000ed04 	.word	0xe000ed04

08001d7c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d90:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d10d      	bne.n	8001db6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d14d      	bne.n	8001e3e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f000 ffa4 	bl	8002cf4 <xTaskPriorityDisinherit>
 8001dac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	e043      	b.n	8001e3e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d119      	bne.n	8001df0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6858      	ldr	r0, [r3, #4]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	68b9      	ldr	r1, [r7, #8]
 8001dc8:	f009 f839 	bl	800ae3e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	441a      	add	r2, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d32b      	bcc.n	8001e3e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	e026      	b.n	8001e3e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	68d8      	ldr	r0, [r3, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df8:	461a      	mov	r2, r3
 8001dfa:	68b9      	ldr	r1, [r7, #8]
 8001dfc:	f009 f81f 	bl	800ae3e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	68da      	ldr	r2, [r3, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e08:	425b      	negs	r3, r3
 8001e0a:	441a      	add	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d207      	bcs.n	8001e2c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e24:	425b      	negs	r3, r3
 8001e26:	441a      	add	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d105      	bne.n	8001e3e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d002      	beq.n	8001e3e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1c5a      	adds	r2, r3, #1
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8001e46:	697b      	ldr	r3, [r7, #20]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d018      	beq.n	8001e94 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68da      	ldr	r2, [r3, #12]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	441a      	add	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68da      	ldr	r2, [r3, #12]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d303      	bcc.n	8001e84 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68d9      	ldr	r1, [r3, #12]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	6838      	ldr	r0, [r7, #0]
 8001e90:	f008 ffd5 	bl	800ae3e <memcpy>
	}
}
 8001e94:	bf00      	nop
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001ea4:	f001 fd96 	bl	80039d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001eae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001eb0:	e011      	b.n	8001ed6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d012      	beq.n	8001ee0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	3324      	adds	r3, #36	; 0x24
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 fd3c 	bl	800293c <xTaskRemoveFromEventList>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001eca:	f000 fe13 	bl	8002af4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001ece:	7bfb      	ldrb	r3, [r7, #15]
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	dce9      	bgt.n	8001eb2 <prvUnlockQueue+0x16>
 8001ede:	e000      	b.n	8001ee2 <prvUnlockQueue+0x46>
					break;
 8001ee0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	22ff      	movs	r2, #255	; 0xff
 8001ee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8001eea:	f001 fda3 	bl	8003a34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001eee:	f001 fd71 	bl	80039d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ef8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001efa:	e011      	b.n	8001f20 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d012      	beq.n	8001f2a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3310      	adds	r3, #16
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f000 fd17 	bl	800293c <xTaskRemoveFromEventList>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001f14:	f000 fdee 	bl	8002af4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001f18:	7bbb      	ldrb	r3, [r7, #14]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001f20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	dce9      	bgt.n	8001efc <prvUnlockQueue+0x60>
 8001f28:	e000      	b.n	8001f2c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8001f2a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	22ff      	movs	r2, #255	; 0xff
 8001f30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001f34:	f001 fd7e 	bl	8003a34 <vPortExitCritical>
}
 8001f38:	bf00      	nop
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001f48:	f001 fd44 	bl	80039d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d102      	bne.n	8001f5a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001f54:	2301      	movs	r3, #1
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	e001      	b.n	8001f5e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001f5e:	f001 fd69 	bl	8003a34 <vPortExitCritical>

	return xReturn;
 8001f62:	68fb      	ldr	r3, [r7, #12]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001f74:	f001 fd2e 	bl	80039d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d102      	bne.n	8001f8a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001f84:	2301      	movs	r3, #1
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	e001      	b.n	8001f8e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001f8e:	f001 fd51 	bl	8003a34 <vPortExitCritical>

	return xReturn;
 8001f92:	68fb      	ldr	r3, [r7, #12]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3710      	adds	r7, #16
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	e014      	b.n	8001fd6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001fac:	4a0f      	ldr	r2, [pc, #60]	; (8001fec <vQueueAddToRegistry+0x50>)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10b      	bne.n	8001fd0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001fb8:	490c      	ldr	r1, [pc, #48]	; (8001fec <vQueueAddToRegistry+0x50>)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001fc2:	4a0a      	ldr	r2, [pc, #40]	; (8001fec <vQueueAddToRegistry+0x50>)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	4413      	add	r3, r2
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001fce:	e006      	b.n	8001fde <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2b07      	cmp	r3, #7
 8001fda:	d9e7      	bls.n	8001fac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001fdc:	bf00      	nop
 8001fde:	bf00      	nop
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	20001200 	.word	0x20001200

08001ff0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002000:	f001 fce8 	bl	80039d4 <vPortEnterCritical>
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800200a:	b25b      	sxtb	r3, r3
 800200c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002010:	d103      	bne.n	800201a <vQueueWaitForMessageRestricted+0x2a>
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002020:	b25b      	sxtb	r3, r3
 8002022:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002026:	d103      	bne.n	8002030 <vQueueWaitForMessageRestricted+0x40>
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002030:	f001 fd00 	bl	8003a34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002038:	2b00      	cmp	r3, #0
 800203a:	d106      	bne.n	800204a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	3324      	adds	r3, #36	; 0x24
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	68b9      	ldr	r1, [r7, #8]
 8002044:	4618      	mov	r0, r3
 8002046:	f000 fc4d 	bl	80028e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800204a:	6978      	ldr	r0, [r7, #20]
 800204c:	f7ff ff26 	bl	8001e9c <prvUnlockQueue>
	}
 8002050:	bf00      	nop
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08e      	sub	sp, #56	; 0x38
 800205c:	af04      	add	r7, sp, #16
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
 8002064:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002068:	2b00      	cmp	r3, #0
 800206a:	d10a      	bne.n	8002082 <xTaskCreateStatic+0x2a>
	__asm volatile
 800206c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002070:	f383 8811 	msr	BASEPRI, r3
 8002074:	f3bf 8f6f 	isb	sy
 8002078:	f3bf 8f4f 	dsb	sy
 800207c:	623b      	str	r3, [r7, #32]
}
 800207e:	bf00      	nop
 8002080:	e7fe      	b.n	8002080 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002084:	2b00      	cmp	r3, #0
 8002086:	d10a      	bne.n	800209e <xTaskCreateStatic+0x46>
	__asm volatile
 8002088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800208c:	f383 8811 	msr	BASEPRI, r3
 8002090:	f3bf 8f6f 	isb	sy
 8002094:	f3bf 8f4f 	dsb	sy
 8002098:	61fb      	str	r3, [r7, #28]
}
 800209a:	bf00      	nop
 800209c:	e7fe      	b.n	800209c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800209e:	235c      	movs	r3, #92	; 0x5c
 80020a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	2b5c      	cmp	r3, #92	; 0x5c
 80020a6:	d00a      	beq.n	80020be <xTaskCreateStatic+0x66>
	__asm volatile
 80020a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ac:	f383 8811 	msr	BASEPRI, r3
 80020b0:	f3bf 8f6f 	isb	sy
 80020b4:	f3bf 8f4f 	dsb	sy
 80020b8:	61bb      	str	r3, [r7, #24]
}
 80020ba:	bf00      	nop
 80020bc:	e7fe      	b.n	80020bc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80020be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80020c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d01e      	beq.n	8002104 <xTaskCreateStatic+0xac>
 80020c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d01b      	beq.n	8002104 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80020cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	2202      	movs	r2, #2
 80020da:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80020de:	2300      	movs	r3, #0
 80020e0:	9303      	str	r3, [sp, #12]
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	9302      	str	r3, [sp, #8]
 80020e6:	f107 0314 	add.w	r3, r7, #20
 80020ea:	9301      	str	r3, [sp, #4]
 80020ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ee:	9300      	str	r3, [sp, #0]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	68b9      	ldr	r1, [r7, #8]
 80020f6:	68f8      	ldr	r0, [r7, #12]
 80020f8:	f000 f850 	bl	800219c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80020fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020fe:	f000 f8dd 	bl	80022bc <prvAddNewTaskToReadyList>
 8002102:	e001      	b.n	8002108 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002108:	697b      	ldr	r3, [r7, #20]
	}
 800210a:	4618      	mov	r0, r3
 800210c:	3728      	adds	r7, #40	; 0x28
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002112:	b580      	push	{r7, lr}
 8002114:	b08c      	sub	sp, #48	; 0x30
 8002116:	af04      	add	r7, sp, #16
 8002118:	60f8      	str	r0, [r7, #12]
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	603b      	str	r3, [r7, #0]
 800211e:	4613      	mov	r3, r2
 8002120:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002122:	88fb      	ldrh	r3, [r7, #6]
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4618      	mov	r0, r3
 8002128:	f001 fd76 	bl	8003c18 <pvPortMalloc>
 800212c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00e      	beq.n	8002152 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002134:	205c      	movs	r0, #92	; 0x5c
 8002136:	f001 fd6f 	bl	8003c18 <pvPortMalloc>
 800213a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	697a      	ldr	r2, [r7, #20]
 8002146:	631a      	str	r2, [r3, #48]	; 0x30
 8002148:	e005      	b.n	8002156 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800214a:	6978      	ldr	r0, [r7, #20]
 800214c:	f001 fe30 	bl	8003db0 <vPortFree>
 8002150:	e001      	b.n	8002156 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002152:	2300      	movs	r3, #0
 8002154:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d017      	beq.n	800218c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002164:	88fa      	ldrh	r2, [r7, #6]
 8002166:	2300      	movs	r3, #0
 8002168:	9303      	str	r3, [sp, #12]
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	9302      	str	r3, [sp, #8]
 800216e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002170:	9301      	str	r3, [sp, #4]
 8002172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	68b9      	ldr	r1, [r7, #8]
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 f80e 	bl	800219c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002180:	69f8      	ldr	r0, [r7, #28]
 8002182:	f000 f89b 	bl	80022bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002186:	2301      	movs	r3, #1
 8002188:	61bb      	str	r3, [r7, #24]
 800218a:	e002      	b.n	8002192 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800218c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002190:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002192:	69bb      	ldr	r3, [r7, #24]
	}
 8002194:	4618      	mov	r0, r3
 8002196:	3720      	adds	r7, #32
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b088      	sub	sp, #32
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
 80021a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80021aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	461a      	mov	r2, r3
 80021b4:	21a5      	movs	r1, #165	; 0xa5
 80021b6:	f008 fdd1 	bl	800ad5c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80021ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80021c4:	3b01      	subs	r3, #1
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	f023 0307 	bic.w	r3, r3, #7
 80021d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00a      	beq.n	80021f4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80021de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021e2:	f383 8811 	msr	BASEPRI, r3
 80021e6:	f3bf 8f6f 	isb	sy
 80021ea:	f3bf 8f4f 	dsb	sy
 80021ee:	617b      	str	r3, [r7, #20]
}
 80021f0:	bf00      	nop
 80021f2:	e7fe      	b.n	80021f2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d01f      	beq.n	800223a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
 80021fe:	e012      	b.n	8002226 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002200:	68ba      	ldr	r2, [r7, #8]
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	4413      	add	r3, r2
 8002206:	7819      	ldrb	r1, [r3, #0]
 8002208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	4413      	add	r3, r2
 800220e:	3334      	adds	r3, #52	; 0x34
 8002210:	460a      	mov	r2, r1
 8002212:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	4413      	add	r3, r2
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d006      	beq.n	800222e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	3301      	adds	r3, #1
 8002224:	61fb      	str	r3, [r7, #28]
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	2b0f      	cmp	r3, #15
 800222a:	d9e9      	bls.n	8002200 <prvInitialiseNewTask+0x64>
 800222c:	e000      	b.n	8002230 <prvInitialiseNewTask+0x94>
			{
				break;
 800222e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002232:	2200      	movs	r2, #0
 8002234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002238:	e003      	b.n	8002242 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800223a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002244:	2b37      	cmp	r3, #55	; 0x37
 8002246:	d901      	bls.n	800224c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002248:	2337      	movs	r3, #55	; 0x37
 800224a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800224c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002250:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002254:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002256:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225a:	2200      	movs	r2, #0
 800225c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800225e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002260:	3304      	adds	r3, #4
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff f978 	bl	8001558 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226a:	3318      	adds	r3, #24
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff f973 	bl	8001558 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002276:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800227a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800227e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002280:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002286:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228a:	2200      	movs	r2, #0
 800228c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800228e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	68f9      	ldr	r1, [r7, #12]
 800229a:	69b8      	ldr	r0, [r7, #24]
 800229c:	f001 fa70 	bl	8003780 <pxPortInitialiseStack>
 80022a0:	4602      	mov	r2, r0
 80022a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80022a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d002      	beq.n	80022b2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80022ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80022b2:	bf00      	nop
 80022b4:	3720      	adds	r7, #32
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
	...

080022bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80022c4:	f001 fb86 	bl	80039d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80022c8:	4b2d      	ldr	r3, [pc, #180]	; (8002380 <prvAddNewTaskToReadyList+0xc4>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	3301      	adds	r3, #1
 80022ce:	4a2c      	ldr	r2, [pc, #176]	; (8002380 <prvAddNewTaskToReadyList+0xc4>)
 80022d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80022d2:	4b2c      	ldr	r3, [pc, #176]	; (8002384 <prvAddNewTaskToReadyList+0xc8>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d109      	bne.n	80022ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80022da:	4a2a      	ldr	r2, [pc, #168]	; (8002384 <prvAddNewTaskToReadyList+0xc8>)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80022e0:	4b27      	ldr	r3, [pc, #156]	; (8002380 <prvAddNewTaskToReadyList+0xc4>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d110      	bne.n	800230a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80022e8:	f000 fc28 	bl	8002b3c <prvInitialiseTaskLists>
 80022ec:	e00d      	b.n	800230a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80022ee:	4b26      	ldr	r3, [pc, #152]	; (8002388 <prvAddNewTaskToReadyList+0xcc>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d109      	bne.n	800230a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80022f6:	4b23      	ldr	r3, [pc, #140]	; (8002384 <prvAddNewTaskToReadyList+0xc8>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002300:	429a      	cmp	r2, r3
 8002302:	d802      	bhi.n	800230a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002304:	4a1f      	ldr	r2, [pc, #124]	; (8002384 <prvAddNewTaskToReadyList+0xc8>)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800230a:	4b20      	ldr	r3, [pc, #128]	; (800238c <prvAddNewTaskToReadyList+0xd0>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	3301      	adds	r3, #1
 8002310:	4a1e      	ldr	r2, [pc, #120]	; (800238c <prvAddNewTaskToReadyList+0xd0>)
 8002312:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002314:	4b1d      	ldr	r3, [pc, #116]	; (800238c <prvAddNewTaskToReadyList+0xd0>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002320:	4b1b      	ldr	r3, [pc, #108]	; (8002390 <prvAddNewTaskToReadyList+0xd4>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	429a      	cmp	r2, r3
 8002326:	d903      	bls.n	8002330 <prvAddNewTaskToReadyList+0x74>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232c:	4a18      	ldr	r2, [pc, #96]	; (8002390 <prvAddNewTaskToReadyList+0xd4>)
 800232e:	6013      	str	r3, [r2, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4a15      	ldr	r2, [pc, #84]	; (8002394 <prvAddNewTaskToReadyList+0xd8>)
 800233e:	441a      	add	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3304      	adds	r3, #4
 8002344:	4619      	mov	r1, r3
 8002346:	4610      	mov	r0, r2
 8002348:	f7ff f913 	bl	8001572 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800234c:	f001 fb72 	bl	8003a34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002350:	4b0d      	ldr	r3, [pc, #52]	; (8002388 <prvAddNewTaskToReadyList+0xcc>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00e      	beq.n	8002376 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002358:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <prvAddNewTaskToReadyList+0xc8>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002362:	429a      	cmp	r2, r3
 8002364:	d207      	bcs.n	8002376 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002366:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <prvAddNewTaskToReadyList+0xdc>)
 8002368:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	f3bf 8f4f 	dsb	sy
 8002372:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	20001714 	.word	0x20001714
 8002384:	20001240 	.word	0x20001240
 8002388:	20001720 	.word	0x20001720
 800238c:	20001730 	.word	0x20001730
 8002390:	2000171c 	.word	0x2000171c
 8002394:	20001244 	.word	0x20001244
 8002398:	e000ed04 	.word	0xe000ed04

0800239c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80023a4:	2300      	movs	r3, #0
 80023a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d017      	beq.n	80023de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80023ae:	4b13      	ldr	r3, [pc, #76]	; (80023fc <vTaskDelay+0x60>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00a      	beq.n	80023cc <vTaskDelay+0x30>
	__asm volatile
 80023b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ba:	f383 8811 	msr	BASEPRI, r3
 80023be:	f3bf 8f6f 	isb	sy
 80023c2:	f3bf 8f4f 	dsb	sy
 80023c6:	60bb      	str	r3, [r7, #8]
}
 80023c8:	bf00      	nop
 80023ca:	e7fe      	b.n	80023ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80023cc:	f000 f880 	bl	80024d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80023d0:	2100      	movs	r1, #0
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 fe32 	bl	800303c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80023d8:	f000 f888 	bl	80024ec <xTaskResumeAll>
 80023dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d107      	bne.n	80023f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80023e4:	4b06      	ldr	r3, [pc, #24]	; (8002400 <vTaskDelay+0x64>)
 80023e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	f3bf 8f4f 	dsb	sy
 80023f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80023f4:	bf00      	nop
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	2000173c 	.word	0x2000173c
 8002400:	e000ed04 	.word	0xe000ed04

08002404 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08a      	sub	sp, #40	; 0x28
 8002408:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800240a:	2300      	movs	r3, #0
 800240c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800240e:	2300      	movs	r3, #0
 8002410:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002412:	463a      	mov	r2, r7
 8002414:	1d39      	adds	r1, r7, #4
 8002416:	f107 0308 	add.w	r3, r7, #8
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff f848 	bl	80014b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002420:	6839      	ldr	r1, [r7, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	9202      	str	r2, [sp, #8]
 8002428:	9301      	str	r3, [sp, #4]
 800242a:	2300      	movs	r3, #0
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	2300      	movs	r3, #0
 8002430:	460a      	mov	r2, r1
 8002432:	4921      	ldr	r1, [pc, #132]	; (80024b8 <vTaskStartScheduler+0xb4>)
 8002434:	4821      	ldr	r0, [pc, #132]	; (80024bc <vTaskStartScheduler+0xb8>)
 8002436:	f7ff fe0f 	bl	8002058 <xTaskCreateStatic>
 800243a:	4603      	mov	r3, r0
 800243c:	4a20      	ldr	r2, [pc, #128]	; (80024c0 <vTaskStartScheduler+0xbc>)
 800243e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002440:	4b1f      	ldr	r3, [pc, #124]	; (80024c0 <vTaskStartScheduler+0xbc>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d002      	beq.n	800244e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002448:	2301      	movs	r3, #1
 800244a:	617b      	str	r3, [r7, #20]
 800244c:	e001      	b.n	8002452 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800244e:	2300      	movs	r3, #0
 8002450:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d102      	bne.n	800245e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002458:	f000 fe44 	bl	80030e4 <xTimerCreateTimerTask>
 800245c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d116      	bne.n	8002492 <vTaskStartScheduler+0x8e>
	__asm volatile
 8002464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002468:	f383 8811 	msr	BASEPRI, r3
 800246c:	f3bf 8f6f 	isb	sy
 8002470:	f3bf 8f4f 	dsb	sy
 8002474:	613b      	str	r3, [r7, #16]
}
 8002476:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002478:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <vTaskStartScheduler+0xc0>)
 800247a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800247e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002480:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <vTaskStartScheduler+0xc4>)
 8002482:	2201      	movs	r2, #1
 8002484:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002486:	4b11      	ldr	r3, [pc, #68]	; (80024cc <vTaskStartScheduler+0xc8>)
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800248c:	f001 fa00 	bl	8003890 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002490:	e00e      	b.n	80024b0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002498:	d10a      	bne.n	80024b0 <vTaskStartScheduler+0xac>
	__asm volatile
 800249a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800249e:	f383 8811 	msr	BASEPRI, r3
 80024a2:	f3bf 8f6f 	isb	sy
 80024a6:	f3bf 8f4f 	dsb	sy
 80024aa:	60fb      	str	r3, [r7, #12]
}
 80024ac:	bf00      	nop
 80024ae:	e7fe      	b.n	80024ae <vTaskStartScheduler+0xaa>
}
 80024b0:	bf00      	nop
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	0800babc 	.word	0x0800babc
 80024bc:	08002b0d 	.word	0x08002b0d
 80024c0:	20001738 	.word	0x20001738
 80024c4:	20001734 	.word	0x20001734
 80024c8:	20001720 	.word	0x20001720
 80024cc:	20001718 	.word	0x20001718

080024d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80024d4:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <vTaskSuspendAll+0x18>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	3301      	adds	r3, #1
 80024da:	4a03      	ldr	r2, [pc, #12]	; (80024e8 <vTaskSuspendAll+0x18>)
 80024dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80024de:	bf00      	nop
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	2000173c 	.word	0x2000173c

080024ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80024f6:	2300      	movs	r3, #0
 80024f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80024fa:	4b42      	ldr	r3, [pc, #264]	; (8002604 <xTaskResumeAll+0x118>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10a      	bne.n	8002518 <xTaskResumeAll+0x2c>
	__asm volatile
 8002502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002506:	f383 8811 	msr	BASEPRI, r3
 800250a:	f3bf 8f6f 	isb	sy
 800250e:	f3bf 8f4f 	dsb	sy
 8002512:	603b      	str	r3, [r7, #0]
}
 8002514:	bf00      	nop
 8002516:	e7fe      	b.n	8002516 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002518:	f001 fa5c 	bl	80039d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800251c:	4b39      	ldr	r3, [pc, #228]	; (8002604 <xTaskResumeAll+0x118>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	3b01      	subs	r3, #1
 8002522:	4a38      	ldr	r2, [pc, #224]	; (8002604 <xTaskResumeAll+0x118>)
 8002524:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002526:	4b37      	ldr	r3, [pc, #220]	; (8002604 <xTaskResumeAll+0x118>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d162      	bne.n	80025f4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800252e:	4b36      	ldr	r3, [pc, #216]	; (8002608 <xTaskResumeAll+0x11c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d05e      	beq.n	80025f4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002536:	e02f      	b.n	8002598 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002538:	4b34      	ldr	r3, [pc, #208]	; (800260c <xTaskResumeAll+0x120>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	3318      	adds	r3, #24
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff f871 	bl	800162c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	3304      	adds	r3, #4
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff f86c 	bl	800162c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002558:	4b2d      	ldr	r3, [pc, #180]	; (8002610 <xTaskResumeAll+0x124>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	429a      	cmp	r2, r3
 800255e:	d903      	bls.n	8002568 <xTaskResumeAll+0x7c>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002564:	4a2a      	ldr	r2, [pc, #168]	; (8002610 <xTaskResumeAll+0x124>)
 8002566:	6013      	str	r3, [r2, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800256c:	4613      	mov	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4a27      	ldr	r2, [pc, #156]	; (8002614 <xTaskResumeAll+0x128>)
 8002576:	441a      	add	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	3304      	adds	r3, #4
 800257c:	4619      	mov	r1, r3
 800257e:	4610      	mov	r0, r2
 8002580:	f7fe fff7 	bl	8001572 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002588:	4b23      	ldr	r3, [pc, #140]	; (8002618 <xTaskResumeAll+0x12c>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258e:	429a      	cmp	r2, r3
 8002590:	d302      	bcc.n	8002598 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002592:	4b22      	ldr	r3, [pc, #136]	; (800261c <xTaskResumeAll+0x130>)
 8002594:	2201      	movs	r2, #1
 8002596:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002598:	4b1c      	ldr	r3, [pc, #112]	; (800260c <xTaskResumeAll+0x120>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1cb      	bne.n	8002538 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80025a6:	f000 fb67 	bl	8002c78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80025aa:	4b1d      	ldr	r3, [pc, #116]	; (8002620 <xTaskResumeAll+0x134>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d010      	beq.n	80025d8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80025b6:	f000 f859 	bl	800266c <xTaskIncrementTick>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d002      	beq.n	80025c6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80025c0:	4b16      	ldr	r3, [pc, #88]	; (800261c <xTaskResumeAll+0x130>)
 80025c2:	2201      	movs	r2, #1
 80025c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	3b01      	subs	r3, #1
 80025ca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f1      	bne.n	80025b6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80025d2:	4b13      	ldr	r3, [pc, #76]	; (8002620 <xTaskResumeAll+0x134>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80025d8:	4b10      	ldr	r3, [pc, #64]	; (800261c <xTaskResumeAll+0x130>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d009      	beq.n	80025f4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80025e0:	2301      	movs	r3, #1
 80025e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80025e4:	4b0f      	ldr	r3, [pc, #60]	; (8002624 <xTaskResumeAll+0x138>)
 80025e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	f3bf 8f4f 	dsb	sy
 80025f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80025f4:	f001 fa1e 	bl	8003a34 <vPortExitCritical>

	return xAlreadyYielded;
 80025f8:	68bb      	ldr	r3, [r7, #8]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	2000173c 	.word	0x2000173c
 8002608:	20001714 	.word	0x20001714
 800260c:	200016d4 	.word	0x200016d4
 8002610:	2000171c 	.word	0x2000171c
 8002614:	20001244 	.word	0x20001244
 8002618:	20001240 	.word	0x20001240
 800261c:	20001728 	.word	0x20001728
 8002620:	20001724 	.word	0x20001724
 8002624:	e000ed04 	.word	0xe000ed04

08002628 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800262e:	4b05      	ldr	r3, [pc, #20]	; (8002644 <xTaskGetTickCount+0x1c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002634:	687b      	ldr	r3, [r7, #4]
}
 8002636:	4618      	mov	r0, r3
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	20001718 	.word	0x20001718

08002648 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800264e:	f001 faa3 	bl	8003b98 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002652:	2300      	movs	r3, #0
 8002654:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8002656:	4b04      	ldr	r3, [pc, #16]	; (8002668 <xTaskGetTickCountFromISR+0x20>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800265c:	683b      	ldr	r3, [r7, #0]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20001718 	.word	0x20001718

0800266c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002672:	2300      	movs	r3, #0
 8002674:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002676:	4b4f      	ldr	r3, [pc, #316]	; (80027b4 <xTaskIncrementTick+0x148>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	f040 808f 	bne.w	800279e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002680:	4b4d      	ldr	r3, [pc, #308]	; (80027b8 <xTaskIncrementTick+0x14c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	3301      	adds	r3, #1
 8002686:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002688:	4a4b      	ldr	r2, [pc, #300]	; (80027b8 <xTaskIncrementTick+0x14c>)
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d120      	bne.n	80026d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002694:	4b49      	ldr	r3, [pc, #292]	; (80027bc <xTaskIncrementTick+0x150>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00a      	beq.n	80026b4 <xTaskIncrementTick+0x48>
	__asm volatile
 800269e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a2:	f383 8811 	msr	BASEPRI, r3
 80026a6:	f3bf 8f6f 	isb	sy
 80026aa:	f3bf 8f4f 	dsb	sy
 80026ae:	603b      	str	r3, [r7, #0]
}
 80026b0:	bf00      	nop
 80026b2:	e7fe      	b.n	80026b2 <xTaskIncrementTick+0x46>
 80026b4:	4b41      	ldr	r3, [pc, #260]	; (80027bc <xTaskIncrementTick+0x150>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	4b41      	ldr	r3, [pc, #260]	; (80027c0 <xTaskIncrementTick+0x154>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a3f      	ldr	r2, [pc, #252]	; (80027bc <xTaskIncrementTick+0x150>)
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	4a3f      	ldr	r2, [pc, #252]	; (80027c0 <xTaskIncrementTick+0x154>)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6013      	str	r3, [r2, #0]
 80026c8:	4b3e      	ldr	r3, [pc, #248]	; (80027c4 <xTaskIncrementTick+0x158>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	3301      	adds	r3, #1
 80026ce:	4a3d      	ldr	r2, [pc, #244]	; (80027c4 <xTaskIncrementTick+0x158>)
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	f000 fad1 	bl	8002c78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80026d6:	4b3c      	ldr	r3, [pc, #240]	; (80027c8 <xTaskIncrementTick+0x15c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d349      	bcc.n	8002774 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026e0:	4b36      	ldr	r3, [pc, #216]	; (80027bc <xTaskIncrementTick+0x150>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d104      	bne.n	80026f4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026ea:	4b37      	ldr	r3, [pc, #220]	; (80027c8 <xTaskIncrementTick+0x15c>)
 80026ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026f0:	601a      	str	r2, [r3, #0]
					break;
 80026f2:	e03f      	b.n	8002774 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026f4:	4b31      	ldr	r3, [pc, #196]	; (80027bc <xTaskIncrementTick+0x150>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	429a      	cmp	r2, r3
 800270a:	d203      	bcs.n	8002714 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800270c:	4a2e      	ldr	r2, [pc, #184]	; (80027c8 <xTaskIncrementTick+0x15c>)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002712:	e02f      	b.n	8002774 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	3304      	adds	r3, #4
 8002718:	4618      	mov	r0, r3
 800271a:	f7fe ff87 	bl	800162c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002722:	2b00      	cmp	r3, #0
 8002724:	d004      	beq.n	8002730 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	3318      	adds	r3, #24
 800272a:	4618      	mov	r0, r3
 800272c:	f7fe ff7e 	bl	800162c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002734:	4b25      	ldr	r3, [pc, #148]	; (80027cc <xTaskIncrementTick+0x160>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d903      	bls.n	8002744 <xTaskIncrementTick+0xd8>
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002740:	4a22      	ldr	r2, [pc, #136]	; (80027cc <xTaskIncrementTick+0x160>)
 8002742:	6013      	str	r3, [r2, #0]
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002748:	4613      	mov	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4a1f      	ldr	r2, [pc, #124]	; (80027d0 <xTaskIncrementTick+0x164>)
 8002752:	441a      	add	r2, r3
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	3304      	adds	r3, #4
 8002758:	4619      	mov	r1, r3
 800275a:	4610      	mov	r0, r2
 800275c:	f7fe ff09 	bl	8001572 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002764:	4b1b      	ldr	r3, [pc, #108]	; (80027d4 <xTaskIncrementTick+0x168>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276a:	429a      	cmp	r2, r3
 800276c:	d3b8      	bcc.n	80026e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800276e:	2301      	movs	r3, #1
 8002770:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002772:	e7b5      	b.n	80026e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002774:	4b17      	ldr	r3, [pc, #92]	; (80027d4 <xTaskIncrementTick+0x168>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800277a:	4915      	ldr	r1, [pc, #84]	; (80027d0 <xTaskIncrementTick+0x164>)
 800277c:	4613      	mov	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d901      	bls.n	8002790 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800278c:	2301      	movs	r3, #1
 800278e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002790:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <xTaskIncrementTick+0x16c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d007      	beq.n	80027a8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002798:	2301      	movs	r3, #1
 800279a:	617b      	str	r3, [r7, #20]
 800279c:	e004      	b.n	80027a8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800279e:	4b0f      	ldr	r3, [pc, #60]	; (80027dc <xTaskIncrementTick+0x170>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	3301      	adds	r3, #1
 80027a4:	4a0d      	ldr	r2, [pc, #52]	; (80027dc <xTaskIncrementTick+0x170>)
 80027a6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80027a8:	697b      	ldr	r3, [r7, #20]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	2000173c 	.word	0x2000173c
 80027b8:	20001718 	.word	0x20001718
 80027bc:	200016cc 	.word	0x200016cc
 80027c0:	200016d0 	.word	0x200016d0
 80027c4:	2000172c 	.word	0x2000172c
 80027c8:	20001734 	.word	0x20001734
 80027cc:	2000171c 	.word	0x2000171c
 80027d0:	20001244 	.word	0x20001244
 80027d4:	20001240 	.word	0x20001240
 80027d8:	20001728 	.word	0x20001728
 80027dc:	20001724 	.word	0x20001724

080027e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80027e6:	4b28      	ldr	r3, [pc, #160]	; (8002888 <vTaskSwitchContext+0xa8>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80027ee:	4b27      	ldr	r3, [pc, #156]	; (800288c <vTaskSwitchContext+0xac>)
 80027f0:	2201      	movs	r2, #1
 80027f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80027f4:	e041      	b.n	800287a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80027f6:	4b25      	ldr	r3, [pc, #148]	; (800288c <vTaskSwitchContext+0xac>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027fc:	4b24      	ldr	r3, [pc, #144]	; (8002890 <vTaskSwitchContext+0xb0>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	e010      	b.n	8002826 <vTaskSwitchContext+0x46>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10a      	bne.n	8002820 <vTaskSwitchContext+0x40>
	__asm volatile
 800280a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800280e:	f383 8811 	msr	BASEPRI, r3
 8002812:	f3bf 8f6f 	isb	sy
 8002816:	f3bf 8f4f 	dsb	sy
 800281a:	607b      	str	r3, [r7, #4]
}
 800281c:	bf00      	nop
 800281e:	e7fe      	b.n	800281e <vTaskSwitchContext+0x3e>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	3b01      	subs	r3, #1
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	491b      	ldr	r1, [pc, #108]	; (8002894 <vTaskSwitchContext+0xb4>)
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0e4      	beq.n	8002804 <vTaskSwitchContext+0x24>
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	4613      	mov	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4a13      	ldr	r2, [pc, #76]	; (8002894 <vTaskSwitchContext+0xb4>)
 8002846:	4413      	add	r3, r2
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	685a      	ldr	r2, [r3, #4]
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	605a      	str	r2, [r3, #4]
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	3308      	adds	r3, #8
 800285c:	429a      	cmp	r2, r3
 800285e:	d104      	bne.n	800286a <vTaskSwitchContext+0x8a>
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	605a      	str	r2, [r3, #4]
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	4a09      	ldr	r2, [pc, #36]	; (8002898 <vTaskSwitchContext+0xb8>)
 8002872:	6013      	str	r3, [r2, #0]
 8002874:	4a06      	ldr	r2, [pc, #24]	; (8002890 <vTaskSwitchContext+0xb0>)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6013      	str	r3, [r2, #0]
}
 800287a:	bf00      	nop
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	2000173c 	.word	0x2000173c
 800288c:	20001728 	.word	0x20001728
 8002890:	2000171c 	.word	0x2000171c
 8002894:	20001244 	.word	0x20001244
 8002898:	20001240 	.word	0x20001240

0800289c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10a      	bne.n	80028c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80028ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b0:	f383 8811 	msr	BASEPRI, r3
 80028b4:	f3bf 8f6f 	isb	sy
 80028b8:	f3bf 8f4f 	dsb	sy
 80028bc:	60fb      	str	r3, [r7, #12]
}
 80028be:	bf00      	nop
 80028c0:	e7fe      	b.n	80028c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80028c2:	4b07      	ldr	r3, [pc, #28]	; (80028e0 <vTaskPlaceOnEventList+0x44>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	3318      	adds	r3, #24
 80028c8:	4619      	mov	r1, r3
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7fe fe75 	bl	80015ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80028d0:	2101      	movs	r1, #1
 80028d2:	6838      	ldr	r0, [r7, #0]
 80028d4:	f000 fbb2 	bl	800303c <prvAddCurrentTaskToDelayedList>
}
 80028d8:	bf00      	nop
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	20001240 	.word	0x20001240

080028e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10a      	bne.n	800290c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80028f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028fa:	f383 8811 	msr	BASEPRI, r3
 80028fe:	f3bf 8f6f 	isb	sy
 8002902:	f3bf 8f4f 	dsb	sy
 8002906:	617b      	str	r3, [r7, #20]
}
 8002908:	bf00      	nop
 800290a:	e7fe      	b.n	800290a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800290c:	4b0a      	ldr	r3, [pc, #40]	; (8002938 <vTaskPlaceOnEventListRestricted+0x54>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	3318      	adds	r3, #24
 8002912:	4619      	mov	r1, r3
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f7fe fe2c 	bl	8001572 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d002      	beq.n	8002926 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8002920:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002924:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	68b8      	ldr	r0, [r7, #8]
 800292a:	f000 fb87 	bl	800303c <prvAddCurrentTaskToDelayedList>
	}
 800292e:	bf00      	nop
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	20001240 	.word	0x20001240

0800293c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10a      	bne.n	8002968 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8002952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002956:	f383 8811 	msr	BASEPRI, r3
 800295a:	f3bf 8f6f 	isb	sy
 800295e:	f3bf 8f4f 	dsb	sy
 8002962:	60fb      	str	r3, [r7, #12]
}
 8002964:	bf00      	nop
 8002966:	e7fe      	b.n	8002966 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	3318      	adds	r3, #24
 800296c:	4618      	mov	r0, r3
 800296e:	f7fe fe5d 	bl	800162c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002972:	4b1e      	ldr	r3, [pc, #120]	; (80029ec <xTaskRemoveFromEventList+0xb0>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d11d      	bne.n	80029b6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	3304      	adds	r3, #4
 800297e:	4618      	mov	r0, r3
 8002980:	f7fe fe54 	bl	800162c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002988:	4b19      	ldr	r3, [pc, #100]	; (80029f0 <xTaskRemoveFromEventList+0xb4>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d903      	bls.n	8002998 <xTaskRemoveFromEventList+0x5c>
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002994:	4a16      	ldr	r2, [pc, #88]	; (80029f0 <xTaskRemoveFromEventList+0xb4>)
 8002996:	6013      	str	r3, [r2, #0]
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4a13      	ldr	r2, [pc, #76]	; (80029f4 <xTaskRemoveFromEventList+0xb8>)
 80029a6:	441a      	add	r2, r3
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	3304      	adds	r3, #4
 80029ac:	4619      	mov	r1, r3
 80029ae:	4610      	mov	r0, r2
 80029b0:	f7fe fddf 	bl	8001572 <vListInsertEnd>
 80029b4:	e005      	b.n	80029c2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	3318      	adds	r3, #24
 80029ba:	4619      	mov	r1, r3
 80029bc:	480e      	ldr	r0, [pc, #56]	; (80029f8 <xTaskRemoveFromEventList+0xbc>)
 80029be:	f7fe fdd8 	bl	8001572 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c6:	4b0d      	ldr	r3, [pc, #52]	; (80029fc <xTaskRemoveFromEventList+0xc0>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d905      	bls.n	80029dc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80029d0:	2301      	movs	r3, #1
 80029d2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80029d4:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <xTaskRemoveFromEventList+0xc4>)
 80029d6:	2201      	movs	r2, #1
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	e001      	b.n	80029e0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80029e0:	697b      	ldr	r3, [r7, #20]
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3718      	adds	r7, #24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	2000173c 	.word	0x2000173c
 80029f0:	2000171c 	.word	0x2000171c
 80029f4:	20001244 	.word	0x20001244
 80029f8:	200016d4 	.word	0x200016d4
 80029fc:	20001240 	.word	0x20001240
 8002a00:	20001728 	.word	0x20001728

08002a04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002a0c:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <vTaskInternalSetTimeOutState+0x24>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002a14:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <vTaskInternalSetTimeOutState+0x28>)
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	605a      	str	r2, [r3, #4]
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	2000172c 	.word	0x2000172c
 8002a2c:	20001718 	.word	0x20001718

08002a30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10a      	bne.n	8002a56 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8002a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a44:	f383 8811 	msr	BASEPRI, r3
 8002a48:	f3bf 8f6f 	isb	sy
 8002a4c:	f3bf 8f4f 	dsb	sy
 8002a50:	613b      	str	r3, [r7, #16]
}
 8002a52:	bf00      	nop
 8002a54:	e7fe      	b.n	8002a54 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10a      	bne.n	8002a72 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8002a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a60:	f383 8811 	msr	BASEPRI, r3
 8002a64:	f3bf 8f6f 	isb	sy
 8002a68:	f3bf 8f4f 	dsb	sy
 8002a6c:	60fb      	str	r3, [r7, #12]
}
 8002a6e:	bf00      	nop
 8002a70:	e7fe      	b.n	8002a70 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8002a72:	f000 ffaf 	bl	80039d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002a76:	4b1d      	ldr	r3, [pc, #116]	; (8002aec <xTaskCheckForTimeOut+0xbc>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a8e:	d102      	bne.n	8002a96 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002a90:	2300      	movs	r3, #0
 8002a92:	61fb      	str	r3, [r7, #28]
 8002a94:	e023      	b.n	8002ade <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	4b15      	ldr	r3, [pc, #84]	; (8002af0 <xTaskCheckForTimeOut+0xc0>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d007      	beq.n	8002ab2 <xTaskCheckForTimeOut+0x82>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d302      	bcc.n	8002ab2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002aac:	2301      	movs	r3, #1
 8002aae:	61fb      	str	r3, [r7, #28]
 8002ab0:	e015      	b.n	8002ade <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d20b      	bcs.n	8002ad4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	1ad2      	subs	r2, r2, r3
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f7ff ff9b 	bl	8002a04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61fb      	str	r3, [r7, #28]
 8002ad2:	e004      	b.n	8002ade <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002ada:	2301      	movs	r3, #1
 8002adc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002ade:	f000 ffa9 	bl	8003a34 <vPortExitCritical>

	return xReturn;
 8002ae2:	69fb      	ldr	r3, [r7, #28]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3720      	adds	r7, #32
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	20001718 	.word	0x20001718
 8002af0:	2000172c 	.word	0x2000172c

08002af4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002af8:	4b03      	ldr	r3, [pc, #12]	; (8002b08 <vTaskMissedYield+0x14>)
 8002afa:	2201      	movs	r2, #1
 8002afc:	601a      	str	r2, [r3, #0]
}
 8002afe:	bf00      	nop
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	20001728 	.word	0x20001728

08002b0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002b14:	f000 f852 	bl	8002bbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002b18:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <prvIdleTask+0x28>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d9f9      	bls.n	8002b14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002b20:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <prvIdleTask+0x2c>)
 8002b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	f3bf 8f4f 	dsb	sy
 8002b2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002b30:	e7f0      	b.n	8002b14 <prvIdleTask+0x8>
 8002b32:	bf00      	nop
 8002b34:	20001244 	.word	0x20001244
 8002b38:	e000ed04 	.word	0xe000ed04

08002b3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b42:	2300      	movs	r3, #0
 8002b44:	607b      	str	r3, [r7, #4]
 8002b46:	e00c      	b.n	8002b62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	4a12      	ldr	r2, [pc, #72]	; (8002b9c <prvInitialiseTaskLists+0x60>)
 8002b54:	4413      	add	r3, r2
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fe fcde 	bl	8001518 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3301      	adds	r3, #1
 8002b60:	607b      	str	r3, [r7, #4]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b37      	cmp	r3, #55	; 0x37
 8002b66:	d9ef      	bls.n	8002b48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002b68:	480d      	ldr	r0, [pc, #52]	; (8002ba0 <prvInitialiseTaskLists+0x64>)
 8002b6a:	f7fe fcd5 	bl	8001518 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002b6e:	480d      	ldr	r0, [pc, #52]	; (8002ba4 <prvInitialiseTaskLists+0x68>)
 8002b70:	f7fe fcd2 	bl	8001518 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002b74:	480c      	ldr	r0, [pc, #48]	; (8002ba8 <prvInitialiseTaskLists+0x6c>)
 8002b76:	f7fe fccf 	bl	8001518 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002b7a:	480c      	ldr	r0, [pc, #48]	; (8002bac <prvInitialiseTaskLists+0x70>)
 8002b7c:	f7fe fccc 	bl	8001518 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002b80:	480b      	ldr	r0, [pc, #44]	; (8002bb0 <prvInitialiseTaskLists+0x74>)
 8002b82:	f7fe fcc9 	bl	8001518 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002b86:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <prvInitialiseTaskLists+0x78>)
 8002b88:	4a05      	ldr	r2, [pc, #20]	; (8002ba0 <prvInitialiseTaskLists+0x64>)
 8002b8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002b8c:	4b0a      	ldr	r3, [pc, #40]	; (8002bb8 <prvInitialiseTaskLists+0x7c>)
 8002b8e:	4a05      	ldr	r2, [pc, #20]	; (8002ba4 <prvInitialiseTaskLists+0x68>)
 8002b90:	601a      	str	r2, [r3, #0]
}
 8002b92:	bf00      	nop
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	20001244 	.word	0x20001244
 8002ba0:	200016a4 	.word	0x200016a4
 8002ba4:	200016b8 	.word	0x200016b8
 8002ba8:	200016d4 	.word	0x200016d4
 8002bac:	200016e8 	.word	0x200016e8
 8002bb0:	20001700 	.word	0x20001700
 8002bb4:	200016cc 	.word	0x200016cc
 8002bb8:	200016d0 	.word	0x200016d0

08002bbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002bc2:	e019      	b.n	8002bf8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002bc4:	f000 ff06 	bl	80039d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bc8:	4b10      	ldr	r3, [pc, #64]	; (8002c0c <prvCheckTasksWaitingTermination+0x50>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3304      	adds	r3, #4
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7fe fd29 	bl	800162c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002bda:	4b0d      	ldr	r3, [pc, #52]	; (8002c10 <prvCheckTasksWaitingTermination+0x54>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	3b01      	subs	r3, #1
 8002be0:	4a0b      	ldr	r2, [pc, #44]	; (8002c10 <prvCheckTasksWaitingTermination+0x54>)
 8002be2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002be4:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <prvCheckTasksWaitingTermination+0x58>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	3b01      	subs	r3, #1
 8002bea:	4a0a      	ldr	r2, [pc, #40]	; (8002c14 <prvCheckTasksWaitingTermination+0x58>)
 8002bec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002bee:	f000 ff21 	bl	8003a34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f810 	bl	8002c18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002bf8:	4b06      	ldr	r3, [pc, #24]	; (8002c14 <prvCheckTasksWaitingTermination+0x58>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1e1      	bne.n	8002bc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002c00:	bf00      	nop
 8002c02:	bf00      	nop
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	200016e8 	.word	0x200016e8
 8002c10:	20001714 	.word	0x20001714
 8002c14:	200016fc 	.word	0x200016fc

08002c18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d108      	bne.n	8002c3c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f001 f8be 	bl	8003db0 <vPortFree>
				vPortFree( pxTCB );
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f001 f8bb 	bl	8003db0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002c3a:	e018      	b.n	8002c6e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d103      	bne.n	8002c4e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f001 f8b2 	bl	8003db0 <vPortFree>
	}
 8002c4c:	e00f      	b.n	8002c6e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d00a      	beq.n	8002c6e <prvDeleteTCB+0x56>
	__asm volatile
 8002c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c5c:	f383 8811 	msr	BASEPRI, r3
 8002c60:	f3bf 8f6f 	isb	sy
 8002c64:	f3bf 8f4f 	dsb	sy
 8002c68:	60fb      	str	r3, [r7, #12]
}
 8002c6a:	bf00      	nop
 8002c6c:	e7fe      	b.n	8002c6c <prvDeleteTCB+0x54>
	}
 8002c6e:	bf00      	nop
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c7e:	4b0c      	ldr	r3, [pc, #48]	; (8002cb0 <prvResetNextTaskUnblockTime+0x38>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d104      	bne.n	8002c92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002c88:	4b0a      	ldr	r3, [pc, #40]	; (8002cb4 <prvResetNextTaskUnblockTime+0x3c>)
 8002c8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002c90:	e008      	b.n	8002ca4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c92:	4b07      	ldr	r3, [pc, #28]	; (8002cb0 <prvResetNextTaskUnblockTime+0x38>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	4a04      	ldr	r2, [pc, #16]	; (8002cb4 <prvResetNextTaskUnblockTime+0x3c>)
 8002ca2:	6013      	str	r3, [r2, #0]
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	200016cc 	.word	0x200016cc
 8002cb4:	20001734 	.word	0x20001734

08002cb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002cbe:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <xTaskGetSchedulerState+0x34>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d102      	bne.n	8002ccc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	607b      	str	r3, [r7, #4]
 8002cca:	e008      	b.n	8002cde <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ccc:	4b08      	ldr	r3, [pc, #32]	; (8002cf0 <xTaskGetSchedulerState+0x38>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d102      	bne.n	8002cda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	607b      	str	r3, [r7, #4]
 8002cd8:	e001      	b.n	8002cde <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002cde:	687b      	ldr	r3, [r7, #4]
	}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	20001720 	.word	0x20001720
 8002cf0:	2000173c 	.word	0x2000173c

08002cf4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d056      	beq.n	8002db8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002d0a:	4b2e      	ldr	r3, [pc, #184]	; (8002dc4 <xTaskPriorityDisinherit+0xd0>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d00a      	beq.n	8002d2a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8002d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d18:	f383 8811 	msr	BASEPRI, r3
 8002d1c:	f3bf 8f6f 	isb	sy
 8002d20:	f3bf 8f4f 	dsb	sy
 8002d24:	60fb      	str	r3, [r7, #12]
}
 8002d26:	bf00      	nop
 8002d28:	e7fe      	b.n	8002d28 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10a      	bne.n	8002d48 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8002d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d36:	f383 8811 	msr	BASEPRI, r3
 8002d3a:	f3bf 8f6f 	isb	sy
 8002d3e:	f3bf 8f4f 	dsb	sy
 8002d42:	60bb      	str	r3, [r7, #8]
}
 8002d44:	bf00      	nop
 8002d46:	e7fe      	b.n	8002d46 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d4c:	1e5a      	subs	r2, r3, #1
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d02c      	beq.n	8002db8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d128      	bne.n	8002db8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	3304      	adds	r3, #4
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fe fc5e 	bl	800162c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d88:	4b0f      	ldr	r3, [pc, #60]	; (8002dc8 <xTaskPriorityDisinherit+0xd4>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d903      	bls.n	8002d98 <xTaskPriorityDisinherit+0xa4>
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d94:	4a0c      	ldr	r2, [pc, #48]	; (8002dc8 <xTaskPriorityDisinherit+0xd4>)
 8002d96:	6013      	str	r3, [r2, #0]
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4a09      	ldr	r2, [pc, #36]	; (8002dcc <xTaskPriorityDisinherit+0xd8>)
 8002da6:	441a      	add	r2, r3
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	3304      	adds	r3, #4
 8002dac:	4619      	mov	r1, r3
 8002dae:	4610      	mov	r0, r2
 8002db0:	f7fe fbdf 	bl	8001572 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002db4:	2301      	movs	r3, #1
 8002db6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002db8:	697b      	ldr	r3, [r7, #20]
	}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3718      	adds	r7, #24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	20001240 	.word	0x20001240
 8002dc8:	2000171c 	.word	0x2000171c
 8002dcc:	20001244 	.word	0x20001244

08002dd0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
 8002ddc:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8002dde:	f000 fdf9 	bl	80039d4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8002de2:	4b26      	ldr	r3, [pc, #152]	; (8002e7c <xTaskNotifyWait+0xac>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d01a      	beq.n	8002e26 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8002df0:	4b22      	ldr	r3, [pc, #136]	; (8002e7c <xTaskNotifyWait+0xac>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	43d2      	mvns	r2, r2
 8002dfa:	400a      	ands	r2, r1
 8002dfc:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8002dfe:	4b1f      	ldr	r3, [pc, #124]	; (8002e7c <xTaskNotifyWait+0xac>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00b      	beq.n	8002e26 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002e0e:	2101      	movs	r1, #1
 8002e10:	6838      	ldr	r0, [r7, #0]
 8002e12:	f000 f913 	bl	800303c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8002e16:	4b1a      	ldr	r3, [pc, #104]	; (8002e80 <xTaskNotifyWait+0xb0>)
 8002e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	f3bf 8f4f 	dsb	sy
 8002e22:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8002e26:	f000 fe05 	bl	8003a34 <vPortExitCritical>

		taskENTER_CRITICAL();
 8002e2a:	f000 fdd3 	bl	80039d4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d004      	beq.n	8002e3e <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8002e34:	4b11      	ldr	r3, [pc, #68]	; (8002e7c <xTaskNotifyWait+0xac>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8002e3e:	4b0f      	ldr	r3, [pc, #60]	; (8002e7c <xTaskNotifyWait+0xac>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d002      	beq.n	8002e52 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	e008      	b.n	8002e64 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8002e52:	4b0a      	ldr	r3, [pc, #40]	; (8002e7c <xTaskNotifyWait+0xac>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	43d2      	mvns	r2, r2
 8002e5c:	400a      	ands	r2, r1
 8002e5e:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 8002e60:	2301      	movs	r3, #1
 8002e62:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002e64:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <xTaskNotifyWait+0xac>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8002e6e:	f000 fde1 	bl	8003a34 <vPortExitCritical>

		return xReturn;
 8002e72:	697b      	ldr	r3, [r7, #20]
	}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	20001240 	.word	0x20001240
 8002e80:	e000ed04 	.word	0xe000ed04

08002e84 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b08e      	sub	sp, #56	; 0x38
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	603b      	str	r3, [r7, #0]
 8002e90:	4613      	mov	r3, r2
 8002e92:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8002e94:	2301      	movs	r3, #1
 8002e96:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10a      	bne.n	8002eb4 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8002e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea2:	f383 8811 	msr	BASEPRI, r3
 8002ea6:	f3bf 8f6f 	isb	sy
 8002eaa:	f3bf 8f4f 	dsb	sy
 8002eae:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002eb0:	bf00      	nop
 8002eb2:	e7fe      	b.n	8002eb2 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002eb4:	f000 fe70 	bl	8003b98 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8002ebc:	f3ef 8211 	mrs	r2, BASEPRI
 8002ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec4:	f383 8811 	msr	BASEPRI, r3
 8002ec8:	f3bf 8f6f 	isb	sy
 8002ecc:	f3bf 8f4f 	dsb	sy
 8002ed0:	623a      	str	r2, [r7, #32]
 8002ed2:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8002ed4:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8002ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8002ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002eec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8002ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8002ef8:	79fb      	ldrb	r3, [r7, #7]
 8002efa:	2b04      	cmp	r3, #4
 8002efc:	d828      	bhi.n	8002f50 <xTaskGenericNotifyFromISR+0xcc>
 8002efe:	a201      	add	r2, pc, #4	; (adr r2, 8002f04 <xTaskGenericNotifyFromISR+0x80>)
 8002f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f04:	08002f71 	.word	0x08002f71
 8002f08:	08002f19 	.word	0x08002f19
 8002f0c:	08002f27 	.word	0x08002f27
 8002f10:	08002f33 	.word	0x08002f33
 8002f14:	08002f3b 	.word	0x08002f3b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8002f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f22:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8002f24:	e027      	b.n	8002f76 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8002f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8002f30:	e021      	b.n	8002f76 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8002f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8002f38:	e01d      	b.n	8002f76 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002f3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d003      	beq.n	8002f4a <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8002f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8002f48:	e015      	b.n	8002f76 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8002f4e:	e012      	b.n	8002f76 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8002f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f58:	d00c      	beq.n	8002f74 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8002f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f5e:	f383 8811 	msr	BASEPRI, r3
 8002f62:	f3bf 8f6f 	isb	sy
 8002f66:	f3bf 8f4f 	dsb	sy
 8002f6a:	61bb      	str	r3, [r7, #24]
}
 8002f6c:	bf00      	nop
 8002f6e:	e7fe      	b.n	8002f6e <xTaskGenericNotifyFromISR+0xea>
					break;
 8002f70:	bf00      	nop
 8002f72:	e000      	b.n	8002f76 <xTaskGenericNotifyFromISR+0xf2>
					break;
 8002f74:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002f76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d146      	bne.n	800300c <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00a      	beq.n	8002f9c <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8002f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8a:	f383 8811 	msr	BASEPRI, r3
 8002f8e:	f3bf 8f6f 	isb	sy
 8002f92:	f3bf 8f4f 	dsb	sy
 8002f96:	617b      	str	r3, [r7, #20]
}
 8002f98:	bf00      	nop
 8002f9a:	e7fe      	b.n	8002f9a <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f9c:	4b21      	ldr	r3, [pc, #132]	; (8003024 <xTaskGenericNotifyFromISR+0x1a0>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d11d      	bne.n	8002fe0 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa6:	3304      	adds	r3, #4
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fe fb3f 	bl	800162c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb2:	4b1d      	ldr	r3, [pc, #116]	; (8003028 <xTaskGenericNotifyFromISR+0x1a4>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d903      	bls.n	8002fc2 <xTaskGenericNotifyFromISR+0x13e>
 8002fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbe:	4a1a      	ldr	r2, [pc, #104]	; (8003028 <xTaskGenericNotifyFromISR+0x1a4>)
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4a17      	ldr	r2, [pc, #92]	; (800302c <xTaskGenericNotifyFromISR+0x1a8>)
 8002fd0:	441a      	add	r2, r3
 8002fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd4:	3304      	adds	r3, #4
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	4610      	mov	r0, r2
 8002fda:	f7fe faca 	bl	8001572 <vListInsertEnd>
 8002fde:	e005      	b.n	8002fec <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8002fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe2:	3318      	adds	r3, #24
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4812      	ldr	r0, [pc, #72]	; (8003030 <xTaskGenericNotifyFromISR+0x1ac>)
 8002fe8:	f7fe fac3 	bl	8001572 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff0:	4b10      	ldr	r3, [pc, #64]	; (8003034 <xTaskGenericNotifyFromISR+0x1b0>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d908      	bls.n	800300c <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8002ffa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d002      	beq.n	8003006 <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8003000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003002:	2201      	movs	r2, #1
 8003004:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8003006:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <xTaskGenericNotifyFromISR+0x1b4>)
 8003008:	2201      	movs	r2, #1
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800300e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	f383 8811 	msr	BASEPRI, r3
}
 8003016:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8003018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800301a:	4618      	mov	r0, r3
 800301c:	3738      	adds	r7, #56	; 0x38
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	2000173c 	.word	0x2000173c
 8003028:	2000171c 	.word	0x2000171c
 800302c:	20001244 	.word	0x20001244
 8003030:	200016d4 	.word	0x200016d4
 8003034:	20001240 	.word	0x20001240
 8003038:	20001728 	.word	0x20001728

0800303c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003046:	4b21      	ldr	r3, [pc, #132]	; (80030cc <prvAddCurrentTaskToDelayedList+0x90>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800304c:	4b20      	ldr	r3, [pc, #128]	; (80030d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	3304      	adds	r3, #4
 8003052:	4618      	mov	r0, r3
 8003054:	f7fe faea 	bl	800162c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800305e:	d10a      	bne.n	8003076 <prvAddCurrentTaskToDelayedList+0x3a>
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d007      	beq.n	8003076 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003066:	4b1a      	ldr	r3, [pc, #104]	; (80030d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	3304      	adds	r3, #4
 800306c:	4619      	mov	r1, r3
 800306e:	4819      	ldr	r0, [pc, #100]	; (80030d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8003070:	f7fe fa7f 	bl	8001572 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003074:	e026      	b.n	80030c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4413      	add	r3, r2
 800307c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800307e:	4b14      	ldr	r3, [pc, #80]	; (80030d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68ba      	ldr	r2, [r7, #8]
 8003084:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	429a      	cmp	r2, r3
 800308c:	d209      	bcs.n	80030a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800308e:	4b12      	ldr	r3, [pc, #72]	; (80030d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	4b0f      	ldr	r3, [pc, #60]	; (80030d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	3304      	adds	r3, #4
 8003098:	4619      	mov	r1, r3
 800309a:	4610      	mov	r0, r2
 800309c:	f7fe fa8d 	bl	80015ba <vListInsert>
}
 80030a0:	e010      	b.n	80030c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80030a2:	4b0e      	ldr	r3, [pc, #56]	; (80030dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	4b0a      	ldr	r3, [pc, #40]	; (80030d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	3304      	adds	r3, #4
 80030ac:	4619      	mov	r1, r3
 80030ae:	4610      	mov	r0, r2
 80030b0:	f7fe fa83 	bl	80015ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80030b4:	4b0a      	ldr	r3, [pc, #40]	; (80030e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d202      	bcs.n	80030c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80030be:	4a08      	ldr	r2, [pc, #32]	; (80030e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	6013      	str	r3, [r2, #0]
}
 80030c4:	bf00      	nop
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	20001718 	.word	0x20001718
 80030d0:	20001240 	.word	0x20001240
 80030d4:	20001700 	.word	0x20001700
 80030d8:	200016d0 	.word	0x200016d0
 80030dc:	200016cc 	.word	0x200016cc
 80030e0:	20001734 	.word	0x20001734

080030e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b08a      	sub	sp, #40	; 0x28
 80030e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80030ea:	2300      	movs	r3, #0
 80030ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80030ee:	f000 fb07 	bl	8003700 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80030f2:	4b1c      	ldr	r3, [pc, #112]	; (8003164 <xTimerCreateTimerTask+0x80>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d021      	beq.n	800313e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80030fa:	2300      	movs	r3, #0
 80030fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80030fe:	2300      	movs	r3, #0
 8003100:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003102:	1d3a      	adds	r2, r7, #4
 8003104:	f107 0108 	add.w	r1, r7, #8
 8003108:	f107 030c 	add.w	r3, r7, #12
 800310c:	4618      	mov	r0, r3
 800310e:	f7fe f9e9 	bl	80014e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	9202      	str	r2, [sp, #8]
 800311a:	9301      	str	r3, [sp, #4]
 800311c:	2302      	movs	r3, #2
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	2300      	movs	r3, #0
 8003122:	460a      	mov	r2, r1
 8003124:	4910      	ldr	r1, [pc, #64]	; (8003168 <xTimerCreateTimerTask+0x84>)
 8003126:	4811      	ldr	r0, [pc, #68]	; (800316c <xTimerCreateTimerTask+0x88>)
 8003128:	f7fe ff96 	bl	8002058 <xTaskCreateStatic>
 800312c:	4603      	mov	r3, r0
 800312e:	4a10      	ldr	r2, [pc, #64]	; (8003170 <xTimerCreateTimerTask+0x8c>)
 8003130:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003132:	4b0f      	ldr	r3, [pc, #60]	; (8003170 <xTimerCreateTimerTask+0x8c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800313a:	2301      	movs	r3, #1
 800313c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10a      	bne.n	800315a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003148:	f383 8811 	msr	BASEPRI, r3
 800314c:	f3bf 8f6f 	isb	sy
 8003150:	f3bf 8f4f 	dsb	sy
 8003154:	613b      	str	r3, [r7, #16]
}
 8003156:	bf00      	nop
 8003158:	e7fe      	b.n	8003158 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800315a:	697b      	ldr	r3, [r7, #20]
}
 800315c:	4618      	mov	r0, r3
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	20001770 	.word	0x20001770
 8003168:	0800bac4 	.word	0x0800bac4
 800316c:	080032a9 	.word	0x080032a9
 8003170:	20001774 	.word	0x20001774

08003174 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b08a      	sub	sp, #40	; 0x28
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
 8003180:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003182:	2300      	movs	r3, #0
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10a      	bne.n	80031a2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800318c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003190:	f383 8811 	msr	BASEPRI, r3
 8003194:	f3bf 8f6f 	isb	sy
 8003198:	f3bf 8f4f 	dsb	sy
 800319c:	623b      	str	r3, [r7, #32]
}
 800319e:	bf00      	nop
 80031a0:	e7fe      	b.n	80031a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80031a2:	4b1a      	ldr	r3, [pc, #104]	; (800320c <xTimerGenericCommand+0x98>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d02a      	beq.n	8003200 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2b05      	cmp	r3, #5
 80031ba:	dc18      	bgt.n	80031ee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80031bc:	f7ff fd7c 	bl	8002cb8 <xTaskGetSchedulerState>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d109      	bne.n	80031da <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80031c6:	4b11      	ldr	r3, [pc, #68]	; (800320c <xTimerGenericCommand+0x98>)
 80031c8:	6818      	ldr	r0, [r3, #0]
 80031ca:	f107 0110 	add.w	r1, r7, #16
 80031ce:	2300      	movs	r3, #0
 80031d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031d2:	f7fe fb59 	bl	8001888 <xQueueGenericSend>
 80031d6:	6278      	str	r0, [r7, #36]	; 0x24
 80031d8:	e012      	b.n	8003200 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80031da:	4b0c      	ldr	r3, [pc, #48]	; (800320c <xTimerGenericCommand+0x98>)
 80031dc:	6818      	ldr	r0, [r3, #0]
 80031de:	f107 0110 	add.w	r1, r7, #16
 80031e2:	2300      	movs	r3, #0
 80031e4:	2200      	movs	r2, #0
 80031e6:	f7fe fb4f 	bl	8001888 <xQueueGenericSend>
 80031ea:	6278      	str	r0, [r7, #36]	; 0x24
 80031ec:	e008      	b.n	8003200 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80031ee:	4b07      	ldr	r3, [pc, #28]	; (800320c <xTimerGenericCommand+0x98>)
 80031f0:	6818      	ldr	r0, [r3, #0]
 80031f2:	f107 0110 	add.w	r1, r7, #16
 80031f6:	2300      	movs	r3, #0
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	f7fe fc43 	bl	8001a84 <xQueueGenericSendFromISR>
 80031fe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003202:	4618      	mov	r0, r3
 8003204:	3728      	adds	r7, #40	; 0x28
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	20001770 	.word	0x20001770

08003210 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b088      	sub	sp, #32
 8003214:	af02      	add	r7, sp, #8
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800321a:	4b22      	ldr	r3, [pc, #136]	; (80032a4 <prvProcessExpiredTimer+0x94>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	3304      	adds	r3, #4
 8003228:	4618      	mov	r0, r3
 800322a:	f7fe f9ff 	bl	800162c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b00      	cmp	r3, #0
 800323a:	d022      	beq.n	8003282 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	699a      	ldr	r2, [r3, #24]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	18d1      	adds	r1, r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	6978      	ldr	r0, [r7, #20]
 800324a:	f000 f8d1 	bl	80033f0 <prvInsertTimerInActiveList>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d01f      	beq.n	8003294 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003254:	2300      	movs	r3, #0
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	2300      	movs	r3, #0
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	2100      	movs	r1, #0
 800325e:	6978      	ldr	r0, [r7, #20]
 8003260:	f7ff ff88 	bl	8003174 <xTimerGenericCommand>
 8003264:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d113      	bne.n	8003294 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800326c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003270:	f383 8811 	msr	BASEPRI, r3
 8003274:	f3bf 8f6f 	isb	sy
 8003278:	f3bf 8f4f 	dsb	sy
 800327c:	60fb      	str	r3, [r7, #12]
}
 800327e:	bf00      	nop
 8003280:	e7fe      	b.n	8003280 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003288:	f023 0301 	bic.w	r3, r3, #1
 800328c:	b2da      	uxtb	r2, r3
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	6978      	ldr	r0, [r7, #20]
 800329a:	4798      	blx	r3
}
 800329c:	bf00      	nop
 800329e:	3718      	adds	r7, #24
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	20001768 	.word	0x20001768

080032a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80032b0:	f107 0308 	add.w	r3, r7, #8
 80032b4:	4618      	mov	r0, r3
 80032b6:	f000 f857 	bl	8003368 <prvGetNextExpireTime>
 80032ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	4619      	mov	r1, r3
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 f803 	bl	80032cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80032c6:	f000 f8d5 	bl	8003474 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80032ca:	e7f1      	b.n	80032b0 <prvTimerTask+0x8>

080032cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80032d6:	f7ff f8fb 	bl	80024d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80032da:	f107 0308 	add.w	r3, r7, #8
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 f866 	bl	80033b0 <prvSampleTimeNow>
 80032e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d130      	bne.n	800334e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10a      	bne.n	8003308 <prvProcessTimerOrBlockTask+0x3c>
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d806      	bhi.n	8003308 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80032fa:	f7ff f8f7 	bl	80024ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80032fe:	68f9      	ldr	r1, [r7, #12]
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f7ff ff85 	bl	8003210 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003306:	e024      	b.n	8003352 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d008      	beq.n	8003320 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800330e:	4b13      	ldr	r3, [pc, #76]	; (800335c <prvProcessTimerOrBlockTask+0x90>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <prvProcessTimerOrBlockTask+0x50>
 8003318:	2301      	movs	r3, #1
 800331a:	e000      	b.n	800331e <prvProcessTimerOrBlockTask+0x52>
 800331c:	2300      	movs	r3, #0
 800331e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003320:	4b0f      	ldr	r3, [pc, #60]	; (8003360 <prvProcessTimerOrBlockTask+0x94>)
 8003322:	6818      	ldr	r0, [r3, #0]
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	4619      	mov	r1, r3
 800332e:	f7fe fe5f 	bl	8001ff0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003332:	f7ff f8db 	bl	80024ec <xTaskResumeAll>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10a      	bne.n	8003352 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800333c:	4b09      	ldr	r3, [pc, #36]	; (8003364 <prvProcessTimerOrBlockTask+0x98>)
 800333e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	f3bf 8f4f 	dsb	sy
 8003348:	f3bf 8f6f 	isb	sy
}
 800334c:	e001      	b.n	8003352 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800334e:	f7ff f8cd 	bl	80024ec <xTaskResumeAll>
}
 8003352:	bf00      	nop
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	2000176c 	.word	0x2000176c
 8003360:	20001770 	.word	0x20001770
 8003364:	e000ed04 	.word	0xe000ed04

08003368 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003370:	4b0e      	ldr	r3, [pc, #56]	; (80033ac <prvGetNextExpireTime+0x44>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <prvGetNextExpireTime+0x16>
 800337a:	2201      	movs	r2, #1
 800337c:	e000      	b.n	8003380 <prvGetNextExpireTime+0x18>
 800337e:	2200      	movs	r2, #0
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d105      	bne.n	8003398 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800338c:	4b07      	ldr	r3, [pc, #28]	; (80033ac <prvGetNextExpireTime+0x44>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	60fb      	str	r3, [r7, #12]
 8003396:	e001      	b.n	800339c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003398:	2300      	movs	r3, #0
 800339a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800339c:	68fb      	ldr	r3, [r7, #12]
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3714      	adds	r7, #20
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	20001768 	.word	0x20001768

080033b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80033b8:	f7ff f936 	bl	8002628 <xTaskGetTickCount>
 80033bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80033be:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <prvSampleTimeNow+0x3c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d205      	bcs.n	80033d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80033c8:	f000 f936 	bl	8003638 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	e002      	b.n	80033da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80033da:	4a04      	ldr	r2, [pc, #16]	; (80033ec <prvSampleTimeNow+0x3c>)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80033e0:	68fb      	ldr	r3, [r7, #12]
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	20001778 	.word	0x20001778

080033f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
 80033fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80033fe:	2300      	movs	r3, #0
 8003400:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	68ba      	ldr	r2, [r7, #8]
 8003406:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	429a      	cmp	r2, r3
 8003414:	d812      	bhi.n	800343c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	1ad2      	subs	r2, r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	429a      	cmp	r2, r3
 8003422:	d302      	bcc.n	800342a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003424:	2301      	movs	r3, #1
 8003426:	617b      	str	r3, [r7, #20]
 8003428:	e01b      	b.n	8003462 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800342a:	4b10      	ldr	r3, [pc, #64]	; (800346c <prvInsertTimerInActiveList+0x7c>)
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	3304      	adds	r3, #4
 8003432:	4619      	mov	r1, r3
 8003434:	4610      	mov	r0, r2
 8003436:	f7fe f8c0 	bl	80015ba <vListInsert>
 800343a:	e012      	b.n	8003462 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	429a      	cmp	r2, r3
 8003442:	d206      	bcs.n	8003452 <prvInsertTimerInActiveList+0x62>
 8003444:	68ba      	ldr	r2, [r7, #8]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	429a      	cmp	r2, r3
 800344a:	d302      	bcc.n	8003452 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800344c:	2301      	movs	r3, #1
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	e007      	b.n	8003462 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003452:	4b07      	ldr	r3, [pc, #28]	; (8003470 <prvInsertTimerInActiveList+0x80>)
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	3304      	adds	r3, #4
 800345a:	4619      	mov	r1, r3
 800345c:	4610      	mov	r0, r2
 800345e:	f7fe f8ac 	bl	80015ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003462:	697b      	ldr	r3, [r7, #20]
}
 8003464:	4618      	mov	r0, r3
 8003466:	3718      	adds	r7, #24
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	2000176c 	.word	0x2000176c
 8003470:	20001768 	.word	0x20001768

08003474 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b08e      	sub	sp, #56	; 0x38
 8003478:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800347a:	e0ca      	b.n	8003612 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	da18      	bge.n	80034b4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003482:	1d3b      	adds	r3, r7, #4
 8003484:	3304      	adds	r3, #4
 8003486:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10a      	bne.n	80034a4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800348e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003492:	f383 8811 	msr	BASEPRI, r3
 8003496:	f3bf 8f6f 	isb	sy
 800349a:	f3bf 8f4f 	dsb	sy
 800349e:	61fb      	str	r3, [r7, #28]
}
 80034a0:	bf00      	nop
 80034a2:	e7fe      	b.n	80034a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80034a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034aa:	6850      	ldr	r0, [r2, #4]
 80034ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034ae:	6892      	ldr	r2, [r2, #8]
 80034b0:	4611      	mov	r1, r2
 80034b2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f2c0 80ab 	blt.w	8003612 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80034c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d004      	beq.n	80034d2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80034c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ca:	3304      	adds	r3, #4
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fe f8ad 	bl	800162c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80034d2:	463b      	mov	r3, r7
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff ff6b 	bl	80033b0 <prvSampleTimeNow>
 80034da:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b09      	cmp	r3, #9
 80034e0:	f200 8096 	bhi.w	8003610 <prvProcessReceivedCommands+0x19c>
 80034e4:	a201      	add	r2, pc, #4	; (adr r2, 80034ec <prvProcessReceivedCommands+0x78>)
 80034e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ea:	bf00      	nop
 80034ec:	08003515 	.word	0x08003515
 80034f0:	08003515 	.word	0x08003515
 80034f4:	08003515 	.word	0x08003515
 80034f8:	08003589 	.word	0x08003589
 80034fc:	0800359d 	.word	0x0800359d
 8003500:	080035e7 	.word	0x080035e7
 8003504:	08003515 	.word	0x08003515
 8003508:	08003515 	.word	0x08003515
 800350c:	08003589 	.word	0x08003589
 8003510:	0800359d 	.word	0x0800359d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003516:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800351a:	f043 0301 	orr.w	r3, r3, #1
 800351e:	b2da      	uxtb	r2, r3
 8003520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003522:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003526:	68ba      	ldr	r2, [r7, #8]
 8003528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	18d1      	adds	r1, r2, r3
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003534:	f7ff ff5c 	bl	80033f0 <prvInsertTimerInActiveList>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d069      	beq.n	8003612 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800353e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003544:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003548:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800354c:	f003 0304 	and.w	r3, r3, #4
 8003550:	2b00      	cmp	r3, #0
 8003552:	d05e      	beq.n	8003612 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	441a      	add	r2, r3
 800355c:	2300      	movs	r3, #0
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	2300      	movs	r3, #0
 8003562:	2100      	movs	r1, #0
 8003564:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003566:	f7ff fe05 	bl	8003174 <xTimerGenericCommand>
 800356a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800356c:	6a3b      	ldr	r3, [r7, #32]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d14f      	bne.n	8003612 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8003572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003576:	f383 8811 	msr	BASEPRI, r3
 800357a:	f3bf 8f6f 	isb	sy
 800357e:	f3bf 8f4f 	dsb	sy
 8003582:	61bb      	str	r3, [r7, #24]
}
 8003584:	bf00      	nop
 8003586:	e7fe      	b.n	8003586 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800358e:	f023 0301 	bic.w	r3, r3, #1
 8003592:	b2da      	uxtb	r2, r3
 8003594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003596:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800359a:	e03a      	b.n	8003612 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800359c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035a2:	f043 0301 	orr.w	r3, r3, #1
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80035b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10a      	bne.n	80035d2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80035bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c0:	f383 8811 	msr	BASEPRI, r3
 80035c4:	f3bf 8f6f 	isb	sy
 80035c8:	f3bf 8f4f 	dsb	sy
 80035cc:	617b      	str	r3, [r7, #20]
}
 80035ce:	bf00      	nop
 80035d0:	e7fe      	b.n	80035d0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80035d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d4:	699a      	ldr	r2, [r3, #24]
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	18d1      	adds	r1, r2, r3
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035e0:	f7ff ff06 	bl	80033f0 <prvInsertTimerInActiveList>
					break;
 80035e4:	e015      	b.n	8003612 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80035e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d103      	bne.n	80035fc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80035f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035f6:	f000 fbdb 	bl	8003db0 <vPortFree>
 80035fa:	e00a      	b.n	8003612 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80035fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003602:	f023 0301 	bic.w	r3, r3, #1
 8003606:	b2da      	uxtb	r2, r3
 8003608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800360e:	e000      	b.n	8003612 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8003610:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003612:	4b08      	ldr	r3, [pc, #32]	; (8003634 <prvProcessReceivedCommands+0x1c0>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	1d39      	adds	r1, r7, #4
 8003618:	2200      	movs	r2, #0
 800361a:	4618      	mov	r0, r3
 800361c:	f7fe face 	bl	8001bbc <xQueueReceive>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	f47f af2a 	bne.w	800347c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003628:	bf00      	nop
 800362a:	bf00      	nop
 800362c:	3730      	adds	r7, #48	; 0x30
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	20001770 	.word	0x20001770

08003638 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b088      	sub	sp, #32
 800363c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800363e:	e048      	b.n	80036d2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003640:	4b2d      	ldr	r3, [pc, #180]	; (80036f8 <prvSwitchTimerLists+0xc0>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800364a:	4b2b      	ldr	r3, [pc, #172]	; (80036f8 <prvSwitchTimerLists+0xc0>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	3304      	adds	r3, #4
 8003658:	4618      	mov	r0, r3
 800365a:	f7fd ffe7 	bl	800162c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b00      	cmp	r3, #0
 8003672:	d02e      	beq.n	80036d2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	4413      	add	r3, r2
 800367c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	429a      	cmp	r2, r3
 8003684:	d90e      	bls.n	80036a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003692:	4b19      	ldr	r3, [pc, #100]	; (80036f8 <prvSwitchTimerLists+0xc0>)
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	3304      	adds	r3, #4
 800369a:	4619      	mov	r1, r3
 800369c:	4610      	mov	r0, r2
 800369e:	f7fd ff8c 	bl	80015ba <vListInsert>
 80036a2:	e016      	b.n	80036d2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80036a4:	2300      	movs	r3, #0
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	2300      	movs	r3, #0
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	2100      	movs	r1, #0
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f7ff fd60 	bl	8003174 <xTimerGenericCommand>
 80036b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10a      	bne.n	80036d2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80036bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c0:	f383 8811 	msr	BASEPRI, r3
 80036c4:	f3bf 8f6f 	isb	sy
 80036c8:	f3bf 8f4f 	dsb	sy
 80036cc:	603b      	str	r3, [r7, #0]
}
 80036ce:	bf00      	nop
 80036d0:	e7fe      	b.n	80036d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80036d2:	4b09      	ldr	r3, [pc, #36]	; (80036f8 <prvSwitchTimerLists+0xc0>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1b1      	bne.n	8003640 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80036dc:	4b06      	ldr	r3, [pc, #24]	; (80036f8 <prvSwitchTimerLists+0xc0>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80036e2:	4b06      	ldr	r3, [pc, #24]	; (80036fc <prvSwitchTimerLists+0xc4>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a04      	ldr	r2, [pc, #16]	; (80036f8 <prvSwitchTimerLists+0xc0>)
 80036e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80036ea:	4a04      	ldr	r2, [pc, #16]	; (80036fc <prvSwitchTimerLists+0xc4>)
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	6013      	str	r3, [r2, #0]
}
 80036f0:	bf00      	nop
 80036f2:	3718      	adds	r7, #24
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	20001768 	.word	0x20001768
 80036fc:	2000176c 	.word	0x2000176c

08003700 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003706:	f000 f965 	bl	80039d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800370a:	4b15      	ldr	r3, [pc, #84]	; (8003760 <prvCheckForValidListAndQueue+0x60>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d120      	bne.n	8003754 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003712:	4814      	ldr	r0, [pc, #80]	; (8003764 <prvCheckForValidListAndQueue+0x64>)
 8003714:	f7fd ff00 	bl	8001518 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003718:	4813      	ldr	r0, [pc, #76]	; (8003768 <prvCheckForValidListAndQueue+0x68>)
 800371a:	f7fd fefd 	bl	8001518 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800371e:	4b13      	ldr	r3, [pc, #76]	; (800376c <prvCheckForValidListAndQueue+0x6c>)
 8003720:	4a10      	ldr	r2, [pc, #64]	; (8003764 <prvCheckForValidListAndQueue+0x64>)
 8003722:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003724:	4b12      	ldr	r3, [pc, #72]	; (8003770 <prvCheckForValidListAndQueue+0x70>)
 8003726:	4a10      	ldr	r2, [pc, #64]	; (8003768 <prvCheckForValidListAndQueue+0x68>)
 8003728:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800372a:	2300      	movs	r3, #0
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	4b11      	ldr	r3, [pc, #68]	; (8003774 <prvCheckForValidListAndQueue+0x74>)
 8003730:	4a11      	ldr	r2, [pc, #68]	; (8003778 <prvCheckForValidListAndQueue+0x78>)
 8003732:	2110      	movs	r1, #16
 8003734:	200a      	movs	r0, #10
 8003736:	f7fe f80b 	bl	8001750 <xQueueGenericCreateStatic>
 800373a:	4603      	mov	r3, r0
 800373c:	4a08      	ldr	r2, [pc, #32]	; (8003760 <prvCheckForValidListAndQueue+0x60>)
 800373e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003740:	4b07      	ldr	r3, [pc, #28]	; (8003760 <prvCheckForValidListAndQueue+0x60>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d005      	beq.n	8003754 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003748:	4b05      	ldr	r3, [pc, #20]	; (8003760 <prvCheckForValidListAndQueue+0x60>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	490b      	ldr	r1, [pc, #44]	; (800377c <prvCheckForValidListAndQueue+0x7c>)
 800374e:	4618      	mov	r0, r3
 8003750:	f7fe fc24 	bl	8001f9c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003754:	f000 f96e 	bl	8003a34 <vPortExitCritical>
}
 8003758:	bf00      	nop
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	20001770 	.word	0x20001770
 8003764:	20001740 	.word	0x20001740
 8003768:	20001754 	.word	0x20001754
 800376c:	20001768 	.word	0x20001768
 8003770:	2000176c 	.word	0x2000176c
 8003774:	2000181c 	.word	0x2000181c
 8003778:	2000177c 	.word	0x2000177c
 800377c:	0800bacc 	.word	0x0800bacc

08003780 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	3b04      	subs	r3, #4
 8003790:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003798:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	3b04      	subs	r3, #4
 800379e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	f023 0201 	bic.w	r2, r3, #1
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	3b04      	subs	r3, #4
 80037ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80037b0:	4a0c      	ldr	r2, [pc, #48]	; (80037e4 <pxPortInitialiseStack+0x64>)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	3b14      	subs	r3, #20
 80037ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	3b04      	subs	r3, #4
 80037c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f06f 0202 	mvn.w	r2, #2
 80037ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	3b20      	subs	r3, #32
 80037d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80037d6:	68fb      	ldr	r3, [r7, #12]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3714      	adds	r7, #20
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	080037e9 	.word	0x080037e9

080037e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80037ee:	2300      	movs	r3, #0
 80037f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80037f2:	4b12      	ldr	r3, [pc, #72]	; (800383c <prvTaskExitError+0x54>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037fa:	d00a      	beq.n	8003812 <prvTaskExitError+0x2a>
	__asm volatile
 80037fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003800:	f383 8811 	msr	BASEPRI, r3
 8003804:	f3bf 8f6f 	isb	sy
 8003808:	f3bf 8f4f 	dsb	sy
 800380c:	60fb      	str	r3, [r7, #12]
}
 800380e:	bf00      	nop
 8003810:	e7fe      	b.n	8003810 <prvTaskExitError+0x28>
	__asm volatile
 8003812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003816:	f383 8811 	msr	BASEPRI, r3
 800381a:	f3bf 8f6f 	isb	sy
 800381e:	f3bf 8f4f 	dsb	sy
 8003822:	60bb      	str	r3, [r7, #8]
}
 8003824:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003826:	bf00      	nop
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d0fc      	beq.n	8003828 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800382e:	bf00      	nop
 8003830:	bf00      	nop
 8003832:	3714      	adds	r7, #20
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	20000088 	.word	0x20000088

08003840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003840:	4b07      	ldr	r3, [pc, #28]	; (8003860 <pxCurrentTCBConst2>)
 8003842:	6819      	ldr	r1, [r3, #0]
 8003844:	6808      	ldr	r0, [r1, #0]
 8003846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800384a:	f380 8809 	msr	PSP, r0
 800384e:	f3bf 8f6f 	isb	sy
 8003852:	f04f 0000 	mov.w	r0, #0
 8003856:	f380 8811 	msr	BASEPRI, r0
 800385a:	4770      	bx	lr
 800385c:	f3af 8000 	nop.w

08003860 <pxCurrentTCBConst2>:
 8003860:	20001240 	.word	0x20001240
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003864:	bf00      	nop
 8003866:	bf00      	nop

08003868 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003868:	4808      	ldr	r0, [pc, #32]	; (800388c <prvPortStartFirstTask+0x24>)
 800386a:	6800      	ldr	r0, [r0, #0]
 800386c:	6800      	ldr	r0, [r0, #0]
 800386e:	f380 8808 	msr	MSP, r0
 8003872:	f04f 0000 	mov.w	r0, #0
 8003876:	f380 8814 	msr	CONTROL, r0
 800387a:	b662      	cpsie	i
 800387c:	b661      	cpsie	f
 800387e:	f3bf 8f4f 	dsb	sy
 8003882:	f3bf 8f6f 	isb	sy
 8003886:	df00      	svc	0
 8003888:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800388a:	bf00      	nop
 800388c:	e000ed08 	.word	0xe000ed08

08003890 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003896:	4b46      	ldr	r3, [pc, #280]	; (80039b0 <xPortStartScheduler+0x120>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a46      	ldr	r2, [pc, #280]	; (80039b4 <xPortStartScheduler+0x124>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d10a      	bne.n	80038b6 <xPortStartScheduler+0x26>
	__asm volatile
 80038a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a4:	f383 8811 	msr	BASEPRI, r3
 80038a8:	f3bf 8f6f 	isb	sy
 80038ac:	f3bf 8f4f 	dsb	sy
 80038b0:	613b      	str	r3, [r7, #16]
}
 80038b2:	bf00      	nop
 80038b4:	e7fe      	b.n	80038b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80038b6:	4b3e      	ldr	r3, [pc, #248]	; (80039b0 <xPortStartScheduler+0x120>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a3f      	ldr	r2, [pc, #252]	; (80039b8 <xPortStartScheduler+0x128>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d10a      	bne.n	80038d6 <xPortStartScheduler+0x46>
	__asm volatile
 80038c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c4:	f383 8811 	msr	BASEPRI, r3
 80038c8:	f3bf 8f6f 	isb	sy
 80038cc:	f3bf 8f4f 	dsb	sy
 80038d0:	60fb      	str	r3, [r7, #12]
}
 80038d2:	bf00      	nop
 80038d4:	e7fe      	b.n	80038d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80038d6:	4b39      	ldr	r3, [pc, #228]	; (80039bc <xPortStartScheduler+0x12c>)
 80038d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	22ff      	movs	r2, #255	; 0xff
 80038e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80038f0:	78fb      	ldrb	r3, [r7, #3]
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	4b31      	ldr	r3, [pc, #196]	; (80039c0 <xPortStartScheduler+0x130>)
 80038fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80038fe:	4b31      	ldr	r3, [pc, #196]	; (80039c4 <xPortStartScheduler+0x134>)
 8003900:	2207      	movs	r2, #7
 8003902:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003904:	e009      	b.n	800391a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003906:	4b2f      	ldr	r3, [pc, #188]	; (80039c4 <xPortStartScheduler+0x134>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	3b01      	subs	r3, #1
 800390c:	4a2d      	ldr	r2, [pc, #180]	; (80039c4 <xPortStartScheduler+0x134>)
 800390e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003910:	78fb      	ldrb	r3, [r7, #3]
 8003912:	b2db      	uxtb	r3, r3
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	b2db      	uxtb	r3, r3
 8003918:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800391a:	78fb      	ldrb	r3, [r7, #3]
 800391c:	b2db      	uxtb	r3, r3
 800391e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003922:	2b80      	cmp	r3, #128	; 0x80
 8003924:	d0ef      	beq.n	8003906 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003926:	4b27      	ldr	r3, [pc, #156]	; (80039c4 <xPortStartScheduler+0x134>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f1c3 0307 	rsb	r3, r3, #7
 800392e:	2b04      	cmp	r3, #4
 8003930:	d00a      	beq.n	8003948 <xPortStartScheduler+0xb8>
	__asm volatile
 8003932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003936:	f383 8811 	msr	BASEPRI, r3
 800393a:	f3bf 8f6f 	isb	sy
 800393e:	f3bf 8f4f 	dsb	sy
 8003942:	60bb      	str	r3, [r7, #8]
}
 8003944:	bf00      	nop
 8003946:	e7fe      	b.n	8003946 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003948:	4b1e      	ldr	r3, [pc, #120]	; (80039c4 <xPortStartScheduler+0x134>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	021b      	lsls	r3, r3, #8
 800394e:	4a1d      	ldr	r2, [pc, #116]	; (80039c4 <xPortStartScheduler+0x134>)
 8003950:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003952:	4b1c      	ldr	r3, [pc, #112]	; (80039c4 <xPortStartScheduler+0x134>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800395a:	4a1a      	ldr	r2, [pc, #104]	; (80039c4 <xPortStartScheduler+0x134>)
 800395c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	b2da      	uxtb	r2, r3
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003966:	4b18      	ldr	r3, [pc, #96]	; (80039c8 <xPortStartScheduler+0x138>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a17      	ldr	r2, [pc, #92]	; (80039c8 <xPortStartScheduler+0x138>)
 800396c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003970:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003972:	4b15      	ldr	r3, [pc, #84]	; (80039c8 <xPortStartScheduler+0x138>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a14      	ldr	r2, [pc, #80]	; (80039c8 <xPortStartScheduler+0x138>)
 8003978:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800397c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800397e:	f000 f8dd 	bl	8003b3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003982:	4b12      	ldr	r3, [pc, #72]	; (80039cc <xPortStartScheduler+0x13c>)
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003988:	f000 f8fc 	bl	8003b84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800398c:	4b10      	ldr	r3, [pc, #64]	; (80039d0 <xPortStartScheduler+0x140>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a0f      	ldr	r2, [pc, #60]	; (80039d0 <xPortStartScheduler+0x140>)
 8003992:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003996:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003998:	f7ff ff66 	bl	8003868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800399c:	f7fe ff20 	bl	80027e0 <vTaskSwitchContext>
	prvTaskExitError();
 80039a0:	f7ff ff22 	bl	80037e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3718      	adds	r7, #24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	e000ed00 	.word	0xe000ed00
 80039b4:	410fc271 	.word	0x410fc271
 80039b8:	410fc270 	.word	0x410fc270
 80039bc:	e000e400 	.word	0xe000e400
 80039c0:	2000186c 	.word	0x2000186c
 80039c4:	20001870 	.word	0x20001870
 80039c8:	e000ed20 	.word	0xe000ed20
 80039cc:	20000088 	.word	0x20000088
 80039d0:	e000ef34 	.word	0xe000ef34

080039d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
	__asm volatile
 80039da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039de:	f383 8811 	msr	BASEPRI, r3
 80039e2:	f3bf 8f6f 	isb	sy
 80039e6:	f3bf 8f4f 	dsb	sy
 80039ea:	607b      	str	r3, [r7, #4]
}
 80039ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80039ee:	4b0f      	ldr	r3, [pc, #60]	; (8003a2c <vPortEnterCritical+0x58>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	3301      	adds	r3, #1
 80039f4:	4a0d      	ldr	r2, [pc, #52]	; (8003a2c <vPortEnterCritical+0x58>)
 80039f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80039f8:	4b0c      	ldr	r3, [pc, #48]	; (8003a2c <vPortEnterCritical+0x58>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d10f      	bne.n	8003a20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003a00:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <vPortEnterCritical+0x5c>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00a      	beq.n	8003a20 <vPortEnterCritical+0x4c>
	__asm volatile
 8003a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0e:	f383 8811 	msr	BASEPRI, r3
 8003a12:	f3bf 8f6f 	isb	sy
 8003a16:	f3bf 8f4f 	dsb	sy
 8003a1a:	603b      	str	r3, [r7, #0]
}
 8003a1c:	bf00      	nop
 8003a1e:	e7fe      	b.n	8003a1e <vPortEnterCritical+0x4a>
	}
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	20000088 	.word	0x20000088
 8003a30:	e000ed04 	.word	0xe000ed04

08003a34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003a3a:	4b12      	ldr	r3, [pc, #72]	; (8003a84 <vPortExitCritical+0x50>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10a      	bne.n	8003a58 <vPortExitCritical+0x24>
	__asm volatile
 8003a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a46:	f383 8811 	msr	BASEPRI, r3
 8003a4a:	f3bf 8f6f 	isb	sy
 8003a4e:	f3bf 8f4f 	dsb	sy
 8003a52:	607b      	str	r3, [r7, #4]
}
 8003a54:	bf00      	nop
 8003a56:	e7fe      	b.n	8003a56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003a58:	4b0a      	ldr	r3, [pc, #40]	; (8003a84 <vPortExitCritical+0x50>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	4a09      	ldr	r2, [pc, #36]	; (8003a84 <vPortExitCritical+0x50>)
 8003a60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003a62:	4b08      	ldr	r3, [pc, #32]	; (8003a84 <vPortExitCritical+0x50>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d105      	bne.n	8003a76 <vPortExitCritical+0x42>
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	f383 8811 	msr	BASEPRI, r3
}
 8003a74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	20000088 	.word	0x20000088
	...

08003a90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003a90:	f3ef 8009 	mrs	r0, PSP
 8003a94:	f3bf 8f6f 	isb	sy
 8003a98:	4b15      	ldr	r3, [pc, #84]	; (8003af0 <pxCurrentTCBConst>)
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	f01e 0f10 	tst.w	lr, #16
 8003aa0:	bf08      	it	eq
 8003aa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003aa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aaa:	6010      	str	r0, [r2, #0]
 8003aac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003ab0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003ab4:	f380 8811 	msr	BASEPRI, r0
 8003ab8:	f3bf 8f4f 	dsb	sy
 8003abc:	f3bf 8f6f 	isb	sy
 8003ac0:	f7fe fe8e 	bl	80027e0 <vTaskSwitchContext>
 8003ac4:	f04f 0000 	mov.w	r0, #0
 8003ac8:	f380 8811 	msr	BASEPRI, r0
 8003acc:	bc09      	pop	{r0, r3}
 8003ace:	6819      	ldr	r1, [r3, #0]
 8003ad0:	6808      	ldr	r0, [r1, #0]
 8003ad2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ad6:	f01e 0f10 	tst.w	lr, #16
 8003ada:	bf08      	it	eq
 8003adc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003ae0:	f380 8809 	msr	PSP, r0
 8003ae4:	f3bf 8f6f 	isb	sy
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	f3af 8000 	nop.w

08003af0 <pxCurrentTCBConst>:
 8003af0:	20001240 	.word	0x20001240
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003af4:	bf00      	nop
 8003af6:	bf00      	nop

08003af8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
	__asm volatile
 8003afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b02:	f383 8811 	msr	BASEPRI, r3
 8003b06:	f3bf 8f6f 	isb	sy
 8003b0a:	f3bf 8f4f 	dsb	sy
 8003b0e:	607b      	str	r3, [r7, #4]
}
 8003b10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003b12:	f7fe fdab 	bl	800266c <xTaskIncrementTick>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d003      	beq.n	8003b24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003b1c:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <xPortSysTickHandler+0x40>)
 8003b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b22:	601a      	str	r2, [r3, #0]
 8003b24:	2300      	movs	r3, #0
 8003b26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	f383 8811 	msr	BASEPRI, r3
}
 8003b2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003b30:	bf00      	nop
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	e000ed04 	.word	0xe000ed04

08003b3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003b40:	4b0b      	ldr	r3, [pc, #44]	; (8003b70 <vPortSetupTimerInterrupt+0x34>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003b46:	4b0b      	ldr	r3, [pc, #44]	; (8003b74 <vPortSetupTimerInterrupt+0x38>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003b4c:	4b0a      	ldr	r3, [pc, #40]	; (8003b78 <vPortSetupTimerInterrupt+0x3c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a0a      	ldr	r2, [pc, #40]	; (8003b7c <vPortSetupTimerInterrupt+0x40>)
 8003b52:	fba2 2303 	umull	r2, r3, r2, r3
 8003b56:	099b      	lsrs	r3, r3, #6
 8003b58:	4a09      	ldr	r2, [pc, #36]	; (8003b80 <vPortSetupTimerInterrupt+0x44>)
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003b5e:	4b04      	ldr	r3, [pc, #16]	; (8003b70 <vPortSetupTimerInterrupt+0x34>)
 8003b60:	2207      	movs	r2, #7
 8003b62:	601a      	str	r2, [r3, #0]
}
 8003b64:	bf00      	nop
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	e000e010 	.word	0xe000e010
 8003b74:	e000e018 	.word	0xe000e018
 8003b78:	200000fc 	.word	0x200000fc
 8003b7c:	10624dd3 	.word	0x10624dd3
 8003b80:	e000e014 	.word	0xe000e014

08003b84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003b84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003b94 <vPortEnableVFP+0x10>
 8003b88:	6801      	ldr	r1, [r0, #0]
 8003b8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003b8e:	6001      	str	r1, [r0, #0]
 8003b90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003b92:	bf00      	nop
 8003b94:	e000ed88 	.word	0xe000ed88

08003b98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003b9e:	f3ef 8305 	mrs	r3, IPSR
 8003ba2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2b0f      	cmp	r3, #15
 8003ba8:	d914      	bls.n	8003bd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003baa:	4a17      	ldr	r2, [pc, #92]	; (8003c08 <vPortValidateInterruptPriority+0x70>)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4413      	add	r3, r2
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003bb4:	4b15      	ldr	r3, [pc, #84]	; (8003c0c <vPortValidateInterruptPriority+0x74>)
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	7afa      	ldrb	r2, [r7, #11]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d20a      	bcs.n	8003bd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc2:	f383 8811 	msr	BASEPRI, r3
 8003bc6:	f3bf 8f6f 	isb	sy
 8003bca:	f3bf 8f4f 	dsb	sy
 8003bce:	607b      	str	r3, [r7, #4]
}
 8003bd0:	bf00      	nop
 8003bd2:	e7fe      	b.n	8003bd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003bd4:	4b0e      	ldr	r3, [pc, #56]	; (8003c10 <vPortValidateInterruptPriority+0x78>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003bdc:	4b0d      	ldr	r3, [pc, #52]	; (8003c14 <vPortValidateInterruptPriority+0x7c>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d90a      	bls.n	8003bfa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8003be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be8:	f383 8811 	msr	BASEPRI, r3
 8003bec:	f3bf 8f6f 	isb	sy
 8003bf0:	f3bf 8f4f 	dsb	sy
 8003bf4:	603b      	str	r3, [r7, #0]
}
 8003bf6:	bf00      	nop
 8003bf8:	e7fe      	b.n	8003bf8 <vPortValidateInterruptPriority+0x60>
	}
 8003bfa:	bf00      	nop
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	e000e3f0 	.word	0xe000e3f0
 8003c0c:	2000186c 	.word	0x2000186c
 8003c10:	e000ed0c 	.word	0xe000ed0c
 8003c14:	20001870 	.word	0x20001870

08003c18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b08a      	sub	sp, #40	; 0x28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003c20:	2300      	movs	r3, #0
 8003c22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003c24:	f7fe fc54 	bl	80024d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003c28:	4b5b      	ldr	r3, [pc, #364]	; (8003d98 <pvPortMalloc+0x180>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003c30:	f000 f920 	bl	8003e74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003c34:	4b59      	ldr	r3, [pc, #356]	; (8003d9c <pvPortMalloc+0x184>)
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f040 8093 	bne.w	8003d68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d01d      	beq.n	8003c84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003c48:	2208      	movs	r2, #8
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d014      	beq.n	8003c84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f023 0307 	bic.w	r3, r3, #7
 8003c60:	3308      	adds	r3, #8
 8003c62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f003 0307 	and.w	r3, r3, #7
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00a      	beq.n	8003c84 <pvPortMalloc+0x6c>
	__asm volatile
 8003c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c72:	f383 8811 	msr	BASEPRI, r3
 8003c76:	f3bf 8f6f 	isb	sy
 8003c7a:	f3bf 8f4f 	dsb	sy
 8003c7e:	617b      	str	r3, [r7, #20]
}
 8003c80:	bf00      	nop
 8003c82:	e7fe      	b.n	8003c82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d06e      	beq.n	8003d68 <pvPortMalloc+0x150>
 8003c8a:	4b45      	ldr	r3, [pc, #276]	; (8003da0 <pvPortMalloc+0x188>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d869      	bhi.n	8003d68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003c94:	4b43      	ldr	r3, [pc, #268]	; (8003da4 <pvPortMalloc+0x18c>)
 8003c96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003c98:	4b42      	ldr	r3, [pc, #264]	; (8003da4 <pvPortMalloc+0x18c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c9e:	e004      	b.n	8003caa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d903      	bls.n	8003cbc <pvPortMalloc+0xa4>
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1f1      	bne.n	8003ca0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003cbc:	4b36      	ldr	r3, [pc, #216]	; (8003d98 <pvPortMalloc+0x180>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d050      	beq.n	8003d68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003cc6:	6a3b      	ldr	r3, [r7, #32]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2208      	movs	r2, #8
 8003ccc:	4413      	add	r3, r2
 8003cce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	6a3b      	ldr	r3, [r7, #32]
 8003cd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	685a      	ldr	r2, [r3, #4]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	1ad2      	subs	r2, r2, r3
 8003ce0:	2308      	movs	r3, #8
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d91f      	bls.n	8003d28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4413      	add	r3, r2
 8003cee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	f003 0307 	and.w	r3, r3, #7
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00a      	beq.n	8003d10 <pvPortMalloc+0xf8>
	__asm volatile
 8003cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfe:	f383 8811 	msr	BASEPRI, r3
 8003d02:	f3bf 8f6f 	isb	sy
 8003d06:	f3bf 8f4f 	dsb	sy
 8003d0a:	613b      	str	r3, [r7, #16]
}
 8003d0c:	bf00      	nop
 8003d0e:	e7fe      	b.n	8003d0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	1ad2      	subs	r2, r2, r3
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003d22:	69b8      	ldr	r0, [r7, #24]
 8003d24:	f000 f908 	bl	8003f38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003d28:	4b1d      	ldr	r3, [pc, #116]	; (8003da0 <pvPortMalloc+0x188>)
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	4a1b      	ldr	r2, [pc, #108]	; (8003da0 <pvPortMalloc+0x188>)
 8003d34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003d36:	4b1a      	ldr	r3, [pc, #104]	; (8003da0 <pvPortMalloc+0x188>)
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	4b1b      	ldr	r3, [pc, #108]	; (8003da8 <pvPortMalloc+0x190>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d203      	bcs.n	8003d4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003d42:	4b17      	ldr	r3, [pc, #92]	; (8003da0 <pvPortMalloc+0x188>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a18      	ldr	r2, [pc, #96]	; (8003da8 <pvPortMalloc+0x190>)
 8003d48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	4b13      	ldr	r3, [pc, #76]	; (8003d9c <pvPortMalloc+0x184>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	431a      	orrs	r2, r3
 8003d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003d5e:	4b13      	ldr	r3, [pc, #76]	; (8003dac <pvPortMalloc+0x194>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	3301      	adds	r3, #1
 8003d64:	4a11      	ldr	r2, [pc, #68]	; (8003dac <pvPortMalloc+0x194>)
 8003d66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003d68:	f7fe fbc0 	bl	80024ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	f003 0307 	and.w	r3, r3, #7
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00a      	beq.n	8003d8c <pvPortMalloc+0x174>
	__asm volatile
 8003d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7a:	f383 8811 	msr	BASEPRI, r3
 8003d7e:	f3bf 8f6f 	isb	sy
 8003d82:	f3bf 8f4f 	dsb	sy
 8003d86:	60fb      	str	r3, [r7, #12]
}
 8003d88:	bf00      	nop
 8003d8a:	e7fe      	b.n	8003d8a <pvPortMalloc+0x172>
	return pvReturn;
 8003d8c:	69fb      	ldr	r3, [r7, #28]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3728      	adds	r7, #40	; 0x28
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	20002434 	.word	0x20002434
 8003d9c:	20002448 	.word	0x20002448
 8003da0:	20002438 	.word	0x20002438
 8003da4:	2000242c 	.word	0x2000242c
 8003da8:	2000243c 	.word	0x2000243c
 8003dac:	20002440 	.word	0x20002440

08003db0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d04d      	beq.n	8003e5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003dc2:	2308      	movs	r3, #8
 8003dc4:	425b      	negs	r3, r3
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	4413      	add	r3, r2
 8003dca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	4b24      	ldr	r3, [pc, #144]	; (8003e68 <vPortFree+0xb8>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10a      	bne.n	8003df4 <vPortFree+0x44>
	__asm volatile
 8003dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de2:	f383 8811 	msr	BASEPRI, r3
 8003de6:	f3bf 8f6f 	isb	sy
 8003dea:	f3bf 8f4f 	dsb	sy
 8003dee:	60fb      	str	r3, [r7, #12]
}
 8003df0:	bf00      	nop
 8003df2:	e7fe      	b.n	8003df2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00a      	beq.n	8003e12 <vPortFree+0x62>
	__asm volatile
 8003dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e00:	f383 8811 	msr	BASEPRI, r3
 8003e04:	f3bf 8f6f 	isb	sy
 8003e08:	f3bf 8f4f 	dsb	sy
 8003e0c:	60bb      	str	r3, [r7, #8]
}
 8003e0e:	bf00      	nop
 8003e10:	e7fe      	b.n	8003e10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	4b14      	ldr	r3, [pc, #80]	; (8003e68 <vPortFree+0xb8>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d01e      	beq.n	8003e5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d11a      	bne.n	8003e5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	4b0e      	ldr	r3, [pc, #56]	; (8003e68 <vPortFree+0xb8>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	43db      	mvns	r3, r3
 8003e32:	401a      	ands	r2, r3
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003e38:	f7fe fb4a 	bl	80024d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	4b0a      	ldr	r3, [pc, #40]	; (8003e6c <vPortFree+0xbc>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4413      	add	r3, r2
 8003e46:	4a09      	ldr	r2, [pc, #36]	; (8003e6c <vPortFree+0xbc>)
 8003e48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003e4a:	6938      	ldr	r0, [r7, #16]
 8003e4c:	f000 f874 	bl	8003f38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003e50:	4b07      	ldr	r3, [pc, #28]	; (8003e70 <vPortFree+0xc0>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	3301      	adds	r3, #1
 8003e56:	4a06      	ldr	r2, [pc, #24]	; (8003e70 <vPortFree+0xc0>)
 8003e58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003e5a:	f7fe fb47 	bl	80024ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003e5e:	bf00      	nop
 8003e60:	3718      	adds	r7, #24
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	20002448 	.word	0x20002448
 8003e6c:	20002438 	.word	0x20002438
 8003e70:	20002444 	.word	0x20002444

08003e74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003e7a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003e7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003e80:	4b27      	ldr	r3, [pc, #156]	; (8003f20 <prvHeapInit+0xac>)
 8003e82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f003 0307 	and.w	r3, r3, #7
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00c      	beq.n	8003ea8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	3307      	adds	r3, #7
 8003e92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f023 0307 	bic.w	r3, r3, #7
 8003e9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003e9c:	68ba      	ldr	r2, [r7, #8]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	4a1f      	ldr	r2, [pc, #124]	; (8003f20 <prvHeapInit+0xac>)
 8003ea4:	4413      	add	r3, r2
 8003ea6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003eac:	4a1d      	ldr	r2, [pc, #116]	; (8003f24 <prvHeapInit+0xb0>)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003eb2:	4b1c      	ldr	r3, [pc, #112]	; (8003f24 <prvHeapInit+0xb0>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003ec0:	2208      	movs	r2, #8
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	1a9b      	subs	r3, r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f023 0307 	bic.w	r3, r3, #7
 8003ece:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4a15      	ldr	r2, [pc, #84]	; (8003f28 <prvHeapInit+0xb4>)
 8003ed4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003ed6:	4b14      	ldr	r3, [pc, #80]	; (8003f28 <prvHeapInit+0xb4>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2200      	movs	r2, #0
 8003edc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003ede:	4b12      	ldr	r3, [pc, #72]	; (8003f28 <prvHeapInit+0xb4>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	1ad2      	subs	r2, r2, r3
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003ef4:	4b0c      	ldr	r3, [pc, #48]	; (8003f28 <prvHeapInit+0xb4>)
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	4a0a      	ldr	r2, [pc, #40]	; (8003f2c <prvHeapInit+0xb8>)
 8003f02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	4a09      	ldr	r2, [pc, #36]	; (8003f30 <prvHeapInit+0xbc>)
 8003f0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003f0c:	4b09      	ldr	r3, [pc, #36]	; (8003f34 <prvHeapInit+0xc0>)
 8003f0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003f12:	601a      	str	r2, [r3, #0]
}
 8003f14:	bf00      	nop
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr
 8003f20:	20001874 	.word	0x20001874
 8003f24:	2000242c 	.word	0x2000242c
 8003f28:	20002434 	.word	0x20002434
 8003f2c:	2000243c 	.word	0x2000243c
 8003f30:	20002438 	.word	0x20002438
 8003f34:	20002448 	.word	0x20002448

08003f38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003f40:	4b28      	ldr	r3, [pc, #160]	; (8003fe4 <prvInsertBlockIntoFreeList+0xac>)
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	e002      	b.n	8003f4c <prvInsertBlockIntoFreeList+0x14>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	60fb      	str	r3, [r7, #12]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d8f7      	bhi.n	8003f46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	4413      	add	r3, r2
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d108      	bne.n	8003f7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	441a      	add	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	441a      	add	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d118      	bne.n	8003fc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	4b15      	ldr	r3, [pc, #84]	; (8003fe8 <prvInsertBlockIntoFreeList+0xb0>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d00d      	beq.n	8003fb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	441a      	add	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	e008      	b.n	8003fc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003fb6:	4b0c      	ldr	r3, [pc, #48]	; (8003fe8 <prvInsertBlockIntoFreeList+0xb0>)
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	e003      	b.n	8003fc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d002      	beq.n	8003fd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fd6:	bf00      	nop
 8003fd8:	3714      	adds	r7, #20
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	2000242c 	.word	0x2000242c
 8003fe8:	20002434 	.word	0x20002434

08003fec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set In terrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ff6:	2003      	movs	r0, #3
 8003ff8:	f000 f9b2 	bl	8004360 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ffc:	2000      	movs	r0, #0
 8003ffe:	f000 f80d 	bl	800401c <HAL_InitTick>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d002      	beq.n	800400e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	71fb      	strb	r3, [r7, #7]
 800400c:	e001      	b.n	8004012 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800400e:	f005 febd 	bl	8009d8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004012:	79fb      	ldrb	r3, [r7, #7]
}
 8004014:	4618      	mov	r0, r3
 8004016:	3708      	adds	r7, #8
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004024:	2300      	movs	r3, #0
 8004026:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004028:	4b17      	ldr	r3, [pc, #92]	; (8004088 <HAL_InitTick+0x6c>)
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d023      	beq.n	8004078 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004030:	4b16      	ldr	r3, [pc, #88]	; (800408c <HAL_InitTick+0x70>)
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	4b14      	ldr	r3, [pc, #80]	; (8004088 <HAL_InitTick+0x6c>)
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	4619      	mov	r1, r3
 800403a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800403e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004042:	fbb2 f3f3 	udiv	r3, r2, r3
 8004046:	4618      	mov	r0, r3
 8004048:	f000 f9cd 	bl	80043e6 <HAL_SYSTICK_Config>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10f      	bne.n	8004072 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2b0f      	cmp	r3, #15
 8004056:	d809      	bhi.n	800406c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004058:	2200      	movs	r2, #0
 800405a:	6879      	ldr	r1, [r7, #4]
 800405c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004060:	f000 f989 	bl	8004376 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004064:	4a0a      	ldr	r2, [pc, #40]	; (8004090 <HAL_InitTick+0x74>)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6013      	str	r3, [r2, #0]
 800406a:	e007      	b.n	800407c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	73fb      	strb	r3, [r7, #15]
 8004070:	e004      	b.n	800407c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	73fb      	strb	r3, [r7, #15]
 8004076:	e001      	b.n	800407c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800407c:	7bfb      	ldrb	r3, [r7, #15]
}
 800407e:	4618      	mov	r0, r3
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	20000090 	.word	0x20000090
 800408c:	200000fc 	.word	0x200000fc
 8004090:	2000008c 	.word	0x2000008c

08004094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
    //return xTaskGetTickCount();
    return uwTick;
 8004098:	4b03      	ldr	r3, [pc, #12]	; (80040a8 <HAL_GetTick+0x14>)
 800409a:	681b      	ldr	r3, [r3, #0]
}
 800409c:	4618      	mov	r0, r3
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	2000244c 	.word	0x2000244c

080040ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040b4:	f7ff ffee 	bl	8004094 <HAL_GetTick>
 80040b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040c4:	d005      	beq.n	80040d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80040c6:	4b0a      	ldr	r3, [pc, #40]	; (80040f0 <HAL_Delay+0x44>)
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	461a      	mov	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	4413      	add	r3, r2
 80040d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80040d2:	bf00      	nop
 80040d4:	f7ff ffde 	bl	8004094 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d8f7      	bhi.n	80040d4 <HAL_Delay+0x28>
  {
  }
}
 80040e4:	bf00      	nop
 80040e6:	bf00      	nop
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	20000090 	.word	0x20000090

080040f4 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 80040f8:	4b03      	ldr	r3, [pc, #12]	; (8004108 <HAL_GetUIDw0+0x14>)
 80040fa:	681b      	ldr	r3, [r3, #0]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	1fff7590 	.word	0x1fff7590

0800410c <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8004110:	4b03      	ldr	r3, [pc, #12]	; (8004120 <HAL_GetUIDw1+0x14>)
 8004112:	681b      	ldr	r3, [r3, #0]
}
 8004114:	4618      	mov	r0, r3
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	1fff7594 	.word	0x1fff7594

08004124 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8004128:	4b03      	ldr	r3, [pc, #12]	; (8004138 <HAL_GetUIDw2+0x14>)
 800412a:	681b      	ldr	r3, [r3, #0]
}
 800412c:	4618      	mov	r0, r3
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	1fff7598 	.word	0x1fff7598

0800413c <__NVIC_SetPriorityGrouping>:
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800414c:	4b0c      	ldr	r3, [pc, #48]	; (8004180 <__NVIC_SetPriorityGrouping+0x44>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004158:	4013      	ands	r3, r2
 800415a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004164:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800416c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800416e:	4a04      	ldr	r2, [pc, #16]	; (8004180 <__NVIC_SetPriorityGrouping+0x44>)
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	60d3      	str	r3, [r2, #12]
}
 8004174:	bf00      	nop
 8004176:	3714      	adds	r7, #20
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr
 8004180:	e000ed00 	.word	0xe000ed00

08004184 <__NVIC_GetPriorityGrouping>:
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004188:	4b04      	ldr	r3, [pc, #16]	; (800419c <__NVIC_GetPriorityGrouping+0x18>)
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	0a1b      	lsrs	r3, r3, #8
 800418e:	f003 0307 	and.w	r3, r3, #7
}
 8004192:	4618      	mov	r0, r3
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	e000ed00 	.word	0xe000ed00

080041a0 <__NVIC_EnableIRQ>:
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	4603      	mov	r3, r0
 80041a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	db0b      	blt.n	80041ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041b2:	79fb      	ldrb	r3, [r7, #7]
 80041b4:	f003 021f 	and.w	r2, r3, #31
 80041b8:	4907      	ldr	r1, [pc, #28]	; (80041d8 <__NVIC_EnableIRQ+0x38>)
 80041ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041be:	095b      	lsrs	r3, r3, #5
 80041c0:	2001      	movs	r0, #1
 80041c2:	fa00 f202 	lsl.w	r2, r0, r2
 80041c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	e000e100 	.word	0xe000e100

080041dc <__NVIC_DisableIRQ>:
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	4603      	mov	r3, r0
 80041e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	db12      	blt.n	8004214 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041ee:	79fb      	ldrb	r3, [r7, #7]
 80041f0:	f003 021f 	and.w	r2, r3, #31
 80041f4:	490a      	ldr	r1, [pc, #40]	; (8004220 <__NVIC_DisableIRQ+0x44>)
 80041f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041fa:	095b      	lsrs	r3, r3, #5
 80041fc:	2001      	movs	r0, #1
 80041fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004202:	3320      	adds	r3, #32
 8004204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004208:	f3bf 8f4f 	dsb	sy
}
 800420c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800420e:	f3bf 8f6f 	isb	sy
}
 8004212:	bf00      	nop
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	e000e100 	.word	0xe000e100

08004224 <__NVIC_ClearPendingIRQ>:
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	4603      	mov	r3, r0
 800422c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800422e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004232:	2b00      	cmp	r3, #0
 8004234:	db0c      	blt.n	8004250 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004236:	79fb      	ldrb	r3, [r7, #7]
 8004238:	f003 021f 	and.w	r2, r3, #31
 800423c:	4907      	ldr	r1, [pc, #28]	; (800425c <__NVIC_ClearPendingIRQ+0x38>)
 800423e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004242:	095b      	lsrs	r3, r3, #5
 8004244:	2001      	movs	r0, #1
 8004246:	fa00 f202 	lsl.w	r2, r0, r2
 800424a:	3360      	adds	r3, #96	; 0x60
 800424c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	e000e100 	.word	0xe000e100

08004260 <__NVIC_SetPriority>:
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	4603      	mov	r3, r0
 8004268:	6039      	str	r1, [r7, #0]
 800426a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800426c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004270:	2b00      	cmp	r3, #0
 8004272:	db0a      	blt.n	800428a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	b2da      	uxtb	r2, r3
 8004278:	490c      	ldr	r1, [pc, #48]	; (80042ac <__NVIC_SetPriority+0x4c>)
 800427a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800427e:	0112      	lsls	r2, r2, #4
 8004280:	b2d2      	uxtb	r2, r2
 8004282:	440b      	add	r3, r1
 8004284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004288:	e00a      	b.n	80042a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	b2da      	uxtb	r2, r3
 800428e:	4908      	ldr	r1, [pc, #32]	; (80042b0 <__NVIC_SetPriority+0x50>)
 8004290:	79fb      	ldrb	r3, [r7, #7]
 8004292:	f003 030f 	and.w	r3, r3, #15
 8004296:	3b04      	subs	r3, #4
 8004298:	0112      	lsls	r2, r2, #4
 800429a:	b2d2      	uxtb	r2, r2
 800429c:	440b      	add	r3, r1
 800429e:	761a      	strb	r2, [r3, #24]
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	e000e100 	.word	0xe000e100
 80042b0:	e000ed00 	.word	0xe000ed00

080042b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b089      	sub	sp, #36	; 0x24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f003 0307 	and.w	r3, r3, #7
 80042c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	f1c3 0307 	rsb	r3, r3, #7
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	bf28      	it	cs
 80042d2:	2304      	movcs	r3, #4
 80042d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	3304      	adds	r3, #4
 80042da:	2b06      	cmp	r3, #6
 80042dc:	d902      	bls.n	80042e4 <NVIC_EncodePriority+0x30>
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	3b03      	subs	r3, #3
 80042e2:	e000      	b.n	80042e6 <NVIC_EncodePriority+0x32>
 80042e4:	2300      	movs	r3, #0
 80042e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	fa02 f303 	lsl.w	r3, r2, r3
 80042f2:	43da      	mvns	r2, r3
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	401a      	ands	r2, r3
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	fa01 f303 	lsl.w	r3, r1, r3
 8004306:	43d9      	mvns	r1, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800430c:	4313      	orrs	r3, r2
         );
}
 800430e:	4618      	mov	r0, r3
 8004310:	3724      	adds	r7, #36	; 0x24
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
	...

0800431c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3b01      	subs	r3, #1
 8004328:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800432c:	d301      	bcc.n	8004332 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800432e:	2301      	movs	r3, #1
 8004330:	e00f      	b.n	8004352 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004332:	4a0a      	ldr	r2, [pc, #40]	; (800435c <SysTick_Config+0x40>)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3b01      	subs	r3, #1
 8004338:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800433a:	210f      	movs	r1, #15
 800433c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004340:	f7ff ff8e 	bl	8004260 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004344:	4b05      	ldr	r3, [pc, #20]	; (800435c <SysTick_Config+0x40>)
 8004346:	2200      	movs	r2, #0
 8004348:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800434a:	4b04      	ldr	r3, [pc, #16]	; (800435c <SysTick_Config+0x40>)
 800434c:	2207      	movs	r2, #7
 800434e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	e000e010 	.word	0xe000e010

08004360 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f7ff fee7 	bl	800413c <__NVIC_SetPriorityGrouping>
}
 800436e:	bf00      	nop
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b086      	sub	sp, #24
 800437a:	af00      	add	r7, sp, #0
 800437c:	4603      	mov	r3, r0
 800437e:	60b9      	str	r1, [r7, #8]
 8004380:	607a      	str	r2, [r7, #4]
 8004382:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004384:	2300      	movs	r3, #0
 8004386:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004388:	f7ff fefc 	bl	8004184 <__NVIC_GetPriorityGrouping>
 800438c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	68b9      	ldr	r1, [r7, #8]
 8004392:	6978      	ldr	r0, [r7, #20]
 8004394:	f7ff ff8e 	bl	80042b4 <NVIC_EncodePriority>
 8004398:	4602      	mov	r2, r0
 800439a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800439e:	4611      	mov	r1, r2
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7ff ff5d 	bl	8004260 <__NVIC_SetPriority>
}
 80043a6:	bf00      	nop
 80043a8:	3718      	adds	r7, #24
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b082      	sub	sp, #8
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	4603      	mov	r3, r0
 80043b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043bc:	4618      	mov	r0, r3
 80043be:	f7ff feef 	bl	80041a0 <__NVIC_EnableIRQ>
}
 80043c2:	bf00      	nop
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b082      	sub	sp, #8
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	4603      	mov	r3, r0
 80043d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80043d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043d8:	4618      	mov	r0, r3
 80043da:	f7ff feff 	bl	80041dc <__NVIC_DisableIRQ>
}
 80043de:	bf00      	nop
 80043e0:	3708      	adds	r7, #8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b082      	sub	sp, #8
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7ff ff94 	bl	800431c <SysTick_Config>
 80043f4:	4603      	mov	r3, r0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b082      	sub	sp, #8
 8004402:	af00      	add	r7, sp, #0
 8004404:	4603      	mov	r3, r0
 8004406:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800440c:	4618      	mov	r0, r3
 800440e:	f7ff ff09 	bl	8004224 <__NVIC_ClearPendingIRQ>
}
 8004412:	bf00      	nop
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
	...

0800441c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e098      	b.n	8004560 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	461a      	mov	r2, r3
 8004434:	4b4d      	ldr	r3, [pc, #308]	; (800456c <HAL_DMA_Init+0x150>)
 8004436:	429a      	cmp	r2, r3
 8004438:	d80f      	bhi.n	800445a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	461a      	mov	r2, r3
 8004440:	4b4b      	ldr	r3, [pc, #300]	; (8004570 <HAL_DMA_Init+0x154>)
 8004442:	4413      	add	r3, r2
 8004444:	4a4b      	ldr	r2, [pc, #300]	; (8004574 <HAL_DMA_Init+0x158>)
 8004446:	fba2 2303 	umull	r2, r3, r2, r3
 800444a:	091b      	lsrs	r3, r3, #4
 800444c:	009a      	lsls	r2, r3, #2
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a48      	ldr	r2, [pc, #288]	; (8004578 <HAL_DMA_Init+0x15c>)
 8004456:	641a      	str	r2, [r3, #64]	; 0x40
 8004458:	e00e      	b.n	8004478 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	461a      	mov	r2, r3
 8004460:	4b46      	ldr	r3, [pc, #280]	; (800457c <HAL_DMA_Init+0x160>)
 8004462:	4413      	add	r3, r2
 8004464:	4a43      	ldr	r2, [pc, #268]	; (8004574 <HAL_DMA_Init+0x158>)
 8004466:	fba2 2303 	umull	r2, r3, r2, r3
 800446a:	091b      	lsrs	r3, r3, #4
 800446c:	009a      	lsls	r2, r3, #2
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a42      	ldr	r2, [pc, #264]	; (8004580 <HAL_DMA_Init+0x164>)
 8004476:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800448e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004492:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800449c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	4313      	orrs	r3, r2
 80044c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044d2:	d039      	beq.n	8004548 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d8:	4a27      	ldr	r2, [pc, #156]	; (8004578 <HAL_DMA_Init+0x15c>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d11a      	bne.n	8004514 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80044de:	4b29      	ldr	r3, [pc, #164]	; (8004584 <HAL_DMA_Init+0x168>)
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e6:	f003 031c 	and.w	r3, r3, #28
 80044ea:	210f      	movs	r1, #15
 80044ec:	fa01 f303 	lsl.w	r3, r1, r3
 80044f0:	43db      	mvns	r3, r3
 80044f2:	4924      	ldr	r1, [pc, #144]	; (8004584 <HAL_DMA_Init+0x168>)
 80044f4:	4013      	ands	r3, r2
 80044f6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80044f8:	4b22      	ldr	r3, [pc, #136]	; (8004584 <HAL_DMA_Init+0x168>)
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6859      	ldr	r1, [r3, #4]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004504:	f003 031c 	and.w	r3, r3, #28
 8004508:	fa01 f303 	lsl.w	r3, r1, r3
 800450c:	491d      	ldr	r1, [pc, #116]	; (8004584 <HAL_DMA_Init+0x168>)
 800450e:	4313      	orrs	r3, r2
 8004510:	600b      	str	r3, [r1, #0]
 8004512:	e019      	b.n	8004548 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004514:	4b1c      	ldr	r3, [pc, #112]	; (8004588 <HAL_DMA_Init+0x16c>)
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451c:	f003 031c 	and.w	r3, r3, #28
 8004520:	210f      	movs	r1, #15
 8004522:	fa01 f303 	lsl.w	r3, r1, r3
 8004526:	43db      	mvns	r3, r3
 8004528:	4917      	ldr	r1, [pc, #92]	; (8004588 <HAL_DMA_Init+0x16c>)
 800452a:	4013      	ands	r3, r2
 800452c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800452e:	4b16      	ldr	r3, [pc, #88]	; (8004588 <HAL_DMA_Init+0x16c>)
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6859      	ldr	r1, [r3, #4]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453a:	f003 031c 	and.w	r3, r3, #28
 800453e:	fa01 f303 	lsl.w	r3, r1, r3
 8004542:	4911      	ldr	r1, [pc, #68]	; (8004588 <HAL_DMA_Init+0x16c>)
 8004544:	4313      	orrs	r3, r2
 8004546:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3714      	adds	r7, #20
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	40020407 	.word	0x40020407
 8004570:	bffdfff8 	.word	0xbffdfff8
 8004574:	cccccccd 	.word	0xcccccccd
 8004578:	40020000 	.word	0x40020000
 800457c:	bffdfbf8 	.word	0xbffdfbf8
 8004580:	40020400 	.word	0x40020400
 8004584:	400200a8 	.word	0x400200a8
 8004588:	400204a8 	.word	0x400204a8

0800458c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
 8004598:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800459a:	2300      	movs	r3, #0
 800459c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d101      	bne.n	80045ac <HAL_DMA_Start_IT+0x20>
 80045a8:	2302      	movs	r3, #2
 80045aa:	e04b      	b.n	8004644 <HAL_DMA_Start_IT+0xb8>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d13a      	bne.n	8004636 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 0201 	bic.w	r2, r2, #1
 80045dc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	68b9      	ldr	r1, [r7, #8]
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f000 f9a7 	bl	8004938 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d008      	beq.n	8004604 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f042 020e 	orr.w	r2, r2, #14
 8004600:	601a      	str	r2, [r3, #0]
 8004602:	e00f      	b.n	8004624 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 0204 	bic.w	r2, r2, #4
 8004612:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f042 020a 	orr.w	r2, r2, #10
 8004622:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f042 0201 	orr.w	r2, r2, #1
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	e005      	b.n	8004642 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800463e:	2302      	movs	r3, #2
 8004640:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004642:	7dfb      	ldrb	r3, [r7, #23]
}
 8004644:	4618      	mov	r0, r3
 8004646:	3718      	adds	r7, #24
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004654:	2300      	movs	r3, #0
 8004656:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d008      	beq.n	8004676 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2204      	movs	r2, #4
 8004668:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e022      	b.n	80046bc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 020e 	bic.w	r2, r2, #14
 8004684:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 0201 	bic.w	r2, r2, #1
 8004694:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469a:	f003 021c 	and.w	r2, r3, #28
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	2101      	movs	r1, #1
 80046a4:	fa01 f202 	lsl.w	r2, r1, r2
 80046a8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80046ba:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3714      	adds	r7, #20
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046d0:	2300      	movs	r3, #0
 80046d2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d005      	beq.n	80046ec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2204      	movs	r2, #4
 80046e4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	73fb      	strb	r3, [r7, #15]
 80046ea:	e029      	b.n	8004740 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 020e 	bic.w	r2, r2, #14
 80046fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0201 	bic.w	r2, r2, #1
 800470a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004710:	f003 021c 	and.w	r2, r3, #28
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004718:	2101      	movs	r1, #1
 800471a:	fa01 f202 	lsl.w	r2, r1, r2
 800471e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004734:	2b00      	cmp	r3, #0
 8004736:	d003      	beq.n	8004740 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	4798      	blx	r3
    }
  }
  return status;
 8004740:	7bfb      	ldrb	r3, [r7, #15]
}
 8004742:	4618      	mov	r0, r3
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b084      	sub	sp, #16
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004766:	f003 031c 	and.w	r3, r3, #28
 800476a:	2204      	movs	r2, #4
 800476c:	409a      	lsls	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4013      	ands	r3, r2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d026      	beq.n	80047c4 <HAL_DMA_IRQHandler+0x7a>
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	f003 0304 	and.w	r3, r3, #4
 800477c:	2b00      	cmp	r3, #0
 800477e:	d021      	beq.n	80047c4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0320 	and.w	r3, r3, #32
 800478a:	2b00      	cmp	r3, #0
 800478c:	d107      	bne.n	800479e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 0204 	bic.w	r2, r2, #4
 800479c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a2:	f003 021c 	and.w	r2, r3, #28
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047aa:	2104      	movs	r1, #4
 80047ac:	fa01 f202 	lsl.w	r2, r1, r2
 80047b0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d071      	beq.n	800489e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80047c2:	e06c      	b.n	800489e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c8:	f003 031c 	and.w	r3, r3, #28
 80047cc:	2202      	movs	r2, #2
 80047ce:	409a      	lsls	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4013      	ands	r3, r2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d02e      	beq.n	8004836 <HAL_DMA_IRQHandler+0xec>
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d029      	beq.n	8004836 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0320 	and.w	r3, r3, #32
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10b      	bne.n	8004808 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 020a 	bic.w	r2, r2, #10
 80047fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480c:	f003 021c 	and.w	r2, r3, #28
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004814:	2102      	movs	r1, #2
 8004816:	fa01 f202 	lsl.w	r2, r1, r2
 800481a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004828:	2b00      	cmp	r3, #0
 800482a:	d038      	beq.n	800489e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004834:	e033      	b.n	800489e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483a:	f003 031c 	and.w	r3, r3, #28
 800483e:	2208      	movs	r2, #8
 8004840:	409a      	lsls	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	4013      	ands	r3, r2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d02a      	beq.n	80048a0 <HAL_DMA_IRQHandler+0x156>
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	f003 0308 	and.w	r3, r3, #8
 8004850:	2b00      	cmp	r3, #0
 8004852:	d025      	beq.n	80048a0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 020e 	bic.w	r2, r2, #14
 8004862:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004868:	f003 021c 	and.w	r2, r3, #28
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004870:	2101      	movs	r1, #1
 8004872:	fa01 f202 	lsl.w	r2, r1, r2
 8004876:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004892:	2b00      	cmp	r3, #0
 8004894:	d004      	beq.n	80048a0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800489e:	bf00      	nop
 80048a0:	bf00      	nop
}
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 80048a8:	b480      	push	{r7}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	460b      	mov	r3, r1
 80048b2:	607a      	str	r2, [r7, #4]
 80048b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80048b6:	2300      	movs	r3, #0
 80048b8:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d101      	bne.n	80048c8 <HAL_DMA_RegisterCallback+0x20>
 80048c4:	2302      	movs	r3, #2
 80048c6:	e031      	b.n	800492c <HAL_DMA_RegisterCallback+0x84>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d120      	bne.n	800491e <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 80048dc:	7afb      	ldrb	r3, [r7, #11]
 80048de:	2b03      	cmp	r3, #3
 80048e0:	d81a      	bhi.n	8004918 <HAL_DMA_RegisterCallback+0x70>
 80048e2:	a201      	add	r2, pc, #4	; (adr r2, 80048e8 <HAL_DMA_RegisterCallback+0x40>)
 80048e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e8:	080048f9 	.word	0x080048f9
 80048ec:	08004901 	.word	0x08004901
 80048f0:	08004909 	.word	0x08004909
 80048f4:	08004911 	.word	0x08004911
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = pCallback;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	62da      	str	r2, [r3, #44]	; 0x2c
           break;
 80048fe:	e010      	b.n	8004922 <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = pCallback;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	631a      	str	r2, [r3, #48]	; 0x30
           break;
 8004906:	e00c      	b.n	8004922 <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = pCallback;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	635a      	str	r2, [r3, #52]	; 0x34
           break;
 800490e:	e008      	b.n	8004922 <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = pCallback;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 8004916:	e004      	b.n	8004922 <HAL_DMA_RegisterCallback+0x7a>

     default:
           status = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	75fb      	strb	r3, [r7, #23]
           break;
 800491c:	e001      	b.n	8004922 <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800492a:	7dfb      	ldrb	r3, [r7, #23]
}
 800492c:	4618      	mov	r0, r3
 800492e:	371c      	adds	r7, #28
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
 8004944:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494a:	f003 021c 	and.w	r2, r3, #28
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004952:	2101      	movs	r1, #1
 8004954:	fa01 f202 	lsl.w	r2, r1, r2
 8004958:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	2b10      	cmp	r3, #16
 8004968:	d108      	bne.n	800497c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800497a:	e007      	b.n	800498c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	60da      	str	r2, [r3, #12]
}
 800498c:	bf00      	nop
 800498e:	3714      	adds	r7, #20
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004998:	b480      	push	{r7}
 800499a:	b087      	sub	sp, #28
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80049a2:	2300      	movs	r3, #0
 80049a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049a6:	e154      	b.n	8004c52 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	2101      	movs	r1, #1
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	fa01 f303 	lsl.w	r3, r1, r3
 80049b4:	4013      	ands	r3, r2
 80049b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f000 8146 	beq.w	8004c4c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f003 0303 	and.w	r3, r3, #3
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d005      	beq.n	80049d8 <HAL_GPIO_Init+0x40>
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f003 0303 	and.w	r3, r3, #3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d130      	bne.n	8004a3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	005b      	lsls	r3, r3, #1
 80049e2:	2203      	movs	r2, #3
 80049e4:	fa02 f303 	lsl.w	r3, r2, r3
 80049e8:	43db      	mvns	r3, r3
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	4013      	ands	r3, r2
 80049ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	68da      	ldr	r2, [r3, #12]
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	005b      	lsls	r3, r3, #1
 80049f8:	fa02 f303 	lsl.w	r3, r2, r3
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a0e:	2201      	movs	r2, #1
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	fa02 f303 	lsl.w	r3, r2, r3
 8004a16:	43db      	mvns	r3, r3
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	091b      	lsrs	r3, r3, #4
 8004a24:	f003 0201 	and.w	r2, r3, #1
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f003 0303 	and.w	r3, r3, #3
 8004a42:	2b03      	cmp	r3, #3
 8004a44:	d017      	beq.n	8004a76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	2203      	movs	r2, #3
 8004a52:	fa02 f303 	lsl.w	r3, r2, r3
 8004a56:	43db      	mvns	r3, r3
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	005b      	lsls	r3, r3, #1
 8004a66:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f003 0303 	and.w	r3, r3, #3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d123      	bne.n	8004aca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	08da      	lsrs	r2, r3, #3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	3208      	adds	r2, #8
 8004a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	f003 0307 	and.w	r3, r3, #7
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	220f      	movs	r2, #15
 8004a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9e:	43db      	mvns	r3, r3
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	691a      	ldr	r2, [r3, #16]
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f003 0307 	and.w	r3, r3, #7
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	08da      	lsrs	r2, r3, #3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	3208      	adds	r2, #8
 8004ac4:	6939      	ldr	r1, [r7, #16]
 8004ac6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	2203      	movs	r2, #3
 8004ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ada:	43db      	mvns	r3, r3
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	4013      	ands	r3, r2
 8004ae0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f003 0203 	and.w	r2, r3, #3
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	005b      	lsls	r3, r3, #1
 8004aee:	fa02 f303 	lsl.w	r3, r2, r3
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 80a0 	beq.w	8004c4c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b0c:	4b58      	ldr	r3, [pc, #352]	; (8004c70 <HAL_GPIO_Init+0x2d8>)
 8004b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b10:	4a57      	ldr	r2, [pc, #348]	; (8004c70 <HAL_GPIO_Init+0x2d8>)
 8004b12:	f043 0301 	orr.w	r3, r3, #1
 8004b16:	6613      	str	r3, [r2, #96]	; 0x60
 8004b18:	4b55      	ldr	r3, [pc, #340]	; (8004c70 <HAL_GPIO_Init+0x2d8>)
 8004b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b1c:	f003 0301 	and.w	r3, r3, #1
 8004b20:	60bb      	str	r3, [r7, #8]
 8004b22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004b24:	4a53      	ldr	r2, [pc, #332]	; (8004c74 <HAL_GPIO_Init+0x2dc>)
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	089b      	lsrs	r3, r3, #2
 8004b2a:	3302      	adds	r3, #2
 8004b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	f003 0303 	and.w	r3, r3, #3
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	220f      	movs	r2, #15
 8004b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b40:	43db      	mvns	r3, r3
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	4013      	ands	r3, r2
 8004b46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004b4e:	d019      	beq.n	8004b84 <HAL_GPIO_Init+0x1ec>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a49      	ldr	r2, [pc, #292]	; (8004c78 <HAL_GPIO_Init+0x2e0>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d013      	beq.n	8004b80 <HAL_GPIO_Init+0x1e8>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a48      	ldr	r2, [pc, #288]	; (8004c7c <HAL_GPIO_Init+0x2e4>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d00d      	beq.n	8004b7c <HAL_GPIO_Init+0x1e4>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a47      	ldr	r2, [pc, #284]	; (8004c80 <HAL_GPIO_Init+0x2e8>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d007      	beq.n	8004b78 <HAL_GPIO_Init+0x1e0>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a46      	ldr	r2, [pc, #280]	; (8004c84 <HAL_GPIO_Init+0x2ec>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d101      	bne.n	8004b74 <HAL_GPIO_Init+0x1dc>
 8004b70:	2304      	movs	r3, #4
 8004b72:	e008      	b.n	8004b86 <HAL_GPIO_Init+0x1ee>
 8004b74:	2307      	movs	r3, #7
 8004b76:	e006      	b.n	8004b86 <HAL_GPIO_Init+0x1ee>
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e004      	b.n	8004b86 <HAL_GPIO_Init+0x1ee>
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	e002      	b.n	8004b86 <HAL_GPIO_Init+0x1ee>
 8004b80:	2301      	movs	r3, #1
 8004b82:	e000      	b.n	8004b86 <HAL_GPIO_Init+0x1ee>
 8004b84:	2300      	movs	r3, #0
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	f002 0203 	and.w	r2, r2, #3
 8004b8c:	0092      	lsls	r2, r2, #2
 8004b8e:	4093      	lsls	r3, r2
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004b96:	4937      	ldr	r1, [pc, #220]	; (8004c74 <HAL_GPIO_Init+0x2dc>)
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	089b      	lsrs	r3, r3, #2
 8004b9c:	3302      	adds	r3, #2
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ba4:	4b38      	ldr	r3, [pc, #224]	; (8004c88 <HAL_GPIO_Init+0x2f0>)
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	43db      	mvns	r3, r3
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d003      	beq.n	8004bc8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004bc8:	4a2f      	ldr	r2, [pc, #188]	; (8004c88 <HAL_GPIO_Init+0x2f0>)
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004bce:	4b2e      	ldr	r3, [pc, #184]	; (8004c88 <HAL_GPIO_Init+0x2f0>)
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	43db      	mvns	r3, r3
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004bf2:	4a25      	ldr	r2, [pc, #148]	; (8004c88 <HAL_GPIO_Init+0x2f0>)
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004bf8:	4b23      	ldr	r3, [pc, #140]	; (8004c88 <HAL_GPIO_Init+0x2f0>)
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	43db      	mvns	r3, r3
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	4013      	ands	r3, r2
 8004c06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d003      	beq.n	8004c1c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004c1c:	4a1a      	ldr	r2, [pc, #104]	; (8004c88 <HAL_GPIO_Init+0x2f0>)
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004c22:	4b19      	ldr	r3, [pc, #100]	; (8004c88 <HAL_GPIO_Init+0x2f0>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	43db      	mvns	r3, r3
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	4013      	ands	r3, r2
 8004c30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004c46:	4a10      	ldr	r2, [pc, #64]	; (8004c88 <HAL_GPIO_Init+0x2f0>)
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	fa22 f303 	lsr.w	r3, r2, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f47f aea3 	bne.w	80049a8 <HAL_GPIO_Init+0x10>
  }
}
 8004c62:	bf00      	nop
 8004c64:	bf00      	nop
 8004c66:	371c      	adds	r7, #28
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	40021000 	.word	0x40021000
 8004c74:	40010000 	.word	0x40010000
 8004c78:	48000400 	.word	0x48000400
 8004c7c:	48000800 	.word	0x48000800
 8004c80:	48000c00 	.word	0x48000c00
 8004c84:	48001000 	.word	0x48001000
 8004c88:	40010400 	.word	0x40010400

08004c8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	460b      	mov	r3, r1
 8004c96:	807b      	strh	r3, [r7, #2]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c9c:	787b      	ldrb	r3, [r7, #1]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d003      	beq.n	8004caa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ca2:	887a      	ldrh	r2, [r7, #2]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ca8:	e002      	b.n	8004cb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004caa:	887a      	ldrh	r2, [r7, #2]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004cc6:	4b08      	ldr	r3, [pc, #32]	; (8004ce8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004cc8:	695a      	ldr	r2, [r3, #20]
 8004cca:	88fb      	ldrh	r3, [r7, #6]
 8004ccc:	4013      	ands	r3, r2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d006      	beq.n	8004ce0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004cd2:	4a05      	ldr	r2, [pc, #20]	; (8004ce8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004cd4:	88fb      	ldrh	r3, [r7, #6]
 8004cd6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004cd8:	88fb      	ldrh	r3, [r7, #6]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f005 fb54 	bl	800a388 <HAL_GPIO_EXTI_Callback>
  }
}
 8004ce0:	bf00      	nop
 8004ce2:	3708      	adds	r7, #8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	40010400 	.word	0x40010400

08004cec <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cf0:	4b05      	ldr	r3, [pc, #20]	; (8004d08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a04      	ldr	r2, [pc, #16]	; (8004d08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cfa:	6013      	str	r3, [r2, #0]
}
 8004cfc:	bf00      	nop
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	40007000 	.word	0x40007000

08004d0c <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8004d14:	4b2b      	ldr	r3, [pc, #172]	; (8004dc4 <HAL_PWR_ConfigPVD+0xb8>)
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f023 020e 	bic.w	r2, r3, #14
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4928      	ldr	r1, [pc, #160]	; (8004dc4 <HAL_PWR_ConfigPVD+0xb8>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8004d26:	4b28      	ldr	r3, [pc, #160]	; (8004dc8 <HAL_PWR_ConfigPVD+0xbc>)
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	4a27      	ldr	r2, [pc, #156]	; (8004dc8 <HAL_PWR_ConfigPVD+0xbc>)
 8004d2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d30:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8004d32:	4b25      	ldr	r3, [pc, #148]	; (8004dc8 <HAL_PWR_ConfigPVD+0xbc>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a24      	ldr	r2, [pc, #144]	; (8004dc8 <HAL_PWR_ConfigPVD+0xbc>)
 8004d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d3c:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8004d3e:	4b22      	ldr	r3, [pc, #136]	; (8004dc8 <HAL_PWR_ConfigPVD+0xbc>)
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	4a21      	ldr	r2, [pc, #132]	; (8004dc8 <HAL_PWR_ConfigPVD+0xbc>)
 8004d44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d48:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8004d4a:	4b1f      	ldr	r3, [pc, #124]	; (8004dc8 <HAL_PWR_ConfigPVD+0xbc>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	4a1e      	ldr	r2, [pc, #120]	; (8004dc8 <HAL_PWR_ConfigPVD+0xbc>)
 8004d50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d54:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d005      	beq.n	8004d6e <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8004d62:	4b19      	ldr	r3, [pc, #100]	; (8004dc8 <HAL_PWR_ConfigPVD+0xbc>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a18      	ldr	r2, [pc, #96]	; (8004dc8 <HAL_PWR_ConfigPVD+0xbc>)
 8004d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d6c:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d005      	beq.n	8004d86 <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8004d7a:	4b13      	ldr	r3, [pc, #76]	; (8004dc8 <HAL_PWR_ConfigPVD+0xbc>)
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	4a12      	ldr	r2, [pc, #72]	; (8004dc8 <HAL_PWR_ConfigPVD+0xbc>)
 8004d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d84:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d005      	beq.n	8004d9e <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8004d92:	4b0d      	ldr	r3, [pc, #52]	; (8004dc8 <HAL_PWR_ConfigPVD+0xbc>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	4a0c      	ldr	r2, [pc, #48]	; (8004dc8 <HAL_PWR_ConfigPVD+0xbc>)
 8004d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d9c:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d005      	beq.n	8004db6 <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8004daa:	4b07      	ldr	r3, [pc, #28]	; (8004dc8 <HAL_PWR_ConfigPVD+0xbc>)
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	4a06      	ldr	r2, [pc, #24]	; (8004dc8 <HAL_PWR_ConfigPVD+0xbc>)
 8004db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004db4:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	40007000 	.word	0x40007000
 8004dc8:	40010400 	.word	0x40010400

08004dcc <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8004dd0:	4b05      	ldr	r3, [pc, #20]	; (8004de8 <HAL_PWR_EnablePVD+0x1c>)
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	4a04      	ldr	r2, [pc, #16]	; (8004de8 <HAL_PWR_EnablePVD+0x1c>)
 8004dd6:	f043 0301 	orr.w	r3, r3, #1
 8004dda:	6053      	str	r3, [r2, #4]
}
 8004ddc:	bf00      	nop
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	40007000 	.word	0x40007000

08004dec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004dec:	b480      	push	{r7}
 8004dee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004df0:	4b04      	ldr	r3, [pc, #16]	; (8004e04 <HAL_PWREx_GetVoltageRange+0x18>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	40007000 	.word	0x40007000

08004e08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e16:	d130      	bne.n	8004e7a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e18:	4b23      	ldr	r3, [pc, #140]	; (8004ea8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e24:	d038      	beq.n	8004e98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e26:	4b20      	ldr	r3, [pc, #128]	; (8004ea8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e2e:	4a1e      	ldr	r2, [pc, #120]	; (8004ea8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e34:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e36:	4b1d      	ldr	r3, [pc, #116]	; (8004eac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2232      	movs	r2, #50	; 0x32
 8004e3c:	fb02 f303 	mul.w	r3, r2, r3
 8004e40:	4a1b      	ldr	r2, [pc, #108]	; (8004eb0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004e42:	fba2 2303 	umull	r2, r3, r2, r3
 8004e46:	0c9b      	lsrs	r3, r3, #18
 8004e48:	3301      	adds	r3, #1
 8004e4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e4c:	e002      	b.n	8004e54 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	3b01      	subs	r3, #1
 8004e52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e54:	4b14      	ldr	r3, [pc, #80]	; (8004ea8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e60:	d102      	bne.n	8004e68 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1f2      	bne.n	8004e4e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e68:	4b0f      	ldr	r3, [pc, #60]	; (8004ea8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e74:	d110      	bne.n	8004e98 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e00f      	b.n	8004e9a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e7a:	4b0b      	ldr	r3, [pc, #44]	; (8004ea8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e86:	d007      	beq.n	8004e98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e88:	4b07      	ldr	r3, [pc, #28]	; (8004ea8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e90:	4a05      	ldr	r2, [pc, #20]	; (8004ea8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e96:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	40007000 	.word	0x40007000
 8004eac:	200000fc 	.word	0x200000fc
 8004eb0:	431bde83 	.word	0x431bde83

08004eb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b088      	sub	sp, #32
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d102      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	f000 bc02 	b.w	80056cc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ec8:	4b96      	ldr	r3, [pc, #600]	; (8005124 <HAL_RCC_OscConfig+0x270>)
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f003 030c 	and.w	r3, r3, #12
 8004ed0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ed2:	4b94      	ldr	r3, [pc, #592]	; (8005124 <HAL_RCC_OscConfig+0x270>)
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	f003 0303 	and.w	r3, r3, #3
 8004eda:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0310 	and.w	r3, r3, #16
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f000 80e4 	beq.w	80050b2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d007      	beq.n	8004f00 <HAL_RCC_OscConfig+0x4c>
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	2b0c      	cmp	r3, #12
 8004ef4:	f040 808b 	bne.w	800500e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	f040 8087 	bne.w	800500e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f00:	4b88      	ldr	r3, [pc, #544]	; (8005124 <HAL_RCC_OscConfig+0x270>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d005      	beq.n	8004f18 <HAL_RCC_OscConfig+0x64>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e3d9      	b.n	80056cc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a1a      	ldr	r2, [r3, #32]
 8004f1c:	4b81      	ldr	r3, [pc, #516]	; (8005124 <HAL_RCC_OscConfig+0x270>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0308 	and.w	r3, r3, #8
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d004      	beq.n	8004f32 <HAL_RCC_OscConfig+0x7e>
 8004f28:	4b7e      	ldr	r3, [pc, #504]	; (8005124 <HAL_RCC_OscConfig+0x270>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f30:	e005      	b.n	8004f3e <HAL_RCC_OscConfig+0x8a>
 8004f32:	4b7c      	ldr	r3, [pc, #496]	; (8005124 <HAL_RCC_OscConfig+0x270>)
 8004f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f38:	091b      	lsrs	r3, r3, #4
 8004f3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d223      	bcs.n	8004f8a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 fd8c 	bl	8005a64 <RCC_SetFlashLatencyFromMSIRange>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d001      	beq.n	8004f56 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e3ba      	b.n	80056cc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f56:	4b73      	ldr	r3, [pc, #460]	; (8005124 <HAL_RCC_OscConfig+0x270>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a72      	ldr	r2, [pc, #456]	; (8005124 <HAL_RCC_OscConfig+0x270>)
 8004f5c:	f043 0308 	orr.w	r3, r3, #8
 8004f60:	6013      	str	r3, [r2, #0]
 8004f62:	4b70      	ldr	r3, [pc, #448]	; (8005124 <HAL_RCC_OscConfig+0x270>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	496d      	ldr	r1, [pc, #436]	; (8005124 <HAL_RCC_OscConfig+0x270>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f74:	4b6b      	ldr	r3, [pc, #428]	; (8005124 <HAL_RCC_OscConfig+0x270>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	69db      	ldr	r3, [r3, #28]
 8004f80:	021b      	lsls	r3, r3, #8
 8004f82:	4968      	ldr	r1, [pc, #416]	; (8005124 <HAL_RCC_OscConfig+0x270>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	604b      	str	r3, [r1, #4]
 8004f88:	e025      	b.n	8004fd6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f8a:	4b66      	ldr	r3, [pc, #408]	; (8005124 <HAL_RCC_OscConfig+0x270>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a65      	ldr	r2, [pc, #404]	; (8005124 <HAL_RCC_OscConfig+0x270>)
 8004f90:	f043 0308 	orr.w	r3, r3, #8
 8004f94:	6013      	str	r3, [r2, #0]
 8004f96:	4b63      	ldr	r3, [pc, #396]	; (8005124 <HAL_RCC_OscConfig+0x270>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	4960      	ldr	r1, [pc, #384]	; (8005124 <HAL_RCC_OscConfig+0x270>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fa8:	4b5e      	ldr	r3, [pc, #376]	; (8005124 <HAL_RCC_OscConfig+0x270>)
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	69db      	ldr	r3, [r3, #28]
 8004fb4:	021b      	lsls	r3, r3, #8
 8004fb6:	495b      	ldr	r1, [pc, #364]	; (8005124 <HAL_RCC_OscConfig+0x270>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d109      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 fd4c 	bl	8005a64 <RCC_SetFlashLatencyFromMSIRange>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d001      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e37a      	b.n	80056cc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004fd6:	f000 fc81 	bl	80058dc <HAL_RCC_GetSysClockFreq>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	4b51      	ldr	r3, [pc, #324]	; (8005124 <HAL_RCC_OscConfig+0x270>)
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	091b      	lsrs	r3, r3, #4
 8004fe2:	f003 030f 	and.w	r3, r3, #15
 8004fe6:	4950      	ldr	r1, [pc, #320]	; (8005128 <HAL_RCC_OscConfig+0x274>)
 8004fe8:	5ccb      	ldrb	r3, [r1, r3]
 8004fea:	f003 031f 	and.w	r3, r3, #31
 8004fee:	fa22 f303 	lsr.w	r3, r2, r3
 8004ff2:	4a4e      	ldr	r2, [pc, #312]	; (800512c <HAL_RCC_OscConfig+0x278>)
 8004ff4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004ff6:	4b4e      	ldr	r3, [pc, #312]	; (8005130 <HAL_RCC_OscConfig+0x27c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7ff f80e 	bl	800401c <HAL_InitTick>
 8005000:	4603      	mov	r3, r0
 8005002:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005004:	7bfb      	ldrb	r3, [r7, #15]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d052      	beq.n	80050b0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800500a:	7bfb      	ldrb	r3, [r7, #15]
 800500c:	e35e      	b.n	80056cc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d032      	beq.n	800507c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005016:	4b43      	ldr	r3, [pc, #268]	; (8005124 <HAL_RCC_OscConfig+0x270>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a42      	ldr	r2, [pc, #264]	; (8005124 <HAL_RCC_OscConfig+0x270>)
 800501c:	f043 0301 	orr.w	r3, r3, #1
 8005020:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005022:	f7ff f837 	bl	8004094 <HAL_GetTick>
 8005026:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005028:	e008      	b.n	800503c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800502a:	f7ff f833 	bl	8004094 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	2b02      	cmp	r3, #2
 8005036:	d901      	bls.n	800503c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e347      	b.n	80056cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800503c:	4b39      	ldr	r3, [pc, #228]	; (8005124 <HAL_RCC_OscConfig+0x270>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0302 	and.w	r3, r3, #2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d0f0      	beq.n	800502a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005048:	4b36      	ldr	r3, [pc, #216]	; (8005124 <HAL_RCC_OscConfig+0x270>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a35      	ldr	r2, [pc, #212]	; (8005124 <HAL_RCC_OscConfig+0x270>)
 800504e:	f043 0308 	orr.w	r3, r3, #8
 8005052:	6013      	str	r3, [r2, #0]
 8005054:	4b33      	ldr	r3, [pc, #204]	; (8005124 <HAL_RCC_OscConfig+0x270>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a1b      	ldr	r3, [r3, #32]
 8005060:	4930      	ldr	r1, [pc, #192]	; (8005124 <HAL_RCC_OscConfig+0x270>)
 8005062:	4313      	orrs	r3, r2
 8005064:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005066:	4b2f      	ldr	r3, [pc, #188]	; (8005124 <HAL_RCC_OscConfig+0x270>)
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	69db      	ldr	r3, [r3, #28]
 8005072:	021b      	lsls	r3, r3, #8
 8005074:	492b      	ldr	r1, [pc, #172]	; (8005124 <HAL_RCC_OscConfig+0x270>)
 8005076:	4313      	orrs	r3, r2
 8005078:	604b      	str	r3, [r1, #4]
 800507a:	e01a      	b.n	80050b2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800507c:	4b29      	ldr	r3, [pc, #164]	; (8005124 <HAL_RCC_OscConfig+0x270>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a28      	ldr	r2, [pc, #160]	; (8005124 <HAL_RCC_OscConfig+0x270>)
 8005082:	f023 0301 	bic.w	r3, r3, #1
 8005086:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005088:	f7ff f804 	bl	8004094 <HAL_GetTick>
 800508c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800508e:	e008      	b.n	80050a2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005090:	f7ff f800 	bl	8004094 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b02      	cmp	r3, #2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e314      	b.n	80056cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80050a2:	4b20      	ldr	r3, [pc, #128]	; (8005124 <HAL_RCC_OscConfig+0x270>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d1f0      	bne.n	8005090 <HAL_RCC_OscConfig+0x1dc>
 80050ae:	e000      	b.n	80050b2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80050b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d073      	beq.n	80051a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	2b08      	cmp	r3, #8
 80050c2:	d005      	beq.n	80050d0 <HAL_RCC_OscConfig+0x21c>
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	2b0c      	cmp	r3, #12
 80050c8:	d10e      	bne.n	80050e8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	2b03      	cmp	r3, #3
 80050ce:	d10b      	bne.n	80050e8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050d0:	4b14      	ldr	r3, [pc, #80]	; (8005124 <HAL_RCC_OscConfig+0x270>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d063      	beq.n	80051a4 <HAL_RCC_OscConfig+0x2f0>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d15f      	bne.n	80051a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e2f1      	b.n	80056cc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050f0:	d106      	bne.n	8005100 <HAL_RCC_OscConfig+0x24c>
 80050f2:	4b0c      	ldr	r3, [pc, #48]	; (8005124 <HAL_RCC_OscConfig+0x270>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a0b      	ldr	r2, [pc, #44]	; (8005124 <HAL_RCC_OscConfig+0x270>)
 80050f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050fc:	6013      	str	r3, [r2, #0]
 80050fe:	e025      	b.n	800514c <HAL_RCC_OscConfig+0x298>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005108:	d114      	bne.n	8005134 <HAL_RCC_OscConfig+0x280>
 800510a:	4b06      	ldr	r3, [pc, #24]	; (8005124 <HAL_RCC_OscConfig+0x270>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a05      	ldr	r2, [pc, #20]	; (8005124 <HAL_RCC_OscConfig+0x270>)
 8005110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005114:	6013      	str	r3, [r2, #0]
 8005116:	4b03      	ldr	r3, [pc, #12]	; (8005124 <HAL_RCC_OscConfig+0x270>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a02      	ldr	r2, [pc, #8]	; (8005124 <HAL_RCC_OscConfig+0x270>)
 800511c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005120:	6013      	str	r3, [r2, #0]
 8005122:	e013      	b.n	800514c <HAL_RCC_OscConfig+0x298>
 8005124:	40021000 	.word	0x40021000
 8005128:	0800bb54 	.word	0x0800bb54
 800512c:	200000fc 	.word	0x200000fc
 8005130:	2000008c 	.word	0x2000008c
 8005134:	4ba0      	ldr	r3, [pc, #640]	; (80053b8 <HAL_RCC_OscConfig+0x504>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a9f      	ldr	r2, [pc, #636]	; (80053b8 <HAL_RCC_OscConfig+0x504>)
 800513a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800513e:	6013      	str	r3, [r2, #0]
 8005140:	4b9d      	ldr	r3, [pc, #628]	; (80053b8 <HAL_RCC_OscConfig+0x504>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a9c      	ldr	r2, [pc, #624]	; (80053b8 <HAL_RCC_OscConfig+0x504>)
 8005146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800514a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d013      	beq.n	800517c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005154:	f7fe ff9e 	bl	8004094 <HAL_GetTick>
 8005158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800515a:	e008      	b.n	800516e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800515c:	f7fe ff9a 	bl	8004094 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b64      	cmp	r3, #100	; 0x64
 8005168:	d901      	bls.n	800516e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e2ae      	b.n	80056cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800516e:	4b92      	ldr	r3, [pc, #584]	; (80053b8 <HAL_RCC_OscConfig+0x504>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d0f0      	beq.n	800515c <HAL_RCC_OscConfig+0x2a8>
 800517a:	e014      	b.n	80051a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800517c:	f7fe ff8a 	bl	8004094 <HAL_GetTick>
 8005180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005182:	e008      	b.n	8005196 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005184:	f7fe ff86 	bl	8004094 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b64      	cmp	r3, #100	; 0x64
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e29a      	b.n	80056cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005196:	4b88      	ldr	r3, [pc, #544]	; (80053b8 <HAL_RCC_OscConfig+0x504>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1f0      	bne.n	8005184 <HAL_RCC_OscConfig+0x2d0>
 80051a2:	e000      	b.n	80051a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d060      	beq.n	8005274 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	2b04      	cmp	r3, #4
 80051b6:	d005      	beq.n	80051c4 <HAL_RCC_OscConfig+0x310>
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	2b0c      	cmp	r3, #12
 80051bc:	d119      	bne.n	80051f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d116      	bne.n	80051f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051c4:	4b7c      	ldr	r3, [pc, #496]	; (80053b8 <HAL_RCC_OscConfig+0x504>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d005      	beq.n	80051dc <HAL_RCC_OscConfig+0x328>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d101      	bne.n	80051dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e277      	b.n	80056cc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051dc:	4b76      	ldr	r3, [pc, #472]	; (80053b8 <HAL_RCC_OscConfig+0x504>)
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	061b      	lsls	r3, r3, #24
 80051ea:	4973      	ldr	r1, [pc, #460]	; (80053b8 <HAL_RCC_OscConfig+0x504>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051f0:	e040      	b.n	8005274 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d023      	beq.n	8005242 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051fa:	4b6f      	ldr	r3, [pc, #444]	; (80053b8 <HAL_RCC_OscConfig+0x504>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a6e      	ldr	r2, [pc, #440]	; (80053b8 <HAL_RCC_OscConfig+0x504>)
 8005200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005204:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005206:	f7fe ff45 	bl	8004094 <HAL_GetTick>
 800520a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800520c:	e008      	b.n	8005220 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800520e:	f7fe ff41 	bl	8004094 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	2b02      	cmp	r3, #2
 800521a:	d901      	bls.n	8005220 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e255      	b.n	80056cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005220:	4b65      	ldr	r3, [pc, #404]	; (80053b8 <HAL_RCC_OscConfig+0x504>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005228:	2b00      	cmp	r3, #0
 800522a:	d0f0      	beq.n	800520e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800522c:	4b62      	ldr	r3, [pc, #392]	; (80053b8 <HAL_RCC_OscConfig+0x504>)
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	061b      	lsls	r3, r3, #24
 800523a:	495f      	ldr	r1, [pc, #380]	; (80053b8 <HAL_RCC_OscConfig+0x504>)
 800523c:	4313      	orrs	r3, r2
 800523e:	604b      	str	r3, [r1, #4]
 8005240:	e018      	b.n	8005274 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005242:	4b5d      	ldr	r3, [pc, #372]	; (80053b8 <HAL_RCC_OscConfig+0x504>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a5c      	ldr	r2, [pc, #368]	; (80053b8 <HAL_RCC_OscConfig+0x504>)
 8005248:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800524c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800524e:	f7fe ff21 	bl	8004094 <HAL_GetTick>
 8005252:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005254:	e008      	b.n	8005268 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005256:	f7fe ff1d 	bl	8004094 <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	2b02      	cmp	r3, #2
 8005262:	d901      	bls.n	8005268 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e231      	b.n	80056cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005268:	4b53      	ldr	r3, [pc, #332]	; (80053b8 <HAL_RCC_OscConfig+0x504>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1f0      	bne.n	8005256 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0308 	and.w	r3, r3, #8
 800527c:	2b00      	cmp	r3, #0
 800527e:	d03c      	beq.n	80052fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d01c      	beq.n	80052c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005288:	4b4b      	ldr	r3, [pc, #300]	; (80053b8 <HAL_RCC_OscConfig+0x504>)
 800528a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800528e:	4a4a      	ldr	r2, [pc, #296]	; (80053b8 <HAL_RCC_OscConfig+0x504>)
 8005290:	f043 0301 	orr.w	r3, r3, #1
 8005294:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005298:	f7fe fefc 	bl	8004094 <HAL_GetTick>
 800529c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800529e:	e008      	b.n	80052b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052a0:	f7fe fef8 	bl	8004094 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d901      	bls.n	80052b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e20c      	b.n	80056cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052b2:	4b41      	ldr	r3, [pc, #260]	; (80053b8 <HAL_RCC_OscConfig+0x504>)
 80052b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052b8:	f003 0302 	and.w	r3, r3, #2
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d0ef      	beq.n	80052a0 <HAL_RCC_OscConfig+0x3ec>
 80052c0:	e01b      	b.n	80052fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052c2:	4b3d      	ldr	r3, [pc, #244]	; (80053b8 <HAL_RCC_OscConfig+0x504>)
 80052c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052c8:	4a3b      	ldr	r2, [pc, #236]	; (80053b8 <HAL_RCC_OscConfig+0x504>)
 80052ca:	f023 0301 	bic.w	r3, r3, #1
 80052ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d2:	f7fe fedf 	bl	8004094 <HAL_GetTick>
 80052d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052d8:	e008      	b.n	80052ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052da:	f7fe fedb 	bl	8004094 <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d901      	bls.n	80052ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e1ef      	b.n	80056cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052ec:	4b32      	ldr	r3, [pc, #200]	; (80053b8 <HAL_RCC_OscConfig+0x504>)
 80052ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1ef      	bne.n	80052da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0304 	and.w	r3, r3, #4
 8005302:	2b00      	cmp	r3, #0
 8005304:	f000 80a6 	beq.w	8005454 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005308:	2300      	movs	r3, #0
 800530a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800530c:	4b2a      	ldr	r3, [pc, #168]	; (80053b8 <HAL_RCC_OscConfig+0x504>)
 800530e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d10d      	bne.n	8005334 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005318:	4b27      	ldr	r3, [pc, #156]	; (80053b8 <HAL_RCC_OscConfig+0x504>)
 800531a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800531c:	4a26      	ldr	r2, [pc, #152]	; (80053b8 <HAL_RCC_OscConfig+0x504>)
 800531e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005322:	6593      	str	r3, [r2, #88]	; 0x58
 8005324:	4b24      	ldr	r3, [pc, #144]	; (80053b8 <HAL_RCC_OscConfig+0x504>)
 8005326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800532c:	60bb      	str	r3, [r7, #8]
 800532e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005330:	2301      	movs	r3, #1
 8005332:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005334:	4b21      	ldr	r3, [pc, #132]	; (80053bc <HAL_RCC_OscConfig+0x508>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533c:	2b00      	cmp	r3, #0
 800533e:	d118      	bne.n	8005372 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005340:	4b1e      	ldr	r3, [pc, #120]	; (80053bc <HAL_RCC_OscConfig+0x508>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a1d      	ldr	r2, [pc, #116]	; (80053bc <HAL_RCC_OscConfig+0x508>)
 8005346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800534a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800534c:	f7fe fea2 	bl	8004094 <HAL_GetTick>
 8005350:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005352:	e008      	b.n	8005366 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005354:	f7fe fe9e 	bl	8004094 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	2b02      	cmp	r3, #2
 8005360:	d901      	bls.n	8005366 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e1b2      	b.n	80056cc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005366:	4b15      	ldr	r3, [pc, #84]	; (80053bc <HAL_RCC_OscConfig+0x508>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800536e:	2b00      	cmp	r3, #0
 8005370:	d0f0      	beq.n	8005354 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d108      	bne.n	800538c <HAL_RCC_OscConfig+0x4d8>
 800537a:	4b0f      	ldr	r3, [pc, #60]	; (80053b8 <HAL_RCC_OscConfig+0x504>)
 800537c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005380:	4a0d      	ldr	r2, [pc, #52]	; (80053b8 <HAL_RCC_OscConfig+0x504>)
 8005382:	f043 0301 	orr.w	r3, r3, #1
 8005386:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800538a:	e029      	b.n	80053e0 <HAL_RCC_OscConfig+0x52c>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	2b05      	cmp	r3, #5
 8005392:	d115      	bne.n	80053c0 <HAL_RCC_OscConfig+0x50c>
 8005394:	4b08      	ldr	r3, [pc, #32]	; (80053b8 <HAL_RCC_OscConfig+0x504>)
 8005396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800539a:	4a07      	ldr	r2, [pc, #28]	; (80053b8 <HAL_RCC_OscConfig+0x504>)
 800539c:	f043 0304 	orr.w	r3, r3, #4
 80053a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053a4:	4b04      	ldr	r3, [pc, #16]	; (80053b8 <HAL_RCC_OscConfig+0x504>)
 80053a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053aa:	4a03      	ldr	r2, [pc, #12]	; (80053b8 <HAL_RCC_OscConfig+0x504>)
 80053ac:	f043 0301 	orr.w	r3, r3, #1
 80053b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053b4:	e014      	b.n	80053e0 <HAL_RCC_OscConfig+0x52c>
 80053b6:	bf00      	nop
 80053b8:	40021000 	.word	0x40021000
 80053bc:	40007000 	.word	0x40007000
 80053c0:	4b9a      	ldr	r3, [pc, #616]	; (800562c <HAL_RCC_OscConfig+0x778>)
 80053c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c6:	4a99      	ldr	r2, [pc, #612]	; (800562c <HAL_RCC_OscConfig+0x778>)
 80053c8:	f023 0301 	bic.w	r3, r3, #1
 80053cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053d0:	4b96      	ldr	r3, [pc, #600]	; (800562c <HAL_RCC_OscConfig+0x778>)
 80053d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d6:	4a95      	ldr	r2, [pc, #596]	; (800562c <HAL_RCC_OscConfig+0x778>)
 80053d8:	f023 0304 	bic.w	r3, r3, #4
 80053dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d016      	beq.n	8005416 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e8:	f7fe fe54 	bl	8004094 <HAL_GetTick>
 80053ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053ee:	e00a      	b.n	8005406 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053f0:	f7fe fe50 	bl	8004094 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80053fe:	4293      	cmp	r3, r2
 8005400:	d901      	bls.n	8005406 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e162      	b.n	80056cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005406:	4b89      	ldr	r3, [pc, #548]	; (800562c <HAL_RCC_OscConfig+0x778>)
 8005408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b00      	cmp	r3, #0
 8005412:	d0ed      	beq.n	80053f0 <HAL_RCC_OscConfig+0x53c>
 8005414:	e015      	b.n	8005442 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005416:	f7fe fe3d 	bl	8004094 <HAL_GetTick>
 800541a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800541c:	e00a      	b.n	8005434 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800541e:	f7fe fe39 	bl	8004094 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	f241 3288 	movw	r2, #5000	; 0x1388
 800542c:	4293      	cmp	r3, r2
 800542e:	d901      	bls.n	8005434 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e14b      	b.n	80056cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005434:	4b7d      	ldr	r3, [pc, #500]	; (800562c <HAL_RCC_OscConfig+0x778>)
 8005436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1ed      	bne.n	800541e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005442:	7ffb      	ldrb	r3, [r7, #31]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d105      	bne.n	8005454 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005448:	4b78      	ldr	r3, [pc, #480]	; (800562c <HAL_RCC_OscConfig+0x778>)
 800544a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800544c:	4a77      	ldr	r2, [pc, #476]	; (800562c <HAL_RCC_OscConfig+0x778>)
 800544e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005452:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0320 	and.w	r3, r3, #32
 800545c:	2b00      	cmp	r3, #0
 800545e:	d03c      	beq.n	80054da <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005464:	2b00      	cmp	r3, #0
 8005466:	d01c      	beq.n	80054a2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005468:	4b70      	ldr	r3, [pc, #448]	; (800562c <HAL_RCC_OscConfig+0x778>)
 800546a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800546e:	4a6f      	ldr	r2, [pc, #444]	; (800562c <HAL_RCC_OscConfig+0x778>)
 8005470:	f043 0301 	orr.w	r3, r3, #1
 8005474:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005478:	f7fe fe0c 	bl	8004094 <HAL_GetTick>
 800547c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800547e:	e008      	b.n	8005492 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005480:	f7fe fe08 	bl	8004094 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	2b02      	cmp	r3, #2
 800548c:	d901      	bls.n	8005492 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e11c      	b.n	80056cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005492:	4b66      	ldr	r3, [pc, #408]	; (800562c <HAL_RCC_OscConfig+0x778>)
 8005494:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005498:	f003 0302 	and.w	r3, r3, #2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d0ef      	beq.n	8005480 <HAL_RCC_OscConfig+0x5cc>
 80054a0:	e01b      	b.n	80054da <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80054a2:	4b62      	ldr	r3, [pc, #392]	; (800562c <HAL_RCC_OscConfig+0x778>)
 80054a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054a8:	4a60      	ldr	r2, [pc, #384]	; (800562c <HAL_RCC_OscConfig+0x778>)
 80054aa:	f023 0301 	bic.w	r3, r3, #1
 80054ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054b2:	f7fe fdef 	bl	8004094 <HAL_GetTick>
 80054b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80054b8:	e008      	b.n	80054cc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054ba:	f7fe fdeb 	bl	8004094 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d901      	bls.n	80054cc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e0ff      	b.n	80056cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80054cc:	4b57      	ldr	r3, [pc, #348]	; (800562c <HAL_RCC_OscConfig+0x778>)
 80054ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1ef      	bne.n	80054ba <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054de:	2b00      	cmp	r3, #0
 80054e0:	f000 80f3 	beq.w	80056ca <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	f040 80c9 	bne.w	8005680 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80054ee:	4b4f      	ldr	r3, [pc, #316]	; (800562c <HAL_RCC_OscConfig+0x778>)
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	f003 0203 	and.w	r2, r3, #3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fe:	429a      	cmp	r2, r3
 8005500:	d12c      	bne.n	800555c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550c:	3b01      	subs	r3, #1
 800550e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005510:	429a      	cmp	r2, r3
 8005512:	d123      	bne.n	800555c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800551e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005520:	429a      	cmp	r2, r3
 8005522:	d11b      	bne.n	800555c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005530:	429a      	cmp	r2, r3
 8005532:	d113      	bne.n	800555c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800553e:	085b      	lsrs	r3, r3, #1
 8005540:	3b01      	subs	r3, #1
 8005542:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005544:	429a      	cmp	r2, r3
 8005546:	d109      	bne.n	800555c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005552:	085b      	lsrs	r3, r3, #1
 8005554:	3b01      	subs	r3, #1
 8005556:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005558:	429a      	cmp	r2, r3
 800555a:	d06b      	beq.n	8005634 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	2b0c      	cmp	r3, #12
 8005560:	d062      	beq.n	8005628 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005562:	4b32      	ldr	r3, [pc, #200]	; (800562c <HAL_RCC_OscConfig+0x778>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d001      	beq.n	8005572 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e0ac      	b.n	80056cc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005572:	4b2e      	ldr	r3, [pc, #184]	; (800562c <HAL_RCC_OscConfig+0x778>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a2d      	ldr	r2, [pc, #180]	; (800562c <HAL_RCC_OscConfig+0x778>)
 8005578:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800557c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800557e:	f7fe fd89 	bl	8004094 <HAL_GetTick>
 8005582:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005584:	e008      	b.n	8005598 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005586:	f7fe fd85 	bl	8004094 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	2b02      	cmp	r3, #2
 8005592:	d901      	bls.n	8005598 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e099      	b.n	80056cc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005598:	4b24      	ldr	r3, [pc, #144]	; (800562c <HAL_RCC_OscConfig+0x778>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d1f0      	bne.n	8005586 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055a4:	4b21      	ldr	r3, [pc, #132]	; (800562c <HAL_RCC_OscConfig+0x778>)
 80055a6:	68da      	ldr	r2, [r3, #12]
 80055a8:	4b21      	ldr	r3, [pc, #132]	; (8005630 <HAL_RCC_OscConfig+0x77c>)
 80055aa:	4013      	ands	r3, r2
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80055b4:	3a01      	subs	r2, #1
 80055b6:	0112      	lsls	r2, r2, #4
 80055b8:	4311      	orrs	r1, r2
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80055be:	0212      	lsls	r2, r2, #8
 80055c0:	4311      	orrs	r1, r2
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80055c6:	0852      	lsrs	r2, r2, #1
 80055c8:	3a01      	subs	r2, #1
 80055ca:	0552      	lsls	r2, r2, #21
 80055cc:	4311      	orrs	r1, r2
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80055d2:	0852      	lsrs	r2, r2, #1
 80055d4:	3a01      	subs	r2, #1
 80055d6:	0652      	lsls	r2, r2, #25
 80055d8:	4311      	orrs	r1, r2
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055de:	06d2      	lsls	r2, r2, #27
 80055e0:	430a      	orrs	r2, r1
 80055e2:	4912      	ldr	r1, [pc, #72]	; (800562c <HAL_RCC_OscConfig+0x778>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80055e8:	4b10      	ldr	r3, [pc, #64]	; (800562c <HAL_RCC_OscConfig+0x778>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a0f      	ldr	r2, [pc, #60]	; (800562c <HAL_RCC_OscConfig+0x778>)
 80055ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055f4:	4b0d      	ldr	r3, [pc, #52]	; (800562c <HAL_RCC_OscConfig+0x778>)
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	4a0c      	ldr	r2, [pc, #48]	; (800562c <HAL_RCC_OscConfig+0x778>)
 80055fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005600:	f7fe fd48 	bl	8004094 <HAL_GetTick>
 8005604:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005606:	e008      	b.n	800561a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005608:	f7fe fd44 	bl	8004094 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	2b02      	cmp	r3, #2
 8005614:	d901      	bls.n	800561a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e058      	b.n	80056cc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800561a:	4b04      	ldr	r3, [pc, #16]	; (800562c <HAL_RCC_OscConfig+0x778>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d0f0      	beq.n	8005608 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005626:	e050      	b.n	80056ca <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e04f      	b.n	80056cc <HAL_RCC_OscConfig+0x818>
 800562c:	40021000 	.word	0x40021000
 8005630:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005634:	4b27      	ldr	r3, [pc, #156]	; (80056d4 <HAL_RCC_OscConfig+0x820>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d144      	bne.n	80056ca <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005640:	4b24      	ldr	r3, [pc, #144]	; (80056d4 <HAL_RCC_OscConfig+0x820>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a23      	ldr	r2, [pc, #140]	; (80056d4 <HAL_RCC_OscConfig+0x820>)
 8005646:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800564a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800564c:	4b21      	ldr	r3, [pc, #132]	; (80056d4 <HAL_RCC_OscConfig+0x820>)
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	4a20      	ldr	r2, [pc, #128]	; (80056d4 <HAL_RCC_OscConfig+0x820>)
 8005652:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005656:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005658:	f7fe fd1c 	bl	8004094 <HAL_GetTick>
 800565c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800565e:	e008      	b.n	8005672 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005660:	f7fe fd18 	bl	8004094 <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	2b02      	cmp	r3, #2
 800566c:	d901      	bls.n	8005672 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e02c      	b.n	80056cc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005672:	4b18      	ldr	r3, [pc, #96]	; (80056d4 <HAL_RCC_OscConfig+0x820>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d0f0      	beq.n	8005660 <HAL_RCC_OscConfig+0x7ac>
 800567e:	e024      	b.n	80056ca <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	2b0c      	cmp	r3, #12
 8005684:	d01f      	beq.n	80056c6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005686:	4b13      	ldr	r3, [pc, #76]	; (80056d4 <HAL_RCC_OscConfig+0x820>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a12      	ldr	r2, [pc, #72]	; (80056d4 <HAL_RCC_OscConfig+0x820>)
 800568c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005690:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005692:	f7fe fcff 	bl	8004094 <HAL_GetTick>
 8005696:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005698:	e008      	b.n	80056ac <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800569a:	f7fe fcfb 	bl	8004094 <HAL_GetTick>
 800569e:	4602      	mov	r2, r0
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d901      	bls.n	80056ac <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	e00f      	b.n	80056cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056ac:	4b09      	ldr	r3, [pc, #36]	; (80056d4 <HAL_RCC_OscConfig+0x820>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d1f0      	bne.n	800569a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80056b8:	4b06      	ldr	r3, [pc, #24]	; (80056d4 <HAL_RCC_OscConfig+0x820>)
 80056ba:	68da      	ldr	r2, [r3, #12]
 80056bc:	4905      	ldr	r1, [pc, #20]	; (80056d4 <HAL_RCC_OscConfig+0x820>)
 80056be:	4b06      	ldr	r3, [pc, #24]	; (80056d8 <HAL_RCC_OscConfig+0x824>)
 80056c0:	4013      	ands	r3, r2
 80056c2:	60cb      	str	r3, [r1, #12]
 80056c4:	e001      	b.n	80056ca <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e000      	b.n	80056cc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3720      	adds	r7, #32
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	40021000 	.word	0x40021000
 80056d8:	feeefffc 	.word	0xfeeefffc

080056dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d101      	bne.n	80056f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e0e7      	b.n	80058c0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056f0:	4b75      	ldr	r3, [pc, #468]	; (80058c8 <HAL_RCC_ClockConfig+0x1ec>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0307 	and.w	r3, r3, #7
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d910      	bls.n	8005720 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056fe:	4b72      	ldr	r3, [pc, #456]	; (80058c8 <HAL_RCC_ClockConfig+0x1ec>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f023 0207 	bic.w	r2, r3, #7
 8005706:	4970      	ldr	r1, [pc, #448]	; (80058c8 <HAL_RCC_ClockConfig+0x1ec>)
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	4313      	orrs	r3, r2
 800570c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800570e:	4b6e      	ldr	r3, [pc, #440]	; (80058c8 <HAL_RCC_ClockConfig+0x1ec>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0307 	and.w	r3, r3, #7
 8005716:	683a      	ldr	r2, [r7, #0]
 8005718:	429a      	cmp	r2, r3
 800571a:	d001      	beq.n	8005720 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e0cf      	b.n	80058c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0302 	and.w	r3, r3, #2
 8005728:	2b00      	cmp	r3, #0
 800572a:	d010      	beq.n	800574e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	689a      	ldr	r2, [r3, #8]
 8005730:	4b66      	ldr	r3, [pc, #408]	; (80058cc <HAL_RCC_ClockConfig+0x1f0>)
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005738:	429a      	cmp	r2, r3
 800573a:	d908      	bls.n	800574e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800573c:	4b63      	ldr	r3, [pc, #396]	; (80058cc <HAL_RCC_ClockConfig+0x1f0>)
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	4960      	ldr	r1, [pc, #384]	; (80058cc <HAL_RCC_ClockConfig+0x1f0>)
 800574a:	4313      	orrs	r3, r2
 800574c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0301 	and.w	r3, r3, #1
 8005756:	2b00      	cmp	r3, #0
 8005758:	d04c      	beq.n	80057f4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	2b03      	cmp	r3, #3
 8005760:	d107      	bne.n	8005772 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005762:	4b5a      	ldr	r3, [pc, #360]	; (80058cc <HAL_RCC_ClockConfig+0x1f0>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d121      	bne.n	80057b2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e0a6      	b.n	80058c0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	2b02      	cmp	r3, #2
 8005778:	d107      	bne.n	800578a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800577a:	4b54      	ldr	r3, [pc, #336]	; (80058cc <HAL_RCC_ClockConfig+0x1f0>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d115      	bne.n	80057b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e09a      	b.n	80058c0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d107      	bne.n	80057a2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005792:	4b4e      	ldr	r3, [pc, #312]	; (80058cc <HAL_RCC_ClockConfig+0x1f0>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0302 	and.w	r3, r3, #2
 800579a:	2b00      	cmp	r3, #0
 800579c:	d109      	bne.n	80057b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e08e      	b.n	80058c0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057a2:	4b4a      	ldr	r3, [pc, #296]	; (80058cc <HAL_RCC_ClockConfig+0x1f0>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e086      	b.n	80058c0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80057b2:	4b46      	ldr	r3, [pc, #280]	; (80058cc <HAL_RCC_ClockConfig+0x1f0>)
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f023 0203 	bic.w	r2, r3, #3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	4943      	ldr	r1, [pc, #268]	; (80058cc <HAL_RCC_ClockConfig+0x1f0>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057c4:	f7fe fc66 	bl	8004094 <HAL_GetTick>
 80057c8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057ca:	e00a      	b.n	80057e2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057cc:	f7fe fc62 	bl	8004094 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057da:	4293      	cmp	r3, r2
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e06e      	b.n	80058c0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057e2:	4b3a      	ldr	r3, [pc, #232]	; (80058cc <HAL_RCC_ClockConfig+0x1f0>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f003 020c 	and.w	r2, r3, #12
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d1eb      	bne.n	80057cc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0302 	and.w	r3, r3, #2
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d010      	beq.n	8005822 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	689a      	ldr	r2, [r3, #8]
 8005804:	4b31      	ldr	r3, [pc, #196]	; (80058cc <HAL_RCC_ClockConfig+0x1f0>)
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800580c:	429a      	cmp	r2, r3
 800580e:	d208      	bcs.n	8005822 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005810:	4b2e      	ldr	r3, [pc, #184]	; (80058cc <HAL_RCC_ClockConfig+0x1f0>)
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	492b      	ldr	r1, [pc, #172]	; (80058cc <HAL_RCC_ClockConfig+0x1f0>)
 800581e:	4313      	orrs	r3, r2
 8005820:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005822:	4b29      	ldr	r3, [pc, #164]	; (80058c8 <HAL_RCC_ClockConfig+0x1ec>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0307 	and.w	r3, r3, #7
 800582a:	683a      	ldr	r2, [r7, #0]
 800582c:	429a      	cmp	r2, r3
 800582e:	d210      	bcs.n	8005852 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005830:	4b25      	ldr	r3, [pc, #148]	; (80058c8 <HAL_RCC_ClockConfig+0x1ec>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f023 0207 	bic.w	r2, r3, #7
 8005838:	4923      	ldr	r1, [pc, #140]	; (80058c8 <HAL_RCC_ClockConfig+0x1ec>)
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	4313      	orrs	r3, r2
 800583e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005840:	4b21      	ldr	r3, [pc, #132]	; (80058c8 <HAL_RCC_ClockConfig+0x1ec>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0307 	and.w	r3, r3, #7
 8005848:	683a      	ldr	r2, [r7, #0]
 800584a:	429a      	cmp	r2, r3
 800584c:	d001      	beq.n	8005852 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e036      	b.n	80058c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0304 	and.w	r3, r3, #4
 800585a:	2b00      	cmp	r3, #0
 800585c:	d008      	beq.n	8005870 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800585e:	4b1b      	ldr	r3, [pc, #108]	; (80058cc <HAL_RCC_ClockConfig+0x1f0>)
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	4918      	ldr	r1, [pc, #96]	; (80058cc <HAL_RCC_ClockConfig+0x1f0>)
 800586c:	4313      	orrs	r3, r2
 800586e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0308 	and.w	r3, r3, #8
 8005878:	2b00      	cmp	r3, #0
 800587a:	d009      	beq.n	8005890 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800587c:	4b13      	ldr	r3, [pc, #76]	; (80058cc <HAL_RCC_ClockConfig+0x1f0>)
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	00db      	lsls	r3, r3, #3
 800588a:	4910      	ldr	r1, [pc, #64]	; (80058cc <HAL_RCC_ClockConfig+0x1f0>)
 800588c:	4313      	orrs	r3, r2
 800588e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005890:	f000 f824 	bl	80058dc <HAL_RCC_GetSysClockFreq>
 8005894:	4602      	mov	r2, r0
 8005896:	4b0d      	ldr	r3, [pc, #52]	; (80058cc <HAL_RCC_ClockConfig+0x1f0>)
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	091b      	lsrs	r3, r3, #4
 800589c:	f003 030f 	and.w	r3, r3, #15
 80058a0:	490b      	ldr	r1, [pc, #44]	; (80058d0 <HAL_RCC_ClockConfig+0x1f4>)
 80058a2:	5ccb      	ldrb	r3, [r1, r3]
 80058a4:	f003 031f 	and.w	r3, r3, #31
 80058a8:	fa22 f303 	lsr.w	r3, r2, r3
 80058ac:	4a09      	ldr	r2, [pc, #36]	; (80058d4 <HAL_RCC_ClockConfig+0x1f8>)
 80058ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80058b0:	4b09      	ldr	r3, [pc, #36]	; (80058d8 <HAL_RCC_ClockConfig+0x1fc>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4618      	mov	r0, r3
 80058b6:	f7fe fbb1 	bl	800401c <HAL_InitTick>
 80058ba:	4603      	mov	r3, r0
 80058bc:	72fb      	strb	r3, [r7, #11]

  return status;
 80058be:	7afb      	ldrb	r3, [r7, #11]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	40022000 	.word	0x40022000
 80058cc:	40021000 	.word	0x40021000
 80058d0:	0800bb54 	.word	0x0800bb54
 80058d4:	200000fc 	.word	0x200000fc
 80058d8:	2000008c 	.word	0x2000008c

080058dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058dc:	b480      	push	{r7}
 80058de:	b089      	sub	sp, #36	; 0x24
 80058e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80058e2:	2300      	movs	r3, #0
 80058e4:	61fb      	str	r3, [r7, #28]
 80058e6:	2300      	movs	r3, #0
 80058e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058ea:	4b3e      	ldr	r3, [pc, #248]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f003 030c 	and.w	r3, r3, #12
 80058f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058f4:	4b3b      	ldr	r3, [pc, #236]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	f003 0303 	and.w	r3, r3, #3
 80058fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d005      	beq.n	8005910 <HAL_RCC_GetSysClockFreq+0x34>
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	2b0c      	cmp	r3, #12
 8005908:	d121      	bne.n	800594e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d11e      	bne.n	800594e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005910:	4b34      	ldr	r3, [pc, #208]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0308 	and.w	r3, r3, #8
 8005918:	2b00      	cmp	r3, #0
 800591a:	d107      	bne.n	800592c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800591c:	4b31      	ldr	r3, [pc, #196]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800591e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005922:	0a1b      	lsrs	r3, r3, #8
 8005924:	f003 030f 	and.w	r3, r3, #15
 8005928:	61fb      	str	r3, [r7, #28]
 800592a:	e005      	b.n	8005938 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800592c:	4b2d      	ldr	r3, [pc, #180]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	091b      	lsrs	r3, r3, #4
 8005932:	f003 030f 	and.w	r3, r3, #15
 8005936:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005938:	4a2b      	ldr	r2, [pc, #172]	; (80059e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005940:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10d      	bne.n	8005964 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800594c:	e00a      	b.n	8005964 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	2b04      	cmp	r3, #4
 8005952:	d102      	bne.n	800595a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005954:	4b25      	ldr	r3, [pc, #148]	; (80059ec <HAL_RCC_GetSysClockFreq+0x110>)
 8005956:	61bb      	str	r3, [r7, #24]
 8005958:	e004      	b.n	8005964 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	2b08      	cmp	r3, #8
 800595e:	d101      	bne.n	8005964 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005960:	4b23      	ldr	r3, [pc, #140]	; (80059f0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005962:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	2b0c      	cmp	r3, #12
 8005968:	d134      	bne.n	80059d4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800596a:	4b1e      	ldr	r3, [pc, #120]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	f003 0303 	and.w	r3, r3, #3
 8005972:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	2b02      	cmp	r3, #2
 8005978:	d003      	beq.n	8005982 <HAL_RCC_GetSysClockFreq+0xa6>
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	2b03      	cmp	r3, #3
 800597e:	d003      	beq.n	8005988 <HAL_RCC_GetSysClockFreq+0xac>
 8005980:	e005      	b.n	800598e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005982:	4b1a      	ldr	r3, [pc, #104]	; (80059ec <HAL_RCC_GetSysClockFreq+0x110>)
 8005984:	617b      	str	r3, [r7, #20]
      break;
 8005986:	e005      	b.n	8005994 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005988:	4b19      	ldr	r3, [pc, #100]	; (80059f0 <HAL_RCC_GetSysClockFreq+0x114>)
 800598a:	617b      	str	r3, [r7, #20]
      break;
 800598c:	e002      	b.n	8005994 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	617b      	str	r3, [r7, #20]
      break;
 8005992:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005994:	4b13      	ldr	r3, [pc, #76]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	091b      	lsrs	r3, r3, #4
 800599a:	f003 0307 	and.w	r3, r3, #7
 800599e:	3301      	adds	r3, #1
 80059a0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80059a2:	4b10      	ldr	r3, [pc, #64]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	0a1b      	lsrs	r3, r3, #8
 80059a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	fb03 f202 	mul.w	r2, r3, r2
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80059ba:	4b0a      	ldr	r3, [pc, #40]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	0e5b      	lsrs	r3, r3, #25
 80059c0:	f003 0303 	and.w	r3, r3, #3
 80059c4:	3301      	adds	r3, #1
 80059c6:	005b      	lsls	r3, r3, #1
 80059c8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80059ca:	697a      	ldr	r2, [r7, #20]
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80059d4:	69bb      	ldr	r3, [r7, #24]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3724      	adds	r7, #36	; 0x24
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	40021000 	.word	0x40021000
 80059e8:	0800bb6c 	.word	0x0800bb6c
 80059ec:	00f42400 	.word	0x00f42400
 80059f0:	02dc6c00 	.word	0x02dc6c00

080059f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059f4:	b480      	push	{r7}
 80059f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059f8:	4b03      	ldr	r3, [pc, #12]	; (8005a08 <HAL_RCC_GetHCLKFreq+0x14>)
 80059fa:	681b      	ldr	r3, [r3, #0]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	200000fc 	.word	0x200000fc

08005a0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005a10:	f7ff fff0 	bl	80059f4 <HAL_RCC_GetHCLKFreq>
 8005a14:	4602      	mov	r2, r0
 8005a16:	4b06      	ldr	r3, [pc, #24]	; (8005a30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	0a1b      	lsrs	r3, r3, #8
 8005a1c:	f003 0307 	and.w	r3, r3, #7
 8005a20:	4904      	ldr	r1, [pc, #16]	; (8005a34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a22:	5ccb      	ldrb	r3, [r1, r3]
 8005a24:	f003 031f 	and.w	r3, r3, #31
 8005a28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	40021000 	.word	0x40021000
 8005a34:	0800bb64 	.word	0x0800bb64

08005a38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005a3c:	f7ff ffda 	bl	80059f4 <HAL_RCC_GetHCLKFreq>
 8005a40:	4602      	mov	r2, r0
 8005a42:	4b06      	ldr	r3, [pc, #24]	; (8005a5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	0adb      	lsrs	r3, r3, #11
 8005a48:	f003 0307 	and.w	r3, r3, #7
 8005a4c:	4904      	ldr	r1, [pc, #16]	; (8005a60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a4e:	5ccb      	ldrb	r3, [r1, r3]
 8005a50:	f003 031f 	and.w	r3, r3, #31
 8005a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	40021000 	.word	0x40021000
 8005a60:	0800bb64 	.word	0x0800bb64

08005a64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b086      	sub	sp, #24
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005a70:	4b2a      	ldr	r3, [pc, #168]	; (8005b1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d003      	beq.n	8005a84 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005a7c:	f7ff f9b6 	bl	8004dec <HAL_PWREx_GetVoltageRange>
 8005a80:	6178      	str	r0, [r7, #20]
 8005a82:	e014      	b.n	8005aae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a84:	4b25      	ldr	r3, [pc, #148]	; (8005b1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a88:	4a24      	ldr	r2, [pc, #144]	; (8005b1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a8e:	6593      	str	r3, [r2, #88]	; 0x58
 8005a90:	4b22      	ldr	r3, [pc, #136]	; (8005b1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a98:	60fb      	str	r3, [r7, #12]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005a9c:	f7ff f9a6 	bl	8004dec <HAL_PWREx_GetVoltageRange>
 8005aa0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005aa2:	4b1e      	ldr	r3, [pc, #120]	; (8005b1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aa6:	4a1d      	ldr	r2, [pc, #116]	; (8005b1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005aa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005aac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ab4:	d10b      	bne.n	8005ace <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2b80      	cmp	r3, #128	; 0x80
 8005aba:	d919      	bls.n	8005af0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2ba0      	cmp	r3, #160	; 0xa0
 8005ac0:	d902      	bls.n	8005ac8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005ac2:	2302      	movs	r3, #2
 8005ac4:	613b      	str	r3, [r7, #16]
 8005ac6:	e013      	b.n	8005af0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005ac8:	2301      	movs	r3, #1
 8005aca:	613b      	str	r3, [r7, #16]
 8005acc:	e010      	b.n	8005af0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2b80      	cmp	r3, #128	; 0x80
 8005ad2:	d902      	bls.n	8005ada <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	613b      	str	r3, [r7, #16]
 8005ad8:	e00a      	b.n	8005af0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b80      	cmp	r3, #128	; 0x80
 8005ade:	d102      	bne.n	8005ae6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	613b      	str	r3, [r7, #16]
 8005ae4:	e004      	b.n	8005af0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b70      	cmp	r3, #112	; 0x70
 8005aea:	d101      	bne.n	8005af0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005aec:	2301      	movs	r3, #1
 8005aee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005af0:	4b0b      	ldr	r3, [pc, #44]	; (8005b20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f023 0207 	bic.w	r2, r3, #7
 8005af8:	4909      	ldr	r1, [pc, #36]	; (8005b20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005b00:	4b07      	ldr	r3, [pc, #28]	; (8005b20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0307 	and.w	r3, r3, #7
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d001      	beq.n	8005b12 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e000      	b.n	8005b14 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3718      	adds	r7, #24
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	40021000 	.word	0x40021000
 8005b20:	40022000 	.word	0x40022000

08005b24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b086      	sub	sp, #24
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b30:	2300      	movs	r3, #0
 8005b32:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d031      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b44:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005b48:	d01a      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005b4a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005b4e:	d814      	bhi.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d009      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005b54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b58:	d10f      	bne.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005b5a:	4b5d      	ldr	r3, [pc, #372]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	4a5c      	ldr	r2, [pc, #368]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b64:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b66:	e00c      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	3304      	adds	r3, #4
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 f9f0 	bl	8005f54 <RCCEx_PLLSAI1_Config>
 8005b74:	4603      	mov	r3, r0
 8005b76:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b78:	e003      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	74fb      	strb	r3, [r7, #19]
      break;
 8005b7e:	e000      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005b80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b82:	7cfb      	ldrb	r3, [r7, #19]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10b      	bne.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b88:	4b51      	ldr	r3, [pc, #324]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b96:	494e      	ldr	r1, [pc, #312]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005b9e:	e001      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba0:	7cfb      	ldrb	r3, [r7, #19]
 8005ba2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f000 809e 	beq.w	8005cee <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005bb6:	4b46      	ldr	r3, [pc, #280]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e000      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00d      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bcc:	4b40      	ldr	r3, [pc, #256]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bd0:	4a3f      	ldr	r2, [pc, #252]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bd6:	6593      	str	r3, [r2, #88]	; 0x58
 8005bd8:	4b3d      	ldr	r3, [pc, #244]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005be0:	60bb      	str	r3, [r7, #8]
 8005be2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005be4:	2301      	movs	r3, #1
 8005be6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005be8:	4b3a      	ldr	r3, [pc, #232]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a39      	ldr	r2, [pc, #228]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bf2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005bf4:	f7fe fa4e 	bl	8004094 <HAL_GetTick>
 8005bf8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005bfa:	e009      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bfc:	f7fe fa4a 	bl	8004094 <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d902      	bls.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	74fb      	strb	r3, [r7, #19]
        break;
 8005c0e:	e005      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c10:	4b30      	ldr	r3, [pc, #192]	; (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d0ef      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005c1c:	7cfb      	ldrb	r3, [r7, #19]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d15a      	bne.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c22:	4b2b      	ldr	r3, [pc, #172]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c2c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d01e      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d019      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c3e:	4b24      	ldr	r3, [pc, #144]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c48:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c4a:	4b21      	ldr	r3, [pc, #132]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c50:	4a1f      	ldr	r2, [pc, #124]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c5a:	4b1d      	ldr	r3, [pc, #116]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c60:	4a1b      	ldr	r2, [pc, #108]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005c6a:	4a19      	ldr	r2, [pc, #100]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	f003 0301 	and.w	r3, r3, #1
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d016      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c7c:	f7fe fa0a 	bl	8004094 <HAL_GetTick>
 8005c80:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c82:	e00b      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c84:	f7fe fa06 	bl	8004094 <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d902      	bls.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	74fb      	strb	r3, [r7, #19]
            break;
 8005c9a:	e006      	b.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c9c:	4b0c      	ldr	r3, [pc, #48]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d0ec      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005caa:	7cfb      	ldrb	r3, [r7, #19]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d10b      	bne.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cb0:	4b07      	ldr	r3, [pc, #28]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cbe:	4904      	ldr	r1, [pc, #16]	; (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005cc6:	e009      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005cc8:	7cfb      	ldrb	r3, [r7, #19]
 8005cca:	74bb      	strb	r3, [r7, #18]
 8005ccc:	e006      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005cce:	bf00      	nop
 8005cd0:	40021000 	.word	0x40021000
 8005cd4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd8:	7cfb      	ldrb	r3, [r7, #19]
 8005cda:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cdc:	7c7b      	ldrb	r3, [r7, #17]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d105      	bne.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ce2:	4b9b      	ldr	r3, [pc, #620]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ce6:	4a9a      	ldr	r2, [pc, #616]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005ce8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00a      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005cfa:	4b95      	ldr	r3, [pc, #596]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d00:	f023 0203 	bic.w	r2, r3, #3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a1b      	ldr	r3, [r3, #32]
 8005d08:	4991      	ldr	r1, [pc, #580]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0302 	and.w	r3, r3, #2
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00a      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d1c:	4b8c      	ldr	r3, [pc, #560]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d22:	f023 020c 	bic.w	r2, r3, #12
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2a:	4989      	ldr	r1, [pc, #548]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 0304 	and.w	r3, r3, #4
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00a      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d3e:	4b84      	ldr	r3, [pc, #528]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d44:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4c:	4980      	ldr	r1, [pc, #512]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0320 	and.w	r3, r3, #32
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00a      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d60:	4b7b      	ldr	r3, [pc, #492]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d66:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6e:	4978      	ldr	r1, [pc, #480]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005d70:	4313      	orrs	r3, r2
 8005d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00a      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d82:	4b73      	ldr	r3, [pc, #460]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d90:	496f      	ldr	r1, [pc, #444]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00a      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005da4:	4b6a      	ldr	r3, [pc, #424]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005daa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db2:	4967      	ldr	r1, [pc, #412]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00a      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005dc6:	4b62      	ldr	r3, [pc, #392]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dcc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd4:	495e      	ldr	r1, [pc, #376]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00a      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005de8:	4b59      	ldr	r3, [pc, #356]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005df6:	4956      	ldr	r1, [pc, #344]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00a      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e0a:	4b51      	ldr	r3, [pc, #324]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e18:	494d      	ldr	r1, [pc, #308]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d028      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005e2c:	4b48      	ldr	r3, [pc, #288]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e3a:	4945      	ldr	r1, [pc, #276]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e4a:	d106      	bne.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e4c:	4b40      	ldr	r3, [pc, #256]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	4a3f      	ldr	r2, [pc, #252]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005e52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e56:	60d3      	str	r3, [r2, #12]
 8005e58:	e011      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e62:	d10c      	bne.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	3304      	adds	r3, #4
 8005e68:	2101      	movs	r1, #1
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 f872 	bl	8005f54 <RCCEx_PLLSAI1_Config>
 8005e70:	4603      	mov	r3, r0
 8005e72:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e74:	7cfb      	ldrb	r3, [r7, #19]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d001      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8005e7a:	7cfb      	ldrb	r3, [r7, #19]
 8005e7c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d028      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e8a:	4b31      	ldr	r3, [pc, #196]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e90:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e98:	492d      	ldr	r1, [pc, #180]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ea4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ea8:	d106      	bne.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005eaa:	4b29      	ldr	r3, [pc, #164]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	4a28      	ldr	r2, [pc, #160]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005eb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005eb4:	60d3      	str	r3, [r2, #12]
 8005eb6:	e011      	b.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ebc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ec0:	d10c      	bne.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	3304      	adds	r3, #4
 8005ec6:	2101      	movs	r1, #1
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f000 f843 	bl	8005f54 <RCCEx_PLLSAI1_Config>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ed2:	7cfb      	ldrb	r3, [r7, #19]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d001      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8005ed8:	7cfb      	ldrb	r3, [r7, #19]
 8005eda:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d01c      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ee8:	4b19      	ldr	r3, [pc, #100]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ef6:	4916      	ldr	r1, [pc, #88]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f06:	d10c      	bne.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	3304      	adds	r3, #4
 8005f0c:	2102      	movs	r1, #2
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f000 f820 	bl	8005f54 <RCCEx_PLLSAI1_Config>
 8005f14:	4603      	mov	r3, r0
 8005f16:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f18:	7cfb      	ldrb	r3, [r7, #19]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d001      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8005f1e:	7cfb      	ldrb	r3, [r7, #19]
 8005f20:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00a      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005f2e:	4b08      	ldr	r3, [pc, #32]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f34:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f3c:	4904      	ldr	r1, [pc, #16]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005f44:	7cbb      	ldrb	r3, [r7, #18]
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3718      	adds	r7, #24
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	40021000 	.word	0x40021000

08005f54 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005f62:	4b74      	ldr	r3, [pc, #464]	; (8006134 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	f003 0303 	and.w	r3, r3, #3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d018      	beq.n	8005fa0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005f6e:	4b71      	ldr	r3, [pc, #452]	; (8006134 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	f003 0203 	and.w	r2, r3, #3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d10d      	bne.n	8005f9a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
       ||
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d009      	beq.n	8005f9a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005f86:	4b6b      	ldr	r3, [pc, #428]	; (8006134 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	091b      	lsrs	r3, r3, #4
 8005f8c:	f003 0307 	and.w	r3, r3, #7
 8005f90:	1c5a      	adds	r2, r3, #1
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685b      	ldr	r3, [r3, #4]
       ||
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d047      	beq.n	800602a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	73fb      	strb	r3, [r7, #15]
 8005f9e:	e044      	b.n	800602a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2b03      	cmp	r3, #3
 8005fa6:	d018      	beq.n	8005fda <RCCEx_PLLSAI1_Config+0x86>
 8005fa8:	2b03      	cmp	r3, #3
 8005faa:	d825      	bhi.n	8005ff8 <RCCEx_PLLSAI1_Config+0xa4>
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d002      	beq.n	8005fb6 <RCCEx_PLLSAI1_Config+0x62>
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d009      	beq.n	8005fc8 <RCCEx_PLLSAI1_Config+0x74>
 8005fb4:	e020      	b.n	8005ff8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005fb6:	4b5f      	ldr	r3, [pc, #380]	; (8006134 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0302 	and.w	r3, r3, #2
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d11d      	bne.n	8005ffe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fc6:	e01a      	b.n	8005ffe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005fc8:	4b5a      	ldr	r3, [pc, #360]	; (8006134 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d116      	bne.n	8006002 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fd8:	e013      	b.n	8006002 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005fda:	4b56      	ldr	r3, [pc, #344]	; (8006134 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10f      	bne.n	8006006 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005fe6:	4b53      	ldr	r3, [pc, #332]	; (8006134 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d109      	bne.n	8006006 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005ff6:	e006      	b.n	8006006 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8005ffc:	e004      	b.n	8006008 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005ffe:	bf00      	nop
 8006000:	e002      	b.n	8006008 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006002:	bf00      	nop
 8006004:	e000      	b.n	8006008 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006006:	bf00      	nop
    }

    if(status == HAL_OK)
 8006008:	7bfb      	ldrb	r3, [r7, #15]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d10d      	bne.n	800602a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800600e:	4b49      	ldr	r3, [pc, #292]	; (8006134 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6819      	ldr	r1, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	3b01      	subs	r3, #1
 8006020:	011b      	lsls	r3, r3, #4
 8006022:	430b      	orrs	r3, r1
 8006024:	4943      	ldr	r1, [pc, #268]	; (8006134 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006026:	4313      	orrs	r3, r2
 8006028:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800602a:	7bfb      	ldrb	r3, [r7, #15]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d17c      	bne.n	800612a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006030:	4b40      	ldr	r3, [pc, #256]	; (8006134 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a3f      	ldr	r2, [pc, #252]	; (8006134 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006036:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800603a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800603c:	f7fe f82a 	bl	8004094 <HAL_GetTick>
 8006040:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006042:	e009      	b.n	8006058 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006044:	f7fe f826 	bl	8004094 <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	2b02      	cmp	r3, #2
 8006050:	d902      	bls.n	8006058 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	73fb      	strb	r3, [r7, #15]
        break;
 8006056:	e005      	b.n	8006064 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006058:	4b36      	ldr	r3, [pc, #216]	; (8006134 <RCCEx_PLLSAI1_Config+0x1e0>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1ef      	bne.n	8006044 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006064:	7bfb      	ldrb	r3, [r7, #15]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d15f      	bne.n	800612a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d110      	bne.n	8006092 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006070:	4b30      	ldr	r3, [pc, #192]	; (8006134 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006078:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	6892      	ldr	r2, [r2, #8]
 8006080:	0211      	lsls	r1, r2, #8
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	68d2      	ldr	r2, [r2, #12]
 8006086:	06d2      	lsls	r2, r2, #27
 8006088:	430a      	orrs	r2, r1
 800608a:	492a      	ldr	r1, [pc, #168]	; (8006134 <RCCEx_PLLSAI1_Config+0x1e0>)
 800608c:	4313      	orrs	r3, r2
 800608e:	610b      	str	r3, [r1, #16]
 8006090:	e027      	b.n	80060e2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	2b01      	cmp	r3, #1
 8006096:	d112      	bne.n	80060be <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006098:	4b26      	ldr	r3, [pc, #152]	; (8006134 <RCCEx_PLLSAI1_Config+0x1e0>)
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80060a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	6892      	ldr	r2, [r2, #8]
 80060a8:	0211      	lsls	r1, r2, #8
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	6912      	ldr	r2, [r2, #16]
 80060ae:	0852      	lsrs	r2, r2, #1
 80060b0:	3a01      	subs	r2, #1
 80060b2:	0552      	lsls	r2, r2, #21
 80060b4:	430a      	orrs	r2, r1
 80060b6:	491f      	ldr	r1, [pc, #124]	; (8006134 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060b8:	4313      	orrs	r3, r2
 80060ba:	610b      	str	r3, [r1, #16]
 80060bc:	e011      	b.n	80060e2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80060be:	4b1d      	ldr	r3, [pc, #116]	; (8006134 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80060c6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	6892      	ldr	r2, [r2, #8]
 80060ce:	0211      	lsls	r1, r2, #8
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	6952      	ldr	r2, [r2, #20]
 80060d4:	0852      	lsrs	r2, r2, #1
 80060d6:	3a01      	subs	r2, #1
 80060d8:	0652      	lsls	r2, r2, #25
 80060da:	430a      	orrs	r2, r1
 80060dc:	4915      	ldr	r1, [pc, #84]	; (8006134 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060de:	4313      	orrs	r3, r2
 80060e0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80060e2:	4b14      	ldr	r3, [pc, #80]	; (8006134 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a13      	ldr	r2, [pc, #76]	; (8006134 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80060ec:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060ee:	f7fd ffd1 	bl	8004094 <HAL_GetTick>
 80060f2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80060f4:	e009      	b.n	800610a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80060f6:	f7fd ffcd 	bl	8004094 <HAL_GetTick>
 80060fa:	4602      	mov	r2, r0
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	2b02      	cmp	r3, #2
 8006102:	d902      	bls.n	800610a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	73fb      	strb	r3, [r7, #15]
          break;
 8006108:	e005      	b.n	8006116 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800610a:	4b0a      	ldr	r3, [pc, #40]	; (8006134 <RCCEx_PLLSAI1_Config+0x1e0>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006112:	2b00      	cmp	r3, #0
 8006114:	d0ef      	beq.n	80060f6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006116:	7bfb      	ldrb	r3, [r7, #15]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d106      	bne.n	800612a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800611c:	4b05      	ldr	r3, [pc, #20]	; (8006134 <RCCEx_PLLSAI1_Config+0x1e0>)
 800611e:	691a      	ldr	r2, [r3, #16]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	699b      	ldr	r3, [r3, #24]
 8006124:	4903      	ldr	r1, [pc, #12]	; (8006134 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006126:	4313      	orrs	r3, r2
 8006128:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800612a:	7bfb      	ldrb	r3, [r7, #15]
}
 800612c:	4618      	mov	r0, r3
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	40021000 	.word	0x40021000

08006138 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d06c      	beq.n	8006224 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006150:	b2db      	uxtb	r3, r3
 8006152:	2b00      	cmp	r3, #0
 8006154:	d106      	bne.n	8006164 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f003 fe46 	bl	8009df0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2202      	movs	r2, #2
 8006168:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	22ca      	movs	r2, #202	; 0xca
 8006172:	625a      	str	r2, [r3, #36]	; 0x24
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2253      	movs	r2, #83	; 0x53
 800617a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 f87c 	bl	800627a <RTC_EnterInitMode>
 8006182:	4603      	mov	r3, r0
 8006184:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006186:	7bfb      	ldrb	r3, [r7, #15]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d14b      	bne.n	8006224 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	6812      	ldr	r2, [r2, #0]
 8006196:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800619a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800619e:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6899      	ldr	r1, [r3, #8]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	431a      	orrs	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	699b      	ldr	r3, [r3, #24]
 80061b4:	431a      	orrs	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	430a      	orrs	r2, r1
 80061bc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	68d2      	ldr	r2, [r2, #12]
 80061c6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6919      	ldr	r1, [r3, #16]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	041a      	lsls	r2, r3, #16
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	430a      	orrs	r2, r1
 80061da:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 f87f 	bl	80062e0 <RTC_ExitInitMode>
 80061e2:	4603      	mov	r3, r0
 80061e4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80061e6:	7bfb      	ldrb	r3, [r7, #15]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d11b      	bne.n	8006224 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f022 0203 	bic.w	r2, r2, #3
 80061fa:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	69da      	ldr	r2, [r3, #28]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	431a      	orrs	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	430a      	orrs	r2, r1
 8006212:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	22ff      	movs	r2, #255	; 0xff
 800621a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8006224:	7bfb      	ldrb	r3, [r7, #15]
}
 8006226:	4618      	mov	r0, r3
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b084      	sub	sp, #16
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68da      	ldr	r2, [r3, #12]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006244:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8006246:	f7fd ff25 	bl	8004094 <HAL_GetTick>
 800624a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800624c:	e009      	b.n	8006262 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800624e:	f7fd ff21 	bl	8004094 <HAL_GetTick>
 8006252:	4602      	mov	r2, r0
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800625c:	d901      	bls.n	8006262 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e007      	b.n	8006272 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	f003 0320 	and.w	r3, r3, #32
 800626c:	2b00      	cmp	r3, #0
 800626e:	d0ee      	beq.n	800624e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b084      	sub	sp, #16
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006282:	2300      	movs	r3, #0
 8006284:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006290:	2b00      	cmp	r3, #0
 8006292:	d120      	bne.n	80062d6 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800629c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800629e:	f7fd fef9 	bl	8004094 <HAL_GetTick>
 80062a2:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80062a4:	e00d      	b.n	80062c2 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80062a6:	f7fd fef5 	bl	8004094 <HAL_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062b4:	d905      	bls.n	80062c2 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2203      	movs	r2, #3
 80062be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d102      	bne.n	80062d6 <RTC_EnterInitMode+0x5c>
 80062d0:	7bfb      	ldrb	r3, [r7, #15]
 80062d2:	2b03      	cmp	r3, #3
 80062d4:	d1e7      	bne.n	80062a6 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80062d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3710      	adds	r7, #16
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062e8:	2300      	movs	r3, #0
 80062ea:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80062ec:	4b1a      	ldr	r3, [pc, #104]	; (8006358 <RTC_ExitInitMode+0x78>)
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	4a19      	ldr	r2, [pc, #100]	; (8006358 <RTC_ExitInitMode+0x78>)
 80062f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062f6:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80062f8:	4b17      	ldr	r3, [pc, #92]	; (8006358 <RTC_ExitInitMode+0x78>)
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f003 0320 	and.w	r3, r3, #32
 8006300:	2b00      	cmp	r3, #0
 8006302:	d10c      	bne.n	800631e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f7ff ff92 	bl	800622e <HAL_RTC_WaitForSynchro>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d01e      	beq.n	800634e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2203      	movs	r2, #3
 8006314:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	73fb      	strb	r3, [r7, #15]
 800631c:	e017      	b.n	800634e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800631e:	4b0e      	ldr	r3, [pc, #56]	; (8006358 <RTC_ExitInitMode+0x78>)
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	4a0d      	ldr	r2, [pc, #52]	; (8006358 <RTC_ExitInitMode+0x78>)
 8006324:	f023 0320 	bic.w	r3, r3, #32
 8006328:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f7ff ff7f 	bl	800622e <HAL_RTC_WaitForSynchro>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d005      	beq.n	8006342 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2203      	movs	r2, #3
 800633a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006342:	4b05      	ldr	r3, [pc, #20]	; (8006358 <RTC_ExitInitMode+0x78>)
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	4a04      	ldr	r2, [pc, #16]	; (8006358 <RTC_ExitInitMode+0x78>)
 8006348:	f043 0320 	orr.w	r3, r3, #32
 800634c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800634e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006350:	4618      	mov	r0, r3
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	40002800 	.word	0x40002800

0800635c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d101      	bne.n	800636e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e095      	b.n	800649a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006372:	2b00      	cmp	r3, #0
 8006374:	d108      	bne.n	8006388 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800637e:	d009      	beq.n	8006394 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	61da      	str	r2, [r3, #28]
 8006386:	e005      	b.n	8006394 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d106      	bne.n	80063b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f877 	bl	80064a2 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2202      	movs	r2, #2
 80063b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80063d4:	d902      	bls.n	80063dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80063d6:	2300      	movs	r3, #0
 80063d8:	60fb      	str	r3, [r7, #12]
 80063da:	e002      	b.n	80063e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80063dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80063ea:	d007      	beq.n	80063fc <HAL_SPI_Init+0xa0>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80063f4:	d002      	beq.n	80063fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800640c:	431a      	orrs	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	f003 0302 	and.w	r3, r3, #2
 8006416:	431a      	orrs	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	695b      	ldr	r3, [r3, #20]
 800641c:	f003 0301 	and.w	r3, r3, #1
 8006420:	431a      	orrs	r2, r3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800642a:	431a      	orrs	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	69db      	ldr	r3, [r3, #28]
 8006430:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006434:	431a      	orrs	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800643e:	ea42 0103 	orr.w	r1, r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006446:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	430a      	orrs	r2, r1
 8006450:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	0c1b      	lsrs	r3, r3, #16
 8006458:	f003 0204 	and.w	r2, r3, #4
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006460:	f003 0310 	and.w	r3, r3, #16
 8006464:	431a      	orrs	r2, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800646a:	f003 0308 	and.w	r3, r3, #8
 800646e:	431a      	orrs	r2, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006478:	ea42 0103 	orr.w	r1, r2, r3
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	430a      	orrs	r2, r1
 8006488:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b083      	sub	sp, #12
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80064aa:	bf00      	nop
 80064ac:	370c      	adds	r7, #12
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b082      	sub	sp, #8
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e049      	b.n	800655c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d106      	bne.n	80064e2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f003 fca3 	bl	8009e28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2202      	movs	r2, #2
 80064e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	3304      	adds	r3, #4
 80064f2:	4619      	mov	r1, r3
 80064f4:	4610      	mov	r0, r2
 80064f6:	f000 fe2f 	bl	8007158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2201      	movs	r2, #1
 80064fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2201      	movs	r2, #1
 8006506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2201      	movs	r2, #1
 800650e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2201      	movs	r2, #1
 800651e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2201      	movs	r2, #1
 8006526:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2201      	movs	r2, #1
 800652e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2201      	movs	r2, #1
 8006536:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2201      	movs	r2, #1
 800653e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2201      	movs	r2, #1
 8006546:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2201      	movs	r2, #1
 800654e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2201      	movs	r2, #1
 8006556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d101      	bne.n	8006576 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e049      	b.n	800660a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800657c:	b2db      	uxtb	r3, r3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d106      	bne.n	8006590 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f003 fd46 	bl	800a01c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2202      	movs	r2, #2
 8006594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	3304      	adds	r3, #4
 80065a0:	4619      	mov	r1, r3
 80065a2:	4610      	mov	r0, r2
 80065a4:	f000 fdd8 	bl	8007158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3708      	adds	r7, #8
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
	...

08006614 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b086      	sub	sp, #24
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
 8006620:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8006622:	2300      	movs	r3, #0
 8006624:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d109      	bne.n	8006640 <HAL_TIM_PWM_Start_DMA+0x2c>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006632:	b2db      	uxtb	r3, r3
 8006634:	2b02      	cmp	r3, #2
 8006636:	bf0c      	ite	eq
 8006638:	2301      	moveq	r3, #1
 800663a:	2300      	movne	r3, #0
 800663c:	b2db      	uxtb	r3, r3
 800663e:	e03c      	b.n	80066ba <HAL_TIM_PWM_Start_DMA+0xa6>
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	2b04      	cmp	r3, #4
 8006644:	d109      	bne.n	800665a <HAL_TIM_PWM_Start_DMA+0x46>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b02      	cmp	r3, #2
 8006650:	bf0c      	ite	eq
 8006652:	2301      	moveq	r3, #1
 8006654:	2300      	movne	r3, #0
 8006656:	b2db      	uxtb	r3, r3
 8006658:	e02f      	b.n	80066ba <HAL_TIM_PWM_Start_DMA+0xa6>
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	2b08      	cmp	r3, #8
 800665e:	d109      	bne.n	8006674 <HAL_TIM_PWM_Start_DMA+0x60>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b02      	cmp	r3, #2
 800666a:	bf0c      	ite	eq
 800666c:	2301      	moveq	r3, #1
 800666e:	2300      	movne	r3, #0
 8006670:	b2db      	uxtb	r3, r3
 8006672:	e022      	b.n	80066ba <HAL_TIM_PWM_Start_DMA+0xa6>
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	2b0c      	cmp	r3, #12
 8006678:	d109      	bne.n	800668e <HAL_TIM_PWM_Start_DMA+0x7a>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006680:	b2db      	uxtb	r3, r3
 8006682:	2b02      	cmp	r3, #2
 8006684:	bf0c      	ite	eq
 8006686:	2301      	moveq	r3, #1
 8006688:	2300      	movne	r3, #0
 800668a:	b2db      	uxtb	r3, r3
 800668c:	e015      	b.n	80066ba <HAL_TIM_PWM_Start_DMA+0xa6>
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	2b10      	cmp	r3, #16
 8006692:	d109      	bne.n	80066a8 <HAL_TIM_PWM_Start_DMA+0x94>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800669a:	b2db      	uxtb	r3, r3
 800669c:	2b02      	cmp	r3, #2
 800669e:	bf0c      	ite	eq
 80066a0:	2301      	moveq	r3, #1
 80066a2:	2300      	movne	r3, #0
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	e008      	b.n	80066ba <HAL_TIM_PWM_Start_DMA+0xa6>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	bf0c      	ite	eq
 80066b4:	2301      	moveq	r3, #1
 80066b6:	2300      	movne	r3, #0
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d001      	beq.n	80066c2 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 80066be:	2302      	movs	r3, #2
 80066c0:	e18d      	b.n	80069de <HAL_TIM_PWM_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d109      	bne.n	80066dc <HAL_TIM_PWM_Start_DMA+0xc8>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	bf0c      	ite	eq
 80066d4:	2301      	moveq	r3, #1
 80066d6:	2300      	movne	r3, #0
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	e03c      	b.n	8006756 <HAL_TIM_PWM_Start_DMA+0x142>
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	2b04      	cmp	r3, #4
 80066e0:	d109      	bne.n	80066f6 <HAL_TIM_PWM_Start_DMA+0xe2>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	bf0c      	ite	eq
 80066ee:	2301      	moveq	r3, #1
 80066f0:	2300      	movne	r3, #0
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	e02f      	b.n	8006756 <HAL_TIM_PWM_Start_DMA+0x142>
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	2b08      	cmp	r3, #8
 80066fa:	d109      	bne.n	8006710 <HAL_TIM_PWM_Start_DMA+0xfc>
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006702:	b2db      	uxtb	r3, r3
 8006704:	2b01      	cmp	r3, #1
 8006706:	bf0c      	ite	eq
 8006708:	2301      	moveq	r3, #1
 800670a:	2300      	movne	r3, #0
 800670c:	b2db      	uxtb	r3, r3
 800670e:	e022      	b.n	8006756 <HAL_TIM_PWM_Start_DMA+0x142>
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	2b0c      	cmp	r3, #12
 8006714:	d109      	bne.n	800672a <HAL_TIM_PWM_Start_DMA+0x116>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800671c:	b2db      	uxtb	r3, r3
 800671e:	2b01      	cmp	r3, #1
 8006720:	bf0c      	ite	eq
 8006722:	2301      	moveq	r3, #1
 8006724:	2300      	movne	r3, #0
 8006726:	b2db      	uxtb	r3, r3
 8006728:	e015      	b.n	8006756 <HAL_TIM_PWM_Start_DMA+0x142>
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	2b10      	cmp	r3, #16
 800672e:	d109      	bne.n	8006744 <HAL_TIM_PWM_Start_DMA+0x130>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006736:	b2db      	uxtb	r3, r3
 8006738:	2b01      	cmp	r3, #1
 800673a:	bf0c      	ite	eq
 800673c:	2301      	moveq	r3, #1
 800673e:	2300      	movne	r3, #0
 8006740:	b2db      	uxtb	r3, r3
 8006742:	e008      	b.n	8006756 <HAL_TIM_PWM_Start_DMA+0x142>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800674a:	b2db      	uxtb	r3, r3
 800674c:	2b01      	cmp	r3, #1
 800674e:	bf0c      	ite	eq
 8006750:	2301      	moveq	r3, #1
 8006752:	2300      	movne	r3, #0
 8006754:	b2db      	uxtb	r3, r3
 8006756:	2b00      	cmp	r3, #0
 8006758:	d034      	beq.n	80067c4 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d002      	beq.n	8006766 <HAL_TIM_PWM_Start_DMA+0x152>
 8006760:	887b      	ldrh	r3, [r7, #2]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d101      	bne.n	800676a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e139      	b.n	80069de <HAL_TIM_PWM_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d104      	bne.n	800677a <HAL_TIM_PWM_Start_DMA+0x166>
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2202      	movs	r2, #2
 8006774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006778:	e026      	b.n	80067c8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	2b04      	cmp	r3, #4
 800677e:	d104      	bne.n	800678a <HAL_TIM_PWM_Start_DMA+0x176>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2202      	movs	r2, #2
 8006784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006788:	e01e      	b.n	80067c8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	2b08      	cmp	r3, #8
 800678e:	d104      	bne.n	800679a <HAL_TIM_PWM_Start_DMA+0x186>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2202      	movs	r2, #2
 8006794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006798:	e016      	b.n	80067c8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	2b0c      	cmp	r3, #12
 800679e:	d104      	bne.n	80067aa <HAL_TIM_PWM_Start_DMA+0x196>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2202      	movs	r2, #2
 80067a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067a8:	e00e      	b.n	80067c8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	2b10      	cmp	r3, #16
 80067ae:	d104      	bne.n	80067ba <HAL_TIM_PWM_Start_DMA+0x1a6>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2202      	movs	r2, #2
 80067b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067b8:	e006      	b.n	80067c8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2202      	movs	r2, #2
 80067be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067c2:	e001      	b.n	80067c8 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e10a      	b.n	80069de <HAL_TIM_PWM_Start_DMA+0x3ca>
  }

  switch (Channel)
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	2b0c      	cmp	r3, #12
 80067cc:	f200 80ae 	bhi.w	800692c <HAL_TIM_PWM_Start_DMA+0x318>
 80067d0:	a201      	add	r2, pc, #4	; (adr r2, 80067d8 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80067d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d6:	bf00      	nop
 80067d8:	0800680d 	.word	0x0800680d
 80067dc:	0800692d 	.word	0x0800692d
 80067e0:	0800692d 	.word	0x0800692d
 80067e4:	0800692d 	.word	0x0800692d
 80067e8:	08006855 	.word	0x08006855
 80067ec:	0800692d 	.word	0x0800692d
 80067f0:	0800692d 	.word	0x0800692d
 80067f4:	0800692d 	.word	0x0800692d
 80067f8:	0800689d 	.word	0x0800689d
 80067fc:	0800692d 	.word	0x0800692d
 8006800:	0800692d 	.word	0x0800692d
 8006804:	0800692d 	.word	0x0800692d
 8006808:	080068e5 	.word	0x080068e5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006810:	4a75      	ldr	r2, [pc, #468]	; (80069e8 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8006812:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006818:	4a74      	ldr	r2, [pc, #464]	; (80069ec <HAL_TIM_PWM_Start_DMA+0x3d8>)
 800681a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006820:	4a73      	ldr	r2, [pc, #460]	; (80069f0 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8006822:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006828:	6879      	ldr	r1, [r7, #4]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	3334      	adds	r3, #52	; 0x34
 8006830:	461a      	mov	r2, r3
 8006832:	887b      	ldrh	r3, [r7, #2]
 8006834:	f7fd feaa 	bl	800458c <HAL_DMA_Start_IT>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d001      	beq.n	8006842 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e0cd      	b.n	80069de <HAL_TIM_PWM_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68da      	ldr	r2, [r3, #12]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006850:	60da      	str	r2, [r3, #12]
      break;
 8006852:	e06e      	b.n	8006932 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006858:	4a63      	ldr	r2, [pc, #396]	; (80069e8 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800685a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006860:	4a62      	ldr	r2, [pc, #392]	; (80069ec <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8006862:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006868:	4a61      	ldr	r2, [pc, #388]	; (80069f0 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800686a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006870:	6879      	ldr	r1, [r7, #4]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	3338      	adds	r3, #56	; 0x38
 8006878:	461a      	mov	r2, r3
 800687a:	887b      	ldrh	r3, [r7, #2]
 800687c:	f7fd fe86 	bl	800458c <HAL_DMA_Start_IT>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d001      	beq.n	800688a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e0a9      	b.n	80069de <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68da      	ldr	r2, [r3, #12]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006898:	60da      	str	r2, [r3, #12]
      break;
 800689a:	e04a      	b.n	8006932 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a0:	4a51      	ldr	r2, [pc, #324]	; (80069e8 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80068a2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a8:	4a50      	ldr	r2, [pc, #320]	; (80069ec <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80068aa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b0:	4a4f      	ldr	r2, [pc, #316]	; (80069f0 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80068b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80068b8:	6879      	ldr	r1, [r7, #4]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	333c      	adds	r3, #60	; 0x3c
 80068c0:	461a      	mov	r2, r3
 80068c2:	887b      	ldrh	r3, [r7, #2]
 80068c4:	f7fd fe62 	bl	800458c <HAL_DMA_Start_IT>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d001      	beq.n	80068d2 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e085      	b.n	80069de <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68da      	ldr	r2, [r3, #12]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068e0:	60da      	str	r2, [r3, #12]
      break;
 80068e2:	e026      	b.n	8006932 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e8:	4a3f      	ldr	r2, [pc, #252]	; (80069e8 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80068ea:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f0:	4a3e      	ldr	r2, [pc, #248]	; (80069ec <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80068f2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f8:	4a3d      	ldr	r2, [pc, #244]	; (80069f0 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80068fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006900:	6879      	ldr	r1, [r7, #4]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	3340      	adds	r3, #64	; 0x40
 8006908:	461a      	mov	r2, r3
 800690a:	887b      	ldrh	r3, [r7, #2]
 800690c:	f7fd fe3e 	bl	800458c <HAL_DMA_Start_IT>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d001      	beq.n	800691a <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e061      	b.n	80069de <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68da      	ldr	r2, [r3, #12]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006928:	60da      	str	r2, [r3, #12]
      break;
 800692a:	e002      	b.n	8006932 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	75fb      	strb	r3, [r7, #23]
      break;
 8006930:	bf00      	nop
  }

  if (status == HAL_OK)
 8006932:	7dfb      	ldrb	r3, [r7, #23]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d151      	bne.n	80069dc <HAL_TIM_PWM_Start_DMA+0x3c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2201      	movs	r2, #1
 800693e:	68b9      	ldr	r1, [r7, #8]
 8006940:	4618      	mov	r0, r3
 8006942:	f000 ff85 	bl	8007850 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a2a      	ldr	r2, [pc, #168]	; (80069f4 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d009      	beq.n	8006964 <HAL_TIM_PWM_Start_DMA+0x350>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a28      	ldr	r2, [pc, #160]	; (80069f8 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d004      	beq.n	8006964 <HAL_TIM_PWM_Start_DMA+0x350>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a27      	ldr	r2, [pc, #156]	; (80069fc <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d101      	bne.n	8006968 <HAL_TIM_PWM_Start_DMA+0x354>
 8006964:	2301      	movs	r3, #1
 8006966:	e000      	b.n	800696a <HAL_TIM_PWM_Start_DMA+0x356>
 8006968:	2300      	movs	r3, #0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d007      	beq.n	800697e <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800697c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a1c      	ldr	r2, [pc, #112]	; (80069f4 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d009      	beq.n	800699c <HAL_TIM_PWM_Start_DMA+0x388>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006990:	d004      	beq.n	800699c <HAL_TIM_PWM_Start_DMA+0x388>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a18      	ldr	r2, [pc, #96]	; (80069f8 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d115      	bne.n	80069c8 <HAL_TIM_PWM_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	689a      	ldr	r2, [r3, #8]
 80069a2:	4b17      	ldr	r3, [pc, #92]	; (8006a00 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80069a4:	4013      	ands	r3, r2
 80069a6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	2b06      	cmp	r3, #6
 80069ac:	d015      	beq.n	80069da <HAL_TIM_PWM_Start_DMA+0x3c6>
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069b4:	d011      	beq.n	80069da <HAL_TIM_PWM_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f042 0201 	orr.w	r2, r2, #1
 80069c4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069c6:	e008      	b.n	80069da <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f042 0201 	orr.w	r2, r2, #1
 80069d6:	601a      	str	r2, [r3, #0]
 80069d8:	e000      	b.n	80069dc <HAL_TIM_PWM_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069da:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80069dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3718      	adds	r7, #24
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	08007049 	.word	0x08007049
 80069ec:	080070f1 	.word	0x080070f1
 80069f0:	08006fb7 	.word	0x08006fb7
 80069f4:	40012c00 	.word	0x40012c00
 80069f8:	40014000 	.word	0x40014000
 80069fc:	40014400 	.word	0x40014400
 8006a00:	00010007 	.word	0x00010007

08006a04 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	2b0c      	cmp	r3, #12
 8006a16:	d855      	bhi.n	8006ac4 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8006a18:	a201      	add	r2, pc, #4	; (adr r2, 8006a20 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8006a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1e:	bf00      	nop
 8006a20:	08006a55 	.word	0x08006a55
 8006a24:	08006ac5 	.word	0x08006ac5
 8006a28:	08006ac5 	.word	0x08006ac5
 8006a2c:	08006ac5 	.word	0x08006ac5
 8006a30:	08006a71 	.word	0x08006a71
 8006a34:	08006ac5 	.word	0x08006ac5
 8006a38:	08006ac5 	.word	0x08006ac5
 8006a3c:	08006ac5 	.word	0x08006ac5
 8006a40:	08006a8d 	.word	0x08006a8d
 8006a44:	08006ac5 	.word	0x08006ac5
 8006a48:	08006ac5 	.word	0x08006ac5
 8006a4c:	08006ac5 	.word	0x08006ac5
 8006a50:	08006aa9 	.word	0x08006aa9
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	68da      	ldr	r2, [r3, #12]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006a62:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7fd fe2d 	bl	80046c8 <HAL_DMA_Abort_IT>
      break;
 8006a6e:	e02c      	b.n	8006aca <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68da      	ldr	r2, [r3, #12]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a7e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7fd fe1f 	bl	80046c8 <HAL_DMA_Abort_IT>
      break;
 8006a8a:	e01e      	b.n	8006aca <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68da      	ldr	r2, [r3, #12]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a9a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f7fd fe11 	bl	80046c8 <HAL_DMA_Abort_IT>
      break;
 8006aa6:	e010      	b.n	8006aca <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68da      	ldr	r2, [r3, #12]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006ab6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7fd fe03 	bl	80046c8 <HAL_DMA_Abort_IT>
      break;
 8006ac2:	e002      	b.n	8006aca <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ac8:	bf00      	nop
  }

  if (status == HAL_OK)
 8006aca:	7bfb      	ldrb	r3, [r7, #15]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d176      	bne.n	8006bbe <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	6839      	ldr	r1, [r7, #0]
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f000 feb9 	bl	8007850 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a39      	ldr	r2, [pc, #228]	; (8006bc8 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d009      	beq.n	8006afc <HAL_TIM_PWM_Stop_DMA+0xf8>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a37      	ldr	r2, [pc, #220]	; (8006bcc <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d004      	beq.n	8006afc <HAL_TIM_PWM_Stop_DMA+0xf8>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a36      	ldr	r2, [pc, #216]	; (8006bd0 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d101      	bne.n	8006b00 <HAL_TIM_PWM_Stop_DMA+0xfc>
 8006afc:	2301      	movs	r3, #1
 8006afe:	e000      	b.n	8006b02 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8006b00:	2300      	movs	r3, #0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d017      	beq.n	8006b36 <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	6a1a      	ldr	r2, [r3, #32]
 8006b0c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006b10:	4013      	ands	r3, r2
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10f      	bne.n	8006b36 <HAL_TIM_PWM_Stop_DMA+0x132>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	6a1a      	ldr	r2, [r3, #32]
 8006b1c:	f240 4344 	movw	r3, #1092	; 0x444
 8006b20:	4013      	ands	r3, r2
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d107      	bne.n	8006b36 <HAL_TIM_PWM_Stop_DMA+0x132>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b34:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	6a1a      	ldr	r2, [r3, #32]
 8006b3c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006b40:	4013      	ands	r3, r2
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10f      	bne.n	8006b66 <HAL_TIM_PWM_Stop_DMA+0x162>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	6a1a      	ldr	r2, [r3, #32]
 8006b4c:	f240 4344 	movw	r3, #1092	; 0x444
 8006b50:	4013      	ands	r3, r2
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d107      	bne.n	8006b66 <HAL_TIM_PWM_Stop_DMA+0x162>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f022 0201 	bic.w	r2, r2, #1
 8006b64:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d104      	bne.n	8006b76 <HAL_TIM_PWM_Stop_DMA+0x172>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b74:	e023      	b.n	8006bbe <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	2b04      	cmp	r3, #4
 8006b7a:	d104      	bne.n	8006b86 <HAL_TIM_PWM_Stop_DMA+0x182>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b84:	e01b      	b.n	8006bbe <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	2b08      	cmp	r3, #8
 8006b8a:	d104      	bne.n	8006b96 <HAL_TIM_PWM_Stop_DMA+0x192>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b94:	e013      	b.n	8006bbe <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	2b0c      	cmp	r3, #12
 8006b9a:	d104      	bne.n	8006ba6 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ba4:	e00b      	b.n	8006bbe <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	2b10      	cmp	r3, #16
 8006baa:	d104      	bne.n	8006bb6 <HAL_TIM_PWM_Stop_DMA+0x1b2>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bb4:	e003      	b.n	8006bbe <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8006bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	40012c00 	.word	0x40012c00
 8006bcc:	40014000 	.word	0x40014000
 8006bd0:	40014400 	.word	0x40014400

08006bd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b086      	sub	sp, #24
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006be0:	2300      	movs	r3, #0
 8006be2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d101      	bne.n	8006bf2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006bee:	2302      	movs	r3, #2
 8006bf0:	e0ff      	b.n	8006df2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2b14      	cmp	r3, #20
 8006bfe:	f200 80f0 	bhi.w	8006de2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006c02:	a201      	add	r2, pc, #4	; (adr r2, 8006c08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c08:	08006c5d 	.word	0x08006c5d
 8006c0c:	08006de3 	.word	0x08006de3
 8006c10:	08006de3 	.word	0x08006de3
 8006c14:	08006de3 	.word	0x08006de3
 8006c18:	08006c9d 	.word	0x08006c9d
 8006c1c:	08006de3 	.word	0x08006de3
 8006c20:	08006de3 	.word	0x08006de3
 8006c24:	08006de3 	.word	0x08006de3
 8006c28:	08006cdf 	.word	0x08006cdf
 8006c2c:	08006de3 	.word	0x08006de3
 8006c30:	08006de3 	.word	0x08006de3
 8006c34:	08006de3 	.word	0x08006de3
 8006c38:	08006d1f 	.word	0x08006d1f
 8006c3c:	08006de3 	.word	0x08006de3
 8006c40:	08006de3 	.word	0x08006de3
 8006c44:	08006de3 	.word	0x08006de3
 8006c48:	08006d61 	.word	0x08006d61
 8006c4c:	08006de3 	.word	0x08006de3
 8006c50:	08006de3 	.word	0x08006de3
 8006c54:	08006de3 	.word	0x08006de3
 8006c58:	08006da1 	.word	0x08006da1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68b9      	ldr	r1, [r7, #8]
 8006c62:	4618      	mov	r0, r3
 8006c64:	f000 fadc 	bl	8007220 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	699a      	ldr	r2, [r3, #24]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f042 0208 	orr.w	r2, r2, #8
 8006c76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	699a      	ldr	r2, [r3, #24]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f022 0204 	bic.w	r2, r2, #4
 8006c86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	6999      	ldr	r1, [r3, #24]
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	691a      	ldr	r2, [r3, #16]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	430a      	orrs	r2, r1
 8006c98:	619a      	str	r2, [r3, #24]
      break;
 8006c9a:	e0a5      	b.n	8006de8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68b9      	ldr	r1, [r7, #8]
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f000 fb38 	bl	8007318 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	699a      	ldr	r2, [r3, #24]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	699a      	ldr	r2, [r3, #24]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	6999      	ldr	r1, [r3, #24]
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	021a      	lsls	r2, r3, #8
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	430a      	orrs	r2, r1
 8006cda:	619a      	str	r2, [r3, #24]
      break;
 8006cdc:	e084      	b.n	8006de8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68b9      	ldr	r1, [r7, #8]
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f000 fb91 	bl	800740c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	69da      	ldr	r2, [r3, #28]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f042 0208 	orr.w	r2, r2, #8
 8006cf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	69da      	ldr	r2, [r3, #28]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f022 0204 	bic.w	r2, r2, #4
 8006d08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	69d9      	ldr	r1, [r3, #28]
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	691a      	ldr	r2, [r3, #16]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	430a      	orrs	r2, r1
 8006d1a:	61da      	str	r2, [r3, #28]
      break;
 8006d1c:	e064      	b.n	8006de8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68b9      	ldr	r1, [r7, #8]
 8006d24:	4618      	mov	r0, r3
 8006d26:	f000 fbe9 	bl	80074fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	69da      	ldr	r2, [r3, #28]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	69da      	ldr	r2, [r3, #28]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	69d9      	ldr	r1, [r3, #28]
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	021a      	lsls	r2, r3, #8
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	61da      	str	r2, [r3, #28]
      break;
 8006d5e:	e043      	b.n	8006de8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	68b9      	ldr	r1, [r7, #8]
 8006d66:	4618      	mov	r0, r3
 8006d68:	f000 fc26 	bl	80075b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f042 0208 	orr.w	r2, r2, #8
 8006d7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f022 0204 	bic.w	r2, r2, #4
 8006d8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	691a      	ldr	r2, [r3, #16]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	430a      	orrs	r2, r1
 8006d9c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006d9e:	e023      	b.n	8006de8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68b9      	ldr	r1, [r7, #8]
 8006da6:	4618      	mov	r0, r3
 8006da8:	f000 fc5e 	bl	8007668 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	021a      	lsls	r2, r3, #8
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	430a      	orrs	r2, r1
 8006dde:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006de0:	e002      	b.n	8006de8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	75fb      	strb	r3, [r7, #23]
      break;
 8006de6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3718      	adds	r7, #24
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop

08006dfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e06:	2300      	movs	r3, #0
 8006e08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d101      	bne.n	8006e18 <HAL_TIM_ConfigClockSource+0x1c>
 8006e14:	2302      	movs	r3, #2
 8006e16:	e0b6      	b.n	8006f86 <HAL_TIM_ConfigClockSource+0x18a>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2202      	movs	r2, #2
 8006e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68ba      	ldr	r2, [r7, #8]
 8006e4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e54:	d03e      	beq.n	8006ed4 <HAL_TIM_ConfigClockSource+0xd8>
 8006e56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e5a:	f200 8087 	bhi.w	8006f6c <HAL_TIM_ConfigClockSource+0x170>
 8006e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e62:	f000 8086 	beq.w	8006f72 <HAL_TIM_ConfigClockSource+0x176>
 8006e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e6a:	d87f      	bhi.n	8006f6c <HAL_TIM_ConfigClockSource+0x170>
 8006e6c:	2b70      	cmp	r3, #112	; 0x70
 8006e6e:	d01a      	beq.n	8006ea6 <HAL_TIM_ConfigClockSource+0xaa>
 8006e70:	2b70      	cmp	r3, #112	; 0x70
 8006e72:	d87b      	bhi.n	8006f6c <HAL_TIM_ConfigClockSource+0x170>
 8006e74:	2b60      	cmp	r3, #96	; 0x60
 8006e76:	d050      	beq.n	8006f1a <HAL_TIM_ConfigClockSource+0x11e>
 8006e78:	2b60      	cmp	r3, #96	; 0x60
 8006e7a:	d877      	bhi.n	8006f6c <HAL_TIM_ConfigClockSource+0x170>
 8006e7c:	2b50      	cmp	r3, #80	; 0x50
 8006e7e:	d03c      	beq.n	8006efa <HAL_TIM_ConfigClockSource+0xfe>
 8006e80:	2b50      	cmp	r3, #80	; 0x50
 8006e82:	d873      	bhi.n	8006f6c <HAL_TIM_ConfigClockSource+0x170>
 8006e84:	2b40      	cmp	r3, #64	; 0x40
 8006e86:	d058      	beq.n	8006f3a <HAL_TIM_ConfigClockSource+0x13e>
 8006e88:	2b40      	cmp	r3, #64	; 0x40
 8006e8a:	d86f      	bhi.n	8006f6c <HAL_TIM_ConfigClockSource+0x170>
 8006e8c:	2b30      	cmp	r3, #48	; 0x30
 8006e8e:	d064      	beq.n	8006f5a <HAL_TIM_ConfigClockSource+0x15e>
 8006e90:	2b30      	cmp	r3, #48	; 0x30
 8006e92:	d86b      	bhi.n	8006f6c <HAL_TIM_ConfigClockSource+0x170>
 8006e94:	2b20      	cmp	r3, #32
 8006e96:	d060      	beq.n	8006f5a <HAL_TIM_ConfigClockSource+0x15e>
 8006e98:	2b20      	cmp	r3, #32
 8006e9a:	d867      	bhi.n	8006f6c <HAL_TIM_ConfigClockSource+0x170>
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d05c      	beq.n	8006f5a <HAL_TIM_ConfigClockSource+0x15e>
 8006ea0:	2b10      	cmp	r3, #16
 8006ea2:	d05a      	beq.n	8006f5a <HAL_TIM_ConfigClockSource+0x15e>
 8006ea4:	e062      	b.n	8006f6c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006eb6:	f000 fcab 	bl	8007810 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ec8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68ba      	ldr	r2, [r7, #8]
 8006ed0:	609a      	str	r2, [r3, #8]
      break;
 8006ed2:	e04f      	b.n	8006f74 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ee4:	f000 fc94 	bl	8007810 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	689a      	ldr	r2, [r3, #8]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ef6:	609a      	str	r2, [r3, #8]
      break;
 8006ef8:	e03c      	b.n	8006f74 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f06:	461a      	mov	r2, r3
 8006f08:	f000 fc08 	bl	800771c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2150      	movs	r1, #80	; 0x50
 8006f12:	4618      	mov	r0, r3
 8006f14:	f000 fc61 	bl	80077da <TIM_ITRx_SetConfig>
      break;
 8006f18:	e02c      	b.n	8006f74 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f26:	461a      	mov	r2, r3
 8006f28:	f000 fc27 	bl	800777a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2160      	movs	r1, #96	; 0x60
 8006f32:	4618      	mov	r0, r3
 8006f34:	f000 fc51 	bl	80077da <TIM_ITRx_SetConfig>
      break;
 8006f38:	e01c      	b.n	8006f74 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f46:	461a      	mov	r2, r3
 8006f48:	f000 fbe8 	bl	800771c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2140      	movs	r1, #64	; 0x40
 8006f52:	4618      	mov	r0, r3
 8006f54:	f000 fc41 	bl	80077da <TIM_ITRx_SetConfig>
      break;
 8006f58:	e00c      	b.n	8006f74 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4619      	mov	r1, r3
 8006f64:	4610      	mov	r0, r2
 8006f66:	f000 fc38 	bl	80077da <TIM_ITRx_SetConfig>
      break;
 8006f6a:	e003      	b.n	8006f74 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8006f70:	e000      	b.n	8006f74 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006f72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006f8e:	b480      	push	{r7}
 8006f90:	b083      	sub	sp, #12
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006f96:	bf00      	nop
 8006f98:	370c      	adds	r7, #12
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr

08006fa2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006fa2:	b480      	push	{r7}
 8006fa4:	b083      	sub	sp, #12
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006faa:	bf00      	nop
 8006fac:	370c      	adds	r7, #12
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr

08006fb6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b084      	sub	sp, #16
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d107      	bne.n	8006fde <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fdc:	e02a      	b.n	8007034 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d107      	bne.n	8006ff8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2202      	movs	r2, #2
 8006fec:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ff6:	e01d      	b.n	8007034 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d107      	bne.n	8007012 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2204      	movs	r2, #4
 8007006:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007010:	e010      	b.n	8007034 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	429a      	cmp	r2, r3
 800701a:	d107      	bne.n	800702c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2208      	movs	r2, #8
 8007020:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2201      	movs	r2, #1
 8007026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800702a:	e003      	b.n	8007034 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f7ff ffb4 	bl	8006fa2 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2200      	movs	r2, #0
 800703e:	771a      	strb	r2, [r3, #28]
}
 8007040:	bf00      	nop
 8007042:	3710      	adds	r7, #16
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007054:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	429a      	cmp	r2, r3
 800705e:	d10b      	bne.n	8007078 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2201      	movs	r2, #1
 8007064:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	69db      	ldr	r3, [r3, #28]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d136      	bne.n	80070dc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007076:	e031      	b.n	80070dc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	429a      	cmp	r2, r3
 8007080:	d10b      	bne.n	800709a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2202      	movs	r2, #2
 8007086:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	69db      	ldr	r3, [r3, #28]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d125      	bne.n	80070dc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007098:	e020      	b.n	80070dc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d10b      	bne.n	80070bc <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2204      	movs	r2, #4
 80070a8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	69db      	ldr	r3, [r3, #28]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d114      	bne.n	80070dc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2201      	movs	r2, #1
 80070b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070ba:	e00f      	b.n	80070dc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d10a      	bne.n	80070dc <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2208      	movs	r2, #8
 80070ca:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	69db      	ldr	r3, [r3, #28]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d103      	bne.n	80070dc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070dc:	68f8      	ldr	r0, [r7, #12]
 80070de:	f003 f963 	bl	800a3a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	771a      	strb	r2, [r3, #28]
  //g_tim_pwm_transfer_cmplt = true;

}
 80070e8:	bf00      	nop
 80070ea:	3710      	adds	r7, #16
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070fc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	429a      	cmp	r2, r3
 8007106:	d103      	bne.n	8007110 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2201      	movs	r2, #1
 800710c:	771a      	strb	r2, [r3, #28]
 800710e:	e019      	b.n	8007144 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	429a      	cmp	r2, r3
 8007118:	d103      	bne.n	8007122 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2202      	movs	r2, #2
 800711e:	771a      	strb	r2, [r3, #28]
 8007120:	e010      	b.n	8007144 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	429a      	cmp	r2, r3
 800712a:	d103      	bne.n	8007134 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2204      	movs	r2, #4
 8007130:	771a      	strb	r2, [r3, #28]
 8007132:	e007      	b.n	8007144 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	429a      	cmp	r2, r3
 800713c:	d102      	bne.n	8007144 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2208      	movs	r2, #8
 8007142:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8007144:	68f8      	ldr	r0, [r7, #12]
 8007146:	f7ff ff22 	bl	8006f8e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2200      	movs	r2, #0
 800714e:	771a      	strb	r2, [r3, #28]
}
 8007150:	bf00      	nop
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a2a      	ldr	r2, [pc, #168]	; (8007214 <TIM_Base_SetConfig+0xbc>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d003      	beq.n	8007178 <TIM_Base_SetConfig+0x20>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007176:	d108      	bne.n	800718a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800717e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	4313      	orrs	r3, r2
 8007188:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a21      	ldr	r2, [pc, #132]	; (8007214 <TIM_Base_SetConfig+0xbc>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d00b      	beq.n	80071aa <TIM_Base_SetConfig+0x52>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007198:	d007      	beq.n	80071aa <TIM_Base_SetConfig+0x52>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a1e      	ldr	r2, [pc, #120]	; (8007218 <TIM_Base_SetConfig+0xc0>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d003      	beq.n	80071aa <TIM_Base_SetConfig+0x52>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a1d      	ldr	r2, [pc, #116]	; (800721c <TIM_Base_SetConfig+0xc4>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d108      	bne.n	80071bc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	695b      	ldr	r3, [r3, #20]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	689a      	ldr	r2, [r3, #8]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a0c      	ldr	r2, [pc, #48]	; (8007214 <TIM_Base_SetConfig+0xbc>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d007      	beq.n	80071f8 <TIM_Base_SetConfig+0xa0>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a0b      	ldr	r2, [pc, #44]	; (8007218 <TIM_Base_SetConfig+0xc0>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d003      	beq.n	80071f8 <TIM_Base_SetConfig+0xa0>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a0a      	ldr	r2, [pc, #40]	; (800721c <TIM_Base_SetConfig+0xc4>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d103      	bne.n	8007200 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	691a      	ldr	r2, [r3, #16]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	615a      	str	r2, [r3, #20]
}
 8007206:	bf00      	nop
 8007208:	3714      	adds	r7, #20
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	40012c00 	.word	0x40012c00
 8007218:	40014000 	.word	0x40014000
 800721c:	40014400 	.word	0x40014400

08007220 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007220:	b480      	push	{r7}
 8007222:	b087      	sub	sp, #28
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	f023 0201 	bic.w	r2, r3, #1
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a1b      	ldr	r3, [r3, #32]
 800723a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800724e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f023 0303 	bic.w	r3, r3, #3
 800725a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	4313      	orrs	r3, r2
 8007264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	f023 0302 	bic.w	r3, r3, #2
 800726c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	697a      	ldr	r2, [r7, #20]
 8007274:	4313      	orrs	r3, r2
 8007276:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a24      	ldr	r2, [pc, #144]	; (800730c <TIM_OC1_SetConfig+0xec>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d007      	beq.n	8007290 <TIM_OC1_SetConfig+0x70>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a23      	ldr	r2, [pc, #140]	; (8007310 <TIM_OC1_SetConfig+0xf0>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d003      	beq.n	8007290 <TIM_OC1_SetConfig+0x70>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4a22      	ldr	r2, [pc, #136]	; (8007314 <TIM_OC1_SetConfig+0xf4>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d10c      	bne.n	80072aa <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	f023 0308 	bic.w	r3, r3, #8
 8007296:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	697a      	ldr	r2, [r7, #20]
 800729e:	4313      	orrs	r3, r2
 80072a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	f023 0304 	bic.w	r3, r3, #4
 80072a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4a17      	ldr	r2, [pc, #92]	; (800730c <TIM_OC1_SetConfig+0xec>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d007      	beq.n	80072c2 <TIM_OC1_SetConfig+0xa2>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a16      	ldr	r2, [pc, #88]	; (8007310 <TIM_OC1_SetConfig+0xf0>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d003      	beq.n	80072c2 <TIM_OC1_SetConfig+0xa2>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a15      	ldr	r2, [pc, #84]	; (8007314 <TIM_OC1_SetConfig+0xf4>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d111      	bne.n	80072e6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	695b      	ldr	r3, [r3, #20]
 80072d6:	693a      	ldr	r2, [r7, #16]
 80072d8:	4313      	orrs	r3, r2
 80072da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	699b      	ldr	r3, [r3, #24]
 80072e0:	693a      	ldr	r2, [r7, #16]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	693a      	ldr	r2, [r7, #16]
 80072ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	685a      	ldr	r2, [r3, #4]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	697a      	ldr	r2, [r7, #20]
 80072fe:	621a      	str	r2, [r3, #32]
}
 8007300:	bf00      	nop
 8007302:	371c      	adds	r7, #28
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr
 800730c:	40012c00 	.word	0x40012c00
 8007310:	40014000 	.word	0x40014000
 8007314:	40014400 	.word	0x40014400

08007318 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007318:	b480      	push	{r7}
 800731a:	b087      	sub	sp, #28
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a1b      	ldr	r3, [r3, #32]
 8007326:	f023 0210 	bic.w	r2, r3, #16
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a1b      	ldr	r3, [r3, #32]
 8007332:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	699b      	ldr	r3, [r3, #24]
 800733e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800734a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007352:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	021b      	lsls	r3, r3, #8
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	4313      	orrs	r3, r2
 800735e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	f023 0320 	bic.w	r3, r3, #32
 8007366:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	011b      	lsls	r3, r3, #4
 800736e:	697a      	ldr	r2, [r7, #20]
 8007370:	4313      	orrs	r3, r2
 8007372:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	4a22      	ldr	r2, [pc, #136]	; (8007400 <TIM_OC2_SetConfig+0xe8>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d10d      	bne.n	8007398 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007382:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	011b      	lsls	r3, r3, #4
 800738a:	697a      	ldr	r2, [r7, #20]
 800738c:	4313      	orrs	r3, r2
 800738e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007396:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4a19      	ldr	r2, [pc, #100]	; (8007400 <TIM_OC2_SetConfig+0xe8>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d007      	beq.n	80073b0 <TIM_OC2_SetConfig+0x98>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	4a18      	ldr	r2, [pc, #96]	; (8007404 <TIM_OC2_SetConfig+0xec>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d003      	beq.n	80073b0 <TIM_OC2_SetConfig+0x98>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4a17      	ldr	r2, [pc, #92]	; (8007408 <TIM_OC2_SetConfig+0xf0>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d113      	bne.n	80073d8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	695b      	ldr	r3, [r3, #20]
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	693a      	ldr	r2, [r7, #16]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	699b      	ldr	r3, [r3, #24]
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	693a      	ldr	r2, [r7, #16]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	693a      	ldr	r2, [r7, #16]
 80073dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	685a      	ldr	r2, [r3, #4]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	697a      	ldr	r2, [r7, #20]
 80073f0:	621a      	str	r2, [r3, #32]
}
 80073f2:	bf00      	nop
 80073f4:	371c      	adds	r7, #28
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	40012c00 	.word	0x40012c00
 8007404:	40014000 	.word	0x40014000
 8007408:	40014400 	.word	0x40014400

0800740c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800740c:	b480      	push	{r7}
 800740e:	b087      	sub	sp, #28
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a1b      	ldr	r3, [r3, #32]
 800741a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a1b      	ldr	r3, [r3, #32]
 8007426:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	69db      	ldr	r3, [r3, #28]
 8007432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800743a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800743e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f023 0303 	bic.w	r3, r3, #3
 8007446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	4313      	orrs	r3, r2
 8007450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007458:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	021b      	lsls	r3, r3, #8
 8007460:	697a      	ldr	r2, [r7, #20]
 8007462:	4313      	orrs	r3, r2
 8007464:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a21      	ldr	r2, [pc, #132]	; (80074f0 <TIM_OC3_SetConfig+0xe4>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d10d      	bne.n	800748a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007474:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	021b      	lsls	r3, r3, #8
 800747c:	697a      	ldr	r2, [r7, #20]
 800747e:	4313      	orrs	r3, r2
 8007480:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007488:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a18      	ldr	r2, [pc, #96]	; (80074f0 <TIM_OC3_SetConfig+0xe4>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d007      	beq.n	80074a2 <TIM_OC3_SetConfig+0x96>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a17      	ldr	r2, [pc, #92]	; (80074f4 <TIM_OC3_SetConfig+0xe8>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d003      	beq.n	80074a2 <TIM_OC3_SetConfig+0x96>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a16      	ldr	r2, [pc, #88]	; (80074f8 <TIM_OC3_SetConfig+0xec>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d113      	bne.n	80074ca <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	695b      	ldr	r3, [r3, #20]
 80074b6:	011b      	lsls	r3, r3, #4
 80074b8:	693a      	ldr	r2, [r7, #16]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	699b      	ldr	r3, [r3, #24]
 80074c2:	011b      	lsls	r3, r3, #4
 80074c4:	693a      	ldr	r2, [r7, #16]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	693a      	ldr	r2, [r7, #16]
 80074ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	68fa      	ldr	r2, [r7, #12]
 80074d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	685a      	ldr	r2, [r3, #4]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	697a      	ldr	r2, [r7, #20]
 80074e2:	621a      	str	r2, [r3, #32]
}
 80074e4:	bf00      	nop
 80074e6:	371c      	adds	r7, #28
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr
 80074f0:	40012c00 	.word	0x40012c00
 80074f4:	40014000 	.word	0x40014000
 80074f8:	40014400 	.word	0x40014400

080074fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b087      	sub	sp, #28
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a1b      	ldr	r3, [r3, #32]
 800750a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6a1b      	ldr	r3, [r3, #32]
 8007516:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	69db      	ldr	r3, [r3, #28]
 8007522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800752a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800752e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007536:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	021b      	lsls	r3, r3, #8
 800753e:	68fa      	ldr	r2, [r7, #12]
 8007540:	4313      	orrs	r3, r2
 8007542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800754a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	031b      	lsls	r3, r3, #12
 8007552:	693a      	ldr	r2, [r7, #16]
 8007554:	4313      	orrs	r3, r2
 8007556:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a14      	ldr	r2, [pc, #80]	; (80075ac <TIM_OC4_SetConfig+0xb0>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d007      	beq.n	8007570 <TIM_OC4_SetConfig+0x74>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4a13      	ldr	r2, [pc, #76]	; (80075b0 <TIM_OC4_SetConfig+0xb4>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d003      	beq.n	8007570 <TIM_OC4_SetConfig+0x74>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a12      	ldr	r2, [pc, #72]	; (80075b4 <TIM_OC4_SetConfig+0xb8>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d109      	bne.n	8007584 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007576:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	695b      	ldr	r3, [r3, #20]
 800757c:	019b      	lsls	r3, r3, #6
 800757e:	697a      	ldr	r2, [r7, #20]
 8007580:	4313      	orrs	r3, r2
 8007582:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	697a      	ldr	r2, [r7, #20]
 8007588:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	68fa      	ldr	r2, [r7, #12]
 800758e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	685a      	ldr	r2, [r3, #4]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	693a      	ldr	r2, [r7, #16]
 800759c:	621a      	str	r2, [r3, #32]
}
 800759e:	bf00      	nop
 80075a0:	371c      	adds	r7, #28
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr
 80075aa:	bf00      	nop
 80075ac:	40012c00 	.word	0x40012c00
 80075b0:	40014000 	.word	0x40014000
 80075b4:	40014400 	.word	0x40014400

080075b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b087      	sub	sp, #28
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a1b      	ldr	r3, [r3, #32]
 80075c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a1b      	ldr	r3, [r3, #32]
 80075d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80075fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	041b      	lsls	r3, r3, #16
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	4313      	orrs	r3, r2
 8007608:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a13      	ldr	r2, [pc, #76]	; (800765c <TIM_OC5_SetConfig+0xa4>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d007      	beq.n	8007622 <TIM_OC5_SetConfig+0x6a>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a12      	ldr	r2, [pc, #72]	; (8007660 <TIM_OC5_SetConfig+0xa8>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d003      	beq.n	8007622 <TIM_OC5_SetConfig+0x6a>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a11      	ldr	r2, [pc, #68]	; (8007664 <TIM_OC5_SetConfig+0xac>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d109      	bne.n	8007636 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007628:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	695b      	ldr	r3, [r3, #20]
 800762e:	021b      	lsls	r3, r3, #8
 8007630:	697a      	ldr	r2, [r7, #20]
 8007632:	4313      	orrs	r3, r2
 8007634:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	697a      	ldr	r2, [r7, #20]
 800763a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	685a      	ldr	r2, [r3, #4]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	693a      	ldr	r2, [r7, #16]
 800764e:	621a      	str	r2, [r3, #32]
}
 8007650:	bf00      	nop
 8007652:	371c      	adds	r7, #28
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr
 800765c:	40012c00 	.word	0x40012c00
 8007660:	40014000 	.word	0x40014000
 8007664:	40014400 	.word	0x40014400

08007668 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007668:	b480      	push	{r7}
 800766a:	b087      	sub	sp, #28
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a1b      	ldr	r3, [r3, #32]
 8007676:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a1b      	ldr	r3, [r3, #32]
 8007682:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800768e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800769a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	021b      	lsls	r3, r3, #8
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	4313      	orrs	r3, r2
 80076a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80076ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	051b      	lsls	r3, r3, #20
 80076b6:	693a      	ldr	r2, [r7, #16]
 80076b8:	4313      	orrs	r3, r2
 80076ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	4a14      	ldr	r2, [pc, #80]	; (8007710 <TIM_OC6_SetConfig+0xa8>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d007      	beq.n	80076d4 <TIM_OC6_SetConfig+0x6c>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	4a13      	ldr	r2, [pc, #76]	; (8007714 <TIM_OC6_SetConfig+0xac>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d003      	beq.n	80076d4 <TIM_OC6_SetConfig+0x6c>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	4a12      	ldr	r2, [pc, #72]	; (8007718 <TIM_OC6_SetConfig+0xb0>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d109      	bne.n	80076e8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	695b      	ldr	r3, [r3, #20]
 80076e0:	029b      	lsls	r3, r3, #10
 80076e2:	697a      	ldr	r2, [r7, #20]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	697a      	ldr	r2, [r7, #20]
 80076ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	685a      	ldr	r2, [r3, #4]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	693a      	ldr	r2, [r7, #16]
 8007700:	621a      	str	r2, [r3, #32]
}
 8007702:	bf00      	nop
 8007704:	371c      	adds	r7, #28
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	40012c00 	.word	0x40012c00
 8007714:	40014000 	.word	0x40014000
 8007718:	40014400 	.word	0x40014400

0800771c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800771c:	b480      	push	{r7}
 800771e:	b087      	sub	sp, #28
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6a1b      	ldr	r3, [r3, #32]
 800772c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6a1b      	ldr	r3, [r3, #32]
 8007732:	f023 0201 	bic.w	r2, r3, #1
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	699b      	ldr	r3, [r3, #24]
 800773e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007746:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	011b      	lsls	r3, r3, #4
 800774c:	693a      	ldr	r2, [r7, #16]
 800774e:	4313      	orrs	r3, r2
 8007750:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	f023 030a 	bic.w	r3, r3, #10
 8007758:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800775a:	697a      	ldr	r2, [r7, #20]
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	4313      	orrs	r3, r2
 8007760:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	693a      	ldr	r2, [r7, #16]
 8007766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	621a      	str	r2, [r3, #32]
}
 800776e:	bf00      	nop
 8007770:	371c      	adds	r7, #28
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr

0800777a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800777a:	b480      	push	{r7}
 800777c:	b087      	sub	sp, #28
 800777e:	af00      	add	r7, sp, #0
 8007780:	60f8      	str	r0, [r7, #12]
 8007782:	60b9      	str	r1, [r7, #8]
 8007784:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6a1b      	ldr	r3, [r3, #32]
 800778a:	f023 0210 	bic.w	r2, r3, #16
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	699b      	ldr	r3, [r3, #24]
 8007796:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6a1b      	ldr	r3, [r3, #32]
 800779c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80077a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	031b      	lsls	r3, r3, #12
 80077aa:	697a      	ldr	r2, [r7, #20]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80077b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	011b      	lsls	r3, r3, #4
 80077bc:	693a      	ldr	r2, [r7, #16]
 80077be:	4313      	orrs	r3, r2
 80077c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	697a      	ldr	r2, [r7, #20]
 80077c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	693a      	ldr	r2, [r7, #16]
 80077cc:	621a      	str	r2, [r3, #32]
}
 80077ce:	bf00      	nop
 80077d0:	371c      	adds	r7, #28
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr

080077da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80077da:	b480      	push	{r7}
 80077dc:	b085      	sub	sp, #20
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
 80077e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80077f2:	683a      	ldr	r2, [r7, #0]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	f043 0307 	orr.w	r3, r3, #7
 80077fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	609a      	str	r2, [r3, #8]
}
 8007804:	bf00      	nop
 8007806:	3714      	adds	r7, #20
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007810:	b480      	push	{r7}
 8007812:	b087      	sub	sp, #28
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	607a      	str	r2, [r7, #4]
 800781c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800782a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	021a      	lsls	r2, r3, #8
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	431a      	orrs	r2, r3
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	4313      	orrs	r3, r2
 8007838:	697a      	ldr	r2, [r7, #20]
 800783a:	4313      	orrs	r3, r2
 800783c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	697a      	ldr	r2, [r7, #20]
 8007842:	609a      	str	r2, [r3, #8]
}
 8007844:	bf00      	nop
 8007846:	371c      	adds	r7, #28
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007850:	b480      	push	{r7}
 8007852:	b087      	sub	sp, #28
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	f003 031f 	and.w	r3, r3, #31
 8007862:	2201      	movs	r2, #1
 8007864:	fa02 f303 	lsl.w	r3, r2, r3
 8007868:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6a1a      	ldr	r2, [r3, #32]
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	43db      	mvns	r3, r3
 8007872:	401a      	ands	r2, r3
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6a1a      	ldr	r2, [r3, #32]
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	f003 031f 	and.w	r3, r3, #31
 8007882:	6879      	ldr	r1, [r7, #4]
 8007884:	fa01 f303 	lsl.w	r3, r1, r3
 8007888:	431a      	orrs	r2, r3
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	621a      	str	r2, [r3, #32]
}
 800788e:	bf00      	nop
 8007890:	371c      	adds	r7, #28
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr
	...

0800789c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d101      	bne.n	80078b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80078b0:	2302      	movs	r3, #2
 80078b2:	e04f      	b.n	8007954 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2202      	movs	r2, #2
 80078c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a21      	ldr	r2, [pc, #132]	; (8007960 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d108      	bne.n	80078f0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80078e4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	4313      	orrs	r3, r2
 8007900:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a14      	ldr	r2, [pc, #80]	; (8007960 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d009      	beq.n	8007928 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800791c:	d004      	beq.n	8007928 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a10      	ldr	r2, [pc, #64]	; (8007964 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d10c      	bne.n	8007942 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800792e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	68ba      	ldr	r2, [r7, #8]
 8007936:	4313      	orrs	r3, r2
 8007938:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68ba      	ldr	r2, [r7, #8]
 8007940:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2201      	movs	r2, #1
 8007946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	4618      	mov	r0, r3
 8007956:	3714      	adds	r7, #20
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr
 8007960:	40012c00 	.word	0x40012c00
 8007964:	40014000 	.word	0x40014000

08007968 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007968:	b480      	push	{r7}
 800796a:	b085      	sub	sp, #20
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007972:	2300      	movs	r3, #0
 8007974:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800797c:	2b01      	cmp	r3, #1
 800797e:	d101      	bne.n	8007984 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007980:	2302      	movs	r3, #2
 8007982:	e060      	b.n	8007a46 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	4313      	orrs	r3, r2
 8007998:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	695b      	ldr	r3, [r3, #20]
 80079dc:	4313      	orrs	r3, r2
 80079de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ea:	4313      	orrs	r3, r2
 80079ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	041b      	lsls	r3, r3, #16
 80079fa:	4313      	orrs	r3, r2
 80079fc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a14      	ldr	r2, [pc, #80]	; (8007a54 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d115      	bne.n	8007a34 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a12:	051b      	lsls	r3, r3, #20
 8007a14:	4313      	orrs	r3, r2
 8007a16:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	69db      	ldr	r3, [r3, #28]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	6a1b      	ldr	r3, [r3, #32]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3714      	adds	r7, #20
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr
 8007a52:	bf00      	nop
 8007a54:	40012c00 	.word	0x40012c00

08007a58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d101      	bne.n	8007a6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	e040      	b.n	8007aec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d106      	bne.n	8007a80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 f873 	bl	8007b66 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2224      	movs	r2, #36	; 0x24
 8007a84:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f022 0201 	bic.w	r2, r2, #1
 8007a94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 fd06 	bl	80084a8 <UART_SetConfig>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d101      	bne.n	8007aa6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e022      	b.n	8007aec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d002      	beq.n	8007ab4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 ff54 	bl	800895c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	685a      	ldr	r2, [r3, #4]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ac2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	689a      	ldr	r2, [r3, #8]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ad2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f042 0201 	orr.w	r2, r2, #1
 8007ae2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 ffdb 	bl	8008aa0 <UART_CheckIdleState>
 8007aea:	4603      	mov	r3, r0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3708      	adds	r7, #8
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d101      	bne.n	8007b06 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	e02b      	b.n	8007b5e <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2224      	movs	r2, #36	; 0x24
 8007b0a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f022 0201 	bic.w	r2, r2, #1
 8007b1a:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2200      	movs	r2, #0
 8007b22:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	2200      	movs	r2, #0
 8007b32:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 f820 	bl	8007b7a <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3708      	adds	r7, #8
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8007b66:	b480      	push	{r7}
 8007b68:	b083      	sub	sp, #12
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8007b6e:	bf00      	nop
 8007b70:	370c      	adds	r7, #12
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr

08007b7a <HAL_UART_MspDeInit>:
  * @brief DeInitialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8007b7a:	b480      	push	{r7}
 8007b7c:	b083      	sub	sp, #12
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8007b82:	bf00      	nop
 8007b84:	370c      	adds	r7, #12
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr

08007b8e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b08a      	sub	sp, #40	; 0x28
 8007b92:	af02      	add	r7, sp, #8
 8007b94:	60f8      	str	r0, [r7, #12]
 8007b96:	60b9      	str	r1, [r7, #8]
 8007b98:	603b      	str	r3, [r7, #0]
 8007b9a:	4613      	mov	r3, r2
 8007b9c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ba2:	2b20      	cmp	r3, #32
 8007ba4:	f040 80bf 	bne.w	8007d26 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d002      	beq.n	8007bb4 <HAL_UART_Receive+0x26>
 8007bae:	88fb      	ldrh	r3, [r7, #6]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d101      	bne.n	8007bb8 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e0b7      	b.n	8007d28 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d101      	bne.n	8007bc6 <HAL_UART_Receive+0x38>
 8007bc2:	2302      	movs	r3, #2
 8007bc4:	e0b0      	b.n	8007d28 <HAL_UART_Receive+0x19a>
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2222      	movs	r2, #34	; 0x22
 8007bda:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2200      	movs	r2, #0
 8007be0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007be2:	f7fc fa57 	bl	8004094 <HAL_GetTick>
 8007be6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	88fa      	ldrh	r2, [r7, #6]
 8007bec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	88fa      	ldrh	r2, [r7, #6]
 8007bf4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c00:	d10e      	bne.n	8007c20 <HAL_UART_Receive+0x92>
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d105      	bne.n	8007c16 <HAL_UART_Receive+0x88>
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007c10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c14:	e02d      	b.n	8007c72 <HAL_UART_Receive+0xe4>
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	22ff      	movs	r2, #255	; 0xff
 8007c1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c1e:	e028      	b.n	8007c72 <HAL_UART_Receive+0xe4>
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d10d      	bne.n	8007c44 <HAL_UART_Receive+0xb6>
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	691b      	ldr	r3, [r3, #16]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d104      	bne.n	8007c3a <HAL_UART_Receive+0xac>
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	22ff      	movs	r2, #255	; 0xff
 8007c34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c38:	e01b      	b.n	8007c72 <HAL_UART_Receive+0xe4>
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	227f      	movs	r2, #127	; 0x7f
 8007c3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c42:	e016      	b.n	8007c72 <HAL_UART_Receive+0xe4>
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c4c:	d10d      	bne.n	8007c6a <HAL_UART_Receive+0xdc>
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	691b      	ldr	r3, [r3, #16]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d104      	bne.n	8007c60 <HAL_UART_Receive+0xd2>
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	227f      	movs	r2, #127	; 0x7f
 8007c5a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c5e:	e008      	b.n	8007c72 <HAL_UART_Receive+0xe4>
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	223f      	movs	r2, #63	; 0x3f
 8007c64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c68:	e003      	b.n	8007c72 <HAL_UART_Receive+0xe4>
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c78:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c82:	d108      	bne.n	8007c96 <HAL_UART_Receive+0x108>
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	691b      	ldr	r3, [r3, #16]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d104      	bne.n	8007c96 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	61bb      	str	r3, [r7, #24]
 8007c94:	e003      	b.n	8007c9e <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007ca6:	e033      	b.n	8007d10 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	9300      	str	r3, [sp, #0]
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	2120      	movs	r1, #32
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	f000 ff3d 	bl	8008b32 <UART_WaitOnFlagUntilTimeout>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d001      	beq.n	8007cc2 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8007cbe:	2303      	movs	r3, #3
 8007cc0:	e032      	b.n	8007d28 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d10c      	bne.n	8007ce2 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007cce:	b29a      	uxth	r2, r3
 8007cd0:	8a7b      	ldrh	r3, [r7, #18]
 8007cd2:	4013      	ands	r3, r2
 8007cd4:	b29a      	uxth	r2, r3
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	3302      	adds	r3, #2
 8007cde:	61bb      	str	r3, [r7, #24]
 8007ce0:	e00d      	b.n	8007cfe <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	b2da      	uxtb	r2, r3
 8007cec:	8a7b      	ldrh	r3, [r7, #18]
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	4013      	ands	r3, r2
 8007cf2:	b2da      	uxtb	r2, r3
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	3b01      	subs	r3, #1
 8007d08:	b29a      	uxth	r2, r3
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d1c5      	bne.n	8007ca8 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2220      	movs	r2, #32
 8007d20:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007d22:	2300      	movs	r3, #0
 8007d24:	e000      	b.n	8007d28 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8007d26:	2302      	movs	r3, #2
  }
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3720      	adds	r7, #32
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b08b      	sub	sp, #44	; 0x2c
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	4613      	mov	r3, r2
 8007d3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d42:	2b20      	cmp	r3, #32
 8007d44:	d156      	bne.n	8007df4 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d002      	beq.n	8007d52 <HAL_UART_Transmit_IT+0x22>
 8007d4c:	88fb      	ldrh	r3, [r7, #6]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d101      	bne.n	8007d56 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e04f      	b.n	8007df6 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d101      	bne.n	8007d64 <HAL_UART_Transmit_IT+0x34>
 8007d60:	2302      	movs	r3, #2
 8007d62:	e048      	b.n	8007df6 <HAL_UART_Transmit_IT+0xc6>
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	68ba      	ldr	r2, [r7, #8]
 8007d70:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	88fa      	ldrh	r2, [r7, #6]
 8007d76:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	88fa      	ldrh	r2, [r7, #6]
 8007d7e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2200      	movs	r2, #0
 8007d86:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2221      	movs	r2, #33	; 0x21
 8007d94:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d9e:	d107      	bne.n	8007db0 <HAL_UART_Transmit_IT+0x80>
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	691b      	ldr	r3, [r3, #16]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d103      	bne.n	8007db0 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	4a16      	ldr	r2, [pc, #88]	; (8007e04 <HAL_UART_Transmit_IT+0xd4>)
 8007dac:	669a      	str	r2, [r3, #104]	; 0x68
 8007dae:	e002      	b.n	8007db6 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	4a15      	ldr	r2, [pc, #84]	; (8007e08 <HAL_UART_Transmit_IT+0xd8>)
 8007db4:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	e853 3f00 	ldrex	r3, [r3]
 8007dca:	613b      	str	r3, [r7, #16]
   return(result);
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	461a      	mov	r2, r3
 8007dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ddc:	623b      	str	r3, [r7, #32]
 8007dde:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de0:	69f9      	ldr	r1, [r7, #28]
 8007de2:	6a3a      	ldr	r2, [r7, #32]
 8007de4:	e841 2300 	strex	r3, r2, [r1]
 8007de8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007dea:	69bb      	ldr	r3, [r7, #24]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d1e6      	bne.n	8007dbe <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8007df0:	2300      	movs	r3, #0
 8007df2:	e000      	b.n	8007df6 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8007df4:	2302      	movs	r3, #2
  }
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	372c      	adds	r7, #44	; 0x2c
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	08008ffb 	.word	0x08008ffb
 8007e08:	08008f43 	.word	0x08008f43

08007e0c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b08a      	sub	sp, #40	; 0x28
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	4613      	mov	r3, r2
 8007e18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e1e:	2b20      	cmp	r3, #32
 8007e20:	d142      	bne.n	8007ea8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d002      	beq.n	8007e2e <HAL_UART_Receive_IT+0x22>
 8007e28:	88fb      	ldrh	r3, [r7, #6]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d101      	bne.n	8007e32 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e03b      	b.n	8007eaa <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d101      	bne.n	8007e40 <HAL_UART_Receive_IT+0x34>
 8007e3c:	2302      	movs	r3, #2
 8007e3e:	e034      	b.n	8007eaa <HAL_UART_Receive_IT+0x9e>
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2201      	movs	r2, #1
 8007e44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a18      	ldr	r2, [pc, #96]	; (8007eb4 <HAL_UART_Receive_IT+0xa8>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d01f      	beq.n	8007e98 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d018      	beq.n	8007e98 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	e853 3f00 	ldrex	r3, [r3]
 8007e72:	613b      	str	r3, [r7, #16]
   return(result);
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	461a      	mov	r2, r3
 8007e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e84:	623b      	str	r3, [r7, #32]
 8007e86:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e88:	69f9      	ldr	r1, [r7, #28]
 8007e8a:	6a3a      	ldr	r2, [r7, #32]
 8007e8c:	e841 2300 	strex	r3, r2, [r1]
 8007e90:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d1e6      	bne.n	8007e66 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007e98:	88fb      	ldrh	r3, [r7, #6]
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	68b9      	ldr	r1, [r7, #8]
 8007e9e:	68f8      	ldr	r0, [r7, #12]
 8007ea0:	f000 ff0c 	bl	8008cbc <UART_Start_Receive_IT>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	e000      	b.n	8007eaa <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007ea8:	2302      	movs	r3, #2
  }
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3728      	adds	r7, #40	; 0x28
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	40008000 	.word	0x40008000

08007eb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b0ba      	sub	sp, #232	; 0xe8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	69db      	ldr	r3, [r3, #28]
 8007ec6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007ede:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007ee2:	f640 030f 	movw	r3, #2063	; 0x80f
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007eec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d115      	bne.n	8007f20 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ef8:	f003 0320 	and.w	r3, r3, #32
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00f      	beq.n	8007f20 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f04:	f003 0320 	and.w	r3, r3, #32
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d009      	beq.n	8007f20 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f000 82a6 	beq.w	8008462 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	4798      	blx	r3
      }
      return;
 8007f1e:	e2a0      	b.n	8008462 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007f20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f000 8117 	beq.w	8008158 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007f2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f2e:	f003 0301 	and.w	r3, r3, #1
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d106      	bne.n	8007f44 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007f36:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007f3a:	4b85      	ldr	r3, [pc, #532]	; (8008150 <HAL_UART_IRQHandler+0x298>)
 8007f3c:	4013      	ands	r3, r2
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	f000 810a 	beq.w	8008158 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f48:	f003 0301 	and.w	r3, r3, #1
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d011      	beq.n	8007f74 <HAL_UART_IRQHandler+0xbc>
 8007f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00b      	beq.n	8007f74 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2201      	movs	r2, #1
 8007f62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f6a:	f043 0201 	orr.w	r2, r3, #1
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f78:	f003 0302 	and.w	r3, r3, #2
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d011      	beq.n	8007fa4 <HAL_UART_IRQHandler+0xec>
 8007f80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f84:	f003 0301 	and.w	r3, r3, #1
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d00b      	beq.n	8007fa4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2202      	movs	r2, #2
 8007f92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f9a:	f043 0204 	orr.w	r2, r3, #4
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fa8:	f003 0304 	and.w	r3, r3, #4
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d011      	beq.n	8007fd4 <HAL_UART_IRQHandler+0x11c>
 8007fb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fb4:	f003 0301 	and.w	r3, r3, #1
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d00b      	beq.n	8007fd4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2204      	movs	r2, #4
 8007fc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fca:	f043 0202 	orr.w	r2, r3, #2
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fd8:	f003 0308 	and.w	r3, r3, #8
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d017      	beq.n	8008010 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fe4:	f003 0320 	and.w	r3, r3, #32
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d105      	bne.n	8007ff8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007fec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ff0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d00b      	beq.n	8008010 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2208      	movs	r2, #8
 8007ffe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008006:	f043 0208 	orr.w	r2, r3, #8
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008014:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008018:	2b00      	cmp	r3, #0
 800801a:	d012      	beq.n	8008042 <HAL_UART_IRQHandler+0x18a>
 800801c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008020:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008024:	2b00      	cmp	r3, #0
 8008026:	d00c      	beq.n	8008042 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008030:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008038:	f043 0220 	orr.w	r2, r3, #32
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008048:	2b00      	cmp	r3, #0
 800804a:	f000 820c 	beq.w	8008466 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800804e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008052:	f003 0320 	and.w	r3, r3, #32
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00d      	beq.n	8008076 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800805a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800805e:	f003 0320 	and.w	r3, r3, #32
 8008062:	2b00      	cmp	r3, #0
 8008064:	d007      	beq.n	8008076 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800806a:	2b00      	cmp	r3, #0
 800806c:	d003      	beq.n	8008076 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800807c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800808a:	2b40      	cmp	r3, #64	; 0x40
 800808c:	d005      	beq.n	800809a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800808e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008092:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008096:	2b00      	cmp	r3, #0
 8008098:	d04f      	beq.n	800813a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 fed8 	bl	8008e50 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080aa:	2b40      	cmp	r3, #64	; 0x40
 80080ac:	d141      	bne.n	8008132 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	3308      	adds	r3, #8
 80080b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080bc:	e853 3f00 	ldrex	r3, [r3]
 80080c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80080c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	3308      	adds	r3, #8
 80080d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80080da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80080de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80080e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80080ea:	e841 2300 	strex	r3, r2, [r1]
 80080ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80080f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d1d9      	bne.n	80080ae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d013      	beq.n	800812a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008106:	4a13      	ldr	r2, [pc, #76]	; (8008154 <HAL_UART_IRQHandler+0x29c>)
 8008108:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800810e:	4618      	mov	r0, r3
 8008110:	f7fc fada 	bl	80046c8 <HAL_DMA_Abort_IT>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d017      	beq.n	800814a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800811e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008124:	4610      	mov	r0, r2
 8008126:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008128:	e00f      	b.n	800814a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 f9a6 	bl	800847c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008130:	e00b      	b.n	800814a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 f9a2 	bl	800847c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008138:	e007      	b.n	800814a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 f99e 	bl	800847c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008148:	e18d      	b.n	8008466 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800814a:	bf00      	nop
    return;
 800814c:	e18b      	b.n	8008466 <HAL_UART_IRQHandler+0x5ae>
 800814e:	bf00      	nop
 8008150:	04000120 	.word	0x04000120
 8008154:	08008f17 	.word	0x08008f17

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800815c:	2b01      	cmp	r3, #1
 800815e:	f040 8146 	bne.w	80083ee <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008166:	f003 0310 	and.w	r3, r3, #16
 800816a:	2b00      	cmp	r3, #0
 800816c:	f000 813f 	beq.w	80083ee <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008174:	f003 0310 	and.w	r3, r3, #16
 8008178:	2b00      	cmp	r3, #0
 800817a:	f000 8138 	beq.w	80083ee <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2210      	movs	r2, #16
 8008184:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008190:	2b40      	cmp	r3, #64	; 0x40
 8008192:	f040 80b4 	bne.w	80082fe <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80081a2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	f000 815f 	beq.w	800846a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80081b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80081b6:	429a      	cmp	r2, r3
 80081b8:	f080 8157 	bcs.w	800846a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80081c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f003 0320 	and.w	r3, r3, #32
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f040 8085 	bne.w	80082e2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80081e4:	e853 3f00 	ldrex	r3, [r3]
 80081e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80081ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80081f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	461a      	mov	r2, r3
 80081fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008202:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008206:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800820e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008212:	e841 2300 	strex	r3, r2, [r1]
 8008216:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800821a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800821e:	2b00      	cmp	r3, #0
 8008220:	d1da      	bne.n	80081d8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	3308      	adds	r3, #8
 8008228:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800822c:	e853 3f00 	ldrex	r3, [r3]
 8008230:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008232:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008234:	f023 0301 	bic.w	r3, r3, #1
 8008238:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	3308      	adds	r3, #8
 8008242:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008246:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800824a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800824c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800824e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008252:	e841 2300 	strex	r3, r2, [r1]
 8008256:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008258:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800825a:	2b00      	cmp	r3, #0
 800825c:	d1e1      	bne.n	8008222 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	3308      	adds	r3, #8
 8008264:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008266:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008268:	e853 3f00 	ldrex	r3, [r3]
 800826c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800826e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008270:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008274:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	3308      	adds	r3, #8
 800827e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008282:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008284:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008286:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008288:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800828a:	e841 2300 	strex	r3, r2, [r1]
 800828e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008290:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008292:	2b00      	cmp	r3, #0
 8008294:	d1e3      	bne.n	800825e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2220      	movs	r2, #32
 800829a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082aa:	e853 3f00 	ldrex	r3, [r3]
 80082ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80082b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082b2:	f023 0310 	bic.w	r3, r3, #16
 80082b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	461a      	mov	r2, r3
 80082c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80082c6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80082ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80082cc:	e841 2300 	strex	r3, r2, [r1]
 80082d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80082d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d1e4      	bne.n	80082a2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082dc:	4618      	mov	r0, r3
 80082de:	f7fc f9b5 	bl	800464c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	1ad3      	subs	r3, r2, r3
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	4619      	mov	r1, r3
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 f8ca 	bl	8008490 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80082fc:	e0b5      	b.n	800846a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800830a:	b29b      	uxth	r3, r3
 800830c:	1ad3      	subs	r3, r2, r3
 800830e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008318:	b29b      	uxth	r3, r3
 800831a:	2b00      	cmp	r3, #0
 800831c:	f000 80a7 	beq.w	800846e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8008320:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008324:	2b00      	cmp	r3, #0
 8008326:	f000 80a2 	beq.w	800846e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008332:	e853 3f00 	ldrex	r3, [r3]
 8008336:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800833a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800833e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	461a      	mov	r2, r3
 8008348:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800834c:	647b      	str	r3, [r7, #68]	; 0x44
 800834e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008350:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008352:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008354:	e841 2300 	strex	r3, r2, [r1]
 8008358:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800835a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800835c:	2b00      	cmp	r3, #0
 800835e:	d1e4      	bne.n	800832a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	3308      	adds	r3, #8
 8008366:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836a:	e853 3f00 	ldrex	r3, [r3]
 800836e:	623b      	str	r3, [r7, #32]
   return(result);
 8008370:	6a3b      	ldr	r3, [r7, #32]
 8008372:	f023 0301 	bic.w	r3, r3, #1
 8008376:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	3308      	adds	r3, #8
 8008380:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008384:	633a      	str	r2, [r7, #48]	; 0x30
 8008386:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008388:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800838a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800838c:	e841 2300 	strex	r3, r2, [r1]
 8008390:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008394:	2b00      	cmp	r3, #0
 8008396:	d1e3      	bne.n	8008360 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2220      	movs	r2, #32
 800839c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	e853 3f00 	ldrex	r3, [r3]
 80083b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f023 0310 	bic.w	r3, r3, #16
 80083be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	461a      	mov	r2, r3
 80083c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80083cc:	61fb      	str	r3, [r7, #28]
 80083ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d0:	69b9      	ldr	r1, [r7, #24]
 80083d2:	69fa      	ldr	r2, [r7, #28]
 80083d4:	e841 2300 	strex	r3, r2, [r1]
 80083d8:	617b      	str	r3, [r7, #20]
   return(result);
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d1e4      	bne.n	80083aa <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80083e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80083e4:	4619      	mov	r1, r3
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 f852 	bl	8008490 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80083ec:	e03f      	b.n	800846e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80083ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00e      	beq.n	8008418 <HAL_UART_IRQHandler+0x560>
 80083fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008402:	2b00      	cmp	r3, #0
 8008404:	d008      	beq.n	8008418 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800840e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 ffdc 	bl	80093ce <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008416:	e02d      	b.n	8008474 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800841c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008420:	2b00      	cmp	r3, #0
 8008422:	d00e      	beq.n	8008442 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800842c:	2b00      	cmp	r3, #0
 800842e:	d008      	beq.n	8008442 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008434:	2b00      	cmp	r3, #0
 8008436:	d01c      	beq.n	8008472 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	4798      	blx	r3
    }
    return;
 8008440:	e017      	b.n	8008472 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800844a:	2b00      	cmp	r3, #0
 800844c:	d012      	beq.n	8008474 <HAL_UART_IRQHandler+0x5bc>
 800844e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008456:	2b00      	cmp	r3, #0
 8008458:	d00c      	beq.n	8008474 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 fe2d 	bl	80090ba <UART_EndTransmit_IT>
    return;
 8008460:	e008      	b.n	8008474 <HAL_UART_IRQHandler+0x5bc>
      return;
 8008462:	bf00      	nop
 8008464:	e006      	b.n	8008474 <HAL_UART_IRQHandler+0x5bc>
    return;
 8008466:	bf00      	nop
 8008468:	e004      	b.n	8008474 <HAL_UART_IRQHandler+0x5bc>
      return;
 800846a:	bf00      	nop
 800846c:	e002      	b.n	8008474 <HAL_UART_IRQHandler+0x5bc>
      return;
 800846e:	bf00      	nop
 8008470:	e000      	b.n	8008474 <HAL_UART_IRQHandler+0x5bc>
    return;
 8008472:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008474:	37e8      	adds	r7, #232	; 0xe8
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop

0800847c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008484:	bf00      	nop
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	460b      	mov	r3, r1
 800849a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800849c:	bf00      	nop
 800849e:	370c      	adds	r7, #12
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr

080084a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084ac:	b08a      	sub	sp, #40	; 0x28
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80084b2:	2300      	movs	r3, #0
 80084b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	689a      	ldr	r2, [r3, #8]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	691b      	ldr	r3, [r3, #16]
 80084c0:	431a      	orrs	r2, r3
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	695b      	ldr	r3, [r3, #20]
 80084c6:	431a      	orrs	r2, r3
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	69db      	ldr	r3, [r3, #28]
 80084cc:	4313      	orrs	r3, r2
 80084ce:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	4b9e      	ldr	r3, [pc, #632]	; (8008750 <UART_SetConfig+0x2a8>)
 80084d8:	4013      	ands	r3, r2
 80084da:	68fa      	ldr	r2, [r7, #12]
 80084dc:	6812      	ldr	r2, [r2, #0]
 80084de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084e0:	430b      	orrs	r3, r1
 80084e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	68da      	ldr	r2, [r3, #12]
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	430a      	orrs	r2, r1
 80084f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	699b      	ldr	r3, [r3, #24]
 80084fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a93      	ldr	r2, [pc, #588]	; (8008754 <UART_SetConfig+0x2ac>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d004      	beq.n	8008514 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	6a1b      	ldr	r3, [r3, #32]
 800850e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008510:	4313      	orrs	r3, r2
 8008512:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008524:	430a      	orrs	r2, r1
 8008526:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a8a      	ldr	r2, [pc, #552]	; (8008758 <UART_SetConfig+0x2b0>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d126      	bne.n	8008580 <UART_SetConfig+0xd8>
 8008532:	4b8a      	ldr	r3, [pc, #552]	; (800875c <UART_SetConfig+0x2b4>)
 8008534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008538:	f003 0303 	and.w	r3, r3, #3
 800853c:	2b03      	cmp	r3, #3
 800853e:	d81b      	bhi.n	8008578 <UART_SetConfig+0xd0>
 8008540:	a201      	add	r2, pc, #4	; (adr r2, 8008548 <UART_SetConfig+0xa0>)
 8008542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008546:	bf00      	nop
 8008548:	08008559 	.word	0x08008559
 800854c:	08008569 	.word	0x08008569
 8008550:	08008561 	.word	0x08008561
 8008554:	08008571 	.word	0x08008571
 8008558:	2301      	movs	r3, #1
 800855a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800855e:	e0ab      	b.n	80086b8 <UART_SetConfig+0x210>
 8008560:	2302      	movs	r3, #2
 8008562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008566:	e0a7      	b.n	80086b8 <UART_SetConfig+0x210>
 8008568:	2304      	movs	r3, #4
 800856a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800856e:	e0a3      	b.n	80086b8 <UART_SetConfig+0x210>
 8008570:	2308      	movs	r3, #8
 8008572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008576:	e09f      	b.n	80086b8 <UART_SetConfig+0x210>
 8008578:	2310      	movs	r3, #16
 800857a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800857e:	e09b      	b.n	80086b8 <UART_SetConfig+0x210>
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a76      	ldr	r2, [pc, #472]	; (8008760 <UART_SetConfig+0x2b8>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d138      	bne.n	80085fc <UART_SetConfig+0x154>
 800858a:	4b74      	ldr	r3, [pc, #464]	; (800875c <UART_SetConfig+0x2b4>)
 800858c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008590:	f003 030c 	and.w	r3, r3, #12
 8008594:	2b0c      	cmp	r3, #12
 8008596:	d82d      	bhi.n	80085f4 <UART_SetConfig+0x14c>
 8008598:	a201      	add	r2, pc, #4	; (adr r2, 80085a0 <UART_SetConfig+0xf8>)
 800859a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800859e:	bf00      	nop
 80085a0:	080085d5 	.word	0x080085d5
 80085a4:	080085f5 	.word	0x080085f5
 80085a8:	080085f5 	.word	0x080085f5
 80085ac:	080085f5 	.word	0x080085f5
 80085b0:	080085e5 	.word	0x080085e5
 80085b4:	080085f5 	.word	0x080085f5
 80085b8:	080085f5 	.word	0x080085f5
 80085bc:	080085f5 	.word	0x080085f5
 80085c0:	080085dd 	.word	0x080085dd
 80085c4:	080085f5 	.word	0x080085f5
 80085c8:	080085f5 	.word	0x080085f5
 80085cc:	080085f5 	.word	0x080085f5
 80085d0:	080085ed 	.word	0x080085ed
 80085d4:	2300      	movs	r3, #0
 80085d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085da:	e06d      	b.n	80086b8 <UART_SetConfig+0x210>
 80085dc:	2302      	movs	r3, #2
 80085de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085e2:	e069      	b.n	80086b8 <UART_SetConfig+0x210>
 80085e4:	2304      	movs	r3, #4
 80085e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085ea:	e065      	b.n	80086b8 <UART_SetConfig+0x210>
 80085ec:	2308      	movs	r3, #8
 80085ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085f2:	e061      	b.n	80086b8 <UART_SetConfig+0x210>
 80085f4:	2310      	movs	r3, #16
 80085f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085fa:	e05d      	b.n	80086b8 <UART_SetConfig+0x210>
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a58      	ldr	r2, [pc, #352]	; (8008764 <UART_SetConfig+0x2bc>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d125      	bne.n	8008652 <UART_SetConfig+0x1aa>
 8008606:	4b55      	ldr	r3, [pc, #340]	; (800875c <UART_SetConfig+0x2b4>)
 8008608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800860c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008610:	2b30      	cmp	r3, #48	; 0x30
 8008612:	d016      	beq.n	8008642 <UART_SetConfig+0x19a>
 8008614:	2b30      	cmp	r3, #48	; 0x30
 8008616:	d818      	bhi.n	800864a <UART_SetConfig+0x1a2>
 8008618:	2b20      	cmp	r3, #32
 800861a:	d00a      	beq.n	8008632 <UART_SetConfig+0x18a>
 800861c:	2b20      	cmp	r3, #32
 800861e:	d814      	bhi.n	800864a <UART_SetConfig+0x1a2>
 8008620:	2b00      	cmp	r3, #0
 8008622:	d002      	beq.n	800862a <UART_SetConfig+0x182>
 8008624:	2b10      	cmp	r3, #16
 8008626:	d008      	beq.n	800863a <UART_SetConfig+0x192>
 8008628:	e00f      	b.n	800864a <UART_SetConfig+0x1a2>
 800862a:	2300      	movs	r3, #0
 800862c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008630:	e042      	b.n	80086b8 <UART_SetConfig+0x210>
 8008632:	2302      	movs	r3, #2
 8008634:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008638:	e03e      	b.n	80086b8 <UART_SetConfig+0x210>
 800863a:	2304      	movs	r3, #4
 800863c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008640:	e03a      	b.n	80086b8 <UART_SetConfig+0x210>
 8008642:	2308      	movs	r3, #8
 8008644:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008648:	e036      	b.n	80086b8 <UART_SetConfig+0x210>
 800864a:	2310      	movs	r3, #16
 800864c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008650:	e032      	b.n	80086b8 <UART_SetConfig+0x210>
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a3f      	ldr	r2, [pc, #252]	; (8008754 <UART_SetConfig+0x2ac>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d12a      	bne.n	80086b2 <UART_SetConfig+0x20a>
 800865c:	4b3f      	ldr	r3, [pc, #252]	; (800875c <UART_SetConfig+0x2b4>)
 800865e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008662:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008666:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800866a:	d01a      	beq.n	80086a2 <UART_SetConfig+0x1fa>
 800866c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008670:	d81b      	bhi.n	80086aa <UART_SetConfig+0x202>
 8008672:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008676:	d00c      	beq.n	8008692 <UART_SetConfig+0x1ea>
 8008678:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800867c:	d815      	bhi.n	80086aa <UART_SetConfig+0x202>
 800867e:	2b00      	cmp	r3, #0
 8008680:	d003      	beq.n	800868a <UART_SetConfig+0x1e2>
 8008682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008686:	d008      	beq.n	800869a <UART_SetConfig+0x1f2>
 8008688:	e00f      	b.n	80086aa <UART_SetConfig+0x202>
 800868a:	2300      	movs	r3, #0
 800868c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008690:	e012      	b.n	80086b8 <UART_SetConfig+0x210>
 8008692:	2302      	movs	r3, #2
 8008694:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008698:	e00e      	b.n	80086b8 <UART_SetConfig+0x210>
 800869a:	2304      	movs	r3, #4
 800869c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086a0:	e00a      	b.n	80086b8 <UART_SetConfig+0x210>
 80086a2:	2308      	movs	r3, #8
 80086a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086a8:	e006      	b.n	80086b8 <UART_SetConfig+0x210>
 80086aa:	2310      	movs	r3, #16
 80086ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086b0:	e002      	b.n	80086b8 <UART_SetConfig+0x210>
 80086b2:	2310      	movs	r3, #16
 80086b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a25      	ldr	r2, [pc, #148]	; (8008754 <UART_SetConfig+0x2ac>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	f040 808a 	bne.w	80087d8 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80086c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80086c8:	2b08      	cmp	r3, #8
 80086ca:	d824      	bhi.n	8008716 <UART_SetConfig+0x26e>
 80086cc:	a201      	add	r2, pc, #4	; (adr r2, 80086d4 <UART_SetConfig+0x22c>)
 80086ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d2:	bf00      	nop
 80086d4:	080086f9 	.word	0x080086f9
 80086d8:	08008717 	.word	0x08008717
 80086dc:	08008701 	.word	0x08008701
 80086e0:	08008717 	.word	0x08008717
 80086e4:	08008707 	.word	0x08008707
 80086e8:	08008717 	.word	0x08008717
 80086ec:	08008717 	.word	0x08008717
 80086f0:	08008717 	.word	0x08008717
 80086f4:	0800870f 	.word	0x0800870f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086f8:	f7fd f988 	bl	8005a0c <HAL_RCC_GetPCLK1Freq>
 80086fc:	61f8      	str	r0, [r7, #28]
        break;
 80086fe:	e010      	b.n	8008722 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008700:	4b19      	ldr	r3, [pc, #100]	; (8008768 <UART_SetConfig+0x2c0>)
 8008702:	61fb      	str	r3, [r7, #28]
        break;
 8008704:	e00d      	b.n	8008722 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008706:	f7fd f8e9 	bl	80058dc <HAL_RCC_GetSysClockFreq>
 800870a:	61f8      	str	r0, [r7, #28]
        break;
 800870c:	e009      	b.n	8008722 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800870e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008712:	61fb      	str	r3, [r7, #28]
        break;
 8008714:	e005      	b.n	8008722 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8008716:	2300      	movs	r3, #0
 8008718:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008720:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008722:	69fb      	ldr	r3, [r7, #28]
 8008724:	2b00      	cmp	r3, #0
 8008726:	f000 8109 	beq.w	800893c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	685a      	ldr	r2, [r3, #4]
 800872e:	4613      	mov	r3, r2
 8008730:	005b      	lsls	r3, r3, #1
 8008732:	4413      	add	r3, r2
 8008734:	69fa      	ldr	r2, [r7, #28]
 8008736:	429a      	cmp	r2, r3
 8008738:	d305      	bcc.n	8008746 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008740:	69fa      	ldr	r2, [r7, #28]
 8008742:	429a      	cmp	r2, r3
 8008744:	d912      	bls.n	800876c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800874c:	e0f6      	b.n	800893c <UART_SetConfig+0x494>
 800874e:	bf00      	nop
 8008750:	efff69f3 	.word	0xefff69f3
 8008754:	40008000 	.word	0x40008000
 8008758:	40013800 	.word	0x40013800
 800875c:	40021000 	.word	0x40021000
 8008760:	40004400 	.word	0x40004400
 8008764:	40004800 	.word	0x40004800
 8008768:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	2200      	movs	r2, #0
 8008770:	461c      	mov	r4, r3
 8008772:	4615      	mov	r5, r2
 8008774:	f04f 0200 	mov.w	r2, #0
 8008778:	f04f 0300 	mov.w	r3, #0
 800877c:	022b      	lsls	r3, r5, #8
 800877e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008782:	0222      	lsls	r2, r4, #8
 8008784:	68f9      	ldr	r1, [r7, #12]
 8008786:	6849      	ldr	r1, [r1, #4]
 8008788:	0849      	lsrs	r1, r1, #1
 800878a:	2000      	movs	r0, #0
 800878c:	4688      	mov	r8, r1
 800878e:	4681      	mov	r9, r0
 8008790:	eb12 0a08 	adds.w	sl, r2, r8
 8008794:	eb43 0b09 	adc.w	fp, r3, r9
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	2200      	movs	r2, #0
 800879e:	603b      	str	r3, [r7, #0]
 80087a0:	607a      	str	r2, [r7, #4]
 80087a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087a6:	4650      	mov	r0, sl
 80087a8:	4659      	mov	r1, fp
 80087aa:	f7f7 fd69 	bl	8000280 <__aeabi_uldivmod>
 80087ae:	4602      	mov	r2, r0
 80087b0:	460b      	mov	r3, r1
 80087b2:	4613      	mov	r3, r2
 80087b4:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80087b6:	69bb      	ldr	r3, [r7, #24]
 80087b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087bc:	d308      	bcc.n	80087d0 <UART_SetConfig+0x328>
 80087be:	69bb      	ldr	r3, [r7, #24]
 80087c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087c4:	d204      	bcs.n	80087d0 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	69ba      	ldr	r2, [r7, #24]
 80087cc:	60da      	str	r2, [r3, #12]
 80087ce:	e0b5      	b.n	800893c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80087d0:	2301      	movs	r3, #1
 80087d2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80087d6:	e0b1      	b.n	800893c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	69db      	ldr	r3, [r3, #28]
 80087dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087e0:	d15d      	bne.n	800889e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80087e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80087e6:	2b08      	cmp	r3, #8
 80087e8:	d827      	bhi.n	800883a <UART_SetConfig+0x392>
 80087ea:	a201      	add	r2, pc, #4	; (adr r2, 80087f0 <UART_SetConfig+0x348>)
 80087ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f0:	08008815 	.word	0x08008815
 80087f4:	0800881d 	.word	0x0800881d
 80087f8:	08008825 	.word	0x08008825
 80087fc:	0800883b 	.word	0x0800883b
 8008800:	0800882b 	.word	0x0800882b
 8008804:	0800883b 	.word	0x0800883b
 8008808:	0800883b 	.word	0x0800883b
 800880c:	0800883b 	.word	0x0800883b
 8008810:	08008833 	.word	0x08008833
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008814:	f7fd f8fa 	bl	8005a0c <HAL_RCC_GetPCLK1Freq>
 8008818:	61f8      	str	r0, [r7, #28]
        break;
 800881a:	e014      	b.n	8008846 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800881c:	f7fd f90c 	bl	8005a38 <HAL_RCC_GetPCLK2Freq>
 8008820:	61f8      	str	r0, [r7, #28]
        break;
 8008822:	e010      	b.n	8008846 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008824:	4b4c      	ldr	r3, [pc, #304]	; (8008958 <UART_SetConfig+0x4b0>)
 8008826:	61fb      	str	r3, [r7, #28]
        break;
 8008828:	e00d      	b.n	8008846 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800882a:	f7fd f857 	bl	80058dc <HAL_RCC_GetSysClockFreq>
 800882e:	61f8      	str	r0, [r7, #28]
        break;
 8008830:	e009      	b.n	8008846 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008836:	61fb      	str	r3, [r7, #28]
        break;
 8008838:	e005      	b.n	8008846 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800883a:	2300      	movs	r3, #0
 800883c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800883e:	2301      	movs	r3, #1
 8008840:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008844:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008846:	69fb      	ldr	r3, [r7, #28]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d077      	beq.n	800893c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	005a      	lsls	r2, r3, #1
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	085b      	lsrs	r3, r3, #1
 8008856:	441a      	add	r2, r3
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008860:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	2b0f      	cmp	r3, #15
 8008866:	d916      	bls.n	8008896 <UART_SetConfig+0x3ee>
 8008868:	69bb      	ldr	r3, [r7, #24]
 800886a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800886e:	d212      	bcs.n	8008896 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	b29b      	uxth	r3, r3
 8008874:	f023 030f 	bic.w	r3, r3, #15
 8008878:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	085b      	lsrs	r3, r3, #1
 800887e:	b29b      	uxth	r3, r3
 8008880:	f003 0307 	and.w	r3, r3, #7
 8008884:	b29a      	uxth	r2, r3
 8008886:	8afb      	ldrh	r3, [r7, #22]
 8008888:	4313      	orrs	r3, r2
 800888a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	8afa      	ldrh	r2, [r7, #22]
 8008892:	60da      	str	r2, [r3, #12]
 8008894:	e052      	b.n	800893c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800889c:	e04e      	b.n	800893c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800889e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80088a2:	2b08      	cmp	r3, #8
 80088a4:	d827      	bhi.n	80088f6 <UART_SetConfig+0x44e>
 80088a6:	a201      	add	r2, pc, #4	; (adr r2, 80088ac <UART_SetConfig+0x404>)
 80088a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ac:	080088d1 	.word	0x080088d1
 80088b0:	080088d9 	.word	0x080088d9
 80088b4:	080088e1 	.word	0x080088e1
 80088b8:	080088f7 	.word	0x080088f7
 80088bc:	080088e7 	.word	0x080088e7
 80088c0:	080088f7 	.word	0x080088f7
 80088c4:	080088f7 	.word	0x080088f7
 80088c8:	080088f7 	.word	0x080088f7
 80088cc:	080088ef 	.word	0x080088ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088d0:	f7fd f89c 	bl	8005a0c <HAL_RCC_GetPCLK1Freq>
 80088d4:	61f8      	str	r0, [r7, #28]
        break;
 80088d6:	e014      	b.n	8008902 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80088d8:	f7fd f8ae 	bl	8005a38 <HAL_RCC_GetPCLK2Freq>
 80088dc:	61f8      	str	r0, [r7, #28]
        break;
 80088de:	e010      	b.n	8008902 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088e0:	4b1d      	ldr	r3, [pc, #116]	; (8008958 <UART_SetConfig+0x4b0>)
 80088e2:	61fb      	str	r3, [r7, #28]
        break;
 80088e4:	e00d      	b.n	8008902 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088e6:	f7fc fff9 	bl	80058dc <HAL_RCC_GetSysClockFreq>
 80088ea:	61f8      	str	r0, [r7, #28]
        break;
 80088ec:	e009      	b.n	8008902 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088f2:	61fb      	str	r3, [r7, #28]
        break;
 80088f4:	e005      	b.n	8008902 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80088f6:	2300      	movs	r3, #0
 80088f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008900:	bf00      	nop
    }

    if (pclk != 0U)
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d019      	beq.n	800893c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	085a      	lsrs	r2, r3, #1
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	441a      	add	r2, r3
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	fbb2 f3f3 	udiv	r3, r2, r3
 800891a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800891c:	69bb      	ldr	r3, [r7, #24]
 800891e:	2b0f      	cmp	r3, #15
 8008920:	d909      	bls.n	8008936 <UART_SetConfig+0x48e>
 8008922:	69bb      	ldr	r3, [r7, #24]
 8008924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008928:	d205      	bcs.n	8008936 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800892a:	69bb      	ldr	r3, [r7, #24]
 800892c:	b29a      	uxth	r2, r3
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	60da      	str	r2, [r3, #12]
 8008934:	e002      	b.n	800893c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8008936:	2301      	movs	r3, #1
 8008938:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2200      	movs	r2, #0
 8008940:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2200      	movs	r2, #0
 8008946:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008948:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800894c:	4618      	mov	r0, r3
 800894e:	3728      	adds	r7, #40	; 0x28
 8008950:	46bd      	mov	sp, r7
 8008952:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008956:	bf00      	nop
 8008958:	00f42400 	.word	0x00f42400

0800895c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008968:	f003 0301 	and.w	r3, r3, #1
 800896c:	2b00      	cmp	r3, #0
 800896e:	d00a      	beq.n	8008986 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	430a      	orrs	r2, r1
 8008984:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898a:	f003 0302 	and.w	r3, r3, #2
 800898e:	2b00      	cmp	r3, #0
 8008990:	d00a      	beq.n	80089a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	430a      	orrs	r2, r1
 80089a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ac:	f003 0304 	and.w	r3, r3, #4
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d00a      	beq.n	80089ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	430a      	orrs	r2, r1
 80089c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ce:	f003 0308 	and.w	r3, r3, #8
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d00a      	beq.n	80089ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	430a      	orrs	r2, r1
 80089ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f0:	f003 0310 	and.w	r3, r3, #16
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d00a      	beq.n	8008a0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	430a      	orrs	r2, r1
 8008a0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a12:	f003 0320 	and.w	r3, r3, #32
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00a      	beq.n	8008a30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	430a      	orrs	r2, r1
 8008a2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d01a      	beq.n	8008a72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	430a      	orrs	r2, r1
 8008a50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a5a:	d10a      	bne.n	8008a72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	430a      	orrs	r2, r1
 8008a70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00a      	beq.n	8008a94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	430a      	orrs	r2, r1
 8008a92:	605a      	str	r2, [r3, #4]
  }
}
 8008a94:	bf00      	nop
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b086      	sub	sp, #24
 8008aa4:	af02      	add	r7, sp, #8
 8008aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ab0:	f7fb faf0 	bl	8004094 <HAL_GetTick>
 8008ab4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f003 0308 	and.w	r3, r3, #8
 8008ac0:	2b08      	cmp	r3, #8
 8008ac2:	d10e      	bne.n	8008ae2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ac4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ac8:	9300      	str	r3, [sp, #0]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2200      	movs	r2, #0
 8008ace:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 f82d 	bl	8008b32 <UART_WaitOnFlagUntilTimeout>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d001      	beq.n	8008ae2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ade:	2303      	movs	r3, #3
 8008ae0:	e023      	b.n	8008b2a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f003 0304 	and.w	r3, r3, #4
 8008aec:	2b04      	cmp	r3, #4
 8008aee:	d10e      	bne.n	8008b0e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008af0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008af4:	9300      	str	r3, [sp, #0]
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2200      	movs	r2, #0
 8008afa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 f817 	bl	8008b32 <UART_WaitOnFlagUntilTimeout>
 8008b04:	4603      	mov	r3, r0
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d001      	beq.n	8008b0e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b0a:	2303      	movs	r3, #3
 8008b0c:	e00d      	b.n	8008b2a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2220      	movs	r2, #32
 8008b12:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2220      	movs	r2, #32
 8008b18:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2200      	movs	r2, #0
 8008b24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008b28:	2300      	movs	r3, #0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b09c      	sub	sp, #112	; 0x70
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	60f8      	str	r0, [r7, #12]
 8008b3a:	60b9      	str	r1, [r7, #8]
 8008b3c:	603b      	str	r3, [r7, #0]
 8008b3e:	4613      	mov	r3, r2
 8008b40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b42:	e0a5      	b.n	8008c90 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b4a:	f000 80a1 	beq.w	8008c90 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b4e:	f7fb faa1 	bl	8004094 <HAL_GetTick>
 8008b52:	4602      	mov	r2, r0
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	1ad3      	subs	r3, r2, r3
 8008b58:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d302      	bcc.n	8008b64 <UART_WaitOnFlagUntilTimeout+0x32>
 8008b5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d13e      	bne.n	8008be2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b6c:	e853 3f00 	ldrex	r3, [r3]
 8008b70:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b78:	667b      	str	r3, [r7, #100]	; 0x64
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	461a      	mov	r2, r3
 8008b80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b84:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b8a:	e841 2300 	strex	r3, r2, [r1]
 8008b8e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008b90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d1e6      	bne.n	8008b64 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	3308      	adds	r3, #8
 8008b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ba0:	e853 3f00 	ldrex	r3, [r3]
 8008ba4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba8:	f023 0301 	bic.w	r3, r3, #1
 8008bac:	663b      	str	r3, [r7, #96]	; 0x60
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	3308      	adds	r3, #8
 8008bb4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008bb6:	64ba      	str	r2, [r7, #72]	; 0x48
 8008bb8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008bbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bbe:	e841 2300 	strex	r3, r2, [r1]
 8008bc2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008bc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d1e5      	bne.n	8008b96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2220      	movs	r2, #32
 8008bce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2220      	movs	r2, #32
 8008bd4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008bde:	2303      	movs	r3, #3
 8008be0:	e067      	b.n	8008cb2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f003 0304 	and.w	r3, r3, #4
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d04f      	beq.n	8008c90 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	69db      	ldr	r3, [r3, #28]
 8008bf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bfe:	d147      	bne.n	8008c90 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c08:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c12:	e853 3f00 	ldrex	r3, [r3]
 8008c16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008c1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	461a      	mov	r2, r3
 8008c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c28:	637b      	str	r3, [r7, #52]	; 0x34
 8008c2a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c30:	e841 2300 	strex	r3, r2, [r1]
 8008c34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d1e6      	bne.n	8008c0a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	3308      	adds	r3, #8
 8008c42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	e853 3f00 	ldrex	r3, [r3]
 8008c4a:	613b      	str	r3, [r7, #16]
   return(result);
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	f023 0301 	bic.w	r3, r3, #1
 8008c52:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	3308      	adds	r3, #8
 8008c5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008c5c:	623a      	str	r2, [r7, #32]
 8008c5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c60:	69f9      	ldr	r1, [r7, #28]
 8008c62:	6a3a      	ldr	r2, [r7, #32]
 8008c64:	e841 2300 	strex	r3, r2, [r1]
 8008c68:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d1e5      	bne.n	8008c3c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2220      	movs	r2, #32
 8008c74:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2220      	movs	r2, #32
 8008c7a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2220      	movs	r2, #32
 8008c80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008c8c:	2303      	movs	r3, #3
 8008c8e:	e010      	b.n	8008cb2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	69da      	ldr	r2, [r3, #28]
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	4013      	ands	r3, r2
 8008c9a:	68ba      	ldr	r2, [r7, #8]
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	bf0c      	ite	eq
 8008ca0:	2301      	moveq	r3, #1
 8008ca2:	2300      	movne	r3, #0
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	79fb      	ldrb	r3, [r7, #7]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	f43f af4a 	beq.w	8008b44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008cb0:	2300      	movs	r3, #0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3770      	adds	r7, #112	; 0x70
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
	...

08008cbc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b097      	sub	sp, #92	; 0x5c
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	60f8      	str	r0, [r7, #12]
 8008cc4:	60b9      	str	r1, [r7, #8]
 8008cc6:	4613      	mov	r3, r2
 8008cc8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	68ba      	ldr	r2, [r7, #8]
 8008cce:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	88fa      	ldrh	r2, [r7, #6]
 8008cd4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	88fa      	ldrh	r2, [r7, #6]
 8008cdc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cee:	d10e      	bne.n	8008d0e <UART_Start_Receive_IT+0x52>
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	691b      	ldr	r3, [r3, #16]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d105      	bne.n	8008d04 <UART_Start_Receive_IT+0x48>
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008cfe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008d02:	e02d      	b.n	8008d60 <UART_Start_Receive_IT+0xa4>
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	22ff      	movs	r2, #255	; 0xff
 8008d08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008d0c:	e028      	b.n	8008d60 <UART_Start_Receive_IT+0xa4>
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d10d      	bne.n	8008d32 <UART_Start_Receive_IT+0x76>
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	691b      	ldr	r3, [r3, #16]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d104      	bne.n	8008d28 <UART_Start_Receive_IT+0x6c>
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	22ff      	movs	r2, #255	; 0xff
 8008d22:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008d26:	e01b      	b.n	8008d60 <UART_Start_Receive_IT+0xa4>
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	227f      	movs	r2, #127	; 0x7f
 8008d2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008d30:	e016      	b.n	8008d60 <UART_Start_Receive_IT+0xa4>
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d3a:	d10d      	bne.n	8008d58 <UART_Start_Receive_IT+0x9c>
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	691b      	ldr	r3, [r3, #16]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d104      	bne.n	8008d4e <UART_Start_Receive_IT+0x92>
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	227f      	movs	r2, #127	; 0x7f
 8008d48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008d4c:	e008      	b.n	8008d60 <UART_Start_Receive_IT+0xa4>
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	223f      	movs	r2, #63	; 0x3f
 8008d52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008d56:	e003      	b.n	8008d60 <UART_Start_Receive_IT+0xa4>
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2200      	movs	r2, #0
 8008d64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2222      	movs	r2, #34	; 0x22
 8008d6c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	3308      	adds	r3, #8
 8008d74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d78:	e853 3f00 	ldrex	r3, [r3]
 8008d7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d80:	f043 0301 	orr.w	r3, r3, #1
 8008d84:	657b      	str	r3, [r7, #84]	; 0x54
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	3308      	adds	r3, #8
 8008d8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008d8e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008d90:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008d94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d96:	e841 2300 	strex	r3, r2, [r1]
 8008d9a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d1e5      	bne.n	8008d6e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008daa:	d107      	bne.n	8008dbc <UART_Start_Receive_IT+0x100>
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	691b      	ldr	r3, [r3, #16]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d103      	bne.n	8008dbc <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	4a24      	ldr	r2, [pc, #144]	; (8008e48 <UART_Start_Receive_IT+0x18c>)
 8008db8:	665a      	str	r2, [r3, #100]	; 0x64
 8008dba:	e002      	b.n	8008dc2 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	4a23      	ldr	r2, [pc, #140]	; (8008e4c <UART_Start_Receive_IT+0x190>)
 8008dc0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	691b      	ldr	r3, [r3, #16]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d019      	beq.n	8008e06 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dda:	e853 3f00 	ldrex	r3, [r3]
 8008dde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008de6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	461a      	mov	r2, r3
 8008dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008df0:	637b      	str	r3, [r7, #52]	; 0x34
 8008df2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008df6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008df8:	e841 2300 	strex	r3, r2, [r1]
 8008dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d1e6      	bne.n	8008dd2 <UART_Start_Receive_IT+0x116>
 8008e04:	e018      	b.n	8008e38 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	e853 3f00 	ldrex	r3, [r3]
 8008e12:	613b      	str	r3, [r7, #16]
   return(result);
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	f043 0320 	orr.w	r3, r3, #32
 8008e1a:	653b      	str	r3, [r7, #80]	; 0x50
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	461a      	mov	r2, r3
 8008e22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e24:	623b      	str	r3, [r7, #32]
 8008e26:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e28:	69f9      	ldr	r1, [r7, #28]
 8008e2a:	6a3a      	ldr	r2, [r7, #32]
 8008e2c:	e841 2300 	strex	r3, r2, [r1]
 8008e30:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e32:	69bb      	ldr	r3, [r7, #24]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d1e6      	bne.n	8008e06 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8008e38:	2300      	movs	r3, #0
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	375c      	adds	r7, #92	; 0x5c
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr
 8008e46:	bf00      	nop
 8008e48:	0800926f 	.word	0x0800926f
 8008e4c:	0800910f 	.word	0x0800910f

08008e50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b095      	sub	sp, #84	; 0x54
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e60:	e853 3f00 	ldrex	r3, [r3]
 8008e64:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	461a      	mov	r2, r3
 8008e74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e76:	643b      	str	r3, [r7, #64]	; 0x40
 8008e78:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e7e:	e841 2300 	strex	r3, r2, [r1]
 8008e82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d1e6      	bne.n	8008e58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	3308      	adds	r3, #8
 8008e90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e92:	6a3b      	ldr	r3, [r7, #32]
 8008e94:	e853 3f00 	ldrex	r3, [r3]
 8008e98:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	f023 0301 	bic.w	r3, r3, #1
 8008ea0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	3308      	adds	r3, #8
 8008ea8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008eaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008eac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008eb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008eb2:	e841 2300 	strex	r3, r2, [r1]
 8008eb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d1e5      	bne.n	8008e8a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d118      	bne.n	8008ef8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	e853 3f00 	ldrex	r3, [r3]
 8008ed2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	f023 0310 	bic.w	r3, r3, #16
 8008eda:	647b      	str	r3, [r7, #68]	; 0x44
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ee4:	61bb      	str	r3, [r7, #24]
 8008ee6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee8:	6979      	ldr	r1, [r7, #20]
 8008eea:	69ba      	ldr	r2, [r7, #24]
 8008eec:	e841 2300 	strex	r3, r2, [r1]
 8008ef0:	613b      	str	r3, [r7, #16]
   return(result);
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d1e6      	bne.n	8008ec6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2220      	movs	r2, #32
 8008efc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008f0a:	bf00      	nop
 8008f0c:	3754      	adds	r7, #84	; 0x54
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr

08008f16 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f16:	b580      	push	{r7, lr}
 8008f18:	b084      	sub	sp, #16
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2200      	movs	r2, #0
 8008f28:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f34:	68f8      	ldr	r0, [r7, #12]
 8008f36:	f7ff faa1 	bl	800847c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f3a:	bf00      	nop
 8008f3c:	3710      	adds	r7, #16
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008f42:	b480      	push	{r7}
 8008f44:	b08f      	sub	sp, #60	; 0x3c
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f4e:	2b21      	cmp	r3, #33	; 0x21
 8008f50:	d14d      	bne.n	8008fee <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d132      	bne.n	8008fc4 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f64:	6a3b      	ldr	r3, [r7, #32]
 8008f66:	e853 3f00 	ldrex	r3, [r3]
 8008f6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f6c:	69fb      	ldr	r3, [r7, #28]
 8008f6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f72:	637b      	str	r3, [r7, #52]	; 0x34
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	461a      	mov	r2, r3
 8008f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f7e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f84:	e841 2300 	strex	r3, r2, [r1]
 8008f88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d1e6      	bne.n	8008f5e <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	e853 3f00 	ldrex	r3, [r3]
 8008f9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fa4:	633b      	str	r3, [r7, #48]	; 0x30
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	461a      	mov	r2, r3
 8008fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fae:	61bb      	str	r3, [r7, #24]
 8008fb0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb2:	6979      	ldr	r1, [r7, #20]
 8008fb4:	69ba      	ldr	r2, [r7, #24]
 8008fb6:	e841 2300 	strex	r3, r2, [r1]
 8008fba:	613b      	str	r3, [r7, #16]
   return(result);
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d1e6      	bne.n	8008f90 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008fc2:	e014      	b.n	8008fee <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fc8:	781a      	ldrb	r2, [r3, #0]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	b292      	uxth	r2, r2
 8008fd0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fd6:	1c5a      	adds	r2, r3, #1
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	3b01      	subs	r3, #1
 8008fe6:	b29a      	uxth	r2, r3
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8008fee:	bf00      	nop
 8008ff0:	373c      	adds	r7, #60	; 0x3c
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr

08008ffa <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008ffa:	b480      	push	{r7}
 8008ffc:	b091      	sub	sp, #68	; 0x44
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009006:	2b21      	cmp	r3, #33	; 0x21
 8009008:	d151      	bne.n	80090ae <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009010:	b29b      	uxth	r3, r3
 8009012:	2b00      	cmp	r3, #0
 8009014:	d132      	bne.n	800907c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901e:	e853 3f00 	ldrex	r3, [r3]
 8009022:	623b      	str	r3, [r7, #32]
   return(result);
 8009024:	6a3b      	ldr	r3, [r7, #32]
 8009026:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800902a:	63bb      	str	r3, [r7, #56]	; 0x38
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	461a      	mov	r2, r3
 8009032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009034:	633b      	str	r3, [r7, #48]	; 0x30
 8009036:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009038:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800903a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800903c:	e841 2300 	strex	r3, r2, [r1]
 8009040:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009044:	2b00      	cmp	r3, #0
 8009046:	d1e6      	bne.n	8009016 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	e853 3f00 	ldrex	r3, [r3]
 8009054:	60fb      	str	r3, [r7, #12]
   return(result);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800905c:	637b      	str	r3, [r7, #52]	; 0x34
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	461a      	mov	r2, r3
 8009064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009066:	61fb      	str	r3, [r7, #28]
 8009068:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800906a:	69b9      	ldr	r1, [r7, #24]
 800906c:	69fa      	ldr	r2, [r7, #28]
 800906e:	e841 2300 	strex	r3, r2, [r1]
 8009072:	617b      	str	r3, [r7, #20]
   return(result);
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d1e6      	bne.n	8009048 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800907a:	e018      	b.n	80090ae <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009080:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009084:	881a      	ldrh	r2, [r3, #0]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800908e:	b292      	uxth	r2, r2
 8009090:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009096:	1c9a      	adds	r2, r3, #2
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	3b01      	subs	r3, #1
 80090a6:	b29a      	uxth	r2, r3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80090ae:	bf00      	nop
 80090b0:	3744      	adds	r7, #68	; 0x44
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr

080090ba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80090ba:	b580      	push	{r7, lr}
 80090bc:	b088      	sub	sp, #32
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	e853 3f00 	ldrex	r3, [r3]
 80090ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090d6:	61fb      	str	r3, [r7, #28]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	461a      	mov	r2, r3
 80090de:	69fb      	ldr	r3, [r7, #28]
 80090e0:	61bb      	str	r3, [r7, #24]
 80090e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e4:	6979      	ldr	r1, [r7, #20]
 80090e6:	69ba      	ldr	r2, [r7, #24]
 80090e8:	e841 2300 	strex	r3, r2, [r1]
 80090ec:	613b      	str	r3, [r7, #16]
   return(result);
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d1e6      	bne.n	80090c2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2220      	movs	r2, #32
 80090f8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 fc9b 	bl	8009a3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009106:	bf00      	nop
 8009108:	3720      	adds	r7, #32
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}

0800910e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800910e:	b580      	push	{r7, lr}
 8009110:	b096      	sub	sp, #88	; 0x58
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800911c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009124:	2b22      	cmp	r3, #34	; 0x22
 8009126:	f040 8094 	bne.w	8009252 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009130:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009134:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009138:	b2d9      	uxtb	r1, r3
 800913a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800913e:	b2da      	uxtb	r2, r3
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009144:	400a      	ands	r2, r1
 8009146:	b2d2      	uxtb	r2, r2
 8009148:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800914e:	1c5a      	adds	r2, r3, #1
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800915a:	b29b      	uxth	r3, r3
 800915c:	3b01      	subs	r3, #1
 800915e:	b29a      	uxth	r2, r3
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800916c:	b29b      	uxth	r3, r3
 800916e:	2b00      	cmp	r3, #0
 8009170:	d179      	bne.n	8009266 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800917a:	e853 3f00 	ldrex	r3, [r3]
 800917e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009182:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009186:	653b      	str	r3, [r7, #80]	; 0x50
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	461a      	mov	r2, r3
 800918e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009190:	647b      	str	r3, [r7, #68]	; 0x44
 8009192:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009194:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009196:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009198:	e841 2300 	strex	r3, r2, [r1]
 800919c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800919e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d1e6      	bne.n	8009172 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	3308      	adds	r3, #8
 80091aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ae:	e853 3f00 	ldrex	r3, [r3]
 80091b2:	623b      	str	r3, [r7, #32]
   return(result);
 80091b4:	6a3b      	ldr	r3, [r7, #32]
 80091b6:	f023 0301 	bic.w	r3, r3, #1
 80091ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	3308      	adds	r3, #8
 80091c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80091c4:	633a      	str	r2, [r7, #48]	; 0x30
 80091c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80091ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091cc:	e841 2300 	strex	r3, r2, [r1]
 80091d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80091d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d1e5      	bne.n	80091a4 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2220      	movs	r2, #32
 80091dc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d12e      	bne.n	800924a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2200      	movs	r2, #0
 80091f0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	e853 3f00 	ldrex	r3, [r3]
 80091fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f023 0310 	bic.w	r3, r3, #16
 8009206:	64bb      	str	r3, [r7, #72]	; 0x48
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	461a      	mov	r2, r3
 800920e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009210:	61fb      	str	r3, [r7, #28]
 8009212:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009214:	69b9      	ldr	r1, [r7, #24]
 8009216:	69fa      	ldr	r2, [r7, #28]
 8009218:	e841 2300 	strex	r3, r2, [r1]
 800921c:	617b      	str	r3, [r7, #20]
   return(result);
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d1e6      	bne.n	80091f2 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	69db      	ldr	r3, [r3, #28]
 800922a:	f003 0310 	and.w	r3, r3, #16
 800922e:	2b10      	cmp	r3, #16
 8009230:	d103      	bne.n	800923a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	2210      	movs	r2, #16
 8009238:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009240:	4619      	mov	r1, r3
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f7ff f924 	bl	8008490 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009248:	e00d      	b.n	8009266 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 fc0a 	bl	8009a64 <HAL_UART_RxCpltCallback>
}
 8009250:	e009      	b.n	8009266 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	8b1b      	ldrh	r3, [r3, #24]
 8009258:	b29a      	uxth	r2, r3
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f042 0208 	orr.w	r2, r2, #8
 8009262:	b292      	uxth	r2, r2
 8009264:	831a      	strh	r2, [r3, #24]
}
 8009266:	bf00      	nop
 8009268:	3758      	adds	r7, #88	; 0x58
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}

0800926e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800926e:	b580      	push	{r7, lr}
 8009270:	b096      	sub	sp, #88	; 0x58
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800927c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009284:	2b22      	cmp	r3, #34	; 0x22
 8009286:	f040 8094 	bne.w	80093b2 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009290:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009298:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800929a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800929e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80092a2:	4013      	ands	r3, r2
 80092a4:	b29a      	uxth	r2, r3
 80092a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092a8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092ae:	1c9a      	adds	r2, r3, #2
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	3b01      	subs	r3, #1
 80092be:	b29a      	uxth	r2, r3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d179      	bne.n	80093c6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092da:	e853 3f00 	ldrex	r3, [r3]
 80092de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80092e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80092e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	461a      	mov	r2, r3
 80092ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092f0:	643b      	str	r3, [r7, #64]	; 0x40
 80092f2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80092f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80092f8:	e841 2300 	strex	r3, r2, [r1]
 80092fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009300:	2b00      	cmp	r3, #0
 8009302:	d1e6      	bne.n	80092d2 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	3308      	adds	r3, #8
 800930a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930c:	6a3b      	ldr	r3, [r7, #32]
 800930e:	e853 3f00 	ldrex	r3, [r3]
 8009312:	61fb      	str	r3, [r7, #28]
   return(result);
 8009314:	69fb      	ldr	r3, [r7, #28]
 8009316:	f023 0301 	bic.w	r3, r3, #1
 800931a:	64bb      	str	r3, [r7, #72]	; 0x48
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	3308      	adds	r3, #8
 8009322:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009324:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009326:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009328:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800932a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800932c:	e841 2300 	strex	r3, r2, [r1]
 8009330:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009334:	2b00      	cmp	r3, #0
 8009336:	d1e5      	bne.n	8009304 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2220      	movs	r2, #32
 800933c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009348:	2b01      	cmp	r3, #1
 800934a:	d12e      	bne.n	80093aa <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	e853 3f00 	ldrex	r3, [r3]
 800935e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	f023 0310 	bic.w	r3, r3, #16
 8009366:	647b      	str	r3, [r7, #68]	; 0x44
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	461a      	mov	r2, r3
 800936e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009370:	61bb      	str	r3, [r7, #24]
 8009372:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009374:	6979      	ldr	r1, [r7, #20]
 8009376:	69ba      	ldr	r2, [r7, #24]
 8009378:	e841 2300 	strex	r3, r2, [r1]
 800937c:	613b      	str	r3, [r7, #16]
   return(result);
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d1e6      	bne.n	8009352 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	69db      	ldr	r3, [r3, #28]
 800938a:	f003 0310 	and.w	r3, r3, #16
 800938e:	2b10      	cmp	r3, #16
 8009390:	d103      	bne.n	800939a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	2210      	movs	r2, #16
 8009398:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80093a0:	4619      	mov	r1, r3
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f7ff f874 	bl	8008490 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80093a8:	e00d      	b.n	80093c6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 fb5a 	bl	8009a64 <HAL_UART_RxCpltCallback>
}
 80093b0:	e009      	b.n	80093c6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	8b1b      	ldrh	r3, [r3, #24]
 80093b8:	b29a      	uxth	r2, r3
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f042 0208 	orr.w	r2, r2, #8
 80093c2:	b292      	uxth	r2, r2
 80093c4:	831a      	strh	r2, [r3, #24]
}
 80093c6:	bf00      	nop
 80093c8:	3758      	adds	r7, #88	; 0x58
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}

080093ce <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80093ce:	b480      	push	{r7}
 80093d0:	b083      	sub	sp, #12
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80093d6:	bf00      	nop
 80093d8:	370c      	adds	r7, #12
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr
	...

080093e4 <board_init_common_rtc_init>:
uint32_t g_button_on_count[NUM_PUSH_BUTTONS] = {0};
bool button_press_state[NUM_PUSH_BUTTONS] = {false};
extern UART_HandleTypeDef      gh_host_usart;

static void board_init_common_rtc_init(void)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	af00      	add	r7, sp, #0
    g_rtc_handle.Instance = RTC;
 80093e8:	4b10      	ldr	r3, [pc, #64]	; (800942c <board_init_common_rtc_init+0x48>)
 80093ea:	4a11      	ldr	r2, [pc, #68]	; (8009430 <board_init_common_rtc_init+0x4c>)
 80093ec:	601a      	str	r2, [r3, #0]
    g_rtc_handle.Init.HourFormat = RTC_HOURFORMAT_24;
 80093ee:	4b0f      	ldr	r3, [pc, #60]	; (800942c <board_init_common_rtc_init+0x48>)
 80093f0:	2200      	movs	r2, #0
 80093f2:	605a      	str	r2, [r3, #4]
    g_rtc_handle.Init.AsynchPrediv = 127;
 80093f4:	4b0d      	ldr	r3, [pc, #52]	; (800942c <board_init_common_rtc_init+0x48>)
 80093f6:	227f      	movs	r2, #127	; 0x7f
 80093f8:	609a      	str	r2, [r3, #8]
    g_rtc_handle.Init.SynchPrediv = 255;
 80093fa:	4b0c      	ldr	r3, [pc, #48]	; (800942c <board_init_common_rtc_init+0x48>)
 80093fc:	22ff      	movs	r2, #255	; 0xff
 80093fe:	60da      	str	r2, [r3, #12]
    g_rtc_handle.Init.OutPut = RTC_OUTPUT_DISABLE;
 8009400:	4b0a      	ldr	r3, [pc, #40]	; (800942c <board_init_common_rtc_init+0x48>)
 8009402:	2200      	movs	r2, #0
 8009404:	611a      	str	r2, [r3, #16]
    g_rtc_handle.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8009406:	4b09      	ldr	r3, [pc, #36]	; (800942c <board_init_common_rtc_init+0x48>)
 8009408:	2200      	movs	r2, #0
 800940a:	615a      	str	r2, [r3, #20]
    g_rtc_handle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800940c:	4b07      	ldr	r3, [pc, #28]	; (800942c <board_init_common_rtc_init+0x48>)
 800940e:	2200      	movs	r2, #0
 8009410:	619a      	str	r2, [r3, #24]
    g_rtc_handle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8009412:	4b06      	ldr	r3, [pc, #24]	; (800942c <board_init_common_rtc_init+0x48>)
 8009414:	2200      	movs	r2, #0
 8009416:	61da      	str	r2, [r3, #28]
    if (HAL_RTC_Init(&g_rtc_handle) != HAL_OK) Error_Handler();
 8009418:	4804      	ldr	r0, [pc, #16]	; (800942c <board_init_common_rtc_init+0x48>)
 800941a:	f7fc fe8d 	bl	8006138 <HAL_RTC_Init>
 800941e:	4603      	mov	r3, r0
 8009420:	2b00      	cmp	r3, #0
 8009422:	d001      	beq.n	8009428 <board_init_common_rtc_init+0x44>
 8009424:	f000 fa4b 	bl	80098be <Error_Handler>
}
 8009428:	bf00      	nop
 800942a:	bd80      	pop	{r7, pc}
 800942c:	200025b8 	.word	0x200025b8
 8009430:	40002800 	.word	0x40002800

08009434 <SystemClock_Config>:

static void SystemClock_Config(void)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b0ae      	sub	sp, #184	; 0xb8
 8009438:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800943a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800943e:	2244      	movs	r2, #68	; 0x44
 8009440:	2100      	movs	r1, #0
 8009442:	4618      	mov	r0, r3
 8009444:	f001 fc8a 	bl	800ad5c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009448:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800944c:	2200      	movs	r2, #0
 800944e:	601a      	str	r2, [r3, #0]
 8009450:	605a      	str	r2, [r3, #4]
 8009452:	609a      	str	r2, [r3, #8]
 8009454:	60da      	str	r2, [r3, #12]
 8009456:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009458:	1d3b      	adds	r3, r7, #4
 800945a:	225c      	movs	r2, #92	; 0x5c
 800945c:	2100      	movs	r1, #0
 800945e:	4618      	mov	r0, r3
 8009460:	f001 fc7c 	bl	800ad5c <memset>

    HAL_PWR_EnableBkUpAccess();
 8009464:	f7fb fc42 	bl	8004cec <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8009468:	4b25      	ldr	r3, [pc, #148]	; (8009500 <SystemClock_Config+0xcc>)
 800946a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800946e:	4a24      	ldr	r2, [pc, #144]	; (8009500 <SystemClock_Config+0xcc>)
 8009470:	f023 0318 	bic.w	r3, r3, #24
 8009474:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8009478:	2305      	movs	r3, #5
 800947a:	677b      	str	r3, [r7, #116]	; 0x74
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800947c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009480:	67bb      	str	r3, [r7, #120]	; 0x78
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8009482:	2301      	movs	r3, #1
 8009484:	67fb      	str	r3, [r7, #124]	; 0x7c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8009486:	2300      	movs	r3, #0
 8009488:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) while(1);
 800948c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009490:	4618      	mov	r0, r3
 8009492:	f7fb fd0f 	bl	8004eb4 <HAL_RCC_OscConfig>
 8009496:	4603      	mov	r3, r0
 8009498:	2b00      	cmp	r3, #0
 800949a:	d000      	beq.n	800949e <SystemClock_Config+0x6a>
 800949c:	e7fe      	b.n	800949c <SystemClock_Config+0x68>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800949e:	230f      	movs	r3, #15
 80094a0:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80094a2:	2302      	movs	r3, #2
 80094a4:	667b      	str	r3, [r7, #100]	; 0x64
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80094a6:	2300      	movs	r3, #0
 80094a8:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80094aa:	2300      	movs	r3, #0
 80094ac:	66fb      	str	r3, [r7, #108]	; 0x6c
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80094ae:	2300      	movs	r3, #0
 80094b0:	673b      	str	r3, [r7, #112]	; 0x70

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) while(1);
 80094b2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80094b6:	2102      	movs	r1, #2
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7fc f90f 	bl	80056dc <HAL_RCC_ClockConfig>
 80094be:	4603      	mov	r3, r0
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d000      	beq.n	80094c6 <SystemClock_Config+0x92>
 80094c4:	e7fe      	b.n	80094c4 <SystemClock_Config+0x90>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80094c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80094ca:	607b      	str	r3, [r7, #4]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80094cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80094d0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) Error_Handler();
 80094d2:	1d3b      	adds	r3, r7, #4
 80094d4:	4618      	mov	r0, r3
 80094d6:	f7fc fb25 	bl	8005b24 <HAL_RCCEx_PeriphCLKConfig>
 80094da:	4603      	mov	r3, r0
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d001      	beq.n	80094e4 <SystemClock_Config+0xb0>
 80094e0:	f000 f9ed 	bl	80098be <Error_Handler>
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) Error_Handler();
 80094e4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80094e8:	f7fb fc8e 	bl	8004e08 <HAL_PWREx_ControlVoltageScaling>
 80094ec:	4603      	mov	r3, r0
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d001      	beq.n	80094f6 <SystemClock_Config+0xc2>
 80094f2:	f000 f9e4 	bl	80098be <Error_Handler>
}
 80094f6:	bf00      	nop
 80094f8:	37b8      	adds	r7, #184	; 0xb8
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	bf00      	nop
 8009500:	40021000 	.word	0x40021000

08009504 <board_init_common_timer_init>:


static void board_init_common_timer_init(void)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b09e      	sub	sp, #120	; 0x78
 8009508:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800950a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800950e:	2200      	movs	r2, #0
 8009510:	601a      	str	r2, [r3, #0]
 8009512:	605a      	str	r2, [r3, #4]
 8009514:	609a      	str	r2, [r3, #8]
 8009516:	60da      	str	r2, [r3, #12]
 8009518:	611a      	str	r2, [r3, #16]
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800951a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800951e:	2200      	movs	r2, #0
 8009520:	601a      	str	r2, [r3, #0]
 8009522:	605a      	str	r2, [r3, #4]
 8009524:	609a      	str	r2, [r3, #8]
 8009526:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009528:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800952c:	2200      	movs	r2, #0
 800952e:	601a      	str	r2, [r3, #0]
 8009530:	605a      	str	r2, [r3, #4]
 8009532:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8009534:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009538:	2200      	movs	r2, #0
 800953a:	601a      	str	r2, [r3, #0]
 800953c:	605a      	str	r2, [r3, #4]
 800953e:	609a      	str	r2, [r3, #8]
 8009540:	60da      	str	r2, [r3, #12]
 8009542:	611a      	str	r2, [r3, #16]
 8009544:	615a      	str	r2, [r3, #20]
 8009546:	619a      	str	r2, [r3, #24]
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009548:	463b      	mov	r3, r7
 800954a:	222c      	movs	r2, #44	; 0x2c
 800954c:	2100      	movs	r1, #0
 800954e:	4618      	mov	r0, r3
 8009550:	f001 fc04 	bl	800ad5c <memset>
    g_tim1_handle.Instance = TIM1;
 8009554:	4b5c      	ldr	r3, [pc, #368]	; (80096c8 <board_init_common_timer_init+0x1c4>)
 8009556:	4a5d      	ldr	r2, [pc, #372]	; (80096cc <board_init_common_timer_init+0x1c8>)
 8009558:	601a      	str	r2, [r3, #0]
    g_tim1_handle.Init.Prescaler = 0;
 800955a:	4b5b      	ldr	r3, [pc, #364]	; (80096c8 <board_init_common_timer_init+0x1c4>)
 800955c:	2200      	movs	r2, #0
 800955e:	605a      	str	r2, [r3, #4]
    g_tim1_handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009560:	4b59      	ldr	r3, [pc, #356]	; (80096c8 <board_init_common_timer_init+0x1c4>)
 8009562:	2200      	movs	r2, #0
 8009564:	609a      	str	r2, [r3, #8]
    g_tim1_handle.Init.Period = 60-1;
 8009566:	4b58      	ldr	r3, [pc, #352]	; (80096c8 <board_init_common_timer_init+0x1c4>)
 8009568:	223b      	movs	r2, #59	; 0x3b
 800956a:	60da      	str	r2, [r3, #12]
    g_tim1_handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800956c:	4b56      	ldr	r3, [pc, #344]	; (80096c8 <board_init_common_timer_init+0x1c4>)
 800956e:	2200      	movs	r2, #0
 8009570:	611a      	str	r2, [r3, #16]
    g_tim1_handle.Init.RepetitionCounter = 0;
 8009572:	4b55      	ldr	r3, [pc, #340]	; (80096c8 <board_init_common_timer_init+0x1c4>)
 8009574:	2200      	movs	r2, #0
 8009576:	615a      	str	r2, [r3, #20]
    g_tim1_handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009578:	4b53      	ldr	r3, [pc, #332]	; (80096c8 <board_init_common_timer_init+0x1c4>)
 800957a:	2200      	movs	r2, #0
 800957c:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&g_tim1_handle) != HAL_OK) Error_Handler();
 800957e:	4852      	ldr	r0, [pc, #328]	; (80096c8 <board_init_common_timer_init+0x1c4>)
 8009580:	f7fc ff99 	bl	80064b6 <HAL_TIM_Base_Init>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d001      	beq.n	800958e <board_init_common_timer_init+0x8a>
 800958a:	f000 f998 	bl	80098be <Error_Handler>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800958e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009592:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_TIM_ConfigClockSource(&g_tim1_handle, &sClockSourceConfig) != HAL_OK) Error_Handler();
 8009594:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009598:	4619      	mov	r1, r3
 800959a:	484b      	ldr	r0, [pc, #300]	; (80096c8 <board_init_common_timer_init+0x1c4>)
 800959c:	f7fd fc2e 	bl	8006dfc <HAL_TIM_ConfigClockSource>
 80095a0:	4603      	mov	r3, r0
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d001      	beq.n	80095aa <board_init_common_timer_init+0xa6>
 80095a6:	f000 f98a 	bl	80098be <Error_Handler>
    if (HAL_TIM_PWM_Init(&g_tim1_handle) != HAL_OK) Error_Handler();
 80095aa:	4847      	ldr	r0, [pc, #284]	; (80096c8 <board_init_common_timer_init+0x1c4>)
 80095ac:	f7fc ffda 	bl	8006564 <HAL_TIM_PWM_Init>
 80095b0:	4603      	mov	r3, r0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d001      	beq.n	80095ba <board_init_common_timer_init+0xb6>
 80095b6:	f000 f982 	bl	80098be <Error_Handler>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80095ba:	2300      	movs	r3, #0
 80095bc:	64bb      	str	r3, [r7, #72]	; 0x48
    sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80095be:	2300      	movs	r3, #0
 80095c0:	64fb      	str	r3, [r7, #76]	; 0x4c
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80095c2:	2300      	movs	r3, #0
 80095c4:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_TIMEx_MasterConfigSynchronization(&g_tim1_handle, &sMasterConfig) != HAL_OK) Error_Handler();
 80095c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80095ca:	4619      	mov	r1, r3
 80095cc:	483e      	ldr	r0, [pc, #248]	; (80096c8 <board_init_common_timer_init+0x1c4>)
 80095ce:	f7fe f965 	bl	800789c <HAL_TIMEx_MasterConfigSynchronization>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d001      	beq.n	80095dc <board_init_common_timer_init+0xd8>
 80095d8:	f000 f971 	bl	80098be <Error_Handler>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80095dc:	2360      	movs	r3, #96	; 0x60
 80095de:	62fb      	str	r3, [r7, #44]	; 0x2c
    sConfigOC.Pulse = 0;
 80095e0:	2300      	movs	r3, #0
 80095e2:	633b      	str	r3, [r7, #48]	; 0x30
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80095e4:	2300      	movs	r3, #0
 80095e6:	637b      	str	r3, [r7, #52]	; 0x34
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80095e8:	2300      	movs	r3, #0
 80095ea:	63bb      	str	r3, [r7, #56]	; 0x38
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80095ec:	2300      	movs	r3, #0
 80095ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80095f0:	2300      	movs	r3, #0
 80095f2:	643b      	str	r3, [r7, #64]	; 0x40
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80095f4:	2300      	movs	r3, #0
 80095f6:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 80095f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80095fc:	2200      	movs	r2, #0
 80095fe:	4619      	mov	r1, r3
 8009600:	4831      	ldr	r0, [pc, #196]	; (80096c8 <board_init_common_timer_init+0x1c4>)
 8009602:	f7fd fae7 	bl	8006bd4 <HAL_TIM_PWM_ConfigChannel>
 8009606:	4603      	mov	r3, r0
 8009608:	2b00      	cmp	r3, #0
 800960a:	d001      	beq.n	8009610 <board_init_common_timer_init+0x10c>
 800960c:	f000 f957 	bl	80098be <Error_Handler>
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) Error_Handler();
 8009610:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009614:	2204      	movs	r2, #4
 8009616:	4619      	mov	r1, r3
 8009618:	482b      	ldr	r0, [pc, #172]	; (80096c8 <board_init_common_timer_init+0x1c4>)
 800961a:	f7fd fadb 	bl	8006bd4 <HAL_TIM_PWM_ConfigChannel>
 800961e:	4603      	mov	r3, r0
 8009620:	2b00      	cmp	r3, #0
 8009622:	d001      	beq.n	8009628 <board_init_common_timer_init+0x124>
 8009624:	f000 f94b 	bl	80098be <Error_Handler>
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) Error_Handler();
 8009628:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800962c:	2208      	movs	r2, #8
 800962e:	4619      	mov	r1, r3
 8009630:	4825      	ldr	r0, [pc, #148]	; (80096c8 <board_init_common_timer_init+0x1c4>)
 8009632:	f7fd facf 	bl	8006bd4 <HAL_TIM_PWM_ConfigChannel>
 8009636:	4603      	mov	r3, r0
 8009638:	2b00      	cmp	r3, #0
 800963a:	d001      	beq.n	8009640 <board_init_common_timer_init+0x13c>
 800963c:	f000 f93f 	bl	80098be <Error_Handler>
    sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009640:	2300      	movs	r3, #0
 8009642:	603b      	str	r3, [r7, #0]
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009644:	2300      	movs	r3, #0
 8009646:	607b      	str	r3, [r7, #4]
    sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009648:	2300      	movs	r3, #0
 800964a:	60bb      	str	r3, [r7, #8]
    sBreakDeadTimeConfig.DeadTime = 0;
 800964c:	2300      	movs	r3, #0
 800964e:	60fb      	str	r3, [r7, #12]
    sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009650:	2300      	movs	r3, #0
 8009652:	613b      	str	r3, [r7, #16]
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009654:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009658:	617b      	str	r3, [r7, #20]
    sBreakDeadTimeConfig.BreakFilter = 0;
 800965a:	2300      	movs	r3, #0
 800965c:	61bb      	str	r3, [r7, #24]
    sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800965e:	2300      	movs	r3, #0
 8009660:	61fb      	str	r3, [r7, #28]
    sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8009662:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009666:	623b      	str	r3, [r7, #32]
    sBreakDeadTimeConfig.Break2Filter = 0;
 8009668:	2300      	movs	r3, #0
 800966a:	627b      	str	r3, [r7, #36]	; 0x24
    sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800966c:	2300      	movs	r3, #0
 800966e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIMEx_ConfigBreakDeadTime(&g_tim1_handle, &sBreakDeadTimeConfig) != HAL_OK) Error_Handler();
 8009670:	463b      	mov	r3, r7
 8009672:	4619      	mov	r1, r3
 8009674:	4814      	ldr	r0, [pc, #80]	; (80096c8 <board_init_common_timer_init+0x1c4>)
 8009676:	f7fe f977 	bl	8007968 <HAL_TIMEx_ConfigBreakDeadTime>
 800967a:	4603      	mov	r3, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	d001      	beq.n	8009684 <board_init_common_timer_init+0x180>
 8009680:	f000 f91d 	bl	80098be <Error_Handler>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_1);
 8009684:	2100      	movs	r1, #0
 8009686:	4810      	ldr	r0, [pc, #64]	; (80096c8 <board_init_common_timer_init+0x1c4>)
 8009688:	f7fd f9bc 	bl	8006a04 <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_2);
 800968c:	2104      	movs	r1, #4
 800968e:	480e      	ldr	r0, [pc, #56]	; (80096c8 <board_init_common_timer_init+0x1c4>)
 8009690:	f7fd f9b8 	bl	8006a04 <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_3);
 8009694:	2108      	movs	r1, #8
 8009696:	480c      	ldr	r0, [pc, #48]	; (80096c8 <board_init_common_timer_init+0x1c4>)
 8009698:	f7fd f9b4 	bl	8006a04 <HAL_TIM_PWM_Stop_DMA>
    GPIO_InitStruct.Pin = PIN_TIM1_CH1|PIN_TIM1_CH2|PIN_TIM1_CH3;
 800969c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80096a0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096a2:	2302      	movs	r3, #2
 80096a4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096a6:	2300      	movs	r3, #0
 80096a8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096aa:	2300      	movs	r3, #0
 80096ac:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80096ae:	2301      	movs	r3, #1
 80096b0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096b2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80096b6:	4619      	mov	r1, r3
 80096b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80096bc:	f7fb f96c 	bl	8004998 <HAL_GPIO_Init>
}
 80096c0:	bf00      	nop
 80096c2:	3778      	adds	r7, #120	; 0x78
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	200025dc 	.word	0x200025dc
 80096cc:	40012c00 	.word	0x40012c00

080096d0 <board_init_common_nvic_setup_interrupts>:


static void board_init_common_nvic_setup_interrupts(void)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	af00      	add	r7, sp, #0
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI0_IRQn);
 80096d4:	4b30      	ldr	r3, [pc, #192]	; (8009798 <board_init_common_nvic_setup_interrupts+0xc8>)
 80096d6:	2206      	movs	r2, #6
 80096d8:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI2_IRQn);
 80096da:	4b2f      	ldr	r3, [pc, #188]	; (8009798 <board_init_common_nvic_setup_interrupts+0xc8>)
 80096dc:	2208      	movs	r2, #8
 80096de:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI9_5_IRQn);
 80096e0:	4b2d      	ldr	r3, [pc, #180]	; (8009798 <board_init_common_nvic_setup_interrupts+0xc8>)
 80096e2:	2217      	movs	r2, #23
 80096e4:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI15_10_IRQn);
 80096e6:	4b2c      	ldr	r3, [pc, #176]	; (8009798 <board_init_common_nvic_setup_interrupts+0xc8>)
 80096e8:	2228      	movs	r2, #40	; 0x28
 80096ea:	615a      	str	r2, [r3, #20]
    HAL_NVIC_SetPriority(EXTI0_IRQn, 24, 0);
 80096ec:	2200      	movs	r2, #0
 80096ee:	2118      	movs	r1, #24
 80096f0:	2006      	movs	r0, #6
 80096f2:	f7fa fe40 	bl	8004376 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80096f6:	2006      	movs	r0, #6
 80096f8:	f7fa fe59 	bl	80043ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI2_IRQn, 24, 0);
 80096fc:	2200      	movs	r2, #0
 80096fe:	2118      	movs	r1, #24
 8009700:	2008      	movs	r0, #8
 8009702:	f7fa fe38 	bl	8004376 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8009706:	2008      	movs	r0, #8
 8009708:	f7fa fe51 	bl	80043ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 24, 0);
 800970c:	2200      	movs	r2, #0
 800970e:	2118      	movs	r1, #24
 8009710:	2017      	movs	r0, #23
 8009712:	f7fa fe30 	bl	8004376 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8009716:	2017      	movs	r0, #23
 8009718:	f7fa fe49 	bl	80043ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 24, 0);
 800971c:	2200      	movs	r2, #0
 800971e:	2118      	movs	r1, #24
 8009720:	2028      	movs	r0, #40	; 0x28
 8009722:	f7fa fe28 	bl	8004376 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8009726:	2028      	movs	r0, #40	; 0x28
 8009728:	f7fa fe41 	bl	80043ae <HAL_NVIC_EnableIRQ>
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI0_IRQn);
 800972c:	4b1a      	ldr	r3, [pc, #104]	; (8009798 <board_init_common_nvic_setup_interrupts+0xc8>)
 800972e:	2206      	movs	r2, #6
 8009730:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI2_IRQn);
 8009732:	4b19      	ldr	r3, [pc, #100]	; (8009798 <board_init_common_nvic_setup_interrupts+0xc8>)
 8009734:	2208      	movs	r2, #8
 8009736:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI9_5_IRQn);
 8009738:	4b17      	ldr	r3, [pc, #92]	; (8009798 <board_init_common_nvic_setup_interrupts+0xc8>)
 800973a:	2217      	movs	r2, #23
 800973c:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI15_10_IRQn);
 800973e:	4b16      	ldr	r3, [pc, #88]	; (8009798 <board_init_common_nvic_setup_interrupts+0xc8>)
 8009740:	2228      	movs	r2, #40	; 0x28
 8009742:	615a      	str	r2, [r3, #20]
    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8009744:	2200      	movs	r2, #0
 8009746:	2100      	movs	r1, #0
 8009748:	200c      	movs	r0, #12
 800974a:	f7fa fe14 	bl	8004376 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800974e:	200c      	movs	r0, #12
 8009750:	f7fa fe2d 	bl	80043ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8009754:	2200      	movs	r2, #0
 8009756:	2100      	movs	r1, #0
 8009758:	200d      	movs	r0, #13
 800975a:	f7fa fe0c 	bl	8004376 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800975e:	200d      	movs	r0, #13
 8009760:	f7fa fe25 	bl	80043ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8009764:	2200      	movs	r2, #0
 8009766:	2100      	movs	r1, #0
 8009768:	200f      	movs	r0, #15
 800976a:	f7fa fe04 	bl	8004376 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800976e:	200f      	movs	r0, #15
 8009770:	f7fa fe1d 	bl	80043ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8009774:	2200      	movs	r2, #0
 8009776:	2100      	movs	r1, #0
 8009778:	2010      	movs	r0, #16
 800977a:	f7fa fdfc 	bl	8004376 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800977e:	2010      	movs	r0, #16
 8009780:	f7fa fe15 	bl	80043ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8009784:	2200      	movs	r2, #0
 8009786:	2100      	movs	r1, #0
 8009788:	2011      	movs	r0, #17
 800978a:	f7fa fdf4 	bl	8004376 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800978e:	2011      	movs	r0, #17
 8009790:	f7fa fe0d 	bl	80043ae <HAL_NVIC_EnableIRQ>
}
 8009794:	bf00      	nop
 8009796:	bd80      	pop	{r7, pc}
 8009798:	40010400 	.word	0x40010400

0800979c <board_init_common_setup_wakeups>:


static void board_init_common_setup_wakeups(void)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b086      	sub	sp, #24
 80097a0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80097a2:	1d3b      	adds	r3, r7, #4
 80097a4:	2200      	movs	r2, #0
 80097a6:	601a      	str	r2, [r3, #0]
 80097a8:	605a      	str	r2, [r3, #4]
 80097aa:	609a      	str	r2, [r3, #8]
 80097ac:	60da      	str	r2, [r3, #12]
 80097ae:	611a      	str	r2, [r3, #16]

    // future setup wakeups
    GPIO_InitStruct.Pin = PIN_WKUP_1|PIN_WKUP_4;
 80097b0:	2305      	movs	r3, #5
 80097b2:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80097b4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80097b8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80097ba:	2301      	movs	r3, #1
 80097bc:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 80097be:	1d3b      	adds	r3, r7, #4
 80097c0:	4619      	mov	r1, r3
 80097c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80097c6:	f7fb f8e7 	bl	8004998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_WKUP_2|PIN_WKUP_3;
 80097ca:	f242 0320 	movw	r3, #8224	; 0x2020
 80097ce:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80097d0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80097d4:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80097d6:	2301      	movs	r3, #1
 80097d8:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 80097da:	1d3b      	adds	r3, r7, #4
 80097dc:	4619      	mov	r1, r3
 80097de:	4804      	ldr	r0, [pc, #16]	; (80097f0 <board_init_common_setup_wakeups+0x54>)
 80097e0:	f7fb f8da 	bl	8004998 <HAL_GPIO_Init>
    board_init_common_nvic_setup_interrupts();
 80097e4:	f7ff ff74 	bl	80096d0 <board_init_common_nvic_setup_interrupts>
}
 80097e8:	bf00      	nop
 80097ea:	3718      	adds	r7, #24
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	48000800 	.word	0x48000800

080097f4 <board_init_port_wakeup>:

static void board_init_port_wakeup(void)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b087      	sub	sp, #28
 80097f8:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80097fa:	4b21      	ldr	r3, [pc, #132]	; (8009880 <board_init_port_wakeup+0x8c>)
 80097fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097fe:	4a20      	ldr	r2, [pc, #128]	; (8009880 <board_init_port_wakeup+0x8c>)
 8009800:	f043 0301 	orr.w	r3, r3, #1
 8009804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009806:	4b1e      	ldr	r3, [pc, #120]	; (8009880 <board_init_port_wakeup+0x8c>)
 8009808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800980a:	f003 0301 	and.w	r3, r3, #1
 800980e:	617b      	str	r3, [r7, #20]
 8009810:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009812:	4b1b      	ldr	r3, [pc, #108]	; (8009880 <board_init_port_wakeup+0x8c>)
 8009814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009816:	4a1a      	ldr	r2, [pc, #104]	; (8009880 <board_init_port_wakeup+0x8c>)
 8009818:	f043 0302 	orr.w	r3, r3, #2
 800981c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800981e:	4b18      	ldr	r3, [pc, #96]	; (8009880 <board_init_port_wakeup+0x8c>)
 8009820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009822:	f003 0302 	and.w	r3, r3, #2
 8009826:	613b      	str	r3, [r7, #16]
 8009828:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800982a:	4b15      	ldr	r3, [pc, #84]	; (8009880 <board_init_port_wakeup+0x8c>)
 800982c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800982e:	4a14      	ldr	r2, [pc, #80]	; (8009880 <board_init_port_wakeup+0x8c>)
 8009830:	f043 0304 	orr.w	r3, r3, #4
 8009834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009836:	4b12      	ldr	r3, [pc, #72]	; (8009880 <board_init_port_wakeup+0x8c>)
 8009838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800983a:	f003 0304 	and.w	r3, r3, #4
 800983e:	60fb      	str	r3, [r7, #12]
 8009840:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8009842:	4b0f      	ldr	r3, [pc, #60]	; (8009880 <board_init_port_wakeup+0x8c>)
 8009844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009846:	4a0e      	ldr	r2, [pc, #56]	; (8009880 <board_init_port_wakeup+0x8c>)
 8009848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800984c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800984e:	4b0c      	ldr	r3, [pc, #48]	; (8009880 <board_init_port_wakeup+0x8c>)
 8009850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009856:	60bb      	str	r3, [r7, #8]
 8009858:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_DMA1_CLK_ENABLE();
 800985a:	4b09      	ldr	r3, [pc, #36]	; (8009880 <board_init_port_wakeup+0x8c>)
 800985c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800985e:	4a08      	ldr	r2, [pc, #32]	; (8009880 <board_init_port_wakeup+0x8c>)
 8009860:	f043 0301 	orr.w	r3, r3, #1
 8009864:	6493      	str	r3, [r2, #72]	; 0x48
 8009866:	4b06      	ldr	r3, [pc, #24]	; (8009880 <board_init_port_wakeup+0x8c>)
 8009868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800986a:	f003 0301 	and.w	r3, r3, #1
 800986e:	607b      	str	r3, [r7, #4]
 8009870:	687b      	ldr	r3, [r7, #4]
}
 8009872:	bf00      	nop
 8009874:	371c      	adds	r7, #28
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr
 800987e:	bf00      	nop
 8009880:	40021000 	.word	0x40021000

08009884 <board_init_common_board_init>:


void board_init_common_board_init(void)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	af00      	add	r7, sp, #0
    srand(time(0));
 8009888:	2000      	movs	r0, #0
 800988a:	f001 fa6f 	bl	800ad6c <time>
 800988e:	4602      	mov	r2, r0
 8009890:	460b      	mov	r3, r1
 8009892:	4613      	mov	r3, r2
 8009894:	4618      	mov	r0, r3
 8009896:	f001 f971 	bl	800ab7c <srand>
    HAL_Init();
 800989a:	f7fa fba7 	bl	8003fec <HAL_Init>
    SystemClock_Config();
 800989e:	f7ff fdc9 	bl	8009434 <SystemClock_Config>

    board_init_port_wakeup();
 80098a2:	f7ff ffa7 	bl	80097f4 <board_init_port_wakeup>
    board_init_common_setup_wakeups();
 80098a6:	f7ff ff79 	bl	800979c <board_init_common_setup_wakeups>
    board_init_specific();
 80098aa:	f000 fec1 	bl	800a630 <board_init_specific>

    board_init_common_timer_init();
 80098ae:	f7ff fe29 	bl	8009504 <board_init_common_timer_init>

    ws2812b_init();
 80098b2:	f7f7 f917 	bl	8000ae4 <ws2812b_init>

    board_init_common_rtc_init();
 80098b6:	f7ff fd95 	bl	80093e4 <board_init_common_rtc_init>
}
 80098ba:	bf00      	nop
 80098bc:	bd80      	pop	{r7, pc}

080098be <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80098be:	b480      	push	{r7}
 80098c0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80098c2:	b672      	cpsid	i
}
 80098c4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80098c6:	e7fe      	b.n	80098c6 <Error_Handler+0x8>

080098c8 <spi_config_hal_setup>:
}



void spi_config_hal_setup(void)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b088      	sub	sp, #32
 80098cc:	af00      	add	r7, sp, #0
    //RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
    GPIO_InitTypeDef  GPIO_InitStruct;

    for (spi_config_bus_e bus = SPI_CONFIG_BUS_FIRST; bus < NUM_SPI_CONFIG_BUSES; bus++)
 80098ce:	2300      	movs	r3, #0
 80098d0:	77fb      	strb	r3, [r7, #31]
 80098d2:	e0a3      	b.n	8009a1c <spi_config_hal_setup+0x154>
    {
    	if (g_spi_num_chips_per_bus[bus])
 80098d4:	7ffb      	ldrb	r3, [r7, #31]
 80098d6:	4a56      	ldr	r2, [pc, #344]	; (8009a30 <spi_config_hal_setup+0x168>)
 80098d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	f000 809a 	beq.w	8009a16 <spi_config_hal_setup+0x14e>
    	{
    	    GPIO_InitStruct.Pin       = g_spi_config[bus].pin.mosi;
 80098e2:	7ffa      	ldrb	r2, [r7, #31]
 80098e4:	4953      	ldr	r1, [pc, #332]	; (8009a34 <spi_config_hal_setup+0x16c>)
 80098e6:	4613      	mov	r3, r2
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	4413      	add	r3, r2
 80098ec:	00db      	lsls	r3, r3, #3
 80098ee:	440b      	add	r3, r1
 80098f0:	881b      	ldrh	r3, [r3, #0]
 80098f2:	60bb      	str	r3, [r7, #8]
    	    GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 80098f4:	2300      	movs	r3, #0
 80098f6:	60fb      	str	r3, [r7, #12]
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80098f8:	2300      	movs	r3, #0
 80098fa:	613b      	str	r3, [r7, #16]
    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 80098fc:	2300      	movs	r3, #0
 80098fe:	617b      	str	r3, [r7, #20]
//    	    GPIO_InitStruct.Alternate = g_spi_config[bus].pin.mosi_alt_func;
    	    HAL_GPIO_Init(g_spi_config[bus].pin.mosi_port, &GPIO_InitStruct);
 8009900:	7ffa      	ldrb	r2, [r7, #31]
 8009902:	494c      	ldr	r1, [pc, #304]	; (8009a34 <spi_config_hal_setup+0x16c>)
 8009904:	4613      	mov	r3, r2
 8009906:	009b      	lsls	r3, r3, #2
 8009908:	4413      	add	r3, r2
 800990a:	00db      	lsls	r3, r3, #3
 800990c:	440b      	add	r3, r1
 800990e:	3304      	adds	r3, #4
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f107 0208 	add.w	r2, r7, #8
 8009916:	4611      	mov	r1, r2
 8009918:	4618      	mov	r0, r3
 800991a:	f7fb f83d 	bl	8004998 <HAL_GPIO_Init>

    	    GPIO_InitStruct.Pin       = g_spi_config[bus].pin.miso;
 800991e:	7ffa      	ldrb	r2, [r7, #31]
 8009920:	4944      	ldr	r1, [pc, #272]	; (8009a34 <spi_config_hal_setup+0x16c>)
 8009922:	4613      	mov	r3, r2
 8009924:	009b      	lsls	r3, r3, #2
 8009926:	4413      	add	r3, r2
 8009928:	00db      	lsls	r3, r3, #3
 800992a:	440b      	add	r3, r1
 800992c:	330a      	adds	r3, #10
 800992e:	881b      	ldrh	r3, [r3, #0]
 8009930:	60bb      	str	r3, [r7, #8]
    	    GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 8009932:	2300      	movs	r3, #0
 8009934:	60fb      	str	r3, [r7, #12]
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8009936:	2300      	movs	r3, #0
 8009938:	613b      	str	r3, [r7, #16]
    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 800993a:	2300      	movs	r3, #0
 800993c:	617b      	str	r3, [r7, #20]
//    	    GPIO_InitStruct.Alternate = g_spi_config[bus].pin.miso_alt_func;
    	    HAL_GPIO_Init(g_spi_config[bus].pin.miso_port, &GPIO_InitStruct);
 800993e:	7ffa      	ldrb	r2, [r7, #31]
 8009940:	493c      	ldr	r1, [pc, #240]	; (8009a34 <spi_config_hal_setup+0x16c>)
 8009942:	4613      	mov	r3, r2
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	4413      	add	r3, r2
 8009948:	00db      	lsls	r3, r3, #3
 800994a:	440b      	add	r3, r1
 800994c:	330c      	adds	r3, #12
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f107 0208 	add.w	r2, r7, #8
 8009954:	4611      	mov	r1, r2
 8009956:	4618      	mov	r0, r3
 8009958:	f7fb f81e 	bl	8004998 <HAL_GPIO_Init>

    	    GPIO_InitStruct.Pin       = g_spi_config[bus].pin.sck;
 800995c:	7ffa      	ldrb	r2, [r7, #31]
 800995e:	4935      	ldr	r1, [pc, #212]	; (8009a34 <spi_config_hal_setup+0x16c>)
 8009960:	4613      	mov	r3, r2
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	4413      	add	r3, r2
 8009966:	00db      	lsls	r3, r3, #3
 8009968:	440b      	add	r3, r1
 800996a:	3312      	adds	r3, #18
 800996c:	881b      	ldrh	r3, [r3, #0]
 800996e:	60bb      	str	r3, [r7, #8]
    	    GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 8009970:	2300      	movs	r3, #0
 8009972:	60fb      	str	r3, [r7, #12]
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8009974:	2300      	movs	r3, #0
 8009976:	613b      	str	r3, [r7, #16]
    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 8009978:	2300      	movs	r3, #0
 800997a:	617b      	str	r3, [r7, #20]
//    	    GPIO_InitStruct.Alternate = g_spi_config[bus].pin.sck_alt_func;
    	    HAL_GPIO_Init(g_spi_config[bus].pin.sck_port, &GPIO_InitStruct);
 800997c:	7ffa      	ldrb	r2, [r7, #31]
 800997e:	492d      	ldr	r1, [pc, #180]	; (8009a34 <spi_config_hal_setup+0x16c>)
 8009980:	4613      	mov	r3, r2
 8009982:	009b      	lsls	r3, r3, #2
 8009984:	4413      	add	r3, r2
 8009986:	00db      	lsls	r3, r3, #3
 8009988:	440b      	add	r3, r1
 800998a:	3314      	adds	r3, #20
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f107 0208 	add.w	r2, r7, #8
 8009992:	4611      	mov	r1, r2
 8009994:	4618      	mov	r0, r3
 8009996:	f7fa ffff 	bl	8004998 <HAL_GPIO_Init>

    	    GPIO_InitStruct.Pin       = g_spi_config[bus].pin.csn;
 800999a:	7ffa      	ldrb	r2, [r7, #31]
 800999c:	4925      	ldr	r1, [pc, #148]	; (8009a34 <spi_config_hal_setup+0x16c>)
 800999e:	4613      	mov	r3, r2
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	4413      	add	r3, r2
 80099a4:	00db      	lsls	r3, r3, #3
 80099a6:	440b      	add	r3, r1
 80099a8:	331a      	adds	r3, #26
 80099aa:	881b      	ldrh	r3, [r3, #0]
 80099ac:	60bb      	str	r3, [r7, #8]
    	    GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 80099ae:	2300      	movs	r3, #0
 80099b0:	60fb      	str	r3, [r7, #12]
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80099b2:	2300      	movs	r3, #0
 80099b4:	613b      	str	r3, [r7, #16]
//    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
    	    HAL_GPIO_Init(g_spi_config[bus].pin.csn_port, &GPIO_InitStruct);
 80099b6:	7ffa      	ldrb	r2, [r7, #31]
 80099b8:	491e      	ldr	r1, [pc, #120]	; (8009a34 <spi_config_hal_setup+0x16c>)
 80099ba:	4613      	mov	r3, r2
 80099bc:	009b      	lsls	r3, r3, #2
 80099be:	4413      	add	r3, r2
 80099c0:	00db      	lsls	r3, r3, #3
 80099c2:	440b      	add	r3, r1
 80099c4:	331c      	adds	r3, #28
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f107 0208 	add.w	r2, r7, #8
 80099cc:	4611      	mov	r1, r2
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7fa ffe2 	bl	8004998 <HAL_GPIO_Init>

        	switch (bus)
 80099d4:	7ffb      	ldrb	r3, [r7, #31]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d10c      	bne.n	80099f4 <spi_config_hal_setup+0x12c>
        	{
        		case SPI_CONFIG_BUS_WIFI:
        		    __HAL_RCC_SPI1_CLK_ENABLE();
 80099da:	4b17      	ldr	r3, [pc, #92]	; (8009a38 <spi_config_hal_setup+0x170>)
 80099dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099de:	4a16      	ldr	r2, [pc, #88]	; (8009a38 <spi_config_hal_setup+0x170>)
 80099e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80099e4:	6613      	str	r3, [r2, #96]	; 0x60
 80099e6:	4b14      	ldr	r3, [pc, #80]	; (8009a38 <spi_config_hal_setup+0x170>)
 80099e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80099ee:	607b      	str	r3, [r7, #4]
 80099f0:	687b      	ldr	r3, [r7, #4]
        		break;
 80099f2:	e000      	b.n	80099f6 <spi_config_hal_setup+0x12e>
        		default:
				break;
 80099f4:	bf00      	nop
        	}
    	    if(HAL_SPI_Init(g_spi_config[bus].handle) != HAL_OK)
 80099f6:	7ffa      	ldrb	r2, [r7, #31]
 80099f8:	490e      	ldr	r1, [pc, #56]	; (8009a34 <spi_config_hal_setup+0x16c>)
 80099fa:	4613      	mov	r3, r2
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	4413      	add	r3, r2
 8009a00:	00db      	lsls	r3, r3, #3
 8009a02:	440b      	add	r3, r1
 8009a04:	3324      	adds	r3, #36	; 0x24
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f7fc fca7 	bl	800635c <HAL_SPI_Init>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d000      	beq.n	8009a16 <spi_config_hal_setup+0x14e>
    	    {
    	        /* Initialization Error */
    	        while(1);
 8009a14:	e7fe      	b.n	8009a14 <spi_config_hal_setup+0x14c>
    for (spi_config_bus_e bus = SPI_CONFIG_BUS_FIRST; bus < NUM_SPI_CONFIG_BUSES; bus++)
 8009a16:	7ffb      	ldrb	r3, [r7, #31]
 8009a18:	3301      	adds	r3, #1
 8009a1a:	77fb      	strb	r3, [r7, #31]
 8009a1c:	7ffb      	ldrb	r3, [r7, #31]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	f43f af58 	beq.w	80098d4 <spi_config_hal_setup+0xc>
    // TODO make this an array that gets populated so you don't need to lookup everytime..
//    for (spi_access_chip_id_e chip_id = SPI_ACCESS_CHIP_ID_FIRST; chip_id < NUM_SPI_ACCESS_CHIP_IDS; chip_id++)
//    {
//    	g_spi_chip_id_handle[chip_id] = spi_config_bus_lookup_from_chip_id(chip_id);
//    }
}
 8009a24:	bf00      	nop
 8009a26:	bf00      	nop
 8009a28:	3720      	adds	r7, #32
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}
 8009a2e:	bf00      	nop
 8009a30:	20000164 	.word	0x20000164
 8009a34:	0800bb9c 	.word	0x0800bb9c
 8009a38:	40021000 	.word	0x40021000

08009a3c <HAL_UART_TxCpltCallback>:

bool gb_tx_complete = false;
bool gb_rx_complete = false;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
	gb_tx_complete = true;
 8009a44:	4b05      	ldr	r3, [pc, #20]	; (8009a5c <HAL_UART_TxCpltCallback+0x20>)
 8009a46:	2201      	movs	r2, #1
 8009a48:	701a      	strb	r2, [r3, #0]
	gb_rx_complete = false;
 8009a4a:	4b05      	ldr	r3, [pc, #20]	; (8009a60 <HAL_UART_TxCpltCallback+0x24>)
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	701a      	strb	r2, [r3, #0]
}
 8009a50:	bf00      	nop
 8009a52:	370c      	adds	r7, #12
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr
 8009a5c:	20002628 	.word	0x20002628
 8009a60:	20002629 	.word	0x20002629

08009a64 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b083      	sub	sp, #12
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
	gb_rx_complete = true;
 8009a6c:	4b05      	ldr	r3, [pc, #20]	; (8009a84 <HAL_UART_RxCpltCallback+0x20>)
 8009a6e:	2201      	movs	r2, #1
 8009a70:	701a      	strb	r2, [r3, #0]
	gb_tx_complete = false;
 8009a72:	4b05      	ldr	r3, [pc, #20]	; (8009a88 <HAL_UART_RxCpltCallback+0x24>)
 8009a74:	2200      	movs	r2, #0
 8009a76:	701a      	strb	r2, [r3, #0]
}
 8009a78:	bf00      	nop
 8009a7a:	370c      	adds	r7, #12
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr
 8009a84:	20002629 	.word	0x20002629
 8009a88:	20002628 	.word	0x20002628

08009a8c <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(uart_config_esp8266_handle());
 8009a90:	f000 f948 	bl	8009d24 <uart_config_esp8266_handle>
 8009a94:	4603      	mov	r3, r0
 8009a96:	4618      	mov	r0, r3
 8009a98:	f7fe fa0e 	bl	8007eb8 <HAL_UART_IRQHandler>
	//__HAL_UART_CLEAR_IT(uart_config_esp8266_handle(), U ART_IT_TXE);

	//g_counter++;
}
 8009a9c:	bf00      	nop
 8009a9e:	bd80      	pop	{r7, pc}

08009aa0 <uart_access_hal_write_and_read_block>:

uint8_t g_data_read[100] = {0xff};
void uart_access_hal_write_and_read_block(uart_handle_t ph_uart, uint8_t* write_data, uint16_t write_len, uint8_t* read_buf, uint16_t read_len)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b084      	sub	sp, #16
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	60f8      	str	r0, [r7, #12]
 8009aa8:	60b9      	str	r1, [r7, #8]
 8009aaa:	603b      	str	r3, [r7, #0]
 8009aac:	4613      	mov	r3, r2
 8009aae:	80fb      	strh	r3, [r7, #6]
	// clear UART with 0 timeout call below.
	HAL_UART_Receive(ph_uart, g_data_read, 10, 0);
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	220a      	movs	r2, #10
 8009ab4:	4913      	ldr	r1, [pc, #76]	; (8009b04 <uart_access_hal_write_and_read_block+0x64>)
 8009ab6:	68f8      	ldr	r0, [r7, #12]
 8009ab8:	f7fe f869 	bl	8007b8e <HAL_UART_Receive>

	// start listening for receive before TX
	if (HAL_OK != HAL_UART_Receive_IT(ph_uart, read_buf, read_len))
 8009abc:	8b3b      	ldrh	r3, [r7, #24]
 8009abe:	461a      	mov	r2, r3
 8009ac0:	6839      	ldr	r1, [r7, #0]
 8009ac2:	68f8      	ldr	r0, [r7, #12]
 8009ac4:	f7fe f9a2 	bl	8007e0c <HAL_UART_Receive_IT>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d000      	beq.n	8009ad0 <uart_access_hal_write_and_read_block+0x30>
	{
		while (1);
 8009ace:	e7fe      	b.n	8009ace <uart_access_hal_write_and_read_block+0x2e>
	}
	gb_tx_complete = false;
 8009ad0:	4b0d      	ldr	r3, [pc, #52]	; (8009b08 <uart_access_hal_write_and_read_block+0x68>)
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	701a      	strb	r2, [r3, #0]

	// tx
	if (HAL_OK != HAL_UART_Transmit_IT(ph_uart, write_data, write_len))
 8009ad6:	88fb      	ldrh	r3, [r7, #6]
 8009ad8:	461a      	mov	r2, r3
 8009ada:	68b9      	ldr	r1, [r7, #8]
 8009adc:	68f8      	ldr	r0, [r7, #12]
 8009ade:	f7fe f927 	bl	8007d30 <HAL_UART_Transmit_IT>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d000      	beq.n	8009aea <uart_access_hal_write_and_read_block+0x4a>
	{
		while (1);
 8009ae8:	e7fe      	b.n	8009ae8 <uart_access_hal_write_and_read_block+0x48>
	}

	// wait for rx complete
	while (!gb_rx_complete);
 8009aea:	bf00      	nop
 8009aec:	4b07      	ldr	r3, [pc, #28]	; (8009b0c <uart_access_hal_write_and_read_block+0x6c>)
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	f083 0301 	eor.w	r3, r3, #1
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d1f8      	bne.n	8009aec <uart_access_hal_write_and_read_block+0x4c>
}
 8009afa:	bf00      	nop
 8009afc:	bf00      	nop
 8009afe:	3710      	adds	r7, #16
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}
 8009b04:	20000094 	.word	0x20000094
 8009b08:	20002628 	.word	0x20002628
 8009b0c:	20002629 	.word	0x20002629

08009b10 <uart_config_hal_setup>:
extern const uart_access_id_e* g_uart_chip_bus_lookup[NUM_UART_CONFIG_BUSES];
extern uint16_t g_uart_num_chips_per_bus[NUM_UART_CONFIG_BUSES];


void uart_config_hal_setup(void)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b0a0      	sub	sp, #128	; 0x80
 8009b14:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStruct;

    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009b16:	f107 030c 	add.w	r3, r7, #12
 8009b1a:	225c      	movs	r2, #92	; 0x5c
 8009b1c:	2100      	movs	r1, #0
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f001 f91c 	bl	800ad5c <memset>

    for (uart_config_bus_e bus = UART_CONFIG_BUS_FIRST; bus < NUM_UART_CONFIG_BUSES; bus++)
 8009b24:	2300      	movs	r3, #0
 8009b26:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8009b2a:	e0e9      	b.n	8009d00 <uart_config_hal_setup+0x1f0>
    {
    	if (g_uart_num_chips_per_bus[bus])
 8009b2c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009b30:	4a78      	ldr	r2, [pc, #480]	; (8009d14 <uart_config_hal_setup+0x204>)
 8009b32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	f000 80dd 	beq.w	8009cf6 <uart_config_hal_setup+0x1e6>
    	{
    	    GPIO_InitStruct.Pin       = g_uart_config[bus].pin.rx;
 8009b3c:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8009b40:	4975      	ldr	r1, [pc, #468]	; (8009d18 <uart_config_hal_setup+0x208>)
 8009b42:	4613      	mov	r3, r2
 8009b44:	005b      	lsls	r3, r3, #1
 8009b46:	4413      	add	r3, r2
 8009b48:	00db      	lsls	r3, r3, #3
 8009b4a:	440b      	add	r3, r1
 8009b4c:	881b      	ldrh	r3, [r3, #0]
 8009b4e:	66bb      	str	r3, [r7, #104]	; 0x68
    	    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8009b50:	2302      	movs	r3, #2
 8009b52:	66fb      	str	r3, [r7, #108]	; 0x6c
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8009b54:	2300      	movs	r3, #0
 8009b56:	673b      	str	r3, [r7, #112]	; 0x70
    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b58:	2303      	movs	r3, #3
 8009b5a:	677b      	str	r3, [r7, #116]	; 0x74
    	    GPIO_InitStruct.Alternate = g_uart_config[bus].pin.rx_alt_func;
 8009b5c:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8009b60:	496d      	ldr	r1, [pc, #436]	; (8009d18 <uart_config_hal_setup+0x208>)
 8009b62:	4613      	mov	r3, r2
 8009b64:	005b      	lsls	r3, r3, #1
 8009b66:	4413      	add	r3, r2
 8009b68:	00db      	lsls	r3, r3, #3
 8009b6a:	440b      	add	r3, r1
 8009b6c:	3308      	adds	r3, #8
 8009b6e:	781b      	ldrb	r3, [r3, #0]
 8009b70:	67bb      	str	r3, [r7, #120]	; 0x78
    	    HAL_GPIO_Init(g_uart_config[bus].pin.rx_port, &GPIO_InitStruct);
 8009b72:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8009b76:	4968      	ldr	r1, [pc, #416]	; (8009d18 <uart_config_hal_setup+0x208>)
 8009b78:	4613      	mov	r3, r2
 8009b7a:	005b      	lsls	r3, r3, #1
 8009b7c:	4413      	add	r3, r2
 8009b7e:	00db      	lsls	r3, r3, #3
 8009b80:	440b      	add	r3, r1
 8009b82:	3304      	adds	r3, #4
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8009b8a:	4611      	mov	r1, r2
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f7fa ff03 	bl	8004998 <HAL_GPIO_Init>

    	    GPIO_InitStruct.Pin       = g_uart_config[bus].pin.tx;
 8009b92:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8009b96:	4960      	ldr	r1, [pc, #384]	; (8009d18 <uart_config_hal_setup+0x208>)
 8009b98:	4613      	mov	r3, r2
 8009b9a:	005b      	lsls	r3, r3, #1
 8009b9c:	4413      	add	r3, r2
 8009b9e:	00db      	lsls	r3, r3, #3
 8009ba0:	440b      	add	r3, r1
 8009ba2:	330a      	adds	r3, #10
 8009ba4:	881b      	ldrh	r3, [r3, #0]
 8009ba6:	66bb      	str	r3, [r7, #104]	; 0x68
    	    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8009ba8:	2302      	movs	r3, #2
 8009baa:	66fb      	str	r3, [r7, #108]	; 0x6c
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8009bac:	2300      	movs	r3, #0
 8009bae:	673b      	str	r3, [r7, #112]	; 0x70
    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8009bb0:	2303      	movs	r3, #3
 8009bb2:	677b      	str	r3, [r7, #116]	; 0x74
    	    GPIO_InitStruct.Alternate = g_uart_config[bus].pin.tx_alt_func;
 8009bb4:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8009bb8:	4957      	ldr	r1, [pc, #348]	; (8009d18 <uart_config_hal_setup+0x208>)
 8009bba:	4613      	mov	r3, r2
 8009bbc:	005b      	lsls	r3, r3, #1
 8009bbe:	4413      	add	r3, r2
 8009bc0:	00db      	lsls	r3, r3, #3
 8009bc2:	440b      	add	r3, r1
 8009bc4:	3310      	adds	r3, #16
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	67bb      	str	r3, [r7, #120]	; 0x78
    	    HAL_GPIO_Init(g_uart_config[bus].pin.tx_port, &GPIO_InitStruct);
 8009bca:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8009bce:	4952      	ldr	r1, [pc, #328]	; (8009d18 <uart_config_hal_setup+0x208>)
 8009bd0:	4613      	mov	r3, r2
 8009bd2:	005b      	lsls	r3, r3, #1
 8009bd4:	4413      	add	r3, r2
 8009bd6:	00db      	lsls	r3, r3, #3
 8009bd8:	440b      	add	r3, r1
 8009bda:	330c      	adds	r3, #12
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8009be2:	4611      	mov	r1, r2
 8009be4:	4618      	mov	r0, r3
 8009be6:	f7fa fed7 	bl	8004998 <HAL_GPIO_Init>

    	    switch (bus)
 8009bea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d002      	beq.n	8009bf8 <uart_config_hal_setup+0xe8>
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	d01b      	beq.n	8009c2e <uart_config_hal_setup+0x11e>
    	    	       //Error_Handler();
    	    	     }
    	    	    __HAL_RCC_USART1_CLK_ENABLE();
				break;
    	    	default:
    	    	break;
 8009bf6:	e034      	b.n	8009c62 <uart_config_hal_setup+0x152>
    	    	    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8009bf8:	2320      	movs	r3, #32
 8009bfa:	60fb      	str	r3, [r7, #12]
    	    	    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_LSE;
 8009bfc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009c00:	63bb      	str	r3, [r7, #56]	; 0x38
    	    	    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009c02:	f107 030c 	add.w	r3, r7, #12
 8009c06:	4618      	mov	r0, r3
 8009c08:	f7fb ff8c 	bl	8005b24 <HAL_RCCEx_PeriphCLKConfig>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d000      	beq.n	8009c14 <uart_config_hal_setup+0x104>
    	    	         while(1);
 8009c12:	e7fe      	b.n	8009c12 <uart_config_hal_setup+0x102>
    	    	    __HAL_RCC_LPUART1_CLK_ENABLE();
 8009c14:	4b41      	ldr	r3, [pc, #260]	; (8009d1c <uart_config_hal_setup+0x20c>)
 8009c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c18:	4a40      	ldr	r2, [pc, #256]	; (8009d1c <uart_config_hal_setup+0x20c>)
 8009c1a:	f043 0301 	orr.w	r3, r3, #1
 8009c1e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8009c20:	4b3e      	ldr	r3, [pc, #248]	; (8009d1c <uart_config_hal_setup+0x20c>)
 8009c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c24:	f003 0301 	and.w	r3, r3, #1
 8009c28:	60bb      	str	r3, [r7, #8]
 8009c2a:	68bb      	ldr	r3, [r7, #8]
    	    	break;
 8009c2c:	e019      	b.n	8009c62 <uart_config_hal_setup+0x152>
    	    	    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	60fb      	str	r3, [r7, #12]
    	    	    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8009c32:	2300      	movs	r3, #0
 8009c34:	62fb      	str	r3, [r7, #44]	; 0x2c
    	    	    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009c36:	f107 030c 	add.w	r3, r7, #12
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f7fb ff72 	bl	8005b24 <HAL_RCCEx_PeriphCLKConfig>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d000      	beq.n	8009c48 <uart_config_hal_setup+0x138>
    	    	         while(1);
 8009c46:	e7fe      	b.n	8009c46 <uart_config_hal_setup+0x136>
    	    	    __HAL_RCC_USART1_CLK_ENABLE();
 8009c48:	4b34      	ldr	r3, [pc, #208]	; (8009d1c <uart_config_hal_setup+0x20c>)
 8009c4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c4c:	4a33      	ldr	r2, [pc, #204]	; (8009d1c <uart_config_hal_setup+0x20c>)
 8009c4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009c52:	6613      	str	r3, [r2, #96]	; 0x60
 8009c54:	4b31      	ldr	r3, [pc, #196]	; (8009d1c <uart_config_hal_setup+0x20c>)
 8009c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c5c:	607b      	str	r3, [r7, #4]
 8009c5e:	687b      	ldr	r3, [r7, #4]
				break;
 8009c60:	bf00      	nop
    	    }
    	    //UART_ITConfig(USART1, UART_IT_TXE, ENABLE);
    	    //UART_ITConfig(USART1, UART_IT_RXNE, ENABLE);
    	    if(HAL_UART_DeInit(&g_uart_handle_config[bus]) != HAL_OK)
 8009c62:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8009c66:	4613      	mov	r3, r2
 8009c68:	015b      	lsls	r3, r3, #5
 8009c6a:	4413      	add	r3, r2
 8009c6c:	009b      	lsls	r3, r3, #2
 8009c6e:	4a2c      	ldr	r2, [pc, #176]	; (8009d20 <uart_config_hal_setup+0x210>)
 8009c70:	4413      	add	r3, r2
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7fd ff3e 	bl	8007af4 <HAL_UART_DeInit>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d000      	beq.n	8009c80 <uart_config_hal_setup+0x170>
    	    {
    	        while(1);//Error_Handler();
 8009c7e:	e7fe      	b.n	8009c7e <uart_config_hal_setup+0x16e>
    	    }
    	    if(HAL_UART_Init(&g_uart_handle_config[bus]) != HAL_OK)
 8009c80:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8009c84:	4613      	mov	r3, r2
 8009c86:	015b      	lsls	r3, r3, #5
 8009c88:	4413      	add	r3, r2
 8009c8a:	009b      	lsls	r3, r3, #2
 8009c8c:	4a24      	ldr	r2, [pc, #144]	; (8009d20 <uart_config_hal_setup+0x210>)
 8009c8e:	4413      	add	r3, r2
 8009c90:	4618      	mov	r0, r3
 8009c92:	f7fd fee1 	bl	8007a58 <HAL_UART_Init>
 8009c96:	4603      	mov	r3, r0
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d000      	beq.n	8009c9e <uart_config_hal_setup+0x18e>
    	    {
    	        while(1);//Error_Handler();
 8009c9c:	e7fe      	b.n	8009c9c <uart_config_hal_setup+0x18c>
    	    }
    	    HAL_NVIC_SetPriority(g_uart_config[bus].irqn, 0, 1);
 8009c9e:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8009ca2:	491d      	ldr	r1, [pc, #116]	; (8009d18 <uart_config_hal_setup+0x208>)
 8009ca4:	4613      	mov	r3, r2
 8009ca6:	005b      	lsls	r3, r3, #1
 8009ca8:	4413      	add	r3, r2
 8009caa:	00db      	lsls	r3, r3, #3
 8009cac:	440b      	add	r3, r1
 8009cae:	3314      	adds	r3, #20
 8009cb0:	f993 3000 	ldrsb.w	r3, [r3]
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	2100      	movs	r1, #0
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f7fa fb5c 	bl	8004376 <HAL_NVIC_SetPriority>
    	    HAL_NVIC_EnableIRQ(g_uart_config[bus].irqn);
 8009cbe:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8009cc2:	4915      	ldr	r1, [pc, #84]	; (8009d18 <uart_config_hal_setup+0x208>)
 8009cc4:	4613      	mov	r3, r2
 8009cc6:	005b      	lsls	r3, r3, #1
 8009cc8:	4413      	add	r3, r2
 8009cca:	00db      	lsls	r3, r3, #3
 8009ccc:	440b      	add	r3, r1
 8009cce:	3314      	adds	r3, #20
 8009cd0:	f993 3000 	ldrsb.w	r3, [r3]
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f7fa fb6a 	bl	80043ae <HAL_NVIC_EnableIRQ>
    	    HAL_NVIC_ClearPendingIRQ(g_uart_config[bus].irqn);
 8009cda:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8009cde:	490e      	ldr	r1, [pc, #56]	; (8009d18 <uart_config_hal_setup+0x208>)
 8009ce0:	4613      	mov	r3, r2
 8009ce2:	005b      	lsls	r3, r3, #1
 8009ce4:	4413      	add	r3, r2
 8009ce6:	00db      	lsls	r3, r3, #3
 8009ce8:	440b      	add	r3, r1
 8009cea:	3314      	adds	r3, #20
 8009cec:	f993 3000 	ldrsb.w	r3, [r3]
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f7fa fb84 	bl	80043fe <HAL_NVIC_ClearPendingIRQ>
    for (uart_config_bus_e bus = UART_CONFIG_BUS_FIRST; bus < NUM_UART_CONFIG_BUSES; bus++)
 8009cf6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8009d00:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009d04:	2b01      	cmp	r3, #1
 8009d06:	f67f af11 	bls.w	8009b2c <uart_config_hal_setup+0x1c>
    	}
    }

}
 8009d0a:	bf00      	nop
 8009d0c:	bf00      	nop
 8009d0e:	3780      	adds	r7, #128	; 0x80
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	20000270 	.word	0x20000270
 8009d18:	0800bbc4 	.word	0x0800bbc4
 8009d1c:	40021000 	.word	0x40021000
 8009d20:	20000168 	.word	0x20000168

08009d24 <uart_config_esp8266_handle>:
	return &g_uart_handle_config[UART_CONFIG_BUS_HOST];
}


uart_handle_t uart_config_esp8266_handle(void)
{
 8009d24:	b480      	push	{r7}
 8009d26:	af00      	add	r7, sp, #0
	return &g_uart_handle_config[UART_CONFIG_BUS_ESP8266];
 8009d28:	4b02      	ldr	r3, [pc, #8]	; (8009d34 <uart_config_esp8266_handle+0x10>)
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr
 8009d34:	200001ec 	.word	0x200001ec

08009d38 <HAL_Set_DMA_Callbacks>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);


// Function below added by SRW
static void HAL_Set_DMA_Callbacks(void)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	af00      	add	r7, sp, #0
    HAL_DMA_RegisterCallback(&hdma_tim1_ch1, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8009d3c:	4a0d      	ldr	r2, [pc, #52]	; (8009d74 <HAL_Set_DMA_Callbacks+0x3c>)
 8009d3e:	2100      	movs	r1, #0
 8009d40:	480d      	ldr	r0, [pc, #52]	; (8009d78 <HAL_Set_DMA_Callbacks+0x40>)
 8009d42:	f7fa fdb1 	bl	80048a8 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim1_ch2, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8009d46:	4a0b      	ldr	r2, [pc, #44]	; (8009d74 <HAL_Set_DMA_Callbacks+0x3c>)
 8009d48:	2100      	movs	r1, #0
 8009d4a:	480c      	ldr	r0, [pc, #48]	; (8009d7c <HAL_Set_DMA_Callbacks+0x44>)
 8009d4c:	f7fa fdac 	bl	80048a8 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim1_ch3, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8009d50:	4a08      	ldr	r2, [pc, #32]	; (8009d74 <HAL_Set_DMA_Callbacks+0x3c>)
 8009d52:	2100      	movs	r1, #0
 8009d54:	480a      	ldr	r0, [pc, #40]	; (8009d80 <HAL_Set_DMA_Callbacks+0x48>)
 8009d56:	f7fa fda7 	bl	80048a8 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim15_ch1_up_trig_com, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8009d5a:	4a06      	ldr	r2, [pc, #24]	; (8009d74 <HAL_Set_DMA_Callbacks+0x3c>)
 8009d5c:	2100      	movs	r1, #0
 8009d5e:	4809      	ldr	r0, [pc, #36]	; (8009d84 <HAL_Set_DMA_Callbacks+0x4c>)
 8009d60:	f7fa fda2 	bl	80048a8 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim16_ch1_up, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 8009d64:	4a03      	ldr	r2, [pc, #12]	; (8009d74 <HAL_Set_DMA_Callbacks+0x3c>)
 8009d66:	2100      	movs	r1, #0
 8009d68:	4807      	ldr	r0, [pc, #28]	; (8009d88 <HAL_Set_DMA_Callbacks+0x50>)
 8009d6a:	f7fa fd9d 	bl	80048a8 <HAL_DMA_RegisterCallback>
}
 8009d6e:	bf00      	nop
 8009d70:	bd80      	pop	{r7, pc}
 8009d72:	bf00      	nop
 8009d74:	0800a39f 	.word	0x0800a39f
 8009d78:	20002450 	.word	0x20002450
 8009d7c:	20002498 	.word	0x20002498
 8009d80:	200024e0 	.word	0x200024e0
 8009d84:	20002528 	.word	0x20002528
 8009d88:	20002570 	.word	0x20002570

08009d8c <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af00      	add	r7, sp, #0
  PWR_PVDTypeDef sConfigPVD = {0};
 8009d92:	f107 0308 	add.w	r3, r7, #8
 8009d96:	2200      	movs	r2, #0
 8009d98:	601a      	str	r2, [r3, #0]
 8009d9a:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009d9c:	4b13      	ldr	r3, [pc, #76]	; (8009dec <HAL_MspInit+0x60>)
 8009d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009da0:	4a12      	ldr	r2, [pc, #72]	; (8009dec <HAL_MspInit+0x60>)
 8009da2:	f043 0301 	orr.w	r3, r3, #1
 8009da6:	6613      	str	r3, [r2, #96]	; 0x60
 8009da8:	4b10      	ldr	r3, [pc, #64]	; (8009dec <HAL_MspInit+0x60>)
 8009daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009dac:	f003 0301 	and.w	r3, r3, #1
 8009db0:	607b      	str	r3, [r7, #4]
 8009db2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009db4:	4b0d      	ldr	r3, [pc, #52]	; (8009dec <HAL_MspInit+0x60>)
 8009db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009db8:	4a0c      	ldr	r2, [pc, #48]	; (8009dec <HAL_MspInit+0x60>)
 8009dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009dbe:	6593      	str	r3, [r2, #88]	; 0x58
 8009dc0:	4b0a      	ldr	r3, [pc, #40]	; (8009dec <HAL_MspInit+0x60>)
 8009dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009dc8:	603b      	str	r3, [r7, #0]
 8009dca:	683b      	ldr	r3, [r7, #0]

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8009dd4:	f107 0308 	add.w	r3, r7, #8
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f7fa ff97 	bl	8004d0c <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8009dde:	f7fa fff5 	bl	8004dcc <HAL_PWR_EnablePVD>
}
 8009de2:	bf00      	nop
 8009de4:	3710      	adds	r7, #16
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}
 8009dea:	bf00      	nop
 8009dec:	40021000 	.word	0x40021000

08009df0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4a08      	ldr	r2, [pc, #32]	; (8009e20 <HAL_RTC_MspInit+0x30>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d107      	bne.n	8009e12 <HAL_RTC_MspInit+0x22>
  {
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8009e02:	4b08      	ldr	r3, [pc, #32]	; (8009e24 <HAL_RTC_MspInit+0x34>)
 8009e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e08:	4a06      	ldr	r2, [pc, #24]	; (8009e24 <HAL_RTC_MspInit+0x34>)
 8009e0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

}
 8009e12:	bf00      	nop
 8009e14:	370c      	adds	r7, #12
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr
 8009e1e:	bf00      	nop
 8009e20:	40002800 	.word	0x40002800
 8009e24:	40021000 	.word	0x40021000

08009e28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4a6e      	ldr	r2, [pc, #440]	; (8009ff0 <HAL_TIM_Base_MspInit+0x1c8>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	f040 8091 	bne.w	8009f5e <HAL_TIM_Base_MspInit+0x136>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009e3c:	4b6d      	ldr	r3, [pc, #436]	; (8009ff4 <HAL_TIM_Base_MspInit+0x1cc>)
 8009e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e40:	4a6c      	ldr	r2, [pc, #432]	; (8009ff4 <HAL_TIM_Base_MspInit+0x1cc>)
 8009e42:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009e46:	6613      	str	r3, [r2, #96]	; 0x60
 8009e48:	4b6a      	ldr	r3, [pc, #424]	; (8009ff4 <HAL_TIM_Base_MspInit+0x1cc>)
 8009e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e50:	60fb      	str	r3, [r7, #12]
 8009e52:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8009e54:	4b68      	ldr	r3, [pc, #416]	; (8009ff8 <HAL_TIM_Base_MspInit+0x1d0>)
 8009e56:	4a69      	ldr	r2, [pc, #420]	; (8009ffc <HAL_TIM_Base_MspInit+0x1d4>)
 8009e58:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 8009e5a:	4b67      	ldr	r3, [pc, #412]	; (8009ff8 <HAL_TIM_Base_MspInit+0x1d0>)
 8009e5c:	2207      	movs	r2, #7
 8009e5e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009e60:	4b65      	ldr	r3, [pc, #404]	; (8009ff8 <HAL_TIM_Base_MspInit+0x1d0>)
 8009e62:	2210      	movs	r2, #16
 8009e64:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8009e66:	4b64      	ldr	r3, [pc, #400]	; (8009ff8 <HAL_TIM_Base_MspInit+0x1d0>)
 8009e68:	2200      	movs	r2, #0
 8009e6a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8009e6c:	4b62      	ldr	r3, [pc, #392]	; (8009ff8 <HAL_TIM_Base_MspInit+0x1d0>)
 8009e6e:	2280      	movs	r2, #128	; 0x80
 8009e70:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009e72:	4b61      	ldr	r3, [pc, #388]	; (8009ff8 <HAL_TIM_Base_MspInit+0x1d0>)
 8009e74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e78:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009e7a:	4b5f      	ldr	r3, [pc, #380]	; (8009ff8 <HAL_TIM_Base_MspInit+0x1d0>)
 8009e7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009e80:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8009e82:	4b5d      	ldr	r3, [pc, #372]	; (8009ff8 <HAL_TIM_Base_MspInit+0x1d0>)
 8009e84:	2200      	movs	r2, #0
 8009e86:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8009e88:	4b5b      	ldr	r3, [pc, #364]	; (8009ff8 <HAL_TIM_Base_MspInit+0x1d0>)
 8009e8a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009e8e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8009e90:	4859      	ldr	r0, [pc, #356]	; (8009ff8 <HAL_TIM_Base_MspInit+0x1d0>)
 8009e92:	f7fa fac3 	bl	800441c <HAL_DMA_Init>
 8009e96:	4603      	mov	r3, r0
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d001      	beq.n	8009ea0 <HAL_TIM_Base_MspInit+0x78>
    {
      Error_Handler();
 8009e9c:	f7ff fd0f 	bl	80098be <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	4a55      	ldr	r2, [pc, #340]	; (8009ff8 <HAL_TIM_Base_MspInit+0x1d0>)
 8009ea4:	625a      	str	r2, [r3, #36]	; 0x24
 8009ea6:	4a54      	ldr	r2, [pc, #336]	; (8009ff8 <HAL_TIM_Base_MspInit+0x1d0>)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel3;
 8009eac:	4b54      	ldr	r3, [pc, #336]	; (800a000 <HAL_TIM_Base_MspInit+0x1d8>)
 8009eae:	4a55      	ldr	r2, [pc, #340]	; (800a004 <HAL_TIM_Base_MspInit+0x1dc>)
 8009eb0:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_7;
 8009eb2:	4b53      	ldr	r3, [pc, #332]	; (800a000 <HAL_TIM_Base_MspInit+0x1d8>)
 8009eb4:	2207      	movs	r2, #7
 8009eb6:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009eb8:	4b51      	ldr	r3, [pc, #324]	; (800a000 <HAL_TIM_Base_MspInit+0x1d8>)
 8009eba:	2210      	movs	r2, #16
 8009ebc:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8009ebe:	4b50      	ldr	r3, [pc, #320]	; (800a000 <HAL_TIM_Base_MspInit+0x1d8>)
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8009ec4:	4b4e      	ldr	r3, [pc, #312]	; (800a000 <HAL_TIM_Base_MspInit+0x1d8>)
 8009ec6:	2280      	movs	r2, #128	; 0x80
 8009ec8:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009eca:	4b4d      	ldr	r3, [pc, #308]	; (800a000 <HAL_TIM_Base_MspInit+0x1d8>)
 8009ecc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009ed0:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009ed2:	4b4b      	ldr	r3, [pc, #300]	; (800a000 <HAL_TIM_Base_MspInit+0x1d8>)
 8009ed4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009ed8:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 8009eda:	4b49      	ldr	r3, [pc, #292]	; (800a000 <HAL_TIM_Base_MspInit+0x1d8>)
 8009edc:	2200      	movs	r2, #0
 8009ede:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8009ee0:	4b47      	ldr	r3, [pc, #284]	; (800a000 <HAL_TIM_Base_MspInit+0x1d8>)
 8009ee2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009ee6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8009ee8:	4845      	ldr	r0, [pc, #276]	; (800a000 <HAL_TIM_Base_MspInit+0x1d8>)
 8009eea:	f7fa fa97 	bl	800441c <HAL_DMA_Init>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d001      	beq.n	8009ef8 <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 8009ef4:	f7ff fce3 	bl	80098be <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	4a41      	ldr	r2, [pc, #260]	; (800a000 <HAL_TIM_Base_MspInit+0x1d8>)
 8009efc:	629a      	str	r2, [r3, #40]	; 0x28
 8009efe:	4a40      	ldr	r2, [pc, #256]	; (800a000 <HAL_TIM_Base_MspInit+0x1d8>)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel7;
 8009f04:	4b40      	ldr	r3, [pc, #256]	; (800a008 <HAL_TIM_Base_MspInit+0x1e0>)
 8009f06:	4a41      	ldr	r2, [pc, #260]	; (800a00c <HAL_TIM_Base_MspInit+0x1e4>)
 8009f08:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Request = DMA_REQUEST_7;
 8009f0a:	4b3f      	ldr	r3, [pc, #252]	; (800a008 <HAL_TIM_Base_MspInit+0x1e0>)
 8009f0c:	2207      	movs	r2, #7
 8009f0e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009f10:	4b3d      	ldr	r3, [pc, #244]	; (800a008 <HAL_TIM_Base_MspInit+0x1e0>)
 8009f12:	2210      	movs	r2, #16
 8009f14:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8009f16:	4b3c      	ldr	r3, [pc, #240]	; (800a008 <HAL_TIM_Base_MspInit+0x1e0>)
 8009f18:	2200      	movs	r2, #0
 8009f1a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8009f1c:	4b3a      	ldr	r3, [pc, #232]	; (800a008 <HAL_TIM_Base_MspInit+0x1e0>)
 8009f1e:	2280      	movs	r2, #128	; 0x80
 8009f20:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009f22:	4b39      	ldr	r3, [pc, #228]	; (800a008 <HAL_TIM_Base_MspInit+0x1e0>)
 8009f24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f28:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009f2a:	4b37      	ldr	r3, [pc, #220]	; (800a008 <HAL_TIM_Base_MspInit+0x1e0>)
 8009f2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009f30:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 8009f32:	4b35      	ldr	r3, [pc, #212]	; (800a008 <HAL_TIM_Base_MspInit+0x1e0>)
 8009f34:	2200      	movs	r2, #0
 8009f36:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8009f38:	4b33      	ldr	r3, [pc, #204]	; (800a008 <HAL_TIM_Base_MspInit+0x1e0>)
 8009f3a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8009f3e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8009f40:	4831      	ldr	r0, [pc, #196]	; (800a008 <HAL_TIM_Base_MspInit+0x1e0>)
 8009f42:	f7fa fa6b 	bl	800441c <HAL_DMA_Init>
 8009f46:	4603      	mov	r3, r0
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d001      	beq.n	8009f50 <HAL_TIM_Base_MspInit+0x128>
    {
      Error_Handler();
 8009f4c:	f7ff fcb7 	bl	80098be <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	4a2d      	ldr	r2, [pc, #180]	; (800a008 <HAL_TIM_Base_MspInit+0x1e0>)
 8009f54:	62da      	str	r2, [r3, #44]	; 0x2c
 8009f56:	4a2c      	ldr	r2, [pc, #176]	; (800a008 <HAL_TIM_Base_MspInit+0x1e0>)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6293      	str	r3, [r2, #40]	; 0x28
 8009f5c:	e041      	b.n	8009fe2 <HAL_TIM_Base_MspInit+0x1ba>
  }
  else if(htim_base->Instance==TIM16)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	4a2b      	ldr	r2, [pc, #172]	; (800a010 <HAL_TIM_Base_MspInit+0x1e8>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d13c      	bne.n	8009fe2 <HAL_TIM_Base_MspInit+0x1ba>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8009f68:	4b22      	ldr	r3, [pc, #136]	; (8009ff4 <HAL_TIM_Base_MspInit+0x1cc>)
 8009f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f6c:	4a21      	ldr	r2, [pc, #132]	; (8009ff4 <HAL_TIM_Base_MspInit+0x1cc>)
 8009f6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f72:	6613      	str	r3, [r2, #96]	; 0x60
 8009f74:	4b1f      	ldr	r3, [pc, #124]	; (8009ff4 <HAL_TIM_Base_MspInit+0x1cc>)
 8009f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f7c:	60bb      	str	r3, [r7, #8]
 8009f7e:	68bb      	ldr	r3, [r7, #8]

    /* TIM16 DMA Init */
    /* TIM16_CH1_UP Init */
    hdma_tim16_ch1_up.Instance = DMA1_Channel6;
 8009f80:	4b24      	ldr	r3, [pc, #144]	; (800a014 <HAL_TIM_Base_MspInit+0x1ec>)
 8009f82:	4a25      	ldr	r2, [pc, #148]	; (800a018 <HAL_TIM_Base_MspInit+0x1f0>)
 8009f84:	601a      	str	r2, [r3, #0]
    hdma_tim16_ch1_up.Init.Request = DMA_REQUEST_4;
 8009f86:	4b23      	ldr	r3, [pc, #140]	; (800a014 <HAL_TIM_Base_MspInit+0x1ec>)
 8009f88:	2204      	movs	r2, #4
 8009f8a:	605a      	str	r2, [r3, #4]
    hdma_tim16_ch1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009f8c:	4b21      	ldr	r3, [pc, #132]	; (800a014 <HAL_TIM_Base_MspInit+0x1ec>)
 8009f8e:	2210      	movs	r2, #16
 8009f90:	609a      	str	r2, [r3, #8]
    hdma_tim16_ch1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8009f92:	4b20      	ldr	r3, [pc, #128]	; (800a014 <HAL_TIM_Base_MspInit+0x1ec>)
 8009f94:	2200      	movs	r2, #0
 8009f96:	60da      	str	r2, [r3, #12]
    hdma_tim16_ch1_up.Init.MemInc = DMA_MINC_ENABLE;
 8009f98:	4b1e      	ldr	r3, [pc, #120]	; (800a014 <HAL_TIM_Base_MspInit+0x1ec>)
 8009f9a:	2280      	movs	r2, #128	; 0x80
 8009f9c:	611a      	str	r2, [r3, #16]
    hdma_tim16_ch1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009f9e:	4b1d      	ldr	r3, [pc, #116]	; (800a014 <HAL_TIM_Base_MspInit+0x1ec>)
 8009fa0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009fa4:	615a      	str	r2, [r3, #20]
    hdma_tim16_ch1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009fa6:	4b1b      	ldr	r3, [pc, #108]	; (800a014 <HAL_TIM_Base_MspInit+0x1ec>)
 8009fa8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009fac:	619a      	str	r2, [r3, #24]
    hdma_tim16_ch1_up.Init.Mode = DMA_NORMAL;
 8009fae:	4b19      	ldr	r3, [pc, #100]	; (800a014 <HAL_TIM_Base_MspInit+0x1ec>)
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	61da      	str	r2, [r3, #28]
    hdma_tim16_ch1_up.Init.Priority = DMA_PRIORITY_LOW;
 8009fb4:	4b17      	ldr	r3, [pc, #92]	; (800a014 <HAL_TIM_Base_MspInit+0x1ec>)
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim16_ch1_up) != HAL_OK)
 8009fba:	4816      	ldr	r0, [pc, #88]	; (800a014 <HAL_TIM_Base_MspInit+0x1ec>)
 8009fbc:	f7fa fa2e 	bl	800441c <HAL_DMA_Init>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d001      	beq.n	8009fca <HAL_TIM_Base_MspInit+0x1a2>
    {
      Error_Handler();
 8009fc6:	f7ff fc7a 	bl	80098be <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim16_ch1_up);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	4a11      	ldr	r2, [pc, #68]	; (800a014 <HAL_TIM_Base_MspInit+0x1ec>)
 8009fce:	625a      	str	r2, [r3, #36]	; 0x24
 8009fd0:	4a10      	ldr	r2, [pc, #64]	; (800a014 <HAL_TIM_Base_MspInit+0x1ec>)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim16_ch1_up);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	4a0e      	ldr	r2, [pc, #56]	; (800a014 <HAL_TIM_Base_MspInit+0x1ec>)
 8009fda:	621a      	str	r2, [r3, #32]
 8009fdc:	4a0d      	ldr	r2, [pc, #52]	; (800a014 <HAL_TIM_Base_MspInit+0x1ec>)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6293      	str	r3, [r2, #40]	; 0x28
  }
  HAL_Set_DMA_Callbacks();
 8009fe2:	f7ff fea9 	bl	8009d38 <HAL_Set_DMA_Callbacks>
}
 8009fe6:	bf00      	nop
 8009fe8:	3710      	adds	r7, #16
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
 8009fee:	bf00      	nop
 8009ff0:	40012c00 	.word	0x40012c00
 8009ff4:	40021000 	.word	0x40021000
 8009ff8:	20002450 	.word	0x20002450
 8009ffc:	4002001c 	.word	0x4002001c
 800a000:	20002498 	.word	0x20002498
 800a004:	40020030 	.word	0x40020030
 800a008:	200024e0 	.word	0x200024e0
 800a00c:	40020080 	.word	0x40020080
 800a010:	40014400 	.word	0x40014400
 800a014:	20002570 	.word	0x20002570
 800a018:	4002006c 	.word	0x4002006c

0800a01c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b084      	sub	sp, #16
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4a28      	ldr	r2, [pc, #160]	; (800a0cc <HAL_TIM_PWM_MspInit+0xb0>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d149      	bne.n	800a0c2 <HAL_TIM_PWM_MspInit+0xa6>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800a02e:	4b28      	ldr	r3, [pc, #160]	; (800a0d0 <HAL_TIM_PWM_MspInit+0xb4>)
 800a030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a032:	4a27      	ldr	r2, [pc, #156]	; (800a0d0 <HAL_TIM_PWM_MspInit+0xb4>)
 800a034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a038:	6613      	str	r3, [r2, #96]	; 0x60
 800a03a:	4b25      	ldr	r3, [pc, #148]	; (800a0d0 <HAL_TIM_PWM_MspInit+0xb4>)
 800a03c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a03e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a042:	60fb      	str	r3, [r7, #12]
 800a044:	68fb      	ldr	r3, [r7, #12]

    /* TIM15 DMA Init */
    /* TIM15_CH1_UP_TRIG_COM Init */
    hdma_tim15_ch1_up_trig_com.Instance = DMA1_Channel5;
 800a046:	4b23      	ldr	r3, [pc, #140]	; (800a0d4 <HAL_TIM_PWM_MspInit+0xb8>)
 800a048:	4a23      	ldr	r2, [pc, #140]	; (800a0d8 <HAL_TIM_PWM_MspInit+0xbc>)
 800a04a:	601a      	str	r2, [r3, #0]
    hdma_tim15_ch1_up_trig_com.Init.Request = DMA_REQUEST_7;
 800a04c:	4b21      	ldr	r3, [pc, #132]	; (800a0d4 <HAL_TIM_PWM_MspInit+0xb8>)
 800a04e:	2207      	movs	r2, #7
 800a050:	605a      	str	r2, [r3, #4]
    hdma_tim15_ch1_up_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a052:	4b20      	ldr	r3, [pc, #128]	; (800a0d4 <HAL_TIM_PWM_MspInit+0xb8>)
 800a054:	2210      	movs	r2, #16
 800a056:	609a      	str	r2, [r3, #8]
    hdma_tim15_ch1_up_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 800a058:	4b1e      	ldr	r3, [pc, #120]	; (800a0d4 <HAL_TIM_PWM_MspInit+0xb8>)
 800a05a:	2200      	movs	r2, #0
 800a05c:	60da      	str	r2, [r3, #12]
    hdma_tim15_ch1_up_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 800a05e:	4b1d      	ldr	r3, [pc, #116]	; (800a0d4 <HAL_TIM_PWM_MspInit+0xb8>)
 800a060:	2280      	movs	r2, #128	; 0x80
 800a062:	611a      	str	r2, [r3, #16]
    hdma_tim15_ch1_up_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800a064:	4b1b      	ldr	r3, [pc, #108]	; (800a0d4 <HAL_TIM_PWM_MspInit+0xb8>)
 800a066:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a06a:	615a      	str	r2, [r3, #20]
    hdma_tim15_ch1_up_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800a06c:	4b19      	ldr	r3, [pc, #100]	; (800a0d4 <HAL_TIM_PWM_MspInit+0xb8>)
 800a06e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a072:	619a      	str	r2, [r3, #24]
    hdma_tim15_ch1_up_trig_com.Init.Mode = DMA_NORMAL;
 800a074:	4b17      	ldr	r3, [pc, #92]	; (800a0d4 <HAL_TIM_PWM_MspInit+0xb8>)
 800a076:	2200      	movs	r2, #0
 800a078:	61da      	str	r2, [r3, #28]
    hdma_tim15_ch1_up_trig_com.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800a07a:	4b16      	ldr	r3, [pc, #88]	; (800a0d4 <HAL_TIM_PWM_MspInit+0xb8>)
 800a07c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a080:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim15_ch1_up_trig_com) != HAL_OK)
 800a082:	4814      	ldr	r0, [pc, #80]	; (800a0d4 <HAL_TIM_PWM_MspInit+0xb8>)
 800a084:	f7fa f9ca 	bl	800441c <HAL_DMA_Init>
 800a088:	4603      	mov	r3, r0
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d001      	beq.n	800a092 <HAL_TIM_PWM_MspInit+0x76>
    {
      Error_Handler();
 800a08e:	f7ff fc16 	bl	80098be <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim15_ch1_up_trig_com);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	4a0f      	ldr	r2, [pc, #60]	; (800a0d4 <HAL_TIM_PWM_MspInit+0xb8>)
 800a096:	625a      	str	r2, [r3, #36]	; 0x24
 800a098:	4a0e      	ldr	r2, [pc, #56]	; (800a0d4 <HAL_TIM_PWM_MspInit+0xb8>)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim15_ch1_up_trig_com);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	4a0c      	ldr	r2, [pc, #48]	; (800a0d4 <HAL_TIM_PWM_MspInit+0xb8>)
 800a0a2:	621a      	str	r2, [r3, #32]
 800a0a4:	4a0b      	ldr	r2, [pc, #44]	; (800a0d4 <HAL_TIM_PWM_MspInit+0xb8>)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim15_ch1_up_trig_com);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	4a09      	ldr	r2, [pc, #36]	; (800a0d4 <HAL_TIM_PWM_MspInit+0xb8>)
 800a0ae:	639a      	str	r2, [r3, #56]	; 0x38
 800a0b0:	4a08      	ldr	r2, [pc, #32]	; (800a0d4 <HAL_TIM_PWM_MspInit+0xb8>)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim15_ch1_up_trig_com);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	4a06      	ldr	r2, [pc, #24]	; (800a0d4 <HAL_TIM_PWM_MspInit+0xb8>)
 800a0ba:	635a      	str	r2, [r3, #52]	; 0x34
 800a0bc:	4a05      	ldr	r2, [pc, #20]	; (800a0d4 <HAL_TIM_PWM_MspInit+0xb8>)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 800a0c2:	bf00      	nop
 800a0c4:	3710      	adds	r7, #16
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
 800a0ca:	bf00      	nop
 800a0cc:	40014000 	.word	0x40014000
 800a0d0:	40021000 	.word	0x40021000
 800a0d4:	20002528 	.word	0x20002528
 800a0d8:	40020058 	.word	0x40020058

0800a0dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 1; iii++)
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	71fb      	strb	r3, [r7, #7]
 800a0e6:	e005      	b.n	800a0f4 <NMI_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800a0e8:	2064      	movs	r0, #100	; 0x64
 800a0ea:	f7f9 ffdf 	bl	80040ac <HAL_Delay>
        for (uint8_t iii = 0; iii < 1; iii++)
 800a0ee:	79fb      	ldrb	r3, [r7, #7]
 800a0f0:	3301      	adds	r3, #1
 800a0f2:	71fb      	strb	r3, [r7, #7]
 800a0f4:	79fb      	ldrb	r3, [r7, #7]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d0f6      	beq.n	800a0e8 <NMI_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800a0fa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a0fe:	f7f9 ffd5 	bl	80040ac <HAL_Delay>
        for (uint8_t iii = 0; iii < 1; iii++)
 800a102:	e7ee      	b.n	800a0e2 <NMI_Handler+0x6>

0800a104 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 2; iii++)
 800a10a:	2300      	movs	r3, #0
 800a10c:	71fb      	strb	r3, [r7, #7]
 800a10e:	e005      	b.n	800a11c <HardFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800a110:	2064      	movs	r0, #100	; 0x64
 800a112:	f7f9 ffcb 	bl	80040ac <HAL_Delay>
        for (uint8_t iii = 0; iii < 2; iii++)
 800a116:	79fb      	ldrb	r3, [r7, #7]
 800a118:	3301      	adds	r3, #1
 800a11a:	71fb      	strb	r3, [r7, #7]
 800a11c:	79fb      	ldrb	r3, [r7, #7]
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d9f6      	bls.n	800a110 <HardFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800a122:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a126:	f7f9 ffc1 	bl	80040ac <HAL_Delay>
        for (uint8_t iii = 0; iii < 2; iii++)
 800a12a:	e7ee      	b.n	800a10a <HardFault_Handler+0x6>

0800a12c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b082      	sub	sp, #8
 800a130:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 3; iii++)
 800a132:	2300      	movs	r3, #0
 800a134:	71fb      	strb	r3, [r7, #7]
 800a136:	e005      	b.n	800a144 <MemManage_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800a138:	2064      	movs	r0, #100	; 0x64
 800a13a:	f7f9 ffb7 	bl	80040ac <HAL_Delay>
        for (uint8_t iii = 0; iii < 3; iii++)
 800a13e:	79fb      	ldrb	r3, [r7, #7]
 800a140:	3301      	adds	r3, #1
 800a142:	71fb      	strb	r3, [r7, #7]
 800a144:	79fb      	ldrb	r3, [r7, #7]
 800a146:	2b02      	cmp	r3, #2
 800a148:	d9f6      	bls.n	800a138 <MemManage_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800a14a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a14e:	f7f9 ffad 	bl	80040ac <HAL_Delay>
        for (uint8_t iii = 0; iii < 3; iii++)
 800a152:	e7ee      	b.n	800a132 <MemManage_Handler+0x6>

0800a154 <BusFault_Handler>:
}
/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b082      	sub	sp, #8
 800a158:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 4; iii++)
 800a15a:	2300      	movs	r3, #0
 800a15c:	71fb      	strb	r3, [r7, #7]
 800a15e:	e005      	b.n	800a16c <BusFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800a160:	2064      	movs	r0, #100	; 0x64
 800a162:	f7f9 ffa3 	bl	80040ac <HAL_Delay>
        for (uint8_t iii = 0; iii < 4; iii++)
 800a166:	79fb      	ldrb	r3, [r7, #7]
 800a168:	3301      	adds	r3, #1
 800a16a:	71fb      	strb	r3, [r7, #7]
 800a16c:	79fb      	ldrb	r3, [r7, #7]
 800a16e:	2b03      	cmp	r3, #3
 800a170:	d9f6      	bls.n	800a160 <BusFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800a172:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a176:	f7f9 ff99 	bl	80040ac <HAL_Delay>
        for (uint8_t iii = 0; iii < 4; iii++)
 800a17a:	e7ee      	b.n	800a15a <BusFault_Handler+0x6>

0800a17c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 5; iii++)
 800a182:	2300      	movs	r3, #0
 800a184:	71fb      	strb	r3, [r7, #7]
 800a186:	e005      	b.n	800a194 <UsageFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800a188:	2064      	movs	r0, #100	; 0x64
 800a18a:	f7f9 ff8f 	bl	80040ac <HAL_Delay>
        for (uint8_t iii = 0; iii < 5; iii++)
 800a18e:	79fb      	ldrb	r3, [r7, #7]
 800a190:	3301      	adds	r3, #1
 800a192:	71fb      	strb	r3, [r7, #7]
 800a194:	79fb      	ldrb	r3, [r7, #7]
 800a196:	2b04      	cmp	r3, #4
 800a198:	d9f6      	bls.n	800a188 <UsageFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800a19a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a19e:	f7f9 ff85 	bl	80040ac <HAL_Delay>
        for (uint8_t iii = 0; iii < 5; iii++)
 800a1a2:	e7ee      	b.n	800a182 <UsageFault_Handler+0x6>

0800a1a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	af00      	add	r7, sp, #0
}
 800a1a8:	bf00      	nop
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b0:	4770      	bx	lr
	...

0800a1b4 <EXTI0_IRQHandler>:
volatile uint32_t d_passes = 0;
/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800a1b4:	b590      	push	{r4, r7, lr}
 800a1b6:	b085      	sub	sp, #20
 800a1b8:	af02      	add	r7, sp, #8
    // D is pause
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_D_PIN;
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_D;
 800a1be:	2303      	movs	r3, #3
 800a1c0:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_D_IRQ;
 800a1c2:	2306      	movs	r3, #6
 800a1c4:	713b      	strb	r3, [r7, #4]
    d_passes++;
 800a1c6:	4b15      	ldr	r3, [pc, #84]	; (800a21c <EXTI0_IRQHandler+0x68>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	3301      	adds	r3, #1
 800a1cc:	4a13      	ldr	r2, [pc, #76]	; (800a21c <EXTI0_IRQHandler+0x68>)
 800a1ce:	6013      	str	r3, [r2, #0]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800a1d0:	88fb      	ldrh	r3, [r7, #6]
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f7fa fd72 	bl	8004cbc <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800a1d8:	797a      	ldrb	r2, [r7, #5]
 800a1da:	797b      	ldrb	r3, [r7, #5]
 800a1dc:	4910      	ldr	r1, [pc, #64]	; (800a220 <EXTI0_IRQHandler+0x6c>)
 800a1de:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800a1e2:	490f      	ldr	r1, [pc, #60]	; (800a220 <EXTI0_IRQHandler+0x6c>)
 800a1e4:	00db      	lsls	r3, r3, #3
 800a1e6:	440b      	add	r3, r1
 800a1e8:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800a1ea:	797c      	ldrb	r4, [r7, #5]
 800a1ec:	f7f8 fa2c 	bl	8002648 <xTaskGetTickCountFromISR>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	4a0b      	ldr	r2, [pc, #44]	; (800a220 <EXTI0_IRQHandler+0x6c>)
 800a1f4:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800a1f8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f7fa f8e4 	bl	80043ca <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800a202:	4b08      	ldr	r3, [pc, #32]	; (800a224 <EXTI0_IRQHandler+0x70>)
 800a204:	6818      	ldr	r0, [r3, #0]
 800a206:	7979      	ldrb	r1, [r7, #5]
 800a208:	463b      	mov	r3, r7
 800a20a:	9300      	str	r3, [sp, #0]
 800a20c:	2300      	movs	r3, #0
 800a20e:	2203      	movs	r2, #3
 800a210:	f7f8 fe38 	bl	8002e84 <xTaskGenericNotifyFromISR>
}
 800a214:	bf00      	nop
 800a216:	370c      	adds	r7, #12
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd90      	pop	{r4, r7, pc}
 800a21c:	2000262c 	.word	0x2000262c
 800a220:	20000adc 	.word	0x20000adc
 800a224:	20002e48 	.word	0x20002e48

0800a228 <EXTI2_IRQHandler>:
uint32_t g_dbg_b_interrupt_count = 0;
/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800a228:	b590      	push	{r4, r7, lr}
 800a22a:	b085      	sub	sp, #20
 800a22c:	af02      	add	r7, sp, #8
    // A is speed
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_A_PIN;
 800a22e:	2304      	movs	r3, #4
 800a230:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_A;
 800a232:	2300      	movs	r3, #0
 800a234:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_A_IRQ;
 800a236:	2308      	movs	r3, #8
 800a238:	713b      	strb	r3, [r7, #4]
    a_passes++;
 800a23a:	4b15      	ldr	r3, [pc, #84]	; (800a290 <EXTI2_IRQHandler+0x68>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	3301      	adds	r3, #1
 800a240:	4a13      	ldr	r2, [pc, #76]	; (800a290 <EXTI2_IRQHandler+0x68>)
 800a242:	6013      	str	r3, [r2, #0]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800a244:	88fb      	ldrh	r3, [r7, #6]
 800a246:	4618      	mov	r0, r3
 800a248:	f7fa fd38 	bl	8004cbc <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800a24c:	797a      	ldrb	r2, [r7, #5]
 800a24e:	797b      	ldrb	r3, [r7, #5]
 800a250:	4910      	ldr	r1, [pc, #64]	; (800a294 <EXTI2_IRQHandler+0x6c>)
 800a252:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800a256:	490f      	ldr	r1, [pc, #60]	; (800a294 <EXTI2_IRQHandler+0x6c>)
 800a258:	00db      	lsls	r3, r3, #3
 800a25a:	440b      	add	r3, r1
 800a25c:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800a25e:	797c      	ldrb	r4, [r7, #5]
 800a260:	f7f8 f9f2 	bl	8002648 <xTaskGetTickCountFromISR>
 800a264:	4603      	mov	r3, r0
 800a266:	4a0b      	ldr	r2, [pc, #44]	; (800a294 <EXTI2_IRQHandler+0x6c>)
 800a268:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800a26c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800a270:	4618      	mov	r0, r3
 800a272:	f7fa f8aa 	bl	80043ca <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800a276:	4b08      	ldr	r3, [pc, #32]	; (800a298 <EXTI2_IRQHandler+0x70>)
 800a278:	6818      	ldr	r0, [r3, #0]
 800a27a:	7979      	ldrb	r1, [r7, #5]
 800a27c:	463b      	mov	r3, r7
 800a27e:	9300      	str	r3, [sp, #0]
 800a280:	2300      	movs	r3, #0
 800a282:	2203      	movs	r2, #3
 800a284:	f7f8 fdfe 	bl	8002e84 <xTaskGenericNotifyFromISR>
}
 800a288:	bf00      	nop
 800a28a:	370c      	adds	r7, #12
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd90      	pop	{r4, r7, pc}
 800a290:	20002630 	.word	0x20002630
 800a294:	20000adc 	.word	0x20000adc
 800a298:	20002e48 	.word	0x20002e48

0800a29c <EXTI15_10_IRQHandler>:
volatile uint32_t b_passes = 0;
/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800a29c:	b590      	push	{r4, r7, lr}
 800a29e:	b085      	sub	sp, #20
 800a2a0:	af02      	add	r7, sp, #8
    // B is state
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_B_PIN;
 800a2a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a2a6:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_B;
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_B_IRQ;
 800a2ac:	2328      	movs	r3, #40	; 0x28
 800a2ae:	713b      	strb	r3, [r7, #4]
    b_passes++;
 800a2b0:	4b15      	ldr	r3, [pc, #84]	; (800a308 <EXTI15_10_IRQHandler+0x6c>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	3301      	adds	r3, #1
 800a2b6:	4a14      	ldr	r2, [pc, #80]	; (800a308 <EXTI15_10_IRQHandler+0x6c>)
 800a2b8:	6013      	str	r3, [r2, #0]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800a2ba:	88fb      	ldrh	r3, [r7, #6]
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f7fa fcfd 	bl	8004cbc <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800a2c2:	797a      	ldrb	r2, [r7, #5]
 800a2c4:	797b      	ldrb	r3, [r7, #5]
 800a2c6:	4911      	ldr	r1, [pc, #68]	; (800a30c <EXTI15_10_IRQHandler+0x70>)
 800a2c8:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800a2cc:	490f      	ldr	r1, [pc, #60]	; (800a30c <EXTI15_10_IRQHandler+0x70>)
 800a2ce:	00db      	lsls	r3, r3, #3
 800a2d0:	440b      	add	r3, r1
 800a2d2:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800a2d4:	797c      	ldrb	r4, [r7, #5]
 800a2d6:	f7f8 f9b7 	bl	8002648 <xTaskGetTickCountFromISR>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	4a0b      	ldr	r2, [pc, #44]	; (800a30c <EXTI15_10_IRQHandler+0x70>)
 800a2de:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800a2e2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f7fa f86f 	bl	80043ca <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800a2ec:	4b08      	ldr	r3, [pc, #32]	; (800a310 <EXTI15_10_IRQHandler+0x74>)
 800a2ee:	6818      	ldr	r0, [r3, #0]
 800a2f0:	7979      	ldrb	r1, [r7, #5]
 800a2f2:	463b      	mov	r3, r7
 800a2f4:	9300      	str	r3, [sp, #0]
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	2203      	movs	r2, #3
 800a2fa:	f7f8 fdc3 	bl	8002e84 <xTaskGenericNotifyFromISR>
}
 800a2fe:	bf00      	nop
 800a300:	370c      	adds	r7, #12
 800a302:	46bd      	mov	sp, r7
 800a304:	bd90      	pop	{r4, r7, pc}
 800a306:	bf00      	nop
 800a308:	20002634 	.word	0x20002634
 800a30c:	20000adc 	.word	0x20000adc
 800a310:	20002e48 	.word	0x20002e48

0800a314 <EXTI9_5_IRQHandler>:
volatile uint32_t c_passes = 0;
/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800a314:	b590      	push	{r4, r7, lr}
 800a316:	b085      	sub	sp, #20
 800a318:	af02      	add	r7, sp, #8
    // C is color
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_C_PIN;
 800a31a:	2320      	movs	r3, #32
 800a31c:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_C;
 800a31e:	2302      	movs	r3, #2
 800a320:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_C_IRQ;
 800a322:	2317      	movs	r3, #23
 800a324:	713b      	strb	r3, [r7, #4]
    c_passes++;
 800a326:	4b15      	ldr	r3, [pc, #84]	; (800a37c <EXTI9_5_IRQHandler+0x68>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	3301      	adds	r3, #1
 800a32c:	4a13      	ldr	r2, [pc, #76]	; (800a37c <EXTI9_5_IRQHandler+0x68>)
 800a32e:	6013      	str	r3, [r2, #0]
    // add button irq here..
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800a330:	88fb      	ldrh	r3, [r7, #6]
 800a332:	4618      	mov	r0, r3
 800a334:	f7fa fcc2 	bl	8004cbc <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800a338:	797a      	ldrb	r2, [r7, #5]
 800a33a:	797b      	ldrb	r3, [r7, #5]
 800a33c:	4910      	ldr	r1, [pc, #64]	; (800a380 <EXTI9_5_IRQHandler+0x6c>)
 800a33e:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800a342:	490f      	ldr	r1, [pc, #60]	; (800a380 <EXTI9_5_IRQHandler+0x6c>)
 800a344:	00db      	lsls	r3, r3, #3
 800a346:	440b      	add	r3, r1
 800a348:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800a34a:	797c      	ldrb	r4, [r7, #5]
 800a34c:	f7f8 f97c 	bl	8002648 <xTaskGetTickCountFromISR>
 800a350:	4603      	mov	r3, r0
 800a352:	4a0b      	ldr	r2, [pc, #44]	; (800a380 <EXTI9_5_IRQHandler+0x6c>)
 800a354:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800a358:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800a35c:	4618      	mov	r0, r3
 800a35e:	f7fa f834 	bl	80043ca <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800a362:	4b08      	ldr	r3, [pc, #32]	; (800a384 <EXTI9_5_IRQHandler+0x70>)
 800a364:	6818      	ldr	r0, [r3, #0]
 800a366:	7979      	ldrb	r1, [r7, #5]
 800a368:	463b      	mov	r3, r7
 800a36a:	9300      	str	r3, [sp, #0]
 800a36c:	2300      	movs	r3, #0
 800a36e:	2203      	movs	r2, #3
 800a370:	f7f8 fd88 	bl	8002e84 <xTaskGenericNotifyFromISR>
}
 800a374:	bf00      	nop
 800a376:	370c      	adds	r7, #12
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd90      	pop	{r4, r7, pc}
 800a37c:	20002638 	.word	0x20002638
 800a380:	20000adc 	.word	0x20000adc
 800a384:	20002e48 	.word	0x20002e48

0800a388 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a388:	b480      	push	{r7}
 800a38a:	b083      	sub	sp, #12
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	4603      	mov	r3, r0
 800a390:	80fb      	strh	r3, [r7, #6]

}
 800a392:	bf00      	nop
 800a394:	370c      	adds	r7, #12
 800a396:	46bd      	mov	sp, r7
 800a398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39c:	4770      	bx	lr

0800a39e <HAL_DMA_CMPLT_CALLBACK>:


void HAL_DMA_CMPLT_CALLBACK(DMA_HandleTypeDef *hdma)
{
 800a39e:	b480      	push	{r7}
 800a3a0:	b083      	sub	sp, #12
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	6078      	str	r0, [r7, #4]
    while(1);
 800a3a6:	e7fe      	b.n	800a3a6 <HAL_DMA_CMPLT_CALLBACK+0x8>

0800a3a8 <HAL_TIM_PWM_PulseFinishedCallback>:
bool gb_dma_cmplt_strip_1 = true;
bool gb_dma_cmplt_strip_2 = true;
bool gb_dma_cmplt_strip_3 = true;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
    switch (htim->Channel)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	7f1b      	ldrb	r3, [r3, #28]
 800a3b4:	2b04      	cmp	r3, #4
 800a3b6:	d016      	beq.n	800a3e6 <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
 800a3b8:	2b04      	cmp	r3, #4
 800a3ba:	dc1c      	bgt.n	800a3f6 <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d002      	beq.n	800a3c6 <HAL_TIM_PWM_PulseFinishedCallback+0x1e>
 800a3c0:	2b02      	cmp	r3, #2
 800a3c2:	d008      	beq.n	800a3d6 <HAL_TIM_PWM_PulseFinishedCallback+0x2e>
        case HAL_TIM_ACTIVE_CHANNEL_3:
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
            gb_dma_cmplt_strip_3 = true;
        break;
        default:
        break;
 800a3c4:	e017      	b.n	800a3f6 <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 800a3c6:	2100      	movs	r1, #0
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f7fc fb1b 	bl	8006a04 <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_1 = true;
 800a3ce:	4b0c      	ldr	r3, [pc, #48]	; (800a400 <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	701a      	strb	r2, [r3, #0]
        break;
 800a3d4:	e010      	b.n	800a3f8 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_2);
 800a3d6:	2104      	movs	r1, #4
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f7fc fb13 	bl	8006a04 <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_2 = true;
 800a3de:	4b09      	ldr	r3, [pc, #36]	; (800a404 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 800a3e0:	2201      	movs	r2, #1
 800a3e2:	701a      	strb	r2, [r3, #0]
        break;
 800a3e4:	e008      	b.n	800a3f8 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
 800a3e6:	2108      	movs	r1, #8
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f7fc fb0b 	bl	8006a04 <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_3 = true;
 800a3ee:	4b06      	ldr	r3, [pc, #24]	; (800a408 <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	701a      	strb	r2, [r3, #0]
        break;
 800a3f4:	e000      	b.n	800a3f8 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
        break;
 800a3f6:	bf00      	nop
    }
}
 800a3f8:	bf00      	nop
 800a3fa:	3708      	adds	r7, #8
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}
 800a400:	200000f8 	.word	0x200000f8
 800a404:	200000f9 	.word	0x200000f9
 800a408:	200000fa 	.word	0x200000fa

0800a40c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800a410:	4802      	ldr	r0, [pc, #8]	; (800a41c <DMA1_Channel2_IRQHandler+0x10>)
 800a412:	f7fa f99a 	bl	800474a <HAL_DMA_IRQHandler>
}
 800a416:	bf00      	nop
 800a418:	bd80      	pop	{r7, pc}
 800a41a:	bf00      	nop
 800a41c:	20002450 	.word	0x20002450

0800a420 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 800a424:	4802      	ldr	r0, [pc, #8]	; (800a430 <DMA1_Channel3_IRQHandler+0x10>)
 800a426:	f7fa f990 	bl	800474a <HAL_DMA_IRQHandler>
}
 800a42a:	bf00      	nop
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop
 800a430:	20002498 	.word	0x20002498

0800a434 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim15_ch1_up_trig_com);
 800a438:	4802      	ldr	r0, [pc, #8]	; (800a444 <DMA1_Channel5_IRQHandler+0x10>)
 800a43a:	f7fa f986 	bl	800474a <HAL_DMA_IRQHandler>
}
 800a43e:	bf00      	nop
 800a440:	bd80      	pop	{r7, pc}
 800a442:	bf00      	nop
 800a444:	20002528 	.word	0x20002528

0800a448 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim16_ch1_up);
 800a44c:	4802      	ldr	r0, [pc, #8]	; (800a458 <DMA1_Channel6_IRQHandler+0x10>)
 800a44e:	f7fa f97c 	bl	800474a <HAL_DMA_IRQHandler>
}
 800a452:	bf00      	nop
 800a454:	bd80      	pop	{r7, pc}
 800a456:	bf00      	nop
 800a458:	20002570 	.word	0x20002570

0800a45c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 800a460:	4802      	ldr	r0, [pc, #8]	; (800a46c <DMA1_Channel7_IRQHandler+0x10>)
 800a462:	f7fa f972 	bl	800474a <HAL_DMA_IRQHandler>
}
 800a466:	bf00      	nop
 800a468:	bd80      	pop	{r7, pc}
 800a46a:	bf00      	nop
 800a46c:	200024e0 	.word	0x200024e0

0800a470 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a470:	b480      	push	{r7}
 800a472:	af00      	add	r7, sp, #0
	return 1;
 800a474:	2301      	movs	r3, #1
}
 800a476:	4618      	mov	r0, r3
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr

0800a480 <_kill>:

int _kill(int pid, int sig)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b082      	sub	sp, #8
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800a48a:	f000 fcab 	bl	800ade4 <__errno>
 800a48e:	4603      	mov	r3, r0
 800a490:	2216      	movs	r2, #22
 800a492:	601a      	str	r2, [r3, #0]
	return -1;
 800a494:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3708      	adds	r7, #8
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}

0800a4a0 <_exit>:

void _exit (int status)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b082      	sub	sp, #8
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800a4a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f7ff ffe7 	bl	800a480 <_kill>
	while (1) {}		/* Make sure we hang here */
 800a4b2:	e7fe      	b.n	800a4b2 <_exit+0x12>

0800a4b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b086      	sub	sp, #24
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	60f8      	str	r0, [r7, #12]
 800a4bc:	60b9      	str	r1, [r7, #8]
 800a4be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	617b      	str	r3, [r7, #20]
 800a4c4:	e00a      	b.n	800a4dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800a4c6:	f3af 8000 	nop.w
 800a4ca:	4601      	mov	r1, r0
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	1c5a      	adds	r2, r3, #1
 800a4d0:	60ba      	str	r2, [r7, #8]
 800a4d2:	b2ca      	uxtb	r2, r1
 800a4d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	3301      	adds	r3, #1
 800a4da:	617b      	str	r3, [r7, #20]
 800a4dc:	697a      	ldr	r2, [r7, #20]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	dbf0      	blt.n	800a4c6 <_read+0x12>
	}

return len;
 800a4e4:	687b      	ldr	r3, [r7, #4]
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3718      	adds	r7, #24
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}

0800a4ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a4ee:	b580      	push	{r7, lr}
 800a4f0:	b086      	sub	sp, #24
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	60f8      	str	r0, [r7, #12]
 800a4f6:	60b9      	str	r1, [r7, #8]
 800a4f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	617b      	str	r3, [r7, #20]
 800a4fe:	e009      	b.n	800a514 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	1c5a      	adds	r2, r3, #1
 800a504:	60ba      	str	r2, [r7, #8]
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	4618      	mov	r0, r3
 800a50a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	3301      	adds	r3, #1
 800a512:	617b      	str	r3, [r7, #20]
 800a514:	697a      	ldr	r2, [r7, #20]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	429a      	cmp	r2, r3
 800a51a:	dbf1      	blt.n	800a500 <_write+0x12>
	}
	return len;
 800a51c:	687b      	ldr	r3, [r7, #4]
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3718      	adds	r7, #24
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}

0800a526 <_close>:

int _close(int file)
{
 800a526:	b480      	push	{r7}
 800a528:	b083      	sub	sp, #12
 800a52a:	af00      	add	r7, sp, #0
 800a52c:	6078      	str	r0, [r7, #4]
	return -1;
 800a52e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800a532:	4618      	mov	r0, r3
 800a534:	370c      	adds	r7, #12
 800a536:	46bd      	mov	sp, r7
 800a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53c:	4770      	bx	lr

0800a53e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a53e:	b480      	push	{r7}
 800a540:	b083      	sub	sp, #12
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
 800a546:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a54e:	605a      	str	r2, [r3, #4]
	return 0;
 800a550:	2300      	movs	r3, #0
}
 800a552:	4618      	mov	r0, r3
 800a554:	370c      	adds	r7, #12
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	4770      	bx	lr

0800a55e <_isatty>:

int _isatty(int file)
{
 800a55e:	b480      	push	{r7}
 800a560:	b083      	sub	sp, #12
 800a562:	af00      	add	r7, sp, #0
 800a564:	6078      	str	r0, [r7, #4]
	return 1;
 800a566:	2301      	movs	r3, #1
}
 800a568:	4618      	mov	r0, r3
 800a56a:	370c      	adds	r7, #12
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr

0800a574 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800a574:	b480      	push	{r7}
 800a576:	b085      	sub	sp, #20
 800a578:	af00      	add	r7, sp, #0
 800a57a:	60f8      	str	r0, [r7, #12]
 800a57c:	60b9      	str	r1, [r7, #8]
 800a57e:	607a      	str	r2, [r7, #4]
	return 0;
 800a580:	2300      	movs	r3, #0
}
 800a582:	4618      	mov	r0, r3
 800a584:	3714      	adds	r7, #20
 800a586:	46bd      	mov	sp, r7
 800a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58c:	4770      	bx	lr
	...

0800a590 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b086      	sub	sp, #24
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a598:	4a14      	ldr	r2, [pc, #80]	; (800a5ec <_sbrk+0x5c>)
 800a59a:	4b15      	ldr	r3, [pc, #84]	; (800a5f0 <_sbrk+0x60>)
 800a59c:	1ad3      	subs	r3, r2, r3
 800a59e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a5a4:	4b13      	ldr	r3, [pc, #76]	; (800a5f4 <_sbrk+0x64>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d102      	bne.n	800a5b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a5ac:	4b11      	ldr	r3, [pc, #68]	; (800a5f4 <_sbrk+0x64>)
 800a5ae:	4a12      	ldr	r2, [pc, #72]	; (800a5f8 <_sbrk+0x68>)
 800a5b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a5b2:	4b10      	ldr	r3, [pc, #64]	; (800a5f4 <_sbrk+0x64>)
 800a5b4:	681a      	ldr	r2, [r3, #0]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	4413      	add	r3, r2
 800a5ba:	693a      	ldr	r2, [r7, #16]
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	d207      	bcs.n	800a5d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a5c0:	f000 fc10 	bl	800ade4 <__errno>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	220c      	movs	r2, #12
 800a5c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a5ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a5ce:	e009      	b.n	800a5e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a5d0:	4b08      	ldr	r3, [pc, #32]	; (800a5f4 <_sbrk+0x64>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a5d6:	4b07      	ldr	r3, [pc, #28]	; (800a5f4 <_sbrk+0x64>)
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	4413      	add	r3, r2
 800a5de:	4a05      	ldr	r2, [pc, #20]	; (800a5f4 <_sbrk+0x64>)
 800a5e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3718      	adds	r7, #24
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}
 800a5ec:	20010000 	.word	0x20010000
 800a5f0:	00000400 	.word	0x00000400
 800a5f4:	2000263c 	.word	0x2000263c
 800a5f8:	20004058 	.word	0x20004058

0800a5fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800a600:	4b06      	ldr	r3, [pc, #24]	; (800a61c <SystemInit+0x20>)
 800a602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a606:	4a05      	ldr	r2, [pc, #20]	; (800a61c <SystemInit+0x20>)
 800a608:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a60c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800a610:	bf00      	nop
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr
 800a61a:	bf00      	nop
 800a61c:	e000ed00 	.word	0xe000ed00

0800a620 <board_init_peripheral_setup>:

#if defined(BOARD_SPUDGLO_V5)


static void board_init_peripheral_setup(void)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	af00      	add	r7, sp, #0
	uart_config_hal_setup();
 800a624:	f7ff fa74 	bl	8009b10 <uart_config_hal_setup>
	spi_config_hal_setup();
 800a628:	f7ff f94e 	bl	80098c8 <spi_config_hal_setup>
}
 800a62c:	bf00      	nop
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <board_init_specific>:


void board_init_specific(void)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b086      	sub	sp, #24
 800a634:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a636:	1d3b      	adds	r3, r7, #4
 800a638:	2200      	movs	r2, #0
 800a63a:	601a      	str	r2, [r3, #0]
 800a63c:	605a      	str	r2, [r3, #4]
 800a63e:	609a      	str	r2, [r3, #8]
 800a640:	60da      	str	r2, [r3, #12]
 800a642:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = PIN_LVL_EN;
 800a644:	2380      	movs	r3, #128	; 0x80
 800a646:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a648:	2301      	movs	r3, #1
 800a64a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a64c:	2300      	movs	r3, #0
 800a64e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800a650:	1d3b      	adds	r3, r7, #4
 800a652:	4619      	mov	r1, r3
 800a654:	4825      	ldr	r0, [pc, #148]	; (800a6ec <board_init_specific+0xbc>)
 800a656:	f7fa f99f 	bl	8004998 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_LVL_EN, GPIO_PIN_RESET);
 800a65a:	2200      	movs	r2, #0
 800a65c:	2180      	movs	r1, #128	; 0x80
 800a65e:	4823      	ldr	r0, [pc, #140]	; (800a6ec <board_init_specific+0xbc>)
 800a660:	f7fa fb14 	bl	8004c8c <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_LVL_DIR;
 800a664:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a668:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a66a:	2301      	movs	r3, #1
 800a66c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a66e:	2300      	movs	r3, #0
 800a670:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800a672:	1d3b      	adds	r3, r7, #4
 800a674:	4619      	mov	r1, r3
 800a676:	481d      	ldr	r0, [pc, #116]	; (800a6ec <board_init_specific+0xbc>)
 800a678:	f7fa f98e 	bl	8004998 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_LVL_DIR, GPIO_PIN_SET);
 800a67c:	2201      	movs	r2, #1
 800a67e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a682:	481a      	ldr	r0, [pc, #104]	; (800a6ec <board_init_specific+0xbc>)
 800a684:	f7fa fb02 	bl	8004c8c <HAL_GPIO_WritePin>

    // setup XR_RX and XR_TX
    GPIO_InitStruct.Pin = PIN_VBUS_PRESENT;
 800a688:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a68c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a68e:	2300      	movs	r3, #0
 800a690:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a692:	2300      	movs	r3, #0
 800a694:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);
 800a696:	1d3b      	adds	r3, r7, #4
 800a698:	4619      	mov	r1, r3
 800a69a:	4815      	ldr	r0, [pc, #84]	; (800a6f0 <board_init_specific+0xc0>)
 800a69c:	f7fa f97c 	bl	8004998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_GREEN_LED;
 800a6a0:	2304      	movs	r3, #4
 800a6a2:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800a6ac:	1d3b      	adds	r3, r7, #4
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	480e      	ldr	r0, [pc, #56]	; (800a6ec <board_init_specific+0xbc>)
 800a6b2:	f7fa f971 	bl	8004998 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_GREEN_LED, GPIO_PIN_RESET);
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	2104      	movs	r1, #4
 800a6ba:	480c      	ldr	r0, [pc, #48]	; (800a6ec <board_init_specific+0xbc>)
 800a6bc:	f7fa fae6 	bl	8004c8c <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_RED_LED;
 800a6c0:	2308      	movs	r3, #8
 800a6c2:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800a6cc:	1d3b      	adds	r3, r7, #4
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	4806      	ldr	r0, [pc, #24]	; (800a6ec <board_init_specific+0xbc>)
 800a6d2:	f7fa f961 	bl	8004998 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_RED_LED, GPIO_PIN_RESET);
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	2108      	movs	r1, #8
 800a6da:	4804      	ldr	r0, [pc, #16]	; (800a6ec <board_init_specific+0xbc>)
 800a6dc:	f7fa fad6 	bl	8004c8c <HAL_GPIO_WritePin>

    board_init_peripheral_setup();
 800a6e0:	f7ff ff9e 	bl	800a620 <board_init_peripheral_setup>
}
 800a6e4:	bf00      	nop
 800a6e6:	3718      	adds	r7, #24
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}
 800a6ec:	48000800 	.word	0x48000800
 800a6f0:	48000400 	.word	0x48000400

0800a6f4 <board_init_specific_esp8266_uart_boot_disable>:
    HAL_GPIO_WritePin(PIN_PORT_A, PIN_ESP8266_GPIO0, GPIO_PIN_RESET);
}


void board_init_specific_esp8266_uart_boot_disable(void)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b086      	sub	sp, #24
 800a6f8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a6fa:	1d3b      	adds	r3, r7, #4
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	601a      	str	r2, [r3, #0]
 800a700:	605a      	str	r2, [r3, #4]
 800a702:	609a      	str	r2, [r3, #8]
 800a704:	60da      	str	r2, [r3, #12]
 800a706:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = PIN_ESP8266_GPIO0;
 800a708:	2320      	movs	r3, #32
 800a70a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a70c:	2301      	movs	r3, #1
 800a70e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a710:	2300      	movs	r3, #0
 800a712:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 800a714:	1d3b      	adds	r3, r7, #4
 800a716:	4619      	mov	r1, r3
 800a718:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a71c:	f7fa f93c 	bl	8004998 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_A, PIN_ESP8266_GPIO0, GPIO_PIN_SET);
 800a720:	2201      	movs	r2, #1
 800a722:	2120      	movs	r1, #32
 800a724:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a728:	f7fa fab0 	bl	8004c8c <HAL_GPIO_WritePin>
}
 800a72c:	bf00      	nop
 800a72e:	3718      	adds	r7, #24
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <board_init_specific_esp8266_power_enable>:


void board_init_specific_esp8266_power_enable(void)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b086      	sub	sp, #24
 800a738:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a73a:	1d3b      	adds	r3, r7, #4
 800a73c:	2200      	movs	r2, #0
 800a73e:	601a      	str	r2, [r3, #0]
 800a740:	605a      	str	r2, [r3, #4]
 800a742:	609a      	str	r2, [r3, #8]
 800a744:	60da      	str	r2, [r3, #12]
 800a746:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = PIN_ESP8266_EN;
 800a748:	2340      	movs	r3, #64	; 0x40
 800a74a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a74c:	2301      	movs	r3, #1
 800a74e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a750:	2300      	movs	r3, #0
 800a752:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 800a754:	1d3b      	adds	r3, r7, #4
 800a756:	4619      	mov	r1, r3
 800a758:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a75c:	f7fa f91c 	bl	8004998 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_A, PIN_ESP8266_EN, GPIO_PIN_SET);
 800a760:	2201      	movs	r2, #1
 800a762:	2140      	movs	r1, #64	; 0x40
 800a764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a768:	f7fa fa90 	bl	8004c8c <HAL_GPIO_WritePin>
}
 800a76c:	bf00      	nop
 800a76e:	3718      	adds	r7, #24
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <board_init_specific_esp8266_power_disable>:


void board_init_specific_esp8266_power_disable(void)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b086      	sub	sp, #24
 800a778:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a77a:	1d3b      	adds	r3, r7, #4
 800a77c:	2200      	movs	r2, #0
 800a77e:	601a      	str	r2, [r3, #0]
 800a780:	605a      	str	r2, [r3, #4]
 800a782:	609a      	str	r2, [r3, #8]
 800a784:	60da      	str	r2, [r3, #12]
 800a786:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = PIN_ESP8266_EN;
 800a788:	2340      	movs	r3, #64	; 0x40
 800a78a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a78c:	2301      	movs	r3, #1
 800a78e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a790:	2300      	movs	r3, #0
 800a792:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 800a794:	1d3b      	adds	r3, r7, #4
 800a796:	4619      	mov	r1, r3
 800a798:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a79c:	f7fa f8fc 	bl	8004998 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_A, PIN_ESP8266_EN, GPIO_PIN_RESET);
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	2140      	movs	r1, #64	; 0x40
 800a7a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a7a8:	f7fa fa70 	bl	8004c8c <HAL_GPIO_WritePin>
}
 800a7ac:	bf00      	nop
 800a7ae:	3718      	adds	r7, #24
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <board_init_specific_esp8266_reset_assert>:


void board_init_specific_esp8266_reset_assert(void)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b086      	sub	sp, #24
 800a7b8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a7ba:	1d3b      	adds	r3, r7, #4
 800a7bc:	2200      	movs	r2, #0
 800a7be:	601a      	str	r2, [r3, #0]
 800a7c0:	605a      	str	r2, [r3, #4]
 800a7c2:	609a      	str	r2, [r3, #8]
 800a7c4:	60da      	str	r2, [r3, #12]
 800a7c6:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = PIN_ESP8266_RST;
 800a7c8:	2380      	movs	r3, #128	; 0x80
 800a7ca:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 800a7d4:	1d3b      	adds	r3, r7, #4
 800a7d6:	4619      	mov	r1, r3
 800a7d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a7dc:	f7fa f8dc 	bl	8004998 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_A, PIN_ESP8266_RST, GPIO_PIN_RESET);
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	2180      	movs	r1, #128	; 0x80
 800a7e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a7e8:	f7fa fa50 	bl	8004c8c <HAL_GPIO_WritePin>
}
 800a7ec:	bf00      	nop
 800a7ee:	3718      	adds	r7, #24
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <board_init_specific_esp8266_reset_deassert>:


void board_init_specific_esp8266_reset_deassert(void)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b086      	sub	sp, #24
 800a7f8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a7fa:	1d3b      	adds	r3, r7, #4
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	601a      	str	r2, [r3, #0]
 800a800:	605a      	str	r2, [r3, #4]
 800a802:	609a      	str	r2, [r3, #8]
 800a804:	60da      	str	r2, [r3, #12]
 800a806:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = PIN_ESP8266_RST;
 800a808:	2380      	movs	r3, #128	; 0x80
 800a80a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a80c:	2301      	movs	r3, #1
 800a80e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a810:	2300      	movs	r3, #0
 800a812:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 800a814:	1d3b      	adds	r3, r7, #4
 800a816:	4619      	mov	r1, r3
 800a818:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a81c:	f7fa f8bc 	bl	8004998 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_A, PIN_ESP8266_RST, GPIO_PIN_SET);
 800a820:	2201      	movs	r2, #1
 800a822:	2180      	movs	r1, #128	; 0x80
 800a824:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a828:	f7fa fa30 	bl	8004c8c <HAL_GPIO_WritePin>
}
 800a82c:	bf00      	nop
 800a82e:	3718      	adds	r7, #24
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <flash_info_block_init>:
    return return_val;
}


void flash_info_block_init(void)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	af00      	add	r7, sp, #0
    g_flash_info_block.flash_info_data.uuid.data[0] = HAL_GetUIDw0();
 800a838:	f7f9 fc5c 	bl	80040f4 <HAL_GetUIDw0>
 800a83c:	4603      	mov	r3, r0
 800a83e:	4a32      	ldr	r2, [pc, #200]	; (800a908 <flash_info_block_init+0xd4>)
 800a840:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    g_flash_info_block.flash_info_data.uuid.data[1] = HAL_GetUIDw1();
 800a844:	f7f9 fc62 	bl	800410c <HAL_GetUIDw1>
 800a848:	4603      	mov	r3, r0
 800a84a:	4a2f      	ldr	r2, [pc, #188]	; (800a908 <flash_info_block_init+0xd4>)
 800a84c:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    g_flash_info_block.flash_info_data.uuid.data[2] = HAL_GetUIDw2();
 800a850:	f7f9 fc68 	bl	8004124 <HAL_GetUIDw2>
 800a854:	4603      	mov	r3, r0
 800a856:	4a2c      	ldr	r2, [pc, #176]	; (800a908 <flash_info_block_init+0xd4>)
 800a858:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    g_flash_info_block.flash_info_data.strip_info.num_strips = 1;
 800a85c:	4b2a      	ldr	r3, [pc, #168]	; (800a908 <flash_info_block_init+0xd4>)
 800a85e:	2201      	movs	r2, #1
 800a860:	701a      	strb	r2, [r3, #0]
    g_flash_info_block.flash_info_data.strip_info.strip_sync_animation = 1;
 800a862:	4b29      	ldr	r3, [pc, #164]	; (800a908 <flash_info_block_init+0xd4>)
 800a864:	2201      	movs	r2, #1
 800a866:	705a      	strb	r2, [r3, #1]
    g_flash_info_block.flash_info_data.strip_info.strip_length_one = 1;
 800a868:	4b27      	ldr	r3, [pc, #156]	; (800a908 <flash_info_block_init+0xd4>)
 800a86a:	2201      	movs	r2, #1
 800a86c:	805a      	strh	r2, [r3, #2]
    g_flash_info_block.flash_info_data.strip_info.strip_length_two = 1;
 800a86e:	4b26      	ldr	r3, [pc, #152]	; (800a908 <flash_info_block_init+0xd4>)
 800a870:	2201      	movs	r2, #1
 800a872:	809a      	strh	r2, [r3, #4]
    g_flash_info_block.flash_info_data.strip_info.strip_length_three = 1;
 800a874:	4b24      	ldr	r3, [pc, #144]	; (800a908 <flash_info_block_init+0xd4>)
 800a876:	2201      	movs	r2, #1
 800a878:	80da      	strh	r2, [r3, #6]
    g_flash_info_block.flash_info_data.strip_info.strip_one_brightness = 1;
 800a87a:	4b23      	ldr	r3, [pc, #140]	; (800a908 <flash_info_block_init+0xd4>)
 800a87c:	2201      	movs	r2, #1
 800a87e:	721a      	strb	r2, [r3, #8]
    g_flash_info_block.flash_info_data.strip_info.strip_two_brightness = 1;
 800a880:	4b21      	ldr	r3, [pc, #132]	; (800a908 <flash_info_block_init+0xd4>)
 800a882:	2201      	movs	r2, #1
 800a884:	725a      	strb	r2, [r3, #9]
    g_flash_info_block.flash_info_data.strip_info.strip_three_brightness = 1;
 800a886:	4b20      	ldr	r3, [pc, #128]	; (800a908 <flash_info_block_init+0xd4>)
 800a888:	2201      	movs	r2, #1
 800a88a:	729a      	strb	r2, [r3, #10]
    g_flash_info_block.flash_info_data.strip_info.strip_one_brightness = 1;
 800a88c:	4b1e      	ldr	r3, [pc, #120]	; (800a908 <flash_info_block_init+0xd4>)
 800a88e:	2201      	movs	r2, #1
 800a890:	721a      	strb	r2, [r3, #8]

    g_flash_info_block.flash_info_data.strip_info.strip_two_brightness = 1;
 800a892:	4b1d      	ldr	r3, [pc, #116]	; (800a908 <flash_info_block_init+0xd4>)
 800a894:	2201      	movs	r2, #1
 800a896:	725a      	strb	r2, [r3, #9]
    g_flash_info_block.flash_info_data.strip_info.strip_three_brightness = 1;
 800a898:	4b1b      	ldr	r3, [pc, #108]	; (800a908 <flash_info_block_init+0xd4>)
 800a89a:	2201      	movs	r2, #1
 800a89c:	729a      	strb	r2, [r3, #10]

    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.spell = 1;
 800a89e:	4a1a      	ldr	r2, [pc, #104]	; (800a908 <flash_info_block_init+0xd4>)
 800a8a0:	7ad3      	ldrb	r3, [r2, #11]
 800a8a2:	f043 0301 	orr.w	r3, r3, #1
 800a8a6:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.white = 1;
 800a8a8:	4a17      	ldr	r2, [pc, #92]	; (800a908 <flash_info_block_init+0xd4>)
 800a8aa:	7ad3      	ldrb	r3, [r2, #11]
 800a8ac:	f043 0302 	orr.w	r3, r3, #2
 800a8b0:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.solid = 1;
 800a8b2:	4a15      	ldr	r2, [pc, #84]	; (800a908 <flash_info_block_init+0xd4>)
 800a8b4:	7ad3      	ldrb	r3, [r2, #11]
 800a8b6:	f043 0304 	orr.w	r3, r3, #4
 800a8ba:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.sparkle = 1;
 800a8bc:	4a12      	ldr	r2, [pc, #72]	; (800a908 <flash_info_block_init+0xd4>)
 800a8be:	7ad3      	ldrb	r3, [r2, #11]
 800a8c0:	f043 0308 	orr.w	r3, r3, #8
 800a8c4:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.sparkle_no_fill = 1;
 800a8c6:	4a10      	ldr	r2, [pc, #64]	; (800a908 <flash_info_block_init+0xd4>)
 800a8c8:	7ad3      	ldrb	r3, [r2, #11]
 800a8ca:	f043 0310 	orr.w	r3, r3, #16
 800a8ce:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.rainbow = 1;
 800a8d0:	4a0d      	ldr	r2, [pc, #52]	; (800a908 <flash_info_block_init+0xd4>)
 800a8d2:	7ad3      	ldrb	r3, [r2, #11]
 800a8d4:	f043 0320 	orr.w	r3, r3, #32
 800a8d8:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.chase = 1;
 800a8da:	4a0b      	ldr	r2, [pc, #44]	; (800a908 <flash_info_block_init+0xd4>)
 800a8dc:	7ad3      	ldrb	r3, [r2, #11]
 800a8de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8e2:	72d3      	strb	r3, [r2, #11]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.chase_rainbow = 1;
 800a8e4:	4a08      	ldr	r2, [pc, #32]	; (800a908 <flash_info_block_init+0xd4>)
 800a8e6:	7ad3      	ldrb	r3, [r2, #11]
 800a8e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8ec:	72d3      	strb	r3, [r2, #11]

    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.fade = 1;
 800a8ee:	4a06      	ldr	r2, [pc, #24]	; (800a908 <flash_info_block_init+0xd4>)
 800a8f0:	7b13      	ldrb	r3, [r2, #12]
 800a8f2:	f043 0301 	orr.w	r3, r3, #1
 800a8f6:	7313      	strb	r3, [r2, #12]
    g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.twinkle = 1;
 800a8f8:	4a03      	ldr	r2, [pc, #12]	; (800a908 <flash_info_block_init+0xd4>)
 800a8fa:	7b13      	ldrb	r3, [r2, #12]
 800a8fc:	f043 0302 	orr.w	r3, r3, #2
 800a900:	7313      	strb	r3, [r2, #12]
    //g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.rsvd0 = 1; // future
    //g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.rsvd1 = 1; // future
    //g_flash_info_block.flash_info_data.strip_info.strip_one_active_animation_mask.rsvd2 = 1; // future

    // need to write to flash!
}
 800a902:	bf00      	nop
 800a904:	bd80      	pop	{r7, pc}
 800a906:	bf00      	nop
 800a908:	20002640 	.word	0x20002640

0800a90c <flash_info_init>:
}


uint32_t temp = 0;
void flash_info_init(void)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	af00      	add	r7, sp, #0
    temp = sizeof(flash_info_data_t);
 800a910:	4b0d      	ldr	r3, [pc, #52]	; (800a948 <flash_info_init+0x3c>)
 800a912:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800a916:	601a      	str	r2, [r3, #0]
    flash_info_block_init();
 800a918:	f7ff ff8c 	bl	800a834 <flash_info_block_init>
    //flash_access_read_flash_info_sector(g_flash_info_block.flat_data_uint32);
    if ((UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[0]) &&
 800a91c:	4b0b      	ldr	r3, [pc, #44]	; (800a94c <flash_info_init+0x40>)
 800a91e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800a922:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a926:	d10d      	bne.n	800a944 <flash_info_init+0x38>
                    (UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[1]) &&
 800a928:	4b08      	ldr	r3, [pc, #32]	; (800a94c <flash_info_init+0x40>)
 800a92a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    if ((UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[0]) &&
 800a92e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a932:	d107      	bne.n	800a944 <flash_info_init+0x38>
                    (UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[2]))
 800a934:	4b05      	ldr	r3, [pc, #20]	; (800a94c <flash_info_init+0x40>)
 800a936:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
                    (UINT32_MAX == g_flash_info_block.flash_info_data.uuid.data[1]) &&
 800a93a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a93e:	d101      	bne.n	800a944 <flash_info_init+0x38>
    {
        flash_info_block_init();
 800a940:	f7ff ff78 	bl	800a834 <flash_info_block_init>
    }
}
 800a944:	bf00      	nop
 800a946:	bd80      	pop	{r7, pc}
 800a948:	20002e40 	.word	0x20002e40
 800a94c:	20002640 	.word	0x20002640

0800a950 <main>:
#include "task_create.h"
#include "animate_led.h"
#include "flash_info.h"

int main(void)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	af00      	add	r7, sp, #0
    board_init_common_board_init();
 800a954:	f7fe ff96 	bl	8009884 <board_init_common_board_init>
    flash_info_init();
 800a958:	f7ff ffd8 	bl	800a90c <flash_info_init>
    task_create();
 800a95c:	f000 f808 	bl	800a970 <task_create>
	//semaphore_create();
    reset_ws2812b();
 800a960:	f7f5 ff22 	bl	80007a8 <reset_ws2812b>
	osKernelStart();
 800a964:	f7f6 fcd0 	bl	8001308 <osKernelStart>
 800a968:	2300      	movs	r3, #0
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	bd80      	pop	{r7, pc}
	...

0800a970 <task_create>:
	.priority = (osPriority_t) osPriorityNormal,
};


void task_create(void)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	af00      	add	r7, sp, #0
    osKernelInitialize();
 800a974:	f7f6 fca4 	bl	80012c0 <osKernelInitialize>
	g_button_press_handle = osThreadNew(task_button_press, NULL, &g_task_button_press_attributes);
 800a978:	4a0a      	ldr	r2, [pc, #40]	; (800a9a4 <task_create+0x34>)
 800a97a:	2100      	movs	r1, #0
 800a97c:	480a      	ldr	r0, [pc, #40]	; (800a9a8 <task_create+0x38>)
 800a97e:	f7f6 fce9 	bl	8001354 <osThreadNew>
 800a982:	4603      	mov	r3, r0
 800a984:	4a09      	ldr	r2, [pc, #36]	; (800a9ac <task_create+0x3c>)
 800a986:	6013      	str	r3, [r2, #0]
    //g_dma_transfer_handle = osThreadNew(task_dma_transfer, NULL, &g_task_dma_transfer_attributes);
    g_led_strip_1_ctrl_handle = osThreadNew(task_led_ctrl_strip_one, NULL, &g_task_strip_1_led_ctrl_attributes);
 800a988:	4a09      	ldr	r2, [pc, #36]	; (800a9b0 <task_create+0x40>)
 800a98a:	2100      	movs	r1, #0
 800a98c:	4809      	ldr	r0, [pc, #36]	; (800a9b4 <task_create+0x44>)
 800a98e:	f7f6 fce1 	bl	8001354 <osThreadNew>
 800a992:	4603      	mov	r3, r0
 800a994:	4a08      	ldr	r2, [pc, #32]	; (800a9b8 <task_create+0x48>)
 800a996:	6013      	str	r3, [r2, #0]
    g_tasks_running = true; // technically will be running after task scheduler started
 800a998:	4b08      	ldr	r3, [pc, #32]	; (800a9bc <task_create+0x4c>)
 800a99a:	2201      	movs	r2, #1
 800a99c:	701a      	strb	r2, [r3, #0]
}
 800a99e:	bf00      	nop
 800a9a0:	bd80      	pop	{r7, pc}
 800a9a2:	bf00      	nop
 800a9a4:	0800bbf4 	.word	0x0800bbf4
 800a9a8:	08000c89 	.word	0x08000c89
 800a9ac:	20002e48 	.word	0x20002e48
 800a9b0:	0800bc18 	.word	0x0800bc18
 800a9b4:	08000ee5 	.word	0x08000ee5
 800a9b8:	20002e44 	.word	0x20002e44
 800a9bc:	20003f04 	.word	0x20003f04

0800a9c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800a9c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a9f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800a9c4:	f7ff fe1a 	bl	800a5fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a9c8:	480c      	ldr	r0, [pc, #48]	; (800a9fc <LoopForever+0x6>)
  ldr r1, =_edata
 800a9ca:	490d      	ldr	r1, [pc, #52]	; (800aa00 <LoopForever+0xa>)
  ldr r2, =_sidata
 800a9cc:	4a0d      	ldr	r2, [pc, #52]	; (800aa04 <LoopForever+0xe>)
  movs r3, #0
 800a9ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a9d0:	e002      	b.n	800a9d8 <LoopCopyDataInit>

0800a9d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a9d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a9d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a9d6:	3304      	adds	r3, #4

0800a9d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a9d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a9da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a9dc:	d3f9      	bcc.n	800a9d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a9de:	4a0a      	ldr	r2, [pc, #40]	; (800aa08 <LoopForever+0x12>)
  ldr r4, =_ebss
 800a9e0:	4c0a      	ldr	r4, [pc, #40]	; (800aa0c <LoopForever+0x16>)
  movs r3, #0
 800a9e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a9e4:	e001      	b.n	800a9ea <LoopFillZerobss>

0800a9e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a9e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a9e8:	3204      	adds	r2, #4

0800a9ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a9ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a9ec:	d3fb      	bcc.n	800a9e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800a9ee:	f000 f9ff 	bl	800adf0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800a9f2:	f7ff ffad 	bl	800a950 <main>

0800a9f6 <LoopForever>:

LoopForever:
    b LoopForever
 800a9f6:	e7fe      	b.n	800a9f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800a9f8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800a9fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800aa00:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 800aa04:	0800bd2c 	.word	0x0800bd2c
  ldr r2, =_sbss
 800aa08:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 800aa0c:	20004054 	.word	0x20004054

0800aa10 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800aa10:	e7fe      	b.n	800aa10 <ADC1_IRQHandler>
	...

0800aa14 <malloc>:
 800aa14:	4b02      	ldr	r3, [pc, #8]	; (800aa20 <malloc+0xc>)
 800aa16:	4601      	mov	r1, r0
 800aa18:	6818      	ldr	r0, [r3, #0]
 800aa1a:	f000 b823 	b.w	800aa64 <_malloc_r>
 800aa1e:	bf00      	nop
 800aa20:	200002cc 	.word	0x200002cc

0800aa24 <sbrk_aligned>:
 800aa24:	b570      	push	{r4, r5, r6, lr}
 800aa26:	4e0e      	ldr	r6, [pc, #56]	; (800aa60 <sbrk_aligned+0x3c>)
 800aa28:	460c      	mov	r4, r1
 800aa2a:	6831      	ldr	r1, [r6, #0]
 800aa2c:	4605      	mov	r5, r0
 800aa2e:	b911      	cbnz	r1, 800aa36 <sbrk_aligned+0x12>
 800aa30:	f000 f9c8 	bl	800adc4 <_sbrk_r>
 800aa34:	6030      	str	r0, [r6, #0]
 800aa36:	4621      	mov	r1, r4
 800aa38:	4628      	mov	r0, r5
 800aa3a:	f000 f9c3 	bl	800adc4 <_sbrk_r>
 800aa3e:	1c43      	adds	r3, r0, #1
 800aa40:	d00a      	beq.n	800aa58 <sbrk_aligned+0x34>
 800aa42:	1cc4      	adds	r4, r0, #3
 800aa44:	f024 0403 	bic.w	r4, r4, #3
 800aa48:	42a0      	cmp	r0, r4
 800aa4a:	d007      	beq.n	800aa5c <sbrk_aligned+0x38>
 800aa4c:	1a21      	subs	r1, r4, r0
 800aa4e:	4628      	mov	r0, r5
 800aa50:	f000 f9b8 	bl	800adc4 <_sbrk_r>
 800aa54:	3001      	adds	r0, #1
 800aa56:	d101      	bne.n	800aa5c <sbrk_aligned+0x38>
 800aa58:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800aa5c:	4620      	mov	r0, r4
 800aa5e:	bd70      	pop	{r4, r5, r6, pc}
 800aa60:	20003f0c 	.word	0x20003f0c

0800aa64 <_malloc_r>:
 800aa64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa68:	1ccd      	adds	r5, r1, #3
 800aa6a:	f025 0503 	bic.w	r5, r5, #3
 800aa6e:	3508      	adds	r5, #8
 800aa70:	2d0c      	cmp	r5, #12
 800aa72:	bf38      	it	cc
 800aa74:	250c      	movcc	r5, #12
 800aa76:	2d00      	cmp	r5, #0
 800aa78:	4607      	mov	r7, r0
 800aa7a:	db01      	blt.n	800aa80 <_malloc_r+0x1c>
 800aa7c:	42a9      	cmp	r1, r5
 800aa7e:	d905      	bls.n	800aa8c <_malloc_r+0x28>
 800aa80:	230c      	movs	r3, #12
 800aa82:	603b      	str	r3, [r7, #0]
 800aa84:	2600      	movs	r6, #0
 800aa86:	4630      	mov	r0, r6
 800aa88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa8c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ab60 <_malloc_r+0xfc>
 800aa90:	f000 f868 	bl	800ab64 <__malloc_lock>
 800aa94:	f8d8 3000 	ldr.w	r3, [r8]
 800aa98:	461c      	mov	r4, r3
 800aa9a:	bb5c      	cbnz	r4, 800aaf4 <_malloc_r+0x90>
 800aa9c:	4629      	mov	r1, r5
 800aa9e:	4638      	mov	r0, r7
 800aaa0:	f7ff ffc0 	bl	800aa24 <sbrk_aligned>
 800aaa4:	1c43      	adds	r3, r0, #1
 800aaa6:	4604      	mov	r4, r0
 800aaa8:	d155      	bne.n	800ab56 <_malloc_r+0xf2>
 800aaaa:	f8d8 4000 	ldr.w	r4, [r8]
 800aaae:	4626      	mov	r6, r4
 800aab0:	2e00      	cmp	r6, #0
 800aab2:	d145      	bne.n	800ab40 <_malloc_r+0xdc>
 800aab4:	2c00      	cmp	r4, #0
 800aab6:	d048      	beq.n	800ab4a <_malloc_r+0xe6>
 800aab8:	6823      	ldr	r3, [r4, #0]
 800aaba:	4631      	mov	r1, r6
 800aabc:	4638      	mov	r0, r7
 800aabe:	eb04 0903 	add.w	r9, r4, r3
 800aac2:	f000 f97f 	bl	800adc4 <_sbrk_r>
 800aac6:	4581      	cmp	r9, r0
 800aac8:	d13f      	bne.n	800ab4a <_malloc_r+0xe6>
 800aaca:	6821      	ldr	r1, [r4, #0]
 800aacc:	1a6d      	subs	r5, r5, r1
 800aace:	4629      	mov	r1, r5
 800aad0:	4638      	mov	r0, r7
 800aad2:	f7ff ffa7 	bl	800aa24 <sbrk_aligned>
 800aad6:	3001      	adds	r0, #1
 800aad8:	d037      	beq.n	800ab4a <_malloc_r+0xe6>
 800aada:	6823      	ldr	r3, [r4, #0]
 800aadc:	442b      	add	r3, r5
 800aade:	6023      	str	r3, [r4, #0]
 800aae0:	f8d8 3000 	ldr.w	r3, [r8]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d038      	beq.n	800ab5a <_malloc_r+0xf6>
 800aae8:	685a      	ldr	r2, [r3, #4]
 800aaea:	42a2      	cmp	r2, r4
 800aaec:	d12b      	bne.n	800ab46 <_malloc_r+0xe2>
 800aaee:	2200      	movs	r2, #0
 800aaf0:	605a      	str	r2, [r3, #4]
 800aaf2:	e00f      	b.n	800ab14 <_malloc_r+0xb0>
 800aaf4:	6822      	ldr	r2, [r4, #0]
 800aaf6:	1b52      	subs	r2, r2, r5
 800aaf8:	d41f      	bmi.n	800ab3a <_malloc_r+0xd6>
 800aafa:	2a0b      	cmp	r2, #11
 800aafc:	d917      	bls.n	800ab2e <_malloc_r+0xca>
 800aafe:	1961      	adds	r1, r4, r5
 800ab00:	42a3      	cmp	r3, r4
 800ab02:	6025      	str	r5, [r4, #0]
 800ab04:	bf18      	it	ne
 800ab06:	6059      	strne	r1, [r3, #4]
 800ab08:	6863      	ldr	r3, [r4, #4]
 800ab0a:	bf08      	it	eq
 800ab0c:	f8c8 1000 	streq.w	r1, [r8]
 800ab10:	5162      	str	r2, [r4, r5]
 800ab12:	604b      	str	r3, [r1, #4]
 800ab14:	4638      	mov	r0, r7
 800ab16:	f104 060b 	add.w	r6, r4, #11
 800ab1a:	f000 f829 	bl	800ab70 <__malloc_unlock>
 800ab1e:	f026 0607 	bic.w	r6, r6, #7
 800ab22:	1d23      	adds	r3, r4, #4
 800ab24:	1af2      	subs	r2, r6, r3
 800ab26:	d0ae      	beq.n	800aa86 <_malloc_r+0x22>
 800ab28:	1b9b      	subs	r3, r3, r6
 800ab2a:	50a3      	str	r3, [r4, r2]
 800ab2c:	e7ab      	b.n	800aa86 <_malloc_r+0x22>
 800ab2e:	42a3      	cmp	r3, r4
 800ab30:	6862      	ldr	r2, [r4, #4]
 800ab32:	d1dd      	bne.n	800aaf0 <_malloc_r+0x8c>
 800ab34:	f8c8 2000 	str.w	r2, [r8]
 800ab38:	e7ec      	b.n	800ab14 <_malloc_r+0xb0>
 800ab3a:	4623      	mov	r3, r4
 800ab3c:	6864      	ldr	r4, [r4, #4]
 800ab3e:	e7ac      	b.n	800aa9a <_malloc_r+0x36>
 800ab40:	4634      	mov	r4, r6
 800ab42:	6876      	ldr	r6, [r6, #4]
 800ab44:	e7b4      	b.n	800aab0 <_malloc_r+0x4c>
 800ab46:	4613      	mov	r3, r2
 800ab48:	e7cc      	b.n	800aae4 <_malloc_r+0x80>
 800ab4a:	230c      	movs	r3, #12
 800ab4c:	603b      	str	r3, [r7, #0]
 800ab4e:	4638      	mov	r0, r7
 800ab50:	f000 f80e 	bl	800ab70 <__malloc_unlock>
 800ab54:	e797      	b.n	800aa86 <_malloc_r+0x22>
 800ab56:	6025      	str	r5, [r4, #0]
 800ab58:	e7dc      	b.n	800ab14 <_malloc_r+0xb0>
 800ab5a:	605b      	str	r3, [r3, #4]
 800ab5c:	deff      	udf	#255	; 0xff
 800ab5e:	bf00      	nop
 800ab60:	20003f08 	.word	0x20003f08

0800ab64 <__malloc_lock>:
 800ab64:	4801      	ldr	r0, [pc, #4]	; (800ab6c <__malloc_lock+0x8>)
 800ab66:	f000 b968 	b.w	800ae3a <__retarget_lock_acquire_recursive>
 800ab6a:	bf00      	nop
 800ab6c:	2000404c 	.word	0x2000404c

0800ab70 <__malloc_unlock>:
 800ab70:	4801      	ldr	r0, [pc, #4]	; (800ab78 <__malloc_unlock+0x8>)
 800ab72:	f000 b963 	b.w	800ae3c <__retarget_lock_release_recursive>
 800ab76:	bf00      	nop
 800ab78:	2000404c 	.word	0x2000404c

0800ab7c <srand>:
 800ab7c:	b538      	push	{r3, r4, r5, lr}
 800ab7e:	4b10      	ldr	r3, [pc, #64]	; (800abc0 <srand+0x44>)
 800ab80:	681d      	ldr	r5, [r3, #0]
 800ab82:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800ab84:	4604      	mov	r4, r0
 800ab86:	b9b3      	cbnz	r3, 800abb6 <srand+0x3a>
 800ab88:	2018      	movs	r0, #24
 800ab8a:	f7ff ff43 	bl	800aa14 <malloc>
 800ab8e:	4602      	mov	r2, r0
 800ab90:	6328      	str	r0, [r5, #48]	; 0x30
 800ab92:	b920      	cbnz	r0, 800ab9e <srand+0x22>
 800ab94:	4b0b      	ldr	r3, [pc, #44]	; (800abc4 <srand+0x48>)
 800ab96:	480c      	ldr	r0, [pc, #48]	; (800abc8 <srand+0x4c>)
 800ab98:	2146      	movs	r1, #70	; 0x46
 800ab9a:	f000 f95f 	bl	800ae5c <__assert_func>
 800ab9e:	490b      	ldr	r1, [pc, #44]	; (800abcc <srand+0x50>)
 800aba0:	4b0b      	ldr	r3, [pc, #44]	; (800abd0 <srand+0x54>)
 800aba2:	e9c0 1300 	strd	r1, r3, [r0]
 800aba6:	4b0b      	ldr	r3, [pc, #44]	; (800abd4 <srand+0x58>)
 800aba8:	6083      	str	r3, [r0, #8]
 800abaa:	230b      	movs	r3, #11
 800abac:	8183      	strh	r3, [r0, #12]
 800abae:	2100      	movs	r1, #0
 800abb0:	2001      	movs	r0, #1
 800abb2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800abb6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800abb8:	2200      	movs	r2, #0
 800abba:	611c      	str	r4, [r3, #16]
 800abbc:	615a      	str	r2, [r3, #20]
 800abbe:	bd38      	pop	{r3, r4, r5, pc}
 800abc0:	200002cc 	.word	0x200002cc
 800abc4:	0800bc3c 	.word	0x0800bc3c
 800abc8:	0800bc53 	.word	0x0800bc53
 800abcc:	abcd330e 	.word	0xabcd330e
 800abd0:	e66d1234 	.word	0xe66d1234
 800abd4:	0005deec 	.word	0x0005deec

0800abd8 <std>:
 800abd8:	2300      	movs	r3, #0
 800abda:	b510      	push	{r4, lr}
 800abdc:	4604      	mov	r4, r0
 800abde:	e9c0 3300 	strd	r3, r3, [r0]
 800abe2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800abe6:	6083      	str	r3, [r0, #8]
 800abe8:	8181      	strh	r1, [r0, #12]
 800abea:	6643      	str	r3, [r0, #100]	; 0x64
 800abec:	81c2      	strh	r2, [r0, #14]
 800abee:	6183      	str	r3, [r0, #24]
 800abf0:	4619      	mov	r1, r3
 800abf2:	2208      	movs	r2, #8
 800abf4:	305c      	adds	r0, #92	; 0x5c
 800abf6:	f000 f8b1 	bl	800ad5c <memset>
 800abfa:	4b0d      	ldr	r3, [pc, #52]	; (800ac30 <std+0x58>)
 800abfc:	6263      	str	r3, [r4, #36]	; 0x24
 800abfe:	4b0d      	ldr	r3, [pc, #52]	; (800ac34 <std+0x5c>)
 800ac00:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac02:	4b0d      	ldr	r3, [pc, #52]	; (800ac38 <std+0x60>)
 800ac04:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac06:	4b0d      	ldr	r3, [pc, #52]	; (800ac3c <std+0x64>)
 800ac08:	6323      	str	r3, [r4, #48]	; 0x30
 800ac0a:	4b0d      	ldr	r3, [pc, #52]	; (800ac40 <std+0x68>)
 800ac0c:	6224      	str	r4, [r4, #32]
 800ac0e:	429c      	cmp	r4, r3
 800ac10:	d006      	beq.n	800ac20 <std+0x48>
 800ac12:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ac16:	4294      	cmp	r4, r2
 800ac18:	d002      	beq.n	800ac20 <std+0x48>
 800ac1a:	33d0      	adds	r3, #208	; 0xd0
 800ac1c:	429c      	cmp	r4, r3
 800ac1e:	d105      	bne.n	800ac2c <std+0x54>
 800ac20:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ac24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac28:	f000 b906 	b.w	800ae38 <__retarget_lock_init_recursive>
 800ac2c:	bd10      	pop	{r4, pc}
 800ac2e:	bf00      	nop
 800ac30:	0800b08d 	.word	0x0800b08d
 800ac34:	0800b0af 	.word	0x0800b0af
 800ac38:	0800b0e7 	.word	0x0800b0e7
 800ac3c:	0800b10b 	.word	0x0800b10b
 800ac40:	20003f10 	.word	0x20003f10

0800ac44 <stdio_exit_handler>:
 800ac44:	4a02      	ldr	r2, [pc, #8]	; (800ac50 <stdio_exit_handler+0xc>)
 800ac46:	4903      	ldr	r1, [pc, #12]	; (800ac54 <stdio_exit_handler+0x10>)
 800ac48:	4803      	ldr	r0, [pc, #12]	; (800ac58 <stdio_exit_handler+0x14>)
 800ac4a:	f000 b869 	b.w	800ad20 <_fwalk_sglue>
 800ac4e:	bf00      	nop
 800ac50:	20000274 	.word	0x20000274
 800ac54:	0800b03d 	.word	0x0800b03d
 800ac58:	20000280 	.word	0x20000280

0800ac5c <cleanup_stdio>:
 800ac5c:	6841      	ldr	r1, [r0, #4]
 800ac5e:	4b0c      	ldr	r3, [pc, #48]	; (800ac90 <cleanup_stdio+0x34>)
 800ac60:	4299      	cmp	r1, r3
 800ac62:	b510      	push	{r4, lr}
 800ac64:	4604      	mov	r4, r0
 800ac66:	d001      	beq.n	800ac6c <cleanup_stdio+0x10>
 800ac68:	f000 f9e8 	bl	800b03c <_fflush_r>
 800ac6c:	68a1      	ldr	r1, [r4, #8]
 800ac6e:	4b09      	ldr	r3, [pc, #36]	; (800ac94 <cleanup_stdio+0x38>)
 800ac70:	4299      	cmp	r1, r3
 800ac72:	d002      	beq.n	800ac7a <cleanup_stdio+0x1e>
 800ac74:	4620      	mov	r0, r4
 800ac76:	f000 f9e1 	bl	800b03c <_fflush_r>
 800ac7a:	68e1      	ldr	r1, [r4, #12]
 800ac7c:	4b06      	ldr	r3, [pc, #24]	; (800ac98 <cleanup_stdio+0x3c>)
 800ac7e:	4299      	cmp	r1, r3
 800ac80:	d004      	beq.n	800ac8c <cleanup_stdio+0x30>
 800ac82:	4620      	mov	r0, r4
 800ac84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac88:	f000 b9d8 	b.w	800b03c <_fflush_r>
 800ac8c:	bd10      	pop	{r4, pc}
 800ac8e:	bf00      	nop
 800ac90:	20003f10 	.word	0x20003f10
 800ac94:	20003f78 	.word	0x20003f78
 800ac98:	20003fe0 	.word	0x20003fe0

0800ac9c <global_stdio_init.part.0>:
 800ac9c:	b510      	push	{r4, lr}
 800ac9e:	4b0b      	ldr	r3, [pc, #44]	; (800accc <global_stdio_init.part.0+0x30>)
 800aca0:	4c0b      	ldr	r4, [pc, #44]	; (800acd0 <global_stdio_init.part.0+0x34>)
 800aca2:	4a0c      	ldr	r2, [pc, #48]	; (800acd4 <global_stdio_init.part.0+0x38>)
 800aca4:	601a      	str	r2, [r3, #0]
 800aca6:	4620      	mov	r0, r4
 800aca8:	2200      	movs	r2, #0
 800acaa:	2104      	movs	r1, #4
 800acac:	f7ff ff94 	bl	800abd8 <std>
 800acb0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800acb4:	2201      	movs	r2, #1
 800acb6:	2109      	movs	r1, #9
 800acb8:	f7ff ff8e 	bl	800abd8 <std>
 800acbc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800acc0:	2202      	movs	r2, #2
 800acc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acc6:	2112      	movs	r1, #18
 800acc8:	f7ff bf86 	b.w	800abd8 <std>
 800accc:	20004048 	.word	0x20004048
 800acd0:	20003f10 	.word	0x20003f10
 800acd4:	0800ac45 	.word	0x0800ac45

0800acd8 <__sfp_lock_acquire>:
 800acd8:	4801      	ldr	r0, [pc, #4]	; (800ace0 <__sfp_lock_acquire+0x8>)
 800acda:	f000 b8ae 	b.w	800ae3a <__retarget_lock_acquire_recursive>
 800acde:	bf00      	nop
 800ace0:	2000404d 	.word	0x2000404d

0800ace4 <__sfp_lock_release>:
 800ace4:	4801      	ldr	r0, [pc, #4]	; (800acec <__sfp_lock_release+0x8>)
 800ace6:	f000 b8a9 	b.w	800ae3c <__retarget_lock_release_recursive>
 800acea:	bf00      	nop
 800acec:	2000404d 	.word	0x2000404d

0800acf0 <__sinit>:
 800acf0:	b510      	push	{r4, lr}
 800acf2:	4604      	mov	r4, r0
 800acf4:	f7ff fff0 	bl	800acd8 <__sfp_lock_acquire>
 800acf8:	6a23      	ldr	r3, [r4, #32]
 800acfa:	b11b      	cbz	r3, 800ad04 <__sinit+0x14>
 800acfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad00:	f7ff bff0 	b.w	800ace4 <__sfp_lock_release>
 800ad04:	4b04      	ldr	r3, [pc, #16]	; (800ad18 <__sinit+0x28>)
 800ad06:	6223      	str	r3, [r4, #32]
 800ad08:	4b04      	ldr	r3, [pc, #16]	; (800ad1c <__sinit+0x2c>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d1f5      	bne.n	800acfc <__sinit+0xc>
 800ad10:	f7ff ffc4 	bl	800ac9c <global_stdio_init.part.0>
 800ad14:	e7f2      	b.n	800acfc <__sinit+0xc>
 800ad16:	bf00      	nop
 800ad18:	0800ac5d 	.word	0x0800ac5d
 800ad1c:	20004048 	.word	0x20004048

0800ad20 <_fwalk_sglue>:
 800ad20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad24:	4607      	mov	r7, r0
 800ad26:	4688      	mov	r8, r1
 800ad28:	4614      	mov	r4, r2
 800ad2a:	2600      	movs	r6, #0
 800ad2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad30:	f1b9 0901 	subs.w	r9, r9, #1
 800ad34:	d505      	bpl.n	800ad42 <_fwalk_sglue+0x22>
 800ad36:	6824      	ldr	r4, [r4, #0]
 800ad38:	2c00      	cmp	r4, #0
 800ad3a:	d1f7      	bne.n	800ad2c <_fwalk_sglue+0xc>
 800ad3c:	4630      	mov	r0, r6
 800ad3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad42:	89ab      	ldrh	r3, [r5, #12]
 800ad44:	2b01      	cmp	r3, #1
 800ad46:	d907      	bls.n	800ad58 <_fwalk_sglue+0x38>
 800ad48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad4c:	3301      	adds	r3, #1
 800ad4e:	d003      	beq.n	800ad58 <_fwalk_sglue+0x38>
 800ad50:	4629      	mov	r1, r5
 800ad52:	4638      	mov	r0, r7
 800ad54:	47c0      	blx	r8
 800ad56:	4306      	orrs	r6, r0
 800ad58:	3568      	adds	r5, #104	; 0x68
 800ad5a:	e7e9      	b.n	800ad30 <_fwalk_sglue+0x10>

0800ad5c <memset>:
 800ad5c:	4402      	add	r2, r0
 800ad5e:	4603      	mov	r3, r0
 800ad60:	4293      	cmp	r3, r2
 800ad62:	d100      	bne.n	800ad66 <memset+0xa>
 800ad64:	4770      	bx	lr
 800ad66:	f803 1b01 	strb.w	r1, [r3], #1
 800ad6a:	e7f9      	b.n	800ad60 <memset+0x4>

0800ad6c <time>:
 800ad6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad6e:	4b0b      	ldr	r3, [pc, #44]	; (800ad9c <time+0x30>)
 800ad70:	2200      	movs	r2, #0
 800ad72:	4669      	mov	r1, sp
 800ad74:	4604      	mov	r4, r0
 800ad76:	6818      	ldr	r0, [r3, #0]
 800ad78:	f000 f812 	bl	800ada0 <_gettimeofday_r>
 800ad7c:	2800      	cmp	r0, #0
 800ad7e:	bfbe      	ittt	lt
 800ad80:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 800ad84:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ad88:	e9cd 2300 	strdlt	r2, r3, [sp]
 800ad8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad90:	b10c      	cbz	r4, 800ad96 <time+0x2a>
 800ad92:	e9c4 0100 	strd	r0, r1, [r4]
 800ad96:	b004      	add	sp, #16
 800ad98:	bd10      	pop	{r4, pc}
 800ad9a:	bf00      	nop
 800ad9c:	200002cc 	.word	0x200002cc

0800ada0 <_gettimeofday_r>:
 800ada0:	b538      	push	{r3, r4, r5, lr}
 800ada2:	4d07      	ldr	r5, [pc, #28]	; (800adc0 <_gettimeofday_r+0x20>)
 800ada4:	2300      	movs	r3, #0
 800ada6:	4604      	mov	r4, r0
 800ada8:	4608      	mov	r0, r1
 800adaa:	4611      	mov	r1, r2
 800adac:	602b      	str	r3, [r5, #0]
 800adae:	f000 fe41 	bl	800ba34 <_gettimeofday>
 800adb2:	1c43      	adds	r3, r0, #1
 800adb4:	d102      	bne.n	800adbc <_gettimeofday_r+0x1c>
 800adb6:	682b      	ldr	r3, [r5, #0]
 800adb8:	b103      	cbz	r3, 800adbc <_gettimeofday_r+0x1c>
 800adba:	6023      	str	r3, [r4, #0]
 800adbc:	bd38      	pop	{r3, r4, r5, pc}
 800adbe:	bf00      	nop
 800adc0:	20004050 	.word	0x20004050

0800adc4 <_sbrk_r>:
 800adc4:	b538      	push	{r3, r4, r5, lr}
 800adc6:	4d06      	ldr	r5, [pc, #24]	; (800ade0 <_sbrk_r+0x1c>)
 800adc8:	2300      	movs	r3, #0
 800adca:	4604      	mov	r4, r0
 800adcc:	4608      	mov	r0, r1
 800adce:	602b      	str	r3, [r5, #0]
 800add0:	f7ff fbde 	bl	800a590 <_sbrk>
 800add4:	1c43      	adds	r3, r0, #1
 800add6:	d102      	bne.n	800adde <_sbrk_r+0x1a>
 800add8:	682b      	ldr	r3, [r5, #0]
 800adda:	b103      	cbz	r3, 800adde <_sbrk_r+0x1a>
 800addc:	6023      	str	r3, [r4, #0]
 800adde:	bd38      	pop	{r3, r4, r5, pc}
 800ade0:	20004050 	.word	0x20004050

0800ade4 <__errno>:
 800ade4:	4b01      	ldr	r3, [pc, #4]	; (800adec <__errno+0x8>)
 800ade6:	6818      	ldr	r0, [r3, #0]
 800ade8:	4770      	bx	lr
 800adea:	bf00      	nop
 800adec:	200002cc 	.word	0x200002cc

0800adf0 <__libc_init_array>:
 800adf0:	b570      	push	{r4, r5, r6, lr}
 800adf2:	4d0d      	ldr	r5, [pc, #52]	; (800ae28 <__libc_init_array+0x38>)
 800adf4:	4c0d      	ldr	r4, [pc, #52]	; (800ae2c <__libc_init_array+0x3c>)
 800adf6:	1b64      	subs	r4, r4, r5
 800adf8:	10a4      	asrs	r4, r4, #2
 800adfa:	2600      	movs	r6, #0
 800adfc:	42a6      	cmp	r6, r4
 800adfe:	d109      	bne.n	800ae14 <__libc_init_array+0x24>
 800ae00:	4d0b      	ldr	r5, [pc, #44]	; (800ae30 <__libc_init_array+0x40>)
 800ae02:	4c0c      	ldr	r4, [pc, #48]	; (800ae34 <__libc_init_array+0x44>)
 800ae04:	f000 fe1e 	bl	800ba44 <_init>
 800ae08:	1b64      	subs	r4, r4, r5
 800ae0a:	10a4      	asrs	r4, r4, #2
 800ae0c:	2600      	movs	r6, #0
 800ae0e:	42a6      	cmp	r6, r4
 800ae10:	d105      	bne.n	800ae1e <__libc_init_array+0x2e>
 800ae12:	bd70      	pop	{r4, r5, r6, pc}
 800ae14:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae18:	4798      	blx	r3
 800ae1a:	3601      	adds	r6, #1
 800ae1c:	e7ee      	b.n	800adfc <__libc_init_array+0xc>
 800ae1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae22:	4798      	blx	r3
 800ae24:	3601      	adds	r6, #1
 800ae26:	e7f2      	b.n	800ae0e <__libc_init_array+0x1e>
 800ae28:	0800bd24 	.word	0x0800bd24
 800ae2c:	0800bd24 	.word	0x0800bd24
 800ae30:	0800bd24 	.word	0x0800bd24
 800ae34:	0800bd28 	.word	0x0800bd28

0800ae38 <__retarget_lock_init_recursive>:
 800ae38:	4770      	bx	lr

0800ae3a <__retarget_lock_acquire_recursive>:
 800ae3a:	4770      	bx	lr

0800ae3c <__retarget_lock_release_recursive>:
 800ae3c:	4770      	bx	lr

0800ae3e <memcpy>:
 800ae3e:	440a      	add	r2, r1
 800ae40:	4291      	cmp	r1, r2
 800ae42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ae46:	d100      	bne.n	800ae4a <memcpy+0xc>
 800ae48:	4770      	bx	lr
 800ae4a:	b510      	push	{r4, lr}
 800ae4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae50:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae54:	4291      	cmp	r1, r2
 800ae56:	d1f9      	bne.n	800ae4c <memcpy+0xe>
 800ae58:	bd10      	pop	{r4, pc}
	...

0800ae5c <__assert_func>:
 800ae5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae5e:	4614      	mov	r4, r2
 800ae60:	461a      	mov	r2, r3
 800ae62:	4b09      	ldr	r3, [pc, #36]	; (800ae88 <__assert_func+0x2c>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	4605      	mov	r5, r0
 800ae68:	68d8      	ldr	r0, [r3, #12]
 800ae6a:	b14c      	cbz	r4, 800ae80 <__assert_func+0x24>
 800ae6c:	4b07      	ldr	r3, [pc, #28]	; (800ae8c <__assert_func+0x30>)
 800ae6e:	9100      	str	r1, [sp, #0]
 800ae70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae74:	4906      	ldr	r1, [pc, #24]	; (800ae90 <__assert_func+0x34>)
 800ae76:	462b      	mov	r3, r5
 800ae78:	f000 f94c 	bl	800b114 <fiprintf>
 800ae7c:	f000 f9a2 	bl	800b1c4 <abort>
 800ae80:	4b04      	ldr	r3, [pc, #16]	; (800ae94 <__assert_func+0x38>)
 800ae82:	461c      	mov	r4, r3
 800ae84:	e7f3      	b.n	800ae6e <__assert_func+0x12>
 800ae86:	bf00      	nop
 800ae88:	200002cc 	.word	0x200002cc
 800ae8c:	0800bcab 	.word	0x0800bcab
 800ae90:	0800bcb8 	.word	0x0800bcb8
 800ae94:	0800bce6 	.word	0x0800bce6

0800ae98 <_free_r>:
 800ae98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae9a:	2900      	cmp	r1, #0
 800ae9c:	d044      	beq.n	800af28 <_free_r+0x90>
 800ae9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aea2:	9001      	str	r0, [sp, #4]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	f1a1 0404 	sub.w	r4, r1, #4
 800aeaa:	bfb8      	it	lt
 800aeac:	18e4      	addlt	r4, r4, r3
 800aeae:	f7ff fe59 	bl	800ab64 <__malloc_lock>
 800aeb2:	4a1e      	ldr	r2, [pc, #120]	; (800af2c <_free_r+0x94>)
 800aeb4:	9801      	ldr	r0, [sp, #4]
 800aeb6:	6813      	ldr	r3, [r2, #0]
 800aeb8:	b933      	cbnz	r3, 800aec8 <_free_r+0x30>
 800aeba:	6063      	str	r3, [r4, #4]
 800aebc:	6014      	str	r4, [r2, #0]
 800aebe:	b003      	add	sp, #12
 800aec0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aec4:	f7ff be54 	b.w	800ab70 <__malloc_unlock>
 800aec8:	42a3      	cmp	r3, r4
 800aeca:	d908      	bls.n	800aede <_free_r+0x46>
 800aecc:	6825      	ldr	r5, [r4, #0]
 800aece:	1961      	adds	r1, r4, r5
 800aed0:	428b      	cmp	r3, r1
 800aed2:	bf01      	itttt	eq
 800aed4:	6819      	ldreq	r1, [r3, #0]
 800aed6:	685b      	ldreq	r3, [r3, #4]
 800aed8:	1949      	addeq	r1, r1, r5
 800aeda:	6021      	streq	r1, [r4, #0]
 800aedc:	e7ed      	b.n	800aeba <_free_r+0x22>
 800aede:	461a      	mov	r2, r3
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	b10b      	cbz	r3, 800aee8 <_free_r+0x50>
 800aee4:	42a3      	cmp	r3, r4
 800aee6:	d9fa      	bls.n	800aede <_free_r+0x46>
 800aee8:	6811      	ldr	r1, [r2, #0]
 800aeea:	1855      	adds	r5, r2, r1
 800aeec:	42a5      	cmp	r5, r4
 800aeee:	d10b      	bne.n	800af08 <_free_r+0x70>
 800aef0:	6824      	ldr	r4, [r4, #0]
 800aef2:	4421      	add	r1, r4
 800aef4:	1854      	adds	r4, r2, r1
 800aef6:	42a3      	cmp	r3, r4
 800aef8:	6011      	str	r1, [r2, #0]
 800aefa:	d1e0      	bne.n	800aebe <_free_r+0x26>
 800aefc:	681c      	ldr	r4, [r3, #0]
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	6053      	str	r3, [r2, #4]
 800af02:	440c      	add	r4, r1
 800af04:	6014      	str	r4, [r2, #0]
 800af06:	e7da      	b.n	800aebe <_free_r+0x26>
 800af08:	d902      	bls.n	800af10 <_free_r+0x78>
 800af0a:	230c      	movs	r3, #12
 800af0c:	6003      	str	r3, [r0, #0]
 800af0e:	e7d6      	b.n	800aebe <_free_r+0x26>
 800af10:	6825      	ldr	r5, [r4, #0]
 800af12:	1961      	adds	r1, r4, r5
 800af14:	428b      	cmp	r3, r1
 800af16:	bf04      	itt	eq
 800af18:	6819      	ldreq	r1, [r3, #0]
 800af1a:	685b      	ldreq	r3, [r3, #4]
 800af1c:	6063      	str	r3, [r4, #4]
 800af1e:	bf04      	itt	eq
 800af20:	1949      	addeq	r1, r1, r5
 800af22:	6021      	streq	r1, [r4, #0]
 800af24:	6054      	str	r4, [r2, #4]
 800af26:	e7ca      	b.n	800aebe <_free_r+0x26>
 800af28:	b003      	add	sp, #12
 800af2a:	bd30      	pop	{r4, r5, pc}
 800af2c:	20003f08 	.word	0x20003f08

0800af30 <__sflush_r>:
 800af30:	898a      	ldrh	r2, [r1, #12]
 800af32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af36:	4605      	mov	r5, r0
 800af38:	0710      	lsls	r0, r2, #28
 800af3a:	460c      	mov	r4, r1
 800af3c:	d458      	bmi.n	800aff0 <__sflush_r+0xc0>
 800af3e:	684b      	ldr	r3, [r1, #4]
 800af40:	2b00      	cmp	r3, #0
 800af42:	dc05      	bgt.n	800af50 <__sflush_r+0x20>
 800af44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800af46:	2b00      	cmp	r3, #0
 800af48:	dc02      	bgt.n	800af50 <__sflush_r+0x20>
 800af4a:	2000      	movs	r0, #0
 800af4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af52:	2e00      	cmp	r6, #0
 800af54:	d0f9      	beq.n	800af4a <__sflush_r+0x1a>
 800af56:	2300      	movs	r3, #0
 800af58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af5c:	682f      	ldr	r7, [r5, #0]
 800af5e:	6a21      	ldr	r1, [r4, #32]
 800af60:	602b      	str	r3, [r5, #0]
 800af62:	d032      	beq.n	800afca <__sflush_r+0x9a>
 800af64:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af66:	89a3      	ldrh	r3, [r4, #12]
 800af68:	075a      	lsls	r2, r3, #29
 800af6a:	d505      	bpl.n	800af78 <__sflush_r+0x48>
 800af6c:	6863      	ldr	r3, [r4, #4]
 800af6e:	1ac0      	subs	r0, r0, r3
 800af70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af72:	b10b      	cbz	r3, 800af78 <__sflush_r+0x48>
 800af74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af76:	1ac0      	subs	r0, r0, r3
 800af78:	2300      	movs	r3, #0
 800af7a:	4602      	mov	r2, r0
 800af7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af7e:	6a21      	ldr	r1, [r4, #32]
 800af80:	4628      	mov	r0, r5
 800af82:	47b0      	blx	r6
 800af84:	1c43      	adds	r3, r0, #1
 800af86:	89a3      	ldrh	r3, [r4, #12]
 800af88:	d106      	bne.n	800af98 <__sflush_r+0x68>
 800af8a:	6829      	ldr	r1, [r5, #0]
 800af8c:	291d      	cmp	r1, #29
 800af8e:	d82b      	bhi.n	800afe8 <__sflush_r+0xb8>
 800af90:	4a29      	ldr	r2, [pc, #164]	; (800b038 <__sflush_r+0x108>)
 800af92:	410a      	asrs	r2, r1
 800af94:	07d6      	lsls	r6, r2, #31
 800af96:	d427      	bmi.n	800afe8 <__sflush_r+0xb8>
 800af98:	2200      	movs	r2, #0
 800af9a:	6062      	str	r2, [r4, #4]
 800af9c:	04d9      	lsls	r1, r3, #19
 800af9e:	6922      	ldr	r2, [r4, #16]
 800afa0:	6022      	str	r2, [r4, #0]
 800afa2:	d504      	bpl.n	800afae <__sflush_r+0x7e>
 800afa4:	1c42      	adds	r2, r0, #1
 800afa6:	d101      	bne.n	800afac <__sflush_r+0x7c>
 800afa8:	682b      	ldr	r3, [r5, #0]
 800afaa:	b903      	cbnz	r3, 800afae <__sflush_r+0x7e>
 800afac:	6560      	str	r0, [r4, #84]	; 0x54
 800afae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800afb0:	602f      	str	r7, [r5, #0]
 800afb2:	2900      	cmp	r1, #0
 800afb4:	d0c9      	beq.n	800af4a <__sflush_r+0x1a>
 800afb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800afba:	4299      	cmp	r1, r3
 800afbc:	d002      	beq.n	800afc4 <__sflush_r+0x94>
 800afbe:	4628      	mov	r0, r5
 800afc0:	f7ff ff6a 	bl	800ae98 <_free_r>
 800afc4:	2000      	movs	r0, #0
 800afc6:	6360      	str	r0, [r4, #52]	; 0x34
 800afc8:	e7c0      	b.n	800af4c <__sflush_r+0x1c>
 800afca:	2301      	movs	r3, #1
 800afcc:	4628      	mov	r0, r5
 800afce:	47b0      	blx	r6
 800afd0:	1c41      	adds	r1, r0, #1
 800afd2:	d1c8      	bne.n	800af66 <__sflush_r+0x36>
 800afd4:	682b      	ldr	r3, [r5, #0]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d0c5      	beq.n	800af66 <__sflush_r+0x36>
 800afda:	2b1d      	cmp	r3, #29
 800afdc:	d001      	beq.n	800afe2 <__sflush_r+0xb2>
 800afde:	2b16      	cmp	r3, #22
 800afe0:	d101      	bne.n	800afe6 <__sflush_r+0xb6>
 800afe2:	602f      	str	r7, [r5, #0]
 800afe4:	e7b1      	b.n	800af4a <__sflush_r+0x1a>
 800afe6:	89a3      	ldrh	r3, [r4, #12]
 800afe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afec:	81a3      	strh	r3, [r4, #12]
 800afee:	e7ad      	b.n	800af4c <__sflush_r+0x1c>
 800aff0:	690f      	ldr	r7, [r1, #16]
 800aff2:	2f00      	cmp	r7, #0
 800aff4:	d0a9      	beq.n	800af4a <__sflush_r+0x1a>
 800aff6:	0793      	lsls	r3, r2, #30
 800aff8:	680e      	ldr	r6, [r1, #0]
 800affa:	bf08      	it	eq
 800affc:	694b      	ldreq	r3, [r1, #20]
 800affe:	600f      	str	r7, [r1, #0]
 800b000:	bf18      	it	ne
 800b002:	2300      	movne	r3, #0
 800b004:	eba6 0807 	sub.w	r8, r6, r7
 800b008:	608b      	str	r3, [r1, #8]
 800b00a:	f1b8 0f00 	cmp.w	r8, #0
 800b00e:	dd9c      	ble.n	800af4a <__sflush_r+0x1a>
 800b010:	6a21      	ldr	r1, [r4, #32]
 800b012:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b014:	4643      	mov	r3, r8
 800b016:	463a      	mov	r2, r7
 800b018:	4628      	mov	r0, r5
 800b01a:	47b0      	blx	r6
 800b01c:	2800      	cmp	r0, #0
 800b01e:	dc06      	bgt.n	800b02e <__sflush_r+0xfe>
 800b020:	89a3      	ldrh	r3, [r4, #12]
 800b022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b026:	81a3      	strh	r3, [r4, #12]
 800b028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b02c:	e78e      	b.n	800af4c <__sflush_r+0x1c>
 800b02e:	4407      	add	r7, r0
 800b030:	eba8 0800 	sub.w	r8, r8, r0
 800b034:	e7e9      	b.n	800b00a <__sflush_r+0xda>
 800b036:	bf00      	nop
 800b038:	dfbffffe 	.word	0xdfbffffe

0800b03c <_fflush_r>:
 800b03c:	b538      	push	{r3, r4, r5, lr}
 800b03e:	690b      	ldr	r3, [r1, #16]
 800b040:	4605      	mov	r5, r0
 800b042:	460c      	mov	r4, r1
 800b044:	b913      	cbnz	r3, 800b04c <_fflush_r+0x10>
 800b046:	2500      	movs	r5, #0
 800b048:	4628      	mov	r0, r5
 800b04a:	bd38      	pop	{r3, r4, r5, pc}
 800b04c:	b118      	cbz	r0, 800b056 <_fflush_r+0x1a>
 800b04e:	6a03      	ldr	r3, [r0, #32]
 800b050:	b90b      	cbnz	r3, 800b056 <_fflush_r+0x1a>
 800b052:	f7ff fe4d 	bl	800acf0 <__sinit>
 800b056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d0f3      	beq.n	800b046 <_fflush_r+0xa>
 800b05e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b060:	07d0      	lsls	r0, r2, #31
 800b062:	d404      	bmi.n	800b06e <_fflush_r+0x32>
 800b064:	0599      	lsls	r1, r3, #22
 800b066:	d402      	bmi.n	800b06e <_fflush_r+0x32>
 800b068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b06a:	f7ff fee6 	bl	800ae3a <__retarget_lock_acquire_recursive>
 800b06e:	4628      	mov	r0, r5
 800b070:	4621      	mov	r1, r4
 800b072:	f7ff ff5d 	bl	800af30 <__sflush_r>
 800b076:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b078:	07da      	lsls	r2, r3, #31
 800b07a:	4605      	mov	r5, r0
 800b07c:	d4e4      	bmi.n	800b048 <_fflush_r+0xc>
 800b07e:	89a3      	ldrh	r3, [r4, #12]
 800b080:	059b      	lsls	r3, r3, #22
 800b082:	d4e1      	bmi.n	800b048 <_fflush_r+0xc>
 800b084:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b086:	f7ff fed9 	bl	800ae3c <__retarget_lock_release_recursive>
 800b08a:	e7dd      	b.n	800b048 <_fflush_r+0xc>

0800b08c <__sread>:
 800b08c:	b510      	push	{r4, lr}
 800b08e:	460c      	mov	r4, r1
 800b090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b094:	f000 f872 	bl	800b17c <_read_r>
 800b098:	2800      	cmp	r0, #0
 800b09a:	bfab      	itete	ge
 800b09c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b09e:	89a3      	ldrhlt	r3, [r4, #12]
 800b0a0:	181b      	addge	r3, r3, r0
 800b0a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b0a6:	bfac      	ite	ge
 800b0a8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b0aa:	81a3      	strhlt	r3, [r4, #12]
 800b0ac:	bd10      	pop	{r4, pc}

0800b0ae <__swrite>:
 800b0ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0b2:	461f      	mov	r7, r3
 800b0b4:	898b      	ldrh	r3, [r1, #12]
 800b0b6:	05db      	lsls	r3, r3, #23
 800b0b8:	4605      	mov	r5, r0
 800b0ba:	460c      	mov	r4, r1
 800b0bc:	4616      	mov	r6, r2
 800b0be:	d505      	bpl.n	800b0cc <__swrite+0x1e>
 800b0c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0c4:	2302      	movs	r3, #2
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	f000 f846 	bl	800b158 <_lseek_r>
 800b0cc:	89a3      	ldrh	r3, [r4, #12]
 800b0ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b0d6:	81a3      	strh	r3, [r4, #12]
 800b0d8:	4632      	mov	r2, r6
 800b0da:	463b      	mov	r3, r7
 800b0dc:	4628      	mov	r0, r5
 800b0de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0e2:	f000 b85d 	b.w	800b1a0 <_write_r>

0800b0e6 <__sseek>:
 800b0e6:	b510      	push	{r4, lr}
 800b0e8:	460c      	mov	r4, r1
 800b0ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0ee:	f000 f833 	bl	800b158 <_lseek_r>
 800b0f2:	1c43      	adds	r3, r0, #1
 800b0f4:	89a3      	ldrh	r3, [r4, #12]
 800b0f6:	bf15      	itete	ne
 800b0f8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b0fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b0fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b102:	81a3      	strheq	r3, [r4, #12]
 800b104:	bf18      	it	ne
 800b106:	81a3      	strhne	r3, [r4, #12]
 800b108:	bd10      	pop	{r4, pc}

0800b10a <__sclose>:
 800b10a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b10e:	f000 b813 	b.w	800b138 <_close_r>
	...

0800b114 <fiprintf>:
 800b114:	b40e      	push	{r1, r2, r3}
 800b116:	b503      	push	{r0, r1, lr}
 800b118:	4601      	mov	r1, r0
 800b11a:	ab03      	add	r3, sp, #12
 800b11c:	4805      	ldr	r0, [pc, #20]	; (800b134 <fiprintf+0x20>)
 800b11e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b122:	6800      	ldr	r0, [r0, #0]
 800b124:	9301      	str	r3, [sp, #4]
 800b126:	f000 f87d 	bl	800b224 <_vfiprintf_r>
 800b12a:	b002      	add	sp, #8
 800b12c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b130:	b003      	add	sp, #12
 800b132:	4770      	bx	lr
 800b134:	200002cc 	.word	0x200002cc

0800b138 <_close_r>:
 800b138:	b538      	push	{r3, r4, r5, lr}
 800b13a:	4d06      	ldr	r5, [pc, #24]	; (800b154 <_close_r+0x1c>)
 800b13c:	2300      	movs	r3, #0
 800b13e:	4604      	mov	r4, r0
 800b140:	4608      	mov	r0, r1
 800b142:	602b      	str	r3, [r5, #0]
 800b144:	f7ff f9ef 	bl	800a526 <_close>
 800b148:	1c43      	adds	r3, r0, #1
 800b14a:	d102      	bne.n	800b152 <_close_r+0x1a>
 800b14c:	682b      	ldr	r3, [r5, #0]
 800b14e:	b103      	cbz	r3, 800b152 <_close_r+0x1a>
 800b150:	6023      	str	r3, [r4, #0]
 800b152:	bd38      	pop	{r3, r4, r5, pc}
 800b154:	20004050 	.word	0x20004050

0800b158 <_lseek_r>:
 800b158:	b538      	push	{r3, r4, r5, lr}
 800b15a:	4d07      	ldr	r5, [pc, #28]	; (800b178 <_lseek_r+0x20>)
 800b15c:	4604      	mov	r4, r0
 800b15e:	4608      	mov	r0, r1
 800b160:	4611      	mov	r1, r2
 800b162:	2200      	movs	r2, #0
 800b164:	602a      	str	r2, [r5, #0]
 800b166:	461a      	mov	r2, r3
 800b168:	f7ff fa04 	bl	800a574 <_lseek>
 800b16c:	1c43      	adds	r3, r0, #1
 800b16e:	d102      	bne.n	800b176 <_lseek_r+0x1e>
 800b170:	682b      	ldr	r3, [r5, #0]
 800b172:	b103      	cbz	r3, 800b176 <_lseek_r+0x1e>
 800b174:	6023      	str	r3, [r4, #0]
 800b176:	bd38      	pop	{r3, r4, r5, pc}
 800b178:	20004050 	.word	0x20004050

0800b17c <_read_r>:
 800b17c:	b538      	push	{r3, r4, r5, lr}
 800b17e:	4d07      	ldr	r5, [pc, #28]	; (800b19c <_read_r+0x20>)
 800b180:	4604      	mov	r4, r0
 800b182:	4608      	mov	r0, r1
 800b184:	4611      	mov	r1, r2
 800b186:	2200      	movs	r2, #0
 800b188:	602a      	str	r2, [r5, #0]
 800b18a:	461a      	mov	r2, r3
 800b18c:	f7ff f992 	bl	800a4b4 <_read>
 800b190:	1c43      	adds	r3, r0, #1
 800b192:	d102      	bne.n	800b19a <_read_r+0x1e>
 800b194:	682b      	ldr	r3, [r5, #0]
 800b196:	b103      	cbz	r3, 800b19a <_read_r+0x1e>
 800b198:	6023      	str	r3, [r4, #0]
 800b19a:	bd38      	pop	{r3, r4, r5, pc}
 800b19c:	20004050 	.word	0x20004050

0800b1a0 <_write_r>:
 800b1a0:	b538      	push	{r3, r4, r5, lr}
 800b1a2:	4d07      	ldr	r5, [pc, #28]	; (800b1c0 <_write_r+0x20>)
 800b1a4:	4604      	mov	r4, r0
 800b1a6:	4608      	mov	r0, r1
 800b1a8:	4611      	mov	r1, r2
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	602a      	str	r2, [r5, #0]
 800b1ae:	461a      	mov	r2, r3
 800b1b0:	f7ff f99d 	bl	800a4ee <_write>
 800b1b4:	1c43      	adds	r3, r0, #1
 800b1b6:	d102      	bne.n	800b1be <_write_r+0x1e>
 800b1b8:	682b      	ldr	r3, [r5, #0]
 800b1ba:	b103      	cbz	r3, 800b1be <_write_r+0x1e>
 800b1bc:	6023      	str	r3, [r4, #0]
 800b1be:	bd38      	pop	{r3, r4, r5, pc}
 800b1c0:	20004050 	.word	0x20004050

0800b1c4 <abort>:
 800b1c4:	b508      	push	{r3, lr}
 800b1c6:	2006      	movs	r0, #6
 800b1c8:	f000 fc18 	bl	800b9fc <raise>
 800b1cc:	2001      	movs	r0, #1
 800b1ce:	f7ff f967 	bl	800a4a0 <_exit>

0800b1d2 <__sfputc_r>:
 800b1d2:	6893      	ldr	r3, [r2, #8]
 800b1d4:	3b01      	subs	r3, #1
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	b410      	push	{r4}
 800b1da:	6093      	str	r3, [r2, #8]
 800b1dc:	da08      	bge.n	800b1f0 <__sfputc_r+0x1e>
 800b1de:	6994      	ldr	r4, [r2, #24]
 800b1e0:	42a3      	cmp	r3, r4
 800b1e2:	db01      	blt.n	800b1e8 <__sfputc_r+0x16>
 800b1e4:	290a      	cmp	r1, #10
 800b1e6:	d103      	bne.n	800b1f0 <__sfputc_r+0x1e>
 800b1e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1ec:	f000 bac4 	b.w	800b778 <__swbuf_r>
 800b1f0:	6813      	ldr	r3, [r2, #0]
 800b1f2:	1c58      	adds	r0, r3, #1
 800b1f4:	6010      	str	r0, [r2, #0]
 800b1f6:	7019      	strb	r1, [r3, #0]
 800b1f8:	4608      	mov	r0, r1
 800b1fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1fe:	4770      	bx	lr

0800b200 <__sfputs_r>:
 800b200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b202:	4606      	mov	r6, r0
 800b204:	460f      	mov	r7, r1
 800b206:	4614      	mov	r4, r2
 800b208:	18d5      	adds	r5, r2, r3
 800b20a:	42ac      	cmp	r4, r5
 800b20c:	d101      	bne.n	800b212 <__sfputs_r+0x12>
 800b20e:	2000      	movs	r0, #0
 800b210:	e007      	b.n	800b222 <__sfputs_r+0x22>
 800b212:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b216:	463a      	mov	r2, r7
 800b218:	4630      	mov	r0, r6
 800b21a:	f7ff ffda 	bl	800b1d2 <__sfputc_r>
 800b21e:	1c43      	adds	r3, r0, #1
 800b220:	d1f3      	bne.n	800b20a <__sfputs_r+0xa>
 800b222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b224 <_vfiprintf_r>:
 800b224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b228:	460d      	mov	r5, r1
 800b22a:	b09d      	sub	sp, #116	; 0x74
 800b22c:	4614      	mov	r4, r2
 800b22e:	4698      	mov	r8, r3
 800b230:	4606      	mov	r6, r0
 800b232:	b118      	cbz	r0, 800b23c <_vfiprintf_r+0x18>
 800b234:	6a03      	ldr	r3, [r0, #32]
 800b236:	b90b      	cbnz	r3, 800b23c <_vfiprintf_r+0x18>
 800b238:	f7ff fd5a 	bl	800acf0 <__sinit>
 800b23c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b23e:	07d9      	lsls	r1, r3, #31
 800b240:	d405      	bmi.n	800b24e <_vfiprintf_r+0x2a>
 800b242:	89ab      	ldrh	r3, [r5, #12]
 800b244:	059a      	lsls	r2, r3, #22
 800b246:	d402      	bmi.n	800b24e <_vfiprintf_r+0x2a>
 800b248:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b24a:	f7ff fdf6 	bl	800ae3a <__retarget_lock_acquire_recursive>
 800b24e:	89ab      	ldrh	r3, [r5, #12]
 800b250:	071b      	lsls	r3, r3, #28
 800b252:	d501      	bpl.n	800b258 <_vfiprintf_r+0x34>
 800b254:	692b      	ldr	r3, [r5, #16]
 800b256:	b99b      	cbnz	r3, 800b280 <_vfiprintf_r+0x5c>
 800b258:	4629      	mov	r1, r5
 800b25a:	4630      	mov	r0, r6
 800b25c:	f000 faca 	bl	800b7f4 <__swsetup_r>
 800b260:	b170      	cbz	r0, 800b280 <_vfiprintf_r+0x5c>
 800b262:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b264:	07dc      	lsls	r4, r3, #31
 800b266:	d504      	bpl.n	800b272 <_vfiprintf_r+0x4e>
 800b268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b26c:	b01d      	add	sp, #116	; 0x74
 800b26e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b272:	89ab      	ldrh	r3, [r5, #12]
 800b274:	0598      	lsls	r0, r3, #22
 800b276:	d4f7      	bmi.n	800b268 <_vfiprintf_r+0x44>
 800b278:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b27a:	f7ff fddf 	bl	800ae3c <__retarget_lock_release_recursive>
 800b27e:	e7f3      	b.n	800b268 <_vfiprintf_r+0x44>
 800b280:	2300      	movs	r3, #0
 800b282:	9309      	str	r3, [sp, #36]	; 0x24
 800b284:	2320      	movs	r3, #32
 800b286:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b28a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b28e:	2330      	movs	r3, #48	; 0x30
 800b290:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b444 <_vfiprintf_r+0x220>
 800b294:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b298:	f04f 0901 	mov.w	r9, #1
 800b29c:	4623      	mov	r3, r4
 800b29e:	469a      	mov	sl, r3
 800b2a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2a4:	b10a      	cbz	r2, 800b2aa <_vfiprintf_r+0x86>
 800b2a6:	2a25      	cmp	r2, #37	; 0x25
 800b2a8:	d1f9      	bne.n	800b29e <_vfiprintf_r+0x7a>
 800b2aa:	ebba 0b04 	subs.w	fp, sl, r4
 800b2ae:	d00b      	beq.n	800b2c8 <_vfiprintf_r+0xa4>
 800b2b0:	465b      	mov	r3, fp
 800b2b2:	4622      	mov	r2, r4
 800b2b4:	4629      	mov	r1, r5
 800b2b6:	4630      	mov	r0, r6
 800b2b8:	f7ff ffa2 	bl	800b200 <__sfputs_r>
 800b2bc:	3001      	adds	r0, #1
 800b2be:	f000 80a9 	beq.w	800b414 <_vfiprintf_r+0x1f0>
 800b2c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2c4:	445a      	add	r2, fp
 800b2c6:	9209      	str	r2, [sp, #36]	; 0x24
 800b2c8:	f89a 3000 	ldrb.w	r3, [sl]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	f000 80a1 	beq.w	800b414 <_vfiprintf_r+0x1f0>
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b2d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2dc:	f10a 0a01 	add.w	sl, sl, #1
 800b2e0:	9304      	str	r3, [sp, #16]
 800b2e2:	9307      	str	r3, [sp, #28]
 800b2e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b2e8:	931a      	str	r3, [sp, #104]	; 0x68
 800b2ea:	4654      	mov	r4, sl
 800b2ec:	2205      	movs	r2, #5
 800b2ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2f2:	4854      	ldr	r0, [pc, #336]	; (800b444 <_vfiprintf_r+0x220>)
 800b2f4:	f7f4 ff74 	bl	80001e0 <memchr>
 800b2f8:	9a04      	ldr	r2, [sp, #16]
 800b2fa:	b9d8      	cbnz	r0, 800b334 <_vfiprintf_r+0x110>
 800b2fc:	06d1      	lsls	r1, r2, #27
 800b2fe:	bf44      	itt	mi
 800b300:	2320      	movmi	r3, #32
 800b302:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b306:	0713      	lsls	r3, r2, #28
 800b308:	bf44      	itt	mi
 800b30a:	232b      	movmi	r3, #43	; 0x2b
 800b30c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b310:	f89a 3000 	ldrb.w	r3, [sl]
 800b314:	2b2a      	cmp	r3, #42	; 0x2a
 800b316:	d015      	beq.n	800b344 <_vfiprintf_r+0x120>
 800b318:	9a07      	ldr	r2, [sp, #28]
 800b31a:	4654      	mov	r4, sl
 800b31c:	2000      	movs	r0, #0
 800b31e:	f04f 0c0a 	mov.w	ip, #10
 800b322:	4621      	mov	r1, r4
 800b324:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b328:	3b30      	subs	r3, #48	; 0x30
 800b32a:	2b09      	cmp	r3, #9
 800b32c:	d94d      	bls.n	800b3ca <_vfiprintf_r+0x1a6>
 800b32e:	b1b0      	cbz	r0, 800b35e <_vfiprintf_r+0x13a>
 800b330:	9207      	str	r2, [sp, #28]
 800b332:	e014      	b.n	800b35e <_vfiprintf_r+0x13a>
 800b334:	eba0 0308 	sub.w	r3, r0, r8
 800b338:	fa09 f303 	lsl.w	r3, r9, r3
 800b33c:	4313      	orrs	r3, r2
 800b33e:	9304      	str	r3, [sp, #16]
 800b340:	46a2      	mov	sl, r4
 800b342:	e7d2      	b.n	800b2ea <_vfiprintf_r+0xc6>
 800b344:	9b03      	ldr	r3, [sp, #12]
 800b346:	1d19      	adds	r1, r3, #4
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	9103      	str	r1, [sp, #12]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	bfbb      	ittet	lt
 800b350:	425b      	neglt	r3, r3
 800b352:	f042 0202 	orrlt.w	r2, r2, #2
 800b356:	9307      	strge	r3, [sp, #28]
 800b358:	9307      	strlt	r3, [sp, #28]
 800b35a:	bfb8      	it	lt
 800b35c:	9204      	strlt	r2, [sp, #16]
 800b35e:	7823      	ldrb	r3, [r4, #0]
 800b360:	2b2e      	cmp	r3, #46	; 0x2e
 800b362:	d10c      	bne.n	800b37e <_vfiprintf_r+0x15a>
 800b364:	7863      	ldrb	r3, [r4, #1]
 800b366:	2b2a      	cmp	r3, #42	; 0x2a
 800b368:	d134      	bne.n	800b3d4 <_vfiprintf_r+0x1b0>
 800b36a:	9b03      	ldr	r3, [sp, #12]
 800b36c:	1d1a      	adds	r2, r3, #4
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	9203      	str	r2, [sp, #12]
 800b372:	2b00      	cmp	r3, #0
 800b374:	bfb8      	it	lt
 800b376:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b37a:	3402      	adds	r4, #2
 800b37c:	9305      	str	r3, [sp, #20]
 800b37e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b454 <_vfiprintf_r+0x230>
 800b382:	7821      	ldrb	r1, [r4, #0]
 800b384:	2203      	movs	r2, #3
 800b386:	4650      	mov	r0, sl
 800b388:	f7f4 ff2a 	bl	80001e0 <memchr>
 800b38c:	b138      	cbz	r0, 800b39e <_vfiprintf_r+0x17a>
 800b38e:	9b04      	ldr	r3, [sp, #16]
 800b390:	eba0 000a 	sub.w	r0, r0, sl
 800b394:	2240      	movs	r2, #64	; 0x40
 800b396:	4082      	lsls	r2, r0
 800b398:	4313      	orrs	r3, r2
 800b39a:	3401      	adds	r4, #1
 800b39c:	9304      	str	r3, [sp, #16]
 800b39e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3a2:	4829      	ldr	r0, [pc, #164]	; (800b448 <_vfiprintf_r+0x224>)
 800b3a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3a8:	2206      	movs	r2, #6
 800b3aa:	f7f4 ff19 	bl	80001e0 <memchr>
 800b3ae:	2800      	cmp	r0, #0
 800b3b0:	d03f      	beq.n	800b432 <_vfiprintf_r+0x20e>
 800b3b2:	4b26      	ldr	r3, [pc, #152]	; (800b44c <_vfiprintf_r+0x228>)
 800b3b4:	bb1b      	cbnz	r3, 800b3fe <_vfiprintf_r+0x1da>
 800b3b6:	9b03      	ldr	r3, [sp, #12]
 800b3b8:	3307      	adds	r3, #7
 800b3ba:	f023 0307 	bic.w	r3, r3, #7
 800b3be:	3308      	adds	r3, #8
 800b3c0:	9303      	str	r3, [sp, #12]
 800b3c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3c4:	443b      	add	r3, r7
 800b3c6:	9309      	str	r3, [sp, #36]	; 0x24
 800b3c8:	e768      	b.n	800b29c <_vfiprintf_r+0x78>
 800b3ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3ce:	460c      	mov	r4, r1
 800b3d0:	2001      	movs	r0, #1
 800b3d2:	e7a6      	b.n	800b322 <_vfiprintf_r+0xfe>
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	3401      	adds	r4, #1
 800b3d8:	9305      	str	r3, [sp, #20]
 800b3da:	4619      	mov	r1, r3
 800b3dc:	f04f 0c0a 	mov.w	ip, #10
 800b3e0:	4620      	mov	r0, r4
 800b3e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3e6:	3a30      	subs	r2, #48	; 0x30
 800b3e8:	2a09      	cmp	r2, #9
 800b3ea:	d903      	bls.n	800b3f4 <_vfiprintf_r+0x1d0>
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d0c6      	beq.n	800b37e <_vfiprintf_r+0x15a>
 800b3f0:	9105      	str	r1, [sp, #20]
 800b3f2:	e7c4      	b.n	800b37e <_vfiprintf_r+0x15a>
 800b3f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3f8:	4604      	mov	r4, r0
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	e7f0      	b.n	800b3e0 <_vfiprintf_r+0x1bc>
 800b3fe:	ab03      	add	r3, sp, #12
 800b400:	9300      	str	r3, [sp, #0]
 800b402:	462a      	mov	r2, r5
 800b404:	4b12      	ldr	r3, [pc, #72]	; (800b450 <_vfiprintf_r+0x22c>)
 800b406:	a904      	add	r1, sp, #16
 800b408:	4630      	mov	r0, r6
 800b40a:	f3af 8000 	nop.w
 800b40e:	4607      	mov	r7, r0
 800b410:	1c78      	adds	r0, r7, #1
 800b412:	d1d6      	bne.n	800b3c2 <_vfiprintf_r+0x19e>
 800b414:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b416:	07d9      	lsls	r1, r3, #31
 800b418:	d405      	bmi.n	800b426 <_vfiprintf_r+0x202>
 800b41a:	89ab      	ldrh	r3, [r5, #12]
 800b41c:	059a      	lsls	r2, r3, #22
 800b41e:	d402      	bmi.n	800b426 <_vfiprintf_r+0x202>
 800b420:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b422:	f7ff fd0b 	bl	800ae3c <__retarget_lock_release_recursive>
 800b426:	89ab      	ldrh	r3, [r5, #12]
 800b428:	065b      	lsls	r3, r3, #25
 800b42a:	f53f af1d 	bmi.w	800b268 <_vfiprintf_r+0x44>
 800b42e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b430:	e71c      	b.n	800b26c <_vfiprintf_r+0x48>
 800b432:	ab03      	add	r3, sp, #12
 800b434:	9300      	str	r3, [sp, #0]
 800b436:	462a      	mov	r2, r5
 800b438:	4b05      	ldr	r3, [pc, #20]	; (800b450 <_vfiprintf_r+0x22c>)
 800b43a:	a904      	add	r1, sp, #16
 800b43c:	4630      	mov	r0, r6
 800b43e:	f000 f879 	bl	800b534 <_printf_i>
 800b442:	e7e4      	b.n	800b40e <_vfiprintf_r+0x1ea>
 800b444:	0800bce7 	.word	0x0800bce7
 800b448:	0800bcf1 	.word	0x0800bcf1
 800b44c:	00000000 	.word	0x00000000
 800b450:	0800b201 	.word	0x0800b201
 800b454:	0800bced 	.word	0x0800bced

0800b458 <_printf_common>:
 800b458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b45c:	4616      	mov	r6, r2
 800b45e:	4699      	mov	r9, r3
 800b460:	688a      	ldr	r2, [r1, #8]
 800b462:	690b      	ldr	r3, [r1, #16]
 800b464:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b468:	4293      	cmp	r3, r2
 800b46a:	bfb8      	it	lt
 800b46c:	4613      	movlt	r3, r2
 800b46e:	6033      	str	r3, [r6, #0]
 800b470:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b474:	4607      	mov	r7, r0
 800b476:	460c      	mov	r4, r1
 800b478:	b10a      	cbz	r2, 800b47e <_printf_common+0x26>
 800b47a:	3301      	adds	r3, #1
 800b47c:	6033      	str	r3, [r6, #0]
 800b47e:	6823      	ldr	r3, [r4, #0]
 800b480:	0699      	lsls	r1, r3, #26
 800b482:	bf42      	ittt	mi
 800b484:	6833      	ldrmi	r3, [r6, #0]
 800b486:	3302      	addmi	r3, #2
 800b488:	6033      	strmi	r3, [r6, #0]
 800b48a:	6825      	ldr	r5, [r4, #0]
 800b48c:	f015 0506 	ands.w	r5, r5, #6
 800b490:	d106      	bne.n	800b4a0 <_printf_common+0x48>
 800b492:	f104 0a19 	add.w	sl, r4, #25
 800b496:	68e3      	ldr	r3, [r4, #12]
 800b498:	6832      	ldr	r2, [r6, #0]
 800b49a:	1a9b      	subs	r3, r3, r2
 800b49c:	42ab      	cmp	r3, r5
 800b49e:	dc26      	bgt.n	800b4ee <_printf_common+0x96>
 800b4a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b4a4:	1e13      	subs	r3, r2, #0
 800b4a6:	6822      	ldr	r2, [r4, #0]
 800b4a8:	bf18      	it	ne
 800b4aa:	2301      	movne	r3, #1
 800b4ac:	0692      	lsls	r2, r2, #26
 800b4ae:	d42b      	bmi.n	800b508 <_printf_common+0xb0>
 800b4b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b4b4:	4649      	mov	r1, r9
 800b4b6:	4638      	mov	r0, r7
 800b4b8:	47c0      	blx	r8
 800b4ba:	3001      	adds	r0, #1
 800b4bc:	d01e      	beq.n	800b4fc <_printf_common+0xa4>
 800b4be:	6823      	ldr	r3, [r4, #0]
 800b4c0:	6922      	ldr	r2, [r4, #16]
 800b4c2:	f003 0306 	and.w	r3, r3, #6
 800b4c6:	2b04      	cmp	r3, #4
 800b4c8:	bf02      	ittt	eq
 800b4ca:	68e5      	ldreq	r5, [r4, #12]
 800b4cc:	6833      	ldreq	r3, [r6, #0]
 800b4ce:	1aed      	subeq	r5, r5, r3
 800b4d0:	68a3      	ldr	r3, [r4, #8]
 800b4d2:	bf0c      	ite	eq
 800b4d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b4d8:	2500      	movne	r5, #0
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	bfc4      	itt	gt
 800b4de:	1a9b      	subgt	r3, r3, r2
 800b4e0:	18ed      	addgt	r5, r5, r3
 800b4e2:	2600      	movs	r6, #0
 800b4e4:	341a      	adds	r4, #26
 800b4e6:	42b5      	cmp	r5, r6
 800b4e8:	d11a      	bne.n	800b520 <_printf_common+0xc8>
 800b4ea:	2000      	movs	r0, #0
 800b4ec:	e008      	b.n	800b500 <_printf_common+0xa8>
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	4652      	mov	r2, sl
 800b4f2:	4649      	mov	r1, r9
 800b4f4:	4638      	mov	r0, r7
 800b4f6:	47c0      	blx	r8
 800b4f8:	3001      	adds	r0, #1
 800b4fa:	d103      	bne.n	800b504 <_printf_common+0xac>
 800b4fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b504:	3501      	adds	r5, #1
 800b506:	e7c6      	b.n	800b496 <_printf_common+0x3e>
 800b508:	18e1      	adds	r1, r4, r3
 800b50a:	1c5a      	adds	r2, r3, #1
 800b50c:	2030      	movs	r0, #48	; 0x30
 800b50e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b512:	4422      	add	r2, r4
 800b514:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b518:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b51c:	3302      	adds	r3, #2
 800b51e:	e7c7      	b.n	800b4b0 <_printf_common+0x58>
 800b520:	2301      	movs	r3, #1
 800b522:	4622      	mov	r2, r4
 800b524:	4649      	mov	r1, r9
 800b526:	4638      	mov	r0, r7
 800b528:	47c0      	blx	r8
 800b52a:	3001      	adds	r0, #1
 800b52c:	d0e6      	beq.n	800b4fc <_printf_common+0xa4>
 800b52e:	3601      	adds	r6, #1
 800b530:	e7d9      	b.n	800b4e6 <_printf_common+0x8e>
	...

0800b534 <_printf_i>:
 800b534:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b538:	7e0f      	ldrb	r7, [r1, #24]
 800b53a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b53c:	2f78      	cmp	r7, #120	; 0x78
 800b53e:	4691      	mov	r9, r2
 800b540:	4680      	mov	r8, r0
 800b542:	460c      	mov	r4, r1
 800b544:	469a      	mov	sl, r3
 800b546:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b54a:	d807      	bhi.n	800b55c <_printf_i+0x28>
 800b54c:	2f62      	cmp	r7, #98	; 0x62
 800b54e:	d80a      	bhi.n	800b566 <_printf_i+0x32>
 800b550:	2f00      	cmp	r7, #0
 800b552:	f000 80d4 	beq.w	800b6fe <_printf_i+0x1ca>
 800b556:	2f58      	cmp	r7, #88	; 0x58
 800b558:	f000 80c0 	beq.w	800b6dc <_printf_i+0x1a8>
 800b55c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b560:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b564:	e03a      	b.n	800b5dc <_printf_i+0xa8>
 800b566:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b56a:	2b15      	cmp	r3, #21
 800b56c:	d8f6      	bhi.n	800b55c <_printf_i+0x28>
 800b56e:	a101      	add	r1, pc, #4	; (adr r1, 800b574 <_printf_i+0x40>)
 800b570:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b574:	0800b5cd 	.word	0x0800b5cd
 800b578:	0800b5e1 	.word	0x0800b5e1
 800b57c:	0800b55d 	.word	0x0800b55d
 800b580:	0800b55d 	.word	0x0800b55d
 800b584:	0800b55d 	.word	0x0800b55d
 800b588:	0800b55d 	.word	0x0800b55d
 800b58c:	0800b5e1 	.word	0x0800b5e1
 800b590:	0800b55d 	.word	0x0800b55d
 800b594:	0800b55d 	.word	0x0800b55d
 800b598:	0800b55d 	.word	0x0800b55d
 800b59c:	0800b55d 	.word	0x0800b55d
 800b5a0:	0800b6e5 	.word	0x0800b6e5
 800b5a4:	0800b60d 	.word	0x0800b60d
 800b5a8:	0800b69f 	.word	0x0800b69f
 800b5ac:	0800b55d 	.word	0x0800b55d
 800b5b0:	0800b55d 	.word	0x0800b55d
 800b5b4:	0800b707 	.word	0x0800b707
 800b5b8:	0800b55d 	.word	0x0800b55d
 800b5bc:	0800b60d 	.word	0x0800b60d
 800b5c0:	0800b55d 	.word	0x0800b55d
 800b5c4:	0800b55d 	.word	0x0800b55d
 800b5c8:	0800b6a7 	.word	0x0800b6a7
 800b5cc:	682b      	ldr	r3, [r5, #0]
 800b5ce:	1d1a      	adds	r2, r3, #4
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	602a      	str	r2, [r5, #0]
 800b5d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b5d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b5dc:	2301      	movs	r3, #1
 800b5de:	e09f      	b.n	800b720 <_printf_i+0x1ec>
 800b5e0:	6820      	ldr	r0, [r4, #0]
 800b5e2:	682b      	ldr	r3, [r5, #0]
 800b5e4:	0607      	lsls	r7, r0, #24
 800b5e6:	f103 0104 	add.w	r1, r3, #4
 800b5ea:	6029      	str	r1, [r5, #0]
 800b5ec:	d501      	bpl.n	800b5f2 <_printf_i+0xbe>
 800b5ee:	681e      	ldr	r6, [r3, #0]
 800b5f0:	e003      	b.n	800b5fa <_printf_i+0xc6>
 800b5f2:	0646      	lsls	r6, r0, #25
 800b5f4:	d5fb      	bpl.n	800b5ee <_printf_i+0xba>
 800b5f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b5fa:	2e00      	cmp	r6, #0
 800b5fc:	da03      	bge.n	800b606 <_printf_i+0xd2>
 800b5fe:	232d      	movs	r3, #45	; 0x2d
 800b600:	4276      	negs	r6, r6
 800b602:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b606:	485a      	ldr	r0, [pc, #360]	; (800b770 <_printf_i+0x23c>)
 800b608:	230a      	movs	r3, #10
 800b60a:	e012      	b.n	800b632 <_printf_i+0xfe>
 800b60c:	682b      	ldr	r3, [r5, #0]
 800b60e:	6820      	ldr	r0, [r4, #0]
 800b610:	1d19      	adds	r1, r3, #4
 800b612:	6029      	str	r1, [r5, #0]
 800b614:	0605      	lsls	r5, r0, #24
 800b616:	d501      	bpl.n	800b61c <_printf_i+0xe8>
 800b618:	681e      	ldr	r6, [r3, #0]
 800b61a:	e002      	b.n	800b622 <_printf_i+0xee>
 800b61c:	0641      	lsls	r1, r0, #25
 800b61e:	d5fb      	bpl.n	800b618 <_printf_i+0xe4>
 800b620:	881e      	ldrh	r6, [r3, #0]
 800b622:	4853      	ldr	r0, [pc, #332]	; (800b770 <_printf_i+0x23c>)
 800b624:	2f6f      	cmp	r7, #111	; 0x6f
 800b626:	bf0c      	ite	eq
 800b628:	2308      	moveq	r3, #8
 800b62a:	230a      	movne	r3, #10
 800b62c:	2100      	movs	r1, #0
 800b62e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b632:	6865      	ldr	r5, [r4, #4]
 800b634:	60a5      	str	r5, [r4, #8]
 800b636:	2d00      	cmp	r5, #0
 800b638:	bfa2      	ittt	ge
 800b63a:	6821      	ldrge	r1, [r4, #0]
 800b63c:	f021 0104 	bicge.w	r1, r1, #4
 800b640:	6021      	strge	r1, [r4, #0]
 800b642:	b90e      	cbnz	r6, 800b648 <_printf_i+0x114>
 800b644:	2d00      	cmp	r5, #0
 800b646:	d04b      	beq.n	800b6e0 <_printf_i+0x1ac>
 800b648:	4615      	mov	r5, r2
 800b64a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b64e:	fb03 6711 	mls	r7, r3, r1, r6
 800b652:	5dc7      	ldrb	r7, [r0, r7]
 800b654:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b658:	4637      	mov	r7, r6
 800b65a:	42bb      	cmp	r3, r7
 800b65c:	460e      	mov	r6, r1
 800b65e:	d9f4      	bls.n	800b64a <_printf_i+0x116>
 800b660:	2b08      	cmp	r3, #8
 800b662:	d10b      	bne.n	800b67c <_printf_i+0x148>
 800b664:	6823      	ldr	r3, [r4, #0]
 800b666:	07de      	lsls	r6, r3, #31
 800b668:	d508      	bpl.n	800b67c <_printf_i+0x148>
 800b66a:	6923      	ldr	r3, [r4, #16]
 800b66c:	6861      	ldr	r1, [r4, #4]
 800b66e:	4299      	cmp	r1, r3
 800b670:	bfde      	ittt	le
 800b672:	2330      	movle	r3, #48	; 0x30
 800b674:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b678:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b67c:	1b52      	subs	r2, r2, r5
 800b67e:	6122      	str	r2, [r4, #16]
 800b680:	f8cd a000 	str.w	sl, [sp]
 800b684:	464b      	mov	r3, r9
 800b686:	aa03      	add	r2, sp, #12
 800b688:	4621      	mov	r1, r4
 800b68a:	4640      	mov	r0, r8
 800b68c:	f7ff fee4 	bl	800b458 <_printf_common>
 800b690:	3001      	adds	r0, #1
 800b692:	d14a      	bne.n	800b72a <_printf_i+0x1f6>
 800b694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b698:	b004      	add	sp, #16
 800b69a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b69e:	6823      	ldr	r3, [r4, #0]
 800b6a0:	f043 0320 	orr.w	r3, r3, #32
 800b6a4:	6023      	str	r3, [r4, #0]
 800b6a6:	4833      	ldr	r0, [pc, #204]	; (800b774 <_printf_i+0x240>)
 800b6a8:	2778      	movs	r7, #120	; 0x78
 800b6aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b6ae:	6823      	ldr	r3, [r4, #0]
 800b6b0:	6829      	ldr	r1, [r5, #0]
 800b6b2:	061f      	lsls	r7, r3, #24
 800b6b4:	f851 6b04 	ldr.w	r6, [r1], #4
 800b6b8:	d402      	bmi.n	800b6c0 <_printf_i+0x18c>
 800b6ba:	065f      	lsls	r7, r3, #25
 800b6bc:	bf48      	it	mi
 800b6be:	b2b6      	uxthmi	r6, r6
 800b6c0:	07df      	lsls	r7, r3, #31
 800b6c2:	bf48      	it	mi
 800b6c4:	f043 0320 	orrmi.w	r3, r3, #32
 800b6c8:	6029      	str	r1, [r5, #0]
 800b6ca:	bf48      	it	mi
 800b6cc:	6023      	strmi	r3, [r4, #0]
 800b6ce:	b91e      	cbnz	r6, 800b6d8 <_printf_i+0x1a4>
 800b6d0:	6823      	ldr	r3, [r4, #0]
 800b6d2:	f023 0320 	bic.w	r3, r3, #32
 800b6d6:	6023      	str	r3, [r4, #0]
 800b6d8:	2310      	movs	r3, #16
 800b6da:	e7a7      	b.n	800b62c <_printf_i+0xf8>
 800b6dc:	4824      	ldr	r0, [pc, #144]	; (800b770 <_printf_i+0x23c>)
 800b6de:	e7e4      	b.n	800b6aa <_printf_i+0x176>
 800b6e0:	4615      	mov	r5, r2
 800b6e2:	e7bd      	b.n	800b660 <_printf_i+0x12c>
 800b6e4:	682b      	ldr	r3, [r5, #0]
 800b6e6:	6826      	ldr	r6, [r4, #0]
 800b6e8:	6961      	ldr	r1, [r4, #20]
 800b6ea:	1d18      	adds	r0, r3, #4
 800b6ec:	6028      	str	r0, [r5, #0]
 800b6ee:	0635      	lsls	r5, r6, #24
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	d501      	bpl.n	800b6f8 <_printf_i+0x1c4>
 800b6f4:	6019      	str	r1, [r3, #0]
 800b6f6:	e002      	b.n	800b6fe <_printf_i+0x1ca>
 800b6f8:	0670      	lsls	r0, r6, #25
 800b6fa:	d5fb      	bpl.n	800b6f4 <_printf_i+0x1c0>
 800b6fc:	8019      	strh	r1, [r3, #0]
 800b6fe:	2300      	movs	r3, #0
 800b700:	6123      	str	r3, [r4, #16]
 800b702:	4615      	mov	r5, r2
 800b704:	e7bc      	b.n	800b680 <_printf_i+0x14c>
 800b706:	682b      	ldr	r3, [r5, #0]
 800b708:	1d1a      	adds	r2, r3, #4
 800b70a:	602a      	str	r2, [r5, #0]
 800b70c:	681d      	ldr	r5, [r3, #0]
 800b70e:	6862      	ldr	r2, [r4, #4]
 800b710:	2100      	movs	r1, #0
 800b712:	4628      	mov	r0, r5
 800b714:	f7f4 fd64 	bl	80001e0 <memchr>
 800b718:	b108      	cbz	r0, 800b71e <_printf_i+0x1ea>
 800b71a:	1b40      	subs	r0, r0, r5
 800b71c:	6060      	str	r0, [r4, #4]
 800b71e:	6863      	ldr	r3, [r4, #4]
 800b720:	6123      	str	r3, [r4, #16]
 800b722:	2300      	movs	r3, #0
 800b724:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b728:	e7aa      	b.n	800b680 <_printf_i+0x14c>
 800b72a:	6923      	ldr	r3, [r4, #16]
 800b72c:	462a      	mov	r2, r5
 800b72e:	4649      	mov	r1, r9
 800b730:	4640      	mov	r0, r8
 800b732:	47d0      	blx	sl
 800b734:	3001      	adds	r0, #1
 800b736:	d0ad      	beq.n	800b694 <_printf_i+0x160>
 800b738:	6823      	ldr	r3, [r4, #0]
 800b73a:	079b      	lsls	r3, r3, #30
 800b73c:	d413      	bmi.n	800b766 <_printf_i+0x232>
 800b73e:	68e0      	ldr	r0, [r4, #12]
 800b740:	9b03      	ldr	r3, [sp, #12]
 800b742:	4298      	cmp	r0, r3
 800b744:	bfb8      	it	lt
 800b746:	4618      	movlt	r0, r3
 800b748:	e7a6      	b.n	800b698 <_printf_i+0x164>
 800b74a:	2301      	movs	r3, #1
 800b74c:	4632      	mov	r2, r6
 800b74e:	4649      	mov	r1, r9
 800b750:	4640      	mov	r0, r8
 800b752:	47d0      	blx	sl
 800b754:	3001      	adds	r0, #1
 800b756:	d09d      	beq.n	800b694 <_printf_i+0x160>
 800b758:	3501      	adds	r5, #1
 800b75a:	68e3      	ldr	r3, [r4, #12]
 800b75c:	9903      	ldr	r1, [sp, #12]
 800b75e:	1a5b      	subs	r3, r3, r1
 800b760:	42ab      	cmp	r3, r5
 800b762:	dcf2      	bgt.n	800b74a <_printf_i+0x216>
 800b764:	e7eb      	b.n	800b73e <_printf_i+0x20a>
 800b766:	2500      	movs	r5, #0
 800b768:	f104 0619 	add.w	r6, r4, #25
 800b76c:	e7f5      	b.n	800b75a <_printf_i+0x226>
 800b76e:	bf00      	nop
 800b770:	0800bcf8 	.word	0x0800bcf8
 800b774:	0800bd09 	.word	0x0800bd09

0800b778 <__swbuf_r>:
 800b778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b77a:	460e      	mov	r6, r1
 800b77c:	4614      	mov	r4, r2
 800b77e:	4605      	mov	r5, r0
 800b780:	b118      	cbz	r0, 800b78a <__swbuf_r+0x12>
 800b782:	6a03      	ldr	r3, [r0, #32]
 800b784:	b90b      	cbnz	r3, 800b78a <__swbuf_r+0x12>
 800b786:	f7ff fab3 	bl	800acf0 <__sinit>
 800b78a:	69a3      	ldr	r3, [r4, #24]
 800b78c:	60a3      	str	r3, [r4, #8]
 800b78e:	89a3      	ldrh	r3, [r4, #12]
 800b790:	071a      	lsls	r2, r3, #28
 800b792:	d525      	bpl.n	800b7e0 <__swbuf_r+0x68>
 800b794:	6923      	ldr	r3, [r4, #16]
 800b796:	b31b      	cbz	r3, 800b7e0 <__swbuf_r+0x68>
 800b798:	6823      	ldr	r3, [r4, #0]
 800b79a:	6922      	ldr	r2, [r4, #16]
 800b79c:	1a98      	subs	r0, r3, r2
 800b79e:	6963      	ldr	r3, [r4, #20]
 800b7a0:	b2f6      	uxtb	r6, r6
 800b7a2:	4283      	cmp	r3, r0
 800b7a4:	4637      	mov	r7, r6
 800b7a6:	dc04      	bgt.n	800b7b2 <__swbuf_r+0x3a>
 800b7a8:	4621      	mov	r1, r4
 800b7aa:	4628      	mov	r0, r5
 800b7ac:	f7ff fc46 	bl	800b03c <_fflush_r>
 800b7b0:	b9e0      	cbnz	r0, 800b7ec <__swbuf_r+0x74>
 800b7b2:	68a3      	ldr	r3, [r4, #8]
 800b7b4:	3b01      	subs	r3, #1
 800b7b6:	60a3      	str	r3, [r4, #8]
 800b7b8:	6823      	ldr	r3, [r4, #0]
 800b7ba:	1c5a      	adds	r2, r3, #1
 800b7bc:	6022      	str	r2, [r4, #0]
 800b7be:	701e      	strb	r6, [r3, #0]
 800b7c0:	6962      	ldr	r2, [r4, #20]
 800b7c2:	1c43      	adds	r3, r0, #1
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	d004      	beq.n	800b7d2 <__swbuf_r+0x5a>
 800b7c8:	89a3      	ldrh	r3, [r4, #12]
 800b7ca:	07db      	lsls	r3, r3, #31
 800b7cc:	d506      	bpl.n	800b7dc <__swbuf_r+0x64>
 800b7ce:	2e0a      	cmp	r6, #10
 800b7d0:	d104      	bne.n	800b7dc <__swbuf_r+0x64>
 800b7d2:	4621      	mov	r1, r4
 800b7d4:	4628      	mov	r0, r5
 800b7d6:	f7ff fc31 	bl	800b03c <_fflush_r>
 800b7da:	b938      	cbnz	r0, 800b7ec <__swbuf_r+0x74>
 800b7dc:	4638      	mov	r0, r7
 800b7de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7e0:	4621      	mov	r1, r4
 800b7e2:	4628      	mov	r0, r5
 800b7e4:	f000 f806 	bl	800b7f4 <__swsetup_r>
 800b7e8:	2800      	cmp	r0, #0
 800b7ea:	d0d5      	beq.n	800b798 <__swbuf_r+0x20>
 800b7ec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b7f0:	e7f4      	b.n	800b7dc <__swbuf_r+0x64>
	...

0800b7f4 <__swsetup_r>:
 800b7f4:	b538      	push	{r3, r4, r5, lr}
 800b7f6:	4b2a      	ldr	r3, [pc, #168]	; (800b8a0 <__swsetup_r+0xac>)
 800b7f8:	4605      	mov	r5, r0
 800b7fa:	6818      	ldr	r0, [r3, #0]
 800b7fc:	460c      	mov	r4, r1
 800b7fe:	b118      	cbz	r0, 800b808 <__swsetup_r+0x14>
 800b800:	6a03      	ldr	r3, [r0, #32]
 800b802:	b90b      	cbnz	r3, 800b808 <__swsetup_r+0x14>
 800b804:	f7ff fa74 	bl	800acf0 <__sinit>
 800b808:	89a3      	ldrh	r3, [r4, #12]
 800b80a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b80e:	0718      	lsls	r0, r3, #28
 800b810:	d422      	bmi.n	800b858 <__swsetup_r+0x64>
 800b812:	06d9      	lsls	r1, r3, #27
 800b814:	d407      	bmi.n	800b826 <__swsetup_r+0x32>
 800b816:	2309      	movs	r3, #9
 800b818:	602b      	str	r3, [r5, #0]
 800b81a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b81e:	81a3      	strh	r3, [r4, #12]
 800b820:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b824:	e034      	b.n	800b890 <__swsetup_r+0x9c>
 800b826:	0758      	lsls	r0, r3, #29
 800b828:	d512      	bpl.n	800b850 <__swsetup_r+0x5c>
 800b82a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b82c:	b141      	cbz	r1, 800b840 <__swsetup_r+0x4c>
 800b82e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b832:	4299      	cmp	r1, r3
 800b834:	d002      	beq.n	800b83c <__swsetup_r+0x48>
 800b836:	4628      	mov	r0, r5
 800b838:	f7ff fb2e 	bl	800ae98 <_free_r>
 800b83c:	2300      	movs	r3, #0
 800b83e:	6363      	str	r3, [r4, #52]	; 0x34
 800b840:	89a3      	ldrh	r3, [r4, #12]
 800b842:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b846:	81a3      	strh	r3, [r4, #12]
 800b848:	2300      	movs	r3, #0
 800b84a:	6063      	str	r3, [r4, #4]
 800b84c:	6923      	ldr	r3, [r4, #16]
 800b84e:	6023      	str	r3, [r4, #0]
 800b850:	89a3      	ldrh	r3, [r4, #12]
 800b852:	f043 0308 	orr.w	r3, r3, #8
 800b856:	81a3      	strh	r3, [r4, #12]
 800b858:	6923      	ldr	r3, [r4, #16]
 800b85a:	b94b      	cbnz	r3, 800b870 <__swsetup_r+0x7c>
 800b85c:	89a3      	ldrh	r3, [r4, #12]
 800b85e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b862:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b866:	d003      	beq.n	800b870 <__swsetup_r+0x7c>
 800b868:	4621      	mov	r1, r4
 800b86a:	4628      	mov	r0, r5
 800b86c:	f000 f840 	bl	800b8f0 <__smakebuf_r>
 800b870:	89a0      	ldrh	r0, [r4, #12]
 800b872:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b876:	f010 0301 	ands.w	r3, r0, #1
 800b87a:	d00a      	beq.n	800b892 <__swsetup_r+0x9e>
 800b87c:	2300      	movs	r3, #0
 800b87e:	60a3      	str	r3, [r4, #8]
 800b880:	6963      	ldr	r3, [r4, #20]
 800b882:	425b      	negs	r3, r3
 800b884:	61a3      	str	r3, [r4, #24]
 800b886:	6923      	ldr	r3, [r4, #16]
 800b888:	b943      	cbnz	r3, 800b89c <__swsetup_r+0xa8>
 800b88a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b88e:	d1c4      	bne.n	800b81a <__swsetup_r+0x26>
 800b890:	bd38      	pop	{r3, r4, r5, pc}
 800b892:	0781      	lsls	r1, r0, #30
 800b894:	bf58      	it	pl
 800b896:	6963      	ldrpl	r3, [r4, #20]
 800b898:	60a3      	str	r3, [r4, #8]
 800b89a:	e7f4      	b.n	800b886 <__swsetup_r+0x92>
 800b89c:	2000      	movs	r0, #0
 800b89e:	e7f7      	b.n	800b890 <__swsetup_r+0x9c>
 800b8a0:	200002cc 	.word	0x200002cc

0800b8a4 <__swhatbuf_r>:
 800b8a4:	b570      	push	{r4, r5, r6, lr}
 800b8a6:	460c      	mov	r4, r1
 800b8a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8ac:	2900      	cmp	r1, #0
 800b8ae:	b096      	sub	sp, #88	; 0x58
 800b8b0:	4615      	mov	r5, r2
 800b8b2:	461e      	mov	r6, r3
 800b8b4:	da0d      	bge.n	800b8d2 <__swhatbuf_r+0x2e>
 800b8b6:	89a3      	ldrh	r3, [r4, #12]
 800b8b8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b8bc:	f04f 0100 	mov.w	r1, #0
 800b8c0:	bf0c      	ite	eq
 800b8c2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b8c6:	2340      	movne	r3, #64	; 0x40
 800b8c8:	2000      	movs	r0, #0
 800b8ca:	6031      	str	r1, [r6, #0]
 800b8cc:	602b      	str	r3, [r5, #0]
 800b8ce:	b016      	add	sp, #88	; 0x58
 800b8d0:	bd70      	pop	{r4, r5, r6, pc}
 800b8d2:	466a      	mov	r2, sp
 800b8d4:	f000 f848 	bl	800b968 <_fstat_r>
 800b8d8:	2800      	cmp	r0, #0
 800b8da:	dbec      	blt.n	800b8b6 <__swhatbuf_r+0x12>
 800b8dc:	9901      	ldr	r1, [sp, #4]
 800b8de:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b8e2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b8e6:	4259      	negs	r1, r3
 800b8e8:	4159      	adcs	r1, r3
 800b8ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8ee:	e7eb      	b.n	800b8c8 <__swhatbuf_r+0x24>

0800b8f0 <__smakebuf_r>:
 800b8f0:	898b      	ldrh	r3, [r1, #12]
 800b8f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b8f4:	079d      	lsls	r5, r3, #30
 800b8f6:	4606      	mov	r6, r0
 800b8f8:	460c      	mov	r4, r1
 800b8fa:	d507      	bpl.n	800b90c <__smakebuf_r+0x1c>
 800b8fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b900:	6023      	str	r3, [r4, #0]
 800b902:	6123      	str	r3, [r4, #16]
 800b904:	2301      	movs	r3, #1
 800b906:	6163      	str	r3, [r4, #20]
 800b908:	b002      	add	sp, #8
 800b90a:	bd70      	pop	{r4, r5, r6, pc}
 800b90c:	ab01      	add	r3, sp, #4
 800b90e:	466a      	mov	r2, sp
 800b910:	f7ff ffc8 	bl	800b8a4 <__swhatbuf_r>
 800b914:	9900      	ldr	r1, [sp, #0]
 800b916:	4605      	mov	r5, r0
 800b918:	4630      	mov	r0, r6
 800b91a:	f7ff f8a3 	bl	800aa64 <_malloc_r>
 800b91e:	b948      	cbnz	r0, 800b934 <__smakebuf_r+0x44>
 800b920:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b924:	059a      	lsls	r2, r3, #22
 800b926:	d4ef      	bmi.n	800b908 <__smakebuf_r+0x18>
 800b928:	f023 0303 	bic.w	r3, r3, #3
 800b92c:	f043 0302 	orr.w	r3, r3, #2
 800b930:	81a3      	strh	r3, [r4, #12]
 800b932:	e7e3      	b.n	800b8fc <__smakebuf_r+0xc>
 800b934:	89a3      	ldrh	r3, [r4, #12]
 800b936:	6020      	str	r0, [r4, #0]
 800b938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b93c:	81a3      	strh	r3, [r4, #12]
 800b93e:	9b00      	ldr	r3, [sp, #0]
 800b940:	6163      	str	r3, [r4, #20]
 800b942:	9b01      	ldr	r3, [sp, #4]
 800b944:	6120      	str	r0, [r4, #16]
 800b946:	b15b      	cbz	r3, 800b960 <__smakebuf_r+0x70>
 800b948:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b94c:	4630      	mov	r0, r6
 800b94e:	f000 f81d 	bl	800b98c <_isatty_r>
 800b952:	b128      	cbz	r0, 800b960 <__smakebuf_r+0x70>
 800b954:	89a3      	ldrh	r3, [r4, #12]
 800b956:	f023 0303 	bic.w	r3, r3, #3
 800b95a:	f043 0301 	orr.w	r3, r3, #1
 800b95e:	81a3      	strh	r3, [r4, #12]
 800b960:	89a3      	ldrh	r3, [r4, #12]
 800b962:	431d      	orrs	r5, r3
 800b964:	81a5      	strh	r5, [r4, #12]
 800b966:	e7cf      	b.n	800b908 <__smakebuf_r+0x18>

0800b968 <_fstat_r>:
 800b968:	b538      	push	{r3, r4, r5, lr}
 800b96a:	4d07      	ldr	r5, [pc, #28]	; (800b988 <_fstat_r+0x20>)
 800b96c:	2300      	movs	r3, #0
 800b96e:	4604      	mov	r4, r0
 800b970:	4608      	mov	r0, r1
 800b972:	4611      	mov	r1, r2
 800b974:	602b      	str	r3, [r5, #0]
 800b976:	f7fe fde2 	bl	800a53e <_fstat>
 800b97a:	1c43      	adds	r3, r0, #1
 800b97c:	d102      	bne.n	800b984 <_fstat_r+0x1c>
 800b97e:	682b      	ldr	r3, [r5, #0]
 800b980:	b103      	cbz	r3, 800b984 <_fstat_r+0x1c>
 800b982:	6023      	str	r3, [r4, #0]
 800b984:	bd38      	pop	{r3, r4, r5, pc}
 800b986:	bf00      	nop
 800b988:	20004050 	.word	0x20004050

0800b98c <_isatty_r>:
 800b98c:	b538      	push	{r3, r4, r5, lr}
 800b98e:	4d06      	ldr	r5, [pc, #24]	; (800b9a8 <_isatty_r+0x1c>)
 800b990:	2300      	movs	r3, #0
 800b992:	4604      	mov	r4, r0
 800b994:	4608      	mov	r0, r1
 800b996:	602b      	str	r3, [r5, #0]
 800b998:	f7fe fde1 	bl	800a55e <_isatty>
 800b99c:	1c43      	adds	r3, r0, #1
 800b99e:	d102      	bne.n	800b9a6 <_isatty_r+0x1a>
 800b9a0:	682b      	ldr	r3, [r5, #0]
 800b9a2:	b103      	cbz	r3, 800b9a6 <_isatty_r+0x1a>
 800b9a4:	6023      	str	r3, [r4, #0]
 800b9a6:	bd38      	pop	{r3, r4, r5, pc}
 800b9a8:	20004050 	.word	0x20004050

0800b9ac <_raise_r>:
 800b9ac:	291f      	cmp	r1, #31
 800b9ae:	b538      	push	{r3, r4, r5, lr}
 800b9b0:	4604      	mov	r4, r0
 800b9b2:	460d      	mov	r5, r1
 800b9b4:	d904      	bls.n	800b9c0 <_raise_r+0x14>
 800b9b6:	2316      	movs	r3, #22
 800b9b8:	6003      	str	r3, [r0, #0]
 800b9ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b9be:	bd38      	pop	{r3, r4, r5, pc}
 800b9c0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b9c2:	b112      	cbz	r2, 800b9ca <_raise_r+0x1e>
 800b9c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b9c8:	b94b      	cbnz	r3, 800b9de <_raise_r+0x32>
 800b9ca:	4620      	mov	r0, r4
 800b9cc:	f000 f830 	bl	800ba30 <_getpid_r>
 800b9d0:	462a      	mov	r2, r5
 800b9d2:	4601      	mov	r1, r0
 800b9d4:	4620      	mov	r0, r4
 800b9d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9da:	f000 b817 	b.w	800ba0c <_kill_r>
 800b9de:	2b01      	cmp	r3, #1
 800b9e0:	d00a      	beq.n	800b9f8 <_raise_r+0x4c>
 800b9e2:	1c59      	adds	r1, r3, #1
 800b9e4:	d103      	bne.n	800b9ee <_raise_r+0x42>
 800b9e6:	2316      	movs	r3, #22
 800b9e8:	6003      	str	r3, [r0, #0]
 800b9ea:	2001      	movs	r0, #1
 800b9ec:	e7e7      	b.n	800b9be <_raise_r+0x12>
 800b9ee:	2400      	movs	r4, #0
 800b9f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b9f4:	4628      	mov	r0, r5
 800b9f6:	4798      	blx	r3
 800b9f8:	2000      	movs	r0, #0
 800b9fa:	e7e0      	b.n	800b9be <_raise_r+0x12>

0800b9fc <raise>:
 800b9fc:	4b02      	ldr	r3, [pc, #8]	; (800ba08 <raise+0xc>)
 800b9fe:	4601      	mov	r1, r0
 800ba00:	6818      	ldr	r0, [r3, #0]
 800ba02:	f7ff bfd3 	b.w	800b9ac <_raise_r>
 800ba06:	bf00      	nop
 800ba08:	200002cc 	.word	0x200002cc

0800ba0c <_kill_r>:
 800ba0c:	b538      	push	{r3, r4, r5, lr}
 800ba0e:	4d07      	ldr	r5, [pc, #28]	; (800ba2c <_kill_r+0x20>)
 800ba10:	2300      	movs	r3, #0
 800ba12:	4604      	mov	r4, r0
 800ba14:	4608      	mov	r0, r1
 800ba16:	4611      	mov	r1, r2
 800ba18:	602b      	str	r3, [r5, #0]
 800ba1a:	f7fe fd31 	bl	800a480 <_kill>
 800ba1e:	1c43      	adds	r3, r0, #1
 800ba20:	d102      	bne.n	800ba28 <_kill_r+0x1c>
 800ba22:	682b      	ldr	r3, [r5, #0]
 800ba24:	b103      	cbz	r3, 800ba28 <_kill_r+0x1c>
 800ba26:	6023      	str	r3, [r4, #0]
 800ba28:	bd38      	pop	{r3, r4, r5, pc}
 800ba2a:	bf00      	nop
 800ba2c:	20004050 	.word	0x20004050

0800ba30 <_getpid_r>:
 800ba30:	f7fe bd1e 	b.w	800a470 <_getpid>

0800ba34 <_gettimeofday>:
 800ba34:	4b02      	ldr	r3, [pc, #8]	; (800ba40 <_gettimeofday+0xc>)
 800ba36:	2258      	movs	r2, #88	; 0x58
 800ba38:	601a      	str	r2, [r3, #0]
 800ba3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba3e:	4770      	bx	lr
 800ba40:	20004050 	.word	0x20004050

0800ba44 <_init>:
 800ba44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba46:	bf00      	nop
 800ba48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba4a:	bc08      	pop	{r3}
 800ba4c:	469e      	mov	lr, r3
 800ba4e:	4770      	bx	lr

0800ba50 <_fini>:
 800ba50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba52:	bf00      	nop
 800ba54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba56:	bc08      	pop	{r3}
 800ba58:	469e      	mov	lr, r3
 800ba5a:	4770      	bx	lr
