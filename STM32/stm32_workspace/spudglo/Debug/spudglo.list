
spudglo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c504  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  0800c694  0800c694  0001c694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca5c  0800ca5c  00020414  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca5c  0800ca5c  0001ca5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca64  0800ca64  00020414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca64  0800ca64  0001ca64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca68  0800ca68  0001ca68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000414  20000000  0800ca6c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005d04  20000418  0800ce80  00020418  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000611c  0800ce80  0002611c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020414  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020444  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029a9a  00000000  00000000  00020487  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006749  00000000  00000000  00049f21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002330  00000000  00000000  00050670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001b5d  00000000  00000000  000529a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bab7  00000000  00000000  000544fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002fbf8  00000000  00000000  0007ffb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f9e6a  00000000  00000000  000afbac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009b50  00000000  00000000  001a9a18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  001b3568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000418 	.word	0x20000418
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c67c 	.word	0x0800c67c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000041c 	.word	0x2000041c
 80001cc:	0800c67c 	.word	0x0800c67c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <current_monitor_set>:
float g_absolute_max_current_ratio = 0.0f; // DO NOT EXCEED!
p_current_t gp_current_monitor_strip[NUM_STRIPS];


void current_monitor_set(float value)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value < g_absolute_max_current_ratio)
 8000586:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <current_monitor_set+0x3c>)
 8000588:	edd3 7a00 	vldr	s15, [r3]
 800058c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000590:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000598:	d503      	bpl.n	80005a2 <current_monitor_set+0x26>
    {
        g_max_current_ratio = value;
 800059a:	4a08      	ldr	r2, [pc, #32]	; (80005bc <current_monitor_set+0x40>)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	6013      	str	r3, [r2, #0]
    }
    else
    {
        g_max_current_ratio = g_absolute_max_current_ratio;
    }
}
 80005a0:	e003      	b.n	80005aa <current_monitor_set+0x2e>
        g_max_current_ratio = g_absolute_max_current_ratio;
 80005a2:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <current_monitor_set+0x3c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a05      	ldr	r2, [pc, #20]	; (80005bc <current_monitor_set+0x40>)
 80005a8:	6013      	str	r3, [r2, #0]
}
 80005aa:	bf00      	nop
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000434 	.word	0x20000434
 80005bc:	20000000 	.word	0x20000000

080005c0 <current_monitor_init>:
    return g_max_current_ratio;
}


void current_monitor_init(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
    while ((g_max_current_ratio * ((float)CURRENT_MONITOR_MAX_CURRENT_PER_LED_MA / 1000) * NUM_LEDS) > (float)CURRENT_MONITOR_MAX_CURRENT_DRAW_A)
 80005c4:	e009      	b.n	80005da <current_monitor_init+0x1a>
    {
        g_max_current_ratio -= 0.05f;
 80005c6:	4b17      	ldr	r3, [pc, #92]	; (8000624 <current_monitor_init+0x64>)
 80005c8:	edd3 7a00 	vldr	s15, [r3]
 80005cc:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000628 <current_monitor_init+0x68>
 80005d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80005d4:	4b13      	ldr	r3, [pc, #76]	; (8000624 <current_monitor_init+0x64>)
 80005d6:	edc3 7a00 	vstr	s15, [r3]
    while ((g_max_current_ratio * ((float)CURRENT_MONITOR_MAX_CURRENT_PER_LED_MA / 1000) * NUM_LEDS) > (float)CURRENT_MONITOR_MAX_CURRENT_DRAW_A)
 80005da:	4b12      	ldr	r3, [pc, #72]	; (8000624 <current_monitor_init+0x64>)
 80005dc:	edd3 7a00 	vldr	s15, [r3]
 80005e0:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800062c <current_monitor_init+0x6c>
 80005e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005e8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000630 <current_monitor_init+0x70>
 80005ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005f0:	eeb2 7a03 	vmov.f32	s14, #35	; 0x41180000  9.5
 80005f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005fc:	dce3      	bgt.n	80005c6 <current_monitor_init+0x6>
    }
    if (g_max_current_ratio <= 0) while(1); // broken..
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <current_monitor_init+0x64>)
 8000600:	edd3 7a00 	vldr	s15, [r3]
 8000604:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800060c:	d800      	bhi.n	8000610 <current_monitor_init+0x50>
 800060e:	e7fe      	b.n	800060e <current_monitor_init+0x4e>
    g_absolute_max_current_ratio = g_max_current_ratio;
 8000610:	4b04      	ldr	r3, [pc, #16]	; (8000624 <current_monitor_init+0x64>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a07      	ldr	r2, [pc, #28]	; (8000634 <current_monitor_init+0x74>)
 8000616:	6013      	str	r3, [r2, #0]
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	20000000 	.word	0x20000000
 8000628:	3d4ccccd 	.word	0x3d4ccccd
 800062c:	3d23d70a 	.word	0x3d23d70a
 8000630:	441f0000 	.word	0x441f0000
 8000634:	20000434 	.word	0x20000434

08000638 <animate_led_show_strip>:
 * @brief   Write data stored in `gp_ws28128b_strip` array to the strip
 * @param   strip_mask - the strip to write to
 * @return  void
 */
void animate_led_show_strip(const strip_mask_t strip_mask)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	80fb      	strh	r3, [r7, #6]
    if (strip_mask & STRIP_BIT_1)
 8000642:	88fb      	ldrh	r3, [r7, #6]
 8000644:	f003 0301 	and.w	r3, r3, #1
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <animate_led_show_strip+0x18>
    {
        ws2812b_show_strip_one();
 800064c:	f000 fac0 	bl	8000bd0 <ws2812b_show_strip_one>
    {
        // STRIP_BIT_3
        ws2812b_show_strip_three();
    }
#endif
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <animate_led_set_all_pixels>:
    //animate_led_show_strip(mask);
}


void animate_led_set_all_pixels(const strip_mask_t mask, const uint8_t red, const uint8_t green, const uint8_t blue)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b089      	sub	sp, #36	; 0x24
 800065c:	af02      	add	r7, sp, #8
 800065e:	4604      	mov	r4, r0
 8000660:	4608      	mov	r0, r1
 8000662:	4611      	mov	r1, r2
 8000664:	461a      	mov	r2, r3
 8000666:	4623      	mov	r3, r4
 8000668:	80fb      	strh	r3, [r7, #6]
 800066a:	4603      	mov	r3, r0
 800066c:	717b      	strb	r3, [r7, #5]
 800066e:	460b      	mov	r3, r1
 8000670:	713b      	strb	r3, [r7, #4]
 8000672:	4613      	mov	r3, r2
 8000674:	70fb      	strb	r3, [r7, #3]
    uint16_t strip_size = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	81fb      	strh	r3, [r7, #14]
    if (mask == g_all_strip_mask)
 800067a:	4b2b      	ldr	r3, [pc, #172]	; (8000728 <animate_led_set_all_pixels+0xd0>)
 800067c:	881b      	ldrh	r3, [r3, #0]
 800067e:	88fa      	ldrh	r2, [r7, #6]
 8000680:	429a      	cmp	r2, r3
 8000682:	d122      	bne.n	80006ca <animate_led_set_all_pixels+0x72>
    {
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 8000684:	2301      	movs	r3, #1
 8000686:	75fb      	strb	r3, [r7, #23]
 8000688:	e01b      	b.n	80006c2 <animate_led_set_all_pixels+0x6a>
        {
            strip_size = ws2812_get_strip_size(strip_bit);
 800068a:	7dfb      	ldrb	r3, [r7, #23]
 800068c:	4618      	mov	r0, r3
 800068e:	f000 f8f5 	bl	800087c <ws2812_get_strip_size>
 8000692:	4603      	mov	r3, r0
 8000694:	81fb      	strh	r3, [r7, #14]
            //offset = animate_led_get_strip_offset(strip_bit);
            for (uint16_t iii = 0; iii < strip_size; iii++) ws2812b_set_led(strip_bit, iii, red, green, blue);
 8000696:	2300      	movs	r3, #0
 8000698:	82bb      	strh	r3, [r7, #20]
 800069a:	e00b      	b.n	80006b4 <animate_led_set_all_pixels+0x5c>
 800069c:	793c      	ldrb	r4, [r7, #4]
 800069e:	797a      	ldrb	r2, [r7, #5]
 80006a0:	8ab9      	ldrh	r1, [r7, #20]
 80006a2:	7df8      	ldrb	r0, [r7, #23]
 80006a4:	78fb      	ldrb	r3, [r7, #3]
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	4623      	mov	r3, r4
 80006aa:	f000 f909 	bl	80008c0 <ws2812b_set_led>
 80006ae:	8abb      	ldrh	r3, [r7, #20]
 80006b0:	3301      	adds	r3, #1
 80006b2:	82bb      	strh	r3, [r7, #20]
 80006b4:	8aba      	ldrh	r2, [r7, #20]
 80006b6:	89fb      	ldrh	r3, [r7, #14]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d3ef      	bcc.n	800069c <animate_led_set_all_pixels+0x44>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 80006bc:	7dfb      	ldrb	r3, [r7, #23]
 80006be:	3301      	adds	r3, #1
 80006c0:	75fb      	strb	r3, [r7, #23]
 80006c2:	7dfb      	ldrb	r3, [r7, #23]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d9e0      	bls.n	800068a <animate_led_set_all_pixels+0x32>
 80006c8:	e026      	b.n	8000718 <animate_led_set_all_pixels+0xc0>
        }
    }
    else
    {
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 80006ca:	2301      	movs	r3, #1
 80006cc:	74fb      	strb	r3, [r7, #19]
 80006ce:	e020      	b.n	8000712 <animate_led_set_all_pixels+0xba>
        {
            if (mask & strip_bit)
 80006d0:	88fa      	ldrh	r2, [r7, #6]
 80006d2:	7cfb      	ldrb	r3, [r7, #19]
 80006d4:	4013      	ands	r3, r2
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d018      	beq.n	800070c <animate_led_set_all_pixels+0xb4>
            {
                strip_size = ws2812_get_strip_size(strip_bit);
 80006da:	7cfb      	ldrb	r3, [r7, #19]
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 f8cd 	bl	800087c <ws2812_get_strip_size>
 80006e2:	4603      	mov	r3, r0
 80006e4:	81fb      	strh	r3, [r7, #14]
                for (uint16_t yyy = 0; yyy < strip_size; yyy++) ws2812b_set_led(strip_bit, yyy, red, green, blue);
 80006e6:	2300      	movs	r3, #0
 80006e8:	823b      	strh	r3, [r7, #16]
 80006ea:	e00b      	b.n	8000704 <animate_led_set_all_pixels+0xac>
 80006ec:	793c      	ldrb	r4, [r7, #4]
 80006ee:	797a      	ldrb	r2, [r7, #5]
 80006f0:	8a39      	ldrh	r1, [r7, #16]
 80006f2:	7cf8      	ldrb	r0, [r7, #19]
 80006f4:	78fb      	ldrb	r3, [r7, #3]
 80006f6:	9300      	str	r3, [sp, #0]
 80006f8:	4623      	mov	r3, r4
 80006fa:	f000 f8e1 	bl	80008c0 <ws2812b_set_led>
 80006fe:	8a3b      	ldrh	r3, [r7, #16]
 8000700:	3301      	adds	r3, #1
 8000702:	823b      	strh	r3, [r7, #16]
 8000704:	8a3a      	ldrh	r2, [r7, #16]
 8000706:	89fb      	ldrh	r3, [r7, #14]
 8000708:	429a      	cmp	r2, r3
 800070a:	d3ef      	bcc.n	80006ec <animate_led_set_all_pixels+0x94>
        for (strip_bit_e strip_bit = STRIP_BIT_1; strip_bit <= STRIP_BIT_NUM_STRIPS; strip_bit = (strip_bit_e)(strip_bit + 1))
 800070c:	7cfb      	ldrb	r3, [r7, #19]
 800070e:	3301      	adds	r3, #1
 8000710:	74fb      	strb	r3, [r7, #19]
 8000712:	7cfb      	ldrb	r3, [r7, #19]
 8000714:	2b01      	cmp	r3, #1
 8000716:	d9db      	bls.n	80006d0 <animate_led_set_all_pixels+0x78>
            }
        }
    }
    animate_led_show_strip(mask);
 8000718:	88fb      	ldrh	r3, [r7, #6]
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ff8c 	bl	8000638 <animate_led_show_strip>
}
 8000720:	bf00      	nop
 8000722:	371c      	adds	r7, #28
 8000724:	46bd      	mov	sp, r7
 8000726:	bd90      	pop	{r4, r7, pc}
 8000728:	20000bae 	.word	0x20000bae

0800072c <animate_led_solid_custom_color>:
	}
}


void animate_led_solid_custom_color(const strip_mask_t mask_solid, const color_hex_code_e color_solid)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	6039      	str	r1, [r7, #0]
 8000736:	80fb      	strh	r3, [r7, #6]
    uint8_t color_solid_rgb[sizeof(ws2812b_led_t)] = {0};
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <animate_led_solid_custom_color+0x40>)
 800073a:	881b      	ldrh	r3, [r3, #0]
 800073c:	81bb      	strh	r3, [r7, #12]
 800073e:	2300      	movs	r3, #0
 8000740:	73bb      	strb	r3, [r7, #14]
    color_led_hex_to_rgb(color_solid, color_solid_rgb);
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	4619      	mov	r1, r3
 8000748:	6838      	ldr	r0, [r7, #0]
 800074a:	f000 f811 	bl	8000770 <color_led_hex_to_rgb>
    animate_led_set_all_pixels(mask_solid, color_solid_rgb[offsetof(ws2812b_led_t, red)],
 800074e:	7b39      	ldrb	r1, [r7, #12]
 8000750:	7b7a      	ldrb	r2, [r7, #13]
 8000752:	7bbb      	ldrb	r3, [r7, #14]
 8000754:	88f8      	ldrh	r0, [r7, #6]
 8000756:	f7ff ff7f 	bl	8000658 <animate_led_set_all_pixels>
                               color_solid_rgb[offsetof(ws2812b_led_t, green)],
                               color_solid_rgb[offsetof(ws2812b_led_t, blue)]);
    animate_led_show_strip(mask_solid);
 800075a:	88fb      	ldrh	r3, [r7, #6]
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff ff6b 	bl	8000638 <animate_led_show_strip>
}
 8000762:	bf00      	nop
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	0800c694 	.word	0x0800c694

08000770 <color_led_hex_to_rgb>:
    [COLORS_BROWN] = COLOR_HEX_BROWN
};


void color_led_hex_to_rgb(const color_hex_code_e color, uint8_t *color_array)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
    color_array[offsetof(ws2812b_led_t, red)] = ((color & 0xFF0000) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, red))));
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	0c1b      	lsrs	r3, r3, #16
 800077e:	b2da      	uxtb	r2, r3
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	701a      	strb	r2, [r3, #0]
    color_array[offsetof(ws2812b_led_t, green)] = ((color & 0x00FF00) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, green))));
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	0a1a      	lsrs	r2, r3, #8
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	3301      	adds	r3, #1
 800078c:	b2d2      	uxtb	r2, r2
 800078e:	701a      	strb	r2, [r3, #0]
    color_array[offsetof(ws2812b_led_t, blue)] = ((color & 0x0000FF) >> (BITS_PER_BYTE * (2 - offsetof(ws2812b_led_t, blue))));
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	3302      	adds	r3, #2
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	b2d2      	uxtb	r2, r2
 8000798:	701a      	strb	r2, [r3, #0]
}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
	...

080007a8 <reset_ws2812b>:

extern volatile int datasentflag;

uint16_t pwm_reset[50] = {0};
void reset_ws2812b(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
    //xSemaphoreTake(g_dma_transfer_semaphore, portMAX_DELAY);
    //xTaskNotify(g_dma_transfer_handle, 0, eSetValueWithOverwrite);
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_1, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 80007ac:	2364      	movs	r3, #100	; 0x64
 80007ae:	4a09      	ldr	r2, [pc, #36]	; (80007d4 <reset_ws2812b+0x2c>)
 80007b0:	2100      	movs	r1, #0
 80007b2:	4809      	ldr	r0, [pc, #36]	; (80007d8 <reset_ws2812b+0x30>)
 80007b4:	f006 fc5a 	bl	800706c <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_2, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 80007b8:	2364      	movs	r3, #100	; 0x64
 80007ba:	4a06      	ldr	r2, [pc, #24]	; (80007d4 <reset_ws2812b+0x2c>)
 80007bc:	2104      	movs	r1, #4
 80007be:	4806      	ldr	r0, [pc, #24]	; (80007d8 <reset_ws2812b+0x30>)
 80007c0:	f006 fc54 	bl	800706c <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_3, (uint32_t *)pwm_reset, sizeof(pwm_reset));
 80007c4:	2364      	movs	r3, #100	; 0x64
 80007c6:	4a03      	ldr	r2, [pc, #12]	; (80007d4 <reset_ws2812b+0x2c>)
 80007c8:	2108      	movs	r1, #8
 80007ca:	4803      	ldr	r0, [pc, #12]	; (80007d8 <reset_ws2812b+0x30>)
 80007cc:	f006 fc4e 	bl	800706c <HAL_TIM_PWM_Start_DMA>
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000bbc 	.word	0x20000bbc
 80007d8:	20003e80 	.word	0x20003e80

080007dc <ws2812_convert_strip_num_to_strip_bit>:

static strip_bit_e ws2812_convert_strip_num_to_strip_bit(const strip_num_e strip_num)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
	return (strip_bit_e)(strip_num + 1);
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	3301      	adds	r3, #1
 80007ea:	b2db      	uxtb	r3, r3
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <ws2812_convert_strip_bit_to_strip_num>:


static strip_num_e ws2812_convert_strip_bit_to_strip_num(const strip_bit_e strip_bit)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	71fb      	strb	r3, [r7, #7]
	return (strip_num_e)(strip_bit - 1);
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	3b01      	subs	r3, #1
 8000806:	b2db      	uxtb	r3, r3
}
 8000808:	4618      	mov	r0, r3
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <ws2812_get_pwm_strip_offset>:


uint16_t ws2812_get_pwm_strip_offset(const strip_bit_e strip_bit)
{
 8000814:	b480      	push	{r7}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
    uint16_t offset = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	81fb      	strh	r3, [r7, #14]
    uint8_t strip_num = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	737b      	strb	r3, [r7, #13]
    switch (strip_bit)
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d104      	bne.n	8000836 <ws2812_get_pwm_strip_offset+0x22>
    {
#if defined(STRIP_1_LENGTH)
        case STRIP_BIT_1:
            offset = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	81fb      	strh	r3, [r7, #14]
            strip_num = 1;
 8000830:	2301      	movs	r3, #1
 8000832:	737b      	strb	r3, [r7, #13]
        break;
 8000834:	e000      	b.n	8000838 <ws2812_get_pwm_strip_offset+0x24>
        case STRIP_BIT_5:
            offset = STRIP_1_LENGTH + STRIP_2_LENGTH + STRIP_3_LENGTH + STRIP_4_LENGTH;
        break;
#endif
        default:
        break;
 8000836:	bf00      	nop
    }
    return ((offset * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + (strip_num * WS2812B_RESET_TIME_CYCLES));
 8000838:	89fa      	ldrh	r2, [r7, #14]
 800083a:	4613      	mov	r3, r2
 800083c:	005b      	lsls	r3, r3, #1
 800083e:	4413      	add	r3, r2
 8000840:	00db      	lsls	r3, r3, #3
 8000842:	ee07 3a90 	vmov	s15, r3
 8000846:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800084a:	7b7b      	ldrb	r3, [r7, #13]
 800084c:	ee07 3a90 	vmov	s15, r3
 8000850:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000854:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000878 <ws2812_get_pwm_strip_offset+0x64>
 8000858:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800085c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000860:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000864:	ee17 3a90 	vmov	r3, s15
 8000868:	b29b      	uxth	r3, r3
}
 800086a:	4618      	mov	r0, r3
 800086c:	3714      	adds	r7, #20
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	453b8000 	.word	0x453b8000

0800087c <ws2812_get_strip_size>:


uint16_t ws2812_get_strip_size(const strip_bit_e strip_bit)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	71fb      	strb	r3, [r7, #7]
	uint16_t strip_size = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	81fb      	strh	r3, [r7, #14]
	if (STRIP_BIT_ALL_SET == strip_bit) strip_size = g_max_strip_length;
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d103      	bne.n	8000898 <ws2812_get_strip_size+0x1c>
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <ws2812_get_strip_size+0x3c>)
 8000892:	881b      	ldrh	r3, [r3, #0]
 8000894:	81fb      	strh	r3, [r7, #14]
 8000896:	e009      	b.n	80008ac <ws2812_get_strip_size+0x30>
	else strip_size = strip_length[ws2812_convert_strip_num_to_strip_bit(strip_bit)];
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff ff9e 	bl	80007dc <ws2812_convert_strip_num_to_strip_bit>
 80008a0:	4603      	mov	r3, r0
 80008a2:	461a      	mov	r2, r3
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <ws2812_get_strip_size+0x40>)
 80008a6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80008aa:	81fb      	strh	r3, [r7, #14]
	return strip_size;
 80008ac:	89fb      	ldrh	r3, [r7, #14]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000bb0 	.word	0x20000bb0
 80008bc:	20000004 	.word	0x20000004

080008c0 <ws2812b_set_led>:
}


void ws2812b_set_led(const strip_bit_e strip_bit, const uint16_t led_num, const color_t red, const color_t green,
                     const color_t blue)
{
 80008c0:	b590      	push	{r4, r7, lr}
 80008c2:	b087      	sub	sp, #28
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4604      	mov	r4, r0
 80008c8:	4608      	mov	r0, r1
 80008ca:	4611      	mov	r1, r2
 80008cc:	461a      	mov	r2, r3
 80008ce:	4623      	mov	r3, r4
 80008d0:	73fb      	strb	r3, [r7, #15]
 80008d2:	4603      	mov	r3, r0
 80008d4:	81bb      	strh	r3, [r7, #12]
 80008d6:	460b      	mov	r3, r1
 80008d8:	73bb      	strb	r3, [r7, #14]
 80008da:	4613      	mov	r3, r2
 80008dc:	72fb      	strb	r3, [r7, #11]
	strip_num_e strip_num = ws2812_convert_strip_bit_to_strip_num(strip_bit);
 80008de:	7bfb      	ldrb	r3, [r7, #15]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff ff89 	bl	80007f8 <ws2812_convert_strip_bit_to_strip_num>
 80008e6:	4603      	mov	r3, r0
 80008e8:	75fb      	strb	r3, [r7, #23]
    (gp_ws28128b_strip[strip_num] + led_num)->red = red * g_max_current_ratio;
 80008ea:	7bbb      	ldrb	r3, [r7, #14]
 80008ec:	ee07 3a90 	vmov	s15, r3
 80008f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008f4:	4b26      	ldr	r3, [pc, #152]	; (8000990 <ws2812b_set_led+0xd0>)
 80008f6:	edd3 7a00 	vldr	s15, [r3]
 80008fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008fe:	7dfb      	ldrb	r3, [r7, #23]
 8000900:	4a24      	ldr	r2, [pc, #144]	; (8000994 <ws2812b_set_led+0xd4>)
 8000902:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000906:	89ba      	ldrh	r2, [r7, #12]
 8000908:	4613      	mov	r3, r2
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	4413      	add	r3, r2
 800090e:	440b      	add	r3, r1
 8000910:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000914:	edc7 7a01 	vstr	s15, [r7, #4]
 8000918:	793a      	ldrb	r2, [r7, #4]
 800091a:	b2d2      	uxtb	r2, r2
 800091c:	701a      	strb	r2, [r3, #0]
    (gp_ws28128b_strip[strip_num] + led_num)->green = green * g_max_current_ratio;
 800091e:	7afb      	ldrb	r3, [r7, #11]
 8000920:	ee07 3a90 	vmov	s15, r3
 8000924:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000928:	4b19      	ldr	r3, [pc, #100]	; (8000990 <ws2812b_set_led+0xd0>)
 800092a:	edd3 7a00 	vldr	s15, [r3]
 800092e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000932:	7dfb      	ldrb	r3, [r7, #23]
 8000934:	4a17      	ldr	r2, [pc, #92]	; (8000994 <ws2812b_set_led+0xd4>)
 8000936:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800093a:	89ba      	ldrh	r2, [r7, #12]
 800093c:	4613      	mov	r3, r2
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	4413      	add	r3, r2
 8000942:	440b      	add	r3, r1
 8000944:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000948:	edc7 7a01 	vstr	s15, [r7, #4]
 800094c:	793a      	ldrb	r2, [r7, #4]
 800094e:	b2d2      	uxtb	r2, r2
 8000950:	705a      	strb	r2, [r3, #1]
    (gp_ws28128b_strip[strip_num] + led_num)->blue = blue * g_max_current_ratio;
 8000952:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000956:	ee07 3a90 	vmov	s15, r3
 800095a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800095e:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <ws2812b_set_led+0xd0>)
 8000960:	edd3 7a00 	vldr	s15, [r3]
 8000964:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000968:	7dfb      	ldrb	r3, [r7, #23]
 800096a:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <ws2812b_set_led+0xd4>)
 800096c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000970:	89ba      	ldrh	r2, [r7, #12]
 8000972:	4613      	mov	r3, r2
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	4413      	add	r3, r2
 8000978:	440b      	add	r3, r1
 800097a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800097e:	edc7 7a01 	vstr	s15, [r7, #4]
 8000982:	793a      	ldrb	r2, [r7, #4]
 8000984:	b2d2      	uxtb	r2, r2
 8000986:	709a      	strb	r2, [r3, #2]
}
 8000988:	bf00      	nop
 800098a:	371c      	adds	r7, #28
 800098c:	46bd      	mov	sp, r7
 800098e:	bd90      	pop	{r4, r7, pc}
 8000990:	20000000 	.word	0x20000000
 8000994:	20000bb8 	.word	0x20000bb8

08000998 <ws2812b_fill_pwm_buffer_strip_one>:



#if defined(STRIP_1_LENGTH)
void ws2812b_fill_pwm_buffer_strip_one(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0
    uint32_t color = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
    uint32_t strip_size = STRIP_1_LENGTH;
 80009a2:	f44f 731f 	mov.w	r3, #636	; 0x27c
 80009a6:	60bb      	str	r3, [r7, #8]
    uint32_t strip_pwm_offset = ws2812_get_pwm_strip_offset(STRIP_BIT_1);
 80009a8:	2001      	movs	r0, #1
 80009aa:	f7ff ff33 	bl	8000814 <ws2812_get_pwm_strip_offset>
 80009ae:	4603      	mov	r3, r0
 80009b0:	607b      	str	r3, [r7, #4]
    while (!gb_dma_cmplt_strip_2)
 80009b2:	e002      	b.n	80009ba <ws2812b_fill_pwm_buffer_strip_one+0x22>
    {
        osDelay(1);
 80009b4:	2001      	movs	r0, #1
 80009b6:	f001 f831 	bl	8001a1c <osDelay>
    while (!gb_dma_cmplt_strip_2)
 80009ba:	4b44      	ldr	r3, [pc, #272]	; (8000acc <ws2812b_fill_pwm_buffer_strip_one+0x134>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	f083 0301 	eor.w	r3, r3, #1
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d1f5      	bne.n	80009b4 <ws2812b_fill_pwm_buffer_strip_one+0x1c>
    }
    for (uint16_t iii = 0; iii < strip_size; iii++)
 80009c8:	2300      	movs	r3, #0
 80009ca:	82fb      	strh	r3, [r7, #22]
 80009cc:	e046      	b.n	8000a5c <ws2812b_fill_pwm_buffer_strip_one+0xc4>
    {
        color = (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->green) << 16) | \
 80009ce:	4b40      	ldr	r3, [pc, #256]	; (8000ad0 <ws2812b_fill_pwm_buffer_strip_one+0x138>)
 80009d0:	6819      	ldr	r1, [r3, #0]
 80009d2:	8afa      	ldrh	r2, [r7, #22]
 80009d4:	4613      	mov	r3, r2
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	4413      	add	r3, r2
 80009da:	440b      	add	r3, r1
 80009dc:	785b      	ldrb	r3, [r3, #1]
 80009de:	0419      	lsls	r1, r3, #16
                                (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->red) << 8) | \
 80009e0:	4b3b      	ldr	r3, [pc, #236]	; (8000ad0 <ws2812b_fill_pwm_buffer_strip_one+0x138>)
 80009e2:	6818      	ldr	r0, [r3, #0]
 80009e4:	8afa      	ldrh	r2, [r7, #22]
 80009e6:	4613      	mov	r3, r2
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	4413      	add	r3, r2
 80009ec:	4403      	add	r3, r0
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	021b      	lsls	r3, r3, #8
        color = (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->green) << 16) | \
 80009f2:	4319      	orrs	r1, r3
                                (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->blue));
 80009f4:	4b36      	ldr	r3, [pc, #216]	; (8000ad0 <ws2812b_fill_pwm_buffer_strip_one+0x138>)
 80009f6:	6818      	ldr	r0, [r3, #0]
 80009f8:	8afa      	ldrh	r2, [r7, #22]
 80009fa:	4613      	mov	r3, r2
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	4413      	add	r3, r2
 8000a00:	4403      	add	r3, r0
 8000a02:	789b      	ldrb	r3, [r3, #2]
                                (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->red) << 8) | \
 8000a04:	430b      	orrs	r3, r1
        color = (((gp_ws28128b_strip[STRIP_NUM_1] + iii)->green) << 16) | \
 8000a06:	60fb      	str	r3, [r7, #12]
        for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 8000a08:	2300      	movs	r3, #0
 8000a0a:	757b      	strb	r3, [r7, #21]
 8000a0c:	e020      	b.n	8000a50 <ws2812b_fill_pwm_buffer_strip_one+0xb8>
        {
            gp_pwm_data_fill[strip_pwm_offset + (iii * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + yyy] = (color & (1 << (23 - yyy))) ? (uint16_t)(WS2812B_BIT_SET_CYCLES + 1) : (uint16_t)WS2812B_BIT_RESET_CYCLES;
 8000a0e:	7d7b      	ldrb	r3, [r7, #21]
 8000a10:	f1c3 0317 	rsb	r3, r3, #23
 8000a14:	2201      	movs	r2, #1
 8000a16:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <ws2812b_fill_pwm_buffer_strip_one+0x90>
 8000a24:	2028      	movs	r0, #40	; 0x28
 8000a26:	e000      	b.n	8000a2a <ws2812b_fill_pwm_buffer_strip_one+0x92>
 8000a28:	2014      	movs	r0, #20
 8000a2a:	4b2a      	ldr	r3, [pc, #168]	; (8000ad4 <ws2812b_fill_pwm_buffer_strip_one+0x13c>)
 8000a2c:	6819      	ldr	r1, [r3, #0]
 8000a2e:	8afa      	ldrh	r2, [r7, #22]
 8000a30:	4613      	mov	r3, r2
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	4413      	add	r3, r2
 8000a36:	00db      	lsls	r3, r3, #3
 8000a38:	461a      	mov	r2, r3
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	441a      	add	r2, r3
 8000a3e:	7d7b      	ldrb	r3, [r7, #21]
 8000a40:	4413      	add	r3, r2
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	440b      	add	r3, r1
 8000a46:	4602      	mov	r2, r0
 8000a48:	801a      	strh	r2, [r3, #0]
        for (uint8_t yyy = 0; yyy < BITS_PER_BYTE * sizeof(ws2812b_led_t); yyy++)
 8000a4a:	7d7b      	ldrb	r3, [r7, #21]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	757b      	strb	r3, [r7, #21]
 8000a50:	7d7b      	ldrb	r3, [r7, #21]
 8000a52:	2b17      	cmp	r3, #23
 8000a54:	d9db      	bls.n	8000a0e <ws2812b_fill_pwm_buffer_strip_one+0x76>
    for (uint16_t iii = 0; iii < strip_size; iii++)
 8000a56:	8afb      	ldrh	r3, [r7, #22]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	82fb      	strh	r3, [r7, #22]
 8000a5c:	8afb      	ldrh	r3, [r7, #22]
 8000a5e:	68ba      	ldr	r2, [r7, #8]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d8b4      	bhi.n	80009ce <ws2812b_fill_pwm_buffer_strip_one+0x36>
        }
    }
    for (uint16_t iii = 0; iii < WS2812B_RESET_TIME_CYCLES; iii++)
 8000a64:	2300      	movs	r3, #0
 8000a66:	827b      	strh	r3, [r7, #18]
 8000a68:	e012      	b.n	8000a90 <ws2812b_fill_pwm_buffer_strip_one+0xf8>
    {
        gp_pwm_data_fill[(strip_pwm_offset + (strip_size * BITS_PER_BYTE * sizeof(ws2812b_led_t))) + iii] = 0;
 8000a6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <ws2812b_fill_pwm_buffer_strip_one+0x13c>)
 8000a6c:	6819      	ldr	r1, [r3, #0]
 8000a6e:	68ba      	ldr	r2, [r7, #8]
 8000a70:	4613      	mov	r3, r2
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	4413      	add	r3, r2
 8000a76:	00db      	lsls	r3, r3, #3
 8000a78:	461a      	mov	r2, r3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	441a      	add	r2, r3
 8000a7e:	8a7b      	ldrh	r3, [r7, #18]
 8000a80:	4413      	add	r3, r2
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	440b      	add	r3, r1
 8000a86:	2200      	movs	r2, #0
 8000a88:	801a      	strh	r2, [r3, #0]
    for (uint16_t iii = 0; iii < WS2812B_RESET_TIME_CYCLES; iii++)
 8000a8a:	8a7b      	ldrh	r3, [r7, #18]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	827b      	strh	r3, [r7, #18]
 8000a90:	8a7b      	ldrh	r3, [r7, #18]
 8000a92:	ee07 3a90 	vmov	s15, r3
 8000a96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a9a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000ad8 <ws2812b_fill_pwm_buffer_strip_one+0x140>
 8000a9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aa6:	d4e0      	bmi.n	8000a6a <ws2812b_fill_pwm_buffer_strip_one+0xd2>
    }
    gb_dma_cmplt_strip_1 = false;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <ws2812b_fill_pwm_buffer_strip_one+0x144>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_Start_DMA(&g_tim1_handle, TIM_CHANNEL_1, (uint32_t *)(gp_pwm_data_fill + strip_pwm_offset), (STRIP_1_LENGTH * BITS_PER_BYTE * sizeof(ws2812b_led_t)) + WS2812B_RESET_TIME_CYCLES);
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <ws2812b_fill_pwm_buffer_strip_one+0x13c>)
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	441a      	add	r2, r3
 8000ab8:	f244 7358 	movw	r3, #18264	; 0x4758
 8000abc:	2100      	movs	r1, #0
 8000abe:	4808      	ldr	r0, [pc, #32]	; (8000ae0 <ws2812b_fill_pwm_buffer_strip_one+0x148>)
 8000ac0:	f006 fad4 	bl	800706c <HAL_TIM_PWM_Start_DMA>
}
 8000ac4:	bf00      	nop
 8000ac6:	3718      	adds	r7, #24
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	2000023b 	.word	0x2000023b
 8000ad0:	20000bb8 	.word	0x20000bb8
 8000ad4:	20000bb4 	.word	0x20000bb4
 8000ad8:	453b8000 	.word	0x453b8000
 8000adc:	2000023a 	.word	0x2000023a
 8000ae0:	20003e80 	.word	0x20003e80

08000ae4 <ws2812b_init>:


uint32_t g_size = 0;

void ws2812b_init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0

#if defined(STRIP_1_LENGTH)
	gp_ws28128b_strip[STRIP_NUM_1] = g_strip_1;
 8000aea:	4b31      	ldr	r3, [pc, #196]	; (8000bb0 <ws2812b_init+0xcc>)
 8000aec:	4a31      	ldr	r2, [pc, #196]	; (8000bb4 <ws2812b_init+0xd0>)
 8000aee:	601a      	str	r2, [r3, #0]
#endif
#if defined(STRIP_4_LENGTH)
	gp_ws28128b_strip[STRIP_NUM_4] = g_strip_4;
#endif

	uint8_t num_strips = NUM_STRIPS;
 8000af0:	2301      	movs	r3, #1
 8000af2:	70fb      	strb	r3, [r7, #3]
	for (int iii = 0; iii < NUM_STRIPS; iii++) g_all_strip_mask |= 1 << iii;
 8000af4:	2300      	movs	r3, #0
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	e00f      	b.n	8000b1a <ws2812b_init+0x36>
 8000afa:	2201      	movs	r2, #1
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	b21a      	sxth	r2, r3
 8000b04:	4b2c      	ldr	r3, [pc, #176]	; (8000bb8 <ws2812b_init+0xd4>)
 8000b06:	881b      	ldrh	r3, [r3, #0]
 8000b08:	b21b      	sxth	r3, r3
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	b21b      	sxth	r3, r3
 8000b0e:	b29a      	uxth	r2, r3
 8000b10:	4b29      	ldr	r3, [pc, #164]	; (8000bb8 <ws2812b_init+0xd4>)
 8000b12:	801a      	strh	r2, [r3, #0]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3301      	adds	r3, #1
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	ddec      	ble.n	8000afa <ws2812b_init+0x16>
	switch (num_strips)
 8000b20:	78fb      	ldrb	r3, [r7, #3]
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d110      	bne.n	8000b48 <ws2812b_init+0x64>
		case 2:
			g_num_leds += STRIP_2_LENGTH;
			if (STRIP_2_LENGTH > g_max_strip_length) g_max_strip_length = STRIP_2_LENGTH;
#endif
		case 1:
			g_num_leds += STRIP_1_LENGTH;
 8000b26:	4b25      	ldr	r3, [pc, #148]	; (8000bbc <ws2812b_init+0xd8>)
 8000b28:	881b      	ldrh	r3, [r3, #0]
 8000b2a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8000b2e:	b29a      	uxth	r2, r3
 8000b30:	4b22      	ldr	r3, [pc, #136]	; (8000bbc <ws2812b_init+0xd8>)
 8000b32:	801a      	strh	r2, [r3, #0]
			if (STRIP_1_LENGTH > g_max_strip_length) g_max_strip_length = STRIP_1_LENGTH;
 8000b34:	4b22      	ldr	r3, [pc, #136]	; (8000bc0 <ws2812b_init+0xdc>)
 8000b36:	881b      	ldrh	r3, [r3, #0]
 8000b38:	f5b3 7f1f 	cmp.w	r3, #636	; 0x27c
 8000b3c:	d203      	bcs.n	8000b46 <ws2812b_init+0x62>
 8000b3e:	4b20      	ldr	r3, [pc, #128]	; (8000bc0 <ws2812b_init+0xdc>)
 8000b40:	f44f 721f 	mov.w	r2, #636	; 0x27c
 8000b44:	801a      	strh	r2, [r3, #0]
		break;
 8000b46:	bf00      	nop
	}
    gp_pwm_data_fill = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
 8000b48:	4b1c      	ldr	r3, [pc, #112]	; (8000bbc <ws2812b_init+0xd8>)
 8000b4a:	881b      	ldrh	r3, [r3, #0]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4613      	mov	r3, r2
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	4413      	add	r3, r2
 8000b54:	00db      	lsls	r3, r3, #3
 8000b56:	ee07 3a90 	vmov	s15, r3
 8000b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b5e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000bc4 <ws2812b_init+0xe0>
 8000b62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b6a:	ee17 0a90 	vmov	r0, s15
 8000b6e:	f00a fd65 	bl	800b63c <malloc>
 8000b72:	4603      	mov	r3, r0
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <ws2812b_init+0xe4>)
 8000b78:	601a      	str	r2, [r3, #0]
    //gp_pwm_data_ping = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
    //gp_pwm_data_pong = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES));
    g_size = (sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_num_leds) + (NUM_STRIPS * WS2812B_RESET_TIME_CYCLES);
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <ws2812b_init+0xd8>)
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	461a      	mov	r2, r3
 8000b80:	4613      	mov	r3, r2
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	4413      	add	r3, r2
 8000b86:	00db      	lsls	r3, r3, #3
 8000b88:	ee07 3a90 	vmov	s15, r3
 8000b8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b90:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000bc4 <ws2812b_init+0xe0>
 8000b94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b9c:	ee17 2a90 	vmov	r2, s15
 8000ba0:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <ws2812b_init+0xe8>)
 8000ba2:	601a      	str	r2, [r3, #0]
    //gp_pwm_data_fill = malloc((sizeof(ws2812b_led_t) * BITS_PER_BYTE * g_max_strip_length) + WS2812B_RESET_TIME_CYCLES);
	current_monitor_init();
 8000ba4:	f7ff fd0c 	bl	80005c0 <current_monitor_init>
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000bb8 	.word	0x20000bb8
 8000bb4:	20000438 	.word	0x20000438
 8000bb8:	20000bae 	.word	0x20000bae
 8000bbc:	20000bac 	.word	0x20000bac
 8000bc0:	20000bb0 	.word	0x20000bb0
 8000bc4:	453b8000 	.word	0x453b8000
 8000bc8:	20000bb4 	.word	0x20000bb4
 8000bcc:	20000c20 	.word	0x20000c20

08000bd0 <ws2812b_show_strip_one>:


void ws2812b_show_strip_one(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
    ws2812b_fill_pwm_buffer_strip_one();
 8000bd4:	f7ff fee0 	bl	8000998 <ws2812b_fill_pwm_buffer_strip_one>
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <uart_access_write_and_read_block_esp8266>:
	uart_access_hal_write_byte(uart_config_esp8266_handle(), data);
}


void uart_access_write_and_read_block_esp8266(uint8_t* write_data, uint16_t write_len, uint8_t* read_buf, uint16_t read_len)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af02      	add	r7, sp, #8
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	607a      	str	r2, [r7, #4]
 8000be6:	461a      	mov	r2, r3
 8000be8:	460b      	mov	r3, r1
 8000bea:	817b      	strh	r3, [r7, #10]
 8000bec:	4613      	mov	r3, r2
 8000bee:	813b      	strh	r3, [r7, #8]
	uart_access_hal_write_and_read_block(uart_config_esp8266_handle(), write_data, write_len, read_buf, read_len);
 8000bf0:	f009 ff3c 	bl	800aa6c <uart_config_esp8266_handle>
 8000bf4:	897a      	ldrh	r2, [r7, #10]
 8000bf6:	893b      	ldrh	r3, [r7, #8]
 8000bf8:	9300      	str	r3, [sp, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	68f9      	ldr	r1, [r7, #12]
 8000bfe:	f009 fdd9 	bl	800a7b4 <uart_access_hal_write_and_read_block>
}
 8000c02:	bf00      	nop
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <task_led_ctrl_button_to_isr>:
    return g_animate_led_interrupt;
}


isr_e task_led_ctrl_button_to_isr(const board_init_push_buttons_e button)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
    isr_e return_val;
    switch (button)
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	2b03      	cmp	r3, #3
 8000c1a:	d817      	bhi.n	8000c4c <task_led_ctrl_button_to_isr+0x40>
 8000c1c:	a201      	add	r2, pc, #4	; (adr r2, 8000c24 <task_led_ctrl_button_to_isr+0x18>)
 8000c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c22:	bf00      	nop
 8000c24:	08000c35 	.word	0x08000c35
 8000c28:	08000c3b 	.word	0x08000c3b
 8000c2c:	08000c41 	.word	0x08000c41
 8000c30:	08000c47 	.word	0x08000c47
    {
        case PUSH_BUTTON_A:
            return_val = ISR_SPEED;
 8000c34:	2300      	movs	r3, #0
 8000c36:	73fb      	strb	r3, [r7, #15]
        break;
 8000c38:	e009      	b.n	8000c4e <task_led_ctrl_button_to_isr+0x42>
        case PUSH_BUTTON_B:
            return_val = ISR_STATE;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	73fb      	strb	r3, [r7, #15]
        break;
 8000c3e:	e006      	b.n	8000c4e <task_led_ctrl_button_to_isr+0x42>
        case PUSH_BUTTON_C:
            return_val = ISR_COLOR;
 8000c40:	2302      	movs	r3, #2
 8000c42:	73fb      	strb	r3, [r7, #15]
        break;
 8000c44:	e003      	b.n	8000c4e <task_led_ctrl_button_to_isr+0x42>
        case PUSH_BUTTON_D:
            return_val = ISR_PAUSE;
 8000c46:	2303      	movs	r3, #3
 8000c48:	73fb      	strb	r3, [r7, #15]
        break;
 8000c4a:	e000      	b.n	8000c4e <task_led_ctrl_button_to_isr+0x42>
        default: // do nothing!
        break;
 8000c4c:	bf00      	nop
    }
    return return_val;
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <task_button_press_ctrl_set_interrupt_flag>:


void task_button_press_ctrl_set_interrupt_flag(const isr_e src)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
    g_animate_led_interrupt = true;
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <task_button_press_ctrl_set_interrupt_flag+0x24>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	701a      	strb	r2, [r3, #0]
    g_interrupt_flag[src] = true;
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <task_button_press_ctrl_set_interrupt_flag+0x28>)
 8000c70:	2101      	movs	r1, #1
 8000c72:	54d1      	strb	r1, [r2, r3]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	20000c47 	.word	0x20000c47
 8000c84:	20000c48 	.word	0x20000c48

08000c88 <task_button_press>:
    task_button_press_major_change = false;
}


void task_button_press(void *argument)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
    uint32_t button_pressed_bit = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60bb      	str	r3, [r7, #8]
    uint32_t timestamp_diff = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	60fb      	str	r3, [r7, #12]
    color_hex_code_e color = COLOR_HEX_BLACK;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
    IRQn_Type irq_type = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	74fb      	strb	r3, [r7, #19]
    while (1)
    {
        xTaskNotifyWait(0, button_pressed_bit, &button_pressed_bit, portMAX_DELAY);
 8000ca0:	68b9      	ldr	r1, [r7, #8]
 8000ca2:	f107 0208 	add.w	r2, r7, #8
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000caa:	2000      	movs	r0, #0
 8000cac:	f002 fb62 	bl	8003374 <xTaskNotifyWait>
#if !defined(BOARD_SPUDGLO_V5)
        HAL_GPIO_WritePin(PIN_PORT_B, PIN_INT_LVL_EN, GPIO_PIN_RESET);
        osDelay(700);
        HAL_GPIO_WritePin(PIN_PORT_B, PIN_INT_LVL_EN, GPIO_PIN_SET);
#endif
        timestamp_diff = g_button_press_timestamp[(board_init_push_buttons_e) button_pressed_bit][TIMESTAMP_CURRENT] - \
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b84      	ldr	r3, [pc, #528]	; (8000ec8 <task_button_press+0x240>)
 8000cb8:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
                        g_button_press_timestamp[(board_init_push_buttons_e)button_pressed_bit][TIMESTAMP_PREVIOUS];
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	4981      	ldr	r1, [pc, #516]	; (8000ec8 <task_button_press+0x240>)
 8000cc2:	00db      	lsls	r3, r3, #3
 8000cc4:	440b      	add	r3, r1
 8000cc6:	685b      	ldr	r3, [r3, #4]
        timestamp_diff = g_button_press_timestamp[(board_init_push_buttons_e) button_pressed_bit][TIMESTAMP_CURRENT] - \
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	60fb      	str	r3, [r7, #12]
        if (timestamp_diff < SWITCH_FAST_PRESS_TIME_MILLISECONDS) fast_press_count++;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cd2:	d206      	bcs.n	8000ce2 <task_button_press+0x5a>
 8000cd4:	4b7d      	ldr	r3, [pc, #500]	; (8000ecc <task_button_press+0x244>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	4b7b      	ldr	r3, [pc, #492]	; (8000ecc <task_button_press+0x244>)
 8000cde:	701a      	strb	r2, [r3, #0]
 8000ce0:	e002      	b.n	8000ce8 <task_button_press+0x60>
        else fast_press_count = 0;
 8000ce2:	4b7a      	ldr	r3, [pc, #488]	; (8000ecc <task_button_press+0x244>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	701a      	strb	r2, [r3, #0]
        task_button_press_ctrl_set_interrupt_flag(task_led_ctrl_button_to_isr((board_init_push_buttons_e) button_pressed_bit));
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ff8d 	bl	8000c0c <task_led_ctrl_button_to_isr>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ffb1 	bl	8000c5c <task_button_press_ctrl_set_interrupt_flag>
        if (fast_press_count >= (SWITCH_HISTORY_DEPTH-1))
 8000cfa:	4b74      	ldr	r3, [pc, #464]	; (8000ecc <task_button_press+0x244>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2b03      	cmp	r3, #3
 8000d00:	d975      	bls.n	8000dee <task_button_press+0x166>
        {
            task_button_press_major_change = true;
 8000d02:	4b73      	ldr	r3, [pc, #460]	; (8000ed0 <task_button_press+0x248>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	701a      	strb	r2, [r3, #0]
            fast_press_count = 0;
 8000d08:	4b70      	ldr	r3, [pc, #448]	; (8000ecc <task_button_press+0x244>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
            switch ((board_init_push_buttons_e) button_pressed_bit)
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	2b03      	cmp	r3, #3
 8000d14:	d841      	bhi.n	8000d9a <task_button_press+0x112>
 8000d16:	a201      	add	r2, pc, #4	; (adr r2, 8000d1c <task_button_press+0x94>)
 8000d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d1c:	08000d2d 	.word	0x08000d2d
 8000d20:	08000d47 	.word	0x08000d47
 8000d24:	08000d63 	.word	0x08000d63
 8000d28:	08000d7d 	.word	0x08000d7d
            {
                case PUSH_BUTTON_A:
                    a_ok_count++;
 8000d2c:	4b69      	ldr	r3, [pc, #420]	; (8000ed4 <task_button_press+0x24c>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	3301      	adds	r3, #1
 8000d32:	4a68      	ldr	r2, [pc, #416]	; (8000ed4 <task_button_press+0x24c>)
 8000d34:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_GREEN;
 8000d36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d3a:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_A_IRQ;
 8000d3c:	2308      	movs	r3, #8
 8000d3e:	74fb      	strb	r3, [r7, #19]
                    task_led_ctrl_speed_reset();
 8000d40:	f000 fa2a 	bl	8001198 <task_led_ctrl_speed_reset>

                break;
 8000d44:	e02a      	b.n	8000d9c <task_button_press+0x114>
                case PUSH_BUTTON_B:
                    b_ok_count++;
 8000d46:	4b64      	ldr	r3, [pc, #400]	; (8000ed8 <task_button_press+0x250>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	4a62      	ldr	r2, [pc, #392]	; (8000ed8 <task_button_press+0x250>)
 8000d4e:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_BLUE;
 8000d50:	23ff      	movs	r3, #255	; 0xff
 8000d52:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_B_IRQ;
 8000d54:	2328      	movs	r3, #40	; 0x28
 8000d56:	74fb      	strb	r3, [r7, #19]
                    task_led_ctrl_animate_iteration_reset();
 8000d58:	f000 fa2a 	bl	80011b0 <task_led_ctrl_animate_iteration_reset>
                    task_led_ctrl_animate_state_demo(); // enter demo state
 8000d5c:	f000 fa52 	bl	8001204 <task_led_ctrl_animate_state_demo>
                break;
 8000d60:	e01c      	b.n	8000d9c <task_button_press+0x114>
                case PUSH_BUTTON_C:
                    c_ok_count++;
 8000d62:	4b5e      	ldr	r3, [pc, #376]	; (8000edc <task_button_press+0x254>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	3301      	adds	r3, #1
 8000d68:	4a5c      	ldr	r2, [pc, #368]	; (8000edc <task_button_press+0x254>)
 8000d6a:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_RED;
 8000d6c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8000d70:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_C_IRQ;
 8000d72:	2317      	movs	r3, #23
 8000d74:	74fb      	strb	r3, [r7, #19]
                    // don't change iteration count.  Simply go to color demo mode.
                    task_led_ctrl_color_state_demo();
 8000d76:	f000 f9bb 	bl	80010f0 <task_led_ctrl_color_state_demo>
                break;
 8000d7a:	e00f      	b.n	8000d9c <task_button_press+0x114>
                case PUSH_BUTTON_D:
                    task_led_ctrl_brightness_adjust();
 8000d7c:	f000 f952 	bl	8001024 <task_led_ctrl_brightness_adjust>
                    task_led_ctrl_clear_pause();
 8000d80:	f000 f980 	bl	8001084 <task_led_ctrl_clear_pause>
                    d_ok_count++;
 8000d84:	4b56      	ldr	r3, [pc, #344]	; (8000ee0 <task_button_press+0x258>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	4a55      	ldr	r2, [pc, #340]	; (8000ee0 <task_button_press+0x258>)
 8000d8c:	6013      	str	r3, [r2, #0]
                    color = COLOR_HEX_WHITE;
 8000d8e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000d92:	617b      	str	r3, [r7, #20]
                    irq_type = PUSH_BUTTON_D_IRQ;
 8000d94:	2306      	movs	r3, #6
 8000d96:	74fb      	strb	r3, [r7, #19]
                break;
 8000d98:	e000      	b.n	8000d9c <task_button_press+0x114>
                default:
                break;
 8000d9a:	bf00      	nop
            }
            for (uint8_t iii = 0; iii < 3; iii++)
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	74bb      	strb	r3, [r7, #18]
 8000da0:	e012      	b.n	8000dc8 <task_button_press+0x140>
            {
                animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, color);
 8000da2:	6979      	ldr	r1, [r7, #20]
 8000da4:	2001      	movs	r0, #1
 8000da6:	f7ff fcc1 	bl	800072c <animate_led_solid_custom_color>
                osDelay(500);
 8000daa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dae:	f000 fe35 	bl	8001a1c <osDelay>
                animate_led_solid_custom_color((uint16_t)STRIP_BIT_ALL_SET, COLOR_HEX_BLACK);
 8000db2:	2100      	movs	r1, #0
 8000db4:	2001      	movs	r0, #1
 8000db6:	f7ff fcb9 	bl	800072c <animate_led_solid_custom_color>
                osDelay(500);
 8000dba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dbe:	f000 fe2d 	bl	8001a1c <osDelay>
            for (uint8_t iii = 0; iii < 3; iii++)
 8000dc2:	7cbb      	ldrb	r3, [r7, #18]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	74bb      	strb	r3, [r7, #18]
 8000dc8:	7cbb      	ldrb	r3, [r7, #18]
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d9e9      	bls.n	8000da2 <task_button_press+0x11a>
            }
            HAL_NVIC_SetPriority(irq_type, 24, 0);
 8000dce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2118      	movs	r1, #24
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f003 fd81 	bl	80048de <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(irq_type);
 8000ddc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f003 fd98 	bl	8004916 <HAL_NVIC_EnableIRQ>
            task_button_press_major_change = false;
 8000de6:	4b3a      	ldr	r3, [pc, #232]	; (8000ed0 <task_button_press+0x248>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	701a      	strb	r2, [r3, #0]
 8000dec:	e758      	b.n	8000ca0 <task_button_press+0x18>
        }
        else
        {
            // no state change here
            task_button_press_ctrl_set_interrupt_flag(task_led_ctrl_button_to_isr((board_init_push_buttons_e) button_pressed_bit));
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff ff0a 	bl	8000c0c <task_led_ctrl_button_to_isr>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff ff2e 	bl	8000c5c <task_button_press_ctrl_set_interrupt_flag>
            switch ((board_init_push_buttons_e) button_pressed_bit)
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	d85d      	bhi.n	8000ec4 <task_button_press+0x23c>
 8000e08:	a201      	add	r2, pc, #4	; (adr r2, 8000e10 <task_button_press+0x188>)
 8000e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e0e:	bf00      	nop
 8000e10:	08000e21 	.word	0x08000e21
 8000e14:	08000e41 	.word	0x08000e41
 8000e18:	08000e75 	.word	0x08000e75
 8000e1c:	08000ea5 	.word	0x08000ea5
            {
                case PUSH_BUTTON_A:
                    a_ok_count++;
 8000e20:	4b2c      	ldr	r3, [pc, #176]	; (8000ed4 <task_button_press+0x24c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	3301      	adds	r3, #1
 8000e26:	4a2b      	ldr	r2, [pc, #172]	; (8000ed4 <task_button_press+0x24c>)
 8000e28:	6013      	str	r3, [r2, #0]
                    task_led_ctrl_speed_adjust();
 8000e2a:	f000 f99d 	bl	8001168 <task_led_ctrl_speed_adjust>
                    HAL_NVIC_SetPriority(PUSH_BUTTON_A_IRQ, 24, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2118      	movs	r1, #24
 8000e32:	2008      	movs	r0, #8
 8000e34:	f003 fd53 	bl	80048de <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_A_IRQ);
 8000e38:	2008      	movs	r0, #8
 8000e3a:	f003 fd6c 	bl	8004916 <HAL_NVIC_EnableIRQ>
                break;
 8000e3e:	e042      	b.n	8000ec6 <task_button_press+0x23e>
                case PUSH_BUTTON_B:
                    b_ok_count++;
 8000e40:	4b25      	ldr	r3, [pc, #148]	; (8000ed8 <task_button_press+0x250>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	3301      	adds	r3, #1
 8000e46:	4a24      	ldr	r2, [pc, #144]	; (8000ed8 <task_button_press+0x250>)
 8000e48:	6013      	str	r3, [r2, #0]
                    if (MASTER_LED_STATE_DEMO == task_led_ctrl_animate_state())
 8000e4a:	f000 fa03 	bl	8001254 <task_led_ctrl_animate_state>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d102      	bne.n	8000e5a <task_button_press+0x1d2>
                    {
                        task_led_ctrl_animate_state_fixed(); // animation count is auto cleared here.
 8000e54:	f000 f9e8 	bl	8001228 <task_led_ctrl_animate_state_fixed>
 8000e58:	e003      	b.n	8000e62 <task_button_press+0x1da>
                    }
                    else
                    {
                        task_led_ctrl_animate_iteration_reset();
 8000e5a:	f000 f9a9 	bl	80011b0 <task_led_ctrl_animate_iteration_reset>
                        task_led_ctrl_animate_adjust_state();
 8000e5e:	f000 f9b3 	bl	80011c8 <task_led_ctrl_animate_adjust_state>
                    }
                    HAL_NVIC_SetPriority(PUSH_BUTTON_B_IRQ, 24, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2118      	movs	r1, #24
 8000e66:	2028      	movs	r0, #40	; 0x28
 8000e68:	f003 fd39 	bl	80048de <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_B_IRQ);
 8000e6c:	2028      	movs	r0, #40	; 0x28
 8000e6e:	f003 fd52 	bl	8004916 <HAL_NVIC_EnableIRQ>
                break;
 8000e72:	e028      	b.n	8000ec6 <task_button_press+0x23e>
                case PUSH_BUTTON_C:
                    c_ok_count++;
 8000e74:	4b19      	ldr	r3, [pc, #100]	; (8000edc <task_button_press+0x254>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	4a18      	ldr	r2, [pc, #96]	; (8000edc <task_button_press+0x254>)
 8000e7c:	6013      	str	r3, [r2, #0]
                    if (MASTER_COLOR_STATE_DEMO == task_led_ctrl_color_state())
 8000e7e:	f000 f92b 	bl	80010d8 <task_led_ctrl_color_state>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d102      	bne.n	8000e8e <task_button_press+0x206>
                    {
                        task_led_ctrl_color_state_fixed();
 8000e88:	f000 f93e 	bl	8001108 <task_led_ctrl_color_state_fixed>
 8000e8c:	e001      	b.n	8000e92 <task_button_press+0x20a>
                    }
                    else
                    {
                        task_led_ctrl_color_adjust();
 8000e8e:	f000 f94d 	bl	800112c <task_led_ctrl_color_adjust>
                    }
                    HAL_NVIC_SetPriority(PUSH_BUTTON_C_IRQ, 24, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2118      	movs	r1, #24
 8000e96:	2017      	movs	r0, #23
 8000e98:	f003 fd21 	bl	80048de <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_C_IRQ);
 8000e9c:	2017      	movs	r0, #23
 8000e9e:	f003 fd3a 	bl	8004916 <HAL_NVIC_EnableIRQ>

                break;
 8000ea2:	e010      	b.n	8000ec6 <task_button_press+0x23e>
                case PUSH_BUTTON_D:
                    d_ok_count++;
 8000ea4:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <task_button_press+0x258>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	4a0d      	ldr	r2, [pc, #52]	; (8000ee0 <task_button_press+0x258>)
 8000eac:	6013      	str	r3, [r2, #0]
                    task_led_ctrl_pause();
 8000eae:	f000 f8f5 	bl	800109c <task_led_ctrl_pause>
                    HAL_NVIC_SetPriority(PUSH_BUTTON_D_IRQ, 24, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2118      	movs	r1, #24
 8000eb6:	2006      	movs	r0, #6
 8000eb8:	f003 fd11 	bl	80048de <HAL_NVIC_SetPriority>
                    HAL_NVIC_EnableIRQ(PUSH_BUTTON_D_IRQ);
 8000ebc:	2006      	movs	r0, #6
 8000ebe:	f003 fd2a 	bl	8004916 <HAL_NVIC_EnableIRQ>
                break;
 8000ec2:	e000      	b.n	8000ec6 <task_button_press+0x23e>
                default:
                break;
 8000ec4:	bf00      	nop
        xTaskNotifyWait(0, button_pressed_bit, &button_pressed_bit, portMAX_DELAY);
 8000ec6:	e6eb      	b.n	8000ca0 <task_button_press+0x18>
 8000ec8:	20000c24 	.word	0x20000c24
 8000ecc:	20000c44 	.word	0x20000c44
 8000ed0:	20000c45 	.word	0x20000c45
 8000ed4:	20000c4c 	.word	0x20000c4c
 8000ed8:	20000c50 	.word	0x20000c50
 8000edc:	20000c54 	.word	0x20000c54
 8000ee0:	20000c58 	.word	0x20000c58

08000ee4 <task_led_ctrl_strip_one>:
char binary_start[25] = "application/macbinary\r\n\r\n";
extern uint8_t* g_uart_sector_full_buffer;
uint64_t flash_address = 0x8020000;
uint64_t flash_index = 0;
void task_led_ctrl_strip_one(void *argument)
{
 8000ee4:	b5b0      	push	{r4, r5, r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af02      	add	r7, sp, #8
 8000eea:	6078      	str	r0, [r7, #4]
	flash_access_erase_slot();
 8000eec:	f009 fa18 	bl	800a320 <flash_access_erase_slot>
	uint32_t str_len = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60fb      	str	r3, [r7, #12]
	esp8266_startup();
 8000ef4:	f000 fb36 	bl	8001564 <esp8266_startup>
	esp8266_start_webserver();
 8000ef8:	f000 fb54 	bl	80015a4 <esp8266_start_webserver>
	esp8266_write_command_and_read_response(ESP8266_AT_CIPSEND, true, "0,446", (char *)g_general_rx_buffer, 30, 10000);
 8000efc:	f242 7310 	movw	r3, #10000	; 0x2710
 8000f00:	9301      	str	r3, [sp, #4]
 8000f02:	231e      	movs	r3, #30
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	4b39      	ldr	r3, [pc, #228]	; (8000fec <task_led_ctrl_strip_one+0x108>)
 8000f08:	4a39      	ldr	r2, [pc, #228]	; (8000ff0 <task_led_ctrl_strip_one+0x10c>)
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	2020      	movs	r0, #32
 8000f0e:	f000 fa0d 	bl	800132c <esp8266_write_command_and_read_response>

	//if (!esp8266_write_command_and_read_response(ESP8266_AT_CIPSEND, true, "0,446", (char *)g_general_rx_buffer, 30, 10000)) while (1);
	str_len = esp8266_webserver_make_page("Select file", serverIndex);
 8000f12:	4b38      	ldr	r3, [pc, #224]	; (8000ff4 <task_led_ctrl_strip_one+0x110>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4619      	mov	r1, r3
 8000f18:	4837      	ldr	r0, [pc, #220]	; (8000ff8 <task_led_ctrl_strip_one+0x114>)
 8000f1a:	f000 fc13 	bl	8001744 <esp8266_webserver_make_page>
 8000f1e:	60f8      	str	r0, [r7, #12]
	esp8266_write_data(g_page, str_len, 5000);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4834      	ldr	r0, [pc, #208]	; (8000ffc <task_led_ctrl_strip_one+0x118>)
 8000f2c:	f000 f9b2 	bl	8001294 <esp8266_write_data>
	if (!esp8266_write_command_and_read_response(ESP8266_AT_CIPCLOSE, true, "0", (char *)g_general_rx_buffer, 30, 5000)) while (1);
 8000f30:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f34:	9301      	str	r3, [sp, #4]
 8000f36:	231e      	movs	r3, #30
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	4b2c      	ldr	r3, [pc, #176]	; (8000fec <task_led_ctrl_strip_one+0x108>)
 8000f3c:	4a30      	ldr	r2, [pc, #192]	; (8001000 <task_led_ctrl_strip_one+0x11c>)
 8000f3e:	2101      	movs	r1, #1
 8000f40:	2021      	movs	r0, #33	; 0x21
 8000f42:	f000 f9f3 	bl	800132c <esp8266_write_command_and_read_response>
 8000f46:	4603      	mov	r3, r0
 8000f48:	f083 0301 	eor.w	r3, r3, #1
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d000      	beq.n	8000f54 <task_led_ctrl_strip_one+0x70>
 8000f52:	e7fe      	b.n	8000f52 <task_led_ctrl_strip_one+0x6e>
	//uart_access_hal_read_block(uart_config_esp8266_handle(), g_read_buffer, 2);
	//esp8266_write_command(ESP8266_AT_STARTUP, false, 0);
	//uart_access_hal_read_block(uart_config_esp8266_handle(), g_read_buffer, 2);

	//uart_access_read_block_esp8266(g_data, 2);
	g_uart_rx_buffer_index = 0;
 8000f54:	4b2b      	ldr	r3, [pc, #172]	; (8001004 <task_led_ctrl_strip_one+0x120>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	801a      	strh	r2, [r3, #0]

	while (!esp8266_response_contains(g_general_rx_buffer, lookup, sizeof(lookup), sizeof(g_general_rx_buffer)))
 8000f5a:	e002      	b.n	8000f62 <task_led_ctrl_strip_one+0x7e>
	{
		osDelay(10);
 8000f5c:	200a      	movs	r0, #10
 8000f5e:	f000 fd5d 	bl	8001a1c <osDelay>
	while (!esp8266_response_contains(g_general_rx_buffer, lookup, sizeof(lookup), sizeof(g_general_rx_buffer)))
 8000f62:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f66:	2207      	movs	r2, #7
 8000f68:	4927      	ldr	r1, [pc, #156]	; (8001008 <task_led_ctrl_strip_one+0x124>)
 8000f6a:	4820      	ldr	r0, [pc, #128]	; (8000fec <task_led_ctrl_strip_one+0x108>)
 8000f6c:	f000 faba 	bl	80014e4 <esp8266_response_contains>
 8000f70:	4603      	mov	r3, r0
 8000f72:	f083 0301 	eor.w	r3, r3, #1
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d1ef      	bne.n	8000f5c <task_led_ctrl_strip_one+0x78>
	}
	while (!esp8266_response_contains(g_general_rx_buffer, binary_start, sizeof(binary_start), sizeof(g_general_rx_buffer)))
 8000f7c:	e002      	b.n	8000f84 <task_led_ctrl_strip_one+0xa0>
	{
		osDelay(10);
 8000f7e:	200a      	movs	r0, #10
 8000f80:	f000 fd4c 	bl	8001a1c <osDelay>
	while (!esp8266_response_contains(g_general_rx_buffer, binary_start, sizeof(binary_start), sizeof(g_general_rx_buffer)))
 8000f84:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f88:	2219      	movs	r2, #25
 8000f8a:	4920      	ldr	r1, [pc, #128]	; (800100c <task_led_ctrl_strip_one+0x128>)
 8000f8c:	4817      	ldr	r0, [pc, #92]	; (8000fec <task_led_ctrl_strip_one+0x108>)
 8000f8e:	f000 faa9 	bl	80014e4 <esp8266_response_contains>
 8000f92:	4603      	mov	r3, r0
 8000f94:	f083 0301 	eor.w	r3, r3, #1
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1ef      	bne.n	8000f7e <task_led_ctrl_strip_one+0x9a>
	}

	g_firmware_update_in_progress = true;
 8000f9e:	4b1c      	ldr	r3, [pc, #112]	; (8001010 <task_led_ctrl_strip_one+0x12c>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	701a      	strb	r2, [r3, #0]
	while (1)
	{
		if (g_buffer_full)
 8000fa4:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <task_led_ctrl_strip_one+0x130>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d01a      	beq.n	8000fe2 <task_led_ctrl_strip_one+0xfe>
		{
			g_buffer_full = false;
 8000fac:	4b19      	ldr	r3, [pc, #100]	; (8001014 <task_led_ctrl_strip_one+0x130>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	701a      	strb	r2, [r3, #0]

			flash_access_write_sector_with_address((uint64_t *)g_uart_sector_full_buffer, flash_address + flash_index);
 8000fb2:	4b19      	ldr	r3, [pc, #100]	; (8001018 <task_led_ctrl_strip_one+0x134>)
 8000fb4:	6818      	ldr	r0, [r3, #0]
 8000fb6:	4b19      	ldr	r3, [pc, #100]	; (800101c <task_led_ctrl_strip_one+0x138>)
 8000fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fbc:	4611      	mov	r1, r2
 8000fbe:	4b18      	ldr	r3, [pc, #96]	; (8001020 <task_led_ctrl_strip_one+0x13c>)
 8000fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f009 f9ed 	bl	800a3a8 <flash_access_write_sector_with_address>
			flash_index += 2048;
 8000fce:	4b14      	ldr	r3, [pc, #80]	; (8001020 <task_led_ctrl_strip_one+0x13c>)
 8000fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd4:	f512 6400 	adds.w	r4, r2, #2048	; 0x800
 8000fd8:	f143 0500 	adc.w	r5, r3, #0
 8000fdc:	4b10      	ldr	r3, [pc, #64]	; (8001020 <task_led_ctrl_strip_one+0x13c>)
 8000fde:	e9c3 4500 	strd	r4, r5, [r3]
		}
		osDelay(10); // test this.  Baud rate slowed way down..
 8000fe2:	200a      	movs	r0, #10
 8000fe4:	f000 fd1a 	bl	8001a1c <osDelay>
		if (g_buffer_full)
 8000fe8:	e7dc      	b.n	8000fa4 <task_led_ctrl_strip_one+0xc0>
 8000fea:	bf00      	nop
 8000fec:	20000c64 	.word	0x20000c64
 8000ff0:	0800c758 	.word	0x0800c758
 8000ff4:	20000008 	.word	0x20000008
 8000ff8:	0800c760 	.word	0x0800c760
 8000ffc:	200021f4 	.word	0x200021f4
 8001000:	0800c76c 	.word	0x0800c76c
 8001004:	20003ee4 	.word	0x20003ee4
 8001008:	2000000c 	.word	0x2000000c
 800100c:	20000014 	.word	0x20000014
 8001010:	20003ee7 	.word	0x20003ee7
 8001014:	20003ee6 	.word	0x20003ee6
 8001018:	20004ee8 	.word	0x20004ee8
 800101c:	20000030 	.word	0x20000030
 8001020:	20001ff0 	.word	0x20001ff0

08001024 <task_led_ctrl_brightness_adjust>:
    }
}


void task_led_ctrl_brightness_adjust(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
    if (LED_BRIGHTNESS_FIRST == g_led_brightness) g_led_brightness = LED_BRIGHTNESS_LAST;
 8001028:	4b14      	ldr	r3, [pc, #80]	; (800107c <task_led_ctrl_brightness_adjust+0x58>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d103      	bne.n	8001038 <task_led_ctrl_brightness_adjust+0x14>
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <task_led_ctrl_brightness_adjust+0x58>)
 8001032:	2202      	movs	r2, #2
 8001034:	701a      	strb	r2, [r3, #0]
 8001036:	e005      	b.n	8001044 <task_led_ctrl_brightness_adjust+0x20>
    else g_led_brightness = (led_brightness_e) (g_led_brightness - 1);
 8001038:	4b10      	ldr	r3, [pc, #64]	; (800107c <task_led_ctrl_brightness_adjust+0x58>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	3b01      	subs	r3, #1
 800103e:	b2da      	uxtb	r2, r3
 8001040:	4b0e      	ldr	r3, [pc, #56]	; (800107c <task_led_ctrl_brightness_adjust+0x58>)
 8001042:	701a      	strb	r2, [r3, #0]
    switch (g_led_brightness)
 8001044:	4b0d      	ldr	r3, [pc, #52]	; (800107c <task_led_ctrl_brightness_adjust+0x58>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b02      	cmp	r3, #2
 800104a:	d010      	beq.n	800106e <task_led_ctrl_brightness_adjust+0x4a>
 800104c:	2b02      	cmp	r3, #2
 800104e:	dc13      	bgt.n	8001078 <task_led_ctrl_brightness_adjust+0x54>
 8001050:	2b00      	cmp	r3, #0
 8001052:	d002      	beq.n	800105a <task_led_ctrl_brightness_adjust+0x36>
 8001054:	2b01      	cmp	r3, #1
 8001056:	d005      	beq.n	8001064 <task_led_ctrl_brightness_adjust+0x40>
        break;
        case LED_BRIGHTNESS_1_PERCENT:
            current_monitor_set(0.01f);
        break;
    }
}
 8001058:	e00e      	b.n	8001078 <task_led_ctrl_brightness_adjust+0x54>
            current_monitor_set(1.0f);
 800105a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800105e:	f7ff fa8d 	bl	800057c <current_monitor_set>
        break;
 8001062:	e009      	b.n	8001078 <task_led_ctrl_brightness_adjust+0x54>
            current_monitor_set(0.25f);
 8001064:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8001068:	f7ff fa88 	bl	800057c <current_monitor_set>
        break;
 800106c:	e004      	b.n	8001078 <task_led_ctrl_brightness_adjust+0x54>
            current_monitor_set(0.01f);
 800106e:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8001080 <task_led_ctrl_brightness_adjust+0x5c>
 8001072:	f7ff fa83 	bl	800057c <current_monitor_set>
        break;
 8001076:	bf00      	nop
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000c5f 	.word	0x20000c5f
 8001080:	3c23d70a 	.word	0x3c23d70a

08001084 <task_led_ctrl_clear_pause>:


void task_led_ctrl_clear_pause(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
    g_animate_led_pause_flag = false;
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <task_led_ctrl_clear_pause+0x14>)
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	20000c46 	.word	0x20000c46

0800109c <task_led_ctrl_pause>:


void task_led_ctrl_pause(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
    static uint8_t flip_or_flop = 1;
    if (flip_or_flop) g_animate_led_pause_flag = true;
 80010a0:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <task_led_ctrl_pause+0x34>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d003      	beq.n	80010b0 <task_led_ctrl_pause+0x14>
 80010a8:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <task_led_ctrl_pause+0x38>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	701a      	strb	r2, [r3, #0]
 80010ae:	e002      	b.n	80010b6 <task_led_ctrl_pause+0x1a>
    else g_animate_led_pause_flag = false;
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <task_led_ctrl_pause+0x38>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
    flip_or_flop ^= 1;
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <task_led_ctrl_pause+0x34>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	f083 0301 	eor.w	r3, r3, #1
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	4b03      	ldr	r3, [pc, #12]	; (80010d0 <task_led_ctrl_pause+0x34>)
 80010c2:	701a      	strb	r2, [r3, #0]
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20000038 	.word	0x20000038
 80010d4:	20000c46 	.word	0x20000c46

080010d8 <task_led_ctrl_color_state>:


master_color_state_e task_led_ctrl_color_state(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
    return g_master_color_state;
 80010dc:	4b03      	ldr	r3, [pc, #12]	; (80010ec <task_led_ctrl_color_state+0x14>)
 80010de:	781b      	ldrb	r3, [r3, #0]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	20000c60 	.word	0x20000c60

080010f0 <task_led_ctrl_color_state_demo>:


void task_led_ctrl_color_state_demo(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
    g_master_color_state = MASTER_COLOR_STATE_DEMO;
 80010f4:	4b03      	ldr	r3, [pc, #12]	; (8001104 <task_led_ctrl_color_state_demo+0x14>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	20000c60 	.word	0x20000c60

08001108 <task_led_ctrl_color_state_fixed>:


void task_led_ctrl_color_state_fixed(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
    g_master_color_state = MASTER_COLOR_STATE_FIXED;
 800110c:	4b05      	ldr	r3, [pc, #20]	; (8001124 <task_led_ctrl_color_state_fixed+0x1c>)
 800110e:	2201      	movs	r2, #1
 8001110:	701a      	strb	r2, [r3, #0]
    g_led_color = COLORS_FIRST;
 8001112:	4b05      	ldr	r3, [pc, #20]	; (8001128 <task_led_ctrl_color_state_fixed+0x20>)
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	20000c60 	.word	0x20000c60
 8001128:	20000006 	.word	0x20000006

0800112c <task_led_ctrl_color_adjust>:
    g_led_color = COLORS_RED;
}


bool task_led_ctrl_color_adjust(void)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
    bool return_val = false;
 8001132:	2300      	movs	r3, #0
 8001134:	71fb      	strb	r3, [r7, #7]
    if (COLORS_LAST == g_led_color)
 8001136:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <task_led_ctrl_color_adjust+0x38>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b15      	cmp	r3, #21
 800113c:	d105      	bne.n	800114a <task_led_ctrl_color_adjust+0x1e>
    {
        g_led_color = COLORS_FIRST;
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <task_led_ctrl_color_adjust+0x38>)
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
        return_val = true;
 8001144:	2301      	movs	r3, #1
 8001146:	71fb      	strb	r3, [r7, #7]
 8001148:	e005      	b.n	8001156 <task_led_ctrl_color_adjust+0x2a>
    }
    else g_led_color = (all_colors_e) (g_led_color + 1);
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <task_led_ctrl_color_adjust+0x38>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	3301      	adds	r3, #1
 8001150:	b2da      	uxtb	r2, r3
 8001152:	4b04      	ldr	r3, [pc, #16]	; (8001164 <task_led_ctrl_color_adjust+0x38>)
 8001154:	701a      	strb	r2, [r3, #0]
    return return_val;
 8001156:	79fb      	ldrb	r3, [r7, #7]
}
 8001158:	4618      	mov	r0, r3
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	20000006 	.word	0x20000006

08001168 <task_led_ctrl_speed_adjust>:
    return speed_factor;
}


void task_led_ctrl_speed_adjust(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
    if (LED_SPEED_FIRST == g_led_speed) g_led_speed = LED_SPEED_LAST;
 800116c:	4b09      	ldr	r3, [pc, #36]	; (8001194 <task_led_ctrl_speed_adjust+0x2c>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d103      	bne.n	800117c <task_led_ctrl_speed_adjust+0x14>
 8001174:	4b07      	ldr	r3, [pc, #28]	; (8001194 <task_led_ctrl_speed_adjust+0x2c>)
 8001176:	2204      	movs	r2, #4
 8001178:	701a      	strb	r2, [r3, #0]
    else g_led_speed = (led_speed_e) (g_led_speed - 1);
}
 800117a:	e005      	b.n	8001188 <task_led_ctrl_speed_adjust+0x20>
    else g_led_speed = (led_speed_e) (g_led_speed - 1);
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <task_led_ctrl_speed_adjust+0x2c>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	3b01      	subs	r3, #1
 8001182:	b2da      	uxtb	r2, r3
 8001184:	4b03      	ldr	r3, [pc, #12]	; (8001194 <task_led_ctrl_speed_adjust+0x2c>)
 8001186:	701a      	strb	r2, [r3, #0]
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20000c5e 	.word	0x20000c5e

08001198 <task_led_ctrl_speed_reset>:


void task_led_ctrl_speed_reset(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
    g_led_speed = LED_SPEED_1X;
 800119c:	4b03      	ldr	r3, [pc, #12]	; (80011ac <task_led_ctrl_speed_reset+0x14>)
 800119e:	2202      	movs	r2, #2
 80011a0:	701a      	strb	r2, [r3, #0]
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	20000c5e 	.word	0x20000c5e

080011b0 <task_led_ctrl_animate_iteration_reset>:
    return ((float)g_delay_in_animation_ms / task_led_ctrl_speed());
}


void task_led_ctrl_animate_iteration_reset(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
    g_animation_iterations = 0;
 80011b4:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <task_led_ctrl_animate_iteration_reset+0x14>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	20000c61 	.word	0x20000c61

080011c8 <task_led_ctrl_animate_adjust_state>:


bool task_led_ctrl_animate_adjust_state(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
    bool return_val = false;
 80011ce:	2300      	movs	r3, #0
 80011d0:	71fb      	strb	r3, [r7, #7]
    if (LED_STATE_LAST == g_led_state)
 80011d2:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <task_led_ctrl_animate_adjust_state+0x38>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b09      	cmp	r3, #9
 80011d8:	d105      	bne.n	80011e6 <task_led_ctrl_animate_adjust_state+0x1e>
    {
        g_led_state = LED_STATE_FIRST;
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <task_led_ctrl_animate_adjust_state+0x38>)
 80011dc:	2200      	movs	r2, #0
 80011de:	701a      	strb	r2, [r3, #0]
        return_val = true;
 80011e0:	2301      	movs	r3, #1
 80011e2:	71fb      	strb	r3, [r7, #7]
 80011e4:	e005      	b.n	80011f2 <task_led_ctrl_animate_adjust_state+0x2a>
    }
    else g_led_state = (led_state_e) (g_led_state + 1);
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <task_led_ctrl_animate_adjust_state+0x38>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	3301      	adds	r3, #1
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4b04      	ldr	r3, [pc, #16]	; (8001200 <task_led_ctrl_animate_adjust_state+0x38>)
 80011f0:	701a      	strb	r2, [r3, #0]
    return return_val;
 80011f2:	79fb      	ldrb	r3, [r7, #7]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	20000c5d 	.word	0x20000c5d

08001204 <task_led_ctrl_animate_state_demo>:


void task_led_ctrl_animate_state_demo(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
    g_master_led_state = MASTER_LED_STATE_DEMO;
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <task_led_ctrl_animate_state_demo+0x1c>)
 800120a:	2200      	movs	r2, #0
 800120c:	701a      	strb	r2, [r3, #0]
    g_animation_iterations = 0;
 800120e:	4b05      	ldr	r3, [pc, #20]	; (8001224 <task_led_ctrl_animate_state_demo+0x20>)
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	20000c5c 	.word	0x20000c5c
 8001224:	20000c61 	.word	0x20000c61

08001228 <task_led_ctrl_animate_state_fixed>:


void task_led_ctrl_animate_state_fixed(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
    g_master_led_state = MASTER_LED_STATE_FIXED;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <task_led_ctrl_animate_state_fixed+0x20>)
 800122e:	2201      	movs	r2, #1
 8001230:	701a      	strb	r2, [r3, #0]
    g_led_state = LED_STATE_FIRST; // set first state
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <task_led_ctrl_animate_state_fixed+0x24>)
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]
    g_animation_iterations = 0;
 8001238:	4b05      	ldr	r3, [pc, #20]	; (8001250 <task_led_ctrl_animate_state_fixed+0x28>)
 800123a:	2200      	movs	r2, #0
 800123c:	701a      	strb	r2, [r3, #0]
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	20000c5c 	.word	0x20000c5c
 800124c:	20000c5d 	.word	0x20000c5d
 8001250:	20000c61 	.word	0x20000c61

08001254 <task_led_ctrl_animate_state>:


master_led_state_e task_led_ctrl_animate_state(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
    return g_master_led_state;
 8001258:	4b03      	ldr	r3, [pc, #12]	; (8001268 <task_led_ctrl_animate_state+0x14>)
 800125a:	781b      	ldrb	r3, [r3, #0]
}
 800125c:	4618      	mov	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	20000c5c 	.word	0x20000c5c

0800126c <esp8266_write_and_read_block>:
	//[ESP8266_AT_CIPSEND] = "AT+CIPSEND=",
};


void esp8266_write_and_read_block(uint8_t* write_data, uint16_t write_len, uint8_t* read_buf, uint16_t read_len)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	607a      	str	r2, [r7, #4]
 8001276:	461a      	mov	r2, r3
 8001278:	460b      	mov	r3, r1
 800127a:	817b      	strh	r3, [r7, #10]
 800127c:	4613      	mov	r3, r2
 800127e:	813b      	strh	r3, [r7, #8]
	uart_access_write_and_read_block_esp8266(write_data, write_len, read_buf, read_len);
 8001280:	8979      	ldrh	r1, [r7, #10]
 8001282:	893b      	ldrh	r3, [r7, #8]
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	68f8      	ldr	r0, [r7, #12]
 8001288:	f7ff fca8 	bl	8000bdc <uart_access_write_and_read_block_esp8266>
}
 800128c:	bf00      	nop
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <esp8266_write_data>:
	// TODO
}


bool esp8266_write_data(char* data, uint16_t len, uint32_t timeout_ms)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	460b      	mov	r3, r1
 800129e:	607a      	str	r2, [r7, #4]
 80012a0:	817b      	strh	r3, [r7, #10]
	memset(g_buffer_tx, 0, sizeof(g_buffer_tx));
 80012a2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80012a6:	2100      	movs	r1, #0
 80012a8:	481d      	ldr	r0, [pc, #116]	; (8001320 <esp8266_write_data+0x8c>)
 80012aa:	f00a fb6b 	bl	800b984 <memset>
	memcpy(g_buffer_tx, (uint8_t *)data, len);
 80012ae:	897b      	ldrh	r3, [r7, #10]
 80012b0:	461a      	mov	r2, r3
 80012b2:	68f9      	ldr	r1, [r7, #12]
 80012b4:	481a      	ldr	r0, [pc, #104]	; (8001320 <esp8266_write_data+0x8c>)
 80012b6:	f00a fbd6 	bl	800ba66 <memcpy>
	g_length = strlen(g_buffer_tx);
 80012ba:	4819      	ldr	r0, [pc, #100]	; (8001320 <esp8266_write_data+0x8c>)
 80012bc:	f7fe ff88 	bl	80001d0 <strlen>
 80012c0:	4603      	mov	r3, r0
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	4b17      	ldr	r3, [pc, #92]	; (8001324 <esp8266_write_data+0x90>)
 80012c6:	701a      	strb	r2, [r3, #0]
	//g_buffer_tx[g_length] = 13;
	//g_buffer_tx[g_length+1] = 10;

	uint32_t timestamp = xTaskGetTickCount();
 80012c8:	f001 fc80 	bl	8002bcc <xTaskGetTickCount>
 80012cc:	6178      	str	r0, [r7, #20]
	esp8266_write_and_read_block((uint8_t *)g_buffer_tx, strlen(g_buffer_tx), (uint8_t *)g_general_rx_buffer, 300);
 80012ce:	4814      	ldr	r0, [pc, #80]	; (8001320 <esp8266_write_data+0x8c>)
 80012d0:	f7fe ff7e 	bl	80001d0 <strlen>
 80012d4:	4603      	mov	r3, r0
 80012d6:	b299      	uxth	r1, r3
 80012d8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80012dc:	4a12      	ldr	r2, [pc, #72]	; (8001328 <esp8266_write_data+0x94>)
 80012de:	4810      	ldr	r0, [pc, #64]	; (8001320 <esp8266_write_data+0x8c>)
 80012e0:	f7ff ffc4 	bl	800126c <esp8266_write_and_read_block>

	while ((xTaskGetTickCount() - timestamp) < timeout_ms) osDelay(100);
 80012e4:	e002      	b.n	80012ec <esp8266_write_data+0x58>
 80012e6:	2064      	movs	r0, #100	; 0x64
 80012e8:	f000 fb98 	bl	8001a1c <osDelay>
 80012ec:	f001 fc6e 	bl	8002bcc <xTaskGetTickCount>
 80012f0:	4602      	mov	r2, r0
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d8f4      	bhi.n	80012e6 <esp8266_write_data+0x52>
	if (!esp8266_response_ok_received(g_general_rx_buffer, 200)) return false;
 80012fc:	21c8      	movs	r1, #200	; 0xc8
 80012fe:	480a      	ldr	r0, [pc, #40]	; (8001328 <esp8266_write_data+0x94>)
 8001300:	f000 f8b8 	bl	8001474 <esp8266_response_ok_received>
 8001304:	4603      	mov	r3, r0
 8001306:	f083 0301 	eor.w	r3, r3, #1
 800130a:	b2db      	uxtb	r3, r3
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <esp8266_write_data+0x80>
 8001310:	2300      	movs	r3, #0
 8001312:	e000      	b.n	8001316 <esp8266_write_data+0x82>
	return true;
 8001314:	2301      	movs	r3, #1
}
 8001316:	4618      	mov	r0, r3
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20001ffc 	.word	0x20001ffc
 8001324:	20001ff8 	.word	0x20001ff8
 8001328:	20000c64 	.word	0x20000c64

0800132c <esp8266_write_command_and_read_response>:


bool esp8266_write_command_and_read_response(esp8266_at_commands_e cmd_tag, bool parameters, char* param, char *read_buf, uint16_t read_len, uint32_t timeout_ms)
{
 800132c:	b590      	push	{r4, r7, lr}
 800132e:	b087      	sub	sp, #28
 8001330:	af00      	add	r7, sp, #0
 8001332:	60ba      	str	r2, [r7, #8]
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	4603      	mov	r3, r0
 8001338:	73fb      	strb	r3, [r7, #15]
 800133a:	460b      	mov	r3, r1
 800133c:	73bb      	strb	r3, [r7, #14]
	memset(g_buffer_tx, 0, sizeof(g_buffer_tx));
 800133e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001342:	2100      	movs	r1, #0
 8001344:	4847      	ldr	r0, [pc, #284]	; (8001464 <esp8266_write_command_and_read_response+0x138>)
 8001346:	f00a fb1d 	bl	800b984 <memset>
	uint16_t index = strlen(esp8266_at_command_lookup[cmd_tag]);
 800134a:	7bfb      	ldrb	r3, [r7, #15]
 800134c:	4a46      	ldr	r2, [pc, #280]	; (8001468 <esp8266_write_command_and_read_response+0x13c>)
 800134e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001352:	4618      	mov	r0, r3
 8001354:	f7fe ff3c 	bl	80001d0 <strlen>
 8001358:	4603      	mov	r3, r0
 800135a:	82fb      	strh	r3, [r7, #22]
	memcpy(g_buffer_tx, esp8266_at_command_lookup[cmd_tag], strlen(esp8266_at_command_lookup[cmd_tag]));
 800135c:	7bfb      	ldrb	r3, [r7, #15]
 800135e:	4a42      	ldr	r2, [pc, #264]	; (8001468 <esp8266_write_command_and_read_response+0x13c>)
 8001360:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	4a40      	ldr	r2, [pc, #256]	; (8001468 <esp8266_write_command_and_read_response+0x13c>)
 8001368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136c:	4618      	mov	r0, r3
 800136e:	f7fe ff2f 	bl	80001d0 <strlen>
 8001372:	4603      	mov	r3, r0
 8001374:	461a      	mov	r2, r3
 8001376:	4621      	mov	r1, r4
 8001378:	483a      	ldr	r0, [pc, #232]	; (8001464 <esp8266_write_command_and_read_response+0x138>)
 800137a:	f00a fb74 	bl	800ba66 <memcpy>
	if (parameters)
 800137e:	7bbb      	ldrb	r3, [r7, #14]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d02b      	beq.n	80013dc <esp8266_write_command_and_read_response+0xb0>
	{
		g_buffer_tx[index++] = '=';
 8001384:	8afb      	ldrh	r3, [r7, #22]
 8001386:	1c5a      	adds	r2, r3, #1
 8001388:	82fa      	strh	r2, [r7, #22]
 800138a:	461a      	mov	r2, r3
 800138c:	4b35      	ldr	r3, [pc, #212]	; (8001464 <esp8266_write_command_and_read_response+0x138>)
 800138e:	213d      	movs	r1, #61	; 0x3d
 8001390:	5499      	strb	r1, [r3, r2]
		strcpy((char *)(g_buffer_tx + index++), param);
 8001392:	8afb      	ldrh	r3, [r7, #22]
 8001394:	1c5a      	adds	r2, r3, #1
 8001396:	82fa      	strh	r2, [r7, #22]
 8001398:	461a      	mov	r2, r3
 800139a:	4b32      	ldr	r3, [pc, #200]	; (8001464 <esp8266_write_command_and_read_response+0x138>)
 800139c:	4413      	add	r3, r2
 800139e:	68b9      	ldr	r1, [r7, #8]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f00a fb6e 	bl	800ba82 <strcpy>
		g_buffer_tx[index++ + strlen(param) - 1] = 13;
 80013a6:	8afb      	ldrh	r3, [r7, #22]
 80013a8:	1c5a      	adds	r2, r3, #1
 80013aa:	82fa      	strh	r2, [r7, #22]
 80013ac:	461c      	mov	r4, r3
 80013ae:	68b8      	ldr	r0, [r7, #8]
 80013b0:	f7fe ff0e 	bl	80001d0 <strlen>
 80013b4:	4603      	mov	r3, r0
 80013b6:	4423      	add	r3, r4
 80013b8:	3b01      	subs	r3, #1
 80013ba:	4a2a      	ldr	r2, [pc, #168]	; (8001464 <esp8266_write_command_and_read_response+0x138>)
 80013bc:	210d      	movs	r1, #13
 80013be:	54d1      	strb	r1, [r2, r3]
		g_buffer_tx[index++ + strlen(param) - 1] = 10;
 80013c0:	8afb      	ldrh	r3, [r7, #22]
 80013c2:	1c5a      	adds	r2, r3, #1
 80013c4:	82fa      	strh	r2, [r7, #22]
 80013c6:	461c      	mov	r4, r3
 80013c8:	68b8      	ldr	r0, [r7, #8]
 80013ca:	f7fe ff01 	bl	80001d0 <strlen>
 80013ce:	4603      	mov	r3, r0
 80013d0:	4423      	add	r3, r4
 80013d2:	3b01      	subs	r3, #1
 80013d4:	4a23      	ldr	r2, [pc, #140]	; (8001464 <esp8266_write_command_and_read_response+0x138>)
 80013d6:	210a      	movs	r1, #10
 80013d8:	54d1      	strb	r1, [r2, r3]
 80013da:	e00d      	b.n	80013f8 <esp8266_write_command_and_read_response+0xcc>
	}
	else
	{
		g_buffer_tx[index++] = 13;
 80013dc:	8afb      	ldrh	r3, [r7, #22]
 80013de:	1c5a      	adds	r2, r3, #1
 80013e0:	82fa      	strh	r2, [r7, #22]
 80013e2:	461a      	mov	r2, r3
 80013e4:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <esp8266_write_command_and_read_response+0x138>)
 80013e6:	210d      	movs	r1, #13
 80013e8:	5499      	strb	r1, [r3, r2]
		g_buffer_tx[index++] = 10;
 80013ea:	8afb      	ldrh	r3, [r7, #22]
 80013ec:	1c5a      	adds	r2, r3, #1
 80013ee:	82fa      	strh	r2, [r7, #22]
 80013f0:	461a      	mov	r2, r3
 80013f2:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <esp8266_write_command_and_read_response+0x138>)
 80013f4:	210a      	movs	r1, #10
 80013f6:	5499      	strb	r1, [r3, r2]
	}
	g_length = strlen(g_buffer_tx);
 80013f8:	481a      	ldr	r0, [pc, #104]	; (8001464 <esp8266_write_command_and_read_response+0x138>)
 80013fa:	f7fe fee9 	bl	80001d0 <strlen>
 80013fe:	4603      	mov	r3, r0
 8001400:	b2da      	uxtb	r2, r3
 8001402:	4b1a      	ldr	r3, [pc, #104]	; (800146c <esp8266_write_command_and_read_response+0x140>)
 8001404:	701a      	strb	r2, [r3, #0]
	uint32_t timestamp = xTaskGetTickCount();
 8001406:	f001 fbe1 	bl	8002bcc <xTaskGetTickCount>
 800140a:	6138      	str	r0, [r7, #16]
	esp8266_write_and_read_block((uint8_t *)g_buffer_tx, strlen(g_buffer_tx), (uint8_t *)read_buf, read_len);
 800140c:	4815      	ldr	r0, [pc, #84]	; (8001464 <esp8266_write_command_and_read_response+0x138>)
 800140e:	f7fe fedf 	bl	80001d0 <strlen>
 8001412:	4603      	mov	r3, r0
 8001414:	b299      	uxth	r1, r3
 8001416:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	4812      	ldr	r0, [pc, #72]	; (8001464 <esp8266_write_command_and_read_response+0x138>)
 800141c:	f7ff ff26 	bl	800126c <esp8266_write_and_read_block>

	while (!uart_access_hal_rx_done(timestamp, timeout_ms)) osDelay(100);
 8001420:	e002      	b.n	8001428 <esp8266_write_command_and_read_response+0xfc>
 8001422:	2064      	movs	r0, #100	; 0x64
 8001424:	f000 fafa 	bl	8001a1c <osDelay>
 8001428:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800142a:	6938      	ldr	r0, [r7, #16]
 800142c:	f009 f9ae 	bl	800a78c <uart_access_hal_rx_done>
 8001430:	4603      	mov	r3, r0
 8001432:	f083 0301 	eor.w	r3, r3, #1
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1f2      	bne.n	8001422 <esp8266_write_command_and_read_response+0xf6>
	if (cmd_tag != ESP8266_AT_CWJAP_CUR)
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	2b0e      	cmp	r3, #14
 8001440:	d00b      	beq.n	800145a <esp8266_write_command_and_read_response+0x12e>
	{
		if (!esp8266_response_ok_received(g_general_rx_buffer, 200)) return false;
 8001442:	21c8      	movs	r1, #200	; 0xc8
 8001444:	480a      	ldr	r0, [pc, #40]	; (8001470 <esp8266_write_command_and_read_response+0x144>)
 8001446:	f000 f815 	bl	8001474 <esp8266_response_ok_received>
 800144a:	4603      	mov	r3, r0
 800144c:	f083 0301 	eor.w	r3, r3, #1
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <esp8266_write_command_and_read_response+0x12e>
 8001456:	2300      	movs	r3, #0
 8001458:	e000      	b.n	800145c <esp8266_write_command_and_read_response+0x130>
	}
	return true;
 800145a:	2301      	movs	r3, #1
}
 800145c:	4618      	mov	r0, r3
 800145e:	371c      	adds	r7, #28
 8001460:	46bd      	mov	sp, r7
 8001462:	bd90      	pop	{r4, r7, pc}
 8001464:	20001ffc 	.word	0x20001ffc
 8001468:	2000003c 	.word	0x2000003c
 800146c:	20001ff8 	.word	0x20001ff8
 8001470:	20000c64 	.word	0x20000c64

08001474 <esp8266_response_ok_received>:


bool esp8266_response_ok_received(char *buffer, uint16_t len)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	460b      	mov	r3, r1
 800147e:	807b      	strh	r3, [r7, #2]

	char ok[2] = "OK";
 8001480:	f644 334f 	movw	r3, #19279	; 0x4b4f
 8001484:	81bb      	strh	r3, [r7, #12]
	for (uint16_t iii = 0; iii < len; iii++)
 8001486:	2300      	movs	r3, #0
 8001488:	81fb      	strh	r3, [r7, #14]
 800148a:	e013      	b.n	80014b4 <esp8266_response_ok_received+0x40>
	{
		if ((buffer[iii] == ok[0])) //&& (iii < len - strlen(ok)))
 800148c:	89fb      	ldrh	r3, [r7, #14]
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	781a      	ldrb	r2, [r3, #0]
 8001494:	7b3b      	ldrb	r3, [r7, #12]
 8001496:	429a      	cmp	r2, r3
 8001498:	d109      	bne.n	80014ae <esp8266_response_ok_received+0x3a>
		{
			if (buffer[iii + 1] == ok[1]) return true;
 800149a:	89fb      	ldrh	r3, [r7, #14]
 800149c:	3301      	adds	r3, #1
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	4413      	add	r3, r2
 80014a2:	781a      	ldrb	r2, [r3, #0]
 80014a4:	7b7b      	ldrb	r3, [r7, #13]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d101      	bne.n	80014ae <esp8266_response_ok_received+0x3a>
 80014aa:	2301      	movs	r3, #1
 80014ac:	e007      	b.n	80014be <esp8266_response_ok_received+0x4a>
	for (uint16_t iii = 0; iii < len; iii++)
 80014ae:	89fb      	ldrh	r3, [r7, #14]
 80014b0:	3301      	adds	r3, #1
 80014b2:	81fb      	strh	r3, [r7, #14]
 80014b4:	89fa      	ldrh	r2, [r7, #14]
 80014b6:	887b      	ldrh	r3, [r7, #2]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d3e7      	bcc.n	800148c <esp8266_response_ok_received+0x18>
		}
	}
	return false;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3714      	adds	r7, #20
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
	...

080014cc <esp8266_read_start_of_binary_index>:

uint16_t g_iii = 0;

uint16_t esp8266_read_start_of_binary_index(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
	return g_iii;
 80014d0:	4b03      	ldr	r3, [pc, #12]	; (80014e0 <esp8266_read_start_of_binary_index+0x14>)
 80014d2:	881b      	ldrh	r3, [r3, #0]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	200021f0 	.word	0x200021f0

080014e4 <esp8266_response_contains>:

bool esp8266_response_contains(char *buffer, char *msg, uint16_t msg_len, uint16_t len)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	4611      	mov	r1, r2
 80014f0:	461a      	mov	r2, r3
 80014f2:	460b      	mov	r3, r1
 80014f4:	80fb      	strh	r3, [r7, #6]
 80014f6:	4613      	mov	r3, r2
 80014f8:	80bb      	strh	r3, [r7, #4]
	uint8_t g_str_len = strlen(msg);
 80014fa:	68b8      	ldr	r0, [r7, #8]
 80014fc:	f7fe fe68 	bl	80001d0 <strlen>
 8001500:	4603      	mov	r3, r0
 8001502:	75bb      	strb	r3, [r7, #22]
	uint8_t msg_index = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	75fb      	strb	r3, [r7, #23]
	for ( g_iii = 0; g_iii < len; g_iii++)
 8001508:	4b15      	ldr	r3, [pc, #84]	; (8001560 <esp8266_response_contains+0x7c>)
 800150a:	2200      	movs	r2, #0
 800150c:	801a      	strh	r2, [r3, #0]
 800150e:	e01d      	b.n	800154c <esp8266_response_contains+0x68>
	{
		if ((uint8_t)buffer[g_iii] == (uint8_t)msg[msg_index])// && (iii < (len - strlen(msg))))
 8001510:	4b13      	ldr	r3, [pc, #76]	; (8001560 <esp8266_response_contains+0x7c>)
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	461a      	mov	r2, r3
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	4413      	add	r3, r2
 800151a:	781a      	ldrb	r2, [r3, #0]
 800151c:	7dfb      	ldrb	r3, [r7, #23]
 800151e:	68b9      	ldr	r1, [r7, #8]
 8001520:	440b      	add	r3, r1
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	429a      	cmp	r2, r3
 8001526:	d109      	bne.n	800153c <esp8266_response_contains+0x58>
		{
			msg_index++;
 8001528:	7dfb      	ldrb	r3, [r7, #23]
 800152a:	3301      	adds	r3, #1
 800152c:	75fb      	strb	r3, [r7, #23]
			if (msg_index == (msg_len))
 800152e:	7dfb      	ldrb	r3, [r7, #23]
 8001530:	b29b      	uxth	r3, r3
 8001532:	88fa      	ldrh	r2, [r7, #6]
 8001534:	429a      	cmp	r2, r3
 8001536:	d103      	bne.n	8001540 <esp8266_response_contains+0x5c>
			{
				return true;
 8001538:	2301      	movs	r3, #1
 800153a:	e00d      	b.n	8001558 <esp8266_response_contains+0x74>
			}
		}
		else
		{
			msg_index = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	75fb      	strb	r3, [r7, #23]
	for ( g_iii = 0; g_iii < len; g_iii++)
 8001540:	4b07      	ldr	r3, [pc, #28]	; (8001560 <esp8266_response_contains+0x7c>)
 8001542:	881b      	ldrh	r3, [r3, #0]
 8001544:	3301      	adds	r3, #1
 8001546:	b29a      	uxth	r2, r3
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <esp8266_response_contains+0x7c>)
 800154a:	801a      	strh	r2, [r3, #0]
 800154c:	4b04      	ldr	r3, [pc, #16]	; (8001560 <esp8266_response_contains+0x7c>)
 800154e:	881b      	ldrh	r3, [r3, #0]
 8001550:	88ba      	ldrh	r2, [r7, #4]
 8001552:	429a      	cmp	r2, r3
 8001554:	d8dc      	bhi.n	8001510 <esp8266_response_contains+0x2c>
		}
	}
	return false;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	3718      	adds	r7, #24
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	200021f0 	.word	0x200021f0

08001564 <esp8266_startup>:


void esp8266_startup(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
	board_init_specific_esp8266_power_disable();
 8001568:	f009 ffa8 	bl	800b4bc <board_init_specific_esp8266_power_disable>
	osDelay(1000);
 800156c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001570:	f000 fa54 	bl	8001a1c <osDelay>
	board_init_specific_esp8266_power_enable();
 8001574:	f009 ff82 	bl	800b47c <board_init_specific_esp8266_power_enable>
	osDelay(1000);
 8001578:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800157c:	f000 fa4e 	bl	8001a1c <osDelay>

	board_init_specific_esp8266_uart_boot_disable();
 8001580:	f009 ff5c 	bl	800b43c <board_init_specific_esp8266_uart_boot_disable>
	board_init_specific_esp8266_reset_assert();
 8001584:	f009 ffba 	bl	800b4fc <board_init_specific_esp8266_reset_assert>
	osDelay(1000);
 8001588:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800158c:	f000 fa46 	bl	8001a1c <osDelay>
	board_init_specific_esp8266_reset_deassert();
 8001590:	f009 ffd4 	bl	800b53c <board_init_specific_esp8266_reset_deassert>
	osDelay(1000);
 8001594:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001598:	f000 fa40 	bl	8001a1c <osDelay>
	uart_config_hal_setup();
 800159c:	f009 f95c 	bl	800a858 <uart_config_hal_setup>
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <esp8266_start_webserver>:

extern bool gb_waiting_on_request;
extern char g_general_rx_buffer[GENERAL_RX_BUFFER_SIZE];

bool esp8266_start_webserver(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af02      	add	r7, sp, #8
	while(!esp8266_write_command_and_read_response(ESP8266_AT_STARTUP, false, 0, (char *)g_general_rx_buffer, 10, 1000)) osDelay(100);
 80015aa:	e002      	b.n	80015b2 <esp8266_start_webserver+0xe>
 80015ac:	2064      	movs	r0, #100	; 0x64
 80015ae:	f000 fa35 	bl	8001a1c <osDelay>
 80015b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b6:	9301      	str	r3, [sp, #4]
 80015b8:	230a      	movs	r3, #10
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	4b5b      	ldr	r3, [pc, #364]	; (800172c <esp8266_start_webserver+0x188>)
 80015be:	2200      	movs	r2, #0
 80015c0:	2100      	movs	r1, #0
 80015c2:	2000      	movs	r0, #0
 80015c4:	f7ff feb2 	bl	800132c <esp8266_write_command_and_read_response>
 80015c8:	4603      	mov	r3, r0
 80015ca:	f083 0301 	eor.w	r3, r3, #1
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1eb      	bne.n	80015ac <esp8266_start_webserver+0x8>
	osDelay(200);
 80015d4:	20c8      	movs	r0, #200	; 0xc8
 80015d6:	f000 fa21 	bl	8001a1c <osDelay>
	while (!esp8266_write_command_and_read_response(ESP8266_AT_RESTART, false, 0, (char *)g_general_rx_buffer, 10, 1000)) osDelay(100);
 80015da:	e002      	b.n	80015e2 <esp8266_start_webserver+0x3e>
 80015dc:	2064      	movs	r0, #100	; 0x64
 80015de:	f000 fa1d 	bl	8001a1c <osDelay>
 80015e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e6:	9301      	str	r3, [sp, #4]
 80015e8:	230a      	movs	r3, #10
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	4b4f      	ldr	r3, [pc, #316]	; (800172c <esp8266_start_webserver+0x188>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	2100      	movs	r1, #0
 80015f2:	2001      	movs	r0, #1
 80015f4:	f7ff fe9a 	bl	800132c <esp8266_write_command_and_read_response>
 80015f8:	4603      	mov	r3, r0
 80015fa:	f083 0301 	eor.w	r3, r3, #1
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1eb      	bne.n	80015dc <esp8266_start_webserver+0x38>
	osDelay(200);
 8001604:	20c8      	movs	r0, #200	; 0xc8
 8001606:	f000 fa09 	bl	8001a1c <osDelay>
	while (!esp8266_write_command_and_read_response(ESP8266_AT_CW_MODE_CUR, true, "1", (char *)g_general_rx_buffer, 10, 500)) osDelay(100);
 800160a:	e002      	b.n	8001612 <esp8266_start_webserver+0x6e>
 800160c:	2064      	movs	r0, #100	; 0x64
 800160e:	f000 fa05 	bl	8001a1c <osDelay>
 8001612:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001616:	9301      	str	r3, [sp, #4]
 8001618:	230a      	movs	r3, #10
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	4b43      	ldr	r3, [pc, #268]	; (800172c <esp8266_start_webserver+0x188>)
 800161e:	4a44      	ldr	r2, [pc, #272]	; (8001730 <esp8266_start_webserver+0x18c>)
 8001620:	2101      	movs	r1, #1
 8001622:	200c      	movs	r0, #12
 8001624:	f7ff fe82 	bl	800132c <esp8266_write_command_and_read_response>
 8001628:	4603      	mov	r3, r0
 800162a:	f083 0301 	eor.w	r3, r3, #1
 800162e:	b2db      	uxtb	r3, r3
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1eb      	bne.n	800160c <esp8266_start_webserver+0x68>
	osDelay(200);
 8001634:	20c8      	movs	r0, #200	; 0xc8
 8001636:	f000 f9f1 	bl	8001a1c <osDelay>
	while (!esp8266_write_command_and_read_response(ESP8266_AT_CWJAP_CUR, true, ssid, (char *)g_general_rx_buffer, 10, 10000)) osDelay(100);
 800163a:	e002      	b.n	8001642 <esp8266_start_webserver+0x9e>
 800163c:	2064      	movs	r0, #100	; 0x64
 800163e:	f000 f9ed 	bl	8001a1c <osDelay>
 8001642:	f242 7310 	movw	r3, #10000	; 0x2710
 8001646:	9301      	str	r3, [sp, #4]
 8001648:	230a      	movs	r3, #10
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	4b37      	ldr	r3, [pc, #220]	; (800172c <esp8266_start_webserver+0x188>)
 800164e:	4a39      	ldr	r2, [pc, #228]	; (8001734 <esp8266_start_webserver+0x190>)
 8001650:	2101      	movs	r1, #1
 8001652:	200e      	movs	r0, #14
 8001654:	f7ff fe6a 	bl	800132c <esp8266_write_command_and_read_response>
 8001658:	4603      	mov	r3, r0
 800165a:	f083 0301 	eor.w	r3, r3, #1
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1eb      	bne.n	800163c <esp8266_start_webserver+0x98>
	osDelay(4000);
 8001664:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001668:	f000 f9d8 	bl	8001a1c <osDelay>
	while (!esp8266_write_command_and_read_response(ESP8266_AT_CIFSR, false, 0, (char *)g_general_rx_buffer, 75, 1000))
 800166c:	e003      	b.n	8001676 <esp8266_start_webserver+0xd2>
	{
		osDelay(500);
 800166e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001672:	f000 f9d3 	bl	8001a1c <osDelay>
	while (!esp8266_write_command_and_read_response(ESP8266_AT_CIFSR, false, 0, (char *)g_general_rx_buffer, 75, 1000))
 8001676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167a:	9301      	str	r3, [sp, #4]
 800167c:	234b      	movs	r3, #75	; 0x4b
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	4b2a      	ldr	r3, [pc, #168]	; (800172c <esp8266_start_webserver+0x188>)
 8001682:	2200      	movs	r2, #0
 8001684:	2100      	movs	r1, #0
 8001686:	201d      	movs	r0, #29
 8001688:	f7ff fe50 	bl	800132c <esp8266_write_command_and_read_response>
 800168c:	4603      	mov	r3, r0
 800168e:	f083 0301 	eor.w	r3, r3, #1
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1ea      	bne.n	800166e <esp8266_start_webserver+0xca>
	}
	osDelay(200);
 8001698:	20c8      	movs	r0, #200	; 0xc8
 800169a:	f000 f9bf 	bl	8001a1c <osDelay>
	while (!esp8266_write_command_and_read_response(ESP8266_AT_CIPMUX, true, "1", (char *)g_general_rx_buffer, 10, 500)) osDelay(100);
 800169e:	e002      	b.n	80016a6 <esp8266_start_webserver+0x102>
 80016a0:	2064      	movs	r0, #100	; 0x64
 80016a2:	f000 f9bb 	bl	8001a1c <osDelay>
 80016a6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016aa:	9301      	str	r3, [sp, #4]
 80016ac:	230a      	movs	r3, #10
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	4b1e      	ldr	r3, [pc, #120]	; (800172c <esp8266_start_webserver+0x188>)
 80016b2:	4a1f      	ldr	r2, [pc, #124]	; (8001730 <esp8266_start_webserver+0x18c>)
 80016b4:	2101      	movs	r1, #1
 80016b6:	201e      	movs	r0, #30
 80016b8:	f7ff fe38 	bl	800132c <esp8266_write_command_and_read_response>
 80016bc:	4603      	mov	r3, r0
 80016be:	f083 0301 	eor.w	r3, r3, #1
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1eb      	bne.n	80016a0 <esp8266_start_webserver+0xfc>
	osDelay(200);
 80016c8:	20c8      	movs	r0, #200	; 0xc8
 80016ca:	f000 f9a7 	bl	8001a1c <osDelay>
	while (!esp8266_write_command_and_read_response(ESP8266_AT_CIPSERVER, true, "1,80", (char *)g_general_rx_buffer, 30, 500)) osDelay(100);
 80016ce:	e002      	b.n	80016d6 <esp8266_start_webserver+0x132>
 80016d0:	2064      	movs	r0, #100	; 0x64
 80016d2:	f000 f9a3 	bl	8001a1c <osDelay>
 80016d6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016da:	9301      	str	r3, [sp, #4]
 80016dc:	231e      	movs	r3, #30
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	4b12      	ldr	r3, [pc, #72]	; (800172c <esp8266_start_webserver+0x188>)
 80016e2:	4a15      	ldr	r2, [pc, #84]	; (8001738 <esp8266_start_webserver+0x194>)
 80016e4:	2101      	movs	r1, #1
 80016e6:	201f      	movs	r0, #31
 80016e8:	f7ff fe20 	bl	800132c <esp8266_write_command_and_read_response>
 80016ec:	4603      	mov	r3, r0
 80016ee:	f083 0301 	eor.w	r3, r3, #1
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1eb      	bne.n	80016d0 <esp8266_start_webserver+0x12c>
	gb_waiting_on_request = true;
 80016f8:	4b10      	ldr	r3, [pc, #64]	; (800173c <esp8266_start_webserver+0x198>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	701a      	strb	r2, [r3, #0]
	while (!esp8266_response_contains(g_general_rx_buffer, search, sizeof(search), sizeof(g_general_rx_buffer)))
 80016fe:	e003      	b.n	8001708 <esp8266_start_webserver+0x164>
	{
		osDelay(500);
 8001700:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001704:	f000 f98a 	bl	8001a1c <osDelay>
	while (!esp8266_response_contains(g_general_rx_buffer, search, sizeof(search), sizeof(g_general_rx_buffer)))
 8001708:	f241 3388 	movw	r3, #5000	; 0x1388
 800170c:	2204      	movs	r2, #4
 800170e:	490c      	ldr	r1, [pc, #48]	; (8001740 <esp8266_start_webserver+0x19c>)
 8001710:	4806      	ldr	r0, [pc, #24]	; (800172c <esp8266_start_webserver+0x188>)
 8001712:	f7ff fee7 	bl	80014e4 <esp8266_response_contains>
 8001716:	4603      	mov	r3, r0
 8001718:	f083 0301 	eor.w	r3, r3, #1
 800171c:	b2db      	uxtb	r3, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1ee      	bne.n	8001700 <esp8266_start_webserver+0x15c>
	}
	return true;
 8001722:	2301      	movs	r3, #1
}
 8001724:	4618      	mov	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000c64 	.word	0x20000c64
 8001730:	0800c7f0 	.word	0x0800c7f0
 8001734:	200000c8 	.word	0x200000c8
 8001738:	0800c7f4 	.word	0x0800c7f4
 800173c:	20001fec 	.word	0x20001fec
 8001740:	20000104 	.word	0x20000104

08001744 <esp8266_webserver_make_page>:



char g_page[500];
uint32_t esp8266_webserver_make_page(char* title, char* contents)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
	uint16_t page_index = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	81fb      	strh	r3, [r7, #14]
	strcpy(g_page, esp8266_page_header);
 8001752:	491e      	ldr	r1, [pc, #120]	; (80017cc <esp8266_webserver_make_page+0x88>)
 8001754:	481e      	ldr	r0, [pc, #120]	; (80017d0 <esp8266_webserver_make_page+0x8c>)
 8001756:	f00a f994 	bl	800ba82 <strcpy>
	page_index = strlen(g_page);
 800175a:	481d      	ldr	r0, [pc, #116]	; (80017d0 <esp8266_webserver_make_page+0x8c>)
 800175c:	f7fe fd38 	bl	80001d0 <strlen>
 8001760:	4603      	mov	r3, r0
 8001762:	81fb      	strh	r3, [r7, #14]
	strcpy(g_page + page_index, title);
 8001764:	89fb      	ldrh	r3, [r7, #14]
 8001766:	4a1a      	ldr	r2, [pc, #104]	; (80017d0 <esp8266_webserver_make_page+0x8c>)
 8001768:	4413      	add	r3, r2
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	4618      	mov	r0, r3
 800176e:	f00a f988 	bl	800ba82 <strcpy>
	page_index = strlen(g_page);
 8001772:	4817      	ldr	r0, [pc, #92]	; (80017d0 <esp8266_webserver_make_page+0x8c>)
 8001774:	f7fe fd2c 	bl	80001d0 <strlen>
 8001778:	4603      	mov	r3, r0
 800177a:	81fb      	strh	r3, [r7, #14]
	strcpy(g_page + page_index, esp8266_page_mid);
 800177c:	89fb      	ldrh	r3, [r7, #14]
 800177e:	4a14      	ldr	r2, [pc, #80]	; (80017d0 <esp8266_webserver_make_page+0x8c>)
 8001780:	4413      	add	r3, r2
 8001782:	4914      	ldr	r1, [pc, #80]	; (80017d4 <esp8266_webserver_make_page+0x90>)
 8001784:	4618      	mov	r0, r3
 8001786:	f00a f97c 	bl	800ba82 <strcpy>
	page_index = strlen(g_page);
 800178a:	4811      	ldr	r0, [pc, #68]	; (80017d0 <esp8266_webserver_make_page+0x8c>)
 800178c:	f7fe fd20 	bl	80001d0 <strlen>
 8001790:	4603      	mov	r3, r0
 8001792:	81fb      	strh	r3, [r7, #14]
	strcpy(g_page + page_index, contents);
 8001794:	89fb      	ldrh	r3, [r7, #14]
 8001796:	4a0e      	ldr	r2, [pc, #56]	; (80017d0 <esp8266_webserver_make_page+0x8c>)
 8001798:	4413      	add	r3, r2
 800179a:	6839      	ldr	r1, [r7, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f00a f970 	bl	800ba82 <strcpy>
	page_index = strlen(g_page);
 80017a2:	480b      	ldr	r0, [pc, #44]	; (80017d0 <esp8266_webserver_make_page+0x8c>)
 80017a4:	f7fe fd14 	bl	80001d0 <strlen>
 80017a8:	4603      	mov	r3, r0
 80017aa:	81fb      	strh	r3, [r7, #14]
	strcpy(g_page + page_index, esp8266_page_footer);
 80017ac:	89fb      	ldrh	r3, [r7, #14]
 80017ae:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <esp8266_webserver_make_page+0x8c>)
 80017b0:	4413      	add	r3, r2
 80017b2:	4909      	ldr	r1, [pc, #36]	; (80017d8 <esp8266_webserver_make_page+0x94>)
 80017b4:	4618      	mov	r0, r3
 80017b6:	f00a f964 	bl	800ba82 <strcpy>
	return strlen(g_page);
 80017ba:	4805      	ldr	r0, [pc, #20]	; (80017d0 <esp8266_webserver_make_page+0x8c>)
 80017bc:	f7fe fd08 	bl	80001d0 <strlen>
 80017c0:	4603      	mov	r3, r0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000108 	.word	0x20000108
 80017d0:	200021f4 	.word	0x200021f4
 80017d4:	200001b0 	.word	0x200001b0
 80017d8:	200001f4 	.word	0x200001f4

080017dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	6039      	str	r1, [r7, #0]
 80017e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	db0a      	blt.n	8001806 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	490c      	ldr	r1, [pc, #48]	; (8001828 <__NVIC_SetPriority+0x4c>)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	0112      	lsls	r2, r2, #4
 80017fc:	b2d2      	uxtb	r2, r2
 80017fe:	440b      	add	r3, r1
 8001800:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001804:	e00a      	b.n	800181c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	b2da      	uxtb	r2, r3
 800180a:	4908      	ldr	r1, [pc, #32]	; (800182c <__NVIC_SetPriority+0x50>)
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	3b04      	subs	r3, #4
 8001814:	0112      	lsls	r2, r2, #4
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	440b      	add	r3, r1
 800181a:	761a      	strb	r2, [r3, #24]
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000e100 	.word	0xe000e100
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001834:	4b05      	ldr	r3, [pc, #20]	; (800184c <SysTick_Handler+0x1c>)
 8001836:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001838:	f001 fd10 	bl	800325c <xTaskGetSchedulerState>
 800183c:	4603      	mov	r3, r0
 800183e:	2b01      	cmp	r3, #1
 8001840:	d001      	beq.n	8001846 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001842:	f002 fc31 	bl	80040a8 <xPortSysTickHandler>
  }
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	e000e010 	.word	0xe000e010

08001850 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001854:	2100      	movs	r1, #0
 8001856:	f06f 0004 	mvn.w	r0, #4
 800185a:	f7ff ffbf 	bl	80017dc <__NVIC_SetPriority>
#endif
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800186a:	f3ef 8305 	mrs	r3, IPSR
 800186e:	603b      	str	r3, [r7, #0]
  return(result);
 8001870:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001876:	f06f 0305 	mvn.w	r3, #5
 800187a:	607b      	str	r3, [r7, #4]
 800187c:	e00c      	b.n	8001898 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800187e:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <osKernelInitialize+0x44>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d105      	bne.n	8001892 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001886:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <osKernelInitialize+0x44>)
 8001888:	2201      	movs	r2, #1
 800188a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800188c:	2300      	movs	r3, #0
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	e002      	b.n	8001898 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001892:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001896:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001898:	687b      	ldr	r3, [r7, #4]
}
 800189a:	4618      	mov	r0, r3
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	200023e8 	.word	0x200023e8

080018ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80018b2:	f3ef 8305 	mrs	r3, IPSR
 80018b6:	603b      	str	r3, [r7, #0]
  return(result);
 80018b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80018be:	f06f 0305 	mvn.w	r3, #5
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	e010      	b.n	80018e8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80018c6:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <osKernelStart+0x48>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d109      	bne.n	80018e2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80018ce:	f7ff ffbf 	bl	8001850 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80018d2:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <osKernelStart+0x48>)
 80018d4:	2202      	movs	r2, #2
 80018d6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80018d8:	f001 f866 	bl	80029a8 <vTaskStartScheduler>
      stat = osOK;
 80018dc:	2300      	movs	r3, #0
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	e002      	b.n	80018e8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80018e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80018e8:	687b      	ldr	r3, [r7, #4]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	200023e8 	.word	0x200023e8

080018f8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08e      	sub	sp, #56	; 0x38
 80018fc:	af04      	add	r7, sp, #16
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001904:	2300      	movs	r3, #0
 8001906:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001908:	f3ef 8305 	mrs	r3, IPSR
 800190c:	617b      	str	r3, [r7, #20]
  return(result);
 800190e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001910:	2b00      	cmp	r3, #0
 8001912:	d17e      	bne.n	8001a12 <osThreadNew+0x11a>
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d07b      	beq.n	8001a12 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800191a:	2380      	movs	r3, #128	; 0x80
 800191c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800191e:	2318      	movs	r3, #24
 8001920:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001922:	2300      	movs	r3, #0
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8001926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800192a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d045      	beq.n	80019be <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d002      	beq.n	8001940 <osThreadNew+0x48>
        name = attr->name;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d002      	beq.n	800194e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d008      	beq.n	8001966 <osThreadNew+0x6e>
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	2b38      	cmp	r3, #56	; 0x38
 8001958:	d805      	bhi.n	8001966 <osThreadNew+0x6e>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <osThreadNew+0x72>
        return (NULL);
 8001966:	2300      	movs	r3, #0
 8001968:	e054      	b.n	8001a14 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	089b      	lsrs	r3, r3, #2
 8001978:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d00e      	beq.n	80019a0 <osThreadNew+0xa8>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	2b5b      	cmp	r3, #91	; 0x5b
 8001988:	d90a      	bls.n	80019a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800198e:	2b00      	cmp	r3, #0
 8001990:	d006      	beq.n	80019a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d002      	beq.n	80019a0 <osThreadNew+0xa8>
        mem = 1;
 800199a:	2301      	movs	r3, #1
 800199c:	61bb      	str	r3, [r7, #24]
 800199e:	e010      	b.n	80019c2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d10c      	bne.n	80019c2 <osThreadNew+0xca>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d108      	bne.n	80019c2 <osThreadNew+0xca>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d104      	bne.n	80019c2 <osThreadNew+0xca>
          mem = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61bb      	str	r3, [r7, #24]
 80019bc:	e001      	b.n	80019c2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d110      	bne.n	80019ea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80019d0:	9202      	str	r2, [sp, #8]
 80019d2:	9301      	str	r3, [sp, #4]
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	6a3a      	ldr	r2, [r7, #32]
 80019dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	f000 fe0c 	bl	80025fc <xTaskCreateStatic>
 80019e4:	4603      	mov	r3, r0
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	e013      	b.n	8001a12 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d110      	bne.n	8001a12 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80019f0:	6a3b      	ldr	r3, [r7, #32]
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	f107 0310 	add.w	r3, r7, #16
 80019f8:	9301      	str	r3, [sp, #4]
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f000 fe57 	bl	80026b6 <xTaskCreate>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d001      	beq.n	8001a12 <osThreadNew+0x11a>
            hTask = NULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001a12:	693b      	ldr	r3, [r7, #16]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3728      	adds	r7, #40	; 0x28
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a24:	f3ef 8305 	mrs	r3, IPSR
 8001a28:	60bb      	str	r3, [r7, #8]
  return(result);
 8001a2a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <osDelay+0x1c>
    stat = osErrorISR;
 8001a30:	f06f 0305 	mvn.w	r3, #5
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	e007      	b.n	8001a48 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d002      	beq.n	8001a48 <osDelay+0x2c>
      vTaskDelay(ticks);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 ff7c 	bl	8002940 <vTaskDelay>
    }
  }

  return (stat);
 8001a48:	68fb      	ldr	r3, [r7, #12]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
	...

08001a54 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4a07      	ldr	r2, [pc, #28]	; (8001a80 <vApplicationGetIdleTaskMemory+0x2c>)
 8001a64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	4a06      	ldr	r2, [pc, #24]	; (8001a84 <vApplicationGetIdleTaskMemory+0x30>)
 8001a6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2280      	movs	r2, #128	; 0x80
 8001a70:	601a      	str	r2, [r3, #0]
}
 8001a72:	bf00      	nop
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	200023ec 	.word	0x200023ec
 8001a84:	20002448 	.word	0x20002448

08001a88 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4a07      	ldr	r2, [pc, #28]	; (8001ab4 <vApplicationGetTimerTaskMemory+0x2c>)
 8001a98:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	4a06      	ldr	r2, [pc, #24]	; (8001ab8 <vApplicationGetTimerTaskMemory+0x30>)
 8001a9e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aa6:	601a      	str	r2, [r3, #0]
}
 8001aa8:	bf00      	nop
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	20002648 	.word	0x20002648
 8001ab8:	200026a4 	.word	0x200026a4

08001abc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f103 0208 	add.w	r2, r3, #8
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ad4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f103 0208 	add.w	r2, r3, #8
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f103 0208 	add.w	r2, r3, #8
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b16:	b480      	push	{r7}
 8001b18:	b085      	sub	sp, #20
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
 8001b1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	1c5a      	adds	r2, r3, #1
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	601a      	str	r2, [r3, #0]
}
 8001b52:	bf00      	nop
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b085      	sub	sp, #20
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b74:	d103      	bne.n	8001b7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	e00c      	b.n	8001b98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	3308      	adds	r3, #8
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	e002      	b.n	8001b8c <vListInsert+0x2e>
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d2f6      	bcs.n	8001b86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	1c5a      	adds	r2, r3, #1
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	601a      	str	r2, [r3, #0]
}
 8001bc4:	bf00      	nop
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	6892      	ldr	r2, [r2, #8]
 8001be6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6852      	ldr	r2, [r2, #4]
 8001bf0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d103      	bne.n	8001c04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	1e5a      	subs	r2, r3, #1
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d10a      	bne.n	8001c4e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c3c:	f383 8811 	msr	BASEPRI, r3
 8001c40:	f3bf 8f6f 	isb	sy
 8001c44:	f3bf 8f4f 	dsb	sy
 8001c48:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001c4a:	bf00      	nop
 8001c4c:	e7fe      	b.n	8001c4c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001c4e:	f002 f999 	bl	8003f84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c5a:	68f9      	ldr	r1, [r7, #12]
 8001c5c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001c5e:	fb01 f303 	mul.w	r3, r1, r3
 8001c62:	441a      	add	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	68f9      	ldr	r1, [r7, #12]
 8001c82:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001c84:	fb01 f303 	mul.w	r3, r1, r3
 8001c88:	441a      	add	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	22ff      	movs	r2, #255	; 0xff
 8001c92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	22ff      	movs	r2, #255	; 0xff
 8001c9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d114      	bne.n	8001cce <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d01a      	beq.n	8001ce2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	3310      	adds	r3, #16
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f001 f915 	bl	8002ee0 <xTaskRemoveFromEventList>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d012      	beq.n	8001ce2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <xQueueGenericReset+0xcc>)
 8001cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	f3bf 8f4f 	dsb	sy
 8001cc8:	f3bf 8f6f 	isb	sy
 8001ccc:	e009      	b.n	8001ce2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	3310      	adds	r3, #16
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff fef2 	bl	8001abc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	3324      	adds	r3, #36	; 0x24
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff feed 	bl	8001abc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001ce2:	f002 f97f 	bl	8003fe4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001ce6:	2301      	movs	r3, #1
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	e000ed04 	.word	0xe000ed04

08001cf4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08e      	sub	sp, #56	; 0x38
 8001cf8:	af02      	add	r7, sp, #8
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
 8001d00:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d10a      	bne.n	8001d1e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8001d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d0c:	f383 8811 	msr	BASEPRI, r3
 8001d10:	f3bf 8f6f 	isb	sy
 8001d14:	f3bf 8f4f 	dsb	sy
 8001d18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001d1a:	bf00      	nop
 8001d1c:	e7fe      	b.n	8001d1c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d10a      	bne.n	8001d3a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8001d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d28:	f383 8811 	msr	BASEPRI, r3
 8001d2c:	f3bf 8f6f 	isb	sy
 8001d30:	f3bf 8f4f 	dsb	sy
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001d36:	bf00      	nop
 8001d38:	e7fe      	b.n	8001d38 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d002      	beq.n	8001d46 <xQueueGenericCreateStatic+0x52>
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <xQueueGenericCreateStatic+0x56>
 8001d46:	2301      	movs	r3, #1
 8001d48:	e000      	b.n	8001d4c <xQueueGenericCreateStatic+0x58>
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d10a      	bne.n	8001d66 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8001d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d54:	f383 8811 	msr	BASEPRI, r3
 8001d58:	f3bf 8f6f 	isb	sy
 8001d5c:	f3bf 8f4f 	dsb	sy
 8001d60:	623b      	str	r3, [r7, #32]
}
 8001d62:	bf00      	nop
 8001d64:	e7fe      	b.n	8001d64 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d102      	bne.n	8001d72 <xQueueGenericCreateStatic+0x7e>
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <xQueueGenericCreateStatic+0x82>
 8001d72:	2301      	movs	r3, #1
 8001d74:	e000      	b.n	8001d78 <xQueueGenericCreateStatic+0x84>
 8001d76:	2300      	movs	r3, #0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d10a      	bne.n	8001d92 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8001d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d80:	f383 8811 	msr	BASEPRI, r3
 8001d84:	f3bf 8f6f 	isb	sy
 8001d88:	f3bf 8f4f 	dsb	sy
 8001d8c:	61fb      	str	r3, [r7, #28]
}
 8001d8e:	bf00      	nop
 8001d90:	e7fe      	b.n	8001d90 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001d92:	2350      	movs	r3, #80	; 0x50
 8001d94:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	2b50      	cmp	r3, #80	; 0x50
 8001d9a:	d00a      	beq.n	8001db2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8001d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001da0:	f383 8811 	msr	BASEPRI, r3
 8001da4:	f3bf 8f6f 	isb	sy
 8001da8:	f3bf 8f4f 	dsb	sy
 8001dac:	61bb      	str	r3, [r7, #24]
}
 8001dae:	bf00      	nop
 8001db0:	e7fe      	b.n	8001db0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001db2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00d      	beq.n	8001dda <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001dc6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	68b9      	ldr	r1, [r7, #8]
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f000 f805 	bl	8001de4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3730      	adds	r7, #48	; 0x30
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
 8001df0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d103      	bne.n	8001e00 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	e002      	b.n	8001e06 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001e12:	2101      	movs	r1, #1
 8001e14:	69b8      	ldr	r0, [r7, #24]
 8001e16:	f7ff ff05 	bl	8001c24 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	78fa      	ldrb	r2, [r7, #3]
 8001e1e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001e22:	bf00      	nop
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
	...

08001e2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b08e      	sub	sp, #56	; 0x38
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
 8001e38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d10a      	bne.n	8001e5e <xQueueGenericSend+0x32>
	__asm volatile
 8001e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e4c:	f383 8811 	msr	BASEPRI, r3
 8001e50:	f3bf 8f6f 	isb	sy
 8001e54:	f3bf 8f4f 	dsb	sy
 8001e58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001e5a:	bf00      	nop
 8001e5c:	e7fe      	b.n	8001e5c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d103      	bne.n	8001e6c <xQueueGenericSend+0x40>
 8001e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <xQueueGenericSend+0x44>
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e000      	b.n	8001e72 <xQueueGenericSend+0x46>
 8001e70:	2300      	movs	r3, #0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10a      	bne.n	8001e8c <xQueueGenericSend+0x60>
	__asm volatile
 8001e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e7a:	f383 8811 	msr	BASEPRI, r3
 8001e7e:	f3bf 8f6f 	isb	sy
 8001e82:	f3bf 8f4f 	dsb	sy
 8001e86:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001e88:	bf00      	nop
 8001e8a:	e7fe      	b.n	8001e8a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d103      	bne.n	8001e9a <xQueueGenericSend+0x6e>
 8001e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d101      	bne.n	8001e9e <xQueueGenericSend+0x72>
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <xQueueGenericSend+0x74>
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10a      	bne.n	8001eba <xQueueGenericSend+0x8e>
	__asm volatile
 8001ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ea8:	f383 8811 	msr	BASEPRI, r3
 8001eac:	f3bf 8f6f 	isb	sy
 8001eb0:	f3bf 8f4f 	dsb	sy
 8001eb4:	623b      	str	r3, [r7, #32]
}
 8001eb6:	bf00      	nop
 8001eb8:	e7fe      	b.n	8001eb8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001eba:	f001 f9cf 	bl	800325c <xTaskGetSchedulerState>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d102      	bne.n	8001eca <xQueueGenericSend+0x9e>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <xQueueGenericSend+0xa2>
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e000      	b.n	8001ed0 <xQueueGenericSend+0xa4>
 8001ece:	2300      	movs	r3, #0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10a      	bne.n	8001eea <xQueueGenericSend+0xbe>
	__asm volatile
 8001ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ed8:	f383 8811 	msr	BASEPRI, r3
 8001edc:	f3bf 8f6f 	isb	sy
 8001ee0:	f3bf 8f4f 	dsb	sy
 8001ee4:	61fb      	str	r3, [r7, #28]
}
 8001ee6:	bf00      	nop
 8001ee8:	e7fe      	b.n	8001ee8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001eea:	f002 f84b 	bl	8003f84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d302      	bcc.n	8001f00 <xQueueGenericSend+0xd4>
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d129      	bne.n	8001f54 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	68b9      	ldr	r1, [r7, #8]
 8001f04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f06:	f000 fa0b 	bl	8002320 <prvCopyDataToQueue>
 8001f0a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d010      	beq.n	8001f36 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f16:	3324      	adds	r3, #36	; 0x24
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f000 ffe1 	bl	8002ee0 <xTaskRemoveFromEventList>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d013      	beq.n	8001f4c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001f24:	4b3f      	ldr	r3, [pc, #252]	; (8002024 <xQueueGenericSend+0x1f8>)
 8001f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	f3bf 8f4f 	dsb	sy
 8001f30:	f3bf 8f6f 	isb	sy
 8001f34:	e00a      	b.n	8001f4c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d007      	beq.n	8001f4c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001f3c:	4b39      	ldr	r3, [pc, #228]	; (8002024 <xQueueGenericSend+0x1f8>)
 8001f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	f3bf 8f4f 	dsb	sy
 8001f48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001f4c:	f002 f84a 	bl	8003fe4 <vPortExitCritical>
				return pdPASS;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e063      	b.n	800201c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d103      	bne.n	8001f62 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001f5a:	f002 f843 	bl	8003fe4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	e05c      	b.n	800201c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d106      	bne.n	8001f76 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f001 f81b 	bl	8002fa8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001f72:	2301      	movs	r3, #1
 8001f74:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001f76:	f002 f835 	bl	8003fe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001f7a:	f000 fd7b 	bl	8002a74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001f7e:	f002 f801 	bl	8003f84 <vPortEnterCritical>
 8001f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f88:	b25b      	sxtb	r3, r3
 8001f8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f8e:	d103      	bne.n	8001f98 <xQueueGenericSend+0x16c>
 8001f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f9e:	b25b      	sxtb	r3, r3
 8001fa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fa4:	d103      	bne.n	8001fae <xQueueGenericSend+0x182>
 8001fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001fae:	f002 f819 	bl	8003fe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001fb2:	1d3a      	adds	r2, r7, #4
 8001fb4:	f107 0314 	add.w	r3, r7, #20
 8001fb8:	4611      	mov	r1, r2
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f001 f80a 	bl	8002fd4 <xTaskCheckForTimeOut>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d124      	bne.n	8002010 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001fc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001fc8:	f000 faa2 	bl	8002510 <prvIsQueueFull>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d018      	beq.n	8002004 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd4:	3310      	adds	r3, #16
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	4611      	mov	r1, r2
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 ff30 	bl	8002e40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001fe0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001fe2:	f000 fa2d 	bl	8002440 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001fe6:	f000 fd53 	bl	8002a90 <xTaskResumeAll>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f47f af7c 	bne.w	8001eea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8001ff2:	4b0c      	ldr	r3, [pc, #48]	; (8002024 <xQueueGenericSend+0x1f8>)
 8001ff4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	f3bf 8f4f 	dsb	sy
 8001ffe:	f3bf 8f6f 	isb	sy
 8002002:	e772      	b.n	8001eea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002004:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002006:	f000 fa1b 	bl	8002440 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800200a:	f000 fd41 	bl	8002a90 <xTaskResumeAll>
 800200e:	e76c      	b.n	8001eea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002010:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002012:	f000 fa15 	bl	8002440 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002016:	f000 fd3b 	bl	8002a90 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800201a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800201c:	4618      	mov	r0, r3
 800201e:	3738      	adds	r7, #56	; 0x38
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	e000ed04 	.word	0xe000ed04

08002028 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b090      	sub	sp, #64	; 0x40
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
 8002034:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800203a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800203c:	2b00      	cmp	r3, #0
 800203e:	d10a      	bne.n	8002056 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002044:	f383 8811 	msr	BASEPRI, r3
 8002048:	f3bf 8f6f 	isb	sy
 800204c:	f3bf 8f4f 	dsb	sy
 8002050:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002052:	bf00      	nop
 8002054:	e7fe      	b.n	8002054 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d103      	bne.n	8002064 <xQueueGenericSendFromISR+0x3c>
 800205c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <xQueueGenericSendFromISR+0x40>
 8002064:	2301      	movs	r3, #1
 8002066:	e000      	b.n	800206a <xQueueGenericSendFromISR+0x42>
 8002068:	2300      	movs	r3, #0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10a      	bne.n	8002084 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800206e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002072:	f383 8811 	msr	BASEPRI, r3
 8002076:	f3bf 8f6f 	isb	sy
 800207a:	f3bf 8f4f 	dsb	sy
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002080:	bf00      	nop
 8002082:	e7fe      	b.n	8002082 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d103      	bne.n	8002092 <xQueueGenericSendFromISR+0x6a>
 800208a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800208c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800208e:	2b01      	cmp	r3, #1
 8002090:	d101      	bne.n	8002096 <xQueueGenericSendFromISR+0x6e>
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <xQueueGenericSendFromISR+0x70>
 8002096:	2300      	movs	r3, #0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10a      	bne.n	80020b2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800209c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020a0:	f383 8811 	msr	BASEPRI, r3
 80020a4:	f3bf 8f6f 	isb	sy
 80020a8:	f3bf 8f4f 	dsb	sy
 80020ac:	623b      	str	r3, [r7, #32]
}
 80020ae:	bf00      	nop
 80020b0:	e7fe      	b.n	80020b0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80020b2:	f002 f849 	bl	8004148 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80020b6:	f3ef 8211 	mrs	r2, BASEPRI
 80020ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020be:	f383 8811 	msr	BASEPRI, r3
 80020c2:	f3bf 8f6f 	isb	sy
 80020c6:	f3bf 8f4f 	dsb	sy
 80020ca:	61fa      	str	r2, [r7, #28]
 80020cc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80020ce:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80020d0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80020d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020da:	429a      	cmp	r2, r3
 80020dc:	d302      	bcc.n	80020e4 <xQueueGenericSendFromISR+0xbc>
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d12f      	bne.n	8002144 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80020e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80020ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	68b9      	ldr	r1, [r7, #8]
 80020f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80020fa:	f000 f911 	bl	8002320 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80020fe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002102:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002106:	d112      	bne.n	800212e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800210a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210c:	2b00      	cmp	r3, #0
 800210e:	d016      	beq.n	800213e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002112:	3324      	adds	r3, #36	; 0x24
 8002114:	4618      	mov	r0, r3
 8002116:	f000 fee3 	bl	8002ee0 <xTaskRemoveFromEventList>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00e      	beq.n	800213e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00b      	beq.n	800213e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	e007      	b.n	800213e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800212e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002132:	3301      	adds	r3, #1
 8002134:	b2db      	uxtb	r3, r3
 8002136:	b25a      	sxtb	r2, r3
 8002138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800213a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800213e:	2301      	movs	r3, #1
 8002140:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002142:	e001      	b.n	8002148 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002144:	2300      	movs	r3, #0
 8002146:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800214a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002152:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002156:	4618      	mov	r0, r3
 8002158:	3740      	adds	r7, #64	; 0x40
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
	...

08002160 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08c      	sub	sp, #48	; 0x30
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800216c:	2300      	movs	r3, #0
 800216e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10a      	bne.n	8002190 <xQueueReceive+0x30>
	__asm volatile
 800217a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800217e:	f383 8811 	msr	BASEPRI, r3
 8002182:	f3bf 8f6f 	isb	sy
 8002186:	f3bf 8f4f 	dsb	sy
 800218a:	623b      	str	r3, [r7, #32]
}
 800218c:	bf00      	nop
 800218e:	e7fe      	b.n	800218e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d103      	bne.n	800219e <xQueueReceive+0x3e>
 8002196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <xQueueReceive+0x42>
 800219e:	2301      	movs	r3, #1
 80021a0:	e000      	b.n	80021a4 <xQueueReceive+0x44>
 80021a2:	2300      	movs	r3, #0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10a      	bne.n	80021be <xQueueReceive+0x5e>
	__asm volatile
 80021a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ac:	f383 8811 	msr	BASEPRI, r3
 80021b0:	f3bf 8f6f 	isb	sy
 80021b4:	f3bf 8f4f 	dsb	sy
 80021b8:	61fb      	str	r3, [r7, #28]
}
 80021ba:	bf00      	nop
 80021bc:	e7fe      	b.n	80021bc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80021be:	f001 f84d 	bl	800325c <xTaskGetSchedulerState>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d102      	bne.n	80021ce <xQueueReceive+0x6e>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <xQueueReceive+0x72>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <xQueueReceive+0x74>
 80021d2:	2300      	movs	r3, #0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d10a      	bne.n	80021ee <xQueueReceive+0x8e>
	__asm volatile
 80021d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021dc:	f383 8811 	msr	BASEPRI, r3
 80021e0:	f3bf 8f6f 	isb	sy
 80021e4:	f3bf 8f4f 	dsb	sy
 80021e8:	61bb      	str	r3, [r7, #24]
}
 80021ea:	bf00      	nop
 80021ec:	e7fe      	b.n	80021ec <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80021ee:	f001 fec9 	bl	8003f84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80021f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d01f      	beq.n	800223e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80021fe:	68b9      	ldr	r1, [r7, #8]
 8002200:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002202:	f000 f8f7 	bl	80023f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	1e5a      	subs	r2, r3, #1
 800220a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800220c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800220e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00f      	beq.n	8002236 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002218:	3310      	adds	r3, #16
 800221a:	4618      	mov	r0, r3
 800221c:	f000 fe60 	bl	8002ee0 <xTaskRemoveFromEventList>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d007      	beq.n	8002236 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002226:	4b3d      	ldr	r3, [pc, #244]	; (800231c <xQueueReceive+0x1bc>)
 8002228:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	f3bf 8f4f 	dsb	sy
 8002232:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002236:	f001 fed5 	bl	8003fe4 <vPortExitCritical>
				return pdPASS;
 800223a:	2301      	movs	r3, #1
 800223c:	e069      	b.n	8002312 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d103      	bne.n	800224c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002244:	f001 fece 	bl	8003fe4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002248:	2300      	movs	r3, #0
 800224a:	e062      	b.n	8002312 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800224c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800224e:	2b00      	cmp	r3, #0
 8002250:	d106      	bne.n	8002260 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002252:	f107 0310 	add.w	r3, r7, #16
 8002256:	4618      	mov	r0, r3
 8002258:	f000 fea6 	bl	8002fa8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800225c:	2301      	movs	r3, #1
 800225e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002260:	f001 fec0 	bl	8003fe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002264:	f000 fc06 	bl	8002a74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002268:	f001 fe8c 	bl	8003f84 <vPortEnterCritical>
 800226c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002272:	b25b      	sxtb	r3, r3
 8002274:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002278:	d103      	bne.n	8002282 <xQueueReceive+0x122>
 800227a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002284:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002288:	b25b      	sxtb	r3, r3
 800228a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800228e:	d103      	bne.n	8002298 <xQueueReceive+0x138>
 8002290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002298:	f001 fea4 	bl	8003fe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800229c:	1d3a      	adds	r2, r7, #4
 800229e:	f107 0310 	add.w	r3, r7, #16
 80022a2:	4611      	mov	r1, r2
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 fe95 	bl	8002fd4 <xTaskCheckForTimeOut>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d123      	bne.n	80022f8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80022b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022b2:	f000 f917 	bl	80024e4 <prvIsQueueEmpty>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d017      	beq.n	80022ec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80022bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022be:	3324      	adds	r3, #36	; 0x24
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	4611      	mov	r1, r2
 80022c4:	4618      	mov	r0, r3
 80022c6:	f000 fdbb 	bl	8002e40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80022ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022cc:	f000 f8b8 	bl	8002440 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80022d0:	f000 fbde 	bl	8002a90 <xTaskResumeAll>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d189      	bne.n	80021ee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80022da:	4b10      	ldr	r3, [pc, #64]	; (800231c <xQueueReceive+0x1bc>)
 80022dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	f3bf 8f4f 	dsb	sy
 80022e6:	f3bf 8f6f 	isb	sy
 80022ea:	e780      	b.n	80021ee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80022ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022ee:	f000 f8a7 	bl	8002440 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80022f2:	f000 fbcd 	bl	8002a90 <xTaskResumeAll>
 80022f6:	e77a      	b.n	80021ee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80022f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022fa:	f000 f8a1 	bl	8002440 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80022fe:	f000 fbc7 	bl	8002a90 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002302:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002304:	f000 f8ee 	bl	80024e4 <prvIsQueueEmpty>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	f43f af6f 	beq.w	80021ee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002310:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002312:	4618      	mov	r0, r3
 8002314:	3730      	adds	r7, #48	; 0x30
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	e000ed04 	.word	0xe000ed04

08002320 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002334:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10d      	bne.n	800235a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d14d      	bne.n	80023e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	4618      	mov	r0, r3
 800234c:	f000 ffa4 	bl	8003298 <xTaskPriorityDisinherit>
 8002350:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	609a      	str	r2, [r3, #8]
 8002358:	e043      	b.n	80023e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d119      	bne.n	8002394 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6858      	ldr	r0, [r3, #4]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	461a      	mov	r2, r3
 800236a:	68b9      	ldr	r1, [r7, #8]
 800236c:	f009 fb7b 	bl	800ba66 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002378:	441a      	add	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	429a      	cmp	r2, r3
 8002388:	d32b      	bcc.n	80023e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	e026      	b.n	80023e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	68d8      	ldr	r0, [r3, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	461a      	mov	r2, r3
 800239e:	68b9      	ldr	r1, [r7, #8]
 80023a0:	f009 fb61 	bl	800ba66 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	68da      	ldr	r2, [r3, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ac:	425b      	negs	r3, r3
 80023ae:	441a      	add	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d207      	bcs.n	80023d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	425b      	negs	r3, r3
 80023ca:	441a      	add	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d105      	bne.n	80023e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d002      	beq.n	80023e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	3b01      	subs	r3, #1
 80023e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1c5a      	adds	r2, r3, #1
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80023ea:	697b      	ldr	r3, [r7, #20]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3718      	adds	r7, #24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	2b00      	cmp	r3, #0
 8002404:	d018      	beq.n	8002438 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68da      	ldr	r2, [r3, #12]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	441a      	add	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68da      	ldr	r2, [r3, #12]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	429a      	cmp	r2, r3
 800241e:	d303      	bcc.n	8002428 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68d9      	ldr	r1, [r3, #12]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	461a      	mov	r2, r3
 8002432:	6838      	ldr	r0, [r7, #0]
 8002434:	f009 fb17 	bl	800ba66 <memcpy>
	}
}
 8002438:	bf00      	nop
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002448:	f001 fd9c 	bl	8003f84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002452:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002454:	e011      	b.n	800247a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	2b00      	cmp	r3, #0
 800245c:	d012      	beq.n	8002484 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3324      	adds	r3, #36	; 0x24
 8002462:	4618      	mov	r0, r3
 8002464:	f000 fd3c 	bl	8002ee0 <xTaskRemoveFromEventList>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800246e:	f000 fe13 	bl	8003098 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002472:	7bfb      	ldrb	r3, [r7, #15]
 8002474:	3b01      	subs	r3, #1
 8002476:	b2db      	uxtb	r3, r3
 8002478:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800247a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800247e:	2b00      	cmp	r3, #0
 8002480:	dce9      	bgt.n	8002456 <prvUnlockQueue+0x16>
 8002482:	e000      	b.n	8002486 <prvUnlockQueue+0x46>
					break;
 8002484:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	22ff      	movs	r2, #255	; 0xff
 800248a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800248e:	f001 fda9 	bl	8003fe4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002492:	f001 fd77 	bl	8003f84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800249c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800249e:	e011      	b.n	80024c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d012      	beq.n	80024ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3310      	adds	r3, #16
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 fd17 	bl	8002ee0 <xTaskRemoveFromEventList>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80024b8:	f000 fdee 	bl	8003098 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80024bc:	7bbb      	ldrb	r3, [r7, #14]
 80024be:	3b01      	subs	r3, #1
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80024c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	dce9      	bgt.n	80024a0 <prvUnlockQueue+0x60>
 80024cc:	e000      	b.n	80024d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80024ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	22ff      	movs	r2, #255	; 0xff
 80024d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80024d8:	f001 fd84 	bl	8003fe4 <vPortExitCritical>
}
 80024dc:	bf00      	nop
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80024ec:	f001 fd4a 	bl	8003f84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d102      	bne.n	80024fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80024f8:	2301      	movs	r3, #1
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	e001      	b.n	8002502 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002502:	f001 fd6f 	bl	8003fe4 <vPortExitCritical>

	return xReturn;
 8002506:	68fb      	ldr	r3, [r7, #12]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002518:	f001 fd34 	bl	8003f84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002524:	429a      	cmp	r2, r3
 8002526:	d102      	bne.n	800252e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002528:	2301      	movs	r3, #1
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	e001      	b.n	8002532 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800252e:	2300      	movs	r3, #0
 8002530:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002532:	f001 fd57 	bl	8003fe4 <vPortExitCritical>

	return xReturn;
 8002536:	68fb      	ldr	r3, [r7, #12]
}
 8002538:	4618      	mov	r0, r3
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	e014      	b.n	800257a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002550:	4a0f      	ldr	r2, [pc, #60]	; (8002590 <vQueueAddToRegistry+0x50>)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d10b      	bne.n	8002574 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800255c:	490c      	ldr	r1, [pc, #48]	; (8002590 <vQueueAddToRegistry+0x50>)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002566:	4a0a      	ldr	r2, [pc, #40]	; (8002590 <vQueueAddToRegistry+0x50>)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	4413      	add	r3, r2
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002572:	e006      	b.n	8002582 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	3301      	adds	r3, #1
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2b07      	cmp	r3, #7
 800257e:	d9e7      	bls.n	8002550 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002580:	bf00      	nop
 8002582:	bf00      	nop
 8002584:	3714      	adds	r7, #20
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	20002aa4 	.word	0x20002aa4

08002594 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80025a4:	f001 fcee 	bl	8003f84 <vPortEnterCritical>
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025ae:	b25b      	sxtb	r3, r3
 80025b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025b4:	d103      	bne.n	80025be <vQueueWaitForMessageRestricted+0x2a>
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025c4:	b25b      	sxtb	r3, r3
 80025c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025ca:	d103      	bne.n	80025d4 <vQueueWaitForMessageRestricted+0x40>
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025d4:	f001 fd06 	bl	8003fe4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d106      	bne.n	80025ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	3324      	adds	r3, #36	; 0x24
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	68b9      	ldr	r1, [r7, #8]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f000 fc4d 	bl	8002e88 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80025ee:	6978      	ldr	r0, [r7, #20]
 80025f0:	f7ff ff26 	bl	8002440 <prvUnlockQueue>
	}
 80025f4:	bf00      	nop
 80025f6:	3718      	adds	r7, #24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08e      	sub	sp, #56	; 0x38
 8002600:	af04      	add	r7, sp, #16
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
 8002608:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800260a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10a      	bne.n	8002626 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002614:	f383 8811 	msr	BASEPRI, r3
 8002618:	f3bf 8f6f 	isb	sy
 800261c:	f3bf 8f4f 	dsb	sy
 8002620:	623b      	str	r3, [r7, #32]
}
 8002622:	bf00      	nop
 8002624:	e7fe      	b.n	8002624 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002628:	2b00      	cmp	r3, #0
 800262a:	d10a      	bne.n	8002642 <xTaskCreateStatic+0x46>
	__asm volatile
 800262c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002630:	f383 8811 	msr	BASEPRI, r3
 8002634:	f3bf 8f6f 	isb	sy
 8002638:	f3bf 8f4f 	dsb	sy
 800263c:	61fb      	str	r3, [r7, #28]
}
 800263e:	bf00      	nop
 8002640:	e7fe      	b.n	8002640 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002642:	235c      	movs	r3, #92	; 0x5c
 8002644:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	2b5c      	cmp	r3, #92	; 0x5c
 800264a:	d00a      	beq.n	8002662 <xTaskCreateStatic+0x66>
	__asm volatile
 800264c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002650:	f383 8811 	msr	BASEPRI, r3
 8002654:	f3bf 8f6f 	isb	sy
 8002658:	f3bf 8f4f 	dsb	sy
 800265c:	61bb      	str	r3, [r7, #24]
}
 800265e:	bf00      	nop
 8002660:	e7fe      	b.n	8002660 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002662:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002666:	2b00      	cmp	r3, #0
 8002668:	d01e      	beq.n	80026a8 <xTaskCreateStatic+0xac>
 800266a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800266c:	2b00      	cmp	r3, #0
 800266e:	d01b      	beq.n	80026a8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002672:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002678:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	2202      	movs	r2, #2
 800267e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002682:	2300      	movs	r3, #0
 8002684:	9303      	str	r3, [sp, #12]
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	9302      	str	r3, [sp, #8]
 800268a:	f107 0314 	add.w	r3, r7, #20
 800268e:	9301      	str	r3, [sp, #4]
 8002690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	68b9      	ldr	r1, [r7, #8]
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 f850 	bl	8002740 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80026a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026a2:	f000 f8dd 	bl	8002860 <prvAddNewTaskToReadyList>
 80026a6:	e001      	b.n	80026ac <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80026ac:	697b      	ldr	r3, [r7, #20]
	}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3728      	adds	r7, #40	; 0x28
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b08c      	sub	sp, #48	; 0x30
 80026ba:	af04      	add	r7, sp, #16
 80026bc:	60f8      	str	r0, [r7, #12]
 80026be:	60b9      	str	r1, [r7, #8]
 80026c0:	603b      	str	r3, [r7, #0]
 80026c2:	4613      	mov	r3, r2
 80026c4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80026c6:	88fb      	ldrh	r3, [r7, #6]
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4618      	mov	r0, r3
 80026cc:	f001 fd7c 	bl	80041c8 <pvPortMalloc>
 80026d0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00e      	beq.n	80026f6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80026d8:	205c      	movs	r0, #92	; 0x5c
 80026da:	f001 fd75 	bl	80041c8 <pvPortMalloc>
 80026de:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	631a      	str	r2, [r3, #48]	; 0x30
 80026ec:	e005      	b.n	80026fa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80026ee:	6978      	ldr	r0, [r7, #20]
 80026f0:	f001 fe36 	bl	8004360 <vPortFree>
 80026f4:	e001      	b.n	80026fa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80026f6:	2300      	movs	r3, #0
 80026f8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d017      	beq.n	8002730 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002708:	88fa      	ldrh	r2, [r7, #6]
 800270a:	2300      	movs	r3, #0
 800270c:	9303      	str	r3, [sp, #12]
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	9302      	str	r3, [sp, #8]
 8002712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002714:	9301      	str	r3, [sp, #4]
 8002716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	68b9      	ldr	r1, [r7, #8]
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f000 f80e 	bl	8002740 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002724:	69f8      	ldr	r0, [r7, #28]
 8002726:	f000 f89b 	bl	8002860 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800272a:	2301      	movs	r3, #1
 800272c:	61bb      	str	r3, [r7, #24]
 800272e:	e002      	b.n	8002736 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002730:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002734:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002736:	69bb      	ldr	r3, [r7, #24]
	}
 8002738:	4618      	mov	r0, r3
 800273a:	3720      	adds	r7, #32
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b088      	sub	sp, #32
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
 800274c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800274e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002750:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	461a      	mov	r2, r3
 8002758:	21a5      	movs	r1, #165	; 0xa5
 800275a:	f009 f913 	bl	800b984 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800275e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002760:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002768:	3b01      	subs	r3, #1
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	f023 0307 	bic.w	r3, r3, #7
 8002776:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00a      	beq.n	8002798 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002786:	f383 8811 	msr	BASEPRI, r3
 800278a:	f3bf 8f6f 	isb	sy
 800278e:	f3bf 8f4f 	dsb	sy
 8002792:	617b      	str	r3, [r7, #20]
}
 8002794:	bf00      	nop
 8002796:	e7fe      	b.n	8002796 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d01f      	beq.n	80027de <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800279e:	2300      	movs	r3, #0
 80027a0:	61fb      	str	r3, [r7, #28]
 80027a2:	e012      	b.n	80027ca <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	4413      	add	r3, r2
 80027aa:	7819      	ldrb	r1, [r3, #0]
 80027ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	4413      	add	r3, r2
 80027b2:	3334      	adds	r3, #52	; 0x34
 80027b4:	460a      	mov	r2, r1
 80027b6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80027b8:	68ba      	ldr	r2, [r7, #8]
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	4413      	add	r3, r2
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d006      	beq.n	80027d2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	3301      	adds	r3, #1
 80027c8:	61fb      	str	r3, [r7, #28]
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	2b0f      	cmp	r3, #15
 80027ce:	d9e9      	bls.n	80027a4 <prvInitialiseNewTask+0x64>
 80027d0:	e000      	b.n	80027d4 <prvInitialiseNewTask+0x94>
			{
				break;
 80027d2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80027d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027dc:	e003      	b.n	80027e6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80027de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80027e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e8:	2b37      	cmp	r3, #55	; 0x37
 80027ea:	d901      	bls.n	80027f0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80027ec:	2337      	movs	r3, #55	; 0x37
 80027ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80027f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80027f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027fa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80027fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027fe:	2200      	movs	r2, #0
 8002800:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002804:	3304      	adds	r3, #4
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff f978 	bl	8001afc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800280c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280e:	3318      	adds	r3, #24
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff f973 	bl	8001afc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800281a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800281c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002824:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800282a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800282c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800282e:	2200      	movs	r2, #0
 8002830:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	68f9      	ldr	r1, [r7, #12]
 800283e:	69b8      	ldr	r0, [r7, #24]
 8002840:	f001 fa70 	bl	8003d24 <pxPortInitialiseStack>
 8002844:	4602      	mov	r2, r0
 8002846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002848:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800284a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284c:	2b00      	cmp	r3, #0
 800284e:	d002      	beq.n	8002856 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002854:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002856:	bf00      	nop
 8002858:	3720      	adds	r7, #32
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
	...

08002860 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002868:	f001 fb8c 	bl	8003f84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800286c:	4b2d      	ldr	r3, [pc, #180]	; (8002924 <prvAddNewTaskToReadyList+0xc4>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	3301      	adds	r3, #1
 8002872:	4a2c      	ldr	r2, [pc, #176]	; (8002924 <prvAddNewTaskToReadyList+0xc4>)
 8002874:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002876:	4b2c      	ldr	r3, [pc, #176]	; (8002928 <prvAddNewTaskToReadyList+0xc8>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d109      	bne.n	8002892 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800287e:	4a2a      	ldr	r2, [pc, #168]	; (8002928 <prvAddNewTaskToReadyList+0xc8>)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002884:	4b27      	ldr	r3, [pc, #156]	; (8002924 <prvAddNewTaskToReadyList+0xc4>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d110      	bne.n	80028ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800288c:	f000 fc28 	bl	80030e0 <prvInitialiseTaskLists>
 8002890:	e00d      	b.n	80028ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002892:	4b26      	ldr	r3, [pc, #152]	; (800292c <prvAddNewTaskToReadyList+0xcc>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d109      	bne.n	80028ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800289a:	4b23      	ldr	r3, [pc, #140]	; (8002928 <prvAddNewTaskToReadyList+0xc8>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d802      	bhi.n	80028ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80028a8:	4a1f      	ldr	r2, [pc, #124]	; (8002928 <prvAddNewTaskToReadyList+0xc8>)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80028ae:	4b20      	ldr	r3, [pc, #128]	; (8002930 <prvAddNewTaskToReadyList+0xd0>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	3301      	adds	r3, #1
 80028b4:	4a1e      	ldr	r2, [pc, #120]	; (8002930 <prvAddNewTaskToReadyList+0xd0>)
 80028b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80028b8:	4b1d      	ldr	r3, [pc, #116]	; (8002930 <prvAddNewTaskToReadyList+0xd0>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028c4:	4b1b      	ldr	r3, [pc, #108]	; (8002934 <prvAddNewTaskToReadyList+0xd4>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d903      	bls.n	80028d4 <prvAddNewTaskToReadyList+0x74>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d0:	4a18      	ldr	r2, [pc, #96]	; (8002934 <prvAddNewTaskToReadyList+0xd4>)
 80028d2:	6013      	str	r3, [r2, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028d8:	4613      	mov	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4a15      	ldr	r2, [pc, #84]	; (8002938 <prvAddNewTaskToReadyList+0xd8>)
 80028e2:	441a      	add	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3304      	adds	r3, #4
 80028e8:	4619      	mov	r1, r3
 80028ea:	4610      	mov	r0, r2
 80028ec:	f7ff f913 	bl	8001b16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80028f0:	f001 fb78 	bl	8003fe4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80028f4:	4b0d      	ldr	r3, [pc, #52]	; (800292c <prvAddNewTaskToReadyList+0xcc>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00e      	beq.n	800291a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80028fc:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <prvAddNewTaskToReadyList+0xc8>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002906:	429a      	cmp	r2, r3
 8002908:	d207      	bcs.n	800291a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800290a:	4b0c      	ldr	r3, [pc, #48]	; (800293c <prvAddNewTaskToReadyList+0xdc>)
 800290c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	f3bf 8f4f 	dsb	sy
 8002916:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800291a:	bf00      	nop
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	20002fb8 	.word	0x20002fb8
 8002928:	20002ae4 	.word	0x20002ae4
 800292c:	20002fc4 	.word	0x20002fc4
 8002930:	20002fd4 	.word	0x20002fd4
 8002934:	20002fc0 	.word	0x20002fc0
 8002938:	20002ae8 	.word	0x20002ae8
 800293c:	e000ed04 	.word	0xe000ed04

08002940 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002948:	2300      	movs	r3, #0
 800294a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d017      	beq.n	8002982 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002952:	4b13      	ldr	r3, [pc, #76]	; (80029a0 <vTaskDelay+0x60>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00a      	beq.n	8002970 <vTaskDelay+0x30>
	__asm volatile
 800295a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295e:	f383 8811 	msr	BASEPRI, r3
 8002962:	f3bf 8f6f 	isb	sy
 8002966:	f3bf 8f4f 	dsb	sy
 800296a:	60bb      	str	r3, [r7, #8]
}
 800296c:	bf00      	nop
 800296e:	e7fe      	b.n	800296e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002970:	f000 f880 	bl	8002a74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002974:	2100      	movs	r1, #0
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 fe32 	bl	80035e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800297c:	f000 f888 	bl	8002a90 <xTaskResumeAll>
 8002980:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d107      	bne.n	8002998 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002988:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <vTaskDelay+0x64>)
 800298a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	f3bf 8f4f 	dsb	sy
 8002994:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002998:	bf00      	nop
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	20002fe0 	.word	0x20002fe0
 80029a4:	e000ed04 	.word	0xe000ed04

080029a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08a      	sub	sp, #40	; 0x28
 80029ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80029ae:	2300      	movs	r3, #0
 80029b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80029b2:	2300      	movs	r3, #0
 80029b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80029b6:	463a      	mov	r2, r7
 80029b8:	1d39      	adds	r1, r7, #4
 80029ba:	f107 0308 	add.w	r3, r7, #8
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff f848 	bl	8001a54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80029c4:	6839      	ldr	r1, [r7, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68ba      	ldr	r2, [r7, #8]
 80029ca:	9202      	str	r2, [sp, #8]
 80029cc:	9301      	str	r3, [sp, #4]
 80029ce:	2300      	movs	r3, #0
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	2300      	movs	r3, #0
 80029d4:	460a      	mov	r2, r1
 80029d6:	4921      	ldr	r1, [pc, #132]	; (8002a5c <vTaskStartScheduler+0xb4>)
 80029d8:	4821      	ldr	r0, [pc, #132]	; (8002a60 <vTaskStartScheduler+0xb8>)
 80029da:	f7ff fe0f 	bl	80025fc <xTaskCreateStatic>
 80029de:	4603      	mov	r3, r0
 80029e0:	4a20      	ldr	r2, [pc, #128]	; (8002a64 <vTaskStartScheduler+0xbc>)
 80029e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80029e4:	4b1f      	ldr	r3, [pc, #124]	; (8002a64 <vTaskStartScheduler+0xbc>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d002      	beq.n	80029f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80029ec:	2301      	movs	r3, #1
 80029ee:	617b      	str	r3, [r7, #20]
 80029f0:	e001      	b.n	80029f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d102      	bne.n	8002a02 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80029fc:	f000 fe44 	bl	8003688 <xTimerCreateTimerTask>
 8002a00:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d116      	bne.n	8002a36 <vTaskStartScheduler+0x8e>
	__asm volatile
 8002a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a0c:	f383 8811 	msr	BASEPRI, r3
 8002a10:	f3bf 8f6f 	isb	sy
 8002a14:	f3bf 8f4f 	dsb	sy
 8002a18:	613b      	str	r3, [r7, #16]
}
 8002a1a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002a1c:	4b12      	ldr	r3, [pc, #72]	; (8002a68 <vTaskStartScheduler+0xc0>)
 8002a1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a22:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002a24:	4b11      	ldr	r3, [pc, #68]	; (8002a6c <vTaskStartScheduler+0xc4>)
 8002a26:	2201      	movs	r2, #1
 8002a28:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002a2a:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <vTaskStartScheduler+0xc8>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002a30:	f001 fa06 	bl	8003e40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002a34:	e00e      	b.n	8002a54 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a3c:	d10a      	bne.n	8002a54 <vTaskStartScheduler+0xac>
	__asm volatile
 8002a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a42:	f383 8811 	msr	BASEPRI, r3
 8002a46:	f3bf 8f6f 	isb	sy
 8002a4a:	f3bf 8f4f 	dsb	sy
 8002a4e:	60fb      	str	r3, [r7, #12]
}
 8002a50:	bf00      	nop
 8002a52:	e7fe      	b.n	8002a52 <vTaskStartScheduler+0xaa>
}
 8002a54:	bf00      	nop
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	0800c7fc 	.word	0x0800c7fc
 8002a60:	080030b1 	.word	0x080030b1
 8002a64:	20002fdc 	.word	0x20002fdc
 8002a68:	20002fd8 	.word	0x20002fd8
 8002a6c:	20002fc4 	.word	0x20002fc4
 8002a70:	20002fbc 	.word	0x20002fbc

08002a74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002a78:	4b04      	ldr	r3, [pc, #16]	; (8002a8c <vTaskSuspendAll+0x18>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	4a03      	ldr	r2, [pc, #12]	; (8002a8c <vTaskSuspendAll+0x18>)
 8002a80:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002a82:	bf00      	nop
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	20002fe0 	.word	0x20002fe0

08002a90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002a9e:	4b42      	ldr	r3, [pc, #264]	; (8002ba8 <xTaskResumeAll+0x118>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10a      	bne.n	8002abc <xTaskResumeAll+0x2c>
	__asm volatile
 8002aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aaa:	f383 8811 	msr	BASEPRI, r3
 8002aae:	f3bf 8f6f 	isb	sy
 8002ab2:	f3bf 8f4f 	dsb	sy
 8002ab6:	603b      	str	r3, [r7, #0]
}
 8002ab8:	bf00      	nop
 8002aba:	e7fe      	b.n	8002aba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002abc:	f001 fa62 	bl	8003f84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002ac0:	4b39      	ldr	r3, [pc, #228]	; (8002ba8 <xTaskResumeAll+0x118>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	4a38      	ldr	r2, [pc, #224]	; (8002ba8 <xTaskResumeAll+0x118>)
 8002ac8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002aca:	4b37      	ldr	r3, [pc, #220]	; (8002ba8 <xTaskResumeAll+0x118>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d162      	bne.n	8002b98 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002ad2:	4b36      	ldr	r3, [pc, #216]	; (8002bac <xTaskResumeAll+0x11c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d05e      	beq.n	8002b98 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ada:	e02f      	b.n	8002b3c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002adc:	4b34      	ldr	r3, [pc, #208]	; (8002bb0 <xTaskResumeAll+0x120>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	3318      	adds	r3, #24
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff f871 	bl	8001bd0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	3304      	adds	r3, #4
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff f86c 	bl	8001bd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002afc:	4b2d      	ldr	r3, [pc, #180]	; (8002bb4 <xTaskResumeAll+0x124>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d903      	bls.n	8002b0c <xTaskResumeAll+0x7c>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b08:	4a2a      	ldr	r2, [pc, #168]	; (8002bb4 <xTaskResumeAll+0x124>)
 8002b0a:	6013      	str	r3, [r2, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b10:	4613      	mov	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4a27      	ldr	r2, [pc, #156]	; (8002bb8 <xTaskResumeAll+0x128>)
 8002b1a:	441a      	add	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	3304      	adds	r3, #4
 8002b20:	4619      	mov	r1, r3
 8002b22:	4610      	mov	r0, r2
 8002b24:	f7fe fff7 	bl	8001b16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b2c:	4b23      	ldr	r3, [pc, #140]	; (8002bbc <xTaskResumeAll+0x12c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d302      	bcc.n	8002b3c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002b36:	4b22      	ldr	r3, [pc, #136]	; (8002bc0 <xTaskResumeAll+0x130>)
 8002b38:	2201      	movs	r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b3c:	4b1c      	ldr	r3, [pc, #112]	; (8002bb0 <xTaskResumeAll+0x120>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1cb      	bne.n	8002adc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002b4a:	f000 fb67 	bl	800321c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002b4e:	4b1d      	ldr	r3, [pc, #116]	; (8002bc4 <xTaskResumeAll+0x134>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d010      	beq.n	8002b7c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002b5a:	f000 f859 	bl	8002c10 <xTaskIncrementTick>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d002      	beq.n	8002b6a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002b64:	4b16      	ldr	r3, [pc, #88]	; (8002bc0 <xTaskResumeAll+0x130>)
 8002b66:	2201      	movs	r2, #1
 8002b68:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f1      	bne.n	8002b5a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002b76:	4b13      	ldr	r3, [pc, #76]	; (8002bc4 <xTaskResumeAll+0x134>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002b7c:	4b10      	ldr	r3, [pc, #64]	; (8002bc0 <xTaskResumeAll+0x130>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d009      	beq.n	8002b98 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002b84:	2301      	movs	r3, #1
 8002b86:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002b88:	4b0f      	ldr	r3, [pc, #60]	; (8002bc8 <xTaskResumeAll+0x138>)
 8002b8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	f3bf 8f4f 	dsb	sy
 8002b94:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002b98:	f001 fa24 	bl	8003fe4 <vPortExitCritical>

	return xAlreadyYielded;
 8002b9c:	68bb      	ldr	r3, [r7, #8]
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	20002fe0 	.word	0x20002fe0
 8002bac:	20002fb8 	.word	0x20002fb8
 8002bb0:	20002f78 	.word	0x20002f78
 8002bb4:	20002fc0 	.word	0x20002fc0
 8002bb8:	20002ae8 	.word	0x20002ae8
 8002bbc:	20002ae4 	.word	0x20002ae4
 8002bc0:	20002fcc 	.word	0x20002fcc
 8002bc4:	20002fc8 	.word	0x20002fc8
 8002bc8:	e000ed04 	.word	0xe000ed04

08002bcc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002bd2:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <xTaskGetTickCount+0x1c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002bd8:	687b      	ldr	r3, [r7, #4]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	20002fbc 	.word	0x20002fbc

08002bec <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002bf2:	f001 faa9 	bl	8004148 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8002bfa:	4b04      	ldr	r3, [pc, #16]	; (8002c0c <xTaskGetTickCountFromISR+0x20>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002c00:	683b      	ldr	r3, [r7, #0]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	20002fbc 	.word	0x20002fbc

08002c10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002c16:	2300      	movs	r3, #0
 8002c18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c1a:	4b4f      	ldr	r3, [pc, #316]	; (8002d58 <xTaskIncrementTick+0x148>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f040 808f 	bne.w	8002d42 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002c24:	4b4d      	ldr	r3, [pc, #308]	; (8002d5c <xTaskIncrementTick+0x14c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002c2c:	4a4b      	ldr	r2, [pc, #300]	; (8002d5c <xTaskIncrementTick+0x14c>)
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d120      	bne.n	8002c7a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002c38:	4b49      	ldr	r3, [pc, #292]	; (8002d60 <xTaskIncrementTick+0x150>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00a      	beq.n	8002c58 <xTaskIncrementTick+0x48>
	__asm volatile
 8002c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c46:	f383 8811 	msr	BASEPRI, r3
 8002c4a:	f3bf 8f6f 	isb	sy
 8002c4e:	f3bf 8f4f 	dsb	sy
 8002c52:	603b      	str	r3, [r7, #0]
}
 8002c54:	bf00      	nop
 8002c56:	e7fe      	b.n	8002c56 <xTaskIncrementTick+0x46>
 8002c58:	4b41      	ldr	r3, [pc, #260]	; (8002d60 <xTaskIncrementTick+0x150>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	4b41      	ldr	r3, [pc, #260]	; (8002d64 <xTaskIncrementTick+0x154>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a3f      	ldr	r2, [pc, #252]	; (8002d60 <xTaskIncrementTick+0x150>)
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	4a3f      	ldr	r2, [pc, #252]	; (8002d64 <xTaskIncrementTick+0x154>)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6013      	str	r3, [r2, #0]
 8002c6c:	4b3e      	ldr	r3, [pc, #248]	; (8002d68 <xTaskIncrementTick+0x158>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	3301      	adds	r3, #1
 8002c72:	4a3d      	ldr	r2, [pc, #244]	; (8002d68 <xTaskIncrementTick+0x158>)
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	f000 fad1 	bl	800321c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002c7a:	4b3c      	ldr	r3, [pc, #240]	; (8002d6c <xTaskIncrementTick+0x15c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d349      	bcc.n	8002d18 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c84:	4b36      	ldr	r3, [pc, #216]	; (8002d60 <xTaskIncrementTick+0x150>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d104      	bne.n	8002c98 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c8e:	4b37      	ldr	r3, [pc, #220]	; (8002d6c <xTaskIncrementTick+0x15c>)
 8002c90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c94:	601a      	str	r2, [r3, #0]
					break;
 8002c96:	e03f      	b.n	8002d18 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c98:	4b31      	ldr	r3, [pc, #196]	; (8002d60 <xTaskIncrementTick+0x150>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d203      	bcs.n	8002cb8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002cb0:	4a2e      	ldr	r2, [pc, #184]	; (8002d6c <xTaskIncrementTick+0x15c>)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002cb6:	e02f      	b.n	8002d18 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	3304      	adds	r3, #4
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7fe ff87 	bl	8001bd0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d004      	beq.n	8002cd4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	3318      	adds	r3, #24
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7fe ff7e 	bl	8001bd0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd8:	4b25      	ldr	r3, [pc, #148]	; (8002d70 <xTaskIncrementTick+0x160>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d903      	bls.n	8002ce8 <xTaskIncrementTick+0xd8>
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce4:	4a22      	ldr	r2, [pc, #136]	; (8002d70 <xTaskIncrementTick+0x160>)
 8002ce6:	6013      	str	r3, [r2, #0]
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cec:	4613      	mov	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4a1f      	ldr	r2, [pc, #124]	; (8002d74 <xTaskIncrementTick+0x164>)
 8002cf6:	441a      	add	r2, r3
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	3304      	adds	r3, #4
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4610      	mov	r0, r2
 8002d00:	f7fe ff09 	bl	8001b16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d08:	4b1b      	ldr	r3, [pc, #108]	; (8002d78 <xTaskIncrementTick+0x168>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d3b8      	bcc.n	8002c84 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002d12:	2301      	movs	r3, #1
 8002d14:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d16:	e7b5      	b.n	8002c84 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002d18:	4b17      	ldr	r3, [pc, #92]	; (8002d78 <xTaskIncrementTick+0x168>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d1e:	4915      	ldr	r1, [pc, #84]	; (8002d74 <xTaskIncrementTick+0x164>)
 8002d20:	4613      	mov	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d901      	bls.n	8002d34 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8002d30:	2301      	movs	r3, #1
 8002d32:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002d34:	4b11      	ldr	r3, [pc, #68]	; (8002d7c <xTaskIncrementTick+0x16c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d007      	beq.n	8002d4c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	617b      	str	r3, [r7, #20]
 8002d40:	e004      	b.n	8002d4c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002d42:	4b0f      	ldr	r3, [pc, #60]	; (8002d80 <xTaskIncrementTick+0x170>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	3301      	adds	r3, #1
 8002d48:	4a0d      	ldr	r2, [pc, #52]	; (8002d80 <xTaskIncrementTick+0x170>)
 8002d4a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002d4c:	697b      	ldr	r3, [r7, #20]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3718      	adds	r7, #24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	20002fe0 	.word	0x20002fe0
 8002d5c:	20002fbc 	.word	0x20002fbc
 8002d60:	20002f70 	.word	0x20002f70
 8002d64:	20002f74 	.word	0x20002f74
 8002d68:	20002fd0 	.word	0x20002fd0
 8002d6c:	20002fd8 	.word	0x20002fd8
 8002d70:	20002fc0 	.word	0x20002fc0
 8002d74:	20002ae8 	.word	0x20002ae8
 8002d78:	20002ae4 	.word	0x20002ae4
 8002d7c:	20002fcc 	.word	0x20002fcc
 8002d80:	20002fc8 	.word	0x20002fc8

08002d84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002d8a:	4b28      	ldr	r3, [pc, #160]	; (8002e2c <vTaskSwitchContext+0xa8>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002d92:	4b27      	ldr	r3, [pc, #156]	; (8002e30 <vTaskSwitchContext+0xac>)
 8002d94:	2201      	movs	r2, #1
 8002d96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002d98:	e041      	b.n	8002e1e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8002d9a:	4b25      	ldr	r3, [pc, #148]	; (8002e30 <vTaskSwitchContext+0xac>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002da0:	4b24      	ldr	r3, [pc, #144]	; (8002e34 <vTaskSwitchContext+0xb0>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	e010      	b.n	8002dca <vTaskSwitchContext+0x46>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10a      	bne.n	8002dc4 <vTaskSwitchContext+0x40>
	__asm volatile
 8002dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db2:	f383 8811 	msr	BASEPRI, r3
 8002db6:	f3bf 8f6f 	isb	sy
 8002dba:	f3bf 8f4f 	dsb	sy
 8002dbe:	607b      	str	r3, [r7, #4]
}
 8002dc0:	bf00      	nop
 8002dc2:	e7fe      	b.n	8002dc2 <vTaskSwitchContext+0x3e>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	491b      	ldr	r1, [pc, #108]	; (8002e38 <vTaskSwitchContext+0xb4>)
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4413      	add	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	440b      	add	r3, r1
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0e4      	beq.n	8002da8 <vTaskSwitchContext+0x24>
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	4613      	mov	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4a13      	ldr	r2, [pc, #76]	; (8002e38 <vTaskSwitchContext+0xb4>)
 8002dea:	4413      	add	r3, r2
 8002dec:	60bb      	str	r3, [r7, #8]
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	605a      	str	r2, [r3, #4]
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	3308      	adds	r3, #8
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d104      	bne.n	8002e0e <vTaskSwitchContext+0x8a>
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	605a      	str	r2, [r3, #4]
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	4a09      	ldr	r2, [pc, #36]	; (8002e3c <vTaskSwitchContext+0xb8>)
 8002e16:	6013      	str	r3, [r2, #0]
 8002e18:	4a06      	ldr	r2, [pc, #24]	; (8002e34 <vTaskSwitchContext+0xb0>)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6013      	str	r3, [r2, #0]
}
 8002e1e:	bf00      	nop
 8002e20:	3714      	adds	r7, #20
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	20002fe0 	.word	0x20002fe0
 8002e30:	20002fcc 	.word	0x20002fcc
 8002e34:	20002fc0 	.word	0x20002fc0
 8002e38:	20002ae8 	.word	0x20002ae8
 8002e3c:	20002ae4 	.word	0x20002ae4

08002e40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10a      	bne.n	8002e66 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8002e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e54:	f383 8811 	msr	BASEPRI, r3
 8002e58:	f3bf 8f6f 	isb	sy
 8002e5c:	f3bf 8f4f 	dsb	sy
 8002e60:	60fb      	str	r3, [r7, #12]
}
 8002e62:	bf00      	nop
 8002e64:	e7fe      	b.n	8002e64 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002e66:	4b07      	ldr	r3, [pc, #28]	; (8002e84 <vTaskPlaceOnEventList+0x44>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	3318      	adds	r3, #24
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7fe fe75 	bl	8001b5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002e74:	2101      	movs	r1, #1
 8002e76:	6838      	ldr	r0, [r7, #0]
 8002e78:	f000 fbb2 	bl	80035e0 <prvAddCurrentTaskToDelayedList>
}
 8002e7c:	bf00      	nop
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20002ae4 	.word	0x20002ae4

08002e88 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10a      	bne.n	8002eb0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8002e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9e:	f383 8811 	msr	BASEPRI, r3
 8002ea2:	f3bf 8f6f 	isb	sy
 8002ea6:	f3bf 8f4f 	dsb	sy
 8002eaa:	617b      	str	r3, [r7, #20]
}
 8002eac:	bf00      	nop
 8002eae:	e7fe      	b.n	8002eae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002eb0:	4b0a      	ldr	r3, [pc, #40]	; (8002edc <vTaskPlaceOnEventListRestricted+0x54>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	3318      	adds	r3, #24
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f7fe fe2c 	bl	8001b16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d002      	beq.n	8002eca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8002ec4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ec8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	68b8      	ldr	r0, [r7, #8]
 8002ece:	f000 fb87 	bl	80035e0 <prvAddCurrentTaskToDelayedList>
	}
 8002ed2:	bf00      	nop
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	20002ae4 	.word	0x20002ae4

08002ee0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10a      	bne.n	8002f0c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8002ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002efa:	f383 8811 	msr	BASEPRI, r3
 8002efe:	f3bf 8f6f 	isb	sy
 8002f02:	f3bf 8f4f 	dsb	sy
 8002f06:	60fb      	str	r3, [r7, #12]
}
 8002f08:	bf00      	nop
 8002f0a:	e7fe      	b.n	8002f0a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	3318      	adds	r3, #24
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7fe fe5d 	bl	8001bd0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f16:	4b1e      	ldr	r3, [pc, #120]	; (8002f90 <xTaskRemoveFromEventList+0xb0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d11d      	bne.n	8002f5a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	3304      	adds	r3, #4
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fe fe54 	bl	8001bd0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f2c:	4b19      	ldr	r3, [pc, #100]	; (8002f94 <xTaskRemoveFromEventList+0xb4>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d903      	bls.n	8002f3c <xTaskRemoveFromEventList+0x5c>
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f38:	4a16      	ldr	r2, [pc, #88]	; (8002f94 <xTaskRemoveFromEventList+0xb4>)
 8002f3a:	6013      	str	r3, [r2, #0]
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f40:	4613      	mov	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4a13      	ldr	r2, [pc, #76]	; (8002f98 <xTaskRemoveFromEventList+0xb8>)
 8002f4a:	441a      	add	r2, r3
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	3304      	adds	r3, #4
 8002f50:	4619      	mov	r1, r3
 8002f52:	4610      	mov	r0, r2
 8002f54:	f7fe fddf 	bl	8001b16 <vListInsertEnd>
 8002f58:	e005      	b.n	8002f66 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	3318      	adds	r3, #24
 8002f5e:	4619      	mov	r1, r3
 8002f60:	480e      	ldr	r0, [pc, #56]	; (8002f9c <xTaskRemoveFromEventList+0xbc>)
 8002f62:	f7fe fdd8 	bl	8001b16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f6a:	4b0d      	ldr	r3, [pc, #52]	; (8002fa0 <xTaskRemoveFromEventList+0xc0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d905      	bls.n	8002f80 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002f74:	2301      	movs	r3, #1
 8002f76:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002f78:	4b0a      	ldr	r3, [pc, #40]	; (8002fa4 <xTaskRemoveFromEventList+0xc4>)
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	e001      	b.n	8002f84 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8002f80:	2300      	movs	r3, #0
 8002f82:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002f84:	697b      	ldr	r3, [r7, #20]
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	20002fe0 	.word	0x20002fe0
 8002f94:	20002fc0 	.word	0x20002fc0
 8002f98:	20002ae8 	.word	0x20002ae8
 8002f9c:	20002f78 	.word	0x20002f78
 8002fa0:	20002ae4 	.word	0x20002ae4
 8002fa4:	20002fcc 	.word	0x20002fcc

08002fa8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002fb0:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <vTaskInternalSetTimeOutState+0x24>)
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002fb8:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <vTaskInternalSetTimeOutState+0x28>)
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	605a      	str	r2, [r3, #4]
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	20002fd0 	.word	0x20002fd0
 8002fd0:	20002fbc 	.word	0x20002fbc

08002fd4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b088      	sub	sp, #32
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10a      	bne.n	8002ffa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8002fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe8:	f383 8811 	msr	BASEPRI, r3
 8002fec:	f3bf 8f6f 	isb	sy
 8002ff0:	f3bf 8f4f 	dsb	sy
 8002ff4:	613b      	str	r3, [r7, #16]
}
 8002ff6:	bf00      	nop
 8002ff8:	e7fe      	b.n	8002ff8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10a      	bne.n	8003016 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003004:	f383 8811 	msr	BASEPRI, r3
 8003008:	f3bf 8f6f 	isb	sy
 800300c:	f3bf 8f4f 	dsb	sy
 8003010:	60fb      	str	r3, [r7, #12]
}
 8003012:	bf00      	nop
 8003014:	e7fe      	b.n	8003014 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003016:	f000 ffb5 	bl	8003f84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800301a:	4b1d      	ldr	r3, [pc, #116]	; (8003090 <xTaskCheckForTimeOut+0xbc>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003032:	d102      	bne.n	800303a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003034:	2300      	movs	r3, #0
 8003036:	61fb      	str	r3, [r7, #28]
 8003038:	e023      	b.n	8003082 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	4b15      	ldr	r3, [pc, #84]	; (8003094 <xTaskCheckForTimeOut+0xc0>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	429a      	cmp	r2, r3
 8003044:	d007      	beq.n	8003056 <xTaskCheckForTimeOut+0x82>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	429a      	cmp	r2, r3
 800304e:	d302      	bcc.n	8003056 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003050:	2301      	movs	r3, #1
 8003052:	61fb      	str	r3, [r7, #28]
 8003054:	e015      	b.n	8003082 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	429a      	cmp	r2, r3
 800305e:	d20b      	bcs.n	8003078 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	1ad2      	subs	r2, r2, r3
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f7ff ff9b 	bl	8002fa8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003072:	2300      	movs	r3, #0
 8003074:	61fb      	str	r3, [r7, #28]
 8003076:	e004      	b.n	8003082 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800307e:	2301      	movs	r3, #1
 8003080:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003082:	f000 ffaf 	bl	8003fe4 <vPortExitCritical>

	return xReturn;
 8003086:	69fb      	ldr	r3, [r7, #28]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3720      	adds	r7, #32
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	20002fbc 	.word	0x20002fbc
 8003094:	20002fd0 	.word	0x20002fd0

08003098 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800309c:	4b03      	ldr	r3, [pc, #12]	; (80030ac <vTaskMissedYield+0x14>)
 800309e:	2201      	movs	r2, #1
 80030a0:	601a      	str	r2, [r3, #0]
}
 80030a2:	bf00      	nop
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	20002fcc 	.word	0x20002fcc

080030b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80030b8:	f000 f852 	bl	8003160 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80030bc:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <prvIdleTask+0x28>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d9f9      	bls.n	80030b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80030c4:	4b05      	ldr	r3, [pc, #20]	; (80030dc <prvIdleTask+0x2c>)
 80030c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	f3bf 8f4f 	dsb	sy
 80030d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80030d4:	e7f0      	b.n	80030b8 <prvIdleTask+0x8>
 80030d6:	bf00      	nop
 80030d8:	20002ae8 	.word	0x20002ae8
 80030dc:	e000ed04 	.word	0xe000ed04

080030e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80030e6:	2300      	movs	r3, #0
 80030e8:	607b      	str	r3, [r7, #4]
 80030ea:	e00c      	b.n	8003106 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	4613      	mov	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4a12      	ldr	r2, [pc, #72]	; (8003140 <prvInitialiseTaskLists+0x60>)
 80030f8:	4413      	add	r3, r2
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fe fcde 	bl	8001abc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3301      	adds	r3, #1
 8003104:	607b      	str	r3, [r7, #4]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b37      	cmp	r3, #55	; 0x37
 800310a:	d9ef      	bls.n	80030ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800310c:	480d      	ldr	r0, [pc, #52]	; (8003144 <prvInitialiseTaskLists+0x64>)
 800310e:	f7fe fcd5 	bl	8001abc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003112:	480d      	ldr	r0, [pc, #52]	; (8003148 <prvInitialiseTaskLists+0x68>)
 8003114:	f7fe fcd2 	bl	8001abc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003118:	480c      	ldr	r0, [pc, #48]	; (800314c <prvInitialiseTaskLists+0x6c>)
 800311a:	f7fe fccf 	bl	8001abc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800311e:	480c      	ldr	r0, [pc, #48]	; (8003150 <prvInitialiseTaskLists+0x70>)
 8003120:	f7fe fccc 	bl	8001abc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003124:	480b      	ldr	r0, [pc, #44]	; (8003154 <prvInitialiseTaskLists+0x74>)
 8003126:	f7fe fcc9 	bl	8001abc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800312a:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <prvInitialiseTaskLists+0x78>)
 800312c:	4a05      	ldr	r2, [pc, #20]	; (8003144 <prvInitialiseTaskLists+0x64>)
 800312e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003130:	4b0a      	ldr	r3, [pc, #40]	; (800315c <prvInitialiseTaskLists+0x7c>)
 8003132:	4a05      	ldr	r2, [pc, #20]	; (8003148 <prvInitialiseTaskLists+0x68>)
 8003134:	601a      	str	r2, [r3, #0]
}
 8003136:	bf00      	nop
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	20002ae8 	.word	0x20002ae8
 8003144:	20002f48 	.word	0x20002f48
 8003148:	20002f5c 	.word	0x20002f5c
 800314c:	20002f78 	.word	0x20002f78
 8003150:	20002f8c 	.word	0x20002f8c
 8003154:	20002fa4 	.word	0x20002fa4
 8003158:	20002f70 	.word	0x20002f70
 800315c:	20002f74 	.word	0x20002f74

08003160 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003166:	e019      	b.n	800319c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003168:	f000 ff0c 	bl	8003f84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800316c:	4b10      	ldr	r3, [pc, #64]	; (80031b0 <prvCheckTasksWaitingTermination+0x50>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3304      	adds	r3, #4
 8003178:	4618      	mov	r0, r3
 800317a:	f7fe fd29 	bl	8001bd0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800317e:	4b0d      	ldr	r3, [pc, #52]	; (80031b4 <prvCheckTasksWaitingTermination+0x54>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	3b01      	subs	r3, #1
 8003184:	4a0b      	ldr	r2, [pc, #44]	; (80031b4 <prvCheckTasksWaitingTermination+0x54>)
 8003186:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003188:	4b0b      	ldr	r3, [pc, #44]	; (80031b8 <prvCheckTasksWaitingTermination+0x58>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	3b01      	subs	r3, #1
 800318e:	4a0a      	ldr	r2, [pc, #40]	; (80031b8 <prvCheckTasksWaitingTermination+0x58>)
 8003190:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003192:	f000 ff27 	bl	8003fe4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f810 	bl	80031bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800319c:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <prvCheckTasksWaitingTermination+0x58>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1e1      	bne.n	8003168 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80031a4:	bf00      	nop
 80031a6:	bf00      	nop
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	20002f8c 	.word	0x20002f8c
 80031b4:	20002fb8 	.word	0x20002fb8
 80031b8:	20002fa0 	.word	0x20002fa0

080031bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d108      	bne.n	80031e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	4618      	mov	r0, r3
 80031d4:	f001 f8c4 	bl	8004360 <vPortFree>
				vPortFree( pxTCB );
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f001 f8c1 	bl	8004360 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80031de:	e018      	b.n	8003212 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d103      	bne.n	80031f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f001 f8b8 	bl	8004360 <vPortFree>
	}
 80031f0:	e00f      	b.n	8003212 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d00a      	beq.n	8003212 <prvDeleteTCB+0x56>
	__asm volatile
 80031fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003200:	f383 8811 	msr	BASEPRI, r3
 8003204:	f3bf 8f6f 	isb	sy
 8003208:	f3bf 8f4f 	dsb	sy
 800320c:	60fb      	str	r3, [r7, #12]
}
 800320e:	bf00      	nop
 8003210:	e7fe      	b.n	8003210 <prvDeleteTCB+0x54>
	}
 8003212:	bf00      	nop
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003222:	4b0c      	ldr	r3, [pc, #48]	; (8003254 <prvResetNextTaskUnblockTime+0x38>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d104      	bne.n	8003236 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800322c:	4b0a      	ldr	r3, [pc, #40]	; (8003258 <prvResetNextTaskUnblockTime+0x3c>)
 800322e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003232:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003234:	e008      	b.n	8003248 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003236:	4b07      	ldr	r3, [pc, #28]	; (8003254 <prvResetNextTaskUnblockTime+0x38>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	4a04      	ldr	r2, [pc, #16]	; (8003258 <prvResetNextTaskUnblockTime+0x3c>)
 8003246:	6013      	str	r3, [r2, #0]
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	20002f70 	.word	0x20002f70
 8003258:	20002fd8 	.word	0x20002fd8

0800325c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003262:	4b0b      	ldr	r3, [pc, #44]	; (8003290 <xTaskGetSchedulerState+0x34>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d102      	bne.n	8003270 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800326a:	2301      	movs	r3, #1
 800326c:	607b      	str	r3, [r7, #4]
 800326e:	e008      	b.n	8003282 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003270:	4b08      	ldr	r3, [pc, #32]	; (8003294 <xTaskGetSchedulerState+0x38>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d102      	bne.n	800327e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003278:	2302      	movs	r3, #2
 800327a:	607b      	str	r3, [r7, #4]
 800327c:	e001      	b.n	8003282 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800327e:	2300      	movs	r3, #0
 8003280:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003282:	687b      	ldr	r3, [r7, #4]
	}
 8003284:	4618      	mov	r0, r3
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	20002fc4 	.word	0x20002fc4
 8003294:	20002fe0 	.word	0x20002fe0

08003298 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80032a4:	2300      	movs	r3, #0
 80032a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d056      	beq.n	800335c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80032ae:	4b2e      	ldr	r3, [pc, #184]	; (8003368 <xTaskPriorityDisinherit+0xd0>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d00a      	beq.n	80032ce <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80032b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032bc:	f383 8811 	msr	BASEPRI, r3
 80032c0:	f3bf 8f6f 	isb	sy
 80032c4:	f3bf 8f4f 	dsb	sy
 80032c8:	60fb      	str	r3, [r7, #12]
}
 80032ca:	bf00      	nop
 80032cc:	e7fe      	b.n	80032cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10a      	bne.n	80032ec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80032d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032da:	f383 8811 	msr	BASEPRI, r3
 80032de:	f3bf 8f6f 	isb	sy
 80032e2:	f3bf 8f4f 	dsb	sy
 80032e6:	60bb      	str	r3, [r7, #8]
}
 80032e8:	bf00      	nop
 80032ea:	e7fe      	b.n	80032ea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032f0:	1e5a      	subs	r2, r3, #1
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032fe:	429a      	cmp	r2, r3
 8003300:	d02c      	beq.n	800335c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003306:	2b00      	cmp	r3, #0
 8003308:	d128      	bne.n	800335c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	3304      	adds	r3, #4
 800330e:	4618      	mov	r0, r3
 8003310:	f7fe fc5e 	bl	8001bd0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003320:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800332c:	4b0f      	ldr	r3, [pc, #60]	; (800336c <xTaskPriorityDisinherit+0xd4>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	429a      	cmp	r2, r3
 8003332:	d903      	bls.n	800333c <xTaskPriorityDisinherit+0xa4>
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	4a0c      	ldr	r2, [pc, #48]	; (800336c <xTaskPriorityDisinherit+0xd4>)
 800333a:	6013      	str	r3, [r2, #0]
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003340:	4613      	mov	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4a09      	ldr	r2, [pc, #36]	; (8003370 <xTaskPriorityDisinherit+0xd8>)
 800334a:	441a      	add	r2, r3
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	3304      	adds	r3, #4
 8003350:	4619      	mov	r1, r3
 8003352:	4610      	mov	r0, r2
 8003354:	f7fe fbdf 	bl	8001b16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003358:	2301      	movs	r3, #1
 800335a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800335c:	697b      	ldr	r3, [r7, #20]
	}
 800335e:	4618      	mov	r0, r3
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	20002ae4 	.word	0x20002ae4
 800336c:	20002fc0 	.word	0x20002fc0
 8003370:	20002ae8 	.word	0x20002ae8

08003374 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
 8003380:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8003382:	f000 fdff 	bl	8003f84 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8003386:	4b26      	ldr	r3, [pc, #152]	; (8003420 <xTaskNotifyWait+0xac>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d01a      	beq.n	80033ca <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8003394:	4b22      	ldr	r3, [pc, #136]	; (8003420 <xTaskNotifyWait+0xac>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	43d2      	mvns	r2, r2
 800339e:	400a      	ands	r2, r1
 80033a0:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80033a2:	4b1f      	ldr	r3, [pc, #124]	; (8003420 <xTaskNotifyWait+0xac>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00b      	beq.n	80033ca <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80033b2:	2101      	movs	r1, #1
 80033b4:	6838      	ldr	r0, [r7, #0]
 80033b6:	f000 f913 	bl	80035e0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80033ba:	4b1a      	ldr	r3, [pc, #104]	; (8003424 <xTaskNotifyWait+0xb0>)
 80033bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	f3bf 8f4f 	dsb	sy
 80033c6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80033ca:	f000 fe0b 	bl	8003fe4 <vPortExitCritical>

		taskENTER_CRITICAL();
 80033ce:	f000 fdd9 	bl	8003f84 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d004      	beq.n	80033e2 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80033d8:	4b11      	ldr	r3, [pc, #68]	; (8003420 <xTaskNotifyWait+0xac>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80033e2:	4b0f      	ldr	r3, [pc, #60]	; (8003420 <xTaskNotifyWait+0xac>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d002      	beq.n	80033f6 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80033f0:	2300      	movs	r3, #0
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	e008      	b.n	8003408 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80033f6:	4b0a      	ldr	r3, [pc, #40]	; (8003420 <xTaskNotifyWait+0xac>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	43d2      	mvns	r2, r2
 8003400:	400a      	ands	r2, r1
 8003402:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 8003404:	2301      	movs	r3, #1
 8003406:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003408:	4b05      	ldr	r3, [pc, #20]	; (8003420 <xTaskNotifyWait+0xac>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8003412:	f000 fde7 	bl	8003fe4 <vPortExitCritical>

		return xReturn;
 8003416:	697b      	ldr	r3, [r7, #20]
	}
 8003418:	4618      	mov	r0, r3
 800341a:	3718      	adds	r7, #24
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	20002ae4 	.word	0x20002ae4
 8003424:	e000ed04 	.word	0xe000ed04

08003428 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8003428:	b580      	push	{r7, lr}
 800342a:	b08e      	sub	sp, #56	; 0x38
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	603b      	str	r3, [r7, #0]
 8003434:	4613      	mov	r3, r2
 8003436:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8003438:	2301      	movs	r3, #1
 800343a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10a      	bne.n	8003458 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8003442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003446:	f383 8811 	msr	BASEPRI, r3
 800344a:	f3bf 8f6f 	isb	sy
 800344e:	f3bf 8f4f 	dsb	sy
 8003452:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003454:	bf00      	nop
 8003456:	e7fe      	b.n	8003456 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003458:	f000 fe76 	bl	8004148 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8003460:	f3ef 8211 	mrs	r2, BASEPRI
 8003464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003468:	f383 8811 	msr	BASEPRI, r3
 800346c:	f3bf 8f6f 	isb	sy
 8003470:	f3bf 8f4f 	dsb	sy
 8003474:	623a      	str	r2, [r7, #32]
 8003476:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8003478:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800347a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8003482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003484:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800348a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003490:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8003494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003496:	2202      	movs	r2, #2
 8003498:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800349c:	79fb      	ldrb	r3, [r7, #7]
 800349e:	2b04      	cmp	r3, #4
 80034a0:	d828      	bhi.n	80034f4 <xTaskGenericNotifyFromISR+0xcc>
 80034a2:	a201      	add	r2, pc, #4	; (adr r2, 80034a8 <xTaskGenericNotifyFromISR+0x80>)
 80034a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a8:	08003515 	.word	0x08003515
 80034ac:	080034bd 	.word	0x080034bd
 80034b0:	080034cb 	.word	0x080034cb
 80034b4:	080034d7 	.word	0x080034d7
 80034b8:	080034df 	.word	0x080034df
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80034bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	431a      	orrs	r2, r3
 80034c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80034c8:	e027      	b.n	800351a <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80034ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80034d4:	e021      	b.n	800351a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80034d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80034dc:	e01d      	b.n	800351a <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80034de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d003      	beq.n	80034ee <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80034e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80034ec:	e015      	b.n	800351a <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 80034ee:	2300      	movs	r3, #0
 80034f0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80034f2:	e012      	b.n	800351a <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80034f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034fc:	d00c      	beq.n	8003518 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 80034fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003502:	f383 8811 	msr	BASEPRI, r3
 8003506:	f3bf 8f6f 	isb	sy
 800350a:	f3bf 8f4f 	dsb	sy
 800350e:	61bb      	str	r3, [r7, #24]
}
 8003510:	bf00      	nop
 8003512:	e7fe      	b.n	8003512 <xTaskGenericNotifyFromISR+0xea>
					break;
 8003514:	bf00      	nop
 8003516:	e000      	b.n	800351a <xTaskGenericNotifyFromISR+0xf2>
					break;
 8003518:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800351a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800351e:	2b01      	cmp	r3, #1
 8003520:	d146      	bne.n	80035b0 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00a      	beq.n	8003540 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800352a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800352e:	f383 8811 	msr	BASEPRI, r3
 8003532:	f3bf 8f6f 	isb	sy
 8003536:	f3bf 8f4f 	dsb	sy
 800353a:	617b      	str	r3, [r7, #20]
}
 800353c:	bf00      	nop
 800353e:	e7fe      	b.n	800353e <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003540:	4b21      	ldr	r3, [pc, #132]	; (80035c8 <xTaskGenericNotifyFromISR+0x1a0>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d11d      	bne.n	8003584 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354a:	3304      	adds	r3, #4
 800354c:	4618      	mov	r0, r3
 800354e:	f7fe fb3f 	bl	8001bd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003556:	4b1d      	ldr	r3, [pc, #116]	; (80035cc <xTaskGenericNotifyFromISR+0x1a4>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	429a      	cmp	r2, r3
 800355c:	d903      	bls.n	8003566 <xTaskGenericNotifyFromISR+0x13e>
 800355e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003562:	4a1a      	ldr	r2, [pc, #104]	; (80035cc <xTaskGenericNotifyFromISR+0x1a4>)
 8003564:	6013      	str	r3, [r2, #0]
 8003566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800356a:	4613      	mov	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4413      	add	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4a17      	ldr	r2, [pc, #92]	; (80035d0 <xTaskGenericNotifyFromISR+0x1a8>)
 8003574:	441a      	add	r2, r3
 8003576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003578:	3304      	adds	r3, #4
 800357a:	4619      	mov	r1, r3
 800357c:	4610      	mov	r0, r2
 800357e:	f7fe faca 	bl	8001b16 <vListInsertEnd>
 8003582:	e005      	b.n	8003590 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003586:	3318      	adds	r3, #24
 8003588:	4619      	mov	r1, r3
 800358a:	4812      	ldr	r0, [pc, #72]	; (80035d4 <xTaskGenericNotifyFromISR+0x1ac>)
 800358c:	f7fe fac3 	bl	8001b16 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003594:	4b10      	ldr	r3, [pc, #64]	; (80035d8 <xTaskGenericNotifyFromISR+0x1b0>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359a:	429a      	cmp	r2, r3
 800359c:	d908      	bls.n	80035b0 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800359e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d002      	beq.n	80035aa <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80035a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035a6:	2201      	movs	r2, #1
 80035a8:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80035aa:	4b0c      	ldr	r3, [pc, #48]	; (80035dc <xTaskGenericNotifyFromISR+0x1b4>)
 80035ac:	2201      	movs	r2, #1
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b2:	613b      	str	r3, [r7, #16]
	__asm volatile
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	f383 8811 	msr	BASEPRI, r3
}
 80035ba:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80035bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80035be:	4618      	mov	r0, r3
 80035c0:	3738      	adds	r7, #56	; 0x38
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	20002fe0 	.word	0x20002fe0
 80035cc:	20002fc0 	.word	0x20002fc0
 80035d0:	20002ae8 	.word	0x20002ae8
 80035d4:	20002f78 	.word	0x20002f78
 80035d8:	20002ae4 	.word	0x20002ae4
 80035dc:	20002fcc 	.word	0x20002fcc

080035e0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80035ea:	4b21      	ldr	r3, [pc, #132]	; (8003670 <prvAddCurrentTaskToDelayedList+0x90>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035f0:	4b20      	ldr	r3, [pc, #128]	; (8003674 <prvAddCurrentTaskToDelayedList+0x94>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	3304      	adds	r3, #4
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fe faea 	bl	8001bd0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003602:	d10a      	bne.n	800361a <prvAddCurrentTaskToDelayedList+0x3a>
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d007      	beq.n	800361a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800360a:	4b1a      	ldr	r3, [pc, #104]	; (8003674 <prvAddCurrentTaskToDelayedList+0x94>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	3304      	adds	r3, #4
 8003610:	4619      	mov	r1, r3
 8003612:	4819      	ldr	r0, [pc, #100]	; (8003678 <prvAddCurrentTaskToDelayedList+0x98>)
 8003614:	f7fe fa7f 	bl	8001b16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003618:	e026      	b.n	8003668 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4413      	add	r3, r2
 8003620:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003622:	4b14      	ldr	r3, [pc, #80]	; (8003674 <prvAddCurrentTaskToDelayedList+0x94>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	429a      	cmp	r2, r3
 8003630:	d209      	bcs.n	8003646 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003632:	4b12      	ldr	r3, [pc, #72]	; (800367c <prvAddCurrentTaskToDelayedList+0x9c>)
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	4b0f      	ldr	r3, [pc, #60]	; (8003674 <prvAddCurrentTaskToDelayedList+0x94>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	3304      	adds	r3, #4
 800363c:	4619      	mov	r1, r3
 800363e:	4610      	mov	r0, r2
 8003640:	f7fe fa8d 	bl	8001b5e <vListInsert>
}
 8003644:	e010      	b.n	8003668 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003646:	4b0e      	ldr	r3, [pc, #56]	; (8003680 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	4b0a      	ldr	r3, [pc, #40]	; (8003674 <prvAddCurrentTaskToDelayedList+0x94>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	3304      	adds	r3, #4
 8003650:	4619      	mov	r1, r3
 8003652:	4610      	mov	r0, r2
 8003654:	f7fe fa83 	bl	8001b5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003658:	4b0a      	ldr	r3, [pc, #40]	; (8003684 <prvAddCurrentTaskToDelayedList+0xa4>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	429a      	cmp	r2, r3
 8003660:	d202      	bcs.n	8003668 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003662:	4a08      	ldr	r2, [pc, #32]	; (8003684 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	6013      	str	r3, [r2, #0]
}
 8003668:	bf00      	nop
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	20002fbc 	.word	0x20002fbc
 8003674:	20002ae4 	.word	0x20002ae4
 8003678:	20002fa4 	.word	0x20002fa4
 800367c:	20002f74 	.word	0x20002f74
 8003680:	20002f70 	.word	0x20002f70
 8003684:	20002fd8 	.word	0x20002fd8

08003688 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b08a      	sub	sp, #40	; 0x28
 800368c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800368e:	2300      	movs	r3, #0
 8003690:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003692:	f000 fb07 	bl	8003ca4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003696:	4b1c      	ldr	r3, [pc, #112]	; (8003708 <xTimerCreateTimerTask+0x80>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d021      	beq.n	80036e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800369e:	2300      	movs	r3, #0
 80036a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80036a2:	2300      	movs	r3, #0
 80036a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80036a6:	1d3a      	adds	r2, r7, #4
 80036a8:	f107 0108 	add.w	r1, r7, #8
 80036ac:	f107 030c 	add.w	r3, r7, #12
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7fe f9e9 	bl	8001a88 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	9202      	str	r2, [sp, #8]
 80036be:	9301      	str	r3, [sp, #4]
 80036c0:	2302      	movs	r3, #2
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	2300      	movs	r3, #0
 80036c6:	460a      	mov	r2, r1
 80036c8:	4910      	ldr	r1, [pc, #64]	; (800370c <xTimerCreateTimerTask+0x84>)
 80036ca:	4811      	ldr	r0, [pc, #68]	; (8003710 <xTimerCreateTimerTask+0x88>)
 80036cc:	f7fe ff96 	bl	80025fc <xTaskCreateStatic>
 80036d0:	4603      	mov	r3, r0
 80036d2:	4a10      	ldr	r2, [pc, #64]	; (8003714 <xTimerCreateTimerTask+0x8c>)
 80036d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80036d6:	4b0f      	ldr	r3, [pc, #60]	; (8003714 <xTimerCreateTimerTask+0x8c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80036de:	2301      	movs	r3, #1
 80036e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10a      	bne.n	80036fe <xTimerCreateTimerTask+0x76>
	__asm volatile
 80036e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ec:	f383 8811 	msr	BASEPRI, r3
 80036f0:	f3bf 8f6f 	isb	sy
 80036f4:	f3bf 8f4f 	dsb	sy
 80036f8:	613b      	str	r3, [r7, #16]
}
 80036fa:	bf00      	nop
 80036fc:	e7fe      	b.n	80036fc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80036fe:	697b      	ldr	r3, [r7, #20]
}
 8003700:	4618      	mov	r0, r3
 8003702:	3718      	adds	r7, #24
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	20003014 	.word	0x20003014
 800370c:	0800c804 	.word	0x0800c804
 8003710:	0800384d 	.word	0x0800384d
 8003714:	20003018 	.word	0x20003018

08003718 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b08a      	sub	sp, #40	; 0x28
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
 8003724:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003726:	2300      	movs	r3, #0
 8003728:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10a      	bne.n	8003746 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003734:	f383 8811 	msr	BASEPRI, r3
 8003738:	f3bf 8f6f 	isb	sy
 800373c:	f3bf 8f4f 	dsb	sy
 8003740:	623b      	str	r3, [r7, #32]
}
 8003742:	bf00      	nop
 8003744:	e7fe      	b.n	8003744 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003746:	4b1a      	ldr	r3, [pc, #104]	; (80037b0 <xTimerGenericCommand+0x98>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d02a      	beq.n	80037a4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	2b05      	cmp	r3, #5
 800375e:	dc18      	bgt.n	8003792 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003760:	f7ff fd7c 	bl	800325c <xTaskGetSchedulerState>
 8003764:	4603      	mov	r3, r0
 8003766:	2b02      	cmp	r3, #2
 8003768:	d109      	bne.n	800377e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800376a:	4b11      	ldr	r3, [pc, #68]	; (80037b0 <xTimerGenericCommand+0x98>)
 800376c:	6818      	ldr	r0, [r3, #0]
 800376e:	f107 0110 	add.w	r1, r7, #16
 8003772:	2300      	movs	r3, #0
 8003774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003776:	f7fe fb59 	bl	8001e2c <xQueueGenericSend>
 800377a:	6278      	str	r0, [r7, #36]	; 0x24
 800377c:	e012      	b.n	80037a4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800377e:	4b0c      	ldr	r3, [pc, #48]	; (80037b0 <xTimerGenericCommand+0x98>)
 8003780:	6818      	ldr	r0, [r3, #0]
 8003782:	f107 0110 	add.w	r1, r7, #16
 8003786:	2300      	movs	r3, #0
 8003788:	2200      	movs	r2, #0
 800378a:	f7fe fb4f 	bl	8001e2c <xQueueGenericSend>
 800378e:	6278      	str	r0, [r7, #36]	; 0x24
 8003790:	e008      	b.n	80037a4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003792:	4b07      	ldr	r3, [pc, #28]	; (80037b0 <xTimerGenericCommand+0x98>)
 8003794:	6818      	ldr	r0, [r3, #0]
 8003796:	f107 0110 	add.w	r1, r7, #16
 800379a:	2300      	movs	r3, #0
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	f7fe fc43 	bl	8002028 <xQueueGenericSendFromISR>
 80037a2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3728      	adds	r7, #40	; 0x28
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	20003014 	.word	0x20003014

080037b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b088      	sub	sp, #32
 80037b8:	af02      	add	r7, sp, #8
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037be:	4b22      	ldr	r3, [pc, #136]	; (8003848 <prvProcessExpiredTimer+0x94>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	3304      	adds	r3, #4
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7fe f9ff 	bl	8001bd0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d022      	beq.n	8003826 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	699a      	ldr	r2, [r3, #24]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	18d1      	adds	r1, r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	6978      	ldr	r0, [r7, #20]
 80037ee:	f000 f8d1 	bl	8003994 <prvInsertTimerInActiveList>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d01f      	beq.n	8003838 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80037f8:	2300      	movs	r3, #0
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	2300      	movs	r3, #0
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	2100      	movs	r1, #0
 8003802:	6978      	ldr	r0, [r7, #20]
 8003804:	f7ff ff88 	bl	8003718 <xTimerGenericCommand>
 8003808:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d113      	bne.n	8003838 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003814:	f383 8811 	msr	BASEPRI, r3
 8003818:	f3bf 8f6f 	isb	sy
 800381c:	f3bf 8f4f 	dsb	sy
 8003820:	60fb      	str	r3, [r7, #12]
}
 8003822:	bf00      	nop
 8003824:	e7fe      	b.n	8003824 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800382c:	f023 0301 	bic.w	r3, r3, #1
 8003830:	b2da      	uxtb	r2, r3
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	6978      	ldr	r0, [r7, #20]
 800383e:	4798      	blx	r3
}
 8003840:	bf00      	nop
 8003842:	3718      	adds	r7, #24
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	2000300c 	.word	0x2000300c

0800384c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003854:	f107 0308 	add.w	r3, r7, #8
 8003858:	4618      	mov	r0, r3
 800385a:	f000 f857 	bl	800390c <prvGetNextExpireTime>
 800385e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	4619      	mov	r1, r3
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 f803 	bl	8003870 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800386a:	f000 f8d5 	bl	8003a18 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800386e:	e7f1      	b.n	8003854 <prvTimerTask+0x8>

08003870 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800387a:	f7ff f8fb 	bl	8002a74 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800387e:	f107 0308 	add.w	r3, r7, #8
 8003882:	4618      	mov	r0, r3
 8003884:	f000 f866 	bl	8003954 <prvSampleTimeNow>
 8003888:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d130      	bne.n	80038f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10a      	bne.n	80038ac <prvProcessTimerOrBlockTask+0x3c>
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	429a      	cmp	r2, r3
 800389c:	d806      	bhi.n	80038ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800389e:	f7ff f8f7 	bl	8002a90 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80038a2:	68f9      	ldr	r1, [r7, #12]
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7ff ff85 	bl	80037b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80038aa:	e024      	b.n	80038f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d008      	beq.n	80038c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80038b2:	4b13      	ldr	r3, [pc, #76]	; (8003900 <prvProcessTimerOrBlockTask+0x90>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <prvProcessTimerOrBlockTask+0x50>
 80038bc:	2301      	movs	r3, #1
 80038be:	e000      	b.n	80038c2 <prvProcessTimerOrBlockTask+0x52>
 80038c0:	2300      	movs	r3, #0
 80038c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80038c4:	4b0f      	ldr	r3, [pc, #60]	; (8003904 <prvProcessTimerOrBlockTask+0x94>)
 80038c6:	6818      	ldr	r0, [r3, #0]
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	4619      	mov	r1, r3
 80038d2:	f7fe fe5f 	bl	8002594 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80038d6:	f7ff f8db 	bl	8002a90 <xTaskResumeAll>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10a      	bne.n	80038f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80038e0:	4b09      	ldr	r3, [pc, #36]	; (8003908 <prvProcessTimerOrBlockTask+0x98>)
 80038e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	f3bf 8f4f 	dsb	sy
 80038ec:	f3bf 8f6f 	isb	sy
}
 80038f0:	e001      	b.n	80038f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80038f2:	f7ff f8cd 	bl	8002a90 <xTaskResumeAll>
}
 80038f6:	bf00      	nop
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	20003010 	.word	0x20003010
 8003904:	20003014 	.word	0x20003014
 8003908:	e000ed04 	.word	0xe000ed04

0800390c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003914:	4b0e      	ldr	r3, [pc, #56]	; (8003950 <prvGetNextExpireTime+0x44>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <prvGetNextExpireTime+0x16>
 800391e:	2201      	movs	r2, #1
 8003920:	e000      	b.n	8003924 <prvGetNextExpireTime+0x18>
 8003922:	2200      	movs	r2, #0
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d105      	bne.n	800393c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003930:	4b07      	ldr	r3, [pc, #28]	; (8003950 <prvGetNextExpireTime+0x44>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	e001      	b.n	8003940 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800393c:	2300      	movs	r3, #0
 800393e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003940:	68fb      	ldr	r3, [r7, #12]
}
 8003942:	4618      	mov	r0, r3
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	2000300c 	.word	0x2000300c

08003954 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800395c:	f7ff f936 	bl	8002bcc <xTaskGetTickCount>
 8003960:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003962:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <prvSampleTimeNow+0x3c>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	429a      	cmp	r2, r3
 800396a:	d205      	bcs.n	8003978 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800396c:	f000 f936 	bl	8003bdc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	e002      	b.n	800397e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800397e:	4a04      	ldr	r2, [pc, #16]	; (8003990 <prvSampleTimeNow+0x3c>)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003984:	68fb      	ldr	r3, [r7, #12]
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	2000301c 	.word	0x2000301c

08003994 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
 80039a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80039a2:	2300      	movs	r3, #0
 80039a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	68ba      	ldr	r2, [r7, #8]
 80039aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d812      	bhi.n	80039e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	1ad2      	subs	r2, r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d302      	bcc.n	80039ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80039c8:	2301      	movs	r3, #1
 80039ca:	617b      	str	r3, [r7, #20]
 80039cc:	e01b      	b.n	8003a06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80039ce:	4b10      	ldr	r3, [pc, #64]	; (8003a10 <prvInsertTimerInActiveList+0x7c>)
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	3304      	adds	r3, #4
 80039d6:	4619      	mov	r1, r3
 80039d8:	4610      	mov	r0, r2
 80039da:	f7fe f8c0 	bl	8001b5e <vListInsert>
 80039de:	e012      	b.n	8003a06 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d206      	bcs.n	80039f6 <prvInsertTimerInActiveList+0x62>
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d302      	bcc.n	80039f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80039f0:	2301      	movs	r3, #1
 80039f2:	617b      	str	r3, [r7, #20]
 80039f4:	e007      	b.n	8003a06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80039f6:	4b07      	ldr	r3, [pc, #28]	; (8003a14 <prvInsertTimerInActiveList+0x80>)
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	3304      	adds	r3, #4
 80039fe:	4619      	mov	r1, r3
 8003a00:	4610      	mov	r0, r2
 8003a02:	f7fe f8ac 	bl	8001b5e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003a06:	697b      	ldr	r3, [r7, #20]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3718      	adds	r7, #24
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	20003010 	.word	0x20003010
 8003a14:	2000300c 	.word	0x2000300c

08003a18 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b08e      	sub	sp, #56	; 0x38
 8003a1c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003a1e:	e0ca      	b.n	8003bb6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	da18      	bge.n	8003a58 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003a26:	1d3b      	adds	r3, r7, #4
 8003a28:	3304      	adds	r3, #4
 8003a2a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10a      	bne.n	8003a48 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a36:	f383 8811 	msr	BASEPRI, r3
 8003a3a:	f3bf 8f6f 	isb	sy
 8003a3e:	f3bf 8f4f 	dsb	sy
 8003a42:	61fb      	str	r3, [r7, #28]
}
 8003a44:	bf00      	nop
 8003a46:	e7fe      	b.n	8003a46 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a4e:	6850      	ldr	r0, [r2, #4]
 8003a50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a52:	6892      	ldr	r2, [r2, #8]
 8003a54:	4611      	mov	r1, r2
 8003a56:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f2c0 80ab 	blt.w	8003bb6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d004      	beq.n	8003a76 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6e:	3304      	adds	r3, #4
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7fe f8ad 	bl	8001bd0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003a76:	463b      	mov	r3, r7
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff ff6b 	bl	8003954 <prvSampleTimeNow>
 8003a7e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b09      	cmp	r3, #9
 8003a84:	f200 8096 	bhi.w	8003bb4 <prvProcessReceivedCommands+0x19c>
 8003a88:	a201      	add	r2, pc, #4	; (adr r2, 8003a90 <prvProcessReceivedCommands+0x78>)
 8003a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8e:	bf00      	nop
 8003a90:	08003ab9 	.word	0x08003ab9
 8003a94:	08003ab9 	.word	0x08003ab9
 8003a98:	08003ab9 	.word	0x08003ab9
 8003a9c:	08003b2d 	.word	0x08003b2d
 8003aa0:	08003b41 	.word	0x08003b41
 8003aa4:	08003b8b 	.word	0x08003b8b
 8003aa8:	08003ab9 	.word	0x08003ab9
 8003aac:	08003ab9 	.word	0x08003ab9
 8003ab0:	08003b2d 	.word	0x08003b2d
 8003ab4:	08003b41 	.word	0x08003b41
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003abe:	f043 0301 	orr.w	r3, r3, #1
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	18d1      	adds	r1, r2, r3
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ad8:	f7ff ff5c 	bl	8003994 <prvInsertTimerInActiveList>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d069      	beq.n	8003bb6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ae8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d05e      	beq.n	8003bb6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003af8:	68ba      	ldr	r2, [r7, #8]
 8003afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	441a      	add	r2, r3
 8003b00:	2300      	movs	r3, #0
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	2300      	movs	r3, #0
 8003b06:	2100      	movs	r1, #0
 8003b08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b0a:	f7ff fe05 	bl	8003718 <xTimerGenericCommand>
 8003b0e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d14f      	bne.n	8003bb6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8003b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1a:	f383 8811 	msr	BASEPRI, r3
 8003b1e:	f3bf 8f6f 	isb	sy
 8003b22:	f3bf 8f4f 	dsb	sy
 8003b26:	61bb      	str	r3, [r7, #24]
}
 8003b28:	bf00      	nop
 8003b2a:	e7fe      	b.n	8003b2a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b32:	f023 0301 	bic.w	r3, r3, #1
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003b3e:	e03a      	b.n	8003bb6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b46:	f043 0301 	orr.w	r3, r3, #1
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b56:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10a      	bne.n	8003b76 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8003b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b64:	f383 8811 	msr	BASEPRI, r3
 8003b68:	f3bf 8f6f 	isb	sy
 8003b6c:	f3bf 8f4f 	dsb	sy
 8003b70:	617b      	str	r3, [r7, #20]
}
 8003b72:	bf00      	nop
 8003b74:	e7fe      	b.n	8003b74 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b78:	699a      	ldr	r2, [r3, #24]
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	18d1      	adds	r1, r2, r3
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b84:	f7ff ff06 	bl	8003994 <prvInsertTimerInActiveList>
					break;
 8003b88:	e015      	b.n	8003bb6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d103      	bne.n	8003ba0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8003b98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b9a:	f000 fbe1 	bl	8004360 <vPortFree>
 8003b9e:	e00a      	b.n	8003bb6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ba6:	f023 0301 	bic.w	r3, r3, #1
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003bb2:	e000      	b.n	8003bb6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8003bb4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003bb6:	4b08      	ldr	r3, [pc, #32]	; (8003bd8 <prvProcessReceivedCommands+0x1c0>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	1d39      	adds	r1, r7, #4
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7fe face 	bl	8002160 <xQueueReceive>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f47f af2a 	bne.w	8003a20 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003bcc:	bf00      	nop
 8003bce:	bf00      	nop
 8003bd0:	3730      	adds	r7, #48	; 0x30
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	20003014 	.word	0x20003014

08003bdc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b088      	sub	sp, #32
 8003be0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003be2:	e048      	b.n	8003c76 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003be4:	4b2d      	ldr	r3, [pc, #180]	; (8003c9c <prvSwitchTimerLists+0xc0>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bee:	4b2b      	ldr	r3, [pc, #172]	; (8003c9c <prvSwitchTimerLists+0xc0>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7fd ffe7 	bl	8001bd0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d02e      	beq.n	8003c76 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4413      	add	r3, r2
 8003c20:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d90e      	bls.n	8003c48 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003c36:	4b19      	ldr	r3, [pc, #100]	; (8003c9c <prvSwitchTimerLists+0xc0>)
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	4619      	mov	r1, r3
 8003c40:	4610      	mov	r0, r2
 8003c42:	f7fd ff8c 	bl	8001b5e <vListInsert>
 8003c46:	e016      	b.n	8003c76 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003c48:	2300      	movs	r3, #0
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	2100      	movs	r1, #0
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f7ff fd60 	bl	8003718 <xTimerGenericCommand>
 8003c58:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10a      	bne.n	8003c76 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8003c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c64:	f383 8811 	msr	BASEPRI, r3
 8003c68:	f3bf 8f6f 	isb	sy
 8003c6c:	f3bf 8f4f 	dsb	sy
 8003c70:	603b      	str	r3, [r7, #0]
}
 8003c72:	bf00      	nop
 8003c74:	e7fe      	b.n	8003c74 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c76:	4b09      	ldr	r3, [pc, #36]	; (8003c9c <prvSwitchTimerLists+0xc0>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1b1      	bne.n	8003be4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003c80:	4b06      	ldr	r3, [pc, #24]	; (8003c9c <prvSwitchTimerLists+0xc0>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003c86:	4b06      	ldr	r3, [pc, #24]	; (8003ca0 <prvSwitchTimerLists+0xc4>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a04      	ldr	r2, [pc, #16]	; (8003c9c <prvSwitchTimerLists+0xc0>)
 8003c8c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003c8e:	4a04      	ldr	r2, [pc, #16]	; (8003ca0 <prvSwitchTimerLists+0xc4>)
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	6013      	str	r3, [r2, #0]
}
 8003c94:	bf00      	nop
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	2000300c 	.word	0x2000300c
 8003ca0:	20003010 	.word	0x20003010

08003ca4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003caa:	f000 f96b 	bl	8003f84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003cae:	4b15      	ldr	r3, [pc, #84]	; (8003d04 <prvCheckForValidListAndQueue+0x60>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d120      	bne.n	8003cf8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003cb6:	4814      	ldr	r0, [pc, #80]	; (8003d08 <prvCheckForValidListAndQueue+0x64>)
 8003cb8:	f7fd ff00 	bl	8001abc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003cbc:	4813      	ldr	r0, [pc, #76]	; (8003d0c <prvCheckForValidListAndQueue+0x68>)
 8003cbe:	f7fd fefd 	bl	8001abc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003cc2:	4b13      	ldr	r3, [pc, #76]	; (8003d10 <prvCheckForValidListAndQueue+0x6c>)
 8003cc4:	4a10      	ldr	r2, [pc, #64]	; (8003d08 <prvCheckForValidListAndQueue+0x64>)
 8003cc6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003cc8:	4b12      	ldr	r3, [pc, #72]	; (8003d14 <prvCheckForValidListAndQueue+0x70>)
 8003cca:	4a10      	ldr	r2, [pc, #64]	; (8003d0c <prvCheckForValidListAndQueue+0x68>)
 8003ccc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003cce:	2300      	movs	r3, #0
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	4b11      	ldr	r3, [pc, #68]	; (8003d18 <prvCheckForValidListAndQueue+0x74>)
 8003cd4:	4a11      	ldr	r2, [pc, #68]	; (8003d1c <prvCheckForValidListAndQueue+0x78>)
 8003cd6:	2110      	movs	r1, #16
 8003cd8:	200a      	movs	r0, #10
 8003cda:	f7fe f80b 	bl	8001cf4 <xQueueGenericCreateStatic>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	4a08      	ldr	r2, [pc, #32]	; (8003d04 <prvCheckForValidListAndQueue+0x60>)
 8003ce2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003ce4:	4b07      	ldr	r3, [pc, #28]	; (8003d04 <prvCheckForValidListAndQueue+0x60>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d005      	beq.n	8003cf8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003cec:	4b05      	ldr	r3, [pc, #20]	; (8003d04 <prvCheckForValidListAndQueue+0x60>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	490b      	ldr	r1, [pc, #44]	; (8003d20 <prvCheckForValidListAndQueue+0x7c>)
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fe fc24 	bl	8002540 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003cf8:	f000 f974 	bl	8003fe4 <vPortExitCritical>
}
 8003cfc:	bf00      	nop
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	20003014 	.word	0x20003014
 8003d08:	20002fe4 	.word	0x20002fe4
 8003d0c:	20002ff8 	.word	0x20002ff8
 8003d10:	2000300c 	.word	0x2000300c
 8003d14:	20003010 	.word	0x20003010
 8003d18:	200030c0 	.word	0x200030c0
 8003d1c:	20003020 	.word	0x20003020
 8003d20:	0800c80c 	.word	0x0800c80c

08003d24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	3b04      	subs	r3, #4
 8003d34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	3b04      	subs	r3, #4
 8003d42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	f023 0201 	bic.w	r2, r3, #1
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	3b04      	subs	r3, #4
 8003d52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003d54:	4a0c      	ldr	r2, [pc, #48]	; (8003d88 <pxPortInitialiseStack+0x64>)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	3b14      	subs	r3, #20
 8003d5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	3b04      	subs	r3, #4
 8003d6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f06f 0202 	mvn.w	r2, #2
 8003d72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	3b20      	subs	r3, #32
 8003d78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3714      	adds	r7, #20
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr
 8003d88:	08003d8d 	.word	0x08003d8d

08003d8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003d92:	2300      	movs	r3, #0
 8003d94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003d96:	4b12      	ldr	r3, [pc, #72]	; (8003de0 <prvTaskExitError+0x54>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d9e:	d00a      	beq.n	8003db6 <prvTaskExitError+0x2a>
	__asm volatile
 8003da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da4:	f383 8811 	msr	BASEPRI, r3
 8003da8:	f3bf 8f6f 	isb	sy
 8003dac:	f3bf 8f4f 	dsb	sy
 8003db0:	60fb      	str	r3, [r7, #12]
}
 8003db2:	bf00      	nop
 8003db4:	e7fe      	b.n	8003db4 <prvTaskExitError+0x28>
	__asm volatile
 8003db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dba:	f383 8811 	msr	BASEPRI, r3
 8003dbe:	f3bf 8f6f 	isb	sy
 8003dc2:	f3bf 8f4f 	dsb	sy
 8003dc6:	60bb      	str	r3, [r7, #8]
}
 8003dc8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003dca:	bf00      	nop
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0fc      	beq.n	8003dcc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003dd2:	bf00      	nop
 8003dd4:	bf00      	nop
 8003dd6:	3714      	adds	r7, #20
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	20000208 	.word	0x20000208
	...

08003df0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003df0:	4b07      	ldr	r3, [pc, #28]	; (8003e10 <pxCurrentTCBConst2>)
 8003df2:	6819      	ldr	r1, [r3, #0]
 8003df4:	6808      	ldr	r0, [r1, #0]
 8003df6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dfa:	f380 8809 	msr	PSP, r0
 8003dfe:	f3bf 8f6f 	isb	sy
 8003e02:	f04f 0000 	mov.w	r0, #0
 8003e06:	f380 8811 	msr	BASEPRI, r0
 8003e0a:	4770      	bx	lr
 8003e0c:	f3af 8000 	nop.w

08003e10 <pxCurrentTCBConst2>:
 8003e10:	20002ae4 	.word	0x20002ae4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003e14:	bf00      	nop
 8003e16:	bf00      	nop

08003e18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003e18:	4808      	ldr	r0, [pc, #32]	; (8003e3c <prvPortStartFirstTask+0x24>)
 8003e1a:	6800      	ldr	r0, [r0, #0]
 8003e1c:	6800      	ldr	r0, [r0, #0]
 8003e1e:	f380 8808 	msr	MSP, r0
 8003e22:	f04f 0000 	mov.w	r0, #0
 8003e26:	f380 8814 	msr	CONTROL, r0
 8003e2a:	b662      	cpsie	i
 8003e2c:	b661      	cpsie	f
 8003e2e:	f3bf 8f4f 	dsb	sy
 8003e32:	f3bf 8f6f 	isb	sy
 8003e36:	df00      	svc	0
 8003e38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003e3a:	bf00      	nop
 8003e3c:	e000ed08 	.word	0xe000ed08

08003e40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003e46:	4b46      	ldr	r3, [pc, #280]	; (8003f60 <xPortStartScheduler+0x120>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a46      	ldr	r2, [pc, #280]	; (8003f64 <xPortStartScheduler+0x124>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d10a      	bne.n	8003e66 <xPortStartScheduler+0x26>
	__asm volatile
 8003e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e54:	f383 8811 	msr	BASEPRI, r3
 8003e58:	f3bf 8f6f 	isb	sy
 8003e5c:	f3bf 8f4f 	dsb	sy
 8003e60:	613b      	str	r3, [r7, #16]
}
 8003e62:	bf00      	nop
 8003e64:	e7fe      	b.n	8003e64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003e66:	4b3e      	ldr	r3, [pc, #248]	; (8003f60 <xPortStartScheduler+0x120>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a3f      	ldr	r2, [pc, #252]	; (8003f68 <xPortStartScheduler+0x128>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d10a      	bne.n	8003e86 <xPortStartScheduler+0x46>
	__asm volatile
 8003e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e74:	f383 8811 	msr	BASEPRI, r3
 8003e78:	f3bf 8f6f 	isb	sy
 8003e7c:	f3bf 8f4f 	dsb	sy
 8003e80:	60fb      	str	r3, [r7, #12]
}
 8003e82:	bf00      	nop
 8003e84:	e7fe      	b.n	8003e84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e86:	4b39      	ldr	r3, [pc, #228]	; (8003f6c <xPortStartScheduler+0x12c>)
 8003e88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	22ff      	movs	r2, #255	; 0xff
 8003e96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003ea0:	78fb      	ldrb	r3, [r7, #3]
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	4b31      	ldr	r3, [pc, #196]	; (8003f70 <xPortStartScheduler+0x130>)
 8003eac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003eae:	4b31      	ldr	r3, [pc, #196]	; (8003f74 <xPortStartScheduler+0x134>)
 8003eb0:	2207      	movs	r2, #7
 8003eb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003eb4:	e009      	b.n	8003eca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003eb6:	4b2f      	ldr	r3, [pc, #188]	; (8003f74 <xPortStartScheduler+0x134>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	4a2d      	ldr	r2, [pc, #180]	; (8003f74 <xPortStartScheduler+0x134>)
 8003ebe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ec0:	78fb      	ldrb	r3, [r7, #3]
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003eca:	78fb      	ldrb	r3, [r7, #3]
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed2:	2b80      	cmp	r3, #128	; 0x80
 8003ed4:	d0ef      	beq.n	8003eb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003ed6:	4b27      	ldr	r3, [pc, #156]	; (8003f74 <xPortStartScheduler+0x134>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f1c3 0307 	rsb	r3, r3, #7
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	d00a      	beq.n	8003ef8 <xPortStartScheduler+0xb8>
	__asm volatile
 8003ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee6:	f383 8811 	msr	BASEPRI, r3
 8003eea:	f3bf 8f6f 	isb	sy
 8003eee:	f3bf 8f4f 	dsb	sy
 8003ef2:	60bb      	str	r3, [r7, #8]
}
 8003ef4:	bf00      	nop
 8003ef6:	e7fe      	b.n	8003ef6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003ef8:	4b1e      	ldr	r3, [pc, #120]	; (8003f74 <xPortStartScheduler+0x134>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	021b      	lsls	r3, r3, #8
 8003efe:	4a1d      	ldr	r2, [pc, #116]	; (8003f74 <xPortStartScheduler+0x134>)
 8003f00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003f02:	4b1c      	ldr	r3, [pc, #112]	; (8003f74 <xPortStartScheduler+0x134>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f0a:	4a1a      	ldr	r2, [pc, #104]	; (8003f74 <xPortStartScheduler+0x134>)
 8003f0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003f16:	4b18      	ldr	r3, [pc, #96]	; (8003f78 <xPortStartScheduler+0x138>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a17      	ldr	r2, [pc, #92]	; (8003f78 <xPortStartScheduler+0x138>)
 8003f1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003f22:	4b15      	ldr	r3, [pc, #84]	; (8003f78 <xPortStartScheduler+0x138>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a14      	ldr	r2, [pc, #80]	; (8003f78 <xPortStartScheduler+0x138>)
 8003f28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003f2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003f2e:	f000 f8dd 	bl	80040ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003f32:	4b12      	ldr	r3, [pc, #72]	; (8003f7c <xPortStartScheduler+0x13c>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003f38:	f000 f8fc 	bl	8004134 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003f3c:	4b10      	ldr	r3, [pc, #64]	; (8003f80 <xPortStartScheduler+0x140>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a0f      	ldr	r2, [pc, #60]	; (8003f80 <xPortStartScheduler+0x140>)
 8003f42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003f46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003f48:	f7ff ff66 	bl	8003e18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003f4c:	f7fe ff1a 	bl	8002d84 <vTaskSwitchContext>
	prvTaskExitError();
 8003f50:	f7ff ff1c 	bl	8003d8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3718      	adds	r7, #24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	e000ed00 	.word	0xe000ed00
 8003f64:	410fc271 	.word	0x410fc271
 8003f68:	410fc270 	.word	0x410fc270
 8003f6c:	e000e400 	.word	0xe000e400
 8003f70:	20003110 	.word	0x20003110
 8003f74:	20003114 	.word	0x20003114
 8003f78:	e000ed20 	.word	0xe000ed20
 8003f7c:	20000208 	.word	0x20000208
 8003f80:	e000ef34 	.word	0xe000ef34

08003f84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
	__asm volatile
 8003f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8e:	f383 8811 	msr	BASEPRI, r3
 8003f92:	f3bf 8f6f 	isb	sy
 8003f96:	f3bf 8f4f 	dsb	sy
 8003f9a:	607b      	str	r3, [r7, #4]
}
 8003f9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003f9e:	4b0f      	ldr	r3, [pc, #60]	; (8003fdc <vPortEnterCritical+0x58>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	4a0d      	ldr	r2, [pc, #52]	; (8003fdc <vPortEnterCritical+0x58>)
 8003fa6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003fa8:	4b0c      	ldr	r3, [pc, #48]	; (8003fdc <vPortEnterCritical+0x58>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d10f      	bne.n	8003fd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003fb0:	4b0b      	ldr	r3, [pc, #44]	; (8003fe0 <vPortEnterCritical+0x5c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00a      	beq.n	8003fd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8003fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fbe:	f383 8811 	msr	BASEPRI, r3
 8003fc2:	f3bf 8f6f 	isb	sy
 8003fc6:	f3bf 8f4f 	dsb	sy
 8003fca:	603b      	str	r3, [r7, #0]
}
 8003fcc:	bf00      	nop
 8003fce:	e7fe      	b.n	8003fce <vPortEnterCritical+0x4a>
	}
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr
 8003fdc:	20000208 	.word	0x20000208
 8003fe0:	e000ed04 	.word	0xe000ed04

08003fe4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003fea:	4b12      	ldr	r3, [pc, #72]	; (8004034 <vPortExitCritical+0x50>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10a      	bne.n	8004008 <vPortExitCritical+0x24>
	__asm volatile
 8003ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff6:	f383 8811 	msr	BASEPRI, r3
 8003ffa:	f3bf 8f6f 	isb	sy
 8003ffe:	f3bf 8f4f 	dsb	sy
 8004002:	607b      	str	r3, [r7, #4]
}
 8004004:	bf00      	nop
 8004006:	e7fe      	b.n	8004006 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004008:	4b0a      	ldr	r3, [pc, #40]	; (8004034 <vPortExitCritical+0x50>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	3b01      	subs	r3, #1
 800400e:	4a09      	ldr	r2, [pc, #36]	; (8004034 <vPortExitCritical+0x50>)
 8004010:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004012:	4b08      	ldr	r3, [pc, #32]	; (8004034 <vPortExitCritical+0x50>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d105      	bne.n	8004026 <vPortExitCritical+0x42>
 800401a:	2300      	movs	r3, #0
 800401c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	f383 8811 	msr	BASEPRI, r3
}
 8004024:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004026:	bf00      	nop
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	20000208 	.word	0x20000208
	...

08004040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004040:	f3ef 8009 	mrs	r0, PSP
 8004044:	f3bf 8f6f 	isb	sy
 8004048:	4b15      	ldr	r3, [pc, #84]	; (80040a0 <pxCurrentTCBConst>)
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	f01e 0f10 	tst.w	lr, #16
 8004050:	bf08      	it	eq
 8004052:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004056:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800405a:	6010      	str	r0, [r2, #0]
 800405c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004060:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004064:	f380 8811 	msr	BASEPRI, r0
 8004068:	f3bf 8f4f 	dsb	sy
 800406c:	f3bf 8f6f 	isb	sy
 8004070:	f7fe fe88 	bl	8002d84 <vTaskSwitchContext>
 8004074:	f04f 0000 	mov.w	r0, #0
 8004078:	f380 8811 	msr	BASEPRI, r0
 800407c:	bc09      	pop	{r0, r3}
 800407e:	6819      	ldr	r1, [r3, #0]
 8004080:	6808      	ldr	r0, [r1, #0]
 8004082:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004086:	f01e 0f10 	tst.w	lr, #16
 800408a:	bf08      	it	eq
 800408c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004090:	f380 8809 	msr	PSP, r0
 8004094:	f3bf 8f6f 	isb	sy
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	f3af 8000 	nop.w

080040a0 <pxCurrentTCBConst>:
 80040a0:	20002ae4 	.word	0x20002ae4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80040a4:	bf00      	nop
 80040a6:	bf00      	nop

080040a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
	__asm volatile
 80040ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b2:	f383 8811 	msr	BASEPRI, r3
 80040b6:	f3bf 8f6f 	isb	sy
 80040ba:	f3bf 8f4f 	dsb	sy
 80040be:	607b      	str	r3, [r7, #4]
}
 80040c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80040c2:	f7fe fda5 	bl	8002c10 <xTaskIncrementTick>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d003      	beq.n	80040d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80040cc:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <xPortSysTickHandler+0x40>)
 80040ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	2300      	movs	r3, #0
 80040d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	f383 8811 	msr	BASEPRI, r3
}
 80040de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80040e0:	bf00      	nop
 80040e2:	3708      	adds	r7, #8
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	e000ed04 	.word	0xe000ed04

080040ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80040f0:	4b0b      	ldr	r3, [pc, #44]	; (8004120 <vPortSetupTimerInterrupt+0x34>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80040f6:	4b0b      	ldr	r3, [pc, #44]	; (8004124 <vPortSetupTimerInterrupt+0x38>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80040fc:	4b0a      	ldr	r3, [pc, #40]	; (8004128 <vPortSetupTimerInterrupt+0x3c>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a0a      	ldr	r2, [pc, #40]	; (800412c <vPortSetupTimerInterrupt+0x40>)
 8004102:	fba2 2303 	umull	r2, r3, r2, r3
 8004106:	099b      	lsrs	r3, r3, #6
 8004108:	4a09      	ldr	r2, [pc, #36]	; (8004130 <vPortSetupTimerInterrupt+0x44>)
 800410a:	3b01      	subs	r3, #1
 800410c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800410e:	4b04      	ldr	r3, [pc, #16]	; (8004120 <vPortSetupTimerInterrupt+0x34>)
 8004110:	2207      	movs	r2, #7
 8004112:	601a      	str	r2, [r3, #0]
}
 8004114:	bf00      	nop
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	e000e010 	.word	0xe000e010
 8004124:	e000e018 	.word	0xe000e018
 8004128:	20000240 	.word	0x20000240
 800412c:	10624dd3 	.word	0x10624dd3
 8004130:	e000e014 	.word	0xe000e014

08004134 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004134:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004144 <vPortEnableVFP+0x10>
 8004138:	6801      	ldr	r1, [r0, #0]
 800413a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800413e:	6001      	str	r1, [r0, #0]
 8004140:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004142:	bf00      	nop
 8004144:	e000ed88 	.word	0xe000ed88

08004148 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800414e:	f3ef 8305 	mrs	r3, IPSR
 8004152:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2b0f      	cmp	r3, #15
 8004158:	d914      	bls.n	8004184 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800415a:	4a17      	ldr	r2, [pc, #92]	; (80041b8 <vPortValidateInterruptPriority+0x70>)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4413      	add	r3, r2
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004164:	4b15      	ldr	r3, [pc, #84]	; (80041bc <vPortValidateInterruptPriority+0x74>)
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	7afa      	ldrb	r2, [r7, #11]
 800416a:	429a      	cmp	r2, r3
 800416c:	d20a      	bcs.n	8004184 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800416e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004172:	f383 8811 	msr	BASEPRI, r3
 8004176:	f3bf 8f6f 	isb	sy
 800417a:	f3bf 8f4f 	dsb	sy
 800417e:	607b      	str	r3, [r7, #4]
}
 8004180:	bf00      	nop
 8004182:	e7fe      	b.n	8004182 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004184:	4b0e      	ldr	r3, [pc, #56]	; (80041c0 <vPortValidateInterruptPriority+0x78>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800418c:	4b0d      	ldr	r3, [pc, #52]	; (80041c4 <vPortValidateInterruptPriority+0x7c>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	429a      	cmp	r2, r3
 8004192:	d90a      	bls.n	80041aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004198:	f383 8811 	msr	BASEPRI, r3
 800419c:	f3bf 8f6f 	isb	sy
 80041a0:	f3bf 8f4f 	dsb	sy
 80041a4:	603b      	str	r3, [r7, #0]
}
 80041a6:	bf00      	nop
 80041a8:	e7fe      	b.n	80041a8 <vPortValidateInterruptPriority+0x60>
	}
 80041aa:	bf00      	nop
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	e000e3f0 	.word	0xe000e3f0
 80041bc:	20003110 	.word	0x20003110
 80041c0:	e000ed0c 	.word	0xe000ed0c
 80041c4:	20003114 	.word	0x20003114

080041c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b08a      	sub	sp, #40	; 0x28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80041d0:	2300      	movs	r3, #0
 80041d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80041d4:	f7fe fc4e 	bl	8002a74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80041d8:	4b5b      	ldr	r3, [pc, #364]	; (8004348 <pvPortMalloc+0x180>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80041e0:	f000 f920 	bl	8004424 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80041e4:	4b59      	ldr	r3, [pc, #356]	; (800434c <pvPortMalloc+0x184>)
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4013      	ands	r3, r2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f040 8093 	bne.w	8004318 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d01d      	beq.n	8004234 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80041f8:	2208      	movs	r2, #8
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4413      	add	r3, r2
 80041fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f003 0307 	and.w	r3, r3, #7
 8004206:	2b00      	cmp	r3, #0
 8004208:	d014      	beq.n	8004234 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f023 0307 	bic.w	r3, r3, #7
 8004210:	3308      	adds	r3, #8
 8004212:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f003 0307 	and.w	r3, r3, #7
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00a      	beq.n	8004234 <pvPortMalloc+0x6c>
	__asm volatile
 800421e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004222:	f383 8811 	msr	BASEPRI, r3
 8004226:	f3bf 8f6f 	isb	sy
 800422a:	f3bf 8f4f 	dsb	sy
 800422e:	617b      	str	r3, [r7, #20]
}
 8004230:	bf00      	nop
 8004232:	e7fe      	b.n	8004232 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d06e      	beq.n	8004318 <pvPortMalloc+0x150>
 800423a:	4b45      	ldr	r3, [pc, #276]	; (8004350 <pvPortMalloc+0x188>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	429a      	cmp	r2, r3
 8004242:	d869      	bhi.n	8004318 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004244:	4b43      	ldr	r3, [pc, #268]	; (8004354 <pvPortMalloc+0x18c>)
 8004246:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004248:	4b42      	ldr	r3, [pc, #264]	; (8004354 <pvPortMalloc+0x18c>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800424e:	e004      	b.n	800425a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800425a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	429a      	cmp	r2, r3
 8004262:	d903      	bls.n	800426c <pvPortMalloc+0xa4>
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1f1      	bne.n	8004250 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800426c:	4b36      	ldr	r3, [pc, #216]	; (8004348 <pvPortMalloc+0x180>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004272:	429a      	cmp	r2, r3
 8004274:	d050      	beq.n	8004318 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004276:	6a3b      	ldr	r3, [r7, #32]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2208      	movs	r2, #8
 800427c:	4413      	add	r3, r2
 800427e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	6a3b      	ldr	r3, [r7, #32]
 8004286:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	1ad2      	subs	r2, r2, r3
 8004290:	2308      	movs	r3, #8
 8004292:	005b      	lsls	r3, r3, #1
 8004294:	429a      	cmp	r2, r3
 8004296:	d91f      	bls.n	80042d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4413      	add	r3, r2
 800429e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	f003 0307 	and.w	r3, r3, #7
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00a      	beq.n	80042c0 <pvPortMalloc+0xf8>
	__asm volatile
 80042aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ae:	f383 8811 	msr	BASEPRI, r3
 80042b2:	f3bf 8f6f 	isb	sy
 80042b6:	f3bf 8f4f 	dsb	sy
 80042ba:	613b      	str	r3, [r7, #16]
}
 80042bc:	bf00      	nop
 80042be:	e7fe      	b.n	80042be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	1ad2      	subs	r2, r2, r3
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80042cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80042d2:	69b8      	ldr	r0, [r7, #24]
 80042d4:	f000 f908 	bl	80044e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80042d8:	4b1d      	ldr	r3, [pc, #116]	; (8004350 <pvPortMalloc+0x188>)
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	4a1b      	ldr	r2, [pc, #108]	; (8004350 <pvPortMalloc+0x188>)
 80042e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80042e6:	4b1a      	ldr	r3, [pc, #104]	; (8004350 <pvPortMalloc+0x188>)
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	4b1b      	ldr	r3, [pc, #108]	; (8004358 <pvPortMalloc+0x190>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d203      	bcs.n	80042fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80042f2:	4b17      	ldr	r3, [pc, #92]	; (8004350 <pvPortMalloc+0x188>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a18      	ldr	r2, [pc, #96]	; (8004358 <pvPortMalloc+0x190>)
 80042f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80042fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fc:	685a      	ldr	r2, [r3, #4]
 80042fe:	4b13      	ldr	r3, [pc, #76]	; (800434c <pvPortMalloc+0x184>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	431a      	orrs	r2, r3
 8004304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004306:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	2200      	movs	r2, #0
 800430c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800430e:	4b13      	ldr	r3, [pc, #76]	; (800435c <pvPortMalloc+0x194>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	3301      	adds	r3, #1
 8004314:	4a11      	ldr	r2, [pc, #68]	; (800435c <pvPortMalloc+0x194>)
 8004316:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004318:	f7fe fbba 	bl	8002a90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	f003 0307 	and.w	r3, r3, #7
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00a      	beq.n	800433c <pvPortMalloc+0x174>
	__asm volatile
 8004326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432a:	f383 8811 	msr	BASEPRI, r3
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	f3bf 8f4f 	dsb	sy
 8004336:	60fb      	str	r3, [r7, #12]
}
 8004338:	bf00      	nop
 800433a:	e7fe      	b.n	800433a <pvPortMalloc+0x172>
	return pvReturn;
 800433c:	69fb      	ldr	r3, [r7, #28]
}
 800433e:	4618      	mov	r0, r3
 8004340:	3728      	adds	r7, #40	; 0x28
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	20003cd8 	.word	0x20003cd8
 800434c:	20003cec 	.word	0x20003cec
 8004350:	20003cdc 	.word	0x20003cdc
 8004354:	20003cd0 	.word	0x20003cd0
 8004358:	20003ce0 	.word	0x20003ce0
 800435c:	20003ce4 	.word	0x20003ce4

08004360 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d04d      	beq.n	800440e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004372:	2308      	movs	r3, #8
 8004374:	425b      	negs	r3, r3
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	4413      	add	r3, r2
 800437a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	4b24      	ldr	r3, [pc, #144]	; (8004418 <vPortFree+0xb8>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4013      	ands	r3, r2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10a      	bne.n	80043a4 <vPortFree+0x44>
	__asm volatile
 800438e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004392:	f383 8811 	msr	BASEPRI, r3
 8004396:	f3bf 8f6f 	isb	sy
 800439a:	f3bf 8f4f 	dsb	sy
 800439e:	60fb      	str	r3, [r7, #12]
}
 80043a0:	bf00      	nop
 80043a2:	e7fe      	b.n	80043a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00a      	beq.n	80043c2 <vPortFree+0x62>
	__asm volatile
 80043ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b0:	f383 8811 	msr	BASEPRI, r3
 80043b4:	f3bf 8f6f 	isb	sy
 80043b8:	f3bf 8f4f 	dsb	sy
 80043bc:	60bb      	str	r3, [r7, #8]
}
 80043be:	bf00      	nop
 80043c0:	e7fe      	b.n	80043c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	4b14      	ldr	r3, [pc, #80]	; (8004418 <vPortFree+0xb8>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4013      	ands	r3, r2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d01e      	beq.n	800440e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d11a      	bne.n	800440e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	4b0e      	ldr	r3, [pc, #56]	; (8004418 <vPortFree+0xb8>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	43db      	mvns	r3, r3
 80043e2:	401a      	ands	r2, r3
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80043e8:	f7fe fb44 	bl	8002a74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	4b0a      	ldr	r3, [pc, #40]	; (800441c <vPortFree+0xbc>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4413      	add	r3, r2
 80043f6:	4a09      	ldr	r2, [pc, #36]	; (800441c <vPortFree+0xbc>)
 80043f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80043fa:	6938      	ldr	r0, [r7, #16]
 80043fc:	f000 f874 	bl	80044e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004400:	4b07      	ldr	r3, [pc, #28]	; (8004420 <vPortFree+0xc0>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	3301      	adds	r3, #1
 8004406:	4a06      	ldr	r2, [pc, #24]	; (8004420 <vPortFree+0xc0>)
 8004408:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800440a:	f7fe fb41 	bl	8002a90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800440e:	bf00      	nop
 8004410:	3718      	adds	r7, #24
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	20003cec 	.word	0x20003cec
 800441c:	20003cdc 	.word	0x20003cdc
 8004420:	20003ce8 	.word	0x20003ce8

08004424 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800442a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800442e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004430:	4b27      	ldr	r3, [pc, #156]	; (80044d0 <prvHeapInit+0xac>)
 8004432:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f003 0307 	and.w	r3, r3, #7
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00c      	beq.n	8004458 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	3307      	adds	r3, #7
 8004442:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f023 0307 	bic.w	r3, r3, #7
 800444a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	4a1f      	ldr	r2, [pc, #124]	; (80044d0 <prvHeapInit+0xac>)
 8004454:	4413      	add	r3, r2
 8004456:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800445c:	4a1d      	ldr	r2, [pc, #116]	; (80044d4 <prvHeapInit+0xb0>)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004462:	4b1c      	ldr	r3, [pc, #112]	; (80044d4 <prvHeapInit+0xb0>)
 8004464:	2200      	movs	r2, #0
 8004466:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68ba      	ldr	r2, [r7, #8]
 800446c:	4413      	add	r3, r2
 800446e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004470:	2208      	movs	r2, #8
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	1a9b      	subs	r3, r3, r2
 8004476:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f023 0307 	bic.w	r3, r3, #7
 800447e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4a15      	ldr	r2, [pc, #84]	; (80044d8 <prvHeapInit+0xb4>)
 8004484:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004486:	4b14      	ldr	r3, [pc, #80]	; (80044d8 <prvHeapInit+0xb4>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2200      	movs	r2, #0
 800448c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800448e:	4b12      	ldr	r3, [pc, #72]	; (80044d8 <prvHeapInit+0xb4>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2200      	movs	r2, #0
 8004494:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	1ad2      	subs	r2, r2, r3
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80044a4:	4b0c      	ldr	r3, [pc, #48]	; (80044d8 <prvHeapInit+0xb4>)
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	4a0a      	ldr	r2, [pc, #40]	; (80044dc <prvHeapInit+0xb8>)
 80044b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	4a09      	ldr	r2, [pc, #36]	; (80044e0 <prvHeapInit+0xbc>)
 80044ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80044bc:	4b09      	ldr	r3, [pc, #36]	; (80044e4 <prvHeapInit+0xc0>)
 80044be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80044c2:	601a      	str	r2, [r3, #0]
}
 80044c4:	bf00      	nop
 80044c6:	3714      	adds	r7, #20
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	20003118 	.word	0x20003118
 80044d4:	20003cd0 	.word	0x20003cd0
 80044d8:	20003cd8 	.word	0x20003cd8
 80044dc:	20003ce0 	.word	0x20003ce0
 80044e0:	20003cdc 	.word	0x20003cdc
 80044e4:	20003cec 	.word	0x20003cec

080044e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80044f0:	4b28      	ldr	r3, [pc, #160]	; (8004594 <prvInsertBlockIntoFreeList+0xac>)
 80044f2:	60fb      	str	r3, [r7, #12]
 80044f4:	e002      	b.n	80044fc <prvInsertBlockIntoFreeList+0x14>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	60fb      	str	r3, [r7, #12]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	429a      	cmp	r2, r3
 8004504:	d8f7      	bhi.n	80044f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	4413      	add	r3, r2
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	429a      	cmp	r2, r3
 8004516:	d108      	bne.n	800452a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	441a      	add	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	441a      	add	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	429a      	cmp	r2, r3
 800453c:	d118      	bne.n	8004570 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	4b15      	ldr	r3, [pc, #84]	; (8004598 <prvInsertBlockIntoFreeList+0xb0>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	429a      	cmp	r2, r3
 8004548:	d00d      	beq.n	8004566 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	441a      	add	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	601a      	str	r2, [r3, #0]
 8004564:	e008      	b.n	8004578 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004566:	4b0c      	ldr	r3, [pc, #48]	; (8004598 <prvInsertBlockIntoFreeList+0xb0>)
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	601a      	str	r2, [r3, #0]
 800456e:	e003      	b.n	8004578 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	429a      	cmp	r2, r3
 800457e:	d002      	beq.n	8004586 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004586:	bf00      	nop
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	20003cd0 	.word	0x20003cd0
 8004598:	20003cd8 	.word	0x20003cd8

0800459c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80045a2:	2300      	movs	r3, #0
 80045a4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set In terrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045a6:	2003      	movs	r0, #3
 80045a8:	f000 f98e 	bl	80048c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80045ac:	2000      	movs	r0, #0
 80045ae:	f000 f80d 	bl	80045cc <HAL_InitTick>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d002      	beq.n	80045be <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	71fb      	strb	r3, [r7, #7]
 80045bc:	e001      	b.n	80045c2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80045be:	f006 fa89 	bl	800aad4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80045c2:	79fb      	ldrb	r3, [r7, #7]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3708      	adds	r7, #8
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80045d4:	2300      	movs	r3, #0
 80045d6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80045d8:	4b17      	ldr	r3, [pc, #92]	; (8004638 <HAL_InitTick+0x6c>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d023      	beq.n	8004628 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80045e0:	4b16      	ldr	r3, [pc, #88]	; (800463c <HAL_InitTick+0x70>)
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	4b14      	ldr	r3, [pc, #80]	; (8004638 <HAL_InitTick+0x6c>)
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	4619      	mov	r1, r3
 80045ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80045f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 f9a9 	bl	800494e <HAL_SYSTICK_Config>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10f      	bne.n	8004622 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2b0f      	cmp	r3, #15
 8004606:	d809      	bhi.n	800461c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004608:	2200      	movs	r2, #0
 800460a:	6879      	ldr	r1, [r7, #4]
 800460c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004610:	f000 f965 	bl	80048de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004614:	4a0a      	ldr	r2, [pc, #40]	; (8004640 <HAL_InitTick+0x74>)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6013      	str	r3, [r2, #0]
 800461a:	e007      	b.n	800462c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	73fb      	strb	r3, [r7, #15]
 8004620:	e004      	b.n	800462c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	73fb      	strb	r3, [r7, #15]
 8004626:	e001      	b.n	800462c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800462c:	7bfb      	ldrb	r3, [r7, #15]
}
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	20000210 	.word	0x20000210
 800463c:	20000240 	.word	0x20000240
 8004640:	2000020c 	.word	0x2000020c

08004644 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004644:	b480      	push	{r7}
 8004646:	af00      	add	r7, sp, #0
    //return xTaskGetTickCount();
    return uwTick;
 8004648:	4b03      	ldr	r3, [pc, #12]	; (8004658 <HAL_GetTick+0x14>)
 800464a:	681b      	ldr	r3, [r3, #0]
}
 800464c:	4618      	mov	r0, r3
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	20003cf0 	.word	0x20003cf0

0800465c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004664:	f7ff ffee 	bl	8004644 <HAL_GetTick>
 8004668:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004674:	d005      	beq.n	8004682 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004676:	4b0a      	ldr	r3, [pc, #40]	; (80046a0 <HAL_Delay+0x44>)
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	461a      	mov	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4413      	add	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004682:	bf00      	nop
 8004684:	f7ff ffde 	bl	8004644 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	429a      	cmp	r2, r3
 8004692:	d8f7      	bhi.n	8004684 <HAL_Delay+0x28>
  {
  }
}
 8004694:	bf00      	nop
 8004696:	bf00      	nop
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	20000210 	.word	0x20000210

080046a4 <__NVIC_SetPriorityGrouping>:
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f003 0307 	and.w	r3, r3, #7
 80046b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046b4:	4b0c      	ldr	r3, [pc, #48]	; (80046e8 <__NVIC_SetPriorityGrouping+0x44>)
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046ba:	68ba      	ldr	r2, [r7, #8]
 80046bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80046c0:	4013      	ands	r3, r2
 80046c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80046d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046d6:	4a04      	ldr	r2, [pc, #16]	; (80046e8 <__NVIC_SetPriorityGrouping+0x44>)
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	60d3      	str	r3, [r2, #12]
}
 80046dc:	bf00      	nop
 80046de:	3714      	adds	r7, #20
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr
 80046e8:	e000ed00 	.word	0xe000ed00

080046ec <__NVIC_GetPriorityGrouping>:
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046f0:	4b04      	ldr	r3, [pc, #16]	; (8004704 <__NVIC_GetPriorityGrouping+0x18>)
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	0a1b      	lsrs	r3, r3, #8
 80046f6:	f003 0307 	and.w	r3, r3, #7
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr
 8004704:	e000ed00 	.word	0xe000ed00

08004708 <__NVIC_EnableIRQ>:
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	4603      	mov	r3, r0
 8004710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004716:	2b00      	cmp	r3, #0
 8004718:	db0b      	blt.n	8004732 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800471a:	79fb      	ldrb	r3, [r7, #7]
 800471c:	f003 021f 	and.w	r2, r3, #31
 8004720:	4907      	ldr	r1, [pc, #28]	; (8004740 <__NVIC_EnableIRQ+0x38>)
 8004722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004726:	095b      	lsrs	r3, r3, #5
 8004728:	2001      	movs	r0, #1
 800472a:	fa00 f202 	lsl.w	r2, r0, r2
 800472e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004732:	bf00      	nop
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	e000e100 	.word	0xe000e100

08004744 <__NVIC_DisableIRQ>:
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	4603      	mov	r3, r0
 800474c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800474e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004752:	2b00      	cmp	r3, #0
 8004754:	db12      	blt.n	800477c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004756:	79fb      	ldrb	r3, [r7, #7]
 8004758:	f003 021f 	and.w	r2, r3, #31
 800475c:	490a      	ldr	r1, [pc, #40]	; (8004788 <__NVIC_DisableIRQ+0x44>)
 800475e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004762:	095b      	lsrs	r3, r3, #5
 8004764:	2001      	movs	r0, #1
 8004766:	fa00 f202 	lsl.w	r2, r0, r2
 800476a:	3320      	adds	r3, #32
 800476c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004770:	f3bf 8f4f 	dsb	sy
}
 8004774:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004776:	f3bf 8f6f 	isb	sy
}
 800477a:	bf00      	nop
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr
 8004788:	e000e100 	.word	0xe000e100

0800478c <__NVIC_ClearPendingIRQ>:
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	4603      	mov	r3, r0
 8004794:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800479a:	2b00      	cmp	r3, #0
 800479c:	db0c      	blt.n	80047b8 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800479e:	79fb      	ldrb	r3, [r7, #7]
 80047a0:	f003 021f 	and.w	r2, r3, #31
 80047a4:	4907      	ldr	r1, [pc, #28]	; (80047c4 <__NVIC_ClearPendingIRQ+0x38>)
 80047a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047aa:	095b      	lsrs	r3, r3, #5
 80047ac:	2001      	movs	r0, #1
 80047ae:	fa00 f202 	lsl.w	r2, r0, r2
 80047b2:	3360      	adds	r3, #96	; 0x60
 80047b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	e000e100 	.word	0xe000e100

080047c8 <__NVIC_SetPriority>:
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	4603      	mov	r3, r0
 80047d0:	6039      	str	r1, [r7, #0]
 80047d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	db0a      	blt.n	80047f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	b2da      	uxtb	r2, r3
 80047e0:	490c      	ldr	r1, [pc, #48]	; (8004814 <__NVIC_SetPriority+0x4c>)
 80047e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e6:	0112      	lsls	r2, r2, #4
 80047e8:	b2d2      	uxtb	r2, r2
 80047ea:	440b      	add	r3, r1
 80047ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80047f0:	e00a      	b.n	8004808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	b2da      	uxtb	r2, r3
 80047f6:	4908      	ldr	r1, [pc, #32]	; (8004818 <__NVIC_SetPriority+0x50>)
 80047f8:	79fb      	ldrb	r3, [r7, #7]
 80047fa:	f003 030f 	and.w	r3, r3, #15
 80047fe:	3b04      	subs	r3, #4
 8004800:	0112      	lsls	r2, r2, #4
 8004802:	b2d2      	uxtb	r2, r2
 8004804:	440b      	add	r3, r1
 8004806:	761a      	strb	r2, [r3, #24]
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr
 8004814:	e000e100 	.word	0xe000e100
 8004818:	e000ed00 	.word	0xe000ed00

0800481c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800481c:	b480      	push	{r7}
 800481e:	b089      	sub	sp, #36	; 0x24
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f003 0307 	and.w	r3, r3, #7
 800482e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	f1c3 0307 	rsb	r3, r3, #7
 8004836:	2b04      	cmp	r3, #4
 8004838:	bf28      	it	cs
 800483a:	2304      	movcs	r3, #4
 800483c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	3304      	adds	r3, #4
 8004842:	2b06      	cmp	r3, #6
 8004844:	d902      	bls.n	800484c <NVIC_EncodePriority+0x30>
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	3b03      	subs	r3, #3
 800484a:	e000      	b.n	800484e <NVIC_EncodePriority+0x32>
 800484c:	2300      	movs	r3, #0
 800484e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004850:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	fa02 f303 	lsl.w	r3, r2, r3
 800485a:	43da      	mvns	r2, r3
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	401a      	ands	r2, r3
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004864:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	fa01 f303 	lsl.w	r3, r1, r3
 800486e:	43d9      	mvns	r1, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004874:	4313      	orrs	r3, r2
         );
}
 8004876:	4618      	mov	r0, r3
 8004878:	3724      	adds	r7, #36	; 0x24
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
	...

08004884 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	3b01      	subs	r3, #1
 8004890:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004894:	d301      	bcc.n	800489a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004896:	2301      	movs	r3, #1
 8004898:	e00f      	b.n	80048ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800489a:	4a0a      	ldr	r2, [pc, #40]	; (80048c4 <SysTick_Config+0x40>)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	3b01      	subs	r3, #1
 80048a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048a2:	210f      	movs	r1, #15
 80048a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048a8:	f7ff ff8e 	bl	80047c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048ac:	4b05      	ldr	r3, [pc, #20]	; (80048c4 <SysTick_Config+0x40>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048b2:	4b04      	ldr	r3, [pc, #16]	; (80048c4 <SysTick_Config+0x40>)
 80048b4:	2207      	movs	r2, #7
 80048b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	e000e010 	.word	0xe000e010

080048c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f7ff fee7 	bl	80046a4 <__NVIC_SetPriorityGrouping>
}
 80048d6:	bf00      	nop
 80048d8:	3708      	adds	r7, #8
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b086      	sub	sp, #24
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	4603      	mov	r3, r0
 80048e6:	60b9      	str	r1, [r7, #8]
 80048e8:	607a      	str	r2, [r7, #4]
 80048ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80048ec:	2300      	movs	r3, #0
 80048ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80048f0:	f7ff fefc 	bl	80046ec <__NVIC_GetPriorityGrouping>
 80048f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	68b9      	ldr	r1, [r7, #8]
 80048fa:	6978      	ldr	r0, [r7, #20]
 80048fc:	f7ff ff8e 	bl	800481c <NVIC_EncodePriority>
 8004900:	4602      	mov	r2, r0
 8004902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004906:	4611      	mov	r1, r2
 8004908:	4618      	mov	r0, r3
 800490a:	f7ff ff5d 	bl	80047c8 <__NVIC_SetPriority>
}
 800490e:	bf00      	nop
 8004910:	3718      	adds	r7, #24
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b082      	sub	sp, #8
 800491a:	af00      	add	r7, sp, #0
 800491c:	4603      	mov	r3, r0
 800491e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004924:	4618      	mov	r0, r3
 8004926:	f7ff feef 	bl	8004708 <__NVIC_EnableIRQ>
}
 800492a:	bf00      	nop
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b082      	sub	sp, #8
 8004936:	af00      	add	r7, sp, #0
 8004938:	4603      	mov	r3, r0
 800493a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800493c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004940:	4618      	mov	r0, r3
 8004942:	f7ff feff 	bl	8004744 <__NVIC_DisableIRQ>
}
 8004946:	bf00      	nop
 8004948:	3708      	adds	r7, #8
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b082      	sub	sp, #8
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f7ff ff94 	bl	8004884 <SysTick_Config>
 800495c:	4603      	mov	r3, r0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3708      	adds	r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b082      	sub	sp, #8
 800496a:	af00      	add	r7, sp, #0
 800496c:	4603      	mov	r3, r0
 800496e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004974:	4618      	mov	r0, r3
 8004976:	f7ff ff09 	bl	800478c <__NVIC_ClearPendingIRQ>
}
 800497a:	bf00      	nop
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
	...

08004984 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e098      	b.n	8004ac8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	461a      	mov	r2, r3
 800499c:	4b4d      	ldr	r3, [pc, #308]	; (8004ad4 <HAL_DMA_Init+0x150>)
 800499e:	429a      	cmp	r2, r3
 80049a0:	d80f      	bhi.n	80049c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	461a      	mov	r2, r3
 80049a8:	4b4b      	ldr	r3, [pc, #300]	; (8004ad8 <HAL_DMA_Init+0x154>)
 80049aa:	4413      	add	r3, r2
 80049ac:	4a4b      	ldr	r2, [pc, #300]	; (8004adc <HAL_DMA_Init+0x158>)
 80049ae:	fba2 2303 	umull	r2, r3, r2, r3
 80049b2:	091b      	lsrs	r3, r3, #4
 80049b4:	009a      	lsls	r2, r3, #2
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a48      	ldr	r2, [pc, #288]	; (8004ae0 <HAL_DMA_Init+0x15c>)
 80049be:	641a      	str	r2, [r3, #64]	; 0x40
 80049c0:	e00e      	b.n	80049e0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	461a      	mov	r2, r3
 80049c8:	4b46      	ldr	r3, [pc, #280]	; (8004ae4 <HAL_DMA_Init+0x160>)
 80049ca:	4413      	add	r3, r2
 80049cc:	4a43      	ldr	r2, [pc, #268]	; (8004adc <HAL_DMA_Init+0x158>)
 80049ce:	fba2 2303 	umull	r2, r3, r2, r3
 80049d2:	091b      	lsrs	r3, r3, #4
 80049d4:	009a      	lsls	r2, r3, #2
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a42      	ldr	r2, [pc, #264]	; (8004ae8 <HAL_DMA_Init+0x164>)
 80049de:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2202      	movs	r2, #2
 80049e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80049f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004a04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a3a:	d039      	beq.n	8004ab0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a40:	4a27      	ldr	r2, [pc, #156]	; (8004ae0 <HAL_DMA_Init+0x15c>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d11a      	bne.n	8004a7c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004a46:	4b29      	ldr	r3, [pc, #164]	; (8004aec <HAL_DMA_Init+0x168>)
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a4e:	f003 031c 	and.w	r3, r3, #28
 8004a52:	210f      	movs	r1, #15
 8004a54:	fa01 f303 	lsl.w	r3, r1, r3
 8004a58:	43db      	mvns	r3, r3
 8004a5a:	4924      	ldr	r1, [pc, #144]	; (8004aec <HAL_DMA_Init+0x168>)
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004a60:	4b22      	ldr	r3, [pc, #136]	; (8004aec <HAL_DMA_Init+0x168>)
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6859      	ldr	r1, [r3, #4]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a6c:	f003 031c 	and.w	r3, r3, #28
 8004a70:	fa01 f303 	lsl.w	r3, r1, r3
 8004a74:	491d      	ldr	r1, [pc, #116]	; (8004aec <HAL_DMA_Init+0x168>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	600b      	str	r3, [r1, #0]
 8004a7a:	e019      	b.n	8004ab0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004a7c:	4b1c      	ldr	r3, [pc, #112]	; (8004af0 <HAL_DMA_Init+0x16c>)
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a84:	f003 031c 	and.w	r3, r3, #28
 8004a88:	210f      	movs	r1, #15
 8004a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a8e:	43db      	mvns	r3, r3
 8004a90:	4917      	ldr	r1, [pc, #92]	; (8004af0 <HAL_DMA_Init+0x16c>)
 8004a92:	4013      	ands	r3, r2
 8004a94:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004a96:	4b16      	ldr	r3, [pc, #88]	; (8004af0 <HAL_DMA_Init+0x16c>)
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6859      	ldr	r1, [r3, #4]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa2:	f003 031c 	and.w	r3, r3, #28
 8004aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8004aaa:	4911      	ldr	r1, [pc, #68]	; (8004af0 <HAL_DMA_Init+0x16c>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	40020407 	.word	0x40020407
 8004ad8:	bffdfff8 	.word	0xbffdfff8
 8004adc:	cccccccd 	.word	0xcccccccd
 8004ae0:	40020000 	.word	0x40020000
 8004ae4:	bffdfbf8 	.word	0xbffdfbf8
 8004ae8:	40020400 	.word	0x40020400
 8004aec:	400200a8 	.word	0x400200a8
 8004af0:	400204a8 	.word	0x400204a8

08004af4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
 8004b00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b02:	2300      	movs	r3, #0
 8004b04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d101      	bne.n	8004b14 <HAL_DMA_Start_IT+0x20>
 8004b10:	2302      	movs	r3, #2
 8004b12:	e04b      	b.n	8004bac <HAL_DMA_Start_IT+0xb8>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d13a      	bne.n	8004b9e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 0201 	bic.w	r2, r2, #1
 8004b44:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	68b9      	ldr	r1, [r7, #8]
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f000 f9a7 	bl	8004ea0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d008      	beq.n	8004b6c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f042 020e 	orr.w	r2, r2, #14
 8004b68:	601a      	str	r2, [r3, #0]
 8004b6a:	e00f      	b.n	8004b8c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f022 0204 	bic.w	r2, r2, #4
 8004b7a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 020a 	orr.w	r2, r2, #10
 8004b8a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f042 0201 	orr.w	r2, r2, #1
 8004b9a:	601a      	str	r2, [r3, #0]
 8004b9c:	e005      	b.n	8004baa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3718      	adds	r7, #24
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d008      	beq.n	8004bde <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2204      	movs	r2, #4
 8004bd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e022      	b.n	8004c24 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f022 020e 	bic.w	r2, r2, #14
 8004bec:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f022 0201 	bic.w	r2, r2, #1
 8004bfc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c02:	f003 021c 	and.w	r2, r3, #28
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	2101      	movs	r1, #1
 8004c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8004c10:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004c22:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3714      	adds	r7, #20
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d005      	beq.n	8004c54 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2204      	movs	r2, #4
 8004c4c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	73fb      	strb	r3, [r7, #15]
 8004c52:	e029      	b.n	8004ca8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 020e 	bic.w	r2, r2, #14
 8004c62:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 0201 	bic.w	r2, r2, #1
 8004c72:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c78:	f003 021c 	and.w	r2, r3, #28
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c80:	2101      	movs	r1, #1
 8004c82:	fa01 f202 	lsl.w	r2, r1, r2
 8004c86:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d003      	beq.n	8004ca8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	4798      	blx	r3
    }
  }
  return status;
 8004ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b084      	sub	sp, #16
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cce:	f003 031c 	and.w	r3, r3, #28
 8004cd2:	2204      	movs	r2, #4
 8004cd4:	409a      	lsls	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d026      	beq.n	8004d2c <HAL_DMA_IRQHandler+0x7a>
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d021      	beq.n	8004d2c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0320 	and.w	r3, r3, #32
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d107      	bne.n	8004d06 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f022 0204 	bic.w	r2, r2, #4
 8004d04:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d0a:	f003 021c 	and.w	r2, r3, #28
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	2104      	movs	r1, #4
 8004d14:	fa01 f202 	lsl.w	r2, r1, r2
 8004d18:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d071      	beq.n	8004e06 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004d2a:	e06c      	b.n	8004e06 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d30:	f003 031c 	and.w	r3, r3, #28
 8004d34:	2202      	movs	r2, #2
 8004d36:	409a      	lsls	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d02e      	beq.n	8004d9e <HAL_DMA_IRQHandler+0xec>
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d029      	beq.n	8004d9e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0320 	and.w	r3, r3, #32
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d10b      	bne.n	8004d70 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 020a 	bic.w	r2, r2, #10
 8004d66:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d74:	f003 021c 	and.w	r2, r3, #28
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7c:	2102      	movs	r1, #2
 8004d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8004d82:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d038      	beq.n	8004e06 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004d9c:	e033      	b.n	8004e06 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da2:	f003 031c 	and.w	r3, r3, #28
 8004da6:	2208      	movs	r2, #8
 8004da8:	409a      	lsls	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	4013      	ands	r3, r2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d02a      	beq.n	8004e08 <HAL_DMA_IRQHandler+0x156>
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	f003 0308 	and.w	r3, r3, #8
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d025      	beq.n	8004e08 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 020e 	bic.w	r2, r2, #14
 8004dca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd0:	f003 021c 	and.w	r2, r3, #28
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd8:	2101      	movs	r1, #1
 8004dda:	fa01 f202 	lsl.w	r2, r1, r2
 8004dde:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d004      	beq.n	8004e08 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004e06:	bf00      	nop
 8004e08:	bf00      	nop
}
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 8004e10:	b480      	push	{r7}
 8004e12:	b087      	sub	sp, #28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	460b      	mov	r3, r1
 8004e1a:	607a      	str	r2, [r7, #4]
 8004e1c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d101      	bne.n	8004e30 <HAL_DMA_RegisterCallback+0x20>
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	e031      	b.n	8004e94 <HAL_DMA_RegisterCallback+0x84>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d120      	bne.n	8004e86 <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8004e44:	7afb      	ldrb	r3, [r7, #11]
 8004e46:	2b03      	cmp	r3, #3
 8004e48:	d81a      	bhi.n	8004e80 <HAL_DMA_RegisterCallback+0x70>
 8004e4a:	a201      	add	r2, pc, #4	; (adr r2, 8004e50 <HAL_DMA_RegisterCallback+0x40>)
 8004e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e50:	08004e61 	.word	0x08004e61
 8004e54:	08004e69 	.word	0x08004e69
 8004e58:	08004e71 	.word	0x08004e71
 8004e5c:	08004e79 	.word	0x08004e79
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = pCallback;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	62da      	str	r2, [r3, #44]	; 0x2c
           break;
 8004e66:	e010      	b.n	8004e8a <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = pCallback;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	631a      	str	r2, [r3, #48]	; 0x30
           break;
 8004e6e:	e00c      	b.n	8004e8a <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = pCallback;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	635a      	str	r2, [r3, #52]	; 0x34
           break;
 8004e76:	e008      	b.n	8004e8a <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = pCallback;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 8004e7e:	e004      	b.n	8004e8a <HAL_DMA_RegisterCallback+0x7a>

     default:
           status = HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	75fb      	strb	r3, [r7, #23]
           break;
 8004e84:	e001      	b.n	8004e8a <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8004e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	371c      	adds	r7, #28
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
 8004eac:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb2:	f003 021c 	and.w	r2, r3, #28
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eba:	2101      	movs	r1, #1
 8004ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8004ec0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	2b10      	cmp	r3, #16
 8004ed0:	d108      	bne.n	8004ee4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004ee2:	e007      	b.n	8004ef4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	60da      	str	r2, [r3, #12]
}
 8004ef4:	bf00      	nop
 8004ef6:	3714      	adds	r7, #20
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004f12:	4b2f      	ldr	r3, [pc, #188]	; (8004fd0 <HAL_FLASH_Program+0xd0>)
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d101      	bne.n	8004f1e <HAL_FLASH_Program+0x1e>
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	e053      	b.n	8004fc6 <HAL_FLASH_Program+0xc6>
 8004f1e:	4b2c      	ldr	r3, [pc, #176]	; (8004fd0 <HAL_FLASH_Program+0xd0>)
 8004f20:	2201      	movs	r2, #1
 8004f22:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004f24:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004f28:	f000 f888 	bl	800503c <FLASH_WaitForLastOperation>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8004f30:	7dfb      	ldrb	r3, [r7, #23]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d143      	bne.n	8004fbe <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004f36:	4b26      	ldr	r3, [pc, #152]	; (8004fd0 <HAL_FLASH_Program+0xd0>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004f3c:	4b25      	ldr	r3, [pc, #148]	; (8004fd4 <HAL_FLASH_Program+0xd4>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d009      	beq.n	8004f5c <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8004f48:	4b22      	ldr	r3, [pc, #136]	; (8004fd4 <HAL_FLASH_Program+0xd4>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a21      	ldr	r2, [pc, #132]	; (8004fd4 <HAL_FLASH_Program+0xd4>)
 8004f4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f52:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8004f54:	4b1e      	ldr	r3, [pc, #120]	; (8004fd0 <HAL_FLASH_Program+0xd0>)
 8004f56:	2202      	movs	r2, #2
 8004f58:	771a      	strb	r2, [r3, #28]
 8004f5a:	e002      	b.n	8004f62 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004f5c:	4b1c      	ldr	r3, [pc, #112]	; (8004fd0 <HAL_FLASH_Program+0xd0>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d107      	bne.n	8004f78 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8004f68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f6c:	68b8      	ldr	r0, [r7, #8]
 8004f6e:	f000 f8bd 	bl	80050ec <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8004f72:	2301      	movs	r3, #1
 8004f74:	613b      	str	r3, [r7, #16]
 8004f76:	e010      	b.n	8004f9a <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d002      	beq.n	8004f84 <HAL_FLASH_Program+0x84>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d10a      	bne.n	8004f9a <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	4619      	mov	r1, r3
 8004f88:	68b8      	ldr	r0, [r7, #8]
 8004f8a:	f000 f8d5 	bl	8005138 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d102      	bne.n	8004f9a <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8004f94:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004f98:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004f9a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004f9e:	f000 f84d 	bl	800503c <FLASH_WaitForLastOperation>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d006      	beq.n	8004fba <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8004fac:	4b09      	ldr	r3, [pc, #36]	; (8004fd4 <HAL_FLASH_Program+0xd4>)
 8004fae:	695a      	ldr	r2, [r3, #20]
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	43db      	mvns	r3, r3
 8004fb4:	4907      	ldr	r1, [pc, #28]	; (8004fd4 <HAL_FLASH_Program+0xd4>)
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004fba:	f000 f9cf 	bl	800535c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004fbe:	4b04      	ldr	r3, [pc, #16]	; (8004fd0 <HAL_FLASH_Program+0xd0>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	701a      	strb	r2, [r3, #0]

  return status;
 8004fc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3718      	adds	r7, #24
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	20000214 	.word	0x20000214
 8004fd4:	40022000 	.word	0x40022000

08004fd8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004fe2:	4b0b      	ldr	r3, [pc, #44]	; (8005010 <HAL_FLASH_Unlock+0x38>)
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	da0b      	bge.n	8005002 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004fea:	4b09      	ldr	r3, [pc, #36]	; (8005010 <HAL_FLASH_Unlock+0x38>)
 8004fec:	4a09      	ldr	r2, [pc, #36]	; (8005014 <HAL_FLASH_Unlock+0x3c>)
 8004fee:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004ff0:	4b07      	ldr	r3, [pc, #28]	; (8005010 <HAL_FLASH_Unlock+0x38>)
 8004ff2:	4a09      	ldr	r2, [pc, #36]	; (8005018 <HAL_FLASH_Unlock+0x40>)
 8004ff4:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004ff6:	4b06      	ldr	r3, [pc, #24]	; (8005010 <HAL_FLASH_Unlock+0x38>)
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	da01      	bge.n	8005002 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005002:	79fb      	ldrb	r3, [r7, #7]
}
 8005004:	4618      	mov	r0, r3
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	40022000 	.word	0x40022000
 8005014:	45670123 	.word	0x45670123
 8005018:	cdef89ab 	.word	0xcdef89ab

0800501c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800501c:	b480      	push	{r7}
 800501e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005020:	4b05      	ldr	r3, [pc, #20]	; (8005038 <HAL_FLASH_Lock+0x1c>)
 8005022:	695b      	ldr	r3, [r3, #20]
 8005024:	4a04      	ldr	r2, [pc, #16]	; (8005038 <HAL_FLASH_Lock+0x1c>)
 8005026:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800502a:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	40022000 	.word	0x40022000

0800503c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8005044:	f7ff fafe 	bl	8004644 <HAL_GetTick>
 8005048:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800504a:	e00d      	b.n	8005068 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005052:	d009      	beq.n	8005068 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8005054:	f7ff faf6 	bl	8004644 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	429a      	cmp	r2, r3
 8005062:	d801      	bhi.n	8005068 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e036      	b.n	80050d6 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005068:	4b1d      	ldr	r3, [pc, #116]	; (80050e0 <FLASH_WaitForLastOperation+0xa4>)
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1eb      	bne.n	800504c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8005074:	4b1a      	ldr	r3, [pc, #104]	; (80050e0 <FLASH_WaitForLastOperation+0xa4>)
 8005076:	691a      	ldr	r2, [r3, #16]
 8005078:	4b1a      	ldr	r3, [pc, #104]	; (80050e4 <FLASH_WaitForLastOperation+0xa8>)
 800507a:	4013      	ands	r3, r2
 800507c:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d01e      	beq.n	80050c2 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8005084:	4b18      	ldr	r3, [pc, #96]	; (80050e8 <FLASH_WaitForLastOperation+0xac>)
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	4313      	orrs	r3, r2
 800508c:	4a16      	ldr	r2, [pc, #88]	; (80050e8 <FLASH_WaitForLastOperation+0xac>)
 800508e:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d007      	beq.n	80050aa <FLASH_WaitForLastOperation+0x6e>
 800509a:	4b11      	ldr	r3, [pc, #68]	; (80050e0 <FLASH_WaitForLastOperation+0xa4>)
 800509c:	699a      	ldr	r2, [r3, #24]
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80050a4:	490e      	ldr	r1, [pc, #56]	; (80050e0 <FLASH_WaitForLastOperation+0xa4>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	618b      	str	r3, [r1, #24]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d004      	beq.n	80050be <FLASH_WaitForLastOperation+0x82>
 80050b4:	4a0a      	ldr	r2, [pc, #40]	; (80050e0 <FLASH_WaitForLastOperation+0xa4>)
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80050bc:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e009      	b.n	80050d6 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80050c2:	4b07      	ldr	r3, [pc, #28]	; (80050e0 <FLASH_WaitForLastOperation+0xa4>)
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d002      	beq.n	80050d4 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80050ce:	4b04      	ldr	r3, [pc, #16]	; (80050e0 <FLASH_WaitForLastOperation+0xa4>)
 80050d0:	2201      	movs	r2, #1
 80050d2:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	40022000 	.word	0x40022000
 80050e4:	0002c3fa 	.word	0x0002c3fa
 80050e8:	20000214 	.word	0x20000214

080050ec <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80050f8:	4b0e      	ldr	r3, [pc, #56]	; (8005134 <FLASH_Program_DoubleWord+0x48>)
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	4a0d      	ldr	r2, [pc, #52]	; (8005134 <FLASH_Program_DoubleWord+0x48>)
 80050fe:	f043 0301 	orr.w	r3, r3, #1
 8005102:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	683a      	ldr	r2, [r7, #0]
 8005108:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800510a:	f3bf 8f6f 	isb	sy
}
 800510e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8005110:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005114:	f04f 0200 	mov.w	r2, #0
 8005118:	f04f 0300 	mov.w	r3, #0
 800511c:	000a      	movs	r2, r1
 800511e:	2300      	movs	r3, #0
 8005120:	68f9      	ldr	r1, [r7, #12]
 8005122:	3104      	adds	r1, #4
 8005124:	4613      	mov	r3, r2
 8005126:	600b      	str	r3, [r1, #0]
}
 8005128:	bf00      	nop
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr
 8005134:	40022000 	.word	0x40022000

08005138 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8005138:	b480      	push	{r7}
 800513a:	b089      	sub	sp, #36	; 0x24
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8005142:	2340      	movs	r3, #64	; 0x40
 8005144:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800514e:	4b14      	ldr	r3, [pc, #80]	; (80051a0 <FLASH_Program_Fast+0x68>)
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	4a13      	ldr	r2, [pc, #76]	; (80051a0 <FLASH_Program_Fast+0x68>)
 8005154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005158:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800515a:	f3ef 8310 	mrs	r3, PRIMASK
 800515e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005160:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8005162:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005164:	b672      	cpsid	i
}
 8005166:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	3304      	adds	r3, #4
 8005174:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	3304      	adds	r3, #4
 800517a:	617b      	str	r3, [r7, #20]
    row_index--;
 800517c:	7ffb      	ldrb	r3, [r7, #31]
 800517e:	3b01      	subs	r3, #1
 8005180:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8005182:	7ffb      	ldrb	r3, [r7, #31]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1ef      	bne.n	8005168 <FLASH_Program_Fast+0x30>
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	f383 8810 	msr	PRIMASK, r3
}
 8005192:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8005194:	bf00      	nop
 8005196:	3724      	adds	r7, #36	; 0x24
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	40022000 	.word	0x40022000

080051a4 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80051ae:	4b48      	ldr	r3, [pc, #288]	; (80052d0 <HAL_FLASHEx_Erase+0x12c>)
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d101      	bne.n	80051ba <HAL_FLASHEx_Erase+0x16>
 80051b6:	2302      	movs	r3, #2
 80051b8:	e085      	b.n	80052c6 <HAL_FLASHEx_Erase+0x122>
 80051ba:	4b45      	ldr	r3, [pc, #276]	; (80052d0 <HAL_FLASHEx_Erase+0x12c>)
 80051bc:	2201      	movs	r2, #1
 80051be:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80051c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80051c4:	f7ff ff3a 	bl	800503c <FLASH_WaitForLastOperation>
 80051c8:	4603      	mov	r3, r0
 80051ca:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80051cc:	7bfb      	ldrb	r3, [r7, #15]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d175      	bne.n	80052be <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80051d2:	4b3f      	ldr	r3, [pc, #252]	; (80052d0 <HAL_FLASHEx_Erase+0x12c>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80051d8:	4b3e      	ldr	r3, [pc, #248]	; (80052d4 <HAL_FLASHEx_Erase+0x130>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d013      	beq.n	800520c <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80051e4:	4b3b      	ldr	r3, [pc, #236]	; (80052d4 <HAL_FLASHEx_Erase+0x130>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d009      	beq.n	8005204 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80051f0:	4b38      	ldr	r3, [pc, #224]	; (80052d4 <HAL_FLASHEx_Erase+0x130>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a37      	ldr	r2, [pc, #220]	; (80052d4 <HAL_FLASHEx_Erase+0x130>)
 80051f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051fa:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80051fc:	4b34      	ldr	r3, [pc, #208]	; (80052d0 <HAL_FLASHEx_Erase+0x12c>)
 80051fe:	2203      	movs	r2, #3
 8005200:	771a      	strb	r2, [r3, #28]
 8005202:	e016      	b.n	8005232 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8005204:	4b32      	ldr	r3, [pc, #200]	; (80052d0 <HAL_FLASHEx_Erase+0x12c>)
 8005206:	2201      	movs	r2, #1
 8005208:	771a      	strb	r2, [r3, #28]
 800520a:	e012      	b.n	8005232 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800520c:	4b31      	ldr	r3, [pc, #196]	; (80052d4 <HAL_FLASHEx_Erase+0x130>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005214:	2b00      	cmp	r3, #0
 8005216:	d009      	beq.n	800522c <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8005218:	4b2e      	ldr	r3, [pc, #184]	; (80052d4 <HAL_FLASHEx_Erase+0x130>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a2d      	ldr	r2, [pc, #180]	; (80052d4 <HAL_FLASHEx_Erase+0x130>)
 800521e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005222:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8005224:	4b2a      	ldr	r3, [pc, #168]	; (80052d0 <HAL_FLASHEx_Erase+0x12c>)
 8005226:	2202      	movs	r2, #2
 8005228:	771a      	strb	r2, [r3, #28]
 800522a:	e002      	b.n	8005232 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800522c:	4b28      	ldr	r3, [pc, #160]	; (80052d0 <HAL_FLASHEx_Erase+0x12c>)
 800522e:	2200      	movs	r2, #0
 8005230:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d111      	bne.n	800525e <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	4618      	mov	r0, r3
 8005240:	f000 f84a 	bl	80052d8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005244:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005248:	f7ff fef8 	bl	800503c <FLASH_WaitForLastOperation>
 800524c:	4603      	mov	r3, r0
 800524e:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8005250:	4b20      	ldr	r3, [pc, #128]	; (80052d4 <HAL_FLASHEx_Erase+0x130>)
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	4a1f      	ldr	r2, [pc, #124]	; (80052d4 <HAL_FLASHEx_Erase+0x130>)
 8005256:	f023 0304 	bic.w	r3, r3, #4
 800525a:	6153      	str	r3, [r2, #20]
 800525c:	e02d      	b.n	80052ba <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005264:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	60bb      	str	r3, [r7, #8]
 800526c:	e01d      	b.n	80052aa <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	4619      	mov	r1, r3
 8005274:	68b8      	ldr	r0, [r7, #8]
 8005276:	f000 f84d 	bl	8005314 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800527a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800527e:	f7ff fedd 	bl	800503c <FLASH_WaitForLastOperation>
 8005282:	4603      	mov	r3, r0
 8005284:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005286:	4b13      	ldr	r3, [pc, #76]	; (80052d4 <HAL_FLASHEx_Erase+0x130>)
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	4a12      	ldr	r2, [pc, #72]	; (80052d4 <HAL_FLASHEx_Erase+0x130>)
 800528c:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8005290:	f023 0302 	bic.w	r3, r3, #2
 8005294:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8005296:	7bfb      	ldrb	r3, [r7, #15]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d003      	beq.n	80052a4 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	601a      	str	r2, [r3, #0]
          break;
 80052a2:	e00a      	b.n	80052ba <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	3301      	adds	r3, #1
 80052a8:	60bb      	str	r3, [r7, #8]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	689a      	ldr	r2, [r3, #8]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	4413      	add	r3, r2
 80052b4:	68ba      	ldr	r2, [r7, #8]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d3d9      	bcc.n	800526e <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80052ba:	f000 f84f 	bl	800535c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80052be:	4b04      	ldr	r3, [pc, #16]	; (80052d0 <HAL_FLASHEx_Erase+0x12c>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	701a      	strb	r2, [r3, #0]

  return status;
 80052c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	20000214 	.word	0x20000214
 80052d4:	40022000 	.word	0x40022000

080052d8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d005      	beq.n	80052f6 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80052ea:	4b09      	ldr	r3, [pc, #36]	; (8005310 <FLASH_MassErase+0x38>)
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	4a08      	ldr	r2, [pc, #32]	; (8005310 <FLASH_MassErase+0x38>)
 80052f0:	f043 0304 	orr.w	r3, r3, #4
 80052f4:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80052f6:	4b06      	ldr	r3, [pc, #24]	; (8005310 <FLASH_MassErase+0x38>)
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	4a05      	ldr	r2, [pc, #20]	; (8005310 <FLASH_MassErase+0x38>)
 80052fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005300:	6153      	str	r3, [r2, #20]
}
 8005302:	bf00      	nop
 8005304:	370c      	adds	r7, #12
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	40022000 	.word	0x40022000

08005314 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800531e:	4b0e      	ldr	r3, [pc, #56]	; (8005358 <FLASH_PageErase+0x44>)
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	00db      	lsls	r3, r3, #3
 800532a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800532e:	490a      	ldr	r1, [pc, #40]	; (8005358 <FLASH_PageErase+0x44>)
 8005330:	4313      	orrs	r3, r2
 8005332:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005334:	4b08      	ldr	r3, [pc, #32]	; (8005358 <FLASH_PageErase+0x44>)
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	4a07      	ldr	r2, [pc, #28]	; (8005358 <FLASH_PageErase+0x44>)
 800533a:	f043 0302 	orr.w	r3, r3, #2
 800533e:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005340:	4b05      	ldr	r3, [pc, #20]	; (8005358 <FLASH_PageErase+0x44>)
 8005342:	695b      	ldr	r3, [r3, #20]
 8005344:	4a04      	ldr	r2, [pc, #16]	; (8005358 <FLASH_PageErase+0x44>)
 8005346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800534a:	6153      	str	r3, [r2, #20]
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr
 8005358:	40022000 	.word	0x40022000

0800535c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8005362:	4b21      	ldr	r3, [pc, #132]	; (80053e8 <FLASH_FlushCaches+0x8c>)
 8005364:	7f1b      	ldrb	r3, [r3, #28]
 8005366:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8005368:	79fb      	ldrb	r3, [r7, #7]
 800536a:	2b01      	cmp	r3, #1
 800536c:	d002      	beq.n	8005374 <FLASH_FlushCaches+0x18>
 800536e:	79fb      	ldrb	r3, [r7, #7]
 8005370:	2b03      	cmp	r3, #3
 8005372:	d117      	bne.n	80053a4 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005374:	4b1d      	ldr	r3, [pc, #116]	; (80053ec <FLASH_FlushCaches+0x90>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a1c      	ldr	r2, [pc, #112]	; (80053ec <FLASH_FlushCaches+0x90>)
 800537a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800537e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005380:	4b1a      	ldr	r3, [pc, #104]	; (80053ec <FLASH_FlushCaches+0x90>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a19      	ldr	r2, [pc, #100]	; (80053ec <FLASH_FlushCaches+0x90>)
 8005386:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800538a:	6013      	str	r3, [r2, #0]
 800538c:	4b17      	ldr	r3, [pc, #92]	; (80053ec <FLASH_FlushCaches+0x90>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a16      	ldr	r2, [pc, #88]	; (80053ec <FLASH_FlushCaches+0x90>)
 8005392:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005396:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005398:	4b14      	ldr	r3, [pc, #80]	; (80053ec <FLASH_FlushCaches+0x90>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a13      	ldr	r2, [pc, #76]	; (80053ec <FLASH_FlushCaches+0x90>)
 800539e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053a2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80053a4:	79fb      	ldrb	r3, [r7, #7]
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d002      	beq.n	80053b0 <FLASH_FlushCaches+0x54>
 80053aa:	79fb      	ldrb	r3, [r7, #7]
 80053ac:	2b03      	cmp	r3, #3
 80053ae:	d111      	bne.n	80053d4 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80053b0:	4b0e      	ldr	r3, [pc, #56]	; (80053ec <FLASH_FlushCaches+0x90>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a0d      	ldr	r2, [pc, #52]	; (80053ec <FLASH_FlushCaches+0x90>)
 80053b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80053ba:	6013      	str	r3, [r2, #0]
 80053bc:	4b0b      	ldr	r3, [pc, #44]	; (80053ec <FLASH_FlushCaches+0x90>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a0a      	ldr	r2, [pc, #40]	; (80053ec <FLASH_FlushCaches+0x90>)
 80053c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053c6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80053c8:	4b08      	ldr	r3, [pc, #32]	; (80053ec <FLASH_FlushCaches+0x90>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a07      	ldr	r2, [pc, #28]	; (80053ec <FLASH_FlushCaches+0x90>)
 80053ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80053d2:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80053d4:	4b04      	ldr	r3, [pc, #16]	; (80053e8 <FLASH_FlushCaches+0x8c>)
 80053d6:	2200      	movs	r2, #0
 80053d8:	771a      	strb	r2, [r3, #28]
}
 80053da:	bf00      	nop
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	20000214 	.word	0x20000214
 80053ec:	40022000 	.word	0x40022000

080053f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80053fa:	2300      	movs	r3, #0
 80053fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80053fe:	e154      	b.n	80056aa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	2101      	movs	r1, #1
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	fa01 f303 	lsl.w	r3, r1, r3
 800540c:	4013      	ands	r3, r2
 800540e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2b00      	cmp	r3, #0
 8005414:	f000 8146 	beq.w	80056a4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f003 0303 	and.w	r3, r3, #3
 8005420:	2b01      	cmp	r3, #1
 8005422:	d005      	beq.n	8005430 <HAL_GPIO_Init+0x40>
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f003 0303 	and.w	r3, r3, #3
 800542c:	2b02      	cmp	r3, #2
 800542e:	d130      	bne.n	8005492 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	005b      	lsls	r3, r3, #1
 800543a:	2203      	movs	r2, #3
 800543c:	fa02 f303 	lsl.w	r3, r2, r3
 8005440:	43db      	mvns	r3, r3
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	4013      	ands	r3, r2
 8005446:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	68da      	ldr	r2, [r3, #12]
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	005b      	lsls	r3, r3, #1
 8005450:	fa02 f303 	lsl.w	r3, r2, r3
 8005454:	693a      	ldr	r2, [r7, #16]
 8005456:	4313      	orrs	r3, r2
 8005458:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	693a      	ldr	r2, [r7, #16]
 800545e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005466:	2201      	movs	r2, #1
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	fa02 f303 	lsl.w	r3, r2, r3
 800546e:	43db      	mvns	r3, r3
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	4013      	ands	r3, r2
 8005474:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	091b      	lsrs	r3, r3, #4
 800547c:	f003 0201 	and.w	r2, r3, #1
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	fa02 f303 	lsl.w	r3, r2, r3
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	4313      	orrs	r3, r2
 800548a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f003 0303 	and.w	r3, r3, #3
 800549a:	2b03      	cmp	r3, #3
 800549c:	d017      	beq.n	80054ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	005b      	lsls	r3, r3, #1
 80054a8:	2203      	movs	r2, #3
 80054aa:	fa02 f303 	lsl.w	r3, r2, r3
 80054ae:	43db      	mvns	r3, r3
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	4013      	ands	r3, r2
 80054b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	689a      	ldr	r2, [r3, #8]
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	005b      	lsls	r3, r3, #1
 80054be:	fa02 f303 	lsl.w	r3, r2, r3
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f003 0303 	and.w	r3, r3, #3
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d123      	bne.n	8005522 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	08da      	lsrs	r2, r3, #3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	3208      	adds	r2, #8
 80054e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	f003 0307 	and.w	r3, r3, #7
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	220f      	movs	r2, #15
 80054f2:	fa02 f303 	lsl.w	r3, r2, r3
 80054f6:	43db      	mvns	r3, r3
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	4013      	ands	r3, r2
 80054fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	691a      	ldr	r2, [r3, #16]
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f003 0307 	and.w	r3, r3, #7
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	fa02 f303 	lsl.w	r3, r2, r3
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	4313      	orrs	r3, r2
 8005512:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	08da      	lsrs	r2, r3, #3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	3208      	adds	r2, #8
 800551c:	6939      	ldr	r1, [r7, #16]
 800551e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	005b      	lsls	r3, r3, #1
 800552c:	2203      	movs	r2, #3
 800552e:	fa02 f303 	lsl.w	r3, r2, r3
 8005532:	43db      	mvns	r3, r3
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	4013      	ands	r3, r2
 8005538:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f003 0203 	and.w	r2, r3, #3
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	005b      	lsls	r3, r3, #1
 8005546:	fa02 f303 	lsl.w	r3, r2, r3
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	4313      	orrs	r3, r2
 800554e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800555e:	2b00      	cmp	r3, #0
 8005560:	f000 80a0 	beq.w	80056a4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005564:	4b58      	ldr	r3, [pc, #352]	; (80056c8 <HAL_GPIO_Init+0x2d8>)
 8005566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005568:	4a57      	ldr	r2, [pc, #348]	; (80056c8 <HAL_GPIO_Init+0x2d8>)
 800556a:	f043 0301 	orr.w	r3, r3, #1
 800556e:	6613      	str	r3, [r2, #96]	; 0x60
 8005570:	4b55      	ldr	r3, [pc, #340]	; (80056c8 <HAL_GPIO_Init+0x2d8>)
 8005572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005574:	f003 0301 	and.w	r3, r3, #1
 8005578:	60bb      	str	r3, [r7, #8]
 800557a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800557c:	4a53      	ldr	r2, [pc, #332]	; (80056cc <HAL_GPIO_Init+0x2dc>)
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	089b      	lsrs	r3, r3, #2
 8005582:	3302      	adds	r3, #2
 8005584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005588:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f003 0303 	and.w	r3, r3, #3
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	220f      	movs	r2, #15
 8005594:	fa02 f303 	lsl.w	r3, r2, r3
 8005598:	43db      	mvns	r3, r3
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	4013      	ands	r3, r2
 800559e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80055a6:	d019      	beq.n	80055dc <HAL_GPIO_Init+0x1ec>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a49      	ldr	r2, [pc, #292]	; (80056d0 <HAL_GPIO_Init+0x2e0>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d013      	beq.n	80055d8 <HAL_GPIO_Init+0x1e8>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a48      	ldr	r2, [pc, #288]	; (80056d4 <HAL_GPIO_Init+0x2e4>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d00d      	beq.n	80055d4 <HAL_GPIO_Init+0x1e4>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a47      	ldr	r2, [pc, #284]	; (80056d8 <HAL_GPIO_Init+0x2e8>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d007      	beq.n	80055d0 <HAL_GPIO_Init+0x1e0>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a46      	ldr	r2, [pc, #280]	; (80056dc <HAL_GPIO_Init+0x2ec>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d101      	bne.n	80055cc <HAL_GPIO_Init+0x1dc>
 80055c8:	2304      	movs	r3, #4
 80055ca:	e008      	b.n	80055de <HAL_GPIO_Init+0x1ee>
 80055cc:	2307      	movs	r3, #7
 80055ce:	e006      	b.n	80055de <HAL_GPIO_Init+0x1ee>
 80055d0:	2303      	movs	r3, #3
 80055d2:	e004      	b.n	80055de <HAL_GPIO_Init+0x1ee>
 80055d4:	2302      	movs	r3, #2
 80055d6:	e002      	b.n	80055de <HAL_GPIO_Init+0x1ee>
 80055d8:	2301      	movs	r3, #1
 80055da:	e000      	b.n	80055de <HAL_GPIO_Init+0x1ee>
 80055dc:	2300      	movs	r3, #0
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	f002 0203 	and.w	r2, r2, #3
 80055e4:	0092      	lsls	r2, r2, #2
 80055e6:	4093      	lsls	r3, r2
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80055ee:	4937      	ldr	r1, [pc, #220]	; (80056cc <HAL_GPIO_Init+0x2dc>)
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	089b      	lsrs	r3, r3, #2
 80055f4:	3302      	adds	r3, #2
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80055fc:	4b38      	ldr	r3, [pc, #224]	; (80056e0 <HAL_GPIO_Init+0x2f0>)
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	43db      	mvns	r3, r3
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	4013      	ands	r3, r2
 800560a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d003      	beq.n	8005620 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	4313      	orrs	r3, r2
 800561e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005620:	4a2f      	ldr	r2, [pc, #188]	; (80056e0 <HAL_GPIO_Init+0x2f0>)
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005626:	4b2e      	ldr	r3, [pc, #184]	; (80056e0 <HAL_GPIO_Init+0x2f0>)
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	43db      	mvns	r3, r3
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	4013      	ands	r3, r2
 8005634:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d003      	beq.n	800564a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	4313      	orrs	r3, r2
 8005648:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800564a:	4a25      	ldr	r2, [pc, #148]	; (80056e0 <HAL_GPIO_Init+0x2f0>)
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005650:	4b23      	ldr	r3, [pc, #140]	; (80056e0 <HAL_GPIO_Init+0x2f0>)
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	43db      	mvns	r3, r3
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	4013      	ands	r3, r2
 800565e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d003      	beq.n	8005674 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	4313      	orrs	r3, r2
 8005672:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005674:	4a1a      	ldr	r2, [pc, #104]	; (80056e0 <HAL_GPIO_Init+0x2f0>)
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800567a:	4b19      	ldr	r3, [pc, #100]	; (80056e0 <HAL_GPIO_Init+0x2f0>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	43db      	mvns	r3, r3
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	4013      	ands	r3, r2
 8005688:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	4313      	orrs	r3, r2
 800569c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800569e:	4a10      	ldr	r2, [pc, #64]	; (80056e0 <HAL_GPIO_Init+0x2f0>)
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	3301      	adds	r3, #1
 80056a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	fa22 f303 	lsr.w	r3, r2, r3
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f47f aea3 	bne.w	8005400 <HAL_GPIO_Init+0x10>
  }
}
 80056ba:	bf00      	nop
 80056bc:	bf00      	nop
 80056be:	371c      	adds	r7, #28
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr
 80056c8:	40021000 	.word	0x40021000
 80056cc:	40010000 	.word	0x40010000
 80056d0:	48000400 	.word	0x48000400
 80056d4:	48000800 	.word	0x48000800
 80056d8:	48000c00 	.word	0x48000c00
 80056dc:	48001000 	.word	0x48001000
 80056e0:	40010400 	.word	0x40010400

080056e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	460b      	mov	r3, r1
 80056ee:	807b      	strh	r3, [r7, #2]
 80056f0:	4613      	mov	r3, r2
 80056f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80056f4:	787b      	ldrb	r3, [r7, #1]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d003      	beq.n	8005702 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80056fa:	887a      	ldrh	r2, [r7, #2]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005700:	e002      	b.n	8005708 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005702:	887a      	ldrh	r2, [r7, #2]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	4603      	mov	r3, r0
 800571c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800571e:	4b08      	ldr	r3, [pc, #32]	; (8005740 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005720:	695a      	ldr	r2, [r3, #20]
 8005722:	88fb      	ldrh	r3, [r7, #6]
 8005724:	4013      	ands	r3, r2
 8005726:	2b00      	cmp	r3, #0
 8005728:	d006      	beq.n	8005738 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800572a:	4a05      	ldr	r2, [pc, #20]	; (8005740 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800572c:	88fb      	ldrh	r3, [r7, #6]
 800572e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005730:	88fb      	ldrh	r3, [r7, #6]
 8005732:	4618      	mov	r0, r3
 8005734:	f005 fccc 	bl	800b0d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005738:	bf00      	nop
 800573a:	3708      	adds	r7, #8
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	40010400 	.word	0x40010400

08005744 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005748:	4b05      	ldr	r3, [pc, #20]	; (8005760 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a04      	ldr	r2, [pc, #16]	; (8005760 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800574e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005752:	6013      	str	r3, [r2, #0]
}
 8005754:	bf00      	nop
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	40007000 	.word	0x40007000

08005764 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 800576c:	4b2b      	ldr	r3, [pc, #172]	; (800581c <HAL_PWR_ConfigPVD+0xb8>)
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f023 020e 	bic.w	r2, r3, #14
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4928      	ldr	r1, [pc, #160]	; (800581c <HAL_PWR_ConfigPVD+0xb8>)
 800577a:	4313      	orrs	r3, r2
 800577c:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 800577e:	4b28      	ldr	r3, [pc, #160]	; (8005820 <HAL_PWR_ConfigPVD+0xbc>)
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	4a27      	ldr	r2, [pc, #156]	; (8005820 <HAL_PWR_ConfigPVD+0xbc>)
 8005784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005788:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 800578a:	4b25      	ldr	r3, [pc, #148]	; (8005820 <HAL_PWR_ConfigPVD+0xbc>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a24      	ldr	r2, [pc, #144]	; (8005820 <HAL_PWR_ConfigPVD+0xbc>)
 8005790:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005794:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8005796:	4b22      	ldr	r3, [pc, #136]	; (8005820 <HAL_PWR_ConfigPVD+0xbc>)
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	4a21      	ldr	r2, [pc, #132]	; (8005820 <HAL_PWR_ConfigPVD+0xbc>)
 800579c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057a0:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 80057a2:	4b1f      	ldr	r3, [pc, #124]	; (8005820 <HAL_PWR_ConfigPVD+0xbc>)
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	4a1e      	ldr	r2, [pc, #120]	; (8005820 <HAL_PWR_ConfigPVD+0xbc>)
 80057a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057ac:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d005      	beq.n	80057c6 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 80057ba:	4b19      	ldr	r3, [pc, #100]	; (8005820 <HAL_PWR_ConfigPVD+0xbc>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a18      	ldr	r2, [pc, #96]	; (8005820 <HAL_PWR_ConfigPVD+0xbc>)
 80057c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057c4:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d005      	beq.n	80057de <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 80057d2:	4b13      	ldr	r3, [pc, #76]	; (8005820 <HAL_PWR_ConfigPVD+0xbc>)
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	4a12      	ldr	r2, [pc, #72]	; (8005820 <HAL_PWR_ConfigPVD+0xbc>)
 80057d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057dc:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d005      	beq.n	80057f6 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 80057ea:	4b0d      	ldr	r3, [pc, #52]	; (8005820 <HAL_PWR_ConfigPVD+0xbc>)
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	4a0c      	ldr	r2, [pc, #48]	; (8005820 <HAL_PWR_ConfigPVD+0xbc>)
 80057f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057f4:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f003 0302 	and.w	r3, r3, #2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d005      	beq.n	800580e <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8005802:	4b07      	ldr	r3, [pc, #28]	; (8005820 <HAL_PWR_ConfigPVD+0xbc>)
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	4a06      	ldr	r2, [pc, #24]	; (8005820 <HAL_PWR_ConfigPVD+0xbc>)
 8005808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800580c:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr
 800581c:	40007000 	.word	0x40007000
 8005820:	40010400 	.word	0x40010400

08005824 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8005824:	b480      	push	{r7}
 8005826:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8005828:	4b05      	ldr	r3, [pc, #20]	; (8005840 <HAL_PWR_EnablePVD+0x1c>)
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	4a04      	ldr	r2, [pc, #16]	; (8005840 <HAL_PWR_EnablePVD+0x1c>)
 800582e:	f043 0301 	orr.w	r3, r3, #1
 8005832:	6053      	str	r3, [r2, #4]
}
 8005834:	bf00      	nop
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	40007000 	.word	0x40007000

08005844 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005844:	b480      	push	{r7}
 8005846:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005848:	4b04      	ldr	r3, [pc, #16]	; (800585c <HAL_PWREx_GetVoltageRange+0x18>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005850:	4618      	mov	r0, r3
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	40007000 	.word	0x40007000

08005860 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800586e:	d130      	bne.n	80058d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005870:	4b23      	ldr	r3, [pc, #140]	; (8005900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800587c:	d038      	beq.n	80058f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800587e:	4b20      	ldr	r3, [pc, #128]	; (8005900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005886:	4a1e      	ldr	r2, [pc, #120]	; (8005900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005888:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800588c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800588e:	4b1d      	ldr	r3, [pc, #116]	; (8005904 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2232      	movs	r2, #50	; 0x32
 8005894:	fb02 f303 	mul.w	r3, r2, r3
 8005898:	4a1b      	ldr	r2, [pc, #108]	; (8005908 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800589a:	fba2 2303 	umull	r2, r3, r2, r3
 800589e:	0c9b      	lsrs	r3, r3, #18
 80058a0:	3301      	adds	r3, #1
 80058a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058a4:	e002      	b.n	80058ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	3b01      	subs	r3, #1
 80058aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058ac:	4b14      	ldr	r3, [pc, #80]	; (8005900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058b8:	d102      	bne.n	80058c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1f2      	bne.n	80058a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80058c0:	4b0f      	ldr	r3, [pc, #60]	; (8005900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058c2:	695b      	ldr	r3, [r3, #20]
 80058c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058cc:	d110      	bne.n	80058f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e00f      	b.n	80058f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80058d2:	4b0b      	ldr	r3, [pc, #44]	; (8005900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80058da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058de:	d007      	beq.n	80058f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80058e0:	4b07      	ldr	r3, [pc, #28]	; (8005900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80058e8:	4a05      	ldr	r2, [pc, #20]	; (8005900 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3714      	adds	r7, #20
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	40007000 	.word	0x40007000
 8005904:	20000240 	.word	0x20000240
 8005908:	431bde83 	.word	0x431bde83

0800590c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b088      	sub	sp, #32
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d102      	bne.n	8005920 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	f000 bc02 	b.w	8006124 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005920:	4b96      	ldr	r3, [pc, #600]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f003 030c 	and.w	r3, r3, #12
 8005928:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800592a:	4b94      	ldr	r3, [pc, #592]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	f003 0303 	and.w	r3, r3, #3
 8005932:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0310 	and.w	r3, r3, #16
 800593c:	2b00      	cmp	r3, #0
 800593e:	f000 80e4 	beq.w	8005b0a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d007      	beq.n	8005958 <HAL_RCC_OscConfig+0x4c>
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	2b0c      	cmp	r3, #12
 800594c:	f040 808b 	bne.w	8005a66 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	2b01      	cmp	r3, #1
 8005954:	f040 8087 	bne.w	8005a66 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005958:	4b88      	ldr	r3, [pc, #544]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0302 	and.w	r3, r3, #2
 8005960:	2b00      	cmp	r3, #0
 8005962:	d005      	beq.n	8005970 <HAL_RCC_OscConfig+0x64>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d101      	bne.n	8005970 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e3d9      	b.n	8006124 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a1a      	ldr	r2, [r3, #32]
 8005974:	4b81      	ldr	r3, [pc, #516]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0308 	and.w	r3, r3, #8
 800597c:	2b00      	cmp	r3, #0
 800597e:	d004      	beq.n	800598a <HAL_RCC_OscConfig+0x7e>
 8005980:	4b7e      	ldr	r3, [pc, #504]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005988:	e005      	b.n	8005996 <HAL_RCC_OscConfig+0x8a>
 800598a:	4b7c      	ldr	r3, [pc, #496]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 800598c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005990:	091b      	lsrs	r3, r3, #4
 8005992:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005996:	4293      	cmp	r3, r2
 8005998:	d223      	bcs.n	80059e2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	4618      	mov	r0, r3
 80059a0:	f000 fd8c 	bl	80064bc <RCC_SetFlashLatencyFromMSIRange>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d001      	beq.n	80059ae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e3ba      	b.n	8006124 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80059ae:	4b73      	ldr	r3, [pc, #460]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a72      	ldr	r2, [pc, #456]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 80059b4:	f043 0308 	orr.w	r3, r3, #8
 80059b8:	6013      	str	r3, [r2, #0]
 80059ba:	4b70      	ldr	r3, [pc, #448]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	496d      	ldr	r1, [pc, #436]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80059cc:	4b6b      	ldr	r3, [pc, #428]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	69db      	ldr	r3, [r3, #28]
 80059d8:	021b      	lsls	r3, r3, #8
 80059da:	4968      	ldr	r1, [pc, #416]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	604b      	str	r3, [r1, #4]
 80059e0:	e025      	b.n	8005a2e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80059e2:	4b66      	ldr	r3, [pc, #408]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a65      	ldr	r2, [pc, #404]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 80059e8:	f043 0308 	orr.w	r3, r3, #8
 80059ec:	6013      	str	r3, [r2, #0]
 80059ee:	4b63      	ldr	r3, [pc, #396]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	4960      	ldr	r1, [pc, #384]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a00:	4b5e      	ldr	r3, [pc, #376]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	69db      	ldr	r3, [r3, #28]
 8005a0c:	021b      	lsls	r3, r3, #8
 8005a0e:	495b      	ldr	r1, [pc, #364]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005a10:	4313      	orrs	r3, r2
 8005a12:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d109      	bne.n	8005a2e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f000 fd4c 	bl	80064bc <RCC_SetFlashLatencyFromMSIRange>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d001      	beq.n	8005a2e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e37a      	b.n	8006124 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a2e:	f000 fc81 	bl	8006334 <HAL_RCC_GetSysClockFreq>
 8005a32:	4602      	mov	r2, r0
 8005a34:	4b51      	ldr	r3, [pc, #324]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	091b      	lsrs	r3, r3, #4
 8005a3a:	f003 030f 	and.w	r3, r3, #15
 8005a3e:	4950      	ldr	r1, [pc, #320]	; (8005b80 <HAL_RCC_OscConfig+0x274>)
 8005a40:	5ccb      	ldrb	r3, [r1, r3]
 8005a42:	f003 031f 	and.w	r3, r3, #31
 8005a46:	fa22 f303 	lsr.w	r3, r2, r3
 8005a4a:	4a4e      	ldr	r2, [pc, #312]	; (8005b84 <HAL_RCC_OscConfig+0x278>)
 8005a4c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005a4e:	4b4e      	ldr	r3, [pc, #312]	; (8005b88 <HAL_RCC_OscConfig+0x27c>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7fe fdba 	bl	80045cc <HAL_InitTick>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005a5c:	7bfb      	ldrb	r3, [r7, #15]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d052      	beq.n	8005b08 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005a62:	7bfb      	ldrb	r3, [r7, #15]
 8005a64:	e35e      	b.n	8006124 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d032      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005a6e:	4b43      	ldr	r3, [pc, #268]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a42      	ldr	r2, [pc, #264]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005a74:	f043 0301 	orr.w	r3, r3, #1
 8005a78:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005a7a:	f7fe fde3 	bl	8004644 <HAL_GetTick>
 8005a7e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a80:	e008      	b.n	8005a94 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005a82:	f7fe fddf 	bl	8004644 <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d901      	bls.n	8005a94 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e347      	b.n	8006124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a94:	4b39      	ldr	r3, [pc, #228]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0302 	and.w	r3, r3, #2
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d0f0      	beq.n	8005a82 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005aa0:	4b36      	ldr	r3, [pc, #216]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a35      	ldr	r2, [pc, #212]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005aa6:	f043 0308 	orr.w	r3, r3, #8
 8005aaa:	6013      	str	r3, [r2, #0]
 8005aac:	4b33      	ldr	r3, [pc, #204]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a1b      	ldr	r3, [r3, #32]
 8005ab8:	4930      	ldr	r1, [pc, #192]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005abe:	4b2f      	ldr	r3, [pc, #188]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	021b      	lsls	r3, r3, #8
 8005acc:	492b      	ldr	r1, [pc, #172]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	604b      	str	r3, [r1, #4]
 8005ad2:	e01a      	b.n	8005b0a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005ad4:	4b29      	ldr	r3, [pc, #164]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a28      	ldr	r2, [pc, #160]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005ada:	f023 0301 	bic.w	r3, r3, #1
 8005ade:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ae0:	f7fe fdb0 	bl	8004644 <HAL_GetTick>
 8005ae4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005ae6:	e008      	b.n	8005afa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ae8:	f7fe fdac 	bl	8004644 <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d901      	bls.n	8005afa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e314      	b.n	8006124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005afa:	4b20      	ldr	r3, [pc, #128]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1f0      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x1dc>
 8005b06:	e000      	b.n	8005b0a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005b08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d073      	beq.n	8005bfe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	2b08      	cmp	r3, #8
 8005b1a:	d005      	beq.n	8005b28 <HAL_RCC_OscConfig+0x21c>
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	2b0c      	cmp	r3, #12
 8005b20:	d10e      	bne.n	8005b40 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	2b03      	cmp	r3, #3
 8005b26:	d10b      	bne.n	8005b40 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b28:	4b14      	ldr	r3, [pc, #80]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d063      	beq.n	8005bfc <HAL_RCC_OscConfig+0x2f0>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d15f      	bne.n	8005bfc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e2f1      	b.n	8006124 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b48:	d106      	bne.n	8005b58 <HAL_RCC_OscConfig+0x24c>
 8005b4a:	4b0c      	ldr	r3, [pc, #48]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a0b      	ldr	r2, [pc, #44]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b54:	6013      	str	r3, [r2, #0]
 8005b56:	e025      	b.n	8005ba4 <HAL_RCC_OscConfig+0x298>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b60:	d114      	bne.n	8005b8c <HAL_RCC_OscConfig+0x280>
 8005b62:	4b06      	ldr	r3, [pc, #24]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a05      	ldr	r2, [pc, #20]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b6c:	6013      	str	r3, [r2, #0]
 8005b6e:	4b03      	ldr	r3, [pc, #12]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a02      	ldr	r2, [pc, #8]	; (8005b7c <HAL_RCC_OscConfig+0x270>)
 8005b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b78:	6013      	str	r3, [r2, #0]
 8005b7a:	e013      	b.n	8005ba4 <HAL_RCC_OscConfig+0x298>
 8005b7c:	40021000 	.word	0x40021000
 8005b80:	0800c894 	.word	0x0800c894
 8005b84:	20000240 	.word	0x20000240
 8005b88:	2000020c 	.word	0x2000020c
 8005b8c:	4ba0      	ldr	r3, [pc, #640]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a9f      	ldr	r2, [pc, #636]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005b92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b96:	6013      	str	r3, [r2, #0]
 8005b98:	4b9d      	ldr	r3, [pc, #628]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a9c      	ldr	r2, [pc, #624]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005b9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ba2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d013      	beq.n	8005bd4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bac:	f7fe fd4a 	bl	8004644 <HAL_GetTick>
 8005bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bb2:	e008      	b.n	8005bc6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bb4:	f7fe fd46 	bl	8004644 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	2b64      	cmp	r3, #100	; 0x64
 8005bc0:	d901      	bls.n	8005bc6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e2ae      	b.n	8006124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bc6:	4b92      	ldr	r3, [pc, #584]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d0f0      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x2a8>
 8005bd2:	e014      	b.n	8005bfe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bd4:	f7fe fd36 	bl	8004644 <HAL_GetTick>
 8005bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005bda:	e008      	b.n	8005bee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bdc:	f7fe fd32 	bl	8004644 <HAL_GetTick>
 8005be0:	4602      	mov	r2, r0
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	2b64      	cmp	r3, #100	; 0x64
 8005be8:	d901      	bls.n	8005bee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e29a      	b.n	8006124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005bee:	4b88      	ldr	r3, [pc, #544]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1f0      	bne.n	8005bdc <HAL_RCC_OscConfig+0x2d0>
 8005bfa:	e000      	b.n	8005bfe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d060      	beq.n	8005ccc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	2b04      	cmp	r3, #4
 8005c0e:	d005      	beq.n	8005c1c <HAL_RCC_OscConfig+0x310>
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	2b0c      	cmp	r3, #12
 8005c14:	d119      	bne.n	8005c4a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d116      	bne.n	8005c4a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c1c:	4b7c      	ldr	r3, [pc, #496]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d005      	beq.n	8005c34 <HAL_RCC_OscConfig+0x328>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d101      	bne.n	8005c34 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e277      	b.n	8006124 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c34:	4b76      	ldr	r3, [pc, #472]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	061b      	lsls	r3, r3, #24
 8005c42:	4973      	ldr	r1, [pc, #460]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005c44:	4313      	orrs	r3, r2
 8005c46:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c48:	e040      	b.n	8005ccc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d023      	beq.n	8005c9a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c52:	4b6f      	ldr	r3, [pc, #444]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a6e      	ldr	r2, [pc, #440]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c5e:	f7fe fcf1 	bl	8004644 <HAL_GetTick>
 8005c62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c64:	e008      	b.n	8005c78 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c66:	f7fe fced 	bl	8004644 <HAL_GetTick>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d901      	bls.n	8005c78 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e255      	b.n	8006124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c78:	4b65      	ldr	r3, [pc, #404]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d0f0      	beq.n	8005c66 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c84:	4b62      	ldr	r3, [pc, #392]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	061b      	lsls	r3, r3, #24
 8005c92:	495f      	ldr	r1, [pc, #380]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005c94:	4313      	orrs	r3, r2
 8005c96:	604b      	str	r3, [r1, #4]
 8005c98:	e018      	b.n	8005ccc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c9a:	4b5d      	ldr	r3, [pc, #372]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a5c      	ldr	r2, [pc, #368]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005ca0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ca4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ca6:	f7fe fccd 	bl	8004644 <HAL_GetTick>
 8005caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005cac:	e008      	b.n	8005cc0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cae:	f7fe fcc9 	bl	8004644 <HAL_GetTick>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d901      	bls.n	8005cc0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e231      	b.n	8006124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005cc0:	4b53      	ldr	r3, [pc, #332]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1f0      	bne.n	8005cae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0308 	and.w	r3, r3, #8
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d03c      	beq.n	8005d52 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d01c      	beq.n	8005d1a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ce0:	4b4b      	ldr	r3, [pc, #300]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ce6:	4a4a      	ldr	r2, [pc, #296]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005ce8:	f043 0301 	orr.w	r3, r3, #1
 8005cec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cf0:	f7fe fca8 	bl	8004644 <HAL_GetTick>
 8005cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005cf6:	e008      	b.n	8005d0a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cf8:	f7fe fca4 	bl	8004644 <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d901      	bls.n	8005d0a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e20c      	b.n	8006124 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d0a:	4b41      	ldr	r3, [pc, #260]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d10:	f003 0302 	and.w	r3, r3, #2
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d0ef      	beq.n	8005cf8 <HAL_RCC_OscConfig+0x3ec>
 8005d18:	e01b      	b.n	8005d52 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d1a:	4b3d      	ldr	r3, [pc, #244]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d20:	4a3b      	ldr	r2, [pc, #236]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005d22:	f023 0301 	bic.w	r3, r3, #1
 8005d26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d2a:	f7fe fc8b 	bl	8004644 <HAL_GetTick>
 8005d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d30:	e008      	b.n	8005d44 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d32:	f7fe fc87 	bl	8004644 <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d901      	bls.n	8005d44 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e1ef      	b.n	8006124 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d44:	4b32      	ldr	r3, [pc, #200]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d4a:	f003 0302 	and.w	r3, r3, #2
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1ef      	bne.n	8005d32 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0304 	and.w	r3, r3, #4
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	f000 80a6 	beq.w	8005eac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d60:	2300      	movs	r3, #0
 8005d62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005d64:	4b2a      	ldr	r3, [pc, #168]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10d      	bne.n	8005d8c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d70:	4b27      	ldr	r3, [pc, #156]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d74:	4a26      	ldr	r2, [pc, #152]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d7a:	6593      	str	r3, [r2, #88]	; 0x58
 8005d7c:	4b24      	ldr	r3, [pc, #144]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d84:	60bb      	str	r3, [r7, #8]
 8005d86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d8c:	4b21      	ldr	r3, [pc, #132]	; (8005e14 <HAL_RCC_OscConfig+0x508>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d118      	bne.n	8005dca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d98:	4b1e      	ldr	r3, [pc, #120]	; (8005e14 <HAL_RCC_OscConfig+0x508>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a1d      	ldr	r2, [pc, #116]	; (8005e14 <HAL_RCC_OscConfig+0x508>)
 8005d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005da2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005da4:	f7fe fc4e 	bl	8004644 <HAL_GetTick>
 8005da8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005daa:	e008      	b.n	8005dbe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dac:	f7fe fc4a 	bl	8004644 <HAL_GetTick>
 8005db0:	4602      	mov	r2, r0
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d901      	bls.n	8005dbe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e1b2      	b.n	8006124 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005dbe:	4b15      	ldr	r3, [pc, #84]	; (8005e14 <HAL_RCC_OscConfig+0x508>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d0f0      	beq.n	8005dac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d108      	bne.n	8005de4 <HAL_RCC_OscConfig+0x4d8>
 8005dd2:	4b0f      	ldr	r3, [pc, #60]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dd8:	4a0d      	ldr	r2, [pc, #52]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005dda:	f043 0301 	orr.w	r3, r3, #1
 8005dde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005de2:	e029      	b.n	8005e38 <HAL_RCC_OscConfig+0x52c>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	2b05      	cmp	r3, #5
 8005dea:	d115      	bne.n	8005e18 <HAL_RCC_OscConfig+0x50c>
 8005dec:	4b08      	ldr	r3, [pc, #32]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df2:	4a07      	ldr	r2, [pc, #28]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005df4:	f043 0304 	orr.w	r3, r3, #4
 8005df8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005dfc:	4b04      	ldr	r3, [pc, #16]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e02:	4a03      	ldr	r2, [pc, #12]	; (8005e10 <HAL_RCC_OscConfig+0x504>)
 8005e04:	f043 0301 	orr.w	r3, r3, #1
 8005e08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e0c:	e014      	b.n	8005e38 <HAL_RCC_OscConfig+0x52c>
 8005e0e:	bf00      	nop
 8005e10:	40021000 	.word	0x40021000
 8005e14:	40007000 	.word	0x40007000
 8005e18:	4b9a      	ldr	r3, [pc, #616]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8005e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e1e:	4a99      	ldr	r2, [pc, #612]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8005e20:	f023 0301 	bic.w	r3, r3, #1
 8005e24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e28:	4b96      	ldr	r3, [pc, #600]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8005e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e2e:	4a95      	ldr	r2, [pc, #596]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8005e30:	f023 0304 	bic.w	r3, r3, #4
 8005e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d016      	beq.n	8005e6e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e40:	f7fe fc00 	bl	8004644 <HAL_GetTick>
 8005e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e46:	e00a      	b.n	8005e5e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e48:	f7fe fbfc 	bl	8004644 <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d901      	bls.n	8005e5e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e162      	b.n	8006124 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e5e:	4b89      	ldr	r3, [pc, #548]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8005e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e64:	f003 0302 	and.w	r3, r3, #2
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d0ed      	beq.n	8005e48 <HAL_RCC_OscConfig+0x53c>
 8005e6c:	e015      	b.n	8005e9a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e6e:	f7fe fbe9 	bl	8004644 <HAL_GetTick>
 8005e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e74:	e00a      	b.n	8005e8c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e76:	f7fe fbe5 	bl	8004644 <HAL_GetTick>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d901      	bls.n	8005e8c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e14b      	b.n	8006124 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e8c:	4b7d      	ldr	r3, [pc, #500]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8005e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e92:	f003 0302 	and.w	r3, r3, #2
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1ed      	bne.n	8005e76 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e9a:	7ffb      	ldrb	r3, [r7, #31]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d105      	bne.n	8005eac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ea0:	4b78      	ldr	r3, [pc, #480]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8005ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ea4:	4a77      	ldr	r2, [pc, #476]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8005ea6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005eaa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0320 	and.w	r3, r3, #32
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d03c      	beq.n	8005f32 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d01c      	beq.n	8005efa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ec0:	4b70      	ldr	r3, [pc, #448]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8005ec2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ec6:	4a6f      	ldr	r2, [pc, #444]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8005ec8:	f043 0301 	orr.w	r3, r3, #1
 8005ecc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ed0:	f7fe fbb8 	bl	8004644 <HAL_GetTick>
 8005ed4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005ed6:	e008      	b.n	8005eea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ed8:	f7fe fbb4 	bl	8004644 <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d901      	bls.n	8005eea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e11c      	b.n	8006124 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005eea:	4b66      	ldr	r3, [pc, #408]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8005eec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ef0:	f003 0302 	and.w	r3, r3, #2
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d0ef      	beq.n	8005ed8 <HAL_RCC_OscConfig+0x5cc>
 8005ef8:	e01b      	b.n	8005f32 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005efa:	4b62      	ldr	r3, [pc, #392]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8005efc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f00:	4a60      	ldr	r2, [pc, #384]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8005f02:	f023 0301 	bic.w	r3, r3, #1
 8005f06:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f0a:	f7fe fb9b 	bl	8004644 <HAL_GetTick>
 8005f0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f10:	e008      	b.n	8005f24 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f12:	f7fe fb97 	bl	8004644 <HAL_GetTick>
 8005f16:	4602      	mov	r2, r0
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d901      	bls.n	8005f24 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e0ff      	b.n	8006124 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f24:	4b57      	ldr	r3, [pc, #348]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8005f26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f2a:	f003 0302 	and.w	r3, r3, #2
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1ef      	bne.n	8005f12 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	f000 80f3 	beq.w	8006122 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	f040 80c9 	bne.w	80060d8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005f46:	4b4f      	ldr	r3, [pc, #316]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	f003 0203 	and.w	r2, r3, #3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d12c      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f64:	3b01      	subs	r3, #1
 8005f66:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d123      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f76:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d11b      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f86:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d113      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f96:	085b      	lsrs	r3, r3, #1
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d109      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005faa:	085b      	lsrs	r3, r3, #1
 8005fac:	3b01      	subs	r3, #1
 8005fae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d06b      	beq.n	800608c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	2b0c      	cmp	r3, #12
 8005fb8:	d062      	beq.n	8006080 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005fba:	4b32      	ldr	r3, [pc, #200]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d001      	beq.n	8005fca <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e0ac      	b.n	8006124 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005fca:	4b2e      	ldr	r3, [pc, #184]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a2d      	ldr	r2, [pc, #180]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8005fd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fd4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005fd6:	f7fe fb35 	bl	8004644 <HAL_GetTick>
 8005fda:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fdc:	e008      	b.n	8005ff0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fde:	f7fe fb31 	bl	8004644 <HAL_GetTick>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d901      	bls.n	8005ff0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e099      	b.n	8006124 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ff0:	4b24      	ldr	r3, [pc, #144]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1f0      	bne.n	8005fde <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ffc:	4b21      	ldr	r3, [pc, #132]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8005ffe:	68da      	ldr	r2, [r3, #12]
 8006000:	4b21      	ldr	r3, [pc, #132]	; (8006088 <HAL_RCC_OscConfig+0x77c>)
 8006002:	4013      	ands	r3, r2
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800600c:	3a01      	subs	r2, #1
 800600e:	0112      	lsls	r2, r2, #4
 8006010:	4311      	orrs	r1, r2
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006016:	0212      	lsls	r2, r2, #8
 8006018:	4311      	orrs	r1, r2
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800601e:	0852      	lsrs	r2, r2, #1
 8006020:	3a01      	subs	r2, #1
 8006022:	0552      	lsls	r2, r2, #21
 8006024:	4311      	orrs	r1, r2
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800602a:	0852      	lsrs	r2, r2, #1
 800602c:	3a01      	subs	r2, #1
 800602e:	0652      	lsls	r2, r2, #25
 8006030:	4311      	orrs	r1, r2
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006036:	06d2      	lsls	r2, r2, #27
 8006038:	430a      	orrs	r2, r1
 800603a:	4912      	ldr	r1, [pc, #72]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 800603c:	4313      	orrs	r3, r2
 800603e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006040:	4b10      	ldr	r3, [pc, #64]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a0f      	ldr	r2, [pc, #60]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8006046:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800604a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800604c:	4b0d      	ldr	r3, [pc, #52]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	4a0c      	ldr	r2, [pc, #48]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8006052:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006056:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006058:	f7fe faf4 	bl	8004644 <HAL_GetTick>
 800605c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800605e:	e008      	b.n	8006072 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006060:	f7fe faf0 	bl	8004644 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	2b02      	cmp	r3, #2
 800606c:	d901      	bls.n	8006072 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e058      	b.n	8006124 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006072:	4b04      	ldr	r3, [pc, #16]	; (8006084 <HAL_RCC_OscConfig+0x778>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d0f0      	beq.n	8006060 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800607e:	e050      	b.n	8006122 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e04f      	b.n	8006124 <HAL_RCC_OscConfig+0x818>
 8006084:	40021000 	.word	0x40021000
 8006088:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800608c:	4b27      	ldr	r3, [pc, #156]	; (800612c <HAL_RCC_OscConfig+0x820>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d144      	bne.n	8006122 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006098:	4b24      	ldr	r3, [pc, #144]	; (800612c <HAL_RCC_OscConfig+0x820>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a23      	ldr	r2, [pc, #140]	; (800612c <HAL_RCC_OscConfig+0x820>)
 800609e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80060a4:	4b21      	ldr	r3, [pc, #132]	; (800612c <HAL_RCC_OscConfig+0x820>)
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	4a20      	ldr	r2, [pc, #128]	; (800612c <HAL_RCC_OscConfig+0x820>)
 80060aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80060b0:	f7fe fac8 	bl	8004644 <HAL_GetTick>
 80060b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060b6:	e008      	b.n	80060ca <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060b8:	f7fe fac4 	bl	8004644 <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d901      	bls.n	80060ca <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e02c      	b.n	8006124 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060ca:	4b18      	ldr	r3, [pc, #96]	; (800612c <HAL_RCC_OscConfig+0x820>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d0f0      	beq.n	80060b8 <HAL_RCC_OscConfig+0x7ac>
 80060d6:	e024      	b.n	8006122 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	2b0c      	cmp	r3, #12
 80060dc:	d01f      	beq.n	800611e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060de:	4b13      	ldr	r3, [pc, #76]	; (800612c <HAL_RCC_OscConfig+0x820>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a12      	ldr	r2, [pc, #72]	; (800612c <HAL_RCC_OscConfig+0x820>)
 80060e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ea:	f7fe faab 	bl	8004644 <HAL_GetTick>
 80060ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060f0:	e008      	b.n	8006104 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060f2:	f7fe faa7 	bl	8004644 <HAL_GetTick>
 80060f6:	4602      	mov	r2, r0
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	d901      	bls.n	8006104 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	e00f      	b.n	8006124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006104:	4b09      	ldr	r3, [pc, #36]	; (800612c <HAL_RCC_OscConfig+0x820>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1f0      	bne.n	80060f2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006110:	4b06      	ldr	r3, [pc, #24]	; (800612c <HAL_RCC_OscConfig+0x820>)
 8006112:	68da      	ldr	r2, [r3, #12]
 8006114:	4905      	ldr	r1, [pc, #20]	; (800612c <HAL_RCC_OscConfig+0x820>)
 8006116:	4b06      	ldr	r3, [pc, #24]	; (8006130 <HAL_RCC_OscConfig+0x824>)
 8006118:	4013      	ands	r3, r2
 800611a:	60cb      	str	r3, [r1, #12]
 800611c:	e001      	b.n	8006122 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e000      	b.n	8006124 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3720      	adds	r7, #32
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	40021000 	.word	0x40021000
 8006130:	feeefffc 	.word	0xfeeefffc

08006134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d101      	bne.n	8006148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e0e7      	b.n	8006318 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006148:	4b75      	ldr	r3, [pc, #468]	; (8006320 <HAL_RCC_ClockConfig+0x1ec>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0307 	and.w	r3, r3, #7
 8006150:	683a      	ldr	r2, [r7, #0]
 8006152:	429a      	cmp	r2, r3
 8006154:	d910      	bls.n	8006178 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006156:	4b72      	ldr	r3, [pc, #456]	; (8006320 <HAL_RCC_ClockConfig+0x1ec>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f023 0207 	bic.w	r2, r3, #7
 800615e:	4970      	ldr	r1, [pc, #448]	; (8006320 <HAL_RCC_ClockConfig+0x1ec>)
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	4313      	orrs	r3, r2
 8006164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006166:	4b6e      	ldr	r3, [pc, #440]	; (8006320 <HAL_RCC_ClockConfig+0x1ec>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0307 	and.w	r3, r3, #7
 800616e:	683a      	ldr	r2, [r7, #0]
 8006170:	429a      	cmp	r2, r3
 8006172:	d001      	beq.n	8006178 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e0cf      	b.n	8006318 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 0302 	and.w	r3, r3, #2
 8006180:	2b00      	cmp	r3, #0
 8006182:	d010      	beq.n	80061a6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	689a      	ldr	r2, [r3, #8]
 8006188:	4b66      	ldr	r3, [pc, #408]	; (8006324 <HAL_RCC_ClockConfig+0x1f0>)
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006190:	429a      	cmp	r2, r3
 8006192:	d908      	bls.n	80061a6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006194:	4b63      	ldr	r3, [pc, #396]	; (8006324 <HAL_RCC_ClockConfig+0x1f0>)
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	4960      	ldr	r1, [pc, #384]	; (8006324 <HAL_RCC_ClockConfig+0x1f0>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d04c      	beq.n	800624c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	2b03      	cmp	r3, #3
 80061b8:	d107      	bne.n	80061ca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061ba:	4b5a      	ldr	r3, [pc, #360]	; (8006324 <HAL_RCC_ClockConfig+0x1f0>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d121      	bne.n	800620a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e0a6      	b.n	8006318 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d107      	bne.n	80061e2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80061d2:	4b54      	ldr	r3, [pc, #336]	; (8006324 <HAL_RCC_ClockConfig+0x1f0>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d115      	bne.n	800620a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e09a      	b.n	8006318 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d107      	bne.n	80061fa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80061ea:	4b4e      	ldr	r3, [pc, #312]	; (8006324 <HAL_RCC_ClockConfig+0x1f0>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0302 	and.w	r3, r3, #2
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d109      	bne.n	800620a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e08e      	b.n	8006318 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80061fa:	4b4a      	ldr	r3, [pc, #296]	; (8006324 <HAL_RCC_ClockConfig+0x1f0>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e086      	b.n	8006318 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800620a:	4b46      	ldr	r3, [pc, #280]	; (8006324 <HAL_RCC_ClockConfig+0x1f0>)
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	f023 0203 	bic.w	r2, r3, #3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	4943      	ldr	r1, [pc, #268]	; (8006324 <HAL_RCC_ClockConfig+0x1f0>)
 8006218:	4313      	orrs	r3, r2
 800621a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800621c:	f7fe fa12 	bl	8004644 <HAL_GetTick>
 8006220:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006222:	e00a      	b.n	800623a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006224:	f7fe fa0e 	bl	8004644 <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006232:	4293      	cmp	r3, r2
 8006234:	d901      	bls.n	800623a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	e06e      	b.n	8006318 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800623a:	4b3a      	ldr	r3, [pc, #232]	; (8006324 <HAL_RCC_ClockConfig+0x1f0>)
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	f003 020c 	and.w	r2, r3, #12
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	429a      	cmp	r2, r3
 800624a:	d1eb      	bne.n	8006224 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0302 	and.w	r3, r3, #2
 8006254:	2b00      	cmp	r3, #0
 8006256:	d010      	beq.n	800627a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	689a      	ldr	r2, [r3, #8]
 800625c:	4b31      	ldr	r3, [pc, #196]	; (8006324 <HAL_RCC_ClockConfig+0x1f0>)
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006264:	429a      	cmp	r2, r3
 8006266:	d208      	bcs.n	800627a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006268:	4b2e      	ldr	r3, [pc, #184]	; (8006324 <HAL_RCC_ClockConfig+0x1f0>)
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	492b      	ldr	r1, [pc, #172]	; (8006324 <HAL_RCC_ClockConfig+0x1f0>)
 8006276:	4313      	orrs	r3, r2
 8006278:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800627a:	4b29      	ldr	r3, [pc, #164]	; (8006320 <HAL_RCC_ClockConfig+0x1ec>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0307 	and.w	r3, r3, #7
 8006282:	683a      	ldr	r2, [r7, #0]
 8006284:	429a      	cmp	r2, r3
 8006286:	d210      	bcs.n	80062aa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006288:	4b25      	ldr	r3, [pc, #148]	; (8006320 <HAL_RCC_ClockConfig+0x1ec>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f023 0207 	bic.w	r2, r3, #7
 8006290:	4923      	ldr	r1, [pc, #140]	; (8006320 <HAL_RCC_ClockConfig+0x1ec>)
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	4313      	orrs	r3, r2
 8006296:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006298:	4b21      	ldr	r3, [pc, #132]	; (8006320 <HAL_RCC_ClockConfig+0x1ec>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0307 	and.w	r3, r3, #7
 80062a0:	683a      	ldr	r2, [r7, #0]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d001      	beq.n	80062aa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e036      	b.n	8006318 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0304 	and.w	r3, r3, #4
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d008      	beq.n	80062c8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062b6:	4b1b      	ldr	r3, [pc, #108]	; (8006324 <HAL_RCC_ClockConfig+0x1f0>)
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	4918      	ldr	r1, [pc, #96]	; (8006324 <HAL_RCC_ClockConfig+0x1f0>)
 80062c4:	4313      	orrs	r3, r2
 80062c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0308 	and.w	r3, r3, #8
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d009      	beq.n	80062e8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062d4:	4b13      	ldr	r3, [pc, #76]	; (8006324 <HAL_RCC_ClockConfig+0x1f0>)
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	00db      	lsls	r3, r3, #3
 80062e2:	4910      	ldr	r1, [pc, #64]	; (8006324 <HAL_RCC_ClockConfig+0x1f0>)
 80062e4:	4313      	orrs	r3, r2
 80062e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80062e8:	f000 f824 	bl	8006334 <HAL_RCC_GetSysClockFreq>
 80062ec:	4602      	mov	r2, r0
 80062ee:	4b0d      	ldr	r3, [pc, #52]	; (8006324 <HAL_RCC_ClockConfig+0x1f0>)
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	091b      	lsrs	r3, r3, #4
 80062f4:	f003 030f 	and.w	r3, r3, #15
 80062f8:	490b      	ldr	r1, [pc, #44]	; (8006328 <HAL_RCC_ClockConfig+0x1f4>)
 80062fa:	5ccb      	ldrb	r3, [r1, r3]
 80062fc:	f003 031f 	and.w	r3, r3, #31
 8006300:	fa22 f303 	lsr.w	r3, r2, r3
 8006304:	4a09      	ldr	r2, [pc, #36]	; (800632c <HAL_RCC_ClockConfig+0x1f8>)
 8006306:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006308:	4b09      	ldr	r3, [pc, #36]	; (8006330 <HAL_RCC_ClockConfig+0x1fc>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4618      	mov	r0, r3
 800630e:	f7fe f95d 	bl	80045cc <HAL_InitTick>
 8006312:	4603      	mov	r3, r0
 8006314:	72fb      	strb	r3, [r7, #11]

  return status;
 8006316:	7afb      	ldrb	r3, [r7, #11]
}
 8006318:	4618      	mov	r0, r3
 800631a:	3710      	adds	r7, #16
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	40022000 	.word	0x40022000
 8006324:	40021000 	.word	0x40021000
 8006328:	0800c894 	.word	0x0800c894
 800632c:	20000240 	.word	0x20000240
 8006330:	2000020c 	.word	0x2000020c

08006334 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006334:	b480      	push	{r7}
 8006336:	b089      	sub	sp, #36	; 0x24
 8006338:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800633a:	2300      	movs	r3, #0
 800633c:	61fb      	str	r3, [r7, #28]
 800633e:	2300      	movs	r3, #0
 8006340:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006342:	4b3e      	ldr	r3, [pc, #248]	; (800643c <HAL_RCC_GetSysClockFreq+0x108>)
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f003 030c 	and.w	r3, r3, #12
 800634a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800634c:	4b3b      	ldr	r3, [pc, #236]	; (800643c <HAL_RCC_GetSysClockFreq+0x108>)
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	f003 0303 	and.w	r3, r3, #3
 8006354:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d005      	beq.n	8006368 <HAL_RCC_GetSysClockFreq+0x34>
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	2b0c      	cmp	r3, #12
 8006360:	d121      	bne.n	80063a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d11e      	bne.n	80063a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006368:	4b34      	ldr	r3, [pc, #208]	; (800643c <HAL_RCC_GetSysClockFreq+0x108>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0308 	and.w	r3, r3, #8
 8006370:	2b00      	cmp	r3, #0
 8006372:	d107      	bne.n	8006384 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006374:	4b31      	ldr	r3, [pc, #196]	; (800643c <HAL_RCC_GetSysClockFreq+0x108>)
 8006376:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800637a:	0a1b      	lsrs	r3, r3, #8
 800637c:	f003 030f 	and.w	r3, r3, #15
 8006380:	61fb      	str	r3, [r7, #28]
 8006382:	e005      	b.n	8006390 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006384:	4b2d      	ldr	r3, [pc, #180]	; (800643c <HAL_RCC_GetSysClockFreq+0x108>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	091b      	lsrs	r3, r3, #4
 800638a:	f003 030f 	and.w	r3, r3, #15
 800638e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006390:	4a2b      	ldr	r2, [pc, #172]	; (8006440 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006398:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d10d      	bne.n	80063bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80063a4:	e00a      	b.n	80063bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	2b04      	cmp	r3, #4
 80063aa:	d102      	bne.n	80063b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80063ac:	4b25      	ldr	r3, [pc, #148]	; (8006444 <HAL_RCC_GetSysClockFreq+0x110>)
 80063ae:	61bb      	str	r3, [r7, #24]
 80063b0:	e004      	b.n	80063bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	2b08      	cmp	r3, #8
 80063b6:	d101      	bne.n	80063bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80063b8:	4b23      	ldr	r3, [pc, #140]	; (8006448 <HAL_RCC_GetSysClockFreq+0x114>)
 80063ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	2b0c      	cmp	r3, #12
 80063c0:	d134      	bne.n	800642c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80063c2:	4b1e      	ldr	r3, [pc, #120]	; (800643c <HAL_RCC_GetSysClockFreq+0x108>)
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	f003 0303 	and.w	r3, r3, #3
 80063ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d003      	beq.n	80063da <HAL_RCC_GetSysClockFreq+0xa6>
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	2b03      	cmp	r3, #3
 80063d6:	d003      	beq.n	80063e0 <HAL_RCC_GetSysClockFreq+0xac>
 80063d8:	e005      	b.n	80063e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80063da:	4b1a      	ldr	r3, [pc, #104]	; (8006444 <HAL_RCC_GetSysClockFreq+0x110>)
 80063dc:	617b      	str	r3, [r7, #20]
      break;
 80063de:	e005      	b.n	80063ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80063e0:	4b19      	ldr	r3, [pc, #100]	; (8006448 <HAL_RCC_GetSysClockFreq+0x114>)
 80063e2:	617b      	str	r3, [r7, #20]
      break;
 80063e4:	e002      	b.n	80063ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	617b      	str	r3, [r7, #20]
      break;
 80063ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80063ec:	4b13      	ldr	r3, [pc, #76]	; (800643c <HAL_RCC_GetSysClockFreq+0x108>)
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	091b      	lsrs	r3, r3, #4
 80063f2:	f003 0307 	and.w	r3, r3, #7
 80063f6:	3301      	adds	r3, #1
 80063f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80063fa:	4b10      	ldr	r3, [pc, #64]	; (800643c <HAL_RCC_GetSysClockFreq+0x108>)
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	0a1b      	lsrs	r3, r3, #8
 8006400:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006404:	697a      	ldr	r2, [r7, #20]
 8006406:	fb03 f202 	mul.w	r2, r3, r2
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006410:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006412:	4b0a      	ldr	r3, [pc, #40]	; (800643c <HAL_RCC_GetSysClockFreq+0x108>)
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	0e5b      	lsrs	r3, r3, #25
 8006418:	f003 0303 	and.w	r3, r3, #3
 800641c:	3301      	adds	r3, #1
 800641e:	005b      	lsls	r3, r3, #1
 8006420:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006422:	697a      	ldr	r2, [r7, #20]
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	fbb2 f3f3 	udiv	r3, r2, r3
 800642a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800642c:	69bb      	ldr	r3, [r7, #24]
}
 800642e:	4618      	mov	r0, r3
 8006430:	3724      	adds	r7, #36	; 0x24
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	40021000 	.word	0x40021000
 8006440:	0800c8ac 	.word	0x0800c8ac
 8006444:	00f42400 	.word	0x00f42400
 8006448:	02dc6c00 	.word	0x02dc6c00

0800644c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800644c:	b480      	push	{r7}
 800644e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006450:	4b03      	ldr	r3, [pc, #12]	; (8006460 <HAL_RCC_GetHCLKFreq+0x14>)
 8006452:	681b      	ldr	r3, [r3, #0]
}
 8006454:	4618      	mov	r0, r3
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	20000240 	.word	0x20000240

08006464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006468:	f7ff fff0 	bl	800644c <HAL_RCC_GetHCLKFreq>
 800646c:	4602      	mov	r2, r0
 800646e:	4b06      	ldr	r3, [pc, #24]	; (8006488 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	0a1b      	lsrs	r3, r3, #8
 8006474:	f003 0307 	and.w	r3, r3, #7
 8006478:	4904      	ldr	r1, [pc, #16]	; (800648c <HAL_RCC_GetPCLK1Freq+0x28>)
 800647a:	5ccb      	ldrb	r3, [r1, r3]
 800647c:	f003 031f 	and.w	r3, r3, #31
 8006480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006484:	4618      	mov	r0, r3
 8006486:	bd80      	pop	{r7, pc}
 8006488:	40021000 	.word	0x40021000
 800648c:	0800c8a4 	.word	0x0800c8a4

08006490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006494:	f7ff ffda 	bl	800644c <HAL_RCC_GetHCLKFreq>
 8006498:	4602      	mov	r2, r0
 800649a:	4b06      	ldr	r3, [pc, #24]	; (80064b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	0adb      	lsrs	r3, r3, #11
 80064a0:	f003 0307 	and.w	r3, r3, #7
 80064a4:	4904      	ldr	r1, [pc, #16]	; (80064b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80064a6:	5ccb      	ldrb	r3, [r1, r3]
 80064a8:	f003 031f 	and.w	r3, r3, #31
 80064ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	40021000 	.word	0x40021000
 80064b8:	0800c8a4 	.word	0x0800c8a4

080064bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80064c4:	2300      	movs	r3, #0
 80064c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80064c8:	4b2a      	ldr	r3, [pc, #168]	; (8006574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d003      	beq.n	80064dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80064d4:	f7ff f9b6 	bl	8005844 <HAL_PWREx_GetVoltageRange>
 80064d8:	6178      	str	r0, [r7, #20]
 80064da:	e014      	b.n	8006506 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80064dc:	4b25      	ldr	r3, [pc, #148]	; (8006574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064e0:	4a24      	ldr	r2, [pc, #144]	; (8006574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064e6:	6593      	str	r3, [r2, #88]	; 0x58
 80064e8:	4b22      	ldr	r3, [pc, #136]	; (8006574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064f0:	60fb      	str	r3, [r7, #12]
 80064f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80064f4:	f7ff f9a6 	bl	8005844 <HAL_PWREx_GetVoltageRange>
 80064f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80064fa:	4b1e      	ldr	r3, [pc, #120]	; (8006574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064fe:	4a1d      	ldr	r2, [pc, #116]	; (8006574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006500:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006504:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800650c:	d10b      	bne.n	8006526 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2b80      	cmp	r3, #128	; 0x80
 8006512:	d919      	bls.n	8006548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2ba0      	cmp	r3, #160	; 0xa0
 8006518:	d902      	bls.n	8006520 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800651a:	2302      	movs	r3, #2
 800651c:	613b      	str	r3, [r7, #16]
 800651e:	e013      	b.n	8006548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006520:	2301      	movs	r3, #1
 8006522:	613b      	str	r3, [r7, #16]
 8006524:	e010      	b.n	8006548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2b80      	cmp	r3, #128	; 0x80
 800652a:	d902      	bls.n	8006532 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800652c:	2303      	movs	r3, #3
 800652e:	613b      	str	r3, [r7, #16]
 8006530:	e00a      	b.n	8006548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2b80      	cmp	r3, #128	; 0x80
 8006536:	d102      	bne.n	800653e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006538:	2302      	movs	r3, #2
 800653a:	613b      	str	r3, [r7, #16]
 800653c:	e004      	b.n	8006548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2b70      	cmp	r3, #112	; 0x70
 8006542:	d101      	bne.n	8006548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006544:	2301      	movs	r3, #1
 8006546:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006548:	4b0b      	ldr	r3, [pc, #44]	; (8006578 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f023 0207 	bic.w	r2, r3, #7
 8006550:	4909      	ldr	r1, [pc, #36]	; (8006578 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	4313      	orrs	r3, r2
 8006556:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006558:	4b07      	ldr	r3, [pc, #28]	; (8006578 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 0307 	and.w	r3, r3, #7
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	429a      	cmp	r2, r3
 8006564:	d001      	beq.n	800656a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e000      	b.n	800656c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3718      	adds	r7, #24
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	40021000 	.word	0x40021000
 8006578:	40022000 	.word	0x40022000

0800657c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b086      	sub	sp, #24
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006584:	2300      	movs	r3, #0
 8006586:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006588:	2300      	movs	r3, #0
 800658a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006594:	2b00      	cmp	r3, #0
 8006596:	d031      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800659c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80065a0:	d01a      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80065a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80065a6:	d814      	bhi.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d009      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80065ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80065b0:	d10f      	bne.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80065b2:	4b5d      	ldr	r3, [pc, #372]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	4a5c      	ldr	r2, [pc, #368]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065bc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80065be:	e00c      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	3304      	adds	r3, #4
 80065c4:	2100      	movs	r1, #0
 80065c6:	4618      	mov	r0, r3
 80065c8:	f000 f9f0 	bl	80069ac <RCCEx_PLLSAI1_Config>
 80065cc:	4603      	mov	r3, r0
 80065ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80065d0:	e003      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	74fb      	strb	r3, [r7, #19]
      break;
 80065d6:	e000      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80065d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065da:	7cfb      	ldrb	r3, [r7, #19]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d10b      	bne.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80065e0:	4b51      	ldr	r3, [pc, #324]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ee:	494e      	ldr	r1, [pc, #312]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065f0:	4313      	orrs	r3, r2
 80065f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80065f6:	e001      	b.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065f8:	7cfb      	ldrb	r3, [r7, #19]
 80065fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006604:	2b00      	cmp	r3, #0
 8006606:	f000 809e 	beq.w	8006746 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800660a:	2300      	movs	r3, #0
 800660c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800660e:	4b46      	ldr	r3, [pc, #280]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006616:	2b00      	cmp	r3, #0
 8006618:	d101      	bne.n	800661e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800661a:	2301      	movs	r3, #1
 800661c:	e000      	b.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800661e:	2300      	movs	r3, #0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00d      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006624:	4b40      	ldr	r3, [pc, #256]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006628:	4a3f      	ldr	r2, [pc, #252]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800662a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800662e:	6593      	str	r3, [r2, #88]	; 0x58
 8006630:	4b3d      	ldr	r3, [pc, #244]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006638:	60bb      	str	r3, [r7, #8]
 800663a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800663c:	2301      	movs	r3, #1
 800663e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006640:	4b3a      	ldr	r3, [pc, #232]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a39      	ldr	r2, [pc, #228]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800664a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800664c:	f7fd fffa 	bl	8004644 <HAL_GetTick>
 8006650:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006652:	e009      	b.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006654:	f7fd fff6 	bl	8004644 <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	2b02      	cmp	r3, #2
 8006660:	d902      	bls.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	74fb      	strb	r3, [r7, #19]
        break;
 8006666:	e005      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006668:	4b30      	ldr	r3, [pc, #192]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006670:	2b00      	cmp	r3, #0
 8006672:	d0ef      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006674:	7cfb      	ldrb	r3, [r7, #19]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d15a      	bne.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800667a:	4b2b      	ldr	r3, [pc, #172]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800667c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006680:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006684:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d01e      	beq.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006690:	697a      	ldr	r2, [r7, #20]
 8006692:	429a      	cmp	r2, r3
 8006694:	d019      	beq.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006696:	4b24      	ldr	r3, [pc, #144]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800669c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066a0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80066a2:	4b21      	ldr	r3, [pc, #132]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066a8:	4a1f      	ldr	r2, [pc, #124]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80066b2:	4b1d      	ldr	r3, [pc, #116]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066b8:	4a1b      	ldr	r2, [pc, #108]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80066c2:	4a19      	ldr	r2, [pc, #100]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	f003 0301 	and.w	r3, r3, #1
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d016      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066d4:	f7fd ffb6 	bl	8004644 <HAL_GetTick>
 80066d8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066da:	e00b      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066dc:	f7fd ffb2 	bl	8004644 <HAL_GetTick>
 80066e0:	4602      	mov	r2, r0
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d902      	bls.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80066ee:	2303      	movs	r3, #3
 80066f0:	74fb      	strb	r3, [r7, #19]
            break;
 80066f2:	e006      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066f4:	4b0c      	ldr	r3, [pc, #48]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066fa:	f003 0302 	and.w	r3, r3, #2
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d0ec      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006702:	7cfb      	ldrb	r3, [r7, #19]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d10b      	bne.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006708:	4b07      	ldr	r3, [pc, #28]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800670a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800670e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006716:	4904      	ldr	r1, [pc, #16]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006718:	4313      	orrs	r3, r2
 800671a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800671e:	e009      	b.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006720:	7cfb      	ldrb	r3, [r7, #19]
 8006722:	74bb      	strb	r3, [r7, #18]
 8006724:	e006      	b.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006726:	bf00      	nop
 8006728:	40021000 	.word	0x40021000
 800672c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006730:	7cfb      	ldrb	r3, [r7, #19]
 8006732:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006734:	7c7b      	ldrb	r3, [r7, #17]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d105      	bne.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800673a:	4b9b      	ldr	r3, [pc, #620]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800673c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800673e:	4a9a      	ldr	r2, [pc, #616]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006740:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006744:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 0301 	and.w	r3, r3, #1
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00a      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006752:	4b95      	ldr	r3, [pc, #596]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006758:	f023 0203 	bic.w	r2, r3, #3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a1b      	ldr	r3, [r3, #32]
 8006760:	4991      	ldr	r1, [pc, #580]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006762:	4313      	orrs	r3, r2
 8006764:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0302 	and.w	r3, r3, #2
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00a      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006774:	4b8c      	ldr	r3, [pc, #560]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800677a:	f023 020c 	bic.w	r2, r3, #12
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006782:	4989      	ldr	r1, [pc, #548]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006784:	4313      	orrs	r3, r2
 8006786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0304 	and.w	r3, r3, #4
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00a      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006796:	4b84      	ldr	r3, [pc, #528]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800679c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a4:	4980      	ldr	r1, [pc, #512]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80067a6:	4313      	orrs	r3, r2
 80067a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0320 	and.w	r3, r3, #32
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00a      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80067b8:	4b7b      	ldr	r3, [pc, #492]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80067ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c6:	4978      	ldr	r1, [pc, #480]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80067c8:	4313      	orrs	r3, r2
 80067ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00a      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80067da:	4b73      	ldr	r3, [pc, #460]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80067dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067e8:	496f      	ldr	r1, [pc, #444]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80067ea:	4313      	orrs	r3, r2
 80067ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00a      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80067fc:	4b6a      	ldr	r3, [pc, #424]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80067fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006802:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680a:	4967      	ldr	r1, [pc, #412]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800680c:	4313      	orrs	r3, r2
 800680e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00a      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800681e:	4b62      	ldr	r3, [pc, #392]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006824:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800682c:	495e      	ldr	r1, [pc, #376]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800682e:	4313      	orrs	r3, r2
 8006830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00a      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006840:	4b59      	ldr	r3, [pc, #356]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006846:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800684e:	4956      	ldr	r1, [pc, #344]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006850:	4313      	orrs	r3, r2
 8006852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00a      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006862:	4b51      	ldr	r3, [pc, #324]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006868:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006870:	494d      	ldr	r1, [pc, #308]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006872:	4313      	orrs	r3, r2
 8006874:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006880:	2b00      	cmp	r3, #0
 8006882:	d028      	beq.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006884:	4b48      	ldr	r3, [pc, #288]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800688a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006892:	4945      	ldr	r1, [pc, #276]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006894:	4313      	orrs	r3, r2
 8006896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800689e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068a2:	d106      	bne.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068a4:	4b40      	ldr	r3, [pc, #256]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	4a3f      	ldr	r2, [pc, #252]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80068aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068ae:	60d3      	str	r3, [r2, #12]
 80068b0:	e011      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068ba:	d10c      	bne.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	3304      	adds	r3, #4
 80068c0:	2101      	movs	r1, #1
 80068c2:	4618      	mov	r0, r3
 80068c4:	f000 f872 	bl	80069ac <RCCEx_PLLSAI1_Config>
 80068c8:	4603      	mov	r3, r0
 80068ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80068cc:	7cfb      	ldrb	r3, [r7, #19]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d001      	beq.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 80068d2:	7cfb      	ldrb	r3, [r7, #19]
 80068d4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d028      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80068e2:	4b31      	ldr	r3, [pc, #196]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80068e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068f0:	492d      	ldr	r1, [pc, #180]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80068f2:	4313      	orrs	r3, r2
 80068f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006900:	d106      	bne.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006902:	4b29      	ldr	r3, [pc, #164]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	4a28      	ldr	r2, [pc, #160]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006908:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800690c:	60d3      	str	r3, [r2, #12]
 800690e:	e011      	b.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006914:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006918:	d10c      	bne.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	3304      	adds	r3, #4
 800691e:	2101      	movs	r1, #1
 8006920:	4618      	mov	r0, r3
 8006922:	f000 f843 	bl	80069ac <RCCEx_PLLSAI1_Config>
 8006926:	4603      	mov	r3, r0
 8006928:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800692a:	7cfb      	ldrb	r3, [r7, #19]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d001      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8006930:	7cfb      	ldrb	r3, [r7, #19]
 8006932:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800693c:	2b00      	cmp	r3, #0
 800693e:	d01c      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006940:	4b19      	ldr	r3, [pc, #100]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006946:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800694e:	4916      	ldr	r1, [pc, #88]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006950:	4313      	orrs	r3, r2
 8006952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800695a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800695e:	d10c      	bne.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	3304      	adds	r3, #4
 8006964:	2102      	movs	r1, #2
 8006966:	4618      	mov	r0, r3
 8006968:	f000 f820 	bl	80069ac <RCCEx_PLLSAI1_Config>
 800696c:	4603      	mov	r3, r0
 800696e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006970:	7cfb      	ldrb	r3, [r7, #19]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d001      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8006976:	7cfb      	ldrb	r3, [r7, #19]
 8006978:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00a      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006986:	4b08      	ldr	r3, [pc, #32]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800698c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006994:	4904      	ldr	r1, [pc, #16]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006996:	4313      	orrs	r3, r2
 8006998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800699c:	7cbb      	ldrb	r3, [r7, #18]
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3718      	adds	r7, #24
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	40021000 	.word	0x40021000

080069ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069b6:	2300      	movs	r3, #0
 80069b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80069ba:	4b74      	ldr	r3, [pc, #464]	; (8006b8c <RCCEx_PLLSAI1_Config+0x1e0>)
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	f003 0303 	and.w	r3, r3, #3
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d018      	beq.n	80069f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80069c6:	4b71      	ldr	r3, [pc, #452]	; (8006b8c <RCCEx_PLLSAI1_Config+0x1e0>)
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	f003 0203 	and.w	r2, r3, #3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d10d      	bne.n	80069f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
       ||
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d009      	beq.n	80069f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80069de:	4b6b      	ldr	r3, [pc, #428]	; (8006b8c <RCCEx_PLLSAI1_Config+0x1e0>)
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	091b      	lsrs	r3, r3, #4
 80069e4:	f003 0307 	and.w	r3, r3, #7
 80069e8:	1c5a      	adds	r2, r3, #1
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	685b      	ldr	r3, [r3, #4]
       ||
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d047      	beq.n	8006a82 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	73fb      	strb	r3, [r7, #15]
 80069f6:	e044      	b.n	8006a82 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2b03      	cmp	r3, #3
 80069fe:	d018      	beq.n	8006a32 <RCCEx_PLLSAI1_Config+0x86>
 8006a00:	2b03      	cmp	r3, #3
 8006a02:	d825      	bhi.n	8006a50 <RCCEx_PLLSAI1_Config+0xa4>
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d002      	beq.n	8006a0e <RCCEx_PLLSAI1_Config+0x62>
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d009      	beq.n	8006a20 <RCCEx_PLLSAI1_Config+0x74>
 8006a0c:	e020      	b.n	8006a50 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006a0e:	4b5f      	ldr	r3, [pc, #380]	; (8006b8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 0302 	and.w	r3, r3, #2
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d11d      	bne.n	8006a56 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a1e:	e01a      	b.n	8006a56 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006a20:	4b5a      	ldr	r3, [pc, #360]	; (8006b8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d116      	bne.n	8006a5a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a30:	e013      	b.n	8006a5a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006a32:	4b56      	ldr	r3, [pc, #344]	; (8006b8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d10f      	bne.n	8006a5e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006a3e:	4b53      	ldr	r3, [pc, #332]	; (8006b8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d109      	bne.n	8006a5e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a4e:	e006      	b.n	8006a5e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	73fb      	strb	r3, [r7, #15]
      break;
 8006a54:	e004      	b.n	8006a60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006a56:	bf00      	nop
 8006a58:	e002      	b.n	8006a60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006a5a:	bf00      	nop
 8006a5c:	e000      	b.n	8006a60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006a5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006a60:	7bfb      	ldrb	r3, [r7, #15]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d10d      	bne.n	8006a82 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006a66:	4b49      	ldr	r3, [pc, #292]	; (8006b8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6819      	ldr	r1, [r3, #0]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	3b01      	subs	r3, #1
 8006a78:	011b      	lsls	r3, r3, #4
 8006a7a:	430b      	orrs	r3, r1
 8006a7c:	4943      	ldr	r1, [pc, #268]	; (8006b8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006a82:	7bfb      	ldrb	r3, [r7, #15]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d17c      	bne.n	8006b82 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006a88:	4b40      	ldr	r3, [pc, #256]	; (8006b8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a3f      	ldr	r2, [pc, #252]	; (8006b8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a8e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a94:	f7fd fdd6 	bl	8004644 <HAL_GetTick>
 8006a98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006a9a:	e009      	b.n	8006ab0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a9c:	f7fd fdd2 	bl	8004644 <HAL_GetTick>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d902      	bls.n	8006ab0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	73fb      	strb	r3, [r7, #15]
        break;
 8006aae:	e005      	b.n	8006abc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006ab0:	4b36      	ldr	r3, [pc, #216]	; (8006b8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1ef      	bne.n	8006a9c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006abc:	7bfb      	ldrb	r3, [r7, #15]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d15f      	bne.n	8006b82 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d110      	bne.n	8006aea <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ac8:	4b30      	ldr	r3, [pc, #192]	; (8006b8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006ad0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	6892      	ldr	r2, [r2, #8]
 8006ad8:	0211      	lsls	r1, r2, #8
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	68d2      	ldr	r2, [r2, #12]
 8006ade:	06d2      	lsls	r2, r2, #27
 8006ae0:	430a      	orrs	r2, r1
 8006ae2:	492a      	ldr	r1, [pc, #168]	; (8006b8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	610b      	str	r3, [r1, #16]
 8006ae8:	e027      	b.n	8006b3a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d112      	bne.n	8006b16 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006af0:	4b26      	ldr	r3, [pc, #152]	; (8006b8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006af8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	6892      	ldr	r2, [r2, #8]
 8006b00:	0211      	lsls	r1, r2, #8
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	6912      	ldr	r2, [r2, #16]
 8006b06:	0852      	lsrs	r2, r2, #1
 8006b08:	3a01      	subs	r2, #1
 8006b0a:	0552      	lsls	r2, r2, #21
 8006b0c:	430a      	orrs	r2, r1
 8006b0e:	491f      	ldr	r1, [pc, #124]	; (8006b8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b10:	4313      	orrs	r3, r2
 8006b12:	610b      	str	r3, [r1, #16]
 8006b14:	e011      	b.n	8006b3a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b16:	4b1d      	ldr	r3, [pc, #116]	; (8006b8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006b1e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	6892      	ldr	r2, [r2, #8]
 8006b26:	0211      	lsls	r1, r2, #8
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	6952      	ldr	r2, [r2, #20]
 8006b2c:	0852      	lsrs	r2, r2, #1
 8006b2e:	3a01      	subs	r2, #1
 8006b30:	0652      	lsls	r2, r2, #25
 8006b32:	430a      	orrs	r2, r1
 8006b34:	4915      	ldr	r1, [pc, #84]	; (8006b8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b36:	4313      	orrs	r3, r2
 8006b38:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006b3a:	4b14      	ldr	r3, [pc, #80]	; (8006b8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a13      	ldr	r2, [pc, #76]	; (8006b8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b44:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b46:	f7fd fd7d 	bl	8004644 <HAL_GetTick>
 8006b4a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006b4c:	e009      	b.n	8006b62 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b4e:	f7fd fd79 	bl	8004644 <HAL_GetTick>
 8006b52:	4602      	mov	r2, r0
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d902      	bls.n	8006b62 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	73fb      	strb	r3, [r7, #15]
          break;
 8006b60:	e005      	b.n	8006b6e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006b62:	4b0a      	ldr	r3, [pc, #40]	; (8006b8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d0ef      	beq.n	8006b4e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006b6e:	7bfb      	ldrb	r3, [r7, #15]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d106      	bne.n	8006b82 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006b74:	4b05      	ldr	r3, [pc, #20]	; (8006b8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b76:	691a      	ldr	r2, [r3, #16]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	699b      	ldr	r3, [r3, #24]
 8006b7c:	4903      	ldr	r1, [pc, #12]	; (8006b8c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3710      	adds	r7, #16
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	40021000 	.word	0x40021000

08006b90 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d06c      	beq.n	8006c7c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d106      	bne.n	8006bbc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f003 ffbe 	bl	800ab38 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2202      	movs	r2, #2
 8006bc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	22ca      	movs	r2, #202	; 0xca
 8006bca:	625a      	str	r2, [r3, #36]	; 0x24
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2253      	movs	r2, #83	; 0x53
 8006bd2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 f87c 	bl	8006cd2 <RTC_EnterInitMode>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006bde:	7bfb      	ldrb	r3, [r7, #15]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d14b      	bne.n	8006c7c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	6812      	ldr	r2, [r2, #0]
 8006bee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006bf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bf6:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	6899      	ldr	r1, [r3, #8]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	685a      	ldr	r2, [r3, #4]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	431a      	orrs	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	699b      	ldr	r3, [r3, #24]
 8006c0c:	431a      	orrs	r2, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	430a      	orrs	r2, r1
 8006c14:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	68d2      	ldr	r2, [r2, #12]
 8006c1e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6919      	ldr	r1, [r3, #16]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	041a      	lsls	r2, r3, #16
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	430a      	orrs	r2, r1
 8006c32:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 f87f 	bl	8006d38 <RTC_ExitInitMode>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006c3e:	7bfb      	ldrb	r3, [r7, #15]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d11b      	bne.n	8006c7c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f022 0203 	bic.w	r2, r2, #3
 8006c52:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	69da      	ldr	r2, [r3, #28]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	695b      	ldr	r3, [r3, #20]
 8006c62:	431a      	orrs	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	430a      	orrs	r2, r1
 8006c6a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	22ff      	movs	r2, #255	; 0xff
 8006c72:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8006c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b084      	sub	sp, #16
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68da      	ldr	r2, [r3, #12]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006c9c:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8006c9e:	f7fd fcd1 	bl	8004644 <HAL_GetTick>
 8006ca2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006ca4:	e009      	b.n	8006cba <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006ca6:	f7fd fccd 	bl	8004644 <HAL_GetTick>
 8006caa:	4602      	mov	r2, r0
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cb4:	d901      	bls.n	8006cba <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e007      	b.n	8006cca <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	f003 0320 	and.w	r3, r3, #32
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d0ee      	beq.n	8006ca6 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3710      	adds	r7, #16
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}

08006cd2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b084      	sub	sp, #16
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d120      	bne.n	8006d2e <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006cf4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006cf6:	f7fd fca5 	bl	8004644 <HAL_GetTick>
 8006cfa:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006cfc:	e00d      	b.n	8006d1a <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006cfe:	f7fd fca1 	bl	8004644 <HAL_GetTick>
 8006d02:	4602      	mov	r2, r0
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	1ad3      	subs	r3, r2, r3
 8006d08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d0c:	d905      	bls.n	8006d1a <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2203      	movs	r2, #3
 8006d16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d102      	bne.n	8006d2e <RTC_EnterInitMode+0x5c>
 8006d28:	7bfb      	ldrb	r3, [r7, #15]
 8006d2a:	2b03      	cmp	r3, #3
 8006d2c:	d1e7      	bne.n	8006cfe <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8006d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d40:	2300      	movs	r3, #0
 8006d42:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8006d44:	4b1a      	ldr	r3, [pc, #104]	; (8006db0 <RTC_ExitInitMode+0x78>)
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	4a19      	ldr	r2, [pc, #100]	; (8006db0 <RTC_ExitInitMode+0x78>)
 8006d4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d4e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006d50:	4b17      	ldr	r3, [pc, #92]	; (8006db0 <RTC_ExitInitMode+0x78>)
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	f003 0320 	and.w	r3, r3, #32
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10c      	bne.n	8006d76 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f7ff ff92 	bl	8006c86 <HAL_RTC_WaitForSynchro>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d01e      	beq.n	8006da6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2203      	movs	r2, #3
 8006d6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8006d70:	2303      	movs	r3, #3
 8006d72:	73fb      	strb	r3, [r7, #15]
 8006d74:	e017      	b.n	8006da6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006d76:	4b0e      	ldr	r3, [pc, #56]	; (8006db0 <RTC_ExitInitMode+0x78>)
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	4a0d      	ldr	r2, [pc, #52]	; (8006db0 <RTC_ExitInitMode+0x78>)
 8006d7c:	f023 0320 	bic.w	r3, r3, #32
 8006d80:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f7ff ff7f 	bl	8006c86 <HAL_RTC_WaitForSynchro>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d005      	beq.n	8006d9a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2203      	movs	r2, #3
 8006d92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8006d96:	2303      	movs	r3, #3
 8006d98:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006d9a:	4b05      	ldr	r3, [pc, #20]	; (8006db0 <RTC_ExitInitMode+0x78>)
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	4a04      	ldr	r2, [pc, #16]	; (8006db0 <RTC_ExitInitMode+0x78>)
 8006da0:	f043 0320 	orr.w	r3, r3, #32
 8006da4:	6093      	str	r3, [r2, #8]
  }

  return status;
 8006da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3710      	adds	r7, #16
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	40002800 	.word	0x40002800

08006db4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d101      	bne.n	8006dc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e095      	b.n	8006ef2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d108      	bne.n	8006de0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dd6:	d009      	beq.n	8006dec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	61da      	str	r2, [r3, #28]
 8006dde:	e005      	b.n	8006dec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d106      	bne.n	8006e0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 f877 	bl	8006efa <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2202      	movs	r2, #2
 8006e10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e22:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e2c:	d902      	bls.n	8006e34 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	60fb      	str	r3, [r7, #12]
 8006e32:	e002      	b.n	8006e3a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006e34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e38:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006e42:	d007      	beq.n	8006e54 <HAL_SPI_Init+0xa0>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e4c:	d002      	beq.n	8006e54 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006e64:	431a      	orrs	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	f003 0302 	and.w	r3, r3, #2
 8006e6e:	431a      	orrs	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	695b      	ldr	r3, [r3, #20]
 8006e74:	f003 0301 	and.w	r3, r3, #1
 8006e78:	431a      	orrs	r2, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e82:	431a      	orrs	r2, r3
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	69db      	ldr	r3, [r3, #28]
 8006e88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e8c:	431a      	orrs	r2, r3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a1b      	ldr	r3, [r3, #32]
 8006e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e96:	ea42 0103 	orr.w	r1, r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	0c1b      	lsrs	r3, r3, #16
 8006eb0:	f003 0204 	and.w	r2, r3, #4
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb8:	f003 0310 	and.w	r3, r3, #16
 8006ebc:	431a      	orrs	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ec2:	f003 0308 	and.w	r3, r3, #8
 8006ec6:	431a      	orrs	r2, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006ed0:	ea42 0103 	orr.w	r1, r2, r3
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	430a      	orrs	r2, r1
 8006ee0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8006efa:	b480      	push	{r7}
 8006efc:	b083      	sub	sp, #12
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8006f02:	bf00      	nop
 8006f04:	370c      	adds	r7, #12
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr

08006f0e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b082      	sub	sp, #8
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d101      	bne.n	8006f20 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e049      	b.n	8006fb4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d106      	bne.n	8006f3a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f003 fe1b 	bl	800ab70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2202      	movs	r2, #2
 8006f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	3304      	adds	r3, #4
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	4610      	mov	r0, r2
 8006f4e:	f000 fe2f 	bl	8007bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2201      	movs	r2, #1
 8006f56:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2201      	movs	r2, #1
 8006f66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2201      	movs	r2, #1
 8006f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2201      	movs	r2, #1
 8006f96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3708      	adds	r7, #8
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d101      	bne.n	8006fce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e049      	b.n	8007062 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d106      	bne.n	8006fe8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f003 febe 	bl	800ad64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2202      	movs	r2, #2
 8006fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	3304      	adds	r3, #4
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	4610      	mov	r0, r2
 8006ffc:	f000 fdd8 	bl	8007bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	3708      	adds	r7, #8
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
	...

0800706c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b086      	sub	sp, #24
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]
 8007078:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800707a:	2300      	movs	r3, #0
 800707c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d109      	bne.n	8007098 <HAL_TIM_PWM_Start_DMA+0x2c>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800708a:	b2db      	uxtb	r3, r3
 800708c:	2b02      	cmp	r3, #2
 800708e:	bf0c      	ite	eq
 8007090:	2301      	moveq	r3, #1
 8007092:	2300      	movne	r3, #0
 8007094:	b2db      	uxtb	r3, r3
 8007096:	e03c      	b.n	8007112 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	2b04      	cmp	r3, #4
 800709c:	d109      	bne.n	80070b2 <HAL_TIM_PWM_Start_DMA+0x46>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	bf0c      	ite	eq
 80070aa:	2301      	moveq	r3, #1
 80070ac:	2300      	movne	r3, #0
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	e02f      	b.n	8007112 <HAL_TIM_PWM_Start_DMA+0xa6>
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	2b08      	cmp	r3, #8
 80070b6:	d109      	bne.n	80070cc <HAL_TIM_PWM_Start_DMA+0x60>
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	bf0c      	ite	eq
 80070c4:	2301      	moveq	r3, #1
 80070c6:	2300      	movne	r3, #0
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	e022      	b.n	8007112 <HAL_TIM_PWM_Start_DMA+0xa6>
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	2b0c      	cmp	r3, #12
 80070d0:	d109      	bne.n	80070e6 <HAL_TIM_PWM_Start_DMA+0x7a>
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	2b02      	cmp	r3, #2
 80070dc:	bf0c      	ite	eq
 80070de:	2301      	moveq	r3, #1
 80070e0:	2300      	movne	r3, #0
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	e015      	b.n	8007112 <HAL_TIM_PWM_Start_DMA+0xa6>
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	2b10      	cmp	r3, #16
 80070ea:	d109      	bne.n	8007100 <HAL_TIM_PWM_Start_DMA+0x94>
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	bf0c      	ite	eq
 80070f8:	2301      	moveq	r3, #1
 80070fa:	2300      	movne	r3, #0
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	e008      	b.n	8007112 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007106:	b2db      	uxtb	r3, r3
 8007108:	2b02      	cmp	r3, #2
 800710a:	bf0c      	ite	eq
 800710c:	2301      	moveq	r3, #1
 800710e:	2300      	movne	r3, #0
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2b00      	cmp	r3, #0
 8007114:	d001      	beq.n	800711a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8007116:	2302      	movs	r3, #2
 8007118:	e18d      	b.n	8007436 <HAL_TIM_PWM_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d109      	bne.n	8007134 <HAL_TIM_PWM_Start_DMA+0xc8>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007126:	b2db      	uxtb	r3, r3
 8007128:	2b01      	cmp	r3, #1
 800712a:	bf0c      	ite	eq
 800712c:	2301      	moveq	r3, #1
 800712e:	2300      	movne	r3, #0
 8007130:	b2db      	uxtb	r3, r3
 8007132:	e03c      	b.n	80071ae <HAL_TIM_PWM_Start_DMA+0x142>
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	2b04      	cmp	r3, #4
 8007138:	d109      	bne.n	800714e <HAL_TIM_PWM_Start_DMA+0xe2>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007140:	b2db      	uxtb	r3, r3
 8007142:	2b01      	cmp	r3, #1
 8007144:	bf0c      	ite	eq
 8007146:	2301      	moveq	r3, #1
 8007148:	2300      	movne	r3, #0
 800714a:	b2db      	uxtb	r3, r3
 800714c:	e02f      	b.n	80071ae <HAL_TIM_PWM_Start_DMA+0x142>
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	2b08      	cmp	r3, #8
 8007152:	d109      	bne.n	8007168 <HAL_TIM_PWM_Start_DMA+0xfc>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800715a:	b2db      	uxtb	r3, r3
 800715c:	2b01      	cmp	r3, #1
 800715e:	bf0c      	ite	eq
 8007160:	2301      	moveq	r3, #1
 8007162:	2300      	movne	r3, #0
 8007164:	b2db      	uxtb	r3, r3
 8007166:	e022      	b.n	80071ae <HAL_TIM_PWM_Start_DMA+0x142>
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	2b0c      	cmp	r3, #12
 800716c:	d109      	bne.n	8007182 <HAL_TIM_PWM_Start_DMA+0x116>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007174:	b2db      	uxtb	r3, r3
 8007176:	2b01      	cmp	r3, #1
 8007178:	bf0c      	ite	eq
 800717a:	2301      	moveq	r3, #1
 800717c:	2300      	movne	r3, #0
 800717e:	b2db      	uxtb	r3, r3
 8007180:	e015      	b.n	80071ae <HAL_TIM_PWM_Start_DMA+0x142>
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	2b10      	cmp	r3, #16
 8007186:	d109      	bne.n	800719c <HAL_TIM_PWM_Start_DMA+0x130>
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800718e:	b2db      	uxtb	r3, r3
 8007190:	2b01      	cmp	r3, #1
 8007192:	bf0c      	ite	eq
 8007194:	2301      	moveq	r3, #1
 8007196:	2300      	movne	r3, #0
 8007198:	b2db      	uxtb	r3, r3
 800719a:	e008      	b.n	80071ae <HAL_TIM_PWM_Start_DMA+0x142>
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	bf0c      	ite	eq
 80071a8:	2301      	moveq	r3, #1
 80071aa:	2300      	movne	r3, #0
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d034      	beq.n	800721c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d002      	beq.n	80071be <HAL_TIM_PWM_Start_DMA+0x152>
 80071b8:	887b      	ldrh	r3, [r7, #2]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d101      	bne.n	80071c2 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e139      	b.n	8007436 <HAL_TIM_PWM_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d104      	bne.n	80071d2 <HAL_TIM_PWM_Start_DMA+0x166>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2202      	movs	r2, #2
 80071cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071d0:	e026      	b.n	8007220 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	2b04      	cmp	r3, #4
 80071d6:	d104      	bne.n	80071e2 <HAL_TIM_PWM_Start_DMA+0x176>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2202      	movs	r2, #2
 80071dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071e0:	e01e      	b.n	8007220 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	2b08      	cmp	r3, #8
 80071e6:	d104      	bne.n	80071f2 <HAL_TIM_PWM_Start_DMA+0x186>
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2202      	movs	r2, #2
 80071ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071f0:	e016      	b.n	8007220 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	2b0c      	cmp	r3, #12
 80071f6:	d104      	bne.n	8007202 <HAL_TIM_PWM_Start_DMA+0x196>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2202      	movs	r2, #2
 80071fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007200:	e00e      	b.n	8007220 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	2b10      	cmp	r3, #16
 8007206:	d104      	bne.n	8007212 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2202      	movs	r2, #2
 800720c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007210:	e006      	b.n	8007220 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2202      	movs	r2, #2
 8007216:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800721a:	e001      	b.n	8007220 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e10a      	b.n	8007436 <HAL_TIM_PWM_Start_DMA+0x3ca>
  }

  switch (Channel)
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	2b0c      	cmp	r3, #12
 8007224:	f200 80ae 	bhi.w	8007384 <HAL_TIM_PWM_Start_DMA+0x318>
 8007228:	a201      	add	r2, pc, #4	; (adr r2, 8007230 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800722a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800722e:	bf00      	nop
 8007230:	08007265 	.word	0x08007265
 8007234:	08007385 	.word	0x08007385
 8007238:	08007385 	.word	0x08007385
 800723c:	08007385 	.word	0x08007385
 8007240:	080072ad 	.word	0x080072ad
 8007244:	08007385 	.word	0x08007385
 8007248:	08007385 	.word	0x08007385
 800724c:	08007385 	.word	0x08007385
 8007250:	080072f5 	.word	0x080072f5
 8007254:	08007385 	.word	0x08007385
 8007258:	08007385 	.word	0x08007385
 800725c:	08007385 	.word	0x08007385
 8007260:	0800733d 	.word	0x0800733d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007268:	4a75      	ldr	r2, [pc, #468]	; (8007440 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800726a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007270:	4a74      	ldr	r2, [pc, #464]	; (8007444 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8007272:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007278:	4a73      	ldr	r2, [pc, #460]	; (8007448 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800727a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007280:	6879      	ldr	r1, [r7, #4]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	3334      	adds	r3, #52	; 0x34
 8007288:	461a      	mov	r2, r3
 800728a:	887b      	ldrh	r3, [r7, #2]
 800728c:	f7fd fc32 	bl	8004af4 <HAL_DMA_Start_IT>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d001      	beq.n	800729a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e0cd      	b.n	8007436 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68da      	ldr	r2, [r3, #12]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072a8:	60da      	str	r2, [r3, #12]
      break;
 80072aa:	e06e      	b.n	800738a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b0:	4a63      	ldr	r2, [pc, #396]	; (8007440 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80072b2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b8:	4a62      	ldr	r2, [pc, #392]	; (8007444 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80072ba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c0:	4a61      	ldr	r2, [pc, #388]	; (8007448 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80072c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80072c8:	6879      	ldr	r1, [r7, #4]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	3338      	adds	r3, #56	; 0x38
 80072d0:	461a      	mov	r2, r3
 80072d2:	887b      	ldrh	r3, [r7, #2]
 80072d4:	f7fd fc0e 	bl	8004af4 <HAL_DMA_Start_IT>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d001      	beq.n	80072e2 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e0a9      	b.n	8007436 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	68da      	ldr	r2, [r3, #12]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80072f0:	60da      	str	r2, [r3, #12]
      break;
 80072f2:	e04a      	b.n	800738a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f8:	4a51      	ldr	r2, [pc, #324]	; (8007440 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80072fa:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007300:	4a50      	ldr	r2, [pc, #320]	; (8007444 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8007302:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007308:	4a4f      	ldr	r2, [pc, #316]	; (8007448 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800730a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007310:	6879      	ldr	r1, [r7, #4]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	333c      	adds	r3, #60	; 0x3c
 8007318:	461a      	mov	r2, r3
 800731a:	887b      	ldrh	r3, [r7, #2]
 800731c:	f7fd fbea 	bl	8004af4 <HAL_DMA_Start_IT>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d001      	beq.n	800732a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e085      	b.n	8007436 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68da      	ldr	r2, [r3, #12]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007338:	60da      	str	r2, [r3, #12]
      break;
 800733a:	e026      	b.n	800738a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007340:	4a3f      	ldr	r2, [pc, #252]	; (8007440 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8007342:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007348:	4a3e      	ldr	r2, [pc, #248]	; (8007444 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 800734a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007350:	4a3d      	ldr	r2, [pc, #244]	; (8007448 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8007352:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007358:	6879      	ldr	r1, [r7, #4]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	3340      	adds	r3, #64	; 0x40
 8007360:	461a      	mov	r2, r3
 8007362:	887b      	ldrh	r3, [r7, #2]
 8007364:	f7fd fbc6 	bl	8004af4 <HAL_DMA_Start_IT>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d001      	beq.n	8007372 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	e061      	b.n	8007436 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68da      	ldr	r2, [r3, #12]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007380:	60da      	str	r2, [r3, #12]
      break;
 8007382:	e002      	b.n	800738a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	75fb      	strb	r3, [r7, #23]
      break;
 8007388:	bf00      	nop
  }

  if (status == HAL_OK)
 800738a:	7dfb      	ldrb	r3, [r7, #23]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d151      	bne.n	8007434 <HAL_TIM_PWM_Start_DMA+0x3c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2201      	movs	r2, #1
 8007396:	68b9      	ldr	r1, [r7, #8]
 8007398:	4618      	mov	r0, r3
 800739a:	f000 ff85 	bl	80082a8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a2a      	ldr	r2, [pc, #168]	; (800744c <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d009      	beq.n	80073bc <HAL_TIM_PWM_Start_DMA+0x350>
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a28      	ldr	r2, [pc, #160]	; (8007450 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d004      	beq.n	80073bc <HAL_TIM_PWM_Start_DMA+0x350>
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a27      	ldr	r2, [pc, #156]	; (8007454 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d101      	bne.n	80073c0 <HAL_TIM_PWM_Start_DMA+0x354>
 80073bc:	2301      	movs	r3, #1
 80073be:	e000      	b.n	80073c2 <HAL_TIM_PWM_Start_DMA+0x356>
 80073c0:	2300      	movs	r3, #0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d007      	beq.n	80073d6 <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80073d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a1c      	ldr	r2, [pc, #112]	; (800744c <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d009      	beq.n	80073f4 <HAL_TIM_PWM_Start_DMA+0x388>
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073e8:	d004      	beq.n	80073f4 <HAL_TIM_PWM_Start_DMA+0x388>
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a18      	ldr	r2, [pc, #96]	; (8007450 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d115      	bne.n	8007420 <HAL_TIM_PWM_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	689a      	ldr	r2, [r3, #8]
 80073fa:	4b17      	ldr	r3, [pc, #92]	; (8007458 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80073fc:	4013      	ands	r3, r2
 80073fe:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	2b06      	cmp	r3, #6
 8007404:	d015      	beq.n	8007432 <HAL_TIM_PWM_Start_DMA+0x3c6>
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800740c:	d011      	beq.n	8007432 <HAL_TIM_PWM_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f042 0201 	orr.w	r2, r2, #1
 800741c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800741e:	e008      	b.n	8007432 <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f042 0201 	orr.w	r2, r2, #1
 800742e:	601a      	str	r2, [r3, #0]
 8007430:	e000      	b.n	8007434 <HAL_TIM_PWM_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007432:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007434:	7dfb      	ldrb	r3, [r7, #23]
}
 8007436:	4618      	mov	r0, r3
 8007438:	3718      	adds	r7, #24
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	08007aa1 	.word	0x08007aa1
 8007444:	08007b49 	.word	0x08007b49
 8007448:	08007a0f 	.word	0x08007a0f
 800744c:	40012c00 	.word	0x40012c00
 8007450:	40014000 	.word	0x40014000
 8007454:	40014400 	.word	0x40014400
 8007458:	00010007 	.word	0x00010007

0800745c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007466:	2300      	movs	r3, #0
 8007468:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	2b0c      	cmp	r3, #12
 800746e:	d855      	bhi.n	800751c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8007470:	a201      	add	r2, pc, #4	; (adr r2, 8007478 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8007472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007476:	bf00      	nop
 8007478:	080074ad 	.word	0x080074ad
 800747c:	0800751d 	.word	0x0800751d
 8007480:	0800751d 	.word	0x0800751d
 8007484:	0800751d 	.word	0x0800751d
 8007488:	080074c9 	.word	0x080074c9
 800748c:	0800751d 	.word	0x0800751d
 8007490:	0800751d 	.word	0x0800751d
 8007494:	0800751d 	.word	0x0800751d
 8007498:	080074e5 	.word	0x080074e5
 800749c:	0800751d 	.word	0x0800751d
 80074a0:	0800751d 	.word	0x0800751d
 80074a4:	0800751d 	.word	0x0800751d
 80074a8:	08007501 	.word	0x08007501
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68da      	ldr	r2, [r3, #12]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80074ba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7fd fbb5 	bl	8004c30 <HAL_DMA_Abort_IT>
      break;
 80074c6:	e02c      	b.n	8007522 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68da      	ldr	r2, [r3, #12]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074d6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074dc:	4618      	mov	r0, r3
 80074de:	f7fd fba7 	bl	8004c30 <HAL_DMA_Abort_IT>
      break;
 80074e2:	e01e      	b.n	8007522 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	68da      	ldr	r2, [r3, #12]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074f2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f8:	4618      	mov	r0, r3
 80074fa:	f7fd fb99 	bl	8004c30 <HAL_DMA_Abort_IT>
      break;
 80074fe:	e010      	b.n	8007522 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68da      	ldr	r2, [r3, #12]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800750e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007514:	4618      	mov	r0, r3
 8007516:	f7fd fb8b 	bl	8004c30 <HAL_DMA_Abort_IT>
      break;
 800751a:	e002      	b.n	8007522 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	73fb      	strb	r3, [r7, #15]
      break;
 8007520:	bf00      	nop
  }

  if (status == HAL_OK)
 8007522:	7bfb      	ldrb	r3, [r7, #15]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d176      	bne.n	8007616 <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2200      	movs	r2, #0
 800752e:	6839      	ldr	r1, [r7, #0]
 8007530:	4618      	mov	r0, r3
 8007532:	f000 feb9 	bl	80082a8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a39      	ldr	r2, [pc, #228]	; (8007620 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d009      	beq.n	8007554 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a37      	ldr	r2, [pc, #220]	; (8007624 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d004      	beq.n	8007554 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a36      	ldr	r2, [pc, #216]	; (8007628 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d101      	bne.n	8007558 <HAL_TIM_PWM_Stop_DMA+0xfc>
 8007554:	2301      	movs	r3, #1
 8007556:	e000      	b.n	800755a <HAL_TIM_PWM_Stop_DMA+0xfe>
 8007558:	2300      	movs	r3, #0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d017      	beq.n	800758e <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	6a1a      	ldr	r2, [r3, #32]
 8007564:	f241 1311 	movw	r3, #4369	; 0x1111
 8007568:	4013      	ands	r3, r2
 800756a:	2b00      	cmp	r3, #0
 800756c:	d10f      	bne.n	800758e <HAL_TIM_PWM_Stop_DMA+0x132>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	6a1a      	ldr	r2, [r3, #32]
 8007574:	f240 4344 	movw	r3, #1092	; 0x444
 8007578:	4013      	ands	r3, r2
 800757a:	2b00      	cmp	r3, #0
 800757c:	d107      	bne.n	800758e <HAL_TIM_PWM_Stop_DMA+0x132>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800758c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	6a1a      	ldr	r2, [r3, #32]
 8007594:	f241 1311 	movw	r3, #4369	; 0x1111
 8007598:	4013      	ands	r3, r2
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10f      	bne.n	80075be <HAL_TIM_PWM_Stop_DMA+0x162>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	6a1a      	ldr	r2, [r3, #32]
 80075a4:	f240 4344 	movw	r3, #1092	; 0x444
 80075a8:	4013      	ands	r3, r2
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d107      	bne.n	80075be <HAL_TIM_PWM_Stop_DMA+0x162>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f022 0201 	bic.w	r2, r2, #1
 80075bc:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d104      	bne.n	80075ce <HAL_TIM_PWM_Stop_DMA+0x172>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075cc:	e023      	b.n	8007616 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	2b04      	cmp	r3, #4
 80075d2:	d104      	bne.n	80075de <HAL_TIM_PWM_Stop_DMA+0x182>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075dc:	e01b      	b.n	8007616 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	2b08      	cmp	r3, #8
 80075e2:	d104      	bne.n	80075ee <HAL_TIM_PWM_Stop_DMA+0x192>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075ec:	e013      	b.n	8007616 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	2b0c      	cmp	r3, #12
 80075f2:	d104      	bne.n	80075fe <HAL_TIM_PWM_Stop_DMA+0x1a2>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80075fc:	e00b      	b.n	8007616 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	2b10      	cmp	r3, #16
 8007602:	d104      	bne.n	800760e <HAL_TIM_PWM_Stop_DMA+0x1b2>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800760c:	e003      	b.n	8007616 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2201      	movs	r2, #1
 8007612:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8007616:	7bfb      	ldrb	r3, [r7, #15]
}
 8007618:	4618      	mov	r0, r3
 800761a:	3710      	adds	r7, #16
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	40012c00 	.word	0x40012c00
 8007624:	40014000 	.word	0x40014000
 8007628:	40014400 	.word	0x40014400

0800762c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b086      	sub	sp, #24
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007638:	2300      	movs	r3, #0
 800763a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007642:	2b01      	cmp	r3, #1
 8007644:	d101      	bne.n	800764a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007646:	2302      	movs	r3, #2
 8007648:	e0ff      	b.n	800784a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2201      	movs	r2, #1
 800764e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2b14      	cmp	r3, #20
 8007656:	f200 80f0 	bhi.w	800783a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800765a:	a201      	add	r2, pc, #4	; (adr r2, 8007660 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800765c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007660:	080076b5 	.word	0x080076b5
 8007664:	0800783b 	.word	0x0800783b
 8007668:	0800783b 	.word	0x0800783b
 800766c:	0800783b 	.word	0x0800783b
 8007670:	080076f5 	.word	0x080076f5
 8007674:	0800783b 	.word	0x0800783b
 8007678:	0800783b 	.word	0x0800783b
 800767c:	0800783b 	.word	0x0800783b
 8007680:	08007737 	.word	0x08007737
 8007684:	0800783b 	.word	0x0800783b
 8007688:	0800783b 	.word	0x0800783b
 800768c:	0800783b 	.word	0x0800783b
 8007690:	08007777 	.word	0x08007777
 8007694:	0800783b 	.word	0x0800783b
 8007698:	0800783b 	.word	0x0800783b
 800769c:	0800783b 	.word	0x0800783b
 80076a0:	080077b9 	.word	0x080077b9
 80076a4:	0800783b 	.word	0x0800783b
 80076a8:	0800783b 	.word	0x0800783b
 80076ac:	0800783b 	.word	0x0800783b
 80076b0:	080077f9 	.word	0x080077f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68b9      	ldr	r1, [r7, #8]
 80076ba:	4618      	mov	r0, r3
 80076bc:	f000 fadc 	bl	8007c78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	699a      	ldr	r2, [r3, #24]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f042 0208 	orr.w	r2, r2, #8
 80076ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	699a      	ldr	r2, [r3, #24]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f022 0204 	bic.w	r2, r2, #4
 80076de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	6999      	ldr	r1, [r3, #24]
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	691a      	ldr	r2, [r3, #16]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	430a      	orrs	r2, r1
 80076f0:	619a      	str	r2, [r3, #24]
      break;
 80076f2:	e0a5      	b.n	8007840 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68b9      	ldr	r1, [r7, #8]
 80076fa:	4618      	mov	r0, r3
 80076fc:	f000 fb38 	bl	8007d70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	699a      	ldr	r2, [r3, #24]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800770e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	699a      	ldr	r2, [r3, #24]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800771e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	6999      	ldr	r1, [r3, #24]
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	021a      	lsls	r2, r3, #8
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	430a      	orrs	r2, r1
 8007732:	619a      	str	r2, [r3, #24]
      break;
 8007734:	e084      	b.n	8007840 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68b9      	ldr	r1, [r7, #8]
 800773c:	4618      	mov	r0, r3
 800773e:	f000 fb91 	bl	8007e64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	69da      	ldr	r2, [r3, #28]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f042 0208 	orr.w	r2, r2, #8
 8007750:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	69da      	ldr	r2, [r3, #28]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f022 0204 	bic.w	r2, r2, #4
 8007760:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	69d9      	ldr	r1, [r3, #28]
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	691a      	ldr	r2, [r3, #16]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	430a      	orrs	r2, r1
 8007772:	61da      	str	r2, [r3, #28]
      break;
 8007774:	e064      	b.n	8007840 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68b9      	ldr	r1, [r7, #8]
 800777c:	4618      	mov	r0, r3
 800777e:	f000 fbe9 	bl	8007f54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	69da      	ldr	r2, [r3, #28]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007790:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	69da      	ldr	r2, [r3, #28]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	69d9      	ldr	r1, [r3, #28]
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	691b      	ldr	r3, [r3, #16]
 80077ac:	021a      	lsls	r2, r3, #8
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	430a      	orrs	r2, r1
 80077b4:	61da      	str	r2, [r3, #28]
      break;
 80077b6:	e043      	b.n	8007840 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68b9      	ldr	r1, [r7, #8]
 80077be:	4618      	mov	r0, r3
 80077c0:	f000 fc26 	bl	8008010 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f042 0208 	orr.w	r2, r2, #8
 80077d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f022 0204 	bic.w	r2, r2, #4
 80077e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	691a      	ldr	r2, [r3, #16]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	430a      	orrs	r2, r1
 80077f4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80077f6:	e023      	b.n	8007840 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	68b9      	ldr	r1, [r7, #8]
 80077fe:	4618      	mov	r0, r3
 8007800:	f000 fc5e 	bl	80080c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007812:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007822:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	021a      	lsls	r2, r3, #8
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	430a      	orrs	r2, r1
 8007836:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007838:	e002      	b.n	8007840 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	75fb      	strb	r3, [r7, #23]
      break;
 800783e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2200      	movs	r2, #0
 8007844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007848:	7dfb      	ldrb	r3, [r7, #23]
}
 800784a:	4618      	mov	r0, r3
 800784c:	3718      	adds	r7, #24
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop

08007854 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800785e:	2300      	movs	r3, #0
 8007860:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007868:	2b01      	cmp	r3, #1
 800786a:	d101      	bne.n	8007870 <HAL_TIM_ConfigClockSource+0x1c>
 800786c:	2302      	movs	r3, #2
 800786e:	e0b6      	b.n	80079de <HAL_TIM_ConfigClockSource+0x18a>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2202      	movs	r2, #2
 800787c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800788e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007892:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800789a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	68ba      	ldr	r2, [r7, #8]
 80078a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078ac:	d03e      	beq.n	800792c <HAL_TIM_ConfigClockSource+0xd8>
 80078ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078b2:	f200 8087 	bhi.w	80079c4 <HAL_TIM_ConfigClockSource+0x170>
 80078b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078ba:	f000 8086 	beq.w	80079ca <HAL_TIM_ConfigClockSource+0x176>
 80078be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078c2:	d87f      	bhi.n	80079c4 <HAL_TIM_ConfigClockSource+0x170>
 80078c4:	2b70      	cmp	r3, #112	; 0x70
 80078c6:	d01a      	beq.n	80078fe <HAL_TIM_ConfigClockSource+0xaa>
 80078c8:	2b70      	cmp	r3, #112	; 0x70
 80078ca:	d87b      	bhi.n	80079c4 <HAL_TIM_ConfigClockSource+0x170>
 80078cc:	2b60      	cmp	r3, #96	; 0x60
 80078ce:	d050      	beq.n	8007972 <HAL_TIM_ConfigClockSource+0x11e>
 80078d0:	2b60      	cmp	r3, #96	; 0x60
 80078d2:	d877      	bhi.n	80079c4 <HAL_TIM_ConfigClockSource+0x170>
 80078d4:	2b50      	cmp	r3, #80	; 0x50
 80078d6:	d03c      	beq.n	8007952 <HAL_TIM_ConfigClockSource+0xfe>
 80078d8:	2b50      	cmp	r3, #80	; 0x50
 80078da:	d873      	bhi.n	80079c4 <HAL_TIM_ConfigClockSource+0x170>
 80078dc:	2b40      	cmp	r3, #64	; 0x40
 80078de:	d058      	beq.n	8007992 <HAL_TIM_ConfigClockSource+0x13e>
 80078e0:	2b40      	cmp	r3, #64	; 0x40
 80078e2:	d86f      	bhi.n	80079c4 <HAL_TIM_ConfigClockSource+0x170>
 80078e4:	2b30      	cmp	r3, #48	; 0x30
 80078e6:	d064      	beq.n	80079b2 <HAL_TIM_ConfigClockSource+0x15e>
 80078e8:	2b30      	cmp	r3, #48	; 0x30
 80078ea:	d86b      	bhi.n	80079c4 <HAL_TIM_ConfigClockSource+0x170>
 80078ec:	2b20      	cmp	r3, #32
 80078ee:	d060      	beq.n	80079b2 <HAL_TIM_ConfigClockSource+0x15e>
 80078f0:	2b20      	cmp	r3, #32
 80078f2:	d867      	bhi.n	80079c4 <HAL_TIM_ConfigClockSource+0x170>
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d05c      	beq.n	80079b2 <HAL_TIM_ConfigClockSource+0x15e>
 80078f8:	2b10      	cmp	r3, #16
 80078fa:	d05a      	beq.n	80079b2 <HAL_TIM_ConfigClockSource+0x15e>
 80078fc:	e062      	b.n	80079c4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800790e:	f000 fcab 	bl	8008268 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007920:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	68ba      	ldr	r2, [r7, #8]
 8007928:	609a      	str	r2, [r3, #8]
      break;
 800792a:	e04f      	b.n	80079cc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800793c:	f000 fc94 	bl	8008268 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	689a      	ldr	r2, [r3, #8]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800794e:	609a      	str	r2, [r3, #8]
      break;
 8007950:	e03c      	b.n	80079cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800795e:	461a      	mov	r2, r3
 8007960:	f000 fc08 	bl	8008174 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2150      	movs	r1, #80	; 0x50
 800796a:	4618      	mov	r0, r3
 800796c:	f000 fc61 	bl	8008232 <TIM_ITRx_SetConfig>
      break;
 8007970:	e02c      	b.n	80079cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800797e:	461a      	mov	r2, r3
 8007980:	f000 fc27 	bl	80081d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2160      	movs	r1, #96	; 0x60
 800798a:	4618      	mov	r0, r3
 800798c:	f000 fc51 	bl	8008232 <TIM_ITRx_SetConfig>
      break;
 8007990:	e01c      	b.n	80079cc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800799e:	461a      	mov	r2, r3
 80079a0:	f000 fbe8 	bl	8008174 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2140      	movs	r1, #64	; 0x40
 80079aa:	4618      	mov	r0, r3
 80079ac:	f000 fc41 	bl	8008232 <TIM_ITRx_SetConfig>
      break;
 80079b0:	e00c      	b.n	80079cc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4619      	mov	r1, r3
 80079bc:	4610      	mov	r0, r2
 80079be:	f000 fc38 	bl	8008232 <TIM_ITRx_SetConfig>
      break;
 80079c2:	e003      	b.n	80079cc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	73fb      	strb	r3, [r7, #15]
      break;
 80079c8:	e000      	b.n	80079cc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80079ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80079dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3710      	adds	r7, #16
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80079ee:	bf00      	nop
 80079f0:	370c      	adds	r7, #12
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80079fa:	b480      	push	{r7}
 80079fc:	b083      	sub	sp, #12
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007a02:	bf00      	nop
 8007a04:	370c      	adds	r7, #12
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr

08007a0e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b084      	sub	sp, #16
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a1a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d107      	bne.n	8007a36 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a34:	e02a      	b.n	8007a8c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d107      	bne.n	8007a50 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2202      	movs	r2, #2
 8007a44:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a4e:	e01d      	b.n	8007a8c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d107      	bne.n	8007a6a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2204      	movs	r2, #4
 8007a5e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a68:	e010      	b.n	8007a8c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d107      	bne.n	8007a84 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2208      	movs	r2, #8
 8007a78:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a82:	e003      	b.n	8007a8c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	f7ff ffb4 	bl	80079fa <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2200      	movs	r2, #0
 8007a96:	771a      	strb	r2, [r3, #28]
}
 8007a98:	bf00      	nop
 8007a9a:	3710      	adds	r7, #16
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aac:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d10b      	bne.n	8007ad0 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2201      	movs	r2, #1
 8007abc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	69db      	ldr	r3, [r3, #28]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d136      	bne.n	8007b34 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ace:	e031      	b.n	8007b34 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d10b      	bne.n	8007af2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2202      	movs	r2, #2
 8007ade:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	69db      	ldr	r3, [r3, #28]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d125      	bne.n	8007b34 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007af0:	e020      	b.n	8007b34 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d10b      	bne.n	8007b14 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2204      	movs	r2, #4
 8007b00:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	69db      	ldr	r3, [r3, #28]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d114      	bne.n	8007b34 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b12:	e00f      	b.n	8007b34 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d10a      	bne.n	8007b34 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2208      	movs	r2, #8
 8007b22:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	69db      	ldr	r3, [r3, #28]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d103      	bne.n	8007b34 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f003 fadb 	bl	800b0f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	771a      	strb	r2, [r3, #28]
  //g_tim_pwm_transfer_cmplt = true;

}
 8007b40:	bf00      	nop
 8007b42:	3710      	adds	r7, #16
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b54:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d103      	bne.n	8007b68 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2201      	movs	r2, #1
 8007b64:	771a      	strb	r2, [r3, #28]
 8007b66:	e019      	b.n	8007b9c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d103      	bne.n	8007b7a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2202      	movs	r2, #2
 8007b76:	771a      	strb	r2, [r3, #28]
 8007b78:	e010      	b.n	8007b9c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d103      	bne.n	8007b8c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2204      	movs	r2, #4
 8007b88:	771a      	strb	r2, [r3, #28]
 8007b8a:	e007      	b.n	8007b9c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d102      	bne.n	8007b9c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2208      	movs	r2, #8
 8007b9a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8007b9c:	68f8      	ldr	r0, [r7, #12]
 8007b9e:	f7ff ff22 	bl	80079e6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	771a      	strb	r2, [r3, #28]
}
 8007ba8:	bf00      	nop
 8007baa:	3710      	adds	r7, #16
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	4a2a      	ldr	r2, [pc, #168]	; (8007c6c <TIM_Base_SetConfig+0xbc>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d003      	beq.n	8007bd0 <TIM_Base_SetConfig+0x20>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bce:	d108      	bne.n	8007be2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4a21      	ldr	r2, [pc, #132]	; (8007c6c <TIM_Base_SetConfig+0xbc>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d00b      	beq.n	8007c02 <TIM_Base_SetConfig+0x52>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bf0:	d007      	beq.n	8007c02 <TIM_Base_SetConfig+0x52>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a1e      	ldr	r2, [pc, #120]	; (8007c70 <TIM_Base_SetConfig+0xc0>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d003      	beq.n	8007c02 <TIM_Base_SetConfig+0x52>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a1d      	ldr	r2, [pc, #116]	; (8007c74 <TIM_Base_SetConfig+0xc4>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d108      	bne.n	8007c14 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	68fa      	ldr	r2, [r7, #12]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	695b      	ldr	r3, [r3, #20]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	689a      	ldr	r2, [r3, #8]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	4a0c      	ldr	r2, [pc, #48]	; (8007c6c <TIM_Base_SetConfig+0xbc>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d007      	beq.n	8007c50 <TIM_Base_SetConfig+0xa0>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4a0b      	ldr	r2, [pc, #44]	; (8007c70 <TIM_Base_SetConfig+0xc0>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d003      	beq.n	8007c50 <TIM_Base_SetConfig+0xa0>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	4a0a      	ldr	r2, [pc, #40]	; (8007c74 <TIM_Base_SetConfig+0xc4>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d103      	bne.n	8007c58 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	691a      	ldr	r2, [r3, #16]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	615a      	str	r2, [r3, #20]
}
 8007c5e:	bf00      	nop
 8007c60:	3714      	adds	r7, #20
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr
 8007c6a:	bf00      	nop
 8007c6c:	40012c00 	.word	0x40012c00
 8007c70:	40014000 	.word	0x40014000
 8007c74:	40014400 	.word	0x40014400

08007c78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b087      	sub	sp, #28
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a1b      	ldr	r3, [r3, #32]
 8007c86:	f023 0201 	bic.w	r2, r3, #1
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a1b      	ldr	r3, [r3, #32]
 8007c92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	699b      	ldr	r3, [r3, #24]
 8007c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f023 0303 	bic.w	r3, r3, #3
 8007cb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	f023 0302 	bic.w	r3, r3, #2
 8007cc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	697a      	ldr	r2, [r7, #20]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4a24      	ldr	r2, [pc, #144]	; (8007d64 <TIM_OC1_SetConfig+0xec>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d007      	beq.n	8007ce8 <TIM_OC1_SetConfig+0x70>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4a23      	ldr	r2, [pc, #140]	; (8007d68 <TIM_OC1_SetConfig+0xf0>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d003      	beq.n	8007ce8 <TIM_OC1_SetConfig+0x70>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4a22      	ldr	r2, [pc, #136]	; (8007d6c <TIM_OC1_SetConfig+0xf4>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d10c      	bne.n	8007d02 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	f023 0308 	bic.w	r3, r3, #8
 8007cee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	697a      	ldr	r2, [r7, #20]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	f023 0304 	bic.w	r3, r3, #4
 8007d00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4a17      	ldr	r2, [pc, #92]	; (8007d64 <TIM_OC1_SetConfig+0xec>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d007      	beq.n	8007d1a <TIM_OC1_SetConfig+0xa2>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4a16      	ldr	r2, [pc, #88]	; (8007d68 <TIM_OC1_SetConfig+0xf0>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d003      	beq.n	8007d1a <TIM_OC1_SetConfig+0xa2>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4a15      	ldr	r2, [pc, #84]	; (8007d6c <TIM_OC1_SetConfig+0xf4>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d111      	bne.n	8007d3e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	695b      	ldr	r3, [r3, #20]
 8007d2e:	693a      	ldr	r2, [r7, #16]
 8007d30:	4313      	orrs	r3, r2
 8007d32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	699b      	ldr	r3, [r3, #24]
 8007d38:	693a      	ldr	r2, [r7, #16]
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	693a      	ldr	r2, [r7, #16]
 8007d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	685a      	ldr	r2, [r3, #4]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	697a      	ldr	r2, [r7, #20]
 8007d56:	621a      	str	r2, [r3, #32]
}
 8007d58:	bf00      	nop
 8007d5a:	371c      	adds	r7, #28
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr
 8007d64:	40012c00 	.word	0x40012c00
 8007d68:	40014000 	.word	0x40014000
 8007d6c:	40014400 	.word	0x40014400

08007d70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b087      	sub	sp, #28
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	f023 0210 	bic.w	r2, r3, #16
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a1b      	ldr	r3, [r3, #32]
 8007d8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	699b      	ldr	r3, [r3, #24]
 8007d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007daa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	021b      	lsls	r3, r3, #8
 8007db2:	68fa      	ldr	r2, [r7, #12]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	f023 0320 	bic.w	r3, r3, #32
 8007dbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	011b      	lsls	r3, r3, #4
 8007dc6:	697a      	ldr	r2, [r7, #20]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	4a22      	ldr	r2, [pc, #136]	; (8007e58 <TIM_OC2_SetConfig+0xe8>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d10d      	bne.n	8007df0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	011b      	lsls	r3, r3, #4
 8007de2:	697a      	ldr	r2, [r7, #20]
 8007de4:	4313      	orrs	r3, r2
 8007de6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	4a19      	ldr	r2, [pc, #100]	; (8007e58 <TIM_OC2_SetConfig+0xe8>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d007      	beq.n	8007e08 <TIM_OC2_SetConfig+0x98>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	4a18      	ldr	r2, [pc, #96]	; (8007e5c <TIM_OC2_SetConfig+0xec>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d003      	beq.n	8007e08 <TIM_OC2_SetConfig+0x98>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4a17      	ldr	r2, [pc, #92]	; (8007e60 <TIM_OC2_SetConfig+0xf0>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d113      	bne.n	8007e30 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	695b      	ldr	r3, [r3, #20]
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	693a      	ldr	r2, [r7, #16]
 8007e20:	4313      	orrs	r3, r2
 8007e22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	699b      	ldr	r3, [r3, #24]
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	693a      	ldr	r2, [r7, #16]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	693a      	ldr	r2, [r7, #16]
 8007e34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	68fa      	ldr	r2, [r7, #12]
 8007e3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	685a      	ldr	r2, [r3, #4]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	697a      	ldr	r2, [r7, #20]
 8007e48:	621a      	str	r2, [r3, #32]
}
 8007e4a:	bf00      	nop
 8007e4c:	371c      	adds	r7, #28
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop
 8007e58:	40012c00 	.word	0x40012c00
 8007e5c:	40014000 	.word	0x40014000
 8007e60:	40014400 	.word	0x40014400

08007e64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b087      	sub	sp, #28
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6a1b      	ldr	r3, [r3, #32]
 8007e72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6a1b      	ldr	r3, [r3, #32]
 8007e7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	69db      	ldr	r3, [r3, #28]
 8007e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f023 0303 	bic.w	r3, r3, #3
 8007e9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007eb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	021b      	lsls	r3, r3, #8
 8007eb8:	697a      	ldr	r2, [r7, #20]
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4a21      	ldr	r2, [pc, #132]	; (8007f48 <TIM_OC3_SetConfig+0xe4>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d10d      	bne.n	8007ee2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ecc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	021b      	lsls	r3, r3, #8
 8007ed4:	697a      	ldr	r2, [r7, #20]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ee0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	4a18      	ldr	r2, [pc, #96]	; (8007f48 <TIM_OC3_SetConfig+0xe4>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d007      	beq.n	8007efa <TIM_OC3_SetConfig+0x96>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	4a17      	ldr	r2, [pc, #92]	; (8007f4c <TIM_OC3_SetConfig+0xe8>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d003      	beq.n	8007efa <TIM_OC3_SetConfig+0x96>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	4a16      	ldr	r2, [pc, #88]	; (8007f50 <TIM_OC3_SetConfig+0xec>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d113      	bne.n	8007f22 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	695b      	ldr	r3, [r3, #20]
 8007f0e:	011b      	lsls	r3, r3, #4
 8007f10:	693a      	ldr	r2, [r7, #16]
 8007f12:	4313      	orrs	r3, r2
 8007f14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	699b      	ldr	r3, [r3, #24]
 8007f1a:	011b      	lsls	r3, r3, #4
 8007f1c:	693a      	ldr	r2, [r7, #16]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	693a      	ldr	r2, [r7, #16]
 8007f26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	68fa      	ldr	r2, [r7, #12]
 8007f2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	685a      	ldr	r2, [r3, #4]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	697a      	ldr	r2, [r7, #20]
 8007f3a:	621a      	str	r2, [r3, #32]
}
 8007f3c:	bf00      	nop
 8007f3e:	371c      	adds	r7, #28
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr
 8007f48:	40012c00 	.word	0x40012c00
 8007f4c:	40014000 	.word	0x40014000
 8007f50:	40014400 	.word	0x40014400

08007f54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b087      	sub	sp, #28
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a1b      	ldr	r3, [r3, #32]
 8007f62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a1b      	ldr	r3, [r3, #32]
 8007f6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	69db      	ldr	r3, [r3, #28]
 8007f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	021b      	lsls	r3, r3, #8
 8007f96:	68fa      	ldr	r2, [r7, #12]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007fa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	031b      	lsls	r3, r3, #12
 8007faa:	693a      	ldr	r2, [r7, #16]
 8007fac:	4313      	orrs	r3, r2
 8007fae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	4a14      	ldr	r2, [pc, #80]	; (8008004 <TIM_OC4_SetConfig+0xb0>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d007      	beq.n	8007fc8 <TIM_OC4_SetConfig+0x74>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	4a13      	ldr	r2, [pc, #76]	; (8008008 <TIM_OC4_SetConfig+0xb4>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d003      	beq.n	8007fc8 <TIM_OC4_SetConfig+0x74>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	4a12      	ldr	r2, [pc, #72]	; (800800c <TIM_OC4_SetConfig+0xb8>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d109      	bne.n	8007fdc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007fce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	695b      	ldr	r3, [r3, #20]
 8007fd4:	019b      	lsls	r3, r3, #6
 8007fd6:	697a      	ldr	r2, [r7, #20]
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	697a      	ldr	r2, [r7, #20]
 8007fe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	68fa      	ldr	r2, [r7, #12]
 8007fe6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	685a      	ldr	r2, [r3, #4]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	693a      	ldr	r2, [r7, #16]
 8007ff4:	621a      	str	r2, [r3, #32]
}
 8007ff6:	bf00      	nop
 8007ff8:	371c      	adds	r7, #28
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	40012c00 	.word	0x40012c00
 8008008:	40014000 	.word	0x40014000
 800800c:	40014400 	.word	0x40014400

08008010 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008010:	b480      	push	{r7}
 8008012:	b087      	sub	sp, #28
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6a1b      	ldr	r3, [r3, #32]
 800801e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a1b      	ldr	r3, [r3, #32]
 800802a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800803e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	68fa      	ldr	r2, [r7, #12]
 800804a:	4313      	orrs	r3, r2
 800804c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008054:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	041b      	lsls	r3, r3, #16
 800805c:	693a      	ldr	r2, [r7, #16]
 800805e:	4313      	orrs	r3, r2
 8008060:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	4a13      	ldr	r2, [pc, #76]	; (80080b4 <TIM_OC5_SetConfig+0xa4>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d007      	beq.n	800807a <TIM_OC5_SetConfig+0x6a>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4a12      	ldr	r2, [pc, #72]	; (80080b8 <TIM_OC5_SetConfig+0xa8>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d003      	beq.n	800807a <TIM_OC5_SetConfig+0x6a>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4a11      	ldr	r2, [pc, #68]	; (80080bc <TIM_OC5_SetConfig+0xac>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d109      	bne.n	800808e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008080:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	695b      	ldr	r3, [r3, #20]
 8008086:	021b      	lsls	r3, r3, #8
 8008088:	697a      	ldr	r2, [r7, #20]
 800808a:	4313      	orrs	r3, r2
 800808c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	697a      	ldr	r2, [r7, #20]
 8008092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	68fa      	ldr	r2, [r7, #12]
 8008098:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	685a      	ldr	r2, [r3, #4]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	693a      	ldr	r2, [r7, #16]
 80080a6:	621a      	str	r2, [r3, #32]
}
 80080a8:	bf00      	nop
 80080aa:	371c      	adds	r7, #28
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr
 80080b4:	40012c00 	.word	0x40012c00
 80080b8:	40014000 	.word	0x40014000
 80080bc:	40014400 	.word	0x40014400

080080c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b087      	sub	sp, #28
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6a1b      	ldr	r3, [r3, #32]
 80080ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a1b      	ldr	r3, [r3, #32]
 80080da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80080ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	021b      	lsls	r3, r3, #8
 80080fa:	68fa      	ldr	r2, [r7, #12]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008106:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	051b      	lsls	r3, r3, #20
 800810e:	693a      	ldr	r2, [r7, #16]
 8008110:	4313      	orrs	r3, r2
 8008112:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	4a14      	ldr	r2, [pc, #80]	; (8008168 <TIM_OC6_SetConfig+0xa8>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d007      	beq.n	800812c <TIM_OC6_SetConfig+0x6c>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	4a13      	ldr	r2, [pc, #76]	; (800816c <TIM_OC6_SetConfig+0xac>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d003      	beq.n	800812c <TIM_OC6_SetConfig+0x6c>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	4a12      	ldr	r2, [pc, #72]	; (8008170 <TIM_OC6_SetConfig+0xb0>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d109      	bne.n	8008140 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008132:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	695b      	ldr	r3, [r3, #20]
 8008138:	029b      	lsls	r3, r3, #10
 800813a:	697a      	ldr	r2, [r7, #20]
 800813c:	4313      	orrs	r3, r2
 800813e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	697a      	ldr	r2, [r7, #20]
 8008144:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	68fa      	ldr	r2, [r7, #12]
 800814a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	685a      	ldr	r2, [r3, #4]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	693a      	ldr	r2, [r7, #16]
 8008158:	621a      	str	r2, [r3, #32]
}
 800815a:	bf00      	nop
 800815c:	371c      	adds	r7, #28
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr
 8008166:	bf00      	nop
 8008168:	40012c00 	.word	0x40012c00
 800816c:	40014000 	.word	0x40014000
 8008170:	40014400 	.word	0x40014400

08008174 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008174:	b480      	push	{r7}
 8008176:	b087      	sub	sp, #28
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6a1b      	ldr	r3, [r3, #32]
 8008184:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6a1b      	ldr	r3, [r3, #32]
 800818a:	f023 0201 	bic.w	r2, r3, #1
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	699b      	ldr	r3, [r3, #24]
 8008196:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800819e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	011b      	lsls	r3, r3, #4
 80081a4:	693a      	ldr	r2, [r7, #16]
 80081a6:	4313      	orrs	r3, r2
 80081a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	f023 030a 	bic.w	r3, r3, #10
 80081b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80081b2:	697a      	ldr	r2, [r7, #20]
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	693a      	ldr	r2, [r7, #16]
 80081be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	697a      	ldr	r2, [r7, #20]
 80081c4:	621a      	str	r2, [r3, #32]
}
 80081c6:	bf00      	nop
 80081c8:	371c      	adds	r7, #28
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr

080081d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081d2:	b480      	push	{r7}
 80081d4:	b087      	sub	sp, #28
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	60f8      	str	r0, [r7, #12]
 80081da:	60b9      	str	r1, [r7, #8]
 80081dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	6a1b      	ldr	r3, [r3, #32]
 80081e2:	f023 0210 	bic.w	r2, r3, #16
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6a1b      	ldr	r3, [r3, #32]
 80081f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80081fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	031b      	lsls	r3, r3, #12
 8008202:	697a      	ldr	r2, [r7, #20]
 8008204:	4313      	orrs	r3, r2
 8008206:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800820e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	011b      	lsls	r3, r3, #4
 8008214:	693a      	ldr	r2, [r7, #16]
 8008216:	4313      	orrs	r3, r2
 8008218:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	697a      	ldr	r2, [r7, #20]
 800821e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	693a      	ldr	r2, [r7, #16]
 8008224:	621a      	str	r2, [r3, #32]
}
 8008226:	bf00      	nop
 8008228:	371c      	adds	r7, #28
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr

08008232 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008232:	b480      	push	{r7}
 8008234:	b085      	sub	sp, #20
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
 800823a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008248:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800824a:	683a      	ldr	r2, [r7, #0]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	4313      	orrs	r3, r2
 8008250:	f043 0307 	orr.w	r3, r3, #7
 8008254:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	68fa      	ldr	r2, [r7, #12]
 800825a:	609a      	str	r2, [r3, #8]
}
 800825c:	bf00      	nop
 800825e:	3714      	adds	r7, #20
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr

08008268 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008268:	b480      	push	{r7}
 800826a:	b087      	sub	sp, #28
 800826c:	af00      	add	r7, sp, #0
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	607a      	str	r2, [r7, #4]
 8008274:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008282:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	021a      	lsls	r2, r3, #8
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	431a      	orrs	r2, r3
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	4313      	orrs	r3, r2
 8008290:	697a      	ldr	r2, [r7, #20]
 8008292:	4313      	orrs	r3, r2
 8008294:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	697a      	ldr	r2, [r7, #20]
 800829a:	609a      	str	r2, [r3, #8]
}
 800829c:	bf00      	nop
 800829e:	371c      	adds	r7, #28
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b087      	sub	sp, #28
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	f003 031f 	and.w	r3, r3, #31
 80082ba:	2201      	movs	r2, #1
 80082bc:	fa02 f303 	lsl.w	r3, r2, r3
 80082c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	6a1a      	ldr	r2, [r3, #32]
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	43db      	mvns	r3, r3
 80082ca:	401a      	ands	r2, r3
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6a1a      	ldr	r2, [r3, #32]
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	f003 031f 	and.w	r3, r3, #31
 80082da:	6879      	ldr	r1, [r7, #4]
 80082dc:	fa01 f303 	lsl.w	r3, r1, r3
 80082e0:	431a      	orrs	r2, r3
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	621a      	str	r2, [r3, #32]
}
 80082e6:	bf00      	nop
 80082e8:	371c      	adds	r7, #28
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr
	...

080082f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b085      	sub	sp, #20
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008304:	2b01      	cmp	r3, #1
 8008306:	d101      	bne.n	800830c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008308:	2302      	movs	r3, #2
 800830a:	e04f      	b.n	80083ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2202      	movs	r2, #2
 8008318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a21      	ldr	r2, [pc, #132]	; (80083b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d108      	bne.n	8008348 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800833c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	4313      	orrs	r3, r2
 8008346:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800834e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	68fa      	ldr	r2, [r7, #12]
 8008356:	4313      	orrs	r3, r2
 8008358:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	68fa      	ldr	r2, [r7, #12]
 8008360:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a14      	ldr	r2, [pc, #80]	; (80083b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d009      	beq.n	8008380 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008374:	d004      	beq.n	8008380 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a10      	ldr	r2, [pc, #64]	; (80083bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d10c      	bne.n	800839a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008386:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	68ba      	ldr	r2, [r7, #8]
 800838e:	4313      	orrs	r3, r2
 8008390:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	68ba      	ldr	r2, [r7, #8]
 8008398:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2201      	movs	r2, #1
 800839e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083aa:	2300      	movs	r3, #0
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3714      	adds	r7, #20
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr
 80083b8:	40012c00 	.word	0x40012c00
 80083bc:	40014000 	.word	0x40014000

080083c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b085      	sub	sp, #20
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80083ca:	2300      	movs	r3, #0
 80083cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d101      	bne.n	80083dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80083d8:	2302      	movs	r3, #2
 80083da:	e060      	b.n	800849e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	68db      	ldr	r3, [r3, #12]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	4313      	orrs	r3, r2
 80083fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	4313      	orrs	r3, r2
 800840c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4313      	orrs	r3, r2
 800841a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	4313      	orrs	r3, r2
 8008428:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	695b      	ldr	r3, [r3, #20]
 8008434:	4313      	orrs	r3, r2
 8008436:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008442:	4313      	orrs	r3, r2
 8008444:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	699b      	ldr	r3, [r3, #24]
 8008450:	041b      	lsls	r3, r3, #16
 8008452:	4313      	orrs	r3, r2
 8008454:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a14      	ldr	r2, [pc, #80]	; (80084ac <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d115      	bne.n	800848c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846a:	051b      	lsls	r3, r3, #20
 800846c:	4313      	orrs	r3, r2
 800846e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	69db      	ldr	r3, [r3, #28]
 800847a:	4313      	orrs	r3, r2
 800847c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	6a1b      	ldr	r3, [r3, #32]
 8008488:	4313      	orrs	r3, r2
 800848a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	68fa      	ldr	r2, [r7, #12]
 8008492:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3714      	adds	r7, #20
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr
 80084aa:	bf00      	nop
 80084ac:	40012c00 	.word	0x40012c00

080084b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d101      	bne.n	80084c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80084be:	2301      	movs	r3, #1
 80084c0:	e040      	b.n	8008544 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d106      	bne.n	80084d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 f873 	bl	80085be <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2224      	movs	r2, #36	; 0x24
 80084dc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f022 0201 	bic.w	r2, r2, #1
 80084ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 fd06 	bl	8008f00 <UART_SetConfig>
 80084f4:	4603      	mov	r3, r0
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d101      	bne.n	80084fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80084fa:	2301      	movs	r3, #1
 80084fc:	e022      	b.n	8008544 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008502:	2b00      	cmp	r3, #0
 8008504:	d002      	beq.n	800850c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 ff54 	bl	80093b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	685a      	ldr	r2, [r3, #4]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800851a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	689a      	ldr	r2, [r3, #8]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800852a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f042 0201 	orr.w	r2, r2, #1
 800853a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 ffdb 	bl	80094f8 <UART_CheckIdleState>
 8008542:	4603      	mov	r3, r0
}
 8008544:	4618      	mov	r0, r3
 8008546:	3708      	adds	r7, #8
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d101      	bne.n	800855e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	e02b      	b.n	80085b6 <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2224      	movs	r2, #36	; 0x24
 8008562:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f022 0201 	bic.w	r2, r2, #1
 8008572:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2200      	movs	r2, #0
 800857a:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	2200      	movs	r2, #0
 8008582:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2200      	movs	r2, #0
 800858a:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 f820 	bl	80085d2 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80085b4:	2300      	movs	r3, #0
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3708      	adds	r7, #8
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}

080085be <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80085be:	b480      	push	{r7}
 80085c0:	b083      	sub	sp, #12
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80085c6:	bf00      	nop
 80085c8:	370c      	adds	r7, #12
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr

080085d2 <HAL_UART_MspDeInit>:
  * @brief DeInitialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 80085d2:	b480      	push	{r7}
 80085d4:	b083      	sub	sp, #12
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 80085da:	bf00      	nop
 80085dc:	370c      	adds	r7, #12
 80085de:	46bd      	mov	sp, r7
 80085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e4:	4770      	bx	lr

080085e6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b08a      	sub	sp, #40	; 0x28
 80085ea:	af02      	add	r7, sp, #8
 80085ec:	60f8      	str	r0, [r7, #12]
 80085ee:	60b9      	str	r1, [r7, #8]
 80085f0:	603b      	str	r3, [r7, #0]
 80085f2:	4613      	mov	r3, r2
 80085f4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085fa:	2b20      	cmp	r3, #32
 80085fc:	f040 80bf 	bne.w	800877e <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d002      	beq.n	800860c <HAL_UART_Receive+0x26>
 8008606:	88fb      	ldrh	r3, [r7, #6]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d101      	bne.n	8008610 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	e0b7      	b.n	8008780 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008616:	2b01      	cmp	r3, #1
 8008618:	d101      	bne.n	800861e <HAL_UART_Receive+0x38>
 800861a:	2302      	movs	r3, #2
 800861c:	e0b0      	b.n	8008780 <HAL_UART_Receive+0x19a>
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2201      	movs	r2, #1
 8008622:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2200      	movs	r2, #0
 800862a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2222      	movs	r2, #34	; 0x22
 8008632:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2200      	movs	r2, #0
 8008638:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800863a:	f7fc f803 	bl	8004644 <HAL_GetTick>
 800863e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	88fa      	ldrh	r2, [r7, #6]
 8008644:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	88fa      	ldrh	r2, [r7, #6]
 800864c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008658:	d10e      	bne.n	8008678 <HAL_UART_Receive+0x92>
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	691b      	ldr	r3, [r3, #16]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d105      	bne.n	800866e <HAL_UART_Receive+0x88>
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008668:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800866c:	e02d      	b.n	80086ca <HAL_UART_Receive+0xe4>
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	22ff      	movs	r2, #255	; 0xff
 8008672:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008676:	e028      	b.n	80086ca <HAL_UART_Receive+0xe4>
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d10d      	bne.n	800869c <HAL_UART_Receive+0xb6>
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	691b      	ldr	r3, [r3, #16]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d104      	bne.n	8008692 <HAL_UART_Receive+0xac>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	22ff      	movs	r2, #255	; 0xff
 800868c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008690:	e01b      	b.n	80086ca <HAL_UART_Receive+0xe4>
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	227f      	movs	r2, #127	; 0x7f
 8008696:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800869a:	e016      	b.n	80086ca <HAL_UART_Receive+0xe4>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086a4:	d10d      	bne.n	80086c2 <HAL_UART_Receive+0xdc>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d104      	bne.n	80086b8 <HAL_UART_Receive+0xd2>
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	227f      	movs	r2, #127	; 0x7f
 80086b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80086b6:	e008      	b.n	80086ca <HAL_UART_Receive+0xe4>
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	223f      	movs	r2, #63	; 0x3f
 80086bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80086c0:	e003      	b.n	80086ca <HAL_UART_Receive+0xe4>
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80086d0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086da:	d108      	bne.n	80086ee <HAL_UART_Receive+0x108>
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	691b      	ldr	r3, [r3, #16]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d104      	bne.n	80086ee <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80086e4:	2300      	movs	r3, #0
 80086e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	61bb      	str	r3, [r7, #24]
 80086ec:	e003      	b.n	80086f6 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80086f2:	2300      	movs	r3, #0
 80086f4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2200      	movs	r2, #0
 80086fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80086fe:	e033      	b.n	8008768 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	9300      	str	r3, [sp, #0]
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	2200      	movs	r2, #0
 8008708:	2120      	movs	r1, #32
 800870a:	68f8      	ldr	r0, [r7, #12]
 800870c:	f000 ff3d 	bl	800958a <UART_WaitOnFlagUntilTimeout>
 8008710:	4603      	mov	r3, r0
 8008712:	2b00      	cmp	r3, #0
 8008714:	d001      	beq.n	800871a <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8008716:	2303      	movs	r3, #3
 8008718:	e032      	b.n	8008780 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800871a:	69fb      	ldr	r3, [r7, #28]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d10c      	bne.n	800873a <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008726:	b29a      	uxth	r2, r3
 8008728:	8a7b      	ldrh	r3, [r7, #18]
 800872a:	4013      	ands	r3, r2
 800872c:	b29a      	uxth	r2, r3
 800872e:	69bb      	ldr	r3, [r7, #24]
 8008730:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	3302      	adds	r3, #2
 8008736:	61bb      	str	r3, [r7, #24]
 8008738:	e00d      	b.n	8008756 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008740:	b29b      	uxth	r3, r3
 8008742:	b2da      	uxtb	r2, r3
 8008744:	8a7b      	ldrh	r3, [r7, #18]
 8008746:	b2db      	uxtb	r3, r3
 8008748:	4013      	ands	r3, r2
 800874a:	b2da      	uxtb	r2, r3
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008750:	69fb      	ldr	r3, [r7, #28]
 8008752:	3301      	adds	r3, #1
 8008754:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800875c:	b29b      	uxth	r3, r3
 800875e:	3b01      	subs	r3, #1
 8008760:	b29a      	uxth	r2, r3
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800876e:	b29b      	uxth	r3, r3
 8008770:	2b00      	cmp	r3, #0
 8008772:	d1c5      	bne.n	8008700 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2220      	movs	r2, #32
 8008778:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800877a:	2300      	movs	r3, #0
 800877c:	e000      	b.n	8008780 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 800877e:	2302      	movs	r3, #2
  }
}
 8008780:	4618      	mov	r0, r3
 8008782:	3720      	adds	r7, #32
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008788:	b480      	push	{r7}
 800878a:	b08b      	sub	sp, #44	; 0x2c
 800878c:	af00      	add	r7, sp, #0
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	4613      	mov	r3, r2
 8008794:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800879a:	2b20      	cmp	r3, #32
 800879c:	d156      	bne.n	800884c <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d002      	beq.n	80087aa <HAL_UART_Transmit_IT+0x22>
 80087a4:	88fb      	ldrh	r3, [r7, #6]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d101      	bne.n	80087ae <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e04f      	b.n	800884e <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d101      	bne.n	80087bc <HAL_UART_Transmit_IT+0x34>
 80087b8:	2302      	movs	r3, #2
 80087ba:	e048      	b.n	800884e <HAL_UART_Transmit_IT+0xc6>
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	68ba      	ldr	r2, [r7, #8]
 80087c8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	88fa      	ldrh	r2, [r7, #6]
 80087ce:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	88fa      	ldrh	r2, [r7, #6]
 80087d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2200      	movs	r2, #0
 80087de:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2221      	movs	r2, #33	; 0x21
 80087ec:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087f6:	d107      	bne.n	8008808 <HAL_UART_Transmit_IT+0x80>
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	691b      	ldr	r3, [r3, #16]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d103      	bne.n	8008808 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	4a16      	ldr	r2, [pc, #88]	; (800885c <HAL_UART_Transmit_IT+0xd4>)
 8008804:	669a      	str	r2, [r3, #104]	; 0x68
 8008806:	e002      	b.n	800880e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	4a15      	ldr	r2, [pc, #84]	; (8008860 <HAL_UART_Transmit_IT+0xd8>)
 800880c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2200      	movs	r2, #0
 8008812:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	e853 3f00 	ldrex	r3, [r3]
 8008822:	613b      	str	r3, [r7, #16]
   return(result);
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800882a:	627b      	str	r3, [r7, #36]	; 0x24
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	461a      	mov	r2, r3
 8008832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008834:	623b      	str	r3, [r7, #32]
 8008836:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008838:	69f9      	ldr	r1, [r7, #28]
 800883a:	6a3a      	ldr	r2, [r7, #32]
 800883c:	e841 2300 	strex	r3, r2, [r1]
 8008840:	61bb      	str	r3, [r7, #24]
   return(result);
 8008842:	69bb      	ldr	r3, [r7, #24]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d1e6      	bne.n	8008816 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8008848:	2300      	movs	r3, #0
 800884a:	e000      	b.n	800884e <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800884c:	2302      	movs	r3, #2
  }
}
 800884e:	4618      	mov	r0, r3
 8008850:	372c      	adds	r7, #44	; 0x2c
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr
 800885a:	bf00      	nop
 800885c:	08009a53 	.word	0x08009a53
 8008860:	0800999b 	.word	0x0800999b

08008864 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b08a      	sub	sp, #40	; 0x28
 8008868:	af00      	add	r7, sp, #0
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	60b9      	str	r1, [r7, #8]
 800886e:	4613      	mov	r3, r2
 8008870:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008876:	2b20      	cmp	r3, #32
 8008878:	d142      	bne.n	8008900 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d002      	beq.n	8008886 <HAL_UART_Receive_IT+0x22>
 8008880:	88fb      	ldrh	r3, [r7, #6]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d101      	bne.n	800888a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	e03b      	b.n	8008902 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008890:	2b01      	cmp	r3, #1
 8008892:	d101      	bne.n	8008898 <HAL_UART_Receive_IT+0x34>
 8008894:	2302      	movs	r3, #2
 8008896:	e034      	b.n	8008902 <HAL_UART_Receive_IT+0x9e>
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2200      	movs	r2, #0
 80088a4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a18      	ldr	r2, [pc, #96]	; (800890c <HAL_UART_Receive_IT+0xa8>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d01f      	beq.n	80088f0 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d018      	beq.n	80088f0 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	e853 3f00 	ldrex	r3, [r3]
 80088ca:	613b      	str	r3, [r7, #16]
   return(result);
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80088d2:	627b      	str	r3, [r7, #36]	; 0x24
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	461a      	mov	r2, r3
 80088da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088dc:	623b      	str	r3, [r7, #32]
 80088de:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e0:	69f9      	ldr	r1, [r7, #28]
 80088e2:	6a3a      	ldr	r2, [r7, #32]
 80088e4:	e841 2300 	strex	r3, r2, [r1]
 80088e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80088ea:	69bb      	ldr	r3, [r7, #24]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d1e6      	bne.n	80088be <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80088f0:	88fb      	ldrh	r3, [r7, #6]
 80088f2:	461a      	mov	r2, r3
 80088f4:	68b9      	ldr	r1, [r7, #8]
 80088f6:	68f8      	ldr	r0, [r7, #12]
 80088f8:	f000 ff0c 	bl	8009714 <UART_Start_Receive_IT>
 80088fc:	4603      	mov	r3, r0
 80088fe:	e000      	b.n	8008902 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008900:	2302      	movs	r3, #2
  }
}
 8008902:	4618      	mov	r0, r3
 8008904:	3728      	adds	r7, #40	; 0x28
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
 800890a:	bf00      	nop
 800890c:	40008000 	.word	0x40008000

08008910 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b0ba      	sub	sp, #232	; 0xe8
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	69db      	ldr	r3, [r3, #28]
 800891e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008936:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800893a:	f640 030f 	movw	r3, #2063	; 0x80f
 800893e:	4013      	ands	r3, r2
 8008940:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008944:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008948:	2b00      	cmp	r3, #0
 800894a:	d115      	bne.n	8008978 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800894c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008950:	f003 0320 	and.w	r3, r3, #32
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00f      	beq.n	8008978 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800895c:	f003 0320 	and.w	r3, r3, #32
 8008960:	2b00      	cmp	r3, #0
 8008962:	d009      	beq.n	8008978 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008968:	2b00      	cmp	r3, #0
 800896a:	f000 82a6 	beq.w	8008eba <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	4798      	blx	r3
      }
      return;
 8008976:	e2a0      	b.n	8008eba <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008978:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800897c:	2b00      	cmp	r3, #0
 800897e:	f000 8117 	beq.w	8008bb0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008982:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008986:	f003 0301 	and.w	r3, r3, #1
 800898a:	2b00      	cmp	r3, #0
 800898c:	d106      	bne.n	800899c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800898e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008992:	4b85      	ldr	r3, [pc, #532]	; (8008ba8 <HAL_UART_IRQHandler+0x298>)
 8008994:	4013      	ands	r3, r2
 8008996:	2b00      	cmp	r3, #0
 8008998:	f000 810a 	beq.w	8008bb0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800899c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089a0:	f003 0301 	and.w	r3, r3, #1
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d011      	beq.n	80089cc <HAL_UART_IRQHandler+0xbc>
 80089a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d00b      	beq.n	80089cc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2201      	movs	r2, #1
 80089ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089c2:	f043 0201 	orr.w	r2, r3, #1
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089d0:	f003 0302 	and.w	r3, r3, #2
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d011      	beq.n	80089fc <HAL_UART_IRQHandler+0xec>
 80089d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089dc:	f003 0301 	and.w	r3, r3, #1
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d00b      	beq.n	80089fc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2202      	movs	r2, #2
 80089ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089f2:	f043 0204 	orr.w	r2, r3, #4
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a00:	f003 0304 	and.w	r3, r3, #4
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d011      	beq.n	8008a2c <HAL_UART_IRQHandler+0x11c>
 8008a08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a0c:	f003 0301 	and.w	r3, r3, #1
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d00b      	beq.n	8008a2c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	2204      	movs	r2, #4
 8008a1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a22:	f043 0202 	orr.w	r2, r3, #2
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a30:	f003 0308 	and.w	r3, r3, #8
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d017      	beq.n	8008a68 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a3c:	f003 0320 	and.w	r3, r3, #32
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d105      	bne.n	8008a50 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008a44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a48:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d00b      	beq.n	8008a68 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	2208      	movs	r2, #8
 8008a56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a5e:	f043 0208 	orr.w	r2, r3, #8
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d012      	beq.n	8008a9a <HAL_UART_IRQHandler+0x18a>
 8008a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d00c      	beq.n	8008a9a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a90:	f043 0220 	orr.w	r2, r3, #32
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	f000 820c 	beq.w	8008ebe <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aaa:	f003 0320 	and.w	r3, r3, #32
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d00d      	beq.n	8008ace <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008ab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ab6:	f003 0320 	and.w	r3, r3, #32
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d007      	beq.n	8008ace <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d003      	beq.n	8008ace <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ad4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ae2:	2b40      	cmp	r3, #64	; 0x40
 8008ae4:	d005      	beq.n	8008af2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008ae6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008aea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d04f      	beq.n	8008b92 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 fed8 	bl	80098a8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b02:	2b40      	cmp	r3, #64	; 0x40
 8008b04:	d141      	bne.n	8008b8a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	3308      	adds	r3, #8
 8008b0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b14:	e853 3f00 	ldrex	r3, [r3]
 8008b18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008b1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008b20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	3308      	adds	r3, #8
 8008b2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008b32:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008b36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008b3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008b42:	e841 2300 	strex	r3, r2, [r1]
 8008b46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008b4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d1d9      	bne.n	8008b06 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d013      	beq.n	8008b82 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b5e:	4a13      	ldr	r2, [pc, #76]	; (8008bac <HAL_UART_IRQHandler+0x29c>)
 8008b60:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b66:	4618      	mov	r0, r3
 8008b68:	f7fc f862 	bl	8004c30 <HAL_DMA_Abort_IT>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d017      	beq.n	8008ba2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008b7c:	4610      	mov	r0, r2
 8008b7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b80:	e00f      	b.n	8008ba2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 f9a6 	bl	8008ed4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b88:	e00b      	b.n	8008ba2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 f9a2 	bl	8008ed4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b90:	e007      	b.n	8008ba2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 f99e 	bl	8008ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008ba0:	e18d      	b.n	8008ebe <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ba2:	bf00      	nop
    return;
 8008ba4:	e18b      	b.n	8008ebe <HAL_UART_IRQHandler+0x5ae>
 8008ba6:	bf00      	nop
 8008ba8:	04000120 	.word	0x04000120
 8008bac:	0800996f 	.word	0x0800996f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	f040 8146 	bne.w	8008e46 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bbe:	f003 0310 	and.w	r3, r3, #16
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	f000 813f 	beq.w	8008e46 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bcc:	f003 0310 	and.w	r3, r3, #16
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	f000 8138 	beq.w	8008e46 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2210      	movs	r2, #16
 8008bdc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	689b      	ldr	r3, [r3, #8]
 8008be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008be8:	2b40      	cmp	r3, #64	; 0x40
 8008bea:	f040 80b4 	bne.w	8008d56 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008bfa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	f000 815f 	beq.w	8008ec2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008c0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	f080 8157 	bcs.w	8008ec2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008c1a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f003 0320 	and.w	r3, r3, #32
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	f040 8085 	bne.w	8008d3a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008c3c:	e853 3f00 	ldrex	r3, [r3]
 8008c40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008c44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	461a      	mov	r2, r3
 8008c56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008c5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008c5e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c62:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008c66:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008c6a:	e841 2300 	strex	r3, r2, [r1]
 8008c6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008c72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d1da      	bne.n	8008c30 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	3308      	adds	r3, #8
 8008c80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c84:	e853 3f00 	ldrex	r3, [r3]
 8008c88:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008c8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c8c:	f023 0301 	bic.w	r3, r3, #1
 8008c90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	3308      	adds	r3, #8
 8008c9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008c9e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008ca2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008ca6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008caa:	e841 2300 	strex	r3, r2, [r1]
 8008cae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008cb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d1e1      	bne.n	8008c7a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	3308      	adds	r3, #8
 8008cbc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008cc0:	e853 3f00 	ldrex	r3, [r3]
 8008cc4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008cc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008cc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ccc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	3308      	adds	r3, #8
 8008cd6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008cda:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008cdc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cde:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008ce0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008ce2:	e841 2300 	strex	r3, r2, [r1]
 8008ce6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008ce8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d1e3      	bne.n	8008cb6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2220      	movs	r2, #32
 8008cf2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d02:	e853 3f00 	ldrex	r3, [r3]
 8008d06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d0a:	f023 0310 	bic.w	r3, r3, #16
 8008d0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	461a      	mov	r2, r3
 8008d18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8008d1e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008d22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d24:	e841 2300 	strex	r3, r2, [r1]
 8008d28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008d2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d1e4      	bne.n	8008cfa <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d34:	4618      	mov	r0, r3
 8008d36:	f7fb ff3d 	bl	8004bb4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	1ad3      	subs	r3, r2, r3
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 f8ca 	bl	8008ee8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008d54:	e0b5      	b.n	8008ec2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	1ad3      	subs	r3, r2, r3
 8008d66:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	f000 80a7 	beq.w	8008ec6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8008d78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f000 80a2 	beq.w	8008ec6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d8a:	e853 3f00 	ldrex	r3, [r3]
 8008d8e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	461a      	mov	r2, r3
 8008da0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008da4:	647b      	str	r3, [r7, #68]	; 0x44
 8008da6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008daa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008dac:	e841 2300 	strex	r3, r2, [r1]
 8008db0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d1e4      	bne.n	8008d82 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	3308      	adds	r3, #8
 8008dbe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc2:	e853 3f00 	ldrex	r3, [r3]
 8008dc6:	623b      	str	r3, [r7, #32]
   return(result);
 8008dc8:	6a3b      	ldr	r3, [r7, #32]
 8008dca:	f023 0301 	bic.w	r3, r3, #1
 8008dce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	3308      	adds	r3, #8
 8008dd8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008ddc:	633a      	str	r2, [r7, #48]	; 0x30
 8008dde:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008de2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008de4:	e841 2300 	strex	r3, r2, [r1]
 8008de8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d1e3      	bne.n	8008db8 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2220      	movs	r2, #32
 8008df4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	e853 3f00 	ldrex	r3, [r3]
 8008e0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f023 0310 	bic.w	r3, r3, #16
 8008e16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	461a      	mov	r2, r3
 8008e20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008e24:	61fb      	str	r3, [r7, #28]
 8008e26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e28:	69b9      	ldr	r1, [r7, #24]
 8008e2a:	69fa      	ldr	r2, [r7, #28]
 8008e2c:	e841 2300 	strex	r3, r2, [r1]
 8008e30:	617b      	str	r3, [r7, #20]
   return(result);
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d1e4      	bne.n	8008e02 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008e38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 f852 	bl	8008ee8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008e44:	e03f      	b.n	8008ec6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d00e      	beq.n	8008e70 <HAL_UART_IRQHandler+0x560>
 8008e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d008      	beq.n	8008e70 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008e66:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 ffdc 	bl	8009e26 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008e6e:	e02d      	b.n	8008ecc <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d00e      	beq.n	8008e9a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d008      	beq.n	8008e9a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d01c      	beq.n	8008eca <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	4798      	blx	r3
    }
    return;
 8008e98:	e017      	b.n	8008eca <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d012      	beq.n	8008ecc <HAL_UART_IRQHandler+0x5bc>
 8008ea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d00c      	beq.n	8008ecc <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 fe2d 	bl	8009b12 <UART_EndTransmit_IT>
    return;
 8008eb8:	e008      	b.n	8008ecc <HAL_UART_IRQHandler+0x5bc>
      return;
 8008eba:	bf00      	nop
 8008ebc:	e006      	b.n	8008ecc <HAL_UART_IRQHandler+0x5bc>
    return;
 8008ebe:	bf00      	nop
 8008ec0:	e004      	b.n	8008ecc <HAL_UART_IRQHandler+0x5bc>
      return;
 8008ec2:	bf00      	nop
 8008ec4:	e002      	b.n	8008ecc <HAL_UART_IRQHandler+0x5bc>
      return;
 8008ec6:	bf00      	nop
 8008ec8:	e000      	b.n	8008ecc <HAL_UART_IRQHandler+0x5bc>
    return;
 8008eca:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008ecc:	37e8      	adds	r7, #232	; 0xe8
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
 8008ed2:	bf00      	nop

08008ed4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008edc:	bf00      	nop
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ef4:	bf00      	nop
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f04:	b08a      	sub	sp, #40	; 0x28
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	689a      	ldr	r2, [r3, #8]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	691b      	ldr	r3, [r3, #16]
 8008f18:	431a      	orrs	r2, r3
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	695b      	ldr	r3, [r3, #20]
 8008f1e:	431a      	orrs	r2, r3
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	69db      	ldr	r3, [r3, #28]
 8008f24:	4313      	orrs	r3, r2
 8008f26:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	681a      	ldr	r2, [r3, #0]
 8008f2e:	4b9e      	ldr	r3, [pc, #632]	; (80091a8 <UART_SetConfig+0x2a8>)
 8008f30:	4013      	ands	r3, r2
 8008f32:	68fa      	ldr	r2, [r7, #12]
 8008f34:	6812      	ldr	r2, [r2, #0]
 8008f36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f38:	430b      	orrs	r3, r1
 8008f3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	68da      	ldr	r2, [r3, #12]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	430a      	orrs	r2, r1
 8008f50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	699b      	ldr	r3, [r3, #24]
 8008f56:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a93      	ldr	r2, [pc, #588]	; (80091ac <UART_SetConfig+0x2ac>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d004      	beq.n	8008f6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	6a1b      	ldr	r3, [r3, #32]
 8008f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f7c:	430a      	orrs	r2, r1
 8008f7e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a8a      	ldr	r2, [pc, #552]	; (80091b0 <UART_SetConfig+0x2b0>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d126      	bne.n	8008fd8 <UART_SetConfig+0xd8>
 8008f8a:	4b8a      	ldr	r3, [pc, #552]	; (80091b4 <UART_SetConfig+0x2b4>)
 8008f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f90:	f003 0303 	and.w	r3, r3, #3
 8008f94:	2b03      	cmp	r3, #3
 8008f96:	d81b      	bhi.n	8008fd0 <UART_SetConfig+0xd0>
 8008f98:	a201      	add	r2, pc, #4	; (adr r2, 8008fa0 <UART_SetConfig+0xa0>)
 8008f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f9e:	bf00      	nop
 8008fa0:	08008fb1 	.word	0x08008fb1
 8008fa4:	08008fc1 	.word	0x08008fc1
 8008fa8:	08008fb9 	.word	0x08008fb9
 8008fac:	08008fc9 	.word	0x08008fc9
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008fb6:	e0ab      	b.n	8009110 <UART_SetConfig+0x210>
 8008fb8:	2302      	movs	r3, #2
 8008fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008fbe:	e0a7      	b.n	8009110 <UART_SetConfig+0x210>
 8008fc0:	2304      	movs	r3, #4
 8008fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008fc6:	e0a3      	b.n	8009110 <UART_SetConfig+0x210>
 8008fc8:	2308      	movs	r3, #8
 8008fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008fce:	e09f      	b.n	8009110 <UART_SetConfig+0x210>
 8008fd0:	2310      	movs	r3, #16
 8008fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008fd6:	e09b      	b.n	8009110 <UART_SetConfig+0x210>
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a76      	ldr	r2, [pc, #472]	; (80091b8 <UART_SetConfig+0x2b8>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d138      	bne.n	8009054 <UART_SetConfig+0x154>
 8008fe2:	4b74      	ldr	r3, [pc, #464]	; (80091b4 <UART_SetConfig+0x2b4>)
 8008fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fe8:	f003 030c 	and.w	r3, r3, #12
 8008fec:	2b0c      	cmp	r3, #12
 8008fee:	d82d      	bhi.n	800904c <UART_SetConfig+0x14c>
 8008ff0:	a201      	add	r2, pc, #4	; (adr r2, 8008ff8 <UART_SetConfig+0xf8>)
 8008ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff6:	bf00      	nop
 8008ff8:	0800902d 	.word	0x0800902d
 8008ffc:	0800904d 	.word	0x0800904d
 8009000:	0800904d 	.word	0x0800904d
 8009004:	0800904d 	.word	0x0800904d
 8009008:	0800903d 	.word	0x0800903d
 800900c:	0800904d 	.word	0x0800904d
 8009010:	0800904d 	.word	0x0800904d
 8009014:	0800904d 	.word	0x0800904d
 8009018:	08009035 	.word	0x08009035
 800901c:	0800904d 	.word	0x0800904d
 8009020:	0800904d 	.word	0x0800904d
 8009024:	0800904d 	.word	0x0800904d
 8009028:	08009045 	.word	0x08009045
 800902c:	2300      	movs	r3, #0
 800902e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009032:	e06d      	b.n	8009110 <UART_SetConfig+0x210>
 8009034:	2302      	movs	r3, #2
 8009036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800903a:	e069      	b.n	8009110 <UART_SetConfig+0x210>
 800903c:	2304      	movs	r3, #4
 800903e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009042:	e065      	b.n	8009110 <UART_SetConfig+0x210>
 8009044:	2308      	movs	r3, #8
 8009046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800904a:	e061      	b.n	8009110 <UART_SetConfig+0x210>
 800904c:	2310      	movs	r3, #16
 800904e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009052:	e05d      	b.n	8009110 <UART_SetConfig+0x210>
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a58      	ldr	r2, [pc, #352]	; (80091bc <UART_SetConfig+0x2bc>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d125      	bne.n	80090aa <UART_SetConfig+0x1aa>
 800905e:	4b55      	ldr	r3, [pc, #340]	; (80091b4 <UART_SetConfig+0x2b4>)
 8009060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009064:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009068:	2b30      	cmp	r3, #48	; 0x30
 800906a:	d016      	beq.n	800909a <UART_SetConfig+0x19a>
 800906c:	2b30      	cmp	r3, #48	; 0x30
 800906e:	d818      	bhi.n	80090a2 <UART_SetConfig+0x1a2>
 8009070:	2b20      	cmp	r3, #32
 8009072:	d00a      	beq.n	800908a <UART_SetConfig+0x18a>
 8009074:	2b20      	cmp	r3, #32
 8009076:	d814      	bhi.n	80090a2 <UART_SetConfig+0x1a2>
 8009078:	2b00      	cmp	r3, #0
 800907a:	d002      	beq.n	8009082 <UART_SetConfig+0x182>
 800907c:	2b10      	cmp	r3, #16
 800907e:	d008      	beq.n	8009092 <UART_SetConfig+0x192>
 8009080:	e00f      	b.n	80090a2 <UART_SetConfig+0x1a2>
 8009082:	2300      	movs	r3, #0
 8009084:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009088:	e042      	b.n	8009110 <UART_SetConfig+0x210>
 800908a:	2302      	movs	r3, #2
 800908c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009090:	e03e      	b.n	8009110 <UART_SetConfig+0x210>
 8009092:	2304      	movs	r3, #4
 8009094:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009098:	e03a      	b.n	8009110 <UART_SetConfig+0x210>
 800909a:	2308      	movs	r3, #8
 800909c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090a0:	e036      	b.n	8009110 <UART_SetConfig+0x210>
 80090a2:	2310      	movs	r3, #16
 80090a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090a8:	e032      	b.n	8009110 <UART_SetConfig+0x210>
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a3f      	ldr	r2, [pc, #252]	; (80091ac <UART_SetConfig+0x2ac>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d12a      	bne.n	800910a <UART_SetConfig+0x20a>
 80090b4:	4b3f      	ldr	r3, [pc, #252]	; (80091b4 <UART_SetConfig+0x2b4>)
 80090b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090ba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80090be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80090c2:	d01a      	beq.n	80090fa <UART_SetConfig+0x1fa>
 80090c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80090c8:	d81b      	bhi.n	8009102 <UART_SetConfig+0x202>
 80090ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090ce:	d00c      	beq.n	80090ea <UART_SetConfig+0x1ea>
 80090d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090d4:	d815      	bhi.n	8009102 <UART_SetConfig+0x202>
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d003      	beq.n	80090e2 <UART_SetConfig+0x1e2>
 80090da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090de:	d008      	beq.n	80090f2 <UART_SetConfig+0x1f2>
 80090e0:	e00f      	b.n	8009102 <UART_SetConfig+0x202>
 80090e2:	2300      	movs	r3, #0
 80090e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090e8:	e012      	b.n	8009110 <UART_SetConfig+0x210>
 80090ea:	2302      	movs	r3, #2
 80090ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090f0:	e00e      	b.n	8009110 <UART_SetConfig+0x210>
 80090f2:	2304      	movs	r3, #4
 80090f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090f8:	e00a      	b.n	8009110 <UART_SetConfig+0x210>
 80090fa:	2308      	movs	r3, #8
 80090fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009100:	e006      	b.n	8009110 <UART_SetConfig+0x210>
 8009102:	2310      	movs	r3, #16
 8009104:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009108:	e002      	b.n	8009110 <UART_SetConfig+0x210>
 800910a:	2310      	movs	r3, #16
 800910c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a25      	ldr	r2, [pc, #148]	; (80091ac <UART_SetConfig+0x2ac>)
 8009116:	4293      	cmp	r3, r2
 8009118:	f040 808a 	bne.w	8009230 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800911c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009120:	2b08      	cmp	r3, #8
 8009122:	d824      	bhi.n	800916e <UART_SetConfig+0x26e>
 8009124:	a201      	add	r2, pc, #4	; (adr r2, 800912c <UART_SetConfig+0x22c>)
 8009126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800912a:	bf00      	nop
 800912c:	08009151 	.word	0x08009151
 8009130:	0800916f 	.word	0x0800916f
 8009134:	08009159 	.word	0x08009159
 8009138:	0800916f 	.word	0x0800916f
 800913c:	0800915f 	.word	0x0800915f
 8009140:	0800916f 	.word	0x0800916f
 8009144:	0800916f 	.word	0x0800916f
 8009148:	0800916f 	.word	0x0800916f
 800914c:	08009167 	.word	0x08009167
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009150:	f7fd f988 	bl	8006464 <HAL_RCC_GetPCLK1Freq>
 8009154:	61f8      	str	r0, [r7, #28]
        break;
 8009156:	e010      	b.n	800917a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009158:	4b19      	ldr	r3, [pc, #100]	; (80091c0 <UART_SetConfig+0x2c0>)
 800915a:	61fb      	str	r3, [r7, #28]
        break;
 800915c:	e00d      	b.n	800917a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800915e:	f7fd f8e9 	bl	8006334 <HAL_RCC_GetSysClockFreq>
 8009162:	61f8      	str	r0, [r7, #28]
        break;
 8009164:	e009      	b.n	800917a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009166:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800916a:	61fb      	str	r3, [r7, #28]
        break;
 800916c:	e005      	b.n	800917a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800916e:	2300      	movs	r3, #0
 8009170:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009172:	2301      	movs	r3, #1
 8009174:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009178:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800917a:	69fb      	ldr	r3, [r7, #28]
 800917c:	2b00      	cmp	r3, #0
 800917e:	f000 8109 	beq.w	8009394 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	685a      	ldr	r2, [r3, #4]
 8009186:	4613      	mov	r3, r2
 8009188:	005b      	lsls	r3, r3, #1
 800918a:	4413      	add	r3, r2
 800918c:	69fa      	ldr	r2, [r7, #28]
 800918e:	429a      	cmp	r2, r3
 8009190:	d305      	bcc.n	800919e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009198:	69fa      	ldr	r2, [r7, #28]
 800919a:	429a      	cmp	r2, r3
 800919c:	d912      	bls.n	80091c4 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800919e:	2301      	movs	r3, #1
 80091a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80091a4:	e0f6      	b.n	8009394 <UART_SetConfig+0x494>
 80091a6:	bf00      	nop
 80091a8:	efff69f3 	.word	0xefff69f3
 80091ac:	40008000 	.word	0x40008000
 80091b0:	40013800 	.word	0x40013800
 80091b4:	40021000 	.word	0x40021000
 80091b8:	40004400 	.word	0x40004400
 80091bc:	40004800 	.word	0x40004800
 80091c0:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80091c4:	69fb      	ldr	r3, [r7, #28]
 80091c6:	2200      	movs	r2, #0
 80091c8:	461c      	mov	r4, r3
 80091ca:	4615      	mov	r5, r2
 80091cc:	f04f 0200 	mov.w	r2, #0
 80091d0:	f04f 0300 	mov.w	r3, #0
 80091d4:	022b      	lsls	r3, r5, #8
 80091d6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80091da:	0222      	lsls	r2, r4, #8
 80091dc:	68f9      	ldr	r1, [r7, #12]
 80091de:	6849      	ldr	r1, [r1, #4]
 80091e0:	0849      	lsrs	r1, r1, #1
 80091e2:	2000      	movs	r0, #0
 80091e4:	4688      	mov	r8, r1
 80091e6:	4681      	mov	r9, r0
 80091e8:	eb12 0a08 	adds.w	sl, r2, r8
 80091ec:	eb43 0b09 	adc.w	fp, r3, r9
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	603b      	str	r3, [r7, #0]
 80091f8:	607a      	str	r2, [r7, #4]
 80091fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091fe:	4650      	mov	r0, sl
 8009200:	4659      	mov	r1, fp
 8009202:	f7f7 f83d 	bl	8000280 <__aeabi_uldivmod>
 8009206:	4602      	mov	r2, r0
 8009208:	460b      	mov	r3, r1
 800920a:	4613      	mov	r3, r2
 800920c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800920e:	69bb      	ldr	r3, [r7, #24]
 8009210:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009214:	d308      	bcc.n	8009228 <UART_SetConfig+0x328>
 8009216:	69bb      	ldr	r3, [r7, #24]
 8009218:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800921c:	d204      	bcs.n	8009228 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	69ba      	ldr	r2, [r7, #24]
 8009224:	60da      	str	r2, [r3, #12]
 8009226:	e0b5      	b.n	8009394 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8009228:	2301      	movs	r3, #1
 800922a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800922e:	e0b1      	b.n	8009394 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	69db      	ldr	r3, [r3, #28]
 8009234:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009238:	d15d      	bne.n	80092f6 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800923a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800923e:	2b08      	cmp	r3, #8
 8009240:	d827      	bhi.n	8009292 <UART_SetConfig+0x392>
 8009242:	a201      	add	r2, pc, #4	; (adr r2, 8009248 <UART_SetConfig+0x348>)
 8009244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009248:	0800926d 	.word	0x0800926d
 800924c:	08009275 	.word	0x08009275
 8009250:	0800927d 	.word	0x0800927d
 8009254:	08009293 	.word	0x08009293
 8009258:	08009283 	.word	0x08009283
 800925c:	08009293 	.word	0x08009293
 8009260:	08009293 	.word	0x08009293
 8009264:	08009293 	.word	0x08009293
 8009268:	0800928b 	.word	0x0800928b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800926c:	f7fd f8fa 	bl	8006464 <HAL_RCC_GetPCLK1Freq>
 8009270:	61f8      	str	r0, [r7, #28]
        break;
 8009272:	e014      	b.n	800929e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009274:	f7fd f90c 	bl	8006490 <HAL_RCC_GetPCLK2Freq>
 8009278:	61f8      	str	r0, [r7, #28]
        break;
 800927a:	e010      	b.n	800929e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800927c:	4b4c      	ldr	r3, [pc, #304]	; (80093b0 <UART_SetConfig+0x4b0>)
 800927e:	61fb      	str	r3, [r7, #28]
        break;
 8009280:	e00d      	b.n	800929e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009282:	f7fd f857 	bl	8006334 <HAL_RCC_GetSysClockFreq>
 8009286:	61f8      	str	r0, [r7, #28]
        break;
 8009288:	e009      	b.n	800929e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800928a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800928e:	61fb      	str	r3, [r7, #28]
        break;
 8009290:	e005      	b.n	800929e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8009292:	2300      	movs	r3, #0
 8009294:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009296:	2301      	movs	r3, #1
 8009298:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800929c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800929e:	69fb      	ldr	r3, [r7, #28]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d077      	beq.n	8009394 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80092a4:	69fb      	ldr	r3, [r7, #28]
 80092a6:	005a      	lsls	r2, r3, #1
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	085b      	lsrs	r3, r3, #1
 80092ae:	441a      	add	r2, r3
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80092b8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	2b0f      	cmp	r3, #15
 80092be:	d916      	bls.n	80092ee <UART_SetConfig+0x3ee>
 80092c0:	69bb      	ldr	r3, [r7, #24]
 80092c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092c6:	d212      	bcs.n	80092ee <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80092c8:	69bb      	ldr	r3, [r7, #24]
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	f023 030f 	bic.w	r3, r3, #15
 80092d0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	085b      	lsrs	r3, r3, #1
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	f003 0307 	and.w	r3, r3, #7
 80092dc:	b29a      	uxth	r2, r3
 80092de:	8afb      	ldrh	r3, [r7, #22]
 80092e0:	4313      	orrs	r3, r2
 80092e2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	8afa      	ldrh	r2, [r7, #22]
 80092ea:	60da      	str	r2, [r3, #12]
 80092ec:	e052      	b.n	8009394 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80092ee:	2301      	movs	r3, #1
 80092f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80092f4:	e04e      	b.n	8009394 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80092f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80092fa:	2b08      	cmp	r3, #8
 80092fc:	d827      	bhi.n	800934e <UART_SetConfig+0x44e>
 80092fe:	a201      	add	r2, pc, #4	; (adr r2, 8009304 <UART_SetConfig+0x404>)
 8009300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009304:	08009329 	.word	0x08009329
 8009308:	08009331 	.word	0x08009331
 800930c:	08009339 	.word	0x08009339
 8009310:	0800934f 	.word	0x0800934f
 8009314:	0800933f 	.word	0x0800933f
 8009318:	0800934f 	.word	0x0800934f
 800931c:	0800934f 	.word	0x0800934f
 8009320:	0800934f 	.word	0x0800934f
 8009324:	08009347 	.word	0x08009347
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009328:	f7fd f89c 	bl	8006464 <HAL_RCC_GetPCLK1Freq>
 800932c:	61f8      	str	r0, [r7, #28]
        break;
 800932e:	e014      	b.n	800935a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009330:	f7fd f8ae 	bl	8006490 <HAL_RCC_GetPCLK2Freq>
 8009334:	61f8      	str	r0, [r7, #28]
        break;
 8009336:	e010      	b.n	800935a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009338:	4b1d      	ldr	r3, [pc, #116]	; (80093b0 <UART_SetConfig+0x4b0>)
 800933a:	61fb      	str	r3, [r7, #28]
        break;
 800933c:	e00d      	b.n	800935a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800933e:	f7fc fff9 	bl	8006334 <HAL_RCC_GetSysClockFreq>
 8009342:	61f8      	str	r0, [r7, #28]
        break;
 8009344:	e009      	b.n	800935a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009346:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800934a:	61fb      	str	r3, [r7, #28]
        break;
 800934c:	e005      	b.n	800935a <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800934e:	2300      	movs	r3, #0
 8009350:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009352:	2301      	movs	r3, #1
 8009354:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009358:	bf00      	nop
    }

    if (pclk != 0U)
 800935a:	69fb      	ldr	r3, [r7, #28]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d019      	beq.n	8009394 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	085a      	lsrs	r2, r3, #1
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	441a      	add	r2, r3
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009372:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009374:	69bb      	ldr	r3, [r7, #24]
 8009376:	2b0f      	cmp	r3, #15
 8009378:	d909      	bls.n	800938e <UART_SetConfig+0x48e>
 800937a:	69bb      	ldr	r3, [r7, #24]
 800937c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009380:	d205      	bcs.n	800938e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	b29a      	uxth	r2, r3
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	60da      	str	r2, [r3, #12]
 800938c:	e002      	b.n	8009394 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2200      	movs	r2, #0
 8009398:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2200      	movs	r2, #0
 800939e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80093a0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3728      	adds	r7, #40	; 0x28
 80093a8:	46bd      	mov	sp, r7
 80093aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80093ae:	bf00      	nop
 80093b0:	00f42400 	.word	0x00f42400

080093b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c0:	f003 0301 	and.w	r3, r3, #1
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d00a      	beq.n	80093de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	430a      	orrs	r2, r1
 80093dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e2:	f003 0302 	and.w	r3, r3, #2
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d00a      	beq.n	8009400 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	430a      	orrs	r2, r1
 80093fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009404:	f003 0304 	and.w	r3, r3, #4
 8009408:	2b00      	cmp	r3, #0
 800940a:	d00a      	beq.n	8009422 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	430a      	orrs	r2, r1
 8009420:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009426:	f003 0308 	and.w	r3, r3, #8
 800942a:	2b00      	cmp	r3, #0
 800942c:	d00a      	beq.n	8009444 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	430a      	orrs	r2, r1
 8009442:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009448:	f003 0310 	and.w	r3, r3, #16
 800944c:	2b00      	cmp	r3, #0
 800944e:	d00a      	beq.n	8009466 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	689b      	ldr	r3, [r3, #8]
 8009456:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	430a      	orrs	r2, r1
 8009464:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800946a:	f003 0320 	and.w	r3, r3, #32
 800946e:	2b00      	cmp	r3, #0
 8009470:	d00a      	beq.n	8009488 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	430a      	orrs	r2, r1
 8009486:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800948c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009490:	2b00      	cmp	r3, #0
 8009492:	d01a      	beq.n	80094ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	430a      	orrs	r2, r1
 80094a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094b2:	d10a      	bne.n	80094ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	430a      	orrs	r2, r1
 80094c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d00a      	beq.n	80094ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	430a      	orrs	r2, r1
 80094ea:	605a      	str	r2, [r3, #4]
  }
}
 80094ec:	bf00      	nop
 80094ee:	370c      	adds	r7, #12
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b086      	sub	sp, #24
 80094fc:	af02      	add	r7, sp, #8
 80094fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2200      	movs	r2, #0
 8009504:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009508:	f7fb f89c 	bl	8004644 <HAL_GetTick>
 800950c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f003 0308 	and.w	r3, r3, #8
 8009518:	2b08      	cmp	r3, #8
 800951a:	d10e      	bne.n	800953a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800951c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009520:	9300      	str	r3, [sp, #0]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2200      	movs	r2, #0
 8009526:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 f82d 	bl	800958a <UART_WaitOnFlagUntilTimeout>
 8009530:	4603      	mov	r3, r0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d001      	beq.n	800953a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009536:	2303      	movs	r3, #3
 8009538:	e023      	b.n	8009582 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f003 0304 	and.w	r3, r3, #4
 8009544:	2b04      	cmp	r3, #4
 8009546:	d10e      	bne.n	8009566 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009548:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800954c:	9300      	str	r3, [sp, #0]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2200      	movs	r2, #0
 8009552:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 f817 	bl	800958a <UART_WaitOnFlagUntilTimeout>
 800955c:	4603      	mov	r3, r0
 800955e:	2b00      	cmp	r3, #0
 8009560:	d001      	beq.n	8009566 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009562:	2303      	movs	r3, #3
 8009564:	e00d      	b.n	8009582 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2220      	movs	r2, #32
 800956a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2220      	movs	r2, #32
 8009570:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2200      	movs	r2, #0
 8009576:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009580:	2300      	movs	r3, #0
}
 8009582:	4618      	mov	r0, r3
 8009584:	3710      	adds	r7, #16
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800958a:	b580      	push	{r7, lr}
 800958c:	b09c      	sub	sp, #112	; 0x70
 800958e:	af00      	add	r7, sp, #0
 8009590:	60f8      	str	r0, [r7, #12]
 8009592:	60b9      	str	r1, [r7, #8]
 8009594:	603b      	str	r3, [r7, #0]
 8009596:	4613      	mov	r3, r2
 8009598:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800959a:	e0a5      	b.n	80096e8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800959c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800959e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095a2:	f000 80a1 	beq.w	80096e8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095a6:	f7fb f84d 	bl	8004644 <HAL_GetTick>
 80095aa:	4602      	mov	r2, r0
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	1ad3      	subs	r3, r2, r3
 80095b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d302      	bcc.n	80095bc <UART_WaitOnFlagUntilTimeout+0x32>
 80095b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d13e      	bne.n	800963a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095c4:	e853 3f00 	ldrex	r3, [r3]
 80095c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80095ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80095d0:	667b      	str	r3, [r7, #100]	; 0x64
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	461a      	mov	r2, r3
 80095d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095dc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80095e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80095e2:	e841 2300 	strex	r3, r2, [r1]
 80095e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80095e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d1e6      	bne.n	80095bc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	3308      	adds	r3, #8
 80095f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095f8:	e853 3f00 	ldrex	r3, [r3]
 80095fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80095fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009600:	f023 0301 	bic.w	r3, r3, #1
 8009604:	663b      	str	r3, [r7, #96]	; 0x60
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	3308      	adds	r3, #8
 800960c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800960e:	64ba      	str	r2, [r7, #72]	; 0x48
 8009610:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009612:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009614:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009616:	e841 2300 	strex	r3, r2, [r1]
 800961a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800961c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800961e:	2b00      	cmp	r3, #0
 8009620:	d1e5      	bne.n	80095ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2220      	movs	r2, #32
 8009626:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2220      	movs	r2, #32
 800962c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2200      	movs	r2, #0
 8009632:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009636:	2303      	movs	r3, #3
 8009638:	e067      	b.n	800970a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f003 0304 	and.w	r3, r3, #4
 8009644:	2b00      	cmp	r3, #0
 8009646:	d04f      	beq.n	80096e8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	69db      	ldr	r3, [r3, #28]
 800964e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009652:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009656:	d147      	bne.n	80096e8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009660:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966a:	e853 3f00 	ldrex	r3, [r3]
 800966e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009672:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009676:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	461a      	mov	r2, r3
 800967e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009680:	637b      	str	r3, [r7, #52]	; 0x34
 8009682:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009684:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009686:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009688:	e841 2300 	strex	r3, r2, [r1]
 800968c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800968e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009690:	2b00      	cmp	r3, #0
 8009692:	d1e6      	bne.n	8009662 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	3308      	adds	r3, #8
 800969a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	e853 3f00 	ldrex	r3, [r3]
 80096a2:	613b      	str	r3, [r7, #16]
   return(result);
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	f023 0301 	bic.w	r3, r3, #1
 80096aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	3308      	adds	r3, #8
 80096b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80096b4:	623a      	str	r2, [r7, #32]
 80096b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b8:	69f9      	ldr	r1, [r7, #28]
 80096ba:	6a3a      	ldr	r2, [r7, #32]
 80096bc:	e841 2300 	strex	r3, r2, [r1]
 80096c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80096c2:	69bb      	ldr	r3, [r7, #24]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d1e5      	bne.n	8009694 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2220      	movs	r2, #32
 80096cc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2220      	movs	r2, #32
 80096d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2220      	movs	r2, #32
 80096d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2200      	movs	r2, #0
 80096e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80096e4:	2303      	movs	r3, #3
 80096e6:	e010      	b.n	800970a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	69da      	ldr	r2, [r3, #28]
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	4013      	ands	r3, r2
 80096f2:	68ba      	ldr	r2, [r7, #8]
 80096f4:	429a      	cmp	r2, r3
 80096f6:	bf0c      	ite	eq
 80096f8:	2301      	moveq	r3, #1
 80096fa:	2300      	movne	r3, #0
 80096fc:	b2db      	uxtb	r3, r3
 80096fe:	461a      	mov	r2, r3
 8009700:	79fb      	ldrb	r3, [r7, #7]
 8009702:	429a      	cmp	r2, r3
 8009704:	f43f af4a 	beq.w	800959c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009708:	2300      	movs	r3, #0
}
 800970a:	4618      	mov	r0, r3
 800970c:	3770      	adds	r7, #112	; 0x70
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
	...

08009714 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009714:	b480      	push	{r7}
 8009716:	b097      	sub	sp, #92	; 0x5c
 8009718:	af00      	add	r7, sp, #0
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	60b9      	str	r1, [r7, #8]
 800971e:	4613      	mov	r3, r2
 8009720:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	68ba      	ldr	r2, [r7, #8]
 8009726:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	88fa      	ldrh	r2, [r7, #6]
 800972c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	88fa      	ldrh	r2, [r7, #6]
 8009734:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2200      	movs	r2, #0
 800973c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	689b      	ldr	r3, [r3, #8]
 8009742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009746:	d10e      	bne.n	8009766 <UART_Start_Receive_IT+0x52>
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	691b      	ldr	r3, [r3, #16]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d105      	bne.n	800975c <UART_Start_Receive_IT+0x48>
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009756:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800975a:	e02d      	b.n	80097b8 <UART_Start_Receive_IT+0xa4>
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	22ff      	movs	r2, #255	; 0xff
 8009760:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009764:	e028      	b.n	80097b8 <UART_Start_Receive_IT+0xa4>
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d10d      	bne.n	800978a <UART_Start_Receive_IT+0x76>
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	691b      	ldr	r3, [r3, #16]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d104      	bne.n	8009780 <UART_Start_Receive_IT+0x6c>
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	22ff      	movs	r2, #255	; 0xff
 800977a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800977e:	e01b      	b.n	80097b8 <UART_Start_Receive_IT+0xa4>
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	227f      	movs	r2, #127	; 0x7f
 8009784:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009788:	e016      	b.n	80097b8 <UART_Start_Receive_IT+0xa4>
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	689b      	ldr	r3, [r3, #8]
 800978e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009792:	d10d      	bne.n	80097b0 <UART_Start_Receive_IT+0x9c>
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	691b      	ldr	r3, [r3, #16]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d104      	bne.n	80097a6 <UART_Start_Receive_IT+0x92>
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	227f      	movs	r2, #127	; 0x7f
 80097a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80097a4:	e008      	b.n	80097b8 <UART_Start_Receive_IT+0xa4>
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	223f      	movs	r2, #63	; 0x3f
 80097aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80097ae:	e003      	b.n	80097b8 <UART_Start_Receive_IT+0xa4>
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2200      	movs	r2, #0
 80097b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2200      	movs	r2, #0
 80097bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2222      	movs	r2, #34	; 0x22
 80097c4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	3308      	adds	r3, #8
 80097cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097d0:	e853 3f00 	ldrex	r3, [r3]
 80097d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80097d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d8:	f043 0301 	orr.w	r3, r3, #1
 80097dc:	657b      	str	r3, [r7, #84]	; 0x54
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	3308      	adds	r3, #8
 80097e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80097e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80097e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80097ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097ee:	e841 2300 	strex	r3, r2, [r1]
 80097f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80097f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d1e5      	bne.n	80097c6 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	689b      	ldr	r3, [r3, #8]
 80097fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009802:	d107      	bne.n	8009814 <UART_Start_Receive_IT+0x100>
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	691b      	ldr	r3, [r3, #16]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d103      	bne.n	8009814 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	4a24      	ldr	r2, [pc, #144]	; (80098a0 <UART_Start_Receive_IT+0x18c>)
 8009810:	665a      	str	r2, [r3, #100]	; 0x64
 8009812:	e002      	b.n	800981a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	4a23      	ldr	r2, [pc, #140]	; (80098a4 <UART_Start_Receive_IT+0x190>)
 8009818:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2200      	movs	r2, #0
 800981e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	691b      	ldr	r3, [r3, #16]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d019      	beq.n	800985e <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009832:	e853 3f00 	ldrex	r3, [r3]
 8009836:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800983e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	461a      	mov	r2, r3
 8009846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009848:	637b      	str	r3, [r7, #52]	; 0x34
 800984a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800984c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800984e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009850:	e841 2300 	strex	r3, r2, [r1]
 8009854:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009858:	2b00      	cmp	r3, #0
 800985a:	d1e6      	bne.n	800982a <UART_Start_Receive_IT+0x116>
 800985c:	e018      	b.n	8009890 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	e853 3f00 	ldrex	r3, [r3]
 800986a:	613b      	str	r3, [r7, #16]
   return(result);
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	f043 0320 	orr.w	r3, r3, #32
 8009872:	653b      	str	r3, [r7, #80]	; 0x50
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	461a      	mov	r2, r3
 800987a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800987c:	623b      	str	r3, [r7, #32]
 800987e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009880:	69f9      	ldr	r1, [r7, #28]
 8009882:	6a3a      	ldr	r2, [r7, #32]
 8009884:	e841 2300 	strex	r3, r2, [r1]
 8009888:	61bb      	str	r3, [r7, #24]
   return(result);
 800988a:	69bb      	ldr	r3, [r7, #24]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d1e6      	bne.n	800985e <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8009890:	2300      	movs	r3, #0
}
 8009892:	4618      	mov	r0, r3
 8009894:	375c      	adds	r7, #92	; 0x5c
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr
 800989e:	bf00      	nop
 80098a0:	08009cc7 	.word	0x08009cc7
 80098a4:	08009b67 	.word	0x08009b67

080098a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b095      	sub	sp, #84	; 0x54
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098b8:	e853 3f00 	ldrex	r3, [r3]
 80098bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80098be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80098c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	461a      	mov	r2, r3
 80098cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098ce:	643b      	str	r3, [r7, #64]	; 0x40
 80098d0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80098d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80098d6:	e841 2300 	strex	r3, r2, [r1]
 80098da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80098dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d1e6      	bne.n	80098b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	3308      	adds	r3, #8
 80098e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ea:	6a3b      	ldr	r3, [r7, #32]
 80098ec:	e853 3f00 	ldrex	r3, [r3]
 80098f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80098f2:	69fb      	ldr	r3, [r7, #28]
 80098f4:	f023 0301 	bic.w	r3, r3, #1
 80098f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	3308      	adds	r3, #8
 8009900:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009902:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009904:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009906:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009908:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800990a:	e841 2300 	strex	r3, r2, [r1]
 800990e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009912:	2b00      	cmp	r3, #0
 8009914:	d1e5      	bne.n	80098e2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800991a:	2b01      	cmp	r3, #1
 800991c:	d118      	bne.n	8009950 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	e853 3f00 	ldrex	r3, [r3]
 800992a:	60bb      	str	r3, [r7, #8]
   return(result);
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	f023 0310 	bic.w	r3, r3, #16
 8009932:	647b      	str	r3, [r7, #68]	; 0x44
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	461a      	mov	r2, r3
 800993a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800993c:	61bb      	str	r3, [r7, #24]
 800993e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009940:	6979      	ldr	r1, [r7, #20]
 8009942:	69ba      	ldr	r2, [r7, #24]
 8009944:	e841 2300 	strex	r3, r2, [r1]
 8009948:	613b      	str	r3, [r7, #16]
   return(result);
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d1e6      	bne.n	800991e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2220      	movs	r2, #32
 8009954:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2200      	movs	r2, #0
 800995a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2200      	movs	r2, #0
 8009960:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009962:	bf00      	nop
 8009964:	3754      	adds	r7, #84	; 0x54
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr

0800996e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800996e:	b580      	push	{r7, lr}
 8009970:	b084      	sub	sp, #16
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800997a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2200      	movs	r2, #0
 8009980:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2200      	movs	r2, #0
 8009988:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800998c:	68f8      	ldr	r0, [r7, #12]
 800998e:	f7ff faa1 	bl	8008ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009992:	bf00      	nop
 8009994:	3710      	adds	r7, #16
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}

0800999a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800999a:	b480      	push	{r7}
 800999c:	b08f      	sub	sp, #60	; 0x3c
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099a6:	2b21      	cmp	r3, #33	; 0x21
 80099a8:	d14d      	bne.n	8009a46 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d132      	bne.n	8009a1c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099bc:	6a3b      	ldr	r3, [r7, #32]
 80099be:	e853 3f00 	ldrex	r3, [r3]
 80099c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80099c4:	69fb      	ldr	r3, [r7, #28]
 80099c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099ca:	637b      	str	r3, [r7, #52]	; 0x34
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	461a      	mov	r2, r3
 80099d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099d6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099dc:	e841 2300 	strex	r3, r2, [r1]
 80099e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80099e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d1e6      	bne.n	80099b6 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	e853 3f00 	ldrex	r3, [r3]
 80099f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099fc:	633b      	str	r3, [r7, #48]	; 0x30
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	461a      	mov	r2, r3
 8009a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a06:	61bb      	str	r3, [r7, #24]
 8009a08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a0a:	6979      	ldr	r1, [r7, #20]
 8009a0c:	69ba      	ldr	r2, [r7, #24]
 8009a0e:	e841 2300 	strex	r3, r2, [r1]
 8009a12:	613b      	str	r3, [r7, #16]
   return(result);
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d1e6      	bne.n	80099e8 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009a1a:	e014      	b.n	8009a46 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a20:	781a      	ldrb	r2, [r3, #0]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	b292      	uxth	r2, r2
 8009a28:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a2e:	1c5a      	adds	r2, r3, #1
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009a3a:	b29b      	uxth	r3, r3
 8009a3c:	3b01      	subs	r3, #1
 8009a3e:	b29a      	uxth	r2, r3
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8009a46:	bf00      	nop
 8009a48:	373c      	adds	r7, #60	; 0x3c
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr

08009a52 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009a52:	b480      	push	{r7}
 8009a54:	b091      	sub	sp, #68	; 0x44
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a5e:	2b21      	cmp	r3, #33	; 0x21
 8009a60:	d151      	bne.n	8009b06 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d132      	bne.n	8009ad4 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a76:	e853 3f00 	ldrex	r3, [r3]
 8009a7a:	623b      	str	r3, [r7, #32]
   return(result);
 8009a7c:	6a3b      	ldr	r3, [r7, #32]
 8009a7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a82:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	461a      	mov	r2, r3
 8009a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a8c:	633b      	str	r3, [r7, #48]	; 0x30
 8009a8e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a94:	e841 2300 	strex	r3, r2, [r1]
 8009a98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d1e6      	bne.n	8009a6e <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	e853 3f00 	ldrex	r3, [r3]
 8009aac:	60fb      	str	r3, [r7, #12]
   return(result);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ab4:	637b      	str	r3, [r7, #52]	; 0x34
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	461a      	mov	r2, r3
 8009abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009abe:	61fb      	str	r3, [r7, #28]
 8009ac0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac2:	69b9      	ldr	r1, [r7, #24]
 8009ac4:	69fa      	ldr	r2, [r7, #28]
 8009ac6:	e841 2300 	strex	r3, r2, [r1]
 8009aca:	617b      	str	r3, [r7, #20]
   return(result);
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d1e6      	bne.n	8009aa0 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009ad2:	e018      	b.n	8009b06 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009adc:	881a      	ldrh	r2, [r3, #0]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009ae6:	b292      	uxth	r2, r2
 8009ae8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aee:	1c9a      	adds	r2, r3, #2
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	3b01      	subs	r3, #1
 8009afe:	b29a      	uxth	r2, r3
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8009b06:	bf00      	nop
 8009b08:	3744      	adds	r7, #68	; 0x44
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr

08009b12 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009b12:	b580      	push	{r7, lr}
 8009b14:	b088      	sub	sp, #32
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	e853 3f00 	ldrex	r3, [r3]
 8009b26:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b2e:	61fb      	str	r3, [r7, #28]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	461a      	mov	r2, r3
 8009b36:	69fb      	ldr	r3, [r7, #28]
 8009b38:	61bb      	str	r3, [r7, #24]
 8009b3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b3c:	6979      	ldr	r1, [r7, #20]
 8009b3e:	69ba      	ldr	r2, [r7, #24]
 8009b40:	e841 2300 	strex	r3, r2, [r1]
 8009b44:	613b      	str	r3, [r7, #16]
   return(result);
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d1e6      	bne.n	8009b1a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2220      	movs	r2, #32
 8009b50:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2200      	movs	r2, #0
 8009b56:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 fd55 	bl	800a608 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b5e:	bf00      	nop
 8009b60:	3720      	adds	r7, #32
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}

08009b66 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009b66:	b580      	push	{r7, lr}
 8009b68:	b096      	sub	sp, #88	; 0x58
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009b74:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b7c:	2b22      	cmp	r3, #34	; 0x22
 8009b7e:	f040 8094 	bne.w	8009caa <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009b88:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009b8c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009b90:	b2d9      	uxtb	r1, r3
 8009b92:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009b96:	b2da      	uxtb	r2, r3
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b9c:	400a      	ands	r2, r1
 8009b9e:	b2d2      	uxtb	r2, r2
 8009ba0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ba6:	1c5a      	adds	r2, r3, #1
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	3b01      	subs	r3, #1
 8009bb6:	b29a      	uxth	r2, r3
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d179      	bne.n	8009cbe <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bd2:	e853 3f00 	ldrex	r3, [r3]
 8009bd6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bda:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009bde:	653b      	str	r3, [r7, #80]	; 0x50
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	461a      	mov	r2, r3
 8009be6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009be8:	647b      	str	r3, [r7, #68]	; 0x44
 8009bea:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009bee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009bf0:	e841 2300 	strex	r3, r2, [r1]
 8009bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d1e6      	bne.n	8009bca <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	3308      	adds	r3, #8
 8009c02:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c06:	e853 3f00 	ldrex	r3, [r3]
 8009c0a:	623b      	str	r3, [r7, #32]
   return(result);
 8009c0c:	6a3b      	ldr	r3, [r7, #32]
 8009c0e:	f023 0301 	bic.w	r3, r3, #1
 8009c12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	3308      	adds	r3, #8
 8009c1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009c1c:	633a      	str	r2, [r7, #48]	; 0x30
 8009c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c24:	e841 2300 	strex	r3, r2, [r1]
 8009c28:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d1e5      	bne.n	8009bfc <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2220      	movs	r2, #32
 8009c34:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d12e      	bne.n	8009ca2 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2200      	movs	r2, #0
 8009c48:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	e853 3f00 	ldrex	r3, [r3]
 8009c56:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f023 0310 	bic.w	r3, r3, #16
 8009c5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	461a      	mov	r2, r3
 8009c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c68:	61fb      	str	r3, [r7, #28]
 8009c6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c6c:	69b9      	ldr	r1, [r7, #24]
 8009c6e:	69fa      	ldr	r2, [r7, #28]
 8009c70:	e841 2300 	strex	r3, r2, [r1]
 8009c74:	617b      	str	r3, [r7, #20]
   return(result);
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d1e6      	bne.n	8009c4a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	69db      	ldr	r3, [r3, #28]
 8009c82:	f003 0310 	and.w	r3, r3, #16
 8009c86:	2b10      	cmp	r3, #16
 8009c88:	d103      	bne.n	8009c92 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	2210      	movs	r2, #16
 8009c90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009c98:	4619      	mov	r1, r3
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f7ff f924 	bl	8008ee8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ca0:	e00d      	b.n	8009cbe <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 fcba 	bl	800a61c <HAL_UART_RxCpltCallback>
}
 8009ca8:	e009      	b.n	8009cbe <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	8b1b      	ldrh	r3, [r3, #24]
 8009cb0:	b29a      	uxth	r2, r3
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f042 0208 	orr.w	r2, r2, #8
 8009cba:	b292      	uxth	r2, r2
 8009cbc:	831a      	strh	r2, [r3, #24]
}
 8009cbe:	bf00      	nop
 8009cc0:	3758      	adds	r7, #88	; 0x58
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b096      	sub	sp, #88	; 0x58
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009cd4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009cdc:	2b22      	cmp	r3, #34	; 0x22
 8009cde:	f040 8094 	bne.w	8009e0a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009ce8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cf0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009cf2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009cf6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009cfa:	4013      	ands	r3, r2
 8009cfc:	b29a      	uxth	r2, r3
 8009cfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d00:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d06:	1c9a      	adds	r2, r3, #2
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	3b01      	subs	r3, #1
 8009d16:	b29a      	uxth	r2, r3
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d179      	bne.n	8009e1e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d32:	e853 3f00 	ldrex	r3, [r3]
 8009d36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	461a      	mov	r2, r3
 8009d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d48:	643b      	str	r3, [r7, #64]	; 0x40
 8009d4a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009d4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009d50:	e841 2300 	strex	r3, r2, [r1]
 8009d54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d1e6      	bne.n	8009d2a <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	3308      	adds	r3, #8
 8009d62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d64:	6a3b      	ldr	r3, [r7, #32]
 8009d66:	e853 3f00 	ldrex	r3, [r3]
 8009d6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d6c:	69fb      	ldr	r3, [r7, #28]
 8009d6e:	f023 0301 	bic.w	r3, r3, #1
 8009d72:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	3308      	adds	r3, #8
 8009d7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009d7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d84:	e841 2300 	strex	r3, r2, [r1]
 8009d88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d1e5      	bne.n	8009d5c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2220      	movs	r2, #32
 8009d94:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d12e      	bne.n	8009e02 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2200      	movs	r2, #0
 8009da8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	e853 3f00 	ldrex	r3, [r3]
 8009db6:	60bb      	str	r3, [r7, #8]
   return(result);
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	f023 0310 	bic.w	r3, r3, #16
 8009dbe:	647b      	str	r3, [r7, #68]	; 0x44
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009dc8:	61bb      	str	r3, [r7, #24]
 8009dca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dcc:	6979      	ldr	r1, [r7, #20]
 8009dce:	69ba      	ldr	r2, [r7, #24]
 8009dd0:	e841 2300 	strex	r3, r2, [r1]
 8009dd4:	613b      	str	r3, [r7, #16]
   return(result);
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d1e6      	bne.n	8009daa <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	69db      	ldr	r3, [r3, #28]
 8009de2:	f003 0310 	and.w	r3, r3, #16
 8009de6:	2b10      	cmp	r3, #16
 8009de8:	d103      	bne.n	8009df2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	2210      	movs	r2, #16
 8009df0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009df8:	4619      	mov	r1, r3
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f7ff f874 	bl	8008ee8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009e00:	e00d      	b.n	8009e1e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 fc0a 	bl	800a61c <HAL_UART_RxCpltCallback>
}
 8009e08:	e009      	b.n	8009e1e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	8b1b      	ldrh	r3, [r3, #24]
 8009e10:	b29a      	uxth	r2, r3
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f042 0208 	orr.w	r2, r2, #8
 8009e1a:	b292      	uxth	r2, r2
 8009e1c:	831a      	strh	r2, [r3, #24]
}
 8009e1e:	bf00      	nop
 8009e20:	3758      	adds	r7, #88	; 0x58
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}

08009e26 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009e26:	b480      	push	{r7}
 8009e28:	b083      	sub	sp, #12
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009e2e:	bf00      	nop
 8009e30:	370c      	adds	r7, #12
 8009e32:	46bd      	mov	sp, r7
 8009e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e38:	4770      	bx	lr
	...

08009e3c <board_init_common_rtc_init>:
uint32_t g_button_on_count[NUM_PUSH_BUTTONS] = {0};
bool button_press_state[NUM_PUSH_BUTTONS] = {false};
extern UART_HandleTypeDef      gh_host_usart;

static void board_init_common_rtc_init(void)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	af00      	add	r7, sp, #0
    g_rtc_handle.Instance = RTC;
 8009e40:	4b10      	ldr	r3, [pc, #64]	; (8009e84 <board_init_common_rtc_init+0x48>)
 8009e42:	4a11      	ldr	r2, [pc, #68]	; (8009e88 <board_init_common_rtc_init+0x4c>)
 8009e44:	601a      	str	r2, [r3, #0]
    g_rtc_handle.Init.HourFormat = RTC_HOURFORMAT_24;
 8009e46:	4b0f      	ldr	r3, [pc, #60]	; (8009e84 <board_init_common_rtc_init+0x48>)
 8009e48:	2200      	movs	r2, #0
 8009e4a:	605a      	str	r2, [r3, #4]
    g_rtc_handle.Init.AsynchPrediv = 127;
 8009e4c:	4b0d      	ldr	r3, [pc, #52]	; (8009e84 <board_init_common_rtc_init+0x48>)
 8009e4e:	227f      	movs	r2, #127	; 0x7f
 8009e50:	609a      	str	r2, [r3, #8]
    g_rtc_handle.Init.SynchPrediv = 255;
 8009e52:	4b0c      	ldr	r3, [pc, #48]	; (8009e84 <board_init_common_rtc_init+0x48>)
 8009e54:	22ff      	movs	r2, #255	; 0xff
 8009e56:	60da      	str	r2, [r3, #12]
    g_rtc_handle.Init.OutPut = RTC_OUTPUT_DISABLE;
 8009e58:	4b0a      	ldr	r3, [pc, #40]	; (8009e84 <board_init_common_rtc_init+0x48>)
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	611a      	str	r2, [r3, #16]
    g_rtc_handle.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8009e5e:	4b09      	ldr	r3, [pc, #36]	; (8009e84 <board_init_common_rtc_init+0x48>)
 8009e60:	2200      	movs	r2, #0
 8009e62:	615a      	str	r2, [r3, #20]
    g_rtc_handle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8009e64:	4b07      	ldr	r3, [pc, #28]	; (8009e84 <board_init_common_rtc_init+0x48>)
 8009e66:	2200      	movs	r2, #0
 8009e68:	619a      	str	r2, [r3, #24]
    g_rtc_handle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8009e6a:	4b06      	ldr	r3, [pc, #24]	; (8009e84 <board_init_common_rtc_init+0x48>)
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	61da      	str	r2, [r3, #28]
    if (HAL_RTC_Init(&g_rtc_handle) != HAL_OK) Error_Handler();
 8009e70:	4804      	ldr	r0, [pc, #16]	; (8009e84 <board_init_common_rtc_init+0x48>)
 8009e72:	f7fc fe8d 	bl	8006b90 <HAL_RTC_Init>
 8009e76:	4603      	mov	r3, r0
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d001      	beq.n	8009e80 <board_init_common_rtc_init+0x44>
 8009e7c:	f000 fa4b 	bl	800a316 <Error_Handler>
}
 8009e80:	bf00      	nop
 8009e82:	bd80      	pop	{r7, pc}
 8009e84:	20003e5c 	.word	0x20003e5c
 8009e88:	40002800 	.word	0x40002800

08009e8c <SystemClock_Config>:

static void SystemClock_Config(void)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b0ae      	sub	sp, #184	; 0xb8
 8009e90:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009e92:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009e96:	2244      	movs	r2, #68	; 0x44
 8009e98:	2100      	movs	r1, #0
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f001 fd72 	bl	800b984 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009ea0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	601a      	str	r2, [r3, #0]
 8009ea8:	605a      	str	r2, [r3, #4]
 8009eaa:	609a      	str	r2, [r3, #8]
 8009eac:	60da      	str	r2, [r3, #12]
 8009eae:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009eb0:	1d3b      	adds	r3, r7, #4
 8009eb2:	225c      	movs	r2, #92	; 0x5c
 8009eb4:	2100      	movs	r1, #0
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f001 fd64 	bl	800b984 <memset>

    HAL_PWR_EnableBkUpAccess();
 8009ebc:	f7fb fc42 	bl	8005744 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8009ec0:	4b25      	ldr	r3, [pc, #148]	; (8009f58 <SystemClock_Config+0xcc>)
 8009ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ec6:	4a24      	ldr	r2, [pc, #144]	; (8009f58 <SystemClock_Config+0xcc>)
 8009ec8:	f023 0318 	bic.w	r3, r3, #24
 8009ecc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8009ed0:	2305      	movs	r3, #5
 8009ed2:	677b      	str	r3, [r7, #116]	; 0x74
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009ed4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009ed8:	67bb      	str	r3, [r7, #120]	; 0x78
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8009eda:	2301      	movs	r3, #1
 8009edc:	67fb      	str	r3, [r7, #124]	; 0x7c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) while(1);
 8009ee4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f7fb fd0f 	bl	800590c <HAL_RCC_OscConfig>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d000      	beq.n	8009ef6 <SystemClock_Config+0x6a>
 8009ef4:	e7fe      	b.n	8009ef4 <SystemClock_Config+0x68>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009ef6:	230f      	movs	r3, #15
 8009ef8:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8009efa:	2302      	movs	r3, #2
 8009efc:	667b      	str	r3, [r7, #100]	; 0x64
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009efe:	2300      	movs	r3, #0
 8009f00:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009f02:	2300      	movs	r3, #0
 8009f04:	66fb      	str	r3, [r7, #108]	; 0x6c
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009f06:	2300      	movs	r3, #0
 8009f08:	673b      	str	r3, [r7, #112]	; 0x70

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) while(1);
 8009f0a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009f0e:	2102      	movs	r1, #2
 8009f10:	4618      	mov	r0, r3
 8009f12:	f7fc f90f 	bl	8006134 <HAL_RCC_ClockConfig>
 8009f16:	4603      	mov	r3, r0
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d000      	beq.n	8009f1e <SystemClock_Config+0x92>
 8009f1c:	e7fe      	b.n	8009f1c <SystemClock_Config+0x90>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8009f1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009f22:	607b      	str	r3, [r7, #4]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8009f24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f28:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) Error_Handler();
 8009f2a:	1d3b      	adds	r3, r7, #4
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f7fc fb25 	bl	800657c <HAL_RCCEx_PeriphCLKConfig>
 8009f32:	4603      	mov	r3, r0
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d001      	beq.n	8009f3c <SystemClock_Config+0xb0>
 8009f38:	f000 f9ed 	bl	800a316 <Error_Handler>
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) Error_Handler();
 8009f3c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009f40:	f7fb fc8e 	bl	8005860 <HAL_PWREx_ControlVoltageScaling>
 8009f44:	4603      	mov	r3, r0
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d001      	beq.n	8009f4e <SystemClock_Config+0xc2>
 8009f4a:	f000 f9e4 	bl	800a316 <Error_Handler>
}
 8009f4e:	bf00      	nop
 8009f50:	37b8      	adds	r7, #184	; 0xb8
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
 8009f56:	bf00      	nop
 8009f58:	40021000 	.word	0x40021000

08009f5c <board_init_common_timer_init>:


static void board_init_common_timer_init(void)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b09e      	sub	sp, #120	; 0x78
 8009f60:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f62:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009f66:	2200      	movs	r2, #0
 8009f68:	601a      	str	r2, [r3, #0]
 8009f6a:	605a      	str	r2, [r3, #4]
 8009f6c:	609a      	str	r2, [r3, #8]
 8009f6e:	60da      	str	r2, [r3, #12]
 8009f70:	611a      	str	r2, [r3, #16]
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009f72:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009f76:	2200      	movs	r2, #0
 8009f78:	601a      	str	r2, [r3, #0]
 8009f7a:	605a      	str	r2, [r3, #4]
 8009f7c:	609a      	str	r2, [r3, #8]
 8009f7e:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009f80:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009f84:	2200      	movs	r2, #0
 8009f86:	601a      	str	r2, [r3, #0]
 8009f88:	605a      	str	r2, [r3, #4]
 8009f8a:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8009f8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009f90:	2200      	movs	r2, #0
 8009f92:	601a      	str	r2, [r3, #0]
 8009f94:	605a      	str	r2, [r3, #4]
 8009f96:	609a      	str	r2, [r3, #8]
 8009f98:	60da      	str	r2, [r3, #12]
 8009f9a:	611a      	str	r2, [r3, #16]
 8009f9c:	615a      	str	r2, [r3, #20]
 8009f9e:	619a      	str	r2, [r3, #24]
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009fa0:	463b      	mov	r3, r7
 8009fa2:	222c      	movs	r2, #44	; 0x2c
 8009fa4:	2100      	movs	r1, #0
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f001 fcec 	bl	800b984 <memset>
    g_tim1_handle.Instance = TIM1;
 8009fac:	4b5c      	ldr	r3, [pc, #368]	; (800a120 <board_init_common_timer_init+0x1c4>)
 8009fae:	4a5d      	ldr	r2, [pc, #372]	; (800a124 <board_init_common_timer_init+0x1c8>)
 8009fb0:	601a      	str	r2, [r3, #0]
    g_tim1_handle.Init.Prescaler = 0;
 8009fb2:	4b5b      	ldr	r3, [pc, #364]	; (800a120 <board_init_common_timer_init+0x1c4>)
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	605a      	str	r2, [r3, #4]
    g_tim1_handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009fb8:	4b59      	ldr	r3, [pc, #356]	; (800a120 <board_init_common_timer_init+0x1c4>)
 8009fba:	2200      	movs	r2, #0
 8009fbc:	609a      	str	r2, [r3, #8]
    g_tim1_handle.Init.Period = 60-1;
 8009fbe:	4b58      	ldr	r3, [pc, #352]	; (800a120 <board_init_common_timer_init+0x1c4>)
 8009fc0:	223b      	movs	r2, #59	; 0x3b
 8009fc2:	60da      	str	r2, [r3, #12]
    g_tim1_handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009fc4:	4b56      	ldr	r3, [pc, #344]	; (800a120 <board_init_common_timer_init+0x1c4>)
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	611a      	str	r2, [r3, #16]
    g_tim1_handle.Init.RepetitionCounter = 0;
 8009fca:	4b55      	ldr	r3, [pc, #340]	; (800a120 <board_init_common_timer_init+0x1c4>)
 8009fcc:	2200      	movs	r2, #0
 8009fce:	615a      	str	r2, [r3, #20]
    g_tim1_handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009fd0:	4b53      	ldr	r3, [pc, #332]	; (800a120 <board_init_common_timer_init+0x1c4>)
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&g_tim1_handle) != HAL_OK) Error_Handler();
 8009fd6:	4852      	ldr	r0, [pc, #328]	; (800a120 <board_init_common_timer_init+0x1c4>)
 8009fd8:	f7fc ff99 	bl	8006f0e <HAL_TIM_Base_Init>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d001      	beq.n	8009fe6 <board_init_common_timer_init+0x8a>
 8009fe2:	f000 f998 	bl	800a316 <Error_Handler>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009fe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009fea:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_TIM_ConfigClockSource(&g_tim1_handle, &sClockSourceConfig) != HAL_OK) Error_Handler();
 8009fec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	484b      	ldr	r0, [pc, #300]	; (800a120 <board_init_common_timer_init+0x1c4>)
 8009ff4:	f7fd fc2e 	bl	8007854 <HAL_TIM_ConfigClockSource>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d001      	beq.n	800a002 <board_init_common_timer_init+0xa6>
 8009ffe:	f000 f98a 	bl	800a316 <Error_Handler>
    if (HAL_TIM_PWM_Init(&g_tim1_handle) != HAL_OK) Error_Handler();
 800a002:	4847      	ldr	r0, [pc, #284]	; (800a120 <board_init_common_timer_init+0x1c4>)
 800a004:	f7fc ffda 	bl	8006fbc <HAL_TIM_PWM_Init>
 800a008:	4603      	mov	r3, r0
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d001      	beq.n	800a012 <board_init_common_timer_init+0xb6>
 800a00e:	f000 f982 	bl	800a316 <Error_Handler>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a012:	2300      	movs	r3, #0
 800a014:	64bb      	str	r3, [r7, #72]	; 0x48
    sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800a016:	2300      	movs	r3, #0
 800a018:	64fb      	str	r3, [r7, #76]	; 0x4c
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a01a:	2300      	movs	r3, #0
 800a01c:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_TIMEx_MasterConfigSynchronization(&g_tim1_handle, &sMasterConfig) != HAL_OK) Error_Handler();
 800a01e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a022:	4619      	mov	r1, r3
 800a024:	483e      	ldr	r0, [pc, #248]	; (800a120 <board_init_common_timer_init+0x1c4>)
 800a026:	f7fe f965 	bl	80082f4 <HAL_TIMEx_MasterConfigSynchronization>
 800a02a:	4603      	mov	r3, r0
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d001      	beq.n	800a034 <board_init_common_timer_init+0xd8>
 800a030:	f000 f971 	bl	800a316 <Error_Handler>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a034:	2360      	movs	r3, #96	; 0x60
 800a036:	62fb      	str	r3, [r7, #44]	; 0x2c
    sConfigOC.Pulse = 0;
 800a038:	2300      	movs	r3, #0
 800a03a:	633b      	str	r3, [r7, #48]	; 0x30
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a03c:	2300      	movs	r3, #0
 800a03e:	637b      	str	r3, [r7, #52]	; 0x34
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a040:	2300      	movs	r3, #0
 800a042:	63bb      	str	r3, [r7, #56]	; 0x38
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a044:	2300      	movs	r3, #0
 800a046:	63fb      	str	r3, [r7, #60]	; 0x3c
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a048:	2300      	movs	r3, #0
 800a04a:	643b      	str	r3, [r7, #64]	; 0x40
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a04c:	2300      	movs	r3, #0
 800a04e:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 800a050:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a054:	2200      	movs	r2, #0
 800a056:	4619      	mov	r1, r3
 800a058:	4831      	ldr	r0, [pc, #196]	; (800a120 <board_init_common_timer_init+0x1c4>)
 800a05a:	f7fd fae7 	bl	800762c <HAL_TIM_PWM_ConfigChannel>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d001      	beq.n	800a068 <board_init_common_timer_init+0x10c>
 800a064:	f000 f957 	bl	800a316 <Error_Handler>
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) Error_Handler();
 800a068:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a06c:	2204      	movs	r2, #4
 800a06e:	4619      	mov	r1, r3
 800a070:	482b      	ldr	r0, [pc, #172]	; (800a120 <board_init_common_timer_init+0x1c4>)
 800a072:	f7fd fadb 	bl	800762c <HAL_TIM_PWM_ConfigChannel>
 800a076:	4603      	mov	r3, r0
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d001      	beq.n	800a080 <board_init_common_timer_init+0x124>
 800a07c:	f000 f94b 	bl	800a316 <Error_Handler>
    if (HAL_TIM_PWM_ConfigChannel(&g_tim1_handle, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) Error_Handler();
 800a080:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a084:	2208      	movs	r2, #8
 800a086:	4619      	mov	r1, r3
 800a088:	4825      	ldr	r0, [pc, #148]	; (800a120 <board_init_common_timer_init+0x1c4>)
 800a08a:	f7fd facf 	bl	800762c <HAL_TIM_PWM_ConfigChannel>
 800a08e:	4603      	mov	r3, r0
 800a090:	2b00      	cmp	r3, #0
 800a092:	d001      	beq.n	800a098 <board_init_common_timer_init+0x13c>
 800a094:	f000 f93f 	bl	800a316 <Error_Handler>
    sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a098:	2300      	movs	r3, #0
 800a09a:	603b      	str	r3, [r7, #0]
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a09c:	2300      	movs	r3, #0
 800a09e:	607b      	str	r3, [r7, #4]
    sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	60bb      	str	r3, [r7, #8]
    sBreakDeadTimeConfig.DeadTime = 0;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	60fb      	str	r3, [r7, #12]
    sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	613b      	str	r3, [r7, #16]
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a0ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a0b0:	617b      	str	r3, [r7, #20]
    sBreakDeadTimeConfig.BreakFilter = 0;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	61bb      	str	r3, [r7, #24]
    sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	61fb      	str	r3, [r7, #28]
    sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800a0ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a0be:	623b      	str	r3, [r7, #32]
    sBreakDeadTimeConfig.Break2Filter = 0;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	627b      	str	r3, [r7, #36]	; 0x24
    sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIMEx_ConfigBreakDeadTime(&g_tim1_handle, &sBreakDeadTimeConfig) != HAL_OK) Error_Handler();
 800a0c8:	463b      	mov	r3, r7
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	4814      	ldr	r0, [pc, #80]	; (800a120 <board_init_common_timer_init+0x1c4>)
 800a0ce:	f7fe f977 	bl	80083c0 <HAL_TIMEx_ConfigBreakDeadTime>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d001      	beq.n	800a0dc <board_init_common_timer_init+0x180>
 800a0d8:	f000 f91d 	bl	800a316 <Error_Handler>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_1);
 800a0dc:	2100      	movs	r1, #0
 800a0de:	4810      	ldr	r0, [pc, #64]	; (800a120 <board_init_common_timer_init+0x1c4>)
 800a0e0:	f7fd f9bc 	bl	800745c <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_2);
 800a0e4:	2104      	movs	r1, #4
 800a0e6:	480e      	ldr	r0, [pc, #56]	; (800a120 <board_init_common_timer_init+0x1c4>)
 800a0e8:	f7fd f9b8 	bl	800745c <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_PWM_Stop_DMA(&g_tim1_handle, TIM_CHANNEL_3);
 800a0ec:	2108      	movs	r1, #8
 800a0ee:	480c      	ldr	r0, [pc, #48]	; (800a120 <board_init_common_timer_init+0x1c4>)
 800a0f0:	f7fd f9b4 	bl	800745c <HAL_TIM_PWM_Stop_DMA>
    GPIO_InitStruct.Pin = PIN_TIM1_CH1|PIN_TIM1_CH2|PIN_TIM1_CH3;
 800a0f4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800a0f8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0fa:	2302      	movs	r3, #2
 800a0fc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0fe:	2300      	movs	r3, #0
 800a100:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a102:	2300      	movs	r3, #0
 800a104:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800a106:	2301      	movs	r3, #1
 800a108:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a10a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800a10e:	4619      	mov	r1, r3
 800a110:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a114:	f7fb f96c 	bl	80053f0 <HAL_GPIO_Init>
}
 800a118:	bf00      	nop
 800a11a:	3778      	adds	r7, #120	; 0x78
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}
 800a120:	20003e80 	.word	0x20003e80
 800a124:	40012c00 	.word	0x40012c00

0800a128 <board_init_common_nvic_setup_interrupts>:


static void board_init_common_nvic_setup_interrupts(void)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	af00      	add	r7, sp, #0
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI0_IRQn);
 800a12c:	4b30      	ldr	r3, [pc, #192]	; (800a1f0 <board_init_common_nvic_setup_interrupts+0xc8>)
 800a12e:	2206      	movs	r2, #6
 800a130:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI2_IRQn);
 800a132:	4b2f      	ldr	r3, [pc, #188]	; (800a1f0 <board_init_common_nvic_setup_interrupts+0xc8>)
 800a134:	2208      	movs	r2, #8
 800a136:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI9_5_IRQn);
 800a138:	4b2d      	ldr	r3, [pc, #180]	; (800a1f0 <board_init_common_nvic_setup_interrupts+0xc8>)
 800a13a:	2217      	movs	r2, #23
 800a13c:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI15_10_IRQn);
 800a13e:	4b2c      	ldr	r3, [pc, #176]	; (800a1f0 <board_init_common_nvic_setup_interrupts+0xc8>)
 800a140:	2228      	movs	r2, #40	; 0x28
 800a142:	615a      	str	r2, [r3, #20]
    HAL_NVIC_SetPriority(EXTI0_IRQn, 24, 0);
 800a144:	2200      	movs	r2, #0
 800a146:	2118      	movs	r1, #24
 800a148:	2006      	movs	r0, #6
 800a14a:	f7fa fbc8 	bl	80048de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800a14e:	2006      	movs	r0, #6
 800a150:	f7fa fbe1 	bl	8004916 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI2_IRQn, 24, 0);
 800a154:	2200      	movs	r2, #0
 800a156:	2118      	movs	r1, #24
 800a158:	2008      	movs	r0, #8
 800a15a:	f7fa fbc0 	bl	80048de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800a15e:	2008      	movs	r0, #8
 800a160:	f7fa fbd9 	bl	8004916 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 24, 0);
 800a164:	2200      	movs	r2, #0
 800a166:	2118      	movs	r1, #24
 800a168:	2017      	movs	r0, #23
 800a16a:	f7fa fbb8 	bl	80048de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a16e:	2017      	movs	r0, #23
 800a170:	f7fa fbd1 	bl	8004916 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 24, 0);
 800a174:	2200      	movs	r2, #0
 800a176:	2118      	movs	r1, #24
 800a178:	2028      	movs	r0, #40	; 0x28
 800a17a:	f7fa fbb0 	bl	80048de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a17e:	2028      	movs	r0, #40	; 0x28
 800a180:	f7fa fbc9 	bl	8004916 <HAL_NVIC_EnableIRQ>
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI0_IRQn);
 800a184:	4b1a      	ldr	r3, [pc, #104]	; (800a1f0 <board_init_common_nvic_setup_interrupts+0xc8>)
 800a186:	2206      	movs	r2, #6
 800a188:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI2_IRQn);
 800a18a:	4b19      	ldr	r3, [pc, #100]	; (800a1f0 <board_init_common_nvic_setup_interrupts+0xc8>)
 800a18c:	2208      	movs	r2, #8
 800a18e:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI9_5_IRQn);
 800a190:	4b17      	ldr	r3, [pc, #92]	; (800a1f0 <board_init_common_nvic_setup_interrupts+0xc8>)
 800a192:	2217      	movs	r2, #23
 800a194:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(EXTI15_10_IRQn);
 800a196:	4b16      	ldr	r3, [pc, #88]	; (800a1f0 <board_init_common_nvic_setup_interrupts+0xc8>)
 800a198:	2228      	movs	r2, #40	; 0x28
 800a19a:	615a      	str	r2, [r3, #20]
    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800a19c:	2200      	movs	r2, #0
 800a19e:	2100      	movs	r1, #0
 800a1a0:	200c      	movs	r0, #12
 800a1a2:	f7fa fb9c 	bl	80048de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800a1a6:	200c      	movs	r0, #12
 800a1a8:	f7fa fbb5 	bl	8004916 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	2100      	movs	r1, #0
 800a1b0:	200d      	movs	r0, #13
 800a1b2:	f7fa fb94 	bl	80048de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800a1b6:	200d      	movs	r0, #13
 800a1b8:	f7fa fbad 	bl	8004916 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800a1bc:	2200      	movs	r2, #0
 800a1be:	2100      	movs	r1, #0
 800a1c0:	200f      	movs	r0, #15
 800a1c2:	f7fa fb8c 	bl	80048de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800a1c6:	200f      	movs	r0, #15
 800a1c8:	f7fa fba5 	bl	8004916 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	2100      	movs	r1, #0
 800a1d0:	2010      	movs	r0, #16
 800a1d2:	f7fa fb84 	bl	80048de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800a1d6:	2010      	movs	r0, #16
 800a1d8:	f7fa fb9d 	bl	8004916 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800a1dc:	2200      	movs	r2, #0
 800a1de:	2100      	movs	r1, #0
 800a1e0:	2011      	movs	r0, #17
 800a1e2:	f7fa fb7c 	bl	80048de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800a1e6:	2011      	movs	r0, #17
 800a1e8:	f7fa fb95 	bl	8004916 <HAL_NVIC_EnableIRQ>
}
 800a1ec:	bf00      	nop
 800a1ee:	bd80      	pop	{r7, pc}
 800a1f0:	40010400 	.word	0x40010400

0800a1f4 <board_init_common_setup_wakeups>:


static void board_init_common_setup_wakeups(void)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b086      	sub	sp, #24
 800a1f8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a1fa:	1d3b      	adds	r3, r7, #4
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	601a      	str	r2, [r3, #0]
 800a200:	605a      	str	r2, [r3, #4]
 800a202:	609a      	str	r2, [r3, #8]
 800a204:	60da      	str	r2, [r3, #12]
 800a206:	611a      	str	r2, [r3, #16]

    // future setup wakeups
    GPIO_InitStruct.Pin = PIN_WKUP_1|PIN_WKUP_4;
 800a208:	2305      	movs	r3, #5
 800a20a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800a20c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800a210:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a212:	2301      	movs	r3, #1
 800a214:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 800a216:	1d3b      	adds	r3, r7, #4
 800a218:	4619      	mov	r1, r3
 800a21a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a21e:	f7fb f8e7 	bl	80053f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_WKUP_2|PIN_WKUP_3;
 800a222:	f242 0320 	movw	r3, #8224	; 0x2020
 800a226:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800a228:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800a22c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a22e:	2301      	movs	r3, #1
 800a230:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800a232:	1d3b      	adds	r3, r7, #4
 800a234:	4619      	mov	r1, r3
 800a236:	4804      	ldr	r0, [pc, #16]	; (800a248 <board_init_common_setup_wakeups+0x54>)
 800a238:	f7fb f8da 	bl	80053f0 <HAL_GPIO_Init>
    board_init_common_nvic_setup_interrupts();
 800a23c:	f7ff ff74 	bl	800a128 <board_init_common_nvic_setup_interrupts>
}
 800a240:	bf00      	nop
 800a242:	3718      	adds	r7, #24
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}
 800a248:	48000800 	.word	0x48000800

0800a24c <board_init_port_wakeup>:

static void board_init_port_wakeup(void)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b087      	sub	sp, #28
 800a250:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a252:	4b21      	ldr	r3, [pc, #132]	; (800a2d8 <board_init_port_wakeup+0x8c>)
 800a254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a256:	4a20      	ldr	r2, [pc, #128]	; (800a2d8 <board_init_port_wakeup+0x8c>)
 800a258:	f043 0301 	orr.w	r3, r3, #1
 800a25c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a25e:	4b1e      	ldr	r3, [pc, #120]	; (800a2d8 <board_init_port_wakeup+0x8c>)
 800a260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a262:	f003 0301 	and.w	r3, r3, #1
 800a266:	617b      	str	r3, [r7, #20]
 800a268:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a26a:	4b1b      	ldr	r3, [pc, #108]	; (800a2d8 <board_init_port_wakeup+0x8c>)
 800a26c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a26e:	4a1a      	ldr	r2, [pc, #104]	; (800a2d8 <board_init_port_wakeup+0x8c>)
 800a270:	f043 0302 	orr.w	r3, r3, #2
 800a274:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a276:	4b18      	ldr	r3, [pc, #96]	; (800a2d8 <board_init_port_wakeup+0x8c>)
 800a278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a27a:	f003 0302 	and.w	r3, r3, #2
 800a27e:	613b      	str	r3, [r7, #16]
 800a280:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a282:	4b15      	ldr	r3, [pc, #84]	; (800a2d8 <board_init_port_wakeup+0x8c>)
 800a284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a286:	4a14      	ldr	r2, [pc, #80]	; (800a2d8 <board_init_port_wakeup+0x8c>)
 800a288:	f043 0304 	orr.w	r3, r3, #4
 800a28c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a28e:	4b12      	ldr	r3, [pc, #72]	; (800a2d8 <board_init_port_wakeup+0x8c>)
 800a290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a292:	f003 0304 	and.w	r3, r3, #4
 800a296:	60fb      	str	r3, [r7, #12]
 800a298:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800a29a:	4b0f      	ldr	r3, [pc, #60]	; (800a2d8 <board_init_port_wakeup+0x8c>)
 800a29c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a29e:	4a0e      	ldr	r2, [pc, #56]	; (800a2d8 <board_init_port_wakeup+0x8c>)
 800a2a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a2a6:	4b0c      	ldr	r3, [pc, #48]	; (800a2d8 <board_init_port_wakeup+0x8c>)
 800a2a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2ae:	60bb      	str	r3, [r7, #8]
 800a2b0:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_DMA1_CLK_ENABLE();
 800a2b2:	4b09      	ldr	r3, [pc, #36]	; (800a2d8 <board_init_port_wakeup+0x8c>)
 800a2b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2b6:	4a08      	ldr	r2, [pc, #32]	; (800a2d8 <board_init_port_wakeup+0x8c>)
 800a2b8:	f043 0301 	orr.w	r3, r3, #1
 800a2bc:	6493      	str	r3, [r2, #72]	; 0x48
 800a2be:	4b06      	ldr	r3, [pc, #24]	; (800a2d8 <board_init_port_wakeup+0x8c>)
 800a2c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2c2:	f003 0301 	and.w	r3, r3, #1
 800a2c6:	607b      	str	r3, [r7, #4]
 800a2c8:	687b      	ldr	r3, [r7, #4]
}
 800a2ca:	bf00      	nop
 800a2cc:	371c      	adds	r7, #28
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d4:	4770      	bx	lr
 800a2d6:	bf00      	nop
 800a2d8:	40021000 	.word	0x40021000

0800a2dc <board_init_common_board_init>:


void board_init_common_board_init(void)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	af00      	add	r7, sp, #0
    srand(time(0));
 800a2e0:	2000      	movs	r0, #0
 800a2e2:	f001 fb57 	bl	800b994 <time>
 800a2e6:	4602      	mov	r2, r0
 800a2e8:	460b      	mov	r3, r1
 800a2ea:	4613      	mov	r3, r2
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f001 fa59 	bl	800b7a4 <srand>
    HAL_Init();
 800a2f2:	f7fa f953 	bl	800459c <HAL_Init>
    SystemClock_Config();
 800a2f6:	f7ff fdc9 	bl	8009e8c <SystemClock_Config>

    board_init_port_wakeup();
 800a2fa:	f7ff ffa7 	bl	800a24c <board_init_port_wakeup>
    board_init_common_setup_wakeups();
 800a2fe:	f7ff ff79 	bl	800a1f4 <board_init_common_setup_wakeups>
    board_init_specific();
 800a302:	f001 f839 	bl	800b378 <board_init_specific>

    board_init_common_timer_init();
 800a306:	f7ff fe29 	bl	8009f5c <board_init_common_timer_init>

    ws2812b_init();
 800a30a:	f7f6 fbeb 	bl	8000ae4 <ws2812b_init>

    board_init_common_rtc_init();
 800a30e:	f7ff fd95 	bl	8009e3c <board_init_common_rtc_init>
}
 800a312:	bf00      	nop
 800a314:	bd80      	pop	{r7, pc}

0800a316 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a316:	b480      	push	{r7}
 800a318:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800a31a:	b672      	cpsid	i
}
 800a31c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a31e:	e7fe      	b.n	800a31e <Error_Handler+0x8>

0800a320 <flash_access_erase_slot>:
    memcpy(p_data, (void *)flash_sub_block_address, 2048);
}


void flash_access_erase_slot(void)
{
 800a320:	b5b0      	push	{r4, r5, r7, lr}
 800a322:	b086      	sub	sp, #24
 800a324:	af00      	add	r7, sp, #0
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t page_error = 0;
 800a326:	2400      	movs	r4, #0
 800a328:	607c      	str	r4, [r7, #4]
    uint16_t num_double_words = (0x8020000 - FLASH_START_ADDRESS) / sizeof(uint64_t);
 800a32a:	f44f 4480 	mov.w	r4, #16384	; 0x4000
 800a32e:	82fc      	strh	r4, [r7, #22]

	uint32_t start_page_num = (0x8020000 - FLASH_START_ADDRESS)/ FLASH_PAGE_SIZE;
 800a330:	2440      	movs	r4, #64	; 0x40
 800a332:	613c      	str	r4, [r7, #16]
	uint32_t end_page_address = 0x8020000 + num_double_words;
 800a334:	8afc      	ldrh	r4, [r7, #22]
 800a336:	f104 6400 	add.w	r4, r4, #134217728	; 0x8000000
 800a33a:	f504 3400 	add.w	r4, r4, #131072	; 0x20000
 800a33e:	60fc      	str	r4, [r7, #12]
	uint32_t end_page_num = (end_page_address - FLASH_START_ADDRESS) / FLASH_PAGE_SIZE;
 800a340:	68fc      	ldr	r4, [r7, #12]
 800a342:	2500      	movs	r5, #0
 800a344:	4620      	mov	r0, r4
 800a346:	4629      	mov	r1, r5
 800a348:	f110 4278 	adds.w	r2, r0, #4160749568	; 0xf8000000
 800a34c:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
 800a350:	f04f 0000 	mov.w	r0, #0
 800a354:	f04f 0100 	mov.w	r1, #0
 800a358:	0ad0      	lsrs	r0, r2, #11
 800a35a:	ea40 5043 	orr.w	r0, r0, r3, lsl #21
 800a35e:	0ad9      	lsrs	r1, r3, #11
 800a360:	4603      	mov	r3, r0
 800a362:	60bb      	str	r3, [r7, #8]

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 800a364:	4b0f      	ldr	r3, [pc, #60]	; (800a3a4 <flash_access_erase_slot+0x84>)
 800a366:	2200      	movs	r2, #0
 800a368:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Page        = start_page_num;
 800a36a:	4a0e      	ldr	r2, [pc, #56]	; (800a3a4 <flash_access_erase_slot+0x84>)
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	6093      	str	r3, [r2, #8]
	EraseInitStruct.Banks       = FLASH_BANK_1;
 800a370:	4b0c      	ldr	r3, [pc, #48]	; (800a3a4 <flash_access_erase_slot+0x84>)
 800a372:	2201      	movs	r2, #1
 800a374:	605a      	str	r2, [r3, #4]
	EraseInitStruct.NbPages     = ((end_page_num - start_page_num)) +1;
 800a376:	68ba      	ldr	r2, [r7, #8]
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	1ad3      	subs	r3, r2, r3
 800a37c:	3301      	adds	r3, #1
 800a37e:	4a09      	ldr	r2, [pc, #36]	; (800a3a4 <flash_access_erase_slot+0x84>)
 800a380:	60d3      	str	r3, [r2, #12]

	HAL_FLASH_Unlock();
 800a382:	f7fa fe29 	bl	8004fd8 <HAL_FLASH_Unlock>

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &page_error) != HAL_OK) while (1);
 800a386:	1d3b      	adds	r3, r7, #4
 800a388:	4619      	mov	r1, r3
 800a38a:	4806      	ldr	r0, [pc, #24]	; (800a3a4 <flash_access_erase_slot+0x84>)
 800a38c:	f7fa ff0a 	bl	80051a4 <HAL_FLASHEx_Erase>
 800a390:	4603      	mov	r3, r0
 800a392:	2b00      	cmp	r3, #0
 800a394:	d000      	beq.n	800a398 <flash_access_erase_slot+0x78>
 800a396:	e7fe      	b.n	800a396 <flash_access_erase_slot+0x76>

	HAL_FLASH_Unlock();
 800a398:	f7fa fe1e 	bl	8004fd8 <HAL_FLASH_Unlock>
}
 800a39c:	bf00      	nop
 800a39e:	3718      	adds	r7, #24
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bdb0      	pop	{r4, r5, r7, pc}
 800a3a4:	20003ecc 	.word	0x20003ecc

0800a3a8 <flash_access_write_sector_with_address>:
}

extern bool g_buffer_full;
uint64_t g_prog_flash_val = 9;
void flash_access_write_sector_with_address(uint64_t *p_data, uint32_t address)
{
 800a3a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a3ac:	b08e      	sub	sp, #56	; 0x38
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
 800a3b2:	6039      	str	r1, [r7, #0]
//    static FLASH_EraseInitTypeDef EraseInitStruct;
    uint16_t num_double_words = FLASH_INFO_SUB_BLOCK_SECTOR_SIZE_BYTES / sizeof(uint64_t);
 800a3b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a3b8:	86b9      	strh	r1, [r7, #52]	; 0x34
    uint32_t page_error = 0;
 800a3ba:	2100      	movs	r1, #0
 800a3bc:	6339      	str	r1, [r7, #48]	; 0x30

    uint32_t start_page_num = (address - FLASH_START_ADDRESS)/ FLASH_PAGE_SIZE;
 800a3be:	6839      	ldr	r1, [r7, #0]
 800a3c0:	2000      	movs	r0, #0
 800a3c2:	468a      	mov	sl, r1
 800a3c4:	4683      	mov	fp, r0
 800a3c6:	f11a 4478 	adds.w	r4, sl, #4160749568	; 0xf8000000
 800a3ca:	f14b 35ff 	adc.w	r5, fp, #4294967295	; 0xffffffff
 800a3ce:	f04f 0000 	mov.w	r0, #0
 800a3d2:	f04f 0100 	mov.w	r1, #0
 800a3d6:	0ae0      	lsrs	r0, r4, #11
 800a3d8:	ea40 5045 	orr.w	r0, r0, r5, lsl #21
 800a3dc:	0ae9      	lsrs	r1, r5, #11
 800a3de:	4601      	mov	r1, r0
 800a3e0:	62f9      	str	r1, [r7, #44]	; 0x2c
    uint32_t end_page_address = address + num_double_words;
 800a3e2:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 800a3e4:	6838      	ldr	r0, [r7, #0]
 800a3e6:	4401      	add	r1, r0
 800a3e8:	62b9      	str	r1, [r7, #40]	; 0x28
    uint32_t end_page_num = (end_page_address - FLASH_START_ADDRESS) / FLASH_PAGE_SIZE;
 800a3ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a3ec:	2000      	movs	r0, #0
 800a3ee:	4688      	mov	r8, r1
 800a3f0:	4681      	mov	r9, r0
 800a3f2:	f118 4278 	adds.w	r2, r8, #4160749568	; 0xf8000000
 800a3f6:	f149 33ff 	adc.w	r3, r9, #4294967295	; 0xffffffff
 800a3fa:	f04f 0000 	mov.w	r0, #0
 800a3fe:	f04f 0100 	mov.w	r1, #0
 800a402:	0ad0      	lsrs	r0, r2, #11
 800a404:	ea40 5043 	orr.w	r0, r0, r3, lsl #21
 800a408:	0ad9      	lsrs	r1, r3, #11
 800a40a:	4603      	mov	r3, r0
 800a40c:	627b      	str	r3, [r7, #36]	; 0x24
//    EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
//    EraseInitStruct.Page        = start_page_num;
//    EraseInitStruct.Banks       = FLASH_BANK_1;
//    EraseInitStruct.NbPages     = ((end_page_num - start_page_num)) +1;

    HAL_FLASH_Unlock();
 800a40e:	f7fa fde3 	bl	8004fd8 <HAL_FLASH_Unlock>

//    if (HAL_FLASHEx_Erase(&EraseInitStruct, &page_error) != HAL_OK) while (1);
    uint64_t constructed_value = 0;
 800a412:	f04f 0200 	mov.w	r2, #0
 800a416:	f04f 0300 	mov.w	r3, #0
 800a41a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    uint64_t most_sig = 0;
 800a41e:	f04f 0200 	mov.w	r2, #0
 800a422:	f04f 0300 	mov.w	r3, #0
 800a426:	e9c7 2304 	strd	r2, r3, [r7, #16]
    uint64_t least_sig = 0;
 800a42a:	f04f 0200 	mov.w	r2, #0
 800a42e:	f04f 0300 	mov.w	r3, #0
 800a432:	e9c7 2302 	strd	r2, r3, [r7, #8]
    for (uint16_t iii = 0; iii < num_double_words; iii++)
 800a436:	2300      	movs	r3, #0
 800a438:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a43a:	e014      	b.n	800a466 <flash_access_write_sector_with_address+0xbe>
//    	most_sig = __builtin_bswap32(most_sig);
//    	constructed_value = (most_sig << 32) | (least_sig);
    	//while (!gb_flash_write_done) osDelay(1);
		//gb_flash_write_done = false;
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, \
						address + (iii * sizeof(uint64_t)), \
 800a43c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a43e:	00da      	lsls	r2, r3, #3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, \
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	18d1      	adds	r1, r2, r3
						*(p_data + (iii)));
 800a444:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a446:	00db      	lsls	r3, r3, #3
 800a448:	687a      	ldr	r2, [r7, #4]
 800a44a:	4413      	add	r3, r2
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, \
 800a44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a450:	2000      	movs	r0, #0
 800a452:	f7fa fd55 	bl	8004f00 <HAL_FLASH_Program>
		if (g_buffer_full) while(1);
 800a456:	4b09      	ldr	r3, [pc, #36]	; (800a47c <flash_access_write_sector_with_address+0xd4>)
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d000      	beq.n	800a460 <flash_access_write_sector_with_address+0xb8>
 800a45e:	e7fe      	b.n	800a45e <flash_access_write_sector_with_address+0xb6>
    for (uint16_t iii = 0; iii < num_double_words; iii++)
 800a460:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a462:	3301      	adds	r3, #1
 800a464:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a466:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a468:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a46a:	429a      	cmp	r2, r3
 800a46c:	d3e6      	bcc.n	800a43c <flash_access_write_sector_with_address+0x94>
    }

    HAL_FLASH_Lock();
 800a46e:	f7fa fdd5 	bl	800501c <HAL_FLASH_Lock>
}
 800a472:	bf00      	nop
 800a474:	3738      	adds	r7, #56	; 0x38
 800a476:	46bd      	mov	sp, r7
 800a478:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a47c:	20003ee6 	.word	0x20003ee6

0800a480 <spi_config_hal_setup>:
}



void spi_config_hal_setup(void)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b088      	sub	sp, #32
 800a484:	af00      	add	r7, sp, #0
    //RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
    GPIO_InitTypeDef  GPIO_InitStruct;

    for (spi_config_bus_e bus = SPI_CONFIG_BUS_FIRST; bus < NUM_SPI_CONFIG_BUSES; bus++)
 800a486:	2300      	movs	r3, #0
 800a488:	77fb      	strb	r3, [r7, #31]
 800a48a:	e0a3      	b.n	800a5d4 <spi_config_hal_setup+0x154>
    {
    	if (g_spi_num_chips_per_bus[bus])
 800a48c:	7ffb      	ldrb	r3, [r7, #31]
 800a48e:	4a56      	ldr	r2, [pc, #344]	; (800a5e8 <spi_config_hal_setup+0x168>)
 800a490:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a494:	2b00      	cmp	r3, #0
 800a496:	f000 809a 	beq.w	800a5ce <spi_config_hal_setup+0x14e>
    	{
    	    GPIO_InitStruct.Pin       = g_spi_config[bus].pin.mosi;
 800a49a:	7ffa      	ldrb	r2, [r7, #31]
 800a49c:	4953      	ldr	r1, [pc, #332]	; (800a5ec <spi_config_hal_setup+0x16c>)
 800a49e:	4613      	mov	r3, r2
 800a4a0:	009b      	lsls	r3, r3, #2
 800a4a2:	4413      	add	r3, r2
 800a4a4:	00db      	lsls	r3, r3, #3
 800a4a6:	440b      	add	r3, r1
 800a4a8:	881b      	ldrh	r3, [r3, #0]
 800a4aa:	60bb      	str	r3, [r7, #8]
    	    GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	60fb      	str	r3, [r7, #12]
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	613b      	str	r3, [r7, #16]
    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	617b      	str	r3, [r7, #20]
//    	    GPIO_InitStruct.Alternate = g_spi_config[bus].pin.mosi_alt_func;
    	    HAL_GPIO_Init(g_spi_config[bus].pin.mosi_port, &GPIO_InitStruct);
 800a4b8:	7ffa      	ldrb	r2, [r7, #31]
 800a4ba:	494c      	ldr	r1, [pc, #304]	; (800a5ec <spi_config_hal_setup+0x16c>)
 800a4bc:	4613      	mov	r3, r2
 800a4be:	009b      	lsls	r3, r3, #2
 800a4c0:	4413      	add	r3, r2
 800a4c2:	00db      	lsls	r3, r3, #3
 800a4c4:	440b      	add	r3, r1
 800a4c6:	3304      	adds	r3, #4
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f107 0208 	add.w	r2, r7, #8
 800a4ce:	4611      	mov	r1, r2
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f7fa ff8d 	bl	80053f0 <HAL_GPIO_Init>

    	    GPIO_InitStruct.Pin       = g_spi_config[bus].pin.miso;
 800a4d6:	7ffa      	ldrb	r2, [r7, #31]
 800a4d8:	4944      	ldr	r1, [pc, #272]	; (800a5ec <spi_config_hal_setup+0x16c>)
 800a4da:	4613      	mov	r3, r2
 800a4dc:	009b      	lsls	r3, r3, #2
 800a4de:	4413      	add	r3, r2
 800a4e0:	00db      	lsls	r3, r3, #3
 800a4e2:	440b      	add	r3, r1
 800a4e4:	330a      	adds	r3, #10
 800a4e6:	881b      	ldrh	r3, [r3, #0]
 800a4e8:	60bb      	str	r3, [r7, #8]
    	    GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	60fb      	str	r3, [r7, #12]
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	613b      	str	r3, [r7, #16]
    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	617b      	str	r3, [r7, #20]
//    	    GPIO_InitStruct.Alternate = g_spi_config[bus].pin.miso_alt_func;
    	    HAL_GPIO_Init(g_spi_config[bus].pin.miso_port, &GPIO_InitStruct);
 800a4f6:	7ffa      	ldrb	r2, [r7, #31]
 800a4f8:	493c      	ldr	r1, [pc, #240]	; (800a5ec <spi_config_hal_setup+0x16c>)
 800a4fa:	4613      	mov	r3, r2
 800a4fc:	009b      	lsls	r3, r3, #2
 800a4fe:	4413      	add	r3, r2
 800a500:	00db      	lsls	r3, r3, #3
 800a502:	440b      	add	r3, r1
 800a504:	330c      	adds	r3, #12
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f107 0208 	add.w	r2, r7, #8
 800a50c:	4611      	mov	r1, r2
 800a50e:	4618      	mov	r0, r3
 800a510:	f7fa ff6e 	bl	80053f0 <HAL_GPIO_Init>

    	    GPIO_InitStruct.Pin       = g_spi_config[bus].pin.sck;
 800a514:	7ffa      	ldrb	r2, [r7, #31]
 800a516:	4935      	ldr	r1, [pc, #212]	; (800a5ec <spi_config_hal_setup+0x16c>)
 800a518:	4613      	mov	r3, r2
 800a51a:	009b      	lsls	r3, r3, #2
 800a51c:	4413      	add	r3, r2
 800a51e:	00db      	lsls	r3, r3, #3
 800a520:	440b      	add	r3, r1
 800a522:	3312      	adds	r3, #18
 800a524:	881b      	ldrh	r3, [r3, #0]
 800a526:	60bb      	str	r3, [r7, #8]
    	    GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 800a528:	2300      	movs	r3, #0
 800a52a:	60fb      	str	r3, [r7, #12]
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800a52c:	2300      	movs	r3, #0
 800a52e:	613b      	str	r3, [r7, #16]
    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 800a530:	2300      	movs	r3, #0
 800a532:	617b      	str	r3, [r7, #20]
//    	    GPIO_InitStruct.Alternate = g_spi_config[bus].pin.sck_alt_func;
    	    HAL_GPIO_Init(g_spi_config[bus].pin.sck_port, &GPIO_InitStruct);
 800a534:	7ffa      	ldrb	r2, [r7, #31]
 800a536:	492d      	ldr	r1, [pc, #180]	; (800a5ec <spi_config_hal_setup+0x16c>)
 800a538:	4613      	mov	r3, r2
 800a53a:	009b      	lsls	r3, r3, #2
 800a53c:	4413      	add	r3, r2
 800a53e:	00db      	lsls	r3, r3, #3
 800a540:	440b      	add	r3, r1
 800a542:	3314      	adds	r3, #20
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f107 0208 	add.w	r2, r7, #8
 800a54a:	4611      	mov	r1, r2
 800a54c:	4618      	mov	r0, r3
 800a54e:	f7fa ff4f 	bl	80053f0 <HAL_GPIO_Init>

    	    GPIO_InitStruct.Pin       = g_spi_config[bus].pin.csn;
 800a552:	7ffa      	ldrb	r2, [r7, #31]
 800a554:	4925      	ldr	r1, [pc, #148]	; (800a5ec <spi_config_hal_setup+0x16c>)
 800a556:	4613      	mov	r3, r2
 800a558:	009b      	lsls	r3, r3, #2
 800a55a:	4413      	add	r3, r2
 800a55c:	00db      	lsls	r3, r3, #3
 800a55e:	440b      	add	r3, r1
 800a560:	331a      	adds	r3, #26
 800a562:	881b      	ldrh	r3, [r3, #0]
 800a564:	60bb      	str	r3, [r7, #8]
    	    GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 800a566:	2300      	movs	r3, #0
 800a568:	60fb      	str	r3, [r7, #12]
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800a56a:	2300      	movs	r3, #0
 800a56c:	613b      	str	r3, [r7, #16]
//    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
    	    HAL_GPIO_Init(g_spi_config[bus].pin.csn_port, &GPIO_InitStruct);
 800a56e:	7ffa      	ldrb	r2, [r7, #31]
 800a570:	491e      	ldr	r1, [pc, #120]	; (800a5ec <spi_config_hal_setup+0x16c>)
 800a572:	4613      	mov	r3, r2
 800a574:	009b      	lsls	r3, r3, #2
 800a576:	4413      	add	r3, r2
 800a578:	00db      	lsls	r3, r3, #3
 800a57a:	440b      	add	r3, r1
 800a57c:	331c      	adds	r3, #28
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f107 0208 	add.w	r2, r7, #8
 800a584:	4611      	mov	r1, r2
 800a586:	4618      	mov	r0, r3
 800a588:	f7fa ff32 	bl	80053f0 <HAL_GPIO_Init>

        	switch (bus)
 800a58c:	7ffb      	ldrb	r3, [r7, #31]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d10c      	bne.n	800a5ac <spi_config_hal_setup+0x12c>
        	{
        		case SPI_CONFIG_BUS_WIFI:
        		    __HAL_RCC_SPI1_CLK_ENABLE();
 800a592:	4b17      	ldr	r3, [pc, #92]	; (800a5f0 <spi_config_hal_setup+0x170>)
 800a594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a596:	4a16      	ldr	r2, [pc, #88]	; (800a5f0 <spi_config_hal_setup+0x170>)
 800a598:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a59c:	6613      	str	r3, [r2, #96]	; 0x60
 800a59e:	4b14      	ldr	r3, [pc, #80]	; (800a5f0 <spi_config_hal_setup+0x170>)
 800a5a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a5a6:	607b      	str	r3, [r7, #4]
 800a5a8:	687b      	ldr	r3, [r7, #4]
        		break;
 800a5aa:	e000      	b.n	800a5ae <spi_config_hal_setup+0x12e>
        		default:
				break;
 800a5ac:	bf00      	nop
        	}
    	    if(HAL_SPI_Init(g_spi_config[bus].handle) != HAL_OK)
 800a5ae:	7ffa      	ldrb	r2, [r7, #31]
 800a5b0:	490e      	ldr	r1, [pc, #56]	; (800a5ec <spi_config_hal_setup+0x16c>)
 800a5b2:	4613      	mov	r3, r2
 800a5b4:	009b      	lsls	r3, r3, #2
 800a5b6:	4413      	add	r3, r2
 800a5b8:	00db      	lsls	r3, r3, #3
 800a5ba:	440b      	add	r3, r1
 800a5bc:	3324      	adds	r3, #36	; 0x24
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f7fc fbf7 	bl	8006db4 <HAL_SPI_Init>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d000      	beq.n	800a5ce <spi_config_hal_setup+0x14e>
    	    {
    	        /* Initialization Error */
    	        while(1);
 800a5cc:	e7fe      	b.n	800a5cc <spi_config_hal_setup+0x14c>
    for (spi_config_bus_e bus = SPI_CONFIG_BUS_FIRST; bus < NUM_SPI_CONFIG_BUSES; bus++)
 800a5ce:	7ffb      	ldrb	r3, [r7, #31]
 800a5d0:	3301      	adds	r3, #1
 800a5d2:	77fb      	strb	r3, [r7, #31]
 800a5d4:	7ffb      	ldrb	r3, [r7, #31]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	f43f af58 	beq.w	800a48c <spi_config_hal_setup+0xc>
    // TODO make this an array that gets populated so you don't need to lookup everytime..
//    for (spi_access_chip_id_e chip_id = SPI_ACCESS_CHIP_ID_FIRST; chip_id < NUM_SPI_ACCESS_CHIP_IDS; chip_id++)
//    {
//    	g_spi_chip_id_handle[chip_id] = spi_config_bus_lookup_from_chip_id(chip_id);
//    }
}
 800a5dc:	bf00      	nop
 800a5de:	bf00      	nop
 800a5e0:	3720      	adds	r7, #32
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	200002a8 	.word	0x200002a8
 800a5ec:	0800c8dc 	.word	0x0800c8dc
 800a5f0:	40021000 	.word	0x40021000

0800a5f4 <USART1_IRQHandler>:
uint8_t *gh_uart_rx_buffer;
uint16_t g_uart_rx_buffer_index = 0;


void USART1_IRQHandler(void)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(uart_config_esp8266_handle());
 800a5f8:	f000 fa38 	bl	800aa6c <uart_config_esp8266_handle>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	4618      	mov	r0, r3
 800a600:	f7fe f986 	bl	8008910 <HAL_UART_IRQHandler>
}
 800a604:	bf00      	nop
 800a606:	bd80      	pop	{r7, pc}

0800a608 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a608:	b480      	push	{r7}
 800a60a:	b083      	sub	sp, #12
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
	// do something in future
}
 800a610:	bf00      	nop
 800a612:	370c      	adds	r7, #12
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <HAL_UART_RxCpltCallback>:
uint8_t* g_uart_sector_full_buffer;
uint16_t g_uart_sector_index = 0;
ping_pong_e ping_pong = PING;
uint32_t g_uart_firmware_count = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a61c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a61e:	b083      	sub	sp, #12
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
	// save time of rx.  Unknown amounts of data are sent back from ESP8266..  Need to use timeout functionality to know we're done rxing.
	if (g_firmware_update_in_progress)
 800a624:	4b40      	ldr	r3, [pc, #256]	; (800a728 <HAL_UART_RxCpltCallback+0x10c>)
 800a626:	781b      	ldrb	r3, [r3, #0]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d062      	beq.n	800a6f2 <HAL_UART_RxCpltCallback+0xd6>
	{
		g_uart_firmware_count++;
 800a62c:	4b3f      	ldr	r3, [pc, #252]	; (800a72c <HAL_UART_RxCpltCallback+0x110>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	3301      	adds	r3, #1
 800a632:	4a3e      	ldr	r2, [pc, #248]	; (800a72c <HAL_UART_RxCpltCallback+0x110>)
 800a634:	6013      	str	r3, [r2, #0]
		static bool first_pass = true;
		if (first_pass)
 800a636:	4b3e      	ldr	r3, [pc, #248]	; (800a730 <HAL_UART_RxCpltCallback+0x114>)
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d027      	beq.n	800a68e <HAL_UART_RxCpltCallback+0x72>
		{
			first_pass = false;
 800a63e:	4b3c      	ldr	r3, [pc, #240]	; (800a730 <HAL_UART_RxCpltCallback+0x114>)
 800a640:	2200      	movs	r2, #0
 800a642:	701a      	strb	r2, [r3, #0]
			memcpy(g_uart_sector_buffer, gh_uart_rx_buffer + esp8266_read_start_of_binary_index() + 1, g_uart_rx_buffer_index - (esp8266_read_start_of_binary_index() + 1));
 800a644:	4b3b      	ldr	r3, [pc, #236]	; (800a734 <HAL_UART_RxCpltCallback+0x118>)
 800a646:	681d      	ldr	r5, [r3, #0]
 800a648:	4b3b      	ldr	r3, [pc, #236]	; (800a738 <HAL_UART_RxCpltCallback+0x11c>)
 800a64a:	681c      	ldr	r4, [r3, #0]
 800a64c:	f7f6 ff3e 	bl	80014cc <esp8266_read_start_of_binary_index>
 800a650:	4603      	mov	r3, r0
 800a652:	3301      	adds	r3, #1
 800a654:	441c      	add	r4, r3
 800a656:	4b39      	ldr	r3, [pc, #228]	; (800a73c <HAL_UART_RxCpltCallback+0x120>)
 800a658:	881b      	ldrh	r3, [r3, #0]
 800a65a:	461e      	mov	r6, r3
 800a65c:	f7f6 ff36 	bl	80014cc <esp8266_read_start_of_binary_index>
 800a660:	4603      	mov	r3, r0
 800a662:	3301      	adds	r3, #1
 800a664:	1af3      	subs	r3, r6, r3
 800a666:	461a      	mov	r2, r3
 800a668:	4621      	mov	r1, r4
 800a66a:	4628      	mov	r0, r5
 800a66c:	f001 f9fb 	bl	800ba66 <memcpy>
			g_uart_sector_index += g_uart_rx_buffer_index - (esp8266_read_start_of_binary_index() + 1);
 800a670:	4b32      	ldr	r3, [pc, #200]	; (800a73c <HAL_UART_RxCpltCallback+0x120>)
 800a672:	881b      	ldrh	r3, [r3, #0]
 800a674:	461c      	mov	r4, r3
 800a676:	f7f6 ff29 	bl	80014cc <esp8266_read_start_of_binary_index>
 800a67a:	4603      	mov	r3, r0
 800a67c:	3301      	adds	r3, #1
 800a67e:	1ae3      	subs	r3, r4, r3
 800a680:	b29a      	uxth	r2, r3
 800a682:	4b2f      	ldr	r3, [pc, #188]	; (800a740 <HAL_UART_RxCpltCallback+0x124>)
 800a684:	881b      	ldrh	r3, [r3, #0]
 800a686:	4413      	add	r3, r2
 800a688:	b29a      	uxth	r2, r3
 800a68a:	4b2d      	ldr	r3, [pc, #180]	; (800a740 <HAL_UART_RxCpltCallback+0x124>)
 800a68c:	801a      	strh	r2, [r3, #0]
		}
		if (HAL_OK != HAL_UART_Receive_IT(huart, (uint8_t *)(g_uart_sector_buffer + (g_uart_sector_index++)), 1))
 800a68e:	4b29      	ldr	r3, [pc, #164]	; (800a734 <HAL_UART_RxCpltCallback+0x118>)
 800a690:	681a      	ldr	r2, [r3, #0]
 800a692:	4b2b      	ldr	r3, [pc, #172]	; (800a740 <HAL_UART_RxCpltCallback+0x124>)
 800a694:	881b      	ldrh	r3, [r3, #0]
 800a696:	1c59      	adds	r1, r3, #1
 800a698:	b288      	uxth	r0, r1
 800a69a:	4929      	ldr	r1, [pc, #164]	; (800a740 <HAL_UART_RxCpltCallback+0x124>)
 800a69c:	8008      	strh	r0, [r1, #0]
 800a69e:	4413      	add	r3, r2
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f7fe f8dd 	bl	8008864 <HAL_UART_Receive_IT>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d000      	beq.n	800a6b2 <HAL_UART_RxCpltCallback+0x96>
		{
			while (1);
 800a6b0:	e7fe      	b.n	800a6b0 <HAL_UART_RxCpltCallback+0x94>
		}
		g_uart_sector_index %= 2048;
 800a6b2:	4b23      	ldr	r3, [pc, #140]	; (800a740 <HAL_UART_RxCpltCallback+0x124>)
 800a6b4:	881b      	ldrh	r3, [r3, #0]
 800a6b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a6ba:	b29a      	uxth	r2, r3
 800a6bc:	4b20      	ldr	r3, [pc, #128]	; (800a740 <HAL_UART_RxCpltCallback+0x124>)
 800a6be:	801a      	strh	r2, [r3, #0]
		if (!g_uart_sector_index)
 800a6c0:	4b1f      	ldr	r3, [pc, #124]	; (800a740 <HAL_UART_RxCpltCallback+0x124>)
 800a6c2:	881b      	ldrh	r3, [r3, #0]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d12b      	bne.n	800a720 <HAL_UART_RxCpltCallback+0x104>
		{
			if (PING == ping_pong)
 800a6c8:	4b1e      	ldr	r3, [pc, #120]	; (800a744 <HAL_UART_RxCpltCallback+0x128>)
 800a6ca:	781b      	ldrb	r3, [r3, #0]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d106      	bne.n	800a6de <HAL_UART_RxCpltCallback+0xc2>
			{
				g_uart_sector_buffer = g_uart_sector_pong;
 800a6d0:	4b18      	ldr	r3, [pc, #96]	; (800a734 <HAL_UART_RxCpltCallback+0x118>)
 800a6d2:	4a1d      	ldr	r2, [pc, #116]	; (800a748 <HAL_UART_RxCpltCallback+0x12c>)
 800a6d4:	601a      	str	r2, [r3, #0]
				g_uart_sector_full_buffer = g_uart_sector_ping;
 800a6d6:	4b1d      	ldr	r3, [pc, #116]	; (800a74c <HAL_UART_RxCpltCallback+0x130>)
 800a6d8:	4a1d      	ldr	r2, [pc, #116]	; (800a750 <HAL_UART_RxCpltCallback+0x134>)
 800a6da:	601a      	str	r2, [r3, #0]
 800a6dc:	e005      	b.n	800a6ea <HAL_UART_RxCpltCallback+0xce>
			}
			else
			{
				g_uart_sector_buffer = g_uart_sector_ping;
 800a6de:	4b15      	ldr	r3, [pc, #84]	; (800a734 <HAL_UART_RxCpltCallback+0x118>)
 800a6e0:	4a1b      	ldr	r2, [pc, #108]	; (800a750 <HAL_UART_RxCpltCallback+0x134>)
 800a6e2:	601a      	str	r2, [r3, #0]
				g_uart_sector_full_buffer = g_uart_sector_pong;
 800a6e4:	4b19      	ldr	r3, [pc, #100]	; (800a74c <HAL_UART_RxCpltCallback+0x130>)
 800a6e6:	4a18      	ldr	r2, [pc, #96]	; (800a748 <HAL_UART_RxCpltCallback+0x12c>)
 800a6e8:	601a      	str	r2, [r3, #0]
			}
			g_buffer_full = true;
 800a6ea:	4b1a      	ldr	r3, [pc, #104]	; (800a754 <HAL_UART_RxCpltCallback+0x138>)
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	701a      	strb	r2, [r3, #0]
		if (HAL_OK != HAL_UART_Receive_IT(huart, (uint8_t *)(gh_uart_rx_buffer + (g_uart_rx_buffer_index++)), 1))
		{
			while (1);
		}
	}
}
 800a6f0:	e016      	b.n	800a720 <HAL_UART_RxCpltCallback+0x104>
		g_receive_tick_time = xTaskGetTickCount();
 800a6f2:	f7f8 fa6b 	bl	8002bcc <xTaskGetTickCount>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	4a17      	ldr	r2, [pc, #92]	; (800a758 <HAL_UART_RxCpltCallback+0x13c>)
 800a6fa:	6013      	str	r3, [r2, #0]
		if (HAL_OK != HAL_UART_Receive_IT(huart, (uint8_t *)(gh_uart_rx_buffer + (g_uart_rx_buffer_index++)), 1))
 800a6fc:	4b0e      	ldr	r3, [pc, #56]	; (800a738 <HAL_UART_RxCpltCallback+0x11c>)
 800a6fe:	681a      	ldr	r2, [r3, #0]
 800a700:	4b0e      	ldr	r3, [pc, #56]	; (800a73c <HAL_UART_RxCpltCallback+0x120>)
 800a702:	881b      	ldrh	r3, [r3, #0]
 800a704:	1c59      	adds	r1, r3, #1
 800a706:	b288      	uxth	r0, r1
 800a708:	490c      	ldr	r1, [pc, #48]	; (800a73c <HAL_UART_RxCpltCallback+0x120>)
 800a70a:	8008      	strh	r0, [r1, #0]
 800a70c:	4413      	add	r3, r2
 800a70e:	2201      	movs	r2, #1
 800a710:	4619      	mov	r1, r3
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f7fe f8a6 	bl	8008864 <HAL_UART_Receive_IT>
 800a718:	4603      	mov	r3, r0
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d000      	beq.n	800a720 <HAL_UART_RxCpltCallback+0x104>
			while (1);
 800a71e:	e7fe      	b.n	800a71e <HAL_UART_RxCpltCallback+0x102>
}
 800a720:	bf00      	nop
 800a722:	370c      	adds	r7, #12
 800a724:	46bd      	mov	sp, r7
 800a726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a728:	20003ee7 	.word	0x20003ee7
 800a72c:	20004ef0 	.word	0x20004ef0
 800a730:	20000238 	.word	0x20000238
 800a734:	20000234 	.word	0x20000234
 800a738:	20003ee0 	.word	0x20003ee0
 800a73c:	20003ee4 	.word	0x20003ee4
 800a740:	20004eec 	.word	0x20004eec
 800a744:	20004eee 	.word	0x20004eee
 800a748:	200046e8 	.word	0x200046e8
 800a74c:	20004ee8 	.word	0x20004ee8
 800a750:	20003ee8 	.word	0x20003ee8
 800a754:	20003ee6 	.word	0x20003ee6
 800a758:	20003edc 	.word	0x20003edc

0800a75c <uart_access_hal_rx_tick_time_reset>:


static TickType_t uart_access_hal_rx_tick_time_reset(void)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	af00      	add	r7, sp, #0
	g_receive_tick_time = xTaskGetTickCount();
 800a760:	f7f8 fa34 	bl	8002bcc <xTaskGetTickCount>
 800a764:	4603      	mov	r3, r0
 800a766:	4a02      	ldr	r2, [pc, #8]	; (800a770 <uart_access_hal_rx_tick_time_reset+0x14>)
 800a768:	6013      	str	r3, [r2, #0]
}
 800a76a:	bf00      	nop
 800a76c:	4618      	mov	r0, r3
 800a76e:	bd80      	pop	{r7, pc}
 800a770:	20003edc 	.word	0x20003edc

0800a774 <uart_access_hal_last_rx_tick_time>:


static TickType_t uart_access_hal_last_rx_tick_time(void)
{
 800a774:	b480      	push	{r7}
 800a776:	af00      	add	r7, sp, #0
	return g_receive_tick_time;
 800a778:	4b03      	ldr	r3, [pc, #12]	; (800a788 <uart_access_hal_last_rx_tick_time+0x14>)
 800a77a:	681b      	ldr	r3, [r3, #0]
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	46bd      	mov	sp, r7
 800a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a784:	4770      	bx	lr
 800a786:	bf00      	nop
 800a788:	20003edc 	.word	0x20003edc

0800a78c <uart_access_hal_rx_done>:


bool uart_access_hal_rx_done(TickType_t cur_time, uint32_t timeout_ms)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b082      	sub	sp, #8
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	6039      	str	r1, [r7, #0]
	if ((cur_time - uart_access_hal_last_rx_tick_time()) < timeout_ms) return false;
 800a796:	f7ff ffed 	bl	800a774 <uart_access_hal_last_rx_tick_time>
 800a79a:	4602      	mov	r2, r0
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	1a9b      	subs	r3, r3, r2
 800a7a0:	683a      	ldr	r2, [r7, #0]
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	d901      	bls.n	800a7aa <uart_access_hal_rx_done+0x1e>
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	e000      	b.n	800a7ac <uart_access_hal_rx_done+0x20>
	return true;
 800a7aa:	2301      	movs	r3, #1
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3708      	adds	r7, #8
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <uart_access_hal_write_and_read_block>:


uint16_t sizeof_array = 0;
void uart_access_hal_write_and_read_block(uart_handle_t ph_uart, uint8_t* write_data, uint16_t write_len, uint8_t* read_buf, uint16_t read_len)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	60b9      	str	r1, [r7, #8]
 800a7be:	603b      	str	r3, [r7, #0]
 800a7c0:	4613      	mov	r3, r2
 800a7c2:	80fb      	strh	r3, [r7, #6]
	static bool first_pass = true;
	// clear UART with 0 timeout call below.
	HAL_UART_Receive(ph_uart, gh_uart_rx_buffer, 1000, 0);
 800a7c4:	4b20      	ldr	r3, [pc, #128]	; (800a848 <uart_access_hal_write_and_read_block+0x94>)
 800a7c6:	6819      	ldr	r1, [r3, #0]
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a7ce:	68f8      	ldr	r0, [r7, #12]
 800a7d0:	f7fd ff09 	bl	80085e6 <HAL_UART_Receive>
	gh_uart_rx_buffer = read_buf;
 800a7d4:	4a1c      	ldr	r2, [pc, #112]	; (800a848 <uart_access_hal_write_and_read_block+0x94>)
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	6013      	str	r3, [r2, #0]
	sizeof_array = sizeof(gh_uart_rx_buffer);
 800a7da:	4b1c      	ldr	r3, [pc, #112]	; (800a84c <uart_access_hal_write_and_read_block+0x98>)
 800a7dc:	2204      	movs	r2, #4
 800a7de:	801a      	strh	r2, [r3, #0]
	g_uart_rx_buffer_index = 0; // general rx buffer is used to receive the data.  Clear the index each time a new transmission is sent out.
 800a7e0:	4b1b      	ldr	r3, [pc, #108]	; (800a850 <uart_access_hal_write_and_read_block+0x9c>)
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	801a      	strh	r2, [r3, #0]
	memset(gh_uart_rx_buffer, 0, GENERAL_RX_BUFFER_SIZE);
 800a7e6:	4b18      	ldr	r3, [pc, #96]	; (800a848 <uart_access_hal_write_and_read_block+0x94>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7ee:	2100      	movs	r1, #0
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f001 f8c7 	bl	800b984 <memset>
	// start listening for receive before TX
	if (first_pass)
 800a7f6:	4b17      	ldr	r3, [pc, #92]	; (800a854 <uart_access_hal_write_and_read_block+0xa0>)
 800a7f8:	781b      	ldrb	r3, [r3, #0]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d014      	beq.n	800a828 <uart_access_hal_write_and_read_block+0x74>
	{
		// prime rx.  Need to listen prior to TX.
		first_pass = false;
 800a7fe:	4b15      	ldr	r3, [pc, #84]	; (800a854 <uart_access_hal_write_and_read_block+0xa0>)
 800a800:	2200      	movs	r2, #0
 800a802:	701a      	strb	r2, [r3, #0]
		if (HAL_OK != HAL_UART_Receive_IT(ph_uart, (uint8_t *)(gh_uart_rx_buffer + g_uart_rx_buffer_index++), 1))
 800a804:	4b10      	ldr	r3, [pc, #64]	; (800a848 <uart_access_hal_write_and_read_block+0x94>)
 800a806:	681a      	ldr	r2, [r3, #0]
 800a808:	4b11      	ldr	r3, [pc, #68]	; (800a850 <uart_access_hal_write_and_read_block+0x9c>)
 800a80a:	881b      	ldrh	r3, [r3, #0]
 800a80c:	1c59      	adds	r1, r3, #1
 800a80e:	b288      	uxth	r0, r1
 800a810:	490f      	ldr	r1, [pc, #60]	; (800a850 <uart_access_hal_write_and_read_block+0x9c>)
 800a812:	8008      	strh	r0, [r1, #0]
 800a814:	4413      	add	r3, r2
 800a816:	2201      	movs	r2, #1
 800a818:	4619      	mov	r1, r3
 800a81a:	68f8      	ldr	r0, [r7, #12]
 800a81c:	f7fe f822 	bl	8008864 <HAL_UART_Receive_IT>
 800a820:	4603      	mov	r3, r0
 800a822:	2b00      	cmp	r3, #0
 800a824:	d000      	beq.n	800a828 <uart_access_hal_write_and_read_block+0x74>
		{
			while (1);
 800a826:	e7fe      	b.n	800a826 <uart_access_hal_write_and_read_block+0x72>
		}
	}
	uart_access_hal_rx_tick_time_reset();
 800a828:	f7ff ff98 	bl	800a75c <uart_access_hal_rx_tick_time_reset>
	if (HAL_OK != HAL_UART_Transmit_IT(ph_uart, write_data, write_len))
 800a82c:	88fb      	ldrh	r3, [r7, #6]
 800a82e:	461a      	mov	r2, r3
 800a830:	68b9      	ldr	r1, [r7, #8]
 800a832:	68f8      	ldr	r0, [r7, #12]
 800a834:	f7fd ffa8 	bl	8008788 <HAL_UART_Transmit_IT>
 800a838:	4603      	mov	r3, r0
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d000      	beq.n	800a840 <uart_access_hal_write_and_read_block+0x8c>
	{
		while (1);
 800a83e:	e7fe      	b.n	800a83e <uart_access_hal_write_and_read_block+0x8a>
	}
}
 800a840:	bf00      	nop
 800a842:	3710      	adds	r7, #16
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}
 800a848:	20003ee0 	.word	0x20003ee0
 800a84c:	20004ef4 	.word	0x20004ef4
 800a850:	20003ee4 	.word	0x20003ee4
 800a854:	20000239 	.word	0x20000239

0800a858 <uart_config_hal_setup>:
extern const uart_access_id_e* g_uart_chip_bus_lookup[NUM_UART_CONFIG_BUSES];
extern uint16_t g_uart_num_chips_per_bus[NUM_UART_CONFIG_BUSES];


void uart_config_hal_setup(void)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b0a0      	sub	sp, #128	; 0x80
 800a85c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStruct;

    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a85e:	f107 030c 	add.w	r3, r7, #12
 800a862:	225c      	movs	r2, #92	; 0x5c
 800a864:	2100      	movs	r1, #0
 800a866:	4618      	mov	r0, r3
 800a868:	f001 f88c 	bl	800b984 <memset>

    for (uart_config_bus_e bus = UART_CONFIG_BUS_FIRST; bus < NUM_UART_CONFIG_BUSES; bus++)
 800a86c:	2300      	movs	r3, #0
 800a86e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800a872:	e0e9      	b.n	800aa48 <uart_config_hal_setup+0x1f0>
    {
    	if (g_uart_num_chips_per_bus[bus])
 800a874:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a878:	4a78      	ldr	r2, [pc, #480]	; (800aa5c <uart_config_hal_setup+0x204>)
 800a87a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	f000 80dd 	beq.w	800aa3e <uart_config_hal_setup+0x1e6>
    	{
    	    GPIO_InitStruct.Pin       = g_uart_config[bus].pin.rx;
 800a884:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800a888:	4975      	ldr	r1, [pc, #468]	; (800aa60 <uart_config_hal_setup+0x208>)
 800a88a:	4613      	mov	r3, r2
 800a88c:	005b      	lsls	r3, r3, #1
 800a88e:	4413      	add	r3, r2
 800a890:	00db      	lsls	r3, r3, #3
 800a892:	440b      	add	r3, r1
 800a894:	881b      	ldrh	r3, [r3, #0]
 800a896:	66bb      	str	r3, [r7, #104]	; 0x68
    	    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800a898:	2302      	movs	r3, #2
 800a89a:	66fb      	str	r3, [r7, #108]	; 0x6c
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800a89c:	2300      	movs	r3, #0
 800a89e:	673b      	str	r3, [r7, #112]	; 0x70
    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800a8a0:	2303      	movs	r3, #3
 800a8a2:	677b      	str	r3, [r7, #116]	; 0x74
    	    GPIO_InitStruct.Alternate = g_uart_config[bus].pin.rx_alt_func;
 800a8a4:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800a8a8:	496d      	ldr	r1, [pc, #436]	; (800aa60 <uart_config_hal_setup+0x208>)
 800a8aa:	4613      	mov	r3, r2
 800a8ac:	005b      	lsls	r3, r3, #1
 800a8ae:	4413      	add	r3, r2
 800a8b0:	00db      	lsls	r3, r3, #3
 800a8b2:	440b      	add	r3, r1
 800a8b4:	3308      	adds	r3, #8
 800a8b6:	781b      	ldrb	r3, [r3, #0]
 800a8b8:	67bb      	str	r3, [r7, #120]	; 0x78
    	    HAL_GPIO_Init(g_uart_config[bus].pin.rx_port, &GPIO_InitStruct);
 800a8ba:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800a8be:	4968      	ldr	r1, [pc, #416]	; (800aa60 <uart_config_hal_setup+0x208>)
 800a8c0:	4613      	mov	r3, r2
 800a8c2:	005b      	lsls	r3, r3, #1
 800a8c4:	4413      	add	r3, r2
 800a8c6:	00db      	lsls	r3, r3, #3
 800a8c8:	440b      	add	r3, r1
 800a8ca:	3304      	adds	r3, #4
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800a8d2:	4611      	mov	r1, r2
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f7fa fd8b 	bl	80053f0 <HAL_GPIO_Init>

    	    GPIO_InitStruct.Pin       = g_uart_config[bus].pin.tx;
 800a8da:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800a8de:	4960      	ldr	r1, [pc, #384]	; (800aa60 <uart_config_hal_setup+0x208>)
 800a8e0:	4613      	mov	r3, r2
 800a8e2:	005b      	lsls	r3, r3, #1
 800a8e4:	4413      	add	r3, r2
 800a8e6:	00db      	lsls	r3, r3, #3
 800a8e8:	440b      	add	r3, r1
 800a8ea:	330a      	adds	r3, #10
 800a8ec:	881b      	ldrh	r3, [r3, #0]
 800a8ee:	66bb      	str	r3, [r7, #104]	; 0x68
    	    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800a8f0:	2302      	movs	r3, #2
 800a8f2:	66fb      	str	r3, [r7, #108]	; 0x6c
    	    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	673b      	str	r3, [r7, #112]	; 0x70
    	    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800a8f8:	2303      	movs	r3, #3
 800a8fa:	677b      	str	r3, [r7, #116]	; 0x74
    	    GPIO_InitStruct.Alternate = g_uart_config[bus].pin.tx_alt_func;
 800a8fc:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800a900:	4957      	ldr	r1, [pc, #348]	; (800aa60 <uart_config_hal_setup+0x208>)
 800a902:	4613      	mov	r3, r2
 800a904:	005b      	lsls	r3, r3, #1
 800a906:	4413      	add	r3, r2
 800a908:	00db      	lsls	r3, r3, #3
 800a90a:	440b      	add	r3, r1
 800a90c:	3310      	adds	r3, #16
 800a90e:	781b      	ldrb	r3, [r3, #0]
 800a910:	67bb      	str	r3, [r7, #120]	; 0x78
    	    HAL_GPIO_Init(g_uart_config[bus].pin.tx_port, &GPIO_InitStruct);
 800a912:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800a916:	4952      	ldr	r1, [pc, #328]	; (800aa60 <uart_config_hal_setup+0x208>)
 800a918:	4613      	mov	r3, r2
 800a91a:	005b      	lsls	r3, r3, #1
 800a91c:	4413      	add	r3, r2
 800a91e:	00db      	lsls	r3, r3, #3
 800a920:	440b      	add	r3, r1
 800a922:	330c      	adds	r3, #12
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800a92a:	4611      	mov	r1, r2
 800a92c:	4618      	mov	r0, r3
 800a92e:	f7fa fd5f 	bl	80053f0 <HAL_GPIO_Init>

    	    switch (bus)
 800a932:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a936:	2b00      	cmp	r3, #0
 800a938:	d002      	beq.n	800a940 <uart_config_hal_setup+0xe8>
 800a93a:	2b01      	cmp	r3, #1
 800a93c:	d01b      	beq.n	800a976 <uart_config_hal_setup+0x11e>
    	    	       //Error_Handler();
    	    	     }
    	    	    __HAL_RCC_USART1_CLK_ENABLE();
				break;
    	    	default:
    	    	break;
 800a93e:	e034      	b.n	800a9aa <uart_config_hal_setup+0x152>
    	    	    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800a940:	2320      	movs	r3, #32
 800a942:	60fb      	str	r3, [r7, #12]
    	    	    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_LSE;
 800a944:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a948:	63bb      	str	r3, [r7, #56]	; 0x38
    	    	    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a94a:	f107 030c 	add.w	r3, r7, #12
 800a94e:	4618      	mov	r0, r3
 800a950:	f7fb fe14 	bl	800657c <HAL_RCCEx_PeriphCLKConfig>
 800a954:	4603      	mov	r3, r0
 800a956:	2b00      	cmp	r3, #0
 800a958:	d000      	beq.n	800a95c <uart_config_hal_setup+0x104>
    	    	         while(1);
 800a95a:	e7fe      	b.n	800a95a <uart_config_hal_setup+0x102>
    	    	    __HAL_RCC_LPUART1_CLK_ENABLE();
 800a95c:	4b41      	ldr	r3, [pc, #260]	; (800aa64 <uart_config_hal_setup+0x20c>)
 800a95e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a960:	4a40      	ldr	r2, [pc, #256]	; (800aa64 <uart_config_hal_setup+0x20c>)
 800a962:	f043 0301 	orr.w	r3, r3, #1
 800a966:	65d3      	str	r3, [r2, #92]	; 0x5c
 800a968:	4b3e      	ldr	r3, [pc, #248]	; (800aa64 <uart_config_hal_setup+0x20c>)
 800a96a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a96c:	f003 0301 	and.w	r3, r3, #1
 800a970:	60bb      	str	r3, [r7, #8]
 800a972:	68bb      	ldr	r3, [r7, #8]
    	    	break;
 800a974:	e019      	b.n	800a9aa <uart_config_hal_setup+0x152>
    	    	    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800a976:	2301      	movs	r3, #1
 800a978:	60fb      	str	r3, [r7, #12]
    	    	    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800a97a:	2300      	movs	r3, #0
 800a97c:	62fb      	str	r3, [r7, #44]	; 0x2c
    	    	    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a97e:	f107 030c 	add.w	r3, r7, #12
 800a982:	4618      	mov	r0, r3
 800a984:	f7fb fdfa 	bl	800657c <HAL_RCCEx_PeriphCLKConfig>
 800a988:	4603      	mov	r3, r0
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d000      	beq.n	800a990 <uart_config_hal_setup+0x138>
    	    	         while(1);
 800a98e:	e7fe      	b.n	800a98e <uart_config_hal_setup+0x136>
    	    	    __HAL_RCC_USART1_CLK_ENABLE();
 800a990:	4b34      	ldr	r3, [pc, #208]	; (800aa64 <uart_config_hal_setup+0x20c>)
 800a992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a994:	4a33      	ldr	r2, [pc, #204]	; (800aa64 <uart_config_hal_setup+0x20c>)
 800a996:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a99a:	6613      	str	r3, [r2, #96]	; 0x60
 800a99c:	4b31      	ldr	r3, [pc, #196]	; (800aa64 <uart_config_hal_setup+0x20c>)
 800a99e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a9a4:	607b      	str	r3, [r7, #4]
 800a9a6:	687b      	ldr	r3, [r7, #4]
				break;
 800a9a8:	bf00      	nop
    	    }
    	    //UART_ITConfig(USART1, UART_IT_TXE, ENABLE);
    	    //UART_ITConfig(USART1, UART_IT_RXNE, ENABLE);
    	    if(HAL_UART_DeInit(&g_uart_handle_config[bus]) != HAL_OK)
 800a9aa:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800a9ae:	4613      	mov	r3, r2
 800a9b0:	015b      	lsls	r3, r3, #5
 800a9b2:	4413      	add	r3, r2
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	4a2c      	ldr	r2, [pc, #176]	; (800aa68 <uart_config_hal_setup+0x210>)
 800a9b8:	4413      	add	r3, r2
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f7fd fdc6 	bl	800854c <HAL_UART_DeInit>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d000      	beq.n	800a9c8 <uart_config_hal_setup+0x170>
    	    {
    	        while(1);//Error_Handler();
 800a9c6:	e7fe      	b.n	800a9c6 <uart_config_hal_setup+0x16e>
    	    }
    	    if(HAL_UART_Init(&g_uart_handle_config[bus]) != HAL_OK)
 800a9c8:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800a9cc:	4613      	mov	r3, r2
 800a9ce:	015b      	lsls	r3, r3, #5
 800a9d0:	4413      	add	r3, r2
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	4a24      	ldr	r2, [pc, #144]	; (800aa68 <uart_config_hal_setup+0x210>)
 800a9d6:	4413      	add	r3, r2
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f7fd fd69 	bl	80084b0 <HAL_UART_Init>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d000      	beq.n	800a9e6 <uart_config_hal_setup+0x18e>
    	    {
    	        while(1);//Error_Handler();
 800a9e4:	e7fe      	b.n	800a9e4 <uart_config_hal_setup+0x18c>
    	    }
    	    HAL_NVIC_SetPriority(g_uart_config[bus].irqn, 0, 1);
 800a9e6:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800a9ea:	491d      	ldr	r1, [pc, #116]	; (800aa60 <uart_config_hal_setup+0x208>)
 800a9ec:	4613      	mov	r3, r2
 800a9ee:	005b      	lsls	r3, r3, #1
 800a9f0:	4413      	add	r3, r2
 800a9f2:	00db      	lsls	r3, r3, #3
 800a9f4:	440b      	add	r3, r1
 800a9f6:	3314      	adds	r3, #20
 800a9f8:	f993 3000 	ldrsb.w	r3, [r3]
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	2100      	movs	r1, #0
 800aa00:	4618      	mov	r0, r3
 800aa02:	f7f9 ff6c 	bl	80048de <HAL_NVIC_SetPriority>
    	    HAL_NVIC_EnableIRQ(g_uart_config[bus].irqn);
 800aa06:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800aa0a:	4915      	ldr	r1, [pc, #84]	; (800aa60 <uart_config_hal_setup+0x208>)
 800aa0c:	4613      	mov	r3, r2
 800aa0e:	005b      	lsls	r3, r3, #1
 800aa10:	4413      	add	r3, r2
 800aa12:	00db      	lsls	r3, r3, #3
 800aa14:	440b      	add	r3, r1
 800aa16:	3314      	adds	r3, #20
 800aa18:	f993 3000 	ldrsb.w	r3, [r3]
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f7f9 ff7a 	bl	8004916 <HAL_NVIC_EnableIRQ>
    	    HAL_NVIC_ClearPendingIRQ(g_uart_config[bus].irqn);
 800aa22:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800aa26:	490e      	ldr	r1, [pc, #56]	; (800aa60 <uart_config_hal_setup+0x208>)
 800aa28:	4613      	mov	r3, r2
 800aa2a:	005b      	lsls	r3, r3, #1
 800aa2c:	4413      	add	r3, r2
 800aa2e:	00db      	lsls	r3, r3, #3
 800aa30:	440b      	add	r3, r1
 800aa32:	3314      	adds	r3, #20
 800aa34:	f993 3000 	ldrsb.w	r3, [r3]
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f7f9 ff94 	bl	8004966 <HAL_NVIC_ClearPendingIRQ>
    for (uart_config_bus_e bus = UART_CONFIG_BUS_FIRST; bus < NUM_UART_CONFIG_BUSES; bus++)
 800aa3e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800aa42:	3301      	adds	r3, #1
 800aa44:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800aa48:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	f67f af11 	bls.w	800a874 <uart_config_hal_setup+0x1c>
    	}
    }

}
 800aa52:	bf00      	nop
 800aa54:	bf00      	nop
 800aa56:	3780      	adds	r7, #128	; 0x80
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}
 800aa5c:	200003b4 	.word	0x200003b4
 800aa60:	0800c904 	.word	0x0800c904
 800aa64:	40021000 	.word	0x40021000
 800aa68:	200002ac 	.word	0x200002ac

0800aa6c <uart_config_esp8266_handle>:
	return &g_uart_handle_config[UART_CONFIG_BUS_HOST];
}


uart_handle_t uart_config_esp8266_handle(void)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	af00      	add	r7, sp, #0
	return &g_uart_handle_config[UART_CONFIG_BUS_ESP8266];
 800aa70:	4b02      	ldr	r3, [pc, #8]	; (800aa7c <uart_config_esp8266_handle+0x10>)
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr
 800aa7c:	20000330 	.word	0x20000330

0800aa80 <HAL_Set_DMA_Callbacks>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);


// Function below added by SRW
static void HAL_Set_DMA_Callbacks(void)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	af00      	add	r7, sp, #0
    HAL_DMA_RegisterCallback(&hdma_tim1_ch1, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 800aa84:	4a0d      	ldr	r2, [pc, #52]	; (800aabc <HAL_Set_DMA_Callbacks+0x3c>)
 800aa86:	2100      	movs	r1, #0
 800aa88:	480d      	ldr	r0, [pc, #52]	; (800aac0 <HAL_Set_DMA_Callbacks+0x40>)
 800aa8a:	f7fa f9c1 	bl	8004e10 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim1_ch2, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 800aa8e:	4a0b      	ldr	r2, [pc, #44]	; (800aabc <HAL_Set_DMA_Callbacks+0x3c>)
 800aa90:	2100      	movs	r1, #0
 800aa92:	480c      	ldr	r0, [pc, #48]	; (800aac4 <HAL_Set_DMA_Callbacks+0x44>)
 800aa94:	f7fa f9bc 	bl	8004e10 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim1_ch3, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 800aa98:	4a08      	ldr	r2, [pc, #32]	; (800aabc <HAL_Set_DMA_Callbacks+0x3c>)
 800aa9a:	2100      	movs	r1, #0
 800aa9c:	480a      	ldr	r0, [pc, #40]	; (800aac8 <HAL_Set_DMA_Callbacks+0x48>)
 800aa9e:	f7fa f9b7 	bl	8004e10 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim15_ch1_up_trig_com, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 800aaa2:	4a06      	ldr	r2, [pc, #24]	; (800aabc <HAL_Set_DMA_Callbacks+0x3c>)
 800aaa4:	2100      	movs	r1, #0
 800aaa6:	4809      	ldr	r0, [pc, #36]	; (800aacc <HAL_Set_DMA_Callbacks+0x4c>)
 800aaa8:	f7fa f9b2 	bl	8004e10 <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_tim16_ch1_up, HAL_DMA_XFER_CPLT_CB_ID, HAL_DMA_CMPLT_CALLBACK);
 800aaac:	4a03      	ldr	r2, [pc, #12]	; (800aabc <HAL_Set_DMA_Callbacks+0x3c>)
 800aaae:	2100      	movs	r1, #0
 800aab0:	4807      	ldr	r0, [pc, #28]	; (800aad0 <HAL_Set_DMA_Callbacks+0x50>)
 800aab2:	f7fa f9ad 	bl	8004e10 <HAL_DMA_RegisterCallback>
}
 800aab6:	bf00      	nop
 800aab8:	bd80      	pop	{r7, pc}
 800aaba:	bf00      	nop
 800aabc:	0800b0e7 	.word	0x0800b0e7
 800aac0:	20003cf4 	.word	0x20003cf4
 800aac4:	20003d3c 	.word	0x20003d3c
 800aac8:	20003d84 	.word	0x20003d84
 800aacc:	20003dcc 	.word	0x20003dcc
 800aad0:	20003e14 	.word	0x20003e14

0800aad4 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b084      	sub	sp, #16
 800aad8:	af00      	add	r7, sp, #0
  PWR_PVDTypeDef sConfigPVD = {0};
 800aada:	f107 0308 	add.w	r3, r7, #8
 800aade:	2200      	movs	r2, #0
 800aae0:	601a      	str	r2, [r3, #0]
 800aae2:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aae4:	4b13      	ldr	r3, [pc, #76]	; (800ab34 <HAL_MspInit+0x60>)
 800aae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aae8:	4a12      	ldr	r2, [pc, #72]	; (800ab34 <HAL_MspInit+0x60>)
 800aaea:	f043 0301 	orr.w	r3, r3, #1
 800aaee:	6613      	str	r3, [r2, #96]	; 0x60
 800aaf0:	4b10      	ldr	r3, [pc, #64]	; (800ab34 <HAL_MspInit+0x60>)
 800aaf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aaf4:	f003 0301 	and.w	r3, r3, #1
 800aaf8:	607b      	str	r3, [r7, #4]
 800aafa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800aafc:	4b0d      	ldr	r3, [pc, #52]	; (800ab34 <HAL_MspInit+0x60>)
 800aafe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab00:	4a0c      	ldr	r2, [pc, #48]	; (800ab34 <HAL_MspInit+0x60>)
 800ab02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab06:	6593      	str	r3, [r2, #88]	; 0x58
 800ab08:	4b0a      	ldr	r3, [pc, #40]	; (800ab34 <HAL_MspInit+0x60>)
 800ab0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab10:	603b      	str	r3, [r7, #0]
 800ab12:	683b      	ldr	r3, [r7, #0]

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 800ab14:	2300      	movs	r3, #0
 800ab16:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 800ab1c:	f107 0308 	add.w	r3, r7, #8
 800ab20:	4618      	mov	r0, r3
 800ab22:	f7fa fe1f 	bl	8005764 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 800ab26:	f7fa fe7d 	bl	8005824 <HAL_PWR_EnablePVD>
}
 800ab2a:	bf00      	nop
 800ab2c:	3710      	adds	r7, #16
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}
 800ab32:	bf00      	nop
 800ab34:	40021000 	.word	0x40021000

0800ab38 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b083      	sub	sp, #12
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	4a08      	ldr	r2, [pc, #32]	; (800ab68 <HAL_RTC_MspInit+0x30>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d107      	bne.n	800ab5a <HAL_RTC_MspInit+0x22>
  {
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800ab4a:	4b08      	ldr	r3, [pc, #32]	; (800ab6c <HAL_RTC_MspInit+0x34>)
 800ab4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab50:	4a06      	ldr	r2, [pc, #24]	; (800ab6c <HAL_RTC_MspInit+0x34>)
 800ab52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

}
 800ab5a:	bf00      	nop
 800ab5c:	370c      	adds	r7, #12
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr
 800ab66:	bf00      	nop
 800ab68:	40002800 	.word	0x40002800
 800ab6c:	40021000 	.word	0x40021000

0800ab70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b084      	sub	sp, #16
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	4a6e      	ldr	r2, [pc, #440]	; (800ad38 <HAL_TIM_Base_MspInit+0x1c8>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	f040 8091 	bne.w	800aca6 <HAL_TIM_Base_MspInit+0x136>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800ab84:	4b6d      	ldr	r3, [pc, #436]	; (800ad3c <HAL_TIM_Base_MspInit+0x1cc>)
 800ab86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab88:	4a6c      	ldr	r2, [pc, #432]	; (800ad3c <HAL_TIM_Base_MspInit+0x1cc>)
 800ab8a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ab8e:	6613      	str	r3, [r2, #96]	; 0x60
 800ab90:	4b6a      	ldr	r3, [pc, #424]	; (800ad3c <HAL_TIM_Base_MspInit+0x1cc>)
 800ab92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab98:	60fb      	str	r3, [r7, #12]
 800ab9a:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 800ab9c:	4b68      	ldr	r3, [pc, #416]	; (800ad40 <HAL_TIM_Base_MspInit+0x1d0>)
 800ab9e:	4a69      	ldr	r2, [pc, #420]	; (800ad44 <HAL_TIM_Base_MspInit+0x1d4>)
 800aba0:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 800aba2:	4b67      	ldr	r3, [pc, #412]	; (800ad40 <HAL_TIM_Base_MspInit+0x1d0>)
 800aba4:	2207      	movs	r2, #7
 800aba6:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800aba8:	4b65      	ldr	r3, [pc, #404]	; (800ad40 <HAL_TIM_Base_MspInit+0x1d0>)
 800abaa:	2210      	movs	r2, #16
 800abac:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800abae:	4b64      	ldr	r3, [pc, #400]	; (800ad40 <HAL_TIM_Base_MspInit+0x1d0>)
 800abb0:	2200      	movs	r2, #0
 800abb2:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800abb4:	4b62      	ldr	r3, [pc, #392]	; (800ad40 <HAL_TIM_Base_MspInit+0x1d0>)
 800abb6:	2280      	movs	r2, #128	; 0x80
 800abb8:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800abba:	4b61      	ldr	r3, [pc, #388]	; (800ad40 <HAL_TIM_Base_MspInit+0x1d0>)
 800abbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800abc0:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800abc2:	4b5f      	ldr	r3, [pc, #380]	; (800ad40 <HAL_TIM_Base_MspInit+0x1d0>)
 800abc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800abc8:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800abca:	4b5d      	ldr	r3, [pc, #372]	; (800ad40 <HAL_TIM_Base_MspInit+0x1d0>)
 800abcc:	2200      	movs	r2, #0
 800abce:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800abd0:	4b5b      	ldr	r3, [pc, #364]	; (800ad40 <HAL_TIM_Base_MspInit+0x1d0>)
 800abd2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800abd6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800abd8:	4859      	ldr	r0, [pc, #356]	; (800ad40 <HAL_TIM_Base_MspInit+0x1d0>)
 800abda:	f7f9 fed3 	bl	8004984 <HAL_DMA_Init>
 800abde:	4603      	mov	r3, r0
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d001      	beq.n	800abe8 <HAL_TIM_Base_MspInit+0x78>
    {
      Error_Handler();
 800abe4:	f7ff fb97 	bl	800a316 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	4a55      	ldr	r2, [pc, #340]	; (800ad40 <HAL_TIM_Base_MspInit+0x1d0>)
 800abec:	625a      	str	r2, [r3, #36]	; 0x24
 800abee:	4a54      	ldr	r2, [pc, #336]	; (800ad40 <HAL_TIM_Base_MspInit+0x1d0>)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel3;
 800abf4:	4b54      	ldr	r3, [pc, #336]	; (800ad48 <HAL_TIM_Base_MspInit+0x1d8>)
 800abf6:	4a55      	ldr	r2, [pc, #340]	; (800ad4c <HAL_TIM_Base_MspInit+0x1dc>)
 800abf8:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_7;
 800abfa:	4b53      	ldr	r3, [pc, #332]	; (800ad48 <HAL_TIM_Base_MspInit+0x1d8>)
 800abfc:	2207      	movs	r2, #7
 800abfe:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ac00:	4b51      	ldr	r3, [pc, #324]	; (800ad48 <HAL_TIM_Base_MspInit+0x1d8>)
 800ac02:	2210      	movs	r2, #16
 800ac04:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800ac06:	4b50      	ldr	r3, [pc, #320]	; (800ad48 <HAL_TIM_Base_MspInit+0x1d8>)
 800ac08:	2200      	movs	r2, #0
 800ac0a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800ac0c:	4b4e      	ldr	r3, [pc, #312]	; (800ad48 <HAL_TIM_Base_MspInit+0x1d8>)
 800ac0e:	2280      	movs	r2, #128	; 0x80
 800ac10:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ac12:	4b4d      	ldr	r3, [pc, #308]	; (800ad48 <HAL_TIM_Base_MspInit+0x1d8>)
 800ac14:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ac18:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ac1a:	4b4b      	ldr	r3, [pc, #300]	; (800ad48 <HAL_TIM_Base_MspInit+0x1d8>)
 800ac1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ac20:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 800ac22:	4b49      	ldr	r3, [pc, #292]	; (800ad48 <HAL_TIM_Base_MspInit+0x1d8>)
 800ac24:	2200      	movs	r2, #0
 800ac26:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800ac28:	4b47      	ldr	r3, [pc, #284]	; (800ad48 <HAL_TIM_Base_MspInit+0x1d8>)
 800ac2a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800ac2e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 800ac30:	4845      	ldr	r0, [pc, #276]	; (800ad48 <HAL_TIM_Base_MspInit+0x1d8>)
 800ac32:	f7f9 fea7 	bl	8004984 <HAL_DMA_Init>
 800ac36:	4603      	mov	r3, r0
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d001      	beq.n	800ac40 <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 800ac3c:	f7ff fb6b 	bl	800a316 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	4a41      	ldr	r2, [pc, #260]	; (800ad48 <HAL_TIM_Base_MspInit+0x1d8>)
 800ac44:	629a      	str	r2, [r3, #40]	; 0x28
 800ac46:	4a40      	ldr	r2, [pc, #256]	; (800ad48 <HAL_TIM_Base_MspInit+0x1d8>)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel7;
 800ac4c:	4b40      	ldr	r3, [pc, #256]	; (800ad50 <HAL_TIM_Base_MspInit+0x1e0>)
 800ac4e:	4a41      	ldr	r2, [pc, #260]	; (800ad54 <HAL_TIM_Base_MspInit+0x1e4>)
 800ac50:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Request = DMA_REQUEST_7;
 800ac52:	4b3f      	ldr	r3, [pc, #252]	; (800ad50 <HAL_TIM_Base_MspInit+0x1e0>)
 800ac54:	2207      	movs	r2, #7
 800ac56:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ac58:	4b3d      	ldr	r3, [pc, #244]	; (800ad50 <HAL_TIM_Base_MspInit+0x1e0>)
 800ac5a:	2210      	movs	r2, #16
 800ac5c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800ac5e:	4b3c      	ldr	r3, [pc, #240]	; (800ad50 <HAL_TIM_Base_MspInit+0x1e0>)
 800ac60:	2200      	movs	r2, #0
 800ac62:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800ac64:	4b3a      	ldr	r3, [pc, #232]	; (800ad50 <HAL_TIM_Base_MspInit+0x1e0>)
 800ac66:	2280      	movs	r2, #128	; 0x80
 800ac68:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ac6a:	4b39      	ldr	r3, [pc, #228]	; (800ad50 <HAL_TIM_Base_MspInit+0x1e0>)
 800ac6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ac70:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ac72:	4b37      	ldr	r3, [pc, #220]	; (800ad50 <HAL_TIM_Base_MspInit+0x1e0>)
 800ac74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ac78:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 800ac7a:	4b35      	ldr	r3, [pc, #212]	; (800ad50 <HAL_TIM_Base_MspInit+0x1e0>)
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800ac80:	4b33      	ldr	r3, [pc, #204]	; (800ad50 <HAL_TIM_Base_MspInit+0x1e0>)
 800ac82:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800ac86:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 800ac88:	4831      	ldr	r0, [pc, #196]	; (800ad50 <HAL_TIM_Base_MspInit+0x1e0>)
 800ac8a:	f7f9 fe7b 	bl	8004984 <HAL_DMA_Init>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d001      	beq.n	800ac98 <HAL_TIM_Base_MspInit+0x128>
    {
      Error_Handler();
 800ac94:	f7ff fb3f 	bl	800a316 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	4a2d      	ldr	r2, [pc, #180]	; (800ad50 <HAL_TIM_Base_MspInit+0x1e0>)
 800ac9c:	62da      	str	r2, [r3, #44]	; 0x2c
 800ac9e:	4a2c      	ldr	r2, [pc, #176]	; (800ad50 <HAL_TIM_Base_MspInit+0x1e0>)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6293      	str	r3, [r2, #40]	; 0x28
 800aca4:	e041      	b.n	800ad2a <HAL_TIM_Base_MspInit+0x1ba>
  }
  else if(htim_base->Instance==TIM16)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4a2b      	ldr	r2, [pc, #172]	; (800ad58 <HAL_TIM_Base_MspInit+0x1e8>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d13c      	bne.n	800ad2a <HAL_TIM_Base_MspInit+0x1ba>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800acb0:	4b22      	ldr	r3, [pc, #136]	; (800ad3c <HAL_TIM_Base_MspInit+0x1cc>)
 800acb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acb4:	4a21      	ldr	r2, [pc, #132]	; (800ad3c <HAL_TIM_Base_MspInit+0x1cc>)
 800acb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acba:	6613      	str	r3, [r2, #96]	; 0x60
 800acbc:	4b1f      	ldr	r3, [pc, #124]	; (800ad3c <HAL_TIM_Base_MspInit+0x1cc>)
 800acbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acc4:	60bb      	str	r3, [r7, #8]
 800acc6:	68bb      	ldr	r3, [r7, #8]

    /* TIM16 DMA Init */
    /* TIM16_CH1_UP Init */
    hdma_tim16_ch1_up.Instance = DMA1_Channel6;
 800acc8:	4b24      	ldr	r3, [pc, #144]	; (800ad5c <HAL_TIM_Base_MspInit+0x1ec>)
 800acca:	4a25      	ldr	r2, [pc, #148]	; (800ad60 <HAL_TIM_Base_MspInit+0x1f0>)
 800accc:	601a      	str	r2, [r3, #0]
    hdma_tim16_ch1_up.Init.Request = DMA_REQUEST_4;
 800acce:	4b23      	ldr	r3, [pc, #140]	; (800ad5c <HAL_TIM_Base_MspInit+0x1ec>)
 800acd0:	2204      	movs	r2, #4
 800acd2:	605a      	str	r2, [r3, #4]
    hdma_tim16_ch1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800acd4:	4b21      	ldr	r3, [pc, #132]	; (800ad5c <HAL_TIM_Base_MspInit+0x1ec>)
 800acd6:	2210      	movs	r2, #16
 800acd8:	609a      	str	r2, [r3, #8]
    hdma_tim16_ch1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800acda:	4b20      	ldr	r3, [pc, #128]	; (800ad5c <HAL_TIM_Base_MspInit+0x1ec>)
 800acdc:	2200      	movs	r2, #0
 800acde:	60da      	str	r2, [r3, #12]
    hdma_tim16_ch1_up.Init.MemInc = DMA_MINC_ENABLE;
 800ace0:	4b1e      	ldr	r3, [pc, #120]	; (800ad5c <HAL_TIM_Base_MspInit+0x1ec>)
 800ace2:	2280      	movs	r2, #128	; 0x80
 800ace4:	611a      	str	r2, [r3, #16]
    hdma_tim16_ch1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ace6:	4b1d      	ldr	r3, [pc, #116]	; (800ad5c <HAL_TIM_Base_MspInit+0x1ec>)
 800ace8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800acec:	615a      	str	r2, [r3, #20]
    hdma_tim16_ch1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800acee:	4b1b      	ldr	r3, [pc, #108]	; (800ad5c <HAL_TIM_Base_MspInit+0x1ec>)
 800acf0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800acf4:	619a      	str	r2, [r3, #24]
    hdma_tim16_ch1_up.Init.Mode = DMA_NORMAL;
 800acf6:	4b19      	ldr	r3, [pc, #100]	; (800ad5c <HAL_TIM_Base_MspInit+0x1ec>)
 800acf8:	2200      	movs	r2, #0
 800acfa:	61da      	str	r2, [r3, #28]
    hdma_tim16_ch1_up.Init.Priority = DMA_PRIORITY_LOW;
 800acfc:	4b17      	ldr	r3, [pc, #92]	; (800ad5c <HAL_TIM_Base_MspInit+0x1ec>)
 800acfe:	2200      	movs	r2, #0
 800ad00:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim16_ch1_up) != HAL_OK)
 800ad02:	4816      	ldr	r0, [pc, #88]	; (800ad5c <HAL_TIM_Base_MspInit+0x1ec>)
 800ad04:	f7f9 fe3e 	bl	8004984 <HAL_DMA_Init>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d001      	beq.n	800ad12 <HAL_TIM_Base_MspInit+0x1a2>
    {
      Error_Handler();
 800ad0e:	f7ff fb02 	bl	800a316 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim16_ch1_up);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	4a11      	ldr	r2, [pc, #68]	; (800ad5c <HAL_TIM_Base_MspInit+0x1ec>)
 800ad16:	625a      	str	r2, [r3, #36]	; 0x24
 800ad18:	4a10      	ldr	r2, [pc, #64]	; (800ad5c <HAL_TIM_Base_MspInit+0x1ec>)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim16_ch1_up);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	4a0e      	ldr	r2, [pc, #56]	; (800ad5c <HAL_TIM_Base_MspInit+0x1ec>)
 800ad22:	621a      	str	r2, [r3, #32]
 800ad24:	4a0d      	ldr	r2, [pc, #52]	; (800ad5c <HAL_TIM_Base_MspInit+0x1ec>)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6293      	str	r3, [r2, #40]	; 0x28
  }
  HAL_Set_DMA_Callbacks();
 800ad2a:	f7ff fea9 	bl	800aa80 <HAL_Set_DMA_Callbacks>
}
 800ad2e:	bf00      	nop
 800ad30:	3710      	adds	r7, #16
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}
 800ad36:	bf00      	nop
 800ad38:	40012c00 	.word	0x40012c00
 800ad3c:	40021000 	.word	0x40021000
 800ad40:	20003cf4 	.word	0x20003cf4
 800ad44:	4002001c 	.word	0x4002001c
 800ad48:	20003d3c 	.word	0x20003d3c
 800ad4c:	40020030 	.word	0x40020030
 800ad50:	20003d84 	.word	0x20003d84
 800ad54:	40020080 	.word	0x40020080
 800ad58:	40014400 	.word	0x40014400
 800ad5c:	20003e14 	.word	0x20003e14
 800ad60:	4002006c 	.word	0x4002006c

0800ad64 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b084      	sub	sp, #16
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	4a28      	ldr	r2, [pc, #160]	; (800ae14 <HAL_TIM_PWM_MspInit+0xb0>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d149      	bne.n	800ae0a <HAL_TIM_PWM_MspInit+0xa6>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800ad76:	4b28      	ldr	r3, [pc, #160]	; (800ae18 <HAL_TIM_PWM_MspInit+0xb4>)
 800ad78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad7a:	4a27      	ldr	r2, [pc, #156]	; (800ae18 <HAL_TIM_PWM_MspInit+0xb4>)
 800ad7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad80:	6613      	str	r3, [r2, #96]	; 0x60
 800ad82:	4b25      	ldr	r3, [pc, #148]	; (800ae18 <HAL_TIM_PWM_MspInit+0xb4>)
 800ad84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad8a:	60fb      	str	r3, [r7, #12]
 800ad8c:	68fb      	ldr	r3, [r7, #12]

    /* TIM15 DMA Init */
    /* TIM15_CH1_UP_TRIG_COM Init */
    hdma_tim15_ch1_up_trig_com.Instance = DMA1_Channel5;
 800ad8e:	4b23      	ldr	r3, [pc, #140]	; (800ae1c <HAL_TIM_PWM_MspInit+0xb8>)
 800ad90:	4a23      	ldr	r2, [pc, #140]	; (800ae20 <HAL_TIM_PWM_MspInit+0xbc>)
 800ad92:	601a      	str	r2, [r3, #0]
    hdma_tim15_ch1_up_trig_com.Init.Request = DMA_REQUEST_7;
 800ad94:	4b21      	ldr	r3, [pc, #132]	; (800ae1c <HAL_TIM_PWM_MspInit+0xb8>)
 800ad96:	2207      	movs	r2, #7
 800ad98:	605a      	str	r2, [r3, #4]
    hdma_tim15_ch1_up_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ad9a:	4b20      	ldr	r3, [pc, #128]	; (800ae1c <HAL_TIM_PWM_MspInit+0xb8>)
 800ad9c:	2210      	movs	r2, #16
 800ad9e:	609a      	str	r2, [r3, #8]
    hdma_tim15_ch1_up_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 800ada0:	4b1e      	ldr	r3, [pc, #120]	; (800ae1c <HAL_TIM_PWM_MspInit+0xb8>)
 800ada2:	2200      	movs	r2, #0
 800ada4:	60da      	str	r2, [r3, #12]
    hdma_tim15_ch1_up_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 800ada6:	4b1d      	ldr	r3, [pc, #116]	; (800ae1c <HAL_TIM_PWM_MspInit+0xb8>)
 800ada8:	2280      	movs	r2, #128	; 0x80
 800adaa:	611a      	str	r2, [r3, #16]
    hdma_tim15_ch1_up_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800adac:	4b1b      	ldr	r3, [pc, #108]	; (800ae1c <HAL_TIM_PWM_MspInit+0xb8>)
 800adae:	f44f 7280 	mov.w	r2, #256	; 0x100
 800adb2:	615a      	str	r2, [r3, #20]
    hdma_tim15_ch1_up_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800adb4:	4b19      	ldr	r3, [pc, #100]	; (800ae1c <HAL_TIM_PWM_MspInit+0xb8>)
 800adb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800adba:	619a      	str	r2, [r3, #24]
    hdma_tim15_ch1_up_trig_com.Init.Mode = DMA_NORMAL;
 800adbc:	4b17      	ldr	r3, [pc, #92]	; (800ae1c <HAL_TIM_PWM_MspInit+0xb8>)
 800adbe:	2200      	movs	r2, #0
 800adc0:	61da      	str	r2, [r3, #28]
    hdma_tim15_ch1_up_trig_com.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800adc2:	4b16      	ldr	r3, [pc, #88]	; (800ae1c <HAL_TIM_PWM_MspInit+0xb8>)
 800adc4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800adc8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim15_ch1_up_trig_com) != HAL_OK)
 800adca:	4814      	ldr	r0, [pc, #80]	; (800ae1c <HAL_TIM_PWM_MspInit+0xb8>)
 800adcc:	f7f9 fdda 	bl	8004984 <HAL_DMA_Init>
 800add0:	4603      	mov	r3, r0
 800add2:	2b00      	cmp	r3, #0
 800add4:	d001      	beq.n	800adda <HAL_TIM_PWM_MspInit+0x76>
    {
      Error_Handler();
 800add6:	f7ff fa9e 	bl	800a316 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim15_ch1_up_trig_com);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	4a0f      	ldr	r2, [pc, #60]	; (800ae1c <HAL_TIM_PWM_MspInit+0xb8>)
 800adde:	625a      	str	r2, [r3, #36]	; 0x24
 800ade0:	4a0e      	ldr	r2, [pc, #56]	; (800ae1c <HAL_TIM_PWM_MspInit+0xb8>)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim15_ch1_up_trig_com);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	4a0c      	ldr	r2, [pc, #48]	; (800ae1c <HAL_TIM_PWM_MspInit+0xb8>)
 800adea:	621a      	str	r2, [r3, #32]
 800adec:	4a0b      	ldr	r2, [pc, #44]	; (800ae1c <HAL_TIM_PWM_MspInit+0xb8>)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim15_ch1_up_trig_com);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	4a09      	ldr	r2, [pc, #36]	; (800ae1c <HAL_TIM_PWM_MspInit+0xb8>)
 800adf6:	639a      	str	r2, [r3, #56]	; 0x38
 800adf8:	4a08      	ldr	r2, [pc, #32]	; (800ae1c <HAL_TIM_PWM_MspInit+0xb8>)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim15_ch1_up_trig_com);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	4a06      	ldr	r2, [pc, #24]	; (800ae1c <HAL_TIM_PWM_MspInit+0xb8>)
 800ae02:	635a      	str	r2, [r3, #52]	; 0x34
 800ae04:	4a05      	ldr	r2, [pc, #20]	; (800ae1c <HAL_TIM_PWM_MspInit+0xb8>)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 800ae0a:	bf00      	nop
 800ae0c:	3710      	adds	r7, #16
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}
 800ae12:	bf00      	nop
 800ae14:	40014000 	.word	0x40014000
 800ae18:	40021000 	.word	0x40021000
 800ae1c:	20003dcc 	.word	0x20003dcc
 800ae20:	40020058 	.word	0x40020058

0800ae24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b082      	sub	sp, #8
 800ae28:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 1; iii++)
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	71fb      	strb	r3, [r7, #7]
 800ae2e:	e005      	b.n	800ae3c <NMI_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800ae30:	2064      	movs	r0, #100	; 0x64
 800ae32:	f7f9 fc13 	bl	800465c <HAL_Delay>
        for (uint8_t iii = 0; iii < 1; iii++)
 800ae36:	79fb      	ldrb	r3, [r7, #7]
 800ae38:	3301      	adds	r3, #1
 800ae3a:	71fb      	strb	r3, [r7, #7]
 800ae3c:	79fb      	ldrb	r3, [r7, #7]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d0f6      	beq.n	800ae30 <NMI_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800ae42:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800ae46:	f7f9 fc09 	bl	800465c <HAL_Delay>
        for (uint8_t iii = 0; iii < 1; iii++)
 800ae4a:	e7ee      	b.n	800ae2a <NMI_Handler+0x6>

0800ae4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b082      	sub	sp, #8
 800ae50:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 2; iii++)
 800ae52:	2300      	movs	r3, #0
 800ae54:	71fb      	strb	r3, [r7, #7]
 800ae56:	e005      	b.n	800ae64 <HardFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800ae58:	2064      	movs	r0, #100	; 0x64
 800ae5a:	f7f9 fbff 	bl	800465c <HAL_Delay>
        for (uint8_t iii = 0; iii < 2; iii++)
 800ae5e:	79fb      	ldrb	r3, [r7, #7]
 800ae60:	3301      	adds	r3, #1
 800ae62:	71fb      	strb	r3, [r7, #7]
 800ae64:	79fb      	ldrb	r3, [r7, #7]
 800ae66:	2b01      	cmp	r3, #1
 800ae68:	d9f6      	bls.n	800ae58 <HardFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800ae6a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800ae6e:	f7f9 fbf5 	bl	800465c <HAL_Delay>
        for (uint8_t iii = 0; iii < 2; iii++)
 800ae72:	e7ee      	b.n	800ae52 <HardFault_Handler+0x6>

0800ae74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b082      	sub	sp, #8
 800ae78:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 3; iii++)
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	71fb      	strb	r3, [r7, #7]
 800ae7e:	e005      	b.n	800ae8c <MemManage_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800ae80:	2064      	movs	r0, #100	; 0x64
 800ae82:	f7f9 fbeb 	bl	800465c <HAL_Delay>
        for (uint8_t iii = 0; iii < 3; iii++)
 800ae86:	79fb      	ldrb	r3, [r7, #7]
 800ae88:	3301      	adds	r3, #1
 800ae8a:	71fb      	strb	r3, [r7, #7]
 800ae8c:	79fb      	ldrb	r3, [r7, #7]
 800ae8e:	2b02      	cmp	r3, #2
 800ae90:	d9f6      	bls.n	800ae80 <MemManage_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800ae92:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800ae96:	f7f9 fbe1 	bl	800465c <HAL_Delay>
        for (uint8_t iii = 0; iii < 3; iii++)
 800ae9a:	e7ee      	b.n	800ae7a <MemManage_Handler+0x6>

0800ae9c <BusFault_Handler>:
}
/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b082      	sub	sp, #8
 800aea0:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 4; iii++)
 800aea2:	2300      	movs	r3, #0
 800aea4:	71fb      	strb	r3, [r7, #7]
 800aea6:	e005      	b.n	800aeb4 <BusFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800aea8:	2064      	movs	r0, #100	; 0x64
 800aeaa:	f7f9 fbd7 	bl	800465c <HAL_Delay>
        for (uint8_t iii = 0; iii < 4; iii++)
 800aeae:	79fb      	ldrb	r3, [r7, #7]
 800aeb0:	3301      	adds	r3, #1
 800aeb2:	71fb      	strb	r3, [r7, #7]
 800aeb4:	79fb      	ldrb	r3, [r7, #7]
 800aeb6:	2b03      	cmp	r3, #3
 800aeb8:	d9f6      	bls.n	800aea8 <BusFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800aeba:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800aebe:	f7f9 fbcd 	bl	800465c <HAL_Delay>
        for (uint8_t iii = 0; iii < 4; iii++)
 800aec2:	e7ee      	b.n	800aea2 <BusFault_Handler+0x6>

0800aec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b082      	sub	sp, #8
 800aec8:	af00      	add	r7, sp, #0
    while (1)
    {
        for (uint8_t iii = 0; iii < 5; iii++)
 800aeca:	2300      	movs	r3, #0
 800aecc:	71fb      	strb	r3, [r7, #7]
 800aece:	e005      	b.n	800aedc <UsageFault_Handler+0x18>
        {
            //board_init_red_led_on();
            HAL_Delay(100);
 800aed0:	2064      	movs	r0, #100	; 0x64
 800aed2:	f7f9 fbc3 	bl	800465c <HAL_Delay>
        for (uint8_t iii = 0; iii < 5; iii++)
 800aed6:	79fb      	ldrb	r3, [r7, #7]
 800aed8:	3301      	adds	r3, #1
 800aeda:	71fb      	strb	r3, [r7, #7]
 800aedc:	79fb      	ldrb	r3, [r7, #7]
 800aede:	2b04      	cmp	r3, #4
 800aee0:	d9f6      	bls.n	800aed0 <UsageFault_Handler+0xc>
            //board_init_red_led_off();
        }
        HAL_Delay(3000);
 800aee2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800aee6:	f7f9 fbb9 	bl	800465c <HAL_Delay>
        for (uint8_t iii = 0; iii < 5; iii++)
 800aeea:	e7ee      	b.n	800aeca <UsageFault_Handler+0x6>

0800aeec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800aeec:	b480      	push	{r7}
 800aeee:	af00      	add	r7, sp, #0
}
 800aef0:	bf00      	nop
 800aef2:	46bd      	mov	sp, r7
 800aef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef8:	4770      	bx	lr
	...

0800aefc <EXTI0_IRQHandler>:
volatile uint32_t d_passes = 0;
/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800aefc:	b590      	push	{r4, r7, lr}
 800aefe:	b085      	sub	sp, #20
 800af00:	af02      	add	r7, sp, #8
    // D is pause
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_D_PIN;
 800af02:	2301      	movs	r3, #1
 800af04:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_D;
 800af06:	2303      	movs	r3, #3
 800af08:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_D_IRQ;
 800af0a:	2306      	movs	r3, #6
 800af0c:	713b      	strb	r3, [r7, #4]
    d_passes++;
 800af0e:	4b15      	ldr	r3, [pc, #84]	; (800af64 <EXTI0_IRQHandler+0x68>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	3301      	adds	r3, #1
 800af14:	4a13      	ldr	r2, [pc, #76]	; (800af64 <EXTI0_IRQHandler+0x68>)
 800af16:	6013      	str	r3, [r2, #0]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800af18:	88fb      	ldrh	r3, [r7, #6]
 800af1a:	4618      	mov	r0, r3
 800af1c:	f7fa fbfa 	bl	8005714 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800af20:	797a      	ldrb	r2, [r7, #5]
 800af22:	797b      	ldrb	r3, [r7, #5]
 800af24:	4910      	ldr	r1, [pc, #64]	; (800af68 <EXTI0_IRQHandler+0x6c>)
 800af26:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800af2a:	490f      	ldr	r1, [pc, #60]	; (800af68 <EXTI0_IRQHandler+0x6c>)
 800af2c:	00db      	lsls	r3, r3, #3
 800af2e:	440b      	add	r3, r1
 800af30:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800af32:	797c      	ldrb	r4, [r7, #5]
 800af34:	f7f7 fe5a 	bl	8002bec <xTaskGetTickCountFromISR>
 800af38:	4603      	mov	r3, r0
 800af3a:	4a0b      	ldr	r2, [pc, #44]	; (800af68 <EXTI0_IRQHandler+0x6c>)
 800af3c:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800af40:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800af44:	4618      	mov	r0, r3
 800af46:	f7f9 fcf4 	bl	8004932 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800af4a:	4b08      	ldr	r3, [pc, #32]	; (800af6c <EXTI0_IRQHandler+0x70>)
 800af4c:	6818      	ldr	r0, [r3, #0]
 800af4e:	7979      	ldrb	r1, [r7, #5]
 800af50:	463b      	mov	r3, r7
 800af52:	9300      	str	r3, [sp, #0]
 800af54:	2300      	movs	r3, #0
 800af56:	2203      	movs	r2, #3
 800af58:	f7f8 fa66 	bl	8003428 <xTaskGenericNotifyFromISR>
}
 800af5c:	bf00      	nop
 800af5e:	370c      	adds	r7, #12
 800af60:	46bd      	mov	sp, r7
 800af62:	bd90      	pop	{r4, r7, pc}
 800af64:	20004ef8 	.word	0x20004ef8
 800af68:	20000c24 	.word	0x20000c24
 800af6c:	20004f10 	.word	0x20004f10

0800af70 <EXTI2_IRQHandler>:
uint32_t g_dbg_b_interrupt_count = 0;
/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800af70:	b590      	push	{r4, r7, lr}
 800af72:	b085      	sub	sp, #20
 800af74:	af02      	add	r7, sp, #8
    // A is speed
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_A_PIN;
 800af76:	2304      	movs	r3, #4
 800af78:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_A;
 800af7a:	2300      	movs	r3, #0
 800af7c:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_A_IRQ;
 800af7e:	2308      	movs	r3, #8
 800af80:	713b      	strb	r3, [r7, #4]
    a_passes++;
 800af82:	4b15      	ldr	r3, [pc, #84]	; (800afd8 <EXTI2_IRQHandler+0x68>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	3301      	adds	r3, #1
 800af88:	4a13      	ldr	r2, [pc, #76]	; (800afd8 <EXTI2_IRQHandler+0x68>)
 800af8a:	6013      	str	r3, [r2, #0]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800af8c:	88fb      	ldrh	r3, [r7, #6]
 800af8e:	4618      	mov	r0, r3
 800af90:	f7fa fbc0 	bl	8005714 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800af94:	797a      	ldrb	r2, [r7, #5]
 800af96:	797b      	ldrb	r3, [r7, #5]
 800af98:	4910      	ldr	r1, [pc, #64]	; (800afdc <EXTI2_IRQHandler+0x6c>)
 800af9a:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800af9e:	490f      	ldr	r1, [pc, #60]	; (800afdc <EXTI2_IRQHandler+0x6c>)
 800afa0:	00db      	lsls	r3, r3, #3
 800afa2:	440b      	add	r3, r1
 800afa4:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800afa6:	797c      	ldrb	r4, [r7, #5]
 800afa8:	f7f7 fe20 	bl	8002bec <xTaskGetTickCountFromISR>
 800afac:	4603      	mov	r3, r0
 800afae:	4a0b      	ldr	r2, [pc, #44]	; (800afdc <EXTI2_IRQHandler+0x6c>)
 800afb0:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800afb4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800afb8:	4618      	mov	r0, r3
 800afba:	f7f9 fcba 	bl	8004932 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800afbe:	4b08      	ldr	r3, [pc, #32]	; (800afe0 <EXTI2_IRQHandler+0x70>)
 800afc0:	6818      	ldr	r0, [r3, #0]
 800afc2:	7979      	ldrb	r1, [r7, #5]
 800afc4:	463b      	mov	r3, r7
 800afc6:	9300      	str	r3, [sp, #0]
 800afc8:	2300      	movs	r3, #0
 800afca:	2203      	movs	r2, #3
 800afcc:	f7f8 fa2c 	bl	8003428 <xTaskGenericNotifyFromISR>
}
 800afd0:	bf00      	nop
 800afd2:	370c      	adds	r7, #12
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd90      	pop	{r4, r7, pc}
 800afd8:	20004efc 	.word	0x20004efc
 800afdc:	20000c24 	.word	0x20000c24
 800afe0:	20004f10 	.word	0x20004f10

0800afe4 <EXTI15_10_IRQHandler>:
volatile uint32_t b_passes = 0;
/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800afe4:	b590      	push	{r4, r7, lr}
 800afe6:	b085      	sub	sp, #20
 800afe8:	af02      	add	r7, sp, #8
    // B is state
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_B_PIN;
 800afea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800afee:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_B;
 800aff0:	2301      	movs	r3, #1
 800aff2:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_B_IRQ;
 800aff4:	2328      	movs	r3, #40	; 0x28
 800aff6:	713b      	strb	r3, [r7, #4]
    b_passes++;
 800aff8:	4b15      	ldr	r3, [pc, #84]	; (800b050 <EXTI15_10_IRQHandler+0x6c>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	3301      	adds	r3, #1
 800affe:	4a14      	ldr	r2, [pc, #80]	; (800b050 <EXTI15_10_IRQHandler+0x6c>)
 800b000:	6013      	str	r3, [r2, #0]
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800b002:	88fb      	ldrh	r3, [r7, #6]
 800b004:	4618      	mov	r0, r3
 800b006:	f7fa fb85 	bl	8005714 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800b00a:	797a      	ldrb	r2, [r7, #5]
 800b00c:	797b      	ldrb	r3, [r7, #5]
 800b00e:	4911      	ldr	r1, [pc, #68]	; (800b054 <EXTI15_10_IRQHandler+0x70>)
 800b010:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800b014:	490f      	ldr	r1, [pc, #60]	; (800b054 <EXTI15_10_IRQHandler+0x70>)
 800b016:	00db      	lsls	r3, r3, #3
 800b018:	440b      	add	r3, r1
 800b01a:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800b01c:	797c      	ldrb	r4, [r7, #5]
 800b01e:	f7f7 fde5 	bl	8002bec <xTaskGetTickCountFromISR>
 800b022:	4603      	mov	r3, r0
 800b024:	4a0b      	ldr	r2, [pc, #44]	; (800b054 <EXTI15_10_IRQHandler+0x70>)
 800b026:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800b02a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800b02e:	4618      	mov	r0, r3
 800b030:	f7f9 fc7f 	bl	8004932 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800b034:	4b08      	ldr	r3, [pc, #32]	; (800b058 <EXTI15_10_IRQHandler+0x74>)
 800b036:	6818      	ldr	r0, [r3, #0]
 800b038:	7979      	ldrb	r1, [r7, #5]
 800b03a:	463b      	mov	r3, r7
 800b03c:	9300      	str	r3, [sp, #0]
 800b03e:	2300      	movs	r3, #0
 800b040:	2203      	movs	r2, #3
 800b042:	f7f8 f9f1 	bl	8003428 <xTaskGenericNotifyFromISR>
}
 800b046:	bf00      	nop
 800b048:	370c      	adds	r7, #12
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd90      	pop	{r4, r7, pc}
 800b04e:	bf00      	nop
 800b050:	20004f00 	.word	0x20004f00
 800b054:	20000c24 	.word	0x20000c24
 800b058:	20004f10 	.word	0x20004f10

0800b05c <EXTI9_5_IRQHandler>:
volatile uint32_t c_passes = 0;
/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800b05c:	b590      	push	{r4, r7, lr}
 800b05e:	b085      	sub	sp, #20
 800b060:	af02      	add	r7, sp, #8
    // C is color
    BaseType_t xHigherPriorityTaskWoken;
    board_init_push_button_pin_e button_pin = PUSH_BUTTON_C_PIN;
 800b062:	2320      	movs	r3, #32
 800b064:	80fb      	strh	r3, [r7, #6]
    board_init_push_buttons_e button = PUSH_BUTTON_C;
 800b066:	2302      	movs	r3, #2
 800b068:	717b      	strb	r3, [r7, #5]
    board_init_push_button_irq_e button_irq = PUSH_BUTTON_C_IRQ;
 800b06a:	2317      	movs	r3, #23
 800b06c:	713b      	strb	r3, [r7, #4]
    c_passes++;
 800b06e:	4b15      	ldr	r3, [pc, #84]	; (800b0c4 <EXTI9_5_IRQHandler+0x68>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	3301      	adds	r3, #1
 800b074:	4a13      	ldr	r2, [pc, #76]	; (800b0c4 <EXTI9_5_IRQHandler+0x68>)
 800b076:	6013      	str	r3, [r2, #0]
    // add button irq here..
    HAL_GPIO_EXTI_IRQHandler(button_pin);
 800b078:	88fb      	ldrh	r3, [r7, #6]
 800b07a:	4618      	mov	r0, r3
 800b07c:	f7fa fb4a 	bl	8005714 <HAL_GPIO_EXTI_IRQHandler>
    g_button_press_timestamp[button][TIMESTAMP_PREVIOUS] = g_button_press_timestamp[button][TIMESTAMP_CURRENT];
 800b080:	797a      	ldrb	r2, [r7, #5]
 800b082:	797b      	ldrb	r3, [r7, #5]
 800b084:	4910      	ldr	r1, [pc, #64]	; (800b0c8 <EXTI9_5_IRQHandler+0x6c>)
 800b086:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800b08a:	490f      	ldr	r1, [pc, #60]	; (800b0c8 <EXTI9_5_IRQHandler+0x6c>)
 800b08c:	00db      	lsls	r3, r3, #3
 800b08e:	440b      	add	r3, r1
 800b090:	605a      	str	r2, [r3, #4]
    g_button_press_timestamp[button][TIMESTAMP_CURRENT] = xTaskGetTickCountFromISR();
 800b092:	797c      	ldrb	r4, [r7, #5]
 800b094:	f7f7 fdaa 	bl	8002bec <xTaskGetTickCountFromISR>
 800b098:	4603      	mov	r3, r0
 800b09a:	4a0b      	ldr	r2, [pc, #44]	; (800b0c8 <EXTI9_5_IRQHandler+0x6c>)
 800b09c:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
    HAL_NVIC_DisableIRQ(button_irq);
 800b0a0:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f7f9 fc44 	bl	8004932 <HAL_NVIC_DisableIRQ>
    xTaskNotifyFromISR(g_button_press_handle, button, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800b0aa:	4b08      	ldr	r3, [pc, #32]	; (800b0cc <EXTI9_5_IRQHandler+0x70>)
 800b0ac:	6818      	ldr	r0, [r3, #0]
 800b0ae:	7979      	ldrb	r1, [r7, #5]
 800b0b0:	463b      	mov	r3, r7
 800b0b2:	9300      	str	r3, [sp, #0]
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	2203      	movs	r2, #3
 800b0b8:	f7f8 f9b6 	bl	8003428 <xTaskGenericNotifyFromISR>
}
 800b0bc:	bf00      	nop
 800b0be:	370c      	adds	r7, #12
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd90      	pop	{r4, r7, pc}
 800b0c4:	20004f04 	.word	0x20004f04
 800b0c8:	20000c24 	.word	0x20000c24
 800b0cc:	20004f10 	.word	0x20004f10

0800b0d0 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b083      	sub	sp, #12
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	80fb      	strh	r3, [r7, #6]

}
 800b0da:	bf00      	nop
 800b0dc:	370c      	adds	r7, #12
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr

0800b0e6 <HAL_DMA_CMPLT_CALLBACK>:


void HAL_DMA_CMPLT_CALLBACK(DMA_HandleTypeDef *hdma)
{
 800b0e6:	b480      	push	{r7}
 800b0e8:	b083      	sub	sp, #12
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
    while(1);
 800b0ee:	e7fe      	b.n	800b0ee <HAL_DMA_CMPLT_CALLBACK+0x8>

0800b0f0 <HAL_TIM_PWM_PulseFinishedCallback>:
bool gb_dma_cmplt_strip_1 = true;
bool gb_dma_cmplt_strip_2 = true;
bool gb_dma_cmplt_strip_3 = true;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b082      	sub	sp, #8
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
    switch (htim->Channel)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	7f1b      	ldrb	r3, [r3, #28]
 800b0fc:	2b04      	cmp	r3, #4
 800b0fe:	d016      	beq.n	800b12e <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
 800b100:	2b04      	cmp	r3, #4
 800b102:	dc1c      	bgt.n	800b13e <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
 800b104:	2b01      	cmp	r3, #1
 800b106:	d002      	beq.n	800b10e <HAL_TIM_PWM_PulseFinishedCallback+0x1e>
 800b108:	2b02      	cmp	r3, #2
 800b10a:	d008      	beq.n	800b11e <HAL_TIM_PWM_PulseFinishedCallback+0x2e>
        case HAL_TIM_ACTIVE_CHANNEL_3:
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
            gb_dma_cmplt_strip_3 = true;
        break;
        default:
        break;
 800b10c:	e017      	b.n	800b13e <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 800b10e:	2100      	movs	r1, #0
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f7fc f9a3 	bl	800745c <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_1 = true;
 800b116:	4b0c      	ldr	r3, [pc, #48]	; (800b148 <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 800b118:	2201      	movs	r2, #1
 800b11a:	701a      	strb	r2, [r3, #0]
        break;
 800b11c:	e010      	b.n	800b140 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_2);
 800b11e:	2104      	movs	r1, #4
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f7fc f99b 	bl	800745c <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_2 = true;
 800b126:	4b09      	ldr	r3, [pc, #36]	; (800b14c <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 800b128:	2201      	movs	r2, #1
 800b12a:	701a      	strb	r2, [r3, #0]
        break;
 800b12c:	e008      	b.n	800b140 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
            HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
 800b12e:	2108      	movs	r1, #8
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f7fc f993 	bl	800745c <HAL_TIM_PWM_Stop_DMA>
            gb_dma_cmplt_strip_3 = true;
 800b136:	4b06      	ldr	r3, [pc, #24]	; (800b150 <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 800b138:	2201      	movs	r2, #1
 800b13a:	701a      	strb	r2, [r3, #0]
        break;
 800b13c:	e000      	b.n	800b140 <HAL_TIM_PWM_PulseFinishedCallback+0x50>
        break;
 800b13e:	bf00      	nop
    }
}
 800b140:	bf00      	nop
 800b142:	3708      	adds	r7, #8
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}
 800b148:	2000023a 	.word	0x2000023a
 800b14c:	2000023b 	.word	0x2000023b
 800b150:	2000023c 	.word	0x2000023c

0800b154 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800b158:	4802      	ldr	r0, [pc, #8]	; (800b164 <DMA1_Channel2_IRQHandler+0x10>)
 800b15a:	f7f9 fdaa 	bl	8004cb2 <HAL_DMA_IRQHandler>
}
 800b15e:	bf00      	nop
 800b160:	bd80      	pop	{r7, pc}
 800b162:	bf00      	nop
 800b164:	20003cf4 	.word	0x20003cf4

0800b168 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 800b16c:	4802      	ldr	r0, [pc, #8]	; (800b178 <DMA1_Channel3_IRQHandler+0x10>)
 800b16e:	f7f9 fda0 	bl	8004cb2 <HAL_DMA_IRQHandler>
}
 800b172:	bf00      	nop
 800b174:	bd80      	pop	{r7, pc}
 800b176:	bf00      	nop
 800b178:	20003d3c 	.word	0x20003d3c

0800b17c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim15_ch1_up_trig_com);
 800b180:	4802      	ldr	r0, [pc, #8]	; (800b18c <DMA1_Channel5_IRQHandler+0x10>)
 800b182:	f7f9 fd96 	bl	8004cb2 <HAL_DMA_IRQHandler>
}
 800b186:	bf00      	nop
 800b188:	bd80      	pop	{r7, pc}
 800b18a:	bf00      	nop
 800b18c:	20003dcc 	.word	0x20003dcc

0800b190 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim16_ch1_up);
 800b194:	4802      	ldr	r0, [pc, #8]	; (800b1a0 <DMA1_Channel6_IRQHandler+0x10>)
 800b196:	f7f9 fd8c 	bl	8004cb2 <HAL_DMA_IRQHandler>
}
 800b19a:	bf00      	nop
 800b19c:	bd80      	pop	{r7, pc}
 800b19e:	bf00      	nop
 800b1a0:	20003e14 	.word	0x20003e14

0800b1a4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 800b1a8:	4802      	ldr	r0, [pc, #8]	; (800b1b4 <DMA1_Channel7_IRQHandler+0x10>)
 800b1aa:	f7f9 fd82 	bl	8004cb2 <HAL_DMA_IRQHandler>
}
 800b1ae:	bf00      	nop
 800b1b0:	bd80      	pop	{r7, pc}
 800b1b2:	bf00      	nop
 800b1b4:	20003d84 	.word	0x20003d84

0800b1b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	af00      	add	r7, sp, #0
	return 1;
 800b1bc:	2301      	movs	r3, #1
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c6:	4770      	bx	lr

0800b1c8 <_kill>:

int _kill(int pid, int sig)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b082      	sub	sp, #8
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800b1d2:	f000 fc1b 	bl	800ba0c <__errno>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	2216      	movs	r2, #22
 800b1da:	601a      	str	r2, [r3, #0]
	return -1;
 800b1dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3708      	adds	r7, #8
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}

0800b1e8 <_exit>:

void _exit (int status)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b082      	sub	sp, #8
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800b1f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f7ff ffe7 	bl	800b1c8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800b1fa:	e7fe      	b.n	800b1fa <_exit+0x12>

0800b1fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b086      	sub	sp, #24
 800b200:	af00      	add	r7, sp, #0
 800b202:	60f8      	str	r0, [r7, #12]
 800b204:	60b9      	str	r1, [r7, #8]
 800b206:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b208:	2300      	movs	r3, #0
 800b20a:	617b      	str	r3, [r7, #20]
 800b20c:	e00a      	b.n	800b224 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800b20e:	f3af 8000 	nop.w
 800b212:	4601      	mov	r1, r0
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	1c5a      	adds	r2, r3, #1
 800b218:	60ba      	str	r2, [r7, #8]
 800b21a:	b2ca      	uxtb	r2, r1
 800b21c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	3301      	adds	r3, #1
 800b222:	617b      	str	r3, [r7, #20]
 800b224:	697a      	ldr	r2, [r7, #20]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	429a      	cmp	r2, r3
 800b22a:	dbf0      	blt.n	800b20e <_read+0x12>
	}

return len;
 800b22c:	687b      	ldr	r3, [r7, #4]
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3718      	adds	r7, #24
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}

0800b236 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b236:	b580      	push	{r7, lr}
 800b238:	b086      	sub	sp, #24
 800b23a:	af00      	add	r7, sp, #0
 800b23c:	60f8      	str	r0, [r7, #12]
 800b23e:	60b9      	str	r1, [r7, #8]
 800b240:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b242:	2300      	movs	r3, #0
 800b244:	617b      	str	r3, [r7, #20]
 800b246:	e009      	b.n	800b25c <_write+0x26>
	{
		__io_putchar(*ptr++);
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	1c5a      	adds	r2, r3, #1
 800b24c:	60ba      	str	r2, [r7, #8]
 800b24e:	781b      	ldrb	r3, [r3, #0]
 800b250:	4618      	mov	r0, r3
 800b252:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	3301      	adds	r3, #1
 800b25a:	617b      	str	r3, [r7, #20]
 800b25c:	697a      	ldr	r2, [r7, #20]
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	429a      	cmp	r2, r3
 800b262:	dbf1      	blt.n	800b248 <_write+0x12>
	}
	return len;
 800b264:	687b      	ldr	r3, [r7, #4]
}
 800b266:	4618      	mov	r0, r3
 800b268:	3718      	adds	r7, #24
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}

0800b26e <_close>:

int _close(int file)
{
 800b26e:	b480      	push	{r7}
 800b270:	b083      	sub	sp, #12
 800b272:	af00      	add	r7, sp, #0
 800b274:	6078      	str	r0, [r7, #4]
	return -1;
 800b276:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	370c      	adds	r7, #12
 800b27e:	46bd      	mov	sp, r7
 800b280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b284:	4770      	bx	lr

0800b286 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b286:	b480      	push	{r7}
 800b288:	b083      	sub	sp, #12
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	6078      	str	r0, [r7, #4]
 800b28e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b296:	605a      	str	r2, [r3, #4]
	return 0;
 800b298:	2300      	movs	r3, #0
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	370c      	adds	r7, #12
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a4:	4770      	bx	lr

0800b2a6 <_isatty>:

int _isatty(int file)
{
 800b2a6:	b480      	push	{r7}
 800b2a8:	b083      	sub	sp, #12
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	6078      	str	r0, [r7, #4]
	return 1;
 800b2ae:	2301      	movs	r3, #1
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	370c      	adds	r7, #12
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ba:	4770      	bx	lr

0800b2bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b085      	sub	sp, #20
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	60f8      	str	r0, [r7, #12]
 800b2c4:	60b9      	str	r1, [r7, #8]
 800b2c6:	607a      	str	r2, [r7, #4]
	return 0;
 800b2c8:	2300      	movs	r3, #0
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3714      	adds	r7, #20
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d4:	4770      	bx	lr
	...

0800b2d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b086      	sub	sp, #24
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b2e0:	4a14      	ldr	r2, [pc, #80]	; (800b334 <_sbrk+0x5c>)
 800b2e2:	4b15      	ldr	r3, [pc, #84]	; (800b338 <_sbrk+0x60>)
 800b2e4:	1ad3      	subs	r3, r2, r3
 800b2e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b2ec:	4b13      	ldr	r3, [pc, #76]	; (800b33c <_sbrk+0x64>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d102      	bne.n	800b2fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b2f4:	4b11      	ldr	r3, [pc, #68]	; (800b33c <_sbrk+0x64>)
 800b2f6:	4a12      	ldr	r2, [pc, #72]	; (800b340 <_sbrk+0x68>)
 800b2f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b2fa:	4b10      	ldr	r3, [pc, #64]	; (800b33c <_sbrk+0x64>)
 800b2fc:	681a      	ldr	r2, [r3, #0]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	4413      	add	r3, r2
 800b302:	693a      	ldr	r2, [r7, #16]
 800b304:	429a      	cmp	r2, r3
 800b306:	d207      	bcs.n	800b318 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b308:	f000 fb80 	bl	800ba0c <__errno>
 800b30c:	4603      	mov	r3, r0
 800b30e:	220c      	movs	r2, #12
 800b310:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b312:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b316:	e009      	b.n	800b32c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b318:	4b08      	ldr	r3, [pc, #32]	; (800b33c <_sbrk+0x64>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b31e:	4b07      	ldr	r3, [pc, #28]	; (800b33c <_sbrk+0x64>)
 800b320:	681a      	ldr	r2, [r3, #0]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	4413      	add	r3, r2
 800b326:	4a05      	ldr	r2, [pc, #20]	; (800b33c <_sbrk+0x64>)
 800b328:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b32a:	68fb      	ldr	r3, [r7, #12]
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3718      	adds	r7, #24
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}
 800b334:	20010000 	.word	0x20010000
 800b338:	00000400 	.word	0x00000400
 800b33c:	20004f08 	.word	0x20004f08
 800b340:	20006120 	.word	0x20006120

0800b344 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800b344:	b480      	push	{r7}
 800b346:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800b348:	4b06      	ldr	r3, [pc, #24]	; (800b364 <SystemInit+0x20>)
 800b34a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b34e:	4a05      	ldr	r2, [pc, #20]	; (800b364 <SystemInit+0x20>)
 800b350:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b354:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800b358:	bf00      	nop
 800b35a:	46bd      	mov	sp, r7
 800b35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b360:	4770      	bx	lr
 800b362:	bf00      	nop
 800b364:	e000ed00 	.word	0xe000ed00

0800b368 <board_init_peripheral_setup>:

#if defined(BOARD_SPUDGLO_V5)


static void board_init_peripheral_setup(void)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	af00      	add	r7, sp, #0
	uart_config_hal_setup();
 800b36c:	f7ff fa74 	bl	800a858 <uart_config_hal_setup>
	spi_config_hal_setup();
 800b370:	f7ff f886 	bl	800a480 <spi_config_hal_setup>
}
 800b374:	bf00      	nop
 800b376:	bd80      	pop	{r7, pc}

0800b378 <board_init_specific>:


void board_init_specific(void)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b086      	sub	sp, #24
 800b37c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b37e:	1d3b      	adds	r3, r7, #4
 800b380:	2200      	movs	r2, #0
 800b382:	601a      	str	r2, [r3, #0]
 800b384:	605a      	str	r2, [r3, #4]
 800b386:	609a      	str	r2, [r3, #8]
 800b388:	60da      	str	r2, [r3, #12]
 800b38a:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = PIN_LVL_EN;
 800b38c:	2380      	movs	r3, #128	; 0x80
 800b38e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b390:	2301      	movs	r3, #1
 800b392:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b394:	2300      	movs	r3, #0
 800b396:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800b398:	1d3b      	adds	r3, r7, #4
 800b39a:	4619      	mov	r1, r3
 800b39c:	4825      	ldr	r0, [pc, #148]	; (800b434 <board_init_specific+0xbc>)
 800b39e:	f7fa f827 	bl	80053f0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_LVL_EN, GPIO_PIN_RESET);
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	2180      	movs	r1, #128	; 0x80
 800b3a6:	4823      	ldr	r0, [pc, #140]	; (800b434 <board_init_specific+0xbc>)
 800b3a8:	f7fa f99c 	bl	80056e4 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_LVL_DIR;
 800b3ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3b0:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800b3ba:	1d3b      	adds	r3, r7, #4
 800b3bc:	4619      	mov	r1, r3
 800b3be:	481d      	ldr	r0, [pc, #116]	; (800b434 <board_init_specific+0xbc>)
 800b3c0:	f7fa f816 	bl	80053f0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_LVL_DIR, GPIO_PIN_SET);
 800b3c4:	2201      	movs	r2, #1
 800b3c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b3ca:	481a      	ldr	r0, [pc, #104]	; (800b434 <board_init_specific+0xbc>)
 800b3cc:	f7fa f98a 	bl	80056e4 <HAL_GPIO_WritePin>

    // setup XR_RX and XR_TX
    GPIO_InitStruct.Pin = PIN_VBUS_PRESENT;
 800b3d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b3d4:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_B, &GPIO_InitStruct);
 800b3de:	1d3b      	adds	r3, r7, #4
 800b3e0:	4619      	mov	r1, r3
 800b3e2:	4815      	ldr	r0, [pc, #84]	; (800b438 <board_init_specific+0xc0>)
 800b3e4:	f7fa f804 	bl	80053f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_GREEN_LED;
 800b3e8:	2304      	movs	r3, #4
 800b3ea:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800b3f4:	1d3b      	adds	r3, r7, #4
 800b3f6:	4619      	mov	r1, r3
 800b3f8:	480e      	ldr	r0, [pc, #56]	; (800b434 <board_init_specific+0xbc>)
 800b3fa:	f7f9 fff9 	bl	80053f0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_GREEN_LED, GPIO_PIN_RESET);
 800b3fe:	2200      	movs	r2, #0
 800b400:	2104      	movs	r1, #4
 800b402:	480c      	ldr	r0, [pc, #48]	; (800b434 <board_init_specific+0xbc>)
 800b404:	f7fa f96e 	bl	80056e4 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = PIN_RED_LED;
 800b408:	2308      	movs	r3, #8
 800b40a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b40c:	2301      	movs	r3, #1
 800b40e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b410:	2300      	movs	r3, #0
 800b412:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_C, &GPIO_InitStruct);
 800b414:	1d3b      	adds	r3, r7, #4
 800b416:	4619      	mov	r1, r3
 800b418:	4806      	ldr	r0, [pc, #24]	; (800b434 <board_init_specific+0xbc>)
 800b41a:	f7f9 ffe9 	bl	80053f0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_C, PIN_RED_LED, GPIO_PIN_RESET);
 800b41e:	2200      	movs	r2, #0
 800b420:	2108      	movs	r1, #8
 800b422:	4804      	ldr	r0, [pc, #16]	; (800b434 <board_init_specific+0xbc>)
 800b424:	f7fa f95e 	bl	80056e4 <HAL_GPIO_WritePin>

    board_init_peripheral_setup();
 800b428:	f7ff ff9e 	bl	800b368 <board_init_peripheral_setup>
}
 800b42c:	bf00      	nop
 800b42e:	3718      	adds	r7, #24
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}
 800b434:	48000800 	.word	0x48000800
 800b438:	48000400 	.word	0x48000400

0800b43c <board_init_specific_esp8266_uart_boot_disable>:
    HAL_GPIO_WritePin(PIN_PORT_A, PIN_ESP8266_GPIO0, GPIO_PIN_RESET);
}


void board_init_specific_esp8266_uart_boot_disable(void)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b086      	sub	sp, #24
 800b440:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b442:	1d3b      	adds	r3, r7, #4
 800b444:	2200      	movs	r2, #0
 800b446:	601a      	str	r2, [r3, #0]
 800b448:	605a      	str	r2, [r3, #4]
 800b44a:	609a      	str	r2, [r3, #8]
 800b44c:	60da      	str	r2, [r3, #12]
 800b44e:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = PIN_ESP8266_GPIO0;
 800b450:	2320      	movs	r3, #32
 800b452:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b454:	2301      	movs	r3, #1
 800b456:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b458:	2300      	movs	r3, #0
 800b45a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 800b45c:	1d3b      	adds	r3, r7, #4
 800b45e:	4619      	mov	r1, r3
 800b460:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b464:	f7f9 ffc4 	bl	80053f0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_A, PIN_ESP8266_GPIO0, GPIO_PIN_SET);
 800b468:	2201      	movs	r2, #1
 800b46a:	2120      	movs	r1, #32
 800b46c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b470:	f7fa f938 	bl	80056e4 <HAL_GPIO_WritePin>
}
 800b474:	bf00      	nop
 800b476:	3718      	adds	r7, #24
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}

0800b47c <board_init_specific_esp8266_power_enable>:


void board_init_specific_esp8266_power_enable(void)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b086      	sub	sp, #24
 800b480:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b482:	1d3b      	adds	r3, r7, #4
 800b484:	2200      	movs	r2, #0
 800b486:	601a      	str	r2, [r3, #0]
 800b488:	605a      	str	r2, [r3, #4]
 800b48a:	609a      	str	r2, [r3, #8]
 800b48c:	60da      	str	r2, [r3, #12]
 800b48e:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = PIN_ESP8266_EN;
 800b490:	2340      	movs	r3, #64	; 0x40
 800b492:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b494:	2301      	movs	r3, #1
 800b496:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b498:	2300      	movs	r3, #0
 800b49a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 800b49c:	1d3b      	adds	r3, r7, #4
 800b49e:	4619      	mov	r1, r3
 800b4a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b4a4:	f7f9 ffa4 	bl	80053f0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_A, PIN_ESP8266_EN, GPIO_PIN_SET);
 800b4a8:	2201      	movs	r2, #1
 800b4aa:	2140      	movs	r1, #64	; 0x40
 800b4ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b4b0:	f7fa f918 	bl	80056e4 <HAL_GPIO_WritePin>
}
 800b4b4:	bf00      	nop
 800b4b6:	3718      	adds	r7, #24
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}

0800b4bc <board_init_specific_esp8266_power_disable>:


void board_init_specific_esp8266_power_disable(void)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b086      	sub	sp, #24
 800b4c0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b4c2:	1d3b      	adds	r3, r7, #4
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	601a      	str	r2, [r3, #0]
 800b4c8:	605a      	str	r2, [r3, #4]
 800b4ca:	609a      	str	r2, [r3, #8]
 800b4cc:	60da      	str	r2, [r3, #12]
 800b4ce:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = PIN_ESP8266_EN;
 800b4d0:	2340      	movs	r3, #64	; 0x40
 800b4d2:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 800b4dc:	1d3b      	adds	r3, r7, #4
 800b4de:	4619      	mov	r1, r3
 800b4e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b4e4:	f7f9 ff84 	bl	80053f0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_A, PIN_ESP8266_EN, GPIO_PIN_RESET);
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	2140      	movs	r1, #64	; 0x40
 800b4ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b4f0:	f7fa f8f8 	bl	80056e4 <HAL_GPIO_WritePin>
}
 800b4f4:	bf00      	nop
 800b4f6:	3718      	adds	r7, #24
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}

0800b4fc <board_init_specific_esp8266_reset_assert>:


void board_init_specific_esp8266_reset_assert(void)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b086      	sub	sp, #24
 800b500:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b502:	1d3b      	adds	r3, r7, #4
 800b504:	2200      	movs	r2, #0
 800b506:	601a      	str	r2, [r3, #0]
 800b508:	605a      	str	r2, [r3, #4]
 800b50a:	609a      	str	r2, [r3, #8]
 800b50c:	60da      	str	r2, [r3, #12]
 800b50e:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = PIN_ESP8266_RST;
 800b510:	2380      	movs	r3, #128	; 0x80
 800b512:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b514:	2301      	movs	r3, #1
 800b516:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b518:	2300      	movs	r3, #0
 800b51a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 800b51c:	1d3b      	adds	r3, r7, #4
 800b51e:	4619      	mov	r1, r3
 800b520:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b524:	f7f9 ff64 	bl	80053f0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_A, PIN_ESP8266_RST, GPIO_PIN_RESET);
 800b528:	2200      	movs	r2, #0
 800b52a:	2180      	movs	r1, #128	; 0x80
 800b52c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b530:	f7fa f8d8 	bl	80056e4 <HAL_GPIO_WritePin>
}
 800b534:	bf00      	nop
 800b536:	3718      	adds	r7, #24
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}

0800b53c <board_init_specific_esp8266_reset_deassert>:


void board_init_specific_esp8266_reset_deassert(void)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b086      	sub	sp, #24
 800b540:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b542:	1d3b      	adds	r3, r7, #4
 800b544:	2200      	movs	r2, #0
 800b546:	601a      	str	r2, [r3, #0]
 800b548:	605a      	str	r2, [r3, #4]
 800b54a:	609a      	str	r2, [r3, #8]
 800b54c:	60da      	str	r2, [r3, #12]
 800b54e:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = PIN_ESP8266_RST;
 800b550:	2380      	movs	r3, #128	; 0x80
 800b552:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b554:	2301      	movs	r3, #1
 800b556:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b558:	2300      	movs	r3, #0
 800b55a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(PIN_PORT_A, &GPIO_InitStruct);
 800b55c:	1d3b      	adds	r3, r7, #4
 800b55e:	4619      	mov	r1, r3
 800b560:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b564:	f7f9 ff44 	bl	80053f0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(PIN_PORT_A, PIN_ESP8266_RST, GPIO_PIN_SET);
 800b568:	2201      	movs	r2, #1
 800b56a:	2180      	movs	r1, #128	; 0x80
 800b56c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b570:	f7fa f8b8 	bl	80056e4 <HAL_GPIO_WritePin>
}
 800b574:	bf00      	nop
 800b576:	3718      	adds	r7, #24
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}

0800b57c <main>:
#include "task_create.h"
#include "animate_led.h"
#include "flash_info.h"

int main(void)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	af00      	add	r7, sp, #0

    board_init_common_board_init();
 800b580:	f7fe feac 	bl	800a2dc <board_init_common_board_init>
    //flash_info_init();
    task_create();
 800b584:	f000 f808 	bl	800b598 <task_create>
	//semaphore_create();
    reset_ws2812b();
 800b588:	f7f5 f90e 	bl	80007a8 <reset_ws2812b>
	osKernelStart();
 800b58c:	f7f6 f98e 	bl	80018ac <osKernelStart>
 800b590:	2300      	movs	r3, #0
}
 800b592:	4618      	mov	r0, r3
 800b594:	bd80      	pop	{r7, pc}
	...

0800b598 <task_create>:
	.cb_size = sizeof(g_dma_transfer_control_block),
	.priority = (osPriority_t) osPriorityNormal,
};

void task_create(void)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	af00      	add	r7, sp, #0
    osKernelInitialize();
 800b59c:	f7f6 f962 	bl	8001864 <osKernelInitialize>
	g_button_press_handle = osThreadNew(task_button_press, NULL, &g_task_button_press_attributes);
 800b5a0:	4a0a      	ldr	r2, [pc, #40]	; (800b5cc <task_create+0x34>)
 800b5a2:	2100      	movs	r1, #0
 800b5a4:	480a      	ldr	r0, [pc, #40]	; (800b5d0 <task_create+0x38>)
 800b5a6:	f7f6 f9a7 	bl	80018f8 <osThreadNew>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	4a09      	ldr	r2, [pc, #36]	; (800b5d4 <task_create+0x3c>)
 800b5ae:	6013      	str	r3, [r2, #0]
    //g_dma_transfer_handle = osThreadNew(task_dma_transfer, NULL, &g_task_dma_transfer_attributes);
    g_led_strip_1_ctrl_handle = osThreadNew(task_led_ctrl_strip_one, NULL, &g_task_strip_1_led_ctrl_attributes);
 800b5b0:	4a09      	ldr	r2, [pc, #36]	; (800b5d8 <task_create+0x40>)
 800b5b2:	2100      	movs	r1, #0
 800b5b4:	4809      	ldr	r0, [pc, #36]	; (800b5dc <task_create+0x44>)
 800b5b6:	f7f6 f99f 	bl	80018f8 <osThreadNew>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	4a08      	ldr	r2, [pc, #32]	; (800b5e0 <task_create+0x48>)
 800b5be:	6013      	str	r3, [r2, #0]
    g_tasks_running = true; // technically will be running after task scheduler started
 800b5c0:	4b08      	ldr	r3, [pc, #32]	; (800b5e4 <task_create+0x4c>)
 800b5c2:	2201      	movs	r2, #1
 800b5c4:	701a      	strb	r2, [r3, #0]



}
 800b5c6:	bf00      	nop
 800b5c8:	bd80      	pop	{r7, pc}
 800b5ca:	bf00      	nop
 800b5cc:	0800c934 	.word	0x0800c934
 800b5d0:	08000c89 	.word	0x08000c89
 800b5d4:	20004f10 	.word	0x20004f10
 800b5d8:	0800c958 	.word	0x0800c958
 800b5dc:	08000ee5 	.word	0x08000ee5
 800b5e0:	20004f0c 	.word	0x20004f0c
 800b5e4:	20005fcc 	.word	0x20005fcc

0800b5e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800b5e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b620 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800b5ec:	f7ff feaa 	bl	800b344 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800b5f0:	480c      	ldr	r0, [pc, #48]	; (800b624 <LoopForever+0x6>)
  ldr r1, =_edata
 800b5f2:	490d      	ldr	r1, [pc, #52]	; (800b628 <LoopForever+0xa>)
  ldr r2, =_sidata
 800b5f4:	4a0d      	ldr	r2, [pc, #52]	; (800b62c <LoopForever+0xe>)
  movs r3, #0
 800b5f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b5f8:	e002      	b.n	800b600 <LoopCopyDataInit>

0800b5fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b5fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b5fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b5fe:	3304      	adds	r3, #4

0800b600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b604:	d3f9      	bcc.n	800b5fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b606:	4a0a      	ldr	r2, [pc, #40]	; (800b630 <LoopForever+0x12>)
  ldr r4, =_ebss
 800b608:	4c0a      	ldr	r4, [pc, #40]	; (800b634 <LoopForever+0x16>)
  movs r3, #0
 800b60a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b60c:	e001      	b.n	800b612 <LoopFillZerobss>

0800b60e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b60e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b610:	3204      	adds	r2, #4

0800b612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b614:	d3fb      	bcc.n	800b60e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800b616:	f000 f9ff 	bl	800ba18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800b61a:	f7ff ffaf 	bl	800b57c <main>

0800b61e <LoopForever>:

LoopForever:
    b LoopForever
 800b61e:	e7fe      	b.n	800b61e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800b620:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800b624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b628:	20000414 	.word	0x20000414
  ldr r2, =_sidata
 800b62c:	0800ca6c 	.word	0x0800ca6c
  ldr r2, =_sbss
 800b630:	20000418 	.word	0x20000418
  ldr r4, =_ebss
 800b634:	2000611c 	.word	0x2000611c

0800b638 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800b638:	e7fe      	b.n	800b638 <ADC1_IRQHandler>
	...

0800b63c <malloc>:
 800b63c:	4b02      	ldr	r3, [pc, #8]	; (800b648 <malloc+0xc>)
 800b63e:	4601      	mov	r1, r0
 800b640:	6818      	ldr	r0, [r3, #0]
 800b642:	f000 b823 	b.w	800b68c <_malloc_r>
 800b646:	bf00      	nop
 800b648:	20000410 	.word	0x20000410

0800b64c <sbrk_aligned>:
 800b64c:	b570      	push	{r4, r5, r6, lr}
 800b64e:	4e0e      	ldr	r6, [pc, #56]	; (800b688 <sbrk_aligned+0x3c>)
 800b650:	460c      	mov	r4, r1
 800b652:	6831      	ldr	r1, [r6, #0]
 800b654:	4605      	mov	r5, r0
 800b656:	b911      	cbnz	r1, 800b65e <sbrk_aligned+0x12>
 800b658:	f000 f9c8 	bl	800b9ec <_sbrk_r>
 800b65c:	6030      	str	r0, [r6, #0]
 800b65e:	4621      	mov	r1, r4
 800b660:	4628      	mov	r0, r5
 800b662:	f000 f9c3 	bl	800b9ec <_sbrk_r>
 800b666:	1c43      	adds	r3, r0, #1
 800b668:	d00a      	beq.n	800b680 <sbrk_aligned+0x34>
 800b66a:	1cc4      	adds	r4, r0, #3
 800b66c:	f024 0403 	bic.w	r4, r4, #3
 800b670:	42a0      	cmp	r0, r4
 800b672:	d007      	beq.n	800b684 <sbrk_aligned+0x38>
 800b674:	1a21      	subs	r1, r4, r0
 800b676:	4628      	mov	r0, r5
 800b678:	f000 f9b8 	bl	800b9ec <_sbrk_r>
 800b67c:	3001      	adds	r0, #1
 800b67e:	d101      	bne.n	800b684 <sbrk_aligned+0x38>
 800b680:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b684:	4620      	mov	r0, r4
 800b686:	bd70      	pop	{r4, r5, r6, pc}
 800b688:	20005fd4 	.word	0x20005fd4

0800b68c <_malloc_r>:
 800b68c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b690:	1ccd      	adds	r5, r1, #3
 800b692:	f025 0503 	bic.w	r5, r5, #3
 800b696:	3508      	adds	r5, #8
 800b698:	2d0c      	cmp	r5, #12
 800b69a:	bf38      	it	cc
 800b69c:	250c      	movcc	r5, #12
 800b69e:	2d00      	cmp	r5, #0
 800b6a0:	4607      	mov	r7, r0
 800b6a2:	db01      	blt.n	800b6a8 <_malloc_r+0x1c>
 800b6a4:	42a9      	cmp	r1, r5
 800b6a6:	d905      	bls.n	800b6b4 <_malloc_r+0x28>
 800b6a8:	230c      	movs	r3, #12
 800b6aa:	603b      	str	r3, [r7, #0]
 800b6ac:	2600      	movs	r6, #0
 800b6ae:	4630      	mov	r0, r6
 800b6b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b788 <_malloc_r+0xfc>
 800b6b8:	f000 f868 	bl	800b78c <__malloc_lock>
 800b6bc:	f8d8 3000 	ldr.w	r3, [r8]
 800b6c0:	461c      	mov	r4, r3
 800b6c2:	bb5c      	cbnz	r4, 800b71c <_malloc_r+0x90>
 800b6c4:	4629      	mov	r1, r5
 800b6c6:	4638      	mov	r0, r7
 800b6c8:	f7ff ffc0 	bl	800b64c <sbrk_aligned>
 800b6cc:	1c43      	adds	r3, r0, #1
 800b6ce:	4604      	mov	r4, r0
 800b6d0:	d155      	bne.n	800b77e <_malloc_r+0xf2>
 800b6d2:	f8d8 4000 	ldr.w	r4, [r8]
 800b6d6:	4626      	mov	r6, r4
 800b6d8:	2e00      	cmp	r6, #0
 800b6da:	d145      	bne.n	800b768 <_malloc_r+0xdc>
 800b6dc:	2c00      	cmp	r4, #0
 800b6de:	d048      	beq.n	800b772 <_malloc_r+0xe6>
 800b6e0:	6823      	ldr	r3, [r4, #0]
 800b6e2:	4631      	mov	r1, r6
 800b6e4:	4638      	mov	r0, r7
 800b6e6:	eb04 0903 	add.w	r9, r4, r3
 800b6ea:	f000 f97f 	bl	800b9ec <_sbrk_r>
 800b6ee:	4581      	cmp	r9, r0
 800b6f0:	d13f      	bne.n	800b772 <_malloc_r+0xe6>
 800b6f2:	6821      	ldr	r1, [r4, #0]
 800b6f4:	1a6d      	subs	r5, r5, r1
 800b6f6:	4629      	mov	r1, r5
 800b6f8:	4638      	mov	r0, r7
 800b6fa:	f7ff ffa7 	bl	800b64c <sbrk_aligned>
 800b6fe:	3001      	adds	r0, #1
 800b700:	d037      	beq.n	800b772 <_malloc_r+0xe6>
 800b702:	6823      	ldr	r3, [r4, #0]
 800b704:	442b      	add	r3, r5
 800b706:	6023      	str	r3, [r4, #0]
 800b708:	f8d8 3000 	ldr.w	r3, [r8]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d038      	beq.n	800b782 <_malloc_r+0xf6>
 800b710:	685a      	ldr	r2, [r3, #4]
 800b712:	42a2      	cmp	r2, r4
 800b714:	d12b      	bne.n	800b76e <_malloc_r+0xe2>
 800b716:	2200      	movs	r2, #0
 800b718:	605a      	str	r2, [r3, #4]
 800b71a:	e00f      	b.n	800b73c <_malloc_r+0xb0>
 800b71c:	6822      	ldr	r2, [r4, #0]
 800b71e:	1b52      	subs	r2, r2, r5
 800b720:	d41f      	bmi.n	800b762 <_malloc_r+0xd6>
 800b722:	2a0b      	cmp	r2, #11
 800b724:	d917      	bls.n	800b756 <_malloc_r+0xca>
 800b726:	1961      	adds	r1, r4, r5
 800b728:	42a3      	cmp	r3, r4
 800b72a:	6025      	str	r5, [r4, #0]
 800b72c:	bf18      	it	ne
 800b72e:	6059      	strne	r1, [r3, #4]
 800b730:	6863      	ldr	r3, [r4, #4]
 800b732:	bf08      	it	eq
 800b734:	f8c8 1000 	streq.w	r1, [r8]
 800b738:	5162      	str	r2, [r4, r5]
 800b73a:	604b      	str	r3, [r1, #4]
 800b73c:	4638      	mov	r0, r7
 800b73e:	f104 060b 	add.w	r6, r4, #11
 800b742:	f000 f829 	bl	800b798 <__malloc_unlock>
 800b746:	f026 0607 	bic.w	r6, r6, #7
 800b74a:	1d23      	adds	r3, r4, #4
 800b74c:	1af2      	subs	r2, r6, r3
 800b74e:	d0ae      	beq.n	800b6ae <_malloc_r+0x22>
 800b750:	1b9b      	subs	r3, r3, r6
 800b752:	50a3      	str	r3, [r4, r2]
 800b754:	e7ab      	b.n	800b6ae <_malloc_r+0x22>
 800b756:	42a3      	cmp	r3, r4
 800b758:	6862      	ldr	r2, [r4, #4]
 800b75a:	d1dd      	bne.n	800b718 <_malloc_r+0x8c>
 800b75c:	f8c8 2000 	str.w	r2, [r8]
 800b760:	e7ec      	b.n	800b73c <_malloc_r+0xb0>
 800b762:	4623      	mov	r3, r4
 800b764:	6864      	ldr	r4, [r4, #4]
 800b766:	e7ac      	b.n	800b6c2 <_malloc_r+0x36>
 800b768:	4634      	mov	r4, r6
 800b76a:	6876      	ldr	r6, [r6, #4]
 800b76c:	e7b4      	b.n	800b6d8 <_malloc_r+0x4c>
 800b76e:	4613      	mov	r3, r2
 800b770:	e7cc      	b.n	800b70c <_malloc_r+0x80>
 800b772:	230c      	movs	r3, #12
 800b774:	603b      	str	r3, [r7, #0]
 800b776:	4638      	mov	r0, r7
 800b778:	f000 f80e 	bl	800b798 <__malloc_unlock>
 800b77c:	e797      	b.n	800b6ae <_malloc_r+0x22>
 800b77e:	6025      	str	r5, [r4, #0]
 800b780:	e7dc      	b.n	800b73c <_malloc_r+0xb0>
 800b782:	605b      	str	r3, [r3, #4]
 800b784:	deff      	udf	#255	; 0xff
 800b786:	bf00      	nop
 800b788:	20005fd0 	.word	0x20005fd0

0800b78c <__malloc_lock>:
 800b78c:	4801      	ldr	r0, [pc, #4]	; (800b794 <__malloc_lock+0x8>)
 800b78e:	f000 b968 	b.w	800ba62 <__retarget_lock_acquire_recursive>
 800b792:	bf00      	nop
 800b794:	20006114 	.word	0x20006114

0800b798 <__malloc_unlock>:
 800b798:	4801      	ldr	r0, [pc, #4]	; (800b7a0 <__malloc_unlock+0x8>)
 800b79a:	f000 b963 	b.w	800ba64 <__retarget_lock_release_recursive>
 800b79e:	bf00      	nop
 800b7a0:	20006114 	.word	0x20006114

0800b7a4 <srand>:
 800b7a4:	b538      	push	{r3, r4, r5, lr}
 800b7a6:	4b10      	ldr	r3, [pc, #64]	; (800b7e8 <srand+0x44>)
 800b7a8:	681d      	ldr	r5, [r3, #0]
 800b7aa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b7ac:	4604      	mov	r4, r0
 800b7ae:	b9b3      	cbnz	r3, 800b7de <srand+0x3a>
 800b7b0:	2018      	movs	r0, #24
 800b7b2:	f7ff ff43 	bl	800b63c <malloc>
 800b7b6:	4602      	mov	r2, r0
 800b7b8:	6328      	str	r0, [r5, #48]	; 0x30
 800b7ba:	b920      	cbnz	r0, 800b7c6 <srand+0x22>
 800b7bc:	4b0b      	ldr	r3, [pc, #44]	; (800b7ec <srand+0x48>)
 800b7be:	480c      	ldr	r0, [pc, #48]	; (800b7f0 <srand+0x4c>)
 800b7c0:	2146      	movs	r1, #70	; 0x46
 800b7c2:	f000 f967 	bl	800ba94 <__assert_func>
 800b7c6:	490b      	ldr	r1, [pc, #44]	; (800b7f4 <srand+0x50>)
 800b7c8:	4b0b      	ldr	r3, [pc, #44]	; (800b7f8 <srand+0x54>)
 800b7ca:	e9c0 1300 	strd	r1, r3, [r0]
 800b7ce:	4b0b      	ldr	r3, [pc, #44]	; (800b7fc <srand+0x58>)
 800b7d0:	6083      	str	r3, [r0, #8]
 800b7d2:	230b      	movs	r3, #11
 800b7d4:	8183      	strh	r3, [r0, #12]
 800b7d6:	2100      	movs	r1, #0
 800b7d8:	2001      	movs	r0, #1
 800b7da:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b7de:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	611c      	str	r4, [r3, #16]
 800b7e4:	615a      	str	r2, [r3, #20]
 800b7e6:	bd38      	pop	{r3, r4, r5, pc}
 800b7e8:	20000410 	.word	0x20000410
 800b7ec:	0800c97c 	.word	0x0800c97c
 800b7f0:	0800c993 	.word	0x0800c993
 800b7f4:	abcd330e 	.word	0xabcd330e
 800b7f8:	e66d1234 	.word	0xe66d1234
 800b7fc:	0005deec 	.word	0x0005deec

0800b800 <std>:
 800b800:	2300      	movs	r3, #0
 800b802:	b510      	push	{r4, lr}
 800b804:	4604      	mov	r4, r0
 800b806:	e9c0 3300 	strd	r3, r3, [r0]
 800b80a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b80e:	6083      	str	r3, [r0, #8]
 800b810:	8181      	strh	r1, [r0, #12]
 800b812:	6643      	str	r3, [r0, #100]	; 0x64
 800b814:	81c2      	strh	r2, [r0, #14]
 800b816:	6183      	str	r3, [r0, #24]
 800b818:	4619      	mov	r1, r3
 800b81a:	2208      	movs	r2, #8
 800b81c:	305c      	adds	r0, #92	; 0x5c
 800b81e:	f000 f8b1 	bl	800b984 <memset>
 800b822:	4b0d      	ldr	r3, [pc, #52]	; (800b858 <std+0x58>)
 800b824:	6263      	str	r3, [r4, #36]	; 0x24
 800b826:	4b0d      	ldr	r3, [pc, #52]	; (800b85c <std+0x5c>)
 800b828:	62a3      	str	r3, [r4, #40]	; 0x28
 800b82a:	4b0d      	ldr	r3, [pc, #52]	; (800b860 <std+0x60>)
 800b82c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b82e:	4b0d      	ldr	r3, [pc, #52]	; (800b864 <std+0x64>)
 800b830:	6323      	str	r3, [r4, #48]	; 0x30
 800b832:	4b0d      	ldr	r3, [pc, #52]	; (800b868 <std+0x68>)
 800b834:	6224      	str	r4, [r4, #32]
 800b836:	429c      	cmp	r4, r3
 800b838:	d006      	beq.n	800b848 <std+0x48>
 800b83a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b83e:	4294      	cmp	r4, r2
 800b840:	d002      	beq.n	800b848 <std+0x48>
 800b842:	33d0      	adds	r3, #208	; 0xd0
 800b844:	429c      	cmp	r4, r3
 800b846:	d105      	bne.n	800b854 <std+0x54>
 800b848:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b84c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b850:	f000 b906 	b.w	800ba60 <__retarget_lock_init_recursive>
 800b854:	bd10      	pop	{r4, pc}
 800b856:	bf00      	nop
 800b858:	0800bcc5 	.word	0x0800bcc5
 800b85c:	0800bce7 	.word	0x0800bce7
 800b860:	0800bd1f 	.word	0x0800bd1f
 800b864:	0800bd43 	.word	0x0800bd43
 800b868:	20005fd8 	.word	0x20005fd8

0800b86c <stdio_exit_handler>:
 800b86c:	4a02      	ldr	r2, [pc, #8]	; (800b878 <stdio_exit_handler+0xc>)
 800b86e:	4903      	ldr	r1, [pc, #12]	; (800b87c <stdio_exit_handler+0x10>)
 800b870:	4803      	ldr	r0, [pc, #12]	; (800b880 <stdio_exit_handler+0x14>)
 800b872:	f000 b869 	b.w	800b948 <_fwalk_sglue>
 800b876:	bf00      	nop
 800b878:	200003b8 	.word	0x200003b8
 800b87c:	0800bc75 	.word	0x0800bc75
 800b880:	200003c4 	.word	0x200003c4

0800b884 <cleanup_stdio>:
 800b884:	6841      	ldr	r1, [r0, #4]
 800b886:	4b0c      	ldr	r3, [pc, #48]	; (800b8b8 <cleanup_stdio+0x34>)
 800b888:	4299      	cmp	r1, r3
 800b88a:	b510      	push	{r4, lr}
 800b88c:	4604      	mov	r4, r0
 800b88e:	d001      	beq.n	800b894 <cleanup_stdio+0x10>
 800b890:	f000 f9f0 	bl	800bc74 <_fflush_r>
 800b894:	68a1      	ldr	r1, [r4, #8]
 800b896:	4b09      	ldr	r3, [pc, #36]	; (800b8bc <cleanup_stdio+0x38>)
 800b898:	4299      	cmp	r1, r3
 800b89a:	d002      	beq.n	800b8a2 <cleanup_stdio+0x1e>
 800b89c:	4620      	mov	r0, r4
 800b89e:	f000 f9e9 	bl	800bc74 <_fflush_r>
 800b8a2:	68e1      	ldr	r1, [r4, #12]
 800b8a4:	4b06      	ldr	r3, [pc, #24]	; (800b8c0 <cleanup_stdio+0x3c>)
 800b8a6:	4299      	cmp	r1, r3
 800b8a8:	d004      	beq.n	800b8b4 <cleanup_stdio+0x30>
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8b0:	f000 b9e0 	b.w	800bc74 <_fflush_r>
 800b8b4:	bd10      	pop	{r4, pc}
 800b8b6:	bf00      	nop
 800b8b8:	20005fd8 	.word	0x20005fd8
 800b8bc:	20006040 	.word	0x20006040
 800b8c0:	200060a8 	.word	0x200060a8

0800b8c4 <global_stdio_init.part.0>:
 800b8c4:	b510      	push	{r4, lr}
 800b8c6:	4b0b      	ldr	r3, [pc, #44]	; (800b8f4 <global_stdio_init.part.0+0x30>)
 800b8c8:	4c0b      	ldr	r4, [pc, #44]	; (800b8f8 <global_stdio_init.part.0+0x34>)
 800b8ca:	4a0c      	ldr	r2, [pc, #48]	; (800b8fc <global_stdio_init.part.0+0x38>)
 800b8cc:	601a      	str	r2, [r3, #0]
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	2104      	movs	r1, #4
 800b8d4:	f7ff ff94 	bl	800b800 <std>
 800b8d8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b8dc:	2201      	movs	r2, #1
 800b8de:	2109      	movs	r1, #9
 800b8e0:	f7ff ff8e 	bl	800b800 <std>
 800b8e4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b8e8:	2202      	movs	r2, #2
 800b8ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8ee:	2112      	movs	r1, #18
 800b8f0:	f7ff bf86 	b.w	800b800 <std>
 800b8f4:	20006110 	.word	0x20006110
 800b8f8:	20005fd8 	.word	0x20005fd8
 800b8fc:	0800b86d 	.word	0x0800b86d

0800b900 <__sfp_lock_acquire>:
 800b900:	4801      	ldr	r0, [pc, #4]	; (800b908 <__sfp_lock_acquire+0x8>)
 800b902:	f000 b8ae 	b.w	800ba62 <__retarget_lock_acquire_recursive>
 800b906:	bf00      	nop
 800b908:	20006115 	.word	0x20006115

0800b90c <__sfp_lock_release>:
 800b90c:	4801      	ldr	r0, [pc, #4]	; (800b914 <__sfp_lock_release+0x8>)
 800b90e:	f000 b8a9 	b.w	800ba64 <__retarget_lock_release_recursive>
 800b912:	bf00      	nop
 800b914:	20006115 	.word	0x20006115

0800b918 <__sinit>:
 800b918:	b510      	push	{r4, lr}
 800b91a:	4604      	mov	r4, r0
 800b91c:	f7ff fff0 	bl	800b900 <__sfp_lock_acquire>
 800b920:	6a23      	ldr	r3, [r4, #32]
 800b922:	b11b      	cbz	r3, 800b92c <__sinit+0x14>
 800b924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b928:	f7ff bff0 	b.w	800b90c <__sfp_lock_release>
 800b92c:	4b04      	ldr	r3, [pc, #16]	; (800b940 <__sinit+0x28>)
 800b92e:	6223      	str	r3, [r4, #32]
 800b930:	4b04      	ldr	r3, [pc, #16]	; (800b944 <__sinit+0x2c>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d1f5      	bne.n	800b924 <__sinit+0xc>
 800b938:	f7ff ffc4 	bl	800b8c4 <global_stdio_init.part.0>
 800b93c:	e7f2      	b.n	800b924 <__sinit+0xc>
 800b93e:	bf00      	nop
 800b940:	0800b885 	.word	0x0800b885
 800b944:	20006110 	.word	0x20006110

0800b948 <_fwalk_sglue>:
 800b948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b94c:	4607      	mov	r7, r0
 800b94e:	4688      	mov	r8, r1
 800b950:	4614      	mov	r4, r2
 800b952:	2600      	movs	r6, #0
 800b954:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b958:	f1b9 0901 	subs.w	r9, r9, #1
 800b95c:	d505      	bpl.n	800b96a <_fwalk_sglue+0x22>
 800b95e:	6824      	ldr	r4, [r4, #0]
 800b960:	2c00      	cmp	r4, #0
 800b962:	d1f7      	bne.n	800b954 <_fwalk_sglue+0xc>
 800b964:	4630      	mov	r0, r6
 800b966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b96a:	89ab      	ldrh	r3, [r5, #12]
 800b96c:	2b01      	cmp	r3, #1
 800b96e:	d907      	bls.n	800b980 <_fwalk_sglue+0x38>
 800b970:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b974:	3301      	adds	r3, #1
 800b976:	d003      	beq.n	800b980 <_fwalk_sglue+0x38>
 800b978:	4629      	mov	r1, r5
 800b97a:	4638      	mov	r0, r7
 800b97c:	47c0      	blx	r8
 800b97e:	4306      	orrs	r6, r0
 800b980:	3568      	adds	r5, #104	; 0x68
 800b982:	e7e9      	b.n	800b958 <_fwalk_sglue+0x10>

0800b984 <memset>:
 800b984:	4402      	add	r2, r0
 800b986:	4603      	mov	r3, r0
 800b988:	4293      	cmp	r3, r2
 800b98a:	d100      	bne.n	800b98e <memset+0xa>
 800b98c:	4770      	bx	lr
 800b98e:	f803 1b01 	strb.w	r1, [r3], #1
 800b992:	e7f9      	b.n	800b988 <memset+0x4>

0800b994 <time>:
 800b994:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b996:	4b0b      	ldr	r3, [pc, #44]	; (800b9c4 <time+0x30>)
 800b998:	2200      	movs	r2, #0
 800b99a:	4669      	mov	r1, sp
 800b99c:	4604      	mov	r4, r0
 800b99e:	6818      	ldr	r0, [r3, #0]
 800b9a0:	f000 f812 	bl	800b9c8 <_gettimeofday_r>
 800b9a4:	2800      	cmp	r0, #0
 800b9a6:	bfbe      	ittt	lt
 800b9a8:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 800b9ac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b9b0:	e9cd 2300 	strdlt	r2, r3, [sp]
 800b9b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9b8:	b10c      	cbz	r4, 800b9be <time+0x2a>
 800b9ba:	e9c4 0100 	strd	r0, r1, [r4]
 800b9be:	b004      	add	sp, #16
 800b9c0:	bd10      	pop	{r4, pc}
 800b9c2:	bf00      	nop
 800b9c4:	20000410 	.word	0x20000410

0800b9c8 <_gettimeofday_r>:
 800b9c8:	b538      	push	{r3, r4, r5, lr}
 800b9ca:	4d07      	ldr	r5, [pc, #28]	; (800b9e8 <_gettimeofday_r+0x20>)
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	4604      	mov	r4, r0
 800b9d0:	4608      	mov	r0, r1
 800b9d2:	4611      	mov	r1, r2
 800b9d4:	602b      	str	r3, [r5, #0]
 800b9d6:	f000 fe49 	bl	800c66c <_gettimeofday>
 800b9da:	1c43      	adds	r3, r0, #1
 800b9dc:	d102      	bne.n	800b9e4 <_gettimeofday_r+0x1c>
 800b9de:	682b      	ldr	r3, [r5, #0]
 800b9e0:	b103      	cbz	r3, 800b9e4 <_gettimeofday_r+0x1c>
 800b9e2:	6023      	str	r3, [r4, #0]
 800b9e4:	bd38      	pop	{r3, r4, r5, pc}
 800b9e6:	bf00      	nop
 800b9e8:	20006118 	.word	0x20006118

0800b9ec <_sbrk_r>:
 800b9ec:	b538      	push	{r3, r4, r5, lr}
 800b9ee:	4d06      	ldr	r5, [pc, #24]	; (800ba08 <_sbrk_r+0x1c>)
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	4604      	mov	r4, r0
 800b9f4:	4608      	mov	r0, r1
 800b9f6:	602b      	str	r3, [r5, #0]
 800b9f8:	f7ff fc6e 	bl	800b2d8 <_sbrk>
 800b9fc:	1c43      	adds	r3, r0, #1
 800b9fe:	d102      	bne.n	800ba06 <_sbrk_r+0x1a>
 800ba00:	682b      	ldr	r3, [r5, #0]
 800ba02:	b103      	cbz	r3, 800ba06 <_sbrk_r+0x1a>
 800ba04:	6023      	str	r3, [r4, #0]
 800ba06:	bd38      	pop	{r3, r4, r5, pc}
 800ba08:	20006118 	.word	0x20006118

0800ba0c <__errno>:
 800ba0c:	4b01      	ldr	r3, [pc, #4]	; (800ba14 <__errno+0x8>)
 800ba0e:	6818      	ldr	r0, [r3, #0]
 800ba10:	4770      	bx	lr
 800ba12:	bf00      	nop
 800ba14:	20000410 	.word	0x20000410

0800ba18 <__libc_init_array>:
 800ba18:	b570      	push	{r4, r5, r6, lr}
 800ba1a:	4d0d      	ldr	r5, [pc, #52]	; (800ba50 <__libc_init_array+0x38>)
 800ba1c:	4c0d      	ldr	r4, [pc, #52]	; (800ba54 <__libc_init_array+0x3c>)
 800ba1e:	1b64      	subs	r4, r4, r5
 800ba20:	10a4      	asrs	r4, r4, #2
 800ba22:	2600      	movs	r6, #0
 800ba24:	42a6      	cmp	r6, r4
 800ba26:	d109      	bne.n	800ba3c <__libc_init_array+0x24>
 800ba28:	4d0b      	ldr	r5, [pc, #44]	; (800ba58 <__libc_init_array+0x40>)
 800ba2a:	4c0c      	ldr	r4, [pc, #48]	; (800ba5c <__libc_init_array+0x44>)
 800ba2c:	f000 fe26 	bl	800c67c <_init>
 800ba30:	1b64      	subs	r4, r4, r5
 800ba32:	10a4      	asrs	r4, r4, #2
 800ba34:	2600      	movs	r6, #0
 800ba36:	42a6      	cmp	r6, r4
 800ba38:	d105      	bne.n	800ba46 <__libc_init_array+0x2e>
 800ba3a:	bd70      	pop	{r4, r5, r6, pc}
 800ba3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba40:	4798      	blx	r3
 800ba42:	3601      	adds	r6, #1
 800ba44:	e7ee      	b.n	800ba24 <__libc_init_array+0xc>
 800ba46:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba4a:	4798      	blx	r3
 800ba4c:	3601      	adds	r6, #1
 800ba4e:	e7f2      	b.n	800ba36 <__libc_init_array+0x1e>
 800ba50:	0800ca64 	.word	0x0800ca64
 800ba54:	0800ca64 	.word	0x0800ca64
 800ba58:	0800ca64 	.word	0x0800ca64
 800ba5c:	0800ca68 	.word	0x0800ca68

0800ba60 <__retarget_lock_init_recursive>:
 800ba60:	4770      	bx	lr

0800ba62 <__retarget_lock_acquire_recursive>:
 800ba62:	4770      	bx	lr

0800ba64 <__retarget_lock_release_recursive>:
 800ba64:	4770      	bx	lr

0800ba66 <memcpy>:
 800ba66:	440a      	add	r2, r1
 800ba68:	4291      	cmp	r1, r2
 800ba6a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ba6e:	d100      	bne.n	800ba72 <memcpy+0xc>
 800ba70:	4770      	bx	lr
 800ba72:	b510      	push	{r4, lr}
 800ba74:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba78:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba7c:	4291      	cmp	r1, r2
 800ba7e:	d1f9      	bne.n	800ba74 <memcpy+0xe>
 800ba80:	bd10      	pop	{r4, pc}

0800ba82 <strcpy>:
 800ba82:	4603      	mov	r3, r0
 800ba84:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba88:	f803 2b01 	strb.w	r2, [r3], #1
 800ba8c:	2a00      	cmp	r2, #0
 800ba8e:	d1f9      	bne.n	800ba84 <strcpy+0x2>
 800ba90:	4770      	bx	lr
	...

0800ba94 <__assert_func>:
 800ba94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba96:	4614      	mov	r4, r2
 800ba98:	461a      	mov	r2, r3
 800ba9a:	4b09      	ldr	r3, [pc, #36]	; (800bac0 <__assert_func+0x2c>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	4605      	mov	r5, r0
 800baa0:	68d8      	ldr	r0, [r3, #12]
 800baa2:	b14c      	cbz	r4, 800bab8 <__assert_func+0x24>
 800baa4:	4b07      	ldr	r3, [pc, #28]	; (800bac4 <__assert_func+0x30>)
 800baa6:	9100      	str	r1, [sp, #0]
 800baa8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800baac:	4906      	ldr	r1, [pc, #24]	; (800bac8 <__assert_func+0x34>)
 800baae:	462b      	mov	r3, r5
 800bab0:	f000 f94c 	bl	800bd4c <fiprintf>
 800bab4:	f000 f9a2 	bl	800bdfc <abort>
 800bab8:	4b04      	ldr	r3, [pc, #16]	; (800bacc <__assert_func+0x38>)
 800baba:	461c      	mov	r4, r3
 800babc:	e7f3      	b.n	800baa6 <__assert_func+0x12>
 800babe:	bf00      	nop
 800bac0:	20000410 	.word	0x20000410
 800bac4:	0800c9eb 	.word	0x0800c9eb
 800bac8:	0800c9f8 	.word	0x0800c9f8
 800bacc:	0800ca26 	.word	0x0800ca26

0800bad0 <_free_r>:
 800bad0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bad2:	2900      	cmp	r1, #0
 800bad4:	d044      	beq.n	800bb60 <_free_r+0x90>
 800bad6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bada:	9001      	str	r0, [sp, #4]
 800badc:	2b00      	cmp	r3, #0
 800bade:	f1a1 0404 	sub.w	r4, r1, #4
 800bae2:	bfb8      	it	lt
 800bae4:	18e4      	addlt	r4, r4, r3
 800bae6:	f7ff fe51 	bl	800b78c <__malloc_lock>
 800baea:	4a1e      	ldr	r2, [pc, #120]	; (800bb64 <_free_r+0x94>)
 800baec:	9801      	ldr	r0, [sp, #4]
 800baee:	6813      	ldr	r3, [r2, #0]
 800baf0:	b933      	cbnz	r3, 800bb00 <_free_r+0x30>
 800baf2:	6063      	str	r3, [r4, #4]
 800baf4:	6014      	str	r4, [r2, #0]
 800baf6:	b003      	add	sp, #12
 800baf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bafc:	f7ff be4c 	b.w	800b798 <__malloc_unlock>
 800bb00:	42a3      	cmp	r3, r4
 800bb02:	d908      	bls.n	800bb16 <_free_r+0x46>
 800bb04:	6825      	ldr	r5, [r4, #0]
 800bb06:	1961      	adds	r1, r4, r5
 800bb08:	428b      	cmp	r3, r1
 800bb0a:	bf01      	itttt	eq
 800bb0c:	6819      	ldreq	r1, [r3, #0]
 800bb0e:	685b      	ldreq	r3, [r3, #4]
 800bb10:	1949      	addeq	r1, r1, r5
 800bb12:	6021      	streq	r1, [r4, #0]
 800bb14:	e7ed      	b.n	800baf2 <_free_r+0x22>
 800bb16:	461a      	mov	r2, r3
 800bb18:	685b      	ldr	r3, [r3, #4]
 800bb1a:	b10b      	cbz	r3, 800bb20 <_free_r+0x50>
 800bb1c:	42a3      	cmp	r3, r4
 800bb1e:	d9fa      	bls.n	800bb16 <_free_r+0x46>
 800bb20:	6811      	ldr	r1, [r2, #0]
 800bb22:	1855      	adds	r5, r2, r1
 800bb24:	42a5      	cmp	r5, r4
 800bb26:	d10b      	bne.n	800bb40 <_free_r+0x70>
 800bb28:	6824      	ldr	r4, [r4, #0]
 800bb2a:	4421      	add	r1, r4
 800bb2c:	1854      	adds	r4, r2, r1
 800bb2e:	42a3      	cmp	r3, r4
 800bb30:	6011      	str	r1, [r2, #0]
 800bb32:	d1e0      	bne.n	800baf6 <_free_r+0x26>
 800bb34:	681c      	ldr	r4, [r3, #0]
 800bb36:	685b      	ldr	r3, [r3, #4]
 800bb38:	6053      	str	r3, [r2, #4]
 800bb3a:	440c      	add	r4, r1
 800bb3c:	6014      	str	r4, [r2, #0]
 800bb3e:	e7da      	b.n	800baf6 <_free_r+0x26>
 800bb40:	d902      	bls.n	800bb48 <_free_r+0x78>
 800bb42:	230c      	movs	r3, #12
 800bb44:	6003      	str	r3, [r0, #0]
 800bb46:	e7d6      	b.n	800baf6 <_free_r+0x26>
 800bb48:	6825      	ldr	r5, [r4, #0]
 800bb4a:	1961      	adds	r1, r4, r5
 800bb4c:	428b      	cmp	r3, r1
 800bb4e:	bf04      	itt	eq
 800bb50:	6819      	ldreq	r1, [r3, #0]
 800bb52:	685b      	ldreq	r3, [r3, #4]
 800bb54:	6063      	str	r3, [r4, #4]
 800bb56:	bf04      	itt	eq
 800bb58:	1949      	addeq	r1, r1, r5
 800bb5a:	6021      	streq	r1, [r4, #0]
 800bb5c:	6054      	str	r4, [r2, #4]
 800bb5e:	e7ca      	b.n	800baf6 <_free_r+0x26>
 800bb60:	b003      	add	sp, #12
 800bb62:	bd30      	pop	{r4, r5, pc}
 800bb64:	20005fd0 	.word	0x20005fd0

0800bb68 <__sflush_r>:
 800bb68:	898a      	ldrh	r2, [r1, #12]
 800bb6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb6e:	4605      	mov	r5, r0
 800bb70:	0710      	lsls	r0, r2, #28
 800bb72:	460c      	mov	r4, r1
 800bb74:	d458      	bmi.n	800bc28 <__sflush_r+0xc0>
 800bb76:	684b      	ldr	r3, [r1, #4]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	dc05      	bgt.n	800bb88 <__sflush_r+0x20>
 800bb7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	dc02      	bgt.n	800bb88 <__sflush_r+0x20>
 800bb82:	2000      	movs	r0, #0
 800bb84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb8a:	2e00      	cmp	r6, #0
 800bb8c:	d0f9      	beq.n	800bb82 <__sflush_r+0x1a>
 800bb8e:	2300      	movs	r3, #0
 800bb90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bb94:	682f      	ldr	r7, [r5, #0]
 800bb96:	6a21      	ldr	r1, [r4, #32]
 800bb98:	602b      	str	r3, [r5, #0]
 800bb9a:	d032      	beq.n	800bc02 <__sflush_r+0x9a>
 800bb9c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bb9e:	89a3      	ldrh	r3, [r4, #12]
 800bba0:	075a      	lsls	r2, r3, #29
 800bba2:	d505      	bpl.n	800bbb0 <__sflush_r+0x48>
 800bba4:	6863      	ldr	r3, [r4, #4]
 800bba6:	1ac0      	subs	r0, r0, r3
 800bba8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bbaa:	b10b      	cbz	r3, 800bbb0 <__sflush_r+0x48>
 800bbac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bbae:	1ac0      	subs	r0, r0, r3
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	4602      	mov	r2, r0
 800bbb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bbb6:	6a21      	ldr	r1, [r4, #32]
 800bbb8:	4628      	mov	r0, r5
 800bbba:	47b0      	blx	r6
 800bbbc:	1c43      	adds	r3, r0, #1
 800bbbe:	89a3      	ldrh	r3, [r4, #12]
 800bbc0:	d106      	bne.n	800bbd0 <__sflush_r+0x68>
 800bbc2:	6829      	ldr	r1, [r5, #0]
 800bbc4:	291d      	cmp	r1, #29
 800bbc6:	d82b      	bhi.n	800bc20 <__sflush_r+0xb8>
 800bbc8:	4a29      	ldr	r2, [pc, #164]	; (800bc70 <__sflush_r+0x108>)
 800bbca:	410a      	asrs	r2, r1
 800bbcc:	07d6      	lsls	r6, r2, #31
 800bbce:	d427      	bmi.n	800bc20 <__sflush_r+0xb8>
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	6062      	str	r2, [r4, #4]
 800bbd4:	04d9      	lsls	r1, r3, #19
 800bbd6:	6922      	ldr	r2, [r4, #16]
 800bbd8:	6022      	str	r2, [r4, #0]
 800bbda:	d504      	bpl.n	800bbe6 <__sflush_r+0x7e>
 800bbdc:	1c42      	adds	r2, r0, #1
 800bbde:	d101      	bne.n	800bbe4 <__sflush_r+0x7c>
 800bbe0:	682b      	ldr	r3, [r5, #0]
 800bbe2:	b903      	cbnz	r3, 800bbe6 <__sflush_r+0x7e>
 800bbe4:	6560      	str	r0, [r4, #84]	; 0x54
 800bbe6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbe8:	602f      	str	r7, [r5, #0]
 800bbea:	2900      	cmp	r1, #0
 800bbec:	d0c9      	beq.n	800bb82 <__sflush_r+0x1a>
 800bbee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bbf2:	4299      	cmp	r1, r3
 800bbf4:	d002      	beq.n	800bbfc <__sflush_r+0x94>
 800bbf6:	4628      	mov	r0, r5
 800bbf8:	f7ff ff6a 	bl	800bad0 <_free_r>
 800bbfc:	2000      	movs	r0, #0
 800bbfe:	6360      	str	r0, [r4, #52]	; 0x34
 800bc00:	e7c0      	b.n	800bb84 <__sflush_r+0x1c>
 800bc02:	2301      	movs	r3, #1
 800bc04:	4628      	mov	r0, r5
 800bc06:	47b0      	blx	r6
 800bc08:	1c41      	adds	r1, r0, #1
 800bc0a:	d1c8      	bne.n	800bb9e <__sflush_r+0x36>
 800bc0c:	682b      	ldr	r3, [r5, #0]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d0c5      	beq.n	800bb9e <__sflush_r+0x36>
 800bc12:	2b1d      	cmp	r3, #29
 800bc14:	d001      	beq.n	800bc1a <__sflush_r+0xb2>
 800bc16:	2b16      	cmp	r3, #22
 800bc18:	d101      	bne.n	800bc1e <__sflush_r+0xb6>
 800bc1a:	602f      	str	r7, [r5, #0]
 800bc1c:	e7b1      	b.n	800bb82 <__sflush_r+0x1a>
 800bc1e:	89a3      	ldrh	r3, [r4, #12]
 800bc20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc24:	81a3      	strh	r3, [r4, #12]
 800bc26:	e7ad      	b.n	800bb84 <__sflush_r+0x1c>
 800bc28:	690f      	ldr	r7, [r1, #16]
 800bc2a:	2f00      	cmp	r7, #0
 800bc2c:	d0a9      	beq.n	800bb82 <__sflush_r+0x1a>
 800bc2e:	0793      	lsls	r3, r2, #30
 800bc30:	680e      	ldr	r6, [r1, #0]
 800bc32:	bf08      	it	eq
 800bc34:	694b      	ldreq	r3, [r1, #20]
 800bc36:	600f      	str	r7, [r1, #0]
 800bc38:	bf18      	it	ne
 800bc3a:	2300      	movne	r3, #0
 800bc3c:	eba6 0807 	sub.w	r8, r6, r7
 800bc40:	608b      	str	r3, [r1, #8]
 800bc42:	f1b8 0f00 	cmp.w	r8, #0
 800bc46:	dd9c      	ble.n	800bb82 <__sflush_r+0x1a>
 800bc48:	6a21      	ldr	r1, [r4, #32]
 800bc4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bc4c:	4643      	mov	r3, r8
 800bc4e:	463a      	mov	r2, r7
 800bc50:	4628      	mov	r0, r5
 800bc52:	47b0      	blx	r6
 800bc54:	2800      	cmp	r0, #0
 800bc56:	dc06      	bgt.n	800bc66 <__sflush_r+0xfe>
 800bc58:	89a3      	ldrh	r3, [r4, #12]
 800bc5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc5e:	81a3      	strh	r3, [r4, #12]
 800bc60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc64:	e78e      	b.n	800bb84 <__sflush_r+0x1c>
 800bc66:	4407      	add	r7, r0
 800bc68:	eba8 0800 	sub.w	r8, r8, r0
 800bc6c:	e7e9      	b.n	800bc42 <__sflush_r+0xda>
 800bc6e:	bf00      	nop
 800bc70:	dfbffffe 	.word	0xdfbffffe

0800bc74 <_fflush_r>:
 800bc74:	b538      	push	{r3, r4, r5, lr}
 800bc76:	690b      	ldr	r3, [r1, #16]
 800bc78:	4605      	mov	r5, r0
 800bc7a:	460c      	mov	r4, r1
 800bc7c:	b913      	cbnz	r3, 800bc84 <_fflush_r+0x10>
 800bc7e:	2500      	movs	r5, #0
 800bc80:	4628      	mov	r0, r5
 800bc82:	bd38      	pop	{r3, r4, r5, pc}
 800bc84:	b118      	cbz	r0, 800bc8e <_fflush_r+0x1a>
 800bc86:	6a03      	ldr	r3, [r0, #32]
 800bc88:	b90b      	cbnz	r3, 800bc8e <_fflush_r+0x1a>
 800bc8a:	f7ff fe45 	bl	800b918 <__sinit>
 800bc8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d0f3      	beq.n	800bc7e <_fflush_r+0xa>
 800bc96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bc98:	07d0      	lsls	r0, r2, #31
 800bc9a:	d404      	bmi.n	800bca6 <_fflush_r+0x32>
 800bc9c:	0599      	lsls	r1, r3, #22
 800bc9e:	d402      	bmi.n	800bca6 <_fflush_r+0x32>
 800bca0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bca2:	f7ff fede 	bl	800ba62 <__retarget_lock_acquire_recursive>
 800bca6:	4628      	mov	r0, r5
 800bca8:	4621      	mov	r1, r4
 800bcaa:	f7ff ff5d 	bl	800bb68 <__sflush_r>
 800bcae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bcb0:	07da      	lsls	r2, r3, #31
 800bcb2:	4605      	mov	r5, r0
 800bcb4:	d4e4      	bmi.n	800bc80 <_fflush_r+0xc>
 800bcb6:	89a3      	ldrh	r3, [r4, #12]
 800bcb8:	059b      	lsls	r3, r3, #22
 800bcba:	d4e1      	bmi.n	800bc80 <_fflush_r+0xc>
 800bcbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcbe:	f7ff fed1 	bl	800ba64 <__retarget_lock_release_recursive>
 800bcc2:	e7dd      	b.n	800bc80 <_fflush_r+0xc>

0800bcc4 <__sread>:
 800bcc4:	b510      	push	{r4, lr}
 800bcc6:	460c      	mov	r4, r1
 800bcc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bccc:	f000 f872 	bl	800bdb4 <_read_r>
 800bcd0:	2800      	cmp	r0, #0
 800bcd2:	bfab      	itete	ge
 800bcd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bcd6:	89a3      	ldrhlt	r3, [r4, #12]
 800bcd8:	181b      	addge	r3, r3, r0
 800bcda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bcde:	bfac      	ite	ge
 800bce0:	6563      	strge	r3, [r4, #84]	; 0x54
 800bce2:	81a3      	strhlt	r3, [r4, #12]
 800bce4:	bd10      	pop	{r4, pc}

0800bce6 <__swrite>:
 800bce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcea:	461f      	mov	r7, r3
 800bcec:	898b      	ldrh	r3, [r1, #12]
 800bcee:	05db      	lsls	r3, r3, #23
 800bcf0:	4605      	mov	r5, r0
 800bcf2:	460c      	mov	r4, r1
 800bcf4:	4616      	mov	r6, r2
 800bcf6:	d505      	bpl.n	800bd04 <__swrite+0x1e>
 800bcf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcfc:	2302      	movs	r3, #2
 800bcfe:	2200      	movs	r2, #0
 800bd00:	f000 f846 	bl	800bd90 <_lseek_r>
 800bd04:	89a3      	ldrh	r3, [r4, #12]
 800bd06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd0e:	81a3      	strh	r3, [r4, #12]
 800bd10:	4632      	mov	r2, r6
 800bd12:	463b      	mov	r3, r7
 800bd14:	4628      	mov	r0, r5
 800bd16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd1a:	f000 b85d 	b.w	800bdd8 <_write_r>

0800bd1e <__sseek>:
 800bd1e:	b510      	push	{r4, lr}
 800bd20:	460c      	mov	r4, r1
 800bd22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd26:	f000 f833 	bl	800bd90 <_lseek_r>
 800bd2a:	1c43      	adds	r3, r0, #1
 800bd2c:	89a3      	ldrh	r3, [r4, #12]
 800bd2e:	bf15      	itete	ne
 800bd30:	6560      	strne	r0, [r4, #84]	; 0x54
 800bd32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bd36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bd3a:	81a3      	strheq	r3, [r4, #12]
 800bd3c:	bf18      	it	ne
 800bd3e:	81a3      	strhne	r3, [r4, #12]
 800bd40:	bd10      	pop	{r4, pc}

0800bd42 <__sclose>:
 800bd42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd46:	f000 b813 	b.w	800bd70 <_close_r>
	...

0800bd4c <fiprintf>:
 800bd4c:	b40e      	push	{r1, r2, r3}
 800bd4e:	b503      	push	{r0, r1, lr}
 800bd50:	4601      	mov	r1, r0
 800bd52:	ab03      	add	r3, sp, #12
 800bd54:	4805      	ldr	r0, [pc, #20]	; (800bd6c <fiprintf+0x20>)
 800bd56:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd5a:	6800      	ldr	r0, [r0, #0]
 800bd5c:	9301      	str	r3, [sp, #4]
 800bd5e:	f000 f87d 	bl	800be5c <_vfiprintf_r>
 800bd62:	b002      	add	sp, #8
 800bd64:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd68:	b003      	add	sp, #12
 800bd6a:	4770      	bx	lr
 800bd6c:	20000410 	.word	0x20000410

0800bd70 <_close_r>:
 800bd70:	b538      	push	{r3, r4, r5, lr}
 800bd72:	4d06      	ldr	r5, [pc, #24]	; (800bd8c <_close_r+0x1c>)
 800bd74:	2300      	movs	r3, #0
 800bd76:	4604      	mov	r4, r0
 800bd78:	4608      	mov	r0, r1
 800bd7a:	602b      	str	r3, [r5, #0]
 800bd7c:	f7ff fa77 	bl	800b26e <_close>
 800bd80:	1c43      	adds	r3, r0, #1
 800bd82:	d102      	bne.n	800bd8a <_close_r+0x1a>
 800bd84:	682b      	ldr	r3, [r5, #0]
 800bd86:	b103      	cbz	r3, 800bd8a <_close_r+0x1a>
 800bd88:	6023      	str	r3, [r4, #0]
 800bd8a:	bd38      	pop	{r3, r4, r5, pc}
 800bd8c:	20006118 	.word	0x20006118

0800bd90 <_lseek_r>:
 800bd90:	b538      	push	{r3, r4, r5, lr}
 800bd92:	4d07      	ldr	r5, [pc, #28]	; (800bdb0 <_lseek_r+0x20>)
 800bd94:	4604      	mov	r4, r0
 800bd96:	4608      	mov	r0, r1
 800bd98:	4611      	mov	r1, r2
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	602a      	str	r2, [r5, #0]
 800bd9e:	461a      	mov	r2, r3
 800bda0:	f7ff fa8c 	bl	800b2bc <_lseek>
 800bda4:	1c43      	adds	r3, r0, #1
 800bda6:	d102      	bne.n	800bdae <_lseek_r+0x1e>
 800bda8:	682b      	ldr	r3, [r5, #0]
 800bdaa:	b103      	cbz	r3, 800bdae <_lseek_r+0x1e>
 800bdac:	6023      	str	r3, [r4, #0]
 800bdae:	bd38      	pop	{r3, r4, r5, pc}
 800bdb0:	20006118 	.word	0x20006118

0800bdb4 <_read_r>:
 800bdb4:	b538      	push	{r3, r4, r5, lr}
 800bdb6:	4d07      	ldr	r5, [pc, #28]	; (800bdd4 <_read_r+0x20>)
 800bdb8:	4604      	mov	r4, r0
 800bdba:	4608      	mov	r0, r1
 800bdbc:	4611      	mov	r1, r2
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	602a      	str	r2, [r5, #0]
 800bdc2:	461a      	mov	r2, r3
 800bdc4:	f7ff fa1a 	bl	800b1fc <_read>
 800bdc8:	1c43      	adds	r3, r0, #1
 800bdca:	d102      	bne.n	800bdd2 <_read_r+0x1e>
 800bdcc:	682b      	ldr	r3, [r5, #0]
 800bdce:	b103      	cbz	r3, 800bdd2 <_read_r+0x1e>
 800bdd0:	6023      	str	r3, [r4, #0]
 800bdd2:	bd38      	pop	{r3, r4, r5, pc}
 800bdd4:	20006118 	.word	0x20006118

0800bdd8 <_write_r>:
 800bdd8:	b538      	push	{r3, r4, r5, lr}
 800bdda:	4d07      	ldr	r5, [pc, #28]	; (800bdf8 <_write_r+0x20>)
 800bddc:	4604      	mov	r4, r0
 800bdde:	4608      	mov	r0, r1
 800bde0:	4611      	mov	r1, r2
 800bde2:	2200      	movs	r2, #0
 800bde4:	602a      	str	r2, [r5, #0]
 800bde6:	461a      	mov	r2, r3
 800bde8:	f7ff fa25 	bl	800b236 <_write>
 800bdec:	1c43      	adds	r3, r0, #1
 800bdee:	d102      	bne.n	800bdf6 <_write_r+0x1e>
 800bdf0:	682b      	ldr	r3, [r5, #0]
 800bdf2:	b103      	cbz	r3, 800bdf6 <_write_r+0x1e>
 800bdf4:	6023      	str	r3, [r4, #0]
 800bdf6:	bd38      	pop	{r3, r4, r5, pc}
 800bdf8:	20006118 	.word	0x20006118

0800bdfc <abort>:
 800bdfc:	b508      	push	{r3, lr}
 800bdfe:	2006      	movs	r0, #6
 800be00:	f000 fc18 	bl	800c634 <raise>
 800be04:	2001      	movs	r0, #1
 800be06:	f7ff f9ef 	bl	800b1e8 <_exit>

0800be0a <__sfputc_r>:
 800be0a:	6893      	ldr	r3, [r2, #8]
 800be0c:	3b01      	subs	r3, #1
 800be0e:	2b00      	cmp	r3, #0
 800be10:	b410      	push	{r4}
 800be12:	6093      	str	r3, [r2, #8]
 800be14:	da08      	bge.n	800be28 <__sfputc_r+0x1e>
 800be16:	6994      	ldr	r4, [r2, #24]
 800be18:	42a3      	cmp	r3, r4
 800be1a:	db01      	blt.n	800be20 <__sfputc_r+0x16>
 800be1c:	290a      	cmp	r1, #10
 800be1e:	d103      	bne.n	800be28 <__sfputc_r+0x1e>
 800be20:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be24:	f000 bac4 	b.w	800c3b0 <__swbuf_r>
 800be28:	6813      	ldr	r3, [r2, #0]
 800be2a:	1c58      	adds	r0, r3, #1
 800be2c:	6010      	str	r0, [r2, #0]
 800be2e:	7019      	strb	r1, [r3, #0]
 800be30:	4608      	mov	r0, r1
 800be32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be36:	4770      	bx	lr

0800be38 <__sfputs_r>:
 800be38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be3a:	4606      	mov	r6, r0
 800be3c:	460f      	mov	r7, r1
 800be3e:	4614      	mov	r4, r2
 800be40:	18d5      	adds	r5, r2, r3
 800be42:	42ac      	cmp	r4, r5
 800be44:	d101      	bne.n	800be4a <__sfputs_r+0x12>
 800be46:	2000      	movs	r0, #0
 800be48:	e007      	b.n	800be5a <__sfputs_r+0x22>
 800be4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be4e:	463a      	mov	r2, r7
 800be50:	4630      	mov	r0, r6
 800be52:	f7ff ffda 	bl	800be0a <__sfputc_r>
 800be56:	1c43      	adds	r3, r0, #1
 800be58:	d1f3      	bne.n	800be42 <__sfputs_r+0xa>
 800be5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800be5c <_vfiprintf_r>:
 800be5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be60:	460d      	mov	r5, r1
 800be62:	b09d      	sub	sp, #116	; 0x74
 800be64:	4614      	mov	r4, r2
 800be66:	4698      	mov	r8, r3
 800be68:	4606      	mov	r6, r0
 800be6a:	b118      	cbz	r0, 800be74 <_vfiprintf_r+0x18>
 800be6c:	6a03      	ldr	r3, [r0, #32]
 800be6e:	b90b      	cbnz	r3, 800be74 <_vfiprintf_r+0x18>
 800be70:	f7ff fd52 	bl	800b918 <__sinit>
 800be74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be76:	07d9      	lsls	r1, r3, #31
 800be78:	d405      	bmi.n	800be86 <_vfiprintf_r+0x2a>
 800be7a:	89ab      	ldrh	r3, [r5, #12]
 800be7c:	059a      	lsls	r2, r3, #22
 800be7e:	d402      	bmi.n	800be86 <_vfiprintf_r+0x2a>
 800be80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be82:	f7ff fdee 	bl	800ba62 <__retarget_lock_acquire_recursive>
 800be86:	89ab      	ldrh	r3, [r5, #12]
 800be88:	071b      	lsls	r3, r3, #28
 800be8a:	d501      	bpl.n	800be90 <_vfiprintf_r+0x34>
 800be8c:	692b      	ldr	r3, [r5, #16]
 800be8e:	b99b      	cbnz	r3, 800beb8 <_vfiprintf_r+0x5c>
 800be90:	4629      	mov	r1, r5
 800be92:	4630      	mov	r0, r6
 800be94:	f000 faca 	bl	800c42c <__swsetup_r>
 800be98:	b170      	cbz	r0, 800beb8 <_vfiprintf_r+0x5c>
 800be9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be9c:	07dc      	lsls	r4, r3, #31
 800be9e:	d504      	bpl.n	800beaa <_vfiprintf_r+0x4e>
 800bea0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bea4:	b01d      	add	sp, #116	; 0x74
 800bea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beaa:	89ab      	ldrh	r3, [r5, #12]
 800beac:	0598      	lsls	r0, r3, #22
 800beae:	d4f7      	bmi.n	800bea0 <_vfiprintf_r+0x44>
 800beb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800beb2:	f7ff fdd7 	bl	800ba64 <__retarget_lock_release_recursive>
 800beb6:	e7f3      	b.n	800bea0 <_vfiprintf_r+0x44>
 800beb8:	2300      	movs	r3, #0
 800beba:	9309      	str	r3, [sp, #36]	; 0x24
 800bebc:	2320      	movs	r3, #32
 800bebe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bec2:	f8cd 800c 	str.w	r8, [sp, #12]
 800bec6:	2330      	movs	r3, #48	; 0x30
 800bec8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c07c <_vfiprintf_r+0x220>
 800becc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bed0:	f04f 0901 	mov.w	r9, #1
 800bed4:	4623      	mov	r3, r4
 800bed6:	469a      	mov	sl, r3
 800bed8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bedc:	b10a      	cbz	r2, 800bee2 <_vfiprintf_r+0x86>
 800bede:	2a25      	cmp	r2, #37	; 0x25
 800bee0:	d1f9      	bne.n	800bed6 <_vfiprintf_r+0x7a>
 800bee2:	ebba 0b04 	subs.w	fp, sl, r4
 800bee6:	d00b      	beq.n	800bf00 <_vfiprintf_r+0xa4>
 800bee8:	465b      	mov	r3, fp
 800beea:	4622      	mov	r2, r4
 800beec:	4629      	mov	r1, r5
 800beee:	4630      	mov	r0, r6
 800bef0:	f7ff ffa2 	bl	800be38 <__sfputs_r>
 800bef4:	3001      	adds	r0, #1
 800bef6:	f000 80a9 	beq.w	800c04c <_vfiprintf_r+0x1f0>
 800befa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800befc:	445a      	add	r2, fp
 800befe:	9209      	str	r2, [sp, #36]	; 0x24
 800bf00:	f89a 3000 	ldrb.w	r3, [sl]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	f000 80a1 	beq.w	800c04c <_vfiprintf_r+0x1f0>
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf14:	f10a 0a01 	add.w	sl, sl, #1
 800bf18:	9304      	str	r3, [sp, #16]
 800bf1a:	9307      	str	r3, [sp, #28]
 800bf1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf20:	931a      	str	r3, [sp, #104]	; 0x68
 800bf22:	4654      	mov	r4, sl
 800bf24:	2205      	movs	r2, #5
 800bf26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf2a:	4854      	ldr	r0, [pc, #336]	; (800c07c <_vfiprintf_r+0x220>)
 800bf2c:	f7f4 f958 	bl	80001e0 <memchr>
 800bf30:	9a04      	ldr	r2, [sp, #16]
 800bf32:	b9d8      	cbnz	r0, 800bf6c <_vfiprintf_r+0x110>
 800bf34:	06d1      	lsls	r1, r2, #27
 800bf36:	bf44      	itt	mi
 800bf38:	2320      	movmi	r3, #32
 800bf3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf3e:	0713      	lsls	r3, r2, #28
 800bf40:	bf44      	itt	mi
 800bf42:	232b      	movmi	r3, #43	; 0x2b
 800bf44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf48:	f89a 3000 	ldrb.w	r3, [sl]
 800bf4c:	2b2a      	cmp	r3, #42	; 0x2a
 800bf4e:	d015      	beq.n	800bf7c <_vfiprintf_r+0x120>
 800bf50:	9a07      	ldr	r2, [sp, #28]
 800bf52:	4654      	mov	r4, sl
 800bf54:	2000      	movs	r0, #0
 800bf56:	f04f 0c0a 	mov.w	ip, #10
 800bf5a:	4621      	mov	r1, r4
 800bf5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf60:	3b30      	subs	r3, #48	; 0x30
 800bf62:	2b09      	cmp	r3, #9
 800bf64:	d94d      	bls.n	800c002 <_vfiprintf_r+0x1a6>
 800bf66:	b1b0      	cbz	r0, 800bf96 <_vfiprintf_r+0x13a>
 800bf68:	9207      	str	r2, [sp, #28]
 800bf6a:	e014      	b.n	800bf96 <_vfiprintf_r+0x13a>
 800bf6c:	eba0 0308 	sub.w	r3, r0, r8
 800bf70:	fa09 f303 	lsl.w	r3, r9, r3
 800bf74:	4313      	orrs	r3, r2
 800bf76:	9304      	str	r3, [sp, #16]
 800bf78:	46a2      	mov	sl, r4
 800bf7a:	e7d2      	b.n	800bf22 <_vfiprintf_r+0xc6>
 800bf7c:	9b03      	ldr	r3, [sp, #12]
 800bf7e:	1d19      	adds	r1, r3, #4
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	9103      	str	r1, [sp, #12]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	bfbb      	ittet	lt
 800bf88:	425b      	neglt	r3, r3
 800bf8a:	f042 0202 	orrlt.w	r2, r2, #2
 800bf8e:	9307      	strge	r3, [sp, #28]
 800bf90:	9307      	strlt	r3, [sp, #28]
 800bf92:	bfb8      	it	lt
 800bf94:	9204      	strlt	r2, [sp, #16]
 800bf96:	7823      	ldrb	r3, [r4, #0]
 800bf98:	2b2e      	cmp	r3, #46	; 0x2e
 800bf9a:	d10c      	bne.n	800bfb6 <_vfiprintf_r+0x15a>
 800bf9c:	7863      	ldrb	r3, [r4, #1]
 800bf9e:	2b2a      	cmp	r3, #42	; 0x2a
 800bfa0:	d134      	bne.n	800c00c <_vfiprintf_r+0x1b0>
 800bfa2:	9b03      	ldr	r3, [sp, #12]
 800bfa4:	1d1a      	adds	r2, r3, #4
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	9203      	str	r2, [sp, #12]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	bfb8      	it	lt
 800bfae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bfb2:	3402      	adds	r4, #2
 800bfb4:	9305      	str	r3, [sp, #20]
 800bfb6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c08c <_vfiprintf_r+0x230>
 800bfba:	7821      	ldrb	r1, [r4, #0]
 800bfbc:	2203      	movs	r2, #3
 800bfbe:	4650      	mov	r0, sl
 800bfc0:	f7f4 f90e 	bl	80001e0 <memchr>
 800bfc4:	b138      	cbz	r0, 800bfd6 <_vfiprintf_r+0x17a>
 800bfc6:	9b04      	ldr	r3, [sp, #16]
 800bfc8:	eba0 000a 	sub.w	r0, r0, sl
 800bfcc:	2240      	movs	r2, #64	; 0x40
 800bfce:	4082      	lsls	r2, r0
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	3401      	adds	r4, #1
 800bfd4:	9304      	str	r3, [sp, #16]
 800bfd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfda:	4829      	ldr	r0, [pc, #164]	; (800c080 <_vfiprintf_r+0x224>)
 800bfdc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bfe0:	2206      	movs	r2, #6
 800bfe2:	f7f4 f8fd 	bl	80001e0 <memchr>
 800bfe6:	2800      	cmp	r0, #0
 800bfe8:	d03f      	beq.n	800c06a <_vfiprintf_r+0x20e>
 800bfea:	4b26      	ldr	r3, [pc, #152]	; (800c084 <_vfiprintf_r+0x228>)
 800bfec:	bb1b      	cbnz	r3, 800c036 <_vfiprintf_r+0x1da>
 800bfee:	9b03      	ldr	r3, [sp, #12]
 800bff0:	3307      	adds	r3, #7
 800bff2:	f023 0307 	bic.w	r3, r3, #7
 800bff6:	3308      	adds	r3, #8
 800bff8:	9303      	str	r3, [sp, #12]
 800bffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bffc:	443b      	add	r3, r7
 800bffe:	9309      	str	r3, [sp, #36]	; 0x24
 800c000:	e768      	b.n	800bed4 <_vfiprintf_r+0x78>
 800c002:	fb0c 3202 	mla	r2, ip, r2, r3
 800c006:	460c      	mov	r4, r1
 800c008:	2001      	movs	r0, #1
 800c00a:	e7a6      	b.n	800bf5a <_vfiprintf_r+0xfe>
 800c00c:	2300      	movs	r3, #0
 800c00e:	3401      	adds	r4, #1
 800c010:	9305      	str	r3, [sp, #20]
 800c012:	4619      	mov	r1, r3
 800c014:	f04f 0c0a 	mov.w	ip, #10
 800c018:	4620      	mov	r0, r4
 800c01a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c01e:	3a30      	subs	r2, #48	; 0x30
 800c020:	2a09      	cmp	r2, #9
 800c022:	d903      	bls.n	800c02c <_vfiprintf_r+0x1d0>
 800c024:	2b00      	cmp	r3, #0
 800c026:	d0c6      	beq.n	800bfb6 <_vfiprintf_r+0x15a>
 800c028:	9105      	str	r1, [sp, #20]
 800c02a:	e7c4      	b.n	800bfb6 <_vfiprintf_r+0x15a>
 800c02c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c030:	4604      	mov	r4, r0
 800c032:	2301      	movs	r3, #1
 800c034:	e7f0      	b.n	800c018 <_vfiprintf_r+0x1bc>
 800c036:	ab03      	add	r3, sp, #12
 800c038:	9300      	str	r3, [sp, #0]
 800c03a:	462a      	mov	r2, r5
 800c03c:	4b12      	ldr	r3, [pc, #72]	; (800c088 <_vfiprintf_r+0x22c>)
 800c03e:	a904      	add	r1, sp, #16
 800c040:	4630      	mov	r0, r6
 800c042:	f3af 8000 	nop.w
 800c046:	4607      	mov	r7, r0
 800c048:	1c78      	adds	r0, r7, #1
 800c04a:	d1d6      	bne.n	800bffa <_vfiprintf_r+0x19e>
 800c04c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c04e:	07d9      	lsls	r1, r3, #31
 800c050:	d405      	bmi.n	800c05e <_vfiprintf_r+0x202>
 800c052:	89ab      	ldrh	r3, [r5, #12]
 800c054:	059a      	lsls	r2, r3, #22
 800c056:	d402      	bmi.n	800c05e <_vfiprintf_r+0x202>
 800c058:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c05a:	f7ff fd03 	bl	800ba64 <__retarget_lock_release_recursive>
 800c05e:	89ab      	ldrh	r3, [r5, #12]
 800c060:	065b      	lsls	r3, r3, #25
 800c062:	f53f af1d 	bmi.w	800bea0 <_vfiprintf_r+0x44>
 800c066:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c068:	e71c      	b.n	800bea4 <_vfiprintf_r+0x48>
 800c06a:	ab03      	add	r3, sp, #12
 800c06c:	9300      	str	r3, [sp, #0]
 800c06e:	462a      	mov	r2, r5
 800c070:	4b05      	ldr	r3, [pc, #20]	; (800c088 <_vfiprintf_r+0x22c>)
 800c072:	a904      	add	r1, sp, #16
 800c074:	4630      	mov	r0, r6
 800c076:	f000 f879 	bl	800c16c <_printf_i>
 800c07a:	e7e4      	b.n	800c046 <_vfiprintf_r+0x1ea>
 800c07c:	0800ca27 	.word	0x0800ca27
 800c080:	0800ca31 	.word	0x0800ca31
 800c084:	00000000 	.word	0x00000000
 800c088:	0800be39 	.word	0x0800be39
 800c08c:	0800ca2d 	.word	0x0800ca2d

0800c090 <_printf_common>:
 800c090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c094:	4616      	mov	r6, r2
 800c096:	4699      	mov	r9, r3
 800c098:	688a      	ldr	r2, [r1, #8]
 800c09a:	690b      	ldr	r3, [r1, #16]
 800c09c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c0a0:	4293      	cmp	r3, r2
 800c0a2:	bfb8      	it	lt
 800c0a4:	4613      	movlt	r3, r2
 800c0a6:	6033      	str	r3, [r6, #0]
 800c0a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c0ac:	4607      	mov	r7, r0
 800c0ae:	460c      	mov	r4, r1
 800c0b0:	b10a      	cbz	r2, 800c0b6 <_printf_common+0x26>
 800c0b2:	3301      	adds	r3, #1
 800c0b4:	6033      	str	r3, [r6, #0]
 800c0b6:	6823      	ldr	r3, [r4, #0]
 800c0b8:	0699      	lsls	r1, r3, #26
 800c0ba:	bf42      	ittt	mi
 800c0bc:	6833      	ldrmi	r3, [r6, #0]
 800c0be:	3302      	addmi	r3, #2
 800c0c0:	6033      	strmi	r3, [r6, #0]
 800c0c2:	6825      	ldr	r5, [r4, #0]
 800c0c4:	f015 0506 	ands.w	r5, r5, #6
 800c0c8:	d106      	bne.n	800c0d8 <_printf_common+0x48>
 800c0ca:	f104 0a19 	add.w	sl, r4, #25
 800c0ce:	68e3      	ldr	r3, [r4, #12]
 800c0d0:	6832      	ldr	r2, [r6, #0]
 800c0d2:	1a9b      	subs	r3, r3, r2
 800c0d4:	42ab      	cmp	r3, r5
 800c0d6:	dc26      	bgt.n	800c126 <_printf_common+0x96>
 800c0d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c0dc:	1e13      	subs	r3, r2, #0
 800c0de:	6822      	ldr	r2, [r4, #0]
 800c0e0:	bf18      	it	ne
 800c0e2:	2301      	movne	r3, #1
 800c0e4:	0692      	lsls	r2, r2, #26
 800c0e6:	d42b      	bmi.n	800c140 <_printf_common+0xb0>
 800c0e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c0ec:	4649      	mov	r1, r9
 800c0ee:	4638      	mov	r0, r7
 800c0f0:	47c0      	blx	r8
 800c0f2:	3001      	adds	r0, #1
 800c0f4:	d01e      	beq.n	800c134 <_printf_common+0xa4>
 800c0f6:	6823      	ldr	r3, [r4, #0]
 800c0f8:	6922      	ldr	r2, [r4, #16]
 800c0fa:	f003 0306 	and.w	r3, r3, #6
 800c0fe:	2b04      	cmp	r3, #4
 800c100:	bf02      	ittt	eq
 800c102:	68e5      	ldreq	r5, [r4, #12]
 800c104:	6833      	ldreq	r3, [r6, #0]
 800c106:	1aed      	subeq	r5, r5, r3
 800c108:	68a3      	ldr	r3, [r4, #8]
 800c10a:	bf0c      	ite	eq
 800c10c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c110:	2500      	movne	r5, #0
 800c112:	4293      	cmp	r3, r2
 800c114:	bfc4      	itt	gt
 800c116:	1a9b      	subgt	r3, r3, r2
 800c118:	18ed      	addgt	r5, r5, r3
 800c11a:	2600      	movs	r6, #0
 800c11c:	341a      	adds	r4, #26
 800c11e:	42b5      	cmp	r5, r6
 800c120:	d11a      	bne.n	800c158 <_printf_common+0xc8>
 800c122:	2000      	movs	r0, #0
 800c124:	e008      	b.n	800c138 <_printf_common+0xa8>
 800c126:	2301      	movs	r3, #1
 800c128:	4652      	mov	r2, sl
 800c12a:	4649      	mov	r1, r9
 800c12c:	4638      	mov	r0, r7
 800c12e:	47c0      	blx	r8
 800c130:	3001      	adds	r0, #1
 800c132:	d103      	bne.n	800c13c <_printf_common+0xac>
 800c134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c13c:	3501      	adds	r5, #1
 800c13e:	e7c6      	b.n	800c0ce <_printf_common+0x3e>
 800c140:	18e1      	adds	r1, r4, r3
 800c142:	1c5a      	adds	r2, r3, #1
 800c144:	2030      	movs	r0, #48	; 0x30
 800c146:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c14a:	4422      	add	r2, r4
 800c14c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c150:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c154:	3302      	adds	r3, #2
 800c156:	e7c7      	b.n	800c0e8 <_printf_common+0x58>
 800c158:	2301      	movs	r3, #1
 800c15a:	4622      	mov	r2, r4
 800c15c:	4649      	mov	r1, r9
 800c15e:	4638      	mov	r0, r7
 800c160:	47c0      	blx	r8
 800c162:	3001      	adds	r0, #1
 800c164:	d0e6      	beq.n	800c134 <_printf_common+0xa4>
 800c166:	3601      	adds	r6, #1
 800c168:	e7d9      	b.n	800c11e <_printf_common+0x8e>
	...

0800c16c <_printf_i>:
 800c16c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c170:	7e0f      	ldrb	r7, [r1, #24]
 800c172:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c174:	2f78      	cmp	r7, #120	; 0x78
 800c176:	4691      	mov	r9, r2
 800c178:	4680      	mov	r8, r0
 800c17a:	460c      	mov	r4, r1
 800c17c:	469a      	mov	sl, r3
 800c17e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c182:	d807      	bhi.n	800c194 <_printf_i+0x28>
 800c184:	2f62      	cmp	r7, #98	; 0x62
 800c186:	d80a      	bhi.n	800c19e <_printf_i+0x32>
 800c188:	2f00      	cmp	r7, #0
 800c18a:	f000 80d4 	beq.w	800c336 <_printf_i+0x1ca>
 800c18e:	2f58      	cmp	r7, #88	; 0x58
 800c190:	f000 80c0 	beq.w	800c314 <_printf_i+0x1a8>
 800c194:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c198:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c19c:	e03a      	b.n	800c214 <_printf_i+0xa8>
 800c19e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c1a2:	2b15      	cmp	r3, #21
 800c1a4:	d8f6      	bhi.n	800c194 <_printf_i+0x28>
 800c1a6:	a101      	add	r1, pc, #4	; (adr r1, 800c1ac <_printf_i+0x40>)
 800c1a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c1ac:	0800c205 	.word	0x0800c205
 800c1b0:	0800c219 	.word	0x0800c219
 800c1b4:	0800c195 	.word	0x0800c195
 800c1b8:	0800c195 	.word	0x0800c195
 800c1bc:	0800c195 	.word	0x0800c195
 800c1c0:	0800c195 	.word	0x0800c195
 800c1c4:	0800c219 	.word	0x0800c219
 800c1c8:	0800c195 	.word	0x0800c195
 800c1cc:	0800c195 	.word	0x0800c195
 800c1d0:	0800c195 	.word	0x0800c195
 800c1d4:	0800c195 	.word	0x0800c195
 800c1d8:	0800c31d 	.word	0x0800c31d
 800c1dc:	0800c245 	.word	0x0800c245
 800c1e0:	0800c2d7 	.word	0x0800c2d7
 800c1e4:	0800c195 	.word	0x0800c195
 800c1e8:	0800c195 	.word	0x0800c195
 800c1ec:	0800c33f 	.word	0x0800c33f
 800c1f0:	0800c195 	.word	0x0800c195
 800c1f4:	0800c245 	.word	0x0800c245
 800c1f8:	0800c195 	.word	0x0800c195
 800c1fc:	0800c195 	.word	0x0800c195
 800c200:	0800c2df 	.word	0x0800c2df
 800c204:	682b      	ldr	r3, [r5, #0]
 800c206:	1d1a      	adds	r2, r3, #4
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	602a      	str	r2, [r5, #0]
 800c20c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c210:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c214:	2301      	movs	r3, #1
 800c216:	e09f      	b.n	800c358 <_printf_i+0x1ec>
 800c218:	6820      	ldr	r0, [r4, #0]
 800c21a:	682b      	ldr	r3, [r5, #0]
 800c21c:	0607      	lsls	r7, r0, #24
 800c21e:	f103 0104 	add.w	r1, r3, #4
 800c222:	6029      	str	r1, [r5, #0]
 800c224:	d501      	bpl.n	800c22a <_printf_i+0xbe>
 800c226:	681e      	ldr	r6, [r3, #0]
 800c228:	e003      	b.n	800c232 <_printf_i+0xc6>
 800c22a:	0646      	lsls	r6, r0, #25
 800c22c:	d5fb      	bpl.n	800c226 <_printf_i+0xba>
 800c22e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c232:	2e00      	cmp	r6, #0
 800c234:	da03      	bge.n	800c23e <_printf_i+0xd2>
 800c236:	232d      	movs	r3, #45	; 0x2d
 800c238:	4276      	negs	r6, r6
 800c23a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c23e:	485a      	ldr	r0, [pc, #360]	; (800c3a8 <_printf_i+0x23c>)
 800c240:	230a      	movs	r3, #10
 800c242:	e012      	b.n	800c26a <_printf_i+0xfe>
 800c244:	682b      	ldr	r3, [r5, #0]
 800c246:	6820      	ldr	r0, [r4, #0]
 800c248:	1d19      	adds	r1, r3, #4
 800c24a:	6029      	str	r1, [r5, #0]
 800c24c:	0605      	lsls	r5, r0, #24
 800c24e:	d501      	bpl.n	800c254 <_printf_i+0xe8>
 800c250:	681e      	ldr	r6, [r3, #0]
 800c252:	e002      	b.n	800c25a <_printf_i+0xee>
 800c254:	0641      	lsls	r1, r0, #25
 800c256:	d5fb      	bpl.n	800c250 <_printf_i+0xe4>
 800c258:	881e      	ldrh	r6, [r3, #0]
 800c25a:	4853      	ldr	r0, [pc, #332]	; (800c3a8 <_printf_i+0x23c>)
 800c25c:	2f6f      	cmp	r7, #111	; 0x6f
 800c25e:	bf0c      	ite	eq
 800c260:	2308      	moveq	r3, #8
 800c262:	230a      	movne	r3, #10
 800c264:	2100      	movs	r1, #0
 800c266:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c26a:	6865      	ldr	r5, [r4, #4]
 800c26c:	60a5      	str	r5, [r4, #8]
 800c26e:	2d00      	cmp	r5, #0
 800c270:	bfa2      	ittt	ge
 800c272:	6821      	ldrge	r1, [r4, #0]
 800c274:	f021 0104 	bicge.w	r1, r1, #4
 800c278:	6021      	strge	r1, [r4, #0]
 800c27a:	b90e      	cbnz	r6, 800c280 <_printf_i+0x114>
 800c27c:	2d00      	cmp	r5, #0
 800c27e:	d04b      	beq.n	800c318 <_printf_i+0x1ac>
 800c280:	4615      	mov	r5, r2
 800c282:	fbb6 f1f3 	udiv	r1, r6, r3
 800c286:	fb03 6711 	mls	r7, r3, r1, r6
 800c28a:	5dc7      	ldrb	r7, [r0, r7]
 800c28c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c290:	4637      	mov	r7, r6
 800c292:	42bb      	cmp	r3, r7
 800c294:	460e      	mov	r6, r1
 800c296:	d9f4      	bls.n	800c282 <_printf_i+0x116>
 800c298:	2b08      	cmp	r3, #8
 800c29a:	d10b      	bne.n	800c2b4 <_printf_i+0x148>
 800c29c:	6823      	ldr	r3, [r4, #0]
 800c29e:	07de      	lsls	r6, r3, #31
 800c2a0:	d508      	bpl.n	800c2b4 <_printf_i+0x148>
 800c2a2:	6923      	ldr	r3, [r4, #16]
 800c2a4:	6861      	ldr	r1, [r4, #4]
 800c2a6:	4299      	cmp	r1, r3
 800c2a8:	bfde      	ittt	le
 800c2aa:	2330      	movle	r3, #48	; 0x30
 800c2ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c2b0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c2b4:	1b52      	subs	r2, r2, r5
 800c2b6:	6122      	str	r2, [r4, #16]
 800c2b8:	f8cd a000 	str.w	sl, [sp]
 800c2bc:	464b      	mov	r3, r9
 800c2be:	aa03      	add	r2, sp, #12
 800c2c0:	4621      	mov	r1, r4
 800c2c2:	4640      	mov	r0, r8
 800c2c4:	f7ff fee4 	bl	800c090 <_printf_common>
 800c2c8:	3001      	adds	r0, #1
 800c2ca:	d14a      	bne.n	800c362 <_printf_i+0x1f6>
 800c2cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c2d0:	b004      	add	sp, #16
 800c2d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2d6:	6823      	ldr	r3, [r4, #0]
 800c2d8:	f043 0320 	orr.w	r3, r3, #32
 800c2dc:	6023      	str	r3, [r4, #0]
 800c2de:	4833      	ldr	r0, [pc, #204]	; (800c3ac <_printf_i+0x240>)
 800c2e0:	2778      	movs	r7, #120	; 0x78
 800c2e2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c2e6:	6823      	ldr	r3, [r4, #0]
 800c2e8:	6829      	ldr	r1, [r5, #0]
 800c2ea:	061f      	lsls	r7, r3, #24
 800c2ec:	f851 6b04 	ldr.w	r6, [r1], #4
 800c2f0:	d402      	bmi.n	800c2f8 <_printf_i+0x18c>
 800c2f2:	065f      	lsls	r7, r3, #25
 800c2f4:	bf48      	it	mi
 800c2f6:	b2b6      	uxthmi	r6, r6
 800c2f8:	07df      	lsls	r7, r3, #31
 800c2fa:	bf48      	it	mi
 800c2fc:	f043 0320 	orrmi.w	r3, r3, #32
 800c300:	6029      	str	r1, [r5, #0]
 800c302:	bf48      	it	mi
 800c304:	6023      	strmi	r3, [r4, #0]
 800c306:	b91e      	cbnz	r6, 800c310 <_printf_i+0x1a4>
 800c308:	6823      	ldr	r3, [r4, #0]
 800c30a:	f023 0320 	bic.w	r3, r3, #32
 800c30e:	6023      	str	r3, [r4, #0]
 800c310:	2310      	movs	r3, #16
 800c312:	e7a7      	b.n	800c264 <_printf_i+0xf8>
 800c314:	4824      	ldr	r0, [pc, #144]	; (800c3a8 <_printf_i+0x23c>)
 800c316:	e7e4      	b.n	800c2e2 <_printf_i+0x176>
 800c318:	4615      	mov	r5, r2
 800c31a:	e7bd      	b.n	800c298 <_printf_i+0x12c>
 800c31c:	682b      	ldr	r3, [r5, #0]
 800c31e:	6826      	ldr	r6, [r4, #0]
 800c320:	6961      	ldr	r1, [r4, #20]
 800c322:	1d18      	adds	r0, r3, #4
 800c324:	6028      	str	r0, [r5, #0]
 800c326:	0635      	lsls	r5, r6, #24
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	d501      	bpl.n	800c330 <_printf_i+0x1c4>
 800c32c:	6019      	str	r1, [r3, #0]
 800c32e:	e002      	b.n	800c336 <_printf_i+0x1ca>
 800c330:	0670      	lsls	r0, r6, #25
 800c332:	d5fb      	bpl.n	800c32c <_printf_i+0x1c0>
 800c334:	8019      	strh	r1, [r3, #0]
 800c336:	2300      	movs	r3, #0
 800c338:	6123      	str	r3, [r4, #16]
 800c33a:	4615      	mov	r5, r2
 800c33c:	e7bc      	b.n	800c2b8 <_printf_i+0x14c>
 800c33e:	682b      	ldr	r3, [r5, #0]
 800c340:	1d1a      	adds	r2, r3, #4
 800c342:	602a      	str	r2, [r5, #0]
 800c344:	681d      	ldr	r5, [r3, #0]
 800c346:	6862      	ldr	r2, [r4, #4]
 800c348:	2100      	movs	r1, #0
 800c34a:	4628      	mov	r0, r5
 800c34c:	f7f3 ff48 	bl	80001e0 <memchr>
 800c350:	b108      	cbz	r0, 800c356 <_printf_i+0x1ea>
 800c352:	1b40      	subs	r0, r0, r5
 800c354:	6060      	str	r0, [r4, #4]
 800c356:	6863      	ldr	r3, [r4, #4]
 800c358:	6123      	str	r3, [r4, #16]
 800c35a:	2300      	movs	r3, #0
 800c35c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c360:	e7aa      	b.n	800c2b8 <_printf_i+0x14c>
 800c362:	6923      	ldr	r3, [r4, #16]
 800c364:	462a      	mov	r2, r5
 800c366:	4649      	mov	r1, r9
 800c368:	4640      	mov	r0, r8
 800c36a:	47d0      	blx	sl
 800c36c:	3001      	adds	r0, #1
 800c36e:	d0ad      	beq.n	800c2cc <_printf_i+0x160>
 800c370:	6823      	ldr	r3, [r4, #0]
 800c372:	079b      	lsls	r3, r3, #30
 800c374:	d413      	bmi.n	800c39e <_printf_i+0x232>
 800c376:	68e0      	ldr	r0, [r4, #12]
 800c378:	9b03      	ldr	r3, [sp, #12]
 800c37a:	4298      	cmp	r0, r3
 800c37c:	bfb8      	it	lt
 800c37e:	4618      	movlt	r0, r3
 800c380:	e7a6      	b.n	800c2d0 <_printf_i+0x164>
 800c382:	2301      	movs	r3, #1
 800c384:	4632      	mov	r2, r6
 800c386:	4649      	mov	r1, r9
 800c388:	4640      	mov	r0, r8
 800c38a:	47d0      	blx	sl
 800c38c:	3001      	adds	r0, #1
 800c38e:	d09d      	beq.n	800c2cc <_printf_i+0x160>
 800c390:	3501      	adds	r5, #1
 800c392:	68e3      	ldr	r3, [r4, #12]
 800c394:	9903      	ldr	r1, [sp, #12]
 800c396:	1a5b      	subs	r3, r3, r1
 800c398:	42ab      	cmp	r3, r5
 800c39a:	dcf2      	bgt.n	800c382 <_printf_i+0x216>
 800c39c:	e7eb      	b.n	800c376 <_printf_i+0x20a>
 800c39e:	2500      	movs	r5, #0
 800c3a0:	f104 0619 	add.w	r6, r4, #25
 800c3a4:	e7f5      	b.n	800c392 <_printf_i+0x226>
 800c3a6:	bf00      	nop
 800c3a8:	0800ca38 	.word	0x0800ca38
 800c3ac:	0800ca49 	.word	0x0800ca49

0800c3b0 <__swbuf_r>:
 800c3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3b2:	460e      	mov	r6, r1
 800c3b4:	4614      	mov	r4, r2
 800c3b6:	4605      	mov	r5, r0
 800c3b8:	b118      	cbz	r0, 800c3c2 <__swbuf_r+0x12>
 800c3ba:	6a03      	ldr	r3, [r0, #32]
 800c3bc:	b90b      	cbnz	r3, 800c3c2 <__swbuf_r+0x12>
 800c3be:	f7ff faab 	bl	800b918 <__sinit>
 800c3c2:	69a3      	ldr	r3, [r4, #24]
 800c3c4:	60a3      	str	r3, [r4, #8]
 800c3c6:	89a3      	ldrh	r3, [r4, #12]
 800c3c8:	071a      	lsls	r2, r3, #28
 800c3ca:	d525      	bpl.n	800c418 <__swbuf_r+0x68>
 800c3cc:	6923      	ldr	r3, [r4, #16]
 800c3ce:	b31b      	cbz	r3, 800c418 <__swbuf_r+0x68>
 800c3d0:	6823      	ldr	r3, [r4, #0]
 800c3d2:	6922      	ldr	r2, [r4, #16]
 800c3d4:	1a98      	subs	r0, r3, r2
 800c3d6:	6963      	ldr	r3, [r4, #20]
 800c3d8:	b2f6      	uxtb	r6, r6
 800c3da:	4283      	cmp	r3, r0
 800c3dc:	4637      	mov	r7, r6
 800c3de:	dc04      	bgt.n	800c3ea <__swbuf_r+0x3a>
 800c3e0:	4621      	mov	r1, r4
 800c3e2:	4628      	mov	r0, r5
 800c3e4:	f7ff fc46 	bl	800bc74 <_fflush_r>
 800c3e8:	b9e0      	cbnz	r0, 800c424 <__swbuf_r+0x74>
 800c3ea:	68a3      	ldr	r3, [r4, #8]
 800c3ec:	3b01      	subs	r3, #1
 800c3ee:	60a3      	str	r3, [r4, #8]
 800c3f0:	6823      	ldr	r3, [r4, #0]
 800c3f2:	1c5a      	adds	r2, r3, #1
 800c3f4:	6022      	str	r2, [r4, #0]
 800c3f6:	701e      	strb	r6, [r3, #0]
 800c3f8:	6962      	ldr	r2, [r4, #20]
 800c3fa:	1c43      	adds	r3, r0, #1
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	d004      	beq.n	800c40a <__swbuf_r+0x5a>
 800c400:	89a3      	ldrh	r3, [r4, #12]
 800c402:	07db      	lsls	r3, r3, #31
 800c404:	d506      	bpl.n	800c414 <__swbuf_r+0x64>
 800c406:	2e0a      	cmp	r6, #10
 800c408:	d104      	bne.n	800c414 <__swbuf_r+0x64>
 800c40a:	4621      	mov	r1, r4
 800c40c:	4628      	mov	r0, r5
 800c40e:	f7ff fc31 	bl	800bc74 <_fflush_r>
 800c412:	b938      	cbnz	r0, 800c424 <__swbuf_r+0x74>
 800c414:	4638      	mov	r0, r7
 800c416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c418:	4621      	mov	r1, r4
 800c41a:	4628      	mov	r0, r5
 800c41c:	f000 f806 	bl	800c42c <__swsetup_r>
 800c420:	2800      	cmp	r0, #0
 800c422:	d0d5      	beq.n	800c3d0 <__swbuf_r+0x20>
 800c424:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c428:	e7f4      	b.n	800c414 <__swbuf_r+0x64>
	...

0800c42c <__swsetup_r>:
 800c42c:	b538      	push	{r3, r4, r5, lr}
 800c42e:	4b2a      	ldr	r3, [pc, #168]	; (800c4d8 <__swsetup_r+0xac>)
 800c430:	4605      	mov	r5, r0
 800c432:	6818      	ldr	r0, [r3, #0]
 800c434:	460c      	mov	r4, r1
 800c436:	b118      	cbz	r0, 800c440 <__swsetup_r+0x14>
 800c438:	6a03      	ldr	r3, [r0, #32]
 800c43a:	b90b      	cbnz	r3, 800c440 <__swsetup_r+0x14>
 800c43c:	f7ff fa6c 	bl	800b918 <__sinit>
 800c440:	89a3      	ldrh	r3, [r4, #12]
 800c442:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c446:	0718      	lsls	r0, r3, #28
 800c448:	d422      	bmi.n	800c490 <__swsetup_r+0x64>
 800c44a:	06d9      	lsls	r1, r3, #27
 800c44c:	d407      	bmi.n	800c45e <__swsetup_r+0x32>
 800c44e:	2309      	movs	r3, #9
 800c450:	602b      	str	r3, [r5, #0]
 800c452:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c456:	81a3      	strh	r3, [r4, #12]
 800c458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c45c:	e034      	b.n	800c4c8 <__swsetup_r+0x9c>
 800c45e:	0758      	lsls	r0, r3, #29
 800c460:	d512      	bpl.n	800c488 <__swsetup_r+0x5c>
 800c462:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c464:	b141      	cbz	r1, 800c478 <__swsetup_r+0x4c>
 800c466:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c46a:	4299      	cmp	r1, r3
 800c46c:	d002      	beq.n	800c474 <__swsetup_r+0x48>
 800c46e:	4628      	mov	r0, r5
 800c470:	f7ff fb2e 	bl	800bad0 <_free_r>
 800c474:	2300      	movs	r3, #0
 800c476:	6363      	str	r3, [r4, #52]	; 0x34
 800c478:	89a3      	ldrh	r3, [r4, #12]
 800c47a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c47e:	81a3      	strh	r3, [r4, #12]
 800c480:	2300      	movs	r3, #0
 800c482:	6063      	str	r3, [r4, #4]
 800c484:	6923      	ldr	r3, [r4, #16]
 800c486:	6023      	str	r3, [r4, #0]
 800c488:	89a3      	ldrh	r3, [r4, #12]
 800c48a:	f043 0308 	orr.w	r3, r3, #8
 800c48e:	81a3      	strh	r3, [r4, #12]
 800c490:	6923      	ldr	r3, [r4, #16]
 800c492:	b94b      	cbnz	r3, 800c4a8 <__swsetup_r+0x7c>
 800c494:	89a3      	ldrh	r3, [r4, #12]
 800c496:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c49a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c49e:	d003      	beq.n	800c4a8 <__swsetup_r+0x7c>
 800c4a0:	4621      	mov	r1, r4
 800c4a2:	4628      	mov	r0, r5
 800c4a4:	f000 f840 	bl	800c528 <__smakebuf_r>
 800c4a8:	89a0      	ldrh	r0, [r4, #12]
 800c4aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c4ae:	f010 0301 	ands.w	r3, r0, #1
 800c4b2:	d00a      	beq.n	800c4ca <__swsetup_r+0x9e>
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	60a3      	str	r3, [r4, #8]
 800c4b8:	6963      	ldr	r3, [r4, #20]
 800c4ba:	425b      	negs	r3, r3
 800c4bc:	61a3      	str	r3, [r4, #24]
 800c4be:	6923      	ldr	r3, [r4, #16]
 800c4c0:	b943      	cbnz	r3, 800c4d4 <__swsetup_r+0xa8>
 800c4c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c4c6:	d1c4      	bne.n	800c452 <__swsetup_r+0x26>
 800c4c8:	bd38      	pop	{r3, r4, r5, pc}
 800c4ca:	0781      	lsls	r1, r0, #30
 800c4cc:	bf58      	it	pl
 800c4ce:	6963      	ldrpl	r3, [r4, #20]
 800c4d0:	60a3      	str	r3, [r4, #8]
 800c4d2:	e7f4      	b.n	800c4be <__swsetup_r+0x92>
 800c4d4:	2000      	movs	r0, #0
 800c4d6:	e7f7      	b.n	800c4c8 <__swsetup_r+0x9c>
 800c4d8:	20000410 	.word	0x20000410

0800c4dc <__swhatbuf_r>:
 800c4dc:	b570      	push	{r4, r5, r6, lr}
 800c4de:	460c      	mov	r4, r1
 800c4e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4e4:	2900      	cmp	r1, #0
 800c4e6:	b096      	sub	sp, #88	; 0x58
 800c4e8:	4615      	mov	r5, r2
 800c4ea:	461e      	mov	r6, r3
 800c4ec:	da0d      	bge.n	800c50a <__swhatbuf_r+0x2e>
 800c4ee:	89a3      	ldrh	r3, [r4, #12]
 800c4f0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c4f4:	f04f 0100 	mov.w	r1, #0
 800c4f8:	bf0c      	ite	eq
 800c4fa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c4fe:	2340      	movne	r3, #64	; 0x40
 800c500:	2000      	movs	r0, #0
 800c502:	6031      	str	r1, [r6, #0]
 800c504:	602b      	str	r3, [r5, #0]
 800c506:	b016      	add	sp, #88	; 0x58
 800c508:	bd70      	pop	{r4, r5, r6, pc}
 800c50a:	466a      	mov	r2, sp
 800c50c:	f000 f848 	bl	800c5a0 <_fstat_r>
 800c510:	2800      	cmp	r0, #0
 800c512:	dbec      	blt.n	800c4ee <__swhatbuf_r+0x12>
 800c514:	9901      	ldr	r1, [sp, #4]
 800c516:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c51a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c51e:	4259      	negs	r1, r3
 800c520:	4159      	adcs	r1, r3
 800c522:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c526:	e7eb      	b.n	800c500 <__swhatbuf_r+0x24>

0800c528 <__smakebuf_r>:
 800c528:	898b      	ldrh	r3, [r1, #12]
 800c52a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c52c:	079d      	lsls	r5, r3, #30
 800c52e:	4606      	mov	r6, r0
 800c530:	460c      	mov	r4, r1
 800c532:	d507      	bpl.n	800c544 <__smakebuf_r+0x1c>
 800c534:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c538:	6023      	str	r3, [r4, #0]
 800c53a:	6123      	str	r3, [r4, #16]
 800c53c:	2301      	movs	r3, #1
 800c53e:	6163      	str	r3, [r4, #20]
 800c540:	b002      	add	sp, #8
 800c542:	bd70      	pop	{r4, r5, r6, pc}
 800c544:	ab01      	add	r3, sp, #4
 800c546:	466a      	mov	r2, sp
 800c548:	f7ff ffc8 	bl	800c4dc <__swhatbuf_r>
 800c54c:	9900      	ldr	r1, [sp, #0]
 800c54e:	4605      	mov	r5, r0
 800c550:	4630      	mov	r0, r6
 800c552:	f7ff f89b 	bl	800b68c <_malloc_r>
 800c556:	b948      	cbnz	r0, 800c56c <__smakebuf_r+0x44>
 800c558:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c55c:	059a      	lsls	r2, r3, #22
 800c55e:	d4ef      	bmi.n	800c540 <__smakebuf_r+0x18>
 800c560:	f023 0303 	bic.w	r3, r3, #3
 800c564:	f043 0302 	orr.w	r3, r3, #2
 800c568:	81a3      	strh	r3, [r4, #12]
 800c56a:	e7e3      	b.n	800c534 <__smakebuf_r+0xc>
 800c56c:	89a3      	ldrh	r3, [r4, #12]
 800c56e:	6020      	str	r0, [r4, #0]
 800c570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c574:	81a3      	strh	r3, [r4, #12]
 800c576:	9b00      	ldr	r3, [sp, #0]
 800c578:	6163      	str	r3, [r4, #20]
 800c57a:	9b01      	ldr	r3, [sp, #4]
 800c57c:	6120      	str	r0, [r4, #16]
 800c57e:	b15b      	cbz	r3, 800c598 <__smakebuf_r+0x70>
 800c580:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c584:	4630      	mov	r0, r6
 800c586:	f000 f81d 	bl	800c5c4 <_isatty_r>
 800c58a:	b128      	cbz	r0, 800c598 <__smakebuf_r+0x70>
 800c58c:	89a3      	ldrh	r3, [r4, #12]
 800c58e:	f023 0303 	bic.w	r3, r3, #3
 800c592:	f043 0301 	orr.w	r3, r3, #1
 800c596:	81a3      	strh	r3, [r4, #12]
 800c598:	89a3      	ldrh	r3, [r4, #12]
 800c59a:	431d      	orrs	r5, r3
 800c59c:	81a5      	strh	r5, [r4, #12]
 800c59e:	e7cf      	b.n	800c540 <__smakebuf_r+0x18>

0800c5a0 <_fstat_r>:
 800c5a0:	b538      	push	{r3, r4, r5, lr}
 800c5a2:	4d07      	ldr	r5, [pc, #28]	; (800c5c0 <_fstat_r+0x20>)
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	4604      	mov	r4, r0
 800c5a8:	4608      	mov	r0, r1
 800c5aa:	4611      	mov	r1, r2
 800c5ac:	602b      	str	r3, [r5, #0]
 800c5ae:	f7fe fe6a 	bl	800b286 <_fstat>
 800c5b2:	1c43      	adds	r3, r0, #1
 800c5b4:	d102      	bne.n	800c5bc <_fstat_r+0x1c>
 800c5b6:	682b      	ldr	r3, [r5, #0]
 800c5b8:	b103      	cbz	r3, 800c5bc <_fstat_r+0x1c>
 800c5ba:	6023      	str	r3, [r4, #0]
 800c5bc:	bd38      	pop	{r3, r4, r5, pc}
 800c5be:	bf00      	nop
 800c5c0:	20006118 	.word	0x20006118

0800c5c4 <_isatty_r>:
 800c5c4:	b538      	push	{r3, r4, r5, lr}
 800c5c6:	4d06      	ldr	r5, [pc, #24]	; (800c5e0 <_isatty_r+0x1c>)
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	4604      	mov	r4, r0
 800c5cc:	4608      	mov	r0, r1
 800c5ce:	602b      	str	r3, [r5, #0]
 800c5d0:	f7fe fe69 	bl	800b2a6 <_isatty>
 800c5d4:	1c43      	adds	r3, r0, #1
 800c5d6:	d102      	bne.n	800c5de <_isatty_r+0x1a>
 800c5d8:	682b      	ldr	r3, [r5, #0]
 800c5da:	b103      	cbz	r3, 800c5de <_isatty_r+0x1a>
 800c5dc:	6023      	str	r3, [r4, #0]
 800c5de:	bd38      	pop	{r3, r4, r5, pc}
 800c5e0:	20006118 	.word	0x20006118

0800c5e4 <_raise_r>:
 800c5e4:	291f      	cmp	r1, #31
 800c5e6:	b538      	push	{r3, r4, r5, lr}
 800c5e8:	4604      	mov	r4, r0
 800c5ea:	460d      	mov	r5, r1
 800c5ec:	d904      	bls.n	800c5f8 <_raise_r+0x14>
 800c5ee:	2316      	movs	r3, #22
 800c5f0:	6003      	str	r3, [r0, #0]
 800c5f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c5f6:	bd38      	pop	{r3, r4, r5, pc}
 800c5f8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c5fa:	b112      	cbz	r2, 800c602 <_raise_r+0x1e>
 800c5fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c600:	b94b      	cbnz	r3, 800c616 <_raise_r+0x32>
 800c602:	4620      	mov	r0, r4
 800c604:	f000 f830 	bl	800c668 <_getpid_r>
 800c608:	462a      	mov	r2, r5
 800c60a:	4601      	mov	r1, r0
 800c60c:	4620      	mov	r0, r4
 800c60e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c612:	f000 b817 	b.w	800c644 <_kill_r>
 800c616:	2b01      	cmp	r3, #1
 800c618:	d00a      	beq.n	800c630 <_raise_r+0x4c>
 800c61a:	1c59      	adds	r1, r3, #1
 800c61c:	d103      	bne.n	800c626 <_raise_r+0x42>
 800c61e:	2316      	movs	r3, #22
 800c620:	6003      	str	r3, [r0, #0]
 800c622:	2001      	movs	r0, #1
 800c624:	e7e7      	b.n	800c5f6 <_raise_r+0x12>
 800c626:	2400      	movs	r4, #0
 800c628:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c62c:	4628      	mov	r0, r5
 800c62e:	4798      	blx	r3
 800c630:	2000      	movs	r0, #0
 800c632:	e7e0      	b.n	800c5f6 <_raise_r+0x12>

0800c634 <raise>:
 800c634:	4b02      	ldr	r3, [pc, #8]	; (800c640 <raise+0xc>)
 800c636:	4601      	mov	r1, r0
 800c638:	6818      	ldr	r0, [r3, #0]
 800c63a:	f7ff bfd3 	b.w	800c5e4 <_raise_r>
 800c63e:	bf00      	nop
 800c640:	20000410 	.word	0x20000410

0800c644 <_kill_r>:
 800c644:	b538      	push	{r3, r4, r5, lr}
 800c646:	4d07      	ldr	r5, [pc, #28]	; (800c664 <_kill_r+0x20>)
 800c648:	2300      	movs	r3, #0
 800c64a:	4604      	mov	r4, r0
 800c64c:	4608      	mov	r0, r1
 800c64e:	4611      	mov	r1, r2
 800c650:	602b      	str	r3, [r5, #0]
 800c652:	f7fe fdb9 	bl	800b1c8 <_kill>
 800c656:	1c43      	adds	r3, r0, #1
 800c658:	d102      	bne.n	800c660 <_kill_r+0x1c>
 800c65a:	682b      	ldr	r3, [r5, #0]
 800c65c:	b103      	cbz	r3, 800c660 <_kill_r+0x1c>
 800c65e:	6023      	str	r3, [r4, #0]
 800c660:	bd38      	pop	{r3, r4, r5, pc}
 800c662:	bf00      	nop
 800c664:	20006118 	.word	0x20006118

0800c668 <_getpid_r>:
 800c668:	f7fe bda6 	b.w	800b1b8 <_getpid>

0800c66c <_gettimeofday>:
 800c66c:	4b02      	ldr	r3, [pc, #8]	; (800c678 <_gettimeofday+0xc>)
 800c66e:	2258      	movs	r2, #88	; 0x58
 800c670:	601a      	str	r2, [r3, #0]
 800c672:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c676:	4770      	bx	lr
 800c678:	20006118 	.word	0x20006118

0800c67c <_init>:
 800c67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c67e:	bf00      	nop
 800c680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c682:	bc08      	pop	{r3}
 800c684:	469e      	mov	lr, r3
 800c686:	4770      	bx	lr

0800c688 <_fini>:
 800c688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c68a:	bf00      	nop
 800c68c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c68e:	bc08      	pop	{r3}
 800c690:	469e      	mov	lr, r3
 800c692:	4770      	bx	lr
